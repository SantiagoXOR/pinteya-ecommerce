62847b14fb7e70b8cc355216c2c7b45b
/**
 * useCategoryNavigation Hook
 * Manages URL navigation for category filters
 * Pinteya E-commerce - Enterprise-ready implementation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get /**
 * Default export for convenience
 */ default () {
        return _default;
    },
    get extractCategoriesFromUrl () {
        return extractCategoriesFromUrl;
    },
    get hasCategories () {
        return hasCategories;
    },
    get useCategoryNavigation () {
        return useCategoryNavigation;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _navigation = require("next/navigation");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const useCategoryNavigation = (options = {})=>{
    const { paramName = 'categories', basePath = '/', debounceDelay = 300, preserveParams = true, onNavigationStart, onNavigationComplete, enableAnalytics = true } = options;
    const router = (0, _navigation.useRouter)();
    const searchParams = (0, _navigation.useSearchParams)();
    const pathname = (0, _navigation.usePathname)();
    const [isNavigating, setIsNavigating] = (0, _react.useState)(false);
    const [debounceTimer, setDebounceTimer] = (0, _react.useState)(null);
    /**
   * Track navigation analytics if enabled
   */ const trackNavigation = (0, _react.useCallback)((categories, action)=>{
        if (!enableAnalytics) {
            return;
        }
        // Track with analytics service
        if (typeof window !== 'undefined' && window.gtag) {
            window.gtag('event', 'category_navigation', {
                event_category: 'navigation',
                event_label: action,
                value: categories.length,
                custom_parameters: {
                    categories: categories.join(','),
                    path: pathname
                }
            });
        }
        // Console log for development
        if (process.env.NODE_ENV === 'development') {}
    }, [
        enableAnalytics,
        pathname
    ]);
    /**
   * Build URL with category parameters
   */ const buildUrl = (0, _react.useCallback)((categories)=>{
        const params = new URLSearchParams();
        // Preserve existing parameters if enabled
        if (preserveParams) {
            searchParams.forEach((value, key)=>{
                if (key !== paramName) {
                    params.set(key, value);
                }
            });
        }
        // Add categories parameter if there are categories
        if (categories.length > 0) {
            params.set(paramName, categories.join(','));
        }
        // Build final URL
        const queryString = params.toString();
        return queryString ? `${basePath}?${queryString}` : basePath;
    }, [
        basePath,
        paramName,
        preserveParams,
        searchParams
    ]);
    /**
   * Perform navigation with debouncing
   */ const performNavigation = (0, _react.useCallback)((url)=>{
        // Clear existing timer
        if (debounceTimer) {
            clearTimeout(debounceTimer);
        }
        // Set navigation state
        setIsNavigating(true);
        onNavigationStart?.();
        // Debounced navigation
        const timer = setTimeout(()=>{
            try {
                router.push(url);
                // Reset navigation state after a short delay
                setTimeout(()=>{
                    setIsNavigating(false);
                    onNavigationComplete?.();
                }, 100);
            } catch (error) {
                console.error('Navigation error:', error);
                setIsNavigating(false);
                onNavigationComplete?.();
            }
        }, debounceDelay);
        setDebounceTimer(timer);
    }, [
        debounceTimer,
        debounceDelay,
        router,
        onNavigationStart,
        onNavigationComplete
    ]);
    /**
   * Navigate to filtered view with selected categories
   */ const navigateToFiltered = (0, _react.useCallback)((categories)=>{
        // Validate categories
        const validCategories = categories.filter((cat)=>typeof cat === 'string' && cat.trim().length > 0);
        // Build URL and navigate
        const url = buildUrl(validCategories);
        performNavigation(url);
        // Track analytics
        trackNavigation(validCategories, 'filter');
    }, [
        buildUrl,
        performNavigation,
        trackNavigation
    ]);
    /**
   * Navigate to home (clear all filters)
   */ const navigateToHome = (0, _react.useCallback)(()=>{
        const url = buildUrl([]);
        performNavigation(url);
        // Track analytics
        trackNavigation([], 'clear');
    }, [
        buildUrl,
        performNavigation,
        trackNavigation
    ]);
    /**
   * Get current URL with categories
   */ const getCurrentUrl = (0, _react.useCallback)(()=>{
        const currentCategories = searchParams.get(paramName);
        const categories = currentCategories ? currentCategories.split(',') : [];
        return buildUrl(categories);
    }, [
        searchParams,
        paramName,
        buildUrl
    ]);
    /**
   * Get current categories from URL
   */ const getCurrentCategories = (0, _react.useCallback)(()=>{
        const categoriesParam = searchParams.get(paramName);
        return categoriesParam ? categoriesParam.split(',').filter(Boolean) : [];
    }, [
        searchParams,
        paramName
    ]);
    /**
   * Check if specific categories are currently active
   */ const areCategoriesToActive = (0, _react.useCallback)((categories)=>{
        const currentCategories = getCurrentCategories();
        return categories.every((cat)=>currentCategories.includes(cat)) && currentCategories.every((cat)=>categories.includes(cat));
    }, [
        getCurrentCategories
    ]);
    /**
   * Cleanup effect for debounce timer
   */ const cleanup = (0, _react.useCallback)(()=>{
        if (debounceTimer) {
            clearTimeout(debounceTimer);
            setDebounceTimer(null);
        }
    }, [
        debounceTimer
    ]);
    // Cleanup on unmount
    _react.default.useEffect(()=>{
        return cleanup;
    }, [
        cleanup
    ]);
    /**
   * Memoized return object for performance
   */ const returnValue = (0, _react.useMemo)(()=>({
            navigateToFiltered,
            navigateToHome,
            getCurrentUrl,
            isNavigating
        }), [
        navigateToFiltered,
        navigateToHome,
        getCurrentUrl,
        isNavigating
    ]);
    return returnValue;
};
const extractCategoriesFromUrl = (url, paramName = 'categories')=>{
    try {
        const urlObj = new URL(url, window.location.origin);
        const categoriesParam = urlObj.searchParams.get(paramName);
        return categoriesParam ? categoriesParam.split(',').filter(Boolean) : [];
    } catch  {
        return [];
    }
};
const hasCategories = (url, paramName = 'categories')=>{
    return extractCategoriesFromUrl(url, paramName).length > 0;
};
const _default = useCategoryNavigation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZUNhdGVnb3J5TmF2aWdhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogdXNlQ2F0ZWdvcnlOYXZpZ2F0aW9uIEhvb2tcclxuICogTWFuYWdlcyBVUkwgbmF2aWdhdGlvbiBmb3IgY2F0ZWdvcnkgZmlsdGVyc1xyXG4gKiBQaW50ZXlhIEUtY29tbWVyY2UgLSBFbnRlcnByaXNlLXJlYWR5IGltcGxlbWVudGF0aW9uXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlUm91dGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVBhdGhuYW1lIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcclxuaW1wb3J0IHR5cGUgeyBDYXRlZ29yeUlkLCBVc2VDYXRlZ29yeU5hdmlnYXRpb25SZXR1cm4gfSBmcm9tICdAL3R5cGVzL2NhdGVnb3JpZXMnO1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGNhdGVnb3J5IG5hdmlnYXRpb24gaG9va1xyXG4gKi9cclxuaW50ZXJmYWNlIFVzZUNhdGVnb3J5TmF2aWdhdGlvbk9wdGlvbnMge1xyXG4gIC8qKiBVUkwgcGFyYW1ldGVyIG5hbWUgZm9yIGNhdGVnb3JpZXMgKi9cclxuICBwYXJhbU5hbWU/OiBzdHJpbmc7XHJcbiAgLyoqIEJhc2UgcGF0aCBmb3IgbmF2aWdhdGlvbiAqL1xyXG4gIGJhc2VQYXRoPzogc3RyaW5nO1xyXG4gIC8qKiBEZWJvdW5jZSBkZWxheSBmb3IgVVJMIHVwZGF0ZXMgaW4gbWlsbGlzZWNvbmRzICovXHJcbiAgZGVib3VuY2VEZWxheT86IG51bWJlcjtcclxuICAvKiogV2hldGhlciB0byBwcmVzZXJ2ZSBvdGhlciBVUkwgcGFyYW1ldGVycyAqL1xyXG4gIHByZXNlcnZlUGFyYW1zPzogYm9vbGVhbjtcclxuICAvKiogQ2FsbGJhY2sgd2hlbiBuYXZpZ2F0aW9uIHN0YXJ0cyAqL1xyXG4gIG9uTmF2aWdhdGlvblN0YXJ0PzogKCkgPT4gdm9pZDtcclxuICAvKiogQ2FsbGJhY2sgd2hlbiBuYXZpZ2F0aW9uIGNvbXBsZXRlcyAqL1xyXG4gIG9uTmF2aWdhdGlvbkNvbXBsZXRlPzogKCkgPT4gdm9pZDtcclxuICAvKiogV2hldGhlciB0byBlbmFibGUgYW5hbHl0aWNzIHRyYWNraW5nICovXHJcbiAgZW5hYmxlQW5hbHl0aWNzPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEN1c3RvbSBob29rIGZvciBtYW5hZ2luZyBjYXRlZ29yeSBmaWx0ZXIgbmF2aWdhdGlvblxyXG4gKiBcclxuICogRmVhdHVyZXM6XHJcbiAqIC0gVVJMIHBhcmFtZXRlciBtYW5hZ2VtZW50XHJcbiAqIC0gRGVib3VuY2VkIG5hdmlnYXRpb25cclxuICogLSBTdGF0ZSBwcmVzZXJ2YXRpb25cclxuICogLSBBbmFseXRpY3MgdHJhY2tpbmdcclxuICogLSBQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cclxuICogXHJcbiAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyBOYXZpZ2F0aW9uIHN0YXRlIGFuZCBhY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlQ2F0ZWdvcnlOYXZpZ2F0aW9uID0gKFxyXG4gIG9wdGlvbnM6IFVzZUNhdGVnb3J5TmF2aWdhdGlvbk9wdGlvbnMgPSB7fVxyXG4pOiBVc2VDYXRlZ29yeU5hdmlnYXRpb25SZXR1cm4gPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHBhcmFtTmFtZSA9ICdjYXRlZ29yaWVzJyxcclxuICAgIGJhc2VQYXRoID0gJy8nLFxyXG4gICAgZGVib3VuY2VEZWxheSA9IDMwMCxcclxuICAgIHByZXNlcnZlUGFyYW1zID0gdHJ1ZSxcclxuICAgIG9uTmF2aWdhdGlvblN0YXJ0LFxyXG4gICAgb25OYXZpZ2F0aW9uQ29tcGxldGUsXHJcbiAgICBlbmFibGVBbmFseXRpY3MgPSB0cnVlLFxyXG4gIH0gPSBvcHRpb25zO1xyXG5cclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBzZWFyY2hQYXJhbXMgPSB1c2VTZWFyY2hQYXJhbXMoKTtcclxuICBjb25zdCBwYXRobmFtZSA9IHVzZVBhdGhuYW1lKCk7XHJcbiAgXHJcbiAgY29uc3QgW2lzTmF2aWdhdGluZywgc2V0SXNOYXZpZ2F0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbZGVib3VuY2VUaW1lciwgc2V0RGVib3VuY2VUaW1lcl0gPSB1c2VTdGF0ZTxOb2RlSlMuVGltZW91dCB8IG51bGw+KG51bGwpO1xyXG5cclxuICAvKipcclxuICAgKiBUcmFjayBuYXZpZ2F0aW9uIGFuYWx5dGljcyBpZiBlbmFibGVkXHJcbiAgICovXHJcbiAgY29uc3QgdHJhY2tOYXZpZ2F0aW9uID0gdXNlQ2FsbGJhY2soKGNhdGVnb3JpZXM6IENhdGVnb3J5SWRbXSwgYWN0aW9uOiAnZmlsdGVyJyB8ICdjbGVhcicpID0+IHtcclxuICAgIGlmICghZW5hYmxlQW5hbHl0aWNzKSB7cmV0dXJuO31cclxuXHJcbiAgICAvLyBUcmFjayB3aXRoIGFuYWx5dGljcyBzZXJ2aWNlXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lmd0YWcpIHtcclxuICAgICAgd2luZG93Lmd0YWcoJ2V2ZW50JywgJ2NhdGVnb3J5X25hdmlnYXRpb24nLCB7XHJcbiAgICAgICAgZXZlbnRfY2F0ZWdvcnk6ICduYXZpZ2F0aW9uJyxcclxuICAgICAgICBldmVudF9sYWJlbDogYWN0aW9uLFxyXG4gICAgICAgIHZhbHVlOiBjYXRlZ29yaWVzLmxlbmd0aCxcclxuICAgICAgICBjdXN0b21fcGFyYW1ldGVyczoge1xyXG4gICAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcy5qb2luKCcsJyksXHJcbiAgICAgICAgICBwYXRoOiBwYXRobmFtZSxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb25zb2xlIGxvZyBmb3IgZGV2ZWxvcG1lbnRcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgfVxyXG4gIH0sIFtlbmFibGVBbmFseXRpY3MsIHBhdGhuYW1lXSk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1aWxkIFVSTCB3aXRoIGNhdGVnb3J5IHBhcmFtZXRlcnNcclxuICAgKi9cclxuICBjb25zdCBidWlsZFVybCA9IHVzZUNhbGxiYWNrKChjYXRlZ29yaWVzOiBDYXRlZ29yeUlkW10pOiBzdHJpbmcgPT4ge1xyXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xyXG5cclxuICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIHBhcmFtZXRlcnMgaWYgZW5hYmxlZFxyXG4gICAgaWYgKHByZXNlcnZlUGFyYW1zKSB7XHJcbiAgICAgIHNlYXJjaFBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKGtleSAhPT0gcGFyYW1OYW1lKSB7XHJcbiAgICAgICAgICBwYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIGNhdGVnb3JpZXMgcGFyYW1ldGVyIGlmIHRoZXJlIGFyZSBjYXRlZ29yaWVzXHJcbiAgICBpZiAoY2F0ZWdvcmllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHBhcmFtcy5zZXQocGFyYW1OYW1lLCBjYXRlZ29yaWVzLmpvaW4oJywnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQnVpbGQgZmluYWwgVVJMXHJcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IHBhcmFtcy50b1N0cmluZygpO1xyXG4gICAgcmV0dXJuIHF1ZXJ5U3RyaW5nID8gYCR7YmFzZVBhdGh9PyR7cXVlcnlTdHJpbmd9YCA6IGJhc2VQYXRoO1xyXG4gIH0sIFtiYXNlUGF0aCwgcGFyYW1OYW1lLCBwcmVzZXJ2ZVBhcmFtcywgc2VhcmNoUGFyYW1zXSk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFBlcmZvcm0gbmF2aWdhdGlvbiB3aXRoIGRlYm91bmNpbmdcclxuICAgKi9cclxuICBjb25zdCBwZXJmb3JtTmF2aWdhdGlvbiA9IHVzZUNhbGxiYWNrKCh1cmw6IHN0cmluZykgPT4ge1xyXG4gICAgLy8gQ2xlYXIgZXhpc3RpbmcgdGltZXJcclxuICAgIGlmIChkZWJvdW5jZVRpbWVyKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChkZWJvdW5jZVRpbWVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgbmF2aWdhdGlvbiBzdGF0ZVxyXG4gICAgc2V0SXNOYXZpZ2F0aW5nKHRydWUpO1xyXG4gICAgb25OYXZpZ2F0aW9uU3RhcnQ/LigpO1xyXG5cclxuICAgIC8vIERlYm91bmNlZCBuYXZpZ2F0aW9uXHJcbiAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJvdXRlci5wdXNoKHVybCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gUmVzZXQgbmF2aWdhdGlvbiBzdGF0ZSBhZnRlciBhIHNob3J0IGRlbGF5XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBzZXRJc05hdmlnYXRpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgb25OYXZpZ2F0aW9uQ29tcGxldGU/LigpO1xyXG4gICAgICAgIH0sIDEwMCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignTmF2aWdhdGlvbiBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgc2V0SXNOYXZpZ2F0aW5nKGZhbHNlKTtcclxuICAgICAgICBvbk5hdmlnYXRpb25Db21wbGV0ZT8uKCk7XHJcbiAgICAgIH1cclxuICAgIH0sIGRlYm91bmNlRGVsYXkpO1xyXG5cclxuICAgIHNldERlYm91bmNlVGltZXIodGltZXIpO1xyXG4gIH0sIFtkZWJvdW5jZVRpbWVyLCBkZWJvdW5jZURlbGF5LCByb3V0ZXIsIG9uTmF2aWdhdGlvblN0YXJ0LCBvbk5hdmlnYXRpb25Db21wbGV0ZV0pO1xyXG5cclxuICAvKipcclxuICAgKiBOYXZpZ2F0ZSB0byBmaWx0ZXJlZCB2aWV3IHdpdGggc2VsZWN0ZWQgY2F0ZWdvcmllc1xyXG4gICAqL1xyXG4gIGNvbnN0IG5hdmlnYXRlVG9GaWx0ZXJlZCA9IHVzZUNhbGxiYWNrKChjYXRlZ29yaWVzOiBDYXRlZ29yeUlkW10pID0+IHtcclxuICAgIC8vIFZhbGlkYXRlIGNhdGVnb3JpZXNcclxuICAgIGNvbnN0IHZhbGlkQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMuZmlsdGVyKGNhdCA9PiBcclxuICAgICAgdHlwZW9mIGNhdCA9PT0gJ3N0cmluZycgJiYgY2F0LnRyaW0oKS5sZW5ndGggPiAwXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEJ1aWxkIFVSTCBhbmQgbmF2aWdhdGVcclxuICAgIGNvbnN0IHVybCA9IGJ1aWxkVXJsKHZhbGlkQ2F0ZWdvcmllcyk7XHJcbiAgICBwZXJmb3JtTmF2aWdhdGlvbih1cmwpO1xyXG5cclxuICAgIC8vIFRyYWNrIGFuYWx5dGljc1xyXG4gICAgdHJhY2tOYXZpZ2F0aW9uKHZhbGlkQ2F0ZWdvcmllcywgJ2ZpbHRlcicpO1xyXG4gIH0sIFtidWlsZFVybCwgcGVyZm9ybU5hdmlnYXRpb24sIHRyYWNrTmF2aWdhdGlvbl0pO1xyXG5cclxuICAvKipcclxuICAgKiBOYXZpZ2F0ZSB0byBob21lIChjbGVhciBhbGwgZmlsdGVycylcclxuICAgKi9cclxuICBjb25zdCBuYXZpZ2F0ZVRvSG9tZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9IGJ1aWxkVXJsKFtdKTtcclxuICAgIHBlcmZvcm1OYXZpZ2F0aW9uKHVybCk7XHJcblxyXG4gICAgLy8gVHJhY2sgYW5hbHl0aWNzXHJcbiAgICB0cmFja05hdmlnYXRpb24oW10sICdjbGVhcicpO1xyXG4gIH0sIFtidWlsZFVybCwgcGVyZm9ybU5hdmlnYXRpb24sIHRyYWNrTmF2aWdhdGlvbl0pO1xyXG5cclxuICAvKipcclxuICAgKiBHZXQgY3VycmVudCBVUkwgd2l0aCBjYXRlZ29yaWVzXHJcbiAgICovXHJcbiAgY29uc3QgZ2V0Q3VycmVudFVybCA9IHVzZUNhbGxiYWNrKCgpOiBzdHJpbmcgPT4ge1xyXG4gICAgY29uc3QgY3VycmVudENhdGVnb3JpZXMgPSBzZWFyY2hQYXJhbXMuZ2V0KHBhcmFtTmFtZSk7XHJcbiAgICBjb25zdCBjYXRlZ29yaWVzID0gY3VycmVudENhdGVnb3JpZXMgPyBjdXJyZW50Q2F0ZWdvcmllcy5zcGxpdCgnLCcpIDogW107XHJcbiAgICByZXR1cm4gYnVpbGRVcmwoY2F0ZWdvcmllcyk7XHJcbiAgfSwgW3NlYXJjaFBhcmFtcywgcGFyYW1OYW1lLCBidWlsZFVybF0pO1xyXG5cclxuICAvKipcclxuICAgKiBHZXQgY3VycmVudCBjYXRlZ29yaWVzIGZyb20gVVJMXHJcbiAgICovXHJcbiAgY29uc3QgZ2V0Q3VycmVudENhdGVnb3JpZXMgPSB1c2VDYWxsYmFjaygoKTogQ2F0ZWdvcnlJZFtdID0+IHtcclxuICAgIGNvbnN0IGNhdGVnb3JpZXNQYXJhbSA9IHNlYXJjaFBhcmFtcy5nZXQocGFyYW1OYW1lKTtcclxuICAgIHJldHVybiBjYXRlZ29yaWVzUGFyYW0gPyBjYXRlZ29yaWVzUGFyYW0uc3BsaXQoJywnKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcclxuICB9LCBbc2VhcmNoUGFyYW1zLCBwYXJhbU5hbWVdKTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgc3BlY2lmaWMgY2F0ZWdvcmllcyBhcmUgY3VycmVudGx5IGFjdGl2ZVxyXG4gICAqL1xyXG4gIGNvbnN0IGFyZUNhdGVnb3JpZXNUb0FjdGl2ZSA9IHVzZUNhbGxiYWNrKChjYXRlZ29yaWVzOiBDYXRlZ29yeUlkW10pOiBib29sZWFuID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRDYXRlZ29yaWVzID0gZ2V0Q3VycmVudENhdGVnb3JpZXMoKTtcclxuICAgIHJldHVybiBjYXRlZ29yaWVzLmV2ZXJ5KGNhdCA9PiBjdXJyZW50Q2F0ZWdvcmllcy5pbmNsdWRlcyhjYXQpKSAmJlxyXG4gICAgICAgICAgIGN1cnJlbnRDYXRlZ29yaWVzLmV2ZXJ5KGNhdCA9PiBjYXRlZ29yaWVzLmluY2x1ZGVzKGNhdCkpO1xyXG4gIH0sIFtnZXRDdXJyZW50Q2F0ZWdvcmllc10pO1xyXG5cclxuICAvKipcclxuICAgKiBDbGVhbnVwIGVmZmVjdCBmb3IgZGVib3VuY2UgdGltZXJcclxuICAgKi9cclxuICBjb25zdCBjbGVhbnVwID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKGRlYm91bmNlVGltZXIpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXIpO1xyXG4gICAgICBzZXREZWJvdW5jZVRpbWVyKG51bGwpO1xyXG4gICAgfVxyXG4gIH0sIFtkZWJvdW5jZVRpbWVyXSk7XHJcblxyXG4gIC8vIENsZWFudXAgb24gdW5tb3VudFxyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICByZXR1cm4gY2xlYW51cDtcclxuICB9LCBbY2xlYW51cF0pO1xyXG5cclxuICAvKipcclxuICAgKiBNZW1vaXplZCByZXR1cm4gb2JqZWN0IGZvciBwZXJmb3JtYW5jZVxyXG4gICAqL1xyXG4gIGNvbnN0IHJldHVyblZhbHVlID0gdXNlTWVtbygoKTogVXNlQ2F0ZWdvcnlOYXZpZ2F0aW9uUmV0dXJuID0+ICh7XHJcbiAgICBuYXZpZ2F0ZVRvRmlsdGVyZWQsXHJcbiAgICBuYXZpZ2F0ZVRvSG9tZSxcclxuICAgIGdldEN1cnJlbnRVcmwsXHJcbiAgICBpc05hdmlnYXRpbmcsXHJcbiAgfSksIFtcclxuICAgIG5hdmlnYXRlVG9GaWx0ZXJlZCxcclxuICAgIG5hdmlnYXRlVG9Ib21lLFxyXG4gICAgZ2V0Q3VycmVudFVybCxcclxuICAgIGlzTmF2aWdhdGluZyxcclxuICBdKTtcclxuXHJcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gZXh0cmFjdCBjYXRlZ29yaWVzIGZyb20gVVJMXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZXh0cmFjdENhdGVnb3JpZXNGcm9tVXJsID0gKHVybDogc3RyaW5nLCBwYXJhbU5hbWUgPSAnY2F0ZWdvcmllcycpOiBDYXRlZ29yeUlkW10gPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB1cmxPYmogPSBuZXcgVVJMKHVybCwgd2luZG93LmxvY2F0aW9uLm9yaWdpbik7XHJcbiAgICBjb25zdCBjYXRlZ29yaWVzUGFyYW0gPSB1cmxPYmouc2VhcmNoUGFyYW1zLmdldChwYXJhbU5hbWUpO1xyXG4gICAgcmV0dXJuIGNhdGVnb3JpZXNQYXJhbSA/IGNhdGVnb3JpZXNQYXJhbS5zcGxpdCgnLCcpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xyXG4gIH0gY2F0Y2gge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIFVSTCBoYXMgY2F0ZWdvcnkgZmlsdGVyc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGhhc0NhdGVnb3JpZXMgPSAodXJsOiBzdHJpbmcsIHBhcmFtTmFtZSA9ICdjYXRlZ29yaWVzJyk6IGJvb2xlYW4gPT4ge1xyXG4gIHJldHVybiBleHRyYWN0Q2F0ZWdvcmllc0Zyb21VcmwodXJsLCBwYXJhbU5hbWUpLmxlbmd0aCA+IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBleHBvcnQgZm9yIGNvbnZlbmllbmNlXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCB1c2VDYXRlZ29yeU5hdmlnYXRpb247XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJleHRyYWN0Q2F0ZWdvcmllc0Zyb21VcmwiLCJoYXNDYXRlZ29yaWVzIiwidXNlQ2F0ZWdvcnlOYXZpZ2F0aW9uIiwib3B0aW9ucyIsInBhcmFtTmFtZSIsImJhc2VQYXRoIiwiZGVib3VuY2VEZWxheSIsInByZXNlcnZlUGFyYW1zIiwib25OYXZpZ2F0aW9uU3RhcnQiLCJvbk5hdmlnYXRpb25Db21wbGV0ZSIsImVuYWJsZUFuYWx5dGljcyIsInJvdXRlciIsInVzZVJvdXRlciIsInNlYXJjaFBhcmFtcyIsInVzZVNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidXNlUGF0aG5hbWUiLCJpc05hdmlnYXRpbmciLCJzZXRJc05hdmlnYXRpbmciLCJ1c2VTdGF0ZSIsImRlYm91bmNlVGltZXIiLCJzZXREZWJvdW5jZVRpbWVyIiwidHJhY2tOYXZpZ2F0aW9uIiwidXNlQ2FsbGJhY2siLCJjYXRlZ29yaWVzIiwiYWN0aW9uIiwid2luZG93IiwiZ3RhZyIsImV2ZW50X2NhdGVnb3J5IiwiZXZlbnRfbGFiZWwiLCJ2YWx1ZSIsImxlbmd0aCIsImN1c3RvbV9wYXJhbWV0ZXJzIiwiam9pbiIsInBhdGgiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJidWlsZFVybCIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImZvckVhY2giLCJrZXkiLCJzZXQiLCJxdWVyeVN0cmluZyIsInRvU3RyaW5nIiwicGVyZm9ybU5hdmlnYXRpb24iLCJ1cmwiLCJjbGVhclRpbWVvdXQiLCJ0aW1lciIsInNldFRpbWVvdXQiLCJwdXNoIiwiZXJyb3IiLCJjb25zb2xlIiwibmF2aWdhdGVUb0ZpbHRlcmVkIiwidmFsaWRDYXRlZ29yaWVzIiwiZmlsdGVyIiwiY2F0IiwidHJpbSIsIm5hdmlnYXRlVG9Ib21lIiwiZ2V0Q3VycmVudFVybCIsImN1cnJlbnRDYXRlZ29yaWVzIiwiZ2V0Iiwic3BsaXQiLCJnZXRDdXJyZW50Q2F0ZWdvcmllcyIsImNhdGVnb3JpZXNQYXJhbSIsIkJvb2xlYW4iLCJhcmVDYXRlZ29yaWVzVG9BY3RpdmUiLCJldmVyeSIsImluY2x1ZGVzIiwiY2xlYW51cCIsIlJlYWN0IiwidXNlRWZmZWN0IiwicmV0dXJuVmFsdWUiLCJ1c2VNZW1vIiwidXJsT2JqIiwiVVJMIiwibG9jYXRpb24iLCJvcmlnaW4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUM7Ozs7Ozs7Ozs7O1FBd1BEOztDQUVDLEdBQ0Q7ZUFBQTs7UUFwQmFBO2VBQUFBOztRQWFBQztlQUFBQTs7UUE3TUFDO2VBQUFBOzs7K0RBckN5Qzs0QkFDRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0NqRCxNQUFNQSx3QkFBd0IsQ0FDbkNDLFVBQXdDLENBQUMsQ0FBQztJQUUxQyxNQUFNLEVBQ0pDLFlBQVksWUFBWSxFQUN4QkMsV0FBVyxHQUFHLEVBQ2RDLGdCQUFnQixHQUFHLEVBQ25CQyxpQkFBaUIsSUFBSSxFQUNyQkMsaUJBQWlCLEVBQ2pCQyxvQkFBb0IsRUFDcEJDLGtCQUFrQixJQUFJLEVBQ3ZCLEdBQUdQO0lBRUosTUFBTVEsU0FBU0MsSUFBQUEscUJBQVM7SUFDeEIsTUFBTUMsZUFBZUMsSUFBQUEsMkJBQWU7SUFDcEMsTUFBTUMsV0FBV0MsSUFBQUEsdUJBQVc7SUFFNUIsTUFBTSxDQUFDQyxjQUFjQyxnQkFBZ0IsR0FBR0MsSUFBQUEsZUFBUSxFQUFDO0lBQ2pELE1BQU0sQ0FBQ0MsZUFBZUMsaUJBQWlCLEdBQUdGLElBQUFBLGVBQVEsRUFBd0I7SUFFMUU7O0dBRUMsR0FDRCxNQUFNRyxrQkFBa0JDLElBQUFBLGtCQUFXLEVBQUMsQ0FBQ0MsWUFBMEJDO1FBQzdELElBQUksQ0FBQ2YsaUJBQWlCO1lBQUM7UUFBTztRQUU5QiwrQkFBK0I7UUFDL0IsSUFBSSxPQUFPZ0IsV0FBVyxlQUFlQSxPQUFPQyxJQUFJLEVBQUU7WUFDaERELE9BQU9DLElBQUksQ0FBQyxTQUFTLHVCQUF1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