{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\phase4\\enterprise-alert-system.test.ts"],"sourcesContent":["/**\r\n * Tests para el Sistema Enterprise de Alertas\r\n * Verifica funcionalidad básica del sistema de alertas automáticas\r\n */\r\n\r\nimport { enterpriseAlertSystem, ENTERPRISE_ALERT_RULES, EnterpriseAlertUtils } from '@/lib/monitoring/enterprise-alert-system';\r\n\r\n// Mock de dependencias\r\njest.mock('@/lib/security/enterprise-audit-system', () => ({\r\n  enterpriseAuditSystem: {\r\n    logEnterpriseEvent: jest.fn()\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/rate-limiting/enterprise-rate-limiter', () => ({\r\n  metricsCollector: {\r\n    getMetrics: jest.fn(() => ({\r\n      totalRequests: 1000,\r\n      blockedRequests: 50,\r\n      allowedRequests: 950,\r\n      averageResponseTime: 45,\r\n      errors: 5\r\n    }))\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/optimization/enterprise-cache-system', () => ({\r\n  enterpriseCacheSystem: {\r\n    getMetrics: jest.fn(() => ({\r\n      'test_key': {\r\n        hits: 100,\r\n        misses: 20,\r\n        avgResponseTime: 15,\r\n        errors: 1\r\n      }\r\n    }))\r\n  }\r\n}));\r\n\r\ndescribe('Sistema Enterprise de Alertas', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Reglas de Alerta Predefinidas', () => {\r\n    test('debe tener 6 reglas predefinidas', () => {\r\n      expect(ENTERPRISE_ALERT_RULES).toHaveLength(6);\r\n    });\r\n\r\n    test('debe tener regla de alto número de requests bloqueados', () => {\r\n      const rule = ENTERPRISE_ALERT_RULES.find(r => r.id === 'security_high_blocked_requests');\r\n      expect(rule).toBeDefined();\r\n      expect(rule?.category).toBe('security');\r\n      expect(rule?.severity).toBe('high');\r\n      expect(rule?.enabled).toBe(true);\r\n    });\r\n\r\n    test('debe tener regla de eventos críticos de seguridad', () => {\r\n      const rule = ENTERPRISE_ALERT_RULES.find(r => r.id === 'security_critical_events');\r\n      expect(rule).toBeDefined();\r\n      expect(rule?.category).toBe('security');\r\n      expect(rule?.severity).toBe('critical');\r\n      expect(rule?.enabled).toBe(true);\r\n    });\r\n\r\n    test('debe tener regla de tiempo de respuesta alto', () => {\r\n      const rule = ENTERPRISE_ALERT_RULES.find(r => r.id === 'performance_high_response_time');\r\n      expect(rule).toBeDefined();\r\n      expect(rule?.category).toBe('performance');\r\n      expect(rule?.severity).toBe('medium');\r\n      expect(rule?.enabled).toBe(true);\r\n    });\r\n\r\n    test('debe tener regla de baja tasa de hit de cache', () => {\r\n      const rule = ENTERPRISE_ALERT_RULES.find(r => r.id === 'performance_low_cache_hit_rate');\r\n      expect(rule).toBeDefined();\r\n      expect(rule?.category).toBe('performance');\r\n      expect(rule?.severity).toBe('medium');\r\n      expect(rule?.enabled).toBe(true);\r\n    });\r\n\r\n    test('debe tener regla de alto uso de memoria', () => {\r\n      const rule = ENTERPRISE_ALERT_RULES.find(r => r.id === 'capacity_high_memory_usage');\r\n      expect(rule).toBeDefined();\r\n      expect(rule?.category).toBe('capacity');\r\n      expect(rule?.severity).toBe('high');\r\n      expect(rule?.enabled).toBe(true);\r\n    });\r\n\r\n    test('debe tener regla de alta tasa de errores 5xx', () => {\r\n      const rule = ENTERPRISE_ALERT_RULES.find(r => r.id === 'error_high_5xx_rate');\r\n      expect(rule).toBeDefined();\r\n      expect(rule?.category).toBe('error');\r\n      expect(rule?.severity).toBe('high');\r\n      expect(rule?.enabled).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Configuración de Reglas', () => {\r\n    test('todas las reglas deben tener configuración válida', () => {\r\n      ENTERPRISE_ALERT_RULES.forEach(rule => {\r\n        expect(rule.id).toBeDefined();\r\n        expect(rule.name).toBeDefined();\r\n        expect(rule.description).toBeDefined();\r\n        expect(['security', 'performance', 'availability', 'capacity', 'error']).toContain(rule.category);\r\n        expect(['low', 'medium', 'high', 'critical']).toContain(rule.severity);\r\n        expect(typeof rule.enabled).toBe('boolean');\r\n        expect(Array.isArray(rule.conditions)).toBe(true);\r\n        expect(rule.conditions.length).toBeGreaterThan(0);\r\n        expect(Array.isArray(rule.notificationChannels)).toBe(true);\r\n        expect(rule.notificationChannels.length).toBeGreaterThan(0);\r\n        expect(typeof rule.cooldownMinutes).toBe('number');\r\n        expect(rule.cooldownMinutes).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    test('condiciones deben tener configuración válida', () => {\r\n      ENTERPRISE_ALERT_RULES.forEach(rule => {\r\n        rule.conditions.forEach(condition => {\r\n          expect(condition.metric).toBeDefined();\r\n          expect(['gt', 'lt', 'eq', 'gte', 'lte', 'contains', 'not_contains']).toContain(condition.operator);\r\n          expect(condition.threshold).toBeDefined();\r\n          expect(typeof condition.timeWindow).toBe('number');\r\n          expect(condition.timeWindow).toBeGreaterThan(0);\r\n          expect(typeof condition.evaluationInterval).toBe('number');\r\n          expect(condition.evaluationInterval).toBeGreaterThan(0);\r\n        });\r\n      });\r\n    });\r\n\r\n    test('canales de notificación deben tener configuración válida', () => {\r\n      ENTERPRISE_ALERT_RULES.forEach(rule => {\r\n        rule.notificationChannels.forEach(channel => {\r\n          expect(['email', 'slack', 'webhook', 'sms', 'dashboard']).toContain(channel.type);\r\n          expect(typeof channel.config).toBe('object');\r\n          expect(typeof channel.enabled).toBe('boolean');\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Inicialización del Sistema', () => {\r\n    test('debe inicializar correctamente', async () => {\r\n      await expect(enterpriseAlertSystem.initialize()).resolves.not.toThrow();\r\n    });\r\n\r\n    test('debe ser singleton', () => {\r\n      const instance1 = enterpriseAlertSystem;\r\n      const instance2 = enterpriseAlertSystem;\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n  });\r\n\r\n  describe('Gestión de Alertas', () => {\r\n    test('debe obtener alertas activas', () => {\r\n      const activeAlerts = enterpriseAlertSystem.getActiveAlerts();\r\n      expect(Array.isArray(activeAlerts)).toBe(true);\r\n    });\r\n\r\n    test('debe obtener métricas de alertas', () => {\r\n      const metrics = enterpriseAlertSystem.getAlertMetrics();\r\n      expect(metrics).toBeDefined();\r\n      expect(typeof metrics.totalAlerts).toBe('number');\r\n      expect(typeof metrics.activeAlerts).toBe('number');\r\n      expect(typeof metrics.averageResolutionTime).toBe('number');\r\n      expect(typeof metrics.falsePositiveRate).toBe('number');\r\n      expect(typeof metrics.alertsByCategory).toBe('object');\r\n      expect(typeof metrics.alertsBySeverity).toBe('object');\r\n    });\r\n  });\r\n\r\n  describe('Utilidades de Alertas', () => {\r\n    test('EnterpriseAlertUtils debe estar definido', () => {\r\n      expect(EnterpriseAlertUtils).toBeDefined();\r\n      expect(typeof EnterpriseAlertUtils.createManualAlert).toBe('function');\r\n      expect(typeof EnterpriseAlertUtils.getAlertsByCategory).toBe('function');\r\n      expect(typeof EnterpriseAlertUtils.getAlertsBySeverity).toBe('function');\r\n    });\r\n\r\n    test('debe crear alerta manual', async () => {\r\n      const alertId = await EnterpriseAlertUtils.createManualAlert(\r\n        'Test Alert',\r\n        'Test Description',\r\n        'medium',\r\n        'availability',\r\n        'test_user'\r\n      );\r\n      \r\n      expect(typeof alertId).toBe('string');\r\n      expect(alertId).toMatch(/^manual_/);\r\n    });\r\n  });\r\n\r\n  describe('Categorías y Severidades', () => {\r\n    test('debe tener alertas de todas las categorías', () => {\r\n      const categories = ['security', 'performance', 'capacity', 'error'];\r\n      categories.forEach(category => {\r\n        const rulesInCategory = ENTERPRISE_ALERT_RULES.filter(r => r.category === category);\r\n        expect(rulesInCategory.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    test('debe tener alertas de diferentes severidades', () => {\r\n      const severities = ['medium', 'high', 'critical'];\r\n      severities.forEach(severity => {\r\n        const rulesWithSeverity = ENTERPRISE_ALERT_RULES.filter(r => r.severity === severity);\r\n        expect(rulesWithSeverity.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Escalamiento de Alertas', () => {\r\n    test('reglas críticas deben tener escalamiento configurado', () => {\r\n      const criticalRules = ENTERPRISE_ALERT_RULES.filter(r => r.severity === 'critical');\r\n      criticalRules.forEach(rule => {\r\n        // Las reglas críticas pueden tener escalamiento\r\n        if (rule.escalationRules) {\r\n          expect(Array.isArray(rule.escalationRules)).toBe(true);\r\n          rule.escalationRules.forEach(escalation => {\r\n            expect(typeof escalation.afterMinutes).toBe('number');\r\n            expect(escalation.afterMinutes).toBeGreaterThan(0);\r\n            expect(['low', 'medium', 'high', 'critical']).toContain(escalation.severity);\r\n            expect(Array.isArray(escalation.additionalChannels)).toBe(true);\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    test('reglas de alta severidad deben tener escalamiento', () => {\r\n      const highSeverityRules = ENTERPRISE_ALERT_RULES.filter(r => r.severity === 'high');\r\n      highSeverityRules.forEach(rule => {\r\n        // Verificar que las reglas de alta severidad tengan configuración apropiada\r\n        expect(rule.cooldownMinutes).toBeLessThanOrEqual(30); // Cooldown corto para alta severidad\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Canales de Notificación', () => {\r\n    test('debe tener configuración de email para alertas importantes', () => {\r\n      const importantRules = ENTERPRISE_ALERT_RULES.filter(r => \r\n        r.severity === 'critical' || r.severity === 'high'\r\n      );\r\n      \r\n      importantRules.forEach(rule => {\r\n        const hasEmail = rule.notificationChannels.some(c => c.type === 'email');\r\n        expect(hasEmail).toBe(true);\r\n      });\r\n    });\r\n\r\n    test('debe tener configuración de SMS para alertas críticas', () => {\r\n      const criticalRules = ENTERPRISE_ALERT_RULES.filter(r => r.severity === 'critical');\r\n      \r\n      criticalRules.forEach(rule => {\r\n        const hasSMS = rule.notificationChannels.some(c => c.type === 'sms') ||\r\n                      (rule.escalationRules && rule.escalationRules.some(e => \r\n                        e.additionalChannels.some(c => c.type === 'sms')\r\n                      ));\r\n        expect(hasSMS).toBe(true);\r\n      });\r\n    });\r\n\r\n    test('todas las reglas deben tener dashboard habilitado', () => {\r\n      ENTERPRISE_ALERT_RULES.forEach(rule => {\r\n        const hasDashboard = rule.notificationChannels.some(c => c.type === 'dashboard');\r\n        // Dashboard es opcional, pero si está presente debe estar habilitado\r\n        if (hasDashboard) {\r\n          const dashboardChannel = rule.notificationChannels.find(c => c.type === 'dashboard');\r\n          expect(dashboardChannel?.enabled).toBe(true);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Métricas y Umbrales', () => {\r\n    test('umbrales deben ser realistas para métricas de performance', () => {\r\n      const performanceRules = ENTERPRISE_ALERT_RULES.filter(r => r.category === 'performance');\r\n      \r\n      performanceRules.forEach(rule => {\r\n        rule.conditions.forEach(condition => {\r\n          if (condition.metric.includes('response_time')) {\r\n            // Tiempo de respuesta en ms, debe ser razonable\r\n            expect(Number(condition.threshold)).toBeGreaterThan(100);\r\n            expect(Number(condition.threshold)).toBeLessThan(10000);\r\n          }\r\n          \r\n          if (condition.metric.includes('hit_rate')) {\r\n            // Hit rate debe ser un porcentaje válido\r\n            expect(Number(condition.threshold)).toBeGreaterThan(0);\r\n            expect(Number(condition.threshold)).toBeLessThanOrEqual(1);\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    test('umbrales deben ser apropiados para métricas de seguridad', () => {\r\n      const securityRules = ENTERPRISE_ALERT_RULES.filter(r => r.category === 'security');\r\n      \r\n      securityRules.forEach(rule => {\r\n        rule.conditions.forEach(condition => {\r\n          if (condition.metric.includes('blocked_requests')) {\r\n            // Número de requests bloqueados debe ser positivo\r\n            expect(Number(condition.threshold)).toBeGreaterThan(0);\r\n          }\r\n          \r\n          if (condition.metric.includes('critical_events')) {\r\n            // Eventos críticos deben tener umbral bajo\r\n            expect(Number(condition.threshold)).toBeLessThan(20);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","enterpriseAuditSystem","logEnterpriseEvent","fn","metricsCollector","getMetrics","totalRequests","blockedRequests","allowedRequests","averageResponseTime","errors","enterpriseCacheSystem","hits","misses","avgResponseTime","describe","beforeEach","clearAllMocks","test","expect","ENTERPRISE_ALERT_RULES","toHaveLength","rule","find","r","id","toBeDefined","category","toBe","severity","enabled","forEach","name","description","toContain","Array","isArray","conditions","length","toBeGreaterThan","notificationChannels","cooldownMinutes","condition","metric","operator","threshold","timeWindow","evaluationInterval","channel","type","config","enterpriseAlertSystem","initialize","resolves","not","toThrow","instance1","instance2","activeAlerts","getActiveAlerts","metrics","getAlertMetrics","totalAlerts","averageResolutionTime","falsePositiveRate","alertsByCategory","alertsBySeverity","EnterpriseAlertUtils","createManualAlert","getAlertsByCategory","getAlertsBySeverity","alertId","toMatch","categories","rulesInCategory","filter","severities","rulesWithSeverity","criticalRules","escalationRules","escalation","afterMinutes","additionalChannels","highSeverityRules","toBeLessThanOrEqual","importantRules","hasEmail","some","c","hasSMS","e","hasDashboard","dashboardChannel","performanceRules","includes","Number","toBeLessThan","securityRules"],"mappings":"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"}