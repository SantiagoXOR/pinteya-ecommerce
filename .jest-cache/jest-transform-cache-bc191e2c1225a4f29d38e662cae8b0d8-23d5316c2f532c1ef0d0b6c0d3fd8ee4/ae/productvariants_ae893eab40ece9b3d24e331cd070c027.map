{"version":3,"names":["findCheapestVariant","cov_hl0h9cv9x","f","s","findMostExpensiveVariant","findVariantByCapacity","getAvailableCapacities","getDiscountPercentage","getEffectivePrice","getProductVariants","hasDiscount","productId","response","fetch","method","headers","result","_jsonutils","safeApiResponseJson","b","success","data","Error","error","console","variants","length","reduce","cheapest","current","cheapestPrice","parseFloat","discounted_price","price","currentPrice","expensive","expensivePrice","capacity","find","variant","toLowerCase","map","filter","index","array","indexOf","sort","a","aNum","parseInt","replace","bNum","originalPrice","discountedPrice","Math","round"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\product-variants.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - FUNCIONES DE API PARA VARIANTES DE PRODUCTOS\r\n// ===================================\r\n\r\nimport { ApiResponse } from '@/types/api';\r\nimport { safeApiResponseJson } from '@/lib/json-utils';\r\n\r\n// Tipo para variante de producto\r\nexport interface ProductVariant {\r\n  id: number;\r\n  name: string;\r\n  price: string;\r\n  discounted_price: string | null;\r\n  capacity: string;\r\n  stock: number;\r\n  is_active: boolean;\r\n}\r\n\r\n/**\r\n * Obtiene las variantes de un producto por ID\r\n * @param productId - ID del producto\r\n * @returns Promise<ApiResponse<ProductVariant[]>>\r\n */\r\nexport async function getProductVariants(productId: number): Promise<ApiResponse<ProductVariant[]>> {\r\n  try {\r\n    const response = await fetch(`/api/products/${productId}/variants`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<ApiResponse<ProductVariant[]>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error(`Error obteniendo variantes del producto ${productId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Encuentra la variante con el precio más bajo\r\n * @param variants - Array de variantes\r\n * @returns ProductVariant | null\r\n */\r\nexport function findCheapestVariant(variants: ProductVariant[]): ProductVariant | null {\r\n  if (!variants || variants.length === 0) return null;\r\n  \r\n  return variants.reduce((cheapest, current) => {\r\n    const cheapestPrice = parseFloat(cheapest.discounted_price || cheapest.price);\r\n    const currentPrice = parseFloat(current.discounted_price || current.price);\r\n    \r\n    return currentPrice < cheapestPrice ? current : cheapest;\r\n  });\r\n}\r\n\r\n/**\r\n * Encuentra la variante con el precio más alto\r\n * @param variants - Array de variantes\r\n * @returns ProductVariant | null\r\n */\r\nexport function findMostExpensiveVariant(variants: ProductVariant[]): ProductVariant | null {\r\n  if (!variants || variants.length === 0) return null;\r\n  \r\n  return variants.reduce((expensive, current) => {\r\n    const expensivePrice = parseFloat(expensive.discounted_price || expensive.price);\r\n    const currentPrice = parseFloat(current.discounted_price || current.price);\r\n    \r\n    return currentPrice > expensivePrice ? current : expensive;\r\n  });\r\n}\r\n\r\n/**\r\n * Busca una variante por capacidad específica\r\n * @param variants - Array de variantes\r\n * @param capacity - Capacidad a buscar (ej: \"4L\", \"10L\")\r\n * @returns ProductVariant | null\r\n */\r\nexport function findVariantByCapacity(variants: ProductVariant[], capacity: string): ProductVariant | null {\r\n  if (!variants || variants.length === 0) return null;\r\n  \r\n  return variants.find(variant => \r\n    variant.capacity.toLowerCase() === capacity.toLowerCase()\r\n  ) || null;\r\n}\r\n\r\n/**\r\n * Obtiene todas las capacidades disponibles de las variantes\r\n * @param variants - Array de variantes\r\n * @returns string[]\r\n */\r\nexport function getAvailableCapacities(variants: ProductVariant[]): string[] {\r\n  if (!variants || variants.length === 0) return [];\r\n  \r\n  return variants\r\n    .map(variant => variant.capacity)\r\n    .filter((capacity, index, array) => array.indexOf(capacity) === index)\r\n    .sort((a, b) => {\r\n      // Ordenar por capacidad numérica\r\n      const aNum = parseInt(a.replace(/[^\\d]/g, '')) || 0;\r\n      const bNum = parseInt(b.replace(/[^\\d]/g, '')) || 0;\r\n      return aNum - bNum;\r\n    });\r\n}\r\n\r\n/**\r\n * Calcula el precio efectivo de una variante (con descuento si existe)\r\n * @param variant - Variante del producto\r\n * @returns number\r\n */\r\nexport function getEffectivePrice(variant: ProductVariant): number {\r\n  return parseFloat(variant.discounted_price || variant.price);\r\n}\r\n\r\n/**\r\n * Verifica si una variante tiene descuento\r\n * @param variant - Variante del producto\r\n * @returns boolean\r\n */\r\nexport function hasDiscount(variant: ProductVariant): boolean {\r\n  return variant.discounted_price !== null && \r\n         parseFloat(variant.discounted_price) < parseFloat(variant.price);\r\n}\r\n\r\n/**\r\n * Calcula el porcentaje de descuento de una variante\r\n * @param variant - Variante del producto\r\n * @returns number (porcentaje de descuento)\r\n */\r\nexport function getDiscountPercentage(variant: ProductVariant): number {\r\n  if (!hasDiscount(variant)) return 0;\r\n  \r\n  const originalPrice = parseFloat(variant.price);\r\n  const discountedPrice = parseFloat(variant.discounted_price!);\r\n  \r\n  return Math.round(((originalPrice - discountedPrice) / originalPrice) * 100);\r\n}"],"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","ignoreList":[]}