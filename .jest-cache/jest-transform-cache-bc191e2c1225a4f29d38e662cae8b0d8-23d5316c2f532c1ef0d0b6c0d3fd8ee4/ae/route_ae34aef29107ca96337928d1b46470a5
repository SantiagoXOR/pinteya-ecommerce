1b4dd46a36b0448a852a906471737d8f
// ===================================
// PINTEYA E-COMMERCE - ADMIN ORDER DETAIL API ENTERPRISE
// ===================================
"use strict";

/* istanbul ignore next */
function cov_1w0pf939zm() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\route.ts";
  var hash = "781af1d08b9099b90e6f7bce8fbd86e35afc9241";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "6": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "7": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 69
        }
      },
      "8": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "9": {
        start: {
          line: 25,
          column: 13
        },
        end: {
          line: 25,
          column: 27
        }
      },
      "10": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "11": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 70
        }
      },
      "12": {
        start: {
          line: 28,
          column: 21
        },
        end: {
          line: 28,
          column: 74
        }
      },
      "13": {
        start: {
          line: 29,
          column: 17
        },
        end: {
          line: 29,
          column: 65
        }
      },
      "14": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 59,
          column: 2
        }
      },
      "15": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "16": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 47
        }
      },
      "17": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "18": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "19": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 73,
          column: 68
        }
      },
      "20": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "21": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "22": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "23": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "24": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 10
        }
      },
      "25": {
        start: {
          line: 97,
          column: 25
        },
        end: {
          line: 122,
          column: 1
        }
      },
      "26": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "27": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 20
        }
      },
      "28": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 73
        }
      },
      "29": {
        start: {
          line: 130,
          column: 22
        },
        end: {
          line: 130,
          column: 32
        }
      },
      "30": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 271,
          column: 5
        }
      },
      "31": {
        start: {
          line: 133,
          column: 32
        },
        end: {
          line: 133,
          column: 196
        }
      },
      "32": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "33": {
        start: {
          line: 135,
          column: 29
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "34": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 77
        }
      },
      "35": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 28
        }
      },
      "36": {
        start: {
          line: 144,
          column: 27
        },
        end: {
          line: 144,
          column: 52
        }
      },
      "37": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "38": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "39": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 152,
          column: 33
        }
      },
      "40": {
        start: {
          line: 154,
          column: 39
        },
        end: {
          line: 175,
          column: 35
        }
      },
      "41": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "42": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "43": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 182,
          column: 19
        }
      },
      "44": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "45": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 192,
          column: 15
        }
      },
      "46": {
        start: {
          line: 195,
          column: 28
        },
        end: {
          line: 195,
          column: 30
        }
      },
      "47": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "48": {
        start: {
          line: 197,
          column: 38
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "49": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 42
        }
      },
      "50": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "51": {
        start: {
          line: 218,
          column: 25
        },
        end: {
          line: 218,
          column: 27
        }
      },
      "52": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "53": {
        start: {
          line: 220,
          column: 36
        },
        end: {
          line: 232,
          column: 14
        }
      },
      "54": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 37
        }
      },
      "55": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 238,
          column: 15
        }
      },
      "56": {
        start: {
          line: 241,
          column: 29
        },
        end: {
          line: 241,
          column: 51
        }
      },
      "57": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 116
        }
      },
      "58": {
        start: {
          line: 243,
          column: 25
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "59": {
        start: {
          line: 252,
          column: 29
        },
        end: {
          line: 252,
          column: 64
        }
      },
      "60": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 77
        }
      },
      "61": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "62": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 28
        }
      },
      "63": {
        start: {
          line: 260,
          column: 29
        },
        end: {
          line: 260,
          column: 51
        }
      },
      "64": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 116
        }
      },
      "65": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "66": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 270,
          column: 11
        }
      },
      "67": {
        start: {
          line: 274,
          column: 22
        },
        end: {
          line: 274,
          column: 32
        }
      },
      "68": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 404,
          column: 5
        }
      },
      "69": {
        start: {
          line: 277,
          column: 32
        },
        end: {
          line: 277,
          column: 196
        }
      },
      "70": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "71": {
        start: {
          line: 279,
          column: 29
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "72": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 77
        }
      },
      "73": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 28
        }
      },
      "74": {
        start: {
          line: 288,
          column: 27
        },
        end: {
          line: 288,
          column: 52
        }
      },
      "75": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "76": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 294,
          column: 15
        }
      },
      "77": {
        start: {
          line: 296,
          column: 24
        },
        end: {
          line: 296,
          column: 33
        }
      },
      "78": {
        start: {
          line: 298,
          column: 21
        },
        end: {
          line: 298,
          column: 41
        }
      },
      "79": {
        start: {
          line: 299,
          column: 33
        },
        end: {
          line: 299,
          column: 66
        }
      },
      "80": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "81": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 306,
          column: 15
        }
      },
      "82": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 308,
          column: 48
        }
      },
      "83": {
        start: {
          line: 310,
          column: 58
        },
        end: {
          line: 310,
          column: 166
        }
      },
      "84": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "85": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "86": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 317,
          column: 19
        }
      },
      "87": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 322,
          column: 15
        }
      },
      "88": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 327,
          column: 15
        }
      },
      "89": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "90": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 335,
          column: 15
        }
      },
      "91": {
        start: {
          line: 338,
          column: 30
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "92": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "93": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 89
        }
      },
      "94": {
        start: {
          line: 347,
          column: 59
        },
        end: {
          line: 347,
          column: 161
        }
      },
      "95": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "96": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 352,
          column: 15
        }
      },
      "97": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 357,
          column: 15
        }
      },
      "98": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "99": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 374,
          column: 13
        }
      },
      "100": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 368,
          column: 19
        }
      },
      "101": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 373,
          column: 19
        }
      },
      "102": {
        start: {
          line: 377,
          column: 29
        },
        end: {
          line: 377,
          column: 51
        }
      },
      "103": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 118
        }
      },
      "104": {
        start: {
          line: 379,
          column: 25
        },
        end: {
          line: 383,
          column: 9
        }
      },
      "105": {
        start: {
          line: 384,
          column: 29
        },
        end: {
          line: 384,
          column: 64
        }
      },
      "106": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 77
        }
      },
      "107": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 390,
          column: 11
        }
      },
      "108": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 391,
          column: 28
        }
      },
      "109": {
        start: {
          line: 393,
          column: 29
        },
        end: {
          line: 393,
          column: 51
        }
      },
      "110": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 118
        }
      },
      "111": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 398,
          column: 11
        }
      },
      "112": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 403,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 17
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "validateAdminAuth",
        decl: {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 63,
            column: 32
          }
        },
        loc: {
          start: {
            line: 63,
            column: 35
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 63
      },
      "4": {
        name: "validateStateTransition",
        decl: {
          start: {
            line: 123,
            column: 9
          },
          end: {
            line: 123,
            column: 32
          }
        },
        loc: {
          start: {
            line: 123,
            column: 59
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 123
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 129,
            column: 18
          }
        },
        loc: {
          start: {
            line: 129,
            column: 40
          },
          end: {
            line: 272,
            column: 1
          }
        },
        line: 129
      },
      "6": {
        name: "PATCH",
        decl: {
          start: {
            line: 273,
            column: 15
          },
          end: {
            line: 273,
            column: 20
          }
        },
        loc: {
          start: {
            line: 273,
            column: 42
          },
          end: {
            line: 405,
            column: 1
          }
        },
        line: 273
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "3": {
        loc: {
          start: {
            line: 127,
            column: 11
          },
          end: {
            line: 127,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 11
          },
          end: {
            line: 127,
            column: 63
          }
        }, {
          start: {
            line: 127,
            column: 67
          },
          end: {
            line: 127,
            column: 72
          }
        }],
        line: 127
      },
      "4": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "5": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "6": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "7": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "8": {
        loc: {
          start: {
            line: 210,
            column: 28
          },
          end: {
            line: 210,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 28
          },
          end: {
            line: 210,
            column: 35
          }
        }, {
          start: {
            line: 210,
            column: 39
          },
          end: {
            line: 210,
            column: 41
          }
        }],
        line: 210
      },
      "9": {
        loc: {
          start: {
            line: 233,
            column: 25
          },
          end: {
            line: 233,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 25
          },
          end: {
            line: 233,
            column: 30
          }
        }, {
          start: {
            line: 233,
            column: 34
          },
          end: {
            line: 233,
            column: 36
          }
        }],
        line: 233
      },
      "10": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "11": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "12": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "13": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "14": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "15": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "16": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 330,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 330,
            column: 29
          }
        }, {
          start: {
            line: 330,
            column: 33
          },
          end: {
            line: 330,
            column: 97
          }
        }],
        line: 330
      },
      "17": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "18": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "19": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "20": {
        loc: {
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 360,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 360,
            column: 29
          }
        }, {
          start: {
            line: 360,
            column: 33
          },
          end: {
            line: 360,
            column: 74
          }
        }],
        line: 360
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\route.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN ORDER DETAIL API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { MetricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACI\xD3N\r\n// ===================================\r\n\r\nconst UpdateOrderSchema = z.object({\r\n  status: z.enum(['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded']).optional(),\r\n  payment_status: z.enum(['pending', 'paid', 'failed', 'refunded']).optional(),\r\n  notes: z.string().optional(),\r\n  tracking_number: z.string().optional(),\r\n  carrier: z.string().optional(),\r\n  shipping_address: z.object({\r\n    street_name: z.string().min(1),\r\n    street_number: z.string().min(1),\r\n    zip_code: z.string().min(1),\r\n    city_name: z.string().min(1),\r\n    state_name: z.string().min(1),\r\n  }).optional(),\r\n});\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACI\xD3N ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validaci\xF3n admin', { error });\r\n    return { error: 'Error de autenticaci\xF3n', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// VALIDACIONES DE TRANSICI\xD3N DE ESTADOS\r\n// ===================================\r\n\r\nconst stateTransitions: Record<string, string[]> = {\r\n  pending: ['confirmed', 'cancelled'],\r\n  confirmed: ['processing', 'cancelled'],\r\n  processing: ['shipped', 'cancelled'],\r\n  shipped: ['delivered', 'returned'],\r\n  delivered: ['returned'],\r\n  cancelled: [],\r\n  refunded: [],\r\n  returned: ['refunded']\r\n};\r\n\r\nfunction validateStateTransition(currentStatus: string, newStatus: string): boolean {\r\n  if (currentStatus === newStatus) {return true;}\r\n  return stateTransitions[currentStatus]?.includes(newStatus) || false;\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener orden espec\xEDfica\r\n// ===================================\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.admin.requests,\r\n      RATE_LIMIT_CONFIGS.admin.window,\r\n      'admin-order-detail'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticaci\xF3n admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Obtener orden con todos los detalles\r\n    const { data: order, error } = await supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        *,\r\n        user_profiles!orders_user_id_fkey (\r\n          id,\r\n          name,\r\n          email,\r\n          phone\r\n        ),\r\n        order_items (\r\n          id,\r\n          quantity,\r\n          unit_price,\r\n          total_price,\r\n          products (\r\n            id,\r\n            name,\r\n            images,\r\n            sku,\r\n            category\r\n          )\r\n        )\r\n      `)\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener orden', { error, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener historial de estados si existe la tabla\r\n    let statusHistory = [];\r\n    try {\r\n      const { data: history } = await supabaseAdmin\r\n        .from('order_status_history')\r\n        .select(`\r\n          id,\r\n          previous_status,\r\n          new_status,\r\n          reason,\r\n          created_at,\r\n          user_profiles!order_status_history_changed_by_fkey (\r\n            name,\r\n            email\r\n          )\r\n        `)\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: false });\r\n      \r\n      statusHistory = history || [];\r\n    } catch (historyError) {\r\n      // Si la tabla no existe, continuar sin historial\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Tabla order_status_history no existe', { historyError });\r\n    }\r\n\r\n    // Obtener notas si existe la tabla\r\n    let orderNotes = [];\r\n    try {\r\n      const { data: notes } = await supabaseAdmin\r\n        .from('order_notes')\r\n        .select(`\r\n          id,\r\n          note_type,\r\n          content,\r\n          is_visible_to_customer,\r\n          created_at,\r\n          user_profiles!order_notes_admin_id_fkey (\r\n            name,\r\n            email\r\n          )\r\n        `)\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: false });\r\n      \r\n      orderNotes = notes || [];\r\n    } catch (notesError) {\r\n      // Si la tabla no existe, continuar sin notas\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Tabla order_notes no existe', { notesError });\r\n    }\r\n\r\n    // M\xE9tricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-detail', 'GET', 200, responseTime);\r\n\r\n    const response: ApiResponse<{\r\n      order: typeof order;\r\n      statusHistory: typeof statusHistory;\r\n      notes: typeof orderNotes;\r\n    }> = {\r\n      data: {\r\n        order,\r\n        statusHistory,\r\n        notes: orderNotes,\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Orden obtenida exitosamente', {\r\n      orderId,\r\n      responseTime,\r\n    });\r\n\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-detail', 'GET', 500, responseTime);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/orders/[id]', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PATCH - Actualizar orden\r\n// ===================================\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.admin.requests,\r\n      RATE_LIMIT_CONFIGS.admin.window,\r\n      'admin-order-update'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticaci\xF3n admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = UpdateOrderSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de actualizaci\xF3n inv\xE1lidos', details: validationResult.error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const updateData = validationResult.data;\r\n\r\n    // Obtener orden actual para validar transiciones\r\n    const { data: currentOrder, error: fetchError } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('id, status, payment_status')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      if (fetchError.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener orden actual', { fetchError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Validar transici\xF3n de estado si se est\xE1 cambiando\r\n    if (updateData.status && !validateStateTransition(currentOrder.status, updateData.status)) {\r\n      return NextResponse.json(\r\n        { error: `Transici\xF3n de estado inv\xE1lida: ${currentOrder.status} \u2192 ${updateData.status}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos de actualizaci\xF3n\r\n    const updatePayload: any = {\r\n      ...updateData,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Convertir shipping_address a JSON si se proporciona\r\n    if (updateData.shipping_address) {\r\n      updatePayload.shipping_address = JSON.stringify(updateData.shipping_address);\r\n    }\r\n\r\n    // Actualizar orden\r\n    const { data: updatedOrder, error: updateError } = await supabaseAdmin\r\n      .from('orders')\r\n      .update(updatePayload)\r\n      .eq('id', orderId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al actualizar orden', { updateError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar cambio de estado en historial si cambi\xF3 el status\r\n    if (updateData.status && updateData.status !== currentOrder.status) {\r\n      try {\r\n        await supabaseAdmin\r\n          .from('order_status_history')\r\n          .insert({\r\n            order_id: orderId,\r\n            previous_status: currentOrder.status,\r\n            new_status: updateData.status,\r\n            changed_by: authResult.user.id,\r\n            reason: `Cambio manual por administrador`,\r\n          });\r\n      } catch (historyError) {\r\n        // Si la tabla no existe, continuar sin registrar historial\r\n        logger.log(LogLevel.WARN, LogCategory.DATABASE, 'No se pudo registrar historial de estado', { historyError });\r\n      }\r\n    }\r\n\r\n    // M\xE9tricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-update', 'PATCH', 200, responseTime);\r\n\r\n    const response: ApiResponse<typeof updatedOrder> = {\r\n      data: updatedOrder,\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Orden actualizada exitosamente', {\r\n      orderId,\r\n      changes: updateData,\r\n      responseTime,\r\n    });\r\n\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-update', 'PATCH', 500, responseTime);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en PATCH /api/admin/orders/[id]', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],
      names: ["GET", "PATCH", "UpdateOrderSchema", "z", "object", "status", "enum", "optional", "payment_status", "notes", "string", "tracking_number", "carrier", "shipping_address", "street_name", "min", "street_number", "zip_code", "city_name", "state_name", "validateAdminAuth", "session", "auth", "user", "error", "isAdmin", "email", "userId", "id", "logger", "log", "LogLevel", "ERROR", "LogCategory", "AUTH", "stateTransitions", "pending", "confirmed", "processing", "shipped", "delivered", "cancelled", "refunded", "returned", "validateStateTransition", "currentStatus", "newStatus", "includes", "request", "params", "startTime", "Date", "now", "rateLimitResult", "checkRateLimit", "RATE_LIMIT_CONFIGS", "admin", "requests", "window", "success", "response", "NextResponse", "json", "addRateLimitHeaders", "authResult", "orderId", "data", "order", "supabaseAdmin", "from", "select", "eq", "single", "code", "DATABASE", "statusHistory", "history", "ascending", "historyError", "WARN", "orderNotes", "notesError", "responseTime", "MetricsCollector", "getInstance", "recordRequest", "nextResponse", "INFO", "API", "body", "validationResult", "safeParse", "details", "errors", "updateData", "currentOrder", "fetchError", "updatePayload", "updated_at", "toISOString", "JSON", "stringify", "updatedOrder", "updateError", "update", "insert", "order_id", "previous_status", "new_status", "changed_by", "reason", "changes"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "781af1d08b9099b90e6f7bce8fbd86e35afc9241"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1w0pf939zm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1w0pf939zm();
cov_1w0pf939zm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1w0pf939zm().f[0]++;
  cov_1w0pf939zm().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1w0pf939zm().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1w0pf939zm().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1w0pf939zm().f[1]++;
    cov_1w0pf939zm().s[4]++;
    return GET;
  },
  get PATCH() {
    /* istanbul ignore next */
    cov_1w0pf939zm().f[2]++;
    cov_1w0pf939zm().s[5]++;
    return PATCH;
  }
});
const _server =
/* istanbul ignore next */
(cov_1w0pf939zm().s[6]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_1w0pf939zm().s[7]++, require("../../../../../lib/integrations/supabase"));
const _auth =
/* istanbul ignore next */
(cov_1w0pf939zm().s[8]++, require("../../../../../auth"));
const _zod =
/* istanbul ignore next */
(cov_1w0pf939zm().s[9]++, require("zod"));
const _logger =
/* istanbul ignore next */
(cov_1w0pf939zm().s[10]++, require("../../../../../lib/enterprise/logger"));
const _ratelimiting =
/* istanbul ignore next */
(cov_1w0pf939zm().s[11]++, require("../../../../../lib/auth/rate-limiting"));
const _ratelimiter =
/* istanbul ignore next */
(cov_1w0pf939zm().s[12]++, require("../../../../../lib/enterprise/rate-limiter"));
const _metrics =
/* istanbul ignore next */
(cov_1w0pf939zm().s[13]++, require("../../../../../lib/enterprise/metrics"));
// ===================================
// SCHEMAS DE VALIDACIÓN
// ===================================
const UpdateOrderSchema =
/* istanbul ignore next */
(cov_1w0pf939zm().s[14]++, _zod.z.object({
  status: _zod.z.enum(['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded']).optional(),
  payment_status: _zod.z.enum(['pending', 'paid', 'failed', 'refunded']).optional(),
  notes: _zod.z.string().optional(),
  tracking_number: _zod.z.string().optional(),
  carrier: _zod.z.string().optional(),
  shipping_address: _zod.z.object({
    street_name: _zod.z.string().min(1),
    street_number: _zod.z.string().min(1),
    zip_code: _zod.z.string().min(1),
    city_name: _zod.z.string().min(1),
    state_name: _zod.z.string().min(1)
  }).optional()
}));
// ===================================
// MIDDLEWARE DE AUTENTICACIÓN ADMIN
// ===================================
async function validateAdminAuth() {
  /* istanbul ignore next */
  cov_1w0pf939zm().f[3]++;
  cov_1w0pf939zm().s[15]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[16]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_1w0pf939zm().s[17]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[0][0]++;
      cov_1w0pf939zm().s[18]++;
      return {
        error: 'Usuario no autenticado',
        status: 401
      };
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[0][1]++;
    }
    // Verificar si es admin
    const isAdmin =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[19]++, session.user.email === 'santiago@xor.com.ar');
    /* istanbul ignore next */
    cov_1w0pf939zm().s[20]++;
    if (!isAdmin) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[1][0]++;
      cov_1w0pf939zm().s[21]++;
      return {
        error: 'Acceso denegado - Se requieren permisos de administrador',
        status: 403
      };
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[1][1]++;
    }
    cov_1w0pf939zm().s[22]++;
    return {
      user: session.user,
      userId: session.user.id
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1w0pf939zm().s[23]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.AUTH, 'Error en validación admin', {
      error
    });
    /* istanbul ignore next */
    cov_1w0pf939zm().s[24]++;
    return {
      error: 'Error de autenticación',
      status: 500
    };
  }
}
// ===================================
// VALIDACIONES DE TRANSICIÓN DE ESTADOS
// ===================================
const stateTransitions =
/* istanbul ignore next */
(cov_1w0pf939zm().s[25]++, {
  pending: ['confirmed', 'cancelled'],
  confirmed: ['processing', 'cancelled'],
  processing: ['shipped', 'cancelled'],
  shipped: ['delivered', 'returned'],
  delivered: ['returned'],
  cancelled: [],
  refunded: [],
  returned: ['refunded']
});
function validateStateTransition(currentStatus, newStatus) {
  /* istanbul ignore next */
  cov_1w0pf939zm().f[4]++;
  cov_1w0pf939zm().s[26]++;
  if (currentStatus === newStatus) {
    /* istanbul ignore next */
    cov_1w0pf939zm().b[2][0]++;
    cov_1w0pf939zm().s[27]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_1w0pf939zm().b[2][1]++;
  }
  cov_1w0pf939zm().s[28]++;
  return /* istanbul ignore next */(cov_1w0pf939zm().b[3][0]++, stateTransitions[currentStatus]?.includes(newStatus)) ||
  /* istanbul ignore next */
  (cov_1w0pf939zm().b[3][1]++, false);
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1w0pf939zm().f[5]++;
  const startTime =
  /* istanbul ignore next */
  (cov_1w0pf939zm().s[29]++, Date.now());
  /* istanbul ignore next */
  cov_1w0pf939zm().s[30]++;
  try {
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[31]++, await (0, _ratelimiting.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.admin.requests, _ratelimiter.RATE_LIMIT_CONFIGS.admin.window, 'admin-order-detail'));
    /* istanbul ignore next */
    cov_1w0pf939zm().s[32]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[4][0]++;
      const response =
      /* istanbul ignore next */
      (cov_1w0pf939zm().s[33]++, _server.NextResponse.json({
        error: 'Demasiadas solicitudes'
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_1w0pf939zm().s[34]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult);
      /* istanbul ignore next */
      cov_1w0pf939zm().s[35]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[4][1]++;
    }
    // Validar autenticación admin
    const authResult =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[36]++, await validateAdminAuth());
    /* istanbul ignore next */
    cov_1w0pf939zm().s[37]++;
    if ('error' in authResult) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[5][0]++;
      cov_1w0pf939zm().s[38]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[5][1]++;
    }
    const orderId =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[39]++, params.id);
    // Obtener orden con todos los detalles
    const {
      data: order,
      error
    } =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[40]++, await _supabase.supabaseAdmin.from('orders').select(`
        *,
        user_profiles!orders_user_id_fkey (
          id,
          name,
          email,
          phone
        ),
        order_items (
          id,
          quantity,
          unit_price,
          total_price,
          products (
            id,
            name,
            images,
            sku,
            category
          )
        )
      `).eq('id', orderId).single());
    /* istanbul ignore next */
    cov_1w0pf939zm().s[41]++;
    if (error) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[6][0]++;
      cov_1w0pf939zm().s[42]++;
      if (error.code === 'PGRST116') {
        /* istanbul ignore next */
        cov_1w0pf939zm().b[7][0]++;
        cov_1w0pf939zm().s[43]++;
        return _server.NextResponse.json({
          error: 'Orden no encontrada'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_1w0pf939zm().b[7][1]++;
      }
      cov_1w0pf939zm().s[44]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.DATABASE, 'Error al obtener orden', {
        error,
        orderId
      });
      /* istanbul ignore next */
      cov_1w0pf939zm().s[45]++;
      return _server.NextResponse.json({
        error: 'Error al obtener orden'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[6][1]++;
    }
    // Obtener historial de estados si existe la tabla
    let statusHistory =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[46]++, []);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[47]++;
    try {
      const {
        data: history
      } =
      /* istanbul ignore next */
      (cov_1w0pf939zm().s[48]++, await _supabase.supabaseAdmin.from('order_status_history').select(`
          id,
          previous_status,
          new_status,
          reason,
          created_at,
          user_profiles!order_status_history_changed_by_fkey (
            name,
            email
          )
        `).eq('order_id', orderId).order('created_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_1w0pf939zm().s[49]++;
      statusHistory =
      /* istanbul ignore next */
      (cov_1w0pf939zm().b[8][0]++, history) ||
      /* istanbul ignore next */
      (cov_1w0pf939zm().b[8][1]++, []);
    } catch (historyError) {
      /* istanbul ignore next */
      cov_1w0pf939zm().s[50]++;
      // Si la tabla no existe, continuar sin historial
      _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.DATABASE, 'Tabla order_status_history no existe', {
        historyError
      });
    }
    // Obtener notas si existe la tabla
    let orderNotes =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[51]++, []);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[52]++;
    try {
      const {
        data: notes
      } =
      /* istanbul ignore next */
      (cov_1w0pf939zm().s[53]++, await _supabase.supabaseAdmin.from('order_notes').select(`
          id,
          note_type,
          content,
          is_visible_to_customer,
          created_at,
          user_profiles!order_notes_admin_id_fkey (
            name,
            email
          )
        `).eq('order_id', orderId).order('created_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_1w0pf939zm().s[54]++;
      orderNotes =
      /* istanbul ignore next */
      (cov_1w0pf939zm().b[9][0]++, notes) ||
      /* istanbul ignore next */
      (cov_1w0pf939zm().b[9][1]++, []);
    } catch (notesError) {
      /* istanbul ignore next */
      cov_1w0pf939zm().s[55]++;
      // Si la tabla no existe, continuar sin notas
      _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.DATABASE, 'Tabla order_notes no existe', {
        notesError
      });
    }
    // Métricas de performance
    const responseTime =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[56]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[57]++;
    await _metrics.MetricsCollector.getInstance().recordRequest('admin-order-detail', 'GET', 200, responseTime);
    const response =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[58]++, {
      data: {
        order,
        statusHistory,
        notes: orderNotes
      },
      success: true,
      error: null
    });
    const nextResponse =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[59]++, _server.NextResponse.json(response));
    /* istanbul ignore next */
    cov_1w0pf939zm().s[60]++;
    (0, _ratelimiter.addRateLimitHeaders)(nextResponse, rateLimitResult);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[61]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.API, 'Orden obtenida exitosamente', {
      orderId,
      responseTime
    });
    /* istanbul ignore next */
    cov_1w0pf939zm().s[62]++;
    return nextResponse;
  } catch (error) {
    const responseTime =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[63]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[64]++;
    await _metrics.MetricsCollector.getInstance().recordRequest('admin-order-detail', 'GET', 500, responseTime);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[65]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error en GET /api/admin/orders/[id]', {
      error,
      orderId: params.id
    });
    /* istanbul ignore next */
    cov_1w0pf939zm().s[66]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1w0pf939zm().f[6]++;
  const startTime =
  /* istanbul ignore next */
  (cov_1w0pf939zm().s[67]++, Date.now());
  /* istanbul ignore next */
  cov_1w0pf939zm().s[68]++;
  try {
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[69]++, await (0, _ratelimiting.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.admin.requests, _ratelimiter.RATE_LIMIT_CONFIGS.admin.window, 'admin-order-update'));
    /* istanbul ignore next */
    cov_1w0pf939zm().s[70]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[10][0]++;
      const response =
      /* istanbul ignore next */
      (cov_1w0pf939zm().s[71]++, _server.NextResponse.json({
        error: 'Demasiadas solicitudes'
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_1w0pf939zm().s[72]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult);
      /* istanbul ignore next */
      cov_1w0pf939zm().s[73]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[10][1]++;
    }
    // Validar autenticación admin
    const authResult =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[74]++, await validateAdminAuth());
    /* istanbul ignore next */
    cov_1w0pf939zm().s[75]++;
    if ('error' in authResult) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[11][0]++;
      cov_1w0pf939zm().s[76]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[11][1]++;
    }
    const orderId =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[77]++, params.id);
    // Validar datos de entrada
    const body =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[78]++, await request.json());
    const validationResult =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[79]++, UpdateOrderSchema.safeParse(body));
    /* istanbul ignore next */
    cov_1w0pf939zm().s[80]++;
    if (!validationResult.success) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[12][0]++;
      cov_1w0pf939zm().s[81]++;
      return _server.NextResponse.json({
        error: 'Datos de actualización inválidos',
        details: validationResult.error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[12][1]++;
    }
    const updateData =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[82]++, validationResult.data);
    // Obtener orden actual para validar transiciones
    const {
      data: currentOrder,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[83]++, await _supabase.supabaseAdmin.from('orders').select('id, status, payment_status').eq('id', orderId).single());
    /* istanbul ignore next */
    cov_1w0pf939zm().s[84]++;
    if (fetchError) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[13][0]++;
      cov_1w0pf939zm().s[85]++;
      if (fetchError.code === 'PGRST116') {
        /* istanbul ignore next */
        cov_1w0pf939zm().b[14][0]++;
        cov_1w0pf939zm().s[86]++;
        return _server.NextResponse.json({
          error: 'Orden no encontrada'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_1w0pf939zm().b[14][1]++;
      }
      cov_1w0pf939zm().s[87]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.DATABASE, 'Error al obtener orden actual', {
        fetchError,
        orderId
      });
      /* istanbul ignore next */
      cov_1w0pf939zm().s[88]++;
      return _server.NextResponse.json({
        error: 'Error al obtener orden'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[13][1]++;
    }
    // Validar transición de estado si se está cambiando
    cov_1w0pf939zm().s[89]++;
    if (
    /* istanbul ignore next */
    (cov_1w0pf939zm().b[16][0]++, updateData.status) &&
    /* istanbul ignore next */
    (cov_1w0pf939zm().b[16][1]++, !validateStateTransition(currentOrder.status, updateData.status))) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[15][0]++;
      cov_1w0pf939zm().s[90]++;
      return _server.NextResponse.json({
        error: `Transición de estado inválida: ${currentOrder.status} → ${updateData.status}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[15][1]++;
    }
    // Preparar datos de actualización
    const updatePayload =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[91]++, {
      ...updateData,
      updated_at: new Date().toISOString()
    });
    // Convertir shipping_address a JSON si se proporciona
    /* istanbul ignore next */
    cov_1w0pf939zm().s[92]++;
    if (updateData.shipping_address) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[17][0]++;
      cov_1w0pf939zm().s[93]++;
      updatePayload.shipping_address = JSON.stringify(updateData.shipping_address);
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[17][1]++;
    }
    // Actualizar orden
    const {
      data: updatedOrder,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[94]++, await _supabase.supabaseAdmin.from('orders').update(updatePayload).eq('id', orderId).select().single());
    /* istanbul ignore next */
    cov_1w0pf939zm().s[95]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[18][0]++;
      cov_1w0pf939zm().s[96]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.DATABASE, 'Error al actualizar orden', {
        updateError,
        orderId
      });
      /* istanbul ignore next */
      cov_1w0pf939zm().s[97]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar orden'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[18][1]++;
    }
    // Registrar cambio de estado en historial si cambió el status
    cov_1w0pf939zm().s[98]++;
    if (
    /* istanbul ignore next */
    (cov_1w0pf939zm().b[20][0]++, updateData.status) &&
    /* istanbul ignore next */
    (cov_1w0pf939zm().b[20][1]++, updateData.status !== currentOrder.status)) {
      /* istanbul ignore next */
      cov_1w0pf939zm().b[19][0]++;
      cov_1w0pf939zm().s[99]++;
      try {
        /* istanbul ignore next */
        cov_1w0pf939zm().s[100]++;
        await _supabase.supabaseAdmin.from('order_status_history').insert({
          order_id: orderId,
          previous_status: currentOrder.status,
          new_status: updateData.status,
          changed_by: authResult.user.id,
          reason: `Cambio manual por administrador`
        });
      } catch (historyError) {
        /* istanbul ignore next */
        cov_1w0pf939zm().s[101]++;
        // Si la tabla no existe, continuar sin registrar historial
        _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.DATABASE, 'No se pudo registrar historial de estado', {
          historyError
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_1w0pf939zm().b[19][1]++;
    }
    // Métricas de performance
    const responseTime =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[102]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[103]++;
    await _metrics.MetricsCollector.getInstance().recordRequest('admin-order-update', 'PATCH', 200, responseTime);
    const response =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[104]++, {
      data: updatedOrder,
      success: true,
      error: null
    });
    const nextResponse =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[105]++, _server.NextResponse.json(response));
    /* istanbul ignore next */
    cov_1w0pf939zm().s[106]++;
    (0, _ratelimiter.addRateLimitHeaders)(nextResponse, rateLimitResult);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[107]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.API, 'Orden actualizada exitosamente', {
      orderId,
      changes: updateData,
      responseTime
    });
    /* istanbul ignore next */
    cov_1w0pf939zm().s[108]++;
    return nextResponse;
  } catch (error) {
    const responseTime =
    /* istanbul ignore next */
    (cov_1w0pf939zm().s[109]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[110]++;
    await _metrics.MetricsCollector.getInstance().recordRequest('admin-order-update', 'PATCH', 500, responseTime);
    /* istanbul ignore next */
    cov_1w0pf939zm().s[111]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error en PATCH /api/admin/orders/[id]', {
      error,
      orderId: params.id
    });
    /* istanbul ignore next */
    cov_1w0pf939zm().s[112]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,