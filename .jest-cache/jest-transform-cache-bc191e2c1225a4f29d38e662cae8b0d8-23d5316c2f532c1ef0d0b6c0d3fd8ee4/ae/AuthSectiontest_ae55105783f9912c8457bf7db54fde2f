37c916d4f7bed8e7b5abaaf24cced107
/**
 * AuthSection Enterprise Test - Versión NextAuth
 * Enfocado en validar la nueva estructura NextAuth sin dependencias Clerk
 */ "use strict";
// Mock NextAuth
jest.mock('next-auth/react', ()=>({
        useSession: jest.fn(),
        signIn: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _react2 = require("next-auth/react");
const _AuthSection = /*#__PURE__*/ _interop_require_default(require("../AuthSection"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseSession = _react2.useSession;
const mockSignIn = _react2.signIn;
// Mock user data
const mockUser = {
    id: 'user_123',
    name: 'Juan Pérez',
    email: 'juan@example.com'
};
describe('AuthSection Enterprise - NextAuth Structure', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Usuario no autenticado', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('debe renderizar botón de Google sign in', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass('bg-white/20', 'hover:bg-white/30');
        });
        it('debe mostrar SVG de Google en el botón', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const svg = _react1.screen.getByRole('button').querySelector('svg');
            expect(svg).toBeInTheDocument();
            expect(svg).toHaveClass('w-5', 'h-5');
        });
        it('debe llamar signIn cuando se hace click', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            _react1.fireEvent.click(button);
            expect(mockSignIn).toHaveBeenCalledWith('google');
        });
        it('debe tener estilos correctos para botón translúcido', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('backdrop-blur-sm', 'border-2', 'border-white/30', 'rounded-full', 'shadow-lg');
        });
    });
    describe('Usuario autenticado', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('debe mostrar enlace de admin cuando está autenticado', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const adminLink = _react1.screen.getByRole('link');
            expect(adminLink).toBeInTheDocument();
            expect(adminLink).toHaveAttribute('href', '/admin');
        });
        it('debe mostrar avatar del usuario', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const avatar = _react1.screen.getByText('J') // Primera letra de Juan
            ;
            expect(avatar).toBeInTheDocument();
            // Verificar que tiene un contenedor padre
            expect(avatar.parentElement).toBeInTheDocument();
        });
        it('debe tener botón admin con estilos correctos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const adminLink = _react1.screen.getByRole('link');
            expect(adminLink).toHaveClass('bg-orange-600', 'hover:bg-orange-700', 'text-white');
        });
        it('debe mostrar texto Admin en desktop', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const adminText = _react1.screen.getByText('Admin');
            expect(adminText).toBeInTheDocument();
        });
    });
    describe('Estado de carga', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'loading'
            });
        });
        it('debe mostrar skeleton de carga', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const skeleton = _react1.screen.getByText((content, element)=>{
                return element?.classList.contains('animate-pulse') || false;
            });
            expect(skeleton).toBeInTheDocument();
        });
    });
    describe('Variantes del componente', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('debe renderizar variante mobile correctamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('hover:scale-110');
        });
        it('debe renderizar variante topbar con texto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "topbar"
            }));
            const button = _react1.screen.getByText('Iniciar Sesión');
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass('text-gray-800');
        });
        it('debe renderizar variante default con efectos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "default"
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('hover:scale-105');
        });
    });
    describe('Variante mobile autenticado', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('debe mostrar botón admin y avatar en mobile', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            const adminLink = _react1.screen.getByRole('link');
            const avatar = _react1.screen.getByText('J');
            expect(adminLink).toHaveAttribute('href', '/admin');
            expect(avatar).toBeInTheDocument();
        });
    });
    describe('Variante topbar autenticado', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('debe mostrar solo avatar en topbar', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "topbar"
            }));
            const avatar = _react1.screen.getByText('J');
            expect(avatar).toBeInTheDocument();
            // Verificar que tiene un contenedor padre apropiado
            expect(avatar.parentElement).toBeInTheDocument();
        });
    });
    describe('Accesibilidad básica', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('debe ser accesible por teclado', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            button.focus();
            expect(document.activeElement).toBe(button);
        });
        it('debe tener rol de botón correcto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toBeInTheDocument();
        });
    });
    describe('Colores de Google branding', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('debe tener colores correctos de Google en SVG', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const svg = _react1.screen.getByRole('button').querySelector('svg');
            const paths = svg?.querySelectorAll('path');
            expect(paths).toHaveLength(4);
            const colors = Array.from(paths || []).map((path)=>path.getAttribute('fill'));
            expect(colors).toContain('#4285F4'); // Google Blue
            expect(colors).toContain('#34A853'); // Google Green
            expect(colors).toContain('#FBBC05'); // Google Yellow
            expect(colors).toContain('#EA4335'); // Google Red
        });
    });
});

//# sourceMappingURL=data:application/json;base64,