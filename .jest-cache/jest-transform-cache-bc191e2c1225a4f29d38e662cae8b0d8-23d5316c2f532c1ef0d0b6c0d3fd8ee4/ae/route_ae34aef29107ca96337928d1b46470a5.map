{"version":3,"names":["GET","cov_1w0pf939zm","f","s","PATCH","UpdateOrderSchema","_zod","z","object","status","enum","optional","payment_status","notes","string","tracking_number","carrier","shipping_address","street_name","min","street_number","zip_code","city_name","state_name","validateAdminAuth","session","_auth","auth","user","b","error","isAdmin","email","userId","id","_logger","logger","log","LogLevel","ERROR","LogCategory","AUTH","stateTransitions","pending","confirmed","processing","shipped","delivered","cancelled","refunded","returned","validateStateTransition","currentStatus","newStatus","includes","request","params","startTime","Date","now","rateLimitResult","_ratelimiting","checkRateLimit","_ratelimiter","RATE_LIMIT_CONFIGS","admin","requests","window","success","response","_server","NextResponse","json","addRateLimitHeaders","authResult","orderId","data","order","_supabase","supabaseAdmin","from","select","eq","single","code","DATABASE","statusHistory","history","ascending","historyError","WARN","orderNotes","notesError","responseTime","_metrics","MetricsCollector","getInstance","recordRequest","nextResponse","INFO","API","body","validationResult","safeParse","details","errors","updateData","currentOrder","fetchError","updatePayload","updated_at","toISOString","JSON","stringify","updatedOrder","updateError","update","insert","order_id","previous_status","new_status","changed_by","reason","changes"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN ORDER DETAIL API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { MetricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst UpdateOrderSchema = z.object({\r\n  status: z.enum(['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded']).optional(),\r\n  payment_status: z.enum(['pending', 'paid', 'failed', 'refunded']).optional(),\r\n  notes: z.string().optional(),\r\n  tracking_number: z.string().optional(),\r\n  carrier: z.string().optional(),\r\n  shipping_address: z.object({\r\n    street_name: z.string().min(1),\r\n    street_number: z.string().min(1),\r\n    zip_code: z.string().min(1),\r\n    city_name: z.string().min(1),\r\n    state_name: z.string().min(1),\r\n  }).optional(),\r\n});\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\r\n    return { error: 'Error de autenticación', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// VALIDACIONES DE TRANSICIÓN DE ESTADOS\r\n// ===================================\r\n\r\nconst stateTransitions: Record<string, string[]> = {\r\n  pending: ['confirmed', 'cancelled'],\r\n  confirmed: ['processing', 'cancelled'],\r\n  processing: ['shipped', 'cancelled'],\r\n  shipped: ['delivered', 'returned'],\r\n  delivered: ['returned'],\r\n  cancelled: [],\r\n  refunded: [],\r\n  returned: ['refunded']\r\n};\r\n\r\nfunction validateStateTransition(currentStatus: string, newStatus: string): boolean {\r\n  if (currentStatus === newStatus) {return true;}\r\n  return stateTransitions[currentStatus]?.includes(newStatus) || false;\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener orden específica\r\n// ===================================\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.admin.requests,\r\n      RATE_LIMIT_CONFIGS.admin.window,\r\n      'admin-order-detail'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Obtener orden con todos los detalles\r\n    const { data: order, error } = await supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        *,\r\n        user_profiles!orders_user_id_fkey (\r\n          id,\r\n          name,\r\n          email,\r\n          phone\r\n        ),\r\n        order_items (\r\n          id,\r\n          quantity,\r\n          unit_price,\r\n          total_price,\r\n          products (\r\n            id,\r\n            name,\r\n            images,\r\n            sku,\r\n            category\r\n          )\r\n        )\r\n      `)\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener orden', { error, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener historial de estados si existe la tabla\r\n    let statusHistory = [];\r\n    try {\r\n      const { data: history } = await supabaseAdmin\r\n        .from('order_status_history')\r\n        .select(`\r\n          id,\r\n          previous_status,\r\n          new_status,\r\n          reason,\r\n          created_at,\r\n          user_profiles!order_status_history_changed_by_fkey (\r\n            name,\r\n            email\r\n          )\r\n        `)\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: false });\r\n      \r\n      statusHistory = history || [];\r\n    } catch (historyError) {\r\n      // Si la tabla no existe, continuar sin historial\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Tabla order_status_history no existe', { historyError });\r\n    }\r\n\r\n    // Obtener notas si existe la tabla\r\n    let orderNotes = [];\r\n    try {\r\n      const { data: notes } = await supabaseAdmin\r\n        .from('order_notes')\r\n        .select(`\r\n          id,\r\n          note_type,\r\n          content,\r\n          is_visible_to_customer,\r\n          created_at,\r\n          user_profiles!order_notes_admin_id_fkey (\r\n            name,\r\n            email\r\n          )\r\n        `)\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: false });\r\n      \r\n      orderNotes = notes || [];\r\n    } catch (notesError) {\r\n      // Si la tabla no existe, continuar sin notas\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Tabla order_notes no existe', { notesError });\r\n    }\r\n\r\n    // Métricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-detail', 'GET', 200, responseTime);\r\n\r\n    const response: ApiResponse<{\r\n      order: typeof order;\r\n      statusHistory: typeof statusHistory;\r\n      notes: typeof orderNotes;\r\n    }> = {\r\n      data: {\r\n        order,\r\n        statusHistory,\r\n        notes: orderNotes,\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Orden obtenida exitosamente', {\r\n      orderId,\r\n      responseTime,\r\n    });\r\n\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-detail', 'GET', 500, responseTime);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/orders/[id]', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PATCH - Actualizar orden\r\n// ===================================\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.admin.requests,\r\n      RATE_LIMIT_CONFIGS.admin.window,\r\n      'admin-order-update'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = UpdateOrderSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de actualización inválidos', details: validationResult.error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const updateData = validationResult.data;\r\n\r\n    // Obtener orden actual para validar transiciones\r\n    const { data: currentOrder, error: fetchError } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('id, status, payment_status')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      if (fetchError.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener orden actual', { fetchError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Validar transición de estado si se está cambiando\r\n    if (updateData.status && !validateStateTransition(currentOrder.status, updateData.status)) {\r\n      return NextResponse.json(\r\n        { error: `Transición de estado inválida: ${currentOrder.status} → ${updateData.status}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos de actualización\r\n    const updatePayload: any = {\r\n      ...updateData,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Convertir shipping_address a JSON si se proporciona\r\n    if (updateData.shipping_address) {\r\n      updatePayload.shipping_address = JSON.stringify(updateData.shipping_address);\r\n    }\r\n\r\n    // Actualizar orden\r\n    const { data: updatedOrder, error: updateError } = await supabaseAdmin\r\n      .from('orders')\r\n      .update(updatePayload)\r\n      .eq('id', orderId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al actualizar orden', { updateError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar cambio de estado en historial si cambió el status\r\n    if (updateData.status && updateData.status !== currentOrder.status) {\r\n      try {\r\n        await supabaseAdmin\r\n          .from('order_status_history')\r\n          .insert({\r\n            order_id: orderId,\r\n            previous_status: currentOrder.status,\r\n            new_status: updateData.status,\r\n            changed_by: authResult.user.id,\r\n            reason: `Cambio manual por administrador`,\r\n          });\r\n      } catch (historyError) {\r\n        // Si la tabla no existe, continuar sin registrar historial\r\n        logger.log(LogLevel.WARN, LogCategory.DATABASE, 'No se pudo registrar historial de estado', { historyError });\r\n      }\r\n    }\r\n\r\n    // Métricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-update', 'PATCH', 200, responseTime);\r\n\r\n    const response: ApiResponse<typeof updatedOrder> = {\r\n      data: updatedOrder,\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Orden actualizada exitosamente', {\r\n      orderId,\r\n      changes: updateData,\r\n      responseTime,\r\n    });\r\n\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    await MetricsCollector.getInstance().recordRequest('admin-order-update', 'PATCH', 500, responseTime);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en PATCH /api/admin/orders/[id]', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}