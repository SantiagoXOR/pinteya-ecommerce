{"version":3,"names":["BundleOptimizationManager","constructor","cov_1v8kv25k1m","f","s","analysisCache","Map","config","getDefaultConfig","getInstance","instance","b","maxChunkSize","maxFirstLoadSize","enableTreeShaking","enableCodeSplitting","enableCompression","enableLazyLoading","performanceBudgets","maxBundleSize","maxFirstLoadJS","maxCSS","maxImages","warningThreshold","errorThreshold","updateConfig","newConfig","analyzeBundles","buildPath","cacheKey","Date","now","has","get","analysis","performBundleAnalysis","set","size","firstKey","keys","next","value","delete","error","console","Error","message","staticPath","_path","default","join","chunks","analyzeChunks","dependencies","analyzeDependencies","performance","calculatePerformanceMetrics","recommendations","generateRecommendations","totalSize","reduce","sum","chunk","gzippedSize","mockChunks","name","type","loadPriority","mockChunk","push","modules","analyzeChunkModules","warn","chunkName","path","imports","exports","isTreeShakeable","packageJsonPath","process","cwd","packageJson","JSON","parse","_fs","promises","readFile","devDependencies","Object","entries","map","version","estimateDependencySize","usage","analyzeDependencyUsage","alternatives","suggestAlternatives","optimizationPotential","calculateOptimizationPotential","sizeMap","criticalDeps","importantDeps","includes","optimizationMap","firstLoadJS","filter","totalJS","score","calculatePerformanceScore","grade","getPerformanceGrade","css","images","fonts","other","firstLoadRatio","totalRatio","penalty","Math","max","largeChunks","priority","description","round","estimatedSavings","implementation","effort","heavyDeps","dep","sort","a","priorityOrder","critical","high","medium","low","applyOptimizations","recommendation","applyLowEffortOptimization","implementLazyLoading","log","generateOptimizationReport","report","slice","rec","i","length","d"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\bundle-optimization-manager.ts"],"sourcesContent":["// ===================================\r\n// BUNDLE OPTIMIZATION MANAGER\r\n// ===================================\r\n// Sistema avanzado de optimización de bundles para Pinteya E-commerce\r\n\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS\r\n// ===================================\r\n\r\nexport interface BundleAnalysis {\r\n  totalSize: number;\r\n  gzippedSize: number;\r\n  chunks: ChunkInfo[];\r\n  dependencies: DependencyInfo[];\r\n  recommendations: OptimizationRecommendation[];\r\n  performance: PerformanceMetrics;\r\n}\r\n\r\nexport interface ChunkInfo {\r\n  name: string;\r\n  size: number;\r\n  gzippedSize: number;\r\n  modules: ModuleInfo[];\r\n  type: 'vendor' | 'app' | 'shared' | 'dynamic';\r\n  loadPriority: 'critical' | 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport interface ModuleInfo {\r\n  name: string;\r\n  size: number;\r\n  path: string;\r\n  imports: string[];\r\n  exports: string[];\r\n  isTreeShakeable: boolean;\r\n}\r\n\r\nexport interface DependencyInfo {\r\n  name: string;\r\n  version: string;\r\n  size: number;\r\n  usage: 'critical' | 'important' | 'optional' | 'unused';\r\n  alternatives?: string[];\r\n  optimizationPotential: number;\r\n}\r\n\r\nexport interface OptimizationRecommendation {\r\n  type: 'code-splitting' | 'tree-shaking' | 'dependency-replacement' | 'lazy-loading' | 'compression';\r\n  priority: 'critical' | 'high' | 'medium' | 'low';\r\n  description: string;\r\n  estimatedSavings: number;\r\n  implementation: string;\r\n  effort: 'low' | 'medium' | 'high';\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  firstLoadJS: number;\r\n  totalJS: number;\r\n  css: number;\r\n  images: number;\r\n  fonts: number;\r\n  other: number;\r\n  score: number;\r\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\r\n}\r\n\r\nexport interface BundleOptimizationConfig {\r\n  maxChunkSize: number;\r\n  maxFirstLoadSize: number;\r\n  enableTreeShaking: boolean;\r\n  enableCodeSplitting: boolean;\r\n  enableCompression: boolean;\r\n  enableLazyLoading: boolean;\r\n  performanceBudgets: PerformanceBudgets;\r\n}\r\n\r\nexport interface PerformanceBudgets {\r\n  maxBundleSize: number;\r\n  maxFirstLoadJS: number;\r\n  maxCSS: number;\r\n  maxImages: number;\r\n  warningThreshold: number;\r\n  errorThreshold: number;\r\n}\r\n\r\n// ===================================\r\n// BUNDLE OPTIMIZATION MANAGER\r\n// ===================================\r\n\r\nexport class BundleOptimizationManager {\r\n  private static instance: BundleOptimizationManager;\r\n  private config: BundleOptimizationConfig;\r\n  private analysisCache: Map<string, BundleAnalysis> = new Map();\r\n\r\n  private constructor() {\r\n    this.config = this.getDefaultConfig();\r\n  }\r\n\r\n  public static getInstance(): BundleOptimizationManager {\r\n    if (!BundleOptimizationManager.instance) {\r\n      BundleOptimizationManager.instance = new BundleOptimizationManager();\r\n    }\r\n    return BundleOptimizationManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // CONFIGURACIÓN\r\n  // ===================================\r\n\r\n  private getDefaultConfig(): BundleOptimizationConfig {\r\n    return {\r\n      maxChunkSize: 250 * 1024, // 250KB\r\n      maxFirstLoadSize: 128 * 1024, // 128KB\r\n      enableTreeShaking: true,\r\n      enableCodeSplitting: true,\r\n      enableCompression: true,\r\n      enableLazyLoading: true,\r\n      performanceBudgets: {\r\n        maxBundleSize: 500 * 1024, // 500KB\r\n        maxFirstLoadJS: 128 * 1024, // 128KB\r\n        maxCSS: 50 * 1024, // 50KB\r\n        maxImages: 200 * 1024, // 200KB\r\n        warningThreshold: 0.8, // 80%\r\n        errorThreshold: 1.0 // 100%\r\n      }\r\n    };\r\n  }\r\n\r\n  public updateConfig(newConfig: Partial<BundleOptimizationConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE BUNDLES\r\n  // ===================================\r\n\r\n  public async analyzeBundles(buildPath: string = '.next'): Promise<BundleAnalysis> {\r\n    const cacheKey = `${buildPath}-${Date.now()}`;\r\n    \r\n    if (this.analysisCache.has(cacheKey)) {\r\n      return this.analysisCache.get(cacheKey)!;\r\n    }\r\n\r\n    try {\r\n      const analysis = await this.performBundleAnalysis(buildPath);\r\n      this.analysisCache.set(cacheKey, analysis);\r\n      \r\n      // Limpiar cache antiguo\r\n      if (this.analysisCache.size > 5) {\r\n        const firstKey = this.analysisCache.keys().next().value;\r\n        this.analysisCache.delete(firstKey);\r\n      }\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      console.error('Error analyzing bundles:', error);\r\n      throw new Error(`Bundle analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  private async performBundleAnalysis(buildPath: string): Promise<BundleAnalysis> {\r\n    const staticPath = path.join(buildPath, 'static');\r\n    const chunks = await this.analyzeChunks(staticPath);\r\n    const dependencies = await this.analyzeDependencies();\r\n    const performance = this.calculatePerformanceMetrics(chunks);\r\n    const recommendations = this.generateRecommendations(chunks, dependencies, performance);\r\n\r\n    const totalSize = chunks.reduce((sum, chunk) => sum + chunk.size, 0);\r\n    const gzippedSize = chunks.reduce((sum, chunk) => sum + chunk.gzippedSize, 0);\r\n\r\n    return {\r\n      totalSize,\r\n      gzippedSize,\r\n      chunks,\r\n      dependencies,\r\n      recommendations,\r\n      performance\r\n    };\r\n  }\r\n\r\n  private async analyzeChunks(staticPath: string): Promise<ChunkInfo[]> {\r\n    const chunks: ChunkInfo[] = [];\r\n\r\n    try {\r\n      // Simular análisis de chunks (en implementación real usaríamos webpack-bundle-analyzer)\r\n      const mockChunks = [\r\n        {\r\n          name: 'main',\r\n          size: 85 * 1024,\r\n          gzippedSize: 28 * 1024,\r\n          type: 'app' as const,\r\n          loadPriority: 'critical' as const\r\n        },\r\n        {\r\n          name: 'vendors',\r\n          size: 180 * 1024,\r\n          gzippedSize: 65 * 1024,\r\n          type: 'vendor' as const,\r\n          loadPriority: 'critical' as const\r\n        },\r\n        {\r\n          name: 'admin',\r\n          size: 120 * 1024,\r\n          gzippedSize: 42 * 1024,\r\n          type: 'dynamic' as const,\r\n          loadPriority: 'medium' as const\r\n        }\r\n      ];\r\n\r\n      for (const mockChunk of mockChunks) {\r\n        chunks.push({\r\n          ...mockChunk,\r\n          modules: await this.analyzeChunkModules(mockChunk.name)\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Could not analyze chunks from filesystem, using mock data');\r\n    }\r\n\r\n    return chunks;\r\n  }\r\n\r\n  private async analyzeChunkModules(chunkName: string): Promise<ModuleInfo[]> {\r\n    // Simular análisis de módulos\r\n    return [\r\n      {\r\n        name: `${chunkName}-module-1`,\r\n        size: 15 * 1024,\r\n        path: `src/components/${chunkName}`,\r\n        imports: ['react', 'next'],\r\n        exports: ['default'],\r\n        isTreeShakeable: true\r\n      }\r\n    ];\r\n  }\r\n\r\n  private async analyzeDependencies(): Promise<DependencyInfo[]> {\r\n    try {\r\n      const packageJsonPath = path.join(process.cwd(), 'package.json');\r\n      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));\r\n      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\r\n\r\n      return Object.entries(dependencies).map(([name, version]) => ({\r\n        name,\r\n        version: version as string,\r\n        size: this.estimateDependencySize(name),\r\n        usage: this.analyzeDependencyUsage(name),\r\n        alternatives: this.suggestAlternatives(name),\r\n        optimizationPotential: this.calculateOptimizationPotential(name)\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Could not analyze dependencies:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private estimateDependencySize(name: string): number {\r\n    // Estimaciones basadas en dependencias comunes\r\n    const sizeMap: Record<string, number> = {\r\n      'react': 45 * 1024,\r\n      'react-dom': 130 * 1024,\r\n      'next': 200 * 1024,\r\n      'framer-motion': 180 * 1024,\r\n      'recharts': 250 * 1024,\r\n      'maplibre-gl': 400 * 1024,\r\n      'lodash-es': 70 * 1024,\r\n      '@radix-ui/react-dialog': 25 * 1024\r\n    };\r\n\r\n    return sizeMap[name] || 20 * 1024; // Default 20KB\r\n  }\r\n\r\n  private analyzeDependencyUsage(name: string): 'critical' | 'important' | 'optional' | 'unused' {\r\n    const criticalDeps = ['react', 'react-dom', 'next'];\r\n    const importantDeps = ['@supabase/supabase-js', 'zod', 'next-auth'];\r\n    \r\n    if (criticalDeps.includes(name)) {return 'critical';}\r\n    if (importantDeps.includes(name)) {return 'important';}\r\n    return 'optional';\r\n  }\r\n\r\n  private suggestAlternatives(name: string): string[] {\r\n    const alternatives: Record<string, string[]> = {\r\n      'lodash-es': ['ramda', 'native-methods'],\r\n      'moment': ['date-fns', 'dayjs'],\r\n      'recharts': ['chart.js', 'victory'],\r\n      'framer-motion': ['react-spring', 'lottie-react']\r\n    };\r\n\r\n    return alternatives[name] || [];\r\n  }\r\n\r\n  private calculateOptimizationPotential(name: string): number {\r\n    // Porcentaje de optimización potencial\r\n    const optimizationMap: Record<string, number> = {\r\n      'lodash-es': 60, // Tree shaking potential\r\n      'framer-motion': 40, // Code splitting potential\r\n      'recharts': 50, // Lazy loading potential\r\n      'maplibre-gl': 30 // Compression potential\r\n    };\r\n\r\n    return optimizationMap[name] || 10;\r\n  }\r\n\r\n  private calculatePerformanceMetrics(chunks: ChunkInfo[]): PerformanceMetrics {\r\n    const firstLoadJS = chunks\r\n      .filter(chunk => chunk.loadPriority === 'critical')\r\n      .reduce((sum, chunk) => sum + chunk.size, 0);\r\n\r\n    const totalJS = chunks.reduce((sum, chunk) => sum + chunk.size, 0);\r\n\r\n    // Calcular score basado en performance budgets\r\n    const score = this.calculatePerformanceScore(firstLoadJS, totalJS);\r\n    const grade = this.getPerformanceGrade(score);\r\n\r\n    return {\r\n      firstLoadJS,\r\n      totalJS,\r\n      css: 25 * 1024, // Estimado\r\n      images: 150 * 1024, // Estimado\r\n      fonts: 30 * 1024, // Estimado\r\n      other: 20 * 1024, // Estimado\r\n      score,\r\n      grade\r\n    };\r\n  }\r\n\r\n  private calculatePerformanceScore(firstLoadJS: number, totalJS: number): number {\r\n    const { performanceBudgets } = this.config;\r\n    \r\n    const firstLoadRatio = firstLoadJS / performanceBudgets.maxFirstLoadJS;\r\n    const totalRatio = totalJS / performanceBudgets.maxBundleSize;\r\n    \r\n    const penalty = Math.max(firstLoadRatio - 1, 0) + Math.max(totalRatio - 1, 0);\r\n    return Math.max(100 - (penalty * 50), 0);\r\n  }\r\n\r\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\r\n    if (score >= 90) {return 'A';}\r\n    if (score >= 80) {return 'B';}\r\n    if (score >= 70) {return 'C';}\r\n    if (score >= 60) {return 'D';}\r\n    return 'F';\r\n  }\r\n\r\n  private generateRecommendations(\r\n    chunks: ChunkInfo[],\r\n    dependencies: DependencyInfo[],\r\n    performance: PerformanceMetrics\r\n  ): OptimizationRecommendation[] {\r\n    const recommendations: OptimizationRecommendation[] = [];\r\n\r\n    // Recomendaciones basadas en tamaño de chunks\r\n    const largeChunks = chunks.filter(chunk => chunk.size > this.config.maxChunkSize);\r\n    for (const chunk of largeChunks) {\r\n      recommendations.push({\r\n        type: 'code-splitting',\r\n        priority: 'high',\r\n        description: `Chunk '${chunk.name}' es demasiado grande (${Math.round(chunk.size / 1024)}KB)`,\r\n        estimatedSavings: chunk.size * 0.3,\r\n        implementation: `Dividir ${chunk.name} en chunks más pequeños usando dynamic imports`,\r\n        effort: 'medium'\r\n      });\r\n    }\r\n\r\n    // Recomendaciones basadas en dependencias\r\n    const heavyDeps = dependencies.filter(dep => dep.size > 100 * 1024 && dep.optimizationPotential > 30);\r\n    for (const dep of heavyDeps) {\r\n      recommendations.push({\r\n        type: 'dependency-replacement',\r\n        priority: 'medium',\r\n        description: `Dependencia '${dep.name}' es pesada y tiene potencial de optimización`,\r\n        estimatedSavings: dep.size * (dep.optimizationPotential / 100),\r\n        implementation: `Considerar alternativas: ${dep.alternatives?.join(', ') || 'tree shaking'}`,\r\n        effort: 'high'\r\n      });\r\n    }\r\n\r\n    // Recomendaciones basadas en performance\r\n    if (performance.firstLoadJS > this.config.performanceBudgets.maxFirstLoadJS) {\r\n      recommendations.push({\r\n        type: 'lazy-loading',\r\n        priority: 'critical',\r\n        description: 'First Load JS excede el presupuesto de performance',\r\n        estimatedSavings: performance.firstLoadJS - this.config.performanceBudgets.maxFirstLoadJS,\r\n        implementation: 'Implementar lazy loading para componentes no críticos',\r\n        effort: 'low'\r\n      });\r\n    }\r\n\r\n    return recommendations.sort((a, b) => {\r\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\r\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n    });\r\n  }\r\n\r\n  // ===================================\r\n  // OPTIMIZACIONES AUTOMÁTICAS\r\n  // ===================================\r\n\r\n  public async applyOptimizations(recommendations: OptimizationRecommendation[]): Promise<void> {\r\n    for (const recommendation of recommendations) {\r\n      if (recommendation.effort === 'low') {\r\n        await this.applyLowEffortOptimization(recommendation);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async applyLowEffortOptimization(recommendation: OptimizationRecommendation): Promise<void> {\r\n    switch (recommendation.type) {\r\n      case 'lazy-loading':\r\n        await this.implementLazyLoading();\r\n        break;\r\n      case 'compression':\r\n        await this.enableCompression();\r\n        break;\r\n      default:\r\n        console.log(`Optimization ${recommendation.type} requires manual implementation`);\r\n    }\r\n  }\r\n\r\n  private async implementLazyLoading(): Promise<void> {\r\n    // Implementar lazy loading automático para componentes pesados\r\n    console.log('Implementing automatic lazy loading...');\r\n  }\r\n\r\n  private async enableCompression(): Promise<void> {\r\n    // Habilitar compresión automática\r\n    console.log('Enabling compression...');\r\n  }\r\n\r\n  // ===================================\r\n  // REPORTES Y MÉTRICAS\r\n  // ===================================\r\n\r\n  public generateOptimizationReport(analysis: BundleAnalysis): string {\r\n    const report = `\r\n# Bundle Optimization Report\r\n\r\n## Performance Metrics\r\n- **Score**: ${analysis.performance.score}/100 (Grade: ${analysis.performance.grade})\r\n- **First Load JS**: ${Math.round(analysis.performance.firstLoadJS / 1024)}KB\r\n- **Total JS**: ${Math.round(analysis.performance.totalJS / 1024)}KB\r\n- **Total Bundle Size**: ${Math.round(analysis.totalSize / 1024)}KB\r\n- **Gzipped Size**: ${Math.round(analysis.gzippedSize / 1024)}KB\r\n\r\n## Chunks Analysis\r\n${analysis.chunks.map(chunk => `\r\n- **${chunk.name}**: ${Math.round(chunk.size / 1024)}KB (${chunk.type}, ${chunk.loadPriority} priority)\r\n`).join('')}\r\n\r\n## Top Recommendations\r\n${analysis.recommendations.slice(0, 5).map((rec, i) => `\r\n${i + 1}. **${rec.type}** (${rec.priority} priority)\r\n   - ${rec.description}\r\n   - Estimated savings: ${Math.round(rec.estimatedSavings / 1024)}KB\r\n   - Implementation: ${rec.implementation}\r\n`).join('')}\r\n\r\n## Dependencies Analysis\r\n- **Total Dependencies**: ${analysis.dependencies.length}\r\n- **Heavy Dependencies**: ${analysis.dependencies.filter(d => d.size > 100 * 1024).length}\r\n- **Optimization Potential**: ${Math.round(analysis.dependencies.reduce((sum, d) => sum + d.optimizationPotential, 0) / analysis.dependencies.length)}%\r\n`;\r\n\r\n    return report;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}