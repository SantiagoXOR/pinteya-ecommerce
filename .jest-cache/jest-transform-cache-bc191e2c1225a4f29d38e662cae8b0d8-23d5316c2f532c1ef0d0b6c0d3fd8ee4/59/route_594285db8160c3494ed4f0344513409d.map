{"version":3,"names":["cov_2nt1x6jlt9","actualCoverage","s","GET","f","runtime","request","_supabase","supabaseAdmin","b","console","error","_server","NextResponse","json","status","session","_config","auth","user","id","searchParams","URL","url","page","parseInt","get","limit","log","query","from","select","eq","to","data","orders","count","order","ascending","range","stats","statistics","total_orders","length","total_spent","reduce","sum","parseFloat","total","pending_orders","filter","completed_orders","success","pagination","pages","Math","ceil"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\orders\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE ÓRDENES DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// GET - Obtener órdenes del usuario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/orders');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario autenticado usando NextAuth.js\r\n    const session = await auth();\r\n\r\n    if (!session?.user?.id) {\r\n      console.error('Usuario no autenticado en GET /api/user/orders');\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const limit = parseInt(searchParams.get('limit') || '10');\r\n    const status = searchParams.get('status');\r\n\r\n    console.log(`[API] Obteniendo órdenes para usuario: ${session.user.id}`);\r\n\r\n    // Construir query base usando directamente el ID del usuario de NextAuth.js\r\n    let query = supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        *,\r\n        order_items (\r\n          id,\r\n          quantity,\r\n          price,\r\n          products (\r\n            id,\r\n            name,\r\n            images\r\n          )\r\n        )\r\n      `)\r\n      .eq('user_id', session.user.id);\r\n\r\n    // Filtrar por status si se especifica\r\n    if (status && status !== 'all') {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    // Aplicar paginación y ordenamiento\r\n    const from = (page - 1) * limit;\r\n    const to = from + limit - 1;\r\n\r\n    const { data: orders, error, count } = await query\r\n      .order('created_at', { ascending: false })\r\n      .range(from, to);\r\n\r\n    if (error) {\r\n      console.error('Error al obtener órdenes:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener órdenes' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Calcular estadísticas\r\n    const { data: stats } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('status, total')\r\n      .eq('user_id', session.user.id);\r\n\r\n    const statistics = {\r\n      total_orders: stats?.length || 0,\r\n      total_spent: stats?.reduce((sum, order) => sum + parseFloat(order.total), 0) || 0,\r\n      pending_orders: stats?.filter(order => order.status === 'pending').length || 0,\r\n      completed_orders: stats?.filter(order => order.status === 'delivered').length || 0,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: orders || [],\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total: count || 0,\r\n        pages: Math.ceil((count || 0) / limit),\r\n      },\r\n      statistics,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/orders:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}