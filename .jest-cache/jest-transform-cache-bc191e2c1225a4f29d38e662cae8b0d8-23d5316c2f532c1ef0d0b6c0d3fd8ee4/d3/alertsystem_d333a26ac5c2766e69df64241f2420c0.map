{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\alert-system.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE ALERT SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { emailService } from '@/lib/notifications/email';\r\nimport { slackService } from '@/lib/notifications/slack';\r\n\r\n// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente\r\nlet CacheUtils: any = null;\r\nif (typeof window === 'undefined') {\r\n  // Solo en servidor\r\n  try {\r\n    CacheUtils = require('@/lib/cache-manager').CacheUtils;\r\n  } catch (error) {\r\n    console.warn('[EnterpriseAlertSystem] CacheUtils not available:', error);\r\n  }\r\n}\r\n\r\n// Niveles de alerta con escalamiento\r\nexport enum AlertLevel {\r\n  INFO = 'info',\r\n  WARNING = 'warning', \r\n  CRITICAL = 'critical',\r\n  EMERGENCY = 'emergency'\r\n}\r\n\r\n// Tipos de notificación\r\nexport enum NotificationType {\r\n  EMAIL = 'email',\r\n  SLACK = 'slack',\r\n  WEBHOOK = 'webhook',\r\n  SMS = 'sms',\r\n  PUSH = 'push',\r\n  LOG = 'log'\r\n}\r\n\r\n// Estados de alerta\r\nexport enum AlertStatus {\r\n  ACTIVE = 'active',\r\n  ACKNOWLEDGED = 'acknowledged',\r\n  RESOLVED = 'resolved',\r\n  SUPPRESSED = 'suppressed'\r\n}\r\n\r\n// Configuración de canal de notificación\r\nexport interface NotificationChannel {\r\n  id: string;\r\n  type: NotificationType;\r\n  name: string;\r\n  config: Record<string, any>;\r\n  enabled: boolean;\r\n  levels: AlertLevel[];\r\n  rateLimit?: {\r\n    maxPerHour: number;\r\n    maxPerDay: number;\r\n  };\r\n}\r\n\r\n// Regla de escalamiento\r\nexport interface EscalationRule {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  conditions: {\r\n    level: AlertLevel;\r\n    duration: number; // minutos sin resolución\r\n    repeatCount?: number; // número de repeticiones\r\n  };\r\n  actions: {\r\n    escalateToLevel?: AlertLevel;\r\n    notifyChannels: string[]; // IDs de canales\r\n    assignToUser?: string;\r\n  };\r\n}\r\n\r\n// Configuración de alerta\r\nexport interface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  enabled: boolean;\r\n  metricName: string;\r\n  condition: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\r\n  threshold: number;\r\n  level: AlertLevel;\r\n  cooldownMinutes: number;\r\n  channels: string[]; // IDs de canales de notificación\r\n  escalationRules: string[]; // IDs de reglas de escalamiento\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Alerta activa\r\nexport interface Alert {\r\n  id: string;\r\n  ruleId: string;\r\n  ruleName: string;\r\n  level: AlertLevel;\r\n  status: AlertStatus;\r\n  message: string;\r\n  metricName: string;\r\n  value: number;\r\n  threshold: number;\r\n  triggeredAt: string;\r\n  acknowledgedAt?: string;\r\n  acknowledgedBy?: string;\r\n  resolvedAt?: string;\r\n  resolvedBy?: string;\r\n  escalatedAt?: string;\r\n  escalatedFrom?: AlertLevel;\r\n  notificationsSent: NotificationLog[];\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Log de notificación\r\nexport interface NotificationLog {\r\n  id: string;\r\n  channelId: string;\r\n  channelType: NotificationType;\r\n  sentAt: string;\r\n  success: boolean;\r\n  error?: string;\r\n  responseTime: number;\r\n}\r\n\r\n/**\r\n * Sistema de Alertas Enterprise con escalamiento automático\r\n */\r\nexport class EnterpriseAlertSystem {\r\n  private static instance: EnterpriseAlertSystem;\r\n  private alertRules: Map<string, AlertRule> = new Map();\r\n  private notificationChannels: Map<string, NotificationChannel> = new Map();\r\n  private escalationRules: Map<string, EscalationRule> = new Map();\r\n  private activeAlerts: Map<string, Alert> = new Map();\r\n  private escalationInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.initializeDefaultChannels();\r\n    this.initializeDefaultRules();\r\n    this.startEscalationMonitoring();\r\n  }\r\n\r\n  static getInstance(): EnterpriseAlertSystem {\r\n    if (!EnterpriseAlertSystem.instance) {\r\n      EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();\r\n    }\r\n    return EnterpriseAlertSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Configura un canal de notificación\r\n   */\r\n  setNotificationChannel(channel: NotificationChannel): void {\r\n    this.notificationChannels.set(channel.id, channel);\r\n    logger.info(LogLevel.INFO, `Notification channel configured: ${channel.id}`, {\r\n      type: channel.type,\r\n      enabled: channel.enabled,\r\n      levels: channel.levels\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de escalamiento\r\n   */\r\n  setEscalationRule(rule: EscalationRule): void {\r\n    this.escalationRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Escalation rule configured: ${rule.id}`, {\r\n      level: rule.conditions.level,\r\n      duration: rule.conditions.duration,\r\n      enabled: rule.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de alerta\r\n   */\r\n  setAlertRule(rule: AlertRule): void {\r\n    this.alertRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Alert rule configured: ${rule.id}`, {\r\n      metricName: rule.metricName,\r\n      threshold: rule.threshold,\r\n      level: rule.level,\r\n      enabled: rule.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Dispara una alerta\r\n   */\r\n  async triggerAlert(\r\n    ruleId: string,\r\n    metricName: string,\r\n    value: number,\r\n    message?: string\r\n  ): Promise<Alert | null> {\r\n    const rule = this.alertRules.get(ruleId);\r\n    if (!rule || !rule.enabled) {\r\n      return null;\r\n    }\r\n\r\n    // Verificar cooldown\r\n    const existingAlert = Array.from(this.activeAlerts.values())\r\n      .find(alert => alert.ruleId === ruleId && alert.status === AlertStatus.ACTIVE);\r\n\r\n    if (existingAlert) {\r\n      const cooldownEnd = new Date(existingAlert.triggeredAt);\r\n      cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);\r\n      \r\n      if (new Date() < cooldownEnd) {\r\n        return null; // Aún en cooldown\r\n      }\r\n    }\r\n\r\n    // Crear nueva alerta\r\n    const alert: Alert = {\r\n      id: this.generateAlertId(),\r\n      ruleId: rule.id,\r\n      ruleName: rule.name,\r\n      level: rule.level,\r\n      status: AlertStatus.ACTIVE,\r\n      message: message || `${rule.description} - Value: ${value}, Threshold: ${rule.threshold}`,\r\n      metricName,\r\n      value,\r\n      threshold: rule.threshold,\r\n      triggeredAt: new Date().toISOString(),\r\n      notificationsSent: [],\r\n      tags: rule.tags,\r\n      metadata: rule.metadata\r\n    };\r\n\r\n    this.activeAlerts.set(alert.id, alert);\r\n\r\n    // Enviar notificaciones\r\n    await this.sendNotifications(alert, rule.channels);\r\n\r\n    // Almacenar en base de datos\r\n    await this.storeAlert(alert);\r\n\r\n    logger.warn(LogLevel.WARN, `Alert triggered: ${rule.name}`, {\r\n      alertId: alert.id,\r\n      level: alert.level,\r\n      metricName: alert.metricName,\r\n      value: alert.value,\r\n      threshold: alert.threshold\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return alert;\r\n  }\r\n\r\n  /**\r\n   * Reconoce una alerta\r\n   */\r\n  async acknowledgeAlert(alertId: string, userId: string): Promise<boolean> {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {\r\n      return false;\r\n    }\r\n\r\n    alert.status = AlertStatus.ACKNOWLEDGED;\r\n    alert.acknowledgedAt = new Date().toISOString();\r\n    alert.acknowledgedBy = userId;\r\n\r\n    await this.updateAlert(alert);\r\n\r\n    logger.info(LogLevel.INFO, `Alert acknowledged: ${alertId}`, {\r\n      userId,\r\n      level: alert.level,\r\n      ruleName: alert.ruleName\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  async resolveAlert(alertId: string, userId?: string): Promise<boolean> {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (!alert) {\r\n      return false;\r\n    }\r\n\r\n    alert.status = AlertStatus.RESOLVED;\r\n    alert.resolvedAt = new Date().toISOString();\r\n    alert.resolvedBy = userId;\r\n\r\n    await this.updateAlert(alert);\r\n    this.activeAlerts.delete(alertId);\r\n\r\n    logger.info(LogLevel.INFO, `Alert resolved: ${alertId}`, {\r\n      userId,\r\n      level: alert.level,\r\n      ruleName: alert.ruleName,\r\n      duration: this.calculateDuration(alert.triggeredAt, alert.resolvedAt!)\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Envía notificaciones para una alerta\r\n   */\r\n  private async sendNotifications(alert: Alert, channelIds: string[]): Promise<void> {\r\n    const notifications = await Promise.allSettled(\r\n      channelIds.map(channelId => this.sendNotification(alert, channelId))\r\n    );\r\n\r\n    // Log resultados\r\n    notifications.forEach((result, index) => {\r\n      const channelId = channelIds[index];\r\n      if (result.status === 'fulfilled' && result.value) {\r\n        alert.notificationsSent.push(result.value);\r\n      } else if (result.status === 'rejected') {\r\n        logger.error(LogLevel.ERROR, `Failed to send notification to channel: ${channelId}`, {\r\n          alertId: alert.id,\r\n          error: result.reason\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Envía notificación a un canal específico\r\n   */\r\n  private async sendNotification(alert: Alert, channelId: string): Promise<NotificationLog | null> {\r\n    const channel = this.notificationChannels.get(channelId);\r\n    if (!channel || !channel.enabled || !channel.levels.includes(alert.level)) {\r\n      return null;\r\n    }\r\n\r\n    // Verificar rate limiting\r\n    if (channel.rateLimit && !(await this.checkRateLimit(channelId, channel.rateLimit))) {\r\n      logger.warn(LogLevel.WARN, `Rate limit exceeded for channel: ${channelId}`, {\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n      return null;\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    let success = false;\r\n    let error: string | undefined;\r\n\r\n    try {\r\n      switch (channel.type) {\r\n        case NotificationType.EMAIL:\r\n          await this.sendEmailNotification(alert, channel);\r\n          break;\r\n        case NotificationType.SLACK:\r\n          await this.sendSlackNotification(alert, channel);\r\n          break;\r\n        case NotificationType.WEBHOOK:\r\n          await this.sendWebhookNotification(alert, channel);\r\n          break;\r\n        case NotificationType.SMS:\r\n          await this.sendSMSNotification(alert, channel);\r\n          break;\r\n        case NotificationType.LOG:\r\n          await this.sendLogNotification(alert, channel);\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported notification type: ${channel.type}`);\r\n      }\r\n      success = true;\r\n    } catch (err) {\r\n      error = err instanceof Error ? err.message : 'Unknown error';\r\n    }\r\n\r\n    const notificationLog: NotificationLog = {\r\n      id: this.generateNotificationId(),\r\n      channelId,\r\n      channelType: channel.type,\r\n      sentAt: new Date().toISOString(),\r\n      success,\r\n      error,\r\n      responseTime: Date.now() - startTime\r\n    };\r\n\r\n    return notificationLog;\r\n  }\r\n\r\n  /**\r\n   * Monitoreo de escalamiento automático\r\n   */\r\n  private async checkEscalations(): Promise<void> {\r\n    for (const alert of this.activeAlerts.values()) {\r\n      if (alert.status !== AlertStatus.ACTIVE) {\r\n        continue;\r\n      }\r\n\r\n      const rule = this.alertRules.get(alert.ruleId);\r\n      if (!rule) {\r\n        continue;\r\n      }\r\n\r\n      // Verificar reglas de escalamiento\r\n      for (const escalationRuleId of rule.escalationRules) {\r\n        const escalationRule = this.escalationRules.get(escalationRuleId);\r\n        if (!escalationRule || !escalationRule.enabled) {\r\n          continue;\r\n        }\r\n\r\n        // Verificar condiciones de escalamiento\r\n        if (this.shouldEscalate(alert, escalationRule)) {\r\n          await this.escalateAlert(alert, escalationRule);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si una alerta debe escalarse\r\n   */\r\n  private shouldEscalate(alert: Alert, rule: EscalationRule): boolean {\r\n    // Verificar nivel\r\n    if (alert.level !== rule.conditions.level) {\r\n      return false;\r\n    }\r\n\r\n    // Verificar duración\r\n    const alertAge = Date.now() - new Date(alert.triggeredAt).getTime();\r\n    const requiredDuration = rule.conditions.duration * 60 * 1000; // convertir a ms\r\n\r\n    if (alertAge < requiredDuration) {\r\n      return false;\r\n    }\r\n\r\n    // Verificar si ya fue escalada\r\n    if (alert.escalatedAt) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Escala una alerta\r\n   */\r\n  private async escalateAlert(alert: Alert, rule: EscalationRule): Promise<void> {\r\n    const originalLevel = alert.level;\r\n    \r\n    // Actualizar nivel si es necesario\r\n    if (rule.actions.escalateToLevel) {\r\n      alert.level = rule.actions.escalateToLevel;\r\n      alert.escalatedFrom = originalLevel;\r\n    }\r\n\r\n    alert.escalatedAt = new Date().toISOString();\r\n\r\n    // Enviar notificaciones de escalamiento\r\n    await this.sendNotifications(alert, rule.actions.notifyChannels);\r\n\r\n    // Asignar a usuario si es necesario\r\n    if (rule.actions.assignToUser) {\r\n      alert.metadata = {\r\n        ...alert.metadata,\r\n        assignedTo: rule.actions.assignToUser\r\n      };\r\n    }\r\n\r\n    await this.updateAlert(alert);\r\n\r\n    logger.error(LogLevel.ERROR, `Alert escalated: ${alert.id}`, {\r\n      originalLevel,\r\n      newLevel: alert.level,\r\n      escalationRule: rule.name,\r\n      duration: this.calculateDuration(alert.triggeredAt, alert.escalatedAt)\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Implementaciones de notificación específicas\r\n   */\r\n  private async sendEmailNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    try {\r\n      const subject = `[${alert.level.toUpperCase()}] ${alert.ruleName}`;\r\n      const emailData = {\r\n        to: channel.config.to || ['admin@example.com'],\r\n        subject,\r\n        template: 'alert-notification',\r\n        data: {\r\n          alert,\r\n          level: alert.level.toUpperCase(),\r\n          timestamp: new Date(alert.triggeredAt).toLocaleString(),\r\n          message: alert.message,\r\n          metricName: alert.metricName,\r\n          value: alert.value,\r\n          threshold: alert.threshold\r\n        },\r\n        priority: alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.EMERGENCY ? 'high' as const : 'normal' as const\r\n      };\r\n\r\n      await emailService.sendNotification(emailData);\r\n      \r\n      logger.info(LogLevel.INFO, `Email notification sent successfully`, {\r\n        alertId: alert.id,\r\n        to: channel.config.to,\r\n        subject\r\n      }, LogCategory.SYSTEM);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to send email notification`, {\r\n        alertId: alert.id,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async sendSlackNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    try {\r\n      const alertData = {\r\n        title: `${alert.level.toUpperCase()}: ${alert.ruleName}`,\r\n        message: alert.message,\r\n        severity: alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.EMERGENCY ? 'error' as const : \r\n                 alert.level === AlertLevel.WARNING ? 'warning' as const : 'info' as const,\r\n        details: {\r\n          'Alert ID': alert.id,\r\n          'Timestamp': new Date(alert.triggeredAt).toLocaleString(),\r\n          'Metric': alert.metricName,\r\n          'Value': alert.value?.toString() || 'N/A',\r\n          'Threshold': alert.threshold?.toString() || 'N/A',\r\n          'Status': alert.status,\r\n          ...alert.tags\r\n        }\r\n      };\r\n\r\n      await slackService.sendSystemAlert(alertData);\r\n      \r\n      logger.info(LogLevel.INFO, `Slack notification sent successfully`, {\r\n        alertId: alert.id,\r\n        channel: channel.config.channel,\r\n        webhook: channel.config.webhookUrl ? 'configured' : 'missing'\r\n      }, LogCategory.SYSTEM);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to send Slack notification`, {\r\n        alertId: alert.id,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async sendWebhookNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    if (!channel.config.url) {\r\n      throw new Error('Webhook URL not configured');\r\n    }\r\n\r\n    const response = await fetch(channel.config.url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(channel.config.headers || {})\r\n      },\r\n      body: JSON.stringify({\r\n        alert,\r\n        timestamp: new Date().toISOString(),\r\n        source: 'pinteya-ecommerce'\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\r\n    }\r\n  }\r\n\r\n  private async sendSMSNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    // TODO: Implementar envío de SMS\r\n    logger.info(LogLevel.INFO, `SMS notification sent`, {\r\n      alertId: alert.id,\r\n      to: channel.config.phoneNumber\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  private async sendLogNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    const logLevel = alert.level === AlertLevel.EMERGENCY || alert.level === AlertLevel.CRITICAL \r\n      ? LogLevel.ERROR \r\n      : LogLevel.WARN;\r\n\r\n    logger.log(logLevel, `ALERT: ${alert.message}`, {\r\n      alertId: alert.id,\r\n      level: alert.level,\r\n      metricName: alert.metricName,\r\n      value: alert.value,\r\n      threshold: alert.threshold,\r\n      ruleName: alert.ruleName\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Inicializa canales por defecto\r\n   */\r\n  private initializeDefaultChannels(): void {\r\n    // Canal de log por defecto\r\n    this.setNotificationChannel({\r\n      id: 'default_log',\r\n      type: NotificationType.LOG,\r\n      name: 'Default Log Channel',\r\n      config: {},\r\n      enabled: true,\r\n      levels: [AlertLevel.INFO, AlertLevel.WARNING, AlertLevel.CRITICAL, AlertLevel.EMERGENCY]\r\n    });\r\n\r\n    // Canal de webhook por defecto (deshabilitado)\r\n    this.setNotificationChannel({\r\n      id: 'default_webhook',\r\n      type: NotificationType.WEBHOOK,\r\n      name: 'Default Webhook Channel',\r\n      config: {\r\n        url: process.env.ALERT_WEBHOOK_URL || ''\r\n      },\r\n      enabled: false,\r\n      levels: [AlertLevel.CRITICAL, AlertLevel.EMERGENCY],\r\n      rateLimit: {\r\n        maxPerHour: 10,\r\n        maxPerDay: 50\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicializa reglas por defecto\r\n   */\r\n  private initializeDefaultRules(): void {\r\n    // Regla de escalamiento para alertas críticas\r\n    this.setEscalationRule({\r\n      id: 'critical_escalation',\r\n      name: 'Critical Alert Escalation',\r\n      enabled: true,\r\n      conditions: {\r\n        level: AlertLevel.CRITICAL,\r\n        duration: 15 // 15 minutos\r\n      },\r\n      actions: {\r\n        escalateToLevel: AlertLevel.EMERGENCY,\r\n        notifyChannels: ['default_log', 'default_webhook']\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicia monitoreo de escalamiento\r\n   */\r\n  private startEscalationMonitoring(): void {\r\n    this.escalationInterval = setInterval(() => {\r\n      this.checkEscalations();\r\n    }, 60000); // Verificar cada minuto\r\n  }\r\n\r\n  /**\r\n   * Funciones auxiliares\r\n   */\r\n  private generateAlertId(): string {\r\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generateNotificationId(): string {\r\n    return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private calculateDuration(start: string, end: string): number {\r\n    return Math.round((new Date(end).getTime() - new Date(start).getTime()) / 1000 / 60); // minutos\r\n  }\r\n\r\n  private async checkRateLimit(channelId: string, rateLimit: { maxPerHour: number; maxPerDay: number }): Promise<boolean> {\r\n    // TODO: Implementar verificación de rate limiting con Redis\r\n    return true;\r\n  }\r\n\r\n  private async storeAlert(alert: Alert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase.from('enterprise_alerts').insert({\r\n        id: alert.id,\r\n        rule_id: alert.ruleId,\r\n        rule_name: alert.ruleName,\r\n        level: alert.level,\r\n        status: alert.status,\r\n        message: alert.message,\r\n        metric_name: alert.metricName,\r\n        value: alert.value,\r\n        threshold: alert.threshold,\r\n        triggered_at: alert.triggeredAt,\r\n        acknowledged_at: alert.acknowledgedAt,\r\n        acknowledged_by: alert.acknowledgedBy,\r\n        resolved_at: alert.resolvedAt,\r\n        resolved_by: alert.resolvedBy,\r\n        escalated_at: alert.escalatedAt,\r\n        escalated_from: alert.escalatedFrom,\r\n        notifications_sent: alert.notificationsSent,\r\n        tags: alert.tags,\r\n        metadata: alert.metadata\r\n      });\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to store alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  private async updateAlert(alert: Alert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase\r\n        .from('enterprise_alerts')\r\n        .update({\r\n          level: alert.level,\r\n          status: alert.status,\r\n          acknowledged_at: alert.acknowledgedAt,\r\n          acknowledged_by: alert.acknowledgedBy,\r\n          resolved_at: alert.resolvedAt,\r\n          resolved_by: alert.resolvedBy,\r\n          escalated_at: alert.escalatedAt,\r\n          escalated_from: alert.escalatedFrom,\r\n          notifications_sent: alert.notificationsSent,\r\n          metadata: alert.metadata\r\n        })\r\n        .eq('id', alert.id);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to update alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    if (this.escalationInterval) {\r\n      clearInterval(this.escalationInterval);\r\n      this.escalationInterval = null;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance();\r\n\r\n// Funciones de conveniencia\r\nexport const triggerAlert = enterpriseAlertSystem.triggerAlert.bind(enterpriseAlertSystem);\r\nexport const acknowledgeAlert = enterpriseAlertSystem.acknowledgeAlert.bind(enterpriseAlertSystem);\r\nexport const resolveAlert = enterpriseAlertSystem.resolveAlert.bind(enterpriseAlertSystem);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["AlertLevel","AlertStatus","EnterpriseAlertSystem","NotificationType","acknowledgeAlert","enterpriseAlertSystem","resolveAlert","triggerAlert","CacheUtils","window","require","error","console","warn","alertRules","Map","notificationChannels","escalationRules","activeAlerts","escalationInterval","initializeDefaultChannels","initializeDefaultRules","startEscalationMonitoring","getInstance","instance","setNotificationChannel","channel","set","id","logger","info","LogLevel","INFO","type","enabled","levels","LogCategory","SYSTEM","setEscalationRule","rule","level","conditions","duration","setAlertRule","metricName","threshold","ruleId","value","message","get","existingAlert","Array","from","values","find","alert","status","cooldownEnd","Date","triggeredAt","setMinutes","getMinutes","cooldownMinutes","generateAlertId","ruleName","name","description","toISOString","notificationsSent","tags","metadata","sendNotifications","channels","storeAlert","WARN","alertId","userId","acknowledgedAt","acknowledgedBy","updateAlert","resolvedAt","resolvedBy","delete","calculateDuration","channelIds","notifications","Promise","allSettled","map","channelId","sendNotification","forEach","result","index","push","ERROR","reason","includes","rateLimit","checkRateLimit","startTime","now","success","sendEmailNotification","sendSlackNotification","sendWebhookNotification","sendSMSNotification","sendLogNotification","Error","err","notificationLog","generateNotificationId","channelType","sentAt","responseTime","checkEscalations","escalationRuleId","escalationRule","shouldEscalate","escalateAlert","alertAge","getTime","requiredDuration","escalatedAt","originalLevel","actions","escalateToLevel","escalatedFrom","notifyChannels","assignToUser","assignedTo","newLevel","subject","toUpperCase","emailData","to","config","template","data","timestamp","toLocaleString","priority","emailService","alertData","title","severity","details","toString","slackService","sendSystemAlert","webhook","webhookUrl","url","response","fetch","method","headers","body","JSON","stringify","source","ok","statusText","phoneNumber","logLevel","log","process","env","ALERT_WEBHOOK_URL","maxPerHour","maxPerDay","setInterval","Math","random","substr","start","end","round","supabase","getSupabaseClient","insert","rule_id","rule_name","metric_name","triggered_at","acknowledged_at","acknowledged_by","resolved_at","resolved_by","escalated_at","escalated_from","notifications_sent","update","eq","destroy","clearInterval","bind"],"mappings":"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"}