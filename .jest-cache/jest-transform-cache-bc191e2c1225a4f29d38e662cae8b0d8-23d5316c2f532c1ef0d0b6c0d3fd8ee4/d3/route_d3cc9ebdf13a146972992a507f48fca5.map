{"version":3,"names":["cov_104tjkltnn","actualCoverage","s","GET","f","runtime","request","session","_config","auth","user","email","b","_server","NextResponse","json","error","status","supabase","_server1","createAdminClient","data","driver","driverError","from","select","eq","single","searchParams","URL","url","date","get","Date","toISOString","split","limit","parseInt","console","log","process","env","NEXT_PUBLIC_SUPABASE_URL","key","SUPABASE_SERVICE_ROLE_KEY","orders","ordersError","in","not","order","ascending","fulfillment_status","shipping_address","length","JSON","stringify","orderIds","map","id","orderItems","itemsError","forEach","order_items","filter","item","order_id","validOrders","address","street_name","street_number","city_name","formattedOrders","orderNumber","order_number","total","parseFloat","paymentStatus","payment_status","fulfillmentStatus","createdAt","created_at","estimatedDelivery","estimated_delivery","trackingNumber","tracking_number","notes","shippingAddress","streetName","streetNumber","floor","apartment","cityName","stateName","state_name","zipCode","zip_code","fullAddress","items","productId","product_id","productName","products","name","description","quantity","price","weight","dimensions","totalItems","reduce","sum","totalWeight","stats","totalOrders","totalValue","averageOrderValue","success","first_name","last_name","metadata"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\pending-orders\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para obtener órdenes pendientes de entrega para drivers\r\n * GET /api/driver/pending-orders\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Configurar Supabase con service role para acceso completo\r\n    const supabase = createAdminClient();\r\n\r\n    // Verificar que el usuario sea un driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, first_name, last_name, status')\r\n      .eq('email', session.user.email)\r\n      .eq('status', 'available')\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado o no disponible' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const date = searchParams.get('date') || new Date().toISOString().split('T')[0];\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n\r\n    // Debug: Verificar configuración de Supabase\r\n    console.log('🔧 Supabase client configured:', {\r\n      url: process.env.NEXT_PUBLIC_SUPABASE_URL ? 'SET' : 'NOT SET',\r\n      key: process.env.SUPABASE_SERVICE_ROLE_KEY ? 'SET' : 'NOT SET'\r\n    });\r\n\r\n    // Consultar órdenes pendientes de entrega\r\n    console.log('🔍 Executing Supabase query...');\r\n    const { data: orders, error: ordersError } = await supabase\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        total,\r\n        status,\r\n        payment_status,\r\n        fulfillment_status,\r\n        shipping_address,\r\n        estimated_delivery,\r\n        created_at,\r\n        order_number,\r\n        tracking_number,\r\n        notes\r\n      `)\r\n      .in('status', ['confirmed', 'paid'])\r\n      .eq('fulfillment_status', 'unfulfilled')\r\n      .not('shipping_address', 'is', null)\r\n      .order('created_at', { ascending: true })\r\n      .limit(limit);\r\n\r\n    console.log('🔍 Raw Supabase response:', { data: orders, error: ordersError });\r\n\r\n    console.log('🔍 Debug - Filters applied:', {\r\n      status: ['confirmed', 'paid'],\r\n      fulfillment_status: 'unfulfilled',\r\n      shipping_address: 'not null'\r\n    });\r\n\r\n    if (ordersError) {\r\n      console.error('Error fetching orders:', ordersError);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener órdenes' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    console.log('📦 Orders fetched from database:', orders?.length || 0);\r\n    console.log('📦 First order sample:', orders?.[0] ? JSON.stringify(orders[0], null, 2) : 'No orders');\r\n\r\n    // Si hay órdenes, obtener los order_items por separado\r\n    if (orders && orders.length > 0) {\r\n      const orderIds = orders.map(order => order.id);\r\n      console.log('🔍 Fetching order_items for orders:', orderIds);\r\n\r\n      const { data: orderItems, error: itemsError } = await supabase\r\n        .from('order_items')\r\n        .select(`\r\n          id,\r\n          order_id,\r\n          product_id,\r\n          quantity,\r\n          price,\r\n          products (\r\n            id,\r\n            name,\r\n            description\r\n          )\r\n        `)\r\n        .in('order_id', orderIds);\r\n\r\n      if (itemsError) {\r\n        console.error('Error fetching order items:', itemsError);\r\n      } else {\r\n        console.log('📦 Order items fetched:', orderItems?.length || 0);\r\n\r\n        // Agregar order_items a cada orden\r\n        orders.forEach(order => {\r\n          order.order_items = orderItems?.filter(item => item.order_id === order.id) || [];\r\n        });\r\n      }\r\n    }\r\n\r\n    // Filtrar órdenes que tienen dirección de entrega válida\r\n    const validOrders = orders?.filter(order => {\r\n      const address = order.shipping_address;\r\n      return address && \r\n             address.street_name && \r\n             address.street_number && \r\n             address.city_name;\r\n    }) || [];\r\n\r\n    // Formatear datos para el frontend\r\n    const formattedOrders = validOrders.map(order => ({\r\n      id: order.id,\r\n      orderNumber: order.order_number || `#${order.id}`,\r\n      total: parseFloat(order.total),\r\n      status: order.status,\r\n      paymentStatus: order.payment_status,\r\n      fulfillmentStatus: order.fulfillment_status,\r\n      createdAt: order.created_at,\r\n      estimatedDelivery: order.estimated_delivery,\r\n      trackingNumber: order.tracking_number,\r\n      notes: order.notes,\r\n      shippingAddress: {\r\n        streetName: order.shipping_address.street_name,\r\n        streetNumber: order.shipping_address.street_number,\r\n        floor: order.shipping_address.floor || '',\r\n        apartment: order.shipping_address.apartment || '',\r\n        cityName: order.shipping_address.city_name,\r\n        stateName: order.shipping_address.state_name,\r\n        zipCode: order.shipping_address.zip_code,\r\n        fullAddress: `${order.shipping_address.street_name} ${order.shipping_address.street_number}${\r\n          order.shipping_address.floor ? `, Piso ${order.shipping_address.floor}` : ''\r\n        }${\r\n          order.shipping_address.apartment ? `, Depto ${order.shipping_address.apartment}` : ''\r\n        }, ${order.shipping_address.city_name}, ${order.shipping_address.state_name} ${order.shipping_address.zip_code}`\r\n      },\r\n      items: order.order_items?.map(item => ({\r\n        id: item.id,\r\n        productId: item.product_id,\r\n        productName: item.products?.name || 'Producto desconocido',\r\n        description: item.products?.description || '',\r\n        quantity: item.quantity,\r\n        price: parseFloat(item.price),\r\n        weight: 0, // Peso por defecto hasta que se agregue la columna\r\n        dimensions: null // Dimensiones por defecto hasta que se agregue la columna\r\n      })) || [],\r\n      totalItems: order.order_items?.reduce((sum, item) => sum + item.quantity, 0) || 0,\r\n      totalWeight: 0 // Peso total por defecto hasta que se agregue la columna weight\r\n    }));\r\n\r\n    // Estadísticas del día\r\n    const stats = {\r\n      totalOrders: formattedOrders.length,\r\n      totalValue: formattedOrders.reduce((sum, order) => sum + order.total, 0),\r\n      totalItems: formattedOrders.reduce((sum, order) => sum + order.totalItems, 0),\r\n      totalWeight: formattedOrders.reduce((sum, order) => sum + order.totalWeight, 0),\r\n      averageOrderValue: formattedOrders.length > 0 \r\n        ? formattedOrders.reduce((sum, order) => sum + order.total, 0) / formattedOrders.length \r\n        : 0\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        orders: formattedOrders,\r\n        stats,\r\n        driver: {\r\n          id: driver.id,\r\n          name: `${driver.first_name} ${driver.last_name}`,\r\n          status: driver.status\r\n        },\r\n        metadata: {\r\n          date,\r\n          limit,\r\n          total: formattedOrders.length\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in pending-orders API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}