{"version":3,"names":["cov_16fw6tqpx2","actualCoverage","s","POST","f","runtime","request","logs","push","webhookData","action","api_version","data","id","date_created","live_mode","type","user_id","JSON","stringify","paymentData","status","external_reference","transaction_amount","currency_id","supabase","_supabase","getSupabaseClient","b","_server","NextResponse","json","error","order","orderError","from","select","eq","single","newOrderStatus","newPaymentStatus","updatedOrder","updateError","update","payment_status","payment_id","updated_at","Date","toISOString","success","message","originalOrder","orderComparison","before","total","after","stack"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\debug-new-order\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - DEBUG NEW ORDER WEBHOOK\r\n// Endpoint específico para probar webhook con orden 107\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const logs: string[] = [];\r\n  \r\n  try {\r\n    logs.push('[DEBUG_NEW] Iniciando debug del webhook para orden 107...');\r\n\r\n    // Simular datos de webhook para orden 107\r\n    const webhookData = {\r\n      action: \"payment.updated\",\r\n      api_version: \"v1\",\r\n      data: { id: \"test_payment_107\" },\r\n      date_created: \"2021-11-01T02:02:02Z\",\r\n      id: \"test_payment_107\",\r\n      live_mode: false,\r\n      type: \"payment\",\r\n      user_id: 452711838\r\n    };\r\n\r\n    logs.push('[DEBUG_NEW] Webhook data simulado: ' + JSON.stringify(webhookData));\r\n\r\n    // Simular datos de pago para orden 107\r\n    const paymentData = {\r\n      id: 'test_payment_107',\r\n      status: 'approved',\r\n      external_reference: 'test_order_1757606994811', // Orden 107\r\n      transaction_amount: 3650,\r\n      currency_id: 'ARS'\r\n    };\r\n\r\n    logs.push('[DEBUG_NEW] Payment data simulado: ' + JSON.stringify(paymentData));\r\n\r\n    // Probar conexión a Supabase\r\n    logs.push('[DEBUG_NEW] Probando conexión a Supabase...');\r\n    const supabase = getSupabaseClient(true);\r\n    \r\n    if (!supabase) {\r\n      logs.push('[DEBUG_NEW] ERROR: Cliente de Supabase no disponible');\r\n      return NextResponse.json({ error: 'Supabase not available', logs }, { status: 500 });\r\n    }\r\n\r\n    logs.push('[DEBUG_NEW] Cliente de Supabase OK');\r\n\r\n    // Buscar orden 107\r\n    logs.push('[DEBUG_NEW] Buscando orden con external_reference: ' + paymentData.external_reference);\r\n    \r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('*')\r\n      .eq('external_reference', paymentData.external_reference)\r\n      .single();\r\n\r\n    if (orderError) {\r\n      logs.push('[DEBUG_NEW] ERROR buscando orden: ' + JSON.stringify(orderError));\r\n      return NextResponse.json({ error: 'Order lookup failed', logs, orderError }, { status: 500 });\r\n    }\r\n\r\n    if (!order) {\r\n      logs.push('[DEBUG_NEW] ERROR: Orden no encontrada');\r\n      return NextResponse.json({ error: 'Order not found', logs }, { status: 404 });\r\n    }\r\n\r\n    logs.push('[DEBUG_NEW] Orden encontrada: ' + JSON.stringify(order));\r\n\r\n    // Mapear estados\r\n    const newOrderStatus = 'paid';\r\n    const newPaymentStatus = 'paid';\r\n\r\n    logs.push('[DEBUG_NEW] Nuevos estados: order=' + newOrderStatus + ', payment=' + newPaymentStatus);\r\n\r\n    // Actualizar orden 107\r\n    logs.push('[DEBUG_NEW] Actualizando orden 107...');\r\n    \r\n    const { data: updatedOrder, error: updateError } = await supabase\r\n      .from('orders')\r\n      .update({\r\n        payment_status: newPaymentStatus,\r\n        status: newOrderStatus,\r\n        payment_id: paymentData.id,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', order.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logs.push('[DEBUG_NEW] ERROR actualizando orden: ' + JSON.stringify(updateError));\r\n      return NextResponse.json({ error: 'Update failed', logs, updateError }, { status: 500 });\r\n    }\r\n\r\n    logs.push('[DEBUG_NEW] Orden 107 actualizada exitosamente: ' + JSON.stringify(updatedOrder));\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Debug webhook para orden 107 completado exitosamente',\r\n      logs,\r\n      originalOrder: order,\r\n      updatedOrder,\r\n      paymentData,\r\n      orderComparison: {\r\n        before: {\r\n          id: order.id,\r\n          status: order.status,\r\n          payment_status: order.payment_status,\r\n          payment_id: order.payment_id,\r\n          total: order.total\r\n        },\r\n        after: {\r\n          id: updatedOrder.id,\r\n          status: updatedOrder.status,\r\n          payment_status: updatedOrder.payment_status,\r\n          payment_id: updatedOrder.payment_id,\r\n          total: updatedOrder.total\r\n        }\r\n      }\r\n    }, { status: 200 });\r\n\r\n  } catch (error: any) {\r\n    logs.push('[DEBUG_NEW] EXCEPTION: ' + error.message);\r\n    logs.push('[DEBUG_NEW] STACK: ' + error.stack);\r\n\r\n    return NextResponse.json({\r\n      error: 'Debug new order failed',\r\n      message: error.message,\r\n      logs,\r\n      stack: error.stack\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}