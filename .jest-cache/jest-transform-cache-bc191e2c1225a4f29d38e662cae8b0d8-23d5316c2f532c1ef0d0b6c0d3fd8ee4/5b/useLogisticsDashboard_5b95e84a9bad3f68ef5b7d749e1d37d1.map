{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useLogisticsDashboard.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: LOGISTICS DASHBOARD ENTERPRISE\r\n// Descripción: Hook para dashboard de logística con métricas tiempo real\r\n// Basado en: Patrones WooCommerce Activity Panels + TanStack Query\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useState, useCallback } from 'react';\r\nimport { \r\n  LogisticsDashboardResponse,\r\n  UseLogisticsDashboardReturn \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN DE QUERY\r\n// =====================================================\r\n\r\nconst QUERY_KEY = ['admin', 'logistics', 'dashboard'];\r\nconst REFETCH_INTERVAL = 30000; // 30 segundos\r\nconst STALE_TIME = 20000; // 20 segundos\r\n\r\n// =====================================================\r\n// FUNCIÓN DE FETCH\r\n// =====================================================\r\n\r\nasync function fetchLogisticsDashboard(): Promise<LogisticsDashboardResponse['data']> {\r\n  const response = await fetch('/api/admin/logistics/dashboard', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    cache: 'no-store'\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const data = await response.json();\r\n  return data.data;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL\r\n// =====================================================\r\n\r\nexport function useLogisticsDashboard(options?: {\r\n  enabled?: boolean;\r\n  refetchInterval?: number;\r\n  onError?: (error: Error) => void;\r\n}): UseLogisticsDashboardReturn {\r\n  const queryClient = useQueryClient();\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  \r\n  const {\r\n    data,\r\n    isLoading,\r\n    error,\r\n    refetch: queryRefetch,\r\n    isRefetching\r\n  } = useQuery({\r\n    queryKey: QUERY_KEY,\r\n    queryFn: fetchLogisticsDashboard,\r\n    enabled: options?.enabled ?? true,\r\n    refetchInterval: options?.refetchInterval ?? REFETCH_INTERVAL,\r\n    staleTime: STALE_TIME,\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n    onError: options?.onError\r\n  });\r\n  \r\n  // =====================================================\r\n  // FUNCIONES AUXILIARES\r\n  // =====================================================\r\n  \r\n  const refetch = useCallback(async () => {\r\n    setIsRefreshing(true);\r\n    try {\r\n      await queryRefetch();\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  }, [queryRefetch]);\r\n  \r\n  const invalidateCache = useCallback(() => {\r\n    queryClient.invalidateQueries({ queryKey: QUERY_KEY });\r\n  }, [queryClient]);\r\n  \r\n  const updateCache = useCallback((updater: (oldData: LogisticsDashboardResponse['data'] | undefined) => LogisticsDashboardResponse['data']) => {\r\n    queryClient.setQueryData(QUERY_KEY, updater);\r\n  }, [queryClient]);\r\n  \r\n  // =====================================================\r\n  // MÉTRICAS DERIVADAS\r\n  // =====================================================\r\n  \r\n  const derivedMetrics = data ? {\r\n    // Tasa de envíos activos\r\n    active_shipments_rate: data.stats.total_shipments > 0 \r\n      ? ((data.stats.in_transit_shipments + data.stats.pending_shipments) / data.stats.total_shipments) * 100 \r\n      : 0,\r\n    \r\n    // Tasa de excepciones\r\n    exception_rate: data.stats.total_shipments > 0 \r\n      ? (data.stats.exception_shipments / data.stats.total_shipments) * 100 \r\n      : 0,\r\n    \r\n    // Costo promedio por envío\r\n    average_shipping_cost: data.stats.total_shipments > 0 \r\n      ? data.stats.total_shipping_cost / data.stats.total_shipments \r\n      : 0,\r\n    \r\n    // Tendencia de envíos (últimos 7 días vs anteriores)\r\n    shipments_trend: data.performance_metrics.length >= 14 ? (() => {\r\n      const last7Days = data.performance_metrics.slice(-7);\r\n      const previous7Days = data.performance_metrics.slice(-14, -7);\r\n      \r\n      const last7Total = last7Days.reduce((acc, day) => acc + day.shipments_count, 0);\r\n      const previous7Total = previous7Days.reduce((acc, day) => acc + day.shipments_count, 0);\r\n      \r\n      return previous7Total > 0 \r\n        ? ((last7Total - previous7Total) / previous7Total) * 100 \r\n        : 0;\r\n    })() : 0,\r\n    \r\n    // Mejor courier por performance\r\n    best_performing_courier: data.carrier_performance.length > 0 \r\n      ? data.carrier_performance.reduce((best, current) => \r\n          current.on_time_rate > best.on_time_rate ? current : best\r\n        )\r\n      : null\r\n  } : null;\r\n  \r\n  // =====================================================\r\n  // ALERTAS CRÍTICAS\r\n  // =====================================================\r\n  \r\n  const criticalAlerts = data?.alerts.filter(alert => alert.type === 'error') || [];\r\n  const warningAlerts = data?.alerts.filter(alert => alert.type === 'warning') || [];\r\n  \r\n  // =====================================================\r\n  // ESTADO DE SALUD DEL SISTEMA\r\n  // =====================================================\r\n  \r\n  const systemHealth = data ? {\r\n    status: (() => {\r\n      if (criticalAlerts.length > 0) {return 'critical';}\r\n      if (warningAlerts.length > 3) {return 'warning';}\r\n      if (data.stats.on_time_delivery_rate < 80) {return 'warning';}\r\n      return 'healthy';\r\n    })(),\r\n    score: Math.round(\r\n      (data.stats.on_time_delivery_rate * 0.4) + \r\n      ((100 - (derivedMetrics?.exception_rate || 0)) * 0.3) +\r\n      (data.stats.active_couriers > 0 ? 20 : 0) +\r\n      (criticalAlerts.length === 0 ? 10 : 0)\r\n    )\r\n  } : null;\r\n  \r\n  return {\r\n    // Datos principales\r\n    data,\r\n    isLoading: isLoading || isRefreshing,\r\n    error: error as Error | null,\r\n    refetch,\r\n    \r\n    // Estados adicionales\r\n    isRefetching: isRefetching || isRefreshing,\r\n    \r\n    // Funciones de cache\r\n    invalidateCache,\r\n    updateCache,\r\n    \r\n    // Métricas derivadas\r\n    derivedMetrics,\r\n    \r\n    // Alertas categorizadas\r\n    criticalAlerts,\r\n    warningAlerts,\r\n    \r\n    // Estado de salud\r\n    systemHealth\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA MÉTRICAS EN TIEMPO REAL\r\n// =====================================================\r\n\r\nexport function useLogisticsRealTimeMetrics() {\r\n  const { data, refetch } = useLogisticsDashboard({\r\n    refetchInterval: 10000 // 10 segundos para tiempo real\r\n  });\r\n  \r\n  return {\r\n    metrics: data?.stats,\r\n    recentShipments: data?.recent_shipments,\r\n    alerts: data?.alerts,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA PERFORMANCE DE COURIERS\r\n// =====================================================\r\n\r\nexport function useCarrierPerformance() {\r\n  const { data } = useLogisticsDashboard();\r\n  \r\n  const sortedCarriers = data?.carrier_performance.sort((a, b) => \r\n    b.on_time_rate - a.on_time_rate\r\n  ) || [];\r\n  \r\n  const topPerformer = sortedCarriers[0];\r\n  const worstPerformer = sortedCarriers[sortedCarriers.length - 1];\r\n  \r\n  return {\r\n    carriers: sortedCarriers,\r\n    topPerformer,\r\n    worstPerformer,\r\n    averageOnTimeRate: sortedCarriers.length > 0 \r\n      ? sortedCarriers.reduce((acc, carrier) => acc + carrier.on_time_rate, 0) / sortedCarriers.length \r\n      : 0\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA ALERTAS\r\n// =====================================================\r\n\r\nexport function useLogisticsAlerts() {\r\n  const { data, refetch } = useLogisticsDashboard();\r\n  \r\n  const unreadAlerts = data?.alerts.filter(alert => !alert.is_read) || [];\r\n  const criticalCount = unreadAlerts.filter(alert => alert.type === 'error').length;\r\n  const warningCount = unreadAlerts.filter(alert => alert.type === 'warning').length;\r\n  \r\n  return {\r\n    alerts: data?.alerts || [],\r\n    unreadAlerts,\r\n    criticalCount,\r\n    warningCount,\r\n    totalUnread: unreadAlerts.length,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// TIPOS EXTENDIDOS PARA EL HOOK\r\n// =====================================================\r\n\r\nexport interface UseLogisticsDashboardExtendedReturn extends UseLogisticsDashboardReturn {\r\n  isRefetching: boolean;\r\n  invalidateCache: () => void;\r\n  updateCache: (updater: (oldData: LogisticsDashboardResponse['data'] | undefined) => LogisticsDashboardResponse['data']) => void;\r\n  derivedMetrics: {\r\n    active_shipments_rate: number;\r\n    exception_rate: number;\r\n    average_shipping_cost: number;\r\n    shipments_trend: number;\r\n    best_performing_courier: any;\r\n  } | null;\r\n  criticalAlerts: any[];\r\n  warningAlerts: any[];\r\n  systemHealth: {\r\n    status: 'healthy' | 'warning' | 'critical';\r\n    score: number;\r\n  } | null;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useCarrierPerformance","useLogisticsAlerts","useLogisticsDashboard","useLogisticsRealTimeMetrics","QUERY_KEY","REFETCH_INTERVAL","STALE_TIME","fetchLogisticsDashboard","response","fetch","method","headers","cache","ok","errorData","json","catch","Error","error","status","statusText","data","options","queryClient","useQueryClient","isRefreshing","setIsRefreshing","useState","isLoading","refetch","queryRefetch","isRefetching","useQuery","queryKey","queryFn","enabled","refetchInterval","staleTime","retry","retryDelay","attemptIndex","Math","min","onError","useCallback","invalidateCache","invalidateQueries","updateCache","updater","setQueryData","derivedMetrics","active_shipments_rate","stats","total_shipments","in_transit_shipments","pending_shipments","exception_rate","exception_shipments","average_shipping_cost","total_shipping_cost","shipments_trend","performance_metrics","length","last7Days","slice","previous7Days","last7Total","reduce","acc","day","shipments_count","previous7Total","best_performing_courier","carrier_performance","best","current","on_time_rate","criticalAlerts","alerts","filter","alert","type","warningAlerts","systemHealth","on_time_delivery_rate","score","round","active_couriers","metrics","recentShipments","recent_shipments","sortedCarriers","sort","a","b","topPerformer","worstPerformer","carriers","averageOnTimeRate","carrier","unreadAlerts","is_read","criticalCount","warningCount","totalUnread"],"mappings":"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"}