{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\driver\\driver-apis.test.ts"],"sourcesContent":["/**\r\n * Tests de integración para las APIs del sistema de drivers\r\n * Verifica todas las funcionalidades de las APIs implementadas\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\r\nimport { NextRequest } from 'next/server';\r\n\r\n// Mock de NextAuth\r\njest.mock('@/auth', () => ({\r\n  auth: jest.fn()\r\n}));\r\n\r\n// Mock de Supabase\r\njest.mock('@/lib/supabase/server', () => ({\r\n  createClient: jest.fn()\r\n}));\r\n\r\n// Importar las APIs a testear\r\nimport { GET as getProfile, PUT as updateProfile } from '@/app/api/driver/profile/route';\r\nimport { GET as getRoute, PUT as updateRoute } from '@/app/api/driver/routes/[id]/route';\r\nimport { POST as updateLocation, GET as getLocation } from '@/app/api/driver/location/route';\r\nimport { POST as getDirections } from '@/app/api/driver/navigation/directions/route';\r\nimport { GET as getDeliveries, POST as updateDelivery } from '@/app/api/driver/deliveries/route';\r\n\r\ndescribe('Driver APIs Integration Tests', () => {\r\n  const mockAuth = require('@/auth').auth;\r\n  const mockCreateClient = require('@/lib/supabase/server').createClient;\r\n  \r\n  const mockSession = {\r\n    user: {\r\n      email: 'carlos@pinteya.com',\r\n      name: 'Carlos Rodríguez'\r\n    }\r\n  };\r\n\r\n  const mockDriver = {\r\n    id: 'driver-1',\r\n    name: 'Carlos Rodríguez',\r\n    email: 'carlos@pinteya.com',\r\n    phone: '+54 11 1234-5678',\r\n    vehicle_type: 'Van',\r\n    license_plate: 'ABC123',\r\n    status: 'available',\r\n    current_location: { lat: -34.6037, lng: -58.3816 }\r\n  };\r\n\r\n  const mockSupabaseClient = {\r\n    from: jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          single: jest.fn(() => Promise.resolve({ data: mockDriver, error: null })),\r\n          order: jest.fn(() => Promise.resolve({ data: [], error: null }))\r\n        })),\r\n        in: jest.fn(() => ({\r\n          order: jest.fn(() => Promise.resolve({ data: [], error: null }))\r\n        })),\r\n        gte: jest.fn(() => ({\r\n          lte: jest.fn(() => Promise.resolve({ data: [], error: null }))\r\n        }))\r\n      })),\r\n      update: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          select: jest.fn(() => ({\r\n            single: jest.fn(() => Promise.resolve({ data: mockDriver, error: null }))\r\n          }))\r\n        }))\r\n      })),\r\n      insert: jest.fn(() => Promise.resolve({ data: null, error: null }))\r\n    }))\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    mockAuth.mockResolvedValue(mockSession);\r\n    mockCreateClient.mockResolvedValue(mockSupabaseClient);\r\n  });\r\n\r\n  describe('Driver Profile API', () => {\r\n    it('should get driver profile successfully', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/driver/profile');\r\n      \r\n      const response = await getProfile(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.driver).toBeDefined();\r\n      expect(data.driver.email).toBe('carlos@pinteya.com');\r\n      expect(data.routes).toBeDefined();\r\n      expect(data.todayStats).toBeDefined();\r\n    });\r\n\r\n    it('should update driver profile successfully', async () => {\r\n      const requestBody = {\r\n        status: 'busy',\r\n        current_location: { lat: -34.6118, lng: -58.3960 }\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/driver/profile', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      const response = await updateProfile(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.driver).toBeDefined();\r\n    });\r\n\r\n    it('should return 401 for unauthenticated request', async () => {\r\n      mockAuth.mockResolvedValue(null);\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/driver/profile');\r\n      const response = await getProfile(request);\r\n\r\n      expect(response.status).toBe(401);\r\n    });\r\n  });\r\n\r\n  describe('Driver Location API', () => {\r\n    it('should update location successfully', async () => {\r\n      const requestBody = {\r\n        location: { lat: -34.6037, lng: -58.3816 },\r\n        speed: 25,\r\n        heading: 180,\r\n        accuracy: 5\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/driver/location', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      const response = await updateLocation(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.location).toBeDefined();\r\n      expect(data.driver).toBeDefined();\r\n    });\r\n\r\n    it('should get current location successfully', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/driver/location');\r\n      \r\n      const response = await getLocation(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.location).toBeDefined();\r\n      expect(data.status).toBeDefined();\r\n    });\r\n\r\n    it('should validate location data', async () => {\r\n      const requestBody = {\r\n        location: { lat: 'invalid', lng: -58.3816 }\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/driver/location', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      const response = await updateLocation(request);\r\n\r\n      expect(response.status).toBe(400);\r\n    });\r\n  });\r\n\r\n  describe('Driver Routes API', () => {\r\n    it('should get route details successfully', async () => {\r\n      const mockRoute = {\r\n        id: 'route-1',\r\n        name: 'Ruta Centro',\r\n        shipments: [\r\n          {\r\n            id: 'shipment-1',\r\n            customer_name: 'Cliente Test',\r\n            destination: {\r\n              address: 'Av. Corrientes 1234',\r\n              coordinates: { lat: -34.6037, lng: -58.3816 }\r\n            }\r\n          }\r\n        ]\r\n      };\r\n\r\n      mockSupabaseClient.from().select().eq().single.mockResolvedValue({\r\n        data: mockRoute,\r\n        error: null\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/driver/routes/route-1');\r\n      const response = await getRoute(request, { params: { id: 'route-1' } });\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.id).toBe('route-1');\r\n      expect(data.shipments).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('Driver Navigation API', () => {\r\n    it('should calculate directions successfully', async () => {\r\n      // Mock Google Directions API response\r\n      global.fetch = jest.fn(() =>\r\n        Promise.resolve({\r\n          json: () => Promise.resolve({\r\n            status: 'OK',\r\n            routes: [{\r\n              legs: [{\r\n                distance: { value: 5000, text: '5.0 km' },\r\n                duration: { value: 900, text: '15 mins' },\r\n                steps: [{\r\n                  html_instructions: 'Head north on Av. Corrientes',\r\n                  distance: { text: '500 m' },\r\n                  duration: { text: '2 mins' },\r\n                  maneuver: 'straight',\r\n                  start_location: { lat: -34.6037, lng: -58.3816 },\r\n                  end_location: { lat: -34.6000, lng: -58.3816 }\r\n                }]\r\n              }],\r\n              overview_polyline: { points: 'encoded_polyline' },\r\n              bounds: {},\r\n              waypoint_order: []\r\n            }]\r\n          })\r\n        })\r\n      ) as jest.Mock;\r\n\r\n      const requestBody = {\r\n        origin: { lat: -34.6037, lng: -58.3816 },\r\n        destination: { lat: -34.6118, lng: -58.3960 }\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/driver/navigation/directions', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      const response = await getDirections(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.route).toBeDefined();\r\n      expect(data.instructions).toBeDefined();\r\n      expect(data.summary).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('Driver Deliveries API', () => {\r\n    it('should get deliveries successfully', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/driver/deliveries');\r\n      \r\n      const response = await getDeliveries(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.deliveries).toBeDefined();\r\n      expect(data.stats).toBeDefined();\r\n    });\r\n\r\n    it('should update delivery status successfully', async () => {\r\n      const requestBody = {\r\n        delivery_id: 'delivery-1',\r\n        route_id: 'route-1',\r\n        status: 'delivered',\r\n        delivery_notes: 'Entregado exitosamente'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/driver/deliveries', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      const response = await updateDelivery(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.status).toBe('delivered');\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","auth","fn","createClient","describe","mockAuth","require","mockCreateClient","mockSession","user","email","name","mockDriver","id","phone","vehicle_type","license_plate","status","current_location","lat","lng","mockSupabaseClient","from","select","eq","single","Promise","resolve","data","error","order","in","gte","lte","update","insert","beforeEach","clearAllMocks","mockResolvedValue","it","request","NextRequest","response","getProfile","json","expect","toBe","driver","toBeDefined","routes","todayStats","requestBody","method","body","JSON","stringify","updateProfile","location","speed","heading","accuracy","updateLocation","success","getLocation","mockRoute","shipments","customer_name","destination","address","coordinates","getRoute","params","global","fetch","legs","distance","value","text","duration","steps","html_instructions","maneuver","start_location","end_location","overview_polyline","points","bounds","waypoint_order","origin","getDirections","route","instructions","summary","getDeliveries","deliveries","stats","delivery_id","route_id","delivery_notes","updateDelivery"],"mappings":"AAAA;;;CAGC;;;;yBAEsD;wBAC3B;uBAa4B;wBACJ;wBACO;wBACrB;wBACuB;AAf7D,mBAAmB;AACnBA,aAAI,CAACC,IAAI,CAAC,UAAU,IAAO,CAAA;QACzBC,MAAMF,aAAI,CAACG,EAAE;IACf,CAAA;AAEA,mBAAmB;AACnBH,aAAI,CAACC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxCG,cAAcJ,aAAI,CAACG,EAAE;IACvB,CAAA;AASAE,IAAAA,iBAAQ,EAAC,iCAAiC;IACxC,MAAMC,WAAWC,QAAQ,UAAUL,IAAI;IACvC,MAAMM,mBAAmBD,QAAQ,yBAAyBH,YAAY;IAEtE,MAAMK,cAAc;QAClBC,MAAM;YACJC,OAAO;YACPC,MAAM;QACR;IACF;IAEA,MAAMC,aAAa;QACjBC,IAAI;QACJF,MAAM;QACND,OAAO;QACPI,OAAO;QACPC,cAAc;QACdC,eAAe;QACfC,QAAQ;QACRC,kBAAkB;YAAEC,KAAK,CAAC;YAASC,KAAK,CAAC;QAAQ;IACnD;IAEA,MAAMC,qBAAqB;QACzBC,MAAMvB,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;gBACnBqB,QAAQxB,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;wBACrBsB,IAAIzB,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;gCACjBuB,QAAQ1B,aAAI,CAACG,EAAE,CAAC,IAAMwB,QAAQC,OAAO,CAAC;wCAAEC,MAAMhB;wCAAYiB,OAAO;oCAAK;gCACtEC,OAAO/B,aAAI,CAACG,EAAE,CAAC,IAAMwB,QAAQC,OAAO,CAAC;wCAAEC,MAAM,EAAE;wCAAEC,OAAO;oCAAK;4BAC/D,CAAA;wBACAE,IAAIhC,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;gCACjB4B,OAAO/B,aAAI,CAACG,EAAE,CAAC,IAAMwB,QAAQC,OAAO,CAAC;wCAAEC,MAAM,EAAE;wCAAEC,OAAO;oCAAK;4BAC/D,CAAA;wBACAG,KAAKjC,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;gCAClB+B,KAAKlC,aAAI,CAACG,EAAE,CAAC,IAAMwB,QAAQC,OAAO,CAAC;wCAAEC,MAAM,EAAE;wCAAEC,OAAO;oCAAK;4BAC7D,CAAA;oBACF,CAAA;gBACAK,QAAQnC,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;wBACrBsB,IAAIzB,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;gCACjBqB,QAAQxB,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;wCACrBuB,QAAQ1B,aAAI,CAACG,EAAE,CAAC,IAAMwB,QAAQC,OAAO,CAAC;gDAAEC,MAAMhB;gDAAYiB,OAAO;4CAAK;oCACxE,CAAA;4BACF,CAAA;oBACF,CAAA;gBACAM,QAAQpC,aAAI,CAACG,EAAE,CAAC,IAAMwB,QAAQC,OAAO,CAAC;wBAAEC,MAAM;wBAAMC,OAAO;oBAAK;YAClE,CAAA;IACF;IAEAO,IAAAA,mBAAU,EAAC;QACTrC,aAAI,CAACsC,aAAa;QAClBhC,SAASiC,iBAAiB,CAAC9B;QAC3BD,iBAAiB+B,iBAAiB,CAACjB;IACrC;IAEAjB,IAAAA,iBAAQ,EAAC,sBAAsB;QAC7BmC,IAAAA,WAAE,EAAC,0CAA0C;YAC3C,MAAMC,UAAU,IAAIC,mBAAW,CAAC;YAEhC,MAAMC,WAAW,MAAMC,IAAAA,UAAU,EAACH;YAClC,MAAMZ,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAKmB,MAAM,EAAEC,WAAW;YAC/BH,IAAAA,eAAM,EAACjB,KAAKmB,MAAM,CAACrC,KAAK,EAAEoC,IAAI,CAAC;YAC/BD,IAAAA,eAAM,EAACjB,KAAKqB,MAAM,EAAED,WAAW;YAC/BH,IAAAA,eAAM,EAACjB,KAAKsB,UAAU,EAAEF,WAAW;QACrC;QAEAT,IAAAA,WAAE,EAAC,6CAA6C;YAC9C,MAAMY,cAAc;gBAClBlC,QAAQ;gBACRC,kBAAkB;oBAAEC,KAAK,CAAC;oBAASC,KAAK,CAAC;gBAAQ;YACnD;YAEA,MAAMoB,UAAU,IAAIC,mBAAW,CAAC,4CAA4C;gBAC1EW,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAACJ;YACvB;YAEA,MAAMT,WAAW,MAAMc,IAAAA,UAAa,EAAChB;YACrC,MAAMZ,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAKmB,MAAM,EAAEC,WAAW;QACjC;QAEAT,IAAAA,WAAE,EAAC,iDAAiD;YAClDlC,SAASiC,iBAAiB,CAAC;YAE3B,MAAME,UAAU,IAAIC,mBAAW,CAAC;YAChC,MAAMC,WAAW,MAAMC,IAAAA,UAAU,EAACH;YAElCK,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;QAC/B;IACF;IAEA1C,IAAAA,iBAAQ,EAAC,uBAAuB;QAC9BmC,IAAAA,WAAE,EAAC,uCAAuC;YACxC,MAAMY,cAAc;gBAClBM,UAAU;oBAAEtC,KAAK,CAAC;oBAASC,KAAK,CAAC;gBAAQ;gBACzCsC,OAAO;gBACPC,SAAS;gBACTC,UAAU;YACZ;YAEA,MAAMpB,UAAU,IAAIC,mBAAW,CAAC,6CAA6C;gBAC3EW,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAACJ;YACvB;YAEA,MAAMT,WAAW,MAAMmB,IAAAA,YAAc,EAACrB;YACtC,MAAMZ,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAKkC,OAAO,EAAEhB,IAAI,CAAC;YAC1BD,IAAAA,eAAM,EAACjB,KAAK6B,QAAQ,EAAET,WAAW;YACjCH,IAAAA,eAAM,EAACjB,KAAKmB,MAAM,EAAEC,WAAW;QACjC;QAEAT,IAAAA,WAAE,EAAC,4CAA4C;YAC7C,MAAMC,UAAU,IAAIC,mBAAW,CAAC;YAEhC,MAAMC,WAAW,MAAMqB,IAAAA,WAAW,EAACvB;YACnC,MAAMZ,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAK6B,QAAQ,EAAET,WAAW;YACjCH,IAAAA,eAAM,EAACjB,KAAKX,MAAM,EAAE+B,WAAW;QACjC;QAEAT,IAAAA,WAAE,EAAC,iCAAiC;YAClC,MAAMY,cAAc;gBAClBM,UAAU;oBAAEtC,KAAK;oBAAWC,KAAK,CAAC;gBAAQ;YAC5C;YAEA,MAAMoB,UAAU,IAAIC,mBAAW,CAAC,6CAA6C;gBAC3EW,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAACJ;YACvB;YAEA,MAAMT,WAAW,MAAMmB,IAAAA,YAAc,EAACrB;YAEtCK,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;QAC/B;IACF;IAEA1C,IAAAA,iBAAQ,EAAC,qBAAqB;QAC5BmC,IAAAA,WAAE,EAAC,yCAAyC;YAC1C,MAAMyB,YAAY;gBAChBnD,IAAI;gBACJF,MAAM;gBACNsD,WAAW;oBACT;wBACEpD,IAAI;wBACJqD,eAAe;wBACfC,aAAa;4BACXC,SAAS;4BACTC,aAAa;gCAAElD,KAAK,CAAC;gCAASC,KAAK,CAAC;4BAAQ;wBAC9C;oBACF;iBACD;YACH;YAEAC,mBAAmBC,IAAI,GAAGC,MAAM,GAAGC,EAAE,GAAGC,MAAM,CAACa,iBAAiB,CAAC;gBAC/DV,MAAMoC;gBACNnC,OAAO;YACT;YAEA,MAAMW,UAAU,IAAIC,mBAAW,CAAC;YAChC,MAAMC,WAAW,MAAM4B,IAAAA,WAAQ,EAAC9B,SAAS;gBAAE+B,QAAQ;oBAAE1D,IAAI;gBAAU;YAAE;YACrE,MAAMe,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAKf,EAAE,EAAEiC,IAAI,CAAC;YACrBD,IAAAA,eAAM,EAACjB,KAAKqC,SAAS,EAAEjB,WAAW;QACpC;IACF;IAEA5C,IAAAA,iBAAQ,EAAC,yBAAyB;QAChCmC,IAAAA,WAAE,EAAC,4CAA4C;YAC7C,sCAAsC;YACtCiC,OAAOC,KAAK,GAAG1E,aAAI,CAACG,EAAE,CAAC,IACrBwB,QAAQC,OAAO,CAAC;oBACdiB,MAAM,IAAMlB,QAAQC,OAAO,CAAC;4BAC1BV,QAAQ;4BACRgC,QAAQ;gCAAC;oCACPyB,MAAM;wCAAC;4CACLC,UAAU;gDAAEC,OAAO;gDAAMC,MAAM;4CAAS;4CACxCC,UAAU;gDAAEF,OAAO;gDAAKC,MAAM;4CAAU;4CACxCE,OAAO;gDAAC;oDACNC,mBAAmB;oDACnBL,UAAU;wDAAEE,MAAM;oDAAQ;oDAC1BC,UAAU;wDAAED,MAAM;oDAAS;oDAC3BI,UAAU;oDACVC,gBAAgB;wDAAE/D,KAAK,CAAC;wDAASC,KAAK,CAAC;oDAAQ;oDAC/C+D,cAAc;wDAAEhE,KAAK,CAAC;wDAASC,KAAK,CAAC;oDAAQ;gDAC/C;6CAAE;wCACJ;qCAAE;oCACFgE,mBAAmB;wCAAEC,QAAQ;oCAAmB;oCAChDC,QAAQ,CAAC;oCACTC,gBAAgB,EAAE;gCACpB;6BAAE;wBACJ;gBACF;YAGF,MAAMpC,cAAc;gBAClBqC,QAAQ;oBAAErE,KAAK,CAAC;oBAASC,KAAK,CAAC;gBAAQ;gBACvC+C,aAAa;oBAAEhD,KAAK,CAAC;oBAASC,KAAK,CAAC;gBAAQ;YAC9C;YAEA,MAAMoB,UAAU,IAAIC,mBAAW,CAAC,0DAA0D;gBACxFW,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAACJ;YACvB;YAEA,MAAMT,WAAW,MAAM+C,IAAAA,YAAa,EAACjD;YACrC,MAAMZ,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAK8D,KAAK,EAAE1C,WAAW;YAC9BH,IAAAA,eAAM,EAACjB,KAAK+D,YAAY,EAAE3C,WAAW;YACrCH,IAAAA,eAAM,EAACjB,KAAKgE,OAAO,EAAE5C,WAAW;QAClC;IACF;IAEA5C,IAAAA,iBAAQ,EAAC,yBAAyB;QAChCmC,IAAAA,WAAE,EAAC,sCAAsC;YACvC,MAAMC,UAAU,IAAIC,mBAAW,CAAC;YAEhC,MAAMC,WAAW,MAAMmD,IAAAA,WAAa,EAACrD;YACrC,MAAMZ,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAKkE,UAAU,EAAE9C,WAAW;YACnCH,IAAAA,eAAM,EAACjB,KAAKmE,KAAK,EAAE/C,WAAW;QAChC;QAEAT,IAAAA,WAAE,EAAC,8CAA8C;YAC/C,MAAMY,cAAc;gBAClB6C,aAAa;gBACbC,UAAU;gBACVhF,QAAQ;gBACRiF,gBAAgB;YAClB;YAEA,MAAM1D,UAAU,IAAIC,mBAAW,CAAC,+CAA+C;gBAC7EW,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAACJ;YACvB;YAEA,MAAMT,WAAW,MAAMyD,IAAAA,YAAc,EAAC3D;YACtC,MAAMZ,OAAO,MAAMc,SAASE,IAAI;YAEhCC,IAAAA,eAAM,EAACH,SAASzB,MAAM,EAAE6B,IAAI,CAAC;YAC7BD,IAAAA,eAAM,EAACjB,KAAKkC,OAAO,EAAEhB,IAAI,CAAC;YAC1BD,IAAAA,eAAM,EAACjB,KAAKX,MAAM,EAAE6B,IAAI,CAAC;QAC3B;IACF;AACF"}