{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\admin\\monitoring\\enterprise\\page.tsx"],"sourcesContent":["/**\n * Página del Dashboard Enterprise Completo\n * Integra todos los sistemas de optimización y monitoreo\n */\n\n'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport EnterpriseMonitoringDashboard from '@/components/Dashboard/EnterpriseMonitoringDashboard'\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Database,\n  Play,\n  RefreshCw,\n  Settings,\n  Shield,\n  Zap,\n  Server,\n  TestTube,\n  Bell,\n  BarChart3,\n  TrendingUp,\n  Eye,\n  Lock,\n} from 'lucide-react'\n\n// =====================================================\n// TIPOS E INTERFACES\n// =====================================================\n\ninterface SystemStatus {\n  name: string\n  status: 'initializing' | 'running' | 'error' | 'stopped'\n  version: string\n  startTime?: string\n  error?: string\n  metrics?: any\n}\n\ninterface InitializationResult {\n  success: boolean\n  systems: SystemStatus[]\n  totalTime: number\n  errors: string[]\n  warnings: string[]\n}\n\ninterface AlertInfo {\n  id: string\n  title: string\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  category: string\n  status: 'active' | 'acknowledged' | 'resolved'\n  triggeredAt: string\n}\n\n// =====================================================\n// COMPONENTES\n// =====================================================\n\nconst SystemStatusCard: React.FC<{ system: SystemStatus }> = ({ system }) => {\n  const getStatusColor = () => {\n    switch (system.status) {\n      case 'running':\n        return 'text-green-600 bg-green-50'\n      case 'error':\n        return 'text-red-600 bg-red-50'\n      case 'initializing':\n        return 'text-yellow-600 bg-yellow-50'\n      case 'stopped':\n        return 'text-gray-600 bg-gray-50'\n      default:\n        return 'text-gray-600 bg-gray-50'\n    }\n  }\n\n  const getStatusIcon = () => {\n    switch (system.status) {\n      case 'running':\n        return <CheckCircle className='w-4 h-4' />\n      case 'error':\n        return <AlertTriangle className='w-4 h-4' />\n      case 'initializing':\n        return <Clock className='w-4 h-4' />\n      case 'stopped':\n        return <Server className='w-4 h-4' />\n      default:\n        return <Server className='w-4 h-4' />\n    }\n  }\n\n  const getStatusText = () => {\n    switch (system.status) {\n      case 'running':\n        return 'Funcionando'\n      case 'error':\n        return 'Error'\n      case 'initializing':\n        return 'Inicializando'\n      case 'stopped':\n        return 'Detenido'\n      default:\n        return 'Desconocido'\n    }\n  }\n\n  return (\n    <Card>\n      <CardContent className='p-4'>\n        <div className='flex items-center justify-between mb-3'>\n          <h3 className='font-semibold text-gray-900'>{system.name}</h3>\n          <div className={`flex items-center space-x-1 px-2 py-1 rounded-full ${getStatusColor()}`}>\n            {getStatusIcon()}\n            <span className='text-xs font-medium'>{getStatusText()}</span>\n          </div>\n        </div>\n\n        <div className='space-y-2 text-sm'>\n          <div className='flex justify-between'>\n            <span className='text-gray-600'>Versión:</span>\n            <span className='font-medium'>{system.version}</span>\n          </div>\n\n          {system.startTime && (\n            <div className='flex justify-between'>\n              <span className='text-gray-600'>Inicio:</span>\n              <span className='font-medium'>{new Date(system.startTime).toLocaleTimeString()}</span>\n            </div>\n          )}\n\n          {system.error && (\n            <div className='mt-2'>\n              <span className='text-red-600 text-xs'>{system.error}</span>\n            </div>\n          )}\n\n          {system.metrics && (\n            <div className='mt-2 pt-2 border-t border-gray-200'>\n              <span className='text-xs text-gray-500'>\n                {Object.keys(system.metrics).length} métricas disponibles\n              </span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst AlertCard: React.FC<{ alert: AlertInfo }> = ({ alert }) => {\n  const getSeverityColor = () => {\n    switch (alert.severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800'\n      case 'high':\n        return 'bg-orange-100 text-orange-800'\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'low':\n        return 'bg-blue-100 text-blue-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getStatusColor = () => {\n    switch (alert.status) {\n      case 'active':\n        return 'bg-red-100 text-red-800'\n      case 'acknowledged':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'resolved':\n        return 'bg-green-100 text-green-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <Card>\n      <CardContent className='p-4'>\n        <div className='flex items-start justify-between mb-2'>\n          <h4 className='font-medium text-gray-900 text-sm'>{alert.title}</h4>\n          <div className='flex space-x-1'>\n            <Badge className={getSeverityColor()}>{alert.severity}</Badge>\n            <Badge className={getStatusColor()}>{alert.status}</Badge>\n          </div>\n        </div>\n\n        <div className='space-y-1 text-xs text-gray-600'>\n          <div>Categoría: {alert.category}</div>\n          <div>Activada: {new Date(alert.triggeredAt).toLocaleString()}</div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// =====================================================\n// COMPONENTE PRINCIPAL\n// =====================================================\n\nexport default function EnterpriseMonitoringPage() {\n  const [systemStatus, setSystemStatus] = useState<SystemStatus[]>([])\n  const [alerts, setAlerts] = useState<AlertInfo[]>([])\n  const [isInitializing, setIsInitializing] = useState(false)\n  const [initResult, setInitResult] = useState<InitializationResult | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  // Cargar estado inicial\n  useEffect(() => {\n    loadSystemStatus()\n    loadAlerts()\n  }, [])\n\n  const loadSystemStatus = async () => {\n    try {\n      const response = await fetch('/api/admin/system/initialize-enterprise')\n      if (response.ok) {\n        const data = await response.json()\n        setSystemStatus(data.data.systems || [])\n      }\n    } catch (error) {\n      console.error('Error loading system status:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadAlerts = async () => {\n    try {\n      // Simular carga de alertas - en producción vendría de la API\n      const mockAlerts: AlertInfo[] = [\n        {\n          id: '1',\n          title: 'Alto uso de memoria detectado',\n          severity: 'high',\n          category: 'capacity',\n          status: 'active',\n          triggeredAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n        },\n        {\n          id: '2',\n          title: 'Tasa de cache hit baja',\n          severity: 'medium',\n          category: 'performance',\n          status: 'acknowledged',\n          triggeredAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n        },\n      ]\n      setAlerts(mockAlerts)\n    } catch (error) {\n      console.error('Error loading alerts:', error)\n    }\n  }\n\n  const initializeEnterpriseSystems = async () => {\n    setIsInitializing(true)\n    setInitResult(null)\n\n    try {\n      const response = await fetch('/api/admin/system/initialize-enterprise', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n\n      const data = await response.json()\n      setInitResult(data.data)\n\n      if (data.success) {\n        await loadSystemStatus()\n      }\n    } catch (error) {\n      console.error('Error initializing systems:', error)\n      setInitResult({\n        success: false,\n        systems: [],\n        totalTime: 0,\n        errors: ['Error de conexión al inicializar sistemas'],\n        warnings: [],\n      })\n    } finally {\n      setIsInitializing(false)\n    }\n  }\n\n  const runSystemTests = async () => {\n    try {\n      // Simular ejecución de tests\n      console.log('Running system tests...')\n      // En producción, esto haría una llamada a la API de tests\n    } catch (error) {\n      console.error('Error running tests:', error)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='flex items-center space-x-2'>\n          <RefreshCw className='w-6 h-6 animate-spin text-blue-600' />\n          <span className='text-lg font-medium text-gray-600'>\n            Cargando dashboard enterprise...\n          </span>\n        </div>\n      </div>\n    )\n  }\n\n  const runningSystems = systemStatus.filter(s => s.status === 'running').length\n  const totalSystems = systemStatus.length\n  const healthScore = totalSystems > 0 ? (runningSystems / totalSystems) * 100 : 0\n  const activeAlerts = alerts.filter(a => a.status === 'active').length\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div className='flex justify-between items-center'>\n        <div>\n          <h1 className='text-3xl font-bold text-gray-900'>Dashboard Enterprise</h1>\n          <p className='text-gray-600'>Sistema completo de optimización y monitoreo enterprise</p>\n        </div>\n        <div className='flex items-center space-x-3'>\n          <Button onClick={runSystemTests} variant='outline' size='sm'>\n            <TestTube className='w-4 h-4 mr-2' />\n            Ejecutar Tests\n          </Button>\n          <Button onClick={initializeEnterpriseSystems} disabled={isInitializing} size='sm'>\n            {isInitializing ? (\n              <RefreshCw className='w-4 h-4 mr-2 animate-spin' />\n            ) : (\n              <Play className='w-4 h-4 mr-2' />\n            )}\n            {isInitializing ? 'Inicializando...' : 'Inicializar Sistemas'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Métricas principales */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6'>\n        <Card>\n          <CardContent className='p-6'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <p className='text-sm font-medium text-gray-600'>Salud del Sistema</p>\n                <p className='text-2xl font-bold text-gray-900'>{healthScore.toFixed(1)}%</p>\n                <p className='text-xs text-gray-500'>\n                  {runningSystems}/{totalSystems} sistemas\n                </p>\n              </div>\n              <div className='p-2 rounded-lg bg-green-50'>\n                <Activity className='w-5 h-5 text-green-600' />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className='p-6'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <p className='text-sm font-medium text-gray-600'>Alertas Activas</p>\n                <p className='text-2xl font-bold text-gray-900'>{activeAlerts}</p>\n                <p className='text-xs text-gray-500'>de {alerts.length} totales</p>\n              </div>\n              <div className='p-2 rounded-lg bg-red-50'>\n                <Bell className='w-5 h-5 text-red-600' />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className='p-6'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <p className='text-sm font-medium text-gray-600'>Sistemas Activos</p>\n                <p className='text-2xl font-bold text-gray-900'>{runningSystems}</p>\n                <p className='text-xs text-gray-500'>funcionando correctamente</p>\n              </div>\n              <div className='p-2 rounded-lg bg-blue-50'>\n                <Server className='w-5 h-5 text-blue-600' />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className='p-6'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <p className='text-sm font-medium text-gray-600'>Última Actualización</p>\n                <p className='text-2xl font-bold text-gray-900'>\n                  {new Date().toLocaleTimeString()}\n                </p>\n                <p className='text-xs text-gray-500'>tiempo real</p>\n              </div>\n              <div className='p-2 rounded-lg bg-purple-50'>\n                <Clock className='w-5 h-5 text-purple-600' />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Resultado de inicialización */}\n      {initResult && (\n        <Alert\n          className={\n            initResult.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'\n          }\n        >\n          <div className='flex items-center'>\n            {initResult.success ? (\n              <CheckCircle className='w-4 h-4 text-green-600' />\n            ) : (\n              <AlertTriangle className='w-4 h-4 text-red-600' />\n            )}\n            <AlertDescription className='ml-2'>\n              <strong>\n                {initResult.success ? 'Inicialización Exitosa' : 'Inicialización con Errores'}\n              </strong>\n              <div className='mt-1 text-sm'>\n                {initResult.success\n                  ? `${initResult.systems.length} sistemas inicializados en ${initResult.totalTime}ms`\n                  : `${initResult.errors.length} errores encontrados`}\n              </div>\n              {initResult.errors.length > 0 && (\n                <div className='mt-2'>\n                  <ul className='text-xs space-y-1'>\n                    {initResult.errors.map((error, index) => (\n                      <li key={index} className='text-red-600'>\n                        •{' '}\n                        {error instanceof Error\n                          ? error.message\n                          : error?.toString() || 'Error desconocido'}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n              {initResult.warnings.length > 0 && (\n                <div className='mt-2'>\n                  <ul className='text-xs space-y-1'>\n                    {initResult.warnings.map((warning, index) => (\n                      <li key={index} className='text-yellow-600'>\n                        • {warning}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </AlertDescription>\n          </div>\n        </Alert>\n      )}\n\n      {/* Tabs principales */}\n      <Tabs defaultValue='overview' className='space-y-6'>\n        <TabsList className='grid w-full grid-cols-5'>\n          <TabsTrigger value='overview'>Resumen</TabsTrigger>\n          <TabsTrigger value='systems'>Sistemas</TabsTrigger>\n          <TabsTrigger value='alerts'>Alertas</TabsTrigger>\n          <TabsTrigger value='monitoring'>Monitoreo</TabsTrigger>\n          <TabsTrigger value='testing'>Testing</TabsTrigger>\n        </TabsList>\n\n        {/* Tab Resumen */}\n        <TabsContent value='overview' className='space-y-6'>\n          <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>\n            {/* Estado de sistemas */}\n            <Card>\n              <CardHeader>\n                <CardTitle className='flex items-center'>\n                  <Server className='w-5 h-5 mr-2 text-blue-600' />\n                  Estado de Sistemas Enterprise\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                  {systemStatus.map((system, index) => (\n                    <SystemStatusCard key={index} system={system} />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Alertas recientes */}\n            <Card>\n              <CardHeader>\n                <CardTitle className='flex items-center'>\n                  <Bell className='w-5 h-5 mr-2 text-red-600' />\n                  Alertas Recientes\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className='space-y-3'>\n                  {alerts.slice(0, 5).map(alert => (\n                    <AlertCard key={alert.id} alert={alert} />\n                  ))}\n                  {alerts.length === 0 && (\n                    <div className='text-center py-8 text-gray-500'>\n                      <Bell className='w-8 h-8 mx-auto mb-2 opacity-50' />\n                      <p>No hay alertas activas</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tab Sistemas */}\n        <TabsContent value='systems' className='space-y-6'>\n          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>\n            {systemStatus.map((system, index) => (\n              <SystemStatusCard key={index} system={system} />\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Tab Alertas */}\n        <TabsContent value='alerts' className='space-y-6'>\n          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>\n            {alerts.map(alert => (\n              <AlertCard key={alert.id} alert={alert} />\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Tab Monitoreo */}\n        <TabsContent value='monitoring' className='space-y-6'>\n          <EnterpriseMonitoringDashboard />\n        </TabsContent>\n\n        {/* Tab Testing */}\n        <TabsContent value='testing' className='space-y-6'>\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center'>\n                <TestTube className='w-5 h-5 mr-2 text-green-600' />\n                Testing Automatizado Enterprise\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className='text-center py-8'>\n                <TestTube className='w-12 h-12 mx-auto mb-4 text-gray-400' />\n                <h3 className='text-lg font-semibold text-gray-900 mb-2'>\n                  Sistema de Testing Automatizado\n                </h3>\n                <p className='text-gray-600 mb-4'>\n                  Tests continuos de seguridad, performance e integración ejecutándose en segundo\n                  plano\n                </p>\n                <Button onClick={runSystemTests}>\n                  <Play className='w-4 h-4 mr-2' />\n                  Ejecutar Suite Completa\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n"],"names":["EnterpriseMonitoringPage","SystemStatusCard","system","getStatusColor","status","getStatusIcon","CheckCircle","className","AlertTriangle","Clock","Server","getStatusText","Card","CardContent","div","h3","name","span","version","startTime","Date","toLocaleTimeString","error","metrics","Object","keys","length","AlertCard","alert","getSeverityColor","severity","h4","title","Badge","category","triggeredAt","toLocaleString","systemStatus","setSystemStatus","useState","alerts","setAlerts","isInitializing","setIsInitializing","initResult","setInitResult","loading","setLoading","useEffect","loadSystemStatus","loadAlerts","response","fetch","ok","data","json","systems","console","mockAlerts","id","now","toISOString","initializeEnterpriseSystems","method","headers","success","totalTime","errors","warnings","runSystemTests","log","RefreshCw","runningSystems","filter","s","totalSystems","healthScore","activeAlerts","a","h1","p","Button","onClick","variant","size","TestTube","disabled","Play","toFixed","Activity","Bell","Alert","AlertDescription","strong","ul","map","index","li","Error","message","toString","warning","Tabs","defaultValue","TabsList","TabsTrigger","value","TabsContent","CardHeader","CardTitle","slice","EnterpriseMonitoringDashboard"],"mappings":"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"}