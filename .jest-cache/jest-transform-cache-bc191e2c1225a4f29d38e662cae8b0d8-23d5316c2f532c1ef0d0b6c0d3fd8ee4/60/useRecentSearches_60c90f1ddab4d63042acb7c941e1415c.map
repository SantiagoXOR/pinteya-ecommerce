{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useRecentSearches.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useRecentSearches - Gestión de búsquedas recientes con localStorage\r\n// ===================================\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { safeLocalStorageGet, safeLocalStorageSet, STORAGE_KEYS } from '@/lib/json-utils';\r\n\r\nexport interface RecentSearchesOptions {\r\n  /** Número máximo de búsquedas recientes a mantener */\r\n  maxSearches?: number;\r\n  /** Clave de localStorage para persistir las búsquedas */\r\n  storageKey?: string;\r\n  /** Habilitar/deshabilitar persistencia en localStorage */\r\n  enablePersistence?: boolean;\r\n  /** Filtrar búsquedas duplicadas */\r\n  filterDuplicates?: boolean;\r\n  /** Tiempo de expiración en días (0 = sin expiración) */\r\n  expirationDays?: number;\r\n}\r\n\r\nexport interface RecentSearchesReturn {\r\n  /** Array de búsquedas recientes */\r\n  recentSearches: string[];\r\n  /** Agregar una nueva búsqueda */\r\n  addSearch: (search: string) => void;\r\n  /** Remover una búsqueda específica */\r\n  removeSearch: (search: string) => void;\r\n  /** Limpiar todas las búsquedas */\r\n  clearSearches: () => void;\r\n  /** Verificar si una búsqueda existe */\r\n  hasSearch: (search: string) => boolean;\r\n  /** Obtener las N búsquedas más recientes */\r\n  getRecentSearches: (limit?: number) => string[];\r\n  /** Reordenar búsquedas (mover al principio) */\r\n  moveToTop: (search: string) => void;\r\n}\r\n\r\ninterface PersistedSearchData {\r\n  searches: string[];\r\n  timestamp: number;\r\n  version: string;\r\n}\r\n\r\nconst DEFAULT_OPTIONS: Required<RecentSearchesOptions> = {\r\n  maxSearches: 5,\r\n  storageKey: 'pinteya-recent-searches',\r\n  enablePersistence: true,\r\n  filterDuplicates: true,\r\n  expirationDays: 30, // 30 días de expiración\r\n};\r\n\r\n/**\r\n * Hook para gestionar búsquedas recientes con persistencia en localStorage\r\n * \r\n * Características:\r\n * - Persistencia automática en localStorage\r\n * - Límite configurable de búsquedas\r\n * - Filtrado de duplicados\r\n * - Expiración automática\r\n * - Manejo de errores robusto\r\n */\r\nexport function useRecentSearches(options: RecentSearchesOptions = {}): RecentSearchesReturn {\r\n  const config = { ...DEFAULT_OPTIONS, ...options };\r\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\r\n\r\n  // Función para validar y limpiar una búsqueda\r\n  const sanitizeSearch = useCallback((search: string): string => {\r\n    return search.trim().toLowerCase();\r\n  }, []);\r\n\r\n  // Función para verificar si los datos han expirado\r\n  const isExpired = useCallback((timestamp: number): boolean => {\r\n    if (config.expirationDays === 0) {return false;}\r\n    const maxAge = config.expirationDays * 24 * 60 * 60 * 1000;\r\n    return Date.now() - timestamp > maxAge;\r\n  }, [config.expirationDays]);\r\n\r\n  // Cargar búsquedas desde localStorage\r\n  const loadFromStorage = useCallback((): string[] => {\r\n    if (!config.enablePersistence) {\r\n      return [];\r\n    }\r\n\r\n    // Usar utilidad segura para cargar desde localStorage\r\n    const result = safeLocalStorageGet<PersistedSearchData | string[]>(config.storageKey);\r\n\r\n    if (!result.success) {\r\n      return [];\r\n    }\r\n\r\n    const data = result.data;\r\n\r\n    // Verificar si es formato nuevo (con metadata)\r\n    if (data && typeof data === 'object' && 'searches' in data && Array.isArray(data.searches)) {\r\n      const persistedData = data as PersistedSearchData;\r\n\r\n      // Verificar expiración\r\n      if (persistedData.timestamp && isExpired(persistedData.timestamp)) {\r\n        // Limpiar datos expirados usando utilidad segura\r\n        safeLocalStorageSet(config.storageKey, {\r\n          searches: [],\r\n          timestamp: Date.now(),\r\n          version: '1.0'\r\n        });\r\n        return [];\r\n      }\r\n\r\n      return persistedData.searches.slice(0, config.maxSearches);\r\n    }\r\n\r\n    // Formato antiguo (array simple)\r\n    if (Array.isArray(data)) {\r\n      return data.slice(0, config.maxSearches);\r\n    }\r\n\r\n    return [];\r\n  }, [config.enablePersistence, config.storageKey, config.maxSearches, isExpired]);\r\n\r\n  // Guardar búsquedas en localStorage\r\n  const saveToStorage = useCallback((searches: string[]): void => {\r\n    if (!config.enablePersistence || typeof window === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (searches.length === 0) {\r\n        localStorage.removeItem(config.storageKey);\r\n        return;\r\n      }\r\n\r\n      const dataToStore: PersistedSearchData = {\r\n        searches: searches.slice(0, config.maxSearches),\r\n        timestamp: Date.now(),\r\n        version: '1.0.0'\r\n      };\r\n\r\n      localStorage.setItem(config.storageKey, JSON.stringify(dataToStore));\r\n    } catch (error) {\r\n      console.warn('Error saving recent searches to localStorage:', error);\r\n    }\r\n  }, [config.enablePersistence, config.storageKey, config.maxSearches]);\r\n\r\n  // Cargar búsquedas al inicializar\r\n  useEffect(() => {\r\n    const loaded = loadFromStorage();\r\n    setRecentSearches(loaded);\r\n  }, [loadFromStorage]);\r\n\r\n  // Agregar una nueva búsqueda\r\n  const addSearch = useCallback((search: string): void => {\r\n    const sanitized = sanitizeSearch(search);\r\n    if (!sanitized || sanitized.length < 2) {return;}\r\n\r\n    setRecentSearches(prev => {\r\n      let updated = [...prev];\r\n\r\n      // Remover duplicados si está habilitado\r\n      if (config.filterDuplicates) {\r\n        updated = updated.filter(s => sanitizeSearch(s) !== sanitized);\r\n      }\r\n\r\n      // Agregar al principio\r\n      updated.unshift(search.trim());\r\n\r\n      // Limitar al máximo configurado\r\n      updated = updated.slice(0, config.maxSearches);\r\n\r\n      // Guardar en localStorage\r\n      saveToStorage(updated);\r\n\r\n      return updated;\r\n    });\r\n  }, [sanitizeSearch, config.filterDuplicates, config.maxSearches, saveToStorage]);\r\n\r\n  // Remover una búsqueda específica\r\n  const removeSearch = useCallback((search: string): void => {\r\n    const sanitized = sanitizeSearch(search);\r\n    \r\n    setRecentSearches(prev => {\r\n      const updated = prev.filter(s => sanitizeSearch(s) !== sanitized);\r\n      saveToStorage(updated);\r\n      return updated;\r\n    });\r\n  }, [sanitizeSearch, saveToStorage]);\r\n\r\n  // Limpiar todas las búsquedas\r\n  const clearSearches = useCallback((): void => {\r\n    setRecentSearches([]);\r\n    saveToStorage([]);\r\n  }, [saveToStorage]);\r\n\r\n  // Verificar si una búsqueda existe\r\n  const hasSearch = useCallback((search: string): boolean => {\r\n    const sanitized = sanitizeSearch(search);\r\n    return recentSearches.some(s => sanitizeSearch(s) === sanitized);\r\n  }, [recentSearches, sanitizeSearch]);\r\n\r\n  // Obtener las N búsquedas más recientes\r\n  const getRecentSearches = useCallback((limit?: number): string[] => {\r\n    const actualLimit = limit ?? config.maxSearches;\r\n    return recentSearches.slice(0, actualLimit);\r\n  }, [recentSearches, config.maxSearches]);\r\n\r\n  // Mover una búsqueda al principio (reordenar)\r\n  const moveToTop = useCallback((search: string): void => {\r\n    const sanitized = sanitizeSearch(search);\r\n    \r\n    setRecentSearches(prev => {\r\n      const filtered = prev.filter(s => sanitizeSearch(s) !== sanitized);\r\n      const existing = prev.find(s => sanitizeSearch(s) === sanitized);\r\n      \r\n      if (!existing) {return prev;}\r\n      \r\n      const updated = [existing, ...filtered];\r\n      saveToStorage(updated);\r\n      return updated;\r\n    });\r\n  }, [sanitizeSearch, saveToStorage]);\r\n\r\n  return {\r\n    recentSearches,\r\n    addSearch,\r\n    removeSearch,\r\n    clearSearches,\r\n    hasSearch,\r\n    getRecentSearches,\r\n    moveToTop,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook simplificado para solo obtener búsquedas recientes\r\n */\r\nexport function useRecentSearchesSimple(limit: number = 5): string[] {\r\n  const { getRecentSearches } = useRecentSearches({ maxSearches: limit });\r\n  return getRecentSearches();\r\n}\r\n\r\nexport default useRecentSearches;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useRecentSearches","useRecentSearchesSimple","DEFAULT_OPTIONS","maxSearches","storageKey","enablePersistence","filterDuplicates","expirationDays","options","config","recentSearches","setRecentSearches","useState","sanitizeSearch","useCallback","search","trim","toLowerCase","isExpired","timestamp","maxAge","Date","now","loadFromStorage","result","safeLocalStorageGet","success","data","Array","isArray","searches","persistedData","safeLocalStorageSet","version","slice","saveToStorage","window","length","localStorage","removeItem","dataToStore","setItem","JSON","stringify","error","console","warn","useEffect","loaded","addSearch","sanitized","prev","updated","filter","s","unshift","removeSearch","clearSearches","hasSearch","some","getRecentSearches","limit","actualLimit","moveToTop","filtered","existing","find"],"mappings":"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"}