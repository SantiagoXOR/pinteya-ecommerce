{"version":3,"names":["cov_2idtk53qd3","actualCoverage","s","SimpleBarChart","f","default","MetricChart","title","description","data","color","b","unit","decimals","height","length","_jsxruntime","jsxs","_card","Card","CardHeader","jsx","CardTitle","CardDescription","CardContent","className","values","map","d","value","minValue","Math","min","maxValue","max","range","currentValue","previousValue","trend","trendPercentage","svgWidth","svgHeight","padding","chartWidth","chartHeight","points","point","index","x","y","join","areaPoints","areaPath","formatValue","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","getTrendIcon","_lucidereact","TrendingUp","TrendingDown","Minus","getTrendColor","abs","toFixed","width","viewBox","fill","fillOpacity","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","Date","timestamp","toLocaleTimeString","ratio","x1","y1","x2","y2","strokeDasharray","textAnchor","fontSize","item","percentage","label","style","backgroundColor"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\monitoring\\MetricChart.tsx"],"sourcesContent":["'use client';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - METRIC CHART COMPONENT\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react';\r\n\r\ninterface MetricDataPoint {\r\n  timestamp: string;\r\n  value: number;\r\n}\r\n\r\ninterface MetricChartProps {\r\n  title: string;\r\n  description?: string;\r\n  data: MetricDataPoint[];\r\n  color?: string;\r\n  unit?: string;\r\n  decimals?: number;\r\n  height?: number;\r\n}\r\n\r\n/**\r\n * Componente de gráfico de métricas simple (sin dependencias externas)\r\n */\r\nexport default function MetricChart({\r\n  title,\r\n  description,\r\n  data,\r\n  color = '#3b82f6',\r\n  unit = '',\r\n  decimals = 0,\r\n  height = 200\r\n}: MetricChartProps) {\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{title}</CardTitle>\r\n          {description && <CardDescription>{description}</CardDescription>}\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center h-48 text-muted-foreground\">\r\n            No hay datos disponibles\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Calcular valores para el gráfico\r\n  const values = data.map(d => d.value);\r\n  const minValue = Math.min(...values);\r\n  const maxValue = Math.max(...values);\r\n  const range = maxValue - minValue;\r\n  const currentValue = values[values.length - 1];\r\n  const previousValue = values.length > 1 ? values[values.length - 2] : currentValue;\r\n  \r\n  // Calcular tendencia\r\n  const trend = currentValue > previousValue ? 'up' : \r\n                currentValue < previousValue ? 'down' : 'stable';\r\n  const trendPercentage = previousValue !== 0 \r\n    ? ((currentValue - previousValue) / previousValue) * 100 \r\n    : 0;\r\n\r\n  // Generar puntos SVG para la línea\r\n  const svgWidth = 400;\r\n  const svgHeight = height;\r\n  const padding = 20;\r\n  const chartWidth = svgWidth - (padding * 2);\r\n  const chartHeight = svgHeight - (padding * 2);\r\n\r\n  const points = data.map((point, index) => {\r\n    const x = padding + (index / (data.length - 1)) * chartWidth;\r\n    const y = range > 0 \r\n      ? padding + chartHeight - ((point.value - minValue) / range) * chartHeight\r\n      : padding + chartHeight / 2;\r\n    return `${x},${y}`;\r\n  }).join(' ');\r\n\r\n  // Generar área bajo la curva\r\n  const areaPoints = data.map((point, index) => {\r\n    const x = padding + (index / (data.length - 1)) * chartWidth;\r\n    const y = range > 0 \r\n      ? padding + chartHeight - ((point.value - minValue) / range) * chartHeight\r\n      : padding + chartHeight / 2;\r\n    return `${x},${y}`;\r\n  });\r\n\r\n  const areaPath = `M${areaPoints[0]} L${areaPoints.join(' L')} L${padding + chartWidth},${padding + chartHeight} L${padding},${padding + chartHeight} Z`;\r\n\r\n  // Formatear valor\r\n  const formatValue = (value: number) => {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      minimumFractionDigits: decimals,\r\n      maximumFractionDigits: decimals\r\n    }).format(value);\r\n  };\r\n\r\n  // Obtener icono de tendencia\r\n  const getTrendIcon = () => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return <TrendingUp className=\"h-4 w-4 text-green-500\" />;\r\n      case 'down':\r\n        return <TrendingDown className=\"h-4 w-4 text-red-500\" />;\r\n      default:\r\n        return <Minus className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  // Obtener color de tendencia\r\n  const getTrendColor = () => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return 'text-green-500';\r\n      case 'down':\r\n        return 'text-red-500';\r\n      default:\r\n        return 'text-gray-500';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle>{title}</CardTitle>\r\n            {description && <CardDescription>{description}</CardDescription>}\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {getTrendIcon()}\r\n            <span className={`text-sm font-medium ${getTrendColor()}`}>\r\n              {Math.abs(trendPercentage).toFixed(1)}%\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {/* Valor actual */}\r\n          <div>\r\n            <div className=\"text-2xl font-bold\">\r\n              {formatValue(currentValue)}{unit}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Valor actual\r\n            </p>\r\n          </div>\r\n\r\n          {/* Gráfico SVG */}\r\n          <div className=\"w-full\">\r\n            <svg\r\n              width=\"100%\"\r\n              height={height}\r\n              viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n              className=\"overflow-visible\"\r\n            >\r\n              {/* Área bajo la curva */}\r\n              <path\r\n                d={areaPath}\r\n                fill={color}\r\n                fillOpacity={0.1}\r\n                stroke=\"none\"\r\n              />\r\n              \r\n              {/* Línea principal */}\r\n              <polyline\r\n                points={points}\r\n                fill=\"none\"\r\n                stroke={color}\r\n                strokeWidth={2}\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n              />\r\n              \r\n              {/* Puntos de datos */}\r\n              {data.map((point, index) => {\r\n                const x = padding + (index / (data.length - 1)) * chartWidth;\r\n                const y = range > 0 \r\n                  ? padding + chartHeight - ((point.value - minValue) / range) * chartHeight\r\n                  : padding + chartHeight / 2;\r\n                \r\n                return (\r\n                  <circle\r\n                    key={index}\r\n                    cx={x}\r\n                    cy={y}\r\n                    r={3}\r\n                    fill={color}\r\n                    stroke=\"white\"\r\n                    strokeWidth={2}\r\n                    className=\"hover:r-4 transition-all duration-200\"\r\n                  >\r\n                    <title>\r\n                      {new Date(point.timestamp).toLocaleTimeString('es-AR')}: {formatValue(point.value)}{unit}\r\n                    </title>\r\n                  </circle>\r\n                );\r\n              })}\r\n              \r\n              {/* Líneas de grid horizontales */}\r\n              {[0, 0.25, 0.5, 0.75, 1].map((ratio, index) => {\r\n                const y = padding + chartHeight * ratio;\r\n                const value = maxValue - (ratio * range);\r\n                \r\n                return (\r\n                  <g key={index}>\r\n                    <line\r\n                      x1={padding}\r\n                      y1={y}\r\n                      x2={padding + chartWidth}\r\n                      y2={y}\r\n                      stroke=\"#e5e7eb\"\r\n                      strokeWidth={1}\r\n                      strokeDasharray=\"2,2\"\r\n                    />\r\n                    <text\r\n                      x={padding - 5}\r\n                      y={y + 4}\r\n                      textAnchor=\"end\"\r\n                      fontSize=\"10\"\r\n                      fill=\"#6b7280\"\r\n                    >\r\n                      {formatValue(value)}\r\n                    </text>\r\n                  </g>\r\n                );\r\n              })}\r\n            </svg>\r\n          </div>\r\n\r\n          {/* Estadísticas adicionales */}\r\n          <div className=\"grid grid-cols-3 gap-4 text-sm\">\r\n            <div>\r\n              <div className=\"font-medium text-green-600\">\r\n                {formatValue(maxValue)}{unit}\r\n              </div>\r\n              <div className=\"text-muted-foreground\">Máximo</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"font-medium\">\r\n                {formatValue((minValue + maxValue) / 2)}{unit}\r\n              </div>\r\n              <div className=\"text-muted-foreground\">Promedio</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"font-medium text-red-600\">\r\n                {formatValue(minValue)}{unit}\r\n              </div>\r\n              <div className=\"text-muted-foreground\">Mínimo</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n/**\r\n * Componente de gráfico de barras simple\r\n */\r\ninterface BarChartProps {\r\n  title: string;\r\n  description?: string;\r\n  data: Array<{ label: string; value: number; color?: string }>;\r\n  unit?: string;\r\n  decimals?: number;\r\n}\r\n\r\nexport function SimpleBarChart({\r\n  title,\r\n  description,\r\n  data,\r\n  unit = '',\r\n  decimals = 0\r\n}: BarChartProps) {\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{title}</CardTitle>\r\n          {description && <CardDescription>{description}</CardDescription>}\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center h-48 text-muted-foreground\">\r\n            No hay datos disponibles\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const maxValue = Math.max(...data.map(d => d.value));\r\n\r\n  const formatValue = (value: number) => {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      minimumFractionDigits: decimals,\r\n      maximumFractionDigits: decimals\r\n    }).format(value);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>{title}</CardTitle>\r\n        {description && <CardDescription>{description}</CardDescription>}\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {data.map((item, index) => {\r\n            const percentage = maxValue > 0 ? (item.value / maxValue) * 100 : 0;\r\n            const color = item.color || '#3b82f6';\r\n            \r\n            return (\r\n              <div key={index} className=\"space-y-2\">\r\n                <div className=\"flex items-center justify-between text-sm\">\r\n                  <span className=\"font-medium\">{item.label}</span>\r\n                  <span className=\"text-muted-foreground\">\r\n                    {formatValue(item.value)}{unit}\r\n                  </span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                  <div\r\n                    className=\"h-2 rounded-full transition-all duration-500 ease-out\"\r\n                    style={{\r\n                      width: `${percentage}%`,\r\n                      backgroundColor: color\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}