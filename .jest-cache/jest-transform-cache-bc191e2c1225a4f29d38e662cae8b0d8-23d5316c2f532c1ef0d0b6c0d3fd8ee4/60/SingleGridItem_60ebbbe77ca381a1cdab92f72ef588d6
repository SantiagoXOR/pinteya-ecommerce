cb5d3e7d32c5e58f029b195cc7b24657
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _quickViewslice = require("../../redux/features/quickView-slice");
const _cartslice = require("../../redux/features/cart-slice");
const _wishlistslice = require("../../redux/features/wishlist-slice");
const _reactredux = require("react-redux");
const _productcardcommercial = require("../ui/product-card-commercial");
const _productAdapter = require("../../lib/adapters/productAdapter");
const _useCartWithBackend = require("../../hooks/useCartWithBackend");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const SingleGridItem = ({ item })=>{
    const dispatch = (0, _reactredux.useDispatch)();
    // Hook para carrito con backend
    const { addItem, loading } = (0, _useCartWithBackend.useCartWithBackend)();
    // update the QuickView state
    const handleQuickViewUpdate = ()=>{
        dispatch((0, _quickViewslice.updateQuickView)({
            ...item
        }));
    };
    // add to cart - Conectado con backend
    const handleAddToCart = async ()=>{
        // Intentar agregar al backend primero
        const success = await addItem(item.id, 1);
        if (success) {
            // Si el backend funciona, también actualizar Redux para compatibilidad
            dispatch((0, _cartslice.addItemToCart)({
                ...item,
                quantity: 1
            }));
        } else {
            // Si falla el backend, solo usar Redux (fallback)
            dispatch((0, _cartslice.addItemToCart)({
                ...item,
                quantity: 1
            }));
        }
    };
    const handleItemToWishList = ()=>{
        dispatch((0, _wishlistslice.addItemToWishlist)({
            ...item,
            status: "available",
            quantity: 1
        }));
    };
    // Calcular características del producto usando el adaptador
    const features = (0, _productAdapter.calculateProductFeatures)(item);
    // FIX DIRECTO: Limpiar "Poxipol" del título si está presente
    let cleanTitle = item.name || item.title;
    if (cleanTitle && cleanTitle.includes('Poximix') && cleanTitle.includes('Poxipol')) {
        cleanTitle = cleanTitle.replace(/\s*Poxipol\s*$/, '').trim();
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_productcardcommercial.CommercialProductCard, {
        className: "bg-white",
        image: item.images?.previews?.[0] || item.imgs?.previews?.[0] || '/images/products/placeholder.svg',
        title: cleanTitle,
        brand: item.brand,
        price: features.discount ? Math.round(item.price * (1 - features.discount / 100)) : features.currentPrice,
        originalPrice: features.discount ? item.price : undefined,
        discount: features.discount ? `${features.discount}%` : undefined,
        isNew: features.isNew,
        stock: features.stock,
        productId: item.id,
        cta: "Agregar al carrito",
        onAddToCart: handleAddToCart,
        showCartAnimation: true,
        // Información de cuotas automática
        installments: features.currentPrice >= 5000 ? {
            quantity: 3,
            amount: Math.round(features.currentPrice / 3),
            interestFree: true
        } : undefined,
        // Envío gratis automático para productos >= $15000
        freeShipping: features.freeShipping || features.currentPrice >= 15000,
        shippingText: features.freeShipping ? "Envío gratis" : features.fastShipping ? "Envío rápido" : undefined
    });
};
const _default = SingleGridItem;

//# sourceMappingURL=data:application/json;base64,