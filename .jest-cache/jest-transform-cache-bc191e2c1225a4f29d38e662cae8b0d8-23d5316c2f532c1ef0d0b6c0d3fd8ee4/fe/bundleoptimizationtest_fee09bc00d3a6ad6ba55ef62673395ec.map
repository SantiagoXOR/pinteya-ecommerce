{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\optimization\\bundle-optimization.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS DE BUNDLE OPTIMIZATION SYSTEM\r\n// ===================================\r\n\r\nimport { BundleOptimizationManager } from '@/lib/optimization/bundle-optimization-manager';\r\nimport { PerformanceBudgetMonitor } from '@/lib/optimization/performance-budget-monitor';\r\nimport { \r\n  getAdvancedSplitChunksConfig, \r\n  getOptimizationConfig,\r\n  OPTIMIZATION_PRESETS \r\n} from '@/lib/optimization/webpack-optimization-config';\r\n\r\n// Mock file system\r\njest.mock('fs', () => ({\r\n  promises: {\r\n    readFile: jest.fn().mockResolvedValue(JSON.stringify({\r\n      dependencies: {\r\n        'react': '^18.2.0',\r\n        'next': '^15.3.3',\r\n        'framer-motion': '^12.23.0'\r\n      }\r\n    })),\r\n    writeFile: jest.fn(),\r\n    mkdir: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('Bundle Optimization System', () => {\r\n  let bundleManager: BundleOptimizationManager;\r\n  let budgetMonitor: PerformanceBudgetMonitor;\r\n\r\n  beforeEach(() => {\r\n    bundleManager = BundleOptimizationManager.getInstance();\r\n    budgetMonitor = PerformanceBudgetMonitor.getInstance();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('BundleOptimizationManager', () => {\r\n    it('should be a singleton', () => {\r\n      const instance1 = BundleOptimizationManager.getInstance();\r\n      const instance2 = BundleOptimizationManager.getInstance();\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n\r\n    it('should analyze bundles and return analysis', async () => {\r\n      const analysis = await bundleManager.analyzeBundles();\r\n      \r\n      expect(analysis).toHaveProperty('totalSize');\r\n      expect(analysis).toHaveProperty('gzippedSize');\r\n      expect(analysis).toHaveProperty('chunks');\r\n      expect(analysis).toHaveProperty('dependencies');\r\n      expect(analysis).toHaveProperty('recommendations');\r\n      expect(analysis).toHaveProperty('performance');\r\n      \r\n      expect(typeof analysis.totalSize).toBe('number');\r\n      expect(Array.isArray(analysis.chunks)).toBe(true);\r\n      expect(Array.isArray(analysis.dependencies)).toBe(true);\r\n      expect(Array.isArray(analysis.recommendations)).toBe(true);\r\n    });\r\n\r\n    it('should generate performance metrics correctly', async () => {\r\n      const analysis = await bundleManager.analyzeBundles();\r\n      const { performance } = analysis;\r\n      \r\n      expect(performance).toHaveProperty('firstLoadJS');\r\n      expect(performance).toHaveProperty('totalJS');\r\n      expect(performance).toHaveProperty('score');\r\n      expect(performance).toHaveProperty('grade');\r\n      \r\n      expect(performance.score).toBeGreaterThanOrEqual(0);\r\n      expect(performance.score).toBeLessThanOrEqual(100);\r\n      expect(['A', 'B', 'C', 'D', 'F']).toContain(performance.grade);\r\n    });\r\n\r\n    it('should generate recommendations based on analysis', async () => {\r\n      const analysis = await bundleManager.analyzeBundles();\r\n      const { recommendations } = analysis;\r\n      \r\n      expect(Array.isArray(recommendations)).toBe(true);\r\n      \r\n      if (recommendations.length > 0) {\r\n        const recommendation = recommendations[0];\r\n        expect(recommendation).toHaveProperty('type');\r\n        expect(recommendation).toHaveProperty('priority');\r\n        expect(recommendation).toHaveProperty('description');\r\n        expect(recommendation).toHaveProperty('estimatedSavings');\r\n        expect(recommendation).toHaveProperty('implementation');\r\n        expect(recommendation).toHaveProperty('effort');\r\n        \r\n        expect(['code-splitting', 'tree-shaking', 'dependency-replacement', 'lazy-loading', 'compression'])\r\n          .toContain(recommendation.type);\r\n        expect(['critical', 'high', 'medium', 'low']).toContain(recommendation.priority);\r\n        expect(['low', 'medium', 'high']).toContain(recommendation.effort);\r\n      }\r\n    });\r\n\r\n    it('should update configuration correctly', () => {\r\n      const newConfig = {\r\n        maxChunkSize: 300 * 1024,\r\n        enableTreeShaking: false\r\n      };\r\n      \r\n      bundleManager.updateConfig(newConfig);\r\n      \r\n      // Verificar que la configuración se actualizó\r\n      // (En una implementación real, tendríamos un getter para la config)\r\n      expect(true).toBe(true); // Placeholder\r\n    });\r\n\r\n    it('should generate optimization report', async () => {\r\n      const analysis = await bundleManager.analyzeBundles();\r\n      const report = bundleManager.generateOptimizationReport(analysis);\r\n      \r\n      expect(typeof report).toBe('string');\r\n      expect(report).toContain('Bundle Optimization Report');\r\n      expect(report).toContain('Performance Metrics');\r\n      expect(report).toContain('Chunks Analysis');\r\n      expect(report).toContain('Top Recommendations');\r\n    });\r\n  });\r\n\r\n  describe('PerformanceBudgetMonitor', () => {\r\n    it('should be a singleton', () => {\r\n      const instance1 = PerformanceBudgetMonitor.getInstance();\r\n      const instance2 = PerformanceBudgetMonitor.getInstance();\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n\r\n    it('should have default budgets configured', () => {\r\n      const budgets = budgetMonitor.getBudgets();\r\n      \r\n      expect(Array.isArray(budgets)).toBe(true);\r\n      expect(budgets.length).toBeGreaterThan(0);\r\n      \r\n      const firstLoadBudget = budgets.find(b => b.name === 'First Load JS');\r\n      expect(firstLoadBudget).toBeDefined();\r\n      expect(firstLoadBudget?.threshold).toBe(128 * 1024);\r\n      expect(firstLoadBudget?.category).toBe('critical');\r\n    });\r\n\r\n    it('should add and manage budgets', () => {\r\n      const initialCount = budgetMonitor.getBudgets().length;\r\n      \r\n      const newBudget = {\r\n        name: 'Test Budget',\r\n        type: 'size' as const,\r\n        threshold: 100 * 1024,\r\n        warning: 80 * 1024,\r\n        unit: 'bytes' as const,\r\n        category: 'optional' as const,\r\n        description: 'Test budget for testing'\r\n      };\r\n      \r\n      budgetMonitor.addBudget(newBudget);\r\n      \r\n      const budgets = budgetMonitor.getBudgets();\r\n      expect(budgets.length).toBe(initialCount + 1);\r\n      \r\n      const addedBudget = budgets.find(b => b.name === 'Test Budget');\r\n      expect(addedBudget).toBeDefined();\r\n      expect(addedBudget?.threshold).toBe(100 * 1024);\r\n    });\r\n\r\n    it('should update existing budgets', () => {\r\n      const budgets = budgetMonitor.getBudgets();\r\n      const firstBudget = budgets[0];\r\n      const originalThreshold = firstBudget.threshold;\r\n      \r\n      budgetMonitor.updateBudget(firstBudget.name, { threshold: 200 * 1024 });\r\n      \r\n      const updatedBudgets = budgetMonitor.getBudgets();\r\n      const updatedBudget = updatedBudgets.find(b => b.name === firstBudget.name);\r\n      \r\n      expect(updatedBudget?.threshold).toBe(200 * 1024);\r\n      expect(updatedBudget?.threshold).not.toBe(originalThreshold);\r\n    });\r\n\r\n    it('should analyze performance and detect violations', async () => {\r\n      const report = await budgetMonitor.analyzePerformance();\r\n      \r\n      expect(report).toHaveProperty('timestamp');\r\n      expect(report).toHaveProperty('buildId');\r\n      expect(report).toHaveProperty('violations');\r\n      expect(report).toHaveProperty('metrics');\r\n      expect(report).toHaveProperty('score');\r\n      expect(report).toHaveProperty('grade');\r\n      expect(report).toHaveProperty('trends');\r\n      \r\n      expect(Array.isArray(report.violations)).toBe(true);\r\n      expect(typeof report.score).toBe('number');\r\n      expect(['A', 'B', 'C', 'D', 'F']).toContain(report.grade);\r\n    });\r\n\r\n    it('should calculate performance score correctly', async () => {\r\n      const report = await budgetMonitor.analyzePerformance();\r\n      \r\n      expect(report.score).toBeGreaterThanOrEqual(0);\r\n      expect(report.score).toBeLessThanOrEqual(100);\r\n      \r\n      // Score should correlate with grade\r\n      if (report.grade === 'A') {\r\n        expect(report.score).toBeGreaterThanOrEqual(90);\r\n      } else if (report.grade === 'F') {\r\n        expect(report.score).toBeLessThan(60);\r\n      }\r\n    });\r\n\r\n    it('should generate text report', async () => {\r\n      const report = await budgetMonitor.analyzePerformance();\r\n      const textReport = budgetMonitor.generateTextReport(report);\r\n      \r\n      expect(typeof textReport).toBe('string');\r\n      expect(textReport).toContain('Performance Budget Report');\r\n      expect(textReport).toContain('Build ID');\r\n      expect(textReport).toContain('Score');\r\n      expect(textReport).toContain('Metrics Summary');\r\n    });\r\n\r\n    it('should track performance trends', async () => {\r\n      // Limpiar historial previo\r\n      const history = budgetMonitor.getHistory();\r\n      while (history.length > 0) {\r\n        history.pop();\r\n      }\r\n\r\n      // Generar primer reporte\r\n      const report1 = await budgetMonitor.analyzePerformance();\r\n      expect(report1.trends.length).toBe(0); // No hay historial previo\r\n\r\n      // Simular segundo reporte\r\n      const report2 = await budgetMonitor.analyzePerformance();\r\n      expect(report2.trends.length).toBeGreaterThan(0);\r\n\r\n      const trend = report2.trends[0];\r\n      expect(trend).toHaveProperty('metric');\r\n      expect(trend).toHaveProperty('current');\r\n      expect(trend).toHaveProperty('previous');\r\n      expect(trend).toHaveProperty('change');\r\n      expect(trend).toHaveProperty('changePercent');\r\n      expect(trend).toHaveProperty('trend');\r\n      expect(['improving', 'degrading', 'stable']).toContain(trend.trend);\r\n    });\r\n  });\r\n\r\n  describe('Webpack Optimization Config', () => {\r\n    it('should generate advanced split chunks config', () => {\r\n      const options = {\r\n        enableAdvancedSplitting: true,\r\n        enableTreeShaking: true,\r\n        enableCompression: true,\r\n        enableCaching: true,\r\n        enablePreloading: true,\r\n        performanceMode: 'production' as const\r\n      };\r\n      \r\n      const config = getAdvancedSplitChunksConfig(options);\r\n      \r\n      expect(config).toHaveProperty('chunks');\r\n      expect(config).toHaveProperty('cacheGroups');\r\n      expect(config.chunks).toBe('all');\r\n      \r\n      const cacheGroups = config.cacheGroups;\r\n      expect(cacheGroups).toHaveProperty('framework');\r\n      expect(cacheGroups).toHaveProperty('vendor');\r\n      expect(cacheGroups).toHaveProperty('uiComponents');\r\n      expect(cacheGroups).toHaveProperty('admin');\r\n      \r\n      // Verificar configuración de framework\r\n      expect(cacheGroups.framework.priority).toBe(40);\r\n      expect(cacheGroups.framework.enforce).toBe(true);\r\n    });\r\n\r\n    it('should generate optimization config for different modes', () => {\r\n      const productionOptions = {\r\n        enableAdvancedSplitting: true,\r\n        enableTreeShaking: true,\r\n        enableCompression: true,\r\n        enableCaching: true,\r\n        enablePreloading: true,\r\n        performanceMode: 'production' as const\r\n      };\r\n      \r\n      const developmentOptions = {\r\n        enableAdvancedSplitting: false,\r\n        enableTreeShaking: false,\r\n        enableCompression: false,\r\n        enableCaching: true,\r\n        enablePreloading: false,\r\n        performanceMode: 'development' as const\r\n      };\r\n      \r\n      const prodConfig = getOptimizationConfig(productionOptions);\r\n      const devConfig = getOptimizationConfig(developmentOptions);\r\n      \r\n      expect(prodConfig.usedExports).toBe(true);\r\n      expect(prodConfig.concatenateModules).toBe(true);\r\n      expect(prodConfig.runtimeChunk).toBe('single');\r\n      \r\n      expect(devConfig.usedExports).toBe(false);\r\n      expect(devConfig.concatenateModules).toBe(false);\r\n      expect(devConfig.runtimeChunk).toBe(false);\r\n    });\r\n\r\n    it('should have valid optimization presets', () => {\r\n      expect(OPTIMIZATION_PRESETS).toHaveProperty('development');\r\n      expect(OPTIMIZATION_PRESETS).toHaveProperty('production');\r\n      expect(OPTIMIZATION_PRESETS).toHaveProperty('analysis');\r\n      \r\n      const prodPreset = OPTIMIZATION_PRESETS.production;\r\n      expect(prodPreset.enableAdvancedSplitting).toBe(true);\r\n      expect(prodPreset.enableTreeShaking).toBe(true);\r\n      expect(prodPreset.performanceMode).toBe('production');\r\n      \r\n      const devPreset = OPTIMIZATION_PRESETS.development;\r\n      expect(devPreset.enableAdvancedSplitting).toBe(false);\r\n      expect(devPreset.enableTreeShaking).toBe(false);\r\n      expect(devPreset.performanceMode).toBe('development');\r\n    });\r\n  });\r\n\r\n  describe('Integration Tests', () => {\r\n    it('should work together - bundle analysis and budget monitoring', async () => {\r\n      // Analizar bundles\r\n      const bundleAnalysis = await bundleManager.analyzeBundles();\r\n\r\n      // Analizar performance budgets\r\n      const budgetReport = await budgetMonitor.analyzePerformance();\r\n\r\n      // Verificar que ambos sistemas funcionan juntos\r\n      // Los scores pueden diferir ligeramente debido a diferentes algoritmos de cálculo\r\n      expect(bundleAnalysis.performance.score).toBeGreaterThan(0);\r\n      expect(budgetReport.score).toBeGreaterThan(0);\r\n      expect(['A', 'B', 'C', 'D', 'F']).toContain(bundleAnalysis.performance.grade);\r\n      expect(['A', 'B', 'C', 'D', 'F']).toContain(budgetReport.grade);\r\n\r\n      // Verificar que las métricas están en rangos razonables\r\n      expect(bundleAnalysis.performance.firstLoadJS).toBeGreaterThan(0);\r\n      expect(budgetReport.metrics.firstLoadJS).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should generate comprehensive optimization recommendations', async () => {\r\n      const bundleAnalysis = await bundleManager.analyzeBundles();\r\n      const budgetReport = await budgetMonitor.analyzePerformance();\r\n      \r\n      const bundleRecommendations = bundleAnalysis.recommendations;\r\n      const budgetViolations = budgetReport.violations;\r\n      \r\n      // Si hay violaciones de presupuesto, debería haber recomendaciones\r\n      if (budgetViolations.length > 0) {\r\n        expect(bundleRecommendations.length).toBeGreaterThan(0);\r\n      }\r\n      \r\n      // Las recomendaciones deberían estar ordenadas por prioridad\r\n      for (let i = 1; i < bundleRecommendations.length; i++) {\r\n        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\r\n        const currentPriority = priorityOrder[bundleRecommendations[i].priority];\r\n        const previousPriority = priorityOrder[bundleRecommendations[i - 1].priority];\r\n        expect(currentPriority).toBeLessThanOrEqual(previousPriority);\r\n      }\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","promises","readFile","fn","mockResolvedValue","JSON","stringify","dependencies","writeFile","mkdir","describe","bundleManager","budgetMonitor","beforeEach","BundleOptimizationManager","getInstance","PerformanceBudgetMonitor","clearAllMocks","it","instance1","instance2","expect","toBe","analysis","analyzeBundles","toHaveProperty","totalSize","Array","isArray","chunks","recommendations","performance","score","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toContain","grade","length","recommendation","type","priority","effort","newConfig","maxChunkSize","enableTreeShaking","updateConfig","report","generateOptimizationReport","budgets","getBudgets","toBeGreaterThan","firstLoadBudget","find","b","name","toBeDefined","threshold","category","initialCount","newBudget","warning","unit","description","addBudget","addedBudget","firstBudget","originalThreshold","updateBudget","updatedBudgets","updatedBudget","not","analyzePerformance","violations","toBeLessThan","textReport","generateTextReport","history","getHistory","pop","report1","trends","report2","trend","options","enableAdvancedSplitting","enableCompression","enableCaching","enablePreloading","performanceMode","config","getAdvancedSplitChunksConfig","cacheGroups","framework","enforce","productionOptions","developmentOptions","prodConfig","getOptimizationConfig","devConfig","usedExports","concatenateModules","runtimeChunk","OPTIMIZATION_PRESETS","prodPreset","production","devPreset","development","bundleAnalysis","budgetReport","firstLoadJS","metrics","bundleRecommendations","budgetViolations","i","priorityOrder","critical","high","medium","low","currentPriority","previousPriority"],"mappings":"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"}