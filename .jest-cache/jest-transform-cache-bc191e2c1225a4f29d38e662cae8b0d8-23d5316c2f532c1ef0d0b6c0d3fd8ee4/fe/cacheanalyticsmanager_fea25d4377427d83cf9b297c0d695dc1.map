{"version":3,"names":["CacheAnalyticsManager","cov_mzr50xe94","f","s","CacheAnalyticsUtils","DEFAULT_ALERT_CONFIG","cacheAnalyticsManager","hitRateThreshold","responseTimeThreshold","errorRateThreshold","capacityThreshold","healthCheckInterval","alertCooldown","constructor","redis","_redis","getRedisClient","metrics","Map","alerts","alertConfig","lastAlertTime","initializeHealthChecks","getInstance","instance","b","recordMetrics","key","hitRate","responseTime","bytesServed","error","timestamp","Date","now","keyMetrics","get","lastMetric","length","totalRequests","totalHits","totalMisses","errors","metric","missRate","avgResponseTime","bytesStored","evictions","push","splice","set","persistMetrics","checkAlerts","getCurrentMetrics","current","forEach","getHistoricalMetrics","startTime","endTime","filter","getStrategyMetrics","strategyMetrics","_advancedcachestrategymanager","advancedCacheStrategyManager","getAllMetrics","Object","entries","map","strategy","successRate","hits","errorRate","lastUsed","lastUpdated","getLayerMetrics","layerMetrics","_multilayercachemanager","multiLayerCacheManager","layerHealth","getLayerHealth","layer","health","avgLatency","entriesCount","healthStatus","healthy","lastCheck","analyzeTrends","period","periodMs","getPeriodMs","allMetrics","periodMetrics","m","getEmptyTrendAnalysis","midPoint","firstHalf","secondHalf","firstHalfAvg","calculateAverageMetrics","secondHalfAvg","hitRateTrend","calculateTrend","responseTrend","volumeTrend","errorTrend","predictions","generatePredictions","generateReport","start","end","summary","calculateSummary","strategies","layers","trends","Array","from","values","alert","recommendations","generateRecommendations","topKeys","getTopKeys","configureAlerts","config","_logger","logger","info","LogCategory","CACHE","getActiveAlerts","resolved","resolveAlert","alertId","resolvedAt","cleanupOldMetrics","maxAge","cutoff","filtered","oldAlerts","_","id","delete","setInterval","performHealthCheck","createAlert","currentMetrics","checkMetricThresholds","toFixed","threshold","redisKey","setex","JSON","stringify","type","severity","message","details","alertKey","lastAlert","Math","random","toString","substr","warn","sum","reduce","acc","max","count","oldValue","newValue","recent","slice","avgHitRate","avgVolume","nextHourHitRate","min","nextDayVolume","recommendedActions","generatePredictionActions","volume","actions","totalErrors","dataTransferred","latest","avgMetrics","unhealthyLayers","l","join","limit","keyStats","misses","sort","a","destroy","clearInterval","recordHit","recordMiss","recordError","getQuickSummary","totalKeys","keys","activeAlerts","healthyLayers"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\cache-analytics-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CACHE ANALYTICS MANAGER\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\nimport { multiLayerCacheManager } from './multi-layer-cache-manager';\r\nimport { advancedCacheStrategyManager } from './advanced-cache-strategy-manager';\r\n\r\n/**\r\n * Métricas de performance de cache\r\n */\r\nexport interface CachePerformanceMetrics {\r\n  hitRate: number;\r\n  missRate: number;\r\n  avgResponseTime: number;\r\n  totalRequests: number;\r\n  totalHits: number;\r\n  totalMisses: number;\r\n  bytesServed: number;\r\n  bytesStored: number;\r\n  evictions: number;\r\n  errors: number;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Métricas por estrategia\r\n */\r\nexport interface StrategyMetrics {\r\n  strategy: string;\r\n  hitRate: number;\r\n  avgResponseTime: number;\r\n  totalRequests: number;\r\n  successRate: number;\r\n  errorRate: number;\r\n  lastUsed: number;\r\n}\r\n\r\n/**\r\n * Métricas por capa de cache\r\n */\r\nexport interface LayerMetrics {\r\n  layer: string;\r\n  hitRate: number;\r\n  avgLatency: number;\r\n  totalRequests: number;\r\n  bytesStored: number;\r\n  entriesCount: number;\r\n  healthStatus: 'healthy' | 'degraded' | 'unhealthy';\r\n  lastCheck: number;\r\n}\r\n\r\n/**\r\n * Análisis de tendencias\r\n */\r\nexport interface TrendAnalysis {\r\n  period: 'hour' | 'day' | 'week' | 'month';\r\n  hitRateTrend: number; // Porcentaje de cambio\r\n  responseTrend: number;\r\n  volumeTrend: number;\r\n  errorTrend: number;\r\n  predictions: {\r\n    nextHourHitRate: number;\r\n    nextDayVolume: number;\r\n    recommendedActions: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Alertas de cache\r\n */\r\nexport interface CacheAlert {\r\n  id: string;\r\n  type: 'performance' | 'capacity' | 'error' | 'health';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  message: string;\r\n  details: any;\r\n  timestamp: number;\r\n  resolved: boolean;\r\n  resolvedAt?: number;\r\n}\r\n\r\n/**\r\n * Configuración de alertas\r\n */\r\nexport interface AlertConfig {\r\n  hitRateThreshold: number;\r\n  responseTimeThreshold: number;\r\n  errorRateThreshold: number;\r\n  capacityThreshold: number;\r\n  healthCheckInterval: number;\r\n  alertCooldown: number;\r\n}\r\n\r\n/**\r\n * Reporte de cache\r\n */\r\nexport interface CacheReport {\r\n  period: { start: number; end: number };\r\n  summary: {\r\n    totalRequests: number;\r\n    avgHitRate: number;\r\n    avgResponseTime: number;\r\n    totalErrors: number;\r\n    dataTransferred: number;\r\n  };\r\n  strategies: StrategyMetrics[];\r\n  layers: LayerMetrics[];\r\n  trends: TrendAnalysis;\r\n  alerts: CacheAlert[];\r\n  recommendations: string[];\r\n  topKeys: Array<{ key: string; hits: number; misses: number }>;\r\n}\r\n\r\n/**\r\n * Configuración por defecto de alertas\r\n */\r\nexport const DEFAULT_ALERT_CONFIG: AlertConfig = {\r\n  hitRateThreshold: 0.8,        // 80% hit rate mínimo\r\n  responseTimeThreshold: 100,    // 100ms máximo\r\n  errorRateThreshold: 0.05,     // 5% error rate máximo\r\n  capacityThreshold: 0.85,      // 85% capacidad máxima\r\n  healthCheckInterval: 60000,   // 1 minuto\r\n  alertCooldown: 300000         // 5 minutos\r\n};\r\n\r\n/**\r\n * Manager de analytics de cache\r\n */\r\nexport class CacheAnalyticsManager {\r\n  private static instance: CacheAnalyticsManager;\r\n  private redis = getRedisClient();\r\n  private metrics: Map<string, CachePerformanceMetrics[]> = new Map();\r\n  private alerts: Map<string, CacheAlert> = new Map();\r\n  private alertConfig: AlertConfig = DEFAULT_ALERT_CONFIG;\r\n  private lastAlertTime: Map<string, number> = new Map();\r\n  private healthCheckInterval?: NodeJS.Timeout;\r\n\r\n  private constructor() {\r\n    this.initializeHealthChecks();\r\n  }\r\n\r\n  static getInstance(): CacheAnalyticsManager {\r\n    if (!CacheAnalyticsManager.instance) {\r\n      CacheAnalyticsManager.instance = new CacheAnalyticsManager();\r\n    }\r\n    return CacheAnalyticsManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de performance\r\n   */\r\n  async recordMetrics(\r\n    key: string,\r\n    hitRate: number,\r\n    responseTime: number,\r\n    bytesServed: number = 0,\r\n    error: boolean = false\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const keyMetrics = this.metrics.get(key) || [];\r\n    \r\n    // Obtener métricas anteriores para calcular totales\r\n    const lastMetric = keyMetrics[keyMetrics.length - 1];\r\n    const totalRequests = (lastMetric?.totalRequests || 0) + 1;\r\n    const totalHits = (lastMetric?.totalHits || 0) + (hitRate > 0 ? 1 : 0);\r\n    const totalMisses = (lastMetric?.totalMisses || 0) + (hitRate === 0 ? 1 : 0);\r\n    const errors = (lastMetric?.errors || 0) + (error ? 1 : 0);\r\n\r\n    const metric: CachePerformanceMetrics = {\r\n      hitRate,\r\n      missRate: 1 - hitRate,\r\n      avgResponseTime: responseTime,\r\n      totalRequests,\r\n      totalHits,\r\n      totalMisses,\r\n      bytesServed: (lastMetric?.bytesServed || 0) + bytesServed,\r\n      bytesStored: lastMetric?.bytesStored || 0,\r\n      evictions: lastMetric?.evictions || 0,\r\n      errors,\r\n      timestamp\r\n    };\r\n\r\n    keyMetrics.push(metric);\r\n    \r\n    // Mantener solo las últimas 1000 métricas por key\r\n    if (keyMetrics.length > 1000) {\r\n      keyMetrics.splice(0, keyMetrics.length - 1000);\r\n    }\r\n    \r\n    this.metrics.set(key, keyMetrics);\r\n\r\n    // Persistir en Redis para análisis histórico\r\n    await this.persistMetrics(key, metric);\r\n\r\n    // Verificar alertas\r\n    await this.checkAlerts(key, metric);\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas actuales\r\n   */\r\n  getCurrentMetrics(): Record<string, CachePerformanceMetrics> {\r\n    const current: Record<string, CachePerformanceMetrics> = {};\r\n    \r\n    this.metrics.forEach((metrics, key) => {\r\n      if (metrics.length > 0) {\r\n        current[key] = metrics[metrics.length - 1];\r\n      }\r\n    });\r\n    \r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas históricas\r\n   */\r\n  getHistoricalMetrics(\r\n    key: string,\r\n    startTime: number,\r\n    endTime: number\r\n  ): CachePerformanceMetrics[] {\r\n    const keyMetrics = this.metrics.get(key) || [];\r\n    return keyMetrics.filter(\r\n      metric => metric.timestamp >= startTime && metric.timestamp <= endTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas por estrategia\r\n   */\r\n  getStrategyMetrics(): StrategyMetrics[] {\r\n    const strategyMetrics = advancedCacheStrategyManager.getAllMetrics();\r\n    \r\n    return Object.entries(strategyMetrics).map(([strategy, metrics]) => ({\r\n      strategy,\r\n      hitRate: metrics.hitRate,\r\n      avgResponseTime: metrics.avgResponseTime,\r\n      totalRequests: metrics.totalRequests,\r\n      successRate: metrics.hits / metrics.totalRequests,\r\n      errorRate: (metrics.totalRequests - metrics.hits) / metrics.totalRequests,\r\n      lastUsed: metrics.lastUpdated\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas por capa\r\n   */\r\n  getLayerMetrics(): LayerMetrics[] {\r\n    const layerMetrics = multiLayerCacheManager.getLayerMetrics();\r\n    const layerHealth = multiLayerCacheManager.getLayerHealth();\r\n    \r\n    return Object.entries(layerMetrics).map(([layer, metrics]) => {\r\n      const health = layerHealth[layer as keyof typeof layerHealth];\r\n      \r\n      return {\r\n        layer,\r\n        hitRate: metrics.hitRate,\r\n        avgLatency: metrics.avgLatency,\r\n        totalRequests: metrics.totalRequests,\r\n        bytesStored: metrics.bytesStored,\r\n        entriesCount: metrics.entriesCount,\r\n        healthStatus: health?.healthy ? 'healthy' : 'unhealthy',\r\n        lastCheck: health?.lastCheck || 0\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Analiza tendencias\r\n   */\r\n  async analyzeTrends(period: 'hour' | 'day' | 'week' | 'month'): Promise<TrendAnalysis> {\r\n    const now = Date.now();\r\n    const periodMs = this.getPeriodMs(period);\r\n    const startTime = now - periodMs;\r\n    \r\n    // Obtener métricas del período\r\n    const allMetrics: CachePerformanceMetrics[] = [];\r\n    this.metrics.forEach(metrics => {\r\n      const periodMetrics = metrics.filter(\r\n        m => m.timestamp >= startTime && m.timestamp <= now\r\n      );\r\n      allMetrics.push(...periodMetrics);\r\n    });\r\n\r\n    if (allMetrics.length === 0) {\r\n      return this.getEmptyTrendAnalysis(period);\r\n    }\r\n\r\n    // Calcular tendencias\r\n    const midPoint = startTime + (periodMs / 2);\r\n    const firstHalf = allMetrics.filter(m => m.timestamp <= midPoint);\r\n    const secondHalf = allMetrics.filter(m => m.timestamp > midPoint);\r\n\r\n    const firstHalfAvg = this.calculateAverageMetrics(firstHalf);\r\n    const secondHalfAvg = this.calculateAverageMetrics(secondHalf);\r\n\r\n    const hitRateTrend = this.calculateTrend(firstHalfAvg.hitRate, secondHalfAvg.hitRate);\r\n    const responseTrend = this.calculateTrend(firstHalfAvg.avgResponseTime, secondHalfAvg.avgResponseTime);\r\n    const volumeTrend = this.calculateTrend(firstHalf.length, secondHalf.length);\r\n    const errorTrend = this.calculateTrend(firstHalfAvg.errors, secondHalfAvg.errors);\r\n\r\n    // Generar predicciones\r\n    const predictions = await this.generatePredictions(allMetrics);\r\n\r\n    return {\r\n      period,\r\n      hitRateTrend,\r\n      responseTrend,\r\n      volumeTrend,\r\n      errorTrend,\r\n      predictions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Genera reporte comprehensivo\r\n   */\r\n  async generateReport(\r\n    startTime: number,\r\n    endTime: number\r\n  ): Promise<CacheReport> {\r\n    const period = { start: startTime, end: endTime };\r\n    \r\n    // Recopilar todas las métricas del período\r\n    const allMetrics: CachePerformanceMetrics[] = [];\r\n    this.metrics.forEach(metrics => {\r\n      const periodMetrics = metrics.filter(\r\n        m => m.timestamp >= startTime && m.timestamp <= endTime\r\n      );\r\n      allMetrics.push(...periodMetrics);\r\n    });\r\n\r\n    // Calcular resumen\r\n    const summary = this.calculateSummary(allMetrics);\r\n    \r\n    // Obtener métricas por estrategia y capa\r\n    const strategies = this.getStrategyMetrics();\r\n    const layers = this.getLayerMetrics();\r\n    \r\n    // Analizar tendencias\r\n    const trends = await this.analyzeTrends('day');\r\n    \r\n    // Obtener alertas del período\r\n    const alerts = Array.from(this.alerts.values()).filter(\r\n      alert => alert.timestamp >= startTime && alert.timestamp <= endTime\r\n    );\r\n    \r\n    // Generar recomendaciones\r\n    const recommendations = this.generateRecommendations(summary, strategies, layers, trends);\r\n    \r\n    // Obtener top keys\r\n    const topKeys = this.getTopKeys(10);\r\n\r\n    return {\r\n      period,\r\n      summary,\r\n      strategies,\r\n      layers,\r\n      trends,\r\n      alerts,\r\n      recommendations,\r\n      topKeys\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Configura alertas\r\n   */\r\n  configureAlerts(config: Partial<AlertConfig>): void {\r\n    this.alertConfig = { ...this.alertConfig, ...config };\r\n    logger.info(LogCategory.CACHE, 'Configuración de alertas actualizada');\r\n  }\r\n\r\n  /**\r\n   * Obtiene alertas activas\r\n   */\r\n  getActiveAlerts(): CacheAlert[] {\r\n    return Array.from(this.alerts.values()).filter(alert => !alert.resolved);\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  resolveAlert(alertId: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (alert && !alert.resolved) {\r\n      alert.resolved = true;\r\n      alert.resolvedAt = Date.now();\r\n      logger.info(LogCategory.CACHE, `Alerta resuelta: ${alertId}`);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Limpia métricas antiguas\r\n   */\r\n  async cleanupOldMetrics(maxAge: number = 7 * 24 * 60 * 60 * 1000): Promise<void> {\r\n    const cutoff = Date.now() - maxAge;\r\n    \r\n    this.metrics.forEach((metrics, key) => {\r\n      const filtered = metrics.filter(metric => metric.timestamp > cutoff);\r\n      if (filtered.length !== metrics.length) {\r\n        this.metrics.set(key, filtered);\r\n      }\r\n    });\r\n\r\n    // Limpiar alertas resueltas antiguas\r\n    const oldAlerts = Array.from(this.alerts.entries()).filter(\r\n      ([_, alert]) => alert.resolved && (alert.resolvedAt || 0) < cutoff\r\n    );\r\n    \r\n    oldAlerts.forEach(([id, _]) => {\r\n      this.alerts.delete(id);\r\n    });\r\n\r\n    logger.info(LogCategory.CACHE, `Limpieza completada: ${oldAlerts.length} alertas antiguas eliminadas`);\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS PRIVADOS\r\n  // ===================================\r\n\r\n  /**\r\n   * Inicializa health checks\r\n   */\r\n  private initializeHealthChecks(): void {\r\n    this.healthCheckInterval = setInterval(() => {\r\n      this.performHealthCheck();\r\n    }, this.alertConfig.healthCheckInterval);\r\n  }\r\n\r\n  /**\r\n   * Realiza health check\r\n   */\r\n  private async performHealthCheck(): Promise<void> {\r\n    try {\r\n      // Verificar estado de las capas\r\n      const layerHealth = multiLayerCacheManager.getLayerHealth();\r\n      \r\n      Object.entries(layerHealth).forEach(([layer, health]) => {\r\n        if (!health.healthy) {\r\n          this.createAlert(\r\n            'health',\r\n            'high',\r\n            `Capa de cache no saludable: ${layer}`,\r\n            { layer, errors: health.errors }\r\n          );\r\n        }\r\n      });\r\n\r\n      // Verificar métricas generales\r\n      const currentMetrics = this.getCurrentMetrics();\r\n      Object.entries(currentMetrics).forEach(([key, metrics]) => {\r\n        this.checkMetricThresholds(key, metrics);\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error en health check', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de métricas\r\n   */\r\n  private checkMetricThresholds(key: string, metrics: CachePerformanceMetrics): void {\r\n    // Verificar hit rate\r\n    if (metrics.hitRate < this.alertConfig.hitRateThreshold) {\r\n      this.createAlert(\r\n        'performance',\r\n        'medium',\r\n        `Hit rate bajo para ${key}: ${(metrics.hitRate * 100).toFixed(1)}%`,\r\n        { key, hitRate: metrics.hitRate, threshold: this.alertConfig.hitRateThreshold }\r\n      );\r\n    }\r\n\r\n    // Verificar response time\r\n    if (metrics.avgResponseTime > this.alertConfig.responseTimeThreshold) {\r\n      this.createAlert(\r\n        'performance',\r\n        'medium',\r\n        `Tiempo de respuesta alto para ${key}: ${metrics.avgResponseTime}ms`,\r\n        { key, responseTime: metrics.avgResponseTime, threshold: this.alertConfig.responseTimeThreshold }\r\n      );\r\n    }\r\n\r\n    // Verificar error rate\r\n    const errorRate = metrics.errors / metrics.totalRequests;\r\n    if (errorRate > this.alertConfig.errorRateThreshold) {\r\n      this.createAlert(\r\n        'error',\r\n        'high',\r\n        `Tasa de errores alta para ${key}: ${(errorRate * 100).toFixed(1)}%`,\r\n        { key, errorRate, threshold: this.alertConfig.errorRateThreshold }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Persiste métricas en Redis\r\n   */\r\n  private async persistMetrics(key: string, metric: CachePerformanceMetrics): Promise<void> {\r\n    try {\r\n      const redisKey = `cache_metrics:${key}:${Date.now()}`;\r\n      await this.redis.setex(redisKey, 86400 * 7, JSON.stringify(metric)); // 7 días\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error persistiendo métricas', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica alertas\r\n   */\r\n  private async checkAlerts(key: string, metric: CachePerformanceMetrics): Promise<void> {\r\n    this.checkMetricThresholds(key, metric);\r\n  }\r\n\r\n  /**\r\n   * Crea una alerta\r\n   */\r\n  private createAlert(\r\n    type: CacheAlert['type'],\r\n    severity: CacheAlert['severity'],\r\n    message: string,\r\n    details: any\r\n  ): void {\r\n    const alertKey = `${type}_${severity}_${message}`;\r\n    const lastAlert = this.lastAlertTime.get(alertKey);\r\n    const now = Date.now();\r\n\r\n    // Verificar cooldown\r\n    if (lastAlert && (now - lastAlert) < this.alertConfig.alertCooldown) {\r\n      return;\r\n    }\r\n\r\n    const alert: CacheAlert = {\r\n      id: `alert_${now}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type,\r\n      severity,\r\n      message,\r\n      details,\r\n      timestamp: now,\r\n      resolved: false\r\n    };\r\n\r\n    this.alerts.set(alert.id, alert);\r\n    this.lastAlertTime.set(alertKey, now);\r\n\r\n    logger.warn(LogCategory.CACHE, `Alerta de cache: ${message}`, details);\r\n  }\r\n\r\n  /**\r\n   * Obtiene duración del período en ms\r\n   */\r\n  private getPeriodMs(period: 'hour' | 'day' | 'week' | 'month'): number {\r\n    switch (period) {\r\n      case 'hour': return 60 * 60 * 1000;\r\n      case 'day': return 24 * 60 * 60 * 1000;\r\n      case 'week': return 7 * 24 * 60 * 60 * 1000;\r\n      case 'month': return 30 * 24 * 60 * 60 * 1000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcula métricas promedio\r\n   */\r\n  private calculateAverageMetrics(metrics: CachePerformanceMetrics[]): CachePerformanceMetrics {\r\n    if (metrics.length === 0) {\r\n      return {\r\n        hitRate: 0, missRate: 0, avgResponseTime: 0, totalRequests: 0,\r\n        totalHits: 0, totalMisses: 0, bytesServed: 0, bytesStored: 0,\r\n        evictions: 0, errors: 0, timestamp: Date.now()\r\n      };\r\n    }\r\n\r\n    const sum = metrics.reduce((acc, metric) => ({\r\n      hitRate: acc.hitRate + metric.hitRate,\r\n      missRate: acc.missRate + metric.missRate,\r\n      avgResponseTime: acc.avgResponseTime + metric.avgResponseTime,\r\n      totalRequests: acc.totalRequests + metric.totalRequests,\r\n      totalHits: acc.totalHits + metric.totalHits,\r\n      totalMisses: acc.totalMisses + metric.totalMisses,\r\n      bytesServed: acc.bytesServed + metric.bytesServed,\r\n      bytesStored: acc.bytesStored + metric.bytesStored,\r\n      evictions: acc.evictions + metric.evictions,\r\n      errors: acc.errors + metric.errors,\r\n      timestamp: Math.max(acc.timestamp, metric.timestamp)\r\n    }));\r\n\r\n    const count = metrics.length;\r\n    return {\r\n      hitRate: sum.hitRate / count,\r\n      missRate: sum.missRate / count,\r\n      avgResponseTime: sum.avgResponseTime / count,\r\n      totalRequests: sum.totalRequests,\r\n      totalHits: sum.totalHits,\r\n      totalMisses: sum.totalMisses,\r\n      bytesServed: sum.bytesServed,\r\n      bytesStored: sum.bytesStored,\r\n      evictions: sum.evictions,\r\n      errors: sum.errors,\r\n      timestamp: sum.timestamp\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcula tendencia porcentual\r\n   */\r\n  private calculateTrend(oldValue: number, newValue: number): number {\r\n    if (oldValue === 0) {return newValue > 0 ? 100 : 0;}\r\n    return ((newValue - oldValue) / oldValue) * 100;\r\n  }\r\n\r\n  /**\r\n   * Genera predicciones\r\n   */\r\n  private async generatePredictions(metrics: CachePerformanceMetrics[]): Promise<TrendAnalysis['predictions']> {\r\n    // Implementación simplificada de predicciones\r\n    const recent = metrics.slice(-10);\r\n    const avgHitRate = recent.reduce((sum, m) => sum + m.hitRate, 0) / recent.length;\r\n    const avgVolume = recent.reduce((sum, m) => sum + m.totalRequests, 0) / recent.length;\r\n\r\n    return {\r\n      nextHourHitRate: Math.min(1, avgHitRate * 1.02), // Predicción optimista\r\n      nextDayVolume: avgVolume * 24,\r\n      recommendedActions: this.generatePredictionActions(avgHitRate, avgVolume)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Genera acciones recomendadas basadas en predicciones\r\n   */\r\n  private generatePredictionActions(hitRate: number, volume: number): string[] {\r\n    const actions: string[] = [];\r\n\r\n    if (hitRate < 0.8) {\r\n      actions.push('Considerar aumentar TTL de cache');\r\n      actions.push('Revisar estrategias de invalidación');\r\n    }\r\n\r\n    if (volume > 1000) {\r\n      actions.push('Considerar escalado horizontal');\r\n      actions.push('Optimizar queries más frecuentes');\r\n    }\r\n\r\n    return actions;\r\n  }\r\n\r\n  /**\r\n   * Obtiene análisis de tendencias vacío\r\n   */\r\n  private getEmptyTrendAnalysis(period: 'hour' | 'day' | 'week' | 'month'): TrendAnalysis {\r\n    return {\r\n      period,\r\n      hitRateTrend: 0,\r\n      responseTrend: 0,\r\n      volumeTrend: 0,\r\n      errorTrend: 0,\r\n      predictions: {\r\n        nextHourHitRate: 0,\r\n        nextDayVolume: 0,\r\n        recommendedActions: []\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcula resumen de métricas\r\n   */\r\n  private calculateSummary(metrics: CachePerformanceMetrics[]): CacheReport['summary'] {\r\n    if (metrics.length === 0) {\r\n      return {\r\n        totalRequests: 0,\r\n        avgHitRate: 0,\r\n        avgResponseTime: 0,\r\n        totalErrors: 0,\r\n        dataTransferred: 0\r\n      };\r\n    }\r\n\r\n    const latest = metrics[metrics.length - 1];\r\n    const avgMetrics = this.calculateAverageMetrics(metrics);\r\n\r\n    return {\r\n      totalRequests: latest.totalRequests,\r\n      avgHitRate: avgMetrics.hitRate,\r\n      avgResponseTime: avgMetrics.avgResponseTime,\r\n      totalErrors: latest.errors,\r\n      dataTransferred: latest.bytesServed\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Genera recomendaciones\r\n   */\r\n  private generateRecommendations(\r\n    summary: CacheReport['summary'],\r\n    strategies: StrategyMetrics[],\r\n    layers: LayerMetrics[],\r\n    trends: TrendAnalysis\r\n  ): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Recomendaciones basadas en hit rate\r\n    if (summary.avgHitRate < 0.8) {\r\n      recommendations.push('Hit rate bajo: considerar ajustar TTL o estrategias de cache');\r\n    }\r\n\r\n    // Recomendaciones basadas en response time\r\n    if (summary.avgResponseTime > 100) {\r\n      recommendations.push('Tiempo de respuesta alto: optimizar queries o aumentar capacidad');\r\n    }\r\n\r\n    // Recomendaciones basadas en tendencias\r\n    if (trends.hitRateTrend < -10) {\r\n      recommendations.push('Hit rate en declive: revisar patrones de invalidación');\r\n    }\r\n\r\n    if (trends.volumeTrend > 50) {\r\n      recommendations.push('Volumen creciente: considerar escalado de infraestructura');\r\n    }\r\n\r\n    // Recomendaciones basadas en capas\r\n    const unhealthyLayers = layers.filter(l => l.healthStatus !== 'healthy');\r\n    if (unhealthyLayers.length > 0) {\r\n      recommendations.push(`Capas no saludables: ${unhealthyLayers.map(l => l.layer).join(', ')}`);\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Obtiene top keys por actividad\r\n   */\r\n  private getTopKeys(limit: number): Array<{ key: string; hits: number; misses: number }> {\r\n    const keyStats: Array<{ key: string; hits: number; misses: number }> = [];\r\n\r\n    this.metrics.forEach((metrics, key) => {\r\n      if (metrics.length > 0) {\r\n        const latest = metrics[metrics.length - 1];\r\n        keyStats.push({\r\n          key,\r\n          hits: latest.totalHits,\r\n          misses: latest.totalMisses\r\n        });\r\n      }\r\n    });\r\n\r\n    return keyStats\r\n      .sort((a, b) => (b.hits + b.misses) - (a.hits + a.misses))\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    if (this.healthCheckInterval) {\r\n      clearInterval(this.healthCheckInterval);\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const cacheAnalyticsManager = CacheAnalyticsManager.getInstance();\r\n\r\n/**\r\n * Utilidades para analytics de cache\r\n */\r\nexport const CacheAnalyticsUtils = {\r\n  /**\r\n   * Registra hit de cache\r\n   */\r\n  async recordHit(key: string, responseTime: number, bytesServed: number = 0): Promise<void> {\r\n    await cacheAnalyticsManager.recordMetrics(key, 1, responseTime, bytesServed, false);\r\n  },\r\n\r\n  /**\r\n   * Registra miss de cache\r\n   */\r\n  async recordMiss(key: string, responseTime: number): Promise<void> {\r\n    await cacheAnalyticsManager.recordMetrics(key, 0, responseTime, 0, false);\r\n  },\r\n\r\n  /**\r\n   * Registra error de cache\r\n   */\r\n  async recordError(key: string, responseTime: number): Promise<void> {\r\n    await cacheAnalyticsManager.recordMetrics(key, 0, responseTime, 0, true);\r\n  },\r\n\r\n  /**\r\n   * Obtiene resumen rápido\r\n   */\r\n  getQuickSummary(): {\r\n    totalKeys: number;\r\n    avgHitRate: number;\r\n    activeAlerts: number;\r\n    healthyLayers: number;\r\n  } {\r\n    const currentMetrics = cacheAnalyticsManager.getCurrentMetrics();\r\n    const alerts = cacheAnalyticsManager.getActiveAlerts();\r\n    const layers = cacheAnalyticsManager.getLayerMetrics();\r\n\r\n    const totalKeys = Object.keys(currentMetrics).length;\r\n    const avgHitRate = Object.values(currentMetrics).reduce((sum, m) => sum + m.hitRate, 0) / totalKeys || 0;\r\n    const activeAlerts = alerts.length;\r\n    const healthyLayers = layers.filter(l => l.healthStatus === 'healthy').length;\r\n\r\n    return { totalKeys, avgHitRate, activeAlerts, healthyLayers };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}