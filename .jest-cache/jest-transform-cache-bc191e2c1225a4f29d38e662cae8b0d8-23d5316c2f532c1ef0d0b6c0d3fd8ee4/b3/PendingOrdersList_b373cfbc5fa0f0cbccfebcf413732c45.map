{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\PendingOrdersList.tsx"],"sourcesContent":["/**\r\n * Componente para mostrar lista de órdenes pendientes de entrega\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Package, \r\n  MapPin, \r\n  Clock, \r\n  DollarSign, \r\n  Navigation,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Truck,\r\n  Route\r\n} from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\ninterface OrderItem {\r\n  id: number;\r\n  productName: string;\r\n  quantity: number;\r\n  price: number;\r\n  weight: number;\r\n}\r\n\r\ninterface ShippingAddress {\r\n  streetName: string;\r\n  streetNumber: string;\r\n  floor?: string;\r\n  apartment?: string;\r\n  cityName: string;\r\n  stateName: string;\r\n  zipCode: string;\r\n  fullAddress: string;\r\n}\r\n\r\ninterface PendingOrder {\r\n  id: number;\r\n  orderNumber: string;\r\n  total: number;\r\n  status: string;\r\n  paymentStatus: string;\r\n  fulfillmentStatus: string;\r\n  createdAt: string;\r\n  estimatedDelivery?: string;\r\n  shippingAddress: ShippingAddress;\r\n  items: OrderItem[];\r\n  totalItems: number;\r\n  totalWeight: number;\r\n  notes?: string;\r\n}\r\n\r\ninterface PendingOrdersData {\r\n  orders: PendingOrder[];\r\n  stats: {\r\n    totalOrders: number;\r\n    totalValue: number;\r\n    totalItems: number;\r\n    totalWeight: number;\r\n    averageOrderValue: number;\r\n  };\r\n  driver: {\r\n    id: string;\r\n    name: string;\r\n    status: string;\r\n  };\r\n}\r\n\r\ninterface PendingOrdersListProps {\r\n  onStartRoute?: (orders: PendingOrder[]) => void;\r\n  onSelectOrder?: (order: PendingOrder) => void;\r\n}\r\n\r\nexport default function PendingOrdersList({ onStartRoute, onSelectOrder }: PendingOrdersListProps) {\r\n  const [orders, setOrders] = useState<PendingOrder[]>([]);\r\n  const [stats, setStats] = useState<PendingOrdersData['stats'] | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedOrders, setSelectedOrders] = useState<Set<number>>(new Set());\r\n  const [optimizing, setOptimizing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchPendingOrders();\r\n  }, []);\r\n\r\n  const fetchPendingOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/driver/pending-orders');\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Error al cargar órdenes pendientes');\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        setOrders(result.data.orders);\r\n        setStats(result.data.stats);\r\n        \r\n        // Seleccionar todas las órdenes por defecto\r\n        const allOrderIds = new Set(result.data.orders.map((order: PendingOrder) => order.id));\r\n        setSelectedOrders(allOrderIds);\r\n      } else {\r\n        throw new Error(result.error || 'Error desconocido');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching pending orders:', error);\r\n      toast.error('Error al cargar órdenes pendientes');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleOrderSelection = (orderId: number) => {\r\n    const newSelection = new Set(selectedOrders);\r\n    if (newSelection.has(orderId)) {\r\n      newSelection.delete(orderId);\r\n    } else {\r\n      newSelection.add(orderId);\r\n    }\r\n    setSelectedOrders(newSelection);\r\n  };\r\n\r\n  const handleStartOptimizedRoute = async () => {\r\n    const selectedOrdersList = orders.filter(order => selectedOrders.has(order.id));\r\n    \r\n    if (selectedOrdersList.length === 0) {\r\n      toast.error('Selecciona al menos una orden para iniciar la ruta');\r\n      return;\r\n    }\r\n\r\n    setOptimizing(true);\r\n    \r\n    try {\r\n      // Preparar datos para optimización\r\n      const stops = selectedOrdersList.map(order => ({\r\n        orderId: order.id,\r\n        address: order.shippingAddress.fullAddress,\r\n        priority: order.status === 'confirmed' ? 1 : 0\r\n      }));\r\n\r\n      const response = await fetch('/api/driver/optimize-route', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ stops })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al optimizar la ruta');\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        toast.success(`Ruta optimizada: ${result.data.summary.totalStops} paradas, ${Math.round(result.data.summary.totalDistance)}km`);\r\n        \r\n        if (onStartRoute) {\r\n          onStartRoute(selectedOrdersList);\r\n        }\r\n      } else {\r\n        throw new Error(result.error || 'Error en optimización');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error optimizing route:', error);\r\n      toast.error('Error al optimizar la ruta');\r\n    } finally {\r\n      setOptimizing(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      style: 'currency',\r\n      currency: 'ARS'\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('es-AR', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n            <span className=\"ml-2\">Cargando órdenes...</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Estadísticas del día */}\r\n      {stats && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Package className=\"h-5 w-5\" />\r\n              Resumen del Día\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">{stats.totalOrders}</div>\r\n                <div className=\"text-sm text-gray-600\">Órdenes</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(stats.totalValue)}</div>\r\n                <div className=\"text-sm text-gray-600\">Valor Total</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-orange-600\">{stats.totalItems}</div>\r\n                <div className=\"text-sm text-gray-600\">Productos</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">{Math.round(stats.totalWeight)}kg</div>\r\n                <div className=\"text-sm text-gray-600\">Peso Total</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Controles de ruta */}\r\n      <Card>\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Navigation className=\"h-5 w-5\" />\r\n               <span className=\"font-medium\">\r\n                 {selectedOrders.size} de {orders.length} órdenes seleccionadas\r\n               </span>\r\n            </div>\r\n            <Button \r\n              onClick={handleStartOptimizedRoute}\r\n              disabled={selectedOrders.size === 0 || optimizing}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              {optimizing ? (\r\n                <>\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\r\n                  Optimizando...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Navigation className=\"h-4 w-4\" />\r\n                  Iniciar Recorrido\r\n                </>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Lista de órdenes */}\r\n      <div className=\"space-y-3\">\r\n        {orders.length === 0 ? (\r\n          <Card>\r\n            <CardContent className=\"p-6 text-center\">\r\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\r\n              <h3 className=\"text-lg font-semibold mb-2\">¡No hay entregas pendientes!</h3>\r\n              <p className=\"text-gray-600\">Todas las órdenes del día han sido completadas.</p>\r\n            </CardContent>\r\n          </Card>\r\n        ) : (\r\n          orders.map((order) => (\r\n            <Card \r\n              key={order.id} \r\n              className={`cursor-pointer transition-all ${\r\n                selectedOrders.has(order.id) \r\n                  ? 'ring-2 ring-blue-500 bg-blue-50' \r\n                  : 'hover:shadow-md'\r\n              }`}\r\n              onClick={() => toggleOrderSelection(order.id)}\r\n            >\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-start justify-between mb-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className={`w-4 h-4 rounded border-2 flex items-center justify-center ${\r\n                      selectedOrders.has(order.id) \r\n                        ? 'bg-blue-500 border-blue-500' \r\n                        : 'border-gray-300'\r\n                    }`}>\r\n                      {selectedOrders.has(order.id) && (\r\n                        <CheckCircle className=\"h-3 w-3 text-white\" />\r\n                      )}\r\n                    </div>\r\n                    <h3 className=\"font-semibold\">{order.orderNumber}</h3>\r\n                    <Badge variant={order.status === 'paid' ? 'default' : 'secondary'}>\r\n                      {order.status === 'paid' ? 'Pagado' : 'Confirmado'}\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div className=\"font-bold text-green-600\">{formatCurrency(order.total)}</div>\r\n                    <div className=\"text-sm text-gray-500\">{order.totalItems} productos</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-start gap-2\">\r\n                    <MapPin className=\"h-4 w-4 text-gray-500 mt-0.5 flex-shrink-0\" />\r\n                    <span className=\"text-sm\">{order.shippingAddress.fullAddress}</span>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Clock className=\"h-4 w-4 text-gray-500\" />\r\n                    <span className=\"text-sm\">Creado: {formatDate(order.createdAt)}</span>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-4 text-sm text-gray-600\">\r\n                    <span>{order.totalWeight}kg</span>\r\n                    <span>•</span>\r\n                    <span>{order.items.length} tipos de productos</span>\r\n                  </div>\r\n                </div>\r\n\r\n                {order.notes && (\r\n                  <div className=\"mt-3 p-2 bg-yellow-50 rounded border-l-4 border-yellow-400\">\r\n                    <div className=\"flex items-start gap-2\">\r\n                      <AlertCircle className=\"h-4 w-4 text-yellow-600 mt-0.5\" />\r\n                      <span className=\"text-sm text-yellow-800\">{order.notes}</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["PendingOrdersList","onStartRoute","onSelectOrder","orders","setOrders","useState","stats","setStats","loading","setLoading","selectedOrders","setSelectedOrders","Set","optimizing","setOptimizing","useEffect","fetchPendingOrders","response","fetch","ok","Error","result","json","success","data","allOrderIds","map","order","id","error","console","toast","toggleOrderSelection","orderId","newSelection","has","delete","add","handleStartOptimizedRoute","selectedOrdersList","filter","length","stops","address","shippingAddress","fullAddress","priority","status","method","headers","body","JSON","stringify","summary","totalStops","Math","round","totalDistance","formatCurrency","amount","Intl","NumberFormat","style","currency","format","formatDate","dateString","Date","toLocaleDateString","day","month","year","hour","minute","Card","CardContent","className","div","span","CardHeader","CardTitle","Package","totalOrders","totalValue","totalItems","totalWeight","Navigation","size","Button","onClick","disabled","CheckCircle","h3","p","orderNumber","Badge","variant","total","MapPin","Clock","createdAt","items","notes","AlertCircle"],"mappings":"AAAA;;CAEC,GAED;;;;;+BA2EA;;;eAAwBA;;;;+DAzEmB;sBACc;wBAClC;uBACD;6BAWf;wBACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DP,SAASA,kBAAkB,EAAEC,YAAY,EAAEC,aAAa,EAA0B;IAC/F,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAAiB,EAAE;IACvD,MAAM,CAACC,OAAOC,SAAS,GAAGF,IAAAA,eAAQ,EAAoC;IACtE,MAAM,CAACG,SAASC,WAAW,GAAGJ,IAAAA,eAAQ,EAAC;IACvC,MAAM,CAACK,gBAAgBC,kBAAkB,GAAGN,IAAAA,eAAQ,EAAc,IAAIO;IACtE,MAAM,CAACC,YAAYC,cAAc,GAAGT,IAAAA,eAAQ,EAAC;IAE7CU,IAAAA,gBAAS,EAAC;QACRC;IACF,GAAG,EAAE;IAEL,MAAMA,qBAAqB;QACzB,IAAI;YACFP,WAAW;YACX,MAAMQ,WAAW,MAAMC,MAAM;YAE7B,IAAI,CAACD,SAASE,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAM;YAClB;YAEA,MAAMC,SAAS,MAAMJ,SAASK,IAAI;YAElC,IAAID,OAAOE,OAAO,EAAE;gBAClBnB,UAAUiB,OAAOG,IAAI,CAACrB,MAAM;gBAC5BI,SAASc,OAAOG,IAAI,CAAClB,KAAK;gBAE1B,4CAA4C;gBAC5C,MAAMmB,cAAc,IAAIb,IAAIS,OAAOG,IAAI,CAACrB,MAAM,CAACuB,GAAG,CAAC,CAACC,QAAwBA,MAAMC,EAAE;gBACpFjB,kBAAkBc;YACpB,OAAO;gBACL,MAAM,IAAIL,MAAMC,OAAOQ,KAAK,IAAI;YAClC;QACF,EAAE,OAAOA,OAAO;YACdC,QAAQD,KAAK,CAAC,kCAAkCA;YAChDE,aAAK,CAACF,KAAK,CAAC;QACd,SAAU;YACRpB,WAAW;QACb;IACF;IAEA,MAAMuB,uBAAuB,CAACC;QAC5B,MAAMC,eAAe,IAAItB,IAAIF;QAC7B,IAAIwB,aAAaC,GAAG,CAACF,UAAU;YAC7BC,aAAaE,MAAM,CAACH;QACtB,OAAO;YACLC,aAAaG,GAAG,CAACJ;QACnB;QACAtB,kBAAkBuB;IACpB;IAEA,MAAMI,4BAA4B;QAChC,MAAMC,qBAAqBpC,OAAOqC,MAAM,CAACb,CAAAA,QAASjB,eAAeyB,GAAG,CAACR,MAAMC,EAAE;QAE7E,IAAIW,mBAAmBE,MAAM,KAAK,GAAG;YACnCV,aAAK,CAACF,KAAK,CAAC;YACZ;QACF;QAEAf,cAAc;QAEd,IAAI;YACF,mCAAmC;YACnC,MAAM4B,QAAQH,mBAAmBb,GAAG,CAACC,CAAAA,QAAU,CAAA;oBAC7CM,SAASN,MAAMC,EAAE;oBACjBe,SAAShB,MAAMiB,eAAe,CAACC,WAAW;oBAC1CC,UAAUnB,MAAMoB,MAAM,KAAK,cAAc,IAAI;gBAC/C,CAAA;YAEA,MAAM9B,WAAW,MAAMC,MAAM,8BAA8B;gBACzD8B,QAAQ;gBACRC,SAAS;oBACP,gBAAgB;gBAClB;gBACAC,MAAMC,KAAKC,SAAS,CAAC;oBAAEV;gBAAM;YAC/B;YAEA,IAAI,CAACzB,SAASE,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAM;YAClB;YAEA,MAAMC,SAAS,MAAMJ,SAASK,IAAI;YAElC,IAAID,OAAOE,OAAO,EAAE;gBAClBQ,aAAK,CAACR,OAAO,CAAC,CAAC,iBAAiB,EAAEF,OAAOG,IAAI,CAAC6B,OAAO,CAACC,UAAU,CAAC,UAAU,EAAEC,KAAKC,KAAK,CAACnC,OAAOG,IAAI,CAAC6B,OAAO,CAACI,aAAa,EAAE,EAAE,CAAC;gBAE9H,IAAIxD,cAAc;oBAChBA,aAAasC;gBACf;YACF,OAAO;gBACL,MAAM,IAAInB,MAAMC,OAAOQ,KAAK,IAAI;YAClC;QACF,EAAE,OAAOA,OAAO;YACdC,QAAQD,KAAK,CAAC,2BAA2BA;YACzCE,aAAK,CAACF,KAAK,CAAC;QACd,SAAU;YACRf,cAAc;QAChB;IACF;IAEA,MAAM4C,iBAAiB,CAACC;QACtB,OAAO,IAAIC,KAAKC,YAAY,CAAC,SAAS;YACpCC,OAAO;YACPC,UAAU;QACZ,GAAGC,MAAM,CAACL;IACZ;IAEA,MAAMM,aAAa,CAACC;QAClB,OAAO,IAAIC,KAAKD,YAAYE,kBAAkB,CAAC,SAAS;YACtDC,KAAK;YACLC,OAAO;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;QACV;IACF;IAEA,IAAIjE,SAAS;QACX,qBACE,qBAACkE,UAAI;sBACH,cAAA,qBAACC,iBAAW;gBAACC,WAAU;0BACrB,cAAA,sBAACC;oBAAID,WAAU;;sCACb,qBAACC;4BAAID,WAAU;;sCACf,qBAACE;4BAAKF,WAAU;sCAAO;;;;;;IAKjC;IAEA,qBACE,sBAACC;QAAID,WAAU;;YAEZtE,uBACC,sBAACoE,UAAI;;kCACH,qBAACK,gBAAU;kCACT,cAAA,sBAACC,eAAS;4BAACJ,WAAU;;8CACnB,qBAACK,oBAAO;oCAACL,WAAU;;gCAAY;;;;kCAInC,qBAACD,iBAAW;kCACV,cAAA,sBAACE;4BAAID,WAAU;;8CACb,sBAACC;oCAAID,WAAU;;sDACb,qBAACC;4CAAID,WAAU;sDAAoCtE,MAAM4E,WAAW;;sDACpE,qBAACL;4CAAID,WAAU;sDAAwB;;;;8CAEzC,sBAACC;oCAAID,WAAU;;sDACb,qBAACC;4CAAID,WAAU;sDAAqClB,eAAepD,MAAM6E,UAAU;;sDACnF,qBAACN;4CAAID,WAAU;sDAAwB;;;;8CAEzC,sBAACC;oCAAID,WAAU;;sDACb,qBAACC;4CAAID,WAAU;sDAAsCtE,MAAM8E,UAAU;;sDACrE,qBAACP;4CAAID,WAAU;sDAAwB;;;;8CAEzC,sBAACC;oCAAID,WAAU;;sDACb,sBAACC;4CAAID,WAAU;;gDAAsCrB,KAAKC,KAAK,CAAClD,MAAM+E,WAAW;gDAAE;;;sDACnF,qBAACR;4CAAID,WAAU;sDAAwB;;;;;;;;;0BAQjD,qBAACF,UAAI;0BACH,cAAA,qBAACC,iBAAW;oBAACC,WAAU;8BACrB,cAAA,sBAACC;wBAAID,WAAU;;0CACb,sBAACC;gCAAID,WAAU;;kDACb,qBAACU,uBAAU;wCAACV,WAAU;;kDACrB,sBAACE;wCAAKF,WAAU;;4CACblE,eAAe6E,IAAI;4CAAC;4CAAKpF,OAAOsC,MAAM;4CAAC;;;;;0CAG7C,qBAAC+C,cAAM;gCACLC,SAASnD;gCACToD,UAAUhF,eAAe6E,IAAI,KAAK,KAAK1E;gCACvC+D,WAAU;0CAET/D,2BACC;;sDACE,qBAACgE;4CAAID,WAAU;;wCAAkE;;mDAInF;;sDACE,qBAACU,uBAAU;4CAACV,WAAU;;wCAAY;;;;;;;;0BAU9C,qBAACC;gBAAID,WAAU;0BACZzE,OAAOsC,MAAM,KAAK,kBACjB,qBAACiC,UAAI;8BACH,cAAA,sBAACC,iBAAW;wBAACC,WAAU;;0CACrB,qBAACe,wBAAW;gCAACf,WAAU;;0CACvB,qBAACgB;gCAAGhB,WAAU;0CAA6B;;0CAC3C,qBAACiB;gCAAEjB,WAAU;0CAAgB;;;;qBAIjCzE,OAAOuB,GAAG,CAAC,CAACC,sBACV,qBAAC+C,UAAI;wBAEHE,WAAW,CAAC,8BAA8B,EACxClE,eAAeyB,GAAG,CAACR,MAAMC,EAAE,IACvB,oCACA,mBACJ;wBACF6D,SAAS,IAAMzD,qBAAqBL,MAAMC,EAAE;kCAE5C,cAAA,sBAAC+C,iBAAW;4BAACC,WAAU;;8CACrB,sBAACC;oCAAID,WAAU;;sDACb,sBAACC;4CAAID,WAAU;;8DACb,qBAACC;oDAAID,WAAW,CAAC,0DAA0D,EACzElE,eAAeyB,GAAG,CAACR,MAAMC,EAAE,IACvB,gCACA,mBACJ;8DACClB,eAAeyB,GAAG,CAACR,MAAMC,EAAE,mBAC1B,qBAAC+D,wBAAW;wDAACf,WAAU;;;8DAG3B,qBAACgB;oDAAGhB,WAAU;8DAAiBjD,MAAMmE,WAAW;;8DAChD,qBAACC,YAAK;oDAACC,SAASrE,MAAMoB,MAAM,KAAK,SAAS,YAAY;8DACnDpB,MAAMoB,MAAM,KAAK,SAAS,WAAW;;;;sDAG1C,sBAAC8B;4CAAID,WAAU;;8DACb,qBAACC;oDAAID,WAAU;8DAA4BlB,eAAe/B,MAAMsE,KAAK;;8DACrE,sBAACpB;oDAAID,WAAU;;wDAAyBjD,MAAMyD,UAAU;wDAAC;;;;;;;8CAI7D,sBAACP;oCAAID,WAAU;;sDACb,sBAACC;4CAAID,WAAU;;8DACb,qBAACsB,mBAAM;oDAACtB,WAAU;;8DAClB,qBAACE;oDAAKF,WAAU;8DAAWjD,MAAMiB,eAAe,CAACC,WAAW;;;;sDAG9D,sBAACgC;4CAAID,WAAU;;8DACb,qBAACuB,kBAAK;oDAACvB,WAAU;;8DACjB,sBAACE;oDAAKF,WAAU;;wDAAU;wDAASX,WAAWtC,MAAMyE,SAAS;;;;;sDAG/D,sBAACvB;4CAAID,WAAU;;8DACb,sBAACE;;wDAAMnD,MAAM0D,WAAW;wDAAC;;;8DACzB,qBAACP;8DAAK;;8DACN,sBAACA;;wDAAMnD,MAAM0E,KAAK,CAAC5D,MAAM;wDAAC;;;;;;;gCAI7Bd,MAAM2E,KAAK,kBACV,qBAACzB;oCAAID,WAAU;8CACb,cAAA,sBAACC;wCAAID,WAAU;;0DACb,qBAAC2B,wBAAW;gDAAC3B,WAAU;;0DACvB,qBAACE;gDAAKF,WAAU;0DAA2BjD,MAAM2E,KAAK;;;;;;;uBArDzD3E,MAAMC,EAAE;;;;AAgE3B"}