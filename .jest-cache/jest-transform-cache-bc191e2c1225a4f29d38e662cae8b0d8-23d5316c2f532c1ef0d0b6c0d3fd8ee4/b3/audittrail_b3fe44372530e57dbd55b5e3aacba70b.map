{"version":3,"names":["AuditCategory","cov_2bj1wqhdfe","f","s","AuditResult","AuditSeverity","AuditTrailManager","RETENTION_POLICIES","auditTrail","logAdminAction","logAuthentication","logDataAccess","logPaymentEvent","logSecurityViolation","category","retentionDays","archiveAfterDays","requiresEncryption","constructor","secretKey","b","process","env","AUDIT_TRAIL_SECRET_KEY","_logger","logger","warn","LogLevel","WARN","LogCategory","SYSTEM","getInstance","instance","logEvent","eventData","auditEvent","id","generateEventId","timestamp","Date","toISOString","hash","generateEventHash","storeAuditEvent","requiresAlert","sendSecurityAlert","audit","INFO","action","eventId","severity","result","userId","error","ERROR","Error","message","metadata","request","sessionId","resource","ipAddress","ip","userAgent","complianceFlags","paymentData","paymentId","complianceRequired","details","alertRequired","now","_crypto","default","randomBytes","toString","event","eventString","JSON","stringify","createHmac","update","digest","supabase","_supabase","getSupabaseClient","from","insert","user_id","session_id","ip_address","user_agent","request_id","requestId","compliance_flags","includes","security","verifyEventIntegrity","expectedHash","getAuditEvents","filters","query","select","order","ascending","eq","startDate","gte","endDate","lte","limit","data","bind"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\audit-trail.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - AUDIT TRAIL SYSTEM ENTERPRISE\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport crypto from 'crypto';\r\n\r\n// Niveles de criticidad según ISO/IEC 27001:2013\r\nexport enum AuditSeverity {\r\n  LOW = 'low',           // Eventos informativos\r\n  MEDIUM = 'medium',     // Eventos de advertencia\r\n  HIGH = 'high',         // Eventos críticos\r\n  CRITICAL = 'critical'  // Eventos de seguridad críticos\r\n}\r\n\r\n// Categorías de eventos de auditoría\r\nexport enum AuditCategory {\r\n  AUTHENTICATION = 'authentication',\r\n  AUTHORIZATION = 'authorization',\r\n  DATA_ACCESS = 'data_access',\r\n  DATA_MODIFICATION = 'data_modification',\r\n  PAYMENT_PROCESSING = 'payment_processing',\r\n  SYSTEM_ADMINISTRATION = 'system_administration',\r\n  SECURITY_VIOLATION = 'security_violation',\r\n  CONFIGURATION_CHANGE = 'configuration_change',\r\n  ERROR_EVENT = 'error_event',\r\n  COMPLIANCE_EVENT = 'compliance_event'\r\n}\r\n\r\n// Resultado de operaciones\r\nexport enum AuditResult {\r\n  SUCCESS = 'success',\r\n  FAILURE = 'failure',\r\n  BLOCKED = 'blocked',\r\n  UNAUTHORIZED = 'unauthorized',\r\n  ERROR = 'error'\r\n}\r\n\r\n// Evento de auditoría completo\r\nexport interface AuditEvent {\r\n  id: string;\r\n  timestamp: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  action: string;\r\n  resource: string;\r\n  category: AuditCategory;\r\n  severity: AuditSeverity;\r\n  result: AuditResult;\r\n  ipAddress: string;\r\n  userAgent: string;\r\n  requestId?: string;\r\n  metadata?: Record<string, any>;\r\n  hash: string;\r\n  complianceFlags?: string[];\r\n}\r\n\r\n// Configuración de retención según compliance\r\nexport interface RetentionPolicy {\r\n  category: AuditCategory;\r\n  retentionDays: number;\r\n  archiveAfterDays: number;\r\n  requiresEncryption: boolean;\r\n}\r\n\r\n// Políticas de retención ISO/IEC 27001:2013\r\nexport const RETENTION_POLICIES: RetentionPolicy[] = [\r\n  {\r\n    category: AuditCategory.AUTHENTICATION,\r\n    retentionDays: 365,\r\n    archiveAfterDays: 90,\r\n    requiresEncryption: true\r\n  },\r\n  {\r\n    category: AuditCategory.AUTHORIZATION,\r\n    retentionDays: 365,\r\n    archiveAfterDays: 90,\r\n    requiresEncryption: true\r\n  },\r\n  {\r\n    category: AuditCategory.PAYMENT_PROCESSING,\r\n    retentionDays: 2555, // 7 años para compliance financiero\r\n    archiveAfterDays: 365,\r\n    requiresEncryption: true\r\n  },\r\n  {\r\n    category: AuditCategory.SECURITY_VIOLATION,\r\n    retentionDays: 2555, // 7 años\r\n    archiveAfterDays: 180,\r\n    requiresEncryption: true\r\n  },\r\n  {\r\n    category: AuditCategory.DATA_ACCESS,\r\n    retentionDays: 1095, // 3 años\r\n    archiveAfterDays: 180,\r\n    requiresEncryption: true\r\n  },\r\n  {\r\n    category: AuditCategory.SYSTEM_ADMINISTRATION,\r\n    retentionDays: 1095, // 3 años\r\n    archiveAfterDays: 365,\r\n    requiresEncryption: true\r\n  }\r\n];\r\n\r\n/**\r\n * Sistema de Auditoría Enterprise con compliance ISO/IEC 27001:2013\r\n */\r\nexport class AuditTrailManager {\r\n  private static instance: AuditTrailManager;\r\n  private secretKey: string;\r\n\r\n  constructor() {\r\n    this.secretKey = process.env.AUDIT_TRAIL_SECRET_KEY || 'default-audit-key';\r\n    if (this.secretKey === 'default-audit-key') {\r\n      logger.warn(LogLevel.WARN, 'Using default audit trail secret key - not secure for production', {}, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  static getInstance(): AuditTrailManager {\r\n    if (!AuditTrailManager.instance) {\r\n      AuditTrailManager.instance = new AuditTrailManager();\r\n    }\r\n    return AuditTrailManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra un evento de auditoría\r\n   */\r\n  async logEvent(eventData: Omit<AuditEvent, 'id' | 'timestamp' | 'hash'>): Promise<void> {\r\n    try {\r\n      const auditEvent: AuditEvent = {\r\n        ...eventData,\r\n        id: this.generateEventId(),\r\n        timestamp: new Date().toISOString(),\r\n        hash: ''\r\n      };\r\n\r\n      // Generar hash de integridad\r\n      auditEvent.hash = this.generateEventHash(auditEvent);\r\n\r\n      // Almacenar en base de datos\r\n      await this.storeAuditEvent(auditEvent);\r\n\r\n      // Verificar si requiere alertas\r\n      if (this.requiresAlert(auditEvent)) {\r\n        await this.sendSecurityAlert(auditEvent);\r\n      }\r\n\r\n      // Log estructurado\r\n      logger.audit(LogLevel.INFO, `Audit event logged: ${auditEvent.action}`, {\r\n        eventId: auditEvent.id,\r\n        category: auditEvent.category,\r\n        severity: auditEvent.severity,\r\n        result: auditEvent.result,\r\n        userId: auditEvent.userId\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to log audit event', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        action: eventData.action,\r\n        category: eventData.category\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra evento de autenticación\r\n   */\r\n  async logAuthentication(\r\n    action: string,\r\n    result: AuditResult,\r\n    userId?: string,\r\n    metadata?: Record<string, any>,\r\n    request?: { ip: string; userAgent: string; sessionId?: string }\r\n  ): Promise<void> {\r\n    await this.logEvent({\r\n      userId,\r\n      sessionId: request?.sessionId,\r\n      action,\r\n      resource: 'authentication',\r\n      category: AuditCategory.AUTHENTICATION,\r\n      severity: result === AuditResult.FAILURE ? AuditSeverity.HIGH : AuditSeverity.MEDIUM,\r\n      result,\r\n      ipAddress: request?.ip || 'unknown',\r\n      userAgent: request?.userAgent || 'unknown',\r\n      metadata,\r\n      complianceFlags: ['ISO27001', 'AUTHENTICATION_LOG']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra evento de procesamiento de pagos\r\n   */\r\n  async logPaymentEvent(\r\n    action: string,\r\n    result: AuditResult,\r\n    paymentData: {\r\n      orderId?: string;\r\n      paymentId?: string;\r\n      amount?: number;\r\n      currency?: string;\r\n      method?: string;\r\n    },\r\n    userId?: string,\r\n    request?: { ip: string; userAgent: string }\r\n  ): Promise<void> {\r\n    await this.logEvent({\r\n      userId,\r\n      action,\r\n      resource: `payment:${paymentData.paymentId || 'unknown'}`,\r\n      category: AuditCategory.PAYMENT_PROCESSING,\r\n      severity: result === AuditResult.FAILURE ? AuditSeverity.HIGH : AuditSeverity.LOW,\r\n      result,\r\n      ipAddress: request?.ip || 'unknown',\r\n      userAgent: request?.userAgent || 'unknown',\r\n      metadata: {\r\n        ...paymentData,\r\n        complianceRequired: true\r\n      },\r\n      complianceFlags: ['ISO27001', 'PAYMENT_LOG', 'FINANCIAL_COMPLIANCE']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra violación de seguridad\r\n   */\r\n  async logSecurityViolation(\r\n    action: string,\r\n    details: string,\r\n    request: { ip: string; userAgent: string },\r\n    metadata?: Record<string, any>\r\n  ): Promise<void> {\r\n    await this.logEvent({\r\n      action,\r\n      resource: 'security_system',\r\n      category: AuditCategory.SECURITY_VIOLATION,\r\n      severity: AuditSeverity.CRITICAL,\r\n      result: AuditResult.BLOCKED,\r\n      ipAddress: request.ip,\r\n      userAgent: request.userAgent,\r\n      metadata: {\r\n        details,\r\n        ...metadata,\r\n        alertRequired: true\r\n      },\r\n      complianceFlags: ['ISO27001', 'SECURITY_INCIDENT', 'IMMEDIATE_ALERT']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra acceso a datos sensibles\r\n   */\r\n  async logDataAccess(\r\n    action: string,\r\n    resource: string,\r\n    result: AuditResult,\r\n    userId?: string,\r\n    request?: { ip: string; userAgent: string },\r\n    metadata?: Record<string, any>\r\n  ): Promise<void> {\r\n    await this.logEvent({\r\n      userId,\r\n      action,\r\n      resource,\r\n      category: AuditCategory.DATA_ACCESS,\r\n      severity: result === AuditResult.UNAUTHORIZED ? AuditSeverity.HIGH : AuditSeverity.MEDIUM,\r\n      result,\r\n      ipAddress: request?.ip || 'unknown',\r\n      userAgent: request?.userAgent || 'unknown',\r\n      metadata,\r\n      complianceFlags: ['ISO27001', 'DATA_ACCESS_LOG']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra cambios administrativos\r\n   */\r\n  async logAdminAction(\r\n    action: string,\r\n    resource: string,\r\n    result: AuditResult,\r\n    userId: string,\r\n    request: { ip: string; userAgent: string },\r\n    metadata?: Record<string, any>\r\n  ): Promise<void> {\r\n    await this.logEvent({\r\n      userId,\r\n      action,\r\n      resource,\r\n      category: AuditCategory.SYSTEM_ADMINISTRATION,\r\n      severity: AuditSeverity.HIGH,\r\n      result,\r\n      ipAddress: request.ip,\r\n      userAgent: request.userAgent,\r\n      metadata,\r\n      complianceFlags: ['ISO27001', 'ADMIN_ACTION', 'PRIVILEGED_ACCESS']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Genera ID único para el evento\r\n   */\r\n  private generateEventId(): string {\r\n    return `audit_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\r\n  }\r\n\r\n  /**\r\n   * Genera hash de integridad para el evento\r\n   */\r\n  private generateEventHash(event: Omit<AuditEvent, 'hash'>): string {\r\n    const eventString = JSON.stringify({\r\n      id: event.id,\r\n      timestamp: event.timestamp,\r\n      userId: event.userId,\r\n      action: event.action,\r\n      resource: event.resource,\r\n      category: event.category,\r\n      result: event.result\r\n    });\r\n\r\n    return crypto\r\n      .createHmac('sha256', this.secretKey)\r\n      .update(eventString)\r\n      .digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Almacena el evento en la base de datos\r\n   */\r\n  private async storeAuditEvent(event: AuditEvent): Promise<void> {\r\n    const supabase = getSupabaseClient(true); // Usar cliente administrativo\r\n\r\n    if (!supabase) {\r\n      throw new Error('Supabase client not available for audit logging');\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('audit_events')\r\n      .insert({\r\n        id: event.id,\r\n        timestamp: event.timestamp,\r\n        user_id: event.userId,\r\n        session_id: event.sessionId,\r\n        action: event.action,\r\n        resource: event.resource,\r\n        category: event.category,\r\n        severity: event.severity,\r\n        result: event.result,\r\n        ip_address: event.ipAddress,\r\n        user_agent: event.userAgent,\r\n        request_id: event.requestId,\r\n        metadata: event.metadata,\r\n        hash: event.hash,\r\n        compliance_flags: event.complianceFlags\r\n      });\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to store audit event: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determina si el evento requiere alerta inmediata\r\n   */\r\n  private requiresAlert(event: AuditEvent): boolean {\r\n    return (\r\n      event.severity === AuditSeverity.CRITICAL ||\r\n      event.category === AuditCategory.SECURITY_VIOLATION ||\r\n      event.result === AuditResult.BLOCKED ||\r\n      event.complianceFlags?.includes('IMMEDIATE_ALERT') ||\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Envía alerta de seguridad\r\n   */\r\n  private async sendSecurityAlert(event: AuditEvent): Promise<void> {\r\n    try {\r\n      // Log inmediato para alertas críticas\r\n      logger.security(LogLevel.ERROR, `SECURITY ALERT: ${event.action}`, {\r\n        eventId: event.id,\r\n        category: event.category,\r\n        severity: event.severity,\r\n        result: event.result,\r\n        ipAddress: event.ipAddress,\r\n        userId: event.userId,\r\n        resource: event.resource\r\n      });\r\n\r\n      // TODO: Implementar notificaciones adicionales (email, Slack, etc.)\r\n      // await this.sendEmailAlert(event);\r\n      // await this.sendSlackAlert(event);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to send security alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        eventId: event.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica la integridad de un evento\r\n   */\r\n  async verifyEventIntegrity(event: AuditEvent): Promise<boolean> {\r\n    const expectedHash = this.generateEventHash({\r\n      ...event,\r\n      hash: ''\r\n    });\r\n\r\n    return event.hash === expectedHash;\r\n  }\r\n\r\n  /**\r\n   * Obtiene eventos de auditoría con filtros\r\n   */\r\n  async getAuditEvents(filters: {\r\n    userId?: string;\r\n    category?: AuditCategory;\r\n    severity?: AuditSeverity;\r\n    startDate?: string;\r\n    endDate?: string;\r\n    limit?: number;\r\n  }): Promise<AuditEvent[]> {\r\n    const supabase = getSupabaseClient(true);\r\n\r\n    if (!supabase) {\r\n      throw new Error('Supabase client not available');\r\n    }\r\n\r\n    let query = supabase\r\n      .from('audit_events')\r\n      .select('*')\r\n      .order('timestamp', { ascending: false });\r\n\r\n    if (filters.userId) {\r\n      query = query.eq('user_id', filters.userId);\r\n    }\r\n\r\n    if (filters.category) {\r\n      query = query.eq('category', filters.category);\r\n    }\r\n\r\n    if (filters.severity) {\r\n      query = query.eq('severity', filters.severity);\r\n    }\r\n\r\n    if (filters.startDate) {\r\n      query = query.gte('timestamp', filters.startDate);\r\n    }\r\n\r\n    if (filters.endDate) {\r\n      query = query.lte('timestamp', filters.endDate);\r\n    }\r\n\r\n    if (filters.limit) {\r\n      query = query.limit(filters.limit);\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to retrieve audit events: ${error.message}`);\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const auditTrail = AuditTrailManager.getInstance();\r\n\r\n// Funciones de conveniencia\r\nexport const logAuthentication = auditTrail.logAuthentication.bind(auditTrail);\r\nexport const logPaymentEvent = auditTrail.logPaymentEvent.bind(auditTrail);\r\nexport const logSecurityViolation = auditTrail.logSecurityViolation.bind(auditTrail);\r\nexport const logDataAccess = auditTrail.logDataAccess.bind(auditTrail);\r\nexport const logAdminAction = auditTrail.logAdminAction.bind(auditTrail);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}