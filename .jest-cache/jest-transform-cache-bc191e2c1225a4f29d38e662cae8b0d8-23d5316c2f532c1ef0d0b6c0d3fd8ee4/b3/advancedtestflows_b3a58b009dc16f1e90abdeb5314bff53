ec39459617d2b98ff81c74ed6fd8c626
// ===================================
// ADVANCED TEST FLOWS
// Sistema avanzado de flujos de testing automatizados
// ===================================
"use strict";

/* istanbul ignore next */
function cov_pigghfd2l() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\advanced-test-flows.ts";
  var hash = "8b7d7586a729677dd191148030c338526faa4647";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\advanced-test-flows.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "2": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "6": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 23,
          column: 47
        }
      },
      "7": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "8": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 25,
          column: 65
        }
      },
      "9": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 26,
          column: 69
        }
      },
      "10": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 58
        }
      },
      "11": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "12": {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 33,
          column: 59
        }
      },
      "13": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 31
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 39
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "18": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "20": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 218,
          column: 11
        }
      },
      "21": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 290,
          column: 11
        }
      },
      "22": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 38
        }
      },
      "23": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "24": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 54
        }
      },
      "25": {
        start: {
          line: 304,
          column: 21
        },
        end: {
          line: 304,
          column: 43
        }
      },
      "26": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "27": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 62
        }
      },
      "28": {
        start: {
          line: 308,
          column: 26
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "29": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 53
        }
      },
      "30": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "31": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 56
        }
      },
      "32": {
        start: {
          line: 322,
          column: 32
        },
        end: {
          line: 322,
          column: 64
        }
      },
      "33": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 330,
          column: 13
        }
      },
      "34": {
        start: {
          line: 324,
          column: 38
        },
        end: {
          line: 324,
          column: 95
        }
      },
      "35": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 52
        }
      },
      "36": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 329,
          column: 17
        }
      },
      "37": {
        start: {
          line: 327,
          column: 20
        },
        end: {
          line: 327,
          column: 48
        }
      },
      "38": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 328,
          column: 26
        }
      },
      "39": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 333,
          column: 13
        }
      },
      "40": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 45
        }
      },
      "41": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 40
        }
      },
      "42": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 64
        }
      },
      "43": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 43
        }
      },
      "44": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 59
        }
      },
      "45": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 25
        }
      },
      "46": {
        start: {
          line: 346,
          column: 30
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "47": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 389,
          column: 9
        }
      },
      "48": {
        start: {
          line: 354,
          column: 26
        },
        end: {
          line: 354,
          column: 27
        }
      },
      "49": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 388,
          column: 13
        }
      },
      "50": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 51
        }
      },
      "51": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 360,
          column: 17
        }
      },
      "52": {
        start: {
          line: 358,
          column: 34
        },
        end: {
          line: 358,
          column: 82
        }
      },
      "53": {
        start: {
          line: 359,
          column: 20
        },
        end: {
          line: 359,
          column: 77
        }
      },
      "54": {
        start: {
          line: 359,
          column: 49
        },
        end: {
          line: 359,
          column: 75
        }
      },
      "55": {
        start: {
          line: 361,
          column: 43
        },
        end: {
          line: 368,
          column: 18
        }
      },
      "56": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 49
        }
      },
      "57": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 370,
          column: 46
        }
      },
      "58": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 371,
          column: 46
        }
      },
      "59": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 43
        }
      },
      "60": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 373,
          column: 51
        }
      },
      "61": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 377,
          column: 17
        }
      },
      "62": {
        start: {
          line: 376,
          column: 20
        },
        end: {
          line: 376,
          column: 90
        }
      },
      "63": {
        start: {
          line: 378,
          column: 16
        },
        end: {
          line: 378,
          column: 22
        }
      },
      "64": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 34
        }
      },
      "65": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 381,
          column: 69
        }
      },
      "66": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 382,
          column: 58
        }
      },
      "67": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 57
        }
      },
      "68": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 387,
          column: 17
        }
      },
      "69": {
        start: {
          line: 385,
          column: 20
        },
        end: {
          line: 385,
          column: 52
        }
      },
      "70": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 386,
          column: 55
        }
      },
      "71": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 29
        }
      },
      "72": {
        start: {
          line: 395,
          column: 24
        },
        end: {
          line: 395,
          column: 33
        }
      },
      "73": {
        start: {
          line: 396,
          column: 23
        },
        end: {
          line: 396,
          column: 25
        }
      },
      "74": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 400,
          column: 15
        }
      },
      "75": {
        start: {
          line: 397,
          column: 50
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "76": {
        start: {
          line: 401,
          column: 22
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "77": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 404,
          column: 13
        }
      },
      "78": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 23
        }
      },
      "79": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 32
        }
      },
      "80": {
        start: {
          line: 406,
          column: 25
        },
        end: {
          line: 406,
          column: 44
        }
      },
      "81": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 409,
          column: 13
        }
      },
      "82": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 408,
          column: 23
        }
      },
      "83": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 61
        }
      },
      "84": {
        start: {
          line: 411,
          column: 47
        },
        end: {
          line: 411,
          column: 59
        }
      },
      "85": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 30
        }
      },
      "86": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 46
        }
      },
      "87": {
        start: {
          line: 414,
          column: 30
        },
        end: {
          line: 414,
          column: 44
        }
      },
      "88": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 22
        }
      },
      "89": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "90": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 51
        }
      },
      "91": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 22
        }
      },
      "92": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 426,
          column: 68
        }
      },
      "93": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 22
        }
      },
      "94": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 41
        }
      },
      "95": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 22
        }
      },
      "96": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 433,
          column: 48
        }
      },
      "97": {
        start: {
          line: 438,
          column: 26
        },
        end: {
          line: 438,
          column: 28
        }
      },
      "98": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "99": {
        start: {
          line: 440,
          column: 29
        },
        end: {
          line: 440,
          column: 78
        }
      },
      "100": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 443,
          column: 13
        }
      },
      "101": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 442,
          column: 41
        }
      },
      "102": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 25
        }
      },
      "103": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 71
        }
      },
      "104": {
        start: {
          line: 456,
          column: 35
        },
        end: {
          line: 456,
          column: 128
        }
      },
      "105": {
        start: {
          line: 456,
          column: 66
        },
        end: {
          line: 456,
          column: 127
        }
      },
      "106": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 459,
          column: 9
        }
      },
      "107": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 80
        }
      },
      "108": {
        start: {
          line: 464,
          column: 38
        },
        end: {
          line: 464,
          column: 140
        }
      },
      "109": {
        start: {
          line: 464,
          column: 69
        },
        end: {
          line: 464,
          column: 139
        }
      },
      "110": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "111": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 89
        }
      },
      "112": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "113": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 474,
          column: 108
        }
      },
      "114": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 22
        }
      },
      "115": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 47
        }
      },
      "116": {
        start: {
          line: 486,
          column: 27
        },
        end: {
          line: 486,
          column: 63
        }
      },
      "117": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 81
        }
      },
      "118": {
        start: {
          line: 487,
          column: 47
        },
        end: {
          line: 487,
          column: 66
        }
      },
      "119": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 492,
          column: 48
        }
      },
      "120": {
        start: {
          line: 497,
          column: 21
        },
        end: {
          line: 497,
          column: 43
        }
      },
      "121": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "122": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 56
        }
      },
      "123": {
        start: {
          line: 501,
          column: 26
        },
        end: {
          line: 512,
          column: 9
        }
      },
      "124": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 513,
          column: 53
        }
      },
      "125": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 564,
          column: 9
        }
      },
      "126": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 526,
          column: 13
        }
      },
      "127": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 519,
          column: 19
        }
      },
      "128": {
        start: {
          line: 520,
          column: 16
        },
        end: {
          line: 520,
          column: 82
        }
      },
      "129": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 525,
          column: 17
        }
      },
      "130": {
        start: {
          line: 523,
          column: 39
        },
        end: {
          line: 523,
          column: 179
        }
      },
      "131": {
        start: {
          line: 524,
          column: 20
        },
        end: {
          line: 524,
          column: 59
        }
      },
      "132": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 527,
          column: 56
        }
      },
      "133": {
        start: {
          line: 528,
          column: 32
        },
        end: {
          line: 528,
          column: 64
        }
      },
      "134": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 536,
          column: 13
        }
      },
      "135": {
        start: {
          line: 530,
          column: 38
        },
        end: {
          line: 530,
          column: 128
        }
      },
      "136": {
        start: {
          line: 531,
          column: 16
        },
        end: {
          line: 531,
          column: 52
        }
      },
      "137": {
        start: {
          line: 532,
          column: 16
        },
        end: {
          line: 535,
          column: 17
        }
      },
      "138": {
        start: {
          line: 533,
          column: 20
        },
        end: {
          line: 533,
          column: 48
        }
      },
      "139": {
        start: {
          line: 534,
          column: 20
        },
        end: {
          line: 534,
          column: 26
        }
      },
      "140": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 539,
          column: 13
        }
      },
      "141": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 538,
          column: 45
        }
      },
      "142": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 544,
          column: 13
        }
      },
      "143": {
        start: {
          line: 542,
          column: 35
        },
        end: {
          line: 542,
          column: 200
        }
      },
      "144": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 543,
          column: 55
        }
      },
      "145": {
        start: {
          line: 546,
          column: 12
        },
        end: {
          line: 546,
          column: 40
        }
      },
      "146": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 547,
          column: 66
        }
      },
      "147": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 556,
          column: 13
        }
      },
      "148": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 555,
          column: 17
        }
      },
      "149": {
        start: {
          line: 551,
          column: 39
        },
        end: {
          line: 551,
          column: 187
        }
      },
      "150": {
        start: {
          line: 552,
          column: 20
        },
        end: {
          line: 552,
          column: 59
        }
      },
      "151": {
        start: {
          line: 554,
          column: 20
        },
        end: {
          line: 554,
          column: 80
        }
      },
      "152": {
        start: {
          line: 558,
          column: 12
        },
        end: {
          line: 558,
          column: 43
        }
      },
      "153": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 559,
          column: 59
        }
      },
      "154": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 563,
          column: 13
        }
      },
      "155": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 53
        }
      },
      "156": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 565,
          column: 25
        }
      },
      "157": {
        start: {
          line: 570,
          column: 30
        },
        end: {
          line: 577,
          column: 9
        }
      },
      "158": {
        start: {
          line: 578,
          column: 22
        },
        end: {
          line: 578,
          column: 23
        }
      },
      "159": {
        start: {
          line: 579,
          column: 22
        },
        end: {
          line: 579,
          column: 27
        }
      },
      "160": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 626,
          column: 9
        }
      },
      "161": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 624,
          column: 13
        }
      },
      "162": {
        start: {
          line: 582,
          column: 16
        },
        end: {
          line: 582,
          column: 51
        }
      },
      "163": {
        start: {
          line: 584,
          column: 16
        },
        end: {
          line: 587,
          column: 17
        }
      },
      "164": {
        start: {
          line: 585,
          column: 39
        },
        end: {
          line: 585,
          column: 247
        }
      },
      "165": {
        start: {
          line: 586,
          column: 20
        },
        end: {
          line: 586,
          column: 63
        }
      },
      "166": {
        start: {
          line: 588,
          column: 31
        },
        end: {
          line: 595,
          column: 18
        }
      },
      "167": {
        start: {
          line: 596,
          column: 16
        },
        end: {
          line: 596,
          column: 53
        }
      },
      "168": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 597,
          column: 53
        }
      },
      "169": {
        start: {
          line: 598,
          column: 16
        },
        end: {
          line: 598,
          column: 43
        }
      },
      "170": {
        start: {
          line: 599,
          column: 16
        },
        end: {
          line: 599,
          column: 49
        }
      },
      "171": {
        start: {
          line: 600,
          column: 16
        },
        end: {
          line: 600,
          column: 31
        }
      },
      "172": {
        start: {
          line: 602,
          column: 16
        },
        end: {
          line: 605,
          column: 17
        }
      },
      "173": {
        start: {
          line: 603,
          column: 39
        },
        end: {
          line: 603,
          column: 210
        }
      },
      "174": {
        start: {
          line: 604,
          column: 20
        },
        end: {
          line: 604,
          column: 63
        }
      },
      "175": {
        start: {
          line: 607,
          column: 16
        },
        end: {
          line: 607,
          column: 53
        }
      },
      "176": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 608,
          column: 57
        }
      },
      "177": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 617,
          column: 17
        }
      },
      "178": {
        start: {
          line: 611,
          column: 20
        },
        end: {
          line: 616,
          column: 21
        }
      },
      "179": {
        start: {
          line: 612,
          column: 43
        },
        end: {
          line: 612,
          column: 252
        }
      },
      "180": {
        start: {
          line: 613,
          column: 24
        },
        end: {
          line: 613,
          column: 67
        }
      },
      "181": {
        start: {
          line: 615,
          column: 24
        },
        end: {
          line: 615,
          column: 103
        }
      },
      "182": {
        start: {
          line: 618,
          column: 16
        },
        end: {
          line: 623,
          column: 17
        }
      },
      "183": {
        start: {
          line: 619,
          column: 34
        },
        end: {
          line: 619,
          column: 82
        }
      },
      "184": {
        start: {
          line: 620,
          column: 20
        },
        end: {
          line: 620,
          column: 77
        }
      },
      "185": {
        start: {
          line: 620,
          column: 49
        },
        end: {
          line: 620,
          column: 75
        }
      },
      "186": {
        start: {
          line: 622,
          column: 20
        },
        end: {
          line: 622,
          column: 52
        }
      },
      "187": {
        start: {
          line: 625,
          column: 12
        },
        end: {
          line: 625,
          column: 22
        }
      },
      "188": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 627,
          column: 43
        }
      },
      "189": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 631,
          column: 9
        }
      },
      "190": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 630,
          column: 82
        }
      },
      "191": {
        start: {
          line: 632,
          column: 8
        },
        end: {
          line: 632,
          column: 29
        }
      },
      "192": {
        start: {
          line: 637,
          column: 26
        },
        end: {
          line: 637,
          column: 58
        }
      },
      "193": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 640,
          column: 9
        }
      },
      "194": {
        start: {
          line: 639,
          column: 12
        },
        end: {
          line: 639,
          column: 22
        }
      },
      "195": {
        start: {
          line: 641,
          column: 31
        },
        end: {
          line: 643,
          column: 9
        }
      },
      "196": {
        start: {
          line: 645,
          column: 8
        },
        end: {
          line: 647,
          column: 11
        }
      },
      "197": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 646,
          column: 53
        }
      },
      "198": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 648,
          column: 110
        }
      },
      "199": {
        start: {
          line: 648,
          column: 43
        },
        end: {
          line: 648,
          column: 108
        }
      },
      "200": {
        start: {
          line: 653,
          column: 28
        },
        end: {
          line: 653,
          column: 69
        }
      },
      "201": {
        start: {
          line: 654,
          column: 26
        },
        end: {
          line: 654,
          column: 58
        }
      },
      "202": {
        start: {
          line: 655,
          column: 22
        },
        end: {
          line: 659,
          column: 9
        }
      },
      "203": {
        start: {
          line: 658,
          column: 52
        },
        end: {
          line: 658,
          column: 75
        }
      },
      "204": {
        start: {
          line: 660,
          column: 8
        },
        end: {
          line: 664,
          column: 9
        }
      },
      "205": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 663,
          column: 15
        }
      },
      "206": {
        start: {
          line: 662,
          column: 16
        },
        end: {
          line: 662,
          column: 68
        }
      },
      "207": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 665,
          column: 21
        }
      },
      "208": {
        start: {
          line: 668,
          column: 24
        },
        end: {
          line: 668,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 16
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 27
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 28,
            column: 9
          },
          end: {
            line: 28,
            column: 33
          }
        },
        loc: {
          start: {
            line: 28,
            column: 39
          },
          end: {
            line: 32,
            column: 1
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 43
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 6
          },
          end: {
            line: 48,
            column: 7
          }
        },
        loc: {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 294,
            column: 6
          },
          end: {
            line: 294,
            column: 7
          }
        },
        loc: {
          start: {
            line: 294,
            column: 25
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 294
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 303,
            column: 6
          },
          end: {
            line: 303,
            column: 7
          }
        },
        loc: {
          start: {
            line: 303,
            column: 52
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 303
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 345,
            column: 6
          },
          end: {
            line: 345,
            column: 7
          }
        },
        loc: {
          start: {
            line: 345,
            column: 54
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 345
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 359,
            column: 38
          },
          end: {
            line: 359,
            column: 39
          }
        },
        loc: {
          start: {
            line: 359,
            column: 49
          },
          end: {
            line: 359,
            column: 75
          }
        },
        line: 359
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 394,
            column: 6
          },
          end: {
            line: 394,
            column: 7
          }
        },
        loc: {
          start: {
            line: 394,
            column: 29
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 394
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 397,
            column: 42
          },
          end: {
            line: 397,
            column: 43
          }
        },
        loc: {
          start: {
            line: 397,
            column: 50
          },
          end: {
            line: 400,
            column: 13
          }
        },
        line: 397
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 401,
            column: 22
          },
          end: {
            line: 401,
            column: 23
          }
        },
        loc: {
          start: {
            line: 401,
            column: 32
          },
          end: {
            line: 413,
            column: 9
          }
        },
        line: 401
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 411,
            column: 38
          },
          end: {
            line: 411,
            column: 39
          }
        },
        loc: {
          start: {
            line: 411,
            column: 47
          },
          end: {
            line: 411,
            column: 59
          }
        },
        line: 411
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 414,
            column: 22
          },
          end: {
            line: 414,
            column: 23
          }
        },
        loc: {
          start: {
            line: 414,
            column: 30
          },
          end: {
            line: 414,
            column: 44
          }
        },
        line: 414
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 419,
            column: 6
          },
          end: {
            line: 419,
            column: 7
          }
        },
        loc: {
          start: {
            line: 419,
            column: 45
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 419
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 437,
            column: 6
          },
          end: {
            line: 437,
            column: 7
          }
        },
        loc: {
          start: {
            line: 437,
            column: 44
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 437
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 449,
            column: 6
          },
          end: {
            line: 449,
            column: 7
          }
        },
        loc: {
          start: {
            line: 449,
            column: 37
          },
          end: {
            line: 452,
            column: 5
          }
        },
        line: 449
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 455,
            column: 6
          },
          end: {
            line: 455,
            column: 7
          }
        },
        loc: {
          start: {
            line: 455,
            column: 45
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 455
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 456,
            column: 61
          },
          end: {
            line: 456,
            column: 62
          }
        },
        loc: {
          start: {
            line: 456,
            column: 66
          },
          end: {
            line: 456,
            column: 127
          }
        },
        line: 456
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 463,
            column: 6
          },
          end: {
            line: 463,
            column: 7
          }
        },
        loc: {
          start: {
            line: 463,
            column: 48
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 463
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 464,
            column: 64
          },
          end: {
            line: 464,
            column: 65
          }
        },
        loc: {
          start: {
            line: 464,
            column: 69
          },
          end: {
            line: 464,
            column: 139
          }
        },
        line: 464
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 471,
            column: 6
          },
          end: {
            line: 471,
            column: 7
          }
        },
        loc: {
          start: {
            line: 471,
            column: 67
          },
          end: {
            line: 477,
            column: 5
          }
        },
        line: 471
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 480,
            column: 6
          },
          end: {
            line: 480,
            column: 7
          }
        },
        loc: {
          start: {
            line: 480,
            column: 26
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 480
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 485,
            column: 6
          },
          end: {
            line: 485,
            column: 7
          }
        },
        loc: {
          start: {
            line: 485,
            column: 28
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 485
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 487,
            column: 42
          },
          end: {
            line: 487,
            column: 43
          }
        },
        loc: {
          start: {
            line: 487,
            column: 47
          },
          end: {
            line: 487,
            column: 66
          }
        },
        line: 487
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 491,
            column: 6
          },
          end: {
            line: 491,
            column: 7
          }
        },
        loc: {
          start: {
            line: 491,
            column: 32
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 491
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 496,
            column: 6
          },
          end: {
            line: 496,
            column: 7
          }
        },
        loc: {
          start: {
            line: 496,
            column: 85
          },
          end: {
            line: 566,
            column: 5
          }
        },
        line: 496
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 569,
            column: 6
          },
          end: {
            line: 569,
            column: 7
          }
        },
        loc: {
          start: {
            line: 569,
            column: 87
          },
          end: {
            line: 633,
            column: 5
          }
        },
        line: 569
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 620,
            column: 38
          },
          end: {
            line: 620,
            column: 39
          }
        },
        loc: {
          start: {
            line: 620,
            column: 49
          },
          end: {
            line: 620,
            column: 75
          }
        },
        line: 620
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 636,
            column: 6
          },
          end: {
            line: 636,
            column: 7
          }
        },
        loc: {
          start: {
            line: 636,
            column: 43
          },
          end: {
            line: 649,
            column: 5
          }
        },
        line: 636
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 645,
            column: 32
          },
          end: {
            line: 645,
            column: 33
          }
        },
        loc: {
          start: {
            line: 645,
            column: 40
          },
          end: {
            line: 647,
            column: 9
          }
        },
        line: 645
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 648,
            column: 35
          },
          end: {
            line: 648,
            column: 36
          }
        },
        loc: {
          start: {
            line: 648,
            column: 43
          },
          end: {
            line: 648,
            column: 108
          }
        },
        line: 648
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 652,
            column: 6
          },
          end: {
            line: 652,
            column: 7
          }
        },
        loc: {
          start: {
            line: 652,
            column: 38
          },
          end: {
            line: 666,
            column: 5
          }
        },
        line: 652
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 658,
            column: 42
          },
          end: {
            line: 658,
            column: 43
          }
        },
        loc: {
          start: {
            line: 658,
            column: 52
          },
          end: {
            line: 658,
            column: 75
          }
        },
        line: 658
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 661,
            column: 36
          },
          end: {
            line: 661,
            column: 37
          }
        },
        loc: {
          start: {
            line: 661,
            column: 44
          },
          end: {
            line: 663,
            column: 13
          }
        },
        line: 661
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 35
          },
          end: {
            line: 29,
            column: 38
          }
        }, {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 31,
            column: 5
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 29,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 29,
            column: 14
          }
        }, {
          start: {
            line: 29,
            column: 18
          },
          end: {
            line: 29,
            column: 32
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 35,
            column: 29
          },
          end: {
            line: 35,
            column: 42
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "4": {
        loc: {
          start: {
            line: 303,
            column: 32
          },
          end: {
            line: 303,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 303,
            column: 42
          },
          end: {
            line: 303,
            column: 50
          }
        }],
        line: 303
      },
      "5": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "6": {
        loc: {
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 329,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 329,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "7": {
        loc: {
          start: {
            line: 326,
            column: 20
          },
          end: {
            line: 326,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 20
          },
          end: {
            line: 326,
            column: 53
          }
        }, {
          start: {
            line: 326,
            column: 57
          },
          end: {
            line: 326,
            column: 80
          }
        }],
        line: 326
      },
      "8": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "9": {
        loc: {
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 360,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 360,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "10": {
        loc: {
          start: {
            line: 375,
            column: 16
          },
          end: {
            line: 377,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 16
          },
          end: {
            line: 377,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "11": {
        loc: {
          start: {
            line: 381,
            column: 39
          },
          end: {
            line: 381,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 39
          },
          end: {
            line: 381,
            column: 51
          }
        }, {
          start: {
            line: 381,
            column: 55
          },
          end: {
            line: 381,
            column: 68
          }
        }],
        line: 381
      },
      "12": {
        loc: {
          start: {
            line: 382,
            column: 39
          },
          end: {
            line: 382,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 382,
            column: 39
          },
          end: {
            line: 382,
            column: 51
          }
        }, {
          start: {
            line: 382,
            column: 55
          },
          end: {
            line: 382,
            column: 57
          }
        }],
        line: 382
      },
      "13": {
        loc: {
          start: {
            line: 383,
            column: 41
          },
          end: {
            line: 383,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 41
          },
          end: {
            line: 383,
            column: 51
          }
        }, {
          start: {
            line: 383,
            column: 55
          },
          end: {
            line: 383,
            column: 56
          }
        }],
        line: 383
      },
      "14": {
        loc: {
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 387,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 387,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "15": {
        loc: {
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "16": {
        loc: {
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "17": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 432,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 424,
            column: 22
          }
        }, {
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 427,
            column: 22
          }
        }, {
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 428,
            column: 25
          }
        }, {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 431,
            column: 22
          }
        }],
        line: 421
      },
      "18": {
        loc: {
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 443,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 443,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "19": {
        loc: {
          start: {
            line: 456,
            column: 66
          },
          end: {
            line: 456,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 456,
            column: 66
          },
          end: {
            line: 456,
            column: 94
          }
        }, {
          start: {
            line: 456,
            column: 98
          },
          end: {
            line: 456,
            column: 127
          }
        }],
        line: 456
      },
      "20": {
        loc: {
          start: {
            line: 464,
            column: 69
          },
          end: {
            line: 464,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 69
          },
          end: {
            line: 464,
            column: 106
          }
        }, {
          start: {
            line: 464,
            column: 110
          },
          end: {
            line: 464,
            column: 139
          }
        }],
        line: 464
      },
      "21": {
        loc: {
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 473,
            column: 12
          },
          end: {
            line: 475,
            column: 22
          }
        }],
        line: 472
      },
      "22": {
        loc: {
          start: {
            line: 487,
            column: 15
          },
          end: {
            line: 487,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 487,
            column: 24
          },
          end: {
            line: 487,
            column: 67
          }
        }, {
          start: {
            line: 487,
            column: 70
          },
          end: {
            line: 487,
            column: 80
          }
        }],
        line: 487
      },
      "23": {
        loc: {
          start: {
            line: 496,
            column: 65
          },
          end: {
            line: 496,
            column: 83
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 496,
            column: 75
          },
          end: {
            line: 496,
            column: 83
          }
        }],
        line: 496
      },
      "24": {
        loc: {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "25": {
        loc: {
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "26": {
        loc: {
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 40
          }
        }, {
          start: {
            line: 516,
            column: 44
          },
          end: {
            line: 516,
            column: 68
          }
        }],
        line: 516
      },
      "27": {
        loc: {
          start: {
            line: 522,
            column: 16
          },
          end: {
            line: 525,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 16
          },
          end: {
            line: 525,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "28": {
        loc: {
          start: {
            line: 532,
            column: 16
          },
          end: {
            line: 535,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 532,
            column: 16
          },
          end: {
            line: 535,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 532
      },
      "29": {
        loc: {
          start: {
            line: 532,
            column: 20
          },
          end: {
            line: 532,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 532,
            column: 20
          },
          end: {
            line: 532,
            column: 53
          }
        }, {
          start: {
            line: 532,
            column: 57
          },
          end: {
            line: 532,
            column: 80
          }
        }],
        line: 532
      },
      "30": {
        loc: {
          start: {
            line: 537,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "31": {
        loc: {
          start: {
            line: 541,
            column: 12
          },
          end: {
            line: 544,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 541,
            column: 12
          },
          end: {
            line: 544,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 541
      },
      "32": {
        loc: {
          start: {
            line: 541,
            column: 16
          },
          end: {
            line: 541,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 541,
            column: 16
          },
          end: {
            line: 541,
            column: 40
          }
        }, {
          start: {
            line: 541,
            column: 44
          },
          end: {
            line: 541,
            column: 73
          }
        }],
        line: 541
      },
      "33": {
        loc: {
          start: {
            line: 549,
            column: 12
          },
          end: {
            line: 556,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 549,
            column: 12
          },
          end: {
            line: 556,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 549
      },
      "34": {
        loc: {
          start: {
            line: 549,
            column: 16
          },
          end: {
            line: 549,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 549,
            column: 16
          },
          end: {
            line: 549,
            column: 40
          }
        }, {
          start: {
            line: 549,
            column: 44
          },
          end: {
            line: 549,
            column: 75
          }
        }],
        line: 549
      },
      "35": {
        loc: {
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 563,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 563,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 561
      },
      "36": {
        loc: {
          start: {
            line: 580,
            column: 14
          },
          end: {
            line: 580,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 580,
            column: 14
          },
          end: {
            line: 580,
            column: 47
          }
        }, {
          start: {
            line: 580,
            column: 51
          },
          end: {
            line: 580,
            column: 59
          }
        }],
        line: 580
      },
      "37": {
        loc: {
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 587,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 587,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 584
      },
      "38": {
        loc: {
          start: {
            line: 602,
            column: 16
          },
          end: {
            line: 605,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 602,
            column: 16
          },
          end: {
            line: 605,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 602
      },
      "39": {
        loc: {
          start: {
            line: 608,
            column: 41
          },
          end: {
            line: 608,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 608,
            column: 41
          },
          end: {
            line: 608,
            column: 51
          }
        }, {
          start: {
            line: 608,
            column: 55
          },
          end: {
            line: 608,
            column: 56
          }
        }],
        line: 608
      },
      "40": {
        loc: {
          start: {
            line: 610,
            column: 16
          },
          end: {
            line: 617,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 610,
            column: 16
          },
          end: {
            line: 617,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 610
      },
      "41": {
        loc: {
          start: {
            line: 610,
            column: 20
          },
          end: {
            line: 610,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 610,
            column: 20
          },
          end: {
            line: 610,
            column: 44
          }
        }, {
          start: {
            line: 610,
            column: 48
          },
          end: {
            line: 610,
            column: 79
          }
        }],
        line: 610
      },
      "42": {
        loc: {
          start: {
            line: 618,
            column: 16
          },
          end: {
            line: 623,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 618,
            column: 16
          },
          end: {
            line: 623,
            column: 17
          }
        }, {
          start: {
            line: 621,
            column: 23
          },
          end: {
            line: 623,
            column: 17
          }
        }],
        line: 618
      },
      "43": {
        loc: {
          start: {
            line: 629,
            column: 8
          },
          end: {
            line: 631,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 629,
            column: 8
          },
          end: {
            line: 631,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 629
      },
      "44": {
        loc: {
          start: {
            line: 638,
            column: 8
          },
          end: {
            line: 640,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 638,
            column: 8
          },
          end: {
            line: 640,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 638
      },
      "45": {
        loc: {
          start: {
            line: 658,
            column: 59
          },
          end: {
            line: 658,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 658,
            column: 59
          },
          end: {
            line: 658,
            column: 69
          }
        }, {
          start: {
            line: 658,
            column: 73
          },
          end: {
            line: 658,
            column: 74
          }
        }],
        line: 658
      },
      "46": {
        loc: {
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 664,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 664,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 660
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\advanced-test-flows.ts"],
      sourcesContent: ["// ===================================\r\n// ADVANCED TEST FLOWS\r\n// Sistema avanzado de flujos de testing automatizados\r\n// ===================================\r\n\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { ScreenshotManager, ScreenshotMetadata, ScreenshotOptions } from './screenshot-manager';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nexport interface TestFlow {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  steps: TestFlowStep[];\r\n  triggers: TestTrigger[];\r\n  schedule?: TestSchedule;\r\n  notifications: NotificationConfig[];\r\n  retryPolicy: RetryPolicy;\r\n}\r\n\r\nexport interface TestFlowStep {\r\n  id: string;\r\n  name: string;\r\n  type: 'test-suite' | 'build' | 'deploy' | 'validation' | 'cleanup';\r\n  command: string;\r\n  timeout: number;\r\n  continueOnFailure: boolean;\r\n  dependencies: string[];\r\n  environment?: Record<string, string>;\r\n  artifacts?: string[];\r\n}\r\n\r\nexport interface TestTrigger {\r\n  type: 'manual' | 'schedule' | 'webhook' | 'file-change' | 'git-push';\r\n  config: Record<string, any>;\r\n}\r\n\r\nexport interface TestSchedule {\r\n  cron: string;\r\n  timezone: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface NotificationConfig {\r\n  type: 'email' | 'slack' | 'webhook' | 'console';\r\n  config: Record<string, any>;\r\n  triggers: ('success' | 'failure' | 'start' | 'always')[];\r\n}\r\n\r\nexport interface RetryPolicy {\r\n  maxRetries: number;\r\n  backoffStrategy: 'linear' | 'exponential' | 'fixed';\r\n  baseDelay: number;\r\n  maxDelay: number;\r\n}\r\n\r\nexport interface FlowExecution {\r\n  id: string;\r\n  flowId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'running' | 'success' | 'failed' | 'cancelled';\r\n  steps: StepExecution[];\r\n  trigger: string;\r\n  artifacts: string[];\r\n  logs: string[];\r\n  screenshots: ScreenshotMetadata[];\r\n  screenshotConfig?: ScreenshotFlowConfig;\r\n}\r\n\r\nexport interface ScreenshotFlowConfig {\r\n  enabled: boolean;\r\n  captureOnStart?: boolean;\r\n  captureOnEnd?: boolean;\r\n  captureOnError?: boolean;\r\n  captureInterval?: number;\r\n  screenshotOptions?: ScreenshotOptions;\r\n  baseUrl?: string;\r\n}\r\n\r\nexport interface StepExecution {\r\n  stepId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'pending' | 'running' | 'success' | 'failed' | 'skipped';\r\n  exitCode?: number;\r\n  stdout?: string;\r\n  stderr?: string;\r\n  artifacts: string[];\r\n  retryCount: number;\r\n  screenshots: ScreenshotMetadata[];\r\n}\r\n\r\n/**\r\n * Gestor avanzado de flujos de testing\r\n */\r\nexport class AdvancedTestFlowManager {\r\n  private flows: Map<string, TestFlow> = new Map();\r\n  private executions: Map<string, FlowExecution> = new Map();\r\n  private scheduledJobs: Map<string, NodeJS.Timeout> = new Map();\r\n  private screenshotManager: ScreenshotManager;\r\n\r\n  constructor(private workingDir: string = process.cwd()) {\r\n    this.screenshotManager = new ScreenshotManager({\r\n      screenshotsDir: path.join(workingDir, 'test-screenshots'),\r\n      browserType: 'chromium'\r\n    });\r\n    this.initializeDefaultFlows();\r\n  }\r\n\r\n  /**\r\n   * Inicializar flujos predeterminados\r\n   */\r\n  private initializeDefaultFlows() {\r\n    // Flujo de CI/CD completo\r\n    this.registerFlow({\r\n      id: 'ci-cd-complete',\r\n      name: 'CI/CD Completo',\r\n      description: 'Flujo completo de integraci\xF3n continua y despliegue',\r\n      steps: [\r\n        {\r\n          id: 'install-deps',\r\n          name: 'Instalar Dependencias',\r\n          type: 'build',\r\n          command: 'npm ci',\r\n          timeout: 120000,\r\n          continueOnFailure: false,\r\n          dependencies: [],\r\n          artifacts: ['node_modules']\r\n        },\r\n        {\r\n          id: 'lint-check',\r\n          name: 'Verificaci\xF3n de Linting',\r\n          type: 'validation',\r\n          command: 'npm run lint',\r\n          timeout: 60000,\r\n          continueOnFailure: true,\r\n          dependencies: ['install-deps']\r\n        },\r\n        {\r\n          id: 'type-check',\r\n          name: 'Verificaci\xF3n de Tipos',\r\n          type: 'validation',\r\n          command: 'npm run type-check',\r\n          timeout: 60000,\r\n          continueOnFailure: true,\r\n          dependencies: ['install-deps']\r\n        },\r\n        {\r\n          id: 'unit-tests',\r\n          name: 'Tests Unitarios',\r\n          type: 'test-suite',\r\n          command: 'npm test -- --coverage --passWithNoTests',\r\n          timeout: 300000,\r\n          continueOnFailure: false,\r\n          dependencies: ['install-deps'],\r\n          artifacts: ['coverage']\r\n        },\r\n        {\r\n          id: 'build-app',\r\n          name: 'Build de Aplicaci\xF3n',\r\n          type: 'build',\r\n          command: 'npm run build',\r\n          timeout: 600000,\r\n          continueOnFailure: false,\r\n          dependencies: ['unit-tests'],\r\n          artifacts: ['.next']\r\n        },\r\n        {\r\n          id: 'e2e-tests',\r\n          name: 'Tests E2E',\r\n          type: 'test-suite',\r\n          command: 'npx playwright test --reporter=json',\r\n          timeout: 900000,\r\n          continueOnFailure: true,\r\n          dependencies: ['build-app'],\r\n          artifacts: ['test-results', 'playwright-report']\r\n        }\r\n      ],\r\n      triggers: [\r\n        { type: 'manual', config: {} },\r\n        { type: 'git-push', config: { branch: 'main' } }\r\n      ],\r\n      notifications: [\r\n        {\r\n          type: 'console',\r\n          config: {},\r\n          triggers: ['start', 'success', 'failure']\r\n        }\r\n      ],\r\n      retryPolicy: {\r\n        maxRetries: 2,\r\n        backoffStrategy: 'exponential',\r\n        baseDelay: 5000,\r\n        maxDelay: 30000\r\n      }\r\n    });\r\n\r\n    // Flujo de testing r\xE1pido\r\n    this.registerFlow({\r\n      id: 'quick-test',\r\n      name: 'Testing R\xE1pido',\r\n      description: 'Flujo r\xE1pido para desarrollo',\r\n      steps: [\r\n        {\r\n          id: 'quick-unit-tests',\r\n          name: 'Tests Unitarios R\xE1pidos',\r\n          type: 'test-suite',\r\n          command: 'npm test -- --passWithNoTests --maxWorkers=50%',\r\n          timeout: 120000,\r\n          continueOnFailure: false,\r\n          dependencies: []\r\n        },\r\n        {\r\n          id: 'quick-lint',\r\n          name: 'Lint R\xE1pido',\r\n          type: 'validation',\r\n          command: 'npm run lint -- --fix',\r\n          timeout: 30000,\r\n          continueOnFailure: true,\r\n          dependencies: []\r\n        }\r\n      ],\r\n      triggers: [\r\n        { type: 'manual', config: {} },\r\n        { type: 'file-change', config: { patterns: ['src/**/*.ts', 'src/**/*.tsx'] } }\r\n      ],\r\n      notifications: [\r\n        {\r\n          type: 'console',\r\n          config: {},\r\n          triggers: ['failure']\r\n        }\r\n      ],\r\n      retryPolicy: {\r\n        maxRetries: 1,\r\n        backoffStrategy: 'fixed',\r\n        baseDelay: 2000,\r\n        maxDelay: 2000\r\n      }\r\n    });\r\n\r\n    // Flujo de performance testing\r\n    this.registerFlow({\r\n      id: 'performance-test',\r\n      name: 'Testing de Performance',\r\n      description: 'Flujo especializado en performance y Core Web Vitals',\r\n      steps: [\r\n        {\r\n          id: 'build-for-perf',\r\n          name: 'Build Optimizado',\r\n          type: 'build',\r\n          command: 'npm run build',\r\n          timeout: 600000,\r\n          continueOnFailure: false,\r\n          dependencies: [],\r\n          environment: { NODE_ENV: 'production' }\r\n        },\r\n        {\r\n          id: 'lighthouse-audit',\r\n          name: 'Auditor\xEDa Lighthouse',\r\n          type: 'validation',\r\n          command: 'npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json',\r\n          timeout: 180000,\r\n          continueOnFailure: true,\r\n          dependencies: ['build-for-perf'],\r\n          artifacts: ['lighthouse-report.json']\r\n        },\r\n        {\r\n          id: 'performance-tests',\r\n          name: 'Tests de Performance',\r\n          type: 'test-suite',\r\n          command: 'npm test -- --testPathPattern=\"performance\" --passWithNoTests',\r\n          timeout: 300000,\r\n          continueOnFailure: true,\r\n          dependencies: ['build-for-perf']\r\n        }\r\n      ],\r\n      triggers: [\r\n        { type: 'manual', config: {} }\r\n      ],\r\n      schedule: {\r\n        cron: '0 2 * * *', // Diario a las 2 AM\r\n        timezone: 'America/Argentina/Buenos_Aires',\r\n        enabled: false\r\n      },\r\n      notifications: [\r\n        {\r\n          type: 'console',\r\n          config: {},\r\n          triggers: ['success', 'failure']\r\n        }\r\n      ],\r\n      retryPolicy: {\r\n        maxRetries: 1,\r\n        backoffStrategy: 'fixed',\r\n        baseDelay: 10000,\r\n        maxDelay: 10000\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registrar un nuevo flujo\r\n   */\r\n  registerFlow(flow: TestFlow): void {\r\n    this.flows.set(flow.id, flow);\r\n    \r\n    // Configurar schedule si existe\r\n    if (flow.schedule?.enabled) {\r\n      this.scheduleFlow(flow.id, flow.schedule);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar un flujo\r\n   */\r\n  async executeFlow(flowId: string, trigger: string = 'manual'): Promise<FlowExecution> {\r\n    const flow = this.flows.get(flowId);\r\n    if (!flow) {\r\n      throw new Error(`Flujo no encontrado: ${flowId}`);\r\n    }\r\n\r\n    const execution: FlowExecution = {\r\n      id: `exec-${flowId}-${Date.now()}`,\r\n      flowId,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      steps: [],\r\n      trigger,\r\n      artifacts: [],\r\n      logs: []\r\n    };\r\n\r\n    this.executions.set(execution.id, execution);\r\n\r\n    try {\r\n      await this.notifyFlowStart(flow, execution);\r\n      \r\n      // Ejecutar pasos en orden de dependencias\r\n      const sortedSteps = this.topologicalSort(flow.steps);\r\n      \r\n      for (const step of sortedSteps) {\r\n        const stepExecution = await this.executeStep(step, execution, flow.retryPolicy);\r\n        execution.steps.push(stepExecution);\r\n        \r\n        if (stepExecution.status === 'failed' && !step.continueOnFailure) {\r\n          execution.status = 'failed';\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (execution.status === 'running') {\r\n        execution.status = 'success';\r\n      }\r\n\r\n    } catch (error) {\r\n      execution.status = 'failed';\r\n      execution.logs.push(`Error en ejecuci\xF3n: ${error}`);\r\n    } finally {\r\n      execution.endTime = new Date();\r\n      await this.notifyFlowComplete(flow, execution);\r\n    }\r\n\r\n    return execution;\r\n  }\r\n\r\n  /**\r\n   * Ejecutar un paso individual\r\n   */\r\n  private async executeStep(\r\n    step: TestFlowStep, \r\n    execution: FlowExecution, \r\n    retryPolicy: RetryPolicy\r\n  ): Promise<StepExecution> {\r\n    const stepExecution: StepExecution = {\r\n      stepId: step.id,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      artifacts: [],\r\n      retryCount: 0\r\n    };\r\n\r\n    let lastError: any;\r\n\r\n    for (let attempt = 0; attempt <= retryPolicy.maxRetries; attempt++) {\r\n      try {\r\n        stepExecution.retryCount = attempt;\r\n        \r\n        if (attempt > 0) {\r\n          const delay = this.calculateBackoffDelay(attempt, retryPolicy);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n\r\n        const { stdout, stderr } = await execAsync(step.command, {\r\n          cwd: this.workingDir,\r\n          timeout: step.timeout,\r\n          env: { ...process.env, ...step.environment }\r\n        });\r\n\r\n        stepExecution.status = 'success';\r\n        stepExecution.stdout = stdout;\r\n        stepExecution.stderr = stderr;\r\n        stepExecution.exitCode = 0;\r\n        stepExecution.endTime = new Date();\r\n\r\n        // Recopilar artifacts\r\n        if (step.artifacts) {\r\n          stepExecution.artifacts = await this.collectArtifacts(step.artifacts);\r\n        }\r\n\r\n        break;\r\n\r\n      } catch (error: any) {\r\n        lastError = error;\r\n        stepExecution.stderr = error.stderr || error.message;\r\n        stepExecution.stdout = error.stdout || '';\r\n        stepExecution.exitCode = error.code || 1;\r\n\r\n        if (attempt === retryPolicy.maxRetries) {\r\n          stepExecution.status = 'failed';\r\n          stepExecution.endTime = new Date();\r\n        }\r\n      }\r\n    }\r\n\r\n    return stepExecution;\r\n  }\r\n\r\n  /**\r\n   * Ordenamiento topol\xF3gico de pasos basado en dependencias\r\n   */\r\n  private topologicalSort(steps: TestFlowStep[]): TestFlowStep[] {\r\n    const visited = new Set<string>();\r\n    const result: TestFlowStep[] = [];\r\n    const stepMap = new Map(steps.map(step => [step.id, step]));\r\n\r\n    const visit = (stepId: string) => {\r\n      if (visited.has(stepId)) {return;}\r\n      visited.add(stepId);\r\n\r\n      const step = stepMap.get(stepId);\r\n      if (!step) {return;}\r\n\r\n      // Visitar dependencias primero\r\n      step.dependencies.forEach(depId => visit(depId));\r\n      \r\n      result.push(step);\r\n    };\r\n\r\n    steps.forEach(step => visit(step.id));\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calcular delay de backoff\r\n   */\r\n  private calculateBackoffDelay(attempt: number, policy: RetryPolicy): number {\r\n    let delay: number;\r\n\r\n    switch (policy.backoffStrategy) {\r\n      case 'linear':\r\n        delay = policy.baseDelay * attempt;\r\n        break;\r\n      case 'exponential':\r\n        delay = policy.baseDelay * Math.pow(2, attempt - 1);\r\n        break;\r\n      case 'fixed':\r\n      default:\r\n        delay = policy.baseDelay;\r\n        break;\r\n    }\r\n\r\n    return Math.min(delay, policy.maxDelay);\r\n  }\r\n\r\n  /**\r\n   * Recopilar artifacts\r\n   */\r\n  private async collectArtifacts(artifactPaths: string[]): Promise<string[]> {\r\n    const artifacts: string[] = [];\r\n    \r\n    for (const artifactPath of artifactPaths) {\r\n      const fullPath = path.join(this.workingDir, artifactPath);\r\n      if (fs.existsSync(fullPath)) {\r\n        artifacts.push(fullPath);\r\n      }\r\n    }\r\n\r\n    return artifacts;\r\n  }\r\n\r\n  /**\r\n   * Programar ejecuci\xF3n de flujo\r\n   */\r\n  private scheduleFlow(flowId: string, schedule: TestSchedule): void {\r\n    // Implementaci\xF3n simplificada - en producci\xF3n usar cron job real\r\n    console.log(`\uD83D\uDCC5 Flujo ${flowId} programado: ${schedule.cron}`);\r\n  }\r\n\r\n  /**\r\n   * Notificar inicio de flujo\r\n   */\r\n  private async notifyFlowStart(flow: TestFlow, execution: FlowExecution): Promise<void> {\r\n    const startNotifications = flow.notifications.filter(n => \r\n      n.triggers.includes('start') || n.triggers.includes('always')\r\n    );\r\n\r\n    for (const notification of startNotifications) {\r\n      await this.sendNotification(notification, 'start', flow, execution);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar finalizaci\xF3n de flujo\r\n   */\r\n  private async notifyFlowComplete(flow: TestFlow, execution: FlowExecution): Promise<void> {\r\n    const completeNotifications = flow.notifications.filter(n => \r\n      n.triggers.includes(execution.status) || n.triggers.includes('always')\r\n    );\r\n\r\n    for (const notification of completeNotifications) {\r\n      await this.sendNotification(notification, execution.status, flow, execution);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enviar notificaci\xF3n\r\n   */\r\n  private async sendNotification(\r\n    notification: NotificationConfig, \r\n    event: string, \r\n    flow: TestFlow, \r\n    execution: FlowExecution\r\n  ): Promise<void> {\r\n    switch (notification.type) {\r\n      case 'console':\r\n        console.log(`\uD83D\uDD14 [${event.toUpperCase()}] Flujo: ${flow.name} | Ejecuci\xF3n: ${execution.id}`);\r\n        break;\r\n      // Implementar otros tipos de notificaci\xF3n seg\xFAn necesidad\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener flujos disponibles\r\n   */\r\n  getAvailableFlows(): TestFlow[] {\r\n    return Array.from(this.flows.values());\r\n  }\r\n\r\n  /**\r\n   * Obtener ejecuciones\r\n   */\r\n  getExecutions(flowId?: string): FlowExecution[] {\r\n    const executions = Array.from(this.executions.values());\r\n    return flowId ? executions.filter(e => e.flowId === flowId) : executions;\r\n  }\r\n\r\n  /**\r\n   * Obtener ejecuci\xF3n espec\xEDfica\r\n   */\r\n  getExecution(executionId: string): FlowExecution | undefined {\r\n    return this.executions.get(executionId);\r\n  }\r\n\r\n  /**\r\n   * Ejecutar flujo con capturas de pantalla\r\n   */\r\n  async executeFlowWithScreenshots(\r\n    flowId: string, \r\n    screenshotConfig: ScreenshotFlowConfig,\r\n    trigger: string = 'manual'\r\n  ): Promise<FlowExecution> {\r\n    const flow = this.flows.get(flowId);\r\n    if (!flow) {\r\n      throw new Error(`Flow ${flowId} not found`);\r\n    }\r\n\r\n    const execution: FlowExecution = {\r\n      id: `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      flowId,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      steps: [],\r\n      trigger,\r\n      artifacts: [],\r\n      logs: [],\r\n      screenshots: [],\r\n      screenshotConfig\r\n    };\r\n\r\n    this.executions.set(execution.id, execution);\r\n\r\n    try {\r\n      // Inicializar screenshot manager si est\xE1 habilitado\r\n      if (screenshotConfig.enabled && screenshotConfig.baseUrl) {\r\n        await this.screenshotManager.initialize({ headless: false });\r\n        await this.screenshotManager.navigateTo(screenshotConfig.baseUrl);\r\n        \r\n        // Captura inicial si est\xE1 configurada\r\n        if (screenshotConfig.captureOnStart) {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_start`,\r\n            `Inicio del flujo ${flow.name}`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          execution.screenshots.push(screenshot);\r\n        }\r\n      }\r\n\r\n      await this.notifyFlowStart(flow, execution);\r\n      \r\n      const sortedSteps = this.topologicalSort(flow.steps);\r\n      \r\n      for (const step of sortedSteps) {\r\n        const stepExecution = await this.executeStepWithScreenshots(\r\n          step, \r\n          execution, \r\n          flow.retryPolicy,\r\n          screenshotConfig\r\n        );\r\n        execution.steps.push(stepExecution);\r\n        \r\n        if (stepExecution.status === 'failed' && !step.continueOnFailure) {\r\n          execution.status = 'failed';\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (execution.status === 'running') {\r\n        execution.status = 'success';\r\n      }\r\n      \r\n      // Captura final si est\xE1 configurada\r\n      if (screenshotConfig.enabled && screenshotConfig.captureOnEnd) {\r\n        const screenshot = await this.screenshotManager.captureScreenshot(\r\n          `${execution.id}_end`,\r\n          `Fin del flujo ${flow.name} - Estado: ${execution.status}`,\r\n          screenshotConfig.screenshotOptions\r\n        );\r\n        execution.screenshots.push(screenshot);\r\n      }\r\n      \r\n    } catch (error) {\r\n      execution.status = 'failed';\r\n      execution.logs.push(`Flow execution error: ${error}`);\r\n      \r\n      // Captura de error si est\xE1 configurada\r\n      if (screenshotConfig.enabled && screenshotConfig.captureOnError) {\r\n        try {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_error`,\r\n            `Error en flujo ${flow.name}: ${error}`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          execution.screenshots.push(screenshot);\r\n        } catch (screenshotError) {\r\n          execution.logs.push(`Screenshot error: ${screenshotError}`);\r\n        }\r\n      }\r\n    } finally {\r\n      execution.endTime = new Date();\r\n      await this.notifyFlowComplete(flow, execution);\r\n      \r\n      // Cerrar screenshot manager\r\n      if (screenshotConfig.enabled) {\r\n        await this.screenshotManager.close();\r\n      }\r\n    }\r\n    \r\n    return execution;\r\n  }\r\n\r\n  /**\r\n   * Ejecutar paso con capturas de pantalla\r\n   */\r\n  private async executeStepWithScreenshots(\r\n    step: TestFlowStep, \r\n    execution: FlowExecution, \r\n    retryPolicy: RetryPolicy,\r\n    screenshotConfig: ScreenshotFlowConfig\r\n  ): Promise<StepExecution> {\r\n    const stepExecution: StepExecution = {\r\n      stepId: step.id,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      artifacts: [],\r\n      retryCount: 0,\r\n      screenshots: []\r\n    };\r\n\r\n    let attempt = 0;\r\n    let success = false;\r\n\r\n    while (attempt <= retryPolicy.maxRetries && !success) {\r\n      try {\r\n        stepExecution.retryCount = attempt;\r\n        \r\n        // Captura antes del paso\r\n        if (screenshotConfig.enabled) {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_step_${step.id}_attempt_${attempt}_before`,\r\n            `Antes de ejecutar paso: ${step.name} (intento ${attempt + 1})`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          stepExecution.screenshots.push(screenshot);\r\n        }\r\n\r\n        const result = await execAsync(step.command, {\r\n          cwd: this.workingDir,\r\n          timeout: step.timeout,\r\n          env: { ...process.env, ...step.environment }\r\n        });\r\n\r\n        stepExecution.stdout = result.stdout;\r\n        stepExecution.stderr = result.stderr;\r\n        stepExecution.exitCode = 0;\r\n        stepExecution.status = 'success';\r\n        success = true;\r\n        \r\n        // Captura despu\xE9s del paso exitoso\r\n        if (screenshotConfig.enabled) {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_step_${step.id}_success`,\r\n            `Paso completado exitosamente: ${step.name}`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          stepExecution.screenshots.push(screenshot);\r\n        }\r\n        \r\n      } catch (error: any) {\r\n        stepExecution.stderr = error.message;\r\n        stepExecution.exitCode = error.code || 1;\r\n        \r\n        // Captura de error del paso\r\n        if (screenshotConfig.enabled && screenshotConfig.captureOnError) {\r\n          try {\r\n            const screenshot = await this.screenshotManager.captureScreenshot(\r\n              `${execution.id}_step_${step.id}_error_${attempt}`,\r\n              `Error en paso: ${step.name} (intento ${attempt + 1}) - ${error.message}`,\r\n              screenshotConfig.screenshotOptions\r\n            );\r\n            stepExecution.screenshots.push(screenshot);\r\n          } catch (screenshotError) {\r\n            execution.logs.push(`Screenshot error in step ${step.id}: ${screenshotError}`);\r\n          }\r\n        }\r\n        \r\n        if (attempt < retryPolicy.maxRetries) {\r\n          const delay = this.calculateBackoffDelay(attempt, retryPolicy);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        } else {\r\n          stepExecution.status = 'failed';\r\n        }\r\n      }\r\n      \r\n      attempt++;\r\n    }\r\n\r\n    stepExecution.endTime = new Date();\r\n    \r\n    // Recopilar artefactos\r\n    if (step.artifacts) {\r\n      stepExecution.artifacts = await this.collectArtifacts(step.artifacts);\r\n    }\r\n\r\n    return stepExecution;\r\n  }\r\n\r\n  /**\r\n   * Obtener screenshots de una ejecuci\xF3n\r\n   */\r\n  getExecutionScreenshots(executionId: string): ScreenshotMetadata[] {\r\n    const execution = this.executions.get(executionId);\r\n    if (!execution) {\r\n      return [];\r\n    }\r\n    \r\n    const allScreenshots = [...execution.screenshots];\r\n    \r\n    // Agregar screenshots de los pasos\r\n    execution.steps.forEach(step => {\r\n      allScreenshots.push(...step.screenshots);\r\n    });\r\n    \r\n    return allScreenshots.sort((a, b) => \r\n      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener estad\xEDsticas de screenshots\r\n   */\r\n  getScreenshotStats(executionId: string): {\r\n    total: number;\r\n    byStep: Record<string, number>;\r\n    totalSize: number;\r\n  } {\r\n    const screenshots = this.getExecutionScreenshots(executionId);\r\n    const execution = this.executions.get(executionId);\r\n    \r\n    const stats = {\r\n      total: screenshots.length,\r\n      byStep: {} as Record<string, number>,\r\n      totalSize: screenshots.reduce((sum, s) => sum + (s.fileSize || 0), 0)\r\n    };\r\n    \r\n    if (execution) {\r\n      execution.steps.forEach(step => {\r\n        stats.byStep[step.stepId] = step.screenshots.length;\r\n      });\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n}\r\n\r\n// Instancia global del gestor\r\nexport const testFlowManager = new AdvancedTestFlowManager();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["AdvancedTestFlowManager", "testFlowManager", "execAsync", "promisify", "exec", "workingDir", "process", "cwd", "flows", "Map", "executions", "scheduledJobs", "screenshotManager", "ScreenshotManager", "screenshotsDir", "path", "join", "browserType", "initializeDefaultFlows", "registerFlow", "id", "name", "description", "steps", "type", "command", "timeout", "continueOnFailure", "dependencies", "artifacts", "triggers", "config", "branch", "notifications", "retryPolicy", "maxRetries", "backoffStrategy", "baseDelay", "maxDelay", "patterns", "environment", "NODE_ENV", "schedule", "cron", "timezone", "enabled", "flow", "set", "scheduleFlow", "executeFlow", "flowId", "trigger", "get", "Error", "execution", "Date", "now", "startTime", "status", "logs", "notifyFlowStart", "sortedSteps", "topologicalSort", "step", "stepExecution", "executeStep", "push", "error", "endTime", "notifyFlowComplete", "stepId", "retryCount", "lastError", "attempt", "delay", "calculateBackoffDelay", "Promise", "resolve", "setTimeout", "stdout", "stderr", "env", "exitCode", "collectArtifacts", "message", "code", "visited", "Set", "result", "stepMap", "map", "visit", "has", "add", "forEach", "depId", "policy", "Math", "pow", "min", "artifactPaths", "artifactPath", "fullPath", "fs", "existsSync", "console", "log", "startNotifications", "filter", "n", "includes", "notification", "sendNotification", "completeNotifications", "event", "toUpperCase", "getAvailableFlows", "Array", "from", "values", "getExecutions", "e", "getExecution", "executionId", "executeFlowWithScreenshots", "screenshotConfig", "random", "toString", "substr", "screenshots", "baseUrl", "initialize", "headless", "navigateTo", "captureOnStart", "screenshot", "captureScreenshot", "screenshotOptions", "executeStepWithScreenshots", "captureOnEnd", "captureOnError", "screenshotError", "close", "success", "getExecutionScreenshots", "allScreenshots", "sort", "a", "b", "timestamp", "getTime", "getScreenshotStats", "stats", "total", "length", "byStep", "totalSize", "reduce", "sum", "s", "fileSize"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8b7d7586a729677dd191148030c338526faa4647"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pigghfd2l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pigghfd2l();
cov_pigghfd2l().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_pigghfd2l().f[0]++;
  cov_pigghfd2l().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_pigghfd2l().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_pigghfd2l().s[3]++;
_export(exports, {
  get AdvancedTestFlowManager() {
    /* istanbul ignore next */
    cov_pigghfd2l().f[1]++;
    cov_pigghfd2l().s[4]++;
    return AdvancedTestFlowManager;
  },
  get testFlowManager() {
    /* istanbul ignore next */
    cov_pigghfd2l().f[2]++;
    cov_pigghfd2l().s[5]++;
    return testFlowManager;
  }
});
const _child_process =
/* istanbul ignore next */
(cov_pigghfd2l().s[6]++, require("child_process"));
const _util =
/* istanbul ignore next */
(cov_pigghfd2l().s[7]++, require("util"));
const _fs =
/* istanbul ignore next */
(/*#__PURE__*/cov_pigghfd2l().s[8]++, _interop_require_default(require("fs")));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_pigghfd2l().s[9]++, _interop_require_default(require("path")));
const _screenshotmanager =
/* istanbul ignore next */
(cov_pigghfd2l().s[10]++, require("./screenshot-manager"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_pigghfd2l().f[3]++;
  cov_pigghfd2l().s[11]++;
  return /* istanbul ignore next */(cov_pigghfd2l().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_pigghfd2l().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_pigghfd2l().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_pigghfd2l().b[0][1]++, {
    default: obj
  });
}
const execAsync =
/* istanbul ignore next */
(cov_pigghfd2l().s[12]++, (0, _util.promisify)(_child_process.exec));
class AdvancedTestFlowManager {
  constructor(workingDir =
  /* istanbul ignore next */
  (cov_pigghfd2l().b[2][0]++, process.cwd())) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[4]++;
    cov_pigghfd2l().s[13]++;
    this.workingDir = workingDir;
    /* istanbul ignore next */
    cov_pigghfd2l().s[14]++;
    this.flows = new Map();
    /* istanbul ignore next */
    cov_pigghfd2l().s[15]++;
    this.executions = new Map();
    /* istanbul ignore next */
    cov_pigghfd2l().s[16]++;
    this.scheduledJobs = new Map();
    /* istanbul ignore next */
    cov_pigghfd2l().s[17]++;
    this.screenshotManager = new _screenshotmanager.ScreenshotManager({
      screenshotsDir: _path.default.join(workingDir, 'test-screenshots'),
      browserType: 'chromium'
    });
    /* istanbul ignore next */
    cov_pigghfd2l().s[18]++;
    this.initializeDefaultFlows();
  }
  /**
  * Inicializar flujos predeterminados
  */
  initializeDefaultFlows() {
    /* istanbul ignore next */
    cov_pigghfd2l().f[5]++;
    cov_pigghfd2l().s[19]++;
    // Flujo de CI/CD completo
    this.registerFlow({
      id: 'ci-cd-complete',
      name: 'CI/CD Completo',
      description: 'Flujo completo de integración continua y despliegue',
      steps: [{
        id: 'install-deps',
        name: 'Instalar Dependencias',
        type: 'build',
        command: 'npm ci',
        timeout: 120000,
        continueOnFailure: false,
        dependencies: [],
        artifacts: ['node_modules']
      }, {
        id: 'lint-check',
        name: 'Verificación de Linting',
        type: 'validation',
        command: 'npm run lint',
        timeout: 60000,
        continueOnFailure: true,
        dependencies: ['install-deps']
      }, {
        id: 'type-check',
        name: 'Verificación de Tipos',
        type: 'validation',
        command: 'npm run type-check',
        timeout: 60000,
        continueOnFailure: true,
        dependencies: ['install-deps']
      }, {
        id: 'unit-tests',
        name: 'Tests Unitarios',
        type: 'test-suite',
        command: 'npm test -- --coverage --passWithNoTests',
        timeout: 300000,
        continueOnFailure: false,
        dependencies: ['install-deps'],
        artifacts: ['coverage']
      }, {
        id: 'build-app',
        name: 'Build de Aplicación',
        type: 'build',
        command: 'npm run build',
        timeout: 600000,
        continueOnFailure: false,
        dependencies: ['unit-tests'],
        artifacts: ['.next']
      }, {
        id: 'e2e-tests',
        name: 'Tests E2E',
        type: 'test-suite',
        command: 'npx playwright test --reporter=json',
        timeout: 900000,
        continueOnFailure: true,
        dependencies: ['build-app'],
        artifacts: ['test-results', 'playwright-report']
      }],
      triggers: [{
        type: 'manual',
        config: {}
      }, {
        type: 'git-push',
        config: {
          branch: 'main'
        }
      }],
      notifications: [{
        type: 'console',
        config: {},
        triggers: ['start', 'success', 'failure']
      }],
      retryPolicy: {
        maxRetries: 2,
        backoffStrategy: 'exponential',
        baseDelay: 5000,
        maxDelay: 30000
      }
    });
    // Flujo de testing rápido
    /* istanbul ignore next */
    cov_pigghfd2l().s[20]++;
    this.registerFlow({
      id: 'quick-test',
      name: 'Testing Rápido',
      description: 'Flujo rápido para desarrollo',
      steps: [{
        id: 'quick-unit-tests',
        name: 'Tests Unitarios Rápidos',
        type: 'test-suite',
        command: 'npm test -- --passWithNoTests --maxWorkers=50%',
        timeout: 120000,
        continueOnFailure: false,
        dependencies: []
      }, {
        id: 'quick-lint',
        name: 'Lint Rápido',
        type: 'validation',
        command: 'npm run lint -- --fix',
        timeout: 30000,
        continueOnFailure: true,
        dependencies: []
      }],
      triggers: [{
        type: 'manual',
        config: {}
      }, {
        type: 'file-change',
        config: {
          patterns: ['src/**/*.ts', 'src/**/*.tsx']
        }
      }],
      notifications: [{
        type: 'console',
        config: {},
        triggers: ['failure']
      }],
      retryPolicy: {
        maxRetries: 1,
        backoffStrategy: 'fixed',
        baseDelay: 2000,
        maxDelay: 2000
      }
    });
    // Flujo de performance testing
    /* istanbul ignore next */
    cov_pigghfd2l().s[21]++;
    this.registerFlow({
      id: 'performance-test',
      name: 'Testing de Performance',
      description: 'Flujo especializado en performance y Core Web Vitals',
      steps: [{
        id: 'build-for-perf',
        name: 'Build Optimizado',
        type: 'build',
        command: 'npm run build',
        timeout: 600000,
        continueOnFailure: false,
        dependencies: [],
        environment: {
          NODE_ENV: 'production'
        }
      }, {
        id: 'lighthouse-audit',
        name: 'Auditoría Lighthouse',
        type: 'validation',
        command: 'npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json',
        timeout: 180000,
        continueOnFailure: true,
        dependencies: ['build-for-perf'],
        artifacts: ['lighthouse-report.json']
      }, {
        id: 'performance-tests',
        name: 'Tests de Performance',
        type: 'test-suite',
        command: 'npm test -- --testPathPattern="performance" --passWithNoTests',
        timeout: 300000,
        continueOnFailure: true,
        dependencies: ['build-for-perf']
      }],
      triggers: [{
        type: 'manual',
        config: {}
      }],
      schedule: {
        cron: '0 2 * * *',
        timezone: 'America/Argentina/Buenos_Aires',
        enabled: false
      },
      notifications: [{
        type: 'console',
        config: {},
        triggers: ['success', 'failure']
      }],
      retryPolicy: {
        maxRetries: 1,
        backoffStrategy: 'fixed',
        baseDelay: 10000,
        maxDelay: 10000
      }
    });
  }
  /**
  * Registrar un nuevo flujo
  */
  registerFlow(flow) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[6]++;
    cov_pigghfd2l().s[22]++;
    this.flows.set(flow.id, flow);
    // Configurar schedule si existe
    /* istanbul ignore next */
    cov_pigghfd2l().s[23]++;
    if (flow.schedule?.enabled) {
      /* istanbul ignore next */
      cov_pigghfd2l().b[3][0]++;
      cov_pigghfd2l().s[24]++;
      this.scheduleFlow(flow.id, flow.schedule);
    } else
    /* istanbul ignore next */
    {
      cov_pigghfd2l().b[3][1]++;
    }
  }
  /**
  * Ejecutar un flujo
  */
  async executeFlow(flowId, trigger =
  /* istanbul ignore next */
  (cov_pigghfd2l().b[4][0]++, 'manual')) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[7]++;
    const flow =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[25]++, this.flows.get(flowId));
    /* istanbul ignore next */
    cov_pigghfd2l().s[26]++;
    if (!flow) {
      /* istanbul ignore next */
      cov_pigghfd2l().b[5][0]++;
      cov_pigghfd2l().s[27]++;
      throw new Error(`Flujo no encontrado: ${flowId}`);
    } else
    /* istanbul ignore next */
    {
      cov_pigghfd2l().b[5][1]++;
    }
    const execution =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[28]++, {
      id: `exec-${flowId}-${Date.now()}`,
      flowId,
      startTime: new Date(),
      status: 'running',
      steps: [],
      trigger,
      artifacts: [],
      logs: []
    });
    /* istanbul ignore next */
    cov_pigghfd2l().s[29]++;
    this.executions.set(execution.id, execution);
    /* istanbul ignore next */
    cov_pigghfd2l().s[30]++;
    try {
      /* istanbul ignore next */
      cov_pigghfd2l().s[31]++;
      await this.notifyFlowStart(flow, execution);
      // Ejecutar pasos en orden de dependencias
      const sortedSteps =
      /* istanbul ignore next */
      (cov_pigghfd2l().s[32]++, this.topologicalSort(flow.steps));
      /* istanbul ignore next */
      cov_pigghfd2l().s[33]++;
      for (const step of sortedSteps) {
        const stepExecution =
        /* istanbul ignore next */
        (cov_pigghfd2l().s[34]++, await this.executeStep(step, execution, flow.retryPolicy));
        /* istanbul ignore next */
        cov_pigghfd2l().s[35]++;
        execution.steps.push(stepExecution);
        /* istanbul ignore next */
        cov_pigghfd2l().s[36]++;
        if (
        /* istanbul ignore next */
        (cov_pigghfd2l().b[7][0]++, stepExecution.status === 'failed') &&
        /* istanbul ignore next */
        (cov_pigghfd2l().b[7][1]++, !step.continueOnFailure)) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[6][0]++;
          cov_pigghfd2l().s[37]++;
          execution.status = 'failed';
          /* istanbul ignore next */
          cov_pigghfd2l().s[38]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[6][1]++;
        }
      }
      /* istanbul ignore next */
      cov_pigghfd2l().s[39]++;
      if (execution.status === 'running') {
        /* istanbul ignore next */
        cov_pigghfd2l().b[8][0]++;
        cov_pigghfd2l().s[40]++;
        execution.status = 'success';
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[8][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_pigghfd2l().s[41]++;
      execution.status = 'failed';
      /* istanbul ignore next */
      cov_pigghfd2l().s[42]++;
      execution.logs.push(`Error en ejecución: ${error}`);
    } finally {
      /* istanbul ignore next */
      cov_pigghfd2l().s[43]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_pigghfd2l().s[44]++;
      await this.notifyFlowComplete(flow, execution);
    }
    /* istanbul ignore next */
    cov_pigghfd2l().s[45]++;
    return execution;
  }
  /**
  * Ejecutar un paso individual
  */
  async executeStep(step, execution, retryPolicy) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[8]++;
    const stepExecution =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[46]++, {
      stepId: step.id,
      startTime: new Date(),
      status: 'running',
      artifacts: [],
      retryCount: 0
    });
    let lastError;
    /* istanbul ignore next */
    cov_pigghfd2l().s[47]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[48]++, 0); attempt <= retryPolicy.maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_pigghfd2l().s[49]++;
      try {
        /* istanbul ignore next */
        cov_pigghfd2l().s[50]++;
        stepExecution.retryCount = attempt;
        /* istanbul ignore next */
        cov_pigghfd2l().s[51]++;
        if (attempt > 0) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[9][0]++;
          const delay =
          /* istanbul ignore next */
          (cov_pigghfd2l().s[52]++, this.calculateBackoffDelay(attempt, retryPolicy));
          /* istanbul ignore next */
          cov_pigghfd2l().s[53]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_pigghfd2l().f[9]++;
            cov_pigghfd2l().s[54]++;
            return setTimeout(resolve, delay);
          });
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[9][1]++;
        }
        const {
          stdout,
          stderr
        } =
        /* istanbul ignore next */
        (cov_pigghfd2l().s[55]++, await execAsync(step.command, {
          cwd: this.workingDir,
          timeout: step.timeout,
          env: {
            ...process.env,
            ...step.environment
          }
        }));
        /* istanbul ignore next */
        cov_pigghfd2l().s[56]++;
        stepExecution.status = 'success';
        /* istanbul ignore next */
        cov_pigghfd2l().s[57]++;
        stepExecution.stdout = stdout;
        /* istanbul ignore next */
        cov_pigghfd2l().s[58]++;
        stepExecution.stderr = stderr;
        /* istanbul ignore next */
        cov_pigghfd2l().s[59]++;
        stepExecution.exitCode = 0;
        /* istanbul ignore next */
        cov_pigghfd2l().s[60]++;
        stepExecution.endTime = new Date();
        // Recopilar artifacts
        /* istanbul ignore next */
        cov_pigghfd2l().s[61]++;
        if (step.artifacts) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[10][0]++;
          cov_pigghfd2l().s[62]++;
          stepExecution.artifacts = await this.collectArtifacts(step.artifacts);
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[10][1]++;
        }
        cov_pigghfd2l().s[63]++;
        break;
      } catch (error) {
        /* istanbul ignore next */
        cov_pigghfd2l().s[64]++;
        lastError = error;
        /* istanbul ignore next */
        cov_pigghfd2l().s[65]++;
        stepExecution.stderr =
        /* istanbul ignore next */
        (cov_pigghfd2l().b[11][0]++, error.stderr) ||
        /* istanbul ignore next */
        (cov_pigghfd2l().b[11][1]++, error.message);
        /* istanbul ignore next */
        cov_pigghfd2l().s[66]++;
        stepExecution.stdout =
        /* istanbul ignore next */
        (cov_pigghfd2l().b[12][0]++, error.stdout) ||
        /* istanbul ignore next */
        (cov_pigghfd2l().b[12][1]++, '');
        /* istanbul ignore next */
        cov_pigghfd2l().s[67]++;
        stepExecution.exitCode =
        /* istanbul ignore next */
        (cov_pigghfd2l().b[13][0]++, error.code) ||
        /* istanbul ignore next */
        (cov_pigghfd2l().b[13][1]++, 1);
        /* istanbul ignore next */
        cov_pigghfd2l().s[68]++;
        if (attempt === retryPolicy.maxRetries) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[14][0]++;
          cov_pigghfd2l().s[69]++;
          stepExecution.status = 'failed';
          /* istanbul ignore next */
          cov_pigghfd2l().s[70]++;
          stepExecution.endTime = new Date();
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[14][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_pigghfd2l().s[71]++;
    return stepExecution;
  }
  /**
  * Ordenamiento topológico de pasos basado en dependencias
  */
  topologicalSort(steps) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[10]++;
    const visited =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[72]++, new Set());
    const result =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[73]++, []);
    const stepMap =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[74]++, new Map(steps.map(step => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[11]++;
      cov_pigghfd2l().s[75]++;
      return [step.id, step];
    })));
    /* istanbul ignore next */
    cov_pigghfd2l().s[76]++;
    const visit = stepId => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[12]++;
      cov_pigghfd2l().s[77]++;
      if (visited.has(stepId)) {
        /* istanbul ignore next */
        cov_pigghfd2l().b[15][0]++;
        cov_pigghfd2l().s[78]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[15][1]++;
      }
      cov_pigghfd2l().s[79]++;
      visited.add(stepId);
      const step =
      /* istanbul ignore next */
      (cov_pigghfd2l().s[80]++, stepMap.get(stepId));
      /* istanbul ignore next */
      cov_pigghfd2l().s[81]++;
      if (!step) {
        /* istanbul ignore next */
        cov_pigghfd2l().b[16][0]++;
        cov_pigghfd2l().s[82]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[16][1]++;
      }
      // Visitar dependencias primero
      cov_pigghfd2l().s[83]++;
      step.dependencies.forEach(depId => {
        /* istanbul ignore next */
        cov_pigghfd2l().f[13]++;
        cov_pigghfd2l().s[84]++;
        return visit(depId);
      });
      /* istanbul ignore next */
      cov_pigghfd2l().s[85]++;
      result.push(step);
    };
    /* istanbul ignore next */
    cov_pigghfd2l().s[86]++;
    steps.forEach(step => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[14]++;
      cov_pigghfd2l().s[87]++;
      return visit(step.id);
    });
    /* istanbul ignore next */
    cov_pigghfd2l().s[88]++;
    return result;
  }
  /**
  * Calcular delay de backoff
  */
  calculateBackoffDelay(attempt, policy) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[15]++;
    let delay;
    /* istanbul ignore next */
    cov_pigghfd2l().s[89]++;
    switch (policy.backoffStrategy) {
      case 'linear':
        /* istanbul ignore next */
        cov_pigghfd2l().b[17][0]++;
        cov_pigghfd2l().s[90]++;
        delay = policy.baseDelay * attempt;
        /* istanbul ignore next */
        cov_pigghfd2l().s[91]++;
        break;
      case 'exponential':
        /* istanbul ignore next */
        cov_pigghfd2l().b[17][1]++;
        cov_pigghfd2l().s[92]++;
        delay = policy.baseDelay * Math.pow(2, attempt - 1);
        /* istanbul ignore next */
        cov_pigghfd2l().s[93]++;
        break;
      case 'fixed':
        /* istanbul ignore next */
        cov_pigghfd2l().b[17][2]++;
      default:
        /* istanbul ignore next */
        cov_pigghfd2l().b[17][3]++;
        cov_pigghfd2l().s[94]++;
        delay = policy.baseDelay;
        /* istanbul ignore next */
        cov_pigghfd2l().s[95]++;
        break;
    }
    /* istanbul ignore next */
    cov_pigghfd2l().s[96]++;
    return Math.min(delay, policy.maxDelay);
  }
  /**
  * Recopilar artifacts
  */
  async collectArtifacts(artifactPaths) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[16]++;
    const artifacts =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[97]++, []);
    /* istanbul ignore next */
    cov_pigghfd2l().s[98]++;
    for (const artifactPath of artifactPaths) {
      const fullPath =
      /* istanbul ignore next */
      (cov_pigghfd2l().s[99]++, _path.default.join(this.workingDir, artifactPath));
      /* istanbul ignore next */
      cov_pigghfd2l().s[100]++;
      if (_fs.default.existsSync(fullPath)) {
        /* istanbul ignore next */
        cov_pigghfd2l().b[18][0]++;
        cov_pigghfd2l().s[101]++;
        artifacts.push(fullPath);
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[18][1]++;
      }
    }
    /* istanbul ignore next */
    cov_pigghfd2l().s[102]++;
    return artifacts;
  }
  /**
  * Programar ejecución de flujo
  */
  scheduleFlow(flowId, schedule) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[17]++;
    cov_pigghfd2l().s[103]++;
    // Implementación simplificada - en producción usar cron job real
    console.log(`📅 Flujo ${flowId} programado: ${schedule.cron}`);
  }
  /**
  * Notificar inicio de flujo
  */
  async notifyFlowStart(flow, execution) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[18]++;
    const startNotifications =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[104]++, flow.notifications.filter(n => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[19]++;
      cov_pigghfd2l().s[105]++;
      return /* istanbul ignore next */(cov_pigghfd2l().b[19][0]++, n.triggers.includes('start')) ||
      /* istanbul ignore next */
      (cov_pigghfd2l().b[19][1]++, n.triggers.includes('always'));
    }));
    /* istanbul ignore next */
    cov_pigghfd2l().s[106]++;
    for (const notification of startNotifications) {
      /* istanbul ignore next */
      cov_pigghfd2l().s[107]++;
      await this.sendNotification(notification, 'start', flow, execution);
    }
  }
  /**
  * Notificar finalización de flujo
  */
  async notifyFlowComplete(flow, execution) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[20]++;
    const completeNotifications =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[108]++, flow.notifications.filter(n => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[21]++;
      cov_pigghfd2l().s[109]++;
      return /* istanbul ignore next */(cov_pigghfd2l().b[20][0]++, n.triggers.includes(execution.status)) ||
      /* istanbul ignore next */
      (cov_pigghfd2l().b[20][1]++, n.triggers.includes('always'));
    }));
    /* istanbul ignore next */
    cov_pigghfd2l().s[110]++;
    for (const notification of completeNotifications) {
      /* istanbul ignore next */
      cov_pigghfd2l().s[111]++;
      await this.sendNotification(notification, execution.status, flow, execution);
    }
  }
  /**
  * Enviar notificación
  */
  async sendNotification(notification, event, flow, execution) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[22]++;
    cov_pigghfd2l().s[112]++;
    switch (notification.type) {
      case 'console':
        /* istanbul ignore next */
        cov_pigghfd2l().b[21][0]++;
        cov_pigghfd2l().s[113]++;
        console.log(`🔔 [${event.toUpperCase()}] Flujo: ${flow.name} | Ejecución: ${execution.id}`);
        /* istanbul ignore next */
        cov_pigghfd2l().s[114]++;
        break;
    }
  }
  /**
  * Obtener flujos disponibles
  */
  getAvailableFlows() {
    /* istanbul ignore next */
    cov_pigghfd2l().f[23]++;
    cov_pigghfd2l().s[115]++;
    return Array.from(this.flows.values());
  }
  /**
  * Obtener ejecuciones
  */
  getExecutions(flowId) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[24]++;
    const executions =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[116]++, Array.from(this.executions.values()));
    /* istanbul ignore next */
    cov_pigghfd2l().s[117]++;
    return flowId ?
    /* istanbul ignore next */
    (cov_pigghfd2l().b[22][0]++, executions.filter(e => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[25]++;
      cov_pigghfd2l().s[118]++;
      return e.flowId === flowId;
    })) :
    /* istanbul ignore next */
    (cov_pigghfd2l().b[22][1]++, executions);
  }
  /**
  * Obtener ejecución específica
  */
  getExecution(executionId) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[26]++;
    cov_pigghfd2l().s[119]++;
    return this.executions.get(executionId);
  }
  /**
  * Ejecutar flujo con capturas de pantalla
  */
  async executeFlowWithScreenshots(flowId, screenshotConfig, trigger =
  /* istanbul ignore next */
  (cov_pigghfd2l().b[23][0]++, 'manual')) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[27]++;
    const flow =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[120]++, this.flows.get(flowId));
    /* istanbul ignore next */
    cov_pigghfd2l().s[121]++;
    if (!flow) {
      /* istanbul ignore next */
      cov_pigghfd2l().b[24][0]++;
      cov_pigghfd2l().s[122]++;
      throw new Error(`Flow ${flowId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_pigghfd2l().b[24][1]++;
    }
    const execution =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[123]++, {
      id: `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      flowId,
      startTime: new Date(),
      status: 'running',
      steps: [],
      trigger,
      artifacts: [],
      logs: [],
      screenshots: [],
      screenshotConfig
    });
    /* istanbul ignore next */
    cov_pigghfd2l().s[124]++;
    this.executions.set(execution.id, execution);
    /* istanbul ignore next */
    cov_pigghfd2l().s[125]++;
    try {
      /* istanbul ignore next */
      cov_pigghfd2l().s[126]++;
      // Inicializar screenshot manager si está habilitado
      if (
      /* istanbul ignore next */
      (cov_pigghfd2l().b[26][0]++, screenshotConfig.enabled) &&
      /* istanbul ignore next */
      (cov_pigghfd2l().b[26][1]++, screenshotConfig.baseUrl)) {
        /* istanbul ignore next */
        cov_pigghfd2l().b[25][0]++;
        cov_pigghfd2l().s[127]++;
        await this.screenshotManager.initialize({
          headless: false
        });
        /* istanbul ignore next */
        cov_pigghfd2l().s[128]++;
        await this.screenshotManager.navigateTo(screenshotConfig.baseUrl);
        // Captura inicial si está configurada
        /* istanbul ignore next */
        cov_pigghfd2l().s[129]++;
        if (screenshotConfig.captureOnStart) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[27][0]++;
          const screenshot =
          /* istanbul ignore next */
          (cov_pigghfd2l().s[130]++, await this.screenshotManager.captureScreenshot(`${execution.id}_start`, `Inicio del flujo ${flow.name}`, screenshotConfig.screenshotOptions));
          /* istanbul ignore next */
          cov_pigghfd2l().s[131]++;
          execution.screenshots.push(screenshot);
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[27][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[25][1]++;
      }
      cov_pigghfd2l().s[132]++;
      await this.notifyFlowStart(flow, execution);
      const sortedSteps =
      /* istanbul ignore next */
      (cov_pigghfd2l().s[133]++, this.topologicalSort(flow.steps));
      /* istanbul ignore next */
      cov_pigghfd2l().s[134]++;
      for (const step of sortedSteps) {
        const stepExecution =
        /* istanbul ignore next */
        (cov_pigghfd2l().s[135]++, await this.executeStepWithScreenshots(step, execution, flow.retryPolicy, screenshotConfig));
        /* istanbul ignore next */
        cov_pigghfd2l().s[136]++;
        execution.steps.push(stepExecution);
        /* istanbul ignore next */
        cov_pigghfd2l().s[137]++;
        if (
        /* istanbul ignore next */
        (cov_pigghfd2l().b[29][0]++, stepExecution.status === 'failed') &&
        /* istanbul ignore next */
        (cov_pigghfd2l().b[29][1]++, !step.continueOnFailure)) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[28][0]++;
          cov_pigghfd2l().s[138]++;
          execution.status = 'failed';
          /* istanbul ignore next */
          cov_pigghfd2l().s[139]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[28][1]++;
        }
      }
      /* istanbul ignore next */
      cov_pigghfd2l().s[140]++;
      if (execution.status === 'running') {
        /* istanbul ignore next */
        cov_pigghfd2l().b[30][0]++;
        cov_pigghfd2l().s[141]++;
        execution.status = 'success';
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[30][1]++;
      }
      // Captura final si está configurada
      cov_pigghfd2l().s[142]++;
      if (
      /* istanbul ignore next */
      (cov_pigghfd2l().b[32][0]++, screenshotConfig.enabled) &&
      /* istanbul ignore next */
      (cov_pigghfd2l().b[32][1]++, screenshotConfig.captureOnEnd)) {
        /* istanbul ignore next */
        cov_pigghfd2l().b[31][0]++;
        const screenshot =
        /* istanbul ignore next */
        (cov_pigghfd2l().s[143]++, await this.screenshotManager.captureScreenshot(`${execution.id}_end`, `Fin del flujo ${flow.name} - Estado: ${execution.status}`, screenshotConfig.screenshotOptions));
        /* istanbul ignore next */
        cov_pigghfd2l().s[144]++;
        execution.screenshots.push(screenshot);
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[31][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_pigghfd2l().s[145]++;
      execution.status = 'failed';
      /* istanbul ignore next */
      cov_pigghfd2l().s[146]++;
      execution.logs.push(`Flow execution error: ${error}`);
      // Captura de error si está configurada
      /* istanbul ignore next */
      cov_pigghfd2l().s[147]++;
      if (
      /* istanbul ignore next */
      (cov_pigghfd2l().b[34][0]++, screenshotConfig.enabled) &&
      /* istanbul ignore next */
      (cov_pigghfd2l().b[34][1]++, screenshotConfig.captureOnError)) {
        /* istanbul ignore next */
        cov_pigghfd2l().b[33][0]++;
        cov_pigghfd2l().s[148]++;
        try {
          const screenshot =
          /* istanbul ignore next */
          (cov_pigghfd2l().s[149]++, await this.screenshotManager.captureScreenshot(`${execution.id}_error`, `Error en flujo ${flow.name}: ${error}`, screenshotConfig.screenshotOptions));
          /* istanbul ignore next */
          cov_pigghfd2l().s[150]++;
          execution.screenshots.push(screenshot);
        } catch (screenshotError) {
          /* istanbul ignore next */
          cov_pigghfd2l().s[151]++;
          execution.logs.push(`Screenshot error: ${screenshotError}`);
        }
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[33][1]++;
      }
    } finally {
      /* istanbul ignore next */
      cov_pigghfd2l().s[152]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_pigghfd2l().s[153]++;
      await this.notifyFlowComplete(flow, execution);
      // Cerrar screenshot manager
      /* istanbul ignore next */
      cov_pigghfd2l().s[154]++;
      if (screenshotConfig.enabled) {
        /* istanbul ignore next */
        cov_pigghfd2l().b[35][0]++;
        cov_pigghfd2l().s[155]++;
        await this.screenshotManager.close();
      } else
      /* istanbul ignore next */
      {
        cov_pigghfd2l().b[35][1]++;
      }
    }
    /* istanbul ignore next */
    cov_pigghfd2l().s[156]++;
    return execution;
  }
  /**
  * Ejecutar paso con capturas de pantalla
  */
  async executeStepWithScreenshots(step, execution, retryPolicy, screenshotConfig) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[28]++;
    const stepExecution =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[157]++, {
      stepId: step.id,
      startTime: new Date(),
      status: 'running',
      artifacts: [],
      retryCount: 0,
      screenshots: []
    });
    let attempt =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[158]++, 0);
    let success =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[159]++, false);
    /* istanbul ignore next */
    cov_pigghfd2l().s[160]++;
    while (
    /* istanbul ignore next */
    (cov_pigghfd2l().b[36][0]++, attempt <= retryPolicy.maxRetries) &&
    /* istanbul ignore next */
    (cov_pigghfd2l().b[36][1]++, !success)) {
      /* istanbul ignore next */
      cov_pigghfd2l().s[161]++;
      try {
        /* istanbul ignore next */
        cov_pigghfd2l().s[162]++;
        stepExecution.retryCount = attempt;
        // Captura antes del paso
        /* istanbul ignore next */
        cov_pigghfd2l().s[163]++;
        if (screenshotConfig.enabled) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[37][0]++;
          const screenshot =
          /* istanbul ignore next */
          (cov_pigghfd2l().s[164]++, await this.screenshotManager.captureScreenshot(`${execution.id}_step_${step.id}_attempt_${attempt}_before`, `Antes de ejecutar paso: ${step.name} (intento ${attempt + 1})`, screenshotConfig.screenshotOptions));
          /* istanbul ignore next */
          cov_pigghfd2l().s[165]++;
          stepExecution.screenshots.push(screenshot);
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[37][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_pigghfd2l().s[166]++, await execAsync(step.command, {
          cwd: this.workingDir,
          timeout: step.timeout,
          env: {
            ...process.env,
            ...step.environment
          }
        }));
        /* istanbul ignore next */
        cov_pigghfd2l().s[167]++;
        stepExecution.stdout = result.stdout;
        /* istanbul ignore next */
        cov_pigghfd2l().s[168]++;
        stepExecution.stderr = result.stderr;
        /* istanbul ignore next */
        cov_pigghfd2l().s[169]++;
        stepExecution.exitCode = 0;
        /* istanbul ignore next */
        cov_pigghfd2l().s[170]++;
        stepExecution.status = 'success';
        /* istanbul ignore next */
        cov_pigghfd2l().s[171]++;
        success = true;
        // Captura después del paso exitoso
        /* istanbul ignore next */
        cov_pigghfd2l().s[172]++;
        if (screenshotConfig.enabled) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[38][0]++;
          const screenshot =
          /* istanbul ignore next */
          (cov_pigghfd2l().s[173]++, await this.screenshotManager.captureScreenshot(`${execution.id}_step_${step.id}_success`, `Paso completado exitosamente: ${step.name}`, screenshotConfig.screenshotOptions));
          /* istanbul ignore next */
          cov_pigghfd2l().s[174]++;
          stepExecution.screenshots.push(screenshot);
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[38][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_pigghfd2l().s[175]++;
        stepExecution.stderr = error.message;
        /* istanbul ignore next */
        cov_pigghfd2l().s[176]++;
        stepExecution.exitCode =
        /* istanbul ignore next */
        (cov_pigghfd2l().b[39][0]++, error.code) ||
        /* istanbul ignore next */
        (cov_pigghfd2l().b[39][1]++, 1);
        // Captura de error del paso
        /* istanbul ignore next */
        cov_pigghfd2l().s[177]++;
        if (
        /* istanbul ignore next */
        (cov_pigghfd2l().b[41][0]++, screenshotConfig.enabled) &&
        /* istanbul ignore next */
        (cov_pigghfd2l().b[41][1]++, screenshotConfig.captureOnError)) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[40][0]++;
          cov_pigghfd2l().s[178]++;
          try {
            const screenshot =
            /* istanbul ignore next */
            (cov_pigghfd2l().s[179]++, await this.screenshotManager.captureScreenshot(`${execution.id}_step_${step.id}_error_${attempt}`, `Error en paso: ${step.name} (intento ${attempt + 1}) - ${error.message}`, screenshotConfig.screenshotOptions));
            /* istanbul ignore next */
            cov_pigghfd2l().s[180]++;
            stepExecution.screenshots.push(screenshot);
          } catch (screenshotError) {
            /* istanbul ignore next */
            cov_pigghfd2l().s[181]++;
            execution.logs.push(`Screenshot error in step ${step.id}: ${screenshotError}`);
          }
        } else
        /* istanbul ignore next */
        {
          cov_pigghfd2l().b[40][1]++;
        }
        cov_pigghfd2l().s[182]++;
        if (attempt < retryPolicy.maxRetries) {
          /* istanbul ignore next */
          cov_pigghfd2l().b[42][0]++;
          const delay =
          /* istanbul ignore next */
          (cov_pigghfd2l().s[183]++, this.calculateBackoffDelay(attempt, retryPolicy));
          /* istanbul ignore next */
          cov_pigghfd2l().s[184]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_pigghfd2l().f[29]++;
            cov_pigghfd2l().s[185]++;
            return setTimeout(resolve, delay);
          });
        } else {
          /* istanbul ignore next */
          cov_pigghfd2l().b[42][1]++;
          cov_pigghfd2l().s[186]++;
          stepExecution.status = 'failed';
        }
      }
      /* istanbul ignore next */
      cov_pigghfd2l().s[187]++;
      attempt++;
    }
    /* istanbul ignore next */
    cov_pigghfd2l().s[188]++;
    stepExecution.endTime = new Date();
    // Recopilar artefactos
    /* istanbul ignore next */
    cov_pigghfd2l().s[189]++;
    if (step.artifacts) {
      /* istanbul ignore next */
      cov_pigghfd2l().b[43][0]++;
      cov_pigghfd2l().s[190]++;
      stepExecution.artifacts = await this.collectArtifacts(step.artifacts);
    } else
    /* istanbul ignore next */
    {
      cov_pigghfd2l().b[43][1]++;
    }
    cov_pigghfd2l().s[191]++;
    return stepExecution;
  }
  /**
  * Obtener screenshots de una ejecución
  */
  getExecutionScreenshots(executionId) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[30]++;
    const execution =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[192]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_pigghfd2l().s[193]++;
    if (!execution) {
      /* istanbul ignore next */
      cov_pigghfd2l().b[44][0]++;
      cov_pigghfd2l().s[194]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_pigghfd2l().b[44][1]++;
    }
    const allScreenshots =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[195]++, [...execution.screenshots]);
    // Agregar screenshots de los pasos
    /* istanbul ignore next */
    cov_pigghfd2l().s[196]++;
    execution.steps.forEach(step => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[31]++;
      cov_pigghfd2l().s[197]++;
      allScreenshots.push(...step.screenshots);
    });
    /* istanbul ignore next */
    cov_pigghfd2l().s[198]++;
    return allScreenshots.sort((a, b) => {
      /* istanbul ignore next */
      cov_pigghfd2l().f[32]++;
      cov_pigghfd2l().s[199]++;
      return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
    });
  }
  /**
  * Obtener estadísticas de screenshots
  */
  getScreenshotStats(executionId) {
    /* istanbul ignore next */
    cov_pigghfd2l().f[33]++;
    const screenshots =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[200]++, this.getExecutionScreenshots(executionId));
    const execution =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[201]++, this.executions.get(executionId));
    const stats =
    /* istanbul ignore next */
    (cov_pigghfd2l().s[202]++, {
      total: screenshots.length,
      byStep: {},
      totalSize: screenshots.reduce((sum, s) => {
        /* istanbul ignore next */
        cov_pigghfd2l().f[34]++;
        cov_pigghfd2l().s[203]++;
        return sum + (
        /* istanbul ignore next */
        (cov_pigghfd2l().b[45][0]++, s.fileSize) ||
        /* istanbul ignore next */
        (cov_pigghfd2l().b[45][1]++, 0));
      }, 0)
    });
    /* istanbul ignore next */
    cov_pigghfd2l().s[204]++;
    if (execution) {
      /* istanbul ignore next */
      cov_pigghfd2l().b[46][0]++;
      cov_pigghfd2l().s[205]++;
      execution.steps.forEach(step => {
        /* istanbul ignore next */
        cov_pigghfd2l().f[35]++;
        cov_pigghfd2l().s[206]++;
        stats.byStep[step.stepId] = step.screenshots.length;
      });
    } else
    /* istanbul ignore next */
    {
      cov_pigghfd2l().b[46][1]++;
    }
    cov_pigghfd2l().s[207]++;
    return stats;
  }
}
const testFlowManager =
/* istanbul ignore next */
(cov_pigghfd2l().s[208]++, new AdvancedTestFlowManager());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,