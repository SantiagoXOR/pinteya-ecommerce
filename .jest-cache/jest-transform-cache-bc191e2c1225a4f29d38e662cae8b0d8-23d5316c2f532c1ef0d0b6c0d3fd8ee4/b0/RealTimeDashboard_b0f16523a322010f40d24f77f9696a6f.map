{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\logistics\\RealTimeDashboard.tsx"],"sourcesContent":["// =====================================================\r\n// COMPONENTE: REAL TIME DASHBOARD ENTERPRISE\r\n// Descripción: Dashboard integrado con mapas, WebSockets y tracking live\r\n// Basado en: MapLibre GL JS + WebSockets + React + TanStack Query\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { \r\n  Map as MapIcon, \r\n  Activity, \r\n  Bell, \r\n  Zap, \r\n  Package, \r\n  Truck,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Clock,\r\n  BarChart3,\r\n  Settings,\r\n  Maximize2,\r\n  RefreshCw\r\n} from 'lucide-react';\r\nimport { LogisticsMap } from './LogisticsMap';\r\nimport { TrackingTimeline } from './TrackingTimeline';\r\nimport { LogisticsAlerts } from './LogisticsAlerts';\r\nimport { GeofenceManager } from './GeofenceManager';\r\nimport { useLogisticsDashboard } from '@/hooks/admin/useLogisticsDashboard';\r\nimport { useLogisticsWebSocket, useLogisticsAlerts } from '@/hooks/admin/useLogisticsWebSocket';\r\nimport { useShipments } from '@/hooks/admin/useShipments';\r\nimport { cn } from '@/lib/core/utils';\r\n\r\n// =====================================================\r\n// INTERFACES\r\n// =====================================================\r\n\r\ninterface RealTimeDashboardProps {\r\n  className?: string;\r\n}\r\n\r\ninterface LiveMetric {\r\n  label: string;\r\n  value: string | number;\r\n  change: number;\r\n  trend: 'up' | 'down' | 'stable';\r\n  icon: React.ComponentType<{ className?: string }>;\r\n  color: string;\r\n}\r\n\r\n// =====================================================\r\n// COMPONENTE PRINCIPAL\r\n// =====================================================\r\n\r\nexport function RealTimeDashboard({ className }: RealTimeDashboardProps) {\r\n  const [selectedShipment, setSelectedShipment] = useState<any>(null);\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  \r\n  // Hooks de datos\r\n  const { \r\n    data: dashboardData, \r\n    isLoading: dashboardLoading, \r\n    refetch: refetchDashboard \r\n  } = useLogisticsDashboard();\r\n  \r\n  const { \r\n    data: shipmentsData, \r\n    isLoading: shipmentsLoading \r\n  } = useShipments({ \r\n    limit: 50, \r\n    order_by: 'created_at', \r\n    order_direction: 'desc' \r\n  });\r\n  \r\n  // WebSocket tiempo real\r\n  const {\r\n    isConnected,\r\n    connectionState,\r\n    lastTrackingUpdate,\r\n    connect,\r\n    disconnect\r\n  } = useLogisticsWebSocket({\r\n    enabled: true,\r\n    autoConnect: true,\r\n    showNotifications: true,\r\n    simulateInDevelopment: false // Deshabilitado para evitar notificaciones persistentes\r\n  });\r\n  \r\n  // Alertas tiempo real\r\n  const {\r\n    alerts,\r\n    criticalAlerts,\r\n    unreadAlerts,\r\n    clearAlerts\r\n  } = useLogisticsAlerts();\r\n  \r\n  // =====================================================\r\n  // MÉTRICAS EN TIEMPO REAL\r\n  // =====================================================\r\n  \r\n  const liveMetrics: LiveMetric[] = [\r\n    {\r\n      label: 'Envíos Activos',\r\n      value: dashboardData?.stats.in_transit_shipments || 0,\r\n      change: 5.2,\r\n      trend: 'up',\r\n      icon: Truck,\r\n      color: 'text-blue-600'\r\n    },\r\n    {\r\n      label: 'En Reparto',\r\n      value: dashboardData?.stats.pending_shipments || 0,\r\n      change: -2.1,\r\n      trend: 'down',\r\n      icon: Package,\r\n      color: 'text-orange-600'\r\n    },\r\n    {\r\n      label: 'Entregados Hoy',\r\n      value: dashboardData?.stats.delivered_shipments || 0,\r\n      change: 12.5,\r\n      trend: 'up',\r\n      icon: CheckCircle,\r\n      color: 'text-green-600'\r\n    },\r\n    {\r\n      label: 'Alertas Críticas',\r\n      value: criticalAlerts.length,\r\n      change: 0,\r\n      trend: 'stable',\r\n      icon: AlertTriangle,\r\n      color: 'text-red-600'\r\n    }\r\n  ];\r\n  \r\n  // =====================================================\r\n  // EFECTOS\r\n  // =====================================================\r\n  \r\n  useEffect(() => {\r\n    // Refrescar dashboard cuando llegan actualizaciones\r\n    if (lastTrackingUpdate) {\r\n      refetchDashboard();\r\n    }\r\n  }, [lastTrackingUpdate, refetchDashboard]);\r\n  \r\n  // =====================================================\r\n  // HANDLERS\r\n  // =====================================================\r\n  \r\n  const handleShipmentSelect = (shipment: any) => {\r\n    setSelectedShipment(shipment);\r\n    setActiveTab('tracking');\r\n  };\r\n  \r\n  const handleToggleConnection = () => {\r\n    if (isConnected) {\r\n      disconnect();\r\n    } else {\r\n      connect();\r\n    }\r\n  };\r\n  \r\n  const handleFullscreen = () => {\r\n    setIsFullscreen(!isFullscreen);\r\n  };\r\n  \r\n  const handleRefresh = () => {\r\n    refetchDashboard();\r\n  };\r\n  \r\n  if (dashboardLoading || shipmentsLoading) {\r\n    return <DashboardSkeleton />;\r\n  }\r\n  \r\n  return (\r\n    <div className={cn(\r\n      \"space-y-6 p-6\",\r\n      isFullscreen && \"fixed inset-0 z-50 bg-background overflow-auto\",\r\n      className\r\n    )}>\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\r\n            <Activity className=\"w-8 h-8\" />\r\n            Dashboard en Tiempo Real\r\n          </h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Monitoreo live de logística con tracking GPS y alertas automáticas\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center gap-3\">\r\n          {/* Estado de conexión */}\r\n          <Badge \r\n            variant={isConnected ? \"default\" : \"secondary\"} \r\n            className=\"flex items-center gap-1\"\r\n          >\r\n            {isConnected ? (\r\n              <>\r\n                <Zap className=\"w-3 h-3\" />\r\n                Tiempo Real\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Clock className=\"w-3 h-3\" />\r\n                Desconectado\r\n              </>\r\n            )}\r\n          </Badge>\r\n          \r\n          {/* Alertas */}\r\n          {unreadAlerts.length > 0 && (\r\n            <Badge variant=\"destructive\" className=\"flex items-center gap-1\">\r\n              <Bell className=\"w-3 h-3\" />\r\n              {unreadAlerts.length} Alertas\r\n            </Badge>\r\n          )}\r\n          \r\n          {/* Controles */}\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleToggleConnection}\r\n          >\r\n            {isConnected ? 'Desconectar' : 'Conectar'}\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleRefresh}\r\n          >\r\n            <RefreshCw className=\"w-4 h-4\" />\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleFullscreen}\r\n          >\r\n            <Maximize2 className=\"w-4 h-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Métricas en tiempo real */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        {liveMetrics.map((metric, index) => (\r\n          <Card key={index} className=\"relative overflow-hidden\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">\r\n                    {metric.label}\r\n                  </p>\r\n                  <p className=\"text-2xl font-bold\">{metric.value}</p>\r\n                  <div className=\"flex items-center gap-1 mt-1\">\r\n                    <span className={cn(\r\n                      \"text-xs font-medium\",\r\n                      metric.trend === 'up' && \"text-green-600\",\r\n                      metric.trend === 'down' && \"text-red-600\",\r\n                      metric.trend === 'stable' && \"text-gray-600\"\r\n                    )}>\r\n                      {metric.trend === 'up' && '+'}\r\n                      {metric.change}%\r\n                    </span>\r\n                    <span className=\"text-xs text-muted-foreground\">vs ayer</span>\r\n                  </div>\r\n                </div>\r\n                <metric.icon className={cn(\"w-8 h-8\", metric.color)} />\r\n              </div>\r\n              \r\n              {/* Indicador de tiempo real */}\r\n              {isConnected && (\r\n                <div className=\"absolute top-2 right-2\">\r\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n      \r\n      {/* Alertas críticas */}\r\n      {criticalAlerts.length > 0 && (\r\n        <LogisticsAlerts \r\n          alerts={criticalAlerts} \r\n          maxVisible={3}\r\n          onDismiss={(alertId) => console.log('Dismiss alert:', alertId)}\r\n        />\r\n      )}\r\n      \r\n      {/* Contenido principal */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Mapa principal */}\r\n        <div className=\"lg:col-span-2\">\r\n          <LogisticsMap\r\n            shipments={shipmentsData?.data || []}\r\n            selectedShipment={selectedShipment}\r\n            onShipmentSelect={handleShipmentSelect}\r\n            realTimeEnabled={isConnected}\r\n            className=\"h-[600px]\"\r\n          />\r\n        </div>\r\n        \r\n        {/* Panel lateral */}\r\n        <div className=\"space-y-6\">\r\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n            <TabsList className=\"grid w-full grid-cols-3\">\r\n              <TabsTrigger value=\"overview\">Resumen</TabsTrigger>\r\n              <TabsTrigger value=\"tracking\">Tracking</TabsTrigger>\r\n              <TabsTrigger value=\"alerts\">Alertas</TabsTrigger>\r\n            </TabsList>\r\n            \r\n            {/* Tab: Resumen */}\r\n            <TabsContent value=\"overview\" className=\"space-y-4\">\r\n              <Card>\r\n                <CardHeader className=\"pb-3\">\r\n                  <CardTitle className=\"text-lg\">Actividad Reciente</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    {shipmentsData?.data.slice(0, 5).map((shipment) => (\r\n                      <div \r\n                        key={shipment.id}\r\n                        className=\"flex items-center gap-3 p-2 rounded-lg hover:bg-muted/50 cursor-pointer\"\r\n                        onClick={() => handleShipmentSelect(shipment)}\r\n                      >\r\n                        <div className={cn(\r\n                          \"w-2 h-2 rounded-full\",\r\n                          shipment.status === 'delivered' && \"bg-green-500\",\r\n                          shipment.status === 'in_transit' && \"bg-blue-500\",\r\n                          shipment.status === 'out_for_delivery' && \"bg-orange-500\",\r\n                          shipment.status === 'exception' && \"bg-red-500\"\r\n                        )} />\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <div className=\"font-medium text-sm\">\r\n                            {shipment.shipment_number}\r\n                          </div>\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {shipment.delivery_address.city}\r\n                          </div>\r\n                        </div>\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {shipment.status}\r\n                        </Badge>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n              \r\n              <Card>\r\n                <CardHeader className=\"pb-3\">\r\n                  <CardTitle className=\"text-lg\">Estado de Conexión</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm\">WebSocket</span>\r\n                      <Badge variant={isConnected ? \"default\" : \"secondary\"}>\r\n                        {connectionState}\r\n                      </Badge>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm\">Última actualización</span>\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {lastTrackingUpdate \r\n                          ? new Date(lastTrackingUpdate.timestamp).toLocaleTimeString()\r\n                          : 'Sin datos'\r\n                        }\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm\">Alertas activas</span>\r\n                      <span className=\"text-sm font-medium\">\r\n                        {alerts.length}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </TabsContent>\r\n            \r\n            {/* Tab: Tracking */}\r\n            <TabsContent value=\"tracking\">\r\n              {selectedShipment ? (\r\n                <TrackingTimeline\r\n                  shipmentId={selectedShipment.id}\r\n                  realTime={isConnected}\r\n                  compact={true}\r\n                />\r\n              ) : (\r\n                <Card>\r\n                  <CardContent className=\"p-6 text-center\">\r\n                    <Package className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\r\n                    <p className=\"text-muted-foreground\">\r\n                      Selecciona un envío en el mapa para ver su tracking\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </TabsContent>\r\n            \r\n            {/* Tab: Alertas */}\r\n            <TabsContent value=\"alerts\">\r\n              <Card>\r\n                <CardHeader className=\"pb-3\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <CardTitle className=\"text-lg\">Alertas Activas</CardTitle>\r\n                    {alerts.length > 0 && (\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\" \r\n                        onClick={clearAlerts}\r\n                      >\r\n                        Limpiar\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                    {alerts.slice(0, 10).map((alert, index) => (\r\n                      <div \r\n                        key={index}\r\n                        className=\"flex items-start gap-3 p-3 border rounded-lg\"\r\n                      >\r\n                        <div className={cn(\r\n                          \"w-2 h-2 rounded-full mt-2\",\r\n                          alert.severity === 'critical' && \"bg-red-500\",\r\n                          alert.severity === 'high' && \"bg-orange-500\",\r\n                          alert.severity === 'medium' && \"bg-yellow-500\",\r\n                          alert.severity === 'low' && \"bg-blue-500\"\r\n                        )} />\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <div className=\"font-medium text-sm\">\r\n                            {alert.type}\r\n                          </div>\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {alert.message}\r\n                          </div>\r\n                          <div className=\"text-xs text-muted-foreground mt-1\">\r\n                            {new Date(alert.timestamp).toLocaleString()}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                    \r\n                    {alerts.length === 0 && (\r\n                      <div className=\"text-center py-8\">\r\n                        <CheckCircle className=\"w-8 h-8 text-green-500 mx-auto mb-2\" />\r\n                        <p className=\"text-muted-foreground\">\r\n                          No hay alertas activas\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Panel de geofences (opcional) */}\r\n      {activeTab === 'geofences' && (\r\n        <GeofenceManager />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// =====================================================\r\n// COMPONENTE SKELETON\r\n// =====================================================\r\n\r\nfunction DashboardSkeleton() {\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div className=\"space-y-2\">\r\n          <div className=\"h-8 w-64 bg-gray-200 rounded animate-pulse\" />\r\n          <div className=\"h-4 w-96 bg-gray-200 rounded animate-pulse\" />\r\n        </div>\r\n        <div className=\"flex gap-3\">\r\n          <div className=\"h-10 w-24 bg-gray-200 rounded animate-pulse\" />\r\n          <div className=\"h-10 w-24 bg-gray-200 rounded animate-pulse\" />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        {[...Array(4)].map((_, i) => (\r\n          <div key={i} className=\"h-32 bg-gray-200 rounded-lg animate-pulse\" />\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        <div className=\"lg:col-span-2 h-96 bg-gray-200 rounded-lg animate-pulse\" />\r\n        <div className=\"h-96 bg-gray-200 rounded-lg animate-pulse\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["RealTimeDashboard","className","selectedShipment","setSelectedShipment","useState","isFullscreen","setIsFullscreen","activeTab","setActiveTab","data","dashboardData","isLoading","dashboardLoading","refetch","refetchDashboard","useLogisticsDashboard","shipmentsData","shipmentsLoading","useShipments","limit","order_by","order_direction","isConnected","connectionState","lastTrackingUpdate","connect","disconnect","useLogisticsWebSocket","enabled","autoConnect","showNotifications","simulateInDevelopment","alerts","criticalAlerts","unreadAlerts","clearAlerts","useLogisticsAlerts","liveMetrics","label","value","stats","in_transit_shipments","change","trend","icon","Truck","color","pending_shipments","Package","delivered_shipments","CheckCircle","length","AlertTriangle","useEffect","handleShipmentSelect","shipment","handleToggleConnection","handleFullscreen","handleRefresh","DashboardSkeleton","div","cn","h1","Activity","p","Badge","variant","Zap","Clock","Bell","Button","size","onClick","RefreshCw","Maximize2","map","metric","index","Card","CardContent","span","LogisticsAlerts","maxVisible","onDismiss","alertId","console","log","LogisticsMap","shipments","onShipmentSelect","realTimeEnabled","Tabs","onValueChange","TabsList","TabsTrigger","TabsContent","CardHeader","CardTitle","slice","status","shipment_number","delivery_address","city","id","Date","timestamp","toLocaleTimeString","TrackingTimeline","shipmentId","realTime","compact","alert","severity","type","message","toLocaleString","GeofenceManager","Array","_","i"],"mappings":"AAAA,wDAAwD;AACxD,6CAA6C;AAC7C,yEAAyE;AACzE,kEAAkE;AAClE,wDAAwD;AAExD;;;;;+BAoDgBA;;;eAAAA;;;;uBAlDoB;sBACsC;wBACnD;uBACD;sBACmC;6BAelD;8BACsB;kCACI;iCACD;iCACA;uCACM;uCACoB;8BAC7B;uBACV;AAuBZ,SAASA,kBAAkB,EAAEC,SAAS,EAA0B;IACrE,MAAM,CAACC,kBAAkBC,oBAAoB,GAAGC,IAAAA,eAAQ,EAAM;IAC9D,MAAM,CAACC,cAAcC,gBAAgB,GAAGF,IAAAA,eAAQ,EAAC;IACjD,MAAM,CAACG,WAAWC,aAAa,GAAGJ,IAAAA,eAAQ,EAAC;IAE3C,iBAAiB;IACjB,MAAM,EACJK,MAAMC,aAAa,EACnBC,WAAWC,gBAAgB,EAC3BC,SAASC,gBAAgB,EAC1B,GAAGC,IAAAA,4CAAqB;IAEzB,MAAM,EACJN,MAAMO,aAAa,EACnBL,WAAWM,gBAAgB,EAC5B,GAAGC,IAAAA,0BAAY,EAAC;QACfC,OAAO;QACPC,UAAU;QACVC,iBAAiB;IACnB;IAEA,wBAAwB;IACxB,MAAM,EACJC,WAAW,EACXC,eAAe,EACfC,kBAAkB,EAClBC,OAAO,EACPC,UAAU,EACX,GAAGC,IAAAA,4CAAqB,EAAC;QACxBC,SAAS;QACTC,aAAa;QACbC,mBAAmB;QACnBC,uBAAuB,MAAM,wDAAwD;IACvF;IAEA,sBAAsB;IACtB,MAAM,EACJC,MAAM,EACNC,cAAc,EACdC,YAAY,EACZC,WAAW,EACZ,GAAGC,IAAAA,yCAAkB;IAEtB,wDAAwD;IACxD,0BAA0B;IAC1B,wDAAwD;IAExD,MAAMC,cAA4B;QAChC;YACEC,OAAO;YACPC,OAAO7B,eAAe8B,MAAMC,wBAAwB;YACpDC,QAAQ;YACRC,OAAO;YACPC,MAAMC,kBAAK;YACXC,OAAO;QACT;QACA;YACER,OAAO;YACPC,OAAO7B,eAAe8B,MAAMO,qBAAqB;YACjDL,QAAQ,CAAC;YACTC,OAAO;YACPC,MAAMI,oBAAO;YACbF,OAAO;QACT;QACA;YACER,OAAO;YACPC,OAAO7B,eAAe8B,MAAMS,uBAAuB;YACnDP,QAAQ;YACRC,OAAO;YACPC,MAAMM,wBAAW;YACjBJ,OAAO;QACT;QACA;YACER,OAAO;YACPC,OAAON,eAAekB,MAAM;YAC5BT,QAAQ;YACRC,OAAO;YACPC,MAAMQ,0BAAa;YACnBN,OAAO;QACT;KACD;IAED,wDAAwD;IACxD,UAAU;IACV,wDAAwD;IAExDO,IAAAA,gBAAS,EAAC;QACR,oDAAoD;QACpD,IAAI7B,oBAAoB;YACtBV;QACF;IACF,GAAG;QAACU;QAAoBV;KAAiB;IAEzC,wDAAwD;IACxD,WAAW;IACX,wDAAwD;IAExD,MAAMwC,uBAAuB,CAACC;QAC5BpD,oBAAoBoD;QACpB/C,aAAa;IACf;IAEA,MAAMgD,yBAAyB;QAC7B,IAAIlC,aAAa;YACfI;QACF,OAAO;YACLD;QACF;IACF;IAEA,MAAMgC,mBAAmB;QACvBnD,gBAAgB,CAACD;IACnB;IAEA,MAAMqD,gBAAgB;QACpB5C;IACF;IAEA,IAAIF,oBAAoBK,kBAAkB;QACxC,qBAAO,qBAAC0C;IACV;IAEA,qBACE,sBAACC;QAAI3D,WAAW4D,IAAAA,SAAE,EAChB,iBACAxD,gBAAgB,kDAChBJ;;0BAGA,sBAAC2D;gBAAI3D,WAAU;;kCACb,sBAAC2D;;0CACC,sBAACE;gCAAG7D,WAAU;;kDACZ,qBAAC8D,qBAAQ;wCAAC9D,WAAU;;oCAAY;;;0CAGlC,qBAAC+D;gCAAE/D,WAAU;0CAAwB;;;;kCAKvC,sBAAC2D;wBAAI3D,WAAU;;0CAEb,qBAACgE,YAAK;gCACJC,SAAS5C,cAAc,YAAY;gCACnCrB,WAAU;0CAETqB,4BACC;;sDACE,qBAAC6C,gBAAG;4CAAClE,WAAU;;wCAAY;;mDAI7B;;sDACE,qBAACmE,kBAAK;4CAACnE,WAAU;;wCAAY;;;;4BAOlCiC,aAAaiB,MAAM,GAAG,mBACrB,sBAACc,YAAK;gCAACC,SAAQ;gCAAcjE,WAAU;;kDACrC,qBAACoE,iBAAI;wCAACpE,WAAU;;oCACfiC,aAAaiB,MAAM;oCAAC;;;0CAKzB,qBAACmB,cAAM;gCACLJ,SAAQ;gCACRK,MAAK;gCACLC,SAAShB;0CAERlC,cAAc,gBAAgB;;0CAGjC,qBAACgD,cAAM;gCACLJ,SAAQ;gCACRK,MAAK;gCACLC,SAASd;0CAET,cAAA,qBAACe,sBAAS;oCAACxE,WAAU;;;0CAGvB,qBAACqE,cAAM;gCACLJ,SAAQ;gCACRK,MAAK;gCACLC,SAASf;0CAET,cAAA,qBAACiB,sBAAS;oCAACzE,WAAU;;;;;;;0BAM3B,qBAAC2D;gBAAI3D,WAAU;0BACZoC,YAAYsC,GAAG,CAAC,CAACC,QAAQC,sBACxB,qBAACC,UAAI;wBAAa7E,WAAU;kCAC1B,cAAA,sBAAC8E,iBAAW;4BAAC9E,WAAU;;8CACrB,sBAAC2D;oCAAI3D,WAAU;;sDACb,sBAAC2D;;8DACC,qBAACI;oDAAE/D,WAAU;8DACV2E,OAAOtC,KAAK;;8DAEf,qBAAC0B;oDAAE/D,WAAU;8DAAsB2E,OAAOrC,KAAK;;8DAC/C,sBAACqB;oDAAI3D,WAAU;;sEACb,sBAAC+E;4DAAK/E,WAAW4D,IAAAA,SAAE,EACjB,uBACAe,OAAOjC,KAAK,KAAK,QAAQ,kBACzBiC,OAAOjC,KAAK,KAAK,UAAU,gBAC3BiC,OAAOjC,KAAK,KAAK,YAAY;;gEAE5BiC,OAAOjC,KAAK,KAAK,QAAQ;gEACzBiC,OAAOlC,MAAM;gEAAC;;;sEAEjB,qBAACsC;4DAAK/E,WAAU;sEAAgC;;;;;;sDAGpD,qBAAC2E,OAAOhC,IAAI;4CAAC3C,WAAW4D,IAAAA,SAAE,EAAC,WAAWe,OAAO9B,KAAK;;;;gCAInDxB,6BACC,qBAACsC;oCAAI3D,WAAU;8CACb,cAAA,qBAAC2D;wCAAI3D,WAAU;;;;;uBA3BZ4E;;YAoCd5C,eAAekB,MAAM,GAAG,mBACvB,qBAAC8B,gCAAe;gBACdjD,QAAQC;gBACRiD,YAAY;gBACZC,WAAW,CAACC,UAAYC,QAAQC,GAAG,CAAC,kBAAkBF;;0BAK1D,sBAACxB;gBAAI3D,WAAU;;kCAEb,qBAAC2D;wBAAI3D,WAAU;kCACb,cAAA,qBAACsF,0BAAY;4BACXC,WAAWxE,eAAeP,QAAQ,EAAE;4BACpCP,kBAAkBA;4BAClBuF,kBAAkBnC;4BAClBoC,iBAAiBpE;4BACjBrB,WAAU;;;kCAKd,qBAAC2D;wBAAI3D,WAAU;kCACb,cAAA,sBAAC0F,UAAI;4BAACpD,OAAOhC;4BAAWqF,eAAepF;;8CACrC,sBAACqF,cAAQ;oCAAC5F,WAAU;;sDAClB,qBAAC6F,iBAAW;4CAACvD,OAAM;sDAAW;;sDAC9B,qBAACuD,iBAAW;4CAACvD,OAAM;sDAAW;;sDAC9B,qBAACuD,iBAAW;4CAACvD,OAAM;sDAAS;;;;8CAI9B,sBAACwD,iBAAW;oCAACxD,OAAM;oCAAWtC,WAAU;;sDACtC,sBAAC6E,UAAI;;8DACH,qBAACkB,gBAAU;oDAAC/F,WAAU;8DACpB,cAAA,qBAACgG,eAAS;wDAAChG,WAAU;kEAAU;;;8DAEjC,qBAAC8E,iBAAW;8DACV,cAAA,qBAACnB;wDAAI3D,WAAU;kEACZe,eAAeP,KAAKyF,MAAM,GAAG,GAAGvB,IAAI,CAACpB,yBACpC,sBAACK;gEAEC3D,WAAU;gEACVuE,SAAS,IAAMlB,qBAAqBC;;kFAEpC,qBAACK;wEAAI3D,WAAW4D,IAAAA,SAAE,EAChB,wBACAN,SAAS4C,MAAM,KAAK,eAAe,gBACnC5C,SAAS4C,MAAM,KAAK,gBAAgB,eACpC5C,SAAS4C,MAAM,KAAK,sBAAsB,iBAC1C5C,SAAS4C,MAAM,KAAK,eAAe;;kFAErC,sBAACvC;wEAAI3D,WAAU;;0FACb,qBAAC2D;gFAAI3D,WAAU;0FACZsD,SAAS6C,eAAe;;0FAE3B,qBAACxC;gFAAI3D,WAAU;0FACZsD,SAAS8C,gBAAgB,CAACC,IAAI;;;;kFAGnC,qBAACrC,YAAK;wEAACC,SAAQ;wEAAUjE,WAAU;kFAChCsD,SAAS4C,MAAM;;;+DApBb5C,SAASgD,EAAE;;;;;sDA4B1B,sBAACzB,UAAI;;8DACH,qBAACkB,gBAAU;oDAAC/F,WAAU;8DACpB,cAAA,qBAACgG,eAAS;wDAAChG,WAAU;kEAAU;;;8DAEjC,qBAAC8E,iBAAW;8DACV,cAAA,sBAACnB;wDAAI3D,WAAU;;0EACb,sBAAC2D;gEAAI3D,WAAU;;kFACb,qBAAC+E;wEAAK/E,WAAU;kFAAU;;kFAC1B,qBAACgE,YAAK;wEAACC,SAAS5C,cAAc,YAAY;kFACvCC;;;;0EAIL,sBAACqC;gEAAI3D,WAAU;;kFACb,qBAAC+E;wEAAK/E,WAAU;kFAAU;;kFAC1B,qBAAC+E;wEAAK/E,WAAU;kFACbuB,qBACG,IAAIgF,KAAKhF,mBAAmBiF,SAAS,EAAEC,kBAAkB,KACzD;;;;0EAKR,sBAAC9C;gEAAI3D,WAAU;;kFACb,qBAAC+E;wEAAK/E,WAAU;kFAAU;;kFAC1B,qBAAC+E;wEAAK/E,WAAU;kFACb+B,OAAOmB,MAAM;;;;;;;;;;;8CAS1B,qBAAC4C,iBAAW;oCAACxD,OAAM;8CAChBrC,iCACC,qBAACyG,kCAAgB;wCACfC,YAAY1G,iBAAiBqG,EAAE;wCAC/BM,UAAUvF;wCACVwF,SAAS;uDAGX,qBAAChC,UAAI;kDACH,cAAA,sBAACC,iBAAW;4CAAC9E,WAAU;;8DACrB,qBAAC+C,oBAAO;oDAAC/C,WAAU;;8DACnB,qBAAC+D;oDAAE/D,WAAU;8DAAwB;;;;;;8CAS7C,qBAAC8F,iBAAW;oCAACxD,OAAM;8CACjB,cAAA,sBAACuC,UAAI;;0DACH,qBAACkB,gBAAU;gDAAC/F,WAAU;0DACpB,cAAA,sBAAC2D;oDAAI3D,WAAU;;sEACb,qBAACgG,eAAS;4DAAChG,WAAU;sEAAU;;wDAC9B+B,OAAOmB,MAAM,GAAG,mBACf,qBAACmB,cAAM;4DACLJ,SAAQ;4DACRK,MAAK;4DACLC,SAASrC;sEACV;;;;;0DAMP,qBAAC4C,iBAAW;0DACV,cAAA,sBAACnB;oDAAI3D,WAAU;;wDACZ+B,OAAOkE,KAAK,CAAC,GAAG,IAAIvB,GAAG,CAAC,CAACoC,OAAOlC,sBAC/B,sBAACjB;gEAEC3D,WAAU;;kFAEV,qBAAC2D;wEAAI3D,WAAW4D,IAAAA,SAAE,EAChB,6BACAkD,MAAMC,QAAQ,KAAK,cAAc,cACjCD,MAAMC,QAAQ,KAAK,UAAU,iBAC7BD,MAAMC,QAAQ,KAAK,YAAY,iBAC/BD,MAAMC,QAAQ,KAAK,SAAS;;kFAE9B,sBAACpD;wEAAI3D,WAAU;;0FACb,qBAAC2D;gFAAI3D,WAAU;0FACZ8G,MAAME,IAAI;;0FAEb,qBAACrD;gFAAI3D,WAAU;0FACZ8G,MAAMG,OAAO;;0FAEhB,qBAACtD;gFAAI3D,WAAU;0FACZ,IAAIuG,KAAKO,MAAMN,SAAS,EAAEU,cAAc;;;;;+DAlBxCtC;wDAwBR7C,OAAOmB,MAAM,KAAK,mBACjB,sBAACS;4DAAI3D,WAAU;;8EACb,qBAACiD,wBAAW;oEAACjD,WAAU;;8EACvB,qBAAC+D;oEAAE/D,WAAU;8EAAwB;;;;;;;;;;;;;;;YActDM,cAAc,6BACb,qBAAC6G,gCAAe;;;AAIxB;AAEA,wDAAwD;AACxD,sBAAsB;AACtB,wDAAwD;AAExD,SAASzD;IACP,qBACE,sBAACC;QAAI3D,WAAU;;0BACb,sBAAC2D;gBAAI3D,WAAU;;kCACb,sBAAC2D;wBAAI3D,WAAU;;0CACb,qBAAC2D;gCAAI3D,WAAU;;0CACf,qBAAC2D;gCAAI3D,WAAU;;;;kCAEjB,sBAAC2D;wBAAI3D,WAAU;;0CACb,qBAAC2D;gCAAI3D,WAAU;;0CACf,qBAAC2D;gCAAI3D,WAAU;;;;;;0BAInB,qBAAC2D;gBAAI3D,WAAU;0BACZ;uBAAIoH,MAAM;iBAAG,CAAC1C,GAAG,CAAC,CAAC2C,GAAGC,kBACrB,qBAAC3D;wBAAY3D,WAAU;uBAAbsH;;0BAId,sBAAC3D;gBAAI3D,WAAU;;kCACb,qBAAC2D;wBAAI3D,WAAU;;kCACf,qBAAC2D;wBAAI3D,WAAU;;;;;;AAIvB"}