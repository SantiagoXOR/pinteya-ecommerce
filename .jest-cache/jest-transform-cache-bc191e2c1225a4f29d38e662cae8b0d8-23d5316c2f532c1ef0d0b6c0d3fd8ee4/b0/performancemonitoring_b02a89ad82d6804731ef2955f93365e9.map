{"version":3,"names":["cov_jh89j234t","actualCoverage","s","APIAnalytics","f","default","_default","performanceMonitoringMiddleware","metricsCache","Map","CACHE_TTL","setInterval","now","Date","key","metric","entries","timestamp","b","delete","request","startTime","method","url","headers","pathname","URL","shouldSkipMonitoring","_server","NextResponse","next","response","set","toISOString","responseTime","statusCode","status","metrics","path","contentLength","parseInt","get","userAgent","undefined","ip","getClientIP","trackAPIMetrics","detectPerformanceIssues","skipPatterns","some","pattern","test","forwarded","realIP","cfConnectingIP","split","trim","_productionmonitoring","productionMonitor","trackPerformance","name","value","category","metadata","trackError","Error","type","cacheKey","error","console","severity","threshold","recentErrors","Array","from","values","filter","m","length","errorCount","timeWindow","getAggregatedMetrics","recentMetrics","totalRequests","averageResponseTime","errorRate","slowestEndpoints","errorsByStatus","reduce","sum","errors","endpointTimes","forEach","has","push","map","times","avgTime","time","sort","a","slice","generatePerformanceReport","toFixed","e","join","Object","code","count","clearOldMetrics","maxAge"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\middleware\\performance-monitoring.ts"],"sourcesContent":["// ===================================\r\n// PERFORMANCE MONITORING MIDDLEWARE\r\n// Middleware para Next.js que captura métricas de rendimiento\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { productionMonitor } from '../config/production-monitoring';\r\n\r\n// Tipos para métricas de API\r\ninterface APIMetrics {\r\n  method: string;\r\n  path: string;\r\n  statusCode: number;\r\n  responseTime: number;\r\n  contentLength?: number;\r\n  userAgent?: string;\r\n  ip?: string;\r\n  timestamp: number;\r\n}\r\n\r\n// Cache para almacenar métricas temporalmente\r\nconst metricsCache = new Map<string, APIMetrics>();\r\nconst CACHE_TTL = 60000; // 1 minuto\r\n\r\n// Limpiar cache periódicamente\r\nsetInterval(() => {\r\n  const now = Date.now();\r\n  for (const [key, metric] of metricsCache.entries()) {\r\n    if (now - metric.timestamp > CACHE_TTL) {\r\n      metricsCache.delete(key);\r\n    }\r\n  }\r\n}, CACHE_TTL);\r\n\r\nexport function performanceMonitoringMiddleware(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const { method, url, headers } = request;\r\n  const pathname = new URL(url).pathname;\r\n  \r\n  // Skip monitoring for static assets and internal routes\r\n  if (shouldSkipMonitoring(pathname)) {\r\n    return NextResponse.next();\r\n  }\r\n  \r\n  // Crear response con headers de monitoring\r\n  const response = NextResponse.next();\r\n  \r\n  // Agregar headers de performance\r\n  response.headers.set('X-Response-Time', `${Date.now() - startTime}ms`);\r\n  response.headers.set('X-Timestamp', new Date().toISOString());\r\n  \r\n  // Capturar métricas después de la respuesta\r\n  const responseTime = Date.now() - startTime;\r\n  const statusCode = response.status;\r\n  \r\n  const metrics: APIMetrics = {\r\n    method,\r\n    path: pathname,\r\n    statusCode,\r\n    responseTime,\r\n    contentLength: parseInt(response.headers.get('content-length') || '0'),\r\n    userAgent: headers.get('user-agent') || undefined,\r\n    ip: getClientIP(request),\r\n    timestamp: Date.now(),\r\n  };\r\n  \r\n  // Enviar métricas al sistema de monitoring\r\n  trackAPIMetrics(metrics);\r\n  \r\n  // Detectar problemas de rendimiento\r\n  detectPerformanceIssues(metrics);\r\n  \r\n  return response;\r\n}\r\n\r\n// Función para determinar si se debe omitir el monitoring\r\nfunction shouldSkipMonitoring(pathname: string): boolean {\r\n  const skipPatterns = [\r\n    /^\\/_next\\//,           // Next.js internals\r\n    /^\\/__nextjs_/,        // Next.js dev server\r\n    /\\.(ico|png|jpg|jpeg|gif|svg|css|js|woff|woff2|ttf|eot)$/i, // Static assets\r\n    /^\\/api\\/health$/,     // Health check endpoint\r\n    /^\\/favicon/,          // Favicon requests\r\n    /^\\/robots\\.txt$/,     // Robots.txt\r\n    /^\\/sitemap/,          // Sitemap files\r\n  ];\r\n  \r\n  return skipPatterns.some(pattern => pattern.test(pathname));\r\n}\r\n\r\n// Función para obtener la IP del cliente\r\nfunction getClientIP(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIP = request.headers.get('x-real-ip');\r\n  const cfConnectingIP = request.headers.get('cf-connecting-ip');\r\n  \r\n  if (forwarded) {\r\n    return forwarded.split(',')[0].trim();\r\n  }\r\n  \r\n  return realIP || cfConnectingIP || 'unknown';\r\n}\r\n\r\n// Función para trackear métricas de API\r\nfunction trackAPIMetrics(metrics: APIMetrics) {\r\n  try {\r\n    // Enviar al sistema de monitoring de producción\r\n    productionMonitor.trackPerformance({\r\n      name: 'api_response_time',\r\n      value: metrics.responseTime,\r\n      category: 'api',\r\n      metadata: {\r\n        method: metrics.method,\r\n        path: metrics.path,\r\n        statusCode: metrics.statusCode,\r\n        contentLength: metrics.contentLength,\r\n        userAgent: metrics.userAgent,\r\n        ip: metrics.ip,\r\n      },\r\n    });\r\n    \r\n    // Trackear errores HTTP\r\n    if (metrics.statusCode >= 400) {\r\n      productionMonitor.trackError(\r\n        new Error(`HTTP ${metrics.statusCode} on ${metrics.method} ${metrics.path}`),\r\n        {\r\n          type: 'http_error',\r\n          statusCode: metrics.statusCode,\r\n          method: metrics.method,\r\n          path: metrics.path,\r\n          responseTime: metrics.responseTime,\r\n          ip: metrics.ip,\r\n        }\r\n      );\r\n    }\r\n    \r\n    // Almacenar en cache para análisis\r\n    const cacheKey = `${metrics.method}:${metrics.path}:${metrics.timestamp}`;\r\n    metricsCache.set(cacheKey, metrics);\r\n    \r\n  } catch (error) {\r\n    console.error('Error tracking API metrics:', error);\r\n  }\r\n}\r\n\r\n// Función para detectar problemas de rendimiento\r\nfunction detectPerformanceIssues(metrics: APIMetrics) {\r\n  const { responseTime, statusCode, path, method } = metrics;\r\n  \r\n  // Detectar respuestas lentas\r\n  if (responseTime > 5000) { // 5 segundos\r\n    productionMonitor.trackError(\r\n      new Error(`Slow API response: ${responseTime}ms`),\r\n      {\r\n        type: 'performance_issue',\r\n        severity: 'high',\r\n        responseTime,\r\n        path,\r\n        method,\r\n        threshold: 5000,\r\n      }\r\n    );\r\n  } else if (responseTime > 2000) { // 2 segundos\r\n    productionMonitor.trackPerformance({\r\n      name: 'slow_api_warning',\r\n      value: responseTime,\r\n      category: 'performance_warning',\r\n      metadata: { path, method, threshold: 2000 },\r\n    });\r\n  }\r\n  \r\n  // Detectar errores frecuentes en el mismo endpoint\r\n  if (statusCode >= 500) {\r\n    const recentErrors = Array.from(metricsCache.values())\r\n      .filter(m => \r\n        m.path === path && \r\n        m.method === method && \r\n        m.statusCode >= 500 &&\r\n        Date.now() - m.timestamp < 300000 // Últimos 5 minutos\r\n      );\r\n    \r\n    if (recentErrors.length >= 5) {\r\n      productionMonitor.trackError(\r\n        new Error(`High error rate detected on ${method} ${path}`),\r\n        {\r\n          type: 'high_error_rate',\r\n          severity: 'critical',\r\n          errorCount: recentErrors.length,\r\n          timeWindow: '5min',\r\n          path,\r\n          method,\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// ===================================\r\n// ANALYTICS Y REPORTING\r\n// ===================================\r\n\r\nexport class APIAnalytics {\r\n  // Obtener métricas agregadas\r\n  static getAggregatedMetrics(timeWindow: number = 3600000): {\r\n    totalRequests: number;\r\n    averageResponseTime: number;\r\n    errorRate: number;\r\n    slowestEndpoints: Array<{ path: string; avgTime: number }>;\r\n    errorsByStatus: Record<number, number>;\r\n  } {\r\n    const now = Date.now();\r\n    const recentMetrics = Array.from(metricsCache.values())\r\n      .filter(m => now - m.timestamp < timeWindow);\r\n    \r\n    if (recentMetrics.length === 0) {\r\n      return {\r\n        totalRequests: 0,\r\n        averageResponseTime: 0,\r\n        errorRate: 0,\r\n        slowestEndpoints: [],\r\n        errorsByStatus: {},\r\n      };\r\n    }\r\n    \r\n    const totalRequests = recentMetrics.length;\r\n    const averageResponseTime = recentMetrics.reduce((sum, m) => sum + m.responseTime, 0) / totalRequests;\r\n    const errors = recentMetrics.filter(m => m.statusCode >= 400);\r\n    const errorRate = errors.length / totalRequests;\r\n    \r\n    // Agrupar por endpoint para encontrar los más lentos\r\n    const endpointTimes = new Map<string, number[]>();\r\n    recentMetrics.forEach(m => {\r\n      const key = `${m.method} ${m.path}`;\r\n      if (!endpointTimes.has(key)) {\r\n        endpointTimes.set(key, []);\r\n      }\r\n      endpointTimes.get(key)!.push(m.responseTime);\r\n    });\r\n    \r\n    const slowestEndpoints = Array.from(endpointTimes.entries())\r\n      .map(([path, times]) => ({\r\n        path,\r\n        avgTime: times.reduce((sum, time) => sum + time, 0) / times.length,\r\n      }))\r\n      .sort((a, b) => b.avgTime - a.avgTime)\r\n      .slice(0, 10);\r\n    \r\n    // Contar errores por código de estado\r\n    const errorsByStatus: Record<number, number> = {};\r\n    errors.forEach(m => {\r\n      errorsByStatus[m.statusCode] = (errorsByStatus[m.statusCode] || 0) + 1;\r\n    });\r\n    \r\n    return {\r\n      totalRequests,\r\n      averageResponseTime,\r\n      errorRate,\r\n      slowestEndpoints,\r\n      errorsByStatus,\r\n    };\r\n  }\r\n  \r\n  // Generar reporte de rendimiento\r\n  static generatePerformanceReport(): string {\r\n    const metrics = this.getAggregatedMetrics();\r\n    \r\n    return `\r\n=== API Performance Report ===\r\nTotal Requests: ${metrics.totalRequests}\r\nAverage Response Time: ${metrics.averageResponseTime.toFixed(2)}ms\r\nError Rate: ${(metrics.errorRate * 100).toFixed(2)}%\r\n\r\nSlowest Endpoints:\r\n${metrics.slowestEndpoints.map(e => `  ${e.path}: ${e.avgTime.toFixed(2)}ms`).join('\\n')}\r\n\r\nErrors by Status Code:\r\n${Object.entries(metrics.errorsByStatus).map(([code, count]) => `  ${code}: ${count}`).join('\\n')}\r\n\r\nGenerated at: ${new Date().toISOString()}\r\n    `.trim();\r\n  }\r\n  \r\n  // Limpiar métricas antiguas\r\n  static clearOldMetrics(maxAge: number = 3600000) {\r\n    const now = Date.now();\r\n    for (const [key, metric] of metricsCache.entries()) {\r\n      if (now - metric.timestamp > maxAge) {\r\n        metricsCache.delete(key);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Exportar el middleware como default\r\nexport default performanceMonitoringMiddleware;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}