{"version":3,"names":["cov_2p5aryfhh6","actualCoverage","s","DELETE","f","GET","POST","runtime","parseUserAgent","userAgent","ua","toLowerCase","browser","includes","b","os","deviceType","getClientIP","request","forwarded","headers","get","realIP","split","trim","ip","session","_config","auth","user","_server","NextResponse","json","error","status","userEmail","email","data","_supabase","supabaseAdmin","from","select","eq","single","sessions","id","order","ascending","console","currentIP","currentUserAgent","sessionsWithCurrent","map","is_current","ip_address","user_agent","success","total","length","clientIP","existingSession","updatedSession","update","last_activity","Date","toISOString","message","sessionData","user_id","device_type","device_name","newSession","insert","delete","neq"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\sessions\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE GESTIÓN DE SESIONES\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// Tipos para sesiones\r\nexport interface UserSession {\r\n  id: string;\r\n  user_id: string;\r\n  device_type: string;\r\n  device_name: string;\r\n  browser: string;\r\n  os: string;\r\n  ip_address: string;\r\n  location?: string;\r\n  is_current: boolean;\r\n  last_activity: string;\r\n  created_at: string;\r\n  user_agent: string;\r\n}\r\n\r\ninterface SessionCreateData {\r\n  device_type: string;\r\n  device_name: string;\r\n  browser: string;\r\n  os: string;\r\n  ip_address: string;\r\n  location?: string;\r\n  user_agent: string;\r\n}\r\n\r\n// Función para detectar información del dispositivo\r\nfunction parseUserAgent(userAgent: string) {\r\n  const ua = userAgent.toLowerCase();\r\n  \r\n  // Detectar browser\r\n  let browser = 'Unknown';\r\n  if (ua.includes('chrome')) browser = 'Chrome';\r\n  else if (ua.includes('firefox')) browser = 'Firefox';\r\n  else if (ua.includes('safari')) browser = 'Safari';\r\n  else if (ua.includes('edge')) browser = 'Edge';\r\n  \r\n  // Detectar OS\r\n  let os = 'Unknown';\r\n  if (ua.includes('windows')) os = 'Windows';\r\n  else if (ua.includes('mac')) os = 'macOS';\r\n  else if (ua.includes('linux')) os = 'Linux';\r\n  else if (ua.includes('android')) os = 'Android';\r\n  else if (ua.includes('ios')) os = 'iOS';\r\n  \r\n  // Detectar tipo de dispositivo\r\n  let deviceType = 'desktop';\r\n  if (ua.includes('mobile')) deviceType = 'mobile';\r\n  else if (ua.includes('tablet')) deviceType = 'tablet';\r\n  \r\n  return { browser, os, deviceType };\r\n}\r\n\r\n// Función para obtener IP del cliente\r\nfunction getClientIP(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIP = request.headers.get('x-real-ip');\r\n  \r\n  if (forwarded) {\r\n    return forwarded.split(',')[0].trim();\r\n  }\r\n  \r\n  if (realIP) {\r\n    return realIP;\r\n  }\r\n  \r\n  return request.ip || 'unknown';\r\n}\r\n\r\n// GET - Obtener sesiones activas del usuario\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener sesiones activas del usuario\r\n    const { data: sessions, error } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .order('last_activity', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error al obtener sesiones:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener sesiones' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Marcar la sesión actual\r\n    const currentIP = getClientIP(request);\r\n    const currentUserAgent = request.headers.get('user-agent') || '';\r\n    \r\n    const sessionsWithCurrent = sessions?.map(session => ({\r\n      ...session,\r\n      is_current: session.ip_address === currentIP && \r\n                  session.user_agent === currentUserAgent\r\n    })) || [];\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      sessions: sessionsWithCurrent,\r\n      total: sessions?.length || 0,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/sessions:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Registrar nueva sesión\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener información del dispositivo\r\n    const userAgent = request.headers.get('user-agent') || '';\r\n    const clientIP = getClientIP(request);\r\n    const { browser, os, deviceType } = parseUserAgent(userAgent);\r\n\r\n    // Verificar si ya existe una sesión para este dispositivo\r\n    const { data: existingSession } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('id')\r\n      .eq('user_id', user.id)\r\n      .eq('ip_address', clientIP)\r\n      .eq('user_agent', userAgent)\r\n      .single();\r\n\r\n    if (existingSession) {\r\n      // Actualizar última actividad\r\n      const { data: updatedSession, error } = await supabaseAdmin\r\n        .from('user_sessions')\r\n        .update({\r\n          last_activity: new Date().toISOString(),\r\n        })\r\n        .eq('id', existingSession.id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error al actualizar sesión:', error);\r\n        return NextResponse.json(\r\n          { error: 'Error al actualizar sesión' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        session: updatedSession,\r\n        message: 'Sesión actualizada',\r\n      });\r\n    }\r\n\r\n    // Crear nueva sesión\r\n    const sessionData: Omit<UserSession, 'id' | 'created_at' | 'is_current'> = {\r\n      user_id: user.id,\r\n      device_type: deviceType,\r\n      device_name: `${os} ${browser}`,\r\n      browser,\r\n      os,\r\n      ip_address: clientIP,\r\n      user_agent: userAgent,\r\n      last_activity: new Date().toISOString(),\r\n    };\r\n\r\n    const { data: newSession, error } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .insert(sessionData)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al crear sesión:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear sesión' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      session: newSession,\r\n      message: 'Sesión creada exitosamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en POST /api/user/sessions:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE - Cerrar todas las sesiones excepto la actual\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener información de la sesión actual\r\n    const currentIP = getClientIP(request);\r\n    const currentUserAgent = request.headers.get('user-agent') || '';\r\n\r\n    // Eliminar todas las sesiones excepto la actual\r\n    const { error } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .delete()\r\n      .eq('user_id', user.id)\r\n      .neq('ip_address', currentIP)\r\n      .neq('user_agent', currentUserAgent);\r\n\r\n    if (error) {\r\n      console.error('Error al cerrar sesiones:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al cerrar sesiones' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Todas las sesiones remotas han sido cerradas',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/user/sessions:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}