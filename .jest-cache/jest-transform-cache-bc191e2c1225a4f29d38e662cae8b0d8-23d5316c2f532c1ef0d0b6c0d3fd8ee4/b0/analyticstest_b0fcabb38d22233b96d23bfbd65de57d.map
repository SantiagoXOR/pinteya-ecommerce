{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\analytics.test.ts"],"sourcesContent":["/**\n * Tests para el sistema de Analytics de Pinteya E-commerce\n * Verificación de la corrección del error de runtime en getElementInfo\n */\n\nimport { analytics } from '@/lib/integrations/analytics'\n\n// Mock del DOM para testing\nconst mockElement = (props: {\n  id?: string\n  className?: string | DOMTokenList\n  tagName?: string\n  getAttribute?: (attr: string) => string | null\n}) => {\n  return {\n    id: props.id || '',\n    className: props.className || '',\n    tagName: props.tagName || 'div',\n    getAttribute: props.getAttribute || (() => null),\n  } as HTMLElement\n}\n\n// Mock de DOMTokenList para simular el comportamiento real\nclass MockDOMTokenList {\n  private classes: string[]\n\n  constructor(classes: string[]) {\n    this.classes = classes\n  }\n\n  toString(): string {\n    return this.classes.join(' ')\n  }\n\n  split(separator: string): string[] {\n    return this.toString().split(separator)\n  }\n}\n\ndescribe('Analytics - getElementInfo', () => {\n  let analyticsManager: any\n\n  beforeEach(() => {\n    // Acceder al método privado para testing\n    analyticsManager = analytics as any\n  })\n\n  describe('Manejo de className como string', () => {\n    it('debería manejar className como string simple', () => {\n      const element = mockElement({\n        id: 'test-button',\n        className: 'btn btn-primary active',\n        tagName: 'BUTTON',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('button#test-button.btn.btn-primary.active')\n    })\n\n    it('debería manejar className vacío', () => {\n      const element = mockElement({\n        id: 'test-div',\n        className: '',\n        tagName: 'DIV',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('div#test-div')\n    })\n\n    it('debería manejar className con espacios extra', () => {\n      const element = mockElement({\n        className: '  btn   btn-large  active  ',\n        tagName: 'BUTTON',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('button.btn.btn-large.active')\n    })\n  })\n\n  describe('Manejo de className como DOMTokenList', () => {\n    it('debería manejar DOMTokenList correctamente', () => {\n      const mockTokenList = new MockDOMTokenList(['btn', 'btn-primary', 'active'])\n\n      const element = mockElement({\n        id: 'test-button',\n        className: mockTokenList as any,\n        tagName: 'BUTTON',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('button#test-button.btn.btn-primary.active')\n    })\n\n    it('debería manejar DOMTokenList vacío', () => {\n      const mockTokenList = new MockDOMTokenList([])\n\n      const element = mockElement({\n        id: 'test-div',\n        className: mockTokenList as any,\n        tagName: 'DIV',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('div#test-div')\n    })\n\n    it('debería manejar DOMTokenList con clases vacías', () => {\n      const mockTokenList = new MockDOMTokenList(['btn', '', 'active', '  '])\n\n      const element = mockElement({\n        className: mockTokenList as any,\n        tagName: 'SPAN',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('span.btn.active')\n    })\n  })\n\n  describe('Manejo de data-analytics', () => {\n    it('debería incluir data-analytics cuando está presente', () => {\n      const element = mockElement({\n        className: 'btn',\n        tagName: 'BUTTON',\n        getAttribute: (attr: string) => (attr === 'data-analytics' ? 'add-to-cart' : null),\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('button.btn[add-to-cart]')\n    })\n\n    it('debería funcionar sin data-analytics', () => {\n      const element = mockElement({\n        className: 'btn',\n        tagName: 'BUTTON',\n        getAttribute: () => null,\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('button.btn')\n    })\n  })\n\n  describe('Casos edge', () => {\n    it('debería manejar elemento sin id ni className', () => {\n      const element = mockElement({\n        tagName: 'DIV',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('div')\n    })\n\n    it('debería manejar tagName en mayúsculas', () => {\n      const element = mockElement({\n        className: 'container',\n        tagName: 'DIV',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('div.container')\n    })\n\n    it('debería manejar className undefined/null', () => {\n      const element = mockElement({\n        id: 'test',\n        className: undefined as any,\n        tagName: 'SPAN',\n      })\n\n      const result = analyticsManager.getElementInfo(element)\n\n      expect(result).toBe('span#test')\n    })\n  })\n\n  describe('Compatibilidad con elementos reales del DOM', () => {\n    it('debería funcionar con elementos button reales', () => {\n      // Simular un elemento button real con DOMTokenList\n      const realButton = {\n        id: 'real-button',\n        className: {\n          toString: () => 'btn btn-primary',\n          split: undefined, // DOMTokenList no tiene split\n        },\n        tagName: 'BUTTON',\n        getAttribute: () => null,\n      } as any\n\n      const result = analyticsManager.getElementInfo(realButton)\n\n      expect(result).toBe('button#real-button.btn.btn-primary')\n    })\n  })\n})\n"],"names":["mockElement","props","id","className","tagName","getAttribute","MockDOMTokenList","classes","toString","join","split","separator","describe","analyticsManager","beforeEach","analytics","it","element","result","getElementInfo","expect","toBe","mockTokenList","attr","undefined","realButton"],"mappings":"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"}