{"version":3,"names":["default","cov_2i0srvpcm","f","s","_default","useCartWithBackend","data","session","status","_react1","useSession","cartState","setCartState","_react","useState","items","totalItems","totalAmount","itemCount","loading","error","apiRequest","useCallback","url","options","b","response","fetch","headers","text","trim","JSON","parse","parseError","console","Error","message","ok","statusText","loadCart","user","prev","success","log","addItem","productId","quantity","_sonner","toast","method","body","stringify","item","productName","includes","removeItem","updateQuantity","clearCart","getItemQuantity","find","product_id","isInCart","some","refreshCart","useEffect"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCartWithBackend.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - HOOK DE CARRITO CON BACKEND\r\n// ===================================\r\n// Hook optimizado que conecta el carrito frontend con las APIs del backend\r\n\r\n'use client';\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useSession } from 'next-auth/react';\r\nimport { toast } from 'sonner';\r\n\r\n// Tipos para el carrito\r\ninterface CartProduct {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  discounted_price?: number;\r\n  images?: any;\r\n  stock: number;\r\n  brand?: string;\r\n  category?: {\r\n    id: number;\r\n    name: string;\r\n  };\r\n}\r\n\r\ninterface CartItem {\r\n  id: string;\r\n  user_id: string;\r\n  product_id: number;\r\n  quantity: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  products: CartProduct;\r\n}\r\n\r\ninterface CartState {\r\n  items: CartItem[];\r\n  totalItems: number;\r\n  totalAmount: number;\r\n  itemCount: number;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\ninterface UseCartWithBackendReturn extends CartState {\r\n  addItem: (productId: number, quantity?: number) => Promise<boolean>;\r\n  removeItem: (productId: number, quantity?: number) => Promise<boolean>;\r\n  updateQuantity: (productId: number, quantity: number) => Promise<boolean>;\r\n  clearCart: () => Promise<boolean>;\r\n  loadCart: () => Promise<void>;\r\n  getItemQuantity: (productId: number) => number;\r\n  isInCart: (productId: number) => boolean;\r\n  refreshCart: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * Hook para manejar el carrito con integración completa al backend\r\n */\r\nexport const useCartWithBackend = (): UseCartWithBackendReturn => {\r\n  const { data: session, status } = useSession();\r\n  const [cartState, setCartState] = useState<CartState>({\r\n    items: [],\r\n    totalItems: 0,\r\n    totalAmount: 0,\r\n    itemCount: 0,\r\n    loading: false,\r\n    error: null\r\n  });\r\n\r\n  // Función para hacer requests a la API\r\n  const apiRequest = useCallback(async (url: string, options: RequestInit = {}) => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...options.headers\r\n        },\r\n        ...options\r\n      });\r\n\r\n      // Verificar si la respuesta tiene contenido antes de parsear JSON\r\n      const text = await response.text();\r\n      let data = null;\r\n      \r\n      if (text.trim()) {\r\n        try {\r\n          data = JSON.parse(text);\r\n        } catch (parseError) {\r\n          console.error(`JSON Parse Error (${url}):`, parseError);\r\n          console.error('Raw response:', text);\r\n          throw new Error(`Invalid JSON response: ${parseError.message}`);\r\n        }\r\n      }\r\n      \r\n      if (!response.ok) {\r\n        // Si es 401 (Unauthorized), es un caso esperado, no un error\r\n        if (response.status === 401) {\r\n          return data; // Devolver la respuesta tal como está\r\n        }\r\n        throw new Error(data?.error || `HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return data;\r\n    } catch (error: any) {\r\n      console.error(`API Error (${url}):`, error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // Cargar carrito desde el backend\r\n  const loadCart = useCallback(async () => {\r\n    if (status === 'loading') {return;}\r\n    \r\n    if (!session?.user) {\r\n      // Usuario no autenticado - carrito vacío\r\n      setCartState(prev => ({\r\n        ...prev,\r\n        items: [],\r\n        totalItems: 0,\r\n        totalAmount: 0,\r\n        itemCount: 0,\r\n        loading: false,\r\n        error: null\r\n      }));\r\n      return;\r\n    }\r\n\r\n    setCartState(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      const data = await apiRequest('/api/cart');\r\n      \r\n      // Si la respuesta indica que no hay autenticación, manejar como carrito vacío\r\n      if (!data.success && data.error === 'Usuario no autenticado') {\r\n        setCartState(prev => ({\r\n          ...prev,\r\n          items: [],\r\n          totalItems: 0,\r\n          totalAmount: 0,\r\n          itemCount: 0,\r\n          loading: false,\r\n          error: null\r\n        }));\r\n        return;\r\n      }\r\n      \r\n      setCartState(prev => ({\r\n        ...prev,\r\n        items: data.items || [],\r\n        totalItems: data.totalItems || 0,\r\n        totalAmount: data.totalAmount || 0,\r\n        itemCount: data.itemCount || 0,\r\n        loading: false,\r\n        error: null\r\n      }));\r\n\r\n      console.log('✅ Carrito cargado:', data.itemCount, 'productos únicos');\r\n    } catch (error: any) {\r\n      console.error('❌ Error cargando carrito:', error);\r\n      setCartState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message || 'Error cargando carrito'\r\n      }));\r\n    }\r\n  }, [session, status, apiRequest]);\r\n\r\n  // Agregar item al carrito\r\n  const addItem = useCallback(async (productId: number, quantity: number = 1): Promise<boolean> => {\r\n    if (!session?.user) {\r\n      toast.error('Debes iniciar sesión para agregar productos al carrito');\r\n      return false;\r\n    }\r\n\r\n    setCartState(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      const data = await apiRequest('/api/cart/add', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ productId, quantity })\r\n      });\r\n\r\n      if (data.success) {\r\n        // Recargar carrito para obtener estado actualizado\r\n        await loadCart();\r\n        \r\n        toast.success(data.message || 'Producto agregado al carrito');\r\n        console.log('✅ Producto agregado:', data.item?.productName);\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error agregando producto');\r\n      }\r\n    } catch (error: any) {\r\n      console.error('❌ Error agregando al carrito:', error);\r\n      setCartState(prev => ({ ...prev, loading: false, error: error.message }));\r\n      \r\n      if (error.message.includes('Stock insuficiente')) {\r\n        toast.error(error.message);\r\n      } else if (error.message.includes('autenticado')) {\r\n        toast.error('Debes iniciar sesión para agregar productos');\r\n      } else {\r\n        toast.error('Error agregando producto al carrito');\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  }, [session, apiRequest, loadCart]);\r\n\r\n  // Remover item del carrito\r\n  const removeItem = useCallback(async (productId: number, quantity?: number): Promise<boolean> => {\r\n    if (!session?.user) {\r\n      toast.error('Debes iniciar sesión');\r\n      return false;\r\n    }\r\n\r\n    setCartState(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      const data = await apiRequest('/api/cart/remove', {\r\n        method: 'DELETE',\r\n        body: JSON.stringify({ productId, quantity })\r\n      });\r\n\r\n      if (data.success) {\r\n        await loadCart();\r\n        toast.success(data.message || 'Producto removido del carrito');\r\n        console.log('✅ Producto removido:', data.item?.productName);\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error removiendo producto');\r\n      }\r\n    } catch (error: any) {\r\n      console.error('❌ Error removiendo del carrito:', error);\r\n      setCartState(prev => ({ ...prev, loading: false, error: error.message }));\r\n      toast.error('Error removiendo producto del carrito');\r\n      return false;\r\n    }\r\n  }, [session, apiRequest, loadCart]);\r\n\r\n  // Actualizar cantidad de un item\r\n  const updateQuantity = useCallback(async (productId: number, quantity: number): Promise<boolean> => {\r\n    if (!session?.user) {\r\n      toast.error('Debes iniciar sesión');\r\n      return false;\r\n    }\r\n\r\n    setCartState(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      const data = await apiRequest('/api/cart/update', {\r\n        method: 'PUT',\r\n        body: JSON.stringify({ productId, quantity })\r\n      });\r\n\r\n      if (data.success) {\r\n        await loadCart();\r\n        toast.success(data.message || 'Cantidad actualizada');\r\n        console.log('✅ Cantidad actualizada:', data.item?.productName);\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error actualizando cantidad');\r\n      }\r\n    } catch (error: any) {\r\n      console.error('❌ Error actualizando cantidad:', error);\r\n      setCartState(prev => ({ ...prev, loading: false, error: error.message }));\r\n      toast.error('Error actualizando cantidad');\r\n      return false;\r\n    }\r\n  }, [session, apiRequest, loadCart]);\r\n\r\n  // Limpiar carrito completo\r\n  const clearCart = useCallback(async (): Promise<boolean> => {\r\n    if (!session?.user) {\r\n      toast.error('Debes iniciar sesión');\r\n      return false;\r\n    }\r\n\r\n    setCartState(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      const data = await apiRequest('/api/cart', {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      if (data.success) {\r\n        await loadCart();\r\n        toast.success('Carrito limpiado');\r\n        console.log('✅ Carrito limpiado');\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error limpiando carrito');\r\n      }\r\n    } catch (error: any) {\r\n      console.error('❌ Error limpiando carrito:', error);\r\n      setCartState(prev => ({ ...prev, loading: false, error: error.message }));\r\n      toast.error('Error limpiando carrito');\r\n      return false;\r\n    }\r\n  }, [session, apiRequest, loadCart]);\r\n\r\n  // Obtener cantidad de un producto específico en el carrito\r\n  const getItemQuantity = useCallback((productId: number): number => {\r\n    const item = cartState.items.find(item => item.product_id === productId);\r\n    return item?.quantity || 0;\r\n  }, [cartState.items]);\r\n\r\n  // Verificar si un producto está en el carrito\r\n  const isInCart = useCallback((productId: number): boolean => {\r\n    return cartState.items.some(item => item.product_id === productId);\r\n  }, [cartState.items]);\r\n\r\n  // Refrescar carrito (alias para loadCart)\r\n  const refreshCart = useCallback(async () => {\r\n    await loadCart();\r\n  }, [loadCart]);\r\n\r\n  // Cargar carrito al montar el componente o cuando cambie la sesión\r\n  useEffect(() => {\r\n    loadCart();\r\n  }, [loadCart]);\r\n\r\n  return {\r\n    ...cartState,\r\n    addItem,\r\n    removeItem,\r\n    updateQuantity,\r\n    clearCart,\r\n    loadCart,\r\n    getItemQuantity,\r\n    isInCart,\r\n    refreshCart\r\n  };\r\n};\r\n\r\nexport default useCartWithBackend;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}