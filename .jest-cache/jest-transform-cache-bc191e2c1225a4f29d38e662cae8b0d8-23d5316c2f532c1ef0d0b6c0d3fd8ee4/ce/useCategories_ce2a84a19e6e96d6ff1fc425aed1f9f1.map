{"version":3,"names":["useCategories","cov_1j81op4gb6","f","s","useCategoriesForFilters","useMainCategories","options","b","initialFilters","autoFetch","state","setState","_react","useState","categories","loading","error","filters","setFilters","fetchCategories","useCallback","newFilters","prev","filtersToUse","response","_categories","getCategories","success","data","message","updateFilters","updatedFilters","searchCategories","searchTerm","search","refreshCategories","useEffect","categoriesForFilters","map","category","name","products","products_count","isRefined","slug","id"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCategories.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - HOOK PARA CATEGORÍAS\r\n// ===================================\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { Category } from '@/types/database';\r\nimport { CategoryFilters, ApiResponse } from '@/types/api';\r\nimport { getCategories, getMainCategories } from '@/lib/api/categories';\r\n\r\ninterface UseCategoriesState {\r\n  categories: Category[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\ninterface UseCategoriesOptions {\r\n  initialFilters?: CategoryFilters;\r\n  autoFetch?: boolean;\r\n}\r\n\r\nexport function useCategories(options: UseCategoriesOptions = {}) {\r\n  const { initialFilters = {}, autoFetch = true } = options;\r\n\r\n  const [state, setState] = useState<UseCategoriesState>({\r\n    categories: [],\r\n    loading: false,\r\n    error: null,\r\n  });\r\n\r\n  const [filters, setFilters] = useState<CategoryFilters>(initialFilters);\r\n\r\n  /**\r\n   * Obtiene categorías desde la API\r\n   */\r\n  const fetchCategories = useCallback(async (newFilters?: CategoryFilters) => {\r\n    setState(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      // Obtener categorías con filtros\r\n      const filtersToUse = newFilters || filters;\r\n      const response = await getCategories(filtersToUse);\r\n\r\n      if (response.success) {\r\n        setState(prev => ({\r\n          ...prev,\r\n          categories: response.data || [],\r\n          loading: false,\r\n        }));\r\n      } else {\r\n        setState(prev => ({\r\n          ...prev,\r\n          loading: false,\r\n          error: response.error || 'Error obteniendo categorías',\r\n        }));\r\n      }\r\n    } catch (error: any) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message || 'Error inesperado',\r\n      }));\r\n    }\r\n  }, [filters]);\r\n\r\n  /**\r\n   * Actualiza los filtros y obtiene categorías\r\n   */\r\n  const updateFilters = useCallback((newFilters: Partial<CategoryFilters>) => {\r\n    const updatedFilters = { ...filters, ...newFilters };\r\n    setFilters(updatedFilters);\r\n    fetchCategories(updatedFilters);\r\n  }, [filters, fetchCategories]);\r\n\r\n  /**\r\n   * Busca categorías por término\r\n   */\r\n  const searchCategories = useCallback((searchTerm: string) => {\r\n    updateFilters({ search: searchTerm });\r\n  }, [updateFilters]);\r\n\r\n  // Función removida ya que no hay jerarquía en la estructura actual\r\n\r\n  /**\r\n   * Refresca las categorías\r\n   */\r\n  const refreshCategories = useCallback(() => {\r\n    fetchCategories();\r\n  }, [fetchCategories]);\r\n\r\n  // Auto-fetch al montar el componente\r\n  useEffect(() => {\r\n    if (autoFetch) {\r\n      fetchCategories();\r\n    }\r\n  }, [autoFetch, fetchCategories]);\r\n\r\n  return {\r\n    // Estado\r\n    categories: state.categories,\r\n    loading: state.loading,\r\n    error: state.error,\r\n    \r\n    // Acciones\r\n    fetchCategories,\r\n    updateFilters,\r\n    searchCategories,\r\n    refreshCategories,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook específico para obtener todas las categorías\r\n */\r\nexport function useMainCategories() {\r\n  return useCategories();\r\n}\r\n\r\n/**\r\n * Hook para obtener categorías con conteo de productos para filtros\r\n */\r\nexport function useCategoriesForFilters() {\r\n  const { categories, loading, error, refreshCategories } = useCategories();\r\n\r\n  // Transformar categorías para el formato esperado por los filtros\r\n  const categoriesForFilters = categories.map(category => ({\r\n    name: category.name,\r\n    products: category.products_count || 0,\r\n    isRefined: false, // Se manejará en el componente\r\n    slug: category.slug,\r\n    id: category.id,\r\n  }));\r\n\r\n  return {\r\n    categories: categoriesForFilters,\r\n    loading,\r\n    error,\r\n    refreshCategories,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}