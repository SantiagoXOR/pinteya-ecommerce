{"version":3,"names":["cov_1tv6qd7in3","actualCoverage","s","DELETE","f","GET","POST","runtime","request","searchParams","URL","url","action","get","executionId","filename","b","_server","NextResponse","json","error","status","screenshots","_advancedtestflows","testFlowManager","getExecutionScreenshots","stats","getScreenshotStats","response","success","data","total","length","screenshotsDir","_path","default","join","process","cwd","filePath","resolvedPath","resolve","resolvedDir","startsWith","fileBuffer","_fs","promises","readFile","fileExtension","extname","toLowerCase","contentType","headers","base64Data","toString","mimeType","base64","size","files","readdir","totalSize","fileStats","file","match","stat","push","created","birthtime","modified","mtime","totalFiles","averageSize","Math","round","oldestFile","min","map","getTime","newestFile","max","sort","a","availableActions","console","body","stepId","description","metadata","execution","getExecution","mkdir","recursive","timestamp","Date","toISOString","replace","sanitizedFilename","finalFilename","imageBuffer","Buffer","from","writeFile","screenshotMetadata","path","viewport","fileSize","step","steps","find","screenshot","message","daysOld","parseInt","cutoffDate","now","deletedCount","unlink","deletedFiles","freedSpace","filter","forEach"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-screenshots\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: Test Screenshots Management\r\n// Endpoint para gestión de screenshots de tests automatizados\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { testFlowManager } from '@/lib/testing/advanced-test-flows';\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport { ScreenshotMetadata } from '@/lib/testing/screenshot-manager';\r\n\r\ninterface ScreenshotListResponse {\r\n  success: boolean;\r\n  data: ScreenshotMetadata[];\r\n  total: number;\r\n  executionId?: string;\r\n  stats?: {\r\n    total: number;\r\n    byStep: Record<string, number>;\r\n    totalSize: number;\r\n  };\r\n}\r\n\r\ninterface ScreenshotUploadRequest {\r\n  executionId: string;\r\n  stepId?: string;\r\n  filename: string;\r\n  description: string;\r\n  base64Data: string;\r\n  metadata?: {\r\n    url?: string;\r\n    viewport?: { width: number; height: number };\r\n    timestamp?: string;\r\n  };\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n    const executionId = searchParams.get('executionId');\r\n    const filename = searchParams.get('filename');\r\n\r\n    switch (action) {\r\n      case 'list':\r\n        // Listar screenshots de una ejecución\r\n        if (!executionId) {\r\n          return NextResponse.json(\r\n            { error: 'executionId es requerido para listar screenshots' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        const screenshots = testFlowManager.getExecutionScreenshots(executionId);\r\n        const stats = testFlowManager.getScreenshotStats(executionId);\r\n\r\n        const response: ScreenshotListResponse = {\r\n          success: true,\r\n          data: screenshots,\r\n          total: screenshots.length,\r\n          executionId,\r\n          stats\r\n        };\r\n\r\n        return NextResponse.json(response);\r\n\r\n      case 'download':\r\n        // Descargar screenshot específico\r\n        if (!filename) {\r\n          return NextResponse.json(\r\n            { error: 'filename es requerido para descargar' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        try {\r\n          const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n          const filePath = path.join(screenshotsDir, filename);\r\n          \r\n          // Verificar que el archivo existe y está en el directorio permitido\r\n          const resolvedPath = path.resolve(filePath);\r\n          const resolvedDir = path.resolve(screenshotsDir);\r\n          \r\n          if (!resolvedPath.startsWith(resolvedDir)) {\r\n            return NextResponse.json(\r\n              { error: 'Acceso no autorizado al archivo' },\r\n              { status: 403 }\r\n            );\r\n          }\r\n\r\n          const fileBuffer = await fs.readFile(resolvedPath);\r\n          const fileExtension = path.extname(filename).toLowerCase();\r\n          \r\n          let contentType = 'application/octet-stream';\r\n          if (fileExtension === '.png') {contentType = 'image/png';}\r\n          else if (fileExtension === '.jpg' || fileExtension === '.jpeg') {contentType = 'image/jpeg';}\r\n\r\n          return new NextResponse(fileBuffer, {\r\n            headers: {\r\n              'Content-Type': contentType,\r\n              'Content-Disposition': `attachment; filename=\"${filename}\"`,\r\n              'Cache-Control': 'public, max-age=31536000'\r\n            }\r\n          });\r\n        } catch (error) {\r\n          return NextResponse.json(\r\n            { error: 'Archivo no encontrado' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n      case 'preview':\r\n        // Obtener preview base64 de screenshot\r\n        if (!filename) {\r\n          return NextResponse.json(\r\n            { error: 'filename es requerido para preview' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        try {\r\n          const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n          const filePath = path.join(screenshotsDir, filename);\r\n          \r\n          const resolvedPath = path.resolve(filePath);\r\n          const resolvedDir = path.resolve(screenshotsDir);\r\n          \r\n          if (!resolvedPath.startsWith(resolvedDir)) {\r\n            return NextResponse.json(\r\n              { error: 'Acceso no autorizado al archivo' },\r\n              { status: 403 }\r\n            );\r\n          }\r\n\r\n          const fileBuffer = await fs.readFile(resolvedPath);\r\n          const base64Data = fileBuffer.toString('base64');\r\n          const fileExtension = path.extname(filename).toLowerCase();\r\n          \r\n          let mimeType = 'image/png';\r\n          if (fileExtension === '.jpg' || fileExtension === '.jpeg') {mimeType = 'image/jpeg';}\r\n\r\n          return NextResponse.json({\r\n            success: true,\r\n            filename,\r\n            base64: `data:${mimeType};base64,${base64Data}`,\r\n            size: fileBuffer.length\r\n          });\r\n        } catch (error) {\r\n          return NextResponse.json(\r\n            { error: 'Archivo no encontrado' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n      case 'stats':\r\n        // Obtener estadísticas generales de screenshots\r\n        try {\r\n          const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n          const files = await fs.readdir(screenshotsDir);\r\n          \r\n          let totalSize = 0;\r\n          const fileStats = [];\r\n          \r\n          for (const file of files) {\r\n            if (file.match(/\\.(png|jpg|jpeg)$/i)) {\r\n              const filePath = path.join(screenshotsDir, file);\r\n              const stat = await fs.stat(filePath);\r\n              totalSize += stat.size;\r\n              fileStats.push({\r\n                filename: file,\r\n                size: stat.size,\r\n                created: stat.birthtime,\r\n                modified: stat.mtime\r\n              });\r\n            }\r\n          }\r\n\r\n          return NextResponse.json({\r\n            success: true,\r\n            stats: {\r\n              totalFiles: fileStats.length,\r\n              totalSize,\r\n              averageSize: fileStats.length > 0 ? Math.round(totalSize / fileStats.length) : 0,\r\n              oldestFile: fileStats.length > 0 ? Math.min(...fileStats.map(f => f.created.getTime())) : null,\r\n              newestFile: fileStats.length > 0 ? Math.max(...fileStats.map(f => f.created.getTime())) : null\r\n            },\r\n            files: fileStats.sort((a, b) => b.created.getTime() - a.created.getTime())\r\n          });\r\n        } catch (error) {\r\n          return NextResponse.json(\r\n            { error: 'Error al obtener estadísticas' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { \r\n            error: 'Acción no válida',\r\n            availableActions: ['list', 'download', 'preview', 'stats']\r\n          },\r\n          { status: 400 }\r\n        );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en API de screenshots:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: ScreenshotUploadRequest = await request.json();\r\n    const { executionId, stepId, filename, description, base64Data, metadata } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!executionId || !filename || !base64Data) {\r\n      return NextResponse.json(\r\n        { error: 'executionId, filename y base64Data son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la ejecución existe\r\n    const execution = testFlowManager.getExecution(executionId);\r\n    if (!execution) {\r\n      return NextResponse.json(\r\n        { error: 'Ejecución no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    try {\r\n      // Crear directorio si no existe\r\n      const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n      await fs.mkdir(screenshotsDir, { recursive: true });\r\n\r\n      // Generar nombre de archivo único\r\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n      const sanitizedFilename = filename.replace(/[^a-zA-Z0-9.-]/g, '_');\r\n      const finalFilename = `${executionId}_${timestamp}_${sanitizedFilename}`;\r\n      const filePath = path.join(screenshotsDir, finalFilename);\r\n\r\n      // Decodificar y guardar imagen\r\n      const imageBuffer = Buffer.from(base64Data.replace(/^data:image\\/\\w+;base64,/, ''), 'base64');\r\n      await fs.writeFile(filePath, imageBuffer);\r\n\r\n      // Crear metadata del screenshot\r\n      const screenshotMetadata: ScreenshotMetadata = {\r\n        filename: finalFilename,\r\n        path: filePath,\r\n        timestamp: new Date().toISOString(),\r\n        description,\r\n        url: metadata?.url,\r\n        viewport: metadata?.viewport,\r\n        fileSize: imageBuffer.length\r\n      };\r\n\r\n      // Agregar screenshot a la ejecución\r\n      if (stepId) {\r\n        // Agregar a un paso específico\r\n        const step = execution.steps.find(s => s.stepId === stepId);\r\n        if (step) {\r\n          step.screenshots.push(screenshotMetadata);\r\n        } else {\r\n          return NextResponse.json(\r\n            { error: 'Paso no encontrado' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n      } else {\r\n        // Agregar a la ejecución general\r\n        execution.screenshots.push(screenshotMetadata);\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        screenshot: screenshotMetadata,\r\n        message: 'Screenshot guardado exitosamente'\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error al guardar screenshot:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al guardar el screenshot' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en POST de screenshots:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const filename = searchParams.get('filename');\r\n    const executionId = searchParams.get('executionId');\r\n    const action = searchParams.get('action');\r\n\r\n    if (action === 'cleanup') {\r\n      // Limpiar screenshots antiguos\r\n      const daysOld = parseInt(searchParams.get('daysOld') || '7');\r\n      const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n      \r\n      try {\r\n        const files = await fs.readdir(screenshotsDir);\r\n        const cutoffDate = new Date(Date.now() - (daysOld * 24 * 60 * 60 * 1000));\r\n        let deletedCount = 0;\r\n        let totalSize = 0;\r\n\r\n        for (const file of files) {\r\n          if (file.match(/\\.(png|jpg|jpeg)$/i)) {\r\n            const filePath = path.join(screenshotsDir, file);\r\n            const stat = await fs.stat(filePath);\r\n            \r\n            if (stat.birthtime < cutoffDate) {\r\n              totalSize += stat.size;\r\n              await fs.unlink(filePath);\r\n              deletedCount++;\r\n            }\r\n          }\r\n        }\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          message: `Limpieza completada: ${deletedCount} archivos eliminados`,\r\n          deletedFiles: deletedCount,\r\n          freedSpace: totalSize\r\n        });\r\n      } catch (error) {\r\n        return NextResponse.json(\r\n          { error: 'Error durante la limpieza' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n    }\r\n\r\n    if (!filename) {\r\n      return NextResponse.json(\r\n        { error: 'filename es requerido para eliminar' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    try {\r\n      const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n      const filePath = path.join(screenshotsDir, filename);\r\n      \r\n      // Verificar seguridad del path\r\n      const resolvedPath = path.resolve(filePath);\r\n      const resolvedDir = path.resolve(screenshotsDir);\r\n      \r\n      if (!resolvedPath.startsWith(resolvedDir)) {\r\n        return NextResponse.json(\r\n          { error: 'Acceso no autorizado al archivo' },\r\n          { status: 403 }\r\n        );\r\n      }\r\n\r\n      await fs.unlink(resolvedPath);\r\n\r\n      // Remover de las ejecuciones si se especifica executionId\r\n      if (executionId) {\r\n        const execution = testFlowManager.getExecution(executionId);\r\n        if (execution) {\r\n          // Remover de screenshots generales\r\n          execution.screenshots = execution.screenshots.filter(s => s.filename !== filename);\r\n          \r\n          // Remover de screenshots de pasos\r\n          execution.steps.forEach(step => {\r\n            step.screenshots = step.screenshots.filter(s => s.filename !== filename);\r\n          });\r\n        }\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Screenshot eliminado exitosamente',\r\n        filename\r\n      });\r\n\r\n    } catch (error) {\r\n      return NextResponse.json(\r\n        { error: 'Archivo no encontrado o error al eliminar' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en DELETE de screenshots:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}