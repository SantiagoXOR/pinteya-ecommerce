d9c45ae341065ee5d48b9620cbd17ab4
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1tv6qd7in3() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-screenshots\\route.ts";
  var hash = "f92c0d80fbc8eba9fdcde369e1842d9fe4e78a0d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-screenshots\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 81
        }
      },
      "10": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 25
        }
      },
      "11": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 69
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "14": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 205,
          column: 5
        }
      },
      "15": {
        start: {
          line: 38,
          column: 33
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "16": {
        start: {
          line: 39,
          column: 23
        },
        end: {
          line: 39,
          column: 49
        }
      },
      "17": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 59
        }
      },
      "18": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 53
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "20": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "21": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 50,
          column: 23
        }
      },
      "22": {
        start: {
          line: 52,
          column: 36
        },
        end: {
          line: 52,
          column: 107
        }
      },
      "23": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 53,
          column: 96
        }
      },
      "24": {
        start: {
          line: 54,
          column: 33
        },
        end: {
          line: 60,
          column: 17
        }
      },
      "25": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 59
        }
      },
      "26": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "27": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 69,
          column: 23
        }
      },
      "28": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "29": {
        start: {
          line: 72,
          column: 43
        },
        end: {
          line: 72,
          column: 96
        }
      },
      "30": {
        start: {
          line: 73,
          column: 37
        },
        end: {
          line: 73,
          column: 81
        }
      },
      "31": {
        start: {
          line: 75,
          column: 41
        },
        end: {
          line: 75,
          column: 72
        }
      },
      "32": {
        start: {
          line: 76,
          column: 40
        },
        end: {
          line: 76,
          column: 77
        }
      },
      "33": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "34": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 82,
          column: 27
        }
      },
      "35": {
        start: {
          line: 84,
          column: 39
        },
        end: {
          line: 84,
          column: 80
        }
      },
      "36": {
        start: {
          line: 85,
          column: 42
        },
        end: {
          line: 85,
          column: 87
        }
      },
      "37": {
        start: {
          line: 86,
          column: 38
        },
        end: {
          line: 86,
          column: 64
        }
      },
      "38": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 91,
          column: 21
        }
      },
      "39": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 88,
          column: 50
        }
      },
      "40": {
        start: {
          line: 89,
          column: 27
        },
        end: {
          line: 91,
          column: 21
        }
      },
      "41": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 90,
          column: 51
        }
      },
      "42": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 98,
          column: 23
        }
      },
      "43": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 104,
          column: 23
        }
      },
      "44": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 114,
          column: 17
        }
      },
      "45": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 113,
          column: 23
        }
      },
      "46": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "47": {
        start: {
          line: 116,
          column: 43
        },
        end: {
          line: 116,
          column: 96
        }
      },
      "48": {
        start: {
          line: 117,
          column: 37
        },
        end: {
          line: 117,
          column: 81
        }
      },
      "49": {
        start: {
          line: 118,
          column: 41
        },
        end: {
          line: 118,
          column: 72
        }
      },
      "50": {
        start: {
          line: 119,
          column: 40
        },
        end: {
          line: 119,
          column: 77
        }
      },
      "51": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 126,
          column: 21
        }
      },
      "52": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 125,
          column: 27
        }
      },
      "53": {
        start: {
          line: 127,
          column: 39
        },
        end: {
          line: 127,
          column: 80
        }
      },
      "54": {
        start: {
          line: 128,
          column: 39
        },
        end: {
          line: 128,
          column: 68
        }
      },
      "55": {
        start: {
          line: 129,
          column: 42
        },
        end: {
          line: 129,
          column: 87
        }
      },
      "56": {
        start: {
          line: 130,
          column: 35
        },
        end: {
          line: 130,
          column: 46
        }
      },
      "57": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 133,
          column: 21
        }
      },
      "58": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 48
        }
      },
      "59": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 139,
          column: 23
        }
      },
      "60": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 145,
          column: 23
        }
      },
      "61": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 184,
          column: 17
        }
      },
      "62": {
        start: {
          line: 150,
          column: 43
        },
        end: {
          line: 150,
          column: 96
        }
      },
      "63": {
        start: {
          line: 151,
          column: 34
        },
        end: {
          line: 151,
          column: 76
        }
      },
      "64": {
        start: {
          line: 152,
          column: 36
        },
        end: {
          line: 152,
          column: 37
        }
      },
      "65": {
        start: {
          line: 153,
          column: 38
        },
        end: {
          line: 153,
          column: 40
        }
      },
      "66": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "67": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 165,
          column: 25
        }
      },
      "68": {
        start: {
          line: 156,
          column: 45
        },
        end: {
          line: 156,
          column: 85
        }
      },
      "69": {
        start: {
          line: 157,
          column: 41
        },
        end: {
          line: 157,
          column: 74
        }
      },
      "70": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 158,
          column: 51
        }
      },
      "71": {
        start: {
          line: 159,
          column: 28
        },
        end: {
          line: 164,
          column: 31
        }
      },
      "72": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 177,
          column: 23
        }
      },
      "73": {
        start: {
          line: 173,
          column: 94
        },
        end: {
          line: 173,
          column: 113
        }
      },
      "74": {
        start: {
          line: 174,
          column: 94
        },
        end: {
          line: 174,
          column: 113
        }
      },
      "75": {
        start: {
          line: 176,
          column: 54
        },
        end: {
          line: 176,
          column: 95
        }
      },
      "76": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 183,
          column: 23
        }
      },
      "77": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 196,
          column: 19
        }
      },
      "78": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 61
        }
      },
      "79": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "80": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 289,
          column: 5
        }
      },
      "81": {
        start: {
          line: 209,
          column: 21
        },
        end: {
          line: 209,
          column: 41
        }
      },
      "82": {
        start: {
          line: 210,
          column: 85
        },
        end: {
          line: 210,
          column: 89
        }
      },
      "83": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "84": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 217,
          column: 15
        }
      },
      "85": {
        start: {
          line: 220,
          column: 26
        },
        end: {
          line: 220,
          column: 86
        }
      },
      "86": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "87": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "88": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "89": {
        start: {
          line: 230,
          column: 35
        },
        end: {
          line: 230,
          column: 88
        }
      },
      "90": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "91": {
        start: {
          line: 235,
          column: 30
        },
        end: {
          line: 235,
          column: 76
        }
      },
      "92": {
        start: {
          line: 236,
          column: 38
        },
        end: {
          line: 236,
          column: 78
        }
      },
      "93": {
        start: {
          line: 237,
          column: 34
        },
        end: {
          line: 237,
          column: 84
        }
      },
      "94": {
        start: {
          line: 238,
          column: 29
        },
        end: {
          line: 238,
          column: 78
        }
      },
      "95": {
        start: {
          line: 240,
          column: 32
        },
        end: {
          line: 240,
          column: 105
        }
      },
      "96": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 64
        }
      },
      "97": {
        start: {
          line: 243,
          column: 39
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "98": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "99": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 255,
          column: 75
        }
      },
      "100": {
        start: {
          line: 255,
          column: 55
        },
        end: {
          line: 255,
          column: 74
        }
      },
      "101": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 264,
          column: 17
        }
      },
      "102": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 62
        }
      },
      "103": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 263,
          column: 23
        }
      },
      "104": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "105": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "106": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 65
        }
      },
      "107": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "108": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 62
        }
      },
      "109": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 288,
          column: 11
        }
      },
      "110": {
        start: {
          line: 292,
          column: 4
        },
        end: {
          line: 383,
          column: 5
        }
      },
      "111": {
        start: {
          line: 293,
          column: 33
        },
        end: {
          line: 293,
          column: 53
        }
      },
      "112": {
        start: {
          line: 294,
          column: 25
        },
        end: {
          line: 294,
          column: 53
        }
      },
      "113": {
        start: {
          line: 295,
          column: 28
        },
        end: {
          line: 295,
          column: 59
        }
      },
      "114": {
        start: {
          line: 296,
          column: 23
        },
        end: {
          line: 296,
          column: 49
        }
      },
      "115": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "116": {
        start: {
          line: 299,
          column: 28
        },
        end: {
          line: 299,
          column: 72
        }
      },
      "117": {
        start: {
          line: 300,
          column: 35
        },
        end: {
          line: 300,
          column: 88
        }
      },
      "118": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "119": {
        start: {
          line: 302,
          column: 30
        },
        end: {
          line: 302,
          column: 72
        }
      },
      "120": {
        start: {
          line: 303,
          column: 35
        },
        end: {
          line: 303,
          column: 87
        }
      },
      "121": {
        start: {
          line: 304,
          column: 35
        },
        end: {
          line: 304,
          column: 36
        }
      },
      "122": {
        start: {
          line: 305,
          column: 32
        },
        end: {
          line: 305,
          column: 33
        }
      },
      "123": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 316,
          column: 17
        }
      },
      "124": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 315,
          column: 21
        }
      },
      "125": {
        start: {
          line: 308,
          column: 41
        },
        end: {
          line: 308,
          column: 81
        }
      },
      "126": {
        start: {
          line: 309,
          column: 37
        },
        end: {
          line: 309,
          column: 70
        }
      },
      "127": {
        start: {
          line: 310,
          column: 24
        },
        end: {
          line: 314,
          column: 25
        }
      },
      "128": {
        start: {
          line: 311,
          column: 28
        },
        end: {
          line: 311,
          column: 51
        }
      },
      "129": {
        start: {
          line: 312,
          column: 28
        },
        end: {
          line: 312,
          column: 64
        }
      },
      "130": {
        start: {
          line: 313,
          column: 28
        },
        end: {
          line: 313,
          column: 43
        }
      },
      "131": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 322,
          column: 19
        }
      },
      "132": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 328,
          column: 19
        }
      },
      "133": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "134": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "135": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "136": {
        start: {
          line: 339,
          column: 35
        },
        end: {
          line: 339,
          column: 88
        }
      },
      "137": {
        start: {
          line: 340,
          column: 29
        },
        end: {
          line: 340,
          column: 73
        }
      },
      "138": {
        start: {
          line: 342,
          column: 33
        },
        end: {
          line: 342,
          column: 64
        }
      },
      "139": {
        start: {
          line: 343,
          column: 32
        },
        end: {
          line: 343,
          column: 69
        }
      },
      "140": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 350,
          column: 13
        }
      },
      "141": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 349,
          column: 19
        }
      },
      "142": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 52
        }
      },
      "143": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "144": {
        start: {
          line: 354,
          column: 34
        },
        end: {
          line: 354,
          column: 94
        }
      },
      "145": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 362,
          column: 17
        }
      },
      "146": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 103
        }
      },
      "147": {
        start: {
          line: 357,
          column: 78
        },
        end: {
          line: 357,
          column: 101
        }
      },
      "148": {
        start: {
          line: 359,
          column: 20
        },
        end: {
          line: 361,
          column: 23
        }
      },
      "149": {
        start: {
          line: 360,
          column: 24
        },
        end: {
          line: 360,
          column: 97
        }
      },
      "150": {
        start: {
          line: 360,
          column: 72
        },
        end: {
          line: 360,
          column: 95
        }
      },
      "151": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 368,
          column: 15
        }
      },
      "152": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 374,
          column: 15
        }
      },
      "153": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 377,
          column: 64
        }
      },
      "154": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 382,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 33
          }
        },
        loc: {
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 18
          }
        },
        loc: {
          start: {
            line: 36,
            column: 28
          },
          end: {
            line: 206,
            column: 1
          }
        },
        line: 36
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 173,
            column: 89
          },
          end: {
            line: 173,
            column: 90
          }
        },
        loc: {
          start: {
            line: 173,
            column: 94
          },
          end: {
            line: 173,
            column: 113
          }
        },
        line: 173
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 174,
            column: 89
          },
          end: {
            line: 174,
            column: 90
          }
        },
        loc: {
          start: {
            line: 174,
            column: 94
          },
          end: {
            line: 174,
            column: 113
          }
        },
        line: 174
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 176,
            column: 46
          },
          end: {
            line: 176,
            column: 47
          }
        },
        loc: {
          start: {
            line: 176,
            column: 54
          },
          end: {
            line: 176,
            column: 95
          }
        },
        line: 176
      },
      "10": {
        name: "POST",
        decl: {
          start: {
            line: 207,
            column: 15
          },
          end: {
            line: 207,
            column: 19
          }
        },
        loc: {
          start: {
            line: 207,
            column: 29
          },
          end: {
            line: 290,
            column: 1
          }
        },
        line: 207
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 255,
            column: 50
          },
          end: {
            line: 255,
            column: 51
          }
        },
        loc: {
          start: {
            line: 255,
            column: 55
          },
          end: {
            line: 255,
            column: 74
          }
        },
        line: 255
      },
      "12": {
        name: "DELETE",
        decl: {
          start: {
            line: 291,
            column: 15
          },
          end: {
            line: 291,
            column: 21
          }
        },
        loc: {
          start: {
            line: 291,
            column: 31
          },
          end: {
            line: 384,
            column: 1
          }
        },
        line: 291
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 357,
            column: 73
          },
          end: {
            line: 357,
            column: 74
          }
        },
        loc: {
          start: {
            line: 357,
            column: 78
          },
          end: {
            line: 357,
            column: 101
          }
        },
        line: 357
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 359,
            column: 44
          },
          end: {
            line: 359,
            column: 45
          }
        },
        loc: {
          start: {
            line: 359,
            column: 52
          },
          end: {
            line: 361,
            column: 21
          }
        },
        line: 359
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 360,
            column: 67
          },
          end: {
            line: 360,
            column: 68
          }
        },
        loc: {
          start: {
            line: 360,
            column: 72
          },
          end: {
            line: 360,
            column: 95
          }
        },
        line: 360
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 31,
            column: 38
          }
        }, {
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 33,
            column: 5
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 14
          }
        }, {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 31,
            column: 32
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 61,
            column: 59
          }
        }, {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 105,
            column: 17
          }
        }, {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 184,
            column: 17
          }
        }, {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 196,
            column: 19
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 20
          },
          end: {
            line: 91,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 20
          },
          end: {
            line: 91,
            column: 21
          }
        }, {
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 91,
            column: 21
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 91,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 91,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 31
          },
          end: {
            line: 89,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 31
          },
          end: {
            line: 89,
            column: 55
          }
        }, {
          start: {
            line: 89,
            column: 59
          },
          end: {
            line: 89,
            column: 84
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 120,
            column: 20
          },
          end: {
            line: 126,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 20
          },
          end: {
            line: 126,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "11": {
        loc: {
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 133,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 133,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "12": {
        loc: {
          start: {
            line: 131,
            column: 24
          },
          end: {
            line: 131,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 24
          },
          end: {
            line: 131,
            column: 48
          }
        }, {
          start: {
            line: 131,
            column: 52
          },
          end: {
            line: 131,
            column: 77
          }
        }],
        line: 131
      },
      "13": {
        loc: {
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 165,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 165,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "14": {
        loc: {
          start: {
            line: 172,
            column: 41
          },
          end: {
            line: 172,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 64
          },
          end: {
            line: 172,
            column: 104
          }
        }, {
          start: {
            line: 172,
            column: 107
          },
          end: {
            line: 172,
            column: 108
          }
        }],
        line: 172
      },
      "15": {
        loc: {
          start: {
            line: 173,
            column: 40
          },
          end: {
            line: 173,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 63
          },
          end: {
            line: 173,
            column: 115
          }
        }, {
          start: {
            line: 173,
            column: 118
          },
          end: {
            line: 173,
            column: 122
          }
        }],
        line: 173
      },
      "16": {
        loc: {
          start: {
            line: 174,
            column: 40
          },
          end: {
            line: 174,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 63
          },
          end: {
            line: 174,
            column: 115
          }
        }, {
          start: {
            line: 174,
            column: 118
          },
          end: {
            line: 174,
            column: 122
          }
        }],
        line: 174
      },
      "17": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "18": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 212,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 212,
            column: 24
          }
        }, {
          start: {
            line: 212,
            column: 28
          },
          end: {
            line: 212,
            column: 37
          }
        }, {
          start: {
            line: 212,
            column: 41
          },
          end: {
            line: 212,
            column: 52
          }
        }],
        line: 212
      },
      "19": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "20": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: 265,
            column: 19
          },
          end: {
            line: 268,
            column: 13
          }
        }],
        line: 253
      },
      "21": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        }, {
          start: {
            line: 258,
            column: 23
          },
          end: {
            line: 264,
            column: 17
          }
        }],
        line: 256
      },
      "22": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "23": {
        loc: {
          start: {
            line: 299,
            column: 37
          },
          end: {
            line: 299,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 37
          },
          end: {
            line: 299,
            column: 64
          }
        }, {
          start: {
            line: 299,
            column: 68
          },
          end: {
            line: 299,
            column: 71
          }
        }],
        line: 299
      },
      "24": {
        loc: {
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 315,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 315,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "25": {
        loc: {
          start: {
            line: 310,
            column: 24
          },
          end: {
            line: 314,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 24
          },
          end: {
            line: 314,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "26": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "27": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "28": {
        loc: {
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "29": {
        loc: {
          start: {
            line: 355,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-screenshots\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: Test Screenshots Management\r\n// Endpoint para gesti\xF3n de screenshots de tests automatizados\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { testFlowManager } from '@/lib/testing/advanced-test-flows';\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport { ScreenshotMetadata } from '@/lib/testing/screenshot-manager';\r\n\r\ninterface ScreenshotListResponse {\r\n  success: boolean;\r\n  data: ScreenshotMetadata[];\r\n  total: number;\r\n  executionId?: string;\r\n  stats?: {\r\n    total: number;\r\n    byStep: Record<string, number>;\r\n    totalSize: number;\r\n  };\r\n}\r\n\r\ninterface ScreenshotUploadRequest {\r\n  executionId: string;\r\n  stepId?: string;\r\n  filename: string;\r\n  description: string;\r\n  base64Data: string;\r\n  metadata?: {\r\n    url?: string;\r\n    viewport?: { width: number; height: number };\r\n    timestamp?: string;\r\n  };\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n    const executionId = searchParams.get('executionId');\r\n    const filename = searchParams.get('filename');\r\n\r\n    switch (action) {\r\n      case 'list':\r\n        // Listar screenshots de una ejecuci\xF3n\r\n        if (!executionId) {\r\n          return NextResponse.json(\r\n            { error: 'executionId es requerido para listar screenshots' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        const screenshots = testFlowManager.getExecutionScreenshots(executionId);\r\n        const stats = testFlowManager.getScreenshotStats(executionId);\r\n\r\n        const response: ScreenshotListResponse = {\r\n          success: true,\r\n          data: screenshots,\r\n          total: screenshots.length,\r\n          executionId,\r\n          stats\r\n        };\r\n\r\n        return NextResponse.json(response);\r\n\r\n      case 'download':\r\n        // Descargar screenshot espec\xEDfico\r\n        if (!filename) {\r\n          return NextResponse.json(\r\n            { error: 'filename es requerido para descargar' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        try {\r\n          const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n          const filePath = path.join(screenshotsDir, filename);\r\n          \r\n          // Verificar que el archivo existe y est\xE1 en el directorio permitido\r\n          const resolvedPath = path.resolve(filePath);\r\n          const resolvedDir = path.resolve(screenshotsDir);\r\n          \r\n          if (!resolvedPath.startsWith(resolvedDir)) {\r\n            return NextResponse.json(\r\n              { error: 'Acceso no autorizado al archivo' },\r\n              { status: 403 }\r\n            );\r\n          }\r\n\r\n          const fileBuffer = await fs.readFile(resolvedPath);\r\n          const fileExtension = path.extname(filename).toLowerCase();\r\n          \r\n          let contentType = 'application/octet-stream';\r\n          if (fileExtension === '.png') {contentType = 'image/png';}\r\n          else if (fileExtension === '.jpg' || fileExtension === '.jpeg') {contentType = 'image/jpeg';}\r\n\r\n          return new NextResponse(fileBuffer, {\r\n            headers: {\r\n              'Content-Type': contentType,\r\n              'Content-Disposition': `attachment; filename=\"${filename}\"`,\r\n              'Cache-Control': 'public, max-age=31536000'\r\n            }\r\n          });\r\n        } catch (error) {\r\n          return NextResponse.json(\r\n            { error: 'Archivo no encontrado' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n      case 'preview':\r\n        // Obtener preview base64 de screenshot\r\n        if (!filename) {\r\n          return NextResponse.json(\r\n            { error: 'filename es requerido para preview' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        try {\r\n          const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n          const filePath = path.join(screenshotsDir, filename);\r\n          \r\n          const resolvedPath = path.resolve(filePath);\r\n          const resolvedDir = path.resolve(screenshotsDir);\r\n          \r\n          if (!resolvedPath.startsWith(resolvedDir)) {\r\n            return NextResponse.json(\r\n              { error: 'Acceso no autorizado al archivo' },\r\n              { status: 403 }\r\n            );\r\n          }\r\n\r\n          const fileBuffer = await fs.readFile(resolvedPath);\r\n          const base64Data = fileBuffer.toString('base64');\r\n          const fileExtension = path.extname(filename).toLowerCase();\r\n          \r\n          let mimeType = 'image/png';\r\n          if (fileExtension === '.jpg' || fileExtension === '.jpeg') {mimeType = 'image/jpeg';}\r\n\r\n          return NextResponse.json({\r\n            success: true,\r\n            filename,\r\n            base64: `data:${mimeType};base64,${base64Data}`,\r\n            size: fileBuffer.length\r\n          });\r\n        } catch (error) {\r\n          return NextResponse.json(\r\n            { error: 'Archivo no encontrado' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n      case 'stats':\r\n        // Obtener estad\xEDsticas generales de screenshots\r\n        try {\r\n          const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n          const files = await fs.readdir(screenshotsDir);\r\n          \r\n          let totalSize = 0;\r\n          const fileStats = [];\r\n          \r\n          for (const file of files) {\r\n            if (file.match(/\\.(png|jpg|jpeg)$/i)) {\r\n              const filePath = path.join(screenshotsDir, file);\r\n              const stat = await fs.stat(filePath);\r\n              totalSize += stat.size;\r\n              fileStats.push({\r\n                filename: file,\r\n                size: stat.size,\r\n                created: stat.birthtime,\r\n                modified: stat.mtime\r\n              });\r\n            }\r\n          }\r\n\r\n          return NextResponse.json({\r\n            success: true,\r\n            stats: {\r\n              totalFiles: fileStats.length,\r\n              totalSize,\r\n              averageSize: fileStats.length > 0 ? Math.round(totalSize / fileStats.length) : 0,\r\n              oldestFile: fileStats.length > 0 ? Math.min(...fileStats.map(f => f.created.getTime())) : null,\r\n              newestFile: fileStats.length > 0 ? Math.max(...fileStats.map(f => f.created.getTime())) : null\r\n            },\r\n            files: fileStats.sort((a, b) => b.created.getTime() - a.created.getTime())\r\n          });\r\n        } catch (error) {\r\n          return NextResponse.json(\r\n            { error: 'Error al obtener estad\xEDsticas' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { \r\n            error: 'Acci\xF3n no v\xE1lida',\r\n            availableActions: ['list', 'download', 'preview', 'stats']\r\n          },\r\n          { status: 400 }\r\n        );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en API de screenshots:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: ScreenshotUploadRequest = await request.json();\r\n    const { executionId, stepId, filename, description, base64Data, metadata } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!executionId || !filename || !base64Data) {\r\n      return NextResponse.json(\r\n        { error: 'executionId, filename y base64Data son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la ejecuci\xF3n existe\r\n    const execution = testFlowManager.getExecution(executionId);\r\n    if (!execution) {\r\n      return NextResponse.json(\r\n        { error: 'Ejecuci\xF3n no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    try {\r\n      // Crear directorio si no existe\r\n      const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n      await fs.mkdir(screenshotsDir, { recursive: true });\r\n\r\n      // Generar nombre de archivo \xFAnico\r\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n      const sanitizedFilename = filename.replace(/[^a-zA-Z0-9.-]/g, '_');\r\n      const finalFilename = `${executionId}_${timestamp}_${sanitizedFilename}`;\r\n      const filePath = path.join(screenshotsDir, finalFilename);\r\n\r\n      // Decodificar y guardar imagen\r\n      const imageBuffer = Buffer.from(base64Data.replace(/^data:image\\/\\w+;base64,/, ''), 'base64');\r\n      await fs.writeFile(filePath, imageBuffer);\r\n\r\n      // Crear metadata del screenshot\r\n      const screenshotMetadata: ScreenshotMetadata = {\r\n        filename: finalFilename,\r\n        path: filePath,\r\n        timestamp: new Date().toISOString(),\r\n        description,\r\n        url: metadata?.url,\r\n        viewport: metadata?.viewport,\r\n        fileSize: imageBuffer.length\r\n      };\r\n\r\n      // Agregar screenshot a la ejecuci\xF3n\r\n      if (stepId) {\r\n        // Agregar a un paso espec\xEDfico\r\n        const step = execution.steps.find(s => s.stepId === stepId);\r\n        if (step) {\r\n          step.screenshots.push(screenshotMetadata);\r\n        } else {\r\n          return NextResponse.json(\r\n            { error: 'Paso no encontrado' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n      } else {\r\n        // Agregar a la ejecuci\xF3n general\r\n        execution.screenshots.push(screenshotMetadata);\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        screenshot: screenshotMetadata,\r\n        message: 'Screenshot guardado exitosamente'\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error al guardar screenshot:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al guardar el screenshot' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en POST de screenshots:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const filename = searchParams.get('filename');\r\n    const executionId = searchParams.get('executionId');\r\n    const action = searchParams.get('action');\r\n\r\n    if (action === 'cleanup') {\r\n      // Limpiar screenshots antiguos\r\n      const daysOld = parseInt(searchParams.get('daysOld') || '7');\r\n      const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n      \r\n      try {\r\n        const files = await fs.readdir(screenshotsDir);\r\n        const cutoffDate = new Date(Date.now() - (daysOld * 24 * 60 * 60 * 1000));\r\n        let deletedCount = 0;\r\n        let totalSize = 0;\r\n\r\n        for (const file of files) {\r\n          if (file.match(/\\.(png|jpg|jpeg)$/i)) {\r\n            const filePath = path.join(screenshotsDir, file);\r\n            const stat = await fs.stat(filePath);\r\n            \r\n            if (stat.birthtime < cutoffDate) {\r\n              totalSize += stat.size;\r\n              await fs.unlink(filePath);\r\n              deletedCount++;\r\n            }\r\n          }\r\n        }\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          message: `Limpieza completada: ${deletedCount} archivos eliminados`,\r\n          deletedFiles: deletedCount,\r\n          freedSpace: totalSize\r\n        });\r\n      } catch (error) {\r\n        return NextResponse.json(\r\n          { error: 'Error durante la limpieza' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n    }\r\n\r\n    if (!filename) {\r\n      return NextResponse.json(\r\n        { error: 'filename es requerido para eliminar' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    try {\r\n      const screenshotsDir = path.join(process.cwd(), 'test-screenshots');\r\n      const filePath = path.join(screenshotsDir, filename);\r\n      \r\n      // Verificar seguridad del path\r\n      const resolvedPath = path.resolve(filePath);\r\n      const resolvedDir = path.resolve(screenshotsDir);\r\n      \r\n      if (!resolvedPath.startsWith(resolvedDir)) {\r\n        return NextResponse.json(\r\n          { error: 'Acceso no autorizado al archivo' },\r\n          { status: 403 }\r\n        );\r\n      }\r\n\r\n      await fs.unlink(resolvedPath);\r\n\r\n      // Remover de las ejecuciones si se especifica executionId\r\n      if (executionId) {\r\n        const execution = testFlowManager.getExecution(executionId);\r\n        if (execution) {\r\n          // Remover de screenshots generales\r\n          execution.screenshots = execution.screenshots.filter(s => s.filename !== filename);\r\n          \r\n          // Remover de screenshots de pasos\r\n          execution.steps.forEach(step => {\r\n            step.screenshots = step.screenshots.filter(s => s.filename !== filename);\r\n          });\r\n        }\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Screenshot eliminado exitosamente',\r\n        filename\r\n      });\r\n\r\n    } catch (error) {\r\n      return NextResponse.json(\r\n        { error: 'Archivo no encontrado o error al eliminar' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en DELETE de screenshots:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "POST", "runtime", "request", "searchParams", "URL", "url", "action", "get", "executionId", "filename", "NextResponse", "json", "error", "status", "screenshots", "testFlowManager", "getExecutionScreenshots", "stats", "getScreenshotStats", "response", "success", "data", "total", "length", "screenshotsDir", "path", "join", "process", "cwd", "filePath", "resolvedPath", "resolve", "resolvedDir", "startsWith", "fileBuffer", "fs", "readFile", "fileExtension", "extname", "toLowerCase", "contentType", "headers", "base64Data", "toString", "mimeType", "base64", "size", "files", "readdir", "totalSize", "fileStats", "file", "match", "stat", "push", "created", "birthtime", "modified", "mtime", "totalFiles", "averageSize", "Math", "round", "oldestFile", "min", "map", "f", "getTime", "newestFile", "max", "sort", "a", "b", "availableActions", "console", "body", "stepId", "description", "metadata", "execution", "getExecution", "mkdir", "recursive", "timestamp", "Date", "toISOString", "replace", "sanitizedFilename", "finalFilename", "imageBuffer", "Buffer", "from", "writeFile", "screenshotMetadata", "viewport", "fileSize", "step", "steps", "find", "s", "screenshot", "message", "daysOld", "parseInt", "cutoffDate", "now", "deletedCount", "unlink", "deletedFiles", "freedSpace", "filter", "forEach"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f92c0d80fbc8eba9fdcde369e1842d9fe4e78a0d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1tv6qd7in3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1tv6qd7in3();
cov_1tv6qd7in3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1tv6qd7in3().f[0]++;
  cov_1tv6qd7in3().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1tv6qd7in3().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1tv6qd7in3().f[1]++;
    cov_1tv6qd7in3().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1tv6qd7in3().f[2]++;
    cov_1tv6qd7in3().s[5]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1tv6qd7in3().f[3]++;
    cov_1tv6qd7in3().s[6]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1tv6qd7in3().f[4]++;
    cov_1tv6qd7in3().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1tv6qd7in3().s[8]++, require("next/server"));
const _advancedtestflows =
/* istanbul ignore next */
(cov_1tv6qd7in3().s[9]++, require("../../../../lib/testing/advanced-test-flows"));
const _fs =
/* istanbul ignore next */
(cov_1tv6qd7in3().s[10]++, require("fs"));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_1tv6qd7in3().s[11]++, _interop_require_default(require("path")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1tv6qd7in3().f[5]++;
  cov_1tv6qd7in3().s[12]++;
  return /* istanbul ignore next */(cov_1tv6qd7in3().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1tv6qd7in3().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1tv6qd7in3().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1tv6qd7in3().b[0][1]++, {
    default: obj
  });
}
const runtime =
/* istanbul ignore next */
(cov_1tv6qd7in3().s[13]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_1tv6qd7in3().f[6]++;
  cov_1tv6qd7in3().s[14]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[15]++, new URL(request.url));
    const action =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[16]++, searchParams.get('action'));
    const executionId =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[17]++, searchParams.get('executionId'));
    const filename =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[18]++, searchParams.get('filename'));
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[19]++;
    switch (action) {
      case 'list':
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[2][0]++;
        cov_1tv6qd7in3().s[20]++;
        // Listar screenshots de una ejecuciÃ³n
        if (!executionId) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().b[3][0]++;
          cov_1tv6qd7in3().s[21]++;
          return _server.NextResponse.json({
            error: 'executionId es requerido para listar screenshots'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_1tv6qd7in3().b[3][1]++;
        }
        const screenshots =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[22]++, _advancedtestflows.testFlowManager.getExecutionScreenshots(executionId));
        const stats =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[23]++, _advancedtestflows.testFlowManager.getScreenshotStats(executionId));
        const response =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[24]++, {
          success: true,
          data: screenshots,
          total: screenshots.length,
          executionId,
          stats
        });
        /* istanbul ignore next */
        cov_1tv6qd7in3().s[25]++;
        return _server.NextResponse.json(response);
      case 'download':
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[2][1]++;
        cov_1tv6qd7in3().s[26]++;
        // Descargar screenshot especÃ­fico
        if (!filename) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().b[4][0]++;
          cov_1tv6qd7in3().s[27]++;
          return _server.NextResponse.json({
            error: 'filename es requerido para descargar'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_1tv6qd7in3().b[4][1]++;
        }
        cov_1tv6qd7in3().s[28]++;
        try {
          const screenshotsDir =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[29]++, _path.default.join(process.cwd(), 'test-screenshots'));
          const filePath =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[30]++, _path.default.join(screenshotsDir, filename));
          // Verificar que el archivo existe y estÃ¡ en el directorio permitido
          const resolvedPath =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[31]++, _path.default.resolve(filePath));
          const resolvedDir =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[32]++, _path.default.resolve(screenshotsDir));
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[33]++;
          if (!resolvedPath.startsWith(resolvedDir)) {
            /* istanbul ignore next */
            cov_1tv6qd7in3().b[5][0]++;
            cov_1tv6qd7in3().s[34]++;
            return _server.NextResponse.json({
              error: 'Acceso no autorizado al archivo'
            }, {
              status: 403
            });
          } else
          /* istanbul ignore next */
          {
            cov_1tv6qd7in3().b[5][1]++;
          }
          const fileBuffer =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[35]++, await _fs.promises.readFile(resolvedPath));
          const fileExtension =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[36]++, _path.default.extname(filename).toLowerCase());
          let contentType =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[37]++, 'application/octet-stream');
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[38]++;
          if (fileExtension === '.png') {
            /* istanbul ignore next */
            cov_1tv6qd7in3().b[6][0]++;
            cov_1tv6qd7in3().s[39]++;
            contentType = 'image/png';
          } else {
            /* istanbul ignore next */
            cov_1tv6qd7in3().b[6][1]++;
            cov_1tv6qd7in3().s[40]++;
            if (
            /* istanbul ignore next */
            (cov_1tv6qd7in3().b[8][0]++, fileExtension === '.jpg') ||
            /* istanbul ignore next */
            (cov_1tv6qd7in3().b[8][1]++, fileExtension === '.jpeg')) {
              /* istanbul ignore next */
              cov_1tv6qd7in3().b[7][0]++;
              cov_1tv6qd7in3().s[41]++;
              contentType = 'image/jpeg';
            } else
            /* istanbul ignore next */
            {
              cov_1tv6qd7in3().b[7][1]++;
            }
          }
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[42]++;
          return new _server.NextResponse(fileBuffer, {
            headers: {
              'Content-Type': contentType,
              'Content-Disposition': `attachment; filename="${filename}"`,
              'Cache-Control': 'public, max-age=31536000'
            }
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[43]++;
          return _server.NextResponse.json({
            error: 'Archivo no encontrado'
          }, {
            status: 404
          });
        }
      case 'preview':
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[2][2]++;
        cov_1tv6qd7in3().s[44]++;
        // Obtener preview base64 de screenshot
        if (!filename) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().b[9][0]++;
          cov_1tv6qd7in3().s[45]++;
          return _server.NextResponse.json({
            error: 'filename es requerido para preview'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_1tv6qd7in3().b[9][1]++;
        }
        cov_1tv6qd7in3().s[46]++;
        try {
          const screenshotsDir =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[47]++, _path.default.join(process.cwd(), 'test-screenshots'));
          const filePath =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[48]++, _path.default.join(screenshotsDir, filename));
          const resolvedPath =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[49]++, _path.default.resolve(filePath));
          const resolvedDir =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[50]++, _path.default.resolve(screenshotsDir));
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[51]++;
          if (!resolvedPath.startsWith(resolvedDir)) {
            /* istanbul ignore next */
            cov_1tv6qd7in3().b[10][0]++;
            cov_1tv6qd7in3().s[52]++;
            return _server.NextResponse.json({
              error: 'Acceso no autorizado al archivo'
            }, {
              status: 403
            });
          } else
          /* istanbul ignore next */
          {
            cov_1tv6qd7in3().b[10][1]++;
          }
          const fileBuffer =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[53]++, await _fs.promises.readFile(resolvedPath));
          const base64Data =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[54]++, fileBuffer.toString('base64'));
          const fileExtension =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[55]++, _path.default.extname(filename).toLowerCase());
          let mimeType =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[56]++, 'image/png');
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[57]++;
          if (
          /* istanbul ignore next */
          (cov_1tv6qd7in3().b[12][0]++, fileExtension === '.jpg') ||
          /* istanbul ignore next */
          (cov_1tv6qd7in3().b[12][1]++, fileExtension === '.jpeg')) {
            /* istanbul ignore next */
            cov_1tv6qd7in3().b[11][0]++;
            cov_1tv6qd7in3().s[58]++;
            mimeType = 'image/jpeg';
          } else
          /* istanbul ignore next */
          {
            cov_1tv6qd7in3().b[11][1]++;
          }
          cov_1tv6qd7in3().s[59]++;
          return _server.NextResponse.json({
            success: true,
            filename,
            base64: `data:${mimeType};base64,${base64Data}`,
            size: fileBuffer.length
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[60]++;
          return _server.NextResponse.json({
            error: 'Archivo no encontrado'
          }, {
            status: 404
          });
        }
      case 'stats':
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[2][3]++;
        cov_1tv6qd7in3().s[61]++;
        // Obtener estadÃ­sticas generales de screenshots
        try {
          const screenshotsDir =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[62]++, _path.default.join(process.cwd(), 'test-screenshots'));
          const files =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[63]++, await _fs.promises.readdir(screenshotsDir));
          let totalSize =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[64]++, 0);
          const fileStats =
          /* istanbul ignore next */
          (cov_1tv6qd7in3().s[65]++, []);
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[66]++;
          for (const file of files) {
            /* istanbul ignore next */
            cov_1tv6qd7in3().s[67]++;
            if (file.match(/\.(png|jpg|jpeg)$/i)) {
              /* istanbul ignore next */
              cov_1tv6qd7in3().b[13][0]++;
              const filePath =
              /* istanbul ignore next */
              (cov_1tv6qd7in3().s[68]++, _path.default.join(screenshotsDir, file));
              const stat =
              /* istanbul ignore next */
              (cov_1tv6qd7in3().s[69]++, await _fs.promises.stat(filePath));
              /* istanbul ignore next */
              cov_1tv6qd7in3().s[70]++;
              totalSize += stat.size;
              /* istanbul ignore next */
              cov_1tv6qd7in3().s[71]++;
              fileStats.push({
                filename: file,
                size: stat.size,
                created: stat.birthtime,
                modified: stat.mtime
              });
            } else
            /* istanbul ignore next */
            {
              cov_1tv6qd7in3().b[13][1]++;
            }
          }
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[72]++;
          return _server.NextResponse.json({
            success: true,
            stats: {
              totalFiles: fileStats.length,
              totalSize,
              averageSize: fileStats.length > 0 ?
              /* istanbul ignore next */
              (cov_1tv6qd7in3().b[14][0]++, Math.round(totalSize / fileStats.length)) :
              /* istanbul ignore next */
              (cov_1tv6qd7in3().b[14][1]++, 0),
              oldestFile: fileStats.length > 0 ?
              /* istanbul ignore next */
              (cov_1tv6qd7in3().b[15][0]++, Math.min(...fileStats.map(f => {
                /* istanbul ignore next */
                cov_1tv6qd7in3().f[7]++;
                cov_1tv6qd7in3().s[73]++;
                return f.created.getTime();
              }))) :
              /* istanbul ignore next */
              (cov_1tv6qd7in3().b[15][1]++, null),
              newestFile: fileStats.length > 0 ?
              /* istanbul ignore next */
              (cov_1tv6qd7in3().b[16][0]++, Math.max(...fileStats.map(f => {
                /* istanbul ignore next */
                cov_1tv6qd7in3().f[8]++;
                cov_1tv6qd7in3().s[74]++;
                return f.created.getTime();
              }))) :
              /* istanbul ignore next */
              (cov_1tv6qd7in3().b[16][1]++, null)
            },
            files: fileStats.sort((a, b) => {
              /* istanbul ignore next */
              cov_1tv6qd7in3().f[9]++;
              cov_1tv6qd7in3().s[75]++;
              return b.created.getTime() - a.created.getTime();
            })
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[76]++;
          return _server.NextResponse.json({
            error: 'Error al obtener estadÃ­sticas'
          }, {
            status: 500
          });
        }
      default:
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[2][4]++;
        cov_1tv6qd7in3().s[77]++;
        return _server.NextResponse.json({
          error: 'AcciÃ³n no vÃ¡lida',
          availableActions: ['list', 'download', 'preview', 'stats']
        }, {
          status: 400
        });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[78]++;
    console.error('Error en API de screenshots:', error);
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[79]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1tv6qd7in3().f[10]++;
  cov_1tv6qd7in3().s[80]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[81]++, await request.json());
    const {
      executionId,
      stepId,
      filename,
      description,
      base64Data,
      metadata
    } =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[82]++, body);
    // Validar datos requeridos
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[83]++;
    if (
    /* istanbul ignore next */
    (cov_1tv6qd7in3().b[18][0]++, !executionId) ||
    /* istanbul ignore next */
    (cov_1tv6qd7in3().b[18][1]++, !filename) ||
    /* istanbul ignore next */
    (cov_1tv6qd7in3().b[18][2]++, !base64Data)) {
      /* istanbul ignore next */
      cov_1tv6qd7in3().b[17][0]++;
      cov_1tv6qd7in3().s[84]++;
      return _server.NextResponse.json({
        error: 'executionId, filename y base64Data son requeridos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tv6qd7in3().b[17][1]++;
    }
    // Verificar que la ejecuciÃ³n existe
    const execution =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[85]++, _advancedtestflows.testFlowManager.getExecution(executionId));
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[86]++;
    if (!execution) {
      /* istanbul ignore next */
      cov_1tv6qd7in3().b[19][0]++;
      cov_1tv6qd7in3().s[87]++;
      return _server.NextResponse.json({
        error: 'EjecuciÃ³n no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tv6qd7in3().b[19][1]++;
    }
    cov_1tv6qd7in3().s[88]++;
    try {
      // Crear directorio si no existe
      const screenshotsDir =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[89]++, _path.default.join(process.cwd(), 'test-screenshots'));
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[90]++;
      await _fs.promises.mkdir(screenshotsDir, {
        recursive: true
      });
      // Generar nombre de archivo Ãºnico
      const timestamp =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[91]++, new Date().toISOString().replace(/[:.]/g, '-'));
      const sanitizedFilename =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[92]++, filename.replace(/[^a-zA-Z0-9.-]/g, '_'));
      const finalFilename =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[93]++, `${executionId}_${timestamp}_${sanitizedFilename}`);
      const filePath =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[94]++, _path.default.join(screenshotsDir, finalFilename));
      // Decodificar y guardar imagen
      const imageBuffer =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[95]++, Buffer.from(base64Data.replace(/^data:image\/\w+;base64,/, ''), 'base64'));
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[96]++;
      await _fs.promises.writeFile(filePath, imageBuffer);
      // Crear metadata del screenshot
      const screenshotMetadata =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[97]++, {
        filename: finalFilename,
        path: filePath,
        timestamp: new Date().toISOString(),
        description,
        url: metadata?.url,
        viewport: metadata?.viewport,
        fileSize: imageBuffer.length
      });
      // Agregar screenshot a la ejecuciÃ³n
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[98]++;
      if (stepId) {
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[20][0]++;
        // Agregar a un paso especÃ­fico
        const step =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[99]++, execution.steps.find(s => {
          /* istanbul ignore next */
          cov_1tv6qd7in3().f[11]++;
          cov_1tv6qd7in3().s[100]++;
          return s.stepId === stepId;
        }));
        /* istanbul ignore next */
        cov_1tv6qd7in3().s[101]++;
        if (step) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().b[21][0]++;
          cov_1tv6qd7in3().s[102]++;
          step.screenshots.push(screenshotMetadata);
        } else {
          /* istanbul ignore next */
          cov_1tv6qd7in3().b[21][1]++;
          cov_1tv6qd7in3().s[103]++;
          return _server.NextResponse.json({
            error: 'Paso no encontrado'
          }, {
            status: 404
          });
        }
      } else {
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[20][1]++;
        cov_1tv6qd7in3().s[104]++;
        // Agregar a la ejecuciÃ³n general
        execution.screenshots.push(screenshotMetadata);
      }
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[105]++;
      return _server.NextResponse.json({
        success: true,
        screenshot: screenshotMetadata,
        message: 'Screenshot guardado exitosamente'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[106]++;
      console.error('Error al guardar screenshot:', error);
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[107]++;
      return _server.NextResponse.json({
        error: 'Error al guardar el screenshot'
      }, {
        status: 500
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[108]++;
    console.error('Error en POST de screenshots:', error);
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[109]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1tv6qd7in3().f[12]++;
  cov_1tv6qd7in3().s[110]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[111]++, new URL(request.url));
    const filename =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[112]++, searchParams.get('filename'));
    const executionId =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[113]++, searchParams.get('executionId'));
    const action =
    /* istanbul ignore next */
    (cov_1tv6qd7in3().s[114]++, searchParams.get('action'));
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[115]++;
    if (action === 'cleanup') {
      /* istanbul ignore next */
      cov_1tv6qd7in3().b[22][0]++;
      // Limpiar screenshots antiguos
      const daysOld =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[116]++, parseInt(
      /* istanbul ignore next */
      (cov_1tv6qd7in3().b[23][0]++, searchParams.get('daysOld')) ||
      /* istanbul ignore next */
      (cov_1tv6qd7in3().b[23][1]++, '7')));
      const screenshotsDir =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[117]++, _path.default.join(process.cwd(), 'test-screenshots'));
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[118]++;
      try {
        const files =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[119]++, await _fs.promises.readdir(screenshotsDir));
        const cutoffDate =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[120]++, new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000));
        let deletedCount =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[121]++, 0);
        let totalSize =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[122]++, 0);
        /* istanbul ignore next */
        cov_1tv6qd7in3().s[123]++;
        for (const file of files) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[124]++;
          if (file.match(/\.(png|jpg|jpeg)$/i)) {
            /* istanbul ignore next */
            cov_1tv6qd7in3().b[24][0]++;
            const filePath =
            /* istanbul ignore next */
            (cov_1tv6qd7in3().s[125]++, _path.default.join(screenshotsDir, file));
            const stat =
            /* istanbul ignore next */
            (cov_1tv6qd7in3().s[126]++, await _fs.promises.stat(filePath));
            /* istanbul ignore next */
            cov_1tv6qd7in3().s[127]++;
            if (stat.birthtime < cutoffDate) {
              /* istanbul ignore next */
              cov_1tv6qd7in3().b[25][0]++;
              cov_1tv6qd7in3().s[128]++;
              totalSize += stat.size;
              /* istanbul ignore next */
              cov_1tv6qd7in3().s[129]++;
              await _fs.promises.unlink(filePath);
              /* istanbul ignore next */
              cov_1tv6qd7in3().s[130]++;
              deletedCount++;
            } else
            /* istanbul ignore next */
            {
              cov_1tv6qd7in3().b[25][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1tv6qd7in3().b[24][1]++;
          }
        }
        /* istanbul ignore next */
        cov_1tv6qd7in3().s[131]++;
        return _server.NextResponse.json({
          success: true,
          message: `Limpieza completada: ${deletedCount} archivos eliminados`,
          deletedFiles: deletedCount,
          freedSpace: totalSize
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1tv6qd7in3().s[132]++;
        return _server.NextResponse.json({
          error: 'Error durante la limpieza'
        }, {
          status: 500
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_1tv6qd7in3().b[22][1]++;
    }
    cov_1tv6qd7in3().s[133]++;
    if (!filename) {
      /* istanbul ignore next */
      cov_1tv6qd7in3().b[26][0]++;
      cov_1tv6qd7in3().s[134]++;
      return _server.NextResponse.json({
        error: 'filename es requerido para eliminar'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tv6qd7in3().b[26][1]++;
    }
    cov_1tv6qd7in3().s[135]++;
    try {
      const screenshotsDir =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[136]++, _path.default.join(process.cwd(), 'test-screenshots'));
      const filePath =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[137]++, _path.default.join(screenshotsDir, filename));
      // Verificar seguridad del path
      const resolvedPath =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[138]++, _path.default.resolve(filePath));
      const resolvedDir =
      /* istanbul ignore next */
      (cov_1tv6qd7in3().s[139]++, _path.default.resolve(screenshotsDir));
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[140]++;
      if (!resolvedPath.startsWith(resolvedDir)) {
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[27][0]++;
        cov_1tv6qd7in3().s[141]++;
        return _server.NextResponse.json({
          error: 'Acceso no autorizado al archivo'
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_1tv6qd7in3().b[27][1]++;
      }
      cov_1tv6qd7in3().s[142]++;
      await _fs.promises.unlink(resolvedPath);
      // Remover de las ejecuciones si se especifica executionId
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[143]++;
      if (executionId) {
        /* istanbul ignore next */
        cov_1tv6qd7in3().b[28][0]++;
        const execution =
        /* istanbul ignore next */
        (cov_1tv6qd7in3().s[144]++, _advancedtestflows.testFlowManager.getExecution(executionId));
        /* istanbul ignore next */
        cov_1tv6qd7in3().s[145]++;
        if (execution) {
          /* istanbul ignore next */
          cov_1tv6qd7in3().b[29][0]++;
          cov_1tv6qd7in3().s[146]++;
          // Remover de screenshots generales
          execution.screenshots = execution.screenshots.filter(s => {
            /* istanbul ignore next */
            cov_1tv6qd7in3().f[13]++;
            cov_1tv6qd7in3().s[147]++;
            return s.filename !== filename;
          });
          // Remover de screenshots de pasos
          /* istanbul ignore next */
          cov_1tv6qd7in3().s[148]++;
          execution.steps.forEach(step => {
            /* istanbul ignore next */
            cov_1tv6qd7in3().f[14]++;
            cov_1tv6qd7in3().s[149]++;
            step.screenshots = step.screenshots.filter(s => {
              /* istanbul ignore next */
              cov_1tv6qd7in3().f[15]++;
              cov_1tv6qd7in3().s[150]++;
              return s.filename !== filename;
            });
          });
        } else
        /* istanbul ignore next */
        {
          cov_1tv6qd7in3().b[29][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1tv6qd7in3().b[28][1]++;
      }
      cov_1tv6qd7in3().s[151]++;
      return _server.NextResponse.json({
        success: true,
        message: 'Screenshot eliminado exitosamente',
        filename
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1tv6qd7in3().s[152]++;
      return _server.NextResponse.json({
        error: 'Archivo no encontrado o error al eliminar'
      }, {
        status: 404
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[153]++;
    console.error('Error en DELETE de screenshots:', error);
    /* istanbul ignore next */
    cov_1tv6qd7in3().s[154]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXR2NnFkN2luMyIsImFjdHVhbENvdmVyYWdlIiwicyIsIkRFTEVURSIsImYiLCJHRVQiLCJQT1NUIiwicnVudGltZSIsInJlcXVlc3QiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJhY3Rpb24iLCJnZXQiLCJleGVjdXRpb25JZCIsImZpbGVuYW1lIiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJzY3JlZW5zaG90cyIsIl9hZHZhbmNlZHRlc3RmbG93cyIsInRlc3RGbG93TWFuYWdlciIsImdldEV4ZWN1dGlvblNjcmVlbnNob3RzIiwic3RhdHMiLCJnZXRTY3JlZW5zaG90U3RhdHMiLCJyZXNwb25zZSIsInN1Y2Nlc3MiLCJkYXRhIiwidG90YWwiLCJsZW5ndGgiLCJzY3JlZW5zaG90c0RpciIsIl9wYXRoIiwiZGVmYXVsdCIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwiZmlsZVBhdGgiLCJyZXNvbHZlZFBhdGgiLCJyZXNvbHZlIiwicmVzb2x2ZWREaXIiLCJzdGFydHNXaXRoIiwiZmlsZUJ1ZmZlciIsIl9mcyIsInByb21pc2VzIiwicmVhZEZpbGUiLCJmaWxlRXh0ZW5zaW9uIiwiZXh0bmFtZSIsInRvTG93ZXJDYXNlIiwiY29udGVudFR5cGUiLCJoZWFkZXJzIiwiYmFzZTY0RGF0YSIsInRvU3RyaW5nIiwibWltZVR5cGUiLCJiYXNlNjQiLCJzaXplIiwiZmlsZXMiLCJyZWFkZGlyIiwidG90YWxTaXplIiwiZmlsZVN0YXRzIiwiZmlsZSIsIm1hdGNoIiwic3RhdCIsInB1c2giLCJjcmVhdGVkIiwiYmlydGh0aW1lIiwibW9kaWZpZWQiLCJtdGltZSIsInRvdGFsRmlsZXMiLCJhdmVyYWdlU2l6ZSIsIk1hdGgiLCJyb3VuZCIsIm9sZGVzdEZpbGUiLCJtaW4iLCJtYXAiLCJnZXRUaW1lIiwibmV3ZXN0RmlsZSIsIm1heCIsInNvcnQiLCJhIiwiYXZhaWxhYmxlQWN0aW9ucyIsImNvbnNvbGUiLCJib2R5Iiwic3RlcElkIiwiZGVzY3JpcHRpb24iLCJtZXRhZGF0YSIsImV4ZWN1dGlvbiIsImdldEV4ZWN1dGlvbiIsIm1rZGlyIiwicmVjdXJzaXZlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicmVwbGFjZSIsInNhbml0aXplZEZpbGVuYW1lIiwiZmluYWxGaWxlbmFtZSIsImltYWdlQnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsIndyaXRlRmlsZSIsInNjcmVlbnNob3RNZXRhZGF0YSIsInBhdGgiLCJ2aWV3cG9ydCIsImZpbGVTaXplIiwic3RlcCIsInN0ZXBzIiwiZmluZCIsInNjcmVlbnNob3QiLCJtZXNzYWdlIiwiZGF5c09sZCIsInBhcnNlSW50IiwiY3V0b2ZmRGF0ZSIsIm5vdyIsImRlbGV0ZWRDb3VudCIsInVubGluayIsImRlbGV0ZWRGaWxlcyIsImZyZWVkU3BhY2UiLCJmaWx0ZXIiLCJmb3JFYWNoIl0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxtYXJ0aVxcRGVza3RvcFxcREVTQVJST0xMT1NXXFxCT0lMRVJQTEFUVEUgRS1DT01NRVJDRVxcc3JjXFxhcHBcXGFwaVxcYWRtaW5cXHRlc3Qtc2NyZWVuc2hvdHNcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmZpZ3VyYWNpw7NuIHBhcmEgTm9kZS5qcyBSdW50aW1lXHJcbmV4cG9ydCBjb25zdCBydW50aW1lID0gJ25vZGVqcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBBUEk6IFRlc3QgU2NyZWVuc2hvdHMgTWFuYWdlbWVudFxyXG4vLyBFbmRwb2ludCBwYXJhIGdlc3Rpw7NuIGRlIHNjcmVlbnNob3RzIGRlIHRlc3RzIGF1dG9tYXRpemFkb3NcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IHRlc3RGbG93TWFuYWdlciB9IGZyb20gJ0AvbGliL3Rlc3RpbmcvYWR2YW5jZWQtdGVzdC1mbG93cyc7XHJcbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgU2NyZWVuc2hvdE1ldGFkYXRhIH0gZnJvbSAnQC9saWIvdGVzdGluZy9zY3JlZW5zaG90LW1hbmFnZXInO1xyXG5cclxuaW50ZXJmYWNlIFNjcmVlbnNob3RMaXN0UmVzcG9uc2Uge1xyXG4gIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgZGF0YTogU2NyZWVuc2hvdE1ldGFkYXRhW107XHJcbiAgdG90YWw6IG51bWJlcjtcclxuICBleGVjdXRpb25JZD86IHN0cmluZztcclxuICBzdGF0cz86IHtcclxuICAgIHRvdGFsOiBudW1iZXI7XHJcbiAgICBieVN0ZXA6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XHJcbiAgICB0b3RhbFNpemU6IG51bWJlcjtcclxuICB9O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU2NyZWVuc2hvdFVwbG9hZFJlcXVlc3Qge1xyXG4gIGV4ZWN1dGlvbklkOiBzdHJpbmc7XHJcbiAgc3RlcElkPzogc3RyaW5nO1xyXG4gIGZpbGVuYW1lOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBiYXNlNjREYXRhOiBzdHJpbmc7XHJcbiAgbWV0YWRhdGE/OiB7XHJcbiAgICB1cmw/OiBzdHJpbmc7XHJcbiAgICB2aWV3cG9ydD86IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfTtcclxuICAgIHRpbWVzdGFtcD86IHN0cmluZztcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcclxuICAgIGNvbnN0IGFjdGlvbiA9IHNlYXJjaFBhcmFtcy5nZXQoJ2FjdGlvbicpO1xyXG4gICAgY29uc3QgZXhlY3V0aW9uSWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdleGVjdXRpb25JZCcpO1xyXG4gICAgY29uc3QgZmlsZW5hbWUgPSBzZWFyY2hQYXJhbXMuZ2V0KCdmaWxlbmFtZScpO1xyXG5cclxuICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgIGNhc2UgJ2xpc3QnOlxyXG4gICAgICAgIC8vIExpc3RhciBzY3JlZW5zaG90cyBkZSB1bmEgZWplY3VjacOzblxyXG4gICAgICAgIGlmICghZXhlY3V0aW9uSWQpIHtcclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgICAgeyBlcnJvcjogJ2V4ZWN1dGlvbklkIGVzIHJlcXVlcmlkbyBwYXJhIGxpc3RhciBzY3JlZW5zaG90cycgfSxcclxuICAgICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2NyZWVuc2hvdHMgPSB0ZXN0Rmxvd01hbmFnZXIuZ2V0RXhlY3V0aW9uU2NyZWVuc2hvdHMoZXhlY3V0aW9uSWQpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRzID0gdGVzdEZsb3dNYW5hZ2VyLmdldFNjcmVlbnNob3RTdGF0cyhleGVjdXRpb25JZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBTY3JlZW5zaG90TGlzdFJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIGRhdGE6IHNjcmVlbnNob3RzLFxyXG4gICAgICAgICAgdG90YWw6IHNjcmVlbnNob3RzLmxlbmd0aCxcclxuICAgICAgICAgIGV4ZWN1dGlvbklkLFxyXG4gICAgICAgICAgc3RhdHNcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzcG9uc2UpO1xyXG5cclxuICAgICAgY2FzZSAnZG93bmxvYWQnOlxyXG4gICAgICAgIC8vIERlc2NhcmdhciBzY3JlZW5zaG90IGVzcGVjw61maWNvXHJcbiAgICAgICAgaWYgKCFmaWxlbmFtZSkge1xyXG4gICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgICAgICB7IGVycm9yOiAnZmlsZW5hbWUgZXMgcmVxdWVyaWRvIHBhcmEgZGVzY2FyZ2FyJyB9LFxyXG4gICAgICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3Qgc2NyZWVuc2hvdHNEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3Rlc3Qtc2NyZWVuc2hvdHMnKTtcclxuICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHNjcmVlbnNob3RzRGlyLCBmaWxlbmFtZSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFZlcmlmaWNhciBxdWUgZWwgYXJjaGl2byBleGlzdGUgeSBlc3TDoSBlbiBlbCBkaXJlY3RvcmlvIHBlcm1pdGlkb1xyXG4gICAgICAgICAgY29uc3QgcmVzb2x2ZWRQYXRoID0gcGF0aC5yZXNvbHZlKGZpbGVQYXRoKTtcclxuICAgICAgICAgIGNvbnN0IHJlc29sdmVkRGlyID0gcGF0aC5yZXNvbHZlKHNjcmVlbnNob3RzRGlyKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKCFyZXNvbHZlZFBhdGguc3RhcnRzV2l0aChyZXNvbHZlZERpcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgICAgICAgIHsgZXJyb3I6ICdBY2Nlc28gbm8gYXV0b3JpemFkbyBhbCBhcmNoaXZvJyB9LFxyXG4gICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDMgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IGZpbGVCdWZmZXIgPSBhd2FpdCBmcy5yZWFkRmlsZShyZXNvbHZlZFBhdGgpO1xyXG4gICAgICAgICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IHBhdGguZXh0bmFtZShmaWxlbmFtZSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgbGV0IGNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XHJcbiAgICAgICAgICBpZiAoZmlsZUV4dGVuc2lvbiA9PT0gJy5wbmcnKSB7Y29udGVudFR5cGUgPSAnaW1hZ2UvcG5nJzt9XHJcbiAgICAgICAgICBlbHNlIGlmIChmaWxlRXh0ZW5zaW9uID09PSAnLmpwZycgfHwgZmlsZUV4dGVuc2lvbiA9PT0gJy5qcGVnJykge2NvbnRlbnRUeXBlID0gJ2ltYWdlL2pwZWcnO31cclxuXHJcbiAgICAgICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShmaWxlQnVmZmVyLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogY29udGVudFR5cGUsXHJcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiBgYXR0YWNobWVudDsgZmlsZW5hbWU9XCIke2ZpbGVuYW1lfVwiYCxcclxuICAgICAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICdwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDAnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgICAgIHsgZXJyb3I6ICdBcmNoaXZvIG5vIGVuY29udHJhZG8nIH0sXHJcbiAgICAgICAgICAgIHsgc3RhdHVzOiA0MDQgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICBjYXNlICdwcmV2aWV3JzpcclxuICAgICAgICAvLyBPYnRlbmVyIHByZXZpZXcgYmFzZTY0IGRlIHNjcmVlbnNob3RcclxuICAgICAgICBpZiAoIWZpbGVuYW1lKSB7XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgICAgIHsgZXJyb3I6ICdmaWxlbmFtZSBlcyByZXF1ZXJpZG8gcGFyYSBwcmV2aWV3JyB9LFxyXG4gICAgICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3Qgc2NyZWVuc2hvdHNEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3Rlc3Qtc2NyZWVuc2hvdHMnKTtcclxuICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHNjcmVlbnNob3RzRGlyLCBmaWxlbmFtZSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNvbnN0IHJlc29sdmVkUGF0aCA9IHBhdGgucmVzb2x2ZShmaWxlUGF0aCk7XHJcbiAgICAgICAgICBjb25zdCByZXNvbHZlZERpciA9IHBhdGgucmVzb2x2ZShzY3JlZW5zaG90c0Rpcik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmICghcmVzb2x2ZWRQYXRoLnN0YXJ0c1dpdGgocmVzb2x2ZWREaXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgICAgICB7IGVycm9yOiAnQWNjZXNvIG5vIGF1dG9yaXphZG8gYWwgYXJjaGl2bycgfSxcclxuICAgICAgICAgICAgICB7IHN0YXR1czogNDAzIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBmaWxlQnVmZmVyID0gYXdhaXQgZnMucmVhZEZpbGUocmVzb2x2ZWRQYXRoKTtcclxuICAgICAgICAgIGNvbnN0IGJhc2U2NERhdGEgPSBmaWxlQnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKTtcclxuICAgICAgICAgIGNvbnN0IGZpbGVFeHRlbnNpb24gPSBwYXRoLmV4dG5hbWUoZmlsZW5hbWUpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGxldCBtaW1lVHlwZSA9ICdpbWFnZS9wbmcnO1xyXG4gICAgICAgICAgaWYgKGZpbGVFeHRlbnNpb24gPT09ICcuanBnJyB8fCBmaWxlRXh0ZW5zaW9uID09PSAnLmpwZWcnKSB7bWltZVR5cGUgPSAnaW1hZ2UvanBlZyc7fVxyXG5cclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIGZpbGVuYW1lLFxyXG4gICAgICAgICAgICBiYXNlNjQ6IGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCwke2Jhc2U2NERhdGF9YCxcclxuICAgICAgICAgICAgc2l6ZTogZmlsZUJ1ZmZlci5sZW5ndGhcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgICAgIHsgZXJyb3I6ICdBcmNoaXZvIG5vIGVuY29udHJhZG8nIH0sXHJcbiAgICAgICAgICAgIHsgc3RhdHVzOiA0MDQgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICBjYXNlICdzdGF0cyc6XHJcbiAgICAgICAgLy8gT2J0ZW5lciBlc3RhZMOtc3RpY2FzIGdlbmVyYWxlcyBkZSBzY3JlZW5zaG90c1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBzY3JlZW5zaG90c0RpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAndGVzdC1zY3JlZW5zaG90cycpO1xyXG4gICAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCBmcy5yZWFkZGlyKHNjcmVlbnNob3RzRGlyKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgbGV0IHRvdGFsU2l6ZSA9IDA7XHJcbiAgICAgICAgICBjb25zdCBmaWxlU3RhdHMgPSBbXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgICAgIGlmIChmaWxlLm1hdGNoKC9cXC4ocG5nfGpwZ3xqcGVnKSQvaSkpIHtcclxuICAgICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihzY3JlZW5zaG90c0RpciwgZmlsZSk7XHJcbiAgICAgICAgICAgICAgY29uc3Qgc3RhdCA9IGF3YWl0IGZzLnN0YXQoZmlsZVBhdGgpO1xyXG4gICAgICAgICAgICAgIHRvdGFsU2l6ZSArPSBzdGF0LnNpemU7XHJcbiAgICAgICAgICAgICAgZmlsZVN0YXRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGUsXHJcbiAgICAgICAgICAgICAgICBzaXplOiBzdGF0LnNpemUsXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVkOiBzdGF0LmJpcnRodGltZSxcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVkOiBzdGF0Lm10aW1lXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICBzdGF0czoge1xyXG4gICAgICAgICAgICAgIHRvdGFsRmlsZXM6IGZpbGVTdGF0cy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgdG90YWxTaXplLFxyXG4gICAgICAgICAgICAgIGF2ZXJhZ2VTaXplOiBmaWxlU3RhdHMubGVuZ3RoID4gMCA/IE1hdGgucm91bmQodG90YWxTaXplIC8gZmlsZVN0YXRzLmxlbmd0aCkgOiAwLFxyXG4gICAgICAgICAgICAgIG9sZGVzdEZpbGU6IGZpbGVTdGF0cy5sZW5ndGggPiAwID8gTWF0aC5taW4oLi4uZmlsZVN0YXRzLm1hcChmID0+IGYuY3JlYXRlZC5nZXRUaW1lKCkpKSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgbmV3ZXN0RmlsZTogZmlsZVN0YXRzLmxlbmd0aCA+IDAgPyBNYXRoLm1heCguLi5maWxlU3RhdHMubWFwKGYgPT4gZi5jcmVhdGVkLmdldFRpbWUoKSkpIDogbnVsbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxlczogZmlsZVN0YXRzLnNvcnQoKGEsIGIpID0+IGIuY3JlYXRlZC5nZXRUaW1lKCkgLSBhLmNyZWF0ZWQuZ2V0VGltZSgpKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgICAgeyBlcnJvcjogJ0Vycm9yIGFsIG9idGVuZXIgZXN0YWTDrXN0aWNhcycgfSxcclxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgICAgeyBcclxuICAgICAgICAgICAgZXJyb3I6ICdBY2Npw7NuIG5vIHbDoWxpZGEnLFxyXG4gICAgICAgICAgICBhdmFpbGFibGVBY3Rpb25zOiBbJ2xpc3QnLCAnZG93bmxvYWQnLCAncHJldmlldycsICdzdGF0cyddXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZW4gQVBJIGRlIHNjcmVlbnNob3RzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBib2R5OiBTY3JlZW5zaG90VXBsb2FkUmVxdWVzdCA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xyXG4gICAgY29uc3QgeyBleGVjdXRpb25JZCwgc3RlcElkLCBmaWxlbmFtZSwgZGVzY3JpcHRpb24sIGJhc2U2NERhdGEsIG1ldGFkYXRhIH0gPSBib2R5O1xyXG5cclxuICAgIC8vIFZhbGlkYXIgZGF0b3MgcmVxdWVyaWRvc1xyXG4gICAgaWYgKCFleGVjdXRpb25JZCB8fCAhZmlsZW5hbWUgfHwgIWJhc2U2NERhdGEpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdleGVjdXRpb25JZCwgZmlsZW5hbWUgeSBiYXNlNjREYXRhIHNvbiByZXF1ZXJpZG9zJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcmlmaWNhciBxdWUgbGEgZWplY3VjacOzbiBleGlzdGVcclxuICAgIGNvbnN0IGV4ZWN1dGlvbiA9IHRlc3RGbG93TWFuYWdlci5nZXRFeGVjdXRpb24oZXhlY3V0aW9uSWQpO1xyXG4gICAgaWYgKCFleGVjdXRpb24pIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdFamVjdWNpw7NuIG5vIGVuY29udHJhZGEnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwNCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ3JlYXIgZGlyZWN0b3JpbyBzaSBubyBleGlzdGVcclxuICAgICAgY29uc3Qgc2NyZWVuc2hvdHNEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3Rlc3Qtc2NyZWVuc2hvdHMnKTtcclxuICAgICAgYXdhaXQgZnMubWtkaXIoc2NyZWVuc2hvdHNEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG5cclxuICAgICAgLy8gR2VuZXJhciBub21icmUgZGUgYXJjaGl2byDDum5pY29cclxuICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnJlcGxhY2UoL1s6Ll0vZywgJy0nKTtcclxuICAgICAgY29uc3Qgc2FuaXRpemVkRmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOS4tXS9nLCAnXycpO1xyXG4gICAgICBjb25zdCBmaW5hbEZpbGVuYW1lID0gYCR7ZXhlY3V0aW9uSWR9XyR7dGltZXN0YW1wfV8ke3Nhbml0aXplZEZpbGVuYW1lfWA7XHJcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHNjcmVlbnNob3RzRGlyLCBmaW5hbEZpbGVuYW1lKTtcclxuXHJcbiAgICAgIC8vIERlY29kaWZpY2FyIHkgZ3VhcmRhciBpbWFnZW5cclxuICAgICAgY29uc3QgaW1hZ2VCdWZmZXIgPSBCdWZmZXIuZnJvbShiYXNlNjREYXRhLnJlcGxhY2UoL15kYXRhOmltYWdlXFwvXFx3KztiYXNlNjQsLywgJycpLCAnYmFzZTY0Jyk7XHJcbiAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShmaWxlUGF0aCwgaW1hZ2VCdWZmZXIpO1xyXG5cclxuICAgICAgLy8gQ3JlYXIgbWV0YWRhdGEgZGVsIHNjcmVlbnNob3RcclxuICAgICAgY29uc3Qgc2NyZWVuc2hvdE1ldGFkYXRhOiBTY3JlZW5zaG90TWV0YWRhdGEgPSB7XHJcbiAgICAgICAgZmlsZW5hbWU6IGZpbmFsRmlsZW5hbWUsXHJcbiAgICAgICAgcGF0aDogZmlsZVBhdGgsXHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgZGVzY3JpcHRpb24sXHJcbiAgICAgICAgdXJsOiBtZXRhZGF0YT8udXJsLFxyXG4gICAgICAgIHZpZXdwb3J0OiBtZXRhZGF0YT8udmlld3BvcnQsXHJcbiAgICAgICAgZmlsZVNpemU6IGltYWdlQnVmZmVyLmxlbmd0aFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gQWdyZWdhciBzY3JlZW5zaG90IGEgbGEgZWplY3VjacOzblxyXG4gICAgICBpZiAoc3RlcElkKSB7XHJcbiAgICAgICAgLy8gQWdyZWdhciBhIHVuIHBhc28gZXNwZWPDrWZpY29cclxuICAgICAgICBjb25zdCBzdGVwID0gZXhlY3V0aW9uLnN0ZXBzLmZpbmQocyA9PiBzLnN0ZXBJZCA9PT0gc3RlcElkKTtcclxuICAgICAgICBpZiAoc3RlcCkge1xyXG4gICAgICAgICAgc3RlcC5zY3JlZW5zaG90cy5wdXNoKHNjcmVlbnNob3RNZXRhZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgICAgeyBlcnJvcjogJ1Bhc28gbm8gZW5jb250cmFkbycgfSxcclxuICAgICAgICAgICAgeyBzdGF0dXM6IDQwNCB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBBZ3JlZ2FyIGEgbGEgZWplY3VjacOzbiBnZW5lcmFsXHJcbiAgICAgICAgZXhlY3V0aW9uLnNjcmVlbnNob3RzLnB1c2goc2NyZWVuc2hvdE1ldGFkYXRhKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgIHNjcmVlbnNob3Q6IHNjcmVlbnNob3RNZXRhZGF0YSxcclxuICAgICAgICBtZXNzYWdlOiAnU2NyZWVuc2hvdCBndWFyZGFkbyBleGl0b3NhbWVudGUnXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIGd1YXJkYXIgc2NyZWVuc2hvdDonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnRXJyb3IgYWwgZ3VhcmRhciBlbCBzY3JlZW5zaG90JyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBlbiBQT1NUIGRlIHNjcmVlbnNob3RzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gREVMRVRFKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcclxuICAgIGNvbnN0IGZpbGVuYW1lID0gc2VhcmNoUGFyYW1zLmdldCgnZmlsZW5hbWUnKTtcclxuICAgIGNvbnN0IGV4ZWN1dGlvbklkID0gc2VhcmNoUGFyYW1zLmdldCgnZXhlY3V0aW9uSWQnKTtcclxuICAgIGNvbnN0IGFjdGlvbiA9IHNlYXJjaFBhcmFtcy5nZXQoJ2FjdGlvbicpO1xyXG5cclxuICAgIGlmIChhY3Rpb24gPT09ICdjbGVhbnVwJykge1xyXG4gICAgICAvLyBMaW1waWFyIHNjcmVlbnNob3RzIGFudGlndW9zXHJcbiAgICAgIGNvbnN0IGRheXNPbGQgPSBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdkYXlzT2xkJykgfHwgJzcnKTtcclxuICAgICAgY29uc3Qgc2NyZWVuc2hvdHNEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3Rlc3Qtc2NyZWVuc2hvdHMnKTtcclxuICAgICAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCBmcy5yZWFkZGlyKHNjcmVlbnNob3RzRGlyKTtcclxuICAgICAgICBjb25zdCBjdXRvZmZEYXRlID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIChkYXlzT2xkICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xyXG4gICAgICAgIGxldCBkZWxldGVkQ291bnQgPSAwO1xyXG4gICAgICAgIGxldCB0b3RhbFNpemUgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcclxuICAgICAgICAgIGlmIChmaWxlLm1hdGNoKC9cXC4ocG5nfGpwZ3xqcGVnKSQvaSkpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oc2NyZWVuc2hvdHNEaXIsIGZpbGUpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0ID0gYXdhaXQgZnMuc3RhdChmaWxlUGF0aCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoc3RhdC5iaXJ0aHRpbWUgPCBjdXRvZmZEYXRlKSB7XHJcbiAgICAgICAgICAgICAgdG90YWxTaXplICs9IHN0YXQuc2l6ZTtcclxuICAgICAgICAgICAgICBhd2FpdCBmcy51bmxpbmsoZmlsZVBhdGgpO1xyXG4gICAgICAgICAgICAgIGRlbGV0ZWRDb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6IGBMaW1waWV6YSBjb21wbGV0YWRhOiAke2RlbGV0ZWRDb3VudH0gYXJjaGl2b3MgZWxpbWluYWRvc2AsXHJcbiAgICAgICAgICBkZWxldGVkRmlsZXM6IGRlbGV0ZWRDb3VudCxcclxuICAgICAgICAgIGZyZWVkU3BhY2U6IHRvdGFsU2l6ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdFcnJvciBkdXJhbnRlIGxhIGxpbXBpZXphJyB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghZmlsZW5hbWUpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdmaWxlbmFtZSBlcyByZXF1ZXJpZG8gcGFyYSBlbGltaW5hcicgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBzY3JlZW5zaG90c0RpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAndGVzdC1zY3JlZW5zaG90cycpO1xyXG4gICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihzY3JlZW5zaG90c0RpciwgZmlsZW5hbWUpO1xyXG4gICAgICBcclxuICAgICAgLy8gVmVyaWZpY2FyIHNlZ3VyaWRhZCBkZWwgcGF0aFxyXG4gICAgICBjb25zdCByZXNvbHZlZFBhdGggPSBwYXRoLnJlc29sdmUoZmlsZVBhdGgpO1xyXG4gICAgICBjb25zdCByZXNvbHZlZERpciA9IHBhdGgucmVzb2x2ZShzY3JlZW5zaG90c0Rpcik7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXJlc29sdmVkUGF0aC5zdGFydHNXaXRoKHJlc29sdmVkRGlyKSkge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdBY2Nlc28gbm8gYXV0b3JpemFkbyBhbCBhcmNoaXZvJyB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXdhaXQgZnMudW5saW5rKHJlc29sdmVkUGF0aCk7XHJcblxyXG4gICAgICAvLyBSZW1vdmVyIGRlIGxhcyBlamVjdWNpb25lcyBzaSBzZSBlc3BlY2lmaWNhIGV4ZWN1dGlvbklkXHJcbiAgICAgIGlmIChleGVjdXRpb25JZCkge1xyXG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvbiA9IHRlc3RGbG93TWFuYWdlci5nZXRFeGVjdXRpb24oZXhlY3V0aW9uSWQpO1xyXG4gICAgICAgIGlmIChleGVjdXRpb24pIHtcclxuICAgICAgICAgIC8vIFJlbW92ZXIgZGUgc2NyZWVuc2hvdHMgZ2VuZXJhbGVzXHJcbiAgICAgICAgICBleGVjdXRpb24uc2NyZWVuc2hvdHMgPSBleGVjdXRpb24uc2NyZWVuc2hvdHMuZmlsdGVyKHMgPT4gcy5maWxlbmFtZSAhPT0gZmlsZW5hbWUpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBSZW1vdmVyIGRlIHNjcmVlbnNob3RzIGRlIHBhc29zXHJcbiAgICAgICAgICBleGVjdXRpb24uc3RlcHMuZm9yRWFjaChzdGVwID0+IHtcclxuICAgICAgICAgICAgc3RlcC5zY3JlZW5zaG90cyA9IHN0ZXAuc2NyZWVuc2hvdHMuZmlsdGVyKHMgPT4gcy5maWxlbmFtZSAhPT0gZmlsZW5hbWUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgbWVzc2FnZTogJ1NjcmVlbnNob3QgZWxpbWluYWRvIGV4aXRvc2FtZW50ZScsXHJcbiAgICAgICAgZmlsZW5hbWVcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdBcmNoaXZvIG5vIGVuY29udHJhZG8gbyBlcnJvciBhbCBlbGltaW5hcicgfSxcclxuICAgICAgICB7IHN0YXR1czogNDA0IH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZW4gREVMRVRFIGRlIHNjcmVlbnNob3RzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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