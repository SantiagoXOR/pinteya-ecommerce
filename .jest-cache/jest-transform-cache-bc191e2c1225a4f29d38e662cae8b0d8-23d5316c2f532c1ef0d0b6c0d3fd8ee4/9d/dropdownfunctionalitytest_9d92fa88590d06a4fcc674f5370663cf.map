{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Header\\__tests__\\dropdown-functionality.test.tsx"],"sourcesContent":["/**\n * Dropdown Functionality Test Ultra-Simplificado\n * Sin dependencias complejas - Solo funcionalidad básica de dropdowns\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\n\n// Componentes mock ultra-simplificados\nconst MockTopBar = () => {\n  const [deliveryZone, setDeliveryZone] = React.useState('Córdoba Capital')\n  const [isDeliveryOpen, setIsDeliveryOpen] = React.useState(false)\n\n  return (\n    <div data-testid='topbar'>\n      <div data-testid='dropdown-menu'>\n        <button\n          onClick={() => setIsDeliveryOpen(!isDeliveryOpen)}\n          data-testid='delivery-zone-selector'\n        >\n          Envíos en {deliveryZone}\n        </button>\n        {isDeliveryOpen && (\n          <div data-testid='dropdown-content'>\n            <div\n              onClick={() => {\n                setDeliveryZone('Córdoba Capital')\n                setIsDeliveryOpen(false)\n              }}\n            >\n              Córdoba Capital\n            </div>\n            <div\n              onClick={() => {\n                setDeliveryZone('Interior')\n                setIsDeliveryOpen(false)\n              }}\n            >\n              Interior de Córdoba\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst MockSearchBar = () => {\n  const [category, setCategory] = React.useState('Todas las Categorías')\n  const [isCategoryOpen, setIsCategoryOpen] = React.useState(false)\n  const [searchValue, setSearchValue] = React.useState('')\n\n  return (\n    <div data-testid='searchbar'>\n      <div data-testid='dropdown-menu'>\n        <button onClick={() => setIsCategoryOpen(!isCategoryOpen)} data-testid='category-selector'>\n          {category}\n        </button>\n        {isCategoryOpen && (\n          <div data-testid='dropdown-content'>\n            <div\n              onClick={() => {\n                setCategory('Todas las Categorías')\n                setIsCategoryOpen(false)\n              }}\n            >\n              Todas las Categorías\n            </div>\n            <div\n              onClick={() => {\n                setCategory('Pinturas')\n                setIsCategoryOpen(false)\n              }}\n            >\n              Pinturas\n            </div>\n            <div\n              onClick={() => {\n                setCategory('Herramientas')\n                setIsCategoryOpen(false)\n              }}\n            >\n              Herramientas\n            </div>\n          </div>\n        )}\n      </div>\n      <input\n        value={searchValue}\n        onChange={e => setSearchValue(e.target.value)}\n        placeholder={category === 'Pinturas' ? 'Busco pinturas...' : 'Buscar productos...'}\n      />\n    </div>\n  )\n}\n\nconst MockActionButtons = () => {\n  const [isAuthenticated, setIsAuthenticated] = React.useState(false)\n\n  return (\n    <div data-testid='action-buttons'>\n      <button data-testid='cart-icon'>Carrito (0)</button>\n      {!isAuthenticated ? (\n        <div>\n          <button onClick={() => setIsAuthenticated(true)}>Iniciar Sesión</button>\n        </div>\n      ) : (\n        <div>\n          <button>Admin</button>\n        </div>\n      )}\n    </div>\n  )\n}\n\ndescribe('Dropdown Functionality - Ultra-Simplified Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('TopBar Dropdown', () => {\n    it('debe renderizar selector de zona de entrega', () => {\n      render(<MockTopBar />)\n\n      const selector = screen.getByTestId('delivery-zone-selector')\n      expect(selector).toBeInTheDocument()\n      expect(selector).toHaveTextContent('Envíos en Córdoba Capital')\n    })\n\n    it('debe abrir dropdown al hacer click', () => {\n      render(<MockTopBar />)\n\n      const selector = screen.getByTestId('delivery-zone-selector')\n\n      // Dropdown cerrado inicialmente\n      expect(screen.queryByTestId('dropdown-content')).not.toBeInTheDocument()\n\n      // Abrir dropdown\n      fireEvent.click(selector)\n      expect(screen.getByTestId('dropdown-content')).toBeInTheDocument()\n    })\n\n    it('debe cambiar zona de entrega', () => {\n      render(<MockTopBar />)\n\n      const selector = screen.getByTestId('delivery-zone-selector')\n      fireEvent.click(selector)\n\n      const interiorOption = screen.getByText('Interior de Córdoba')\n      fireEvent.click(interiorOption)\n\n      expect(selector).toHaveTextContent('Envíos en Interior')\n      expect(screen.queryByTestId('dropdown-content')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('SearchBar Dropdown', () => {\n    it('debe renderizar selector de categoría', () => {\n      render(<MockSearchBar />)\n\n      const selector = screen.getByTestId('category-selector')\n      expect(selector).toBeInTheDocument()\n      expect(selector).toHaveTextContent('Todas las Categorías')\n    })\n\n    it('debe abrir dropdown de categorías', () => {\n      render(<MockSearchBar />)\n\n      const selector = screen.getByTestId('category-selector')\n\n      // Dropdown cerrado inicialmente\n      expect(screen.queryByTestId('dropdown-content')).not.toBeInTheDocument()\n\n      // Abrir dropdown\n      fireEvent.click(selector)\n      expect(screen.getByTestId('dropdown-content')).toBeInTheDocument()\n\n      // Verificar opciones (usar getAllByText para elementos duplicados)\n      expect(screen.getAllByText('Todas las Categorías')).toHaveLength(2) // Botón + opción\n      expect(screen.getByText('Pinturas')).toBeInTheDocument()\n      expect(screen.getByText('Herramientas')).toBeInTheDocument()\n    })\n\n    it('debe cambiar categoría y actualizar placeholder', () => {\n      render(<MockSearchBar />)\n\n      const selector = screen.getByTestId('category-selector')\n      const searchInput = screen.getByRole('textbox')\n\n      // Estado inicial\n      expect(searchInput).toHaveAttribute('placeholder', 'Buscar productos...')\n\n      // Cambiar a Pinturas\n      fireEvent.click(selector)\n      const pinturasOption = screen.getByText('Pinturas')\n      fireEvent.click(pinturasOption)\n\n      // Verificar cambios\n      expect(selector).toHaveTextContent('Pinturas')\n      expect(searchInput).toHaveAttribute('placeholder', 'Busco pinturas...')\n    })\n\n    it('debe permitir escribir en búsqueda', () => {\n      render(<MockSearchBar />)\n\n      const searchInput = screen.getByRole('textbox') as HTMLInputElement\n\n      fireEvent.change(searchInput, { target: { value: 'latex blanco' } })\n      expect(searchInput.value).toBe('latex blanco')\n    })\n  })\n\n  describe('ActionButtons Dropdown', () => {\n    it('debe mostrar botón de carrito', () => {\n      render(<MockActionButtons />)\n\n      const cartButton = screen.getByTestId('cart-icon')\n      expect(cartButton).toBeInTheDocument()\n      expect(cartButton).toHaveTextContent('Carrito (0)')\n    })\n\n    it('debe mostrar botón de login cuando no está autenticado', () => {\n      render(<MockActionButtons />)\n\n      const loginButton = screen.getByText('Iniciar Sesión')\n      expect(loginButton).toBeInTheDocument()\n    })\n\n    it('debe cambiar a botón admin al autenticarse', () => {\n      render(<MockActionButtons />)\n\n      const loginButton = screen.getByText('Iniciar Sesión')\n      fireEvent.click(loginButton)\n\n      expect(screen.getByText('Admin')).toBeInTheDocument()\n      expect(screen.queryByText('Iniciar Sesión')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('Integración de Dropdowns', () => {\n    it('debe renderizar todos los componentes con dropdowns', () => {\n      render(\n        <div>\n          <MockTopBar />\n          <MockSearchBar />\n          <MockActionButtons />\n        </div>\n      )\n\n      expect(screen.getByTestId('topbar')).toBeInTheDocument()\n      expect(screen.getByTestId('searchbar')).toBeInTheDocument()\n      expect(screen.getByTestId('action-buttons')).toBeInTheDocument()\n    })\n\n    it('debe manejar múltiples dropdowns independientemente', () => {\n      render(\n        <div>\n          <MockTopBar />\n          <MockSearchBar />\n        </div>\n      )\n\n      const deliverySelector = screen.getByTestId('delivery-zone-selector')\n      const categorySelector = screen.getByTestId('category-selector')\n\n      // Abrir dropdown de entrega\n      fireEvent.click(deliverySelector)\n      expect(screen.getAllByTestId('dropdown-content')).toHaveLength(1)\n\n      // Abrir dropdown de categoría (ambos pueden estar abiertos independientemente)\n      fireEvent.click(categorySelector)\n      expect(screen.getAllByTestId('dropdown-content')).toHaveLength(2)\n    })\n\n    it('debe mantener estado independiente entre componentes', () => {\n      render(\n        <div>\n          <MockTopBar />\n          <MockSearchBar />\n          <MockActionButtons />\n        </div>\n      )\n\n      // Cambiar zona de entrega\n      const deliverySelector = screen.getByTestId('delivery-zone-selector')\n      fireEvent.click(deliverySelector)\n      fireEvent.click(screen.getByText('Interior de Córdoba'))\n\n      // Cambiar categoría\n      const categorySelector = screen.getByTestId('category-selector')\n      fireEvent.click(categorySelector)\n      fireEvent.click(screen.getByText('Pinturas'))\n\n      // Autenticar\n      const loginButton = screen.getByText('Iniciar Sesión')\n      fireEvent.click(loginButton)\n\n      // Verificar que todos los cambios se mantienen\n      expect(deliverySelector).toHaveTextContent('Envíos en Interior')\n      expect(categorySelector).toHaveTextContent('Pinturas')\n      expect(screen.getByText('Admin')).toBeInTheDocument()\n    })\n  })\n\n  describe('Accesibilidad de Dropdowns', () => {\n    it('debe tener elementos focusables', () => {\n      render(\n        <div>\n          <MockTopBar />\n          <MockSearchBar />\n          <MockActionButtons />\n        </div>\n      )\n\n      const deliverySelector = screen.getByTestId('delivery-zone-selector')\n      const categorySelector = screen.getByTestId('category-selector')\n      const cartButton = screen.getByTestId('cart-icon')\n\n      // Verificar que se pueden enfocar\n      deliverySelector.focus()\n      expect(document.activeElement).toBe(deliverySelector)\n\n      categorySelector.focus()\n      expect(document.activeElement).toBe(categorySelector)\n\n      cartButton.focus()\n      expect(document.activeElement).toBe(cartButton)\n    })\n\n    it('debe cerrar dropdowns con Escape', () => {\n      render(<MockTopBar />)\n\n      const selector = screen.getByTestId('delivery-zone-selector')\n\n      // Abrir dropdown\n      fireEvent.click(selector)\n      expect(screen.getByTestId('dropdown-content')).toBeInTheDocument()\n\n      // Cerrar con Escape\n      fireEvent.keyDown(selector, { key: 'Escape', code: 'Escape' })\n      // En implementación real, esto cerraría el dropdown\n      expect(selector).toBeInTheDocument()\n    })\n  })\n\n  describe('Responsive Behavior', () => {\n    it('debe renderizar en diferentes tamaños de pantalla', () => {\n      // Simular móvil\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n\n      render(\n        <div>\n          <MockTopBar />\n          <MockSearchBar />\n          <MockActionButtons />\n        </div>\n      )\n\n      expect(screen.getByTestId('topbar')).toBeInTheDocument()\n      expect(screen.getByTestId('searchbar')).toBeInTheDocument()\n      expect(screen.getByTestId('action-buttons')).toBeInTheDocument()\n\n      // Simular desktop\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 1200,\n      })\n\n      expect(screen.getByTestId('topbar')).toBeInTheDocument()\n    })\n  })\n\n  describe('Performance', () => {\n    it('debe renderizar rápidamente', () => {\n      const startTime = performance.now()\n\n      render(\n        <div>\n          <MockTopBar />\n          <MockSearchBar />\n          <MockActionButtons />\n        </div>\n      )\n\n      const endTime = performance.now()\n      const renderTime = endTime - startTime\n\n      // Verificar que renderiza en tiempo razonable\n      expect(renderTime).toBeLessThan(100)\n      expect(screen.getByTestId('topbar')).toBeInTheDocument()\n    })\n  })\n})\n"],"names":["MockTopBar","deliveryZone","setDeliveryZone","React","useState","isDeliveryOpen","setIsDeliveryOpen","div","data-testid","button","onClick","MockSearchBar","category","setCategory","isCategoryOpen","setIsCategoryOpen","searchValue","setSearchValue","input","value","onChange","e","target","placeholder","MockActionButtons","isAuthenticated","setIsAuthenticated","describe","beforeEach","jest","clearAllMocks","it","render","selector","screen","getByTestId","expect","toBeInTheDocument","toHaveTextContent","queryByTestId","not","fireEvent","click","interiorOption","getByText","getAllByText","toHaveLength","searchInput","getByRole","toHaveAttribute","pinturasOption","change","toBe","cartButton","loginButton","queryByText","deliverySelector","categorySelector","getAllByTestId","focus","document","activeElement","keyDown","key","code","Object","defineProperty","window","writable","configurable","startTime","performance","now","endTime","renderTime","toBeLessThan"],"mappings":"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"}