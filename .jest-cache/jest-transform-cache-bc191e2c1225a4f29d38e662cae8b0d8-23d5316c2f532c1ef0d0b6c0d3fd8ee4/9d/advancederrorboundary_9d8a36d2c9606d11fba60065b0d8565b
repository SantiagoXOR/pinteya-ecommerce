49fdc9e14ef30ef96483bb0ea58314b9
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AdvancedErrorBoundary", {
    enumerable: true,
    get: function() {
        return AdvancedErrorBoundary;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _lucidereact = require("lucide-react");
const _button = require("../../components/ui/button");
const _card = require("../../components/ui/card");
const _alert = require("../../components/ui/alert");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class AdvancedErrorBoundary extends _react.Component {
    constructor(props){
        super(props), this.retryTimeoutId = null, this.recoveryTimeoutId = null, this.startTime = Date.now(), // ===================================
        // M√âTODOS DE RECUPERACI√ìN
        // ===================================
        this.attemptAutoRecovery = ()=>{
            const { recoveryTimeout = 5000 } = this.props;
            const { recoveryStrategy } = this.state;
            this.recoveryTimeoutId = setTimeout(()=>{
                switch(recoveryStrategy){
                    case 'retry':
                        this.handleRetry();
                        break;
                    case 'reload':
                        window.location.reload();
                        break;
                    case 'redirect':
                        window.location.href = '/';
                        break;
                    default:
                        break;
                }
            }, recoveryTimeout);
        }, this.handleRetry = ()=>{
            const { maxRetries = 3, retryDelay = 1000 } = this.props;
            const { retryCount } = this.state;
            if (retryCount >= maxRetries) {
                console.warn('üîÑ Max retries reached, showing fallback UI');
                return;
            }
            this.retryTimeoutId = setTimeout(()=>{
                this.setState((prevState)=>({
                        hasError: false,
                        error: null,
                        errorInfo: null,
                        retryCount: prevState.retryCount + 1
                    }));
            }, retryDelay * (retryCount + 1)); // Backoff exponencial
        }, this.handleManualRetry = ()=>{
            this.setState({
                hasError: false,
                error: null,
                errorInfo: null,
                retryCount: 0
            });
        }, this.handleReload = ()=>{
            window.location.reload();
        }, this.handleGoHome = ()=>{
            window.location.href = '/';
        }, // ===================================
        // REPORTE DE ERRORES
        // ===================================
        this.reportError = async (error, errorInfo)=>{
            try {
                const report = {
                    errorId: this.state.errorId,
                    timestamp: Date.now(),
                    error: {
                        name: error.name,
                        message: error.message,
                        stack: error.stack
                    },
                    errorInfo: {
                        componentStack: errorInfo.componentStack
                    },
                    context: {
                        level: this.props.level || 'component',
                        component: this.props.context || 'unknown',
                        url: window.location.href,
                        userAgent: navigator.userAgent,
                        userId: this.getUserId()
                    },
                    recovery: {
                        strategy: this.state.recoveryStrategy,
                        retryCount: this.state.retryCount,
                        successful: false
                    },
                    performance: {
                        timeToError: Date.now() - this.startTime,
                        memoryUsage: this.getMemoryUsage()
                    }
                };
                // Enviar reporte al sistema de monitoreo
                await this.sendErrorReport(report);
            } catch (reportError) {
                console.error('‚ùå Failed to report error:', reportError);
            }
        }, this.reportIssue = ()=>{
            const subject = `Error Report - ${this.state.errorId}`;
            const body = `Error ID: ${this.state.errorId}\nTipo: ${this.state.errorType}\nURL: ${window.location.href}\nFecha: ${new Date().toISOString()}`;
            const mailtoUrl = `mailto:soporte@pinteya.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
            window.open(mailtoUrl);
        };
        this.state = {
            hasError: false,
            error: null,
            errorInfo: null,
            errorId: '',
            retryCount: 0,
            lastErrorTime: 0,
            errorType: 'unknown',
            recoveryStrategy: 'retry'
        };
    }
    static getDerivedStateFromError(error) {
        const errorId = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const errorType = AdvancedErrorBoundary.classifyError(error);
        const recoveryStrategy = AdvancedErrorBoundary.determineRecoveryStrategy(error, errorType);
        return {
            hasError: true,
            error,
            errorId,
            errorType,
            recoveryStrategy,
            lastErrorTime: Date.now()
        };
    }
    componentDidCatch(error, errorInfo) {
        const { onError, enableReporting = true } = this.props;
        this.setState({
            errorInfo
        });
        // Reportar error
        if (enableReporting) {
            this.reportError(error, errorInfo);
        }
        // Callback personalizado
        if (onError) {
            onError(error, errorInfo, this.state.errorId);
        }
        // Intentar recuperaci√≥n autom√°tica
        if (this.props.enableAutoRecovery) {
            this.attemptAutoRecovery();
        }
        console.error('üö® Error Boundary caught an error:', error);
        console.error('üìç Error Info:', errorInfo);
    }
    componentWillUnmount() {
        if (this.retryTimeoutId) {
            clearTimeout(this.retryTimeoutId);
        }
        if (this.recoveryTimeoutId) {
            clearTimeout(this.recoveryTimeoutId);
        }
    }
    // ===================================
    // M√âTODOS DE CLASIFICACI√ìN
    // ===================================
    static classifyError(error) {
        const message = error.message.toLowerCase();
        const stack = error.stack?.toLowerCase() || '';
        // Error de chunk loading (lazy loading)
        if (message.includes('loading chunk') || message.includes('loading css chunk')) {
            return 'chunk';
        }
        // Error de red
        if (message.includes('network') || message.includes('fetch') || message.includes('timeout')) {
            return 'network';
        }
        // Error de componente
        if (stack.includes('react') || message.includes('render') || message.includes('component')) {
            return 'component';
        }
        return 'unknown';
    }
    static determineRecoveryStrategy(error, errorType) {
        switch(errorType){
            case 'chunk':
                return 'reload'; // Recargar para obtener chunks actualizados
            case 'network':
                return 'retry'; // Reintentar operaci√≥n de red
            case 'component':
                return 'fallback'; // Mostrar UI de fallback
            default:
                return 'retry';
        }
    }
    getUserId() {
        // Intentar obtener ID de usuario de diferentes fuentes
        try {
            // Clerk
            const clerkUser = window.__clerk_user;
            if (clerkUser?.id) {
                return clerkUser.id;
            }
            // LocalStorage
            const storedUser = localStorage.getItem('user');
            if (storedUser) {
                const user = JSON.parse(storedUser);
                return user.id;
            }
            return undefined;
        } catch  {
            return undefined;
        }
    }
    getMemoryUsage() {
        try {
            if ('memory' in performance) {
                return performance.memory.usedJSHeapSize;
            }
            return undefined;
        } catch  {
            return undefined;
        }
    }
    async sendErrorReport(report) {
        try {
            await fetch('/api/monitoring/errors', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(report)
            });
        } catch (error) {
            console.error('‚ùå Failed to send error report:', error);
        }
    }
    // ===================================
    // RENDER
    // ===================================
    render() {
        const { hasError, error, errorType, recoveryStrategy, retryCount } = this.state;
        const { children, fallback, enableRetry = true, maxRetries = 3, level = 'component' } = this.props;
        if (hasError && error) {
            // Si hay un fallback personalizado, usarlo
            if (fallback) {
                return fallback;
            }
            // Renderizar UI de error apropiada seg√∫n el nivel
            return this.renderErrorUI(error, errorType, recoveryStrategy, retryCount, maxRetries, enableRetry, level);
        }
        return children;
    }
    renderErrorUI(error, errorType, recoveryStrategy, retryCount, maxRetries, enableRetry, level) {
        const isPageLevel = level === 'page';
        const canRetry = enableRetry && retryCount < maxRetries;
        if (isPageLevel) {
            return this.renderPageErrorUI(error, errorType, canRetry);
        } else {
            return this.renderComponentErrorUI(error, errorType, canRetry);
        }
    }
    renderPageErrorUI(error, errorType, canRetry) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "min-h-screen flex items-center justify-center bg-gray-50 px-4",
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                className: "w-full max-w-md",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardHeader, {
                        className: "text-center",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mb-4",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                                    className: "w-6 h-6 text-red-600"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                className: "text-xl",
                                children: "\xa1Oops! Algo sali\xf3 mal"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardDescription, {
                                children: this.getErrorMessage(errorType)
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                        className: "space-y-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.Alert, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Bug, {
                                        className: "h-4 w-4"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alert.AlertTitle, {
                                        children: "Detalles del Error"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.AlertDescription, {
                                        className: "text-sm",
                                        children: [
                                            "ID: ",
                                            this.state.errorId,
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("br", {}),
                                            "Tipo: ",
                                            errorType,
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("br", {}),
                                            process.env.NODE_ENV === 'development' && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                                children: [
                                                    "Mensaje: ",
                                                    error.message
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex flex-col gap-2",
                                children: [
                                    canRetry && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                        onClick: this.handleManualRetry,
                                        className: "w-full",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RefreshCw, {
                                                className: "w-4 h-4 mr-2"
                                            }),
                                            "Intentar de nuevo"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                        variant: "outline",
                                        onClick: this.handleGoHome,
                                        className: "w-full",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Home, {
                                                className: "w-4 h-4 mr-2"
                                            }),
                                            "Ir al inicio"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                        variant: "outline",
                                        onClick: this.handleReload,
                                        className: "w-full",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RefreshCw, {
                                                className: "w-4 h-4 mr-2"
                                            }),
                                            "Recargar p\xe1gina"
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "text-center",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                    variant: "link",
                                    size: "sm",
                                    onClick: ()=>this.reportIssue(),
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Mail, {
                                            className: "w-4 h-4 mr-2"
                                        }),
                                        "Reportar problema"
                                    ]
                                })
                            })
                        ]
                    })
                ]
            })
        });
    }
    renderComponentErrorUI(error, errorType, canRetry) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "p-4 border border-red-200 rounded-lg bg-red-50",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center gap-2 mb-2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                            className: "w-4 h-4 text-red-600"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-sm font-medium text-red-800",
                            children: "Error en componente"
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    className: "text-sm text-red-700 mb-3",
                    children: this.getErrorMessage(errorType)
                }),
                canRetry && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                    size: "sm",
                    variant: "outline",
                    onClick: this.handleManualRetry,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RefreshCw, {
                            className: "w-3 h-3 mr-1"
                        }),
                        "Reintentar"
                    ]
                })
            ]
        });
    }
    getErrorMessage(errorType) {
        switch(errorType){
            case 'chunk':
                return 'Error cargando recursos. La p√°gina se recargar√° autom√°ticamente.';
            case 'network':
                return 'Error de conexi√≥n. Verifica tu conexi√≥n a internet.';
            case 'component':
                return 'Error en el componente. Intentando recuperaci√≥n autom√°tica.';
            default:
                return 'Ha ocurrido un error inesperado. Estamos trabajando para solucionarlo.';
        }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxlcnJvci1ib3VuZGFyeVxcYWR2YW5jZWQtZXJyb3ItYm91bmRhcnkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEFEVkFOQ0VEIEVSUk9SIEJPVU5EQVJZIFNZU1RFTVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTaXN0ZW1hIGF2YW56YWRvIGRlIG1hbmVqbyBkZSBlcnJvcmVzIGNvbiByZWN1cGVyYWNpw7NuIGF1dG9tw6F0aWNhXHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBSZWFjdE5vZGUsIEVycm9ySW5mbyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQWxlcnRUcmlhbmdsZSwgUmVmcmVzaEN3LCBIb21lLCBCdWcsIE1haWwgfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcclxuaW1wb3J0IHsgQ2FyZCwgQ2FyZENvbnRlbnQsIENhcmREZXNjcmlwdGlvbiwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2NhcmQnO1xyXG5pbXBvcnQgeyBBbGVydCwgQWxlcnREZXNjcmlwdGlvbiwgQWxlcnRUaXRsZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9hbGVydCc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBJTlRFUkZBQ0VTIFkgVElQT1NcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JCb3VuZGFyeVN0YXRlIHtcclxuICBoYXNFcnJvcjogYm9vbGVhbjtcclxuICBlcnJvcjogRXJyb3IgfCBudWxsO1xyXG4gIGVycm9ySW5mbzogRXJyb3JJbmZvIHwgbnVsbDtcclxuICBlcnJvcklkOiBzdHJpbmc7XHJcbiAgcmV0cnlDb3VudDogbnVtYmVyO1xyXG4gIGxhc3RFcnJvclRpbWU6IG51bWJlcjtcclxuICBlcnJvclR5cGU6ICdjb21wb25lbnQnIHwgJ2NodW5rJyB8ICduZXR3b3JrJyB8ICd1bmtub3duJztcclxuICByZWNvdmVyeVN0cmF0ZWd5OiAncmV0cnknIHwgJ2ZhbGxiYWNrJyB8ICdyZWRpcmVjdCcgfCAncmVsb2FkJztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFcnJvckJvdW5kYXJ5UHJvcHMge1xyXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XHJcbiAgZmFsbGJhY2s/OiBSZWFjdE5vZGU7XHJcbiAgb25FcnJvcj86IChlcnJvcjogRXJyb3IsIGVycm9ySW5mbzogRXJyb3JJbmZvLCBlcnJvcklkOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgZW5hYmxlUmV0cnk/OiBib29sZWFuO1xyXG4gIG1heFJldHJpZXM/OiBudW1iZXI7XHJcbiAgcmV0cnlEZWxheT86IG51bWJlcjtcclxuICBlbmFibGVBdXRvUmVjb3Zlcnk/OiBib29sZWFuO1xyXG4gIHJlY292ZXJ5VGltZW91dD86IG51bWJlcjtcclxuICBsZXZlbD86ICdwYWdlJyB8ICdzZWN0aW9uJyB8ICdjb21wb25lbnQnO1xyXG4gIGNvbnRleHQ/OiBzdHJpbmc7XHJcbiAgZW5hYmxlUmVwb3J0aW5nPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFcnJvclJlcG9ydCB7XHJcbiAgZXJyb3JJZDogc3RyaW5nO1xyXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xyXG4gIGVycm9yOiB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICBzdGFjaz86IHN0cmluZztcclxuICB9O1xyXG4gIGVycm9ySW5mbzoge1xyXG4gICAgY29tcG9uZW50U3RhY2s6IHN0cmluZztcclxuICB9O1xyXG4gIGNvbnRleHQ6IHtcclxuICAgIGxldmVsOiBzdHJpbmc7XHJcbiAgICBjb21wb25lbnQ6IHN0cmluZztcclxuICAgIHVybDogc3RyaW5nO1xyXG4gICAgdXNlckFnZW50OiBzdHJpbmc7XHJcbiAgICB1c2VySWQ/OiBzdHJpbmc7XHJcbiAgfTtcclxuICByZWNvdmVyeToge1xyXG4gICAgc3RyYXRlZ3k6IHN0cmluZztcclxuICAgIHJldHJ5Q291bnQ6IG51bWJlcjtcclxuICAgIHN1Y2Nlc3NmdWw6IGJvb2xlYW47XHJcbiAgfTtcclxuICBwZXJmb3JtYW5jZToge1xyXG4gICAgdGltZVRvRXJyb3I6IG51bWJlcjtcclxuICAgIG1lbW9yeVVzYWdlPzogbnVtYmVyO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEVSUk9SIEJPVU5EQVJZIFBSSU5DSVBBTFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkdmFuY2VkRXJyb3JCb3VuZGFyeSBleHRlbmRzIENvbXBvbmVudDxFcnJvckJvdW5kYXJ5UHJvcHMsIEVycm9yQm91bmRhcnlTdGF0ZT4ge1xyXG4gIHByaXZhdGUgcmV0cnlUaW1lb3V0SWQ6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSByZWNvdmVyeVRpbWVvdXRJZDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHN0YXJ0VGltZTogbnVtYmVyID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IEVycm9yQm91bmRhcnlQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBoYXNFcnJvcjogZmFsc2UsXHJcbiAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICBlcnJvckluZm86IG51bGwsXHJcbiAgICAgIGVycm9ySWQ6ICcnLFxyXG4gICAgICByZXRyeUNvdW50OiAwLFxyXG4gICAgICBsYXN0RXJyb3JUaW1lOiAwLFxyXG4gICAgICBlcnJvclR5cGU6ICd1bmtub3duJyxcclxuICAgICAgcmVjb3ZlcnlTdHJhdGVneTogJ3JldHJ5J1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3I6IEVycm9yKTogUGFydGlhbDxFcnJvckJvdW5kYXJ5U3RhdGU+IHtcclxuICAgIGNvbnN0IGVycm9ySWQgPSBgZXJyb3JfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xyXG4gICAgY29uc3QgZXJyb3JUeXBlID0gQWR2YW5jZWRFcnJvckJvdW5kYXJ5LmNsYXNzaWZ5RXJyb3IoZXJyb3IpO1xyXG4gICAgY29uc3QgcmVjb3ZlcnlTdHJhdGVneSA9IEFkdmFuY2VkRXJyb3JCb3VuZGFyeS5kZXRlcm1pbmVSZWNvdmVyeVN0cmF0ZWd5KGVycm9yLCBlcnJvclR5cGUpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGhhc0Vycm9yOiB0cnVlLFxyXG4gICAgICBlcnJvcixcclxuICAgICAgZXJyb3JJZCxcclxuICAgICAgZXJyb3JUeXBlLFxyXG4gICAgICByZWNvdmVyeVN0cmF0ZWd5LFxyXG4gICAgICBsYXN0RXJyb3JUaW1lOiBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3I6IEVycm9yLCBlcnJvckluZm86IEVycm9ySW5mbykge1xyXG4gICAgY29uc3QgeyBvbkVycm9yLCBlbmFibGVSZXBvcnRpbmcgPSB0cnVlIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgXHJcbiAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JJbmZvIH0pO1xyXG5cclxuICAgIC8vIFJlcG9ydGFyIGVycm9yXHJcbiAgICBpZiAoZW5hYmxlUmVwb3J0aW5nKSB7XHJcbiAgICAgIHRoaXMucmVwb3J0RXJyb3IoZXJyb3IsIGVycm9ySW5mbyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbGJhY2sgcGVyc29uYWxpemFkb1xyXG4gICAgaWYgKG9uRXJyb3IpIHtcclxuICAgICAgb25FcnJvcihlcnJvciwgZXJyb3JJbmZvLCB0aGlzLnN0YXRlLmVycm9ySWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEludGVudGFyIHJlY3VwZXJhY2nDs24gYXV0b23DoXRpY2FcclxuICAgIGlmICh0aGlzLnByb3BzLmVuYWJsZUF1dG9SZWNvdmVyeSkge1xyXG4gICAgICB0aGlzLmF0dGVtcHRBdXRvUmVjb3ZlcnkoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmVycm9yKCfwn5qoIEVycm9yIEJvdW5kYXJ5IGNhdWdodCBhbiBlcnJvcjonLCBlcnJvcik7XHJcbiAgICBjb25zb2xlLmVycm9yKCfwn5ONIEVycm9yIEluZm86JywgZXJyb3JJbmZvKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgaWYgKHRoaXMucmV0cnlUaW1lb3V0SWQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmV0cnlUaW1lb3V0SWQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucmVjb3ZlcnlUaW1lb3V0SWQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVjb3ZlcnlUaW1lb3V0SWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBNw4lUT0RPUyBERSBDTEFTSUZJQ0FDScOTTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIHN0YXRpYyBjbGFzc2lmeUVycm9yKGVycm9yOiBFcnJvcik6IEVycm9yQm91bmRhcnlTdGF0ZVsnZXJyb3JUeXBlJ10ge1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IHN0YWNrID0gZXJyb3Iuc3RhY2s/LnRvTG93ZXJDYXNlKCkgfHwgJyc7XHJcblxyXG4gICAgLy8gRXJyb3IgZGUgY2h1bmsgbG9hZGluZyAobGF6eSBsb2FkaW5nKVxyXG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ2xvYWRpbmcgY2h1bmsnKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdsb2FkaW5nIGNzcyBjaHVuaycpKSB7XHJcbiAgICAgIHJldHVybiAnY2h1bmsnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEVycm9yIGRlIHJlZFxyXG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ25ldHdvcmsnKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdmZXRjaCcpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoJ3RpbWVvdXQnKSkge1xyXG4gICAgICByZXR1cm4gJ25ldHdvcmsnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEVycm9yIGRlIGNvbXBvbmVudGVcclxuICAgIGlmIChzdGFjay5pbmNsdWRlcygncmVhY3QnKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdyZW5kZXInKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdjb21wb25lbnQnKSkge1xyXG4gICAgICByZXR1cm4gJ2NvbXBvbmVudCc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICd1bmtub3duJztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZXRlcm1pbmVSZWNvdmVyeVN0cmF0ZWd5KFxyXG4gICAgZXJyb3I6IEVycm9yLCBcclxuICAgIGVycm9yVHlwZTogRXJyb3JCb3VuZGFyeVN0YXRlWydlcnJvclR5cGUnXVxyXG4gICk6IEVycm9yQm91bmRhcnlTdGF0ZVsncmVjb3ZlcnlTdHJhdGVneSddIHtcclxuICAgIHN3aXRjaCAoZXJyb3JUeXBlKSB7XHJcbiAgICAgIGNhc2UgJ2NodW5rJzpcclxuICAgICAgICByZXR1cm4gJ3JlbG9hZCc7IC8vIFJlY2FyZ2FyIHBhcmEgb2J0ZW5lciBjaHVua3MgYWN0dWFsaXphZG9zXHJcbiAgICAgIGNhc2UgJ25ldHdvcmsnOlxyXG4gICAgICAgIHJldHVybiAncmV0cnknOyAvLyBSZWludGVudGFyIG9wZXJhY2nDs24gZGUgcmVkXHJcbiAgICAgIGNhc2UgJ2NvbXBvbmVudCc6XHJcbiAgICAgICAgcmV0dXJuICdmYWxsYmFjayc7IC8vIE1vc3RyYXIgVUkgZGUgZmFsbGJhY2tcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gJ3JldHJ5JztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gTcOJVE9ET1MgREUgUkVDVVBFUkFDScOTTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGF0dGVtcHRBdXRvUmVjb3ZlcnkgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlY292ZXJ5VGltZW91dCA9IDUwMDAgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7IHJlY292ZXJ5U3RyYXRlZ3kgfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgdGhpcy5yZWNvdmVyeVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzd2l0Y2ggKHJlY292ZXJ5U3RyYXRlZ3kpIHtcclxuICAgICAgICBjYXNlICdyZXRyeSc6XHJcbiAgICAgICAgICB0aGlzLmhhbmRsZVJldHJ5KCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyZWxvYWQnOlxyXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmVkaXJlY3QnOlxyXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLyc7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgLy8gRmFsbGJhY2sgeWEgc2UgbWFuZWphIGVuIHJlbmRlclxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH0sIHJlY292ZXJ5VGltZW91dCk7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlUmV0cnkgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IG1heFJldHJpZXMgPSAzLCByZXRyeURlbGF5ID0gMTAwMCB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgcmV0cnlDb3VudCB9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICBpZiAocmV0cnlDb3VudCA+PSBtYXhSZXRyaWVzKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybign8J+UhCBNYXggcmV0cmllcyByZWFjaGVkLCBzaG93aW5nIGZhbGxiYWNrIFVJJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJldHJ5VGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XHJcbiAgICAgICAgaGFzRXJyb3I6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICAgIGVycm9ySW5mbzogbnVsbCxcclxuICAgICAgICByZXRyeUNvdW50OiBwcmV2U3RhdGUucmV0cnlDb3VudCArIDFcclxuICAgICAgfSkpO1xyXG4gICAgfSwgcmV0cnlEZWxheSAqIChyZXRyeUNvdW50ICsgMSkpOyAvLyBCYWNrb2ZmIGV4cG9uZW5jaWFsXHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlTWFudWFsUmV0cnkgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgaGFzRXJyb3I6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgZXJyb3JJbmZvOiBudWxsLFxyXG4gICAgICByZXRyeUNvdW50OiAwXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBoYW5kbGVSZWxvYWQgPSAoKSA9PiB7XHJcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlR29Ib21lID0gKCkgPT4ge1xyXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLyc7XHJcbiAgfTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBSRVBPUlRFIERFIEVSUk9SRVNcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICByZXBvcnRFcnJvciA9IGFzeW5jIChlcnJvcjogRXJyb3IsIGVycm9ySW5mbzogRXJyb3JJbmZvKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXBvcnQ6IEVycm9yUmVwb3J0ID0ge1xyXG4gICAgICAgIGVycm9ySWQ6IHRoaXMuc3RhdGUuZXJyb3JJZCxcclxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgZXJyb3I6IHtcclxuICAgICAgICAgIG5hbWU6IGVycm9yLm5hbWUsXHJcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICAgICAgc3RhY2s6IGVycm9yLnN0YWNrXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlcnJvckluZm86IHtcclxuICAgICAgICAgIGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uY29tcG9uZW50U3RhY2tcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICAgIGxldmVsOiB0aGlzLnByb3BzLmxldmVsIHx8ICdjb21wb25lbnQnLFxyXG4gICAgICAgICAgY29tcG9uZW50OiB0aGlzLnByb3BzLmNvbnRleHQgfHwgJ3Vua25vd24nLFxyXG4gICAgICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcclxuICAgICAgICAgIHVzZXJBZ2VudDogbmF2aWdhdG9yLnVzZXJBZ2VudCxcclxuICAgICAgICAgIHVzZXJJZDogdGhpcy5nZXRVc2VySWQoKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVjb3Zlcnk6IHtcclxuICAgICAgICAgIHN0cmF0ZWd5OiB0aGlzLnN0YXRlLnJlY292ZXJ5U3RyYXRlZ3ksXHJcbiAgICAgICAgICByZXRyeUNvdW50OiB0aGlzLnN0YXRlLnJldHJ5Q291bnQsXHJcbiAgICAgICAgICBzdWNjZXNzZnVsOiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGVyZm9ybWFuY2U6IHtcclxuICAgICAgICAgIHRpbWVUb0Vycm9yOiBEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUsXHJcbiAgICAgICAgICBtZW1vcnlVc2FnZTogdGhpcy5nZXRNZW1vcnlVc2FnZSgpXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gRW52aWFyIHJlcG9ydGUgYWwgc2lzdGVtYSBkZSBtb25pdG9yZW9cclxuICAgICAgYXdhaXQgdGhpcy5zZW5kRXJyb3JSZXBvcnQocmVwb3J0KTtcclxuXHJcbiAgICB9IGNhdGNoIChyZXBvcnRFcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIHJlcG9ydCBlcnJvcjonLCByZXBvcnRFcnJvcik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBnZXRVc2VySWQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIC8vIEludGVudGFyIG9idGVuZXIgSUQgZGUgdXN1YXJpbyBkZSBkaWZlcmVudGVzIGZ1ZW50ZXNcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENsZXJrXHJcbiAgICAgIGNvbnN0IGNsZXJrVXNlciA9ICh3aW5kb3cgYXMgYW55KS5fX2NsZXJrX3VzZXI7XHJcbiAgICAgIGlmIChjbGVya1VzZXI/LmlkKSB7cmV0dXJuIGNsZXJrVXNlci5pZDt9XHJcblxyXG4gICAgICAvLyBMb2NhbFN0b3JhZ2VcclxuICAgICAgY29uc3Qgc3RvcmVkVXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XHJcbiAgICAgIGlmIChzdG9yZWRVc2VyKSB7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XHJcbiAgICAgICAgcmV0dXJuIHVzZXIuaWQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TWVtb3J5VXNhZ2UoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICgnbWVtb3J5JyBpbiBwZXJmb3JtYW5jZSkge1xyXG4gICAgICAgIHJldHVybiAocGVyZm9ybWFuY2UgYXMgYW55KS5tZW1vcnkudXNlZEpTSGVhcFNpemU7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH0gY2F0Y2gge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBzZW5kRXJyb3JSZXBvcnQocmVwb3J0OiBFcnJvclJlcG9ydCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZmV0Y2goJy9hcGkvbW9uaXRvcmluZy9lcnJvcnMnLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcG9ydClcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIHNlbmQgZXJyb3IgcmVwb3J0OicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gUkVOREVSXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBoYXNFcnJvciwgZXJyb3IsIGVycm9yVHlwZSwgcmVjb3ZlcnlTdHJhdGVneSwgcmV0cnlDb3VudCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGZhbGxiYWNrLCBlbmFibGVSZXRyeSA9IHRydWUsIG1heFJldHJpZXMgPSAzLCBsZXZlbCA9ICdjb21wb25lbnQnIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIGlmIChoYXNFcnJvciAmJiBlcnJvcikge1xyXG4gICAgICAvLyBTaSBoYXkgdW4gZmFsbGJhY2sgcGVyc29uYWxpemFkbywgdXNhcmxvXHJcbiAgICAgIGlmIChmYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVuZGVyaXphciBVSSBkZSBlcnJvciBhcHJvcGlhZGEgc2Vnw7puIGVsIG5pdmVsXHJcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckVycm9yVUkoZXJyb3IsIGVycm9yVHlwZSwgcmVjb3ZlcnlTdHJhdGVneSwgcmV0cnlDb3VudCwgbWF4UmV0cmllcywgZW5hYmxlUmV0cnksIGxldmVsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hpbGRyZW47XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbmRlckVycm9yVUkoXHJcbiAgICBlcnJvcjogRXJyb3IsXHJcbiAgICBlcnJvclR5cGU6IEVycm9yQm91bmRhcnlTdGF0ZVsnZXJyb3JUeXBlJ10sXHJcbiAgICByZWNvdmVyeVN0cmF0ZWd5OiBFcnJvckJvdW5kYXJ5U3RhdGVbJ3JlY292ZXJ5U3RyYXRlZ3knXSxcclxuICAgIHJldHJ5Q291bnQ6IG51bWJlcixcclxuICAgIG1heFJldHJpZXM6IG51bWJlcixcclxuICAgIGVuYWJsZVJldHJ5OiBib29sZWFuLFxyXG4gICAgbGV2ZWw6IHN0cmluZ1xyXG4gICkge1xyXG4gICAgY29uc3QgaXNQYWdlTGV2ZWwgPSBsZXZlbCA9PT0gJ3BhZ2UnO1xyXG4gICAgY29uc3QgY2FuUmV0cnkgPSBlbmFibGVSZXRyeSAmJiByZXRyeUNvdW50IDwgbWF4UmV0cmllcztcclxuXHJcbiAgICBpZiAoaXNQYWdlTGV2ZWwpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUGFnZUVycm9yVUkoZXJyb3IsIGVycm9yVHlwZSwgY2FuUmV0cnkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQ29tcG9uZW50RXJyb3JVSShlcnJvciwgZXJyb3JUeXBlLCBjYW5SZXRyeSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbmRlclBhZ2VFcnJvclVJKGVycm9yOiBFcnJvciwgZXJyb3JUeXBlOiBFcnJvckJvdW5kYXJ5U3RhdGVbJ2Vycm9yVHlwZSddLCBjYW5SZXRyeTogYm9vbGVhbikge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgYmctZ3JheS01MCBweC00XCI+XHJcbiAgICAgICAgPENhcmQgY2xhc3NOYW1lPVwidy1mdWxsIG1heC13LW1kXCI+XHJcbiAgICAgICAgICA8Q2FyZEhlYWRlciBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14LWF1dG8gdy0xMiBoLTEyIGJnLXJlZC0xMDAgcm91bmRlZC1mdWxsIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG1iLTRcIj5cclxuICAgICAgICAgICAgICA8QWxlcnRUcmlhbmdsZSBjbGFzc05hbWU9XCJ3LTYgaC02IHRleHQtcmVkLTYwMFwiIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8Q2FyZFRpdGxlIGNsYXNzTmFtZT1cInRleHQteGxcIj7CoU9vcHMhIEFsZ28gc2FsacOzIG1hbDwvQ2FyZFRpdGxlPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2NyaXB0aW9uPlxyXG4gICAgICAgICAgICAgIHt0aGlzLmdldEVycm9yTWVzc2FnZShlcnJvclR5cGUpfVxyXG4gICAgICAgICAgICA8L0NhcmREZXNjcmlwdGlvbj5cclxuICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cclxuICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cclxuICAgICAgICAgICAgPEFsZXJ0PlxyXG4gICAgICAgICAgICAgIDxCdWcgY2xhc3NOYW1lPVwiaC00IHctNFwiIC8+XHJcbiAgICAgICAgICAgICAgPEFsZXJ0VGl0bGU+RGV0YWxsZXMgZGVsIEVycm9yPC9BbGVydFRpdGxlPlxyXG4gICAgICAgICAgICAgIDxBbGVydERlc2NyaXB0aW9uIGNsYXNzTmFtZT1cInRleHQtc21cIj5cclxuICAgICAgICAgICAgICAgIElEOiB7dGhpcy5zdGF0ZS5lcnJvcklkfTxiciAvPlxyXG4gICAgICAgICAgICAgICAgVGlwbzoge2Vycm9yVHlwZX08YnIgLz5cclxuICAgICAgICAgICAgICAgIHtwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyAmJiAoXHJcbiAgICAgICAgICAgICAgICAgIDw+TWVuc2FqZToge2Vycm9yLm1lc3NhZ2V9PC8+XHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgIDwvQWxlcnREZXNjcmlwdGlvbj5cclxuICAgICAgICAgICAgPC9BbGVydD5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtMlwiPlxyXG4gICAgICAgICAgICAgIHtjYW5SZXRyeSAmJiAoXHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTWFudWFsUmV0cnl9IGNsYXNzTmFtZT1cInctZnVsbFwiPlxyXG4gICAgICAgICAgICAgICAgICA8UmVmcmVzaEN3IGNsYXNzTmFtZT1cInctNCBoLTQgbXItMlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgIEludGVudGFyIGRlIG51ZXZvXHJcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cIm91dGxpbmVcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUdvSG9tZX0gY2xhc3NOYW1lPVwidy1mdWxsXCI+XHJcbiAgICAgICAgICAgICAgICA8SG9tZSBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTJcIiAvPlxyXG4gICAgICAgICAgICAgICAgSXIgYWwgaW5pY2lvXHJcbiAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwib3V0bGluZVwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmVsb2FkfSBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cclxuICAgICAgICAgICAgICAgIDxSZWZyZXNoQ3cgY2xhc3NOYW1lPVwidy00IGgtNCBtci0yXCIgLz5cclxuICAgICAgICAgICAgICAgIFJlY2FyZ2FyIHDDoWdpbmFcclxuICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlua1wiIHNpemU9XCJzbVwiIG9uQ2xpY2s9eygpID0+IHRoaXMucmVwb3J0SXNzdWUoKX0+XHJcbiAgICAgICAgICAgICAgICA8TWFpbCBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTJcIiAvPlxyXG4gICAgICAgICAgICAgICAgUmVwb3J0YXIgcHJvYmxlbWFcclxuICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L0NhcmRDb250ZW50PlxyXG4gICAgICAgIDwvQ2FyZD5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5kZXJDb21wb25lbnRFcnJvclVJKGVycm9yOiBFcnJvciwgZXJyb3JUeXBlOiBFcnJvckJvdW5kYXJ5U3RhdGVbJ2Vycm9yVHlwZSddLCBjYW5SZXRyeTogYm9vbGVhbikge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYm9yZGVyIGJvcmRlci1yZWQtMjAwIHJvdW5kZWQtbGcgYmctcmVkLTUwXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMiBtYi0yXCI+XHJcbiAgICAgICAgICA8QWxlcnRUcmlhbmdsZSBjbGFzc05hbWU9XCJ3LTQgaC00IHRleHQtcmVkLTYwMFwiIC8+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtcmVkLTgwMFwiPkVycm9yIGVuIGNvbXBvbmVudGU8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LXJlZC03MDAgbWItM1wiPlxyXG4gICAgICAgICAge3RoaXMuZ2V0RXJyb3JNZXNzYWdlKGVycm9yVHlwZSl9XHJcbiAgICAgICAgPC9wPlxyXG4gICAgICAgIHtjYW5SZXRyeSAmJiAoXHJcbiAgICAgICAgICA8QnV0dG9uIHNpemU9XCJzbVwiIHZhcmlhbnQ9XCJvdXRsaW5lXCIgb25DbGljaz17dGhpcy5oYW5kbGVNYW51YWxSZXRyeX0+XHJcbiAgICAgICAgICAgIDxSZWZyZXNoQ3cgY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cclxuICAgICAgICAgICAgUmVpbnRlbnRhclxyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRFcnJvck1lc3NhZ2UoZXJyb3JUeXBlOiBFcnJvckJvdW5kYXJ5U3RhdGVbJ2Vycm9yVHlwZSddKTogc3RyaW5nIHtcclxuICAgIHN3aXRjaCAoZXJyb3JUeXBlKSB7XHJcbiAgICAgIGNhc2UgJ2NodW5rJzpcclxuICAgICAgICByZXR1cm4gJ0Vycm9yIGNhcmdhbmRvIHJlY3Vyc29zLiBMYSBww6FnaW5hIHNlIHJlY2FyZ2Fyw6EgYXV0b23DoXRpY2FtZW50ZS4nO1xyXG4gICAgICBjYXNlICduZXR3b3JrJzpcclxuICAgICAgICByZXR1cm4gJ0Vycm9yIGRlIGNvbmV4acOzbi4gVmVyaWZpY2EgdHUgY29uZXhpw7NuIGEgaW50ZXJuZXQuJztcclxuICAgICAgY2FzZSAnY29tcG9uZW50JzpcclxuICAgICAgICByZXR1cm4gJ0Vycm9yIGVuIGVsIGNvbXBvbmVudGUuIEludGVudGFuZG8gcmVjdXBlcmFjacOzbiBhdXRvbcOhdGljYS4nO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiAnSGEgb2N1cnJpZG8gdW4gZXJyb3IgaW5lc3BlcmFkby4gRXN0YW1vcyB0cmFiYWphbmRvIHBhcmEgc29sdWNpb25hcmxvLic7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlcG9ydElzc3VlID0gKCkgPT4ge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IGBFcnJvciBSZXBvcnQgLSAke3RoaXMuc3RhdGUuZXJyb3JJZH1gO1xyXG4gICAgY29uc3QgYm9keSA9IGBFcnJvciBJRDogJHt0aGlzLnN0YXRlLmVycm9ySWR9XFxuVGlwbzogJHt0aGlzLnN0YXRlLmVycm9yVHlwZX1cXG5VUkw6ICR7d2luZG93LmxvY2F0aW9uLmhyZWZ9XFxuRmVjaGE6ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWA7XHJcbiAgICBjb25zdCBtYWlsdG9VcmwgPSBgbWFpbHRvOnNvcG9ydGVAcGludGV5YS5jb20/c3ViamVjdD0ke2VuY29kZVVSSUNvbXBvbmVudChzdWJqZWN0KX0mYm9keT0ke2VuY29kZVVSSUNvbXBvbmVudChib2R5KX1gO1xyXG4gICAgd2luZG93Lm9wZW4obWFpbHRvVXJsKTtcclxuICB9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJBZHZhbmNlZEVycm9yQm91bmRhcnkiLCJDb21wb25lbnQiLCJwcm9wcyIsInJldHJ5VGltZW91dElkIiwicmVjb3ZlcnlUaW1lb3V0SWQiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiYXR0ZW1wdEF1dG9SZWNvdmVyeSIsInJlY292ZXJ5VGltZW91dCIsInJlY292ZXJ5U3RyYXRlZ3kiLCJzdGF0ZSIsInNldFRpbWVvdXQiLCJoYW5kbGVSZXRyeSIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVsb2FkIiwiaHJlZiIsIm1heFJldHJpZXMiLCJyZXRyeURlbGF5IiwicmV0cnlDb3VudCIsImNvbnNvbGUiLCJ3YXJuIiwic2V0U3RhdGUiLCJwcmV2U3RhdGUiLCJoYXNFcnJvciIsImVycm9yIiwiZXJyb3JJbmZvIiwiaGFuZGxlTWFudWFsUmV0cnkiLCJoYW5kbGVSZWxvYWQiLCJoYW5kbGVHb0hvbWUiLCJyZXBvcnRFcnJvciIsInJlcG9ydCIsImVycm9ySWQiLCJ0aW1lc3RhbXAiLCJuYW1lIiwibWVzc2FnZSIsInN0YWNrIiwiY29tcG9uZW50U3RhY2siLCJjb250ZXh0IiwibGV2ZWwiLCJjb21wb25lbnQiLCJ1cmwiLCJ1c2VyQWdlbnQiLCJuYXZpZ2F0b3IiLCJ1c2VySWQiLCJnZXRVc2VySWQiLCJyZWNvdmVyeSIsInN0cmF0ZWd5Iiwic3VjY2Vzc2Z1bCIsInBlcmZvcm1hbmNlIiwidGltZVRvRXJyb3IiLCJtZW1vcnlVc2FnZSIsImdldE1lbW9yeVVzYWdlIiwic2VuZEVycm9yUmVwb3J0IiwicmVwb3J0SXNzdWUiLCJzdWJqZWN0IiwiYm9keSIsImVycm9yVHlwZSIsInRvSVNPU3RyaW5nIiwibWFpbHRvVXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3BlbiIsImxhc3RFcnJvclRpbWUiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJjbGFzc2lmeUVycm9yIiwiZGV0ZXJtaW5lUmVjb3ZlcnlTdHJhdGVneSIsImNvbXBvbmVudERpZENhdGNoIiwib25FcnJvciIsImVuYWJsZVJlcG9ydGluZyIsImVuYWJsZUF1dG9SZWNvdmVyeSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2xlYXJUaW1lb3V0IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImNsZXJrVXNlciIsIl9fY2xlcmtfdXNlciIsImlkIiwic3RvcmVkVXNlciIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1c2VyIiwiSlNPTiIsInBhcnNlIiwidW5kZWZpbmVkIiwibWVtb3J5IiwidXNlZEpTSGVhcFNpemUiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJzdHJpbmdpZnkiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImZhbGxiYWNrIiwiZW5hYmxlUmV0cnkiLCJyZW5kZXJFcnJvclVJIiwiaXNQYWdlTGV2ZWwiLCJjYW5SZXRyeSIsInJlbmRlclBhZ2VFcnJvclVJIiwicmVuZGVyQ29tcG9uZW50RXJyb3JVSSIsImRpdiIsImNsYXNzTmFtZSIsIkNhcmQiLCJDYXJkSGVhZGVyIiwiQWxlcnRUcmlhbmdsZSIsIkNhcmRUaXRsZSIsIkNhcmREZXNjcmlwdGlvbiIsImdldEVycm9yTWVzc2FnZSIsIkNhcmRDb250ZW50IiwiQWxlcnQiLCJCdWciLCJBbGVydFRpdGxlIiwiQWxlcnREZXNjcmlwdGlvbiIsImJyIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiQnV0dG9uIiwib25DbGljayIsIlJlZnJl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