{"version":3,"names":["brandsToUrlString","cov_2e4jmttz5v","f","s","filterValidBrands","urlStringToBrands","useBrandFilter","useSimpleBrandFilter","validateBrand","options","b","autoLoad","syncWithUrl","urlParam","minProducts","onBrandsChange","router","_navigation","useRouter","searchParams","useSearchParams","brands","setBrands","_react","useState","selectedBrands","setSelectedBrandsState","isLoading","setIsLoading","error","setError","useEffect","urlBrands","get","brandsArray","split","filter","Boolean","fetchBrands","useCallback","response","_brands","getBrands","success","data","err","Error","message","updateUrl","newBrands","params","URLSearchParams","toString","length","set","join","delete","newUrl","window","location","pathname","push","scroll","setSelectedBrands","toggleBrand","brandName","includes","clearBrands","searchBrands","searchTerm","search","refetch","prev","urlString","availableBrands","some","brand","name","brandNames"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useBrandFilter.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useBrandFilter\r\n// ===================================\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { getBrands, Brand } from '@/lib/api/brands';\r\nimport { useRouter, useSearchParams } from 'next/navigation';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface UseBrandFilterOptions {\r\n  /** Cargar marcas automáticamente al montar */\r\n  autoLoad?: boolean;\r\n  /** Sincronizar con URL search params */\r\n  syncWithUrl?: boolean;\r\n  /** Parámetro de URL para las marcas */\r\n  urlParam?: string;\r\n  /** Mínimo número de productos por marca */\r\n  minProducts?: number;\r\n  /** Callback cuando cambian las marcas seleccionadas */\r\n  onBrandsChange?: (brands: string[]) => void;\r\n}\r\n\r\nexport interface UseBrandFilterReturn {\r\n  /** Lista de marcas disponibles */\r\n  brands: Brand[];\r\n  /** Marcas seleccionadas */\r\n  selectedBrands: string[];\r\n  /** Estado de carga */\r\n  isLoading: boolean;\r\n  /** Error si ocurre */\r\n  error: string | null;\r\n  /** Función para cambiar marcas seleccionadas */\r\n  setSelectedBrands: (brands: string[]) => void;\r\n  /** Función para alternar una marca */\r\n  toggleBrand: (brandName: string) => void;\r\n  /** Función para limpiar todas las marcas */\r\n  clearBrands: () => void;\r\n  /** Función para recargar marcas */\r\n  refetch: () => Promise<void>;\r\n  /** Función para buscar marcas */\r\n  searchBrands: (searchTerm: string) => void;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useBrandFilter(options: UseBrandFilterOptions = {}): UseBrandFilterReturn {\r\n  const {\r\n    autoLoad = true,\r\n    syncWithUrl = false,\r\n    urlParam = 'brands',\r\n    minProducts = 1,\r\n    onBrandsChange,\r\n  } = options;\r\n\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n\r\n  // Estados\r\n  const [brands, setBrands] = useState<Brand[]>([]);\r\n  const [selectedBrands, setSelectedBrandsState] = useState<string[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Inicializar marcas seleccionadas desde URL\r\n  useEffect(() => {\r\n    if (syncWithUrl && searchParams) {\r\n      const urlBrands = searchParams.get(urlParam);\r\n      if (urlBrands) {\r\n        const brandsArray = urlBrands.split(',').filter(Boolean);\r\n        setSelectedBrandsState(brandsArray);\r\n      }\r\n    }\r\n  }, [syncWithUrl, urlParam, searchParams]);\r\n\r\n  // Cargar marcas\r\n  const fetchBrands = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await getBrands({ minProducts });\r\n      \r\n      if (response.success && response.data) {\r\n        setBrands(response.data);\r\n      } else {\r\n        setError(response.error || 'Error cargando marcas');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Error desconocido');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [minProducts]);\r\n\r\n  // Cargar marcas automáticamente\r\n  useEffect(() => {\r\n    if (autoLoad) {\r\n      fetchBrands();\r\n    }\r\n  }, [autoLoad, fetchBrands]);\r\n\r\n  // Actualizar URL cuando cambian las marcas seleccionadas\r\n  const updateUrl = useCallback((newBrands: string[]) => {\r\n    if (!syncWithUrl) {return;}\r\n\r\n    const params = new URLSearchParams(searchParams?.toString());\r\n    \r\n    if (newBrands.length > 0) {\r\n      params.set(urlParam, newBrands.join(','));\r\n    } else {\r\n      params.delete(urlParam);\r\n    }\r\n\r\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\r\n    router.push(newUrl, { scroll: false });\r\n  }, [syncWithUrl, urlParam, searchParams, router]);\r\n\r\n  // Función para cambiar marcas seleccionadas\r\n  const setSelectedBrands = useCallback((newBrands: string[]) => {\r\n    setSelectedBrandsState(newBrands);\r\n    updateUrl(newBrands);\r\n    onBrandsChange?.(newBrands);\r\n  }, [updateUrl, onBrandsChange]);\r\n\r\n  // Función para alternar una marca\r\n  const toggleBrand = useCallback((brandName: string) => {\r\n    const newBrands = selectedBrands.includes(brandName)\r\n      ? selectedBrands.filter(b => b !== brandName)\r\n      : [...selectedBrands, brandName];\r\n    \r\n    setSelectedBrands(newBrands);\r\n  }, [selectedBrands, setSelectedBrands]);\r\n\r\n  // Función para limpiar todas las marcas\r\n  const clearBrands = useCallback(() => {\r\n    setSelectedBrands([]);\r\n  }, [setSelectedBrands]);\r\n\r\n  // Función para buscar marcas\r\n  const searchBrands = useCallback(async (searchTerm: string) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await getBrands({ \r\n        search: searchTerm,\r\n        minProducts \r\n      });\r\n      \r\n      if (response.success && response.data) {\r\n        setBrands(response.data);\r\n      } else {\r\n        setError(response.error || 'Error buscando marcas');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Error desconocido');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [minProducts]);\r\n\r\n  return {\r\n    brands,\r\n    selectedBrands,\r\n    isLoading,\r\n    error,\r\n    setSelectedBrands,\r\n    toggleBrand,\r\n    clearBrands,\r\n    refetch: fetchBrands,\r\n    searchBrands,\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOOK SIMPLIFICADO\r\n// ===================================\r\n\r\nexport function useSimpleBrandFilter() {\r\n  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);\r\n\r\n  const toggleBrand = useCallback((brandName: string) => {\r\n    setSelectedBrands(prev => \r\n      prev.includes(brandName)\r\n        ? prev.filter(b => b !== brandName)\r\n        : [...prev, brandName]\r\n    );\r\n  }, []);\r\n\r\n  const clearBrands = useCallback(() => {\r\n    setSelectedBrands([]);\r\n  }, []);\r\n\r\n  return {\r\n    selectedBrands,\r\n    setSelectedBrands,\r\n    toggleBrand,\r\n    clearBrands,\r\n  };\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\n/**\r\n * Convierte array de marcas a string para URL\r\n */\r\nexport function brandsToUrlString(brands: string[]): string {\r\n  return brands.join(',');\r\n}\r\n\r\n/**\r\n * Convierte string de URL a array de marcas\r\n */\r\nexport function urlStringToBrands(urlString: string): string[] {\r\n  return urlString.split(',').filter(Boolean);\r\n}\r\n\r\n/**\r\n * Valida si una marca existe en la lista\r\n */\r\nexport function validateBrand(brandName: string, availableBrands: Brand[]): boolean {\r\n  return availableBrands.some(brand => brand.name === brandName);\r\n}\r\n\r\n/**\r\n * Filtra marcas válidas de una lista\r\n */\r\nexport function filterValidBrands(brandNames: string[], availableBrands: Brand[]): string[] {\r\n  return brandNames.filter(name => validateBrand(name, availableBrands));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}