{"version":3,"names":["cov_3nx7pz3e9","actualCoverage","s","useSessionRegistration","f","useUserSessions","sessions","setSessions","_react","useState","isLoading","setIsLoading","error","setError","fetchSessions","useCallback","response","fetch","method","headers","ok","b","Error","data","json","success","err","errorMessage","message","_sonner","toast","revokeSession","sessionId","errorData","prev","filter","session","id","revokeAllSessions","is_current","trustDevice","body","JSON","stringify","is_trusted","map","refreshSessions","useEffect","interval","setInterval","clearInterval","totalSessions","length","currentSession","find","remoteSessions","isRegistered","setIsRegistered","registerSession","register_current","console","log","_anomalyDetection","analyzeSessionForAnomalies","userId","user_id","ipAddress","ip_address","userAgent","user_agent","deviceType","device_type","location","timestamp","created_at","anomalyError"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useUserSessions.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { analyzeSessionForAnomalies } from '@/lib/security/anomalyDetection';\r\n\r\n// Tipos para sesiones\r\nexport interface UserSession {\r\n  id: string;\r\n  user_id: string;\r\n  device_type: string;\r\n  device_name: string;\r\n  browser: string;\r\n  os: string;\r\n  ip_address: string;\r\n  location?: string;\r\n  is_current: boolean;\r\n  is_trusted?: boolean;\r\n  last_activity: string;\r\n  created_at: string;\r\n  user_agent: string;\r\n}\r\n\r\ninterface SessionsResponse {\r\n  success: boolean;\r\n  sessions: UserSession[];\r\n  total: number;\r\n}\r\n\r\ninterface UseUserSessionsReturn {\r\n  // Estado\r\n  sessions: UserSession[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  \r\n  // Funciones\r\n  fetchSessions: () => Promise<void>;\r\n  revokeSession: (sessionId: string) => Promise<boolean>;\r\n  revokeAllSessions: () => Promise<boolean>;\r\n  trustDevice: (sessionId: string) => Promise<boolean>;\r\n  refreshSessions: () => Promise<void>;\r\n  \r\n  // Estadísticas\r\n  totalSessions: number;\r\n  currentSession: UserSession | null;\r\n  remoteSessions: UserSession[];\r\n}\r\n\r\nexport function useUserSessions(): UseUserSessionsReturn {\r\n  const [sessions, setSessions] = useState<UserSession[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Función para obtener sesiones\r\n  const fetchSessions = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('/api/user/sessions', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener sesiones');\r\n      }\r\n\r\n      const data: SessionsResponse = await response.json();\r\n      \r\n      if (data.success) {\r\n        setSessions(data.sessions);\r\n      } else {\r\n        throw new Error('Error en la respuesta del servidor');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      toast.error('Error al cargar sesiones: ' + errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Función para cerrar una sesión específica\r\n  const revokeSession = useCallback(async (sessionId: string): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch(`/api/user/sessions/${sessionId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Error al cerrar sesión');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        // Actualizar estado local\r\n        setSessions(prev => prev.filter(session => session.id !== sessionId));\r\n        toast.success('Sesión cerrada exitosamente');\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error al cerrar sesión');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      toast.error('Error al cerrar sesión: ' + errorMessage);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Función para cerrar todas las sesiones remotas\r\n  const revokeAllSessions = useCallback(async (): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch('/api/user/sessions', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Error al cerrar sesiones');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        // Actualizar estado local - mantener solo la sesión actual\r\n        setSessions(prev => prev.filter(session => session.is_current));\r\n        toast.success('Todas las sesiones remotas han sido cerradas');\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error al cerrar sesiones');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      toast.error('Error al cerrar sesiones: ' + errorMessage);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Función para marcar dispositivo como confiable\r\n  const trustDevice = useCallback(async (sessionId: string): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch(`/api/user/sessions/${sessionId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          is_trusted: true,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Error al marcar dispositivo como confiable');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        // Actualizar estado local\r\n        setSessions(prev => prev.map(session => \r\n          session.id === sessionId \r\n            ? { ...session, is_trusted: true }\r\n            : session\r\n        ));\r\n        toast.success('Dispositivo marcado como confiable');\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error al marcar dispositivo como confiable');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      toast.error('Error al marcar dispositivo: ' + errorMessage);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Función para refrescar sesiones\r\n  const refreshSessions = useCallback(async () => {\r\n    await fetchSessions();\r\n  }, [fetchSessions]);\r\n\r\n  // Cargar sesiones al montar el componente\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, [fetchSessions]);\r\n\r\n  // Auto-refresh cada 30 segundos\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      fetchSessions();\r\n    }, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [fetchSessions]);\r\n\r\n  // Calcular estadísticas\r\n  const totalSessions = sessions.length;\r\n  const currentSession = sessions.find(session => session.is_current) || null;\r\n  const remoteSessions = sessions.filter(session => !session.is_current);\r\n\r\n  return {\r\n    // Estado\r\n    sessions,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Funciones\r\n    fetchSessions,\r\n    revokeSession,\r\n    revokeAllSessions,\r\n    trustDevice,\r\n    refreshSessions,\r\n    \r\n    // Estadísticas\r\n    totalSessions,\r\n    currentSession,\r\n    remoteSessions,\r\n  };\r\n}\r\n\r\n// Hook auxiliar para registrar nueva sesión\r\nexport function useSessionRegistration() {\r\n  const [isRegistered, setIsRegistered] = useState(false);\r\n\r\n  const registerSession = useCallback(async () => {\r\n    if (isRegistered) return;\r\n\r\n    try {\r\n      const response = await fetch('/api/user/sessions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          register_current: true,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setIsRegistered(true);\r\n        console.log('Sesión registrada:', data.session);\r\n\r\n        // Analizar sesión para detectar anomalías\r\n        if (data.session) {\r\n          try {\r\n            await analyzeSessionForAnomalies({\r\n              userId: data.session.user_id,\r\n              sessionId: data.session.id,\r\n              ipAddress: data.session.ip_address,\r\n              userAgent: data.session.user_agent,\r\n              deviceType: data.session.device_type,\r\n              location: data.session.location,\r\n              timestamp: data.session.created_at,\r\n            });\r\n          } catch (anomalyError) {\r\n            console.error('Error en análisis de anomalías:', anomalyError);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al registrar sesión:', error);\r\n    }\r\n  }, [isRegistered]);\r\n\r\n  // Registrar sesión al cargar la página\r\n  useEffect(() => {\r\n    registerSession();\r\n  }, [registerSession]);\r\n\r\n  return { registerSession, isRegistered };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}