08a2589e5772d1c662d6bff01866b131
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA HOOK SIDEBAR
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useSidebar = require("../../hooks/useSidebar");
// Mock para eventos del DOM
const mockAddEventListener = jest.fn();
const mockRemoveEventListener = jest.fn();
beforeEach(()=>{
    // Reset mocks
    mockAddEventListener.mockClear();
    mockRemoveEventListener.mockClear();
    // Mock document.addEventListener
    Object.defineProperty(document, 'addEventListener', {
        value: mockAddEventListener,
        writable: true
    });
    Object.defineProperty(document, 'removeEventListener', {
        value: mockRemoveEventListener,
        writable: true
    });
});
describe('useSidebar', ()=>{
    it('should initialize with closed state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        expect(result.current.isOpen).toBe(false);
    });
    it('should toggle sidebar state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        (0, _react.act)(()=>{
            result.current.toggle();
        });
        expect(result.current.isOpen).toBe(true);
        (0, _react.act)(()=>{
            result.current.toggle();
        });
        expect(result.current.isOpen).toBe(false);
    });
    it('should open sidebar', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        (0, _react.act)(()=>{
            result.current.open();
        });
        expect(result.current.isOpen).toBe(true);
    });
    it('should close sidebar', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        // First open it
        (0, _react.act)(()=>{
            result.current.open();
        });
        expect(result.current.isOpen).toBe(true);
        // Then close it
        (0, _react.act)(()=>{
            result.current.close();
        });
        expect(result.current.isOpen).toBe(false);
    });
    it('should add event listeners when sidebar is open', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        (0, _react.act)(()=>{
            result.current.open();
        });
        expect(mockAddEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function));
        expect(mockAddEventListener).toHaveBeenCalledWith('keydown', expect.any(Function));
    });
    it('should remove event listeners when sidebar is closed', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        // Open sidebar first
        (0, _react.act)(()=>{
            result.current.open();
        });
        // Then close it
        (0, _react.act)(()=>{
            result.current.close();
        });
        expect(mockRemoveEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function));
        expect(mockRemoveEventListener).toHaveBeenCalledWith('keydown', expect.any(Function));
    });
    it('should provide stable function references', ()=>{
        const { result, rerender } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        const initialToggle = result.current.toggle;
        const initialOpen = result.current.open;
        const initialClose = result.current.close;
        rerender();
        expect(result.current.toggle).toBe(initialToggle);
        expect(result.current.open).toBe(initialOpen);
        expect(result.current.close).toBe(initialClose);
    });
});

//# sourceMappingURL=data:application/json;base64,