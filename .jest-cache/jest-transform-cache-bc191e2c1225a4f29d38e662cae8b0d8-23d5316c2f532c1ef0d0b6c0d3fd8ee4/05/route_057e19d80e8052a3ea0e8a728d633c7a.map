{"version":3,"names":["cov_1h18q625ue","actualCoverage","s","GET","f","POST","runtime","request","userId","_config","auth","b","_server","NextResponse","json","error","status","searchParams","URL","url","action","get","reportId","type","getReportsList","getReport","downloadReport","console","reportRequest","dateRange","report","generateReport","success","data","timestamp","Date","toISOString","mockReports","id","title","description","start","end","generatedAt","now","downloadUrl","fileSize","filteredReports","filter","generateMockReportData","reportData","fileContent","JSON","stringify","headers","analyticsManager","SEOAnalyticsManager","getInstance","testingSuite","_seotestingsuite","SEOTestingSuite","sitemapGenerator","_dynamicsitemapgenerator","DynamicSitemapGenerator","optimizationTools","_seooptimizationtools","SEOOptimizationTools","toLocaleDateString","generateMonthlyReport","generateAuditReport","generateKeywordsReport","generateTechnicalReport","Error","urls","summary","totalPages","length","averageScore","organicTraffic","searchImpressions","averagePosition","ctr","metrics","trends","recommendations","getMetrics","includePerformance","includeSearchConsole","includeConversions","totalTests","passed","failed","warnings","overallScore","testResults","issues","runComprehensiveTest","totalKeywords","topPositions","totalImpressions","totalClicks","topKeywords","keyword","position","impressions","clicks","opportunities","sitemapStats","getGenerationStatistics","sitemap","totalUrls","lastGenerated","errors","technical","httpsEnabled","robotsTxtValid","canonicalTags","metaRobots","structuredData","performance","averageLoadTime","mobileOptimized","coreWebVitals","lcp","fid","cls","sections","analytics","pageViews","uniqueVisitors","bounceRate","avgSessionDuration","keywords","sitemapUrls","indexedPages"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\seo\\reports\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - SEO REPORTS API\r\n// API para generación y gestión de reportes SEO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { EnhancedSEOAnalyticsManager } from '@/lib/seo/seo-analytics-manager';\r\nimport { SEOTestingSuite } from '@/lib/seo/seo-testing-suite';\r\nimport { DynamicSitemapGenerator } from '@/lib/seo/dynamic-sitemap-generator';\r\nimport { SEOOptimizationTools } from '@/lib/seo/seo-optimization-tools';\r\n\r\n// ===================================\r\n// INTERFACES\r\n// ===================================\r\n\r\ninterface ReportRequest {\r\n  type: 'monthly' | 'weekly' | 'custom' | 'audit' | 'keywords' | 'technical';\r\n  dateRange: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  urls?: string[];\r\n  includeMetrics?: string[];\r\n  format?: 'json' | 'pdf' | 'csv' | 'excel';\r\n}\r\n\r\ninterface SEOReport {\r\n  id: string;\r\n  type: string;\r\n  title: string;\r\n  description: string;\r\n  dateRange: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  generatedAt: string;\r\n  status: 'generating' | 'completed' | 'failed';\r\n  data: any;\r\n  downloadUrl?: string;\r\n  fileSize?: string;\r\n}\r\n\r\n// ===================================\r\n// GET - OBTENER REPORTES\r\n// ===================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action') || 'list';\r\n    const reportId = searchParams.get('reportId');\r\n    const type = searchParams.get('type');\r\n\r\n    switch (action) {\r\n      case 'list':\r\n        return await getReportsList(type);\r\n      case 'get':\r\n        if (!reportId) {\r\n          return NextResponse.json(\r\n            { error: 'ID de reporte requerido' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n        return await getReport(reportId);\r\n      case 'download':\r\n        if (!reportId) {\r\n          return NextResponse.json(\r\n            { error: 'ID de reporte requerido' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n        return await downloadReport(reportId);\r\n      default:\r\n        return NextResponse.json(\r\n          { error: 'Acción no válida' },\r\n          { status: 400 }\r\n        );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en SEO Reports API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - GENERAR REPORTES\r\n// ===================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const reportRequest: ReportRequest = await request.json();\r\n\r\n    // Validar request\r\n    if (!reportRequest.type || !reportRequest.dateRange) {\r\n      return NextResponse.json(\r\n        { error: 'Tipo de reporte y rango de fechas son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Generar reporte según el tipo\r\n    const report = await generateReport(reportRequest);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: report,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error generando reporte:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nasync function getReportsList(type?: string | null): Promise<NextResponse> {\r\n  try {\r\n    // En una implementación real, esto vendría de la base de datos\r\n    const mockReports: SEOReport[] = [\r\n      {\r\n        id: 'report_001',\r\n        type: 'monthly',\r\n        title: 'Reporte Mensual SEO - Noviembre 2024',\r\n        description: 'Análisis completo de métricas SEO del mes',\r\n        dateRange: {\r\n          start: '2024-11-01',\r\n          end: '2024-11-30'\r\n        },\r\n        generatedAt: new Date(Date.now() - 86400000).toISOString(),\r\n        status: 'completed',\r\n        data: {},\r\n        downloadUrl: '/api/admin/seo/reports?action=download&reportId=report_001',\r\n        fileSize: '2.4 MB'\r\n      },\r\n      {\r\n        id: 'report_002',\r\n        type: 'audit',\r\n        title: 'Auditoría Técnica SEO',\r\n        description: 'Auditoría completa de aspectos técnicos',\r\n        dateRange: {\r\n          start: '2024-11-15',\r\n          end: '2024-11-15'\r\n        },\r\n        generatedAt: new Date(Date.now() - 172800000).toISOString(),\r\n        status: 'completed',\r\n        data: {},\r\n        downloadUrl: '/api/admin/seo/reports?action=download&reportId=report_002',\r\n        fileSize: '1.8 MB'\r\n      },\r\n      {\r\n        id: 'report_003',\r\n        type: 'keywords',\r\n        title: 'Análisis de Keywords',\r\n        description: 'Rendimiento de keywords principales',\r\n        dateRange: {\r\n          start: '2024-11-01',\r\n          end: '2024-11-30'\r\n        },\r\n        generatedAt: new Date().toISOString(),\r\n        status: 'generating',\r\n        data: {}\r\n      }\r\n    ];\r\n\r\n    // Filtrar por tipo si se especifica\r\n    const filteredReports = type \r\n      ? mockReports.filter(report => report.type === type)\r\n      : mockReports;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: filteredReports,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error obteniendo lista de reportes:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getReport(reportId: string): Promise<NextResponse> {\r\n  try {\r\n    // En una implementación real, esto vendría de la base de datos\r\n    const report = await generateMockReportData(reportId);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: report,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error obteniendo reporte:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function downloadReport(reportId: string): Promise<NextResponse> {\r\n  try {\r\n    // En una implementación real, esto generaría y devolvería el archivo\r\n    const reportData = await generateMockReportData(reportId);\r\n    \r\n    // Simular generación de PDF/Excel\r\n    const fileContent = JSON.stringify(reportData, null, 2);\r\n    \r\n    return new NextResponse(fileContent, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Content-Disposition': `attachment; filename=\"seo-report-${reportId}.json\"`\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error descargando reporte:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateReport(request: ReportRequest): Promise<SEOReport> {\r\n  try {\r\n    const reportId = `report_${Date.now()}`;\r\n    \r\n    // Obtener instancias de los managers\r\n    const analyticsManager = SEOAnalyticsManager.getInstance();\r\n    const testingSuite = SEOTestingSuite.getInstance();\r\n    const sitemapGenerator = DynamicSitemapGenerator.getInstance();\r\n    const optimizationTools = SEOOptimizationTools.getInstance();\r\n\r\n    let reportData: any = {};\r\n    let title = '';\r\n    let description = '';\r\n\r\n    switch (request.type) {\r\n      case 'monthly':\r\n        title = `Reporte Mensual SEO - ${new Date().toLocaleDateString()}`;\r\n        description = 'Análisis completo de métricas SEO del mes';\r\n        reportData = await generateMonthlyReport(analyticsManager, request);\r\n        break;\r\n\r\n      case 'audit':\r\n        title = 'Auditoría Técnica SEO';\r\n        description = 'Auditoría completa de aspectos técnicos';\r\n        reportData = await generateAuditReport(testingSuite, request);\r\n        break;\r\n\r\n      case 'keywords':\r\n        title = 'Análisis de Keywords';\r\n        description = 'Rendimiento de keywords principales';\r\n        reportData = await generateKeywordsReport(analyticsManager, request);\r\n        break;\r\n\r\n      case 'technical':\r\n        title = 'Reporte Técnico SEO';\r\n        description = 'Estado técnico del sitio web';\r\n        reportData = await generateTechnicalReport(testingSuite, sitemapGenerator, request);\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Tipo de reporte no válido');\r\n    }\r\n\r\n    const report: SEOReport = {\r\n      id: reportId,\r\n      type: request.type,\r\n      title,\r\n      description,\r\n      dateRange: request.dateRange,\r\n      generatedAt: new Date().toISOString(),\r\n      status: 'completed',\r\n      data: reportData,\r\n      downloadUrl: `/api/admin/seo/reports?action=download&reportId=${reportId}`,\r\n      fileSize: '1.2 MB' // Esto se calcularía en una implementación real\r\n    };\r\n\r\n    return report;\r\n\r\n  } catch (error) {\r\n    console.error('Error generando reporte:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateMonthlyReport(analyticsManager: SEOAnalyticsManager, request: ReportRequest) {\r\n  try {\r\n    const urls = request.urls || ['/'];\r\n    const reportData = {\r\n      summary: {\r\n        totalPages: urls.length,\r\n        averageScore: 85,\r\n        organicTraffic: 8920,\r\n        searchImpressions: 125000,\r\n        averagePosition: 3.2,\r\n        ctr: 2.56\r\n      },\r\n      metrics: {},\r\n      trends: {},\r\n      recommendations: [\r\n        'Optimizar meta descriptions en páginas de productos',\r\n        'Mejorar velocidad de carga en páginas de categorías',\r\n        'Implementar structured data en todas las páginas de productos'\r\n      ]\r\n    };\r\n\r\n    // Obtener métricas para cada URL\r\n    for (const url of urls) {\r\n      const metrics = await analyticsManager.getMetrics(url, {\r\n        includePerformance: true,\r\n        includeSearchConsole: true,\r\n        includeConversions: true\r\n      });\r\n      reportData.metrics[url] = metrics;\r\n    }\r\n\r\n    return reportData;\r\n\r\n  } catch (error) {\r\n    console.error('Error generando reporte mensual:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateAuditReport(testingSuite: SEOTestingSuite, request: ReportRequest) {\r\n  try {\r\n    const urls = request.urls || ['/'];\r\n    \r\n    const reportData = {\r\n      summary: {\r\n        totalTests: 24,\r\n        passed: 18,\r\n        failed: 3,\r\n        warnings: 3,\r\n        overallScore: 82\r\n      },\r\n      testResults: {},\r\n      issues: [\r\n        'Missing meta description en /products/pintura-interior',\r\n        'Title tag demasiado largo en /categories/pinturas',\r\n        'Falta structured data en páginas de productos'\r\n      ],\r\n      recommendations: [\r\n        'Implementar meta descriptions en todas las páginas',\r\n        'Optimizar longitud de title tags',\r\n        'Agregar Schema.org markup'\r\n      ]\r\n    };\r\n\r\n    // Ejecutar tests para cada URL\r\n    for (const url of urls) {\r\n      const testResults = await testingSuite.runComprehensiveTest(url);\r\n      reportData.testResults[url] = testResults;\r\n    }\r\n\r\n    return reportData;\r\n\r\n  } catch (error) {\r\n    console.error('Error generando reporte de auditoría:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateKeywordsReport(analyticsManager: SEOAnalyticsManager, request: ReportRequest) {\r\n  try {\r\n    const reportData = {\r\n      summary: {\r\n        totalKeywords: 150,\r\n        topPositions: 25,\r\n        averagePosition: 3.2,\r\n        totalImpressions: 125000,\r\n        totalClicks: 3200\r\n      },\r\n      topKeywords: [\r\n        { keyword: 'pintura interior', position: 2.1, impressions: 15000, clicks: 450 },\r\n        { keyword: 'pintura exterior', position: 3.5, impressions: 12000, clicks: 320 },\r\n        { keyword: 'esmalte sintético', position: 1.8, impressions: 8500, clicks: 380 }\r\n      ],\r\n      opportunities: [\r\n        'Optimizar para \"pintura acrílica\" (posición 4.2)',\r\n        'Crear contenido para \"barniz madera\" (posición 2.9)',\r\n        'Mejorar CTR para \"pintura exterior\"'\r\n      ]\r\n    };\r\n\r\n    return reportData;\r\n\r\n  } catch (error) {\r\n    console.error('Error generando reporte de keywords:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateTechnicalReport(\r\n  testingSuite: SEOTestingSuite, \r\n  sitemapGenerator: DynamicSitemapGenerator, \r\n  request: ReportRequest\r\n) {\r\n  try {\r\n    const sitemapStats = await sitemapGenerator.getGenerationStatistics();\r\n    \r\n    const reportData = {\r\n      sitemap: {\r\n        totalUrls: sitemapStats.totalUrls,\r\n        lastGenerated: sitemapStats.lastGenerated,\r\n        errors: sitemapStats.errors,\r\n        fileSize: '2.4 MB'\r\n      },\r\n      technical: {\r\n        httpsEnabled: true,\r\n        robotsTxtValid: true,\r\n        canonicalTags: 95,\r\n        metaRobots: 98,\r\n        structuredData: 75\r\n      },\r\n      performance: {\r\n        averageLoadTime: 2.1,\r\n        mobileOptimized: 92,\r\n        coreWebVitals: {\r\n          lcp: 2.1,\r\n          fid: 85,\r\n          cls: 0.08\r\n        }\r\n      },\r\n      issues: [\r\n        'Algunas páginas sin canonical tags',\r\n        'Structured data faltante en productos',\r\n        'Optimizar imágenes para mejor rendimiento'\r\n      ]\r\n    };\r\n\r\n    return reportData;\r\n\r\n  } catch (error) {\r\n    console.error('Error generando reporte técnico:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateMockReportData(reportId: string) {\r\n  // Datos mock para el reporte\r\n  return {\r\n    id: reportId,\r\n    title: 'Reporte SEO Detallado',\r\n    summary: {\r\n      overallScore: 85,\r\n      totalPages: 1247,\r\n      organicTraffic: 8920,\r\n      averagePosition: 3.2\r\n    },\r\n    sections: {\r\n      analytics: {\r\n        pageViews: 45230,\r\n        uniqueVisitors: 12450,\r\n        bounceRate: 42.3,\r\n        avgSessionDuration: 185\r\n      },\r\n      keywords: {\r\n        totalKeywords: 150,\r\n        topPositions: 25,\r\n        averagePosition: 3.2\r\n      },\r\n      technical: {\r\n        sitemapUrls: 1247,\r\n        indexedPages: 1180,\r\n        errors: 2,\r\n        warnings: 5\r\n      }\r\n    },\r\n    recommendations: [\r\n      'Optimizar meta descriptions',\r\n      'Mejorar velocidad de carga',\r\n      'Implementar structured data'\r\n    ]\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}