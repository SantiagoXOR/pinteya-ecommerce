{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useTrendingSearches.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useTrendingSearches - B√∫squedas populares/trending\r\n// ===================================\r\n\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { searchQueryKeys } from '@/lib/query-client';\r\nimport { TrendingSearch, TrendingSearchesResponse } from '@/app/api/search/trending/route';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\nexport interface UseTrendingSearchesOptions {\r\n  /** N√∫mero m√°ximo de b√∫squedas trending a obtener */\r\n  limit?: number;\r\n  /** N√∫mero de d√≠as hacia atr√°s para calcular trending */\r\n  days?: number;\r\n  /** Filtrar por categor√≠a espec√≠fica */\r\n  category?: string;\r\n  /** Habilitar/deshabilitar la query */\r\n  enabled?: boolean;\r\n  /** Intervalo de refetch en milisegundos */\r\n  refetchInterval?: number;\r\n}\r\n\r\nexport interface UseTrendingSearchesReturn {\r\n  /** B√∫squedas trending */\r\n  trendingSearches: TrendingSearch[];\r\n  /** Indica si est√° cargando */\r\n  isLoading: boolean;\r\n  /** Indica si hay un error */\r\n  error: Error | null;\r\n  /** Funci√≥n para refrescar los datos */\r\n  refetch: () => void;\r\n  /** Indica si los datos est√°n obsoletos */\r\n  isStale: boolean;\r\n  /** Timestamp de la √∫ltima actualizaci√≥n */\r\n  lastUpdated: string | null;\r\n  /** Funci√≥n para registrar una b√∫squeda */\r\n  trackSearch: (query: string, category?: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Hook para obtener b√∫squedas trending/populares\r\n * \r\n * Obtiene las b√∫squedas m√°s populares basadas en datos reales del sistema\r\n * de analytics, con fallback a datos por defecto.\r\n */\r\nexport function useTrendingSearches(options: UseTrendingSearchesOptions = {}): UseTrendingSearchesReturn {\r\n  const {\r\n    limit = 6,\r\n    days = 7,\r\n    category,\r\n    enabled = true,\r\n    refetchInterval = 5 * 60 * 1000, // 5 minutos\r\n  } = options;\r\n\r\n  // Query para obtener b√∫squedas trending\r\n  const {\r\n    data,\r\n    isLoading,\r\n    error,\r\n    refetch,\r\n    isStale,\r\n  } = useQuery({\r\n    queryKey: [...searchQueryKeys.trending(), 'params', { limit, days, category }],\r\n    queryFn: async (): Promise<TrendingSearchesResponse> => {\r\n      console.log('üî• useTrendingSearches: Iniciando fetch de trending searches', {\r\n        limit,\r\n        days,\r\n        category,\r\n        enabled\r\n      });\r\n\r\n      const params = new URLSearchParams();\r\n      params.set('limit', limit.toString());\r\n      params.set('days', days.toString());\r\n      \r\n      if (category) {\r\n        params.set('category', category);\r\n      }\r\n\r\n      const url = `/api/search/trending?${params.toString()}`;\r\n      console.log('üî• useTrendingSearches: URL construida:', url);\r\n\r\n      try {\r\n        const response = await fetch(url);\r\n        console.log('üî• useTrendingSearches: Response status:', response.status);\r\n        \r\n        if (!response.ok) {\r\n          console.error('üî• useTrendingSearches: Response not OK:', response.status, response.statusText);\r\n          throw new Error(`Error fetching trending searches: ${response.status}`);\r\n        }\r\n\r\n        const result: ApiResponse<TrendingSearchesResponse> = await response.json();\r\n        console.log('üî• useTrendingSearches: Raw API response:', result);\r\n        \r\n        if (!result.success || !result.data) {\r\n          console.error('üî• useTrendingSearches: API response error:', result.error);\r\n          throw new Error(result.error || 'Error obteniendo b√∫squedas trending');\r\n        }\r\n\r\n        console.log('‚úÖ useTrendingSearches: Trending searches fetched successfully', {\r\n          count: result.data.trending.length,\r\n          lastUpdated: result.data.lastUpdated,\r\n          data: result.data.trending\r\n        });\r\n\r\n        return result.data;\r\n      } catch (fetchError) {\r\n        console.error('üî• useTrendingSearches: Fetch error:', fetchError);\r\n        throw fetchError;\r\n      }\r\n    },\r\n    enabled,\r\n    refetchInterval,\r\n    staleTime: 2 * 60 * 1000, // 2 minutos\r\n    gcTime: 10 * 60 * 1000, // 10 minutos\r\n    retry: 2,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n  });\r\n\r\n  // Funci√≥n para registrar una b√∫squeda en analytics\r\n  const trackSearch = async (query: string, searchCategory?: string): Promise<void> => {\r\n    try {\r\n\r\n      const response = await fetch('/api/search/trending', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          query: query.trim(),\r\n          category: searchCategory,\r\n          userId: null, // Se puede obtener del contexto de auth si est√° disponible\r\n          sessionId: `session-${Date.now()}`, // Generar session ID simple\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.warn('‚ö†Ô∏è Error tracking search:', response.status);\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Error tracking search:', error);\r\n      // No lanzar error para no interrumpir la experiencia del usuario\r\n    }\r\n  };\r\n\r\n  const result = {\r\n    trendingSearches: data?.trending || [],\r\n    isLoading,\r\n    error: error as Error | null,\r\n    refetch,\r\n    isStale,\r\n    lastUpdated: data?.lastUpdated || null,\r\n    trackSearch,\r\n  };\r\n\r\n  console.log('üî• useTrendingSearches: Hook result:', {\r\n    trendingSearchesCount: result.trendingSearches.length,\r\n    isLoading: result.isLoading,\r\n    error: result.error,\r\n    data: data,\r\n    rawTrending: data?.trending,\r\n    enabled\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Hook simplificado para obtener solo las b√∫squedas trending\r\n */\r\nexport function useTrendingSearchesSimple(limit: number = 6): TrendingSearch[] {\r\n  const { trendingSearches } = useTrendingSearches({ limit });\r\n  return trendingSearches;\r\n}\r\n\r\n/**\r\n * Hook para obtener b√∫squedas trending por categor√≠a\r\n */\r\nexport function useTrendingSearchesByCategory(category: string, limit: number = 4): TrendingSearch[] {\r\n  const { trendingSearches } = useTrendingSearches({ \r\n    category, \r\n    limit,\r\n    refetchInterval: 10 * 60 * 1000 // 10 minutos para categor√≠as espec√≠ficas\r\n  });\r\n  return trendingSearches;\r\n}\r\n\r\nexport default useTrendingSearches;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useTrendingSearches","useTrendingSearchesByCategory","useTrendingSearchesSimple","options","limit","days","category","enabled","refetchInterval","data","isLoading","error","refetch","isStale","useQuery","queryKey","searchQueryKeys","trending","queryFn","console","log","params","URLSearchParams","set","toString","url","response","fetch","status","ok","statusText","Error","result","json","success","count","length","lastUpdated","fetchError","staleTime","gcTime","retry","retryDelay","attemptIndex","Math","min","trackSearch","query","searchCategory","method","headers","body","JSON","stringify","trim","userId","sessionId","Date","now","warn","trendingSearches","trendingSearchesCount","rawTrending"],"mappings":"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"}