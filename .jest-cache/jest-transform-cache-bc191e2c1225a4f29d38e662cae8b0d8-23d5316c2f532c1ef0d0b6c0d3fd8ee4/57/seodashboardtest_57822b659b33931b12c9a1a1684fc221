c599bfb98b5336d6590e1b4839facb06
// ===================================
// PINTEYA E-COMMERCE - SEO DASHBOARD TESTS
// Tests completos para el dashboard administrativo SEO
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
require("@testing-library/jest-dom");
const _page = /*#__PURE__*/ _interop_require_default(require("../../../src/app/admin/seo/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock de Next.js
_globals.jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: _globals.jest.fn(),
                back: _globals.jest.fn(),
                forward: _globals.jest.fn(),
                refresh: _globals.jest.fn()
            }),
        useSearchParams: ()=>new URLSearchParams(),
        usePathname: ()=>'/admin/seo'
    }));
// Mock de Clerk
_globals.jest.mock('@clerk/nextjs', ()=>({
        useAuth: ()=>({
                isLoaded: true,
                userId: 'test-user-id',
                sessionId: 'test-session-id',
                getToken: _globals.jest.fn().mockResolvedValue('test-token')
            }),
        useUser: ()=>({
                isLoaded: true,
                user: {
                    id: 'test-user-id',
                    emailAddresses: [
                        {
                            emailAddress: 'admin@pinteya.com'
                        }
                    ]
                }
            })
    }));
// Mock de componentes UI
_globals.jest.mock('@/components/ui/card', ()=>({
        Card: ({ children, className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: className,
                children: children
            }),
        CardContent: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        CardDescription: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        CardHeader: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        CardTitle: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: children
            })
    }));
_globals.jest.mock('@/components/ui/button', ()=>({
        Button: ({ children, onClick, disabled, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onClick,
                disabled: disabled,
                ...props,
                children: children
            })
    }));
_globals.jest.mock('@/components/ui/badge', ()=>({
        Badge: ({ children, className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: className,
                children: children
            })
    }));
_globals.jest.mock('@/components/ui/progress', ()=>({
        Progress: ({ value })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "progress",
                "data-value": value
            })
    }));
_globals.jest.mock('@/components/ui/alert', ()=>({
        Alert: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                role: "alert",
                children: children
            }),
        AlertDescription: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            })
    }));
_globals.jest.mock('@/components/admin/layout/AdminLayout', ()=>({
        AdminLayout: ({ children, title, actions })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                        children: title
                    }),
                    actions && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "actions",
                        children: actions
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("main", {
                        children: children
                    })
                ]
            })
    }));
// Mock de APIs
global.fetch = _globals.jest.fn();
// ===================================
// DATOS DE PRUEBA
// ===================================
const mockOverviewData = {
    overallScore: 85,
    totalPages: 1247,
    indexedPages: 1180,
    organicTraffic: 8920,
    avgPosition: 3.2,
    ctr: 2.56,
    coreWebVitals: {
        lcp: 2.1,
        fid: 85,
        cls: 0.08,
        fcp: 1.8,
        ttfb: 420,
        inp: 180
    },
    recentTests: {
        total: 24,
        passed: 18,
        failed: 3,
        warnings: 3
    },
    sitemapStatus: {
        totalUrls: 1247,
        lastGenerated: new Date().toISOString(),
        errors: 2
    },
    optimizationStatus: {
        activeTools: 4,
        improvements: 12,
        issues: 5
    }
};
const mockAlerts = [
    {
        id: 'alert_1',
        type: 'warning',
        title: 'Meta Description Faltante',
        message: 'Se detectaron 5 páginas sin meta description',
        timestamp: new Date().toISOString(),
        url: '/products/pintura-interior',
        action: {
            label: 'Revisar',
            href: '/admin/seo/testing'
        }
    },
    {
        id: 'alert_2',
        type: 'error',
        title: 'Error en Sitemap',
        message: 'El sitemap contiene URLs inválidas',
        timestamp: new Date().toISOString(),
        action: {
            label: 'Corregir',
            href: '/admin/seo/sitemap'
        }
    }
];
// ===================================
// SETUP Y HELPERS
// ===================================
const mockFetch = (data, status = 200)=>{
    global.fetch.mockResolvedValueOnce({
        ok: status >= 200 && status < 300,
        status,
        json: async ()=>({
                success: true,
                data
            })
    });
};
const renderDashboard = ()=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
};
// ===================================
// TESTS PRINCIPALES
// ===================================
describe('SEO Admin Dashboard', ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        // Mock inicial para cargar datos
        mockFetch(mockOverviewData);
        mockFetch(mockAlerts);
    });
    // ===================================
    // TESTS DE RENDERIZADO
    // ===================================
    describe('Renderizado Inicial', ()=>{
        test('debe renderizar el título del dashboard', async ()=>{
            renderDashboard();
            expect(_react1.screen.getByText('SEO Dashboard')).toBeInTheDocument();
        });
        test('debe mostrar estado de carga inicial', ()=>{
            renderDashboard();
            // Verificar que se muestran skeletons de carga
            const loadingCards = _react1.screen.getAllByText('Cargando...');
            expect(loadingCards.length).toBeGreaterThan(0);
        });
        test('debe cargar y mostrar métricas principales', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('85')).toBeInTheDocument(); // Overall Score
                expect(_react1.screen.getByText('8,920')).toBeInTheDocument(); // Organic Traffic
                expect(_react1.screen.getByText('3.2')).toBeInTheDocument(); // Avg Position
            });
        });
    });
    // ===================================
    // TESTS DE MÉTRICAS
    // ===================================
    describe('Métricas del Dashboard', ()=>{
        test('debe mostrar todas las métricas principales', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                // Verificar métricas clave
                expect(_react1.screen.getByText('SEO Score General')).toBeInTheDocument();
                expect(_react1.screen.getByText('Tráfico Orgánico')).toBeInTheDocument();
                expect(_react1.screen.getByText('Posición Promedio')).toBeInTheDocument();
                expect(_react1.screen.getByText('CTR Promedio')).toBeInTheDocument();
            });
        });
        test('debe mostrar Core Web Vitals correctamente', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Core Web Vitals')).toBeInTheDocument();
                expect(_react1.screen.getByText('2.1s')).toBeInTheDocument(); // LCP
                expect(_react1.screen.getByText('85ms')).toBeInTheDocument(); // FID
                expect(_react1.screen.getByText('0.08')).toBeInTheDocument(); // CLS
            });
        });
        test('debe mostrar progreso con barras de progreso', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                const progressBars = _react1.screen.getAllByTestId('progress');
                expect(progressBars.length).toBeGreaterThan(0);
                // Verificar que tienen valores
                progressBars.forEach((bar)=>{
                    expect(bar).toHaveAttribute('data-value');
                });
            });
        });
    });
    // ===================================
    // TESTS DE ALERTAS
    // ===================================
    describe('Sistema de Alertas', ()=>{
        test('debe mostrar alertas activas', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Meta Description Faltante')).toBeInTheDocument();
                expect(_react1.screen.getByText('Error en Sitemap')).toBeInTheDocument();
            });
        });
        test('debe mostrar diferentes tipos de alertas', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                // Verificar que se muestran alertas de warning y error
                expect(_react1.screen.getByText('Se detectaron 5 páginas sin meta description')).toBeInTheDocument();
                expect(_react1.screen.getByText('El sitemap contiene URLs inválidas')).toBeInTheDocument();
            });
        });
        test('debe permitir descartar alertas', async ()=>{
            mockFetch({
                success: true
            }); // Mock para dismiss alert
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                const dismissButtons = _react1.screen.getAllByText('×');
                expect(dismissButtons.length).toBeGreaterThan(0);
            });
            // Simular click en descartar
            const dismissButton = _react1.screen.getAllByText('×')[0];
            _react1.fireEvent.click(dismissButton);
            await (0, _react1.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining('/api/admin/seo/dashboard'), expect.objectContaining({
                    method: 'POST',
                    body: expect.stringContaining('dismiss-alert')
                }));
            });
        });
    });
    // ===================================
    // TESTS DE ACCIONES RÁPIDAS
    // ===================================
    describe('Acciones Rápidas', ()=>{
        test('debe mostrar botones de acciones rápidas', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Ejecutar Auditoría')).toBeInTheDocument();
                expect(_react1.screen.getByText('Generar Reporte')).toBeInTheDocument();
                expect(_react1.screen.getByText('Optimizar Contenido')).toBeInTheDocument();
                expect(_react1.screen.getByText('Actualizar Sitemap')).toBeInTheDocument();
            });
        });
        test('debe ejecutar auditoría rápida', async ()=>{
            mockFetch({
                success: true,
                data: {
                    score: 88
                }
            }); // Mock para quick audit
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                const auditButton = _react1.screen.getByText('Ejecutar Auditoría');
                _react1.fireEvent.click(auditButton);
            });
            await (0, _react1.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining('/api/admin/seo/dashboard'), expect.objectContaining({
                    method: 'POST',
                    body: expect.stringContaining('run-quick-audit')
                }));
            });
        });
        test('debe actualizar datos del dashboard', async ()=>{
            mockFetch({
                success: true
            }); // Mock para refresh
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                const refreshButton = _react1.screen.getByText('Actualizar');
                _react1.fireEvent.click(refreshButton);
            });
            await (0, _react1.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining('/api/admin/seo/dashboard?type=overview'));
            });
        });
    });
    // ===================================
    // TESTS DE NAVEGACIÓN
    // ===================================
    describe('Navegación', ()=>{
        test('debe mostrar enlaces a secciones especializadas', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Ver Analytics Detallado')).toBeInTheDocument();
                expect(_react1.screen.getByText('Gestionar Tests')).toBeInTheDocument();
                expect(_react1.screen.getByText('Herramientas de Optimización')).toBeInTheDocument();
                expect(_react1.screen.getByText('Gestionar Sitemap')).toBeInTheDocument();
            });
        });
        test('debe tener breadcrumbs correctos', ()=>{
            renderDashboard();
            // Verificar que AdminLayout recibe breadcrumbs
            expect(_react1.screen.getByText('SEO Dashboard')).toBeInTheDocument();
        });
    });
    // ===================================
    // TESTS DE ESTADO DE SISTEMAS
    // ===================================
    describe('Estado de Sistemas', ()=>{
        test('debe mostrar estado de testing', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Tests Recientes')).toBeInTheDocument();
                expect(_react1.screen.getByText('18 passed')).toBeInTheDocument();
                expect(_react1.screen.getByText('3 failed')).toBeInTheDocument();
                expect(_react1.screen.getByText('3 warnings')).toBeInTheDocument();
            });
        });
        test('debe mostrar estado del sitemap', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Estado del Sitemap')).toBeInTheDocument();
                expect(_react1.screen.getByText('1,247 URLs')).toBeInTheDocument();
                expect(_react1.screen.getByText('2 errores')).toBeInTheDocument();
            });
        });
        test('debe mostrar estado de optimización', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Herramientas de Optimización')).toBeInTheDocument();
                expect(_react1.screen.getByText('4 activas')).toBeInTheDocument();
                expect(_react1.screen.getByText('12 mejoras')).toBeInTheDocument();
                expect(_react1.screen.getByText('5 issues')).toBeInTheDocument();
            });
        });
    });
    // ===================================
    // TESTS DE MANEJO DE ERRORES
    // ===================================
    describe('Manejo de Errores', ()=>{
        test('debe manejar errores de API gracefully', async ()=>{
            global.fetch.mockRejectedValueOnce(new Error('API Error'));
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/Error cargando datos/)).toBeInTheDocument();
            });
        });
        test('debe mostrar mensaje cuando no hay datos', async ()=>{
            mockFetch(null);
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/No hay datos disponibles/)).toBeInTheDocument();
            });
        });
        test('debe deshabilitar botones durante carga', async ()=>{
            renderDashboard();
            // Los botones deben estar deshabilitados durante la carga inicial
            const buttons = _react1.screen.getAllByRole('button');
            buttons.forEach((button)=>{
                if (button.textContent?.includes('Ejecutar') || button.textContent?.includes('Generar')) {
                    expect(button).toBeDisabled();
                }
            });
        });
    });
    // ===================================
    // TESTS DE PERFORMANCE
    // ===================================
    describe('Performance', ()=>{
        test('debe cargar datos de forma eficiente', async ()=>{
            const startTime = Date.now();
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('85')).toBeInTheDocument();
            });
            const loadTime = Date.now() - startTime;
            expect(loadTime).toBeLessThan(5000); // Debe cargar en menos de 5 segundos
        });
        test('debe usar caché para evitar llamadas redundantes', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('85')).toBeInTheDocument();
            });
            // Verificar que no se hacen llamadas adicionales innecesarias
            const fetchCalls = global.fetch.mock.calls.length;
            expect(fetchCalls).toBeLessThanOrEqual(3); // Overview + Alerts + posible refresh
        });
    });
    // ===================================
    // TESTS DE ACCESIBILIDAD
    // ===================================
    describe('Accesibilidad', ()=>{
        test('debe tener estructura semántica correcta', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                // Verificar headings
                expect(_react1.screen.getByRole('heading', {
                    level: 1
                })).toBeInTheDocument();
                // Verificar que las alertas tienen role="alert"
                const alerts = _react1.screen.getAllByRole('alert');
                expect(alerts.length).toBeGreaterThan(0);
            });
        });
        test('debe ser navegable por teclado', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                const buttons = _react1.screen.getAllByRole('button');
                buttons.forEach((button)=>{
                    expect(button).toHaveAttribute('tabIndex');
                });
            });
        });
        test('debe tener textos alternativos para elementos visuales', async ()=>{
            renderDashboard();
            await (0, _react1.waitFor)(()=>{
                // Verificar que los iconos tienen labels apropiados
                const progressBars = _react1.screen.getAllByTestId('progress');
                progressBars.forEach((bar)=>{
                    expect(bar).toHaveAttribute('data-value');
                });
            });
        });
    });
});
// ===================================
// TESTS DE INTEGRACIÓN
// ===================================
describe('Integración SEO Dashboard', ()=>{
    test('debe integrar correctamente con todos los managers SEO', async ()=>{
        renderDashboard();
        await (0, _react1.waitFor)(()=>{
            // Verificar que se muestran datos de todos los sistemas
            expect(_react1.screen.getByText('SEO Score General')).toBeInTheDocument();
            expect(_react1.screen.getByText('Tests Recientes')).toBeInTheDocument();
            expect(_react1.screen.getByText('Estado del Sitemap')).toBeInTheDocument();
            expect(_react1.screen.getByText('Herramientas de Optimización')).toBeInTheDocument();
        });
    });
    test('debe actualizar datos en tiempo real', async ()=>{
        renderDashboard();
        // Simular actualización de datos
        mockFetch({
            ...mockOverviewData,
            overallScore: 90 // Score actualizado
        });
        const refreshButton = _react1.screen.getByText('Actualizar');
        _react1.fireEvent.click(refreshButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('90')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,