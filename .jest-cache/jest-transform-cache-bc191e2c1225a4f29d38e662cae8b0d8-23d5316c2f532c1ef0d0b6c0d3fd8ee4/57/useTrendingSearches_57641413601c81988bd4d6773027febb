38ce573af85d7596b48834ece8d445e9
// ===================================
// HOOK: useTrendingSearches - B√∫squedas populares/trending
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useTrendingSearches () {
        return useTrendingSearches;
    },
    get useTrendingSearchesByCategory () {
        return useTrendingSearchesByCategory;
    },
    get useTrendingSearchesSimple () {
        return useTrendingSearchesSimple;
    }
});
const _reactquery = require("@tanstack/react-query");
const _queryclient = require("../lib/query-client");
function useTrendingSearches(options = {}) {
    const { limit = 6, days = 7, category, enabled = true, refetchInterval = 5 * 60 * 1000 } = options;
    // Query para obtener b√∫squedas trending
    const { data, isLoading, error, refetch, isStale } = (0, _reactquery.useQuery)({
        queryKey: [
            ..._queryclient.searchQueryKeys.trending(),
            'params',
            {
                limit,
                days,
                category
            }
        ],
        queryFn: async ()=>{
            console.log('üî• useTrendingSearches: Iniciando fetch de trending searches', {
                limit,
                days,
                category,
                enabled
            });
            const params = new URLSearchParams();
            params.set('limit', limit.toString());
            params.set('days', days.toString());
            if (category) {
                params.set('category', category);
            }
            const url = `/api/search/trending?${params.toString()}`;
            console.log('üî• useTrendingSearches: URL construida:', url);
            try {
                const response = await fetch(url);
                console.log('üî• useTrendingSearches: Response status:', response.status);
                if (!response.ok) {
                    console.error('üî• useTrendingSearches: Response not OK:', response.status, response.statusText);
                    throw new Error(`Error fetching trending searches: ${response.status}`);
                }
                const result = await response.json();
                console.log('üî• useTrendingSearches: Raw API response:', result);
                if (!result.success || !result.data) {
                    console.error('üî• useTrendingSearches: API response error:', result.error);
                    throw new Error(result.error || 'Error obteniendo b√∫squedas trending');
                }
                console.log('‚úÖ useTrendingSearches: Trending searches fetched successfully', {
                    count: result.data.trending.length,
                    lastUpdated: result.data.lastUpdated,
                    data: result.data.trending
                });
                return result.data;
            } catch (fetchError) {
                console.error('üî• useTrendingSearches: Fetch error:', fetchError);
                throw fetchError;
            }
        },
        enabled,
        refetchInterval,
        staleTime: 2 * 60 * 1000,
        gcTime: 10 * 60 * 1000,
        retry: 2,
        retryDelay: (attemptIndex)=>Math.min(1000 * 2 ** attemptIndex, 30000)
    });
    // Funci√≥n para registrar una b√∫squeda en analytics
    const trackSearch = async (query, searchCategory)=>{
        try {
            const response = await fetch('/api/search/trending', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    query: query.trim(),
                    category: searchCategory,
                    userId: null,
                    sessionId: `session-${Date.now()}`
                })
            });
            if (!response.ok) {
                console.warn('‚ö†Ô∏è Error tracking search:', response.status);
            } else {}
        } catch (error) {
            console.warn('‚ö†Ô∏è Error tracking search:', error);
        // No lanzar error para no interrumpir la experiencia del usuario
        }
    };
    const result = {
        trendingSearches: data?.trending || [],
        isLoading,
        error: error,
        refetch,
        isStale,
        lastUpdated: data?.lastUpdated || null,
        trackSearch
    };
    console.log('üî• useTrendingSearches: Hook result:', {
        trendingSearchesCount: result.trendingSearches.length,
        isLoading: result.isLoading,
        error: result.error,
        data: data,
        rawTrending: data?.trending,
        enabled
    });
    return result;
}
function useTrendingSearchesSimple(limit = 6) {
    const { trendingSearches } = useTrendingSearches({
        limit
    });
    return trendingSearches;
}
function useTrendingSearchesByCategory(category, limit = 4) {
    const { trendingSearches } = useTrendingSearches({
        category,
        limit,
        refetchInterval: 10 * 60 * 1000 // 10 minutos para categor√≠as espec√≠ficas
    });
    return trendingSearches;
}
const _default = useTrendingSearches;

//# sourceMappingURL=data:application/json;base64,