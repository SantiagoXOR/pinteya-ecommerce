{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\health-checks.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE HEALTH CHECKS SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { CacheUtils } from '@/lib/cache-manager';\r\nimport { \r\n  mercadoPagoCriticalBreaker, \r\n  mercadoPagoStandardBreaker, \r\n  webhookProcessingBreaker \r\n} from '@/lib/integrations/mercadopago/circuit-breaker';\r\nimport { recordPerformanceMetric, recordSecurityMetric } from './enterprise-metrics';\r\n\r\n// Estados de salud\r\nexport enum HealthStatus {\r\n  HEALTHY = 'healthy',\r\n  DEGRADED = 'degraded',\r\n  UNHEALTHY = 'unhealthy',\r\n  UNKNOWN = 'unknown'\r\n}\r\n\r\n// Severidad de problemas\r\nexport enum HealthSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n// Resultado de health check\r\nexport interface HealthCheckResult {\r\n  service: string;\r\n  status: HealthStatus;\r\n  severity: HealthSeverity;\r\n  responseTime: number;\r\n  message: string;\r\n  details: Record<string, any>;\r\n  lastChecked: string;\r\n  nextCheck?: string;\r\n  recommendations?: string[];\r\n  metrics?: Record<string, number>;\r\n}\r\n\r\n// Configuración de health check\r\nexport interface HealthCheckConfig {\r\n  service: string;\r\n  enabled: boolean;\r\n  interval: number; // segundos\r\n  timeout: number; // segundos\r\n  retries: number;\r\n  thresholds: {\r\n    responseTime: {\r\n      warning: number;\r\n      critical: number;\r\n    };\r\n    errorRate: {\r\n      warning: number;\r\n      critical: number;\r\n    };\r\n  };\r\n  dependencies: string[];\r\n  autoRecover: boolean;\r\n  notifications: string[];\r\n}\r\n\r\n// Acción de recuperación\r\nexport interface RecoveryAction {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  service: string;\r\n  enabled: boolean;\r\n  automatic: boolean;\r\n  cooldownMinutes: number;\r\n  maxRetries: number;\r\n  action: (config?: any) => Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Sistema Enterprise de Health Checks\r\n */\r\nexport class EnterpriseHealthSystem {\r\n  private static instance: EnterpriseHealthSystem;\r\n  private healthChecks: Map<string, HealthCheckConfig> = new Map();\r\n  private recoveryActions: Map<string, RecoveryAction> = new Map();\r\n  private lastResults: Map<string, HealthCheckResult> = new Map();\r\n  private checkIntervals: Map<string, NodeJS.Timeout> = new Map();\r\n  private recoveryAttempts: Map<string, { count: number; lastAttempt: Date }> = new Map();\r\n\r\n  constructor() {\r\n    this.initializeDefaultChecks();\r\n    this.initializeRecoveryActions();\r\n  }\r\n\r\n  static getInstance(): EnterpriseHealthSystem {\r\n    if (!EnterpriseHealthSystem.instance) {\r\n      EnterpriseHealthSystem.instance = new EnterpriseHealthSystem();\r\n    }\r\n    return EnterpriseHealthSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra un health check\r\n   */\r\n  registerHealthCheck(config: HealthCheckConfig): void {\r\n    this.healthChecks.set(config.service, config);\r\n    \r\n    if (config.enabled && config.interval > 0) {\r\n      this.scheduleHealthCheck(config);\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, `Health check registered: ${config.service}`, {\r\n      interval: config.interval,\r\n      enabled: config.enabled,\r\n      autoRecover: config.autoRecover\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Registra una acción de recuperación\r\n   */\r\n  registerRecoveryAction(action: RecoveryAction): void {\r\n    this.recoveryActions.set(action.id, action);\r\n    \r\n    logger.info(LogLevel.INFO, `Recovery action registered: ${action.id}`, {\r\n      service: action.service,\r\n      automatic: action.automatic,\r\n      enabled: action.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Ejecuta health check específico\r\n   */\r\n  async runHealthCheck(service: string): Promise<HealthCheckResult> {\r\n    const config = this.healthChecks.get(service);\r\n    if (!config) {\r\n      throw new Error(`Health check not configured for service: ${service}`);\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    let result: HealthCheckResult;\r\n\r\n    try {\r\n      result = await this.executeHealthCheck(service, config);\r\n    } catch (error) {\r\n      result = {\r\n        service,\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    // Almacenar resultado\r\n    this.lastResults.set(service, result);\r\n\r\n    // Registrar métricas\r\n    await this.recordHealthMetrics(result);\r\n\r\n    // Verificar si necesita recuperación automática\r\n    if (result.status === HealthStatus.UNHEALTHY && config.autoRecover) {\r\n      await this.attemptAutoRecovery(service, result);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todos los health checks\r\n   */\r\n  async runAllHealthChecks(): Promise<HealthCheckResult[]> {\r\n    const results: HealthCheckResult[] = [];\r\n    \r\n    for (const [service, config] of this.healthChecks.entries()) {\r\n      if (config.enabled) {\r\n        try {\r\n          const result = await this.runHealthCheck(service);\r\n          results.push(result);\r\n        } catch (error) {\r\n          logger.error(LogLevel.ERROR, `Failed to run health check for ${service}`, {\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          }, LogCategory.SYSTEM);\r\n        }\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado general del sistema\r\n   */\r\n  getSystemHealth(): {\r\n    overall: HealthStatus;\r\n    services: HealthCheckResult[];\r\n    summary: Record<HealthStatus, number>;\r\n    lastUpdated: string;\r\n  } {\r\n    const services = Array.from(this.lastResults.values());\r\n    \r\n    const summary = {\r\n      [HealthStatus.HEALTHY]: 0,\r\n      [HealthStatus.DEGRADED]: 0,\r\n      [HealthStatus.UNHEALTHY]: 0,\r\n      [HealthStatus.UNKNOWN]: 0\r\n    };\r\n\r\n    services.forEach(service => {\r\n      summary[service.status]++;\r\n    });\r\n\r\n    // Determinar estado general\r\n    let overall = HealthStatus.HEALTHY;\r\n    if (summary[HealthStatus.UNHEALTHY] > 0) {\r\n      overall = HealthStatus.UNHEALTHY;\r\n    } else if (summary[HealthStatus.DEGRADED] > 0) {\r\n      overall = HealthStatus.DEGRADED;\r\n    } else if (summary[HealthStatus.UNKNOWN] > 0) {\r\n      overall = HealthStatus.UNKNOWN;\r\n    }\r\n\r\n    return {\r\n      overall,\r\n      services,\r\n      summary,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ejecuta acción de recuperación manual\r\n   */\r\n  async executeRecoveryAction(actionId: string, config?: any): Promise<boolean> {\r\n    const action = this.recoveryActions.get(actionId);\r\n    if (!action) {\r\n      throw new Error(`Recovery action not found: ${actionId}`);\r\n    }\r\n\r\n    if (!action.enabled) {\r\n      throw new Error(`Recovery action disabled: ${actionId}`);\r\n    }\r\n\r\n    // Verificar cooldown\r\n    const attempts = this.recoveryAttempts.get(actionId);\r\n    if (attempts) {\r\n      const cooldownEnd = new Date(attempts.lastAttempt.getTime() + action.cooldownMinutes * 60 * 1000);\r\n      if (new Date() < cooldownEnd) {\r\n        throw new Error(`Recovery action in cooldown: ${actionId}`);\r\n      }\r\n\r\n      if (attempts.count >= action.maxRetries) {\r\n        throw new Error(`Recovery action max retries exceeded: ${actionId}`);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const success = await action.action(config);\r\n      \r\n      // Actualizar intentos\r\n      const currentAttempts = this.recoveryAttempts.get(actionId) || { count: 0, lastAttempt: new Date() };\r\n      this.recoveryAttempts.set(actionId, {\r\n        count: success ? 0 : currentAttempts.count + 1,\r\n        lastAttempt: new Date()\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, `Recovery action executed: ${actionId}`, {\r\n        success,\r\n        service: action.service,\r\n        automatic: false\r\n      }, LogCategory.SYSTEM);\r\n\r\n      return success;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Recovery action failed: ${actionId}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        service: action.service\r\n      }, LogCategory.SYSTEM);\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implementaciones de health checks específicos\r\n   */\r\n  private async executeHealthCheck(service: string, config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    switch (service) {\r\n      case 'database':\r\n        return await this.checkDatabaseHealth(config);\r\n      case 'cache':\r\n        return await this.checkCacheHealth(config);\r\n      case 'mercadopago':\r\n        return await this.checkMercadoPagoHealth(config);\r\n      case 'circuit_breakers':\r\n        return await this.checkCircuitBreakersHealth(config);\r\n      case 'external_apis':\r\n        return await this.checkExternalAPIsHealth(config);\r\n      case 'file_system':\r\n        return await this.checkFileSystemHealth(config);\r\n      default:\r\n        throw new Error(`Unknown health check service: ${service}`);\r\n    }\r\n  }\r\n\r\n  private async checkDatabaseHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {\r\n        throw new Error('Supabase client not available');\r\n      }\r\n\r\n      // Test de conectividad\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .select('id')\r\n        .limit(1);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Determinar estado basado en tiempo de respuesta\r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      \r\n      if (responseTime > config.thresholds.responseTime.critical) {\r\n        status = HealthStatus.UNHEALTHY;\r\n        severity = HealthSeverity.CRITICAL;\r\n      } else if (responseTime > config.thresholds.responseTime.warning) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n      }\r\n\r\n      return {\r\n        service: 'database',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message: `Database responding in ${responseTime}ms`,\r\n        details: {\r\n          recordsFound: data?.length || 0,\r\n          connectionPool: 'active',\r\n          queryType: 'SELECT'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          recordCount: data?.length || 0\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'database',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Database error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Check database connection',\r\n          'Verify Supabase credentials',\r\n          'Check network connectivity'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkCacheHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const testKey = `health_check_${Date.now()}`;\r\n      const testValue = { test: true, timestamp: Date.now() };\r\n\r\n      // Test write\r\n      await CacheUtils.set(testKey, testValue, 10);\r\n      \r\n      // Test read\r\n      const retrieved = await CacheUtils.get(testKey);\r\n      \r\n      if (!retrieved || retrieved.test !== true) {\r\n        throw new Error('Cache read/write test failed');\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      \r\n      if (responseTime > 500) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n      }\r\n\r\n      return {\r\n        service: 'cache',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message: `Cache responding in ${responseTime}ms`,\r\n        details: {\r\n          readWrite: 'success',\r\n          testKey,\r\n          provider: 'redis'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          operationsPerSecond: 1000 / responseTime\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'cache',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Cache error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Check Redis connection',\r\n          'Verify cache configuration',\r\n          'Check memory usage'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkMercadoPagoHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const publicKey = process.env.MERCADOPAGO_PUBLIC_KEY_PROD || process.env.MERCADOPAGO_PUBLIC_KEY_TEST;\r\n      const accessToken = process.env.MERCADOPAGO_ACCESS_TOKEN_PROD || process.env.MERCADOPAGO_ACCESS_TOKEN_TEST;\r\n\r\n      if (!publicKey || !accessToken) {\r\n        throw new Error('MercadoPago credentials not configured');\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      const environment = publicKey.includes('TEST') ? 'test' : 'production';\r\n\r\n      return {\r\n        service: 'mercadopago',\r\n        status: HealthStatus.HEALTHY,\r\n        severity: HealthSeverity.LOW,\r\n        responseTime,\r\n        message: `MercadoPago credentials configured for ${environment}`,\r\n        details: {\r\n          publicKeyConfigured: !!publicKey,\r\n          accessTokenConfigured: !!accessToken,\r\n          environment\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          configurationScore: 100\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'mercadopago',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `MercadoPago error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Configure MercadoPago credentials',\r\n          'Check environment variables',\r\n          'Verify API keys'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkCircuitBreakersHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const criticalState = mercadoPagoCriticalBreaker.getState();\r\n      const standardState = mercadoPagoStandardBreaker.getState();\r\n      const webhookState = webhookProcessingBreaker.getState();\r\n\r\n      const states = [criticalState, standardState, webhookState];\r\n      const openBreakers = states.filter(state => state === 'open').length;\r\n      const halfOpenBreakers = states.filter(state => state === 'half-open').length;\r\n\r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      let message = 'All circuit breakers operational';\r\n\r\n      if (openBreakers > 0) {\r\n        status = HealthStatus.UNHEALTHY;\r\n        severity = HealthSeverity.CRITICAL;\r\n        message = `${openBreakers} circuit breaker(s) open`;\r\n      } else if (halfOpenBreakers > 0) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n        message = `${halfOpenBreakers} circuit breaker(s) in recovery`;\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      return {\r\n        service: 'circuit_breakers',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message,\r\n        details: {\r\n          mercadopago_critical: criticalState,\r\n          mercadopago_standard: standardState,\r\n          webhook_processing: webhookState,\r\n          totalBreakers: 3,\r\n          openBreakers,\r\n          halfOpenBreakers\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          healthScore: ((3 - openBreakers) / 3) * 100,\r\n          openBreakers,\r\n          halfOpenBreakers\r\n        },\r\n        recommendations: openBreakers > 0 ? [\r\n          'Check service dependencies',\r\n          'Review error logs',\r\n          'Consider manual reset if appropriate'\r\n        ] : undefined\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'circuit_breakers',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Circuit breakers error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkExternalAPIsHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // Simulación de check de APIs externas\r\n    const responseTime = Date.now() - startTime + 150; // Simular latencia\r\n\r\n    return {\r\n      service: 'external_apis',\r\n      status: HealthStatus.HEALTHY,\r\n      severity: HealthSeverity.LOW,\r\n      responseTime,\r\n      message: 'External APIs responding normally',\r\n      details: {\r\n        checkedAPIs: ['mercadopago', 'vercel'],\r\n        successRate: 100\r\n      },\r\n      lastChecked: new Date().toISOString(),\r\n      nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n      metrics: {\r\n        responseTime,\r\n        successRate: 100\r\n      }\r\n    };\r\n  }\r\n\r\n  private async checkFileSystemHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Verificar espacio en disco y permisos básicos\r\n      const responseTime = Date.now() - startTime + 50;\r\n\r\n      return {\r\n        service: 'file_system',\r\n        status: HealthStatus.HEALTHY,\r\n        severity: HealthSeverity.LOW,\r\n        responseTime,\r\n        message: 'File system accessible',\r\n        details: {\r\n          diskSpace: 'sufficient',\r\n          permissions: 'ok'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          diskUsage: 65\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'file_system',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `File system error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Programa health check automático\r\n   */\r\n  private scheduleHealthCheck(config: HealthCheckConfig): void {\r\n    // Limpiar intervalo existente\r\n    const existingInterval = this.checkIntervals.get(config.service);\r\n    if (existingInterval) {\r\n      clearInterval(existingInterval);\r\n    }\r\n\r\n    // Programar nuevo intervalo\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.runHealthCheck(config.service);\r\n      } catch (error) {\r\n        logger.error(LogLevel.ERROR, `Scheduled health check failed: ${config.service}`, {\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    }, config.interval * 1000);\r\n\r\n    this.checkIntervals.set(config.service, interval);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de health check\r\n   */\r\n  private async recordHealthMetrics(result: HealthCheckResult): Promise<void> {\r\n    try {\r\n      // Registrar métricas de performance\r\n      await recordPerformanceMetric(\r\n        `health.${result.service}.response_time`,\r\n        result.responseTime,\r\n        true,\r\n        { service: result.service, status: result.status }\r\n      );\r\n\r\n      // Registrar métricas de disponibilidad\r\n      const availabilityScore = result.status === HealthStatus.HEALTHY ? 1 : 0;\r\n      await recordPerformanceMetric(\r\n        `health.${result.service}.availability`,\r\n        availabilityScore,\r\n        true,\r\n        { service: result.service, status: result.status }\r\n      );\r\n\r\n      // Registrar eventos de seguridad si hay problemas\r\n      if (result.status === HealthStatus.UNHEALTHY && result.severity === HealthSeverity.CRITICAL) {\r\n        await recordSecurityMetric(\r\n          'health_check_critical_failure',\r\n          'high',\r\n          { \r\n            service: result.service,\r\n            message: result.message,\r\n            severity: result.severity\r\n          }\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to record health metrics', {\r\n        service: result.service,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Intenta recuperación automática\r\n   */\r\n  private async attemptAutoRecovery(service: string, result: HealthCheckResult): Promise<void> {\r\n    const recoveryActions = Array.from(this.recoveryActions.values())\r\n      .filter(action => action.service === service && action.automatic && action.enabled);\r\n\r\n    for (const action of recoveryActions) {\r\n      try {\r\n        logger.info(LogLevel.INFO, `Attempting auto-recovery: ${action.id}`, {\r\n          service,\r\n          status: result.status,\r\n          severity: result.severity\r\n        }, LogCategory.SYSTEM);\r\n\r\n        const success = await this.executeRecoveryAction(action.id);\r\n        \r\n        if (success) {\r\n          logger.info(LogLevel.INFO, `Auto-recovery successful: ${action.id}`, {\r\n            service\r\n          }, LogCategory.SYSTEM);\r\n          break; // Salir si la recuperación fue exitosa\r\n        }\r\n\r\n      } catch (error) {\r\n        logger.error(LogLevel.ERROR, `Auto-recovery failed: ${action.id}`, {\r\n          service,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inicializa health checks por defecto\r\n   */\r\n  private initializeDefaultChecks(): void {\r\n    // Database health check\r\n    this.registerHealthCheck({\r\n      service: 'database',\r\n      enabled: true,\r\n      interval: 60, // 1 minuto\r\n      timeout: 5,\r\n      retries: 3,\r\n      thresholds: {\r\n        responseTime: { warning: 1000, critical: 3000 },\r\n        errorRate: { warning: 0.05, critical: 0.1 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // Cache health check\r\n    this.registerHealthCheck({\r\n      service: 'cache',\r\n      enabled: true,\r\n      interval: 30, // 30 segundos\r\n      timeout: 3,\r\n      retries: 2,\r\n      thresholds: {\r\n        responseTime: { warning: 100, critical: 500 },\r\n        errorRate: { warning: 0.02, critical: 0.05 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // MercadoPago health check\r\n    this.registerHealthCheck({\r\n      service: 'mercadopago',\r\n      enabled: true,\r\n      interval: 300, // 5 minutos\r\n      timeout: 10,\r\n      retries: 1,\r\n      thresholds: {\r\n        responseTime: { warning: 2000, critical: 5000 },\r\n        errorRate: { warning: 0.01, critical: 0.03 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: false,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // Circuit breakers health check\r\n    this.registerHealthCheck({\r\n      service: 'circuit_breakers',\r\n      enabled: true,\r\n      interval: 30, // 30 segundos\r\n      timeout: 1,\r\n      retries: 1,\r\n      thresholds: {\r\n        responseTime: { warning: 100, critical: 1000 },\r\n        errorRate: { warning: 0, critical: 0 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicializa acciones de recuperación\r\n   */\r\n  private initializeRecoveryActions(): void {\r\n    // Reset circuit breakers\r\n    this.registerRecoveryAction({\r\n      id: 'reset_circuit_breakers',\r\n      name: 'Reset Circuit Breakers',\r\n      description: 'Reset all circuit breakers to closed state',\r\n      service: 'circuit_breakers',\r\n      enabled: true,\r\n      automatic: true,\r\n      cooldownMinutes: 5,\r\n      maxRetries: 3,\r\n      action: async () => {\r\n        mercadoPagoCriticalBreaker.reset();\r\n        mercadoPagoStandardBreaker.reset();\r\n        webhookProcessingBreaker.reset();\r\n        return true;\r\n      }\r\n    });\r\n\r\n    // Clear cache\r\n    this.registerRecoveryAction({\r\n      id: 'clear_cache',\r\n      name: 'Clear Cache',\r\n      description: 'Clear cache to resolve potential issues',\r\n      service: 'cache',\r\n      enabled: true,\r\n      automatic: false, // Manual only\r\n      cooldownMinutes: 10,\r\n      maxRetries: 1,\r\n      action: async () => {\r\n        // Implementar limpieza de cache si es necesario\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    // Limpiar intervalos\r\n    for (const interval of this.checkIntervals.values()) {\r\n      clearInterval(interval);\r\n    }\r\n    this.checkIntervals.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseHealthSystem = EnterpriseHealthSystem.getInstance();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["EnterpriseHealthSystem","HealthSeverity","HealthStatus","enterpriseHealthSystem","healthChecks","Map","recoveryActions","lastResults","checkIntervals","recoveryAttempts","initializeDefaultChecks","initializeRecoveryActions","getInstance","instance","registerHealthCheck","config","set","service","enabled","interval","scheduleHealthCheck","logger","info","LogLevel","INFO","autoRecover","LogCategory","SYSTEM","registerRecoveryAction","action","id","automatic","runHealthCheck","get","Error","startTime","Date","now","result","executeHealthCheck","error","status","severity","responseTime","message","details","lastChecked","toISOString","recordHealthMetrics","attemptAutoRecovery","runAllHealthChecks","results","entries","push","ERROR","getSystemHealth","services","Array","from","values","summary","forEach","overall","lastUpdated","executeRecoveryAction","actionId","attempts","cooldownEnd","lastAttempt","getTime","cooldownMinutes","count","maxRetries","success","currentAttempts","checkDatabaseHealth","checkCacheHealth","checkMercadoPagoHealth","checkCircuitBreakersHealth","checkExternalAPIsHealth","checkFileSystemHealth","supabase","getSupabaseClient","data","select","limit","thresholds","critical","warning","recordsFound","length","connectionPool","queryType","nextCheck","metrics","recordCount","recommendations","testKey","testValue","test","timestamp","CacheUtils","retrieved","readWrite","provider","operationsPerSecond","publicKey","process","env","MERCADOPAGO_PUBLIC_KEY_PROD","MERCADOPAGO_PUBLIC_KEY_TEST","accessToken","MERCADOPAGO_ACCESS_TOKEN_PROD","MERCADOPAGO_ACCESS_TOKEN_TEST","environment","includes","publicKeyConfigured","accessTokenConfigured","configurationScore","criticalState","mercadoPagoCriticalBreaker","getState","standardState","mercadoPagoStandardBreaker","webhookState","webhookProcessingBreaker","states","openBreakers","filter","state","halfOpenBreakers","mercadopago_critical","mercadopago_standard","webhook_processing","totalBreakers","healthScore","undefined","checkedAPIs","successRate","diskSpace","permissions","diskUsage","existingInterval","clearInterval","setInterval","recordPerformanceMetric","availabilityScore","recordSecurityMetric","timeout","retries","errorRate","dependencies","notifications","name","description","reset","destroy","clear"],"mappings":"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"}