b6a9e43b157167b949da36189decbba1
// ===================================
// PINTEYA E-COMMERCE - ENTERPRISE ALERT SYSTEM
// ===================================
"use strict";

/* istanbul ignore next */
function cov_26uroqvlnl() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\alert-system.ts";
  var hash = "e3d3bce430341deddd85db7d3118f5982e5d17ab";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\alert-system.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 27
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 37
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 32
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 32
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 37
        }
      },
      "10": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 28
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "12": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 47
        }
      },
      "13": {
        start: {
          line: 41,
          column: 18
        },
        end: {
          line: 41,
          column: 53
        }
      },
      "14": {
        start: {
          line: 42,
          column: 15
        },
        end: {
          line: 42,
          column: 48
        }
      },
      "15": {
        start: {
          line: 43,
          column: 15
        },
        end: {
          line: 43,
          column: 48
        }
      },
      "16": {
        start: {
          line: 45,
          column: 17
        },
        end: {
          line: 45,
          column: 21
        }
      },
      "17": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 53,
          column: 1
        }
      },
      "18": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "19": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 63
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 81
        }
      },
      "21": {
        start: {
          line: 54,
          column: 31
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "22": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 32
        }
      },
      "23": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 38
        }
      },
      "24": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "25": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 42
        }
      },
      "26": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 22
        }
      },
      "27": {
        start: {
          line: 61,
          column: 37
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "28": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 40
        }
      },
      "29": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 40
        }
      },
      "30": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 44
        }
      },
      "31": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 36
        }
      },
      "32": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 38
        }
      },
      "33": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 36
        }
      },
      "34": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 28
        }
      },
      "35": {
        start: {
          line: 70,
          column: 32
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "36": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 37
        }
      },
      "37": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 49
        }
      },
      "38": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 73,
          column: 41
        }
      },
      "39": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 45
        }
      },
      "40": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 23
        }
      },
      "41": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 36
        }
      },
      "42": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 46
        }
      },
      "43": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 41
        }
      },
      "44": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 38
        }
      },
      "45": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 39
        }
      },
      "46": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 41
        }
      },
      "47": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 38
        }
      },
      "48": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 41
        }
      },
      "49": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "50": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "51": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 46
        }
      },
      "52": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 59
        }
      },
      "53": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 102,
          column: 39
        }
      },
      "54": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 48
        }
      },
      "55": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 112,
          column: 39
        }
      },
      "56": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 43
        }
      },
      "57": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 123,
          column: 39
        }
      },
      "58": {
        start: {
          line: 128,
          column: 21
        },
        end: {
          line: 128,
          column: 48
        }
      },
      "59": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "60": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 24
        }
      },
      "61": {
        start: {
          line: 133,
          column: 30
        },
        end: {
          line: 133,
          column: 136
        }
      },
      "62": {
        start: {
          line: 133,
          column: 83
        },
        end: {
          line: 133,
          column: 135
        }
      },
      "63": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "64": {
        start: {
          line: 135,
          column: 32
        },
        end: {
          line: 135,
          column: 67
        }
      },
      "65": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 84
        }
      },
      "66": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "67": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 28
        }
      },
      "68": {
        start: {
          line: 142,
          column: 22
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "69": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 47
        }
      },
      "70": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 59
        }
      },
      "71": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 37
        }
      },
      "72": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 168,
          column: 39
        }
      },
      "73": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "74": {
        start: {
          line: 174,
          column: 22
        },
        end: {
          line: 174,
          column: 52
        }
      },
      "75": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "76": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 25
        }
      },
      "77": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 38
        }
      },
      "78": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 56
        }
      },
      "79": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 38
        }
      },
      "80": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 38
        }
      },
      "81": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 186,
          column: 39
        }
      },
      "82": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 20
        }
      },
      "83": {
        start: {
          line: 192,
          column: 22
        },
        end: {
          line: 192,
          column: 52
        }
      },
      "84": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "85": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 25
        }
      },
      "86": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 34
        }
      },
      "87": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 52
        }
      },
      "88": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 34
        }
      },
      "89": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 38
        }
      },
      "90": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 42
        }
      },
      "91": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 206,
          column: 39
        }
      },
      "92": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 20
        }
      },
      "93": {
        start: {
          line: 212,
          column: 30
        },
        end: {
          line: 212,
          column: 124
        }
      },
      "94": {
        start: {
          line: 212,
          column: 83
        },
        end: {
          line: 212,
          column: 122
        }
      },
      "95": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "96": {
        start: {
          line: 215,
          column: 30
        },
        end: {
          line: 215,
          column: 47
        }
      },
      "97": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "98": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 59
        }
      },
      "99": {
        start: {
          line: 218,
          column: 19
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "100": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 222,
          column: 47
        }
      },
      "101": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 229,
          column: 64
        }
      },
      "102": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "103": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "104": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "105": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 237,
          column: 43
        }
      },
      "106": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 24
        }
      },
      "107": {
        start: {
          line: 240,
          column: 26
        },
        end: {
          line: 240,
          column: 36
        }
      },
      "108": {
        start: {
          line: 241,
          column: 22
        },
        end: {
          line: 241,
          column: 27
        }
      },
      "109": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "110": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "111": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 246,
          column: 69
        }
      },
      "112": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 247,
          column: 26
        }
      },
      "113": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 249,
          column: 69
        }
      },
      "114": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 26
        }
      },
      "115": {
        start: {
          line: 252,
          column: 20
        },
        end: {
          line: 252,
          column: 71
        }
      },
      "116": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 253,
          column: 26
        }
      },
      "117": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 67
        }
      },
      "118": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 26
        }
      },
      "119": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 258,
          column: 67
        }
      },
      "120": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 26
        }
      },
      "121": {
        start: {
          line: 261,
          column: 20
        },
        end: {
          line: 261,
          column: 86
        }
      },
      "122": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 27
        }
      },
      "123": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 73
        }
      },
      "124": {
        start: {
          line: 267,
          column: 32
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "125": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 31
        }
      },
      "126": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "127": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "128": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 25
        }
      },
      "129": {
        start: {
          line: 285,
          column: 25
        },
        end: {
          line: 285,
          column: 58
        }
      },
      "130": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "131": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 25
        }
      },
      "132": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 299,
          column: 13
        }
      },
      "133": {
        start: {
          line: 291,
          column: 39
        },
        end: {
          line: 291,
          column: 81
        }
      },
      "134": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 294,
          column: 17
        }
      },
      "135": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 293,
          column: 29
        }
      },
      "136": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 298,
          column: 17
        }
      },
      "137": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 297,
          column: 68
        }
      },
      "138": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "139": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 25
        }
      },
      "140": {
        start: {
          line: 310,
          column: 25
        },
        end: {
          line: 310,
          column: 75
        }
      },
      "141": {
        start: {
          line: 311,
          column: 33
        },
        end: {
          line: 311,
          column: 69
        }
      },
      "142": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "143": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 25
        }
      },
      "144": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "145": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 25
        }
      },
      "146": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 20
        }
      },
      "147": {
        start: {
          line: 324,
          column: 30
        },
        end: {
          line: 324,
          column: 41
        }
      },
      "148": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "149": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 55
        }
      },
      "150": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 48
        }
      },
      "151": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 53
        }
      },
      "152": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 73
        }
      },
      "153": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "154": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 338,
          column: 14
        }
      },
      "155": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 38
        }
      },
      "156": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 346,
          column: 39
        }
      },
      "157": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "158": {
        start: {
          line: 352,
          column: 28
        },
        end: {
          line: 352,
          column: 78
        }
      },
      "159": {
        start: {
          line: 353,
          column: 30
        },
        end: {
          line: 369,
          column: 13
        }
      },
      "160": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 66
        }
      },
      "161": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 375,
          column: 43
        }
      },
      "162": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 380,
          column: 43
        }
      },
      "163": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 24
        }
      },
      "164": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "165": {
        start: {
          line: 386,
          column: 30
        },
        end: {
          line: 399,
          column: 13
        }
      },
      "166": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 65
        }
      },
      "167": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 405,
          column: 43
        }
      },
      "168": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 410,
          column: 43
        }
      },
      "169": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 24
        }
      },
      "170": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "171": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 58
        }
      },
      "172": {
        start: {
          line: 418,
          column: 25
        },
        end: {
          line: 429,
          column: 10
        }
      },
      "173": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "174": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 89
        }
      },
      "175": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 439,
          column: 39
        }
      },
      "176": {
        start: {
          line: 442,
          column: 25
        },
        end: {
          line: 442,
          column: 131
        }
      },
      "177": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 450,
          column: 39
        }
      },
      "178": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 468,
          column: 11
        }
      },
      "179": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 486,
          column: 11
        }
      },
      "180": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 507,
          column: 11
        }
      },
      "181": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 514,
          column: 18
        }
      },
      "182": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 513,
          column: 36
        }
      },
      "183": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 519,
          column: 80
        }
      },
      "184": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 522,
          column: 80
        }
      },
      "185": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 93
        }
      },
      "186": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 20
        }
      },
      "187": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 563,
          column: 9
        }
      },
      "188": {
        start: {
          line: 533,
          column: 29
        },
        end: {
          line: 533,
          column: 67
        }
      },
      "189": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 536,
          column: 13
        }
      },
      "190": {
        start: {
          line: 535,
          column: 16
        },
        end: {
          line: 535,
          column: 23
        }
      },
      "191": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 557,
          column: 15
        }
      },
      "192": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 562,
          column: 43
        }
      },
      "193": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 588,
          column: 9
        }
      },
      "194": {
        start: {
          line: 567,
          column: 29
        },
        end: {
          line: 567,
          column: 67
        }
      },
      "195": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 570,
          column: 13
        }
      },
      "196": {
        start: {
          line: 569,
          column: 16
        },
        end: {
          line: 569,
          column: 23
        }
      },
      "197": {
        start: {
          line: 571,
          column: 12
        },
        end: {
          line: 582,
          column: 34
        }
      },
      "198": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 587,
          column: 43
        }
      },
      "199": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 596,
          column: 9
        }
      },
      "200": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 51
        }
      },
      "201": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 595,
          column: 43
        }
      },
      "202": {
        start: {
          line: 599,
          column: 30
        },
        end: {
          line: 599,
          column: 65
        }
      },
      "203": {
        start: {
          line: 600,
          column: 21
        },
        end: {
          line: 600,
          column: 83
        }
      },
      "204": {
        start: {
          line: 601,
          column: 25
        },
        end: {
          line: 601,
          column: 91
        }
      },
      "205": {
        start: {
          line: 602,
          column: 21
        },
        end: {
          line: 602,
          column: 83
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 33
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 54,
            column: 31
          },
          end: {
            line: 54,
            column: 32
          }
        },
        loc: {
          start: {
            line: 54,
            column: 52
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 54
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 61,
            column: 37
          },
          end: {
            line: 61,
            column: 38
          }
        },
        loc: {
          start: {
            line: 61,
            column: 64
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 61
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 70,
            column: 32
          },
          end: {
            line: 70,
            column: 33
          }
        },
        loc: {
          start: {
            line: 70,
            column: 54
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 70
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 17
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 78
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 25
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 88
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 96,
            column: 6
          },
          end: {
            line: 96,
            column: 7
          }
        },
        loc: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 96
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 106,
            column: 7
          }
        },
        loc: {
          start: {
            line: 106,
            column: 30
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 106
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 7
          }
        },
        loc: {
          start: {
            line: 116,
            column: 25
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 116
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 127,
            column: 6
          },
          end: {
            line: 127,
            column: 7
          }
        },
        loc: {
          start: {
            line: 127,
            column: 61
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 127
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 133,
            column: 74
          },
          end: {
            line: 133,
            column: 75
          }
        },
        loc: {
          start: {
            line: 133,
            column: 83
          },
          end: {
            line: 133,
            column: 135
          }
        },
        line: 133
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 173,
            column: 6
          },
          end: {
            line: 173,
            column: 7
          }
        },
        loc: {
          start: {
            line: 173,
            column: 46
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 173
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 191,
            column: 6
          },
          end: {
            line: 191,
            column: 7
          }
        },
        loc: {
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 191
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 211,
            column: 6
          },
          end: {
            line: 211,
            column: 7
          }
        },
        loc: {
          start: {
            line: 211,
            column: 49
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 211
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 212,
            column: 70
          },
          end: {
            line: 212,
            column: 71
          }
        },
        loc: {
          start: {
            line: 212,
            column: 83
          },
          end: {
            line: 212,
            column: 122
          }
        },
        line: 212
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 214,
            column: 30
          },
          end: {
            line: 214,
            column: 31
          }
        },
        loc: {
          start: {
            line: 214,
            column: 47
          },
          end: {
            line: 224,
            column: 9
          }
        },
        line: 214
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 228,
            column: 6
          },
          end: {
            line: 228,
            column: 7
          }
        },
        loc: {
          start: {
            line: 228,
            column: 47
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 228
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 280,
            column: 6
          },
          end: {
            line: 280,
            column: 7
          }
        },
        loc: {
          start: {
            line: 280,
            column: 31
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 280
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 304,
            column: 6
          },
          end: {
            line: 304,
            column: 7
          }
        },
        loc: {
          start: {
            line: 304,
            column: 34
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 304
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 323,
            column: 6
          },
          end: {
            line: 323,
            column: 7
          }
        },
        loc: {
          start: {
            line: 323,
            column: 39
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 323
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 350,
            column: 6
          },
          end: {
            line: 350,
            column: 7
          }
        },
        loc: {
          start: {
            line: 350,
            column: 50
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 350
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 48
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 384
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 50
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 414
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 46
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 434
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 441,
            column: 4
          },
          end: {
            line: 441,
            column: 5
          }
        },
        loc: {
          start: {
            line: 441,
            column: 46
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 441
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 454,
            column: 6
          },
          end: {
            line: 454,
            column: 7
          }
        },
        loc: {
          start: {
            line: 454,
            column: 34
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 454
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 490,
            column: 6
          },
          end: {
            line: 490,
            column: 7
          }
        },
        loc: {
          start: {
            line: 490,
            column: 31
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 490
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 511,
            column: 6
          },
          end: {
            line: 511,
            column: 7
          }
        },
        loc: {
          start: {
            line: 511,
            column: 34
          },
          end: {
            line: 515,
            column: 5
          }
        },
        line: 511
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 512,
            column: 46
          },
          end: {
            line: 512,
            column: 47
          }
        },
        loc: {
          start: {
            line: 512,
            column: 50
          },
          end: {
            line: 514,
            column: 9
          }
        },
        line: 512
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 518,
            column: 6
          },
          end: {
            line: 518,
            column: 7
          }
        },
        loc: {
          start: {
            line: 518,
            column: 24
          },
          end: {
            line: 520,
            column: 5
          }
        },
        line: 518
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 521,
            column: 5
          }
        },
        loc: {
          start: {
            line: 521,
            column: 29
          },
          end: {
            line: 523,
            column: 5
          }
        },
        line: 521
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 524,
            column: 4
          },
          end: {
            line: 524,
            column: 5
          }
        },
        loc: {
          start: {
            line: 524,
            column: 34
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 524
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 527,
            column: 5
          }
        },
        loc: {
          start: {
            line: 527,
            column: 47
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 527
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 531,
            column: 4
          },
          end: {
            line: 531,
            column: 5
          }
        },
        loc: {
          start: {
            line: 531,
            column: 28
          },
          end: {
            line: 564,
            column: 5
          }
        },
        line: 531
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 565,
            column: 4
          },
          end: {
            line: 565,
            column: 5
          }
        },
        loc: {
          start: {
            line: 565,
            column: 29
          },
          end: {
            line: 589,
            column: 5
          }
        },
        line: 565
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 592,
            column: 6
          },
          end: {
            line: 592,
            column: 7
          }
        },
        loc: {
          start: {
            line: 592,
            column: 16
          },
          end: {
            line: 597,
            column: 5
          }
        },
        line: 592
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 0
          },
          end: {
            line: 53,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 0
          },
          end: {
            line: 53,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "2": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "3": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 129,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 129,
            column: 17
          }
        }, {
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 129,
            column: 34
          }
        }],
        line: 129
      },
      "4": {
        loc: {
          start: {
            line: 133,
            column: 83
          },
          end: {
            line: 133,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 83
          },
          end: {
            line: 133,
            column: 106
          }
        }, {
          start: {
            line: 133,
            column: 110
          },
          end: {
            line: 133,
            column: 135
          }
        }],
        line: 133
      },
      "5": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "6": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "7": {
        loc: {
          start: {
            line: 148,
            column: 21
          },
          end: {
            line: 148,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 21
          },
          end: {
            line: 148,
            column: 28
          }
        }, {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 148,
            column: 101
          }
        }],
        line: 148
      },
      "8": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "9": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 18
          }
        }, {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 47
          }
        }],
        line: 175
      },
      "10": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "11": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: 218,
            column: 19
          },
          end: {
            line: 223,
            column: 13
          }
        }],
        line: 216
      },
      "12": {
        loc: {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 216,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 216,
            column: 45
          }
        }, {
          start: {
            line: 216,
            column: 49
          },
          end: {
            line: 216,
            column: 61
          }
        }],
        line: 216
      },
      "13": {
        loc: {
          start: {
            line: 218,
            column: 19
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 19
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "14": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "15": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 20
          }
        }, {
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 230,
            column: 40
          }
        }, {
          start: {
            line: 230,
            column: 44
          },
          end: {
            line: 230,
            column: 81
          }
        }],
        line: 230
      },
      "16": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "17": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 29
          }
        }, {
          start: {
            line: 234,
            column: 33
          },
          end: {
            line: 234,
            column: 89
          }
        }],
        line: 234
      },
      "18": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 247,
            column: 26
          }
        }, {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 250,
            column: 26
          }
        }, {
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 253,
            column: 26
          }
        }, {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 256,
            column: 26
          }
        }, {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 259,
            column: 26
          }
        }, {
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 261,
            column: 86
          }
        }],
        line: 244
      },
      "19": {
        loc: {
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 265,
            column: 43
          },
          end: {
            line: 265,
            column: 54
          }
        }, {
          start: {
            line: 265,
            column: 57
          },
          end: {
            line: 265,
            column: 72
          }
        }],
        line: 265
      },
      "20": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "21": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "22": {
        loc: {
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 294,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 294,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "23": {
        loc: {
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 35
          }
        }, {
          start: {
            line: 292,
            column: 39
          },
          end: {
            line: 292,
            column: 62
          }
        }],
        line: 292
      },
      "24": {
        loc: {
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "25": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "26": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "27": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "28": {
        loc: {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "29": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "30": {
        loc: {
          start: {
            line: 354,
            column: 20
          },
          end: {
            line: 356,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 20
          },
          end: {
            line: 354,
            column: 37
          }
        }, {
          start: {
            line: 354,
            column: 41
          },
          end: {
            line: 356,
            column: 17
          }
        }],
        line: 354
      },
      "31": {
        loc: {
          start: {
            line: 368,
            column: 26
          },
          end: {
            line: 368,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 368,
            column: 86
          },
          end: {
            line: 368,
            column: 92
          }
        }, {
          start: {
            line: 368,
            column: 95
          },
          end: {
            line: 368,
            column: 103
          }
        }],
        line: 368
      },
      "32": {
        loc: {
          start: {
            line: 368,
            column: 26
          },
          end: {
            line: 368,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 26
          },
          end: {
            line: 368,
            column: 52
          }
        }, {
          start: {
            line: 368,
            column: 56
          },
          end: {
            line: 368,
            column: 83
          }
        }],
        line: 368
      },
      "33": {
        loc: {
          start: {
            line: 379,
            column: 23
          },
          end: {
            line: 379,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 379,
            column: 48
          },
          end: {
            line: 379,
            column: 61
          }
        }, {
          start: {
            line: 379,
            column: 64
          },
          end: {
            line: 379,
            column: 79
          }
        }],
        line: 379
      },
      "34": {
        loc: {
          start: {
            line: 389,
            column: 26
          },
          end: {
            line: 389,
            column: 142
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 389,
            column: 86
          },
          end: {
            line: 389,
            column: 93
          }
        }, {
          start: {
            line: 389,
            column: 96
          },
          end: {
            line: 389,
            column: 142
          }
        }],
        line: 389
      },
      "35": {
        loc: {
          start: {
            line: 389,
            column: 26
          },
          end: {
            line: 389,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 26
          },
          end: {
            line: 389,
            column: 52
          }
        }, {
          start: {
            line: 389,
            column: 56
          },
          end: {
            line: 389,
            column: 83
          }
        }],
        line: 389
      },
      "36": {
        loc: {
          start: {
            line: 389,
            column: 96
          },
          end: {
            line: 389,
            column: 142
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 389,
            column: 124
          },
          end: {
            line: 389,
            column: 133
          }
        }, {
          start: {
            line: 389,
            column: 136
          },
          end: {
            line: 389,
            column: 142
          }
        }],
        line: 389
      },
      "37": {
        loc: {
          start: {
            line: 394,
            column: 29
          },
          end: {
            line: 394,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 29
          },
          end: {
            line: 394,
            column: 52
          }
        }, {
          start: {
            line: 394,
            column: 56
          },
          end: {
            line: 394,
            column: 61
          }
        }],
        line: 394
      },
      "38": {
        loc: {
          start: {
            line: 395,
            column: 33
          },
          end: {
            line: 395,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 33
          },
          end: {
            line: 395,
            column: 60
          }
        }, {
          start: {
            line: 395,
            column: 64
          },
          end: {
            line: 395,
            column: 69
          }
        }],
        line: 395
      },
      "39": {
        loc: {
          start: {
            line: 404,
            column: 25
          },
          end: {
            line: 404,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 404,
            column: 53
          },
          end: {
            line: 404,
            column: 65
          }
        }, {
          start: {
            line: 404,
            column: 68
          },
          end: {
            line: 404,
            column: 77
          }
        }],
        line: 404
      },
      "40": {
        loc: {
          start: {
            line: 409,
            column: 23
          },
          end: {
            line: 409,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 409,
            column: 48
          },
          end: {
            line: 409,
            column: 61
          }
        }, {
          start: {
            line: 409,
            column: 64
          },
          end: {
            line: 409,
            column: 79
          }
        }],
        line: 409
      },
      "41": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "42": {
        loc: {
          start: {
            line: 422,
            column: 19
          },
          end: {
            line: 422,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 422,
            column: 19
          },
          end: {
            line: 422,
            column: 41
          }
        }, {
          start: {
            line: 422,
            column: 45
          },
          end: {
            line: 422,
            column: 47
          }
        }],
        line: 422
      },
      "43": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 432,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 432,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "44": {
        loc: {
          start: {
            line: 442,
            column: 25
          },
          end: {
            line: 442,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 442,
            column: 85
          },
          end: {
            line: 442,
            column: 107
          }
        }, {
          start: {
            line: 442,
            column: 110
          },
          end: {
            line: 442,
            column: 131
          }
        }],
        line: 442
      },
      "45": {
        loc: {
          start: {
            line: 442,
            column: 25
          },
          end: {
            line: 442,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 25
          },
          end: {
            line: 442,
            column: 52
          }
        }, {
          start: {
            line: 442,
            column: 56
          },
          end: {
            line: 442,
            column: 82
          }
        }],
        line: 442
      },
      "46": {
        loc: {
          start: {
            line: 475,
            column: 21
          },
          end: {
            line: 475,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 475,
            column: 21
          },
          end: {
            line: 475,
            column: 50
          }
        }, {
          start: {
            line: 475,
            column: 54
          },
          end: {
            line: 475,
            column: 56
          }
        }],
        line: 475
      },
      "47": {
        loc: {
          start: {
            line: 534,
            column: 12
          },
          end: {
            line: 536,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 12
          },
          end: {
            line: 536,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 534
      },
      "48": {
        loc: {
          start: {
            line: 560,
            column: 23
          },
          end: {
            line: 560,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 560,
            column: 48
          },
          end: {
            line: 560,
            column: 61
          }
        }, {
          start: {
            line: 560,
            column: 64
          },
          end: {
            line: 560,
            column: 79
          }
        }],
        line: 560
      },
      "49": {
        loc: {
          start: {
            line: 568,
            column: 12
          },
          end: {
            line: 570,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 568,
            column: 12
          },
          end: {
            line: 570,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 568
      },
      "50": {
        loc: {
          start: {
            line: 585,
            column: 23
          },
          end: {
            line: 585,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 585,
            column: 48
          },
          end: {
            line: 585,
            column: 61
          }
        }, {
          start: {
            line: 585,
            column: 64
          },
          end: {
            line: 585,
            column: 79
          }
        }],
        line: 585
      },
      "51": {
        loc: {
          start: {
            line: 593,
            column: 8
          },
          end: {
            line: 596,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 593,
            column: 8
          },
          end: {
            line: 596,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 593
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\alert-system.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE ALERT SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { emailService } from '@/lib/notifications/email';\r\nimport { slackService } from '@/lib/notifications/slack';\r\n\r\n// \u2705 IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente\r\nlet CacheUtils: any = null;\r\nif (typeof window === 'undefined') {\r\n  // Solo en servidor\r\n  try {\r\n    CacheUtils = require('@/lib/cache-manager').CacheUtils;\r\n  } catch (error) {\r\n    console.warn('[EnterpriseAlertSystem] CacheUtils not available:', error);\r\n  }\r\n}\r\n\r\n// Niveles de alerta con escalamiento\r\nexport enum AlertLevel {\r\n  INFO = 'info',\r\n  WARNING = 'warning', \r\n  CRITICAL = 'critical',\r\n  EMERGENCY = 'emergency'\r\n}\r\n\r\n// Tipos de notificaci\xF3n\r\nexport enum NotificationType {\r\n  EMAIL = 'email',\r\n  SLACK = 'slack',\r\n  WEBHOOK = 'webhook',\r\n  SMS = 'sms',\r\n  PUSH = 'push',\r\n  LOG = 'log'\r\n}\r\n\r\n// Estados de alerta\r\nexport enum AlertStatus {\r\n  ACTIVE = 'active',\r\n  ACKNOWLEDGED = 'acknowledged',\r\n  RESOLVED = 'resolved',\r\n  SUPPRESSED = 'suppressed'\r\n}\r\n\r\n// Configuraci\xF3n de canal de notificaci\xF3n\r\nexport interface NotificationChannel {\r\n  id: string;\r\n  type: NotificationType;\r\n  name: string;\r\n  config: Record<string, any>;\r\n  enabled: boolean;\r\n  levels: AlertLevel[];\r\n  rateLimit?: {\r\n    maxPerHour: number;\r\n    maxPerDay: number;\r\n  };\r\n}\r\n\r\n// Regla de escalamiento\r\nexport interface EscalationRule {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  conditions: {\r\n    level: AlertLevel;\r\n    duration: number; // minutos sin resoluci\xF3n\r\n    repeatCount?: number; // n\xFAmero de repeticiones\r\n  };\r\n  actions: {\r\n    escalateToLevel?: AlertLevel;\r\n    notifyChannels: string[]; // IDs de canales\r\n    assignToUser?: string;\r\n  };\r\n}\r\n\r\n// Configuraci\xF3n de alerta\r\nexport interface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  enabled: boolean;\r\n  metricName: string;\r\n  condition: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\r\n  threshold: number;\r\n  level: AlertLevel;\r\n  cooldownMinutes: number;\r\n  channels: string[]; // IDs de canales de notificaci\xF3n\r\n  escalationRules: string[]; // IDs de reglas de escalamiento\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Alerta activa\r\nexport interface Alert {\r\n  id: string;\r\n  ruleId: string;\r\n  ruleName: string;\r\n  level: AlertLevel;\r\n  status: AlertStatus;\r\n  message: string;\r\n  metricName: string;\r\n  value: number;\r\n  threshold: number;\r\n  triggeredAt: string;\r\n  acknowledgedAt?: string;\r\n  acknowledgedBy?: string;\r\n  resolvedAt?: string;\r\n  resolvedBy?: string;\r\n  escalatedAt?: string;\r\n  escalatedFrom?: AlertLevel;\r\n  notificationsSent: NotificationLog[];\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Log de notificaci\xF3n\r\nexport interface NotificationLog {\r\n  id: string;\r\n  channelId: string;\r\n  channelType: NotificationType;\r\n  sentAt: string;\r\n  success: boolean;\r\n  error?: string;\r\n  responseTime: number;\r\n}\r\n\r\n/**\r\n * Sistema de Alertas Enterprise con escalamiento autom\xE1tico\r\n */\r\nexport class EnterpriseAlertSystem {\r\n  private static instance: EnterpriseAlertSystem;\r\n  private alertRules: Map<string, AlertRule> = new Map();\r\n  private notificationChannels: Map<string, NotificationChannel> = new Map();\r\n  private escalationRules: Map<string, EscalationRule> = new Map();\r\n  private activeAlerts: Map<string, Alert> = new Map();\r\n  private escalationInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.initializeDefaultChannels();\r\n    this.initializeDefaultRules();\r\n    this.startEscalationMonitoring();\r\n  }\r\n\r\n  static getInstance(): EnterpriseAlertSystem {\r\n    if (!EnterpriseAlertSystem.instance) {\r\n      EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();\r\n    }\r\n    return EnterpriseAlertSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Configura un canal de notificaci\xF3n\r\n   */\r\n  setNotificationChannel(channel: NotificationChannel): void {\r\n    this.notificationChannels.set(channel.id, channel);\r\n    logger.info(LogLevel.INFO, `Notification channel configured: ${channel.id}`, {\r\n      type: channel.type,\r\n      enabled: channel.enabled,\r\n      levels: channel.levels\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de escalamiento\r\n   */\r\n  setEscalationRule(rule: EscalationRule): void {\r\n    this.escalationRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Escalation rule configured: ${rule.id}`, {\r\n      level: rule.conditions.level,\r\n      duration: rule.conditions.duration,\r\n      enabled: rule.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de alerta\r\n   */\r\n  setAlertRule(rule: AlertRule): void {\r\n    this.alertRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Alert rule configured: ${rule.id}`, {\r\n      metricName: rule.metricName,\r\n      threshold: rule.threshold,\r\n      level: rule.level,\r\n      enabled: rule.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Dispara una alerta\r\n   */\r\n  async triggerAlert(\r\n    ruleId: string,\r\n    metricName: string,\r\n    value: number,\r\n    message?: string\r\n  ): Promise<Alert | null> {\r\n    const rule = this.alertRules.get(ruleId);\r\n    if (!rule || !rule.enabled) {\r\n      return null;\r\n    }\r\n\r\n    // Verificar cooldown\r\n    const existingAlert = Array.from(this.activeAlerts.values())\r\n      .find(alert => alert.ruleId === ruleId && alert.status === AlertStatus.ACTIVE);\r\n\r\n    if (existingAlert) {\r\n      const cooldownEnd = new Date(existingAlert.triggeredAt);\r\n      cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);\r\n      \r\n      if (new Date() < cooldownEnd) {\r\n        return null; // A\xFAn en cooldown\r\n      }\r\n    }\r\n\r\n    // Crear nueva alerta\r\n    const alert: Alert = {\r\n      id: this.generateAlertId(),\r\n      ruleId: rule.id,\r\n      ruleName: rule.name,\r\n      level: rule.level,\r\n      status: AlertStatus.ACTIVE,\r\n      message: message || `${rule.description} - Value: ${value}, Threshold: ${rule.threshold}`,\r\n      metricName,\r\n      value,\r\n      threshold: rule.threshold,\r\n      triggeredAt: new Date().toISOString(),\r\n      notificationsSent: [],\r\n      tags: rule.tags,\r\n      metadata: rule.metadata\r\n    };\r\n\r\n    this.activeAlerts.set(alert.id, alert);\r\n\r\n    // Enviar notificaciones\r\n    await this.sendNotifications(alert, rule.channels);\r\n\r\n    // Almacenar en base de datos\r\n    await this.storeAlert(alert);\r\n\r\n    logger.warn(LogLevel.WARN, `Alert triggered: ${rule.name}`, {\r\n      alertId: alert.id,\r\n      level: alert.level,\r\n      metricName: alert.metricName,\r\n      value: alert.value,\r\n      threshold: alert.threshold\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return alert;\r\n  }\r\n\r\n  /**\r\n   * Reconoce una alerta\r\n   */\r\n  async acknowledgeAlert(alertId: string, userId: string): Promise<boolean> {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {\r\n      return false;\r\n    }\r\n\r\n    alert.status = AlertStatus.ACKNOWLEDGED;\r\n    alert.acknowledgedAt = new Date().toISOString();\r\n    alert.acknowledgedBy = userId;\r\n\r\n    await this.updateAlert(alert);\r\n\r\n    logger.info(LogLevel.INFO, `Alert acknowledged: ${alertId}`, {\r\n      userId,\r\n      level: alert.level,\r\n      ruleName: alert.ruleName\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  async resolveAlert(alertId: string, userId?: string): Promise<boolean> {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (!alert) {\r\n      return false;\r\n    }\r\n\r\n    alert.status = AlertStatus.RESOLVED;\r\n    alert.resolvedAt = new Date().toISOString();\r\n    alert.resolvedBy = userId;\r\n\r\n    await this.updateAlert(alert);\r\n    this.activeAlerts.delete(alertId);\r\n\r\n    logger.info(LogLevel.INFO, `Alert resolved: ${alertId}`, {\r\n      userId,\r\n      level: alert.level,\r\n      ruleName: alert.ruleName,\r\n      duration: this.calculateDuration(alert.triggeredAt, alert.resolvedAt!)\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Env\xEDa notificaciones para una alerta\r\n   */\r\n  private async sendNotifications(alert: Alert, channelIds: string[]): Promise<void> {\r\n    const notifications = await Promise.allSettled(\r\n      channelIds.map(channelId => this.sendNotification(alert, channelId))\r\n    );\r\n\r\n    // Log resultados\r\n    notifications.forEach((result, index) => {\r\n      const channelId = channelIds[index];\r\n      if (result.status === 'fulfilled' && result.value) {\r\n        alert.notificationsSent.push(result.value);\r\n      } else if (result.status === 'rejected') {\r\n        logger.error(LogLevel.ERROR, `Failed to send notification to channel: ${channelId}`, {\r\n          alertId: alert.id,\r\n          error: result.reason\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Env\xEDa notificaci\xF3n a un canal espec\xEDfico\r\n   */\r\n  private async sendNotification(alert: Alert, channelId: string): Promise<NotificationLog | null> {\r\n    const channel = this.notificationChannels.get(channelId);\r\n    if (!channel || !channel.enabled || !channel.levels.includes(alert.level)) {\r\n      return null;\r\n    }\r\n\r\n    // Verificar rate limiting\r\n    if (channel.rateLimit && !(await this.checkRateLimit(channelId, channel.rateLimit))) {\r\n      logger.warn(LogLevel.WARN, `Rate limit exceeded for channel: ${channelId}`, {\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n      return null;\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    let success = false;\r\n    let error: string | undefined;\r\n\r\n    try {\r\n      switch (channel.type) {\r\n        case NotificationType.EMAIL:\r\n          await this.sendEmailNotification(alert, channel);\r\n          break;\r\n        case NotificationType.SLACK:\r\n          await this.sendSlackNotification(alert, channel);\r\n          break;\r\n        case NotificationType.WEBHOOK:\r\n          await this.sendWebhookNotification(alert, channel);\r\n          break;\r\n        case NotificationType.SMS:\r\n          await this.sendSMSNotification(alert, channel);\r\n          break;\r\n        case NotificationType.LOG:\r\n          await this.sendLogNotification(alert, channel);\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported notification type: ${channel.type}`);\r\n      }\r\n      success = true;\r\n    } catch (err) {\r\n      error = err instanceof Error ? err.message : 'Unknown error';\r\n    }\r\n\r\n    const notificationLog: NotificationLog = {\r\n      id: this.generateNotificationId(),\r\n      channelId,\r\n      channelType: channel.type,\r\n      sentAt: new Date().toISOString(),\r\n      success,\r\n      error,\r\n      responseTime: Date.now() - startTime\r\n    };\r\n\r\n    return notificationLog;\r\n  }\r\n\r\n  /**\r\n   * Monitoreo de escalamiento autom\xE1tico\r\n   */\r\n  private async checkEscalations(): Promise<void> {\r\n    for (const alert of this.activeAlerts.values()) {\r\n      if (alert.status !== AlertStatus.ACTIVE) {\r\n        continue;\r\n      }\r\n\r\n      const rule = this.alertRules.get(alert.ruleId);\r\n      if (!rule) {\r\n        continue;\r\n      }\r\n\r\n      // Verificar reglas de escalamiento\r\n      for (const escalationRuleId of rule.escalationRules) {\r\n        const escalationRule = this.escalationRules.get(escalationRuleId);\r\n        if (!escalationRule || !escalationRule.enabled) {\r\n          continue;\r\n        }\r\n\r\n        // Verificar condiciones de escalamiento\r\n        if (this.shouldEscalate(alert, escalationRule)) {\r\n          await this.escalateAlert(alert, escalationRule);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si una alerta debe escalarse\r\n   */\r\n  private shouldEscalate(alert: Alert, rule: EscalationRule): boolean {\r\n    // Verificar nivel\r\n    if (alert.level !== rule.conditions.level) {\r\n      return false;\r\n    }\r\n\r\n    // Verificar duraci\xF3n\r\n    const alertAge = Date.now() - new Date(alert.triggeredAt).getTime();\r\n    const requiredDuration = rule.conditions.duration * 60 * 1000; // convertir a ms\r\n\r\n    if (alertAge < requiredDuration) {\r\n      return false;\r\n    }\r\n\r\n    // Verificar si ya fue escalada\r\n    if (alert.escalatedAt) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Escala una alerta\r\n   */\r\n  private async escalateAlert(alert: Alert, rule: EscalationRule): Promise<void> {\r\n    const originalLevel = alert.level;\r\n    \r\n    // Actualizar nivel si es necesario\r\n    if (rule.actions.escalateToLevel) {\r\n      alert.level = rule.actions.escalateToLevel;\r\n      alert.escalatedFrom = originalLevel;\r\n    }\r\n\r\n    alert.escalatedAt = new Date().toISOString();\r\n\r\n    // Enviar notificaciones de escalamiento\r\n    await this.sendNotifications(alert, rule.actions.notifyChannels);\r\n\r\n    // Asignar a usuario si es necesario\r\n    if (rule.actions.assignToUser) {\r\n      alert.metadata = {\r\n        ...alert.metadata,\r\n        assignedTo: rule.actions.assignToUser\r\n      };\r\n    }\r\n\r\n    await this.updateAlert(alert);\r\n\r\n    logger.error(LogLevel.ERROR, `Alert escalated: ${alert.id}`, {\r\n      originalLevel,\r\n      newLevel: alert.level,\r\n      escalationRule: rule.name,\r\n      duration: this.calculateDuration(alert.triggeredAt, alert.escalatedAt)\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Implementaciones de notificaci\xF3n espec\xEDficas\r\n   */\r\n  private async sendEmailNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    try {\r\n      const subject = `[${alert.level.toUpperCase()}] ${alert.ruleName}`;\r\n      const emailData = {\r\n        to: channel.config.to || ['admin@example.com'],\r\n        subject,\r\n        template: 'alert-notification',\r\n        data: {\r\n          alert,\r\n          level: alert.level.toUpperCase(),\r\n          timestamp: new Date(alert.triggeredAt).toLocaleString(),\r\n          message: alert.message,\r\n          metricName: alert.metricName,\r\n          value: alert.value,\r\n          threshold: alert.threshold\r\n        },\r\n        priority: alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.EMERGENCY ? 'high' as const : 'normal' as const\r\n      };\r\n\r\n      await emailService.sendNotification(emailData);\r\n      \r\n      logger.info(LogLevel.INFO, `Email notification sent successfully`, {\r\n        alertId: alert.id,\r\n        to: channel.config.to,\r\n        subject\r\n      }, LogCategory.SYSTEM);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to send email notification`, {\r\n        alertId: alert.id,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async sendSlackNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    try {\r\n      const alertData = {\r\n        title: `${alert.level.toUpperCase()}: ${alert.ruleName}`,\r\n        message: alert.message,\r\n        severity: alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.EMERGENCY ? 'error' as const : \r\n                 alert.level === AlertLevel.WARNING ? 'warning' as const : 'info' as const,\r\n        details: {\r\n          'Alert ID': alert.id,\r\n          'Timestamp': new Date(alert.triggeredAt).toLocaleString(),\r\n          'Metric': alert.metricName,\r\n          'Value': alert.value?.toString() || 'N/A',\r\n          'Threshold': alert.threshold?.toString() || 'N/A',\r\n          'Status': alert.status,\r\n          ...alert.tags\r\n        }\r\n      };\r\n\r\n      await slackService.sendSystemAlert(alertData);\r\n      \r\n      logger.info(LogLevel.INFO, `Slack notification sent successfully`, {\r\n        alertId: alert.id,\r\n        channel: channel.config.channel,\r\n        webhook: channel.config.webhookUrl ? 'configured' : 'missing'\r\n      }, LogCategory.SYSTEM);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to send Slack notification`, {\r\n        alertId: alert.id,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async sendWebhookNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    if (!channel.config.url) {\r\n      throw new Error('Webhook URL not configured');\r\n    }\r\n\r\n    const response = await fetch(channel.config.url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(channel.config.headers || {})\r\n      },\r\n      body: JSON.stringify({\r\n        alert,\r\n        timestamp: new Date().toISOString(),\r\n        source: 'pinteya-ecommerce'\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\r\n    }\r\n  }\r\n\r\n  private async sendSMSNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    // TODO: Implementar env\xEDo de SMS\r\n    logger.info(LogLevel.INFO, `SMS notification sent`, {\r\n      alertId: alert.id,\r\n      to: channel.config.phoneNumber\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  private async sendLogNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    const logLevel = alert.level === AlertLevel.EMERGENCY || alert.level === AlertLevel.CRITICAL \r\n      ? LogLevel.ERROR \r\n      : LogLevel.WARN;\r\n\r\n    logger.log(logLevel, `ALERT: ${alert.message}`, {\r\n      alertId: alert.id,\r\n      level: alert.level,\r\n      metricName: alert.metricName,\r\n      value: alert.value,\r\n      threshold: alert.threshold,\r\n      ruleName: alert.ruleName\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Inicializa canales por defecto\r\n   */\r\n  private initializeDefaultChannels(): void {\r\n    // Canal de log por defecto\r\n    this.setNotificationChannel({\r\n      id: 'default_log',\r\n      type: NotificationType.LOG,\r\n      name: 'Default Log Channel',\r\n      config: {},\r\n      enabled: true,\r\n      levels: [AlertLevel.INFO, AlertLevel.WARNING, AlertLevel.CRITICAL, AlertLevel.EMERGENCY]\r\n    });\r\n\r\n    // Canal de webhook por defecto (deshabilitado)\r\n    this.setNotificationChannel({\r\n      id: 'default_webhook',\r\n      type: NotificationType.WEBHOOK,\r\n      name: 'Default Webhook Channel',\r\n      config: {\r\n        url: process.env.ALERT_WEBHOOK_URL || ''\r\n      },\r\n      enabled: false,\r\n      levels: [AlertLevel.CRITICAL, AlertLevel.EMERGENCY],\r\n      rateLimit: {\r\n        maxPerHour: 10,\r\n        maxPerDay: 50\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicializa reglas por defecto\r\n   */\r\n  private initializeDefaultRules(): void {\r\n    // Regla de escalamiento para alertas cr\xEDticas\r\n    this.setEscalationRule({\r\n      id: 'critical_escalation',\r\n      name: 'Critical Alert Escalation',\r\n      enabled: true,\r\n      conditions: {\r\n        level: AlertLevel.CRITICAL,\r\n        duration: 15 // 15 minutos\r\n      },\r\n      actions: {\r\n        escalateToLevel: AlertLevel.EMERGENCY,\r\n        notifyChannels: ['default_log', 'default_webhook']\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicia monitoreo de escalamiento\r\n   */\r\n  private startEscalationMonitoring(): void {\r\n    this.escalationInterval = setInterval(() => {\r\n      this.checkEscalations();\r\n    }, 60000); // Verificar cada minuto\r\n  }\r\n\r\n  /**\r\n   * Funciones auxiliares\r\n   */\r\n  private generateAlertId(): string {\r\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generateNotificationId(): string {\r\n    return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private calculateDuration(start: string, end: string): number {\r\n    return Math.round((new Date(end).getTime() - new Date(start).getTime()) / 1000 / 60); // minutos\r\n  }\r\n\r\n  private async checkRateLimit(channelId: string, rateLimit: { maxPerHour: number; maxPerDay: number }): Promise<boolean> {\r\n    // TODO: Implementar verificaci\xF3n de rate limiting con Redis\r\n    return true;\r\n  }\r\n\r\n  private async storeAlert(alert: Alert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase.from('enterprise_alerts').insert({\r\n        id: alert.id,\r\n        rule_id: alert.ruleId,\r\n        rule_name: alert.ruleName,\r\n        level: alert.level,\r\n        status: alert.status,\r\n        message: alert.message,\r\n        metric_name: alert.metricName,\r\n        value: alert.value,\r\n        threshold: alert.threshold,\r\n        triggered_at: alert.triggeredAt,\r\n        acknowledged_at: alert.acknowledgedAt,\r\n        acknowledged_by: alert.acknowledgedBy,\r\n        resolved_at: alert.resolvedAt,\r\n        resolved_by: alert.resolvedBy,\r\n        escalated_at: alert.escalatedAt,\r\n        escalated_from: alert.escalatedFrom,\r\n        notifications_sent: alert.notificationsSent,\r\n        tags: alert.tags,\r\n        metadata: alert.metadata\r\n      });\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to store alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  private async updateAlert(alert: Alert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase\r\n        .from('enterprise_alerts')\r\n        .update({\r\n          level: alert.level,\r\n          status: alert.status,\r\n          acknowledged_at: alert.acknowledgedAt,\r\n          acknowledged_by: alert.acknowledgedBy,\r\n          resolved_at: alert.resolvedAt,\r\n          resolved_by: alert.resolvedBy,\r\n          escalated_at: alert.escalatedAt,\r\n          escalated_from: alert.escalatedFrom,\r\n          notifications_sent: alert.notificationsSent,\r\n          metadata: alert.metadata\r\n        })\r\n        .eq('id', alert.id);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to update alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    if (this.escalationInterval) {\r\n      clearInterval(this.escalationInterval);\r\n      this.escalationInterval = null;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance();\r\n\r\n// Funciones de conveniencia\r\nexport const triggerAlert = enterpriseAlertSystem.triggerAlert.bind(enterpriseAlertSystem);\r\nexport const acknowledgeAlert = enterpriseAlertSystem.acknowledgeAlert.bind(enterpriseAlertSystem);\r\nexport const resolveAlert = enterpriseAlertSystem.resolveAlert.bind(enterpriseAlertSystem);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["AlertLevel", "AlertStatus", "EnterpriseAlertSystem", "NotificationType", "acknowledgeAlert", "enterpriseAlertSystem", "resolveAlert", "triggerAlert", "CacheUtils", "window", "require", "error", "console", "warn", "alertRules", "Map", "notificationChannels", "escalationRules", "activeAlerts", "escalationInterval", "initializeDefaultChannels", "initializeDefaultRules", "startEscalationMonitoring", "getInstance", "instance", "setNotificationChannel", "channel", "set", "id", "logger", "info", "LogLevel", "INFO", "type", "enabled", "levels", "LogCategory", "SYSTEM", "setEscalationRule", "rule", "level", "conditions", "duration", "setAlertRule", "metricName", "threshold", "ruleId", "value", "message", "get", "existingAlert", "Array", "from", "values", "find", "alert", "status", "cooldownEnd", "Date", "triggeredAt", "setMinutes", "getMinutes", "cooldownMinutes", "generateAlertId", "ruleName", "name", "description", "toISOString", "notificationsSent", "tags", "metadata", "sendNotifications", "channels", "storeAlert", "WARN", "alertId", "userId", "acknowledgedAt", "acknowledgedBy", "updateAlert", "resolvedAt", "resolvedBy", "delete", "calculateDuration", "channelIds", "notifications", "Promise", "allSettled", "map", "channelId", "sendNotification", "forEach", "result", "index", "push", "ERROR", "reason", "includes", "rateLimit", "checkRateLimit", "startTime", "now", "success", "sendEmailNotification", "sendSlackNotification", "sendWebhookNotification", "sendSMSNotification", "sendLogNotification", "Error", "err", "notificationLog", "generateNotificationId", "channelType", "sentAt", "responseTime", "checkEscalations", "escalationRuleId", "escalationRule", "shouldEscalate", "escalateAlert", "alertAge", "getTime", "requiredDuration", "escalatedAt", "originalLevel", "actions", "escalateToLevel", "escalatedFrom", "notifyChannels", "assignToUser", "assignedTo", "newLevel", "subject", "toUpperCase", "emailData", "to", "config", "template", "data", "timestamp", "toLocaleString", "priority", "emailService", "alertData", "title", "severity", "details", "toString", "slackService", "sendSystemAlert", "webhook", "webhookUrl", "url", "response", "fetch", "method", "headers", "body", "JSON", "stringify", "source", "ok", "statusText", "phoneNumber", "logLevel", "log", "process", "env", "ALERT_WEBHOOK_URL", "maxPerHour", "maxPerDay", "setInterval", "Math", "random", "substr", "start", "end", "round", "supabase", "getSupabaseClient", "insert", "rule_id", "rule_name", "metric_name", "triggered_at", "acknowledged_at", "acknowledged_by", "resolved_at", "resolved_by", "escalated_at", "escalated_from", "notifications_sent", "update", "eq", "destroy", "clearInterval", "bind"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e3d3bce430341deddd85db7d3118f5982e5d17ab"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_26uroqvlnl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_26uroqvlnl();
cov_26uroqvlnl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_26uroqvlnl().f[0]++;
  cov_26uroqvlnl().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_26uroqvlnl().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_26uroqvlnl().s[3]++;
_export(exports, {
  get AlertLevel() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[1]++;
    cov_26uroqvlnl().s[4]++;
    return AlertLevel;
  },
  get AlertStatus() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[2]++;
    cov_26uroqvlnl().s[5]++;
    return AlertStatus;
  },
  get EnterpriseAlertSystem() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[3]++;
    cov_26uroqvlnl().s[6]++;
    return EnterpriseAlertSystem;
  },
  get NotificationType() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[4]++;
    cov_26uroqvlnl().s[7]++;
    return NotificationType;
  },
  get acknowledgeAlert() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[5]++;
    cov_26uroqvlnl().s[8]++;
    return acknowledgeAlert;
  },
  get enterpriseAlertSystem() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[6]++;
    cov_26uroqvlnl().s[9]++;
    return enterpriseAlertSystem;
  },
  get resolveAlert() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[7]++;
    cov_26uroqvlnl().s[10]++;
    return resolveAlert;
  },
  get triggerAlert() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[8]++;
    cov_26uroqvlnl().s[11]++;
    return triggerAlert;
  }
});
const _logger =
/* istanbul ignore next */
(cov_26uroqvlnl().s[12]++, require("../enterprise/logger"));
const _supabase =
/* istanbul ignore next */
(cov_26uroqvlnl().s[13]++, require("../integrations/supabase"));
const _email =
/* istanbul ignore next */
(cov_26uroqvlnl().s[14]++, require("../notifications/email"));
const _slack =
/* istanbul ignore next */
(cov_26uroqvlnl().s[15]++, require("../notifications/slack"));
// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente
let CacheUtils =
/* istanbul ignore next */
(cov_26uroqvlnl().s[16]++, null);
/* istanbul ignore next */
cov_26uroqvlnl().s[17]++;
if (typeof window === 'undefined') {
  /* istanbul ignore next */
  cov_26uroqvlnl().b[0][0]++;
  cov_26uroqvlnl().s[18]++;
  // Solo en servidor
  try {
    /* istanbul ignore next */
    cov_26uroqvlnl().s[19]++;
    CacheUtils = require('@/lib/cache-manager').CacheUtils;
  } catch (error) {
    /* istanbul ignore next */
    cov_26uroqvlnl().s[20]++;
    console.warn('[EnterpriseAlertSystem] CacheUtils not available:', error);
  }
} else
/* istanbul ignore next */
{
  cov_26uroqvlnl().b[0][1]++;
}
var AlertLevel =
/* istanbul ignore next */
(/*#__PURE__*/cov_26uroqvlnl().s[21]++, function (AlertLevel) {
  /* istanbul ignore next */
  cov_26uroqvlnl().f[9]++;
  cov_26uroqvlnl().s[22]++;
  AlertLevel["INFO"] = "info";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[23]++;
  AlertLevel["WARNING"] = "warning";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[24]++;
  AlertLevel["CRITICAL"] = "critical";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[25]++;
  AlertLevel["EMERGENCY"] = "emergency";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[26]++;
  return AlertLevel;
}({}));
var NotificationType =
/* istanbul ignore next */
(/*#__PURE__*/cov_26uroqvlnl().s[27]++, function (NotificationType) {
  /* istanbul ignore next */
  cov_26uroqvlnl().f[10]++;
  cov_26uroqvlnl().s[28]++;
  NotificationType["EMAIL"] = "email";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[29]++;
  NotificationType["SLACK"] = "slack";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[30]++;
  NotificationType["WEBHOOK"] = "webhook";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[31]++;
  NotificationType["SMS"] = "sms";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[32]++;
  NotificationType["PUSH"] = "push";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[33]++;
  NotificationType["LOG"] = "log";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[34]++;
  return NotificationType;
}({}));
var AlertStatus =
/* istanbul ignore next */
(/*#__PURE__*/cov_26uroqvlnl().s[35]++, function (AlertStatus) {
  /* istanbul ignore next */
  cov_26uroqvlnl().f[11]++;
  cov_26uroqvlnl().s[36]++;
  AlertStatus["ACTIVE"] = "active";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[37]++;
  AlertStatus["ACKNOWLEDGED"] = "acknowledged";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[38]++;
  AlertStatus["RESOLVED"] = "resolved";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[39]++;
  AlertStatus["SUPPRESSED"] = "suppressed";
  /* istanbul ignore next */
  cov_26uroqvlnl().s[40]++;
  return AlertStatus;
}({}));
class EnterpriseAlertSystem {
  constructor() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[12]++;
    cov_26uroqvlnl().s[41]++;
    this.alertRules = new Map();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[42]++;
    this.notificationChannels = new Map();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[43]++;
    this.escalationRules = new Map();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[44]++;
    this.activeAlerts = new Map();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[45]++;
    this.escalationInterval = null;
    /* istanbul ignore next */
    cov_26uroqvlnl().s[46]++;
    this.initializeDefaultChannels();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[47]++;
    this.initializeDefaultRules();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[48]++;
    this.startEscalationMonitoring();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[13]++;
    cov_26uroqvlnl().s[49]++;
    if (!EnterpriseAlertSystem.instance) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[1][0]++;
      cov_26uroqvlnl().s[50]++;
      EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[1][1]++;
    }
    cov_26uroqvlnl().s[51]++;
    return EnterpriseAlertSystem.instance;
  }
  /**
  * Configura un canal de notificación
  */
  setNotificationChannel(channel) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[14]++;
    cov_26uroqvlnl().s[52]++;
    this.notificationChannels.set(channel.id, channel);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[53]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Notification channel configured: ${channel.id}`, {
      type: channel.type,
      enabled: channel.enabled,
      levels: channel.levels
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Configura una regla de escalamiento
  */
  setEscalationRule(rule) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[15]++;
    cov_26uroqvlnl().s[54]++;
    this.escalationRules.set(rule.id, rule);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[55]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Escalation rule configured: ${rule.id}`, {
      level: rule.conditions.level,
      duration: rule.conditions.duration,
      enabled: rule.enabled
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Configura una regla de alerta
  */
  setAlertRule(rule) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[16]++;
    cov_26uroqvlnl().s[56]++;
    this.alertRules.set(rule.id, rule);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[57]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Alert rule configured: ${rule.id}`, {
      metricName: rule.metricName,
      threshold: rule.threshold,
      level: rule.level,
      enabled: rule.enabled
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Dispara una alerta
  */
  async triggerAlert(ruleId, metricName, value, message) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[17]++;
    const rule =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[58]++, this.alertRules.get(ruleId));
    /* istanbul ignore next */
    cov_26uroqvlnl().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[3][0]++, !rule) ||
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[3][1]++, !rule.enabled)) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[2][0]++;
      cov_26uroqvlnl().s[60]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[2][1]++;
    }
    // Verificar cooldown
    const existingAlert =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[61]++, Array.from(this.activeAlerts.values()).find(alert => {
      /* istanbul ignore next */
      cov_26uroqvlnl().f[18]++;
      cov_26uroqvlnl().s[62]++;
      return /* istanbul ignore next */(cov_26uroqvlnl().b[4][0]++, alert.ruleId === ruleId) &&
      /* istanbul ignore next */
      (cov_26uroqvlnl().b[4][1]++, alert.status === "active");
    }));
    /* istanbul ignore next */
    cov_26uroqvlnl().s[63]++;
    if (existingAlert) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[5][0]++;
      const cooldownEnd =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[64]++, new Date(existingAlert.triggeredAt));
      /* istanbul ignore next */
      cov_26uroqvlnl().s[65]++;
      cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[66]++;
      if (new Date() < cooldownEnd) {
        /* istanbul ignore next */
        cov_26uroqvlnl().b[6][0]++;
        cov_26uroqvlnl().s[67]++;
        return null; // Aún en cooldown
      } else
      /* istanbul ignore next */
      {
        cov_26uroqvlnl().b[6][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[5][1]++;
    }
    // Crear nueva alerta
    const alert =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[68]++, {
      id: this.generateAlertId(),
      ruleId: rule.id,
      ruleName: rule.name,
      level: rule.level,
      status: "active",
      message:
      /* istanbul ignore next */
      (cov_26uroqvlnl().b[7][0]++, message) ||
      /* istanbul ignore next */
      (cov_26uroqvlnl().b[7][1]++, `${rule.description} - Value: ${value}, Threshold: ${rule.threshold}`),
      metricName,
      value,
      threshold: rule.threshold,
      triggeredAt: new Date().toISOString(),
      notificationsSent: [],
      tags: rule.tags,
      metadata: rule.metadata
    });
    /* istanbul ignore next */
    cov_26uroqvlnl().s[69]++;
    this.activeAlerts.set(alert.id, alert);
    // Enviar notificaciones
    /* istanbul ignore next */
    cov_26uroqvlnl().s[70]++;
    await this.sendNotifications(alert, rule.channels);
    // Almacenar en base de datos
    /* istanbul ignore next */
    cov_26uroqvlnl().s[71]++;
    await this.storeAlert(alert);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[72]++;
    _logger.logger.warn(_logger.LogLevel.WARN, `Alert triggered: ${rule.name}`, {
      alertId: alert.id,
      level: alert.level,
      metricName: alert.metricName,
      value: alert.value,
      threshold: alert.threshold
    }, _logger.LogCategory.SYSTEM);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[73]++;
    return alert;
  }
  /**
  * Reconoce una alerta
  */
  async acknowledgeAlert(alertId, userId) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[19]++;
    const alert =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[74]++, this.activeAlerts.get(alertId));
    /* istanbul ignore next */
    cov_26uroqvlnl().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[9][0]++, !alert) ||
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[9][1]++, alert.status !== "active")) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[8][0]++;
      cov_26uroqvlnl().s[76]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[8][1]++;
    }
    cov_26uroqvlnl().s[77]++;
    alert.status = "acknowledged";
    /* istanbul ignore next */
    cov_26uroqvlnl().s[78]++;
    alert.acknowledgedAt = new Date().toISOString();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[79]++;
    alert.acknowledgedBy = userId;
    /* istanbul ignore next */
    cov_26uroqvlnl().s[80]++;
    await this.updateAlert(alert);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[81]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Alert acknowledged: ${alertId}`, {
      userId,
      level: alert.level,
      ruleName: alert.ruleName
    }, _logger.LogCategory.SYSTEM);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[82]++;
    return true;
  }
  /**
  * Resuelve una alerta
  */
  async resolveAlert(alertId, userId) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[20]++;
    const alert =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[83]++, this.activeAlerts.get(alertId));
    /* istanbul ignore next */
    cov_26uroqvlnl().s[84]++;
    if (!alert) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[10][0]++;
      cov_26uroqvlnl().s[85]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[10][1]++;
    }
    cov_26uroqvlnl().s[86]++;
    alert.status = "resolved";
    /* istanbul ignore next */
    cov_26uroqvlnl().s[87]++;
    alert.resolvedAt = new Date().toISOString();
    /* istanbul ignore next */
    cov_26uroqvlnl().s[88]++;
    alert.resolvedBy = userId;
    /* istanbul ignore next */
    cov_26uroqvlnl().s[89]++;
    await this.updateAlert(alert);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[90]++;
    this.activeAlerts.delete(alertId);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[91]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Alert resolved: ${alertId}`, {
      userId,
      level: alert.level,
      ruleName: alert.ruleName,
      duration: this.calculateDuration(alert.triggeredAt, alert.resolvedAt)
    }, _logger.LogCategory.SYSTEM);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[92]++;
    return true;
  }
  /**
  * Envía notificaciones para una alerta
  */
  async sendNotifications(alert, channelIds) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[21]++;
    const notifications =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[93]++, await Promise.allSettled(channelIds.map(channelId => {
      /* istanbul ignore next */
      cov_26uroqvlnl().f[22]++;
      cov_26uroqvlnl().s[94]++;
      return this.sendNotification(alert, channelId);
    })));
    // Log resultados
    /* istanbul ignore next */
    cov_26uroqvlnl().s[95]++;
    notifications.forEach((result, index) => {
      /* istanbul ignore next */
      cov_26uroqvlnl().f[23]++;
      const channelId =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[96]++, channelIds[index]);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[97]++;
      if (
      /* istanbul ignore next */
      (cov_26uroqvlnl().b[12][0]++, result.status === 'fulfilled') &&
      /* istanbul ignore next */
      (cov_26uroqvlnl().b[12][1]++, result.value)) {
        /* istanbul ignore next */
        cov_26uroqvlnl().b[11][0]++;
        cov_26uroqvlnl().s[98]++;
        alert.notificationsSent.push(result.value);
      } else {
        /* istanbul ignore next */
        cov_26uroqvlnl().b[11][1]++;
        cov_26uroqvlnl().s[99]++;
        if (result.status === 'rejected') {
          /* istanbul ignore next */
          cov_26uroqvlnl().b[13][0]++;
          cov_26uroqvlnl().s[100]++;
          _logger.logger.error(_logger.LogLevel.ERROR, `Failed to send notification to channel: ${channelId}`, {
            alertId: alert.id,
            error: result.reason
          }, _logger.LogCategory.SYSTEM);
        } else
        /* istanbul ignore next */
        {
          cov_26uroqvlnl().b[13][1]++;
        }
      }
    });
  }
  /**
  * Envía notificación a un canal específico
  */
  async sendNotification(alert, channelId) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[24]++;
    const channel =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[101]++, this.notificationChannels.get(channelId));
    /* istanbul ignore next */
    cov_26uroqvlnl().s[102]++;
    if (
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[15][0]++, !channel) ||
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[15][1]++, !channel.enabled) ||
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[15][2]++, !channel.levels.includes(alert.level))) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[14][0]++;
      cov_26uroqvlnl().s[103]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[14][1]++;
    }
    // Verificar rate limiting
    cov_26uroqvlnl().s[104]++;
    if (
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[17][0]++, channel.rateLimit) &&
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[17][1]++, !(await this.checkRateLimit(channelId, channel.rateLimit)))) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[16][0]++;
      cov_26uroqvlnl().s[105]++;
      _logger.logger.warn(_logger.LogLevel.WARN, `Rate limit exceeded for channel: ${channelId}`, {
        alertId: alert.id
      }, _logger.LogCategory.SYSTEM);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[106]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[16][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[107]++, Date.now());
    let success =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[108]++, false);
    let error;
    /* istanbul ignore next */
    cov_26uroqvlnl().s[109]++;
    try {
      /* istanbul ignore next */
      cov_26uroqvlnl().s[110]++;
      switch (channel.type) {
        case "email":
          /* istanbul ignore next */
          cov_26uroqvlnl().b[18][0]++;
          cov_26uroqvlnl().s[111]++;
          await this.sendEmailNotification(alert, channel);
          /* istanbul ignore next */
          cov_26uroqvlnl().s[112]++;
          break;
        case "slack":
          /* istanbul ignore next */
          cov_26uroqvlnl().b[18][1]++;
          cov_26uroqvlnl().s[113]++;
          await this.sendSlackNotification(alert, channel);
          /* istanbul ignore next */
          cov_26uroqvlnl().s[114]++;
          break;
        case "webhook":
          /* istanbul ignore next */
          cov_26uroqvlnl().b[18][2]++;
          cov_26uroqvlnl().s[115]++;
          await this.sendWebhookNotification(alert, channel);
          /* istanbul ignore next */
          cov_26uroqvlnl().s[116]++;
          break;
        case "sms":
          /* istanbul ignore next */
          cov_26uroqvlnl().b[18][3]++;
          cov_26uroqvlnl().s[117]++;
          await this.sendSMSNotification(alert, channel);
          /* istanbul ignore next */
          cov_26uroqvlnl().s[118]++;
          break;
        case "log":
          /* istanbul ignore next */
          cov_26uroqvlnl().b[18][4]++;
          cov_26uroqvlnl().s[119]++;
          await this.sendLogNotification(alert, channel);
          /* istanbul ignore next */
          cov_26uroqvlnl().s[120]++;
          break;
        default:
          /* istanbul ignore next */
          cov_26uroqvlnl().b[18][5]++;
          cov_26uroqvlnl().s[121]++;
          throw new Error(`Unsupported notification type: ${channel.type}`);
      }
      /* istanbul ignore next */
      cov_26uroqvlnl().s[122]++;
      success = true;
    } catch (err) {
      /* istanbul ignore next */
      cov_26uroqvlnl().s[123]++;
      error = err instanceof Error ?
      /* istanbul ignore next */
      (cov_26uroqvlnl().b[19][0]++, err.message) :
      /* istanbul ignore next */
      (cov_26uroqvlnl().b[19][1]++, 'Unknown error');
    }
    const notificationLog =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[124]++, {
      id: this.generateNotificationId(),
      channelId,
      channelType: channel.type,
      sentAt: new Date().toISOString(),
      success,
      error,
      responseTime: Date.now() - startTime
    });
    /* istanbul ignore next */
    cov_26uroqvlnl().s[125]++;
    return notificationLog;
  }
  /**
  * Monitoreo de escalamiento automático
  */
  async checkEscalations() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[25]++;
    cov_26uroqvlnl().s[126]++;
    for (const alert of this.activeAlerts.values()) {
      /* istanbul ignore next */
      cov_26uroqvlnl().s[127]++;
      if (alert.status !== "active") {
        /* istanbul ignore next */
        cov_26uroqvlnl().b[20][0]++;
        cov_26uroqvlnl().s[128]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_26uroqvlnl().b[20][1]++;
      }
      const rule =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[129]++, this.alertRules.get(alert.ruleId));
      /* istanbul ignore next */
      cov_26uroqvlnl().s[130]++;
      if (!rule) {
        /* istanbul ignore next */
        cov_26uroqvlnl().b[21][0]++;
        cov_26uroqvlnl().s[131]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_26uroqvlnl().b[21][1]++;
      }
      // Verificar reglas de escalamiento
      cov_26uroqvlnl().s[132]++;
      for (const escalationRuleId of rule.escalationRules) {
        const escalationRule =
        /* istanbul ignore next */
        (cov_26uroqvlnl().s[133]++, this.escalationRules.get(escalationRuleId));
        /* istanbul ignore next */
        cov_26uroqvlnl().s[134]++;
        if (
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[23][0]++, !escalationRule) ||
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[23][1]++, !escalationRule.enabled)) {
          /* istanbul ignore next */
          cov_26uroqvlnl().b[22][0]++;
          cov_26uroqvlnl().s[135]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_26uroqvlnl().b[22][1]++;
        }
        // Verificar condiciones de escalamiento
        cov_26uroqvlnl().s[136]++;
        if (this.shouldEscalate(alert, escalationRule)) {
          /* istanbul ignore next */
          cov_26uroqvlnl().b[24][0]++;
          cov_26uroqvlnl().s[137]++;
          await this.escalateAlert(alert, escalationRule);
        } else
        /* istanbul ignore next */
        {
          cov_26uroqvlnl().b[24][1]++;
        }
      }
    }
  }
  /**
  * Verifica si una alerta debe escalarse
  */
  shouldEscalate(alert, rule) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[26]++;
    cov_26uroqvlnl().s[138]++;
    // Verificar nivel
    if (alert.level !== rule.conditions.level) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[25][0]++;
      cov_26uroqvlnl().s[139]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[25][1]++;
    }
    // Verificar duración
    const alertAge =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[140]++, Date.now() - new Date(alert.triggeredAt).getTime());
    const requiredDuration =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[141]++, rule.conditions.duration * 60 * 1000); // convertir a ms
    /* istanbul ignore next */
    cov_26uroqvlnl().s[142]++;
    if (alertAge < requiredDuration) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[26][0]++;
      cov_26uroqvlnl().s[143]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[26][1]++;
    }
    // Verificar si ya fue escalada
    cov_26uroqvlnl().s[144]++;
    if (alert.escalatedAt) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[27][0]++;
      cov_26uroqvlnl().s[145]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[27][1]++;
    }
    cov_26uroqvlnl().s[146]++;
    return true;
  }
  /**
  * Escala una alerta
  */
  async escalateAlert(alert, rule) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[27]++;
    const originalLevel =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[147]++, alert.level);
    // Actualizar nivel si es necesario
    /* istanbul ignore next */
    cov_26uroqvlnl().s[148]++;
    if (rule.actions.escalateToLevel) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[28][0]++;
      cov_26uroqvlnl().s[149]++;
      alert.level = rule.actions.escalateToLevel;
      /* istanbul ignore next */
      cov_26uroqvlnl().s[150]++;
      alert.escalatedFrom = originalLevel;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[28][1]++;
    }
    cov_26uroqvlnl().s[151]++;
    alert.escalatedAt = new Date().toISOString();
    // Enviar notificaciones de escalamiento
    /* istanbul ignore next */
    cov_26uroqvlnl().s[152]++;
    await this.sendNotifications(alert, rule.actions.notifyChannels);
    // Asignar a usuario si es necesario
    /* istanbul ignore next */
    cov_26uroqvlnl().s[153]++;
    if (rule.actions.assignToUser) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[29][0]++;
      cov_26uroqvlnl().s[154]++;
      alert.metadata = {
        ...alert.metadata,
        assignedTo: rule.actions.assignToUser
      };
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[29][1]++;
    }
    cov_26uroqvlnl().s[155]++;
    await this.updateAlert(alert);
    /* istanbul ignore next */
    cov_26uroqvlnl().s[156]++;
    _logger.logger.error(_logger.LogLevel.ERROR, `Alert escalated: ${alert.id}`, {
      originalLevel,
      newLevel: alert.level,
      escalationRule: rule.name,
      duration: this.calculateDuration(alert.triggeredAt, alert.escalatedAt)
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Implementaciones de notificación específicas
  */
  async sendEmailNotification(alert, channel) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[28]++;
    cov_26uroqvlnl().s[157]++;
    try {
      const subject =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[158]++, `[${alert.level.toUpperCase()}] ${alert.ruleName}`);
      const emailData =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[159]++, {
        to:
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[30][0]++, channel.config.to) ||
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[30][1]++, ['admin@example.com']),
        subject,
        template: 'alert-notification',
        data: {
          alert,
          level: alert.level.toUpperCase(),
          timestamp: new Date(alert.triggeredAt).toLocaleString(),
          message: alert.message,
          metricName: alert.metricName,
          value: alert.value,
          threshold: alert.threshold
        },
        priority:
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[32][0]++, alert.level === "critical") ||
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[32][1]++, alert.level === "emergency") ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[31][0]++, 'high') :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[31][1]++, 'normal')
      });
      /* istanbul ignore next */
      cov_26uroqvlnl().s[160]++;
      await _email.emailService.sendNotification(emailData);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[161]++;
      _logger.logger.info(_logger.LogLevel.INFO, `Email notification sent successfully`, {
        alertId: alert.id,
        to: channel.config.to,
        subject
      }, _logger.LogCategory.SYSTEM);
    } catch (error) {
      /* istanbul ignore next */
      cov_26uroqvlnl().s[162]++;
      _logger.logger.error(_logger.LogLevel.ERROR, `Failed to send email notification`, {
        alertId: alert.id,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[33][1]++, 'Unknown error')
      }, _logger.LogCategory.SYSTEM);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[163]++;
      throw error;
    }
  }
  async sendSlackNotification(alert, channel) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[29]++;
    cov_26uroqvlnl().s[164]++;
    try {
      const alertData =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[165]++, {
        title: `${alert.level.toUpperCase()}: ${alert.ruleName}`,
        message: alert.message,
        severity:
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[35][0]++, alert.level === "critical") ||
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[35][1]++, alert.level === "emergency") ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[34][0]++, 'error') :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[34][1]++, alert.level === "warning" ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[36][0]++, 'warning') :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[36][1]++, 'info')),
        details: {
          'Alert ID': alert.id,
          'Timestamp': new Date(alert.triggeredAt).toLocaleString(),
          'Metric': alert.metricName,
          'Value':
          /* istanbul ignore next */
          (cov_26uroqvlnl().b[37][0]++, alert.value?.toString()) ||
          /* istanbul ignore next */
          (cov_26uroqvlnl().b[37][1]++, 'N/A'),
          'Threshold':
          /* istanbul ignore next */
          (cov_26uroqvlnl().b[38][0]++, alert.threshold?.toString()) ||
          /* istanbul ignore next */
          (cov_26uroqvlnl().b[38][1]++, 'N/A'),
          'Status': alert.status,
          ...alert.tags
        }
      });
      /* istanbul ignore next */
      cov_26uroqvlnl().s[166]++;
      await _slack.slackService.sendSystemAlert(alertData);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[167]++;
      _logger.logger.info(_logger.LogLevel.INFO, `Slack notification sent successfully`, {
        alertId: alert.id,
        channel: channel.config.channel,
        webhook: channel.config.webhookUrl ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[39][0]++, 'configured') :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[39][1]++, 'missing')
      }, _logger.LogCategory.SYSTEM);
    } catch (error) {
      /* istanbul ignore next */
      cov_26uroqvlnl().s[168]++;
      _logger.logger.error(_logger.LogLevel.ERROR, `Failed to send Slack notification`, {
        alertId: alert.id,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[40][0]++, error.message) :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[40][1]++, 'Unknown error')
      }, _logger.LogCategory.SYSTEM);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[169]++;
      throw error;
    }
  }
  async sendWebhookNotification(alert, channel) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[30]++;
    cov_26uroqvlnl().s[170]++;
    if (!channel.config.url) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[41][0]++;
      cov_26uroqvlnl().s[171]++;
      throw new Error('Webhook URL not configured');
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[41][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[172]++, await fetch(channel.config.url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...(
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[42][0]++, channel.config.headers) ||
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[42][1]++, {}))
      },
      body: JSON.stringify({
        alert,
        timestamp: new Date().toISOString(),
        source: 'pinteya-ecommerce'
      })
    }));
    /* istanbul ignore next */
    cov_26uroqvlnl().s[173]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[43][0]++;
      cov_26uroqvlnl().s[174]++;
      throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[43][1]++;
    }
  }
  async sendSMSNotification(alert, channel) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[31]++;
    cov_26uroqvlnl().s[175]++;
    // TODO: Implementar envío de SMS
    _logger.logger.info(_logger.LogLevel.INFO, `SMS notification sent`, {
      alertId: alert.id,
      to: channel.config.phoneNumber
    }, _logger.LogCategory.SYSTEM);
  }
  async sendLogNotification(alert, channel) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[32]++;
    const logLevel =
    /* istanbul ignore next */
    (cov_26uroqvlnl().s[176]++,
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[45][0]++, alert.level === "emergency") ||
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[45][1]++, alert.level === "critical") ?
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[44][0]++, _logger.LogLevel.ERROR) :
    /* istanbul ignore next */
    (cov_26uroqvlnl().b[44][1]++, _logger.LogLevel.WARN));
    /* istanbul ignore next */
    cov_26uroqvlnl().s[177]++;
    _logger.logger.log(logLevel, `ALERT: ${alert.message}`, {
      alertId: alert.id,
      level: alert.level,
      metricName: alert.metricName,
      value: alert.value,
      threshold: alert.threshold,
      ruleName: alert.ruleName
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Inicializa canales por defecto
  */
  initializeDefaultChannels() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[33]++;
    cov_26uroqvlnl().s[178]++;
    // Canal de log por defecto
    this.setNotificationChannel({
      id: 'default_log',
      type: "log",
      name: 'Default Log Channel',
      config: {},
      enabled: true,
      levels: ["info", "warning", "critical", "emergency"]
    });
    // Canal de webhook por defecto (deshabilitado)
    /* istanbul ignore next */
    cov_26uroqvlnl().s[179]++;
    this.setNotificationChannel({
      id: 'default_webhook',
      type: "webhook",
      name: 'Default Webhook Channel',
      config: {
        url:
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[46][0]++, process.env.ALERT_WEBHOOK_URL) ||
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[46][1]++, '')
      },
      enabled: false,
      levels: ["critical", "emergency"],
      rateLimit: {
        maxPerHour: 10,
        maxPerDay: 50
      }
    });
  }
  /**
  * Inicializa reglas por defecto
  */
  initializeDefaultRules() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[34]++;
    cov_26uroqvlnl().s[180]++;
    // Regla de escalamiento para alertas críticas
    this.setEscalationRule({
      id: 'critical_escalation',
      name: 'Critical Alert Escalation',
      enabled: true,
      conditions: {
        level: "critical",
        duration: 15 // 15 minutos
      },
      actions: {
        escalateToLevel: "emergency",
        notifyChannels: ['default_log', 'default_webhook']
      }
    });
  }
  /**
  * Inicia monitoreo de escalamiento
  */
  startEscalationMonitoring() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[35]++;
    cov_26uroqvlnl().s[181]++;
    this.escalationInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_26uroqvlnl().f[36]++;
      cov_26uroqvlnl().s[182]++;
      this.checkEscalations();
    }, 60000); // Verificar cada minuto
  }
  /**
  * Funciones auxiliares
  */
  generateAlertId() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[37]++;
    cov_26uroqvlnl().s[183]++;
    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generateNotificationId() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[38]++;
    cov_26uroqvlnl().s[184]++;
    return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  calculateDuration(start, end) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[39]++;
    cov_26uroqvlnl().s[185]++;
    return Math.round((new Date(end).getTime() - new Date(start).getTime()) / 1000 / 60); // minutos
  }
  async checkRateLimit(channelId, rateLimit) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[40]++;
    cov_26uroqvlnl().s[186]++;
    // TODO: Implementar verificación de rate limiting con Redis
    return true;
  }
  async storeAlert(alert) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[41]++;
    cov_26uroqvlnl().s[187]++;
    try {
      const supabase =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[188]++, (0, _supabase.getSupabaseClient)(true));
      /* istanbul ignore next */
      cov_26uroqvlnl().s[189]++;
      if (!supabase) {
        /* istanbul ignore next */
        cov_26uroqvlnl().b[47][0]++;
        cov_26uroqvlnl().s[190]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_26uroqvlnl().b[47][1]++;
      }
      cov_26uroqvlnl().s[191]++;
      await supabase.from('enterprise_alerts').insert({
        id: alert.id,
        rule_id: alert.ruleId,
        rule_name: alert.ruleName,
        level: alert.level,
        status: alert.status,
        message: alert.message,
        metric_name: alert.metricName,
        value: alert.value,
        threshold: alert.threshold,
        triggered_at: alert.triggeredAt,
        acknowledged_at: alert.acknowledgedAt,
        acknowledged_by: alert.acknowledgedBy,
        resolved_at: alert.resolvedAt,
        resolved_by: alert.resolvedBy,
        escalated_at: alert.escalatedAt,
        escalated_from: alert.escalatedFrom,
        notifications_sent: alert.notificationsSent,
        tags: alert.tags,
        metadata: alert.metadata
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_26uroqvlnl().s[192]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to store alert', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[48][0]++, error.message) :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[48][1]++, 'Unknown error'),
        alertId: alert.id
      }, _logger.LogCategory.SYSTEM);
    }
  }
  async updateAlert(alert) {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[42]++;
    cov_26uroqvlnl().s[193]++;
    try {
      const supabase =
      /* istanbul ignore next */
      (cov_26uroqvlnl().s[194]++, (0, _supabase.getSupabaseClient)(true));
      /* istanbul ignore next */
      cov_26uroqvlnl().s[195]++;
      if (!supabase) {
        /* istanbul ignore next */
        cov_26uroqvlnl().b[49][0]++;
        cov_26uroqvlnl().s[196]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_26uroqvlnl().b[49][1]++;
      }
      cov_26uroqvlnl().s[197]++;
      await supabase.from('enterprise_alerts').update({
        level: alert.level,
        status: alert.status,
        acknowledged_at: alert.acknowledgedAt,
        acknowledged_by: alert.acknowledgedBy,
        resolved_at: alert.resolvedAt,
        resolved_by: alert.resolvedBy,
        escalated_at: alert.escalatedAt,
        escalated_from: alert.escalatedFrom,
        notifications_sent: alert.notificationsSent,
        metadata: alert.metadata
      }).eq('id', alert.id);
    } catch (error) {
      /* istanbul ignore next */
      cov_26uroqvlnl().s[198]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to update alert', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[50][0]++, error.message) :
        /* istanbul ignore next */
        (cov_26uroqvlnl().b[50][1]++, 'Unknown error'),
        alertId: alert.id
      }, _logger.LogCategory.SYSTEM);
    }
  }
  /**
  * Limpia recursos
  */
  destroy() {
    /* istanbul ignore next */
    cov_26uroqvlnl().f[43]++;
    cov_26uroqvlnl().s[199]++;
    if (this.escalationInterval) {
      /* istanbul ignore next */
      cov_26uroqvlnl().b[51][0]++;
      cov_26uroqvlnl().s[200]++;
      clearInterval(this.escalationInterval);
      /* istanbul ignore next */
      cov_26uroqvlnl().s[201]++;
      this.escalationInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_26uroqvlnl().b[51][1]++;
    }
  }
}
const enterpriseAlertSystem =
/* istanbul ignore next */
(cov_26uroqvlnl().s[202]++, EnterpriseAlertSystem.getInstance());
const triggerAlert =
/* istanbul ignore next */
(cov_26uroqvlnl().s[203]++, enterpriseAlertSystem.triggerAlert.bind(enterpriseAlertSystem));
const acknowledgeAlert =
/* istanbul ignore next */
(cov_26uroqvlnl().s[204]++, enterpriseAlertSystem.acknowledgeAlert.bind(enterpriseAlertSystem));
const resolveAlert =
/* istanbul ignore next */
(cov_26uroqvlnl().s[205]++, enterpriseAlertSystem.resolveAlert.bind(enterpriseAlertSystem));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,