{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\metrics.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - METRICS TESTS\n// ===================================\n\nimport { MetricsCollector, metricsCollector } from '@/lib/enterprise/metrics'\n\n// Mock Redis\njest.mock('@/lib/redis', () => ({\n  redisCache: {\n    incr: jest.fn(),\n    expire: jest.fn(),\n    get: jest.fn(),\n    client: {\n      lpush: jest.fn(),\n      ltrim: jest.fn(),\n      expire: jest.fn(),\n      lrange: jest.fn(),\n    },\n  },\n}))\n\n// Mock logger\njest.mock('@/lib/enterprise/logger', () => ({\n  logger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n  LogLevel: {\n    DEBUG: 'debug',\n    INFO: 'info',\n    WARN: 'warn',\n    ERROR: 'error',\n  },\n  LogCategory: {\n    SYSTEM: 'system',\n  },\n}))\n\ndescribe('MetricsCollector', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const instance1 = MetricsCollector.getInstance()\n      const instance2 = MetricsCollector.getInstance()\n\n      expect(instance1).toBe(instance2)\n      expect(instance1).toBe(metricsCollector)\n    })\n  })\n\n  describe('recordRequest', () => {\n    it('should record successful request metrics', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      await metricsCollector.recordRequest('create-preference', 'POST', 200, 1500, {\n        clientIP: '192.168.1.1',\n      })\n\n      // Verificar que se registraron las métricas correctas\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:create-preference:POST:requests:total')\n      )\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:create-preference:POST:requests:success')\n      )\n      expect(redisCache.client.lpush).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:create-preference:POST:response_time'),\n        '1500'\n      )\n    })\n\n    it('should record error request metrics', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      await metricsCollector.recordRequest('create-preference', 'POST', 500, 2000)\n\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:create-preference:POST:requests:total')\n      )\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:create-preference:POST:requests:error')\n      )\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:create-preference:POST:errors:5xx')\n      )\n    })\n\n    it('should record rate limited request metrics', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      await metricsCollector.recordRequest('webhook', 'POST', 429, 500)\n\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:webhook:POST:requests:total')\n      )\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:webhook:POST:requests:rate_limited')\n      )\n    })\n\n    it('should categorize 4xx errors correctly', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      await metricsCollector.recordRequest('create-preference', 'POST', 400, 300)\n\n      expect(redisCache.incr).toHaveBeenCalledWith(\n        expect.stringContaining('metrics:create-preference:POST:errors:4xx')\n      )\n    })\n\n    it('should handle errors gracefully', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const { logger } = require('@/lib/enterprise/logger')\n\n      redisCache.incr.mockRejectedValue(new Error('Redis error'))\n\n      // No debería lanzar error\n      await expect(\n        metricsCollector.recordRequest('test-endpoint', 'GET', 200, 1000)\n      ).resolves.not.toThrow()\n\n      expect(logger.error).toHaveBeenCalled()\n    })\n  })\n\n  describe('recordRetry', () => {\n    it('should record successful retry metrics without errors', async () => {\n      await expect(\n        metricsCollector.recordRetry('createPaymentPreference', 3, true, 5000)\n      ).resolves.not.toThrow()\n    })\n\n    it('should record failed retry metrics without errors', async () => {\n      await expect(\n        metricsCollector.recordRetry('getPaymentInfo', 2, false, 3000)\n      ).resolves.not.toThrow()\n    })\n  })\n\n  describe('recordRateLimit', () => {\n    it('should record rate limit metrics without errors', async () => {\n      await expect(\n        metricsCollector.recordRateLimit('create-preference', false, 8, 10)\n      ).resolves.not.toThrow()\n    })\n\n    it('should record blocked rate limit metrics without errors', async () => {\n      await expect(metricsCollector.recordRateLimit('webhook', true, 0, 100)).resolves.not.toThrow()\n    })\n  })\n\n  describe('getApiMetrics', () => {\n    it('should return empty metrics when no data available', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      // Mock empty responses\n      redisCache.get.mockResolvedValue(null)\n      redisCache.client.lrange.mockResolvedValue([])\n\n      const metrics = await metricsCollector.getApiMetrics('test-endpoint', 'GET', 1)\n\n      expect(metrics).toEqual({\n        requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\n        response_times: { count: 0, sum: 0, avg: 0, min: 0, max: 0, p95: 0, p99: 0 },\n        error_rates: { '4xx': 0, '5xx': 0, network: 0, timeout: 0 },\n        retry_stats: {\n          total_retries: 0,\n          successful_retries: 0,\n          failed_retries: 0,\n          avg_attempts: 0,\n        },\n      })\n    })\n\n    it('should aggregate metrics correctly', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      // Mock counter data\n      redisCache.get.mockImplementation(key => {\n        if (key.includes('total')) {\n          return '100'\n        }\n        if (key.includes('success')) {\n          return '95'\n        }\n        if (key.includes('error')) {\n          return '5'\n        }\n        return '0'\n      })\n\n      // Mock response time data\n      redisCache.client.lrange.mockResolvedValue(['1000', '1500', '2000', '800', '1200'])\n\n      const metrics = await metricsCollector.getApiMetrics('test-endpoint', 'GET', 1)\n\n      expect(metrics.requests.total).toBeGreaterThan(0)\n      expect(metrics.requests.success).toBeGreaterThan(0)\n      expect(metrics.response_times.count).toBeGreaterThan(0)\n      expect(metrics.response_times.avg).toBeGreaterThan(0)\n    })\n\n    it('should handle errors gracefully and return empty metrics', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const { logger } = require('@/lib/enterprise/logger')\n\n      redisCache.get.mockRejectedValue(new Error('Redis error'))\n\n      const metrics = await metricsCollector.getApiMetrics('test-endpoint', 'GET', 1)\n\n      expect(logger.error).toHaveBeenCalled()\n      expect(metrics.requests.total).toBe(0)\n    })\n  })\n\n  describe('Window Key Generation', () => {\n    it('should generate consistent window keys', () => {\n      const collector = new (MetricsCollector as any)()\n      const timestamp1 = 1640995200000 // 2022-01-01 00:00:00\n      const timestamp2 = 1640995260000 // 2022-01-01 00:01:00 (same window)\n      const timestamp3 = 1640995500000 // 2022-01-01 00:05:00 (next window)\n\n      const key1 = collector.getWindowKey('test:metric', timestamp1)\n      const key2 = collector.getWindowKey('test:metric', timestamp2)\n      const key3 = collector.getWindowKey('test:metric', timestamp3)\n\n      expect(key1).toBe(key2) // Same 5-minute window\n      expect(key1).not.toBe(key3) // Different window\n    })\n  })\n\n  describe('Value Statistics', () => {\n    it('should calculate percentiles correctly', async () => {\n      const collector = metricsCollector as any\n      const { redisCache } = require('@/lib/redis')\n\n      // Mock response times: [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n      const values = Array.from({ length: 10 }, (_, i) => ((i + 1) * 100).toString())\n\n      // Mock para que solo devuelva valores una vez\n      redisCache.client.lrange.mockResolvedValueOnce(values).mockResolvedValue([])\n\n      const stats = await collector.getValueStats('test:response_time', 0, Date.now())\n\n      expect(stats.count).toBe(10)\n      expect(stats.min).toBe(100)\n      expect(stats.max).toBe(1000)\n      expect(stats.avg).toBe(550)\n      expect(stats.p95).toBeGreaterThan(900) // 95th percentile\n      expect(stats.p99).toBeGreaterThan(950) // 99th percentile\n    })\n\n    it('should handle empty value arrays', async () => {\n      const collector = metricsCollector as any\n      const { redisCache } = require('@/lib/redis')\n\n      redisCache.client.lrange.mockResolvedValue([])\n\n      const stats = await collector.getValueStats('test:response_time', 0, Date.now())\n\n      expect(stats).toEqual({\n        count: 0,\n        sum: 0,\n        avg: 0,\n        min: 0,\n        max: 0,\n        p95: 0,\n        p99: 0,\n      })\n    })\n  })\n})\n"],"names":["jest","mock","redisCache","incr","fn","expire","get","client","lpush","ltrim","lrange","logger","debug","info","warn","error","LogLevel","DEBUG","INFO","WARN","ERROR","LogCategory","SYSTEM","describe","beforeEach","clearAllMocks","it","instance1","MetricsCollector","getInstance","instance2","expect","toBe","metricsCollector","require","recordRequest","clientIP","toHaveBeenCalledWith","stringContaining","mockRejectedValue","Error","resolves","not","toThrow","toHaveBeenCalled","recordRetry","recordRateLimit","mockResolvedValue","metrics","getApiMetrics","toEqual","requests","total","success","rate_limited","response_times","count","sum","avg","min","max","p95","p99","error_rates","network","timeout","retry_stats","total_retries","successful_retries","failed_retries","avg_attempts","mockImplementation","key","includes","toBeGreaterThan","collector","timestamp1","timestamp2","timestamp3","key1","getWindowKey","key2","key3","values","Array","from","length","_","i","toString","mockResolvedValueOnce","stats","getValueStats","Date","now"],"mappings":"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"}