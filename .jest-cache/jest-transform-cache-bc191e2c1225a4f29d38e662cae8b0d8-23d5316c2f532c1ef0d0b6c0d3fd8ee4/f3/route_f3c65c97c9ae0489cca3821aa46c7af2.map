{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\search\\trending\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: /api/search/trending - Búsquedas populares/trending\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\nexport interface TrendingSearch {\r\n  id: string;\r\n  query: string;\r\n  count: number;\r\n  category?: string;\r\n  href: string;\r\n  type: 'trending';\r\n}\r\n\r\nexport interface TrendingSearchesResponse {\r\n  trending: TrendingSearch[];\r\n  lastUpdated: string;\r\n}\r\n\r\n// Búsquedas trending generadas dinámicamente basadas en productos reales\r\nasync function generateDynamicTrendingSearches(supabase: any, limit: number = 6): Promise<TrendingSearch[]> {\r\n  try {\r\n    // Obtener productos más populares y marcas para generar búsquedas trending realistas\r\n    const { data: products, error: productsError } = await supabase\r\n      .from('products')\r\n      .select('name, brand, category_id, categories(name)')\r\n      .eq('is_active', true)\r\n      .limit(20);\r\n\r\n    if (productsError || !products) {\r\n      console.warn('Error obteniendo productos para trending:', productsError);\r\n      return getFallbackTrendingSearches(limit);\r\n    }\r\n\r\n    // Generar búsquedas trending basadas en productos reales\r\n    const trendingSearches: TrendingSearch[] = [];\r\n    const usedQueries = new Set<string>();\r\n\r\n    // Agregar búsquedas por marca\r\n    const brands = [...new Set(products.map(p => p.brand).filter(Boolean))];\r\n    brands.slice(0, 2).forEach((brand, index) => {\r\n      if (brand && !usedQueries.has(brand.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-brand-${index + 1}`,\r\n          query: brand,\r\n          count: Math.floor(Math.random() * 50) + 20, // Rango realista 20-70\r\n          category: \"marcas\",\r\n          href: `/search?q=${encodeURIComponent(brand)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(brand.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Agregar búsquedas por categoría\r\n    const categories = [...new Set(products.map(p => p.categories?.name).filter(Boolean))];\r\n    categories.slice(0, 2).forEach((category, index) => {\r\n      if (category && !usedQueries.has(category.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-category-${index + 1}`,\r\n          query: category,\r\n          count: Math.floor(Math.random() * 40) + 15, // Rango realista 15-55\r\n          category: \"pinturas\",\r\n          href: `/search?q=${encodeURIComponent(category)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(category.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Agregar búsquedas por productos específicos\r\n    const popularProducts = products.slice(0, 2);\r\n    popularProducts.forEach((product, index) => {\r\n      const productName = product.name;\r\n      if (productName && !usedQueries.has(productName.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-product-${index + 1}`,\r\n          query: productName,\r\n          count: Math.floor(Math.random() * 30) + 10, // Rango realista 10-40\r\n          category: \"productos\",\r\n          href: `/search?q=${encodeURIComponent(productName)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(productName.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Ordenar por count descendente y limitar\r\n    return trendingSearches\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, limit);\r\n\r\n  } catch (error) {\r\n    console.error('Error generando trending searches dinámicas:', error);\r\n    return getFallbackTrendingSearches(limit);\r\n  }\r\n}\r\n\r\n// Fallback con datos mínimos (solo si falla todo lo demás)\r\nfunction getFallbackTrendingSearches(limit: number = 6): TrendingSearch[] {\r\n  const fallbackSearches = [\r\n    { query: \"Pintura\", category: \"pinturas\" },\r\n    { query: \"Esmalte\", category: \"pinturas\" },\r\n    { query: \"Látex\", category: \"pinturas\" },\r\n    { query: \"Barniz\", category: \"pinturas\" },\r\n    { query: \"Imprimación\", category: \"pinturas\" },\r\n    { query: \"Rodillos\", category: \"herramientas\" }\r\n  ];\r\n\r\n  return fallbackSearches.slice(0, limit).map((search, index) => ({\r\n    id: `fallback-${index + 1}`,\r\n    query: search.query,\r\n    count: Math.floor(Math.random() * 20) + 5, // Rango mínimo 5-25\r\n    category: search.category,\r\n    href: `/search?q=${encodeURIComponent(search.query.toLowerCase())}`,\r\n    type: \"trending\" as const\r\n  }));\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de búsqueda\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.search,\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.log({\r\n        type: 'data_access',\r\n        severity: 'low',\r\n        message: 'Trending search API accessed',\r\n        context: securityLogger.context,\r\n        metadata: {\r\n          endpoint: '/api/search/trending',\r\n          method: 'GET',\r\n          userAgent: request.headers.get('user-agent')\r\n        }\r\n      });\r\n\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get('limit') || '6');\r\n    const days = parseInt(searchParams.get('days') || '7');\r\n    const category = searchParams.get('category');\r\n\r\n    console.log('🔥 API /api/search/trending: Obteniendo búsquedas trending', {\r\n      limit,\r\n      days,\r\n      category\r\n    });\r\n\r\n    const supabase = getSupabaseClient();\r\n\r\n    let trendingSearches: TrendingSearch[] = [];\r\n\r\n    // Intentar obtener búsquedas trending reales del sistema de analytics\r\n    if (supabase) {\r\n      try {\r\n        const startDate = new Date();\r\n        startDate.setDate(startDate.getDate() - days);\r\n\r\n        // Query para obtener búsquedas más populares de analytics_events\r\n        let query = supabase\r\n          .from('analytics_events')\r\n          .select('label, metadata')\r\n          .eq('category', 'search')\r\n          .eq('action', 'search_query')\r\n          .gte('created_at', startDate.toISOString())\r\n          .not('label', 'is', null);\r\n\r\n        if (category) {\r\n          query = query.eq('metadata->>category', category);\r\n        }\r\n\r\n        const { data: analyticsData, error } = await withDatabaseTimeout(\r\n          async (signal) => await query,\r\n          API_TIMEOUTS.database\r\n        );\r\n\r\n        if (!error && analyticsData && analyticsData.length > 0) {\r\n          // Procesar datos de analytics para obtener trending\r\n          const searchCounts = new Map<string, number>();\r\n          const searchCategories = new Map<string, string>();\r\n\r\n          analyticsData.forEach((event) => {\r\n            if (event.label) {\r\n              const query = event.label.toLowerCase().trim();\r\n              if (query.length > 2) { // Solo queries de más de 2 caracteres\r\n                searchCounts.set(query, (searchCounts.get(query) || 0) + 1);\r\n                \r\n                // Extraer categoría del metadata si existe\r\n                if (event.metadata && event.metadata.category) {\r\n                  searchCategories.set(query, event.metadata.category);\r\n                }\r\n              }\r\n            }\r\n          });\r\n\r\n          // Convertir a array y ordenar por popularidad\r\n          const sortedSearches = Array.from(searchCounts.entries())\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, limit);\r\n\r\n          trendingSearches = sortedSearches.map(([query, count], index) => ({\r\n            id: `trending-real-${index + 1}`,\r\n            query: query.charAt(0).toUpperCase() + query.slice(1),\r\n            count,\r\n            category: searchCategories.get(query),\r\n            href: `/search?q=${encodeURIComponent(query)}`,\r\n            type: 'trending' as const\r\n          }));\r\n\r\n        }\r\n      } catch (analyticsError) {\r\n        console.warn('⚠️ Error obteniendo trending de analytics, usando fallback:', analyticsError);\r\n      }\r\n    }\r\n\r\n    // Si no hay datos reales o hay pocos, generar dinámicamente\r\n    if (trendingSearches.length < 3) {\r\n      console.log('🔄 Generando búsquedas trending dinámicas desde productos');\r\n\r\n      try {\r\n        const dynamicSearches = await generateDynamicTrendingSearches(supabase, limit);\r\n\r\n        // Filtrar por categoría si se especifica\r\n        let filteredSearches = dynamicSearches;\r\n        if (category) {\r\n          filteredSearches = dynamicSearches.filter(\r\n            search => search.category === category\r\n          );\r\n        }\r\n\r\n        // Combinar datos reales con dinámicos si es necesario\r\n        const needed = limit - trendingSearches.length;\r\n        const additionalSearches = filteredSearches.slice(0, needed);\r\n\r\n        trendingSearches = [...trendingSearches, ...additionalSearches];\r\n      } catch (error) {\r\n        console.error('Error generando trending dinámicas, usando fallback:', error);\r\n        const fallbackSearches = getFallbackTrendingSearches(limit - trendingSearches.length);\r\n        trendingSearches = [...trendingSearches, ...fallbackSearches];\r\n      }\r\n    }\r\n\r\n    // Limitar al número solicitado\r\n    trendingSearches = trendingSearches.slice(0, limit);\r\n\r\n    const response: ApiResponse<TrendingSearchesResponse> = {\r\n      data: {\r\n        trending: trendingSearches,\r\n        lastUpdated: new Date().toISOString()\r\n      },\r\n      success: true\r\n    };\r\n\r\n        console.log('🔥 Trending searches response:', {\r\n          count: trendingSearches.length,\r\n          hasRealData: trendingSearches.some(s => s.id.includes('real')),\r\n          categories: [...new Set(trendingSearches.map(s => s.category).filter(Boolean))]\r\n        });\r\n\r\n        // Log de operación exitosa\r\n        securityLogger.log({\r\n          type: 'data_access',\r\n          severity: 'low',\r\n          message: 'Trending searches retrieved successfully',\r\n          context: securityLogger.context,\r\n          metadata: {\r\n            searchesCount: trendingSearches.length,\r\n            limit: limit,\r\n            days: days,\r\n            category: category\r\n          }\r\n        });\r\n\r\n        return NextResponse.json(response);\r\n\r\n      } catch (error) {\r\n        console.error('❌ Error en /api/search/trending:', error);\r\n\r\n        // Log de error de seguridad\r\n        securityLogger.logApiError(\r\n          securityLogger.context,\r\n          error instanceof Error ? error : new Error('Unknown error'),\r\n          {\r\n            endpoint: '/api/search/trending'\r\n          }\r\n        );\r\n\r\n        // En caso de error, devolver búsquedas por defecto\r\n        const fallbackResponse: ApiResponse<TrendingSearchesResponse> = {\r\n          data: {\r\n            trending: defaultTrendingSearches.slice(0, parseInt(request.nextUrl.searchParams.get('limit') || '6')),\r\n            lastUpdated: new Date().toISOString()\r\n          },\r\n          success: true\r\n        };\r\n\r\n        return NextResponse.json(fallbackResponse);\r\n      }\r\n    }\r\n  );\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/search/trending', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// Método POST para registrar una búsqueda (para analytics)\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Validar que el request tenga contenido\r\n    const contentType = request.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/json')) {\r\n      return NextResponse.json(\r\n        { error: 'Content-Type debe ser application/json' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener el texto del body primero para validar\r\n    const bodyText = await request.text();\r\n    if (!bodyText || bodyText.trim() === '' || bodyText === '\"\"' || bodyText === \"''\") {\r\n      return NextResponse.json(\r\n        { error: 'Body de la request no puede estar vacío' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Parsear JSON de forma segura\r\n    let requestData;\r\n    try {\r\n      requestData = JSON.parse(bodyText);\r\n    } catch (parseError) {\r\n      console.error('Error parsing JSON in POST /api/search/trending:', parseError);\r\n      return NextResponse.json(\r\n        { error: 'JSON inválido en el body de la request' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { query, category, userId, sessionId } = requestData;\r\n\r\n    if (!query || typeof query !== 'string') {\r\n      return NextResponse.json(\r\n        { error: 'Query de búsqueda requerida' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = getSupabaseClient();\r\n\r\n    if (supabase) {\r\n      // Registrar la búsqueda en analytics usando función optimizada\r\n      const { error } = await supabase.rpc('insert_analytics_event_optimized', {\r\n        p_event_name: 'search',\r\n        p_category: 'search',\r\n        p_action: 'search',\r\n        p_label: query.toLowerCase().trim().substring(0, 50),\r\n        p_user_id: userId,\r\n        p_session_id: sessionId || 'anonymous',\r\n        p_page: '/search',\r\n        p_user_agent: null\r\n      });\r\n\r\n      if (error) {\r\n        console.error('Error registrando búsqueda en analytics:', error);\r\n      } else {\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error registrando búsqueda:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","POST","runtime","generateDynamicTrendingSearches","supabase","limit","data","products","error","productsError","from","select","eq","console","warn","getFallbackTrendingSearches","trendingSearches","usedQueries","Set","brands","map","p","brand","filter","Boolean","slice","forEach","index","has","toLowerCase","push","id","query","count","Math","floor","random","category","href","encodeURIComponent","type","add","categories","name","popularProducts","product","productName","sort","a","b","fallbackSearches","search","request","securityLogger","createSecurityLogger","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","log","severity","message","context","metadata","endpoint","method","userAgent","headers","get","searchParams","URL","url","parseInt","days","getSupabaseClient","startDate","Date","setDate","getDate","gte","toISOString","not","analyticsData","withDatabaseTimeout","signal","API_TIMEOUTS","database","length","searchCounts","Map","searchCategories","event","label","trim","set","sortedSearches","Array","entries","charAt","toUpperCase","analyticsError","dynamicSearches","filteredSearches","needed","additionalSearches","response","trending","lastUpdated","success","hasRealData","some","s","includes","searchesCount","NextResponse","json","logApiError","Error","fallbackResponse","defaultTrendingSearches","nextUrl","logRateLimitExceeded","contentType","status","bodyText","text","requestData","JSON","parse","parseError","userId","sessionId","rpc","p_event_name","p_category","p_action","p_label","substring","p_user_id","p_session_id","p_page","p_user_agent"],"mappings":"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"}