{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\lib\\api-timeouts.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS: API Timeouts Configuration\r\n// ===================================\r\n\r\nimport {\r\n  API_TIMEOUTS,\r\n  ENDPOINT_TIMEOUTS,\r\n  getTimeout,\r\n  getEndpointTimeouts,\r\n  createTimeoutController,\r\n  fetchWithTimeout,\r\n  withDatabaseTimeout,\r\n  withExternalTimeout\r\n} from '@/lib/config/api-timeouts';\r\n\r\n// Mock fetch para tests\r\nglobal.fetch = jest.fn();\r\nconst mockFetch = fetch as jest.MockedFunction<typeof fetch>;\r\n\r\n// Mock environment variables\r\nconst originalEnv = process.env;\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  process.env = { ...originalEnv };\r\n});\r\n\r\nafterAll(() => {\r\n  process.env = originalEnv;\r\n});\r\n\r\ndescribe('API Timeouts Configuration', () => {\r\n  describe('Environment Variable Integration', () => {\r\n    it('should use default values when env vars are not set', () => {\r\n      // Clear environment variables\r\n      delete process.env.API_TIMEOUT_DEFAULT;\r\n      delete process.env.API_TIMEOUT_DATABASE;\r\n      \r\n      // Re-import to get fresh values\r\n      jest.resetModules();\r\n      const { API_TIMEOUTS } = require('@/lib/config/api-timeouts');\r\n      \r\n      expect(API_TIMEOUTS.default).toBe(30000);\r\n      expect(API_TIMEOUTS.database).toBe(15000);\r\n    });\r\n\r\n    it('should use environment variables when provided', () => {\r\n      process.env.API_TIMEOUT_DEFAULT = '45000';\r\n      process.env.API_TIMEOUT_DATABASE = '20000';\r\n      \r\n      jest.resetModules();\r\n      const { API_TIMEOUTS } = require('@/lib/config/api-timeouts');\r\n      \r\n      expect(API_TIMEOUTS.default).toBe(45000);\r\n      expect(API_TIMEOUTS.database).toBe(20000);\r\n    });\r\n\r\n    it('should handle invalid environment variables gracefully', () => {\r\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\r\n      \r\n      process.env.API_TIMEOUT_DEFAULT = 'invalid';\r\n      process.env.API_TIMEOUT_DATABASE = '-1000';\r\n      \r\n      jest.resetModules();\r\n      const { API_TIMEOUTS } = require('@/lib/config/api-timeouts');\r\n      \r\n      expect(API_TIMEOUTS.default).toBe(30000); // Should use default\r\n      expect(API_TIMEOUTS.database).toBe(15000); // Should use default\r\n      expect(consoleSpy).toHaveBeenCalledTimes(2);\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe('getTimeout', () => {\r\n    it('should return correct timeout for each type', () => {\r\n      expect(getTimeout('default')).toBe(API_TIMEOUTS.default);\r\n      expect(getTimeout('database')).toBe(API_TIMEOUTS.database);\r\n      expect(getTimeout('external')).toBe(API_TIMEOUTS.external);\r\n      expect(getTimeout('upload')).toBe(API_TIMEOUTS.upload);\r\n      expect(getTimeout('payment')).toBe(API_TIMEOUTS.payment);\r\n      expect(getTimeout('auth')).toBe(API_TIMEOUTS.auth);\r\n      expect(getTimeout('admin')).toBe(API_TIMEOUTS.admin);\r\n      expect(getTimeout('webhook')).toBe(API_TIMEOUTS.webhook);\r\n      expect(getTimeout('email')).toBe(API_TIMEOUTS.email);\r\n      expect(getTimeout('image')).toBe(API_TIMEOUTS.image);\r\n    });\r\n  });\r\n\r\n  describe('getEndpointTimeouts', () => {\r\n    it('should return exact match for known endpoints', () => {\r\n      const timeouts = getEndpointTimeouts('/api/products');\r\n      expect(timeouts).toEqual(ENDPOINT_TIMEOUTS['/api/products']);\r\n    });\r\n\r\n    it('should return prefix match for nested endpoints', () => {\r\n      const timeouts = getEndpointTimeouts('/api/products/123');\r\n      expect(timeouts).toEqual(ENDPOINT_TIMEOUTS['/api/products']);\r\n    });\r\n\r\n    it('should return default timeouts for unknown endpoints', () => {\r\n      const timeouts = getEndpointTimeouts('/api/unknown');\r\n      expect(timeouts.connection).toBe(5000);\r\n      expect(timeouts.request).toBe(API_TIMEOUTS.default);\r\n      expect(timeouts.response).toBe(10000);\r\n      expect(timeouts.total).toBe(API_TIMEOUTS.default);\r\n    });\r\n\r\n    it('should have valid timeout configurations for all endpoints', () => {\r\n      Object.values(ENDPOINT_TIMEOUTS).forEach(config => {\r\n        expect(config.connection).toBeGreaterThan(0);\r\n        expect(config.request).toBeGreaterThan(0);\r\n        expect(config.response).toBeGreaterThan(0);\r\n        expect(config.total).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('createTimeoutController', () => {\r\n    it('should create AbortController with timeout', () => {\r\n      const { controller, timeoutId } = createTimeoutController(1000);\r\n      \r\n      expect(controller).toBeInstanceOf(AbortController);\r\n      expect(controller.signal).toBeDefined();\r\n      expect(typeof timeoutId).toBe('number');\r\n      \r\n      clearTimeout(timeoutId);\r\n    });\r\n\r\n    it('should abort signal after timeout', (done) => {\r\n      const { controller, timeoutId } = createTimeoutController(50);\r\n      \r\n      controller.signal.addEventListener('abort', () => {\r\n        expect(controller.signal.aborted).toBe(true);\r\n        clearTimeout(timeoutId);\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('fetchWithTimeout', () => {\r\n    it('should make successful request within timeout', async () => {\r\n      const mockResponse = new Response('success', { status: 200 });\r\n      mockFetch.mockResolvedValueOnce(mockResponse);\r\n\r\n      const response = await fetchWithTimeout('http://example.com', {\r\n        timeout: 5000\r\n      });\r\n\r\n      expect(response).toBe(mockResponse);\r\n      expect(mockFetch).toHaveBeenCalledWith('http://example.com', {\r\n        timeout: 5000,\r\n        signal: expect.any(AbortSignal)\r\n      });\r\n    });\r\n\r\n    it('should timeout on slow requests', async () => {\r\n      mockFetch.mockImplementation(() =>\r\n        new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            const error = new Error('The operation was aborted');\r\n            error.name = 'AbortError';\r\n            reject(error);\r\n          }, 100);\r\n        })\r\n      );\r\n\r\n      await expect(fetchWithTimeout('http://example.com', {\r\n        timeout: 50\r\n      })).rejects.toThrow('Request timeout after 50ms');\r\n    });\r\n\r\n    it('should use default timeout when not specified', async () => {\r\n      const mockResponse = new Response('success', { status: 200 });\r\n      mockFetch.mockResolvedValueOnce(mockResponse);\r\n\r\n      await fetchWithTimeout('http://example.com');\r\n\r\n      expect(mockFetch).toHaveBeenCalledWith('http://example.com', {\r\n        signal: expect.any(AbortSignal)\r\n      });\r\n    });\r\n\r\n    it('should handle fetch errors properly', async () => {\r\n      const fetchError = new Error('Network error');\r\n      mockFetch.mockRejectedValueOnce(fetchError);\r\n\r\n      await expect(fetchWithTimeout('http://example.com')).rejects.toThrow('Network error');\r\n    });\r\n\r\n    it('should handle abort errors as timeout', async () => {\r\n      const abortError = new Error('The operation was aborted');\r\n      abortError.name = 'AbortError';\r\n      mockFetch.mockRejectedValueOnce(abortError);\r\n\r\n      await expect(fetchWithTimeout('http://example.com', {\r\n        timeout: 1000\r\n      })).rejects.toThrow('Request timeout after 1000ms');\r\n    });\r\n  });\r\n\r\n  describe('withDatabaseTimeout', () => {\r\n    it('should execute operation within timeout', async () => {\r\n      const mockOperation = jest.fn().mockResolvedValue('database result');\r\n\r\n      const result = await withDatabaseTimeout(mockOperation, 5000);\r\n\r\n      expect(result).toBe('database result');\r\n      expect(mockOperation).toHaveBeenCalledWith(expect.any(AbortSignal));\r\n    });\r\n\r\n    it('should use default database timeout when not specified', async () => {\r\n      const mockOperation = jest.fn().mockResolvedValue('result');\r\n\r\n      await withDatabaseTimeout(mockOperation);\r\n\r\n      expect(mockOperation).toHaveBeenCalledWith(expect.any(AbortSignal));\r\n    });\r\n\r\n    it('should handle operation errors', async () => {\r\n      const mockOperation = jest.fn().mockRejectedValue(new Error('DB error'));\r\n\r\n      await expect(withDatabaseTimeout(mockOperation)).rejects.toThrow('DB error');\r\n    });\r\n\r\n    it('should cleanup timeout on completion', async () => {\r\n      const clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');\r\n      const mockOperation = jest.fn().mockResolvedValue('result');\r\n\r\n      await withDatabaseTimeout(mockOperation, 1000);\r\n\r\n      expect(clearTimeoutSpy).toHaveBeenCalled();\r\n      clearTimeoutSpy.mockRestore();\r\n    });\r\n\r\n    it('should cleanup timeout on error', async () => {\r\n      const clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');\r\n      const mockOperation = jest.fn().mockRejectedValue(new Error('error'));\r\n\r\n      try {\r\n        await withDatabaseTimeout(mockOperation, 1000);\r\n      } catch (error) {\r\n        // Expected error\r\n      }\r\n\r\n      expect(clearTimeoutSpy).toHaveBeenCalled();\r\n      clearTimeoutSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe('withExternalTimeout', () => {\r\n    it('should execute operation within timeout', async () => {\r\n      const mockOperation = jest.fn().mockResolvedValue('external result');\r\n\r\n      const result = await withExternalTimeout(mockOperation, 5000);\r\n\r\n      expect(result).toBe('external result');\r\n      expect(mockOperation).toHaveBeenCalledWith(expect.any(AbortSignal));\r\n    });\r\n\r\n    it('should use default external timeout when not specified', async () => {\r\n      const mockOperation = jest.fn().mockResolvedValue('result');\r\n\r\n      await withExternalTimeout(mockOperation);\r\n\r\n      expect(mockOperation).toHaveBeenCalledWith(expect.any(AbortSignal));\r\n    });\r\n  });\r\n\r\n  describe('Timeout Values Validation', () => {\r\n    it('should have reasonable timeout values', () => {\r\n      // Database operations should be faster than external APIs\r\n      expect(API_TIMEOUTS.database).toBeLessThan(API_TIMEOUTS.external);\r\n      \r\n      // Webhooks should be fastest\r\n      expect(API_TIMEOUTS.webhook).toBeLessThan(API_TIMEOUTS.database);\r\n      \r\n      // Upload operations should have longest timeout\r\n      expect(API_TIMEOUTS.upload).toBeGreaterThan(API_TIMEOUTS.default);\r\n      \r\n      // All timeouts should be positive\r\n      Object.values(API_TIMEOUTS).forEach(timeout => {\r\n        expect(timeout).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should have consistent endpoint timeout hierarchies', () => {\r\n      Object.values(ENDPOINT_TIMEOUTS).forEach(config => {\r\n        // Connection timeout should be shortest\r\n        expect(config.connection).toBeLessThanOrEqual(config.request);\r\n        expect(config.connection).toBeLessThanOrEqual(config.response);\r\n        \r\n        // Total timeout should be longest\r\n        expect(config.total).toBeGreaterThanOrEqual(config.request);\r\n        expect(config.total).toBeGreaterThanOrEqual(config.response);\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"names":["global","fetch","jest","fn","mockFetch","originalEnv","process","env","beforeEach","clearAllMocks","afterAll","describe","it","API_TIMEOUT_DEFAULT","API_TIMEOUT_DATABASE","resetModules","API_TIMEOUTS","require","expect","default","toBe","database","consoleSpy","spyOn","console","mockImplementation","toHaveBeenCalledTimes","mockRestore","getTimeout","external","upload","payment","auth","admin","webhook","email","image","timeouts","getEndpointTimeouts","toEqual","ENDPOINT_TIMEOUTS","connection","request","response","total","Object","values","forEach","config","toBeGreaterThan","controller","timeoutId","createTimeoutController","toBeInstanceOf","AbortController","signal","toBeDefined","clearTimeout","done","addEventListener","aborted","mockResponse","Response","status","mockResolvedValueOnce","fetchWithTimeout","timeout","toHaveBeenCalledWith","any","AbortSignal","Promise","resolve","reject","setTimeout","error","Error","name","rejects","toThrow","fetchError","mockRejectedValueOnce","abortError","mockOperation","mockResolvedValue","result","withDatabaseTimeout","mockRejectedValue","clearTimeoutSpy","toHaveBeenCalled","withExternalTimeout","toBeLessThan","toBeLessThanOrEqual","toBeGreaterThanOrEqual"],"mappings":"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"}