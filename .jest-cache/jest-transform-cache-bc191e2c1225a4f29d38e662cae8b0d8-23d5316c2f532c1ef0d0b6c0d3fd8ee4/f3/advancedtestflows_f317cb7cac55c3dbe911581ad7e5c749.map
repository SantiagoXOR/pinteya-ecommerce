{"version":3,"names":["cov_pigghfd2l","actualCoverage","s","AdvancedTestFlowManager","f","testFlowManager","execAsync","_util","promisify","_child_process","exec","constructor","workingDir","b","process","cwd","flows","Map","executions","scheduledJobs","screenshotManager","_screenshotmanager","ScreenshotManager","screenshotsDir","_path","default","join","browserType","initializeDefaultFlows","registerFlow","id","name","description","steps","type","command","timeout","continueOnFailure","dependencies","artifacts","triggers","config","branch","notifications","retryPolicy","maxRetries","backoffStrategy","baseDelay","maxDelay","patterns","environment","NODE_ENV","schedule","cron","timezone","enabled","flow","set","scheduleFlow","executeFlow","flowId","trigger","get","Error","execution","Date","now","startTime","status","logs","notifyFlowStart","sortedSteps","topologicalSort","step","stepExecution","executeStep","push","error","endTime","notifyFlowComplete","stepId","retryCount","lastError","attempt","delay","calculateBackoffDelay","Promise","resolve","setTimeout","stdout","stderr","env","exitCode","collectArtifacts","message","code","visited","Set","result","stepMap","map","visit","has","add","forEach","depId","policy","Math","pow","min","artifactPaths","artifactPath","fullPath","_fs","existsSync","console","log","startNotifications","filter","n","includes","notification","sendNotification","completeNotifications","event","toUpperCase","getAvailableFlows","Array","from","values","getExecutions","e","getExecution","executionId","executeFlowWithScreenshots","screenshotConfig","random","toString","substr","screenshots","baseUrl","initialize","headless","navigateTo","captureOnStart","screenshot","captureScreenshot","screenshotOptions","executeStepWithScreenshots","captureOnEnd","captureOnError","screenshotError","close","success","getExecutionScreenshots","allScreenshots","sort","a","timestamp","getTime","getScreenshotStats","stats","total","length","byStep","totalSize","reduce","sum","fileSize"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\advanced-test-flows.ts"],"sourcesContent":["// ===================================\r\n// ADVANCED TEST FLOWS\r\n// Sistema avanzado de flujos de testing automatizados\r\n// ===================================\r\n\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { ScreenshotManager, ScreenshotMetadata, ScreenshotOptions } from './screenshot-manager';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nexport interface TestFlow {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  steps: TestFlowStep[];\r\n  triggers: TestTrigger[];\r\n  schedule?: TestSchedule;\r\n  notifications: NotificationConfig[];\r\n  retryPolicy: RetryPolicy;\r\n}\r\n\r\nexport interface TestFlowStep {\r\n  id: string;\r\n  name: string;\r\n  type: 'test-suite' | 'build' | 'deploy' | 'validation' | 'cleanup';\r\n  command: string;\r\n  timeout: number;\r\n  continueOnFailure: boolean;\r\n  dependencies: string[];\r\n  environment?: Record<string, string>;\r\n  artifacts?: string[];\r\n}\r\n\r\nexport interface TestTrigger {\r\n  type: 'manual' | 'schedule' | 'webhook' | 'file-change' | 'git-push';\r\n  config: Record<string, any>;\r\n}\r\n\r\nexport interface TestSchedule {\r\n  cron: string;\r\n  timezone: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface NotificationConfig {\r\n  type: 'email' | 'slack' | 'webhook' | 'console';\r\n  config: Record<string, any>;\r\n  triggers: ('success' | 'failure' | 'start' | 'always')[];\r\n}\r\n\r\nexport interface RetryPolicy {\r\n  maxRetries: number;\r\n  backoffStrategy: 'linear' | 'exponential' | 'fixed';\r\n  baseDelay: number;\r\n  maxDelay: number;\r\n}\r\n\r\nexport interface FlowExecution {\r\n  id: string;\r\n  flowId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'running' | 'success' | 'failed' | 'cancelled';\r\n  steps: StepExecution[];\r\n  trigger: string;\r\n  artifacts: string[];\r\n  logs: string[];\r\n  screenshots: ScreenshotMetadata[];\r\n  screenshotConfig?: ScreenshotFlowConfig;\r\n}\r\n\r\nexport interface ScreenshotFlowConfig {\r\n  enabled: boolean;\r\n  captureOnStart?: boolean;\r\n  captureOnEnd?: boolean;\r\n  captureOnError?: boolean;\r\n  captureInterval?: number;\r\n  screenshotOptions?: ScreenshotOptions;\r\n  baseUrl?: string;\r\n}\r\n\r\nexport interface StepExecution {\r\n  stepId: string;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  status: 'pending' | 'running' | 'success' | 'failed' | 'skipped';\r\n  exitCode?: number;\r\n  stdout?: string;\r\n  stderr?: string;\r\n  artifacts: string[];\r\n  retryCount: number;\r\n  screenshots: ScreenshotMetadata[];\r\n}\r\n\r\n/**\r\n * Gestor avanzado de flujos de testing\r\n */\r\nexport class AdvancedTestFlowManager {\r\n  private flows: Map<string, TestFlow> = new Map();\r\n  private executions: Map<string, FlowExecution> = new Map();\r\n  private scheduledJobs: Map<string, NodeJS.Timeout> = new Map();\r\n  private screenshotManager: ScreenshotManager;\r\n\r\n  constructor(private workingDir: string = process.cwd()) {\r\n    this.screenshotManager = new ScreenshotManager({\r\n      screenshotsDir: path.join(workingDir, 'test-screenshots'),\r\n      browserType: 'chromium'\r\n    });\r\n    this.initializeDefaultFlows();\r\n  }\r\n\r\n  /**\r\n   * Inicializar flujos predeterminados\r\n   */\r\n  private initializeDefaultFlows() {\r\n    // Flujo de CI/CD completo\r\n    this.registerFlow({\r\n      id: 'ci-cd-complete',\r\n      name: 'CI/CD Completo',\r\n      description: 'Flujo completo de integración continua y despliegue',\r\n      steps: [\r\n        {\r\n          id: 'install-deps',\r\n          name: 'Instalar Dependencias',\r\n          type: 'build',\r\n          command: 'npm ci',\r\n          timeout: 120000,\r\n          continueOnFailure: false,\r\n          dependencies: [],\r\n          artifacts: ['node_modules']\r\n        },\r\n        {\r\n          id: 'lint-check',\r\n          name: 'Verificación de Linting',\r\n          type: 'validation',\r\n          command: 'npm run lint',\r\n          timeout: 60000,\r\n          continueOnFailure: true,\r\n          dependencies: ['install-deps']\r\n        },\r\n        {\r\n          id: 'type-check',\r\n          name: 'Verificación de Tipos',\r\n          type: 'validation',\r\n          command: 'npm run type-check',\r\n          timeout: 60000,\r\n          continueOnFailure: true,\r\n          dependencies: ['install-deps']\r\n        },\r\n        {\r\n          id: 'unit-tests',\r\n          name: 'Tests Unitarios',\r\n          type: 'test-suite',\r\n          command: 'npm test -- --coverage --passWithNoTests',\r\n          timeout: 300000,\r\n          continueOnFailure: false,\r\n          dependencies: ['install-deps'],\r\n          artifacts: ['coverage']\r\n        },\r\n        {\r\n          id: 'build-app',\r\n          name: 'Build de Aplicación',\r\n          type: 'build',\r\n          command: 'npm run build',\r\n          timeout: 600000,\r\n          continueOnFailure: false,\r\n          dependencies: ['unit-tests'],\r\n          artifacts: ['.next']\r\n        },\r\n        {\r\n          id: 'e2e-tests',\r\n          name: 'Tests E2E',\r\n          type: 'test-suite',\r\n          command: 'npx playwright test --reporter=json',\r\n          timeout: 900000,\r\n          continueOnFailure: true,\r\n          dependencies: ['build-app'],\r\n          artifacts: ['test-results', 'playwright-report']\r\n        }\r\n      ],\r\n      triggers: [\r\n        { type: 'manual', config: {} },\r\n        { type: 'git-push', config: { branch: 'main' } }\r\n      ],\r\n      notifications: [\r\n        {\r\n          type: 'console',\r\n          config: {},\r\n          triggers: ['start', 'success', 'failure']\r\n        }\r\n      ],\r\n      retryPolicy: {\r\n        maxRetries: 2,\r\n        backoffStrategy: 'exponential',\r\n        baseDelay: 5000,\r\n        maxDelay: 30000\r\n      }\r\n    });\r\n\r\n    // Flujo de testing rápido\r\n    this.registerFlow({\r\n      id: 'quick-test',\r\n      name: 'Testing Rápido',\r\n      description: 'Flujo rápido para desarrollo',\r\n      steps: [\r\n        {\r\n          id: 'quick-unit-tests',\r\n          name: 'Tests Unitarios Rápidos',\r\n          type: 'test-suite',\r\n          command: 'npm test -- --passWithNoTests --maxWorkers=50%',\r\n          timeout: 120000,\r\n          continueOnFailure: false,\r\n          dependencies: []\r\n        },\r\n        {\r\n          id: 'quick-lint',\r\n          name: 'Lint Rápido',\r\n          type: 'validation',\r\n          command: 'npm run lint -- --fix',\r\n          timeout: 30000,\r\n          continueOnFailure: true,\r\n          dependencies: []\r\n        }\r\n      ],\r\n      triggers: [\r\n        { type: 'manual', config: {} },\r\n        { type: 'file-change', config: { patterns: ['src/**/*.ts', 'src/**/*.tsx'] } }\r\n      ],\r\n      notifications: [\r\n        {\r\n          type: 'console',\r\n          config: {},\r\n          triggers: ['failure']\r\n        }\r\n      ],\r\n      retryPolicy: {\r\n        maxRetries: 1,\r\n        backoffStrategy: 'fixed',\r\n        baseDelay: 2000,\r\n        maxDelay: 2000\r\n      }\r\n    });\r\n\r\n    // Flujo de performance testing\r\n    this.registerFlow({\r\n      id: 'performance-test',\r\n      name: 'Testing de Performance',\r\n      description: 'Flujo especializado en performance y Core Web Vitals',\r\n      steps: [\r\n        {\r\n          id: 'build-for-perf',\r\n          name: 'Build Optimizado',\r\n          type: 'build',\r\n          command: 'npm run build',\r\n          timeout: 600000,\r\n          continueOnFailure: false,\r\n          dependencies: [],\r\n          environment: { NODE_ENV: 'production' }\r\n        },\r\n        {\r\n          id: 'lighthouse-audit',\r\n          name: 'Auditoría Lighthouse',\r\n          type: 'validation',\r\n          command: 'npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json',\r\n          timeout: 180000,\r\n          continueOnFailure: true,\r\n          dependencies: ['build-for-perf'],\r\n          artifacts: ['lighthouse-report.json']\r\n        },\r\n        {\r\n          id: 'performance-tests',\r\n          name: 'Tests de Performance',\r\n          type: 'test-suite',\r\n          command: 'npm test -- --testPathPattern=\"performance\" --passWithNoTests',\r\n          timeout: 300000,\r\n          continueOnFailure: true,\r\n          dependencies: ['build-for-perf']\r\n        }\r\n      ],\r\n      triggers: [\r\n        { type: 'manual', config: {} }\r\n      ],\r\n      schedule: {\r\n        cron: '0 2 * * *', // Diario a las 2 AM\r\n        timezone: 'America/Argentina/Buenos_Aires',\r\n        enabled: false\r\n      },\r\n      notifications: [\r\n        {\r\n          type: 'console',\r\n          config: {},\r\n          triggers: ['success', 'failure']\r\n        }\r\n      ],\r\n      retryPolicy: {\r\n        maxRetries: 1,\r\n        backoffStrategy: 'fixed',\r\n        baseDelay: 10000,\r\n        maxDelay: 10000\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registrar un nuevo flujo\r\n   */\r\n  registerFlow(flow: TestFlow): void {\r\n    this.flows.set(flow.id, flow);\r\n    \r\n    // Configurar schedule si existe\r\n    if (flow.schedule?.enabled) {\r\n      this.scheduleFlow(flow.id, flow.schedule);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar un flujo\r\n   */\r\n  async executeFlow(flowId: string, trigger: string = 'manual'): Promise<FlowExecution> {\r\n    const flow = this.flows.get(flowId);\r\n    if (!flow) {\r\n      throw new Error(`Flujo no encontrado: ${flowId}`);\r\n    }\r\n\r\n    const execution: FlowExecution = {\r\n      id: `exec-${flowId}-${Date.now()}`,\r\n      flowId,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      steps: [],\r\n      trigger,\r\n      artifacts: [],\r\n      logs: []\r\n    };\r\n\r\n    this.executions.set(execution.id, execution);\r\n\r\n    try {\r\n      await this.notifyFlowStart(flow, execution);\r\n      \r\n      // Ejecutar pasos en orden de dependencias\r\n      const sortedSteps = this.topologicalSort(flow.steps);\r\n      \r\n      for (const step of sortedSteps) {\r\n        const stepExecution = await this.executeStep(step, execution, flow.retryPolicy);\r\n        execution.steps.push(stepExecution);\r\n        \r\n        if (stepExecution.status === 'failed' && !step.continueOnFailure) {\r\n          execution.status = 'failed';\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (execution.status === 'running') {\r\n        execution.status = 'success';\r\n      }\r\n\r\n    } catch (error) {\r\n      execution.status = 'failed';\r\n      execution.logs.push(`Error en ejecución: ${error}`);\r\n    } finally {\r\n      execution.endTime = new Date();\r\n      await this.notifyFlowComplete(flow, execution);\r\n    }\r\n\r\n    return execution;\r\n  }\r\n\r\n  /**\r\n   * Ejecutar un paso individual\r\n   */\r\n  private async executeStep(\r\n    step: TestFlowStep, \r\n    execution: FlowExecution, \r\n    retryPolicy: RetryPolicy\r\n  ): Promise<StepExecution> {\r\n    const stepExecution: StepExecution = {\r\n      stepId: step.id,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      artifacts: [],\r\n      retryCount: 0\r\n    };\r\n\r\n    let lastError: any;\r\n\r\n    for (let attempt = 0; attempt <= retryPolicy.maxRetries; attempt++) {\r\n      try {\r\n        stepExecution.retryCount = attempt;\r\n        \r\n        if (attempt > 0) {\r\n          const delay = this.calculateBackoffDelay(attempt, retryPolicy);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n\r\n        const { stdout, stderr } = await execAsync(step.command, {\r\n          cwd: this.workingDir,\r\n          timeout: step.timeout,\r\n          env: { ...process.env, ...step.environment }\r\n        });\r\n\r\n        stepExecution.status = 'success';\r\n        stepExecution.stdout = stdout;\r\n        stepExecution.stderr = stderr;\r\n        stepExecution.exitCode = 0;\r\n        stepExecution.endTime = new Date();\r\n\r\n        // Recopilar artifacts\r\n        if (step.artifacts) {\r\n          stepExecution.artifacts = await this.collectArtifacts(step.artifacts);\r\n        }\r\n\r\n        break;\r\n\r\n      } catch (error: any) {\r\n        lastError = error;\r\n        stepExecution.stderr = error.stderr || error.message;\r\n        stepExecution.stdout = error.stdout || '';\r\n        stepExecution.exitCode = error.code || 1;\r\n\r\n        if (attempt === retryPolicy.maxRetries) {\r\n          stepExecution.status = 'failed';\r\n          stepExecution.endTime = new Date();\r\n        }\r\n      }\r\n    }\r\n\r\n    return stepExecution;\r\n  }\r\n\r\n  /**\r\n   * Ordenamiento topológico de pasos basado en dependencias\r\n   */\r\n  private topologicalSort(steps: TestFlowStep[]): TestFlowStep[] {\r\n    const visited = new Set<string>();\r\n    const result: TestFlowStep[] = [];\r\n    const stepMap = new Map(steps.map(step => [step.id, step]));\r\n\r\n    const visit = (stepId: string) => {\r\n      if (visited.has(stepId)) {return;}\r\n      visited.add(stepId);\r\n\r\n      const step = stepMap.get(stepId);\r\n      if (!step) {return;}\r\n\r\n      // Visitar dependencias primero\r\n      step.dependencies.forEach(depId => visit(depId));\r\n      \r\n      result.push(step);\r\n    };\r\n\r\n    steps.forEach(step => visit(step.id));\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calcular delay de backoff\r\n   */\r\n  private calculateBackoffDelay(attempt: number, policy: RetryPolicy): number {\r\n    let delay: number;\r\n\r\n    switch (policy.backoffStrategy) {\r\n      case 'linear':\r\n        delay = policy.baseDelay * attempt;\r\n        break;\r\n      case 'exponential':\r\n        delay = policy.baseDelay * Math.pow(2, attempt - 1);\r\n        break;\r\n      case 'fixed':\r\n      default:\r\n        delay = policy.baseDelay;\r\n        break;\r\n    }\r\n\r\n    return Math.min(delay, policy.maxDelay);\r\n  }\r\n\r\n  /**\r\n   * Recopilar artifacts\r\n   */\r\n  private async collectArtifacts(artifactPaths: string[]): Promise<string[]> {\r\n    const artifacts: string[] = [];\r\n    \r\n    for (const artifactPath of artifactPaths) {\r\n      const fullPath = path.join(this.workingDir, artifactPath);\r\n      if (fs.existsSync(fullPath)) {\r\n        artifacts.push(fullPath);\r\n      }\r\n    }\r\n\r\n    return artifacts;\r\n  }\r\n\r\n  /**\r\n   * Programar ejecución de flujo\r\n   */\r\n  private scheduleFlow(flowId: string, schedule: TestSchedule): void {\r\n    // Implementación simplificada - en producción usar cron job real\r\n    console.log(`📅 Flujo ${flowId} programado: ${schedule.cron}`);\r\n  }\r\n\r\n  /**\r\n   * Notificar inicio de flujo\r\n   */\r\n  private async notifyFlowStart(flow: TestFlow, execution: FlowExecution): Promise<void> {\r\n    const startNotifications = flow.notifications.filter(n => \r\n      n.triggers.includes('start') || n.triggers.includes('always')\r\n    );\r\n\r\n    for (const notification of startNotifications) {\r\n      await this.sendNotification(notification, 'start', flow, execution);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar finalización de flujo\r\n   */\r\n  private async notifyFlowComplete(flow: TestFlow, execution: FlowExecution): Promise<void> {\r\n    const completeNotifications = flow.notifications.filter(n => \r\n      n.triggers.includes(execution.status) || n.triggers.includes('always')\r\n    );\r\n\r\n    for (const notification of completeNotifications) {\r\n      await this.sendNotification(notification, execution.status, flow, execution);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enviar notificación\r\n   */\r\n  private async sendNotification(\r\n    notification: NotificationConfig, \r\n    event: string, \r\n    flow: TestFlow, \r\n    execution: FlowExecution\r\n  ): Promise<void> {\r\n    switch (notification.type) {\r\n      case 'console':\r\n        console.log(`🔔 [${event.toUpperCase()}] Flujo: ${flow.name} | Ejecución: ${execution.id}`);\r\n        break;\r\n      // Implementar otros tipos de notificación según necesidad\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener flujos disponibles\r\n   */\r\n  getAvailableFlows(): TestFlow[] {\r\n    return Array.from(this.flows.values());\r\n  }\r\n\r\n  /**\r\n   * Obtener ejecuciones\r\n   */\r\n  getExecutions(flowId?: string): FlowExecution[] {\r\n    const executions = Array.from(this.executions.values());\r\n    return flowId ? executions.filter(e => e.flowId === flowId) : executions;\r\n  }\r\n\r\n  /**\r\n   * Obtener ejecución específica\r\n   */\r\n  getExecution(executionId: string): FlowExecution | undefined {\r\n    return this.executions.get(executionId);\r\n  }\r\n\r\n  /**\r\n   * Ejecutar flujo con capturas de pantalla\r\n   */\r\n  async executeFlowWithScreenshots(\r\n    flowId: string, \r\n    screenshotConfig: ScreenshotFlowConfig,\r\n    trigger: string = 'manual'\r\n  ): Promise<FlowExecution> {\r\n    const flow = this.flows.get(flowId);\r\n    if (!flow) {\r\n      throw new Error(`Flow ${flowId} not found`);\r\n    }\r\n\r\n    const execution: FlowExecution = {\r\n      id: `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      flowId,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      steps: [],\r\n      trigger,\r\n      artifacts: [],\r\n      logs: [],\r\n      screenshots: [],\r\n      screenshotConfig\r\n    };\r\n\r\n    this.executions.set(execution.id, execution);\r\n\r\n    try {\r\n      // Inicializar screenshot manager si está habilitado\r\n      if (screenshotConfig.enabled && screenshotConfig.baseUrl) {\r\n        await this.screenshotManager.initialize({ headless: false });\r\n        await this.screenshotManager.navigateTo(screenshotConfig.baseUrl);\r\n        \r\n        // Captura inicial si está configurada\r\n        if (screenshotConfig.captureOnStart) {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_start`,\r\n            `Inicio del flujo ${flow.name}`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          execution.screenshots.push(screenshot);\r\n        }\r\n      }\r\n\r\n      await this.notifyFlowStart(flow, execution);\r\n      \r\n      const sortedSteps = this.topologicalSort(flow.steps);\r\n      \r\n      for (const step of sortedSteps) {\r\n        const stepExecution = await this.executeStepWithScreenshots(\r\n          step, \r\n          execution, \r\n          flow.retryPolicy,\r\n          screenshotConfig\r\n        );\r\n        execution.steps.push(stepExecution);\r\n        \r\n        if (stepExecution.status === 'failed' && !step.continueOnFailure) {\r\n          execution.status = 'failed';\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (execution.status === 'running') {\r\n        execution.status = 'success';\r\n      }\r\n      \r\n      // Captura final si está configurada\r\n      if (screenshotConfig.enabled && screenshotConfig.captureOnEnd) {\r\n        const screenshot = await this.screenshotManager.captureScreenshot(\r\n          `${execution.id}_end`,\r\n          `Fin del flujo ${flow.name} - Estado: ${execution.status}`,\r\n          screenshotConfig.screenshotOptions\r\n        );\r\n        execution.screenshots.push(screenshot);\r\n      }\r\n      \r\n    } catch (error) {\r\n      execution.status = 'failed';\r\n      execution.logs.push(`Flow execution error: ${error}`);\r\n      \r\n      // Captura de error si está configurada\r\n      if (screenshotConfig.enabled && screenshotConfig.captureOnError) {\r\n        try {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_error`,\r\n            `Error en flujo ${flow.name}: ${error}`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          execution.screenshots.push(screenshot);\r\n        } catch (screenshotError) {\r\n          execution.logs.push(`Screenshot error: ${screenshotError}`);\r\n        }\r\n      }\r\n    } finally {\r\n      execution.endTime = new Date();\r\n      await this.notifyFlowComplete(flow, execution);\r\n      \r\n      // Cerrar screenshot manager\r\n      if (screenshotConfig.enabled) {\r\n        await this.screenshotManager.close();\r\n      }\r\n    }\r\n    \r\n    return execution;\r\n  }\r\n\r\n  /**\r\n   * Ejecutar paso con capturas de pantalla\r\n   */\r\n  private async executeStepWithScreenshots(\r\n    step: TestFlowStep, \r\n    execution: FlowExecution, \r\n    retryPolicy: RetryPolicy,\r\n    screenshotConfig: ScreenshotFlowConfig\r\n  ): Promise<StepExecution> {\r\n    const stepExecution: StepExecution = {\r\n      stepId: step.id,\r\n      startTime: new Date(),\r\n      status: 'running',\r\n      artifacts: [],\r\n      retryCount: 0,\r\n      screenshots: []\r\n    };\r\n\r\n    let attempt = 0;\r\n    let success = false;\r\n\r\n    while (attempt <= retryPolicy.maxRetries && !success) {\r\n      try {\r\n        stepExecution.retryCount = attempt;\r\n        \r\n        // Captura antes del paso\r\n        if (screenshotConfig.enabled) {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_step_${step.id}_attempt_${attempt}_before`,\r\n            `Antes de ejecutar paso: ${step.name} (intento ${attempt + 1})`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          stepExecution.screenshots.push(screenshot);\r\n        }\r\n\r\n        const result = await execAsync(step.command, {\r\n          cwd: this.workingDir,\r\n          timeout: step.timeout,\r\n          env: { ...process.env, ...step.environment }\r\n        });\r\n\r\n        stepExecution.stdout = result.stdout;\r\n        stepExecution.stderr = result.stderr;\r\n        stepExecution.exitCode = 0;\r\n        stepExecution.status = 'success';\r\n        success = true;\r\n        \r\n        // Captura después del paso exitoso\r\n        if (screenshotConfig.enabled) {\r\n          const screenshot = await this.screenshotManager.captureScreenshot(\r\n            `${execution.id}_step_${step.id}_success`,\r\n            `Paso completado exitosamente: ${step.name}`,\r\n            screenshotConfig.screenshotOptions\r\n          );\r\n          stepExecution.screenshots.push(screenshot);\r\n        }\r\n        \r\n      } catch (error: any) {\r\n        stepExecution.stderr = error.message;\r\n        stepExecution.exitCode = error.code || 1;\r\n        \r\n        // Captura de error del paso\r\n        if (screenshotConfig.enabled && screenshotConfig.captureOnError) {\r\n          try {\r\n            const screenshot = await this.screenshotManager.captureScreenshot(\r\n              `${execution.id}_step_${step.id}_error_${attempt}`,\r\n              `Error en paso: ${step.name} (intento ${attempt + 1}) - ${error.message}`,\r\n              screenshotConfig.screenshotOptions\r\n            );\r\n            stepExecution.screenshots.push(screenshot);\r\n          } catch (screenshotError) {\r\n            execution.logs.push(`Screenshot error in step ${step.id}: ${screenshotError}`);\r\n          }\r\n        }\r\n        \r\n        if (attempt < retryPolicy.maxRetries) {\r\n          const delay = this.calculateBackoffDelay(attempt, retryPolicy);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        } else {\r\n          stepExecution.status = 'failed';\r\n        }\r\n      }\r\n      \r\n      attempt++;\r\n    }\r\n\r\n    stepExecution.endTime = new Date();\r\n    \r\n    // Recopilar artefactos\r\n    if (step.artifacts) {\r\n      stepExecution.artifacts = await this.collectArtifacts(step.artifacts);\r\n    }\r\n\r\n    return stepExecution;\r\n  }\r\n\r\n  /**\r\n   * Obtener screenshots de una ejecución\r\n   */\r\n  getExecutionScreenshots(executionId: string): ScreenshotMetadata[] {\r\n    const execution = this.executions.get(executionId);\r\n    if (!execution) {\r\n      return [];\r\n    }\r\n    \r\n    const allScreenshots = [...execution.screenshots];\r\n    \r\n    // Agregar screenshots de los pasos\r\n    execution.steps.forEach(step => {\r\n      allScreenshots.push(...step.screenshots);\r\n    });\r\n    \r\n    return allScreenshots.sort((a, b) => \r\n      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de screenshots\r\n   */\r\n  getScreenshotStats(executionId: string): {\r\n    total: number;\r\n    byStep: Record<string, number>;\r\n    totalSize: number;\r\n  } {\r\n    const screenshots = this.getExecutionScreenshots(executionId);\r\n    const execution = this.executions.get(executionId);\r\n    \r\n    const stats = {\r\n      total: screenshots.length,\r\n      byStep: {} as Record<string, number>,\r\n      totalSize: screenshots.reduce((sum, s) => sum + (s.fileSize || 0), 0)\r\n    };\r\n    \r\n    if (execution) {\r\n      execution.steps.forEach(step => {\r\n        stats.byStep[step.stepId] = step.screenshots.length;\r\n      });\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n}\r\n\r\n// Instancia global del gestor\r\nexport const testFlowManager = new AdvancedTestFlowManager();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}