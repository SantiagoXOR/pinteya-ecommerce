{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\activity\\activityLogger.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ACTIVITY LOGGER UTILITY\r\n// ===================================\r\n\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// Tipos para actividad\r\nexport interface ActivityLogData {\r\n  action: string;\r\n  category: 'auth' | 'profile' | 'order' | 'security' | 'session' | 'preference';\r\n  description?: string;\r\n  metadata?: Record<string, any>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n}\r\n\r\nexport interface ActivityLogOptions {\r\n  skipIfError?: boolean;\r\n  includeTimestamp?: boolean;\r\n}\r\n\r\n/**\r\n * Función utilitaria centralizada para registrar actividad de usuario\r\n * Puede ser usada desde APIs del servidor o desde el cliente\r\n */\r\nexport async function logUserActivity(\r\n  userId: string,\r\n  activityData: ActivityLogData,\r\n  options: ActivityLogOptions = {}\r\n): Promise<boolean> {\r\n  try {\r\n    const { skipIfError = true, includeTimestamp = true } = options;\r\n\r\n    // Preparar datos de actividad\r\n    const logData = {\r\n      user_id: userId,\r\n      action: activityData.action,\r\n      category: activityData.category,\r\n      description: activityData.description,\r\n      metadata: activityData.metadata,\r\n      ip_address: activityData.ip_address,\r\n      user_agent: activityData.user_agent,\r\n      ...(includeTimestamp && { created_at: new Date().toISOString() })\r\n    };\r\n\r\n    // Insertar en base de datos\r\n    const { error } = await supabaseAdmin\r\n      .from('user_activity')\r\n      .insert(logData);\r\n\r\n    if (error) {\r\n      console.error('Error al registrar actividad:', error);\r\n      if (!skipIfError) {\r\n        throw error;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error en logUserActivity:', error);\r\n    if (!options.skipIfError) {\r\n      throw error;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Función específica para logging de autenticación\r\n */\r\nexport async function logAuthActivity(\r\n  userId: string,\r\n  action: 'login' | 'logout' | 'register' | 'password_reset' | 'email_verification',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'auth',\r\n    description: `Usuario ${action}`,\r\n    metadata: {\r\n      timestamp: new Date().toISOString(),\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de perfil\r\n */\r\nexport async function logProfileActivity(\r\n  userId: string,\r\n  action: 'update_profile' | 'upload_avatar' | 'delete_avatar' | 'add_address' | 'update_address' | 'delete_address',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'profile',\r\n    description: `Perfil: ${action.replace('_', ' ')}`,\r\n    metadata,\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de seguridad\r\n */\r\nexport async function logSecurityActivity(\r\n  userId: string,\r\n  action: 'enable_2fa' | 'disable_2fa' | 'update_security_settings' | 'suspicious_activity' | 'password_change',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'security',\r\n    description: `Seguridad: ${action.replace('_', ' ')}`,\r\n    metadata: {\r\n      severity: action === 'suspicious_activity' ? 'high' : 'medium',\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de sesiones\r\n */\r\nexport async function logSessionActivity(\r\n  userId: string,\r\n  action: 'session_start' | 'session_end' | 'session_timeout' | 'revoke_session' | 'trust_device',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'session',\r\n    description: `Sesión: ${action.replace('_', ' ')}`,\r\n    metadata: {\r\n      device_info: metadata?.device_info,\r\n      session_id: metadata?.session_id,\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de órdenes\r\n */\r\nexport async function logOrderActivity(\r\n  userId: string,\r\n  action: 'create_order' | 'update_order' | 'cancel_order' | 'payment_completed' | 'order_shipped' | 'order_delivered',\r\n  orderId: string,\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'order',\r\n    description: `Orden ${orderId}: ${action.replace('_', ' ')}`,\r\n    metadata: {\r\n      order_id: orderId,\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de preferencias\r\n */\r\nexport async function logPreferenceActivity(\r\n  userId: string,\r\n  action: 'update_notifications' | 'update_display' | 'update_privacy' | 'update_theme',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'preference',\r\n    description: `Preferencias: ${action.replace('_', ' ')}`,\r\n    metadata,\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función para obtener información del request (para usar en APIs)\r\n */\r\nexport function getRequestInfo(request: Request | any): { ip?: string; userAgent?: string } {\r\n  try {\r\n    const ip = request.headers?.get?.('x-forwarded-for')?.split(',')[0]?.trim() ||\r\n              request.headers?.get?.('x-real-ip') ||\r\n              request.ip ||\r\n              'unknown';\r\n    \r\n    const userAgent = request.headers?.get?.('user-agent') || 'unknown';\r\n    \r\n    return { ip, userAgent };\r\n  } catch (error) {\r\n    console.error('Error obteniendo información del request:', error);\r\n    return { ip: 'unknown', userAgent: 'unknown' };\r\n  }\r\n}\r\n\r\n/**\r\n * Función para logging desde el cliente (usando fetch a la API)\r\n */\r\nexport async function logActivityFromClient(\r\n  action: string,\r\n  category: ActivityLogData['category'],\r\n  description?: string,\r\n  metadata?: Record<string, any>\r\n): Promise<boolean> {\r\n  try {\r\n    const response = await fetch('/api/user/activity', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        action,\r\n        category,\r\n        description,\r\n        metadata,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error('Error al registrar actividad desde cliente:', response.statusText);\r\n      return false;\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.success || false;\r\n  } catch (error) {\r\n    console.error('Error en logActivityFromClient:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Función para logging masivo (útil para migraciones o importaciones)\r\n */\r\nexport async function logBulkActivity(\r\n  activities: Array<{ userId: string; activityData: ActivityLogData }>,\r\n  options: ActivityLogOptions = {}\r\n): Promise<{ success: number; failed: number }> {\r\n  let success = 0;\r\n  let failed = 0;\r\n\r\n  for (const { userId, activityData } of activities) {\r\n    const result = await logUserActivity(userId, activityData, options);\r\n    if (result) {\r\n      success++;\r\n    } else {\r\n      failed++;\r\n    }\r\n  }\r\n\r\n  return { success, failed };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["getRequestInfo","logActivityFromClient","logAuthActivity","logBulkActivity","logOrderActivity","logPreferenceActivity","logProfileActivity","logSecurityActivity","logSessionActivity","logUserActivity","userId","activityData","options","skipIfError","includeTimestamp","logData","user_id","action","category","description","metadata","ip_address","user_agent","created_at","Date","toISOString","error","supabaseAdmin","from","insert","console","request","timestamp","ip","userAgent","replace","severity","device_info","session_id","orderId","order_id","headers","get","split","trim","response","fetch","method","body","JSON","stringify","ok","statusText","data","json","success","activities","failed","result"],"mappings":"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"}