c822f71d79989ae0eaa84b06c682844b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _pricedisplay = require("../price-display");
describe('PriceDisplay', ()=>{
    it('renders basic price correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550
        }));
        // Verifica que el precio se muestre correctamente formateado (con espacio)
        expect(_react.screen.getByText('$ 15,50')).toBeInTheDocument();
    });
    it('shows discount percentage when original price is provided', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            originalAmount: 2000,
            showDiscountPercentage: true
        }));
        // Verifica precio original tachado
        expect(_react.screen.getByText('$ 20,00')).toBeInTheDocument();
        // Verifica precio actual
        expect(_react.screen.getByText('$ 15,50')).toBeInTheDocument();
        // Verifica porcentaje de descuento (23% = (2000-1550)/2000 * 100)
        expect(_react.screen.getByText(/-\d+%/)).toBeInTheDocument();
    });
    it('displays installments information', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 15000,
            installments: {
                quantity: 12,
                amount: 1250,
                interestFree: true
            }
        }));
        // Verifica información de cuotas
        expect(_react.screen.getByText(/12x de/)).toBeInTheDocument();
        expect(_react.screen.getByText(/\$ 12,50/)).toBeInTheDocument();
        expect(_react.screen.getByText('sin interés')).toBeInTheDocument();
    });
    it('shows free shipping badge when enabled', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            showFreeShipping: true
        }));
        expect(_react.screen.getByAltText('Envío gratis')).toBeInTheDocument();
    });
    it('applies correct variant classes', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            variant: "center"
        }));
        expect(container.firstChild).toHaveClass('text-center', 'items-center');
    });
    it('applies correct size classes', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            size: "lg"
        }));
        // Verifica que se aplique la clase de tamaño
        expect(container.querySelector('.text-2xl')).toBeInTheDocument();
    });
    it('handles different currencies', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            currency: "USD"
        }));
        // Para USD debería mostrar el símbolo de dólar
        expect(_react.screen.getByText(/US\$/)).toBeInTheDocument();
    });
    it('uses custom currency symbol when provided', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            currencySymbol: "$"
        }));
        expect(_react.screen.getByText('$15,50')).toBeInTheDocument();
    });
    it('calculates discount percentage correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 7500,
            originalAmount: 10000,
            showDiscountPercentage: true
        }));
        // 25% de descuento: (10000-7500)/10000 * 100 = 25%
        expect(_react.screen.getByText('-25%')).toBeInTheDocument();
    });
    it('renders compact variant correctly', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            originalAmount: 2000,
            variant: "compact"
        }));
        expect(container.firstChild).toHaveClass('flex-col', 'gap-0.5');
    });
    it('handles installments without interest correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 15000,
            installments: {
                quantity: 6,
                amount: 2500,
                interestFree: false
            },
            installmentsText: "con inter\xe9s"
        }));
        expect(_react.screen.getByText(/6x de/)).toBeInTheDocument();
        expect(_react.screen.getByText(/\$ 25,00/)).toBeInTheDocument();
        // No debería mostrar "sin interés" cuando interestFree es false
        expect(_react.screen.queryByText('sin interés')).not.toBeInTheDocument();
    });
    it('applies custom price color', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1550,
            priceColor: "#FF0000"
        }));
        // Verifica que se aplique la clase de color personalizado
        expect(container.querySelector('.text-\\[\\#FF0000\\]')).toBeInTheDocument();
    });
    it('handles zero amount correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 0
        }));
        expect(_react.screen.getByText('$ 0,00')).toBeInTheDocument();
    });
    it('handles large amounts correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_pricedisplay.PriceDisplay, {
            amount: 1234567
        }));
        // Debería formatear números grandes con separadores de miles
        expect(_react.screen.getByText('$ 12.345,67')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,