{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\seo\\seo-optimization-tools.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENHANCED SEO OPTIMIZATION TOOLS\r\n// Sistema avanzado de herramientas de optimización SEO con análisis de competidores,\r\n// A/B testing de metadata, optimización de Core Web Vitals y recomendaciones automáticas\r\n// ===================================\r\n\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\nimport { getRedisClient } from '@/lib/integrations/redis';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { enhancedSEOAnalyticsManager } from '@/lib/seo/seo-analytics-manager';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS PRINCIPALES\r\n// ===================================\r\n\r\nexport interface SEOOptimizationConfig {\r\n  enableCompetitorAnalysis: boolean;\r\n  enableABTesting: boolean;\r\n  enableCoreWebVitalsOptimization: boolean;\r\n  enableKeywordResearch: boolean;\r\n  enableContentOptimization: boolean;\r\n  enableTechnicalAudit: boolean;\r\n  \r\n  // Configuración de análisis\r\n  competitorAnalysisDepth: 'basic' | 'detailed' | 'comprehensive';\r\n  abTestDuration: number; // días\r\n  coreWebVitalsThresholds: CoreWebVitalsThresholds;\r\n  \r\n  // Configuración de cache\r\n  cacheEnabled: boolean;\r\n  cacheTTL: number; // segundos\r\n  \r\n  // APIs externas (opcional)\r\n  externalAPIs: {\r\n    semrush?: { apiKey: string; enabled: boolean };\r\n    ahrefs?: { apiKey: string; enabled: boolean };\r\n    googlePageSpeed?: { apiKey: string; enabled: boolean };\r\n  };\r\n}\r\n\r\nexport interface CoreWebVitalsThresholds {\r\n  lcp: { good: number; needsImprovement: number }; // Largest Contentful Paint\r\n  fid: { good: number; needsImprovement: number }; // First Input Delay\r\n  cls: { good: number; needsImprovement: number }; // Cumulative Layout Shift\r\n  fcp: { good: number; needsImprovement: number }; // First Contentful Paint\r\n  ttfb: { good: number; needsImprovement: number }; // Time to First Byte\r\n  inp: { good: number; needsImprovement: number }; // Interaction to Next Paint\r\n}\r\n\r\nexport interface CompetitorAnalysisResult {\r\n  competitor: string;\r\n  domain: string;\r\n  overallScore: number;\r\n  strengths: string[];\r\n  weaknesses: string[];\r\n  opportunities: string[];\r\n  keywordGaps: KeywordGap[];\r\n  contentGaps: ContentGap[];\r\n  technicalAdvantages: string[];\r\n  backlinksAnalysis: BacklinksAnalysis;\r\n  socialSignals: SocialSignalsAnalysis;\r\n  lastAnalyzed: Date;\r\n}\r\n\r\nexport interface KeywordGap {\r\n  keyword: string;\r\n  competitorRanking: number;\r\n  ourRanking: number | null;\r\n  searchVolume: number;\r\n  difficulty: number;\r\n  opportunity: 'high' | 'medium' | 'low';\r\n  intent: 'informational' | 'navigational' | 'transactional' | 'commercial';\r\n  estimatedTraffic: number;\r\n  estimatedRevenue: number;\r\n}\r\n\r\nexport interface ContentGap {\r\n  topic: string;\r\n  competitorContent: {\r\n    title: string;\r\n    url: string;\r\n    wordCount: number;\r\n    socialShares: number;\r\n    backlinks: number;\r\n  };\r\n  ourContent: {\r\n    exists: boolean;\r\n    url?: string;\r\n    wordCount?: number;\r\n    socialShares?: number;\r\n    backlinks?: number;\r\n  };\r\n  opportunity: 'create' | 'improve' | 'expand';\r\n  priority: 'high' | 'medium' | 'low';\r\n  estimatedEffort: 'low' | 'medium' | 'high';\r\n}\r\n\r\nexport interface BacklinksAnalysis {\r\n  totalBacklinks: number;\r\n  uniqueDomains: number;\r\n  domainAuthority: number;\r\n  topReferringDomains: Array<{\r\n    domain: string;\r\n    authority: number;\r\n    backlinks: number;\r\n    traffic: number;\r\n  }>;\r\n  anchorTextDistribution: Record<string, number>;\r\n  linkTypes: {\r\n    doFollow: number;\r\n    noFollow: number;\r\n    sponsored: number;\r\n    ugc: number;\r\n  };\r\n}\r\n\r\nexport interface SocialSignalsAnalysis {\r\n  facebook: { likes: number; shares: number; comments: number };\r\n  twitter: { tweets: number; retweets: number; likes: number };\r\n  linkedin: { shares: number; likes: number; comments: number };\r\n  instagram: { posts: number; likes: number; comments: number };\r\n  totalEngagement: number;\r\n  viralityScore: number;\r\n}\r\n\r\nexport interface ABTestResult {\r\n  testId: string;\r\n  testName: string;\r\n  status: 'running' | 'completed' | 'paused' | 'cancelled';\r\n  startDate: Date;\r\n  endDate?: Date;\r\n  \r\n  variants: Array<{\r\n    id: string;\r\n    name: string;\r\n    metadata: {\r\n      title?: string;\r\n      description?: string;\r\n      keywords?: string[];\r\n    };\r\n    metrics: {\r\n      impressions: number;\r\n      clicks: number;\r\n      ctr: number;\r\n      conversions: number;\r\n      conversionRate: number;\r\n      revenue: number;\r\n    };\r\n    confidence: number;\r\n    isWinner: boolean;\r\n  }>;\r\n  \r\n  results: {\r\n    winningVariant: string;\r\n    improvement: number;\r\n    significance: number;\r\n    recommendation: string;\r\n  };\r\n}\r\n\r\nexport interface CoreWebVitalsOptimization {\r\n  url: string;\r\n  currentMetrics: {\r\n    lcp: number;\r\n    fid: number;\r\n    cls: number;\r\n    fcp: number;\r\n    ttfb: number;\r\n    inp: number;\r\n  };\r\n  \r\n  targetMetrics: {\r\n    lcp: number;\r\n    fid: number;\r\n    cls: number;\r\n    fcp: number;\r\n    ttfb: number;\r\n    inp: number;\r\n  };\r\n  \r\n  optimizations: Array<{\r\n    metric: string;\r\n    issue: string;\r\n    solution: string;\r\n    priority: 'critical' | 'high' | 'medium' | 'low';\r\n    estimatedImpact: number; // percentage improvement\r\n    implementationEffort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }>;\r\n  \r\n  overallScore: number;\r\n  improvementPotential: number;\r\n}\r\n\r\nexport interface ContentOptimizationSuggestion {\r\n  url: string;\r\n  contentType: 'product' | 'category' | 'blog' | 'page';\r\n  currentScore: number;\r\n  targetScore: number;\r\n  \r\n  suggestions: Array<{\r\n    type: 'title' | 'description' | 'headings' | 'content' | 'images' | 'links' | 'schema';\r\n    current: string;\r\n    suggested: string;\r\n    reason: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    difficulty: 'easy' | 'medium' | 'hard';\r\n  }>;\r\n  \r\n  keywordOptimization: {\r\n    primaryKeyword: string;\r\n    currentDensity: number;\r\n    targetDensity: number;\r\n    relatedKeywords: string[];\r\n    semanticKeywords: string[];\r\n  };\r\n  \r\n  readabilityAnalysis: {\r\n    score: number;\r\n    grade: string;\r\n    suggestions: string[];\r\n  };\r\n}\r\n\r\nexport interface TechnicalSEOAuditResult {\r\n  url: string;\r\n  overallScore: number;\r\n  \r\n  issues: Array<{\r\n    category: 'critical' | 'error' | 'warning' | 'notice';\r\n    type: string;\r\n    description: string;\r\n    solution: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    effort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }>;\r\n  \r\n  categories: {\r\n    crawlability: { score: number; issues: number };\r\n    indexability: { score: number; issues: number };\r\n    performance: { score: number; issues: number };\r\n    mobile: { score: number; issues: number };\r\n    security: { score: number; issues: number };\r\n    structured_data: { score: number; issues: number };\r\n  };\r\n  \r\n  recommendations: Array<{\r\n    priority: 'immediate' | 'short_term' | 'long_term';\r\n    action: string;\r\n    expectedImpact: string;\r\n    resources: string[];\r\n  }>;\r\n}\r\n\r\nexport interface AutomatedRecommendation {\r\n  id: string;\r\n  type: 'keyword' | 'content' | 'technical' | 'competitor' | 'performance';\r\n  priority: 'critical' | 'high' | 'medium' | 'low';\r\n  title: string;\r\n  description: string;\r\n  \r\n  actionItems: Array<{\r\n    task: string;\r\n    effort: 'low' | 'medium' | 'high';\r\n    impact: 'high' | 'medium' | 'low';\r\n    timeline: string;\r\n    resources: string[];\r\n  }>;\r\n  \r\n  expectedResults: {\r\n    trafficIncrease: number; // percentage\r\n    rankingImprovement: number; // positions\r\n    conversionIncrease: number; // percentage\r\n    timeframe: string;\r\n  };\r\n  \r\n  createdAt: Date;\r\n  status: 'pending' | 'in_progress' | 'completed' | 'dismissed';\r\n}\r\n\r\n// Configuración por defecto\r\nconst DEFAULT_SEO_OPTIMIZATION_CONFIG: SEOOptimizationConfig = {\r\n  enableCompetitorAnalysis: true,\r\n  enableABTesting: true,\r\n  enableCoreWebVitalsOptimization: true,\r\n  enableKeywordResearch: true,\r\n  enableContentOptimization: true,\r\n  enableTechnicalAudit: true,\r\n  \r\n  competitorAnalysisDepth: 'detailed',\r\n  abTestDuration: 14, // 2 semanas\r\n  \r\n  coreWebVitalsThresholds: {\r\n    lcp: { good: 2.5, needsImprovement: 4.0 },\r\n    fid: { good: 100, needsImprovement: 300 },\r\n    cls: { good: 0.1, needsImprovement: 0.25 },\r\n    fcp: { good: 1.8, needsImprovement: 3.0 },\r\n    ttfb: { good: 600, needsImprovement: 1500 },\r\n    inp: { good: 200, needsImprovement: 500 }\r\n  },\r\n  \r\n  cacheEnabled: true,\r\n  cacheTTL: 3600, // 1 hora\r\n  \r\n  externalAPIs: {\r\n    semrush: { apiKey: '', enabled: false },\r\n    ahrefs: { apiKey: '', enabled: false },\r\n    googlePageSpeed: { apiKey: '', enabled: false }\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ENHANCED SEO OPTIMIZATION TOOLS CLASS\r\n// ===================================\r\n\r\nexport class EnhancedSEOOptimizationTools {\r\n  private static instance: EnhancedSEOOptimizationTools;\r\n  private config: SEOOptimizationConfig;\r\n  private redis: any;\r\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\r\n  private activeABTests: Map<string, ABTestResult> = new Map();\r\n  private recommendations: AutomatedRecommendation[] = [];\r\n\r\n  private constructor(config?: Partial<SEOOptimizationConfig>) {\r\n    this.config = { ...DEFAULT_SEO_OPTIMIZATION_CONFIG, ...config };\r\n    this.initializeRedis();\r\n\r\n    logger.info(LogLevel.INFO, 'Enhanced SEO Optimization Tools initialized', {\r\n      enabledFeatures: {\r\n        competitorAnalysis: this.config.enableCompetitorAnalysis,\r\n        abTesting: this.config.enableABTesting,\r\n        coreWebVitals: this.config.enableCoreWebVitalsOptimization,\r\n        keywordResearch: this.config.enableKeywordResearch,\r\n        contentOptimization: this.config.enableContentOptimization,\r\n        technicalAudit: this.config.enableTechnicalAudit\r\n      }\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  public static getInstance(config?: Partial<SEOOptimizationConfig>): EnhancedSEOOptimizationTools {\r\n    if (!EnhancedSEOOptimizationTools.instance) {\r\n      EnhancedSEOOptimizationTools.instance = new EnhancedSEOOptimizationTools(config);\r\n    }\r\n    return EnhancedSEOOptimizationTools.instance;\r\n  }\r\n\r\n  private async initializeRedis(): Promise<void> {\r\n    try {\r\n      this.redis = await getRedisClient();\r\n      logger.info(LogLevel.INFO, 'Redis initialized for SEO optimization tools', {}, LogCategory.SEO);\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Redis not available for SEO optimization tools', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE COMPETIDORES\r\n  // ===================================\r\n\r\n  /**\r\n   * Analizar competidores principales\r\n   */\r\n  public async analyzeCompetitors(competitors: string[]): Promise<CompetitorAnalysisResult[]> {\r\n    if (!this.config.enableCompetitorAnalysis) {\r\n      throw new Error('Competitor analysis is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Starting competitor analysis', { competitors }, LogCategory.SEO);\r\n\r\n      const results: CompetitorAnalysisResult[] = [];\r\n\r\n      for (const competitor of competitors) {\r\n        // Verificar cache\r\n        const cached = await this.getCachedData(`competitor:${competitor}`);\r\n        if (cached) {\r\n          results.push(cached);\r\n          continue;\r\n        }\r\n\r\n        // Realizar análisis completo\r\n        const analysis = await this.performCompetitorAnalysis(competitor);\r\n        results.push(analysis);\r\n\r\n        // Cachear resultado\r\n        await this.setCachedData(`competitor:${competitor}`, analysis);\r\n      }\r\n\r\n      // Integrar con SEO Analytics\r\n      enhancedSEOAnalyticsManager.trackSEOMetrics({\r\n        competitorAnalysis: {\r\n          competitorsAnalyzed: competitors.length,\r\n          timestamp: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, 'Competitor analysis completed', {\r\n        competitorsAnalyzed: competitors.length\r\n      }, LogCategory.SEO);\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to analyze competitors', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realizar análisis detallado de un competidor\r\n   */\r\n  private async performCompetitorAnalysis(competitor: string): Promise<CompetitorAnalysisResult> {\r\n    const domain = this.extractDomain(competitor);\r\n\r\n    // Simular análisis comprehensivo (en producción se integraría con APIs reales)\r\n    const analysis: CompetitorAnalysisResult = {\r\n      competitor,\r\n      domain,\r\n      overallScore: Math.floor(Math.random() * 40) + 60, // 60-100\r\n\r\n      strengths: [\r\n        'Strong domain authority',\r\n        'Excellent content marketing strategy',\r\n        'High-quality backlink profile',\r\n        'Optimized Core Web Vitals',\r\n        'Comprehensive keyword coverage'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 2),\r\n\r\n      weaknesses: [\r\n        'Limited social media presence',\r\n        'Slow page load times',\r\n        'Poor mobile optimization',\r\n        'Thin content on product pages',\r\n        'Missing structured data'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 1),\r\n\r\n      opportunities: [\r\n        'Untapped long-tail keywords',\r\n        'Content gap in how-to guides',\r\n        'Local SEO optimization',\r\n        'Video content creation',\r\n        'Voice search optimization'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 2),\r\n\r\n      keywordGaps: await this.analyzeKeywordGaps(competitor),\r\n      contentGaps: await this.analyzeContentGaps(competitor),\r\n      technicalAdvantages: [\r\n        'HTTPS implementation',\r\n        'XML sitemap optimization',\r\n        'Clean URL structure',\r\n        'Proper canonical tags'\r\n      ],\r\n\r\n      backlinksAnalysis: {\r\n        totalBacklinks: Math.floor(Math.random() * 50000) + 10000,\r\n        uniqueDomains: Math.floor(Math.random() * 5000) + 1000,\r\n        domainAuthority: Math.floor(Math.random() * 30) + 50,\r\n        topReferringDomains: [\r\n          { domain: 'industry-blog.com', authority: 85, backlinks: 150, traffic: 50000 },\r\n          { domain: 'news-site.com', authority: 78, backlinks: 89, traffic: 75000 },\r\n          { domain: 'partner-site.com', authority: 72, backlinks: 234, traffic: 30000 }\r\n        ],\r\n        anchorTextDistribution: {\r\n          'brand name': 35,\r\n          'generic terms': 25,\r\n          'exact match': 15,\r\n          'partial match': 20,\r\n          'other': 5\r\n        },\r\n        linkTypes: {\r\n          doFollow: 75,\r\n          noFollow: 20,\r\n          sponsored: 3,\r\n          ugc: 2\r\n        }\r\n      },\r\n\r\n      socialSignals: {\r\n        facebook: { likes: 15000, shares: 2500, comments: 800 },\r\n        twitter: { tweets: 5000, retweets: 1200, likes: 8000 },\r\n        linkedin: { shares: 800, likes: 1500, comments: 200 },\r\n        instagram: { posts: 1200, likes: 25000, comments: 1800 },\r\n        totalEngagement: 61900,\r\n        viralityScore: Math.floor(Math.random() * 40) + 60\r\n      },\r\n\r\n      lastAnalyzed: new Date()\r\n    };\r\n\r\n    return analysis;\r\n  }\r\n\r\n  /**\r\n   * Analizar gaps de keywords\r\n   */\r\n  private async analyzeKeywordGaps(competitor: string): Promise<KeywordGap[]> {\r\n    // Simular análisis de keyword gaps\r\n    const keywords = [\r\n      'pintura interior', 'pintura exterior', 'esmalte sintético', 'látex acrílico',\r\n      'pintura antihumedad', 'barniz para madera', 'imprimación', 'rodillos de pintura',\r\n      'pinceles profesionales', 'pistola de pintar'\r\n    ];\r\n\r\n    return keywords.map(keyword => ({\r\n      keyword,\r\n      competitorRanking: Math.floor(Math.random() * 10) + 1,\r\n      ourRanking: Math.random() > 0.3 ? Math.floor(Math.random() * 20) + 11 : null,\r\n      searchVolume: Math.floor(Math.random() * 5000) + 500,\r\n      difficulty: Math.floor(Math.random() * 100),\r\n      opportunity: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\r\n      intent: ['informational', 'navigational', 'transactional', 'commercial'][Math.floor(Math.random() * 4)] as any,\r\n      estimatedTraffic: Math.floor(Math.random() * 1000) + 100,\r\n      estimatedRevenue: Math.floor(Math.random() * 5000) + 500\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Analizar gaps de contenido\r\n   */\r\n  private async analyzeContentGaps(competitor: string): Promise<ContentGap[]> {\r\n    const topics = [\r\n      'Guía de colores para interiores',\r\n      'Cómo preparar superficies antes de pintar',\r\n      'Técnicas de pintura profesional',\r\n      'Mantenimiento de herramientas de pintura',\r\n      'Tendencias en decoración 2024'\r\n    ];\r\n\r\n    return topics.map(topic => ({\r\n      topic,\r\n      competitorContent: {\r\n        title: `${topic} - Guía completa`,\r\n        url: `https://${competitor}/blog/${topic.toLowerCase().replace(/\\s+/g, '-')}`,\r\n        wordCount: Math.floor(Math.random() * 2000) + 1000,\r\n        socialShares: Math.floor(Math.random() * 500) + 50,\r\n        backlinks: Math.floor(Math.random() * 50) + 10\r\n      },\r\n      ourContent: {\r\n        exists: Math.random() > 0.5,\r\n        url: Math.random() > 0.5 ? `/blog/${topic.toLowerCase().replace(/\\s+/g, '-')}` : undefined,\r\n        wordCount: Math.random() > 0.5 ? Math.floor(Math.random() * 1500) + 500 : undefined,\r\n        socialShares: Math.random() > 0.5 ? Math.floor(Math.random() * 200) + 20 : undefined,\r\n        backlinks: Math.random() > 0.5 ? Math.floor(Math.random() * 20) + 5 : undefined\r\n      },\r\n      opportunity: Math.random() > 0.6 ? 'create' : Math.random() > 0.3 ? 'improve' : 'expand',\r\n      priority: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\r\n      estimatedEffort: Math.random() > 0.6 ? 'low' : Math.random() > 0.3 ? 'medium' : 'high'\r\n    }));\r\n  }\r\n\r\n  // ===================================\r\n  // A/B TESTING DE METADATA\r\n  // ===================================\r\n\r\n  /**\r\n   * Crear nuevo A/B test para metadata\r\n   */\r\n  public async createABTest(testConfig: {\r\n    name: string;\r\n    url: string;\r\n    variants: Array<{\r\n      name: string;\r\n      metadata: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n      };\r\n    }>;\r\n  }): Promise<string> {\r\n    if (!this.config.enableABTesting) {\r\n      throw new Error('A/B Testing is disabled');\r\n    }\r\n\r\n    try {\r\n      const testId = `ab_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      const abTest: ABTestResult = {\r\n        testId,\r\n        testName: testConfig.name,\r\n        status: 'running',\r\n        startDate: new Date(),\r\n\r\n        variants: testConfig.variants.map((variant, index) => ({\r\n          id: `variant_${index}`,\r\n          name: variant.name,\r\n          metadata: variant.metadata,\r\n          metrics: {\r\n            impressions: 0,\r\n            clicks: 0,\r\n            ctr: 0,\r\n            conversions: 0,\r\n            conversionRate: 0,\r\n            revenue: 0\r\n          },\r\n          confidence: 0,\r\n          isWinner: false\r\n        })),\r\n\r\n        results: {\r\n          winningVariant: '',\r\n          improvement: 0,\r\n          significance: 0,\r\n          recommendation: ''\r\n        }\r\n      };\r\n\r\n      this.activeABTests.set(testId, abTest);\r\n\r\n      // Cachear en Redis\r\n      await this.setCachedData(`ab_test:${testId}`, abTest);\r\n\r\n      logger.info(LogLevel.INFO, 'A/B Test created', {\r\n        testId,\r\n        testName: testConfig.name,\r\n        variants: testConfig.variants.length\r\n      }, LogCategory.SEO);\r\n\r\n      return testId;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to create A/B test', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar métricas de A/B test\r\n   */\r\n  public async updateABTestMetrics(testId: string, variantId: string, metrics: {\r\n    impressions?: number;\r\n    clicks?: number;\r\n    conversions?: number;\r\n    revenue?: number;\r\n  }): Promise<void> {\r\n    try {\r\n      const test = this.activeABTests.get(testId);\r\n      if (!test) {\r\n        throw new Error(`A/B Test ${testId} not found`);\r\n      }\r\n\r\n      const variant = test.variants.find(v => v.id === variantId);\r\n      if (!variant) {\r\n        throw new Error(`Variant ${variantId} not found in test ${testId}`);\r\n      }\r\n\r\n      // Actualizar métricas\r\n      if (metrics.impressions !== undefined) {\r\n        variant.metrics.impressions += metrics.impressions;\r\n      }\r\n      if (metrics.clicks !== undefined) {\r\n        variant.metrics.clicks += metrics.clicks;\r\n      }\r\n      if (metrics.conversions !== undefined) {\r\n        variant.metrics.conversions += metrics.conversions;\r\n      }\r\n      if (metrics.revenue !== undefined) {\r\n        variant.metrics.revenue += metrics.revenue;\r\n      }\r\n\r\n      // Recalcular métricas derivadas\r\n      variant.metrics.ctr = variant.metrics.impressions > 0\r\n        ? (variant.metrics.clicks / variant.metrics.impressions) * 100\r\n        : 0;\r\n\r\n      variant.metrics.conversionRate = variant.metrics.clicks > 0\r\n        ? (variant.metrics.conversions / variant.metrics.clicks) * 100\r\n        : 0;\r\n\r\n      // Actualizar cache\r\n      await this.setCachedData(`ab_test:${testId}`, test);\r\n\r\n      logger.info(LogLevel.INFO, 'A/B Test metrics updated', {\r\n        testId,\r\n        variantId,\r\n        metrics: variant.metrics\r\n      }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to update A/B test metrics', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analizar resultados de A/B test\r\n   */\r\n  public async analyzeABTestResults(testId: string): Promise<ABTestResult> {\r\n    try {\r\n      const test = this.activeABTests.get(testId);\r\n      if (!test) {\r\n        throw new Error(`A/B Test ${testId} not found`);\r\n      }\r\n\r\n      // Calcular significancia estadística (simplificado)\r\n      const controlVariant = test.variants[0];\r\n      const testVariants = test.variants.slice(1);\r\n\r\n      let bestVariant = controlVariant;\r\n      let maxImprovement = 0;\r\n\r\n      testVariants.forEach(variant => {\r\n        const improvement = ((variant.metrics.conversionRate - controlVariant.metrics.conversionRate)\r\n          / controlVariant.metrics.conversionRate) * 100;\r\n\r\n        if (improvement > maxImprovement) {\r\n          maxImprovement = improvement;\r\n          bestVariant = variant;\r\n        }\r\n\r\n        // Calcular confianza (simplificado)\r\n        variant.confidence = Math.min(95, Math.max(0,\r\n          (variant.metrics.conversions / Math.max(1, variant.metrics.clicks)) * 100\r\n        ));\r\n      });\r\n\r\n      // Marcar ganador\r\n      test.variants.forEach(v => v.isWinner = false);\r\n      bestVariant.isWinner = true;\r\n\r\n      // Actualizar resultados\r\n      test.results = {\r\n        winningVariant: bestVariant.id,\r\n        improvement: maxImprovement,\r\n        significance: bestVariant.confidence,\r\n        recommendation: maxImprovement > 10\r\n          ? `Implement ${bestVariant.name} - shows ${maxImprovement.toFixed(1)}% improvement`\r\n          : 'Continue testing - no significant difference detected'\r\n      };\r\n\r\n      // Actualizar cache\r\n      await this.setCachedData(`ab_test:${testId}`, test);\r\n\r\n      return test;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to analyze A/B test results', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // OPTIMIZACIÓN DE CORE WEB VITALS\r\n  // ===================================\r\n\r\n  /**\r\n   * Analizar Core Web Vitals de una URL\r\n   */\r\n  public async analyzeCoreWebVitals(url: string): Promise<CoreWebVitalsOptimization> {\r\n    if (!this.config.enableCoreWebVitalsOptimization) {\r\n      throw new Error('Core Web Vitals optimization is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Analyzing Core Web Vitals', { url }, LogCategory.SEO);\r\n\r\n      // Simular métricas actuales (en producción se usaría PageSpeed Insights API)\r\n      const currentMetrics = {\r\n        lcp: 2.8 + Math.random() * 2, // 2.8-4.8s\r\n        fid: 80 + Math.random() * 200, // 80-280ms\r\n        cls: 0.05 + Math.random() * 0.2, // 0.05-0.25\r\n        fcp: 1.5 + Math.random() * 1.5, // 1.5-3s\r\n        ttfb: 400 + Math.random() * 800, // 400-1200ms\r\n        inp: 150 + Math.random() * 300 // 150-450ms\r\n      };\r\n\r\n      const targetMetrics = {\r\n        lcp: this.config.coreWebVitalsThresholds.lcp.good,\r\n        fid: this.config.coreWebVitalsThresholds.fid.good,\r\n        cls: this.config.coreWebVitalsThresholds.cls.good,\r\n        fcp: this.config.coreWebVitalsThresholds.fcp.good,\r\n        ttfb: this.config.coreWebVitalsThresholds.ttfb.good,\r\n        inp: this.config.coreWebVitalsThresholds.inp.good\r\n      };\r\n\r\n      const optimizations = this.generateCoreWebVitalsOptimizations(currentMetrics, targetMetrics);\r\n\r\n      const overallScore = this.calculateCoreWebVitalsScore(currentMetrics);\r\n      const improvementPotential = this.calculateImprovementPotential(currentMetrics, targetMetrics);\r\n\r\n      const result: CoreWebVitalsOptimization = {\r\n        url,\r\n        currentMetrics,\r\n        targetMetrics,\r\n        optimizations,\r\n        overallScore,\r\n        improvementPotential\r\n      };\r\n\r\n      // Cachear resultado\r\n      await this.setCachedData(`cwv:${url}`, result);\r\n\r\n      logger.info(LogLevel.INFO, 'Core Web Vitals analysis completed', {\r\n        url,\r\n        overallScore,\r\n        improvementPotential\r\n      }, LogCategory.SEO);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to analyze Core Web Vitals', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generar optimizaciones específicas para Core Web Vitals\r\n   */\r\n  private generateCoreWebVitalsOptimizations(current: any, target: any): Array<{\r\n    metric: string;\r\n    issue: string;\r\n    solution: string;\r\n    priority: 'critical' | 'high' | 'medium' | 'low';\r\n    estimatedImpact: number;\r\n    implementationEffort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }> {\r\n    const optimizations = [];\r\n\r\n    // LCP Optimizations\r\n    if (current.lcp > target.lcp) {\r\n      optimizations.push({\r\n        metric: 'LCP',\r\n        issue: `LCP is ${current.lcp.toFixed(2)}s, target is ${target.lcp}s`,\r\n        solution: 'Optimize largest contentful paint by compressing images, using CDN, and preloading critical resources',\r\n        priority: current.lcp > 4.0 ? 'critical' : 'high' as any,\r\n        estimatedImpact: 25,\r\n        implementationEffort: 'medium' as any,\r\n        resources: ['Image optimization tools', 'CDN setup', 'Critical resource preloading']\r\n      });\r\n    }\r\n\r\n    // FID Optimizations\r\n    if (current.fid > target.fid) {\r\n      optimizations.push({\r\n        metric: 'FID',\r\n        issue: `FID is ${current.fid.toFixed(0)}ms, target is ${target.fid}ms`,\r\n        solution: 'Reduce JavaScript execution time and optimize third-party scripts',\r\n        priority: current.fid > 300 ? 'critical' : 'high' as any,\r\n        estimatedImpact: 30,\r\n        implementationEffort: 'high' as any,\r\n        resources: ['JavaScript optimization', 'Code splitting', 'Third-party script audit']\r\n      });\r\n    }\r\n\r\n    // CLS Optimizations\r\n    if (current.cls > target.cls) {\r\n      optimizations.push({\r\n        metric: 'CLS',\r\n        issue: `CLS is ${current.cls.toFixed(3)}, target is ${target.cls}`,\r\n        solution: 'Set explicit dimensions for images and ads, avoid inserting content above existing content',\r\n        priority: current.cls > 0.25 ? 'critical' : 'medium' as any,\r\n        estimatedImpact: 20,\r\n        implementationEffort: 'low' as any,\r\n        resources: ['CSS layout optimization', 'Image dimension attributes', 'Font loading optimization']\r\n      });\r\n    }\r\n\r\n    return optimizations;\r\n  }\r\n\r\n  /**\r\n   * Calcular score general de Core Web Vitals\r\n   */\r\n  private calculateCoreWebVitalsScore(metrics: any): number {\r\n    const lcpScore = metrics.lcp <= 2.5 ? 100 : metrics.lcp <= 4.0 ? 75 : 25;\r\n    const fidScore = metrics.fid <= 100 ? 100 : metrics.fid <= 300 ? 75 : 25;\r\n    const clsScore = metrics.cls <= 0.1 ? 100 : metrics.cls <= 0.25 ? 75 : 25;\r\n\r\n    return Math.round((lcpScore + fidScore + clsScore) / 3);\r\n  }\r\n\r\n  /**\r\n   * Calcular potencial de mejora\r\n   */\r\n  private calculateImprovementPotential(current: any, target: any): number {\r\n    const improvements = [\r\n      Math.max(0, (current.lcp - target.lcp) / current.lcp * 100),\r\n      Math.max(0, (current.fid - target.fid) / current.fid * 100),\r\n      Math.max(0, (current.cls - target.cls) / current.cls * 100)\r\n    ];\r\n\r\n    return Math.round(improvements.reduce((a, b) => a + b, 0) / improvements.length);\r\n  }\r\n\r\n  // ===================================\r\n  // OPTIMIZACIÓN DE CONTENIDO\r\n  // ===================================\r\n\r\n  /**\r\n   * Analizar y optimizar contenido de una página\r\n   */\r\n  public async optimizeContent(url: string, contentType: 'product' | 'category' | 'blog' | 'page'): Promise<ContentOptimizationSuggestion> {\r\n    if (!this.config.enableContentOptimization) {\r\n      throw new Error('Content optimization is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Analyzing content for optimization', { url, contentType }, LogCategory.SEO);\r\n\r\n      // Simular análisis de contenido actual\r\n      const currentScore = Math.floor(Math.random() * 40) + 40; // 40-80\r\n      const targetScore = 85;\r\n\r\n      const suggestions = this.generateContentSuggestions(contentType, currentScore);\r\n      const keywordOptimization = this.analyzeKeywordOptimization(contentType);\r\n      const readabilityAnalysis = this.analyzeReadability();\r\n\r\n      const result: ContentOptimizationSuggestion = {\r\n        url,\r\n        contentType,\r\n        currentScore,\r\n        targetScore,\r\n        suggestions,\r\n        keywordOptimization,\r\n        readabilityAnalysis\r\n      };\r\n\r\n      // Cachear resultado\r\n      await this.setCachedData(`content:${url}`, result);\r\n\r\n      logger.info(LogLevel.INFO, 'Content optimization analysis completed', {\r\n        url,\r\n        currentScore,\r\n        suggestionsCount: suggestions.length\r\n      }, LogCategory.SEO);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to optimize content', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generar sugerencias de contenido\r\n   */\r\n  private generateContentSuggestions(contentType: string, currentScore: number): Array<{\r\n    type: 'title' | 'description' | 'headings' | 'content' | 'images' | 'links' | 'schema';\r\n    current: string;\r\n    suggested: string;\r\n    reason: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    difficulty: 'easy' | 'medium' | 'hard';\r\n  }> {\r\n    const suggestions = [];\r\n\r\n    if (currentScore < 70) {\r\n      suggestions.push({\r\n        type: 'title' as any,\r\n        current: 'Pintura para Interiores',\r\n        suggested: 'Pintura para Interiores de Alta Calidad - Colores Vibrantes | Pinteya',\r\n        reason: 'Include target keywords and brand name for better SEO',\r\n        impact: 'high' as any,\r\n        difficulty: 'easy' as any\r\n      });\r\n\r\n      suggestions.push({\r\n        type: 'description' as any,\r\n        current: 'Venta de pinturas',\r\n        suggested: 'Descubre nuestra amplia gama de pinturas para interiores de alta calidad. Colores vibrantes, acabados duraderos y precios competitivos. ¡Envío gratis!',\r\n        reason: 'More descriptive and includes call-to-action',\r\n        impact: 'high' as any,\r\n        difficulty: 'easy' as any\r\n      });\r\n    }\r\n\r\n    if (contentType === 'product') {\r\n      suggestions.push({\r\n        type: 'content' as any,\r\n        current: 'Descripción básica del producto',\r\n        suggested: 'Descripción detallada con beneficios, especificaciones técnicas, casos de uso y testimonios',\r\n        reason: 'Richer content improves user engagement and SEO',\r\n        impact: 'medium' as any,\r\n        difficulty: 'medium' as any\r\n      });\r\n\r\n      suggestions.push({\r\n        type: 'images' as any,\r\n        current: 'Imágenes sin alt text',\r\n        suggested: 'Agregar alt text descriptivo a todas las imágenes',\r\n        reason: 'Alt text improves accessibility and image SEO',\r\n        impact: 'medium' as any,\r\n        difficulty: 'easy' as any\r\n      });\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  /**\r\n   * Analizar optimización de keywords\r\n   */\r\n  private analyzeKeywordOptimization(contentType: string): {\r\n    primaryKeyword: string;\r\n    currentDensity: number;\r\n    targetDensity: number;\r\n    relatedKeywords: string[];\r\n    semanticKeywords: string[];\r\n  } {\r\n    const keywordsByType = {\r\n      product: 'pintura interior',\r\n      category: 'pinturas',\r\n      blog: 'como pintar',\r\n      page: 'pintura profesional'\r\n    };\r\n\r\n    return {\r\n      primaryKeyword: keywordsByType[contentType as keyof typeof keywordsByType] || 'pintura',\r\n      currentDensity: Math.random() * 3 + 0.5, // 0.5-3.5%\r\n      targetDensity: 2.0, // 2%\r\n      relatedKeywords: ['pintura acrílica', 'esmalte sintético', 'látex', 'barniz'],\r\n      semanticKeywords: ['decoración', 'hogar', 'renovación', 'color', 'acabado']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analizar legibilidad del contenido\r\n   */\r\n  private analyzeReadability(): {\r\n    score: number;\r\n    grade: string;\r\n    suggestions: string[];\r\n  } {\r\n    const score = Math.floor(Math.random() * 40) + 50; // 50-90\r\n\r\n    return {\r\n      score,\r\n      grade: score >= 80 ? 'Excelente' : score >= 70 ? 'Bueno' : score >= 60 ? 'Regular' : 'Necesita mejora',\r\n      suggestions: [\r\n        'Usar oraciones más cortas (máximo 20 palabras)',\r\n        'Incluir más subtítulos para dividir el contenido',\r\n        'Usar palabras más simples cuando sea posible',\r\n        'Agregar listas con viñetas para mejorar la escaneabilidad'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 1)\r\n    };\r\n  }\r\n\r\n  // ===================================\r\n  // AUDITORÍA TÉCNICA SEO\r\n  // ===================================\r\n\r\n  /**\r\n   * Realizar auditoría técnica SEO completa\r\n   */\r\n  public async performTechnicalAudit(url: string): Promise<TechnicalSEOAuditResult> {\r\n    if (!this.config.enableTechnicalAudit) {\r\n      throw new Error('Technical SEO audit is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Starting technical SEO audit', { url }, LogCategory.SEO);\r\n\r\n      const issues = this.generateTechnicalIssues();\r\n      const categories = this.categorizeTechnicalIssues(issues);\r\n      const overallScore = this.calculateTechnicalScore(categories);\r\n      const recommendations = this.generateTechnicalRecommendations(issues);\r\n\r\n      const result: TechnicalSEOAuditResult = {\r\n        url,\r\n        overallScore,\r\n        issues,\r\n        categories,\r\n        recommendations\r\n      };\r\n\r\n      // Cachear resultado\r\n      await this.setCachedData(`technical:${url}`, result);\r\n\r\n      logger.info(LogLevel.INFO, 'Technical SEO audit completed', {\r\n        url,\r\n        overallScore,\r\n        issuesCount: issues.length\r\n      }, LogCategory.SEO);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to perform technical audit', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generar issues técnicos simulados\r\n   */\r\n  private generateTechnicalIssues(): Array<{\r\n    category: 'critical' | 'error' | 'warning' | 'notice';\r\n    type: string;\r\n    description: string;\r\n    solution: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    effort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }> {\r\n    const possibleIssues = [\r\n      {\r\n        category: 'critical' as any,\r\n        type: 'Missing meta description',\r\n        description: 'Several pages are missing meta descriptions',\r\n        solution: 'Add unique, descriptive meta descriptions to all pages',\r\n        impact: 'high' as any,\r\n        effort: 'low' as any,\r\n        resources: ['SEO writing guide', 'Meta description best practices']\r\n      },\r\n      {\r\n        category: 'error' as any,\r\n        type: 'Duplicate title tags',\r\n        description: 'Multiple pages have identical title tags',\r\n        solution: 'Create unique title tags for each page',\r\n        impact: 'high' as any,\r\n        effort: 'medium' as any,\r\n        resources: ['Title tag optimization guide', 'SEO templates']\r\n      },\r\n      {\r\n        category: 'warning' as any,\r\n        type: 'Large images',\r\n        description: 'Some images are larger than 1MB',\r\n        solution: 'Compress images and use modern formats like WebP',\r\n        impact: 'medium' as any,\r\n        effort: 'low' as any,\r\n        resources: ['Image compression tools', 'WebP conversion guide']\r\n      },\r\n      {\r\n        category: 'notice' as any,\r\n        type: 'Missing structured data',\r\n        description: 'Product pages lack structured data markup',\r\n        solution: 'Implement JSON-LD structured data for products',\r\n        impact: 'medium' as any,\r\n        effort: 'medium' as any,\r\n        resources: ['Schema.org documentation', 'JSON-LD generator']\r\n      }\r\n    ];\r\n\r\n    // Retornar subset aleatorio de issues\r\n    return possibleIssues.slice(0, Math.floor(Math.random() * 3) + 2);\r\n  }\r\n\r\n  /**\r\n   * Categorizar issues técnicos\r\n   */\r\n  private categorizeTechnicalIssues(issues: any[]): {\r\n    crawlability: { score: number; issues: number };\r\n    indexability: { score: number; issues: number };\r\n    performance: { score: number; issues: number };\r\n    mobile: { score: number; issues: number };\r\n    security: { score: number; issues: number };\r\n    structured_data: { score: number; issues: number };\r\n  } {\r\n    const criticalIssues = issues.filter(i => i.category === 'critical').length;\r\n    const errorIssues = issues.filter(i => i.category === 'error').length;\r\n\r\n    return {\r\n      crawlability: { score: Math.max(50, 100 - criticalIssues * 20), issues: criticalIssues },\r\n      indexability: { score: Math.max(60, 100 - errorIssues * 15), issues: errorIssues },\r\n      performance: { score: Math.floor(Math.random() * 30) + 70, issues: Math.floor(Math.random() * 3) },\r\n      mobile: { score: Math.floor(Math.random() * 20) + 80, issues: Math.floor(Math.random() * 2) },\r\n      security: { score: Math.floor(Math.random() * 10) + 90, issues: Math.floor(Math.random() * 1) },\r\n      structured_data: { score: Math.floor(Math.random() * 40) + 60, issues: Math.floor(Math.random() * 3) }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcular score técnico general\r\n   */\r\n  private calculateTechnicalScore(categories: any): number {\r\n    const scores = Object.values(categories).map((cat: any) => cat.score);\r\n    return Math.round(scores.reduce((a: number, b: number) => a + b, 0) / scores.length);\r\n  }\r\n\r\n  /**\r\n   * Generar recomendaciones técnicas\r\n   */\r\n  private generateTechnicalRecommendations(issues: any[]): Array<{\r\n    priority: 'immediate' | 'short_term' | 'long_term';\r\n    action: string;\r\n    expectedImpact: string;\r\n    resources: string[];\r\n  }> {\r\n    const recommendations = [];\r\n\r\n    const criticalIssues = issues.filter(i => i.category === 'critical');\r\n    if (criticalIssues.length > 0) {\r\n      recommendations.push({\r\n        priority: 'immediate' as any,\r\n        action: 'Fix critical SEO issues affecting crawlability',\r\n        expectedImpact: 'Immediate improvement in search engine indexing',\r\n        resources: ['SEO audit checklist', 'Technical SEO guide']\r\n      });\r\n    }\r\n\r\n    recommendations.push({\r\n      priority: 'short_term' as any,\r\n      action: 'Implement comprehensive structured data markup',\r\n      expectedImpact: 'Enhanced search result appearance and click-through rates',\r\n      resources: ['Schema.org implementation guide', 'Rich snippets testing tool']\r\n    });\r\n\r\n    recommendations.push({\r\n      priority: 'long_term' as any,\r\n      action: 'Optimize Core Web Vitals and overall site performance',\r\n      expectedImpact: 'Better user experience and search rankings',\r\n      resources: ['PageSpeed Insights', 'Web Vitals optimization guide']\r\n    });\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  // ===================================\r\n  // RECOMENDACIONES AUTOMÁTICAS\r\n  // ===================================\r\n\r\n  /**\r\n   * Generar recomendaciones automáticas basadas en análisis\r\n   */\r\n  public async generateAutomatedRecommendations(): Promise<AutomatedRecommendation[]> {\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Generating automated SEO recommendations', {}, LogCategory.SEO);\r\n\r\n      const recommendations: AutomatedRecommendation[] = [];\r\n\r\n      // Recomendación de keywords\r\n      recommendations.push({\r\n        id: `rec_${Date.now()}_keywords`,\r\n        type: 'keyword',\r\n        priority: 'high',\r\n        title: 'Optimizar keywords de cola larga',\r\n        description: 'Se han identificado oportunidades en keywords de cola larga con baja competencia',\r\n\r\n        actionItems: [\r\n          {\r\n            task: 'Investigar keywords de cola larga relacionadas con \"pintura ecológica\"',\r\n            effort: 'low',\r\n            impact: 'high',\r\n            timeline: '1 semana',\r\n            resources: ['Keyword research tools', 'Competitor analysis']\r\n          },\r\n          {\r\n            task: 'Crear contenido optimizado para estas keywords',\r\n            effort: 'medium',\r\n            impact: 'high',\r\n            timeline: '2-3 semanas',\r\n            resources: ['Content creation team', 'SEO writing guidelines']\r\n          }\r\n        ],\r\n\r\n        expectedResults: {\r\n          trafficIncrease: 25,\r\n          rankingImprovement: 5,\r\n          conversionIncrease: 15,\r\n          timeframe: '2-3 meses'\r\n        },\r\n\r\n        createdAt: new Date(),\r\n        status: 'pending'\r\n      });\r\n\r\n      // Recomendación técnica\r\n      recommendations.push({\r\n        id: `rec_${Date.now()}_technical`,\r\n        type: 'technical',\r\n        priority: 'critical',\r\n        title: 'Mejorar Core Web Vitals',\r\n        description: 'Las métricas de Core Web Vitals están por debajo del umbral recomendado',\r\n\r\n        actionItems: [\r\n          {\r\n            task: 'Optimizar imágenes y implementar lazy loading',\r\n            effort: 'medium',\r\n            impact: 'high',\r\n            timeline: '1 semana',\r\n            resources: ['Image optimization tools', 'Development team']\r\n          },\r\n          {\r\n            task: 'Minimizar JavaScript y CSS',\r\n            effort: 'high',\r\n            impact: 'high',\r\n            timeline: '2 semanas',\r\n            resources: ['Build optimization tools', 'Performance audit']\r\n          }\r\n        ],\r\n\r\n        expectedResults: {\r\n          trafficIncrease: 15,\r\n          rankingImprovement: 3,\r\n          conversionIncrease: 20,\r\n          timeframe: '1-2 meses'\r\n        },\r\n\r\n        createdAt: new Date(),\r\n        status: 'pending'\r\n      });\r\n\r\n      this.recommendations = recommendations;\r\n\r\n      logger.info(LogLevel.INFO, 'Automated recommendations generated', {\r\n        count: recommendations.length\r\n      }, LogCategory.SEO);\r\n\r\n      return recommendations;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to generate automated recommendations', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE UTILIDAD Y CACHE\r\n  // ===================================\r\n\r\n  /**\r\n   * Extraer dominio de URL\r\n   */\r\n  private extractDomain(url: string): string {\r\n    try {\r\n      return new URL(url.startsWith('http') ? url : `https://${url}`).hostname;\r\n    } catch {\r\n      return url;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener datos del cache\r\n   */\r\n  private async getCachedData(key: string): Promise<any> {\r\n    if (!this.config.cacheEnabled) {return null;}\r\n\r\n    try {\r\n      // Intentar Redis primero\r\n      if (this.redis) {\r\n        const cached = await this.redis.get(`seo_tools:${key}`);\r\n        if (cached) {\r\n          return JSON.parse(cached);\r\n        }\r\n      }\r\n\r\n      // Fallback a cache en memoria\r\n      const cached = this.cache.get(key);\r\n      if (cached && Date.now() - cached.timestamp < this.config.cacheTTL * 1000) {\r\n        return cached.data;\r\n      }\r\n\r\n      return null;\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error accessing cache', {}, LogCategory.SEO);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guardar datos en cache\r\n   */\r\n  private async setCachedData(key: string, data: any): Promise<void> {\r\n    if (!this.config.cacheEnabled) {return;}\r\n\r\n    try {\r\n      // Cachear en Redis\r\n      if (this.redis) {\r\n        await this.redis.setex(`seo_tools:${key}`, this.config.cacheTTL, JSON.stringify(data));\r\n      }\r\n\r\n      // Cachear en memoria como fallback\r\n      this.cache.set(key, { data, timestamp: Date.now() });\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error caching data', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configurar herramientas\r\n   */\r\n  public configure(config: Partial<SEOOptimizationConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    logger.info(LogLevel.INFO, 'SEO Optimization Tools reconfigured', {\r\n      enabledFeatures: Object.keys(config)\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  /**\r\n   * Limpiar cache\r\n   */\r\n  public async clearCache(): Promise<void> {\r\n    try {\r\n      // Limpiar Redis\r\n      if (this.redis) {\r\n        const keys = await this.redis.keys('seo_tools:*');\r\n        if (keys.length > 0) {\r\n          await this.redis.del(...keys);\r\n        }\r\n      }\r\n\r\n      // Limpiar cache en memoria\r\n      this.cache.clear();\r\n\r\n      logger.info(LogLevel.INFO, 'SEO tools cache cleared', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error clearing cache', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de uso\r\n   */\r\n  public getUsageStats(): {\r\n    activeABTests: number;\r\n    totalRecommendations: number;\r\n    cacheSize: number;\r\n    enabledFeatures: string[];\r\n  } {\r\n    return {\r\n      activeABTests: this.activeABTests.size,\r\n      totalRecommendations: this.recommendations.length,\r\n      cacheSize: this.cache.size,\r\n      enabledFeatures: Object.entries(this.config)\r\n        .filter(([key, value]) => key.startsWith('enable') && value)\r\n        .map(([key]) => key.replace('enable', ''))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destruir instancia y limpiar recursos\r\n   */\r\n  public async destroy(): Promise<void> {\r\n    try {\r\n      await this.clearCache();\r\n\r\n      this.activeABTests.clear();\r\n      this.recommendations = [];\r\n\r\n      if (this.redis) {\r\n        this.redis = null;\r\n      }\r\n\r\n      logger.info(LogLevel.INFO, 'Enhanced SEO Optimization Tools destroyed', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error destroying SEO optimization tools', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTACIONES\r\n// ===================================\r\n\r\n// Instancia singleton\r\nexport const enhancedSEOOptimizationTools = EnhancedSEOOptimizationTools.getInstance();\r\n\r\n// Exportar clase para uso directo\r\nexport { EnhancedSEOOptimizationTools as SEOOptimizationTools };\r\n\r\n// Exportar todos los tipos\r\nexport type {\r\n  SEOOptimizationConfig,\r\n  CoreWebVitalsThresholds,\r\n  CompetitorAnalysisResult,\r\n  KeywordGap,\r\n  ContentGap,\r\n  BacklinksAnalysis,\r\n  SocialSignalsAnalysis,\r\n  ABTestResult,\r\n  CoreWebVitalsOptimization,\r\n  ContentOptimizationSuggestion,\r\n  TechnicalSEOAuditResult,\r\n  AutomatedRecommendation\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["EnhancedSEOOptimizationTools","SEOOptimizationTools","enhancedSEOOptimizationTools","DEFAULT_SEO_OPTIMIZATION_CONFIG","enableCompetitorAnalysis","enableABTesting","enableCoreWebVitalsOptimization","enableKeywordResearch","enableContentOptimization","enableTechnicalAudit","competitorAnalysisDepth","abTestDuration","coreWebVitalsThresholds","lcp","good","needsImprovement","fid","cls","fcp","ttfb","inp","cacheEnabled","cacheTTL","externalAPIs","semrush","apiKey","enabled","ahrefs","googlePageSpeed","config","cache","Map","activeABTests","recommendations","initializeRedis","logger","info","LogLevel","INFO","enabledFeatures","competitorAnalysis","abTesting","coreWebVitals","keywordResearch","contentOptimization","technicalAudit","LogCategory","SEO","getInstance","instance","redis","getRedisClient","error","warn","WARN","analyzeCompetitors","competitors","Error","results","competitor","cached","getCachedData","push","analysis","performCompetitorAnalysis","setCachedData","enhancedSEOAnalyticsManager","trackSEOMetrics","competitorsAnalyzed","length","timestamp","Date","ERROR","domain","extractDomain","overallScore","Math","floor","random","strengths","slice","weaknesses","opportunities","keywordGaps","analyzeKeywordGaps","contentGaps","analyzeContentGaps","technicalAdvantages","backlinksAnalysis","totalBacklinks","uniqueDomains","domainAuthority","topReferringDomains","authority","backlinks","traffic","anchorTextDistribution","linkTypes","doFollow","noFollow","sponsored","ugc","socialSignals","facebook","likes","shares","comments","twitter","tweets","retweets","linkedin","instagram","posts","totalEngagement","viralityScore","lastAnalyzed","keywords","map","keyword","competitorRanking","ourRanking","searchVolume","difficulty","opportunity","intent","estimatedTraffic","estimatedRevenue","topics","topic","competitorContent","title","url","toLowerCase","replace","wordCount","socialShares","ourContent","exists","undefined","priority","estimatedEffort","createABTest","testConfig","testId","now","toString","substr","abTest","testName","name","status","startDate","variants","variant","index","id","metadata","metrics","impressions","clicks","ctr","conversions","conversionRate","revenue","confidence","isWinner","winningVariant","improvement","significance","recommendation","set","updateABTestMetrics","variantId","test","get","find","v","analyzeABTestResults","controlVariant","testVariants","bestVariant","maxImprovement","forEach","min","max","toFixed","analyzeCoreWebVitals","currentMetrics","targetMetrics","optimizations","generateCoreWebVitalsOptimizations","calculateCoreWebVitalsScore","improvementPotential","calculateImprovementPotential","result","current","target","metric","issue","solution","estimatedImpact","implementationEffort","resources","lcpScore","fidScore","clsScore","round","improvements","reduce","a","b","optimizeContent","contentType","currentScore","targetScore","suggestions","generateContentSuggestions","keywordOptimization","analyzeKeywordOptimization","readabilityAnalysis","analyzeReadability","suggestionsCount","type","suggested","reason","impact","keywordsByType","product","category","blog","page","primaryKeyword","currentDensity","targetDensity","relatedKeywords","semanticKeywords","score","grade","performTechnicalAudit","issues","generateTechnicalIssues","categories","categorizeTechnicalIssues","calculateTechnicalScore","generateTechnicalRecommendations","issuesCount","possibleIssues","description","effort","criticalIssues","filter","i","errorIssues","crawlability","indexability","performance","mobile","security","structured_data","scores","Object","values","cat","action","expectedImpact","generateAutomatedRecommendations","actionItems","task","timeline","expectedResults","trafficIncrease","rankingImprovement","conversionIncrease","timeframe","createdAt","count","URL","startsWith","hostname","key","JSON","parse","data","setex","stringify","configure","keys","clearCache","del","clear","getUsageStats","size","totalRecommendations","cacheSize","entries","value","destroy"],"mappings":"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"}