{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\product-variants.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - FUNCIONES DE API PARA VARIANTES DE PRODUCTOS\r\n// ===================================\r\n\r\nimport { ApiResponse } from '@/types/api';\r\nimport { safeApiResponseJson } from '@/lib/json-utils';\r\n\r\n// Tipo para variante de producto\r\nexport interface ProductVariant {\r\n  id: number;\r\n  name: string;\r\n  price: string;\r\n  discounted_price: string | null;\r\n  capacity: string;\r\n  stock: number;\r\n  is_active: boolean;\r\n}\r\n\r\n/**\r\n * Obtiene las variantes de un producto por ID\r\n * @param productId - ID del producto\r\n * @returns Promise<ApiResponse<ProductVariant[]>>\r\n */\r\nexport async function getProductVariants(productId: number): Promise<ApiResponse<ProductVariant[]>> {\r\n  try {\r\n    const response = await fetch(`/api/products/${productId}/variants`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<ApiResponse<ProductVariant[]>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error(`Error obteniendo variantes del producto ${productId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Encuentra la variante con el precio más bajo\r\n * @param variants - Array de variantes\r\n * @returns ProductVariant | null\r\n */\r\nexport function findCheapestVariant(variants: ProductVariant[]): ProductVariant | null {\r\n  if (!variants || variants.length === 0) return null;\r\n  \r\n  return variants.reduce((cheapest, current) => {\r\n    const cheapestPrice = parseFloat(cheapest.discounted_price || cheapest.price);\r\n    const currentPrice = parseFloat(current.discounted_price || current.price);\r\n    \r\n    return currentPrice < cheapestPrice ? current : cheapest;\r\n  });\r\n}\r\n\r\n/**\r\n * Encuentra la variante con el precio más alto\r\n * @param variants - Array de variantes\r\n * @returns ProductVariant | null\r\n */\r\nexport function findMostExpensiveVariant(variants: ProductVariant[]): ProductVariant | null {\r\n  if (!variants || variants.length === 0) return null;\r\n  \r\n  return variants.reduce((expensive, current) => {\r\n    const expensivePrice = parseFloat(expensive.discounted_price || expensive.price);\r\n    const currentPrice = parseFloat(current.discounted_price || current.price);\r\n    \r\n    return currentPrice > expensivePrice ? current : expensive;\r\n  });\r\n}\r\n\r\n/**\r\n * Busca una variante por capacidad específica\r\n * @param variants - Array de variantes\r\n * @param capacity - Capacidad a buscar (ej: \"4L\", \"10L\")\r\n * @returns ProductVariant | null\r\n */\r\nexport function findVariantByCapacity(variants: ProductVariant[], capacity: string): ProductVariant | null {\r\n  if (!variants || variants.length === 0) return null;\r\n  \r\n  return variants.find(variant => \r\n    variant.capacity.toLowerCase() === capacity.toLowerCase()\r\n  ) || null;\r\n}\r\n\r\n/**\r\n * Obtiene todas las capacidades disponibles de las variantes\r\n * @param variants - Array de variantes\r\n * @returns string[]\r\n */\r\nexport function getAvailableCapacities(variants: ProductVariant[]): string[] {\r\n  if (!variants || variants.length === 0) return [];\r\n  \r\n  return variants\r\n    .map(variant => variant.capacity)\r\n    .filter((capacity, index, array) => array.indexOf(capacity) === index)\r\n    .sort((a, b) => {\r\n      // Ordenar por capacidad numérica\r\n      const aNum = parseInt(a.replace(/[^\\d]/g, '')) || 0;\r\n      const bNum = parseInt(b.replace(/[^\\d]/g, '')) || 0;\r\n      return aNum - bNum;\r\n    });\r\n}\r\n\r\n/**\r\n * Calcula el precio efectivo de una variante (con descuento si existe)\r\n * @param variant - Variante del producto\r\n * @returns number\r\n */\r\nexport function getEffectivePrice(variant: ProductVariant): number {\r\n  return parseFloat(variant.discounted_price || variant.price);\r\n}\r\n\r\n/**\r\n * Verifica si una variante tiene descuento\r\n * @param variant - Variante del producto\r\n * @returns boolean\r\n */\r\nexport function hasDiscount(variant: ProductVariant): boolean {\r\n  return variant.discounted_price !== null && \r\n         parseFloat(variant.discounted_price) < parseFloat(variant.price);\r\n}\r\n\r\n/**\r\n * Calcula el porcentaje de descuento de una variante\r\n * @param variant - Variante del producto\r\n * @returns number (porcentaje de descuento)\r\n */\r\nexport function getDiscountPercentage(variant: ProductVariant): number {\r\n  if (!hasDiscount(variant)) return 0;\r\n  \r\n  const originalPrice = parseFloat(variant.price);\r\n  const discountedPrice = parseFloat(variant.discounted_price!);\r\n  \r\n  return Math.round(((originalPrice - discountedPrice) / originalPrice) * 100);\r\n}"],"names":["findCheapestVariant","findMostExpensiveVariant","findVariantByCapacity","getAvailableCapacities","getDiscountPercentage","getEffectivePrice","getProductVariants","hasDiscount","productId","response","fetch","method","headers","result","safeApiResponseJson","success","data","Error","error","console","variants","length","reduce","cheapest","current","cheapestPrice","parseFloat","discounted_price","price","currentPrice","expensive","expensivePrice","capacity","find","variant","toLowerCase","map","filter","index","array","indexOf","sort","a","b","aNum","parseInt","replace","bNum","originalPrice","discountedPrice","Math","round"],"mappings":"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"}