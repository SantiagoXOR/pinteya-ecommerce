{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\monitoring\\useRenderMonitoring.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - RENDER MONITORING SYSTEM\r\n// Sistema de monitoreo en tiempo real para detectar problemas de renderizado\r\n// ===================================\r\n\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface RenderMetrics {\r\n  readonly componentName: string;\r\n  readonly renderCount: number;\r\n  readonly averageRenderTime: number;\r\n  readonly lastRenderTime: number;\r\n  readonly slowRenders: number;\r\n  readonly errorCount: number;\r\n  readonly memoryUsage?: number;\r\n  readonly timestamp: number;\r\n}\r\n\r\nexport interface PerformanceThresholds {\r\n  readonly slowRenderThreshold: number; // ms\r\n  readonly maxRenderCount: number; // renders per minute\r\n  readonly memoryThreshold: number; // MB\r\n  readonly errorThreshold: number; // errors per minute\r\n}\r\n\r\nexport interface MonitoringAlert {\r\n  readonly id: string;\r\n  readonly type: 'performance' | 'error' | 'memory' | 'render-loop';\r\n  readonly severity: 'low' | 'medium' | 'high' | 'critical';\r\n  readonly message: string;\r\n  readonly componentName: string;\r\n  readonly metrics: Partial<RenderMetrics>;\r\n  readonly timestamp: number;\r\n  readonly resolved: boolean;\r\n}\r\n\r\nexport interface MonitoringState {\r\n  readonly isEnabled: boolean;\r\n  readonly metrics: Map<string, RenderMetrics>;\r\n  readonly alerts: MonitoringAlert[];\r\n  readonly globalStats: {\r\n    readonly totalComponents: number;\r\n    readonly totalRenders: number;\r\n    readonly averageRenderTime: number;\r\n    readonly activeAlerts: number;\r\n  };\r\n}\r\n\r\nexport interface MonitoringOptions {\r\n  readonly enabled?: boolean;\r\n  readonly componentName: string;\r\n  readonly thresholds?: Partial<PerformanceThresholds>;\r\n  readonly enableToasts?: boolean;\r\n  readonly enableConsoleLogging?: boolean;\r\n  readonly enableLocalStorage?: boolean;\r\n  readonly sampleRate?: number; // 0-1, percentage of renders to monitor\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_THRESHOLDS: PerformanceThresholds = {\r\n  slowRenderThreshold: 16, // 16ms = 60fps\r\n  maxRenderCount: 60, // 60 renders per minute\r\n  memoryThreshold: 100, // 100MB\r\n  errorThreshold: 5 // 5 errors per minute\r\n};\r\n\r\nconst DEFAULT_OPTIONS: Required<Omit<MonitoringOptions, 'componentName'>> = {\r\n  enabled: process.env.NODE_ENV === 'development',\r\n  thresholds: DEFAULT_THRESHOLDS,\r\n  enableToasts: true,\r\n  enableConsoleLogging: true,\r\n  enableLocalStorage: true,\r\n  sampleRate: 1.0\r\n};\r\n\r\n// ===================================\r\n// ALMACENAMIENTO GLOBAL\r\n// ===================================\r\n\r\nclass MonitoringStore {\r\n  private static instance: MonitoringStore;\r\n  private metrics = new Map<string, RenderMetrics>();\r\n  private alerts: MonitoringAlert[] = [];\r\n  private listeners = new Set<(state: MonitoringState) => void>();\r\n\r\n  static getInstance(): MonitoringStore {\r\n    if (!MonitoringStore.instance) {\r\n      MonitoringStore.instance = new MonitoringStore();\r\n    }\r\n    return MonitoringStore.instance;\r\n  }\r\n\r\n  addListener(listener: (state: MonitoringState) => void): () => void {\r\n    this.listeners.add(listener);\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  private notifyListeners(): void {\r\n    // Debounce para evitar loops infinitos\r\n    if (this.notifyTimeout) {\r\n      clearTimeout(this.notifyTimeout);\r\n    }\r\n\r\n    this.notifyTimeout = setTimeout(() => {\r\n      const state = this.getState();\r\n      this.listeners.forEach(listener => listener(state));\r\n      this.notifyTimeout = null;\r\n    }, 16); // 16ms = ~60fps\r\n  }\r\n\r\n  private notifyTimeout: NodeJS.Timeout | null = null;\r\n\r\n  getState(): MonitoringState {\r\n    const totalRenders = Array.from(this.metrics.values())\r\n      .reduce((sum, metric) => sum + metric.renderCount, 0);\r\n    \r\n    const averageRenderTime = Array.from(this.metrics.values())\r\n      .reduce((sum, metric, _, arr) => sum + metric.averageRenderTime / arr.length, 0);\r\n\r\n    return {\r\n      isEnabled: true,\r\n      metrics: new Map(this.metrics),\r\n      alerts: [...this.alerts],\r\n      globalStats: {\r\n        totalComponents: this.metrics.size,\r\n        totalRenders,\r\n        averageRenderTime,\r\n        activeAlerts: this.alerts.filter(alert => !alert.resolved).length\r\n      }\r\n    };\r\n  }\r\n\r\n  updateMetrics(componentName: string, metrics: Partial<RenderMetrics>): void {\r\n    const existing = this.metrics.get(componentName);\r\n    const updated: RenderMetrics = {\r\n      componentName,\r\n      renderCount: 0,\r\n      averageRenderTime: 0,\r\n      lastRenderTime: 0,\r\n      slowRenders: 0,\r\n      errorCount: 0,\r\n      timestamp: Date.now(),\r\n      ...existing,\r\n      ...metrics\r\n    };\r\n\r\n    this.metrics.set(componentName, updated);\r\n    this.notifyListeners();\r\n  }\r\n\r\n  addAlert(alert: Omit<MonitoringAlert, 'id' | 'timestamp' | 'resolved'>): void {\r\n    const newAlert: MonitoringAlert = {\r\n      ...alert,\r\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: Date.now(),\r\n      resolved: false\r\n    };\r\n\r\n    this.alerts.unshift(newAlert);\r\n    \r\n    // Mantener solo las últimas 100 alertas\r\n    if (this.alerts.length > 100) {\r\n      this.alerts = this.alerts.slice(0, 100);\r\n    }\r\n\r\n    this.notifyListeners();\r\n  }\r\n\r\n  resolveAlert(alertId: string): void {\r\n    const alert = this.alerts.find(a => a.id === alertId);\r\n    if (alert) {\r\n      (alert as any).resolved = true;\r\n      this.notifyListeners();\r\n    }\r\n  }\r\n\r\n  clearAlerts(): void {\r\n    this.alerts = [];\r\n    this.notifyListeners();\r\n  }\r\n\r\n  exportData(): string {\r\n    return JSON.stringify({\r\n      metrics: Array.from(this.metrics.entries()),\r\n      alerts: this.alerts,\r\n      timestamp: Date.now()\r\n    }, null, 2);\r\n  }\r\n}\r\n\r\nconst monitoringStore = MonitoringStore.getInstance();\r\n\r\n// ===================================\r\n// UTILIDADES DE PERFORMANCE\r\n// ===================================\r\n\r\nfunction measureRenderTime<T>(fn: () => T): { result: T; duration: number } {\r\n  const start = performance.now();\r\n  const result = fn();\r\n  const duration = performance.now() - start;\r\n  return { result, duration };\r\n}\r\n\r\nfunction getMemoryUsage(): number {\r\n  if ('memory' in performance) {\r\n    return (performance as any).memory.usedJSHeapSize / 1024 / 1024; // MB\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction shouldSample(sampleRate: number): boolean {\r\n  return Math.random() < sampleRate;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL DE MONITOREO\r\n// ===================================\r\n\r\nexport function useRenderMonitoring(options: MonitoringOptions) {\r\n  const opts = { ...DEFAULT_OPTIONS, ...options };\r\n  const { toast } = useToast();\r\n  \r\n  // Referencias para tracking\r\n  const renderCountRef = useRef(0);\r\n  const renderTimesRef = useRef<number[]>([]);\r\n  const lastRenderTimeRef = useRef(0);\r\n  const slowRendersRef = useRef(0);\r\n  const errorCountRef = useRef(0);\r\n  const mountTimeRef = useRef(Date.now());\r\n  \r\n  // Estado local\r\n  const [monitoringState, setMonitoringState] = useState<MonitoringState>(\r\n    monitoringStore.getState()\r\n  );\r\n\r\n  // ===================================\r\n  // FUNCIONES DE ANÁLISIS\r\n  // ===================================\r\n\r\n  const analyzePerformance = useCallback((renderTime: number) => {\r\n    const { componentName, thresholds } = opts;\r\n    \r\n    // Detectar render lento\r\n    if (renderTime > thresholds.slowRenderThreshold) {\r\n      slowRendersRef.current++;\r\n      \r\n      monitoringStore.addAlert({\r\n        type: 'performance',\r\n        severity: renderTime > thresholds.slowRenderThreshold * 2 ? 'high' : 'medium',\r\n        message: `Render lento detectado: ${renderTime.toFixed(2)}ms (umbral: ${thresholds.slowRenderThreshold}ms)`,\r\n        componentName,\r\n        metrics: { lastRenderTime: renderTime }\r\n      });\r\n\r\n      if (opts.enableConsoleLogging) {\r\n        console.warn(`[RenderMonitoring] Slow render in ${componentName}: ${renderTime.toFixed(2)}ms`);\r\n      }\r\n    }\r\n\r\n    // Detectar posible render loop\r\n    const now = Date.now();\r\n    const oneMinuteAgo = now - 60000;\r\n    const recentRenders = renderTimesRef.current.filter(time => time > oneMinuteAgo).length;\r\n    \r\n    if (recentRenders > thresholds.maxRenderCount) {\r\n      monitoringStore.addAlert({\r\n        type: 'render-loop',\r\n        severity: 'critical',\r\n        message: `Posible render loop: ${recentRenders} renders en el último minuto (máximo: ${thresholds.maxRenderCount})`,\r\n        componentName,\r\n        metrics: { renderCount: recentRenders }\r\n      });\r\n\r\n      if (opts.enableToasts) {\r\n        toast({\r\n          title: 'Render Loop Detectado',\r\n          description: `${componentName}: ${recentRenders} renders/min`,\r\n          variant: 'destructive'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Detectar uso excesivo de memoria\r\n    const memoryUsage = getMemoryUsage();\r\n    if (memoryUsage > thresholds.memoryThreshold) {\r\n      monitoringStore.addAlert({\r\n        type: 'memory',\r\n        severity: 'high',\r\n        message: `Uso de memoria elevado: ${memoryUsage.toFixed(2)}MB (umbral: ${thresholds.memoryThreshold}MB)`,\r\n        componentName,\r\n        metrics: { memoryUsage }\r\n      });\r\n    }\r\n  }, [opts, toast]);\r\n\r\n  // ===================================\r\n  // FUNCIÓN DE TRACKING DE RENDER\r\n  // ===================================\r\n\r\n  const trackRender = useCallback(() => {\r\n    if (!opts.enabled || !shouldSample(opts.sampleRate)) {\r\n      return;\r\n    }\r\n\r\n    const renderTime = performance.now() - lastRenderTimeRef.current;\r\n    renderCountRef.current++;\r\n    renderTimesRef.current.push(Date.now());\r\n    \r\n    // Mantener solo los últimos 100 renders\r\n    if (renderTimesRef.current.length > 100) {\r\n      renderTimesRef.current = renderTimesRef.current.slice(-100);\r\n    }\r\n\r\n    // Calcular promedio de tiempo de render\r\n    const recentTimes = renderTimesRef.current.slice(-10); // Últimos 10 renders\r\n    const averageRenderTime = recentTimes.reduce((sum, time, i, arr) => {\r\n      if (i === 0) {return 0;}\r\n      return sum + (time - arr[i - 1]) / (arr.length - 1);\r\n    }, 0);\r\n\r\n    // Actualizar métricas\r\n    const metrics: Partial<RenderMetrics> = {\r\n      renderCount: renderCountRef.current,\r\n      averageRenderTime,\r\n      lastRenderTime: renderTime,\r\n      slowRenders: slowRendersRef.current,\r\n      errorCount: errorCountRef.current,\r\n      memoryUsage: getMemoryUsage(),\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    monitoringStore.updateMetrics(opts.componentName, metrics);\r\n    \r\n    // Analizar performance\r\n    analyzePerformance(renderTime);\r\n    \r\n    // Guardar en localStorage si está habilitado\r\n    if (opts.enableLocalStorage) {\r\n      try {\r\n        localStorage.setItem(\r\n          `render-monitoring-${opts.componentName}`,\r\n          JSON.stringify(metrics)\r\n        );\r\n      } catch (error) {\r\n        // Ignorar errores de localStorage\r\n      }\r\n    }\r\n\r\n    lastRenderTimeRef.current = performance.now();\r\n  }, [opts, analyzePerformance]);\r\n\r\n  // ===================================\r\n  // FUNCIÓN DE TRACKING DE ERRORES\r\n  // ===================================\r\n\r\n  const trackError = useCallback((error: Error, errorInfo?: any) => {\r\n    if (!opts.enabled) {return;}\r\n\r\n    errorCountRef.current++;\r\n    \r\n    monitoringStore.addAlert({\r\n      type: 'error',\r\n      severity: 'high',\r\n      message: `Error en componente: ${error.message}`,\r\n      componentName: opts.componentName,\r\n      metrics: { errorCount: errorCountRef.current }\r\n    });\r\n\r\n    if (opts.enableConsoleLogging) {\r\n      console.error(`[RenderMonitoring] Error in ${opts.componentName}:`, error, errorInfo);\r\n    }\r\n\r\n    if (opts.enableToasts) {\r\n      toast({\r\n        title: 'Error de Componente',\r\n        description: `${opts.componentName}: ${error.message}`,\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  }, [opts, toast]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  // Suscribirse a cambios del store\r\n  useEffect(() => {\r\n    const unsubscribe = monitoringStore.addListener(setMonitoringState);\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Track render en cada render del componente\r\n  useEffect(() => {\r\n    trackRender();\r\n  });\r\n\r\n  // Cleanup al desmontar\r\n  useEffect(() => {\r\n    return () => {\r\n      if (opts.enableConsoleLogging) {\r\n        const totalTime = Date.now() - mountTimeRef.current;\r\n        console.log(\r\n          `[RenderMonitoring] ${opts.componentName} unmounted after ${totalTime}ms, ` +\r\n          `${renderCountRef.current} renders, ` +\r\n          `${slowRendersRef.current} slow renders, ` +\r\n          `${errorCountRef.current} errors`\r\n        );\r\n      }\r\n    };\r\n  }, [opts]);\r\n\r\n  // ===================================\r\n  // API PÚBLICA\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    isEnabled: opts.enabled,\r\n    metrics: monitoringState.metrics.get(opts.componentName),\r\n    globalStats: monitoringState.globalStats,\r\n    alerts: monitoringState.alerts.filter(alert => \r\n      alert.componentName === opts.componentName\r\n    ),\r\n    \r\n    // Funciones\r\n    trackError,\r\n    trackRender,\r\n    \r\n    // Utilidades\r\n    exportData: () => monitoringStore.exportData(),\r\n    clearAlerts: () => monitoringStore.clearAlerts(),\r\n    resolveAlert: (alertId: string) => monitoringStore.resolveAlert(alertId)\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOOK PARA MONITOREO GLOBAL\r\n// ===================================\r\n\r\nexport function useGlobalMonitoring() {\r\n  const [state, setState] = useState<MonitoringState>(monitoringStore.getState());\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = monitoringStore.addListener(setState);\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    exportData: () => monitoringStore.exportData(),\r\n    clearAlerts: () => monitoringStore.clearAlerts(),\r\n    resolveAlert: (alertId: string) => monitoringStore.resolveAlert(alertId)\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOC PARA MONITOREO AUTOMÁTICO\r\n// ===================================\r\n\r\nexport function withRenderMonitoring<P extends object>(\r\n  Component: React.ComponentType<P>,\r\n  options: Omit<MonitoringOptions, 'componentName'>\r\n): React.ComponentType<P> {\r\n  const componentName = Component.displayName || Component.name || 'UnknownComponent';\r\n  \r\n  const WrappedComponent: React.FC<P> = (props) => {\r\n    const { trackError } = useRenderMonitoring({\r\n      ...options,\r\n      componentName\r\n    });\r\n\r\n    // Error boundary simple\r\n    useEffect(() => {\r\n      const handleError = (event: ErrorEvent) => {\r\n        trackError(new Error(event.message));\r\n      };\r\n\r\n      window.addEventListener('error', handleError);\r\n      return () => window.removeEventListener('error', handleError);\r\n    }, [trackError]);\r\n\r\n    return React.createElement(Component, props);\r\n  };\r\n\r\n  WrappedComponent.displayName = `withRenderMonitoring(${componentName})`;\r\n  return WrappedComponent;\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES EXPORTADAS\r\n// ===================================\r\n\r\n/**\r\n * Obtiene métricas de un componente específico\r\n */\r\nexport function getComponentMetrics(componentName: string): RenderMetrics | undefined {\r\n  return monitoringStore.getState().metrics.get(componentName);\r\n}\r\n\r\n/**\r\n * Obtiene todas las alertas activas\r\n */\r\nexport function getActiveAlerts(): MonitoringAlert[] {\r\n  return monitoringStore.getState().alerts.filter(alert => !alert.resolved);\r\n}\r\n\r\n/**\r\n * Exporta todos los datos de monitoreo\r\n */\r\nexport function exportMonitoringData(): string {\r\n  return monitoringStore.exportData();\r\n}\r\n\r\n/**\r\n * Limpia todas las alertas\r\n */\r\nexport function clearAllAlerts(): void {\r\n  monitoringStore.clearAlerts();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["clearAllAlerts","exportMonitoringData","getActiveAlerts","getComponentMetrics","useGlobalMonitoring","useRenderMonitoring","withRenderMonitoring","DEFAULT_THRESHOLDS","slowRenderThreshold","maxRenderCount","memoryThreshold","errorThreshold","DEFAULT_OPTIONS","enabled","process","env","NODE_ENV","thresholds","enableToasts","enableConsoleLogging","enableLocalStorage","sampleRate","MonitoringStore","getInstance","instance","addListener","listener","listeners","add","delete","notifyListeners","notifyTimeout","clearTimeout","setTimeout","state","getState","forEach","totalRenders","Array","from","metrics","values","reduce","sum","metric","renderCount","averageRenderTime","_","arr","length","isEnabled","Map","alerts","globalStats","totalComponents","size","activeAlerts","filter","alert","resolved","updateMetrics","componentName","existing","get","updated","lastRenderTime","slowRenders","errorCount","timestamp","Date","now","set","addAlert","newAlert","id","Math","random","toString","substr","unshift","slice","resolveAlert","alertId","find","a","clearAlerts","exportData","JSON","stringify","entries","Set","monitoringStore","measureRenderTime","fn","start","performance","result","duration","getMemoryUsage","memory","usedJSHeapSize","shouldSample","options","opts","toast","useToast","renderCountRef","useRef","renderTimesRef","lastRenderTimeRef","slowRendersRef","errorCountRef","mountTimeRef","monitoringState","setMonitoringState","useState","analyzePerformance","useCallback","renderTime","current","type","severity","message","toFixed","console","warn","oneMinuteAgo","recentRenders","time","title","description","variant","memoryUsage","trackRender","push","recentTimes","i","localStorage","setItem","error","trackError","errorInfo","useEffect","unsubscribe","totalTime","log","setState","Component","displayName","name","WrappedComponent","props","handleError","event","Error","window","addEventListener","removeEventListener","React","createElement"],"mappings":"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"}