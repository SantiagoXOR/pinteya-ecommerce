{"version":3,"names":["MetricsCollector","cov_15djenyddd","f","s","metricsCollector","METRICS_CONFIG","RETENTION_HOURS","AGGREGATION_WINDOW_MINUTES","ALERT_THRESHOLDS","ERROR_RATE","RESPONSE_TIME_P95","RATE_LIMIT_RATE","constructor","getInstance","instance","b","recordRequest","endpoint","method","statusCode","responseTime","labels","timestamp","Date","now","baseKey","incrementCounter","recordValue","_logger","logger","info","LogCategory","API","error","recordApiCall","params","userId","recordRetry","operation","attempts","success","totalDuration","recordRateLimit","blocked","remaining","limit","key","windowKey","getWindowKey","_redis","redisCache","incr","expire","value","listKey","client","lpush","toString","ltrim","set","windowStart","Math","floor","getApiMetrics","hoursBack","startTime","requests","getCounterSum","errors","responseTimes","getValueStats","retryStats","getRetryStats","total","rate_limited","response_times","error_rates","network","timeout","retry_stats","getEmptyApiMetrics","category","endTime","result","windowSize","time","types","type","get","parseInt","values","lrange","windowValues","push","map","v","parseFloat","filter","isNaN","numValue","length","count","sum","avg","min","max","p95","p99","sort","a","reduce","counters","total_retries","successful_retries","failed_retries","failed","avg_attempts","getMercadoPagoMetrics","paymentCreation","paymentQueries","webhookProcessing","Promise","all","totalRequests","totalErrors","overallErrorRate","avgResponseTime","payment_creation","payment_queries","webhook_processing","overall_health","uptime_percentage","avg_response_time","error_rate","last_incident","toISOString","console","emptyMetrics"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\enterprise\\metrics\\index.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - METRICS SYSTEM\r\n// ===================================\r\n\r\nimport { redisCache } from '../../integrations/redis';\r\nimport { logger, LogLevel, LogCategory } from '../logger';\r\n\r\n// Tipos de métricas\r\nexport interface MetricData {\r\n  timestamp: number;\r\n  value: number;\r\n  labels?: Record<string, string>;\r\n}\r\n\r\nexport interface AggregatedMetric {\r\n  count: number;\r\n  sum: number;\r\n  avg: number;\r\n  min: number;\r\n  max: number;\r\n  p95: number;\r\n  p99: number;\r\n}\r\n\r\nexport interface ApiMetrics {\r\n  requests: {\r\n    total: number;\r\n    success: number;\r\n    error: number;\r\n    rate_limited: number;\r\n  };\r\n  response_times: AggregatedMetric;\r\n  error_rates: {\r\n    '4xx': number;\r\n    '5xx': number;\r\n    network: number;\r\n    timeout: number;\r\n  };\r\n  retry_stats: {\r\n    total_retries: number;\r\n    successful_retries: number;\r\n    failed_retries: number;\r\n    avg_attempts: number;\r\n  };\r\n}\r\n\r\nexport interface MercadoPagoMetrics {\r\n  payment_creation: ApiMetrics;\r\n  payment_queries: ApiMetrics;\r\n  webhook_processing: ApiMetrics;\r\n  overall_health: {\r\n    uptime_percentage: number;\r\n    avg_response_time: number;\r\n    error_rate: number;\r\n    last_incident: string | null;\r\n  };\r\n}\r\n\r\n// Configuración de métricas\r\nconst METRICS_CONFIG = {\r\n  RETENTION_HOURS: 24,\r\n  AGGREGATION_WINDOW_MINUTES: 5,\r\n  ALERT_THRESHOLDS: {\r\n    ERROR_RATE: 0.05, // 5%\r\n    RESPONSE_TIME_P95: 5000, // 5 segundos\r\n    RATE_LIMIT_RATE: 0.1, // 10%\r\n  },\r\n};\r\n\r\n/**\r\n * Clase principal para manejo de métricas\r\n */\r\nexport class MetricsCollector {\r\n  private static instance: MetricsCollector;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): MetricsCollector {\r\n    if (!MetricsCollector.instance) {\r\n      MetricsCollector.instance = new MetricsCollector();\r\n    }\r\n    return MetricsCollector.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra una métrica de request\r\n   */\r\n  async recordRequest(\r\n    endpoint: string,\r\n    method: string,\r\n    statusCode: number,\r\n    responseTime: number,\r\n    labels: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const baseKey = `metrics:${endpoint}:${method}`;\r\n\r\n    try {\r\n      // Registrar request total\r\n      await this.incrementCounter(`${baseKey}:requests:total`, timestamp);\r\n\r\n      // Registrar por tipo de respuesta\r\n      if (statusCode >= 200 && statusCode < 300) {\r\n        await this.incrementCounter(`${baseKey}:requests:success`, timestamp);\r\n      } else if (statusCode === 429) {\r\n        await this.incrementCounter(`${baseKey}:requests:rate_limited`, timestamp);\r\n      } else {\r\n        await this.incrementCounter(`${baseKey}:requests:error`, timestamp);\r\n        \r\n        // Categorizar errores\r\n        if (statusCode >= 400 && statusCode < 500) {\r\n          await this.incrementCounter(`${baseKey}:errors:4xx`, timestamp);\r\n        } else if (statusCode >= 500) {\r\n          await this.incrementCounter(`${baseKey}:errors:5xx`, timestamp);\r\n        }\r\n      }\r\n\r\n      // Registrar tiempo de respuesta\r\n      await this.recordValue(`${baseKey}:response_time`, responseTime, timestamp);\r\n\r\n      // Log para debugging\r\n      logger.info(LogCategory.API, 'Metric recorded');\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record metric', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra una llamada a API (alias para recordRequest)\r\n   */\r\n  async recordApiCall(params: {\r\n    endpoint: string;\r\n    method: string;\r\n    statusCode: number;\r\n    responseTime: number;\r\n    userId?: string;\r\n    error?: string;\r\n  }): Promise<void> {\r\n    await this.recordRequest(\r\n      params.endpoint,\r\n      params.method,\r\n      params.statusCode,\r\n      params.responseTime,\r\n      {\r\n        userId: params.userId || 'anonymous',\r\n        error: params.error || ''\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de retry\r\n   */\r\n  async recordRetry(\r\n    operation: string,\r\n    attempts: number,\r\n    success: boolean,\r\n    totalDuration: number\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const baseKey = `metrics:retry:${operation}`;\r\n\r\n    try {\r\n      await this.incrementCounter(`${baseKey}:total`, timestamp);\r\n      await this.recordValue(`${baseKey}:attempts`, attempts, timestamp);\r\n      await this.recordValue(`${baseKey}:duration`, totalDuration, timestamp);\r\n\r\n      if (success) {\r\n        await this.incrementCounter(`${baseKey}:success`, timestamp);\r\n      } else {\r\n        await this.incrementCounter(`${baseKey}:failed`, timestamp);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record retry metric', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de rate limiting\r\n   */\r\n  async recordRateLimit(\r\n    endpoint: string,\r\n    blocked: boolean,\r\n    remaining: number,\r\n    limit: number\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const baseKey = `metrics:rate_limit:${endpoint}`;\r\n\r\n    try {\r\n      await this.incrementCounter(`${baseKey}:checks`, timestamp);\r\n      \r\n      if (blocked) {\r\n        await this.incrementCounter(`${baseKey}:blocked`, timestamp);\r\n      }\r\n\r\n      await this.recordValue(`${baseKey}:remaining`, remaining, timestamp);\r\n      await this.recordValue(`${baseKey}:utilization`, (limit - remaining) / limit, timestamp);\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record rate limit metric', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Incrementa un contador\r\n   */\r\n  private async incrementCounter(key: string, timestamp: number): Promise<void> {\r\n    const windowKey = this.getWindowKey(key, timestamp);\r\n    await redisCache.incr(windowKey);\r\n    await redisCache.expire(windowKey, METRICS_CONFIG.RETENTION_HOURS * 3600);\r\n  }\r\n\r\n  /**\r\n   * Registra un valor numérico\r\n   */\r\n  private async recordValue(key: string, value: number, timestamp: number): Promise<void> {\r\n    try {\r\n      const windowKey = this.getWindowKey(key, timestamp);\r\n      const listKey = `${windowKey}:values`;\r\n\r\n      // Obtener cliente Redis (real o mock)\r\n      const client = redisCache['client'] || redisCache;\r\n\r\n      // Verificar si el cliente tiene los métodos necesarios\r\n      if (typeof client.lpush === 'function') {\r\n        await client.lpush(listKey, value.toString());\r\n        await client.ltrim(listKey, 0, 999); // Mantener últimos 1000 valores\r\n        await client.expire(listKey, METRICS_CONFIG.RETENTION_HOURS * 3600);\r\n      } else {\r\n        // Fallback para mock básico - usar storage simple\r\n        await redisCache.set(`${listKey}:latest`, value.toString());\r\n      }\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record metric value', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera clave de ventana temporal\r\n   */\r\n  private getWindowKey(baseKey: string, timestamp: number): string {\r\n    const windowStart = Math.floor(timestamp / (METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000));\r\n    return `${baseKey}:${windowStart}`;\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas agregadas para un endpoint\r\n   */\r\n  async getApiMetrics(endpoint: string, method: string, hoursBack: number = 1): Promise<ApiMetrics> {\r\n    const baseKey = `metrics:${endpoint}:${method}`;\r\n    const now = Date.now();\r\n    const startTime = now - (hoursBack * 60 * 60 * 1000);\r\n\r\n    try {\r\n      // Obtener contadores\r\n      const requests = await this.getCounterSum(baseKey, 'requests', startTime, now);\r\n      const errors = await this.getCounterSum(baseKey, 'errors', startTime, now);\r\n      \r\n      // Obtener tiempos de respuesta\r\n      const responseTimes = await this.getValueStats(`${baseKey}:response_time`, startTime, now);\r\n      \r\n      // Obtener métricas de retry\r\n      const retryStats = await this.getRetryStats(endpoint, startTime, now);\r\n\r\n      return {\r\n        requests: {\r\n          total: requests.total || 0,\r\n          success: requests.success || 0,\r\n          error: requests.error || 0,\r\n          rate_limited: requests.rate_limited || 0,\r\n        },\r\n        response_times: responseTimes,\r\n        error_rates: {\r\n          '4xx': errors['4xx'] || 0,\r\n          '5xx': errors['5xx'] || 0,\r\n          network: errors.network || 0,\r\n          timeout: errors.timeout || 0,\r\n        },\r\n        retry_stats: retryStats,\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to get API metrics', error as Error);\r\n      \r\n      // Retornar métricas vacías en caso de error\r\n      return this.getEmptyApiMetrics();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene suma de contadores en un rango de tiempo\r\n   */\r\n  private async getCounterSum(\r\n    baseKey: string, \r\n    category: string, \r\n    startTime: number, \r\n    endTime: number\r\n  ): Promise<Record<string, number>> {\r\n    const result: Record<string, number> = {};\r\n    const windowSize = METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000;\r\n    \r\n    for (let time = startTime; time <= endTime; time += windowSize) {\r\n      const windowStart = Math.floor(time / windowSize);\r\n      \r\n      // Obtener diferentes tipos de contadores\r\n      const types = ['total', 'success', 'error', 'rate_limited', '4xx', '5xx', 'network', 'timeout'];\r\n      \r\n      for (const type of types) {\r\n        const key = `${baseKey}:${category}:${type}:${windowStart}`;\r\n        const value = await redisCache.get(key);\r\n        result[type] = (result[type] || 0) + (parseInt(value || '0'));\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de valores numéricos\r\n   */\r\n  private async getValueStats(\r\n    baseKey: string,\r\n    startTime: number,\r\n    endTime: number\r\n  ): Promise<AggregatedMetric> {\r\n    const values: number[] = [];\r\n    const windowSize = METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000;\r\n\r\n    for (let time = startTime; time <= endTime; time += windowSize) {\r\n      const windowStart = Math.floor(time / windowSize);\r\n      const key = `${baseKey}:${windowStart}:values`;\r\n\r\n      try {\r\n        const client = redisCache['client'] || redisCache;\r\n\r\n        if (typeof client.lrange === 'function') {\r\n          const windowValues = await client.lrange(key, 0, -1);\r\n          values.push(...windowValues.map(v => parseFloat(v)).filter(v => !isNaN(v)));\r\n        } else {\r\n          // Fallback para mock básico\r\n          const value = await redisCache.get(`${key}:latest`);\r\n          if (value) {\r\n            const numValue = parseFloat(value);\r\n            if (!isNaN(numValue)) {\r\n              values.push(numValue);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Continuar si no se puede obtener valores de una ventana\r\n      }\r\n    }\r\n\r\n    if (values.length === 0) {\r\n      return { count: 0, sum: 0, avg: 0, min: 0, max: 0, p95: 0, p99: 0 };\r\n    }\r\n\r\n    values.sort((a, b) => a - b);\r\n    const sum = values.reduce((a, b) => a + b, 0);\r\n    \r\n    return {\r\n      count: values.length,\r\n      sum,\r\n      avg: sum / values.length,\r\n      min: values[0],\r\n      max: values[values.length - 1],\r\n      p95: values[Math.floor(values.length * 0.95)] || 0,\r\n      p99: values[Math.floor(values.length * 0.99)] || 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de retry\r\n   */\r\n  private async getRetryStats(\r\n    operation: string, \r\n    startTime: number, \r\n    endTime: number\r\n  ): Promise<ApiMetrics['retry_stats']> {\r\n    const baseKey = `metrics:retry:${operation}`;\r\n    const counters = await this.getCounterSum(baseKey, '', startTime, endTime);\r\n    const attempts = await this.getValueStats(`${baseKey}:attempts`, startTime, endTime);\r\n\r\n    return {\r\n      total_retries: counters.total || 0,\r\n      successful_retries: counters.success || 0,\r\n      failed_retries: counters.failed || 0,\r\n      avg_attempts: attempts.avg || 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas específicas de MercadoPago\r\n   */\r\n  async getMercadoPagoMetrics(hoursBack: number = 1): Promise<MercadoPagoMetrics> {\r\n    try {\r\n      const [paymentCreation, paymentQueries, webhookProcessing] = await Promise.all([\r\n        this.getApiMetrics('/api/payments/create-preference', 'POST', hoursBack),\r\n        this.getApiMetrics('/api/payments/query', 'GET', hoursBack),\r\n        this.getApiMetrics('/api/webhooks/mercadopago', 'POST', hoursBack),\r\n      ]);\r\n\r\n      // Calcular métricas generales de salud\r\n      const totalRequests = paymentCreation.requests.total +\r\n                           paymentQueries.requests.total +\r\n                           webhookProcessing.requests.total;\r\n\r\n      const totalErrors = paymentCreation.requests.error +\r\n                         paymentQueries.requests.error +\r\n                         webhookProcessing.requests.error;\r\n\r\n      const overallErrorRate = totalRequests > 0 ? totalErrors / totalRequests : 0;\r\n\r\n      const avgResponseTime = totalRequests > 0 ?\r\n        (paymentCreation.response_times.avg * paymentCreation.requests.total +\r\n         paymentQueries.response_times.avg * paymentQueries.requests.total +\r\n         webhookProcessing.response_times.avg * webhookProcessing.requests.total) / totalRequests : 0;\r\n\r\n      return {\r\n        payment_creation: paymentCreation,\r\n        payment_queries: paymentQueries,\r\n        webhook_processing: webhookProcessing,\r\n        overall_health: {\r\n          uptime_percentage: overallErrorRate < 0.05 ? 99.9 : 95.0, // Simplificado\r\n          avg_response_time: avgResponseTime,\r\n          error_rate: overallErrorRate,\r\n          last_incident: overallErrorRate > 0.1 ? new Date().toISOString() : null,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting MercadoPago metrics:', error);\r\n      // Retornar métricas vacías en caso de error\r\n      const emptyMetrics = this.getEmptyApiMetrics();\r\n      return {\r\n        payment_creation: emptyMetrics,\r\n        payment_queries: emptyMetrics,\r\n        webhook_processing: emptyMetrics,\r\n        overall_health: {\r\n          uptime_percentage: 0,\r\n          avg_response_time: 0,\r\n          error_rate: 1,\r\n          last_incident: new Date().toISOString(),\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna métricas vacías por defecto\r\n   */\r\n  private getEmptyApiMetrics(): ApiMetrics {\r\n    return {\r\n      requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\r\n      response_times: { count: 0, sum: 0, avg: 0, min: 0, max: 0, p95: 0, p99: 0 },\r\n      error_rates: { '4xx': 0, '5xx': 0, network: 0, timeout: 0 },\r\n      retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0, avg_attempts: 0 },\r\n    };\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const metricsCollector = MetricsCollector.getInstance();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}