859a485415cf93f52796d3ad01e1bdaf
// ===================================
// PINTEYA E-COMMERCE - METRICS SYSTEM
// ===================================
"use strict";

/* istanbul ignore next */
function cov_15djenyddd() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\enterprise\\metrics\\index.ts";
  var hash = "1da0133239373fa0726e5d55ee5463ffeebcf5d5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\enterprise\\metrics\\index.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 32
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "6": {
        start: {
          line: 22,
          column: 15
        },
        end: {
          line: 22,
          column: 50
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "8": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "9": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "10": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 63
        }
      },
      "11": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 41
        }
      },
      "12": {
        start: {
          line: 45,
          column: 26
        },
        end: {
          line: 45,
          column: 36
        }
      },
      "13": {
        start: {
          line: 46,
          column: 24
        },
        end: {
          line: 46,
          column: 55
        }
      },
      "14": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "15": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 80
        }
      },
      "16": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "17": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 86
        }
      },
      "18": {
        start: {
          line: 53,
          column: 19
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "19": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 91
        }
      },
      "20": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 84
        }
      },
      "21": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "22": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 84
        }
      },
      "23": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "24": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 84
        }
      },
      "25": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 88
        }
      },
      "26": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 76
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 92
        }
      },
      "28": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "29": {
        start: {
          line: 83,
          column: 26
        },
        end: {
          line: 83,
          column: 36
        }
      },
      "30": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 52
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "32": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 71
        }
      },
      "33": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 79
        }
      },
      "34": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 84
        }
      },
      "35": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "36": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 77
        }
      },
      "37": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 76
        }
      },
      "38": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 98
        }
      },
      "39": {
        start: {
          line: 101,
          column: 26
        },
        end: {
          line: 101,
          column: 36
        }
      },
      "40": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 56
        }
      },
      "41": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "42": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 72
        }
      },
      "43": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "44": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 77
        }
      },
      "45": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 81
        }
      },
      "46": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 101
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 103
        }
      },
      "48": {
        start: {
          line: 117,
          column: 26
        },
        end: {
          line: 117,
          column: 59
        }
      },
      "49": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 48
        }
      },
      "50": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 89
        }
      },
      "51": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "52": {
        start: {
          line: 125,
          column: 30
        },
        end: {
          line: 125,
          column: 63
        }
      },
      "53": {
        start: {
          line: 126,
          column: 28
        },
        end: {
          line: 126,
          column: 49
        }
      },
      "54": {
        start: {
          line: 128,
          column: 27
        },
        end: {
          line: 128,
          column: 75
        }
      },
      "55": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "56": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 62
        }
      },
      "57": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 52
        }
      },
      "58": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 84
        }
      },
      "59": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 83
        }
      },
      "60": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 98
        }
      },
      "61": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 107
        }
      },
      "62": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 43
        }
      },
      "63": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 55
        }
      },
      "64": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 152,
          column: 30
        }
      },
      "65": {
        start: {
          line: 153,
          column: 26
        },
        end: {
          line: 153,
          column: 58
        }
      },
      "66": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "67": {
        start: {
          line: 156,
          column: 29
        },
        end: {
          line: 156,
          column: 90
        }
      },
      "68": {
        start: {
          line: 157,
          column: 27
        },
        end: {
          line: 157,
          column: 86
        }
      },
      "69": {
        start: {
          line: 159,
          column: 34
        },
        end: {
          line: 159,
          column: 102
        }
      },
      "70": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 81
        }
      },
      "71": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 177,
          column: 14
        }
      },
      "72": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 94
        }
      },
      "73": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 45
        }
      },
      "74": {
        start: {
          line: 187,
          column: 23
        },
        end: {
          line: 187,
          column: 25
        }
      },
      "75": {
        start: {
          line: 188,
          column: 27
        },
        end: {
          line: 188,
          column: 80
        }
      },
      "76": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "77": {
        start: {
          line: 189,
          column: 23
        },
        end: {
          line: 189,
          column: 32
        }
      },
      "78": {
        start: {
          line: 190,
          column: 32
        },
        end: {
          line: 190,
          column: 61
        }
      },
      "79": {
        start: {
          line: 192,
          column: 26
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "80": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "81": {
        start: {
          line: 203,
          column: 28
        },
        end: {
          line: 203,
          column: 75
        }
      },
      "82": {
        start: {
          line: 204,
          column: 30
        },
        end: {
          line: 204,
          column: 62
        }
      },
      "83": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 76
        }
      },
      "84": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 22
        }
      },
      "85": {
        start: {
          line: 213,
          column: 23
        },
        end: {
          line: 213,
          column: 25
        }
      },
      "86": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 80
        }
      },
      "87": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "88": {
        start: {
          line: 215,
          column: 23
        },
        end: {
          line: 215,
          column: 32
        }
      },
      "89": {
        start: {
          line: 216,
          column: 32
        },
        end: {
          line: 216,
          column: 61
        }
      },
      "90": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 58
        }
      },
      "91": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "92": {
        start: {
          line: 219,
          column: 31
        },
        end: {
          line: 219,
          column: 79
        }
      },
      "93": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 232,
          column: 17
        }
      },
      "94": {
        start: {
          line: 221,
          column: 41
        },
        end: {
          line: 221,
          column: 72
        }
      },
      "95": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 222,
          column: 96
        }
      },
      "96": {
        start: {
          line: 222,
          column: 57
        },
        end: {
          line: 222,
          column: 70
        }
      },
      "97": {
        start: {
          line: 222,
          column: 84
        },
        end: {
          line: 222,
          column: 93
        }
      },
      "98": {
        start: {
          line: 225,
          column: 34
        },
        end: {
          line: 225,
          column: 78
        }
      },
      "99": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 231,
          column: 21
        }
      },
      "100": {
        start: {
          line: 227,
          column: 41
        },
        end: {
          line: 227,
          column: 58
        }
      },
      "101": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 230,
          column: 25
        }
      },
      "102": {
        start: {
          line: 229,
          column: 28
        },
        end: {
          line: 229,
          column: 50
        }
      },
      "103": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "104": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 246,
          column: 14
        }
      },
      "105": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 35
        }
      },
      "106": {
        start: {
          line: 248,
          column: 28
        },
        end: {
          line: 248,
          column: 33
        }
      },
      "107": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 249,
          column: 51
        }
      },
      "108": {
        start: {
          line: 249,
          column: 42
        },
        end: {
          line: 249,
          column: 47
        }
      },
      "109": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 258,
          column: 10
        }
      },
      "110": {
        start: {
          line: 263,
          column: 24
        },
        end: {
          line: 263,
          column: 52
        }
      },
      "111": {
        start: {
          line: 264,
          column: 25
        },
        end: {
          line: 264,
          column: 82
        }
      },
      "112": {
        start: {
          line: 265,
          column: 25
        },
        end: {
          line: 265,
          column: 92
        }
      },
      "113": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 271,
          column: 10
        }
      },
      "114": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "115": {
        start: {
          line: 277,
          column: 73
        },
        end: {
          line: 281,
          column: 14
        }
      },
      "116": {
        start: {
          line: 283,
          column: 34
        },
        end: {
          line: 283,
          column: 131
        }
      },
      "117": {
        start: {
          line: 284,
          column: 32
        },
        end: {
          line: 284,
          column: 129
        }
      },
      "118": {
        start: {
          line: 285,
          column: 37
        },
        end: {
          line: 285,
          column: 88
        }
      },
      "119": {
        start: {
          line: 286,
          column: 36
        },
        end: {
          line: 286,
          column: 287
        }
      },
      "120": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 297,
          column: 14
        }
      },
      "121": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 71
        }
      },
      "122": {
        start: {
          line: 301,
          column: 33
        },
        end: {
          line: 301,
          column: 58
        }
      },
      "123": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 312,
          column: 14
        }
      },
      "124": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 346,
          column: 10
        }
      },
      "125": {
        start: {
          line: 349,
          column: 25
        },
        end: {
          line: 349,
          column: 55
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 17
          },
          end: {
            line: 35,
            column: 19
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 25
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 36
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 44,
            column: 7
          }
        },
        loc: {
          start: {
            line: 44,
            column: 83
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 44
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 74,
            column: 6
          },
          end: {
            line: 74,
            column: 7
          }
        },
        loc: {
          start: {
            line: 74,
            column: 34
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 74
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 6
          },
          end: {
            line: 82,
            column: 7
          }
        },
        loc: {
          start: {
            line: 82,
            column: 69
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 100,
            column: 6
          },
          end: {
            line: 100,
            column: 7
          }
        },
        loc: {
          start: {
            line: 100,
            column: 65
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 100
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 7
          }
        },
        loc: {
          start: {
            line: 116,
            column: 45
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 116
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 123,
            column: 6
          },
          end: {
            line: 123,
            column: 7
          }
        },
        loc: {
          start: {
            line: 123,
            column: 47
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 123
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 144,
            column: 6
          },
          end: {
            line: 144,
            column: 7
          }
        },
        loc: {
          start: {
            line: 144,
            column: 39
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 144
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 150,
            column: 6
          },
          end: {
            line: 150,
            column: 7
          }
        },
        loc: {
          start: {
            line: 150,
            column: 59
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 150
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 186,
            column: 6
          },
          end: {
            line: 186,
            column: 7
          }
        },
        loc: {
          start: {
            line: 186,
            column: 65
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 186
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 212,
            column: 6
          },
          end: {
            line: 212,
            column: 7
          }
        },
        loc: {
          start: {
            line: 212,
            column: 55
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 212
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 222,
            column: 52
          },
          end: {
            line: 222,
            column: 53
          }
        },
        loc: {
          start: {
            line: 222,
            column: 57
          },
          end: {
            line: 222,
            column: 70
          }
        },
        line: 222
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 222,
            column: 79
          },
          end: {
            line: 222,
            column: 80
          }
        },
        loc: {
          start: {
            line: 222,
            column: 84
          },
          end: {
            line: 222,
            column: 93
          }
        },
        line: 222
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 248,
            column: 21
          }
        },
        loc: {
          start: {
            line: 248,
            column: 28
          },
          end: {
            line: 248,
            column: 33
          }
        },
        line: 248
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 249,
            column: 34
          },
          end: {
            line: 249,
            column: 35
          }
        },
        loc: {
          start: {
            line: 249,
            column: 42
          },
          end: {
            line: 249,
            column: 47
          }
        },
        line: 249
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 262,
            column: 6
          },
          end: {
            line: 262,
            column: 7
          }
        },
        loc: {
          start: {
            line: 262,
            column: 57
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 262
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 275,
            column: 6
          },
          end: {
            line: 275,
            column: 7
          }
        },
        loc: {
          start: {
            line: 275,
            column: 49
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 275
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 317,
            column: 6
          },
          end: {
            line: 317,
            column: 7
          }
        },
        loc: {
          start: {
            line: 317,
            column: 27
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 317
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 70
          },
          end: {
            line: 44,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 44,
            column: 79
          },
          end: {
            line: 44,
            column: 81
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 63,
            column: 13
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 33
          }
        }, {
          start: {
            line: 51,
            column: 37
          },
          end: {
            line: 51,
            column: 53
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: 55,
            column: 19
          },
          end: {
            line: 63,
            column: 13
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 62,
            column: 17
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 58,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 58,
            column: 37
          }
        }, {
          start: {
            line: 58,
            column: 41
          },
          end: {
            line: 58,
            column: 57
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 76,
            column: 20
          },
          end: {
            line: 76,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 20
          },
          end: {
            line: 76,
            column: 33
          }
        }, {
          start: {
            line: 76,
            column: 37
          },
          end: {
            line: 76,
            column: 48
          }
        }],
        line: 76
      },
      "9": {
        loc: {
          start: {
            line: 77,
            column: 19
          },
          end: {
            line: 77,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 19
          },
          end: {
            line: 77,
            column: 31
          }
        }, {
          start: {
            line: 77,
            column: 35
          },
          end: {
            line: 77,
            column: 37
          }
        }],
        line: 77
      },
      "10": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: 91,
            column: 19
          },
          end: {
            line: 93,
            column: 13
          }
        }],
        line: 89
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 128,
            column: 27
          },
          end: {
            line: 128,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 27
          },
          end: {
            line: 128,
            column: 54
          }
        }, {
          start: {
            line: 128,
            column: 58
          },
          end: {
            line: 128,
            column: 75
          }
        }],
        line: 128
      },
      "13": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: 134,
            column: 19
          },
          end: {
            line: 137,
            column: 13
          }
        }],
        line: 130
      },
      "14": {
        loc: {
          start: {
            line: 150,
            column: 44
          },
          end: {
            line: 150,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 150,
            column: 56
          },
          end: {
            line: 150,
            column: 57
          }
        }],
        line: 150
      },
      "15": {
        loc: {
          start: {
            line: 164,
            column: 27
          },
          end: {
            line: 164,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 27
          },
          end: {
            line: 164,
            column: 41
          }
        }, {
          start: {
            line: 164,
            column: 45
          },
          end: {
            line: 164,
            column: 46
          }
        }],
        line: 164
      },
      "16": {
        loc: {
          start: {
            line: 165,
            column: 29
          },
          end: {
            line: 165,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 29
          },
          end: {
            line: 165,
            column: 45
          }
        }, {
          start: {
            line: 165,
            column: 49
          },
          end: {
            line: 165,
            column: 50
          }
        }],
        line: 165
      },
      "17": {
        loc: {
          start: {
            line: 166,
            column: 27
          },
          end: {
            line: 166,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 27
          },
          end: {
            line: 166,
            column: 41
          }
        }, {
          start: {
            line: 166,
            column: 45
          },
          end: {
            line: 166,
            column: 46
          }
        }],
        line: 166
      },
      "18": {
        loc: {
          start: {
            line: 167,
            column: 34
          },
          end: {
            line: 167,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 34
          },
          end: {
            line: 167,
            column: 55
          }
        }, {
          start: {
            line: 167,
            column: 59
          },
          end: {
            line: 167,
            column: 60
          }
        }],
        line: 167
      },
      "19": {
        loc: {
          start: {
            line: 171,
            column: 27
          },
          end: {
            line: 171,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 27
          },
          end: {
            line: 171,
            column: 40
          }
        }, {
          start: {
            line: 171,
            column: 44
          },
          end: {
            line: 171,
            column: 45
          }
        }],
        line: 171
      },
      "20": {
        loc: {
          start: {
            line: 172,
            column: 27
          },
          end: {
            line: 172,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 27
          },
          end: {
            line: 172,
            column: 40
          }
        }, {
          start: {
            line: 172,
            column: 44
          },
          end: {
            line: 172,
            column: 45
          }
        }],
        line: 172
      },
      "21": {
        loc: {
          start: {
            line: 173,
            column: 29
          },
          end: {
            line: 173,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 29
          },
          end: {
            line: 173,
            column: 43
          }
        }, {
          start: {
            line: 173,
            column: 47
          },
          end: {
            line: 173,
            column: 48
          }
        }],
        line: 173
      },
      "22": {
        loc: {
          start: {
            line: 174,
            column: 29
          },
          end: {
            line: 174,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 29
          },
          end: {
            line: 174,
            column: 43
          }
        }, {
          start: {
            line: 174,
            column: 47
          },
          end: {
            line: 174,
            column: 48
          }
        }],
        line: 174
      },
      "23": {
        loc: {
          start: {
            line: 205,
            column: 32
          },
          end: {
            line: 205,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 32
          },
          end: {
            line: 205,
            column: 44
          }
        }, {
          start: {
            line: 205,
            column: 48
          },
          end: {
            line: 205,
            column: 49
          }
        }],
        line: 205
      },
      "24": {
        loc: {
          start: {
            line: 205,
            column: 62
          },
          end: {
            line: 205,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 62
          },
          end: {
            line: 205,
            column: 67
          }
        }, {
          start: {
            line: 205,
            column: 71
          },
          end: {
            line: 205,
            column: 74
          }
        }],
        line: 205
      },
      "25": {
        loc: {
          start: {
            line: 219,
            column: 31
          },
          end: {
            line: 219,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 31
          },
          end: {
            line: 219,
            column: 58
          }
        }, {
          start: {
            line: 219,
            column: 62
          },
          end: {
            line: 219,
            column: 79
          }
        }],
        line: 219
      },
      "26": {
        loc: {
          start: {
            line: 220,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        }, {
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 232,
            column: 17
          }
        }],
        line: 220
      },
      "27": {
        loc: {
          start: {
            line: 226,
            column: 20
          },
          end: {
            line: 231,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 20
          },
          end: {
            line: 231,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "28": {
        loc: {
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 230,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 230,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "29": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "30": {
        loc: {
          start: {
            line: 256,
            column: 17
          },
          end: {
            line: 256,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 17
          },
          end: {
            line: 256,
            column: 57
          }
        }, {
          start: {
            line: 256,
            column: 61
          },
          end: {
            line: 256,
            column: 62
          }
        }],
        line: 256
      },
      "31": {
        loc: {
          start: {
            line: 257,
            column: 17
          },
          end: {
            line: 257,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 17
          },
          end: {
            line: 257,
            column: 57
          }
        }, {
          start: {
            line: 257,
            column: 61
          },
          end: {
            line: 257,
            column: 62
          }
        }],
        line: 257
      },
      "32": {
        loc: {
          start: {
            line: 267,
            column: 27
          },
          end: {
            line: 267,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 27
          },
          end: {
            line: 267,
            column: 41
          }
        }, {
          start: {
            line: 267,
            column: 45
          },
          end: {
            line: 267,
            column: 46
          }
        }],
        line: 267
      },
      "33": {
        loc: {
          start: {
            line: 268,
            column: 32
          },
          end: {
            line: 268,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 32
          },
          end: {
            line: 268,
            column: 48
          }
        }, {
          start: {
            line: 268,
            column: 52
          },
          end: {
            line: 268,
            column: 53
          }
        }],
        line: 268
      },
      "34": {
        loc: {
          start: {
            line: 269,
            column: 28
          },
          end: {
            line: 269,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 28
          },
          end: {
            line: 269,
            column: 43
          }
        }, {
          start: {
            line: 269,
            column: 47
          },
          end: {
            line: 269,
            column: 48
          }
        }],
        line: 269
      },
      "35": {
        loc: {
          start: {
            line: 270,
            column: 26
          },
          end: {
            line: 270,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 26
          },
          end: {
            line: 270,
            column: 38
          }
        }, {
          start: {
            line: 270,
            column: 42
          },
          end: {
            line: 270,
            column: 43
          }
        }],
        line: 270
      },
      "36": {
        loc: {
          start: {
            line: 275,
            column: 34
          },
          end: {
            line: 275,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 275,
            column: 46
          },
          end: {
            line: 275,
            column: 47
          }
        }],
        line: 275
      },
      "37": {
        loc: {
          start: {
            line: 285,
            column: 37
          },
          end: {
            line: 285,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 285,
            column: 57
          },
          end: {
            line: 285,
            column: 84
          }
        }, {
          start: {
            line: 285,
            column: 87
          },
          end: {
            line: 285,
            column: 88
          }
        }],
        line: 285
      },
      "38": {
        loc: {
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 286,
            column: 287
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 286,
            column: 56
          },
          end: {
            line: 286,
            column: 283
          }
        }, {
          start: {
            line: 286,
            column: 286
          },
          end: {
            line: 286,
            column: 287
          }
        }],
        line: 286
      },
      "39": {
        loc: {
          start: {
            line: 292,
            column: 39
          },
          end: {
            line: 292,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 65
          },
          end: {
            line: 292,
            column: 69
          }
        }, {
          start: {
            line: 292,
            column: 72
          },
          end: {
            line: 292,
            column: 76
          }
        }],
        line: 292
      },
      "40": {
        loc: {
          start: {
            line: 295,
            column: 35
          },
          end: {
            line: 295,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 295,
            column: 60
          },
          end: {
            line: 295,
            column: 84
          }
        }, {
          start: {
            line: 295,
            column: 87
          },
          end: {
            line: 295,
            column: 91
          }
        }],
        line: 295
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\enterprise\\metrics\\index.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - METRICS SYSTEM\r\n// ===================================\r\n\r\nimport { redisCache } from '../../integrations/redis';\r\nimport { logger, LogLevel, LogCategory } from '../logger';\r\n\r\n// Tipos de m\xE9tricas\r\nexport interface MetricData {\r\n  timestamp: number;\r\n  value: number;\r\n  labels?: Record<string, string>;\r\n}\r\n\r\nexport interface AggregatedMetric {\r\n  count: number;\r\n  sum: number;\r\n  avg: number;\r\n  min: number;\r\n  max: number;\r\n  p95: number;\r\n  p99: number;\r\n}\r\n\r\nexport interface ApiMetrics {\r\n  requests: {\r\n    total: number;\r\n    success: number;\r\n    error: number;\r\n    rate_limited: number;\r\n  };\r\n  response_times: AggregatedMetric;\r\n  error_rates: {\r\n    '4xx': number;\r\n    '5xx': number;\r\n    network: number;\r\n    timeout: number;\r\n  };\r\n  retry_stats: {\r\n    total_retries: number;\r\n    successful_retries: number;\r\n    failed_retries: number;\r\n    avg_attempts: number;\r\n  };\r\n}\r\n\r\nexport interface MercadoPagoMetrics {\r\n  payment_creation: ApiMetrics;\r\n  payment_queries: ApiMetrics;\r\n  webhook_processing: ApiMetrics;\r\n  overall_health: {\r\n    uptime_percentage: number;\r\n    avg_response_time: number;\r\n    error_rate: number;\r\n    last_incident: string | null;\r\n  };\r\n}\r\n\r\n// Configuraci\xF3n de m\xE9tricas\r\nconst METRICS_CONFIG = {\r\n  RETENTION_HOURS: 24,\r\n  AGGREGATION_WINDOW_MINUTES: 5,\r\n  ALERT_THRESHOLDS: {\r\n    ERROR_RATE: 0.05, // 5%\r\n    RESPONSE_TIME_P95: 5000, // 5 segundos\r\n    RATE_LIMIT_RATE: 0.1, // 10%\r\n  },\r\n};\r\n\r\n/**\r\n * Clase principal para manejo de m\xE9tricas\r\n */\r\nexport class MetricsCollector {\r\n  private static instance: MetricsCollector;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): MetricsCollector {\r\n    if (!MetricsCollector.instance) {\r\n      MetricsCollector.instance = new MetricsCollector();\r\n    }\r\n    return MetricsCollector.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra una m\xE9trica de request\r\n   */\r\n  async recordRequest(\r\n    endpoint: string,\r\n    method: string,\r\n    statusCode: number,\r\n    responseTime: number,\r\n    labels: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const baseKey = `metrics:${endpoint}:${method}`;\r\n\r\n    try {\r\n      // Registrar request total\r\n      await this.incrementCounter(`${baseKey}:requests:total`, timestamp);\r\n\r\n      // Registrar por tipo de respuesta\r\n      if (statusCode >= 200 && statusCode < 300) {\r\n        await this.incrementCounter(`${baseKey}:requests:success`, timestamp);\r\n      } else if (statusCode === 429) {\r\n        await this.incrementCounter(`${baseKey}:requests:rate_limited`, timestamp);\r\n      } else {\r\n        await this.incrementCounter(`${baseKey}:requests:error`, timestamp);\r\n        \r\n        // Categorizar errores\r\n        if (statusCode >= 400 && statusCode < 500) {\r\n          await this.incrementCounter(`${baseKey}:errors:4xx`, timestamp);\r\n        } else if (statusCode >= 500) {\r\n          await this.incrementCounter(`${baseKey}:errors:5xx`, timestamp);\r\n        }\r\n      }\r\n\r\n      // Registrar tiempo de respuesta\r\n      await this.recordValue(`${baseKey}:response_time`, responseTime, timestamp);\r\n\r\n      // Log para debugging\r\n      logger.info(LogCategory.API, 'Metric recorded');\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record metric', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra una llamada a API (alias para recordRequest)\r\n   */\r\n  async recordApiCall(params: {\r\n    endpoint: string;\r\n    method: string;\r\n    statusCode: number;\r\n    responseTime: number;\r\n    userId?: string;\r\n    error?: string;\r\n  }): Promise<void> {\r\n    await this.recordRequest(\r\n      params.endpoint,\r\n      params.method,\r\n      params.statusCode,\r\n      params.responseTime,\r\n      {\r\n        userId: params.userId || 'anonymous',\r\n        error: params.error || ''\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de retry\r\n   */\r\n  async recordRetry(\r\n    operation: string,\r\n    attempts: number,\r\n    success: boolean,\r\n    totalDuration: number\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const baseKey = `metrics:retry:${operation}`;\r\n\r\n    try {\r\n      await this.incrementCounter(`${baseKey}:total`, timestamp);\r\n      await this.recordValue(`${baseKey}:attempts`, attempts, timestamp);\r\n      await this.recordValue(`${baseKey}:duration`, totalDuration, timestamp);\r\n\r\n      if (success) {\r\n        await this.incrementCounter(`${baseKey}:success`, timestamp);\r\n      } else {\r\n        await this.incrementCounter(`${baseKey}:failed`, timestamp);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record retry metric', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de rate limiting\r\n   */\r\n  async recordRateLimit(\r\n    endpoint: string,\r\n    blocked: boolean,\r\n    remaining: number,\r\n    limit: number\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const baseKey = `metrics:rate_limit:${endpoint}`;\r\n\r\n    try {\r\n      await this.incrementCounter(`${baseKey}:checks`, timestamp);\r\n      \r\n      if (blocked) {\r\n        await this.incrementCounter(`${baseKey}:blocked`, timestamp);\r\n      }\r\n\r\n      await this.recordValue(`${baseKey}:remaining`, remaining, timestamp);\r\n      await this.recordValue(`${baseKey}:utilization`, (limit - remaining) / limit, timestamp);\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record rate limit metric', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Incrementa un contador\r\n   */\r\n  private async incrementCounter(key: string, timestamp: number): Promise<void> {\r\n    const windowKey = this.getWindowKey(key, timestamp);\r\n    await redisCache.incr(windowKey);\r\n    await redisCache.expire(windowKey, METRICS_CONFIG.RETENTION_HOURS * 3600);\r\n  }\r\n\r\n  /**\r\n   * Registra un valor num\xE9rico\r\n   */\r\n  private async recordValue(key: string, value: number, timestamp: number): Promise<void> {\r\n    try {\r\n      const windowKey = this.getWindowKey(key, timestamp);\r\n      const listKey = `${windowKey}:values`;\r\n\r\n      // Obtener cliente Redis (real o mock)\r\n      const client = redisCache['client'] || redisCache;\r\n\r\n      // Verificar si el cliente tiene los m\xE9todos necesarios\r\n      if (typeof client.lpush === 'function') {\r\n        await client.lpush(listKey, value.toString());\r\n        await client.ltrim(listKey, 0, 999); // Mantener \xFAltimos 1000 valores\r\n        await client.expire(listKey, METRICS_CONFIG.RETENTION_HOURS * 3600);\r\n      } else {\r\n        // Fallback para mock b\xE1sico - usar storage simple\r\n        await redisCache.set(`${listKey}:latest`, value.toString());\r\n      }\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to record metric value', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera clave de ventana temporal\r\n   */\r\n  private getWindowKey(baseKey: string, timestamp: number): string {\r\n    const windowStart = Math.floor(timestamp / (METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000));\r\n    return `${baseKey}:${windowStart}`;\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas agregadas para un endpoint\r\n   */\r\n  async getApiMetrics(endpoint: string, method: string, hoursBack: number = 1): Promise<ApiMetrics> {\r\n    const baseKey = `metrics:${endpoint}:${method}`;\r\n    const now = Date.now();\r\n    const startTime = now - (hoursBack * 60 * 60 * 1000);\r\n\r\n    try {\r\n      // Obtener contadores\r\n      const requests = await this.getCounterSum(baseKey, 'requests', startTime, now);\r\n      const errors = await this.getCounterSum(baseKey, 'errors', startTime, now);\r\n      \r\n      // Obtener tiempos de respuesta\r\n      const responseTimes = await this.getValueStats(`${baseKey}:response_time`, startTime, now);\r\n      \r\n      // Obtener m\xE9tricas de retry\r\n      const retryStats = await this.getRetryStats(endpoint, startTime, now);\r\n\r\n      return {\r\n        requests: {\r\n          total: requests.total || 0,\r\n          success: requests.success || 0,\r\n          error: requests.error || 0,\r\n          rate_limited: requests.rate_limited || 0,\r\n        },\r\n        response_times: responseTimes,\r\n        error_rates: {\r\n          '4xx': errors['4xx'] || 0,\r\n          '5xx': errors['5xx'] || 0,\r\n          network: errors.network || 0,\r\n          timeout: errors.timeout || 0,\r\n        },\r\n        retry_stats: retryStats,\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to get API metrics', error as Error);\r\n      \r\n      // Retornar m\xE9tricas vac\xEDas en caso de error\r\n      return this.getEmptyApiMetrics();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene suma de contadores en un rango de tiempo\r\n   */\r\n  private async getCounterSum(\r\n    baseKey: string, \r\n    category: string, \r\n    startTime: number, \r\n    endTime: number\r\n  ): Promise<Record<string, number>> {\r\n    const result: Record<string, number> = {};\r\n    const windowSize = METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000;\r\n    \r\n    for (let time = startTime; time <= endTime; time += windowSize) {\r\n      const windowStart = Math.floor(time / windowSize);\r\n      \r\n      // Obtener diferentes tipos de contadores\r\n      const types = ['total', 'success', 'error', 'rate_limited', '4xx', '5xx', 'network', 'timeout'];\r\n      \r\n      for (const type of types) {\r\n        const key = `${baseKey}:${category}:${type}:${windowStart}`;\r\n        const value = await redisCache.get(key);\r\n        result[type] = (result[type] || 0) + (parseInt(value || '0'));\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad\xEDsticas de valores num\xE9ricos\r\n   */\r\n  private async getValueStats(\r\n    baseKey: string,\r\n    startTime: number,\r\n    endTime: number\r\n  ): Promise<AggregatedMetric> {\r\n    const values: number[] = [];\r\n    const windowSize = METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000;\r\n\r\n    for (let time = startTime; time <= endTime; time += windowSize) {\r\n      const windowStart = Math.floor(time / windowSize);\r\n      const key = `${baseKey}:${windowStart}:values`;\r\n\r\n      try {\r\n        const client = redisCache['client'] || redisCache;\r\n\r\n        if (typeof client.lrange === 'function') {\r\n          const windowValues = await client.lrange(key, 0, -1);\r\n          values.push(...windowValues.map(v => parseFloat(v)).filter(v => !isNaN(v)));\r\n        } else {\r\n          // Fallback para mock b\xE1sico\r\n          const value = await redisCache.get(`${key}:latest`);\r\n          if (value) {\r\n            const numValue = parseFloat(value);\r\n            if (!isNaN(numValue)) {\r\n              values.push(numValue);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Continuar si no se puede obtener valores de una ventana\r\n      }\r\n    }\r\n\r\n    if (values.length === 0) {\r\n      return { count: 0, sum: 0, avg: 0, min: 0, max: 0, p95: 0, p99: 0 };\r\n    }\r\n\r\n    values.sort((a, b) => a - b);\r\n    const sum = values.reduce((a, b) => a + b, 0);\r\n    \r\n    return {\r\n      count: values.length,\r\n      sum,\r\n      avg: sum / values.length,\r\n      min: values[0],\r\n      max: values[values.length - 1],\r\n      p95: values[Math.floor(values.length * 0.95)] || 0,\r\n      p99: values[Math.floor(values.length * 0.99)] || 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad\xEDsticas de retry\r\n   */\r\n  private async getRetryStats(\r\n    operation: string, \r\n    startTime: number, \r\n    endTime: number\r\n  ): Promise<ApiMetrics['retry_stats']> {\r\n    const baseKey = `metrics:retry:${operation}`;\r\n    const counters = await this.getCounterSum(baseKey, '', startTime, endTime);\r\n    const attempts = await this.getValueStats(`${baseKey}:attempts`, startTime, endTime);\r\n\r\n    return {\r\n      total_retries: counters.total || 0,\r\n      successful_retries: counters.success || 0,\r\n      failed_retries: counters.failed || 0,\r\n      avg_attempts: attempts.avg || 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas espec\xEDficas de MercadoPago\r\n   */\r\n  async getMercadoPagoMetrics(hoursBack: number = 1): Promise<MercadoPagoMetrics> {\r\n    try {\r\n      const [paymentCreation, paymentQueries, webhookProcessing] = await Promise.all([\r\n        this.getApiMetrics('/api/payments/create-preference', 'POST', hoursBack),\r\n        this.getApiMetrics('/api/payments/query', 'GET', hoursBack),\r\n        this.getApiMetrics('/api/webhooks/mercadopago', 'POST', hoursBack),\r\n      ]);\r\n\r\n      // Calcular m\xE9tricas generales de salud\r\n      const totalRequests = paymentCreation.requests.total +\r\n                           paymentQueries.requests.total +\r\n                           webhookProcessing.requests.total;\r\n\r\n      const totalErrors = paymentCreation.requests.error +\r\n                         paymentQueries.requests.error +\r\n                         webhookProcessing.requests.error;\r\n\r\n      const overallErrorRate = totalRequests > 0 ? totalErrors / totalRequests : 0;\r\n\r\n      const avgResponseTime = totalRequests > 0 ?\r\n        (paymentCreation.response_times.avg * paymentCreation.requests.total +\r\n         paymentQueries.response_times.avg * paymentQueries.requests.total +\r\n         webhookProcessing.response_times.avg * webhookProcessing.requests.total) / totalRequests : 0;\r\n\r\n      return {\r\n        payment_creation: paymentCreation,\r\n        payment_queries: paymentQueries,\r\n        webhook_processing: webhookProcessing,\r\n        overall_health: {\r\n          uptime_percentage: overallErrorRate < 0.05 ? 99.9 : 95.0, // Simplificado\r\n          avg_response_time: avgResponseTime,\r\n          error_rate: overallErrorRate,\r\n          last_incident: overallErrorRate > 0.1 ? new Date().toISOString() : null,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting MercadoPago metrics:', error);\r\n      // Retornar m\xE9tricas vac\xEDas en caso de error\r\n      const emptyMetrics = this.getEmptyApiMetrics();\r\n      return {\r\n        payment_creation: emptyMetrics,\r\n        payment_queries: emptyMetrics,\r\n        webhook_processing: emptyMetrics,\r\n        overall_health: {\r\n          uptime_percentage: 0,\r\n          avg_response_time: 0,\r\n          error_rate: 1,\r\n          last_incident: new Date().toISOString(),\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna m\xE9tricas vac\xEDas por defecto\r\n   */\r\n  private getEmptyApiMetrics(): ApiMetrics {\r\n    return {\r\n      requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\r\n      response_times: { count: 0, sum: 0, avg: 0, min: 0, max: 0, p95: 0, p99: 0 },\r\n      error_rates: { '4xx': 0, '5xx': 0, network: 0, timeout: 0 },\r\n      retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0, avg_attempts: 0 },\r\n    };\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const metricsCollector = MetricsCollector.getInstance();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["MetricsCollector", "metricsCollector", "METRICS_CONFIG", "RETENTION_HOURS", "AGGREGATION_WINDOW_MINUTES", "ALERT_THRESHOLDS", "ERROR_RATE", "RESPONSE_TIME_P95", "RATE_LIMIT_RATE", "getInstance", "instance", "recordRequest", "endpoint", "method", "statusCode", "responseTime", "labels", "timestamp", "Date", "now", "baseKey", "incrementCounter", "recordValue", "logger", "info", "LogCategory", "API", "error", "recordApiCall", "params", "userId", "recordRetry", "operation", "attempts", "success", "totalDuration", "recordRateLimit", "blocked", "remaining", "limit", "key", "windowKey", "getWindowKey", "redisCache", "incr", "expire", "value", "listKey", "client", "lpush", "toString", "ltrim", "set", "windowStart", "Math", "floor", "getApiMetrics", "hoursBack", "startTime", "requests", "getCounterSum", "errors", "responseTimes", "getValueStats", "retryStats", "getRetryStats", "total", "rate_limited", "response_times", "error_rates", "network", "timeout", "retry_stats", "getEmptyApiMetrics", "category", "endTime", "result", "windowSize", "time", "types", "type", "get", "parseInt", "values", "lrange", "windowValues", "push", "map", "v", "parseFloat", "filter", "isNaN", "numValue", "length", "count", "sum", "avg", "min", "max", "p95", "p99", "sort", "a", "b", "reduce", "counters", "total_retries", "successful_retries", "failed_retries", "failed", "avg_attempts", "getMercadoPagoMetrics", "paymentCreation", "paymentQueries", "webhookProcessing", "Promise", "all", "totalRequests", "totalErrors", "overallErrorRate", "avgResponseTime", "payment_creation", "payment_queries", "webhook_processing", "overall_health", "uptime_percentage", "avg_response_time", "error_rate", "last_incident", "toISOString", "console", "emptyMetrics"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1da0133239373fa0726e5d55ee5463ffeebcf5d5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15djenyddd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15djenyddd();
cov_15djenyddd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_15djenyddd().f[0]++;
  cov_15djenyddd().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_15djenyddd().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_15djenyddd().s[3]++;
_export(exports, {
  get MetricsCollector() {
    /* istanbul ignore next */
    cov_15djenyddd().f[1]++;
    cov_15djenyddd().s[4]++;
    return MetricsCollector;
  },
  get metricsCollector() {
    /* istanbul ignore next */
    cov_15djenyddd().f[2]++;
    cov_15djenyddd().s[5]++;
    return metricsCollector;
  }
});
const _redis =
/* istanbul ignore next */
(cov_15djenyddd().s[6]++, require("../../integrations/redis"));
const _logger =
/* istanbul ignore next */
(cov_15djenyddd().s[7]++, require("../logger"));
// Configuración de métricas
const METRICS_CONFIG =
/* istanbul ignore next */
(cov_15djenyddd().s[8]++, {
  RETENTION_HOURS: 24,
  AGGREGATION_WINDOW_MINUTES: 5,
  ALERT_THRESHOLDS: {
    ERROR_RATE: 0.05,
    RESPONSE_TIME_P95: 5000,
    RATE_LIMIT_RATE: 0.1
  }
});
class MetricsCollector {
  constructor() {
    /* istanbul ignore next */
    cov_15djenyddd().f[3]++;
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_15djenyddd().f[4]++;
    cov_15djenyddd().s[9]++;
    if (!MetricsCollector.instance) {
      /* istanbul ignore next */
      cov_15djenyddd().b[0][0]++;
      cov_15djenyddd().s[10]++;
      MetricsCollector.instance = new MetricsCollector();
    } else
    /* istanbul ignore next */
    {
      cov_15djenyddd().b[0][1]++;
    }
    cov_15djenyddd().s[11]++;
    return MetricsCollector.instance;
  }
  /**
  * Registra una métrica de request
  */
  async recordRequest(endpoint, method, statusCode, responseTime, labels =
  /* istanbul ignore next */
  (cov_15djenyddd().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_15djenyddd().f[5]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_15djenyddd().s[12]++, Date.now());
    const baseKey =
    /* istanbul ignore next */
    (cov_15djenyddd().s[13]++, `metrics:${endpoint}:${method}`);
    /* istanbul ignore next */
    cov_15djenyddd().s[14]++;
    try {
      /* istanbul ignore next */
      cov_15djenyddd().s[15]++;
      // Registrar request total
      await this.incrementCounter(`${baseKey}:requests:total`, timestamp);
      // Registrar por tipo de respuesta
      /* istanbul ignore next */
      cov_15djenyddd().s[16]++;
      if (
      /* istanbul ignore next */
      (cov_15djenyddd().b[3][0]++, statusCode >= 200) &&
      /* istanbul ignore next */
      (cov_15djenyddd().b[3][1]++, statusCode < 300)) {
        /* istanbul ignore next */
        cov_15djenyddd().b[2][0]++;
        cov_15djenyddd().s[17]++;
        await this.incrementCounter(`${baseKey}:requests:success`, timestamp);
      } else {
        /* istanbul ignore next */
        cov_15djenyddd().b[2][1]++;
        cov_15djenyddd().s[18]++;
        if (statusCode === 429) {
          /* istanbul ignore next */
          cov_15djenyddd().b[4][0]++;
          cov_15djenyddd().s[19]++;
          await this.incrementCounter(`${baseKey}:requests:rate_limited`, timestamp);
        } else {
          /* istanbul ignore next */
          cov_15djenyddd().b[4][1]++;
          cov_15djenyddd().s[20]++;
          await this.incrementCounter(`${baseKey}:requests:error`, timestamp);
          // Categorizar errores
          /* istanbul ignore next */
          cov_15djenyddd().s[21]++;
          if (
          /* istanbul ignore next */
          (cov_15djenyddd().b[6][0]++, statusCode >= 400) &&
          /* istanbul ignore next */
          (cov_15djenyddd().b[6][1]++, statusCode < 500)) {
            /* istanbul ignore next */
            cov_15djenyddd().b[5][0]++;
            cov_15djenyddd().s[22]++;
            await this.incrementCounter(`${baseKey}:errors:4xx`, timestamp);
          } else {
            /* istanbul ignore next */
            cov_15djenyddd().b[5][1]++;
            cov_15djenyddd().s[23]++;
            if (statusCode >= 500) {
              /* istanbul ignore next */
              cov_15djenyddd().b[7][0]++;
              cov_15djenyddd().s[24]++;
              await this.incrementCounter(`${baseKey}:errors:5xx`, timestamp);
            } else
            /* istanbul ignore next */
            {
              cov_15djenyddd().b[7][1]++;
            }
          }
        }
      }
      // Registrar tiempo de respuesta
      /* istanbul ignore next */
      cov_15djenyddd().s[25]++;
      await this.recordValue(`${baseKey}:response_time`, responseTime, timestamp);
      // Log para debugging
      /* istanbul ignore next */
      cov_15djenyddd().s[26]++;
      _logger.logger.info(_logger.LogCategory.API, 'Metric recorded');
    } catch (error) {
      /* istanbul ignore next */
      cov_15djenyddd().s[27]++;
      _logger.logger.error(_logger.LogCategory.API, 'Failed to record metric', error);
    }
  }
  /**
  * Registra una llamada a API (alias para recordRequest)
  */
  async recordApiCall(params) {
    /* istanbul ignore next */
    cov_15djenyddd().f[6]++;
    cov_15djenyddd().s[28]++;
    await this.recordRequest(params.endpoint, params.method, params.statusCode, params.responseTime, {
      userId:
      /* istanbul ignore next */
      (cov_15djenyddd().b[8][0]++, params.userId) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[8][1]++, 'anonymous'),
      error:
      /* istanbul ignore next */
      (cov_15djenyddd().b[9][0]++, params.error) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[9][1]++, '')
    });
  }
  /**
  * Registra métricas de retry
  */
  async recordRetry(operation, attempts, success, totalDuration) {
    /* istanbul ignore next */
    cov_15djenyddd().f[7]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_15djenyddd().s[29]++, Date.now());
    const baseKey =
    /* istanbul ignore next */
    (cov_15djenyddd().s[30]++, `metrics:retry:${operation}`);
    /* istanbul ignore next */
    cov_15djenyddd().s[31]++;
    try {
      /* istanbul ignore next */
      cov_15djenyddd().s[32]++;
      await this.incrementCounter(`${baseKey}:total`, timestamp);
      /* istanbul ignore next */
      cov_15djenyddd().s[33]++;
      await this.recordValue(`${baseKey}:attempts`, attempts, timestamp);
      /* istanbul ignore next */
      cov_15djenyddd().s[34]++;
      await this.recordValue(`${baseKey}:duration`, totalDuration, timestamp);
      /* istanbul ignore next */
      cov_15djenyddd().s[35]++;
      if (success) {
        /* istanbul ignore next */
        cov_15djenyddd().b[10][0]++;
        cov_15djenyddd().s[36]++;
        await this.incrementCounter(`${baseKey}:success`, timestamp);
      } else {
        /* istanbul ignore next */
        cov_15djenyddd().b[10][1]++;
        cov_15djenyddd().s[37]++;
        await this.incrementCounter(`${baseKey}:failed`, timestamp);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_15djenyddd().s[38]++;
      _logger.logger.error(_logger.LogCategory.API, 'Failed to record retry metric', error);
    }
  }
  /**
  * Registra métricas de rate limiting
  */
  async recordRateLimit(endpoint, blocked, remaining, limit) {
    /* istanbul ignore next */
    cov_15djenyddd().f[8]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_15djenyddd().s[39]++, Date.now());
    const baseKey =
    /* istanbul ignore next */
    (cov_15djenyddd().s[40]++, `metrics:rate_limit:${endpoint}`);
    /* istanbul ignore next */
    cov_15djenyddd().s[41]++;
    try {
      /* istanbul ignore next */
      cov_15djenyddd().s[42]++;
      await this.incrementCounter(`${baseKey}:checks`, timestamp);
      /* istanbul ignore next */
      cov_15djenyddd().s[43]++;
      if (blocked) {
        /* istanbul ignore next */
        cov_15djenyddd().b[11][0]++;
        cov_15djenyddd().s[44]++;
        await this.incrementCounter(`${baseKey}:blocked`, timestamp);
      } else
      /* istanbul ignore next */
      {
        cov_15djenyddd().b[11][1]++;
      }
      cov_15djenyddd().s[45]++;
      await this.recordValue(`${baseKey}:remaining`, remaining, timestamp);
      /* istanbul ignore next */
      cov_15djenyddd().s[46]++;
      await this.recordValue(`${baseKey}:utilization`, (limit - remaining) / limit, timestamp);
    } catch (error) {
      /* istanbul ignore next */
      cov_15djenyddd().s[47]++;
      _logger.logger.error(_logger.LogCategory.API, 'Failed to record rate limit metric', error);
    }
  }
  /**
  * Incrementa un contador
  */
  async incrementCounter(key, timestamp) {
    /* istanbul ignore next */
    cov_15djenyddd().f[9]++;
    const windowKey =
    /* istanbul ignore next */
    (cov_15djenyddd().s[48]++, this.getWindowKey(key, timestamp));
    /* istanbul ignore next */
    cov_15djenyddd().s[49]++;
    await _redis.redisCache.incr(windowKey);
    /* istanbul ignore next */
    cov_15djenyddd().s[50]++;
    await _redis.redisCache.expire(windowKey, METRICS_CONFIG.RETENTION_HOURS * 3600);
  }
  /**
  * Registra un valor numérico
  */
  async recordValue(key, value, timestamp) {
    /* istanbul ignore next */
    cov_15djenyddd().f[10]++;
    cov_15djenyddd().s[51]++;
    try {
      const windowKey =
      /* istanbul ignore next */
      (cov_15djenyddd().s[52]++, this.getWindowKey(key, timestamp));
      const listKey =
      /* istanbul ignore next */
      (cov_15djenyddd().s[53]++, `${windowKey}:values`);
      // Obtener cliente Redis (real o mock)
      const client =
      /* istanbul ignore next */
      (cov_15djenyddd().s[54]++,
      /* istanbul ignore next */
      (cov_15djenyddd().b[12][0]++, _redis.redisCache['client']) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[12][1]++, _redis.redisCache));
      // Verificar si el cliente tiene los métodos necesarios
      /* istanbul ignore next */
      cov_15djenyddd().s[55]++;
      if (typeof client.lpush === 'function') {
        /* istanbul ignore next */
        cov_15djenyddd().b[13][0]++;
        cov_15djenyddd().s[56]++;
        await client.lpush(listKey, value.toString());
        /* istanbul ignore next */
        cov_15djenyddd().s[57]++;
        await client.ltrim(listKey, 0, 999); // Mantener últimos 1000 valores
        /* istanbul ignore next */
        cov_15djenyddd().s[58]++;
        await client.expire(listKey, METRICS_CONFIG.RETENTION_HOURS * 3600);
      } else {
        /* istanbul ignore next */
        cov_15djenyddd().b[13][1]++;
        cov_15djenyddd().s[59]++;
        // Fallback para mock básico - usar storage simple
        await _redis.redisCache.set(`${listKey}:latest`, value.toString());
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_15djenyddd().s[60]++;
      _logger.logger.error(_logger.LogCategory.API, 'Failed to record metric value', error);
    }
  }
  /**
  * Genera clave de ventana temporal
  */
  getWindowKey(baseKey, timestamp) {
    /* istanbul ignore next */
    cov_15djenyddd().f[11]++;
    const windowStart =
    /* istanbul ignore next */
    (cov_15djenyddd().s[61]++, Math.floor(timestamp / (METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000)));
    /* istanbul ignore next */
    cov_15djenyddd().s[62]++;
    return `${baseKey}:${windowStart}`;
  }
  /**
  * Obtiene métricas agregadas para un endpoint
  */
  async getApiMetrics(endpoint, method, hoursBack =
  /* istanbul ignore next */
  (cov_15djenyddd().b[14][0]++, 1)) {
    /* istanbul ignore next */
    cov_15djenyddd().f[12]++;
    const baseKey =
    /* istanbul ignore next */
    (cov_15djenyddd().s[63]++, `metrics:${endpoint}:${method}`);
    const now =
    /* istanbul ignore next */
    (cov_15djenyddd().s[64]++, Date.now());
    const startTime =
    /* istanbul ignore next */
    (cov_15djenyddd().s[65]++, now - hoursBack * 60 * 60 * 1000);
    /* istanbul ignore next */
    cov_15djenyddd().s[66]++;
    try {
      // Obtener contadores
      const requests =
      /* istanbul ignore next */
      (cov_15djenyddd().s[67]++, await this.getCounterSum(baseKey, 'requests', startTime, now));
      const errors =
      /* istanbul ignore next */
      (cov_15djenyddd().s[68]++, await this.getCounterSum(baseKey, 'errors', startTime, now));
      // Obtener tiempos de respuesta
      const responseTimes =
      /* istanbul ignore next */
      (cov_15djenyddd().s[69]++, await this.getValueStats(`${baseKey}:response_time`, startTime, now));
      // Obtener métricas de retry
      const retryStats =
      /* istanbul ignore next */
      (cov_15djenyddd().s[70]++, await this.getRetryStats(endpoint, startTime, now));
      /* istanbul ignore next */
      cov_15djenyddd().s[71]++;
      return {
        requests: {
          total:
          /* istanbul ignore next */
          (cov_15djenyddd().b[15][0]++, requests.total) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[15][1]++, 0),
          success:
          /* istanbul ignore next */
          (cov_15djenyddd().b[16][0]++, requests.success) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[16][1]++, 0),
          error:
          /* istanbul ignore next */
          (cov_15djenyddd().b[17][0]++, requests.error) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[17][1]++, 0),
          rate_limited:
          /* istanbul ignore next */
          (cov_15djenyddd().b[18][0]++, requests.rate_limited) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[18][1]++, 0)
        },
        response_times: responseTimes,
        error_rates: {
          '4xx':
          /* istanbul ignore next */
          (cov_15djenyddd().b[19][0]++, errors['4xx']) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[19][1]++, 0),
          '5xx':
          /* istanbul ignore next */
          (cov_15djenyddd().b[20][0]++, errors['5xx']) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[20][1]++, 0),
          network:
          /* istanbul ignore next */
          (cov_15djenyddd().b[21][0]++, errors.network) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[21][1]++, 0),
          timeout:
          /* istanbul ignore next */
          (cov_15djenyddd().b[22][0]++, errors.timeout) ||
          /* istanbul ignore next */
          (cov_15djenyddd().b[22][1]++, 0)
        },
        retry_stats: retryStats
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_15djenyddd().s[72]++;
      _logger.logger.error(_logger.LogCategory.API, 'Failed to get API metrics', error);
      // Retornar métricas vacías en caso de error
      /* istanbul ignore next */
      cov_15djenyddd().s[73]++;
      return this.getEmptyApiMetrics();
    }
  }
  /**
  * Obtiene suma de contadores en un rango de tiempo
  */
  async getCounterSum(baseKey, category, startTime, endTime) {
    /* istanbul ignore next */
    cov_15djenyddd().f[13]++;
    const result =
    /* istanbul ignore next */
    (cov_15djenyddd().s[74]++, {});
    const windowSize =
    /* istanbul ignore next */
    (cov_15djenyddd().s[75]++, METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000);
    /* istanbul ignore next */
    cov_15djenyddd().s[76]++;
    for (let time =
    /* istanbul ignore next */
    (cov_15djenyddd().s[77]++, startTime); time <= endTime; time += windowSize) {
      const windowStart =
      /* istanbul ignore next */
      (cov_15djenyddd().s[78]++, Math.floor(time / windowSize));
      // Obtener diferentes tipos de contadores
      const types =
      /* istanbul ignore next */
      (cov_15djenyddd().s[79]++, ['total', 'success', 'error', 'rate_limited', '4xx', '5xx', 'network', 'timeout']);
      /* istanbul ignore next */
      cov_15djenyddd().s[80]++;
      for (const type of types) {
        const key =
        /* istanbul ignore next */
        (cov_15djenyddd().s[81]++, `${baseKey}:${category}:${type}:${windowStart}`);
        const value =
        /* istanbul ignore next */
        (cov_15djenyddd().s[82]++, await _redis.redisCache.get(key));
        /* istanbul ignore next */
        cov_15djenyddd().s[83]++;
        result[type] = (
        /* istanbul ignore next */
        (cov_15djenyddd().b[23][0]++, result[type]) ||
        /* istanbul ignore next */
        (cov_15djenyddd().b[23][1]++, 0)) + parseInt(
        /* istanbul ignore next */
        (cov_15djenyddd().b[24][0]++, value) ||
        /* istanbul ignore next */
        (cov_15djenyddd().b[24][1]++, '0'));
      }
    }
    /* istanbul ignore next */
    cov_15djenyddd().s[84]++;
    return result;
  }
  /**
  * Obtiene estadísticas de valores numéricos
  */
  async getValueStats(baseKey, startTime, endTime) {
    /* istanbul ignore next */
    cov_15djenyddd().f[14]++;
    const values =
    /* istanbul ignore next */
    (cov_15djenyddd().s[85]++, []);
    const windowSize =
    /* istanbul ignore next */
    (cov_15djenyddd().s[86]++, METRICS_CONFIG.AGGREGATION_WINDOW_MINUTES * 60 * 1000);
    /* istanbul ignore next */
    cov_15djenyddd().s[87]++;
    for (let time =
    /* istanbul ignore next */
    (cov_15djenyddd().s[88]++, startTime); time <= endTime; time += windowSize) {
      const windowStart =
      /* istanbul ignore next */
      (cov_15djenyddd().s[89]++, Math.floor(time / windowSize));
      const key =
      /* istanbul ignore next */
      (cov_15djenyddd().s[90]++, `${baseKey}:${windowStart}:values`);
      /* istanbul ignore next */
      cov_15djenyddd().s[91]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_15djenyddd().s[92]++,
        /* istanbul ignore next */
        (cov_15djenyddd().b[25][0]++, _redis.redisCache['client']) ||
        /* istanbul ignore next */
        (cov_15djenyddd().b[25][1]++, _redis.redisCache));
        /* istanbul ignore next */
        cov_15djenyddd().s[93]++;
        if (typeof client.lrange === 'function') {
          /* istanbul ignore next */
          cov_15djenyddd().b[26][0]++;
          const windowValues =
          /* istanbul ignore next */
          (cov_15djenyddd().s[94]++, await client.lrange(key, 0, -1));
          /* istanbul ignore next */
          cov_15djenyddd().s[95]++;
          values.push(...windowValues.map(v => {
            /* istanbul ignore next */
            cov_15djenyddd().f[15]++;
            cov_15djenyddd().s[96]++;
            return parseFloat(v);
          }).filter(v => {
            /* istanbul ignore next */
            cov_15djenyddd().f[16]++;
            cov_15djenyddd().s[97]++;
            return !isNaN(v);
          }));
        } else {
          /* istanbul ignore next */
          cov_15djenyddd().b[26][1]++;
          // Fallback para mock básico
          const value =
          /* istanbul ignore next */
          (cov_15djenyddd().s[98]++, await _redis.redisCache.get(`${key}:latest`));
          /* istanbul ignore next */
          cov_15djenyddd().s[99]++;
          if (value) {
            /* istanbul ignore next */
            cov_15djenyddd().b[27][0]++;
            const numValue =
            /* istanbul ignore next */
            (cov_15djenyddd().s[100]++, parseFloat(value));
            /* istanbul ignore next */
            cov_15djenyddd().s[101]++;
            if (!isNaN(numValue)) {
              /* istanbul ignore next */
              cov_15djenyddd().b[28][0]++;
              cov_15djenyddd().s[102]++;
              values.push(numValue);
            } else
            /* istanbul ignore next */
            {
              cov_15djenyddd().b[28][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_15djenyddd().b[27][1]++;
          }
        }
      } catch (error) {
        // Continuar si no se puede obtener valores de una ventana
      }
    }
    /* istanbul ignore next */
    cov_15djenyddd().s[103]++;
    if (values.length === 0) {
      /* istanbul ignore next */
      cov_15djenyddd().b[29][0]++;
      cov_15djenyddd().s[104]++;
      return {
        count: 0,
        sum: 0,
        avg: 0,
        min: 0,
        max: 0,
        p95: 0,
        p99: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_15djenyddd().b[29][1]++;
    }
    cov_15djenyddd().s[105]++;
    values.sort((a, b) => {
      /* istanbul ignore next */
      cov_15djenyddd().f[17]++;
      cov_15djenyddd().s[106]++;
      return a - b;
    });
    const sum =
    /* istanbul ignore next */
    (cov_15djenyddd().s[107]++, values.reduce((a, b) => {
      /* istanbul ignore next */
      cov_15djenyddd().f[18]++;
      cov_15djenyddd().s[108]++;
      return a + b;
    }, 0));
    /* istanbul ignore next */
    cov_15djenyddd().s[109]++;
    return {
      count: values.length,
      sum,
      avg: sum / values.length,
      min: values[0],
      max: values[values.length - 1],
      p95:
      /* istanbul ignore next */
      (cov_15djenyddd().b[30][0]++, values[Math.floor(values.length * 0.95)]) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[30][1]++, 0),
      p99:
      /* istanbul ignore next */
      (cov_15djenyddd().b[31][0]++, values[Math.floor(values.length * 0.99)]) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[31][1]++, 0)
    };
  }
  /**
  * Obtiene estadísticas de retry
  */
  async getRetryStats(operation, startTime, endTime) {
    /* istanbul ignore next */
    cov_15djenyddd().f[19]++;
    const baseKey =
    /* istanbul ignore next */
    (cov_15djenyddd().s[110]++, `metrics:retry:${operation}`);
    const counters =
    /* istanbul ignore next */
    (cov_15djenyddd().s[111]++, await this.getCounterSum(baseKey, '', startTime, endTime));
    const attempts =
    /* istanbul ignore next */
    (cov_15djenyddd().s[112]++, await this.getValueStats(`${baseKey}:attempts`, startTime, endTime));
    /* istanbul ignore next */
    cov_15djenyddd().s[113]++;
    return {
      total_retries:
      /* istanbul ignore next */
      (cov_15djenyddd().b[32][0]++, counters.total) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[32][1]++, 0),
      successful_retries:
      /* istanbul ignore next */
      (cov_15djenyddd().b[33][0]++, counters.success) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[33][1]++, 0),
      failed_retries:
      /* istanbul ignore next */
      (cov_15djenyddd().b[34][0]++, counters.failed) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[34][1]++, 0),
      avg_attempts:
      /* istanbul ignore next */
      (cov_15djenyddd().b[35][0]++, attempts.avg) ||
      /* istanbul ignore next */
      (cov_15djenyddd().b[35][1]++, 0)
    };
  }
  /**
  * Obtiene métricas específicas de MercadoPago
  */
  async getMercadoPagoMetrics(hoursBack =
  /* istanbul ignore next */
  (cov_15djenyddd().b[36][0]++, 1)) {
    /* istanbul ignore next */
    cov_15djenyddd().f[20]++;
    cov_15djenyddd().s[114]++;
    try {
      const [paymentCreation, paymentQueries, webhookProcessing] =
      /* istanbul ignore next */
      (cov_15djenyddd().s[115]++, await Promise.all([this.getApiMetrics('/api/payments/create-preference', 'POST', hoursBack), this.getApiMetrics('/api/payments/query', 'GET', hoursBack), this.getApiMetrics('/api/webhooks/mercadopago', 'POST', hoursBack)]));
      // Calcular métricas generales de salud
      const totalRequests =
      /* istanbul ignore next */
      (cov_15djenyddd().s[116]++, paymentCreation.requests.total + paymentQueries.requests.total + webhookProcessing.requests.total);
      const totalErrors =
      /* istanbul ignore next */
      (cov_15djenyddd().s[117]++, paymentCreation.requests.error + paymentQueries.requests.error + webhookProcessing.requests.error);
      const overallErrorRate =
      /* istanbul ignore next */
      (cov_15djenyddd().s[118]++, totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_15djenyddd().b[37][0]++, totalErrors / totalRequests) :
      /* istanbul ignore next */
      (cov_15djenyddd().b[37][1]++, 0));
      const avgResponseTime =
      /* istanbul ignore next */
      (cov_15djenyddd().s[119]++, totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_15djenyddd().b[38][0]++, (paymentCreation.response_times.avg * paymentCreation.requests.total + paymentQueries.response_times.avg * paymentQueries.requests.total + webhookProcessing.response_times.avg * webhookProcessing.requests.total) / totalRequests) :
      /* istanbul ignore next */
      (cov_15djenyddd().b[38][1]++, 0));
      /* istanbul ignore next */
      cov_15djenyddd().s[120]++;
      return {
        payment_creation: paymentCreation,
        payment_queries: paymentQueries,
        webhook_processing: webhookProcessing,
        overall_health: {
          uptime_percentage: overallErrorRate < 0.05 ?
          /* istanbul ignore next */
          (cov_15djenyddd().b[39][0]++, 99.9) :
          /* istanbul ignore next */
          (cov_15djenyddd().b[39][1]++, 95.0),
          avg_response_time: avgResponseTime,
          error_rate: overallErrorRate,
          last_incident: overallErrorRate > 0.1 ?
          /* istanbul ignore next */
          (cov_15djenyddd().b[40][0]++, new Date().toISOString()) :
          /* istanbul ignore next */
          (cov_15djenyddd().b[40][1]++, null)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_15djenyddd().s[121]++;
      console.error('Error getting MercadoPago metrics:', error);
      // Retornar métricas vacías en caso de error
      const emptyMetrics =
      /* istanbul ignore next */
      (cov_15djenyddd().s[122]++, this.getEmptyApiMetrics());
      /* istanbul ignore next */
      cov_15djenyddd().s[123]++;
      return {
        payment_creation: emptyMetrics,
        payment_queries: emptyMetrics,
        webhook_processing: emptyMetrics,
        overall_health: {
          uptime_percentage: 0,
          avg_response_time: 0,
          error_rate: 1,
          last_incident: new Date().toISOString()
        }
      };
    }
  }
  /**
  * Retorna métricas vacías por defecto
  */
  getEmptyApiMetrics() {
    /* istanbul ignore next */
    cov_15djenyddd().f[21]++;
    cov_15djenyddd().s[124]++;
    return {
      requests: {
        total: 0,
        success: 0,
        error: 0,
        rate_limited: 0
      },
      response_times: {
        count: 0,
        sum: 0,
        avg: 0,
        min: 0,
        max: 0,
        p95: 0,
        p99: 0
      },
      error_rates: {
        '4xx': 0,
        '5xx': 0,
        network: 0,
        timeout: 0
      },
      retry_stats: {
        total_retries: 0,
        successful_retries: 0,
        failed_retries: 0,
        avg_attempts: 0
      }
    };
  }
}
const metricsCollector =
/* istanbul ignore next */
(cov_15djenyddd().s[125]++, MetricsCollector.getInstance());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,