42960011fd6fb86c0bc4d573ee6506ce
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1ktokdnsgm() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\drivers\\route.ts";
  var hash = "7dd467826ba372d433b34a8eae11a1800d02557f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\drivers\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 21
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 20
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 23
        }
      },
      "9": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "10": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 75
        }
      },
      "11": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 57
        }
      },
      "12": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 24
        }
      },
      "13": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "14": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 49
        }
      },
      "15": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 43,
          column: 14
        }
      },
      "17": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 58
        }
      },
      "18": {
        start: {
          line: 47,
          column: 56
        },
        end: {
          line: 47,
          column: 158
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "20": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "21": {
        start: {
          line: 55,
          column: 53
        },
        end: {
          line: 55,
          column: 145
        }
      },
      "22": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "23": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 60,
          column: 14
        }
      },
      "24": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "25": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 62
        }
      },
      "26": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 73,
          column: 10
        }
      },
      "27": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "28": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 48
        }
      },
      "29": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "30": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "31": {
        start: {
          line: 86,
          column: 25
        },
        end: {
          line: 86,
          column: 44
        }
      },
      "32": {
        start: {
          line: 87,
          column: 33
        },
        end: {
          line: 87,
          column: 53
        }
      },
      "33": {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 89,
          column: 49
        }
      },
      "34": {
        start: {
          line: 90,
          column: 28
        },
        end: {
          line: 90,
          column: 60
        }
      },
      "35": {
        start: {
          line: 91,
          column: 26
        },
        end: {
          line: 91,
          column: 66
        }
      },
      "36": {
        start: {
          line: 92,
          column: 22
        },
        end: {
          line: 92,
          column: 65
        }
      },
      "37": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 66
        }
      },
      "38": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 97,
          column: 44
        }
      },
      "39": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "40": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "41": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "42": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 58
        }
      },
      "43": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "44": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "45": {
        start: {
          line: 108,
          column: 41
        },
        end: {
          line: 108,
          column: 52
        }
      },
      "46": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "47": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 62
        }
      },
      "48": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "49": {
        start: {
          line: 118,
          column: 33
        },
        end: {
          line: 132,
          column: 21
        }
      },
      "50": {
        start: {
          line: 118,
          column: 57
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "51": {
        start: {
          line: 128,
          column: 71
        },
        end: {
          line: 128,
          column: 92
        }
      },
      "52": {
        start: {
          line: 129,
          column: 72
        },
        end: {
          line: 129,
          column: 131
        }
      },
      "53": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 59
        }
      },
      "54": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 75
        }
      },
      "55": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "56": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "57": {
        start: {
          line: 145,
          column: 27
        },
        end: {
          line: 145,
          column: 48
        }
      },
      "58": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "59": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 151,
          column: 15
        }
      },
      "60": {
        start: {
          line: 153,
          column: 21
        },
        end: {
          line: 153,
          column: 41
        }
      },
      "61": {
        start: {
          line: 154,
          column: 149
        },
        end: {
          line: 154,
          column: 153
        }
      },
      "62": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "63": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "64": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "65": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "66": {
        start: {
          line: 170,
          column: 25
        },
        end: {
          line: 170,
          column: 59
        }
      },
      "67": {
        start: {
          line: 172,
          column: 60
        },
        end: {
          line: 172,
          column: 157
        }
      },
      "68": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "69": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "70": {
        start: {
          line: 181,
          column: 53
        },
        end: {
          line: 194,
          column: 28
        }
      },
      "71": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "72": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 65
        }
      },
      "73": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 201,
          column: 15
        }
      },
      "74": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "75": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 76
        }
      },
      "76": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      },
      "77": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "78": {
        start: {
          line: 217,
          column: 27
        },
        end: {
          line: 217,
          column: 48
        }
      },
      "79": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "80": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 223,
          column: 15
        }
      },
      "81": {
        start: {
          line: 225,
          column: 21
        },
        end: {
          line: 225,
          column: 41
        }
      },
      "82": {
        start: {
          line: 226,
          column: 35
        },
        end: {
          line: 226,
          column: 39
        }
      },
      "83": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "84": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 232,
          column: 15
        }
      },
      "85": {
        start: {
          line: 234,
          column: 25
        },
        end: {
          line: 234,
          column: 59
        }
      },
      "86": {
        start: {
          line: 236,
          column: 60
        },
        end: {
          line: 236,
          column: 135
        }
      },
      "87": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "88": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "89": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "90": {
        start: {
          line: 246,
          column: 46
        },
        end: {
          line: 246,
          column: 165
        }
      },
      "91": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "92": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 252,
          column: 19
        }
      },
      "93": {
        start: {
          line: 256,
          column: 53
        },
        end: {
          line: 259,
          column: 41
        }
      },
      "94": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "95": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 70
        }
      },
      "96": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 266,
          column: 15
        }
      },
      "97": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 49
        }
      },
      "98": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 77
        }
      },
      "99": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      },
      "100": {
        start: {
          line: 279,
          column: 4
        },
        end: {
          line: 348,
          column: 5
        }
      },
      "101": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 280,
          column: 48
        }
      },
      "102": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "103": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 286,
          column: 15
        }
      },
      "104": {
        start: {
          line: 288,
          column: 33
        },
        end: {
          line: 288,
          column: 53
        }
      },
      "105": {
        start: {
          line: 289,
          column: 19
        },
        end: {
          line: 289,
          column: 41
        }
      },
      "106": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "107": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 295,
          column: 15
        }
      },
      "108": {
        start: {
          line: 297,
          column: 25
        },
        end: {
          line: 297,
          column: 59
        }
      },
      "109": {
        start: {
          line: 299,
          column: 60
        },
        end: {
          line: 299,
          column: 143
        }
      },
      "110": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "111": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 305,
          column: 15
        }
      },
      "112": {
        start: {
          line: 308,
          column: 59
        },
        end: {
          line: 308,
          column: 154
        }
      },
      "113": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "114": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 76
        }
      },
      "115": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 315,
          column: 15
        }
      },
      "116": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "117": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 322,
          column: 15
        }
      },
      "118": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 327,
          column: 31
        }
      },
      "119": {
        start: {
          line: 329,
          column: 39
        },
        end: {
          line: 329,
          column: 101
        }
      },
      "120": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "121": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 68
        }
      },
      "122": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "123": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 11
        }
      },
      "124": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 78
        }
      },
      "125": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 347,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 17
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "validateAdmin",
        decl: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 28
          }
        },
        loc: {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 36
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 76,
            column: 15
          },
          end: {
            line: 76,
            column: 18
          }
        },
        loc: {
          start: {
            line: 76,
            column: 28
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 76
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 118,
            column: 46
          },
          end: {
            line: 118,
            column: 47
          }
        },
        loc: {
          start: {
            line: 118,
            column: 57
          },
          end: {
            line: 132,
            column: 13
          }
        },
        line: 118
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 128,
            column: 66
          },
          end: {
            line: 128,
            column: 67
          }
        },
        loc: {
          start: {
            line: 128,
            column: 71
          },
          end: {
            line: 128,
            column: 92
          }
        },
        line: 128
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 129,
            column: 62
          },
          end: {
            line: 129,
            column: 63
          }
        },
        loc: {
          start: {
            line: 129,
            column: 72
          },
          end: {
            line: 129,
            column: 131
          }
        },
        line: 129
      },
      "11": {
        name: "POST",
        decl: {
          start: {
            line: 143,
            column: 15
          },
          end: {
            line: 143,
            column: 19
          }
        },
        loc: {
          start: {
            line: 143,
            column: 29
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 143
      },
      "12": {
        name: "PATCH",
        decl: {
          start: {
            line: 215,
            column: 15
          },
          end: {
            line: 215,
            column: 20
          }
        },
        loc: {
          start: {
            line: 215,
            column: 30
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 215
      },
      "13": {
        name: "DELETE",
        decl: {
          start: {
            line: 278,
            column: 15
          },
          end: {
            line: 278,
            column: 21
          }
        },
        loc: {
          start: {
            line: 278,
            column: 31
          },
          end: {
            line: 349,
            column: 1
          }
        },
        line: 278
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 20
          }
        }, {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 39,
            column: 37
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 21
          }
        }, {
          start: {
            line: 48,
            column: 25
          },
          end: {
            line: 48,
            column: 37
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "5": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 21
          }
        }, {
          start: {
            line: 56,
            column: 25
          },
          end: {
            line: 56,
            column: 34
          }
        }, {
          start: {
            line: 56,
            column: 38
          },
          end: {
            line: 56,
            column: 68
          }
        }],
        line: 56
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 92,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 92,
            column: 56
          }
        }, {
          start: {
            line: 92,
            column: 60
          },
          end: {
            line: 92,
            column: 64
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 58
          }
        }, {
          start: {
            line: 93,
            column: 62
          },
          end: {
            line: 93,
            column: 65
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "10": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "13": {
        loc: {
          start: {
            line: 118,
            column: 33
          },
          end: {
            line: 132,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 33
          },
          end: {
            line: 132,
            column: 15
          }
        }, {
          start: {
            line: 132,
            column: 19
          },
          end: {
            line: 132,
            column: 21
          }
        }],
        line: 118
      },
      "14": {
        loc: {
          start: {
            line: 124,
            column: 31
          },
          end: {
            line: 124,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 31
          },
          end: {
            line: 124,
            column: 52
          }
        }, {
          start: {
            line: 124,
            column: 56
          },
          end: {
            line: 124,
            column: 61
          }
        }],
        line: 124
      },
      "15": {
        loc: {
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 57
          }
        }, {
          start: {
            line: 127,
            column: 61
          },
          end: {
            line: 127,
            column: 65
          }
        }],
        line: 127
      },
      "16": {
        loc: {
          start: {
            line: 128,
            column: 37
          },
          end: {
            line: 128,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 37
          },
          end: {
            line: 128,
            column: 100
          }
        }, {
          start: {
            line: 128,
            column: 104
          },
          end: {
            line: 128,
            column: 105
          }
        }],
        line: 128
      },
      "17": {
        loc: {
          start: {
            line: 129,
            column: 33
          },
          end: {
            line: 129,
            column: 140
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 33
          },
          end: {
            line: 129,
            column: 135
          }
        }, {
          start: {
            line: 129,
            column: 139
          },
          end: {
            line: 129,
            column: 140
          }
        }],
        line: 129
      },
      "18": {
        loc: {
          start: {
            line: 129,
            column: 79
          },
          end: {
            line: 129,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 108
          },
          end: {
            line: 129,
            column: 126
          }
        }, {
          start: {
            line: 129,
            column: 129
          },
          end: {
            line: 129,
            column: 130
          }
        }],
        line: 129
      },
      "19": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "20": {
        loc: {
          start: {
            line: 154,
            column: 65
          },
          end: {
            line: 154,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 154,
            column: 74
          },
          end: {
            line: 154,
            column: 85
          }
        }],
        line: 154
      },
      "21": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "22": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 156,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 156,
            column: 17
          }
        }, {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 156,
            column: 27
          }
        }, {
          start: {
            line: 156,
            column: 31
          },
          end: {
            line: 156,
            column: 44
          }
        }, {
          start: {
            line: 156,
            column: 48
          },
          end: {
            line: 156,
            column: 62
          }
        }],
        line: 156
      },
      "23": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "24": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 44
          }
        }, {
          start: {
            line: 163,
            column: 48
          },
          end: {
            line: 163,
            column: 65
          }
        }],
        line: 163
      },
      "25": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "26": {
        loc: {
          start: {
            line: 184,
            column: 19
          },
          end: {
            line: 184,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 19
          },
          end: {
            line: 184,
            column: 24
          }
        }, {
          start: {
            line: 184,
            column: 28
          },
          end: {
            line: 184,
            column: 32
          }
        }],
        line: 184
      },
      "27": {
        loc: {
          start: {
            line: 188,
            column: 30
          },
          end: {
            line: 188,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 30
          },
          end: {
            line: 188,
            column: 46
          }
        }, {
          start: {
            line: 188,
            column: 50
          },
          end: {
            line: 188,
            column: 54
          }
        }],
        line: 188
      },
      "28": {
        loc: {
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 190,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 190,
            column: 42
          }
        }, {
          start: {
            line: 190,
            column: 46
          },
          end: {
            line: 190,
            column: 50
          }
        }],
        line: 190
      },
      "29": {
        loc: {
          start: {
            line: 191,
            column: 23
          },
          end: {
            line: 191,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 23
          },
          end: {
            line: 191,
            column: 32
          }
        }, {
          start: {
            line: 191,
            column: 36
          },
          end: {
            line: 191,
            column: 74
          }
        }],
        line: 191
      },
      "30": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "31": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "32": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "33": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "34": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 22
          }
        }, {
          start: {
            line: 237,
            column: 26
          },
          end: {
            line: 237,
            column: 41
          }
        }],
        line: 237
      },
      "35": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "36": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "37": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "38": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "39": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "40": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "41": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 22
          }
        }, {
          start: {
            line: 300,
            column: 26
          },
          end: {
            line: 300,
            column: 41
          }
        }],
        line: 300
      },
      "42": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "43": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "44": {
        loc: {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 317,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 317,
            column: 24
          }
        }, {
          start: {
            line: 317,
            column: 28
          },
          end: {
            line: 317,
            column: 51
          }
        }],
        line: 317
      },
      "45": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\drivers\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: GESTI\xD3N DE DRIVERS/CONDUCTORES\r\n// Ruta: /api/admin/logistics/drivers\r\n// Descripci\xF3n: CRUD para conductores de la flota propia\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient, createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n// =====================================================\r\n// INTERFACES\r\n// =====================================================\r\n\r\ninterface Driver {\r\n  id?: string;\r\n  name: string;\r\n  phone: string;\r\n  email?: string;\r\n  vehicle_type: string;\r\n  license_plate: string;\r\n  status: 'available' | 'busy' | 'offline';\r\n  current_location?: { lat: number; lng: number };\r\n  max_capacity: number;\r\n  license_number?: string;\r\n  hire_date?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// =====================================================\r\n// VALIDACI\xD3N DE ADMIN\r\n// =====================================================\r\n\r\nasync function validateAdmin() {\r\n  try {\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user) {\r\n      return { error: 'No autenticado', status: 401 };\r\n    }\r\n\r\n    const supabase = createAdminClient();\r\n\r\n    // Verificar si el usuario es admin\r\n    const { data: userProfile, error: userError } = await supabase\r\n      .from('user_profiles')\r\n      .select('email, role_id')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (userError || !userProfile) {\r\n      return { error: 'Usuario no encontrado', status: 404 };\r\n    }\r\n\r\n    // Obtener el rol del usuario\r\n    const { data: roleData, error: roleError } = await supabase\r\n      .from('user_roles')\r\n      .select('role_name')\r\n      .eq('id', userProfile.role_id)\r\n      .single();\r\n\r\n    if (roleError || !roleData || roleData.role_name !== 'admin') {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { success: true, userId: session.user.id, email: userProfile.email, supabase };\r\n  } catch (error) {\r\n    console.error('Error en validaci\xF3n de admin:', error);\r\n    return { error: 'Error interno del servidor', status: 500 };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER DRIVERS\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const supabase = validation.supabase;\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Par\xE1metros de consulta\r\n    const status = searchParams.get('status');\r\n    const vehicleType = searchParams.get('vehicle_type');\r\n    const available = searchParams.get('available') === 'true';\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n\r\n    // Construir consulta\r\n    let query = supabase\r\n      .from('drivers')\r\n      .select('*')\r\n      .order('first_name', { ascending: true })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    if (vehicleType) {\r\n      query = query.eq('vehicle_type', vehicleType);\r\n    }\r\n\r\n    if (available) {\r\n      query = query.eq('status', 'available');\r\n    }\r\n\r\n    const { data: drivers, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error al obtener drivers:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener drivers' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Procesar datos para incluir estad\xEDsticas y transformar estructura\r\n    const processedDrivers = drivers?.map(driver => ({\r\n      id: driver.id,\r\n      name: `${driver.first_name} ${driver.last_name}`,\r\n      phone: driver.phone,\r\n      email: driver.email,\r\n      vehicle_type: 'Veh\xEDculo', // Campo gen\xE9rico\r\n      license_plate: driver.driver_license || 'N/A',\r\n      status: driver.status,\r\n      max_capacity: 50, // Valor por defecto\r\n      current_location: driver.current_location || null,\r\n      active_routes_count: driver.active_routes?.filter((r: any) => r.status === 'active').length || 0,\r\n      total_shipments: driver.active_routes?.reduce((sum: number, r: any) =>\r\n        sum + (Array.isArray(r.shipments) ? r.shipments.length : 0), 0) || 0,\r\n      created_at: driver.created_at,\r\n      updated_at: driver.updated_at\r\n    })) || [];\r\n\r\n    return NextResponse.json(processedDrivers);\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET /api/admin/logistics/drivers:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: CREAR NUEVO DRIVER\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const {\r\n      name,\r\n      phone,\r\n      email,\r\n      vehicle_type,\r\n      license_plate,\r\n      status = 'available',\r\n      current_location,\r\n      max_capacity,\r\n      license_number,\r\n      hire_date\r\n    }: Driver = body;\r\n\r\n    // Validaciones\r\n    if (!name || !phone || !vehicle_type || !license_plate) {\r\n      return NextResponse.json(\r\n        { error: 'Campos requeridos: name, phone, vehicle_type, license_plate' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (typeof max_capacity !== 'number' || max_capacity <= 0) {\r\n      return NextResponse.json(\r\n        { error: 'max_capacity debe ser un n\xFAmero positivo' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que la placa no est\xE9 duplicada\r\n    const { data: existingDriver, error: checkError } = await supabase\r\n      .from('logistics_drivers')\r\n      .select('id')\r\n      .eq('license_plate', license_plate)\r\n      .single();\r\n\r\n    if (existingDriver) {\r\n      return NextResponse.json(\r\n        { error: 'Ya existe un conductor con esa placa' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear el driver\r\n    const { data: driver, error: createError } = await supabase\r\n      .from('logistics_drivers')\r\n      .insert({\r\n        name,\r\n        phone,\r\n        email: email || null,\r\n        vehicle_type,\r\n        license_plate,\r\n        status,\r\n        current_location: current_location || null,\r\n        max_capacity,\r\n        license_number: license_number || null,\r\n        hire_date: hire_date || new Date().toISOString().split('T')[0],\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (createError) {\r\n      console.error('Error al crear driver:', createError);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear driver' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(driver, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error en POST /api/admin/logistics/drivers:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PATCH: ACTUALIZAR DRIVER\r\n// =====================================================\r\n\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { id, ...updates } = body;\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de driver requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que el driver existe\r\n    const { data: existingDriver, error: checkError } = await supabase\r\n      .from('logistics_drivers')\r\n      .select('id')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (checkError || !existingDriver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Si se actualiza la placa, verificar que no est\xE9 duplicada\r\n    if (updates.license_plate) {\r\n      const { data: duplicateDriver } = await supabase\r\n        .from('logistics_drivers')\r\n        .select('id')\r\n        .eq('license_plate', updates.license_plate)\r\n        .neq('id', id)\r\n        .single();\r\n\r\n      if (duplicateDriver) {\r\n        return NextResponse.json(\r\n          { error: 'Ya existe un conductor con esa placa' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Actualizar el driver\r\n    const { data: driver, error: updateError } = await supabase\r\n      .from('logistics_drivers')\r\n      .update({\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error al actualizar driver:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar driver' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(driver);\r\n\r\n  } catch (error) {\r\n    console.error('Error en PATCH /api/admin/logistics/drivers:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// DELETE: ELIMINAR DRIVER\r\n// =====================================================\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get('id');\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de driver requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que el driver existe\r\n    const { data: existingDriver, error: checkError } = await supabase\r\n      .from('logistics_drivers')\r\n      .select('id, status')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (checkError || !existingDriver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que no tenga rutas activas\r\n    const { data: activeRoutes, error: routesError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('id')\r\n      .eq('driver_id', id)\r\n      .eq('status', 'active');\r\n\r\n    if (routesError) {\r\n      console.error('Error al verificar rutas activas:', routesError);\r\n      return NextResponse.json(\r\n        { error: 'Error al verificar rutas activas' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (activeRoutes && activeRoutes.length > 0) {\r\n      return NextResponse.json(\r\n        { error: 'No se puede eliminar un conductor con rutas activas' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Limpiar driver_id de rutas planificadas\r\n    await supabase\r\n      .from('optimized_routes')\r\n      .update({ driver_id: null })\r\n      .eq('driver_id', id);\r\n\r\n    // Eliminar el driver\r\n    const { error: deleteError } = await supabase\r\n      .from('logistics_drivers')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (deleteError) {\r\n      console.error('Error al eliminar driver:', deleteError);\r\n      return NextResponse.json(\r\n        { error: 'Error al eliminar driver' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/admin/logistics/drivers:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "PATCH", "POST", "runtime", "validateAdmin", "session", "auth", "user", "error", "status", "supabase", "createAdminClient", "data", "userProfile", "userError", "from", "select", "eq", "email", "single", "roleData", "roleError", "role_id", "role_name", "success", "userId", "id", "console", "request", "validation", "NextResponse", "json", "searchParams", "URL", "url", "get", "vehicleType", "available", "limit", "parseInt", "offset", "query", "order", "ascending", "range", "drivers", "processedDrivers", "map", "driver", "name", "first_name", "last_name", "phone", "vehicle_type", "license_plate", "driver_license", "max_capacity", "current_location", "active_routes_count", "active_routes", "filter", "r", "length", "total_shipments", "reduce", "sum", "Array", "isArray", "shipments", "created_at", "updated_at", "body", "license_number", "hire_date", "createClient", "existingDriver", "checkError", "createError", "insert", "Date", "toISOString", "split", "updates", "duplicateDriver", "neq", "updateError", "update", "activeRoutes", "routesError", "driver_id", "deleteError", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7dd467826ba372d433b34a8eae11a1800d02557f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ktokdnsgm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ktokdnsgm();
cov_1ktokdnsgm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1ktokdnsgm().f[0]++;
  cov_1ktokdnsgm().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1ktokdnsgm().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1ktokdnsgm().f[1]++;
    cov_1ktokdnsgm().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1ktokdnsgm().f[2]++;
    cov_1ktokdnsgm().s[5]++;
    return GET;
  },
  get PATCH() {
    /* istanbul ignore next */
    cov_1ktokdnsgm().f[3]++;
    cov_1ktokdnsgm().s[6]++;
    return PATCH;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1ktokdnsgm().f[4]++;
    cov_1ktokdnsgm().s[7]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1ktokdnsgm().f[5]++;
    cov_1ktokdnsgm().s[8]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1ktokdnsgm().s[9]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1ktokdnsgm().s[10]++, require("../../../../../lib/integrations/supabase/server"));
const _config =
/* istanbul ignore next */
(cov_1ktokdnsgm().s[11]++, require("../../../../../lib/auth/config"));
const runtime =
/* istanbul ignore next */
(cov_1ktokdnsgm().s[12]++, 'nodejs');
// =====================================================
// VALIDACIÃN DE ADMIN
// =====================================================
async function validateAdmin() {
  /* istanbul ignore next */
  cov_1ktokdnsgm().f[6]++;
  cov_1ktokdnsgm().s[13]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[14]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[1][0]++, !session) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[1][1]++, !session.user)) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[0][0]++;
      cov_1ktokdnsgm().s[16]++;
      return {
        error: 'No autenticado',
        status: 401
      };
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[0][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[17]++, (0, _server1.createAdminClient)());
    // Verificar si el usuario es admin
    const {
      data: userProfile,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[18]++, await supabase.from('user_profiles').select('email, role_id').eq('email', session.user.email).single());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[3][0]++, userError) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[3][1]++, !userProfile)) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[2][0]++;
      cov_1ktokdnsgm().s[20]++;
      return {
        error: 'Usuario no encontrado',
        status: 404
      };
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[2][1]++;
    }
    // Obtener el rol del usuario
    const {
      data: roleData,
      error: roleError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[21]++, await supabase.from('user_roles').select('role_name').eq('id', userProfile.role_id).single());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[5][0]++, roleError) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[5][1]++, !roleData) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[5][2]++, roleData.role_name !== 'admin')) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[4][0]++;
      cov_1ktokdnsgm().s[23]++;
      return {
        error: 'Acceso denegado - Se requieren permisos de administrador',
        status: 403
      };
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[4][1]++;
    }
    cov_1ktokdnsgm().s[24]++;
    return {
      success: true,
      userId: session.user.id,
      email: userProfile.email,
      supabase
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[25]++;
    console.error('Error en validaciÃ³n de admin:', error);
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[26]++;
    return {
      error: 'Error interno del servidor',
      status: 500
    };
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_1ktokdnsgm().f[7]++;
  cov_1ktokdnsgm().s[27]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[28]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[29]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[6][0]++;
      cov_1ktokdnsgm().s[30]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[6][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[31]++, validation.supabase);
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[32]++, new URL(request.url));
    // ParÃ¡metros de consulta
    const status =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[33]++, searchParams.get('status'));
    const vehicleType =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[34]++, searchParams.get('vehicle_type'));
    const available =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[35]++, searchParams.get('available') === 'true');
    const limit =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[36]++, parseInt(
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[7][0]++, searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[7][1]++, '50')));
    const offset =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[37]++, parseInt(
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[8][0]++, searchParams.get('offset')) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[8][1]++, '0')));
    // Construir consulta
    let query =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[38]++, supabase.from('drivers').select('*').order('first_name', {
      ascending: true
    }).range(offset, offset + limit - 1));
    // Aplicar filtros
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[39]++;
    if (status) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[9][0]++;
      cov_1ktokdnsgm().s[40]++;
      query = query.eq('status', status);
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[9][1]++;
    }
    cov_1ktokdnsgm().s[41]++;
    if (vehicleType) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[10][0]++;
      cov_1ktokdnsgm().s[42]++;
      query = query.eq('vehicle_type', vehicleType);
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[10][1]++;
    }
    cov_1ktokdnsgm().s[43]++;
    if (available) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[11][0]++;
      cov_1ktokdnsgm().s[44]++;
      query = query.eq('status', 'available');
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[11][1]++;
    }
    const {
      data: drivers,
      error
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[45]++, await query);
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[46]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[12][0]++;
      cov_1ktokdnsgm().s[47]++;
      console.error('Error al obtener drivers:', error);
      /* istanbul ignore next */
      cov_1ktokdnsgm().s[48]++;
      return _server.NextResponse.json({
        error: 'Error al obtener drivers'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[12][1]++;
    }
    // Procesar datos para incluir estadÃ­sticas y transformar estructura
    const processedDrivers =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[49]++,
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[13][0]++, drivers?.map(driver => {
      /* istanbul ignore next */
      cov_1ktokdnsgm().f[8]++;
      cov_1ktokdnsgm().s[50]++;
      return {
        id: driver.id,
        name: `${driver.first_name} ${driver.last_name}`,
        phone: driver.phone,
        email: driver.email,
        vehicle_type: 'VehÃ­culo',
        license_plate:
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[14][0]++, driver.driver_license) ||
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[14][1]++, 'N/A'),
        status: driver.status,
        max_capacity: 50,
        current_location:
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[15][0]++, driver.current_location) ||
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[15][1]++, null),
        active_routes_count:
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[16][0]++, driver.active_routes?.filter(r => {
          /* istanbul ignore next */
          cov_1ktokdnsgm().f[9]++;
          cov_1ktokdnsgm().s[51]++;
          return r.status === 'active';
        }).length) ||
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[16][1]++, 0),
        total_shipments:
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[17][0]++, driver.active_routes?.reduce((sum, r) => {
          /* istanbul ignore next */
          cov_1ktokdnsgm().f[10]++;
          cov_1ktokdnsgm().s[52]++;
          return sum + (Array.isArray(r.shipments) ?
          /* istanbul ignore next */
          (cov_1ktokdnsgm().b[18][0]++, r.shipments.length) :
          /* istanbul ignore next */
          (cov_1ktokdnsgm().b[18][1]++, 0));
        }, 0)) ||
        /* istanbul ignore next */
        (cov_1ktokdnsgm().b[17][1]++, 0),
        created_at: driver.created_at,
        updated_at: driver.updated_at
      };
    })) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[13][1]++, []));
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[53]++;
    return _server.NextResponse.json(processedDrivers);
  } catch (error) {
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[54]++;
    console.error('Error en GET /api/admin/logistics/drivers:', error);
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[55]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1ktokdnsgm().f[11]++;
  cov_1ktokdnsgm().s[56]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[57]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[58]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[19][0]++;
      cov_1ktokdnsgm().s[59]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[19][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[60]++, await request.json());
    const {
      name,
      phone,
      email,
      vehicle_type,
      license_plate,
      status =
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[20][0]++, 'available'),
      current_location,
      max_capacity,
      license_number,
      hire_date
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[61]++, body);
    // Validaciones
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[22][0]++, !name) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[22][1]++, !phone) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[22][2]++, !vehicle_type) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[22][3]++, !license_plate)) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[21][0]++;
      cov_1ktokdnsgm().s[63]++;
      return _server.NextResponse.json({
        error: 'Campos requeridos: name, phone, vehicle_type, license_plate'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[21][1]++;
    }
    cov_1ktokdnsgm().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[24][0]++, typeof max_capacity !== 'number') ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[24][1]++, max_capacity <= 0)) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[23][0]++;
      cov_1ktokdnsgm().s[65]++;
      return _server.NextResponse.json({
        error: 'max_capacity debe ser un nÃºmero positivo'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[23][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[66]++, await (0, _server1.createClient)());
    // Verificar que la placa no estÃ© duplicada
    const {
      data: existingDriver,
      error: checkError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[67]++, await supabase.from('logistics_drivers').select('id').eq('license_plate', license_plate).single());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[68]++;
    if (existingDriver) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[25][0]++;
      cov_1ktokdnsgm().s[69]++;
      return _server.NextResponse.json({
        error: 'Ya existe un conductor con esa placa'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[25][1]++;
    }
    // Crear el driver
    const {
      data: driver,
      error: createError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[70]++, await supabase.from('logistics_drivers').insert({
      name,
      phone,
      email:
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[26][0]++, email) ||
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[26][1]++, null),
      vehicle_type,
      license_plate,
      status,
      current_location:
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[27][0]++, current_location) ||
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[27][1]++, null),
      max_capacity,
      license_number:
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[28][0]++, license_number) ||
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[28][1]++, null),
      hire_date:
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[29][0]++, hire_date) ||
      /* istanbul ignore next */
      (cov_1ktokdnsgm().b[29][1]++, new Date().toISOString().split('T')[0]),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[71]++;
    if (createError) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[30][0]++;
      cov_1ktokdnsgm().s[72]++;
      console.error('Error al crear driver:', createError);
      /* istanbul ignore next */
      cov_1ktokdnsgm().s[73]++;
      return _server.NextResponse.json({
        error: 'Error al crear driver'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[30][1]++;
    }
    cov_1ktokdnsgm().s[74]++;
    return _server.NextResponse.json(driver, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[75]++;
    console.error('Error en POST /api/admin/logistics/drivers:', error);
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[76]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_1ktokdnsgm().f[12]++;
  cov_1ktokdnsgm().s[77]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[78]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[79]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[31][0]++;
      cov_1ktokdnsgm().s[80]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[31][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[81]++, await request.json());
    const {
      id,
      ...updates
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[82]++, body);
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[83]++;
    if (!id) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[32][0]++;
      cov_1ktokdnsgm().s[84]++;
      return _server.NextResponse.json({
        error: 'ID de driver requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[32][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[85]++, await (0, _server1.createClient)());
    // Verificar que el driver existe
    const {
      data: existingDriver,
      error: checkError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[86]++, await supabase.from('logistics_drivers').select('id').eq('id', id).single());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[34][0]++, checkError) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[34][1]++, !existingDriver)) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[33][0]++;
      cov_1ktokdnsgm().s[88]++;
      return _server.NextResponse.json({
        error: 'Driver no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[33][1]++;
    }
    // Si se actualiza la placa, verificar que no estÃ© duplicada
    cov_1ktokdnsgm().s[89]++;
    if (updates.license_plate) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[35][0]++;
      const {
        data: duplicateDriver
      } =
      /* istanbul ignore next */
      (cov_1ktokdnsgm().s[90]++, await supabase.from('logistics_drivers').select('id').eq('license_plate', updates.license_plate).neq('id', id).single());
      /* istanbul ignore next */
      cov_1ktokdnsgm().s[91]++;
      if (duplicateDriver) {
        /* istanbul ignore next */
        cov_1ktokdnsgm().b[36][0]++;
        cov_1ktokdnsgm().s[92]++;
        return _server.NextResponse.json({
          error: 'Ya existe un conductor con esa placa'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ktokdnsgm().b[36][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[35][1]++;
    }
    // Actualizar el driver
    const {
      data: driver,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[93]++, await supabase.from('logistics_drivers').update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq('id', id).select().single());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[94]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[37][0]++;
      cov_1ktokdnsgm().s[95]++;
      console.error('Error al actualizar driver:', updateError);
      /* istanbul ignore next */
      cov_1ktokdnsgm().s[96]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar driver'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[37][1]++;
    }
    cov_1ktokdnsgm().s[97]++;
    return _server.NextResponse.json(driver);
  } catch (error) {
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[98]++;
    console.error('Error en PATCH /api/admin/logistics/drivers:', error);
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[99]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1ktokdnsgm().f[13]++;
  cov_1ktokdnsgm().s[100]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[101]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[102]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[38][0]++;
      cov_1ktokdnsgm().s[103]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[38][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[104]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[105]++, searchParams.get('id'));
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[106]++;
    if (!id) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[39][0]++;
      cov_1ktokdnsgm().s[107]++;
      return _server.NextResponse.json({
        error: 'ID de driver requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[39][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[108]++, await (0, _server1.createClient)());
    // Verificar que el driver existe
    const {
      data: existingDriver,
      error: checkError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[109]++, await supabase.from('logistics_drivers').select('id, status').eq('id', id).single());
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[110]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[41][0]++, checkError) ||
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[41][1]++, !existingDriver)) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[40][0]++;
      cov_1ktokdnsgm().s[111]++;
      return _server.NextResponse.json({
        error: 'Driver no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[40][1]++;
    }
    // Verificar que no tenga rutas activas
    const {
      data: activeRoutes,
      error: routesError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[112]++, await supabase.from('optimized_routes').select('id').eq('driver_id', id).eq('status', 'active'));
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[113]++;
    if (routesError) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[42][0]++;
      cov_1ktokdnsgm().s[114]++;
      console.error('Error al verificar rutas activas:', routesError);
      /* istanbul ignore next */
      cov_1ktokdnsgm().s[115]++;
      return _server.NextResponse.json({
        error: 'Error al verificar rutas activas'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[42][1]++;
    }
    cov_1ktokdnsgm().s[116]++;
    if (
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[44][0]++, activeRoutes) &&
    /* istanbul ignore next */
    (cov_1ktokdnsgm().b[44][1]++, activeRoutes.length > 0)) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[43][0]++;
      cov_1ktokdnsgm().s[117]++;
      return _server.NextResponse.json({
        error: 'No se puede eliminar un conductor con rutas activas'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[43][1]++;
    }
    // Limpiar driver_id de rutas planificadas
    cov_1ktokdnsgm().s[118]++;
    await supabase.from('optimized_routes').update({
      driver_id: null
    }).eq('driver_id', id);
    // Eliminar el driver
    const {
      error: deleteError
    } =
    /* istanbul ignore next */
    (cov_1ktokdnsgm().s[119]++, await supabase.from('logistics_drivers').delete().eq('id', id));
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[120]++;
    if (deleteError) {
      /* istanbul ignore next */
      cov_1ktokdnsgm().b[45][0]++;
      cov_1ktokdnsgm().s[121]++;
      console.error('Error al eliminar driver:', deleteError);
      /* istanbul ignore next */
      cov_1ktokdnsgm().s[122]++;
      return _server.NextResponse.json({
        error: 'Error al eliminar driver'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktokdnsgm().b[45][1]++;
    }
    cov_1ktokdnsgm().s[123]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[124]++;
    console.error('Error en DELETE /api/admin/logistics/drivers:', error);
    /* istanbul ignore next */
    cov_1ktokdnsgm().s[125]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,