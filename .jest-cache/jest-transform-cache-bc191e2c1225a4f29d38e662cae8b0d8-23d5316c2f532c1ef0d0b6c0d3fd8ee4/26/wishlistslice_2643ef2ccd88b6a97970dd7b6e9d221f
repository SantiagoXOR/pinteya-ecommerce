a15aa4a919e996b1ea27559c697bd1ee
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get addItemToWishlist () {
        return addItemToWishlist;
    },
    get default () {
        return _default;
    },
    get removeAllItemsFromWishlist () {
        return removeAllItemsFromWishlist;
    },
    get removeItemFromWishlist () {
        return removeItemFromWishlist;
    },
    get wishlist () {
        return wishlist;
    }
});
const _toolkit = require("@reduxjs/toolkit");
const initialState = {
    items: []
};
const wishlist = (0, _toolkit.createSlice)({
    name: "wishlist",
    initialState,
    reducers: {
        addItemToWishlist: (state, action)=>{
            const { id, title, price, quantity, imgs, discountedPrice, status } = action.payload;
            const existingItem = state.items.find((item)=>item.id === id);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                state.items.push({
                    id,
                    title,
                    price,
                    quantity,
                    imgs,
                    discountedPrice,
                    status
                });
            }
        },
        removeItemFromWishlist: (state, action)=>{
            const itemId = action.payload;
            state.items = state.items.filter((item)=>item.id !== itemId);
        },
        removeAllItemsFromWishlist: (state)=>{
            state.items = [];
        }
    }
});
const { addItemToWishlist, removeItemFromWishlist, removeAllItemsFromWishlist } = wishlist.actions;
const _default = wishlist.reducer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xccmVkdXhcXGZlYXR1cmVzXFx3aXNobGlzdC1zbGljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTbGljZSwgUGF5bG9hZEFjdGlvbiB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcblxyXG50eXBlIEluaXRpYWxTdGF0ZSA9IHtcclxuICBpdGVtczogV2lzaExpc3RJdGVtW107XHJcbn07XHJcblxyXG50eXBlIFdpc2hMaXN0SXRlbSA9IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgcHJpY2U6IG51bWJlcjtcclxuICBkaXNjb3VudGVkUHJpY2U6IG51bWJlcjtcclxuICBxdWFudGl0eTogbnVtYmVyO1xyXG4gIHN0YXR1cz86IHN0cmluZztcclxuICBpbWdzPzoge1xyXG4gICAgdGh1bWJuYWlsczogc3RyaW5nW107XHJcbiAgICBwcmV2aWV3czogc3RyaW5nW107XHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZTogSW5pdGlhbFN0YXRlID0ge1xyXG4gIGl0ZW1zOiBbXSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB3aXNobGlzdCA9IGNyZWF0ZVNsaWNlKHtcclxuICBuYW1lOiBcIndpc2hsaXN0XCIsXHJcbiAgaW5pdGlhbFN0YXRlLFxyXG4gIHJlZHVjZXJzOiB7XHJcbiAgICBhZGRJdGVtVG9XaXNobGlzdDogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248V2lzaExpc3RJdGVtPikgPT4ge1xyXG4gICAgICBjb25zdCB7IGlkLCB0aXRsZSwgcHJpY2UsIHF1YW50aXR5LCBpbWdzLCBkaXNjb3VudGVkUHJpY2UsIHN0YXR1cyB9ID1cclxuICAgICAgICBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gc3RhdGUuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG5cclxuICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xyXG4gICAgICAgIGV4aXN0aW5nSXRlbS5xdWFudGl0eSArPSBxdWFudGl0eTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZS5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICBwcmljZSxcclxuICAgICAgICAgIHF1YW50aXR5LFxyXG4gICAgICAgICAgaW1ncyxcclxuICAgICAgICAgIGRpc2NvdW50ZWRQcmljZSxcclxuICAgICAgICAgIHN0YXR1cyxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlbW92ZUl0ZW1Gcm9tV2lzaGxpc3Q6IChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPG51bWJlcj4pID0+IHtcclxuICAgICAgY29uc3QgaXRlbUlkID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgIHN0YXRlLml0ZW1zID0gc3RhdGUuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmlkICE9PSBpdGVtSWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICByZW1vdmVBbGxJdGVtc0Zyb21XaXNobGlzdDogKHN0YXRlKSA9PiB7XHJcbiAgICAgIHN0YXRlLml0ZW1zID0gW107XHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHtcclxuICBhZGRJdGVtVG9XaXNobGlzdCxcclxuICByZW1vdmVJdGVtRnJvbVdpc2hsaXN0LFxyXG4gIHJlbW92ZUFsbEl0ZW1zRnJvbVdpc2hsaXN0LFxyXG59ID0gd2lzaGxpc3QuYWN0aW9ucztcclxuZXhwb3J0IGRlZmF1bHQgd2lzaGxpc3QucmVkdWNlcjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImFkZEl0ZW1Ub1dpc2hsaXN0IiwicmVtb3ZlQWxsSXRlbXNGcm9tV2lzaGxpc3QiLCJyZW1vdmVJdGVtRnJvbVdpc2hsaXN0Iiwid2lzaGxpc3QiLCJpbml0aWFsU3RhdGUiLCJpdGVtcyIsImNyZWF0ZVNsaWNlIiwibmFtZSIsInJlZHVjZXJzIiwic3RhdGUiLCJhY3Rpb24iLCJpZCIsInRpdGxlIiwicHJpY2UiLCJxdWFudGl0eSIsImltZ3MiLCJkaXNjb3VudGVkUHJpY2UiLCJzdGF0dXMiLCJwYXlsb2FkIiwiZXhpc3RpbmdJdGVtIiwiZmluZCIsIml0ZW0iLCJwdXNoIiwiaXRlbUlkIiwiZmlsdGVyIiwiYWN0aW9ucyIsInJlZHVjZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1FBMERFQTtlQUFBQTs7UUFJRjtlQUFBOztRQUZFQztlQUFBQTs7UUFEQUM7ZUFBQUE7O1FBcENXQztlQUFBQTs7O3lCQXZCOEI7QUFtQjNDLE1BQU1DLGVBQTZCO0lBQ2pDQyxPQUFPLEVBQUU7QUFDWDtBQUVPLE1BQU1GLFdBQVdHLElBQUFBLG9CQUFXLEVBQUM7SUFDbENDLE1BQU07SUFDTkg7SUFDQUksVUFBVTtRQUNSUixtQkFBbUIsQ0FBQ1MsT0FBT0M7WUFDekIsTUFBTSxFQUFFQyxFQUFFLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsZUFBZSxFQUFFQyxNQUFNLEVBQUUsR0FDakVQLE9BQU9RLE9BQU87WUFDaEIsTUFBTUMsZUFBZVYsTUFBTUosS0FBSyxDQUFDZSxJQUFJLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS1YsRUFBRSxLQUFLQTtZQUU1RCxJQUFJUSxjQUFjO2dCQUNoQkEsYUFBYUwsUUFBUSxJQUFJQTtZQUMzQixPQUFPO2dCQUNMTCxNQUFNSixLQUFLLENBQUNpQixJQUFJLENBQUM7b0JBQ2ZYO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO2dCQUNGO1lBQ0Y7UUFDRjtRQUNBZix3QkFBd0IsQ0FBQ08sT0FBT0M7WUFDOUIsTUFBTWEsU0FBU2IsT0FBT1EsT0FBTztZQUM3QlQsTUFBTUosS0FBSyxHQUFHSSxNQUFNSixLQUFLLENBQUNtQixNQUFNLENBQUMsQ0FBQ0gsT0FBU0EsS0FBS1YsRUFBRSxLQUFLWTtRQUN6RDtRQUVBdEIsNEJBQTRCLENBQUNRO1lBQzNCQSxNQUFNSixLQUFLLEdBQUcsRUFBRTtRQUNsQjtJQUNGO0FBQ0Y7QUFFTyxNQUFNLEVBQ1hMLGlCQUFpQixFQUNqQkUsc0JBQXNCLEVBQ3RCRCwwQkFBMEIsRUFDM0IsR0FBR0UsU0FBU3NCLE9BQU87TUFDcEIsV0FBZXRCLFNBQVN1QixPQUFPIn0=