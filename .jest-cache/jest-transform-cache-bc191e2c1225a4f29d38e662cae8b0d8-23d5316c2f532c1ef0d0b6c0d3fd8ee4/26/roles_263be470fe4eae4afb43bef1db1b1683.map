{"version":3,"names":["cov_trmbbyrn3","actualCoverage","s","ROLE_DEFINITIONS","f","ROLE_PERMISSIONS","RoleManager","canAccessAdmin","canAssignRole","hasAnyPermission","hasPermission","hasPermissions","roleManager","useRolePermissions","super_admin","admin","manager","employee","customer","name","displayName","description","permissions","isActive","getInstance","instance","b","userRole","permission","rolePermissions","includes","every","some","getRolePermissions","role","isRoleHigher","role1","role2","hierarchy","getAssignableRoles","currentUserRole","allRoles","assignerRole","targetRole","assignableRoles","getRoleDefinition","getAllRoles","Object","keys","filterByPermissions","items","filter","item","requiredPermissions","length","roleDefinition"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\roles.ts"],"sourcesContent":["'use client'\r\n\r\nexport type Permission = \r\n  | 'products:read'\r\n  | 'products:write'\r\n  | 'products:delete'\r\n  | 'orders:read'\r\n  | 'orders:write'\r\n  | 'orders:delete'\r\n  | 'users:read'\r\n  | 'users:write'\r\n  | 'users:delete'\r\n  | 'analytics:read'\r\n  | 'settings:read'\r\n  | 'settings:write'\r\n  | 'inventory:read'\r\n  | 'inventory:write'\r\n  | 'reports:read'\r\n  | 'reports:generate'\r\n  | 'notifications:send'\r\n  | 'admin:access'\r\n\r\nexport type Role = 'super_admin' | 'admin' | 'manager' | 'employee' | 'customer'\r\n\r\nexport interface UserRole {\r\n  id: string\r\n  name: Role\r\n  displayName: string\r\n  description: string\r\n  permissions: Permission[]\r\n  isActive: boolean\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface UserWithRole {\r\n  id: string\r\n  email: string\r\n  name: string\r\n  role: Role\r\n  permissions: Permission[]\r\n  isActive: boolean\r\n}\r\n\r\n// Definición de roles y sus permisos\r\nexport const ROLE_PERMISSIONS: Record<Role, Permission[]> = {\r\n  super_admin: [\r\n    'products:read', 'products:write', 'products:delete',\r\n    'orders:read', 'orders:write', 'orders:delete',\r\n    'users:read', 'users:write', 'users:delete',\r\n    'analytics:read',\r\n    'settings:read', 'settings:write',\r\n    'inventory:read', 'inventory:write',\r\n    'reports:read', 'reports:generate',\r\n    'notifications:send',\r\n    'admin:access'\r\n  ],\r\n  admin: [\r\n    'products:read', 'products:write', 'products:delete',\r\n    'orders:read', 'orders:write',\r\n    'users:read', 'users:write',\r\n    'analytics:read',\r\n    'settings:read', 'settings:write',\r\n    'inventory:read', 'inventory:write',\r\n    'reports:read', 'reports:generate',\r\n    'notifications:send',\r\n    'admin:access'\r\n  ],\r\n  manager: [\r\n    'products:read', 'products:write',\r\n    'orders:read', 'orders:write',\r\n    'users:read',\r\n    'analytics:read',\r\n    'inventory:read', 'inventory:write',\r\n    'reports:read',\r\n    'admin:access'\r\n  ],\r\n  employee: [\r\n    'products:read',\r\n    'orders:read', 'orders:write',\r\n    'inventory:read',\r\n    'admin:access'\r\n  ],\r\n  customer: []\r\n}\r\n\r\nexport const ROLE_DEFINITIONS: Record<Role, Omit<UserRole, 'id' | 'createdAt' | 'updatedAt'>> = {\r\n  super_admin: {\r\n    name: 'super_admin',\r\n    displayName: 'Super Administrador',\r\n    description: 'Acceso completo a todas las funcionalidades del sistema',\r\n    permissions: ROLE_PERMISSIONS.super_admin,\r\n    isActive: true\r\n  },\r\n  admin: {\r\n    name: 'admin',\r\n    displayName: 'Administrador',\r\n    description: 'Acceso administrativo con la mayoría de permisos',\r\n    permissions: ROLE_PERMISSIONS.admin,\r\n    isActive: true\r\n  },\r\n  manager: {\r\n    name: 'manager',\r\n    displayName: 'Gerente',\r\n    description: 'Gestión de productos, órdenes e inventario',\r\n    permissions: ROLE_PERMISSIONS.manager,\r\n    isActive: true\r\n  },\r\n  employee: {\r\n    name: 'employee',\r\n    displayName: 'Empleado',\r\n    description: 'Acceso básico para gestión de órdenes',\r\n    permissions: ROLE_PERMISSIONS.employee,\r\n    isActive: true\r\n  },\r\n  customer: {\r\n    name: 'customer',\r\n    displayName: 'Cliente',\r\n    description: 'Usuario cliente con acceso a la tienda',\r\n    permissions: ROLE_PERMISSIONS.customer,\r\n    isActive: true\r\n  }\r\n}\r\n\r\nexport class RoleManager {\r\n  private static instance: RoleManager\r\n\r\n  static getInstance(): RoleManager {\r\n    if (!RoleManager.instance) {\r\n      RoleManager.instance = new RoleManager()\r\n    }\r\n    return RoleManager.instance\r\n  }\r\n\r\n  /**\r\n   * Verifica si un usuario tiene un permiso específico\r\n   */\r\n  hasPermission(userRole: Role, permission: Permission): boolean {\r\n    const rolePermissions = ROLE_PERMISSIONS[userRole]\r\n    return rolePermissions.includes(permission)\r\n  }\r\n\r\n  /**\r\n   * Verifica si un usuario tiene múltiples permisos\r\n   */\r\n  hasPermissions(userRole: Role, permissions: Permission[]): boolean {\r\n    return permissions.every(permission => this.hasPermission(userRole, permission))\r\n  }\r\n\r\n  /**\r\n   * Verifica si un usuario tiene al menos uno de los permisos especificados\r\n   */\r\n  hasAnyPermission(userRole: Role, permissions: Permission[]): boolean {\r\n    return permissions.some(permission => this.hasPermission(userRole, permission))\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los permisos de un rol\r\n   */\r\n  getRolePermissions(role: Role): Permission[] {\r\n    return ROLE_PERMISSIONS[role] || []\r\n  }\r\n\r\n  /**\r\n   * Verifica si un rol puede acceder al panel de administración\r\n   */\r\n  canAccessAdmin(role: Role): boolean {\r\n    return this.hasPermission(role, 'admin:access')\r\n  }\r\n\r\n  /**\r\n   * Verifica si un rol es superior a otro\r\n   */\r\n  isRoleHigher(role1: Role, role2: Role): boolean {\r\n    const hierarchy: Record<Role, number> = {\r\n      customer: 0,\r\n      employee: 1,\r\n      manager: 2,\r\n      admin: 3,\r\n      super_admin: 4\r\n    }\r\n    return hierarchy[role1] > hierarchy[role2]\r\n  }\r\n\r\n  /**\r\n   * Obtiene los roles que un usuario puede asignar\r\n   */\r\n  getAssignableRoles(currentUserRole: Role): Role[] {\r\n    const allRoles: Role[] = ['customer', 'employee', 'manager', 'admin', 'super_admin']\r\n    \r\n    // Solo super_admin puede asignar cualquier rol\r\n    if (currentUserRole === 'super_admin') {\r\n      return allRoles\r\n    }\r\n    \r\n    // Admin puede asignar roles inferiores\r\n    if (currentUserRole === 'admin') {\r\n      return ['customer', 'employee', 'manager']\r\n    }\r\n    \r\n    // Manager puede asignar solo customer y employee\r\n    if (currentUserRole === 'manager') {\r\n      return ['customer', 'employee']\r\n    }\r\n    \r\n    // Otros roles no pueden asignar roles\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * Valida si una asignación de rol es válida\r\n   */\r\n  canAssignRole(assignerRole: Role, targetRole: Role): boolean {\r\n    const assignableRoles = this.getAssignableRoles(assignerRole)\r\n    return assignableRoles.includes(targetRole)\r\n  }\r\n\r\n  /**\r\n   * Obtiene la definición completa de un rol\r\n   */\r\n  getRoleDefinition(role: Role): Omit<UserRole, 'id' | 'createdAt' | 'updatedAt'> | null {\r\n    return ROLE_DEFINITIONS[role] || null\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los roles disponibles\r\n   */\r\n  getAllRoles(): Role[] {\r\n    return Object.keys(ROLE_DEFINITIONS) as Role[]\r\n  }\r\n\r\n  /**\r\n   * Filtra recursos basado en permisos\r\n   */\r\n  filterByPermissions<T extends { requiredPermissions?: Permission[] }>(\r\n    items: T[],\r\n    userRole: Role\r\n  ): T[] {\r\n    return items.filter(item => {\r\n      if (!item.requiredPermissions || item.requiredPermissions.length === 0) {\r\n        return true\r\n      }\r\n      return this.hasPermissions(userRole, item.requiredPermissions)\r\n    })\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const roleManager = RoleManager.getInstance()\r\n\r\n// Funciones de conveniencia\r\nexport const hasPermission = (userRole: Role, permission: Permission) => \r\n  roleManager.hasPermission(userRole, permission)\r\n\r\nexport const hasPermissions = (userRole: Role, permissions: Permission[]) => \r\n  roleManager.hasPermissions(userRole, permissions)\r\n\r\nexport const hasAnyPermission = (userRole: Role, permissions: Permission[]) => \r\n  roleManager.hasAnyPermission(userRole, permissions)\r\n\r\nexport const canAccessAdmin = (role: Role) => \r\n  roleManager.canAccessAdmin(role)\r\n\r\nexport const canAssignRole = (assignerRole: Role, targetRole: Role) => \r\n  roleManager.canAssignRole(assignerRole, targetRole)\r\n\r\n// Hook para usar en componentes React\r\nexport function useRolePermissions(userRole: Role) {\r\n  return {\r\n    hasPermission: (permission: Permission) => hasPermission(userRole, permission),\r\n    hasPermissions: (permissions: Permission[]) => hasPermissions(userRole, permissions),\r\n    hasAnyPermission: (permissions: Permission[]) => hasAnyPermission(userRole, permissions),\r\n    canAccessAdmin: () => canAccessAdmin(userRole),\r\n    rolePermissions: roleManager.getRolePermissions(userRole),\r\n    roleDefinition: roleManager.getRoleDefinition(userRole)\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}