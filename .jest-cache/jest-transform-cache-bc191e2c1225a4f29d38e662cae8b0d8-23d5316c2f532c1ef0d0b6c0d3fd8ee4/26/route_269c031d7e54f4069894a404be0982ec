f6bab1096b5ae33646c97e48a522a3e1
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_29r2w5zorm() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\system\\initialize-enterprise\\route.ts";
  var hash = "f1db4c7f10d53a203d6ee8c808d2f47526e1047f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\system\\initialize-enterprise\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 85
        }
      },
      "9": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 93
        }
      },
      "10": {
        start: {
          line: 26,
          column: 31
        },
        end: {
          line: 26,
          column: 97
        }
      },
      "11": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 95
        }
      },
      "12": {
        start: {
          line: 28,
          column: 36
        },
        end: {
          line: 28,
          column: 102
        }
      },
      "13": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "14": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 36,
          column: 46
        }
      },
      "15": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 72
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 48,
          column: 10
        }
      },
      "18": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 56,
          column: 10
        }
      },
      "19": {
        start: {
          line: 62,
          column: 22
        },
        end: {
          line: 62,
          column: 46
        }
      },
      "20": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "21": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 72
        }
      },
      "22": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 86
        }
      },
      "23": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "24": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 10
        }
      },
      "25": {
        start: {
          line: 91,
          column: 22
        },
        end: {
          line: 91,
          column: 46
        }
      },
      "26": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "27": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 82
        }
      },
      "28": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 95
        }
      },
      "29": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 95,
          column: 93
        }
      },
      "30": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 108,
          column: 10
        }
      },
      "31": {
        start: {
          line: 103,
          column: 51
        },
        end: {
          line: 103,
          column: 60
        }
      },
      "32": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "33": {
        start: {
          line: 122,
          column: 22
        },
        end: {
          line: 122,
          column: 46
        }
      },
      "34": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "35": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 135,
          column: 10
        }
      },
      "36": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "37": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 193,
          column: 5
        }
      },
      "38": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "39": {
        start: {
          line: 156,
          column: 24
        },
        end: {
          line: 156,
          column: 26
        }
      },
      "40": {
        start: {
          line: 157,
          column: 21
        },
        end: {
          line: 157,
          column: 22
        }
      },
      "41": {
        start: {
          line: 158,
          column: 21
        },
        end: {
          line: 158,
          column: 22
        }
      },
      "42": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "43": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "44": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 107
        }
      },
      "45": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 37
        }
      },
      "46": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "47": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 29
        }
      },
      "48": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 29
        }
      },
      "49": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 25
        }
      },
      "50": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 175,
          column: 19
        }
      },
      "51": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 182,
          column: 10
        }
      },
      "52": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 192,
          column: 10
        }
      },
      "53": {
        start: {
          line: 196,
          column: 26
        },
        end: {
          line: 196,
          column: 36
        }
      },
      "54": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 355,
          column: 5
        }
      },
      "55": {
        start: {
          line: 199,
          column: 27
        },
        end: {
          line: 202,
          column: 10
        }
      },
      "56": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "57": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "58": {
        start: {
          line: 212,
          column: 24
        },
        end: {
          line: 212,
          column: 42
        }
      },
      "59": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 226,
          column: 20
        }
      },
      "60": {
        start: {
          line: 227,
          column: 24
        },
        end: {
          line: 227,
          column: 26
        }
      },
      "61": {
        start: {
          line: 228,
          column: 23
        },
        end: {
          line: 228,
          column: 25
        }
      },
      "62": {
        start: {
          line: 229,
          column: 25
        },
        end: {
          line: 229,
          column: 27
        }
      },
      "63": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 70
        }
      },
      "64": {
        start: {
          line: 232,
          column: 28
        },
        end: {
          line: 232,
          column: 57
        }
      },
      "65": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 34
        }
      },
      "66": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "67": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 62
        }
      },
      "68": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 70
        }
      },
      "69": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 239,
          column: 57
        }
      },
      "70": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 34
        }
      },
      "71": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "72": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 62
        }
      },
      "73": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 75
        }
      },
      "74": {
        start: {
          line: 246,
          column: 30
        },
        end: {
          line: 246,
          column: 61
        }
      },
      "75": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 36
        }
      },
      "76": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "77": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 66
        }
      },
      "78": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 66
        }
      },
      "79": {
        start: {
          line: 253,
          column: 28
        },
        end: {
          line: 253,
          column: 52
        }
      },
      "80": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 34
        }
      },
      "81": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "82": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 62
        }
      },
      "83": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 66
        }
      },
      "84": {
        start: {
          line: 260,
          column: 28
        },
        end: {
          line: 260,
          column: 51
        }
      },
      "85": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "86": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 72
        }
      },
      "87": {
        start: {
          line: 264,
          column: 26
        },
        end: {
          line: 264,
          column: 52
        }
      },
      "88": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 43
        }
      },
      "89": {
        start: {
          line: 266,
          column: 23
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "90": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 293,
          column: 20
        }
      },
      "91": {
        start: {
          line: 294,
          column: 25
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "92": {
        start: {
          line: 307,
          column: 54
        },
        end: {
          line: 307,
          column: 76
        }
      },
      "93": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 320,
          column: 11
        }
      },
      "94": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 79
        }
      },
      "95": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "96": {
        start: {
          line: 325,
          column: 31
        },
        end: {
          line: 327,
          column: 14
        }
      },
      "97": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "98": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 341,
          column: 39
        }
      },
      "99": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 83
        }
      },
      "100": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 354,
          column: 11
        }
      },
      "101": {
        start: {
          line: 358,
          column: 4
        },
        end: {
          line: 437,
          column: 5
        }
      },
      "102": {
        start: {
          line: 360,
          column: 27
        },
        end: {
          line: 363,
          column: 10
        }
      },
      "103": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "104": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 371,
          column: 15
        }
      },
      "105": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "106": {
        start: {
          line: 406,
          column: 25
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "107": {
        start: {
          line: 412,
          column: 57
        },
        end: {
          line: 412,
          column: 79
        }
      },
      "108": {
        start: {
          line: 413,
          column: 55
        },
        end: {
          line: 413,
          column: 75
        }
      },
      "109": {
        start: {
          line: 414,
          column: 54
        },
        end: {
          line: 414,
          column: 76
        }
      },
      "110": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 51
        }
      },
      "111": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 79
        }
      },
      "112": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 436,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "initializeCacheSystem",
        decl: {
          start: {
            line: 35,
            column: 19
          },
          end: {
            line: 35,
            column: 40
          }
        },
        loc: {
          start: {
            line: 35,
            column: 43
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 35
      },
      "5": {
        name: "initializeAlertSystem",
        decl: {
          start: {
            line: 61,
            column: 19
          },
          end: {
            line: 61,
            column: 40
          }
        },
        loc: {
          start: {
            line: 61,
            column: 43
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 61
      },
      "6": {
        name: "initializeTestingSystem",
        decl: {
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 42
          }
        },
        loc: {
          start: {
            line: 90,
            column: 45
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 90
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 103,
            column: 46
          },
          end: {
            line: 103,
            column: 47
          }
        },
        loc: {
          start: {
            line: 103,
            column: 51
          },
          end: {
            line: 103,
            column: 60
          }
        },
        line: 103
      },
      "8": {
        name: "checkAuditSystem",
        decl: {
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 121,
            column: 35
          }
        },
        loc: {
          start: {
            line: 121,
            column: 38
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 121
      },
      "9": {
        name: "runInitialTests",
        decl: {
          start: {
            line: 148,
            column: 19
          },
          end: {
            line: 148,
            column: 34
          }
        },
        loc: {
          start: {
            line: 148,
            column: 37
          },
          end: {
            line: 194,
            column: 1
          }
        },
        line: 148
      },
      "10": {
        name: "POST",
        decl: {
          start: {
            line: 195,
            column: 15
          },
          end: {
            line: 195,
            column: 19
          }
        },
        loc: {
          start: {
            line: 195,
            column: 29
          },
          end: {
            line: 356,
            column: 1
          }
        },
        line: 195
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 307,
            column: 49
          },
          end: {
            line: 307,
            column: 50
          }
        },
        loc: {
          start: {
            line: 307,
            column: 54
          },
          end: {
            line: 307,
            column: 76
          }
        },
        line: 307
      },
      "12": {
        name: "GET",
        decl: {
          start: {
            line: 357,
            column: 15
          },
          end: {
            line: 357,
            column: 18
          }
        },
        loc: {
          start: {
            line: 357,
            column: 28
          },
          end: {
            line: 438,
            column: 1
          }
        },
        line: 357
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 412,
            column: 52
          },
          end: {
            line: 412,
            column: 53
          }
        },
        loc: {
          start: {
            line: 412,
            column: 57
          },
          end: {
            line: 412,
            column: 79
          }
        },
        line: 412
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 413,
            column: 50
          },
          end: {
            line: 413,
            column: 51
          }
        },
        loc: {
          start: {
            line: 413,
            column: 55
          },
          end: {
            line: 413,
            column: 75
          }
        },
        line: 413
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 414,
            column: 49
          },
          end: {
            line: 414,
            column: 50
          }
        },
        loc: {
          start: {
            line: 414,
            column: 54
          },
          end: {
            line: 414,
            column: 76
          }
        },
        line: 414
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: 165,
            column: 23
          },
          end: {
            line: 167,
            column: 17
          }
        }],
        line: 163
      },
      "1": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "2": {
        loc: {
          start: {
            line: 209,
            column: 24
          },
          end: {
            line: 209,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 24
          },
          end: {
            line: 209,
            column: 41
          }
        }, {
          start: {
            line: 209,
            column: 45
          },
          end: {
            line: 209,
            column: 48
          }
        }],
        line: 209
      },
      "3": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "4": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "5": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "6": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "7": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "8": {
        loc: {
          start: {
            line: 278,
            column: 22
          },
          end: {
            line: 278,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 32
          },
          end: {
            line: 278,
            column: 40
          }
        }, {
          start: {
            line: 278,
            column: 43
          },
          end: {
            line: 278,
            column: 49
          }
        }],
        line: 278
      },
      "9": {
        loc: {
          start: {
            line: 279,
            column: 61
          },
          end: {
            line: 279,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 279,
            column: 71
          },
          end: {
            line: 279,
            column: 95
          }
        }, {
          start: {
            line: 279,
            column: 98
          },
          end: {
            line: 279,
            column: 121
          }
        }],
        line: 279
      },
      "10": {
        loc: {
          start: {
            line: 296,
            column: 21
          },
          end: {
            line: 296,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 296,
            column: 31
          },
          end: {
            line: 296,
            column: 80
          }
        }, {
          start: {
            line: 296,
            column: 83
          },
          end: {
            line: 296,
            column: 122
          }
        }],
        line: 296
      },
      "11": {
        loc: {
          start: {
            line: 319,
            column: 20
          },
          end: {
            line: 319,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 30
          },
          end: {
            line: 319,
            column: 33
          }
        }, {
          start: {
            line: 319,
            column: 36
          },
          end: {
            line: 319,
            column: 39
          }
        }],
        line: 319
      },
      "12": {
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "13": {
        loc: {
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "14": {
        loc: {
          start: {
            line: 370,
            column: 24
          },
          end: {
            line: 370,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 24
          },
          end: {
            line: 370,
            column: 41
          }
        }, {
          start: {
            line: 370,
            column: 45
          },
          end: {
            line: 370,
            column: 48
          }
        }],
        line: 370
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\system\\initialize-enterprise\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Inicializaci\xF3n del Sistema Enterprise Completo\r\n * Inicializa todos los sistemas de optimizaci\xF3n y monitoreo\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\nimport { enterpriseCacheSystem } from '@/lib/optimization/enterprise-cache-system';\r\nimport { enterpriseAlertSystem } from '@/lib/monitoring/enterprise-alert-system';\r\nimport { enterpriseAutomatedTesting } from '@/lib/testing/enterprise-automated-testing';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\ninterface SystemStatus {\r\n  name: string;\r\n  status: 'initializing' | 'running' | 'error' | 'stopped';\r\n  version: string;\r\n  startTime?: string;\r\n  error?: string;\r\n  metrics?: any;\r\n}\r\n\r\ninterface InitializationResult {\r\n  success: boolean;\r\n  systems: SystemStatus[];\r\n  totalTime: number;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE INICIALIZACI\xD3N\r\n// =====================================================\r\n\r\n/**\r\n * Inicializa el sistema de cach\xE9 enterprise\r\n */\r\nasync function initializeCacheSystem(): Promise<SystemStatus> {\r\n  const startTime = new Date().toISOString();\r\n  \r\n  try {\r\n    await enterpriseCacheSystem.initialize();\r\n    \r\n    return {\r\n      name: 'Enterprise Cache System',\r\n      status: 'running',\r\n      version: '1.0.0',\r\n      startTime,\r\n      metrics: {\r\n        configurations: Object.keys(enterpriseCacheSystem.getMetrics()).length,\r\n        initialized: true\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      name: 'Enterprise Cache System',\r\n      status: 'error',\r\n      version: '1.0.0',\r\n      startTime,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Inicializa el sistema de alertas enterprise\r\n */\r\nasync function initializeAlertSystem(): Promise<SystemStatus> {\r\n  const startTime = new Date().toISOString();\r\n  \r\n  try {\r\n    await enterpriseAlertSystem.initialize();\r\n    \r\n    const metrics = enterpriseAlertSystem.getAlertMetrics();\r\n    \r\n    return {\r\n      name: 'Enterprise Alert System',\r\n      status: 'running',\r\n      version: '1.0.0',\r\n      startTime,\r\n      metrics: {\r\n        totalAlerts: metrics.totalAlerts,\r\n        activeAlerts: metrics.activeAlerts,\r\n        rulesLoaded: 5, // N\xFAmero de reglas predefinidas\r\n        initialized: true\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      name: 'Enterprise Alert System',\r\n      status: 'error',\r\n      version: '1.0.0',\r\n      startTime,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Inicializa el sistema de testing automatizado\r\n */\r\nasync function initializeTestingSystem(): Promise<SystemStatus> {\r\n  const startTime = new Date().toISOString();\r\n  \r\n  try {\r\n    await enterpriseAutomatedTesting.initialize();\r\n    \r\n    const metrics = enterpriseAutomatedTesting.getTestMetrics();\r\n    const allTests = enterpriseAutomatedTesting.getAllTests();\r\n    \r\n    return {\r\n      name: 'Enterprise Automated Testing',\r\n      status: 'running',\r\n      version: '1.0.0',\r\n      startTime,\r\n      metrics: {\r\n        totalTestCases: allTests.length,\r\n        enabledTests: allTests.filter(t => t.enabled).length,\r\n        lastRun: metrics.lastRun,\r\n        successRate: metrics.successRate,\r\n        initialized: true\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      name: 'Enterprise Automated Testing',\r\n      status: 'error',\r\n      version: '1.0.0',\r\n      startTime,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Verifica el estado del sistema de auditor\xEDa\r\n */\r\nasync function checkAuditSystem(): Promise<SystemStatus> {\r\n  const startTime = new Date().toISOString();\r\n  \r\n  try {\r\n    // El sistema de auditor\xEDa ya deber\xEDa estar inicializado\r\n    // Solo verificamos que est\xE9 funcionando\r\n    \r\n    return {\r\n      name: 'Enterprise Audit System',\r\n      status: 'running',\r\n      version: '1.0.0',\r\n      startTime,\r\n      metrics: {\r\n        initialized: true,\r\n        note: 'Already initialized in previous phases'\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      name: 'Enterprise Audit System',\r\n      status: 'error',\r\n      version: '1.0.0',\r\n      startTime,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Ejecuta tests iniciales del sistema\r\n */\r\nasync function runInitialTests(): Promise<{ passed: number; failed: number; details: any[] }> {\r\n  try {\r\n    // Ejecutar algunos tests cr\xEDticos\r\n    const criticalTests = [\r\n      'security_rate_limiting_basic',\r\n      'security_audit_logging',\r\n      'integration_alert_system'\r\n    ];\r\n\r\n    const results = [];\r\n    let passed = 0;\r\n    let failed = 0;\r\n\r\n    for (const testId of criticalTests) {\r\n      try {\r\n        const result = await enterpriseAutomatedTesting.runTest(testId);\r\n        results.push(result);\r\n        \r\n        if (result.passed) {\r\n          passed++;\r\n        } else {\r\n          failed++;\r\n        }\r\n      } catch (error) {\r\n        failed++;\r\n        results.push({\r\n          testId,\r\n          status: 'error',\r\n          error: error.message,\r\n          passed: false\r\n        });\r\n      }\r\n    }\r\n\r\n    return { passed, failed, details: results };\r\n  } catch (error) {\r\n    return { \r\n      passed: 0, \r\n      failed: 1, \r\n      details: [{ error: error.message }] \r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER PRINCIPAL\r\n// =====================================================\r\n\r\n/**\r\n * POST /api/admin/system/initialize-enterprise\r\n * Inicializa todos los sistemas enterprise de optimizaci\xF3n y monitoreo\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const initStartTime = Date.now();\r\n  \r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'system_admin']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Registrar inicio de inicializaci\xF3n\r\n    await enterpriseAuditSystem.logEnterpriseEvent({\r\n      user_id: context.userId,\r\n      event_type: 'SYSTEM_INITIALIZATION' as any,\r\n      event_category: 'system_operation',\r\n      severity: 'high' as any,\r\n      description: 'Enterprise system initialization started',\r\n      metadata: {\r\n        action: 'initialize_enterprise_systems',\r\n        phase: 'phase_4_optimization_monitoring'\r\n      },\r\n      ip_address: context.ipAddress,\r\n      user_agent: context.userAgent\r\n    }, context);\r\n\r\n    const systems: SystemStatus[] = [];\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    // 1. Inicializar sistema de cach\xE9 enterprise\r\n    console.log('[ENTERPRISE_INIT] Initializing cache system...');\r\n    const cacheStatus = await initializeCacheSystem();\r\n    systems.push(cacheStatus);\r\n    if (cacheStatus.status === 'error') {\r\n      errors.push(`Cache System: ${cacheStatus.error}`);\r\n    }\r\n\r\n    // 2. Inicializar sistema de alertas enterprise\r\n    console.log('[ENTERPRISE_INIT] Initializing alert system...');\r\n    const alertStatus = await initializeAlertSystem();\r\n    systems.push(alertStatus);\r\n    if (alertStatus.status === 'error') {\r\n      errors.push(`Alert System: ${alertStatus.error}`);\r\n    }\r\n\r\n    // 3. Inicializar sistema de testing automatizado\r\n    console.log('[ENTERPRISE_INIT] Initializing automated testing...');\r\n    const testingStatus = await initializeTestingSystem();\r\n    systems.push(testingStatus);\r\n    if (testingStatus.status === 'error') {\r\n      errors.push(`Testing System: ${testingStatus.error}`);\r\n    }\r\n\r\n    // 4. Verificar sistema de auditor\xEDa\r\n    console.log('[ENTERPRISE_INIT] Checking audit system...');\r\n    const auditStatus = await checkAuditSystem();\r\n    systems.push(auditStatus);\r\n    if (auditStatus.status === 'error') {\r\n      errors.push(`Audit System: ${auditStatus.error}`);\r\n    }\r\n\r\n    // 5. Ejecutar tests iniciales\r\n    console.log('[ENTERPRISE_INIT] Running initial tests...');\r\n    const testResults = await runInitialTests();\r\n    \r\n    if (testResults.failed > 0) {\r\n      warnings.push(`${testResults.failed} initial tests failed`);\r\n    }\r\n\r\n    const totalTime = Date.now() - initStartTime;\r\n    const success = errors.length === 0;\r\n\r\n    const result: InitializationResult = {\r\n      success,\r\n      systems,\r\n      totalTime,\r\n      errors,\r\n      warnings\r\n    };\r\n\r\n    // Registrar resultado de inicializaci\xF3n\r\n    await enterpriseAuditSystem.logEnterpriseEvent({\r\n      user_id: context.userId,\r\n      event_type: 'SYSTEM_INITIALIZATION_COMPLETE' as any,\r\n      event_category: 'system_operation',\r\n      severity: success ? 'medium' : 'high' as any,\r\n      description: `Enterprise system initialization ${success ? 'completed successfully' : 'completed with errors'}`,\r\n      metadata: {\r\n        success,\r\n        systems_initialized: systems.length,\r\n        errors_count: errors.length,\r\n        warnings_count: warnings.length,\r\n        total_time_ms: totalTime,\r\n        test_results: {\r\n          passed: testResults.passed,\r\n          failed: testResults.failed\r\n        }\r\n      },\r\n      ip_address: context.ipAddress,\r\n      user_agent: context.userAgent\r\n    }, context);\r\n\r\n    const response = {\r\n      success,\r\n      message: success ? \r\n        'Sistemas enterprise inicializados correctamente' : \r\n        'Inicializaci\xF3n completada con errores',\r\n      data: result,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        initialization: {\r\n          phase: 'phase_4_optimization_monitoring',\r\n          systems_count: systems.length,\r\n          success_rate: systems.filter(s => s.status === 'running').length / systems.length,\r\n          total_time_ms: totalTime\r\n        },\r\n        testing: {\r\n          initial_tests_run: testResults.passed + testResults.failed,\r\n          tests_passed: testResults.passed,\r\n          tests_failed: testResults.failed\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response, { \r\n      status: success ? 200 : 207 // 207 Multi-Status para \xE9xito parcial\r\n    });\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_INIT] Error during initialization:', error);\r\n    \r\n    // Intentar registrar el error en auditor\xEDa\r\n    try {\r\n      const authResult = await requireAdminAuth(request, ['admin_access']);\r\n      if (authResult.success) {\r\n        await enterpriseAuditSystem.logEnterpriseEvent({\r\n          user_id: authResult.context!.userId,\r\n          event_type: 'SYSTEM_INITIALIZATION_ERROR' as any,\r\n          event_category: 'system_operation',\r\n          severity: 'critical' as any,\r\n          description: 'Enterprise system initialization failed',\r\n          metadata: {\r\n            error: error.message,\r\n            total_time_ms: Date.now() - initStartTime\r\n          },\r\n          ip_address: authResult.context!.ipAddress,\r\n          user_agent: authResult.context!.userAgent\r\n        }, authResult.context!);\r\n      }\r\n    } catch (auditError) {\r\n      console.error('[ENTERPRISE_INIT] Error logging to audit:', auditError);\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno durante la inicializaci\xF3n enterprise',\r\n        code: 'INITIALIZATION_ERROR',\r\n        details: error.message,\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/admin/system/initialize-enterprise\r\n * Obtiene el estado actual de los sistemas enterprise\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'monitoring_access']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener estado de todos los sistemas\r\n    const systems: SystemStatus[] = [\r\n      {\r\n        name: 'Enterprise Cache System',\r\n        status: 'running', // Simplificado - en producci\xF3n verificar estado real\r\n        version: '1.0.0',\r\n        startTime: new Date().toISOString(),\r\n        metrics: enterpriseCacheSystem.getMetrics()\r\n      },\r\n      {\r\n        name: 'Enterprise Alert System',\r\n        status: 'running',\r\n        version: '1.0.0',\r\n        startTime: new Date().toISOString(),\r\n        metrics: enterpriseAlertSystem.getAlertMetrics()\r\n      },\r\n      {\r\n        name: 'Enterprise Automated Testing',\r\n        status: 'running',\r\n        version: '1.0.0',\r\n        startTime: new Date().toISOString(),\r\n        metrics: enterpriseAutomatedTesting.getTestMetrics()\r\n      },\r\n      {\r\n        name: 'Enterprise Audit System',\r\n        status: 'running',\r\n        version: '1.0.0',\r\n        startTime: new Date().toISOString(),\r\n        metrics: { initialized: true }\r\n      }\r\n    ];\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        systems,\r\n        summary: {\r\n          total_systems: systems.length,\r\n          running_systems: systems.filter(s => s.status === 'running').length,\r\n          error_systems: systems.filter(s => s.status === 'error').length,\r\n          health_score: systems.filter(s => s.status === 'running').length / systems.length\r\n        }\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: authResult.context!.userId,\r\n          role: authResult.context!.role\r\n        },\r\n        query_time: new Date().toISOString()\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_INIT] Error getting system status:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener estado de sistemas',\r\n        code: 'SYSTEM_STATUS_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "initializeCacheSystem", "startTime", "Date", "toISOString", "enterpriseCacheSystem", "initialize", "name", "status", "version", "metrics", "configurations", "Object", "keys", "getMetrics", "length", "initialized", "error", "message", "initializeAlertSystem", "enterpriseAlertSystem", "getAlertMetrics", "totalAlerts", "activeAlerts", "rulesLoaded", "initializeTestingSystem", "enterpriseAutomatedTesting", "getTestMetrics", "allTests", "getAllTests", "totalTestCases", "enabledTests", "filter", "t", "enabled", "lastRun", "successRate", "checkAuditSystem", "note", "runInitialTests", "criticalTests", "results", "passed", "failed", "testId", "result", "runTest", "push", "details", "request", "initStartTime", "now", "authResult", "requireAdminAuth", "success", "NextResponse", "json", "code", "enterprise", "context", "enterpriseAuditSystem", "logEnterpriseEvent", "user_id", "userId", "event_type", "event_category", "severity", "description", "metadata", "action", "phase", "ip_address", "ipAddress", "user_agent", "userAgent", "systems", "errors", "warnings", "console", "log", "cacheStatus", "alertStatus", "testingStatus", "auditStatus", "testResults", "totalTime", "systems_initialized", "errors_count", "warnings_count", "total_time_ms", "test_results", "response", "data", "requester", "role", "permissions", "initialization", "systems_count", "success_rate", "s", "testing", "initial_tests_run", "tests_passed", "tests_failed", "timestamp", "auditError", "summary", "total_systems", "running_systems", "error_systems", "health_score", "query_time"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f1db4c7f10d53a203d6ee8c808d2f47526e1047f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29r2w5zorm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29r2w5zorm();
cov_29r2w5zorm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[0]++;
  cov_29r2w5zorm().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_29r2w5zorm().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_29r2w5zorm().f[1]++;
    cov_29r2w5zorm().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_29r2w5zorm().f[2]++;
    cov_29r2w5zorm().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_29r2w5zorm().f[3]++;
    cov_29r2w5zorm().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_29r2w5zorm().s[7]++, require("next/server"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_29r2w5zorm().s[8]++, require("../../../../../lib/auth/enterprise-auth-utils"));
const _enterpriseauditsystem =
/* istanbul ignore next */
(cov_29r2w5zorm().s[9]++, require("../../../../../lib/security/enterprise-audit-system"));
const _enterprisecachesystem =
/* istanbul ignore next */
(cov_29r2w5zorm().s[10]++, require("../../../../../lib/optimization/enterprise-cache-system"));
const _enterprisealertsystem =
/* istanbul ignore next */
(cov_29r2w5zorm().s[11]++, require("../../../../../lib/monitoring/enterprise-alert-system"));
const _enterpriseautomatedtesting =
/* istanbul ignore next */
(cov_29r2w5zorm().s[12]++, require("../../../../../lib/testing/enterprise-automated-testing"));
const runtime =
/* istanbul ignore next */
(cov_29r2w5zorm().s[13]++, 'nodejs');
// =====================================================
// FUNCIONES DE INICIALIZACIÃN
// =====================================================
/**
 * Inicializa el sistema de cachÃ© enterprise
 */
async function initializeCacheSystem() {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_29r2w5zorm().s[14]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_29r2w5zorm().s[15]++;
  try {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[16]++;
    await _enterprisecachesystem.enterpriseCacheSystem.initialize();
    /* istanbul ignore next */
    cov_29r2w5zorm().s[17]++;
    return {
      name: 'Enterprise Cache System',
      status: 'running',
      version: '1.0.0',
      startTime,
      metrics: {
        configurations: Object.keys(_enterprisecachesystem.enterpriseCacheSystem.getMetrics()).length,
        initialized: true
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[18]++;
    return {
      name: 'Enterprise Cache System',
      status: 'error',
      version: '1.0.0',
      startTime,
      error: error.message
    };
  }
}
/**
 * Inicializa el sistema de alertas enterprise
 */
async function initializeAlertSystem() {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[5]++;
  const startTime =
  /* istanbul ignore next */
  (cov_29r2w5zorm().s[19]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_29r2w5zorm().s[20]++;
  try {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[21]++;
    await _enterprisealertsystem.enterpriseAlertSystem.initialize();
    const metrics =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[22]++, _enterprisealertsystem.enterpriseAlertSystem.getAlertMetrics());
    /* istanbul ignore next */
    cov_29r2w5zorm().s[23]++;
    return {
      name: 'Enterprise Alert System',
      status: 'running',
      version: '1.0.0',
      startTime,
      metrics: {
        totalAlerts: metrics.totalAlerts,
        activeAlerts: metrics.activeAlerts,
        rulesLoaded: 5,
        initialized: true
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[24]++;
    return {
      name: 'Enterprise Alert System',
      status: 'error',
      version: '1.0.0',
      startTime,
      error: error.message
    };
  }
}
/**
 * Inicializa el sistema de testing automatizado
 */
async function initializeTestingSystem() {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[6]++;
  const startTime =
  /* istanbul ignore next */
  (cov_29r2w5zorm().s[25]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_29r2w5zorm().s[26]++;
  try {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[27]++;
    await _enterpriseautomatedtesting.enterpriseAutomatedTesting.initialize();
    const metrics =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[28]++, _enterpriseautomatedtesting.enterpriseAutomatedTesting.getTestMetrics());
    const allTests =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[29]++, _enterpriseautomatedtesting.enterpriseAutomatedTesting.getAllTests());
    /* istanbul ignore next */
    cov_29r2w5zorm().s[30]++;
    return {
      name: 'Enterprise Automated Testing',
      status: 'running',
      version: '1.0.0',
      startTime,
      metrics: {
        totalTestCases: allTests.length,
        enabledTests: allTests.filter(t => {
          /* istanbul ignore next */
          cov_29r2w5zorm().f[7]++;
          cov_29r2w5zorm().s[31]++;
          return t.enabled;
        }).length,
        lastRun: metrics.lastRun,
        successRate: metrics.successRate,
        initialized: true
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[32]++;
    return {
      name: 'Enterprise Automated Testing',
      status: 'error',
      version: '1.0.0',
      startTime,
      error: error.message
    };
  }
}
/**
 * Verifica el estado del sistema de auditorÃ­a
 */
async function checkAuditSystem() {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[8]++;
  const startTime =
  /* istanbul ignore next */
  (cov_29r2w5zorm().s[33]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_29r2w5zorm().s[34]++;
  try {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[35]++;
    // El sistema de auditorÃ­a ya deberÃ­a estar inicializado
    // Solo verificamos que estÃ© funcionando
    return {
      name: 'Enterprise Audit System',
      status: 'running',
      version: '1.0.0',
      startTime,
      metrics: {
        initialized: true,
        note: 'Already initialized in previous phases'
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[36]++;
    return {
      name: 'Enterprise Audit System',
      status: 'error',
      version: '1.0.0',
      startTime,
      error: error.message
    };
  }
}
/**
 * Ejecuta tests iniciales del sistema
 */
async function runInitialTests() {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[9]++;
  cov_29r2w5zorm().s[37]++;
  try {
    // Ejecutar algunos tests crÃ­ticos
    const criticalTests =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[38]++, ['security_rate_limiting_basic', 'security_audit_logging', 'integration_alert_system']);
    const results =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[39]++, []);
    let passed =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[40]++, 0);
    let failed =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[41]++, 0);
    /* istanbul ignore next */
    cov_29r2w5zorm().s[42]++;
    for (const testId of criticalTests) {
      /* istanbul ignore next */
      cov_29r2w5zorm().s[43]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_29r2w5zorm().s[44]++, await _enterpriseautomatedtesting.enterpriseAutomatedTesting.runTest(testId));
        /* istanbul ignore next */
        cov_29r2w5zorm().s[45]++;
        results.push(result);
        /* istanbul ignore next */
        cov_29r2w5zorm().s[46]++;
        if (result.passed) {
          /* istanbul ignore next */
          cov_29r2w5zorm().b[0][0]++;
          cov_29r2w5zorm().s[47]++;
          passed++;
        } else {
          /* istanbul ignore next */
          cov_29r2w5zorm().b[0][1]++;
          cov_29r2w5zorm().s[48]++;
          failed++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_29r2w5zorm().s[49]++;
        failed++;
        /* istanbul ignore next */
        cov_29r2w5zorm().s[50]++;
        results.push({
          testId,
          status: 'error',
          error: error.message,
          passed: false
        });
      }
    }
    /* istanbul ignore next */
    cov_29r2w5zorm().s[51]++;
    return {
      passed,
      failed,
      details: results
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[52]++;
    return {
      passed: 0,
      failed: 1,
      details: [{
        error: error.message
      }]
    };
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[10]++;
  const initStartTime =
  /* istanbul ignore next */
  (cov_29r2w5zorm().s[53]++, Date.now());
  /* istanbul ignore next */
  cov_29r2w5zorm().s[54]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[55]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'system_admin']));
    /* istanbul ignore next */
    cov_29r2w5zorm().s[56]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_29r2w5zorm().b[1][0]++;
      cov_29r2w5zorm().s[57]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_29r2w5zorm().b[2][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_29r2w5zorm().b[2][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_29r2w5zorm().b[1][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[58]++, authResult.context);
    // Registrar inicio de inicializaciÃ³n
    /* istanbul ignore next */
    cov_29r2w5zorm().s[59]++;
    await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
      user_id: context.userId,
      event_type: 'SYSTEM_INITIALIZATION',
      event_category: 'system_operation',
      severity: 'high',
      description: 'Enterprise system initialization started',
      metadata: {
        action: 'initialize_enterprise_systems',
        phase: 'phase_4_optimization_monitoring'
      },
      ip_address: context.ipAddress,
      user_agent: context.userAgent
    }, context);
    const systems =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[60]++, []);
    const errors =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[61]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[62]++, []);
    // 1. Inicializar sistema de cachÃ© enterprise
    /* istanbul ignore next */
    cov_29r2w5zorm().s[63]++;
    console.log('[ENTERPRISE_INIT] Initializing cache system...');
    const cacheStatus =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[64]++, await initializeCacheSystem());
    /* istanbul ignore next */
    cov_29r2w5zorm().s[65]++;
    systems.push(cacheStatus);
    /* istanbul ignore next */
    cov_29r2w5zorm().s[66]++;
    if (cacheStatus.status === 'error') {
      /* istanbul ignore next */
      cov_29r2w5zorm().b[3][0]++;
      cov_29r2w5zorm().s[67]++;
      errors.push(`Cache System: ${cacheStatus.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_29r2w5zorm().b[3][1]++;
    }
    // 2. Inicializar sistema de alertas enterprise
    cov_29r2w5zorm().s[68]++;
    console.log('[ENTERPRISE_INIT] Initializing alert system...');
    const alertStatus =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[69]++, await initializeAlertSystem());
    /* istanbul ignore next */
    cov_29r2w5zorm().s[70]++;
    systems.push(alertStatus);
    /* istanbul ignore next */
    cov_29r2w5zorm().s[71]++;
    if (alertStatus.status === 'error') {
      /* istanbul ignore next */
      cov_29r2w5zorm().b[4][0]++;
      cov_29r2w5zorm().s[72]++;
      errors.push(`Alert System: ${alertStatus.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_29r2w5zorm().b[4][1]++;
    }
    // 3. Inicializar sistema de testing automatizado
    cov_29r2w5zorm().s[73]++;
    console.log('[ENTERPRISE_INIT] Initializing automated testing...');
    const testingStatus =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[74]++, await initializeTestingSystem());
    /* istanbul ignore next */
    cov_29r2w5zorm().s[75]++;
    systems.push(testingStatus);
    /* istanbul ignore next */
    cov_29r2w5zorm().s[76]++;
    if (testingStatus.status === 'error') {
      /* istanbul ignore next */
      cov_29r2w5zorm().b[5][0]++;
      cov_29r2w5zorm().s[77]++;
      errors.push(`Testing System: ${testingStatus.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_29r2w5zorm().b[5][1]++;
    }
    // 4. Verificar sistema de auditorÃ­a
    cov_29r2w5zorm().s[78]++;
    console.log('[ENTERPRISE_INIT] Checking audit system...');
    const auditStatus =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[79]++, await checkAuditSystem());
    /* istanbul ignore next */
    cov_29r2w5zorm().s[80]++;
    systems.push(auditStatus);
    /* istanbul ignore next */
    cov_29r2w5zorm().s[81]++;
    if (auditStatus.status === 'error') {
      /* istanbul ignore next */
      cov_29r2w5zorm().b[6][0]++;
      cov_29r2w5zorm().s[82]++;
      errors.push(`Audit System: ${auditStatus.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_29r2w5zorm().b[6][1]++;
    }
    // 5. Ejecutar tests iniciales
    cov_29r2w5zorm().s[83]++;
    console.log('[ENTERPRISE_INIT] Running initial tests...');
    const testResults =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[84]++, await runInitialTests());
    /* istanbul ignore next */
    cov_29r2w5zorm().s[85]++;
    if (testResults.failed > 0) {
      /* istanbul ignore next */
      cov_29r2w5zorm().b[7][0]++;
      cov_29r2w5zorm().s[86]++;
      warnings.push(`${testResults.failed} initial tests failed`);
    } else
    /* istanbul ignore next */
    {
      cov_29r2w5zorm().b[7][1]++;
    }
    const totalTime =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[87]++, Date.now() - initStartTime);
    const success =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[88]++, errors.length === 0);
    const result =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[89]++, {
      success,
      systems,
      totalTime,
      errors,
      warnings
    });
    // Registrar resultado de inicializaciÃ³n
    /* istanbul ignore next */
    cov_29r2w5zorm().s[90]++;
    await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
      user_id: context.userId,
      event_type: 'SYSTEM_INITIALIZATION_COMPLETE',
      event_category: 'system_operation',
      severity: success ?
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[8][0]++, 'medium') :
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[8][1]++, 'high'),
      description: `Enterprise system initialization ${success ?
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[9][0]++, 'completed successfully') :
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[9][1]++, 'completed with errors')}`,
      metadata: {
        success,
        systems_initialized: systems.length,
        errors_count: errors.length,
        warnings_count: warnings.length,
        total_time_ms: totalTime,
        test_results: {
          passed: testResults.passed,
          failed: testResults.failed
        }
      },
      ip_address: context.ipAddress,
      user_agent: context.userAgent
    }, context);
    const response =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[91]++, {
      success,
      message: success ?
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[10][0]++, 'Sistemas enterprise inicializados correctamente') :
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[10][1]++, 'InicializaciÃ³n completada con errores'),
      data: result,
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        initialization: {
          phase: 'phase_4_optimization_monitoring',
          systems_count: systems.length,
          success_rate: systems.filter(s => {
            /* istanbul ignore next */
            cov_29r2w5zorm().f[11]++;
            cov_29r2w5zorm().s[92]++;
            return s.status === 'running';
          }).length / systems.length,
          total_time_ms: totalTime
        },
        testing: {
          initial_tests_run: testResults.passed + testResults.failed,
          tests_passed: testResults.passed,
          tests_failed: testResults.failed
        }
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_29r2w5zorm().s[93]++;
    return _server.NextResponse.json(response, {
      status: success ?
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[11][0]++, 200) :
      /* istanbul ignore next */
      (cov_29r2w5zorm().b[11][1]++, 207) // 207 Multi-Status para Ã©xito parcial
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[94]++;
    console.error('[ENTERPRISE_INIT] Error during initialization:', error);
    // Intentar registrar el error en auditorÃ­a
    /* istanbul ignore next */
    cov_29r2w5zorm().s[95]++;
    try {
      const authResult =
      /* istanbul ignore next */
      (cov_29r2w5zorm().s[96]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access']));
      /* istanbul ignore next */
      cov_29r2w5zorm().s[97]++;
      if (authResult.success) {
        /* istanbul ignore next */
        cov_29r2w5zorm().b[12][0]++;
        cov_29r2w5zorm().s[98]++;
        await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
          user_id: authResult.context.userId,
          event_type: 'SYSTEM_INITIALIZATION_ERROR',
          event_category: 'system_operation',
          severity: 'critical',
          description: 'Enterprise system initialization failed',
          metadata: {
            error: error.message,
            total_time_ms: Date.now() - initStartTime
          },
          ip_address: authResult.context.ipAddress,
          user_agent: authResult.context.userAgent
        }, authResult.context);
      } else
      /* istanbul ignore next */
      {
        cov_29r2w5zorm().b[12][1]++;
      }
    } catch (auditError) {
      /* istanbul ignore next */
      cov_29r2w5zorm().s[99]++;
      console.error('[ENTERPRISE_INIT] Error logging to audit:', auditError);
    }
    /* istanbul ignore next */
    cov_29r2w5zorm().s[100]++;
    return _server.NextResponse.json({
      error: 'Error interno durante la inicializaciÃ³n enterprise',
      code: 'INITIALIZATION_ERROR',
      details: error.message,
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_29r2w5zorm().f[12]++;
  cov_29r2w5zorm().s[101]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[102]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'monitoring_access']));
    /* istanbul ignore next */
    cov_29r2w5zorm().s[103]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_29r2w5zorm().b[13][0]++;
      cov_29r2w5zorm().s[104]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_29r2w5zorm().b[14][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_29r2w5zorm().b[14][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_29r2w5zorm().b[13][1]++;
    }
    // Obtener estado de todos los sistemas
    const systems =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[105]++, [{
      name: 'Enterprise Cache System',
      status: 'running',
      version: '1.0.0',
      startTime: new Date().toISOString(),
      metrics: _enterprisecachesystem.enterpriseCacheSystem.getMetrics()
    }, {
      name: 'Enterprise Alert System',
      status: 'running',
      version: '1.0.0',
      startTime: new Date().toISOString(),
      metrics: _enterprisealertsystem.enterpriseAlertSystem.getAlertMetrics()
    }, {
      name: 'Enterprise Automated Testing',
      status: 'running',
      version: '1.0.0',
      startTime: new Date().toISOString(),
      metrics: _enterpriseautomatedtesting.enterpriseAutomatedTesting.getTestMetrics()
    }, {
      name: 'Enterprise Audit System',
      status: 'running',
      version: '1.0.0',
      startTime: new Date().toISOString(),
      metrics: {
        initialized: true
      }
    }]);
    const response =
    /* istanbul ignore next */
    (cov_29r2w5zorm().s[106]++, {
      success: true,
      data: {
        systems,
        summary: {
          total_systems: systems.length,
          running_systems: systems.filter(s => {
            /* istanbul ignore next */
            cov_29r2w5zorm().f[13]++;
            cov_29r2w5zorm().s[107]++;
            return s.status === 'running';
          }).length,
          error_systems: systems.filter(s => {
            /* istanbul ignore next */
            cov_29r2w5zorm().f[14]++;
            cov_29r2w5zorm().s[108]++;
            return s.status === 'error';
          }).length,
          health_score: systems.filter(s => {
            /* istanbul ignore next */
            cov_29r2w5zorm().f[15]++;
            cov_29r2w5zorm().s[109]++;
            return s.status === 'running';
          }).length / systems.length
        }
      },
      enterprise: {
        requester: {
          userId: authResult.context.userId,
          role: authResult.context.role
        },
        query_time: new Date().toISOString()
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_29r2w5zorm().s[110]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_29r2w5zorm().s[111]++;
    console.error('[ENTERPRISE_INIT] Error getting system status:', error);
    /* istanbul ignore next */
    cov_29r2w5zorm().s[112]++;
    return _server.NextResponse.json({
      error: 'Error interno al obtener estado de sistemas',
      code: 'SYSTEM_STATUS_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,