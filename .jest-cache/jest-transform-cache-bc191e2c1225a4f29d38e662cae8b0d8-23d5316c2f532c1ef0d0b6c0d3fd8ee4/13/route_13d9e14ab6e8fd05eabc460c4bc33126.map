{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\deliveries\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n/**\n * API para gestión de entregas por parte de los drivers\n * GET /api/driver/deliveries - Obtener entregas asignadas\n * POST /api/driver/deliveries - Actualizar estado de entrega\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/lib/auth/config'\nimport { createClient } from '@/lib/integrations/supabase/server'\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticación\n    const session = await auth()\n\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const status = searchParams.get('status') // pending, in_transit, delivered, exception\n    const date = searchParams.get('date') // YYYY-MM-DD\n\n    const supabase = await createClient()\n\n    // Obtener información del driver\n    const { data: driver, error: driverError } = await supabase\n      .from('drivers')\n      .select('id')\n      .eq('email', session.user.email)\n      .single()\n\n    if (driverError || !driver) {\n      return NextResponse.json({ error: 'Driver no encontrado' }, { status: 404 })\n    }\n\n    // Construir query para obtener rutas con entregas\n    let query = supabase.from('optimized_routes').select('*').eq('driver_id', driver.id)\n\n    // Filtrar por fecha si se especifica\n    if (date) {\n      query = query\n        .gte('created_at', `${date}T00:00:00.000Z`)\n        .lte('created_at', `${date}T23:59:59.999Z`)\n    }\n\n    const { data: routes, error: routesError } = await query\n\n    if (routesError) {\n      console.error('Error fetching routes:', routesError)\n      return NextResponse.json({ error: 'Error obteniendo rutas' }, { status: 500 })\n    }\n\n    // Extraer y procesar todas las entregas\n    const allDeliveries = []\n\n    for (const route of routes || []) {\n      if (route.shipments && Array.isArray(route.shipments)) {\n        for (let i = 0; i < route.shipments.length; i++) {\n          const shipment = route.shipments[i]\n\n          // Filtrar por estado si se especifica\n          if (status && shipment.status !== status) {\n            continue\n          }\n\n          const delivery = {\n            id: shipment.id || `${route.id}-${i}`,\n            route_id: route.id,\n            route_name: route.name,\n            tracking_number: shipment.tracking_number || `TRK-${route.id.slice(-6)}-${i + 1}`,\n            customer_name: shipment.customer_name || `Cliente ${i + 1}`,\n            customer_phone: shipment.customer_phone,\n            destination: {\n              address: shipment.destination?.address || `Dirección ${i + 1}`,\n              city: shipment.destination?.city || 'Buenos Aires',\n              postal_code: shipment.destination?.postal_code || '1000',\n              coordinates: shipment.destination?.coordinates,\n              notes: shipment.destination?.notes,\n            },\n            items: shipment.items || [],\n            status: shipment.status || 'confirmed',\n            estimated_delivery_time: shipment.estimated_delivery_time,\n            special_instructions: shipment.special_instructions,\n            requires_signature: shipment.requires_signature || false,\n            cash_on_delivery: shipment.cash_on_delivery,\n            delivery_notes: shipment.delivery_notes,\n            delivered_at: shipment.delivered_at,\n            delivered_by: shipment.delivered_by,\n            created_at: route.created_at,\n            updated_at: route.updated_at,\n          }\n\n          allDeliveries.push(delivery)\n        }\n      }\n    }\n\n    // Ordenar por fecha de creación (más recientes primero)\n    allDeliveries.sort(\n      (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n    )\n\n    // Estadísticas\n    const stats = {\n      total: allDeliveries.length,\n      pending: allDeliveries.filter(d => d.status === 'pending').length,\n      confirmed: allDeliveries.filter(d => d.status === 'confirmed').length,\n      in_transit: allDeliveries.filter(d => d.status === 'in_transit').length,\n      delivered: allDeliveries.filter(d => d.status === 'delivered').length,\n      exception: allDeliveries.filter(d => d.status === 'exception').length,\n    }\n\n    return NextResponse.json({\n      deliveries: allDeliveries,\n      stats,\n      driver_id: driver.id,\n    })\n  } catch (error) {\n    console.error('Error in driver deliveries API:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticación\n    const session = await auth()\n\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const {\n      delivery_id,\n      route_id,\n      status,\n      delivery_notes,\n      signature_data,\n      photo_evidence,\n      location,\n    } = body\n\n    // Validar parámetros requeridos\n    if (!delivery_id || !route_id || !status) {\n      return NextResponse.json(\n        { error: 'delivery_id, route_id y status son requeridos' },\n        { status: 400 }\n      )\n    }\n\n    const supabase = await createClient()\n\n    // Obtener información del driver\n    const { data: driver, error: driverError } = await supabase\n      .from('drivers')\n      .select('id, name')\n      .eq('email', session.user.email)\n      .single()\n\n    if (driverError || !driver) {\n      return NextResponse.json({ error: 'Driver no encontrado' }, { status: 404 })\n    }\n\n    // Obtener la ruta actual\n    const { data: route, error: routeError } = await supabase\n      .from('optimized_routes')\n      .select('*')\n      .eq('id', route_id)\n      .eq('driver_id', driver.id)\n      .single()\n\n    if (routeError || !route) {\n      return NextResponse.json({ error: 'Ruta no encontrada' }, { status: 404 })\n    }\n\n    // Actualizar el shipment específico\n    const updatedShipments = route.shipments.map((shipment: any) => {\n      if (\n        shipment.id === delivery_id ||\n        `${route_id}-${route.shipments.indexOf(shipment)}` === delivery_id\n      ) {\n        const updatedShipment = {\n          ...shipment,\n          status,\n          delivery_notes,\n          updated_at: new Date().toISOString(),\n        }\n\n        // Si se marca como entregado, agregar información adicional\n        if (status === 'delivered') {\n          updatedShipment.delivered_at = new Date().toISOString()\n          updatedShipment.delivered_by = driver.name\n          updatedShipment.delivery_location = location\n\n          if (signature_data) {\n            updatedShipment.signature_data = signature_data\n          }\n\n          if (photo_evidence) {\n            updatedShipment.photo_evidence = photo_evidence\n          }\n        }\n\n        return updatedShipment\n      }\n      return shipment\n    })\n\n    // Actualizar la ruta en la base de datos\n    const { data: updatedRoute, error: updateError } = await supabase\n      .from('optimized_routes')\n      .update({\n        shipments: updatedShipments,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', route_id)\n      .eq('driver_id', driver.id)\n      .select()\n      .single()\n\n    if (updateError) {\n      console.error('Error updating delivery:', updateError)\n      return NextResponse.json({ error: 'Error actualizando entrega' }, { status: 500 })\n    }\n\n    // Verificar si todas las entregas están completadas\n    const allDelivered = updatedShipments.every((shipment: any) => shipment.status === 'delivered')\n\n    // Si todas las entregas están completadas, marcar la ruta como completada\n    if (allDelivered) {\n      await supabase\n        .from('optimized_routes')\n        .update({\n          status: 'completed',\n          completed_at: new Date().toISOString(),\n        })\n        .eq('id', route_id)\n    }\n\n    return NextResponse.json({\n      success: true,\n      delivery_id,\n      status,\n      route_completed: allDelivered,\n      updated_at: new Date().toISOString(),\n    })\n  } catch (error) {\n    console.error('Error in driver delivery update API:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n"],"names":["GET","POST","runtime","request","session","auth","user","email","NextResponse","json","error","status","searchParams","URL","url","get","date","supabase","createClient","data","driver","driverError","from","select","eq","single","query","id","gte","lte","routes","routesError","console","allDeliveries","route","shipments","Array","isArray","i","length","shipment","delivery","route_id","route_name","name","tracking_number","slice","customer_name","customer_phone","destination","address","city","postal_code","coordinates","notes","items","estimated_delivery_time","special_instructions","requires_signature","cash_on_delivery","delivery_notes","delivered_at","delivered_by","created_at","updated_at","push","sort","a","b","Date","getTime","stats","total","pending","filter","d","confirmed","in_transit","delivered","exception","deliveries","driver_id","body","delivery_id","signature_data","photo_evidence","location","routeError","updatedShipments","map","indexOf","updatedShipment","toISOString","delivery_location","updatedRoute","updateError","update","allDelivered","every","completed_at","success","route_completed"],"mappings":"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"}