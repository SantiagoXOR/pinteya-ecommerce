41664a86a914ecf52bc8286818951674
'use client';
"use strict";

/* istanbul ignore next */
function cov_n6u8pe1zh() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\error-boundary\\useErrorBoundary.ts";
  var hash = "fe82b1842ae490caa931635dc49b01784f5c4a5f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\error-boundary\\useErrorBoundary.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 37
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 40
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 32
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "9": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 27,
          column: 88
        }
      },
      "10": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 176,
          column: 1
        }
      },
      "11": {
        start: {
          line: 29,
          column: 123
        },
        end: {
          line: 29,
          column: 130
        }
      },
      "12": {
        start: {
          line: 31,
          column: 36
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "13": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 32,
          column: 56
        }
      },
      "14": {
        start: {
          line: 33,
          column: 40
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "15": {
        start: {
          line: 34,
          column: 40
        },
        end: {
          line: 34,
          column: 67
        }
      },
      "16": {
        start: {
          line: 35,
          column: 44
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "17": {
        start: {
          line: 36,
          column: 44
        },
        end: {
          line: 36,
          column: 126
        }
      },
      "18": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 67,
          column: 6
        }
      },
      "19": {
        start: {
          line: 41,
          column: 24
        },
        end: {
          line: 41,
          column: 87
        }
      },
      "20": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 26
        }
      },
      "21": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 24
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "25": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 86
        }
      },
      "26": {
        start: {
          line: 71,
          column: 18
        },
        end: {
          line: 102,
          column: 6
        }
      },
      "27": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "28": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 74
        }
      },
      "29": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 19
        }
      },
      "30": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 28
        }
      },
      "31": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "32": {
        start: {
          line: 79,
          column: 26
        },
        end: {
          line: 79,
          column: 62
        }
      },
      "33": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 69
        }
      },
      "34": {
        start: {
          line: 80,
          column: 41
        },
        end: {
          line: 80,
          column: 67
        }
      },
      "35": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 44
        }
      },
      "36": {
        start: {
          line: 82,
          column: 34
        },
        end: {
          line: 82,
          column: 42
        }
      },
      "37": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 31
        }
      },
      "38": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 27
        }
      },
      "39": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 89
        }
      },
      "40": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 63
        }
      },
      "41": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "42": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 33
        }
      },
      "43": {
        start: {
          line: 106,
          column: 18
        },
        end: {
          line: 114,
          column: 6
        }
      },
      "44": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 27
        }
      },
      "45": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 23
        }
      },
      "46": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "47": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 29
        }
      },
      "48": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 74
        }
      },
      "49": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "50": {
        start: {
          line: 120,
          column: 34
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "51": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 19
        }
      },
      "52": {
        start: {
          line: 121,
          column: 36
        },
        end: {
          line: 124,
          column: 17
        }
      },
      "53": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 90
        }
      },
      "54": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 87
        }
      },
      "55": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 10
        }
      },
      "56": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 94
        }
      },
      "57": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 150,
          column: 7
        }
      },
      "58": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "59": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "60": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "61": {
        start: {
          line: 138,
          column: 39
        },
        end: {
          line: 138,
          column: 63
        }
      },
      "62": {
        start: {
          line: 139,
          column: 34
        },
        end: {
          line: 139,
          column: 67
        }
      },
      "63": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 51
        }
      },
      "64": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 140,
          column: 50
        }
      },
      "65": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "66": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "67": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 72
        }
      },
      "68": {
        start: {
          line: 156,
          column: 27
        },
        end: {
          line: 156,
          column: 54
        }
      },
      "69": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 45
        }
      },
      "70": {
        start: {
          line: 157,
          column: 19
        },
        end: {
          line: 157,
          column: 44
        }
      },
      "71": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 175,
          column: 6
        }
      },
      "72": {
        start: {
          line: 177,
          column: 30
        },
        end: {
          line: 218,
          column: 1
        }
      },
      "73": {
        start: {
          line: 178,
          column: 26
        },
        end: {
          line: 178,
          column: 51
        }
      },
      "74": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "75": {
        start: {
          line: 180,
          column: 38
        },
        end: {
          line: 180,
          column: 65
        }
      },
      "76": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 207,
          column: 6
        }
      },
      "77": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 27
        }
      },
      "78": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 30
        }
      },
      "79": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "80": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 185,
          column: 42
        }
      },
      "81": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 28
        }
      },
      "82": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "83": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 42
        }
      },
      "84": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 26
        }
      },
      "85": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "86": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 24
        }
      },
      "87": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 32
        }
      },
      "88": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "89": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 36
        }
      },
      "90": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 211,
          column: 21
        }
      },
      "91": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 18
        }
      },
      "92": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 217,
          column: 6
        }
      },
      "93": {
        start: {
          line: 219,
          column: 33
        },
        end: {
          line: 251,
          column: 1
        }
      },
      "94": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 250,
          column: 7
        }
      },
      "95": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 71
        }
      },
      "96": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "97": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 247,
          column: 40
        }
      },
      "98": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 280,
          column: 1
        }
      },
      "99": {
        start: {
          line: 253,
          column: 34
        },
        end: {
          line: 253,
          column: 116
        }
      },
      "100": {
        start: {
          line: 254,
          column: 44
        },
        end: {
          line: 254,
          column: 126
        }
      },
      "101": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "102": {
        start: {
          line: 256,
          column: 30
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "103": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 85
        }
      },
      "104": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 90
        }
      },
      "105": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 261,
          column: 60
        }
      },
      "106": {
        start: {
          line: 263,
          column: 34
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "107": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 28
        }
      },
      "108": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 87
        }
      },
      "109": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 270,
          column: 10
        }
      },
      "110": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 38
        }
      },
      "111": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 94
        }
      },
      "112": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 279,
          column: 6
        }
      },
      "113": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 85
        }
      },
      "114": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 90
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 33
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 36
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 27
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 28,
            column: 25
          },
          end: {
            line: 28,
            column: 26
          }
        },
        loc: {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 176,
            column: 1
          }
        },
        line: 28
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 40,
            column: 49
          },
          end: {
            line: 40,
            column: 50
          }
        },
        loc: {
          start: {
            line: 40,
            column: 72
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 40
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 71,
            column: 42
          },
          end: {
            line: 71,
            column: 43
          }
        },
        loc: {
          start: {
            line: 71,
            column: 52
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 71
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 80,
            column: 30
          },
          end: {
            line: 80,
            column: 31
          }
        },
        loc: {
          start: {
            line: 80,
            column: 41
          },
          end: {
            line: 80,
            column: 67
          }
        },
        line: 80
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 82,
            column: 26
          },
          end: {
            line: 82,
            column: 27
          }
        },
        loc: {
          start: {
            line: 82,
            column: 34
          },
          end: {
            line: 82,
            column: 42
          }
        },
        line: 82
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 106,
            column: 42
          },
          end: {
            line: 106,
            column: 43
          }
        },
        loc: {
          start: {
            line: 106,
            column: 46
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 106
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 119,
            column: 26
          },
          end: {
            line: 119,
            column: 27
          }
        },
        loc: {
          start: {
            line: 119,
            column: 30
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 119
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 120,
            column: 34
          },
          end: {
            line: 120,
            column: 35
          }
        },
        loc: {
          start: {
            line: 120,
            column: 49
          },
          end: {
            line: 126,
            column: 9
          }
        },
        line: 120
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 121,
            column: 28
          },
          end: {
            line: 121,
            column: 29
          }
        },
        loc: {
          start: {
            line: 121,
            column: 36
          },
          end: {
            line: 124,
            column: 17
          }
        },
        line: 121
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 128,
            column: 15
          },
          end: {
            line: 128,
            column: 16
          }
        },
        loc: {
          start: {
            line: 128,
            column: 19
          },
          end: {
            line: 130,
            column: 9
          }
        },
        line: 128
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 27
          }
        },
        loc: {
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 133
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 140,
            column: 24
          }
        },
        loc: {
          start: {
            line: 140,
            column: 27
          },
          end: {
            line: 140,
            column: 50
          }
        },
        line: 140
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 152,
            column: 26
          },
          end: {
            line: 152,
            column: 27
          }
        },
        loc: {
          start: {
            line: 152,
            column: 30
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 152
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 153,
            column: 24
          },
          end: {
            line: 153,
            column: 25
          }
        },
        loc: {
          start: {
            line: 153,
            column: 28
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 153
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 157,
            column: 16
          }
        },
        loc: {
          start: {
            line: 157,
            column: 19
          },
          end: {
            line: 157,
            column: 44
          }
        },
        line: 157
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 177,
            column: 30
          },
          end: {
            line: 177,
            column: 31
          }
        },
        loc: {
          start: {
            line: 177,
            column: 74
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 177
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 181,
            column: 44
          },
          end: {
            line: 181,
            column: 45
          }
        },
        loc: {
          start: {
            line: 181,
            column: 54
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 181
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 209,
            column: 26
          },
          end: {
            line: 209,
            column: 27
          }
        },
        loc: {
          start: {
            line: 209,
            column: 30
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 209
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 219,
            column: 33
          },
          end: {
            line: 219,
            column: 34
          }
        },
        loc: {
          start: {
            line: 219,
            column: 46
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 219
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 226,
            column: 17
          },
          end: {
            line: 226,
            column: 18
          }
        },
        loc: {
          start: {
            line: 226,
            column: 37
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 226
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 252,
            column: 24
          },
          end: {
            line: 252,
            column: 25
          }
        },
        loc: {
          start: {
            line: 252,
            column: 28
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 252
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 255,
            column: 26
          },
          end: {
            line: 255,
            column: 27
          }
        },
        loc: {
          start: {
            line: 255,
            column: 30
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 255
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 256,
            column: 30
          },
          end: {
            line: 256,
            column: 31
          }
        },
        loc: {
          start: {
            line: 256,
            column: 34
          },
          end: {
            line: 259,
            column: 9
          }
        },
        line: 256
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 263,
            column: 35
          }
        },
        loc: {
          start: {
            line: 263,
            column: 38
          },
          end: {
            line: 265,
            column: 9
          }
        },
        line: 263
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 267,
            column: 15
          },
          end: {
            line: 267,
            column: 16
          }
        },
        loc: {
          start: {
            line: 267,
            column: 19
          },
          end: {
            line: 270,
            column: 9
          }
        },
        line: 267
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 275,
            column: 17
          },
          end: {
            line: 275,
            column: 18
          }
        },
        loc: {
          start: {
            line: 275,
            column: 21
          },
          end: {
            line: 278,
            column: 9
          }
        },
        line: 275
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 28,
            column: 36
          },
          end: {
            line: 28,
            column: 38
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 21
          },
          end: {
            line: 29,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 35
          },
          end: {
            line: 29,
            column: 39
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 29,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 54
          },
          end: {
            line: 29,
            column: 55
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 57
          },
          end: {
            line: 29,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 70
          },
          end: {
            line: 29,
            column: 74
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 76
          },
          end: {
            line: 29,
            column: 97
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 88
          },
          end: {
            line: 29,
            column: 97
          }
        }],
        line: 29
      },
      "5": {
        loc: {
          start: {
            line: 29,
            column: 99
          },
          end: {
            line: 29,
            column: 118
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 107
          },
          end: {
            line: 29,
            column: 118
          }
        }],
        line: 29
      },
      "6": {
        loc: {
          start: {
            line: 40,
            column: 57
          },
          end: {
            line: 40,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 40,
            column: 67
          },
          end: {
            line: 40,
            column: 69
          }
        }],
        line: 40
      },
      "7": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 24
          }
        }, {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 52
          }
        }],
        line: 72
      },
      "10": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 20
          }
        }, {
          start: {
            line: 134,
            column: 24
          },
          end: {
            line: 134,
            column: 29
          }
        }, {
          start: {
            line: 134,
            column: 33
          },
          end: {
            line: 134,
            column: 44
          }
        }, {
          start: {
            line: 134,
            column: 48
          },
          end: {
            line: 134,
            column: 71
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 45
          }
        }, {
          start: {
            line: 137,
            column: 49
          },
          end: {
            line: 137,
            column: 76
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 177,
            column: 40
          },
          end: {
            line: 177,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 55
          },
          end: {
            line: 177,
            column: 57
          }
        }],
        line: 177
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 59
          },
          end: {
            line: 177,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 69
          },
          end: {
            line: 177,
            column: 71
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "17": {
        loc: {
          start: {
            line: 194,
            column: 27
          },
          end: {
            line: 194,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 27
          },
          end: {
            line: 194,
            column: 39
          }
        }, {
          start: {
            line: 194,
            column: 43
          },
          end: {
            line: 194,
            column: 54
          }
        }],
        line: 194
      },
      "18": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "19": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\error-boundary\\useErrorBoundary.ts"],
      sourcesContent: ["'use client';\r\n\r\n// ===================================\r\n// USE ERROR BOUNDARY HOOK\r\n// ===================================\r\n// Hook para manejo program\xE1tico de errores y integraci\xF3n con Error Boundaries\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { errorBoundaryManager } from '@/lib/error-boundary/error-boundary-manager';\r\nimport type { ErrorMetrics } from '@/lib/error-boundary/error-boundary-manager';\r\n\r\n// ===================================\r\n// INTERFACES\r\n// ===================================\r\n\r\ninterface UseErrorBoundaryOptions {\r\n  onError?: (error: Error, errorInfo: any) => void;\r\n  enableRetry?: boolean;\r\n  maxRetries?: number;\r\n  retryDelay?: number;\r\n  component?: string;\r\n  level?: 'page' | 'section' | 'component';\r\n}\r\n\r\ninterface UseErrorBoundaryReturn {\r\n  // Estado\r\n  hasError: boolean;\r\n  error: Error | null;\r\n  retryCount: number;\r\n  isRetrying: boolean;\r\n  \r\n  // Acciones\r\n  captureError: (error: Error, context?: any) => void;\r\n  retry: () => void;\r\n  reset: () => void;\r\n  \r\n  // M\xE9tricas\r\n  errorMetrics: ErrorMetrics[];\r\n  healthStatus: ReturnType<typeof errorBoundaryManager.getHealthStatus>;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport const useErrorBoundary = (options: UseErrorBoundaryOptions = {}): UseErrorBoundaryReturn => {\r\n  const {\r\n    onError,\r\n    enableRetry = true,\r\n    maxRetries = 3,\r\n    retryDelay = 1000,\r\n    component = 'unknown',\r\n    level = 'component'\r\n  } = options;\r\n\r\n  // Estado local\r\n  const [hasError, setHasError] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const [isRetrying, setIsRetrying] = useState(false);\r\n  const [errorMetrics, setErrorMetrics] = useState<ErrorMetrics[]>([]);\r\n  const [healthStatus, setHealthStatus] = useState(errorBoundaryManager.getHealthStatus());\r\n\r\n  // ===================================\r\n  // CAPTURA DE ERRORES\r\n  // ===================================\r\n\r\n  const captureError = useCallback((error: Error, context: any = {}) => {\r\n    const errorId = `hook_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Actualizar estado local\r\n    setHasError(true);\r\n    setError(error);\r\n\r\n    // Reportar al manager\r\n    errorBoundaryManager.reportError(error, context, {\r\n      errorId,\r\n      level,\r\n      component,\r\n      retryCount\r\n    });\r\n\r\n    // Callback personalizado\r\n    if (onError) {\r\n      onError(error, { ...context, errorId, component, level });\r\n    }\r\n\r\n    console.error(`\uD83D\uDEA8 Error captured by useErrorBoundary (${component}):`, error);\r\n  }, [onError, level, component, retryCount]);\r\n\r\n  // ===================================\r\n  // MANEJO DE REINTENTOS\r\n  // ===================================\r\n\r\n  const retry = useCallback(async () => {\r\n    if (!enableRetry || retryCount >= maxRetries) {\r\n      console.warn('\uD83D\uDD04 Retry not available or max retries reached');\r\n      return;\r\n    }\r\n\r\n    setIsRetrying(true);\r\n    \r\n    try {\r\n      // Esperar delay con backoff exponencial\r\n      const delay = retryDelay * Math.pow(2, retryCount);\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n\r\n      // Incrementar contador\r\n      setRetryCount(prev => prev + 1);\r\n      \r\n      // Reset error state\r\n      setHasError(false);\r\n      setError(null);\r\n      \r\n      console.log(`\uD83D\uDD04 Retry attempt ${retryCount + 1} for component ${component}`);\r\n      \r\n    } catch (retryError) {\r\n      console.error('\u274C Error during retry:', retryError);\r\n      captureError(retryError as Error, { context: 'retry_failed' });\r\n    } finally {\r\n      setIsRetrying(false);\r\n    }\r\n  }, [enableRetry, retryCount, maxRetries, retryDelay, component, captureError]);\r\n\r\n  // ===================================\r\n  // RESET\r\n  // ===================================\r\n\r\n  const reset = useCallback(() => {\r\n    setHasError(false);\r\n    setError(null);\r\n    setRetryCount(0);\r\n    setIsRetrying(false);\r\n    \r\n    console.log(`\uD83D\uDD04 Error boundary reset for component ${component}`);\r\n  }, [component]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  // Listener para m\xE9tricas de errores\r\n  useEffect(() => {\r\n    const handleErrorUpdate = (errorMetric: ErrorMetrics) => {\r\n      setErrorMetrics(prev => [errorMetric, ...prev.slice(0, 9)]); // Mantener \xFAltimos 10\r\n      setHealthStatus(errorBoundaryManager.getHealthStatus());\r\n    };\r\n\r\n    errorBoundaryManager.addErrorListener(handleErrorUpdate);\r\n\r\n    return () => {\r\n      errorBoundaryManager.removeErrorListener(handleErrorUpdate);\r\n    };\r\n  }, []);\r\n\r\n  // Auto-retry para ciertos tipos de errores\r\n  useEffect(() => {\r\n    if (hasError && error && enableRetry && retryCount < maxRetries) {\r\n      const errorType = error.name.toLowerCase();\r\n      \r\n      // Auto-retry para errores de red\r\n      if (errorType.includes('network') || errorType.includes('fetch')) {\r\n        const autoRetryDelay = 2000 + (retryCount * 1000);\r\n        const timeoutId = setTimeout(retry, autoRetryDelay);\r\n        \r\n        return () => clearTimeout(timeoutId);\r\n      }\r\n    }\r\n  }, [hasError, error, enableRetry, retryCount, maxRetries, retry]);\r\n\r\n  // Cleanup de m\xE9tricas antiguas\r\n  useEffect(() => {\r\n    const cleanup = () => {\r\n      errorBoundaryManager.clearOldErrors();\r\n    };\r\n\r\n    const intervalId = setInterval(cleanup, 60000); // Cada minuto\r\n    \r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // ===================================\r\n  // RETURN\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    hasError,\r\n    error,\r\n    retryCount,\r\n    isRetrying,\r\n    \r\n    // Acciones\r\n    captureError,\r\n    retry,\r\n    reset,\r\n    \r\n    // M\xE9tricas\r\n    errorMetrics,\r\n    healthStatus\r\n  };\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA ASYNC OPERATIONS\r\n// ===================================\r\n\r\ninterface UseAsyncErrorBoundaryOptions extends UseErrorBoundaryOptions {\r\n  onSuccess?: (data: any) => void;\r\n  onFinally?: () => void;\r\n}\r\n\r\nexport const useAsyncErrorBoundary = <T = any>(\r\n  asyncFn: () => Promise<T>,\r\n  dependencies: any[] = [],\r\n  options: UseAsyncErrorBoundaryOptions = {}\r\n) => {\r\n  const errorBoundary = useErrorBoundary(options);\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const execute = useCallback(async () => {\r\n    setIsLoading(true);\r\n    errorBoundary.reset();\r\n\r\n    try {\r\n      const result = await asyncFn();\r\n      setData(result);\r\n      \r\n      if (options.onSuccess) {\r\n        options.onSuccess(result);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      errorBoundary.captureError(error as Error, {\r\n        context: 'async_operation',\r\n        operation: asyncFn.name || 'anonymous'\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n      \r\n      if (options.onFinally) {\r\n        options.onFinally();\r\n      }\r\n    }\r\n  }, [asyncFn, errorBoundary, options]);\r\n\r\n  // Auto-execute en cambios de dependencias\r\n  useEffect(() => {\r\n    execute();\r\n  }, dependencies);\r\n\r\n  return {\r\n    ...errorBoundary,\r\n    data,\r\n    isLoading,\r\n    execute\r\n  };\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA COMPONENTES CR\xCDTICOS\r\n// ===================================\r\n\r\nexport const useCriticalErrorBoundary = (component: string) => {\r\n  return useErrorBoundary({\r\n    component,\r\n    level: 'page',\r\n    enableRetry: true,\r\n    maxRetries: 2,\r\n    retryDelay: 2000,\r\n    onError: (error, errorInfo) => {\r\n      // Reportar errores cr\xEDticos inmediatamente\r\n      console.error(`\uD83D\uDEA8 CRITICAL ERROR in ${component}:`, error);\r\n      \r\n      // Enviar notificaci\xF3n urgente\r\n      if (typeof window !== 'undefined') {\r\n        fetch('/api/monitoring/critical-error', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            component,\r\n            error: {\r\n              name: error.name,\r\n              message: error.message,\r\n              stack: error.stack\r\n            },\r\n            errorInfo,\r\n            timestamp: Date.now(),\r\n            url: window.location.href\r\n          })\r\n        }).catch(console.error);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA M\xC9TRICAS GLOBALES\r\n// ===================================\r\n\r\nexport const useErrorMetrics = () => {\r\n  const [metrics, setMetrics] = useState(errorBoundaryManager.getErrorMetrics());\r\n  const [healthStatus, setHealthStatus] = useState(errorBoundaryManager.getHealthStatus());\r\n\r\n  useEffect(() => {\r\n    const updateMetrics = () => {\r\n      setMetrics(errorBoundaryManager.getErrorMetrics());\r\n      setHealthStatus(errorBoundaryManager.getHealthStatus());\r\n    };\r\n\r\n    // Actualizar m\xE9tricas cada 30 segundos\r\n    const intervalId = setInterval(updateMetrics, 30000);\r\n    \r\n    // Listener para actualizaciones inmediatas\r\n    const handleErrorUpdate = () => {\r\n      updateMetrics();\r\n    };\r\n\r\n    errorBoundaryManager.addErrorListener(handleErrorUpdate);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      errorBoundaryManager.removeErrorListener(handleErrorUpdate);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    metrics,\r\n    healthStatus,\r\n    refresh: () => {\r\n      setMetrics(errorBoundaryManager.getErrorMetrics());\r\n      setHealthStatus(errorBoundaryManager.getHealthStatus());\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["useAsyncErrorBoundary", "useCriticalErrorBoundary", "useErrorBoundary", "useErrorMetrics", "options", "onError", "enableRetry", "maxRetries", "retryDelay", "component", "level", "hasError", "setHasError", "useState", "error", "setError", "retryCount", "setRetryCount", "isRetrying", "setIsRetrying", "errorMetrics", "setErrorMetrics", "healthStatus", "setHealthStatus", "errorBoundaryManager", "getHealthStatus", "captureError", "useCallback", "context", "errorId", "Date", "now", "Math", "random", "toString", "substr", "reportError", "console", "retry", "warn", "delay", "pow", "Promise", "resolve", "setTimeout", "prev", "log", "retryError", "reset", "useEffect", "handleErrorUpdate", "errorMetric", "slice", "addErrorListener", "removeErrorListener", "errorType", "name", "toLowerCase", "includes", "autoRetryDelay", "timeoutId", "clearTimeout", "cleanup", "clearOldErrors", "intervalId", "setInterval", "clearInterval", "asyncFn", "dependencies", "errorBoundary", "data", "setData", "isLoading", "setIsLoading", "execute", "result", "onSuccess", "operation", "onFinally", "errorInfo", "window", "fetch", "method", "headers", "body", "JSON", "stringify", "message", "stack", "timestamp", "url", "location", "href", "catch", "metrics", "setMetrics", "getErrorMetrics", "updateMetrics", "refresh"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fe82b1842ae490caa931635dc49b01784f5c4a5f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_n6u8pe1zh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_n6u8pe1zh();
cov_n6u8pe1zh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_n6u8pe1zh().f[0]++;
  cov_n6u8pe1zh().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_n6u8pe1zh().s[3]++;
_export(exports, {
  get useAsyncErrorBoundary() {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[1]++;
    cov_n6u8pe1zh().s[4]++;
    return useAsyncErrorBoundary;
  },
  get useCriticalErrorBoundary() {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[2]++;
    cov_n6u8pe1zh().s[5]++;
    return useCriticalErrorBoundary;
  },
  get useErrorBoundary() {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[3]++;
    cov_n6u8pe1zh().s[6]++;
    return useErrorBoundary;
  },
  get useErrorMetrics() {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[4]++;
    cov_n6u8pe1zh().s[7]++;
    return useErrorMetrics;
  }
});
const _react =
/* istanbul ignore next */
(cov_n6u8pe1zh().s[8]++, require("react"));
const _errorboundarymanager =
/* istanbul ignore next */
(cov_n6u8pe1zh().s[9]++, require("../../lib/error-boundary/error-boundary-manager"));
/* istanbul ignore next */
cov_n6u8pe1zh().s[10]++;
const useErrorBoundary = (options =
/* istanbul ignore next */
(cov_n6u8pe1zh().b[0][0]++, {})) => {
  /* istanbul ignore next */
  cov_n6u8pe1zh().f[5]++;
  const {
    onError,
    enableRetry =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[1][0]++, true),
    maxRetries =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[2][0]++, 3),
    retryDelay =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[3][0]++, 1000),
    component =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[4][0]++, 'unknown'),
    level =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[5][0]++, 'component')
  } =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[11]++, options);
  // Estado local
  const [hasError, setHasError] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[12]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[13]++, (0, _react.useState)(null));
  const [retryCount, setRetryCount] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[14]++, (0, _react.useState)(0));
  const [isRetrying, setIsRetrying] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[15]++, (0, _react.useState)(false));
  const [errorMetrics, setErrorMetrics] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[16]++, (0, _react.useState)([]));
  const [healthStatus, setHealthStatus] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[17]++, (0, _react.useState)(_errorboundarymanager.errorBoundaryManager.getHealthStatus()));
  // ===================================
  // CAPTURA DE ERRORES
  // ===================================
  const captureError =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[18]++, (0, _react.useCallback)((error, context =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().b[6][0]++, {})) => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[6]++;
    const errorId =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().s[19]++, `hook_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    // Actualizar estado local
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[20]++;
    setHasError(true);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[21]++;
    setError(error);
    // Reportar al manager
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[22]++;
    _errorboundarymanager.errorBoundaryManager.reportError(error, context, {
      errorId,
      level,
      component,
      retryCount
    });
    // Callback personalizado
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[23]++;
    if (onError) {
      /* istanbul ignore next */
      cov_n6u8pe1zh().b[7][0]++;
      cov_n6u8pe1zh().s[24]++;
      onError(error, {
        ...context,
        errorId,
        component,
        level
      });
    } else
    /* istanbul ignore next */
    {
      cov_n6u8pe1zh().b[7][1]++;
    }
    cov_n6u8pe1zh().s[25]++;
    console.error(`🚨 Error captured by useErrorBoundary (${component}):`, error);
  }, [onError, level, component, retryCount]));
  // ===================================
  // MANEJO DE REINTENTOS
  // ===================================
  const retry =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[26]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[7]++;
    cov_n6u8pe1zh().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[9][0]++, !enableRetry) ||
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[9][1]++, retryCount >= maxRetries)) {
      /* istanbul ignore next */
      cov_n6u8pe1zh().b[8][0]++;
      cov_n6u8pe1zh().s[28]++;
      console.warn('🔄 Retry not available or max retries reached');
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[29]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_n6u8pe1zh().b[8][1]++;
    }
    cov_n6u8pe1zh().s[30]++;
    setIsRetrying(true);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[31]++;
    try {
      // Esperar delay con backoff exponencial
      const delay =
      /* istanbul ignore next */
      (cov_n6u8pe1zh().s[32]++, retryDelay * Math.pow(2, retryCount));
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[33]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_n6u8pe1zh().f[8]++;
        cov_n6u8pe1zh().s[34]++;
        return setTimeout(resolve, delay);
      });
      // Incrementar contador
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[35]++;
      setRetryCount(prev => {
        /* istanbul ignore next */
        cov_n6u8pe1zh().f[9]++;
        cov_n6u8pe1zh().s[36]++;
        return prev + 1;
      });
      // Reset error state
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[37]++;
      setHasError(false);
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[38]++;
      setError(null);
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[39]++;
      console.log(`🔄 Retry attempt ${retryCount + 1} for component ${component}`);
    } catch (retryError) {
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[40]++;
      console.error('❌ Error during retry:', retryError);
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[41]++;
      captureError(retryError, {
        context: 'retry_failed'
      });
    } finally {
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[42]++;
      setIsRetrying(false);
    }
  }, [enableRetry, retryCount, maxRetries, retryDelay, component, captureError]));
  // ===================================
  // RESET
  // ===================================
  const reset =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[43]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[10]++;
    cov_n6u8pe1zh().s[44]++;
    setHasError(false);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[45]++;
    setError(null);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[46]++;
    setRetryCount(0);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[47]++;
    setIsRetrying(false);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[48]++;
    console.log(`🔄 Error boundary reset for component ${component}`);
  }, [component]));
  // ===================================
  // EFECTOS
  // ===================================
  // Listener para métricas de errores
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[49]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[11]++;
    cov_n6u8pe1zh().s[50]++;
    const handleErrorUpdate = errorMetric => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[12]++;
      cov_n6u8pe1zh().s[51]++;
      setErrorMetrics(prev => {
        /* istanbul ignore next */
        cov_n6u8pe1zh().f[13]++;
        cov_n6u8pe1zh().s[52]++;
        return [errorMetric, ...prev.slice(0, 9)];
      }); // Mantener últimos 10
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[53]++;
      setHealthStatus(_errorboundarymanager.errorBoundaryManager.getHealthStatus());
    };
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[54]++;
    _errorboundarymanager.errorBoundaryManager.addErrorListener(handleErrorUpdate);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[55]++;
    return () => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[14]++;
      cov_n6u8pe1zh().s[56]++;
      _errorboundarymanager.errorBoundaryManager.removeErrorListener(handleErrorUpdate);
    };
  }, []);
  // Auto-retry para ciertos tipos de errores
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[57]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[15]++;
    cov_n6u8pe1zh().s[58]++;
    if (
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[11][0]++, hasError) &&
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[11][1]++, error) &&
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[11][2]++, enableRetry) &&
    /* istanbul ignore next */
    (cov_n6u8pe1zh().b[11][3]++, retryCount < maxRetries)) {
      /* istanbul ignore next */
      cov_n6u8pe1zh().b[10][0]++;
      const errorType =
      /* istanbul ignore next */
      (cov_n6u8pe1zh().s[59]++, error.name.toLowerCase());
      // Auto-retry para errores de red
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_n6u8pe1zh().b[13][0]++, errorType.includes('network')) ||
      /* istanbul ignore next */
      (cov_n6u8pe1zh().b[13][1]++, errorType.includes('fetch'))) {
        /* istanbul ignore next */
        cov_n6u8pe1zh().b[12][0]++;
        const autoRetryDelay =
        /* istanbul ignore next */
        (cov_n6u8pe1zh().s[61]++, 2000 + retryCount * 1000);
        const timeoutId =
        /* istanbul ignore next */
        (cov_n6u8pe1zh().s[62]++, setTimeout(retry, autoRetryDelay));
        /* istanbul ignore next */
        cov_n6u8pe1zh().s[63]++;
        return () => {
          /* istanbul ignore next */
          cov_n6u8pe1zh().f[16]++;
          cov_n6u8pe1zh().s[64]++;
          return clearTimeout(timeoutId);
        };
      } else
      /* istanbul ignore next */
      {
        cov_n6u8pe1zh().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_n6u8pe1zh().b[10][1]++;
    }
  }, [hasError, error, enableRetry, retryCount, maxRetries, retry]);
  // Cleanup de métricas antiguas
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[65]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[17]++;
    cov_n6u8pe1zh().s[66]++;
    const cleanup = () => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[18]++;
      cov_n6u8pe1zh().s[67]++;
      _errorboundarymanager.errorBoundaryManager.clearOldErrors();
    };
    const intervalId =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().s[68]++, setInterval(cleanup, 60000)); // Cada minuto
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[69]++;
    return () => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[19]++;
      cov_n6u8pe1zh().s[70]++;
      return clearInterval(intervalId);
    };
  }, []);
  // ===================================
  // RETURN
  // ===================================
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[71]++;
  return {
    // Estado
    hasError,
    error,
    retryCount,
    isRetrying,
    // Acciones
    captureError,
    retry,
    reset,
    // Métricas
    errorMetrics,
    healthStatus
  };
};
/* istanbul ignore next */
cov_n6u8pe1zh().s[72]++;
const useAsyncErrorBoundary = (asyncFn, dependencies =
/* istanbul ignore next */
(cov_n6u8pe1zh().b[14][0]++, []), options =
/* istanbul ignore next */
(cov_n6u8pe1zh().b[15][0]++, {})) => {
  /* istanbul ignore next */
  cov_n6u8pe1zh().f[20]++;
  const errorBoundary =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[73]++, useErrorBoundary(options));
  const [data, setData] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[74]++, (0, _react.useState)(null));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[75]++, (0, _react.useState)(false));
  const execute =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[76]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[21]++;
    cov_n6u8pe1zh().s[77]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[78]++;
    errorBoundary.reset();
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[79]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_n6u8pe1zh().s[80]++, await asyncFn());
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[81]++;
      setData(result);
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[82]++;
      if (options.onSuccess) {
        /* istanbul ignore next */
        cov_n6u8pe1zh().b[16][0]++;
        cov_n6u8pe1zh().s[83]++;
        options.onSuccess(result);
      } else
      /* istanbul ignore next */
      {
        cov_n6u8pe1zh().b[16][1]++;
      }
      cov_n6u8pe1zh().s[84]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[85]++;
      errorBoundary.captureError(error, {
        context: 'async_operation',
        operation:
        /* istanbul ignore next */
        (cov_n6u8pe1zh().b[17][0]++, asyncFn.name) ||
        /* istanbul ignore next */
        (cov_n6u8pe1zh().b[17][1]++, 'anonymous')
      });
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[86]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[87]++;
      setIsLoading(false);
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[88]++;
      if (options.onFinally) {
        /* istanbul ignore next */
        cov_n6u8pe1zh().b[18][0]++;
        cov_n6u8pe1zh().s[89]++;
        options.onFinally();
      } else
      /* istanbul ignore next */
      {
        cov_n6u8pe1zh().b[18][1]++;
      }
    }
  }, [asyncFn, errorBoundary, options]));
  // Auto-execute en cambios de dependencias
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[90]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[22]++;
    cov_n6u8pe1zh().s[91]++;
    execute();
  }, dependencies);
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[92]++;
  return {
    ...errorBoundary,
    data,
    isLoading,
    execute
  };
};
/* istanbul ignore next */
cov_n6u8pe1zh().s[93]++;
const useCriticalErrorBoundary = component => {
  /* istanbul ignore next */
  cov_n6u8pe1zh().f[23]++;
  cov_n6u8pe1zh().s[94]++;
  return useErrorBoundary({
    component,
    level: 'page',
    enableRetry: true,
    maxRetries: 2,
    retryDelay: 2000,
    onError: (error, errorInfo) => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[24]++;
      cov_n6u8pe1zh().s[95]++;
      // Reportar errores críticos inmediatamente
      console.error(`🚨 CRITICAL ERROR in ${component}:`, error);
      // Enviar notificación urgente
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[96]++;
      if (typeof window !== 'undefined') {
        /* istanbul ignore next */
        cov_n6u8pe1zh().b[19][0]++;
        cov_n6u8pe1zh().s[97]++;
        fetch('/api/monitoring/critical-error', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            component,
            error: {
              name: error.name,
              message: error.message,
              stack: error.stack
            },
            errorInfo,
            timestamp: Date.now(),
            url: window.location.href
          })
        }).catch(console.error);
      } else
      /* istanbul ignore next */
      {
        cov_n6u8pe1zh().b[19][1]++;
      }
    }
  });
};
/* istanbul ignore next */
cov_n6u8pe1zh().s[98]++;
const useErrorMetrics = () => {
  /* istanbul ignore next */
  cov_n6u8pe1zh().f[25]++;
  const [metrics, setMetrics] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[99]++, (0, _react.useState)(_errorboundarymanager.errorBoundaryManager.getErrorMetrics()));
  const [healthStatus, setHealthStatus] =
  /* istanbul ignore next */
  (cov_n6u8pe1zh().s[100]++, (0, _react.useState)(_errorboundarymanager.errorBoundaryManager.getHealthStatus()));
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[101]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_n6u8pe1zh().f[26]++;
    cov_n6u8pe1zh().s[102]++;
    const updateMetrics = () => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[27]++;
      cov_n6u8pe1zh().s[103]++;
      setMetrics(_errorboundarymanager.errorBoundaryManager.getErrorMetrics());
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[104]++;
      setHealthStatus(_errorboundarymanager.errorBoundaryManager.getHealthStatus());
    };
    // Actualizar métricas cada 30 segundos
    const intervalId =
    /* istanbul ignore next */
    (cov_n6u8pe1zh().s[105]++, setInterval(updateMetrics, 30000));
    // Listener para actualizaciones inmediatas
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[106]++;
    const handleErrorUpdate = () => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[28]++;
      cov_n6u8pe1zh().s[107]++;
      updateMetrics();
    };
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[108]++;
    _errorboundarymanager.errorBoundaryManager.addErrorListener(handleErrorUpdate);
    /* istanbul ignore next */
    cov_n6u8pe1zh().s[109]++;
    return () => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[29]++;
      cov_n6u8pe1zh().s[110]++;
      clearInterval(intervalId);
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[111]++;
      _errorboundarymanager.errorBoundaryManager.removeErrorListener(handleErrorUpdate);
    };
  }, []);
  /* istanbul ignore next */
  cov_n6u8pe1zh().s[112]++;
  return {
    metrics,
    healthStatus,
    refresh: () => {
      /* istanbul ignore next */
      cov_n6u8pe1zh().f[30]++;
      cov_n6u8pe1zh().s[113]++;
      setMetrics(_errorboundarymanager.errorBoundaryManager.getErrorMetrics());
      /* istanbul ignore next */
      cov_n6u8pe1zh().s[114]++;
      setHealthStatus(_errorboundarymanager.errorBoundaryManager.getHealthStatus());
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,