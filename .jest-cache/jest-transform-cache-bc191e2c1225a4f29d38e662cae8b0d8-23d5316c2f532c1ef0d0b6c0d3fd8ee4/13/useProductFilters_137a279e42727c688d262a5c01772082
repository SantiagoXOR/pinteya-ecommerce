cdcfe18c2aa96a9b5182138b1f23f1a7
// ===================================
// HOOK: useProductFilters - Optimizado para Performance
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProductFilters", {
    enumerable: true,
    get: function() {
        return useProductFilters;
    }
});
const _react = require("react");
const _navigation = require("next/navigation");
// ===================================
// CONSTANTES
// ===================================
const DEFAULT_FILTERS = {
    categories: [],
    brands: [],
    priceMin: undefined,
    priceMax: undefined,
    search: '',
    sortBy: 'created_at',
    page: 1,
    limit: 12
};
function useProductFilters(options = {}) {
    const { syncWithUrl = true, defaultSort = 'created_at', defaultLimit = 12, debounceMs = 300, onFiltersChange } = options;
    const router = (0, _navigation.useRouter)();
    const searchParams = (0, _navigation.useSearchParams)();
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    // Estado de filtros optimizado
    const [filters, setFilters] = (0, _react.useState)(()=>({
            ...DEFAULT_FILTERS,
            sortBy: defaultSort,
            limit: defaultLimit
        }));
    // Inicializar y sincronizar filtros desde URL
    (0, _react.useEffect)(()=>{
        if (!syncWithUrl || !searchParams) {
            return;
        }
        const urlFilters = {
            categories: searchParams.get('categories')?.split(',').filter(Boolean) || [],
            brands: searchParams.get('brands')?.split(',').filter(Boolean) || [],
            priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,
            priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,
            search: searchParams.get('search') || '',
            sortBy: searchParams.get('sortBy') || defaultSort,
            page: Number(searchParams.get('page')) || 1,
            limit: Number(searchParams.get('limit')) || defaultLimit
        };
        setFilters(urlFilters);
    }, [
        searchParams,
        syncWithUrl,
        defaultSort,
        defaultLimit
    ]); // Actualizar cuando cambien los searchParams
    // Función optimizada para actualizar URL
    const updateUrl = (0, _react.useCallback)((newFilters)=>{
        if (!syncWithUrl) {
            return;
        }
        const params = new URLSearchParams();
        // Solo agregar parámetros que tienen valores
        if (newFilters.categories.length > 0) {
            params.set('categories', newFilters.categories.join(','));
        }
        if (newFilters.brands.length > 0) {
            params.set('brands', newFilters.brands.join(','));
        }
        if (newFilters.priceMin !== undefined) {
            params.set('priceMin', newFilters.priceMin.toString());
        }
        if (newFilters.priceMax !== undefined) {
            params.set('priceMax', newFilters.priceMax.toString());
        }
        if (newFilters.search && newFilters.search.trim()) {
            params.set('search', newFilters.search.trim());
        }
        if (newFilters.sortBy !== defaultSort) {
            params.set('sortBy', newFilters.sortBy);
        }
        if (newFilters.page > 1) {
            params.set('page', newFilters.page.toString());
        }
        if (newFilters.limit !== defaultLimit) {
            params.set('limit', newFilters.limit.toString());
        }
        const newQuery = params.toString();
        const currentQuery = window.location.search.slice(1);
        if (newQuery !== currentQuery) {
            const newUrl = newQuery ? `${window.location.pathname}?${newQuery}` : window.location.pathname;
            router.push(newUrl, {
                scroll: false
            });
        }
    }, [
        syncWithUrl,
        router,
        defaultSort,
        defaultLimit
    ]);
    // Función optimizada para actualizar filtros
    const updateFilters = (0, _react.useCallback)((updates)=>{
        setFilters((prev)=>{
            const newFilters = {
                ...prev,
                ...updates
            };
            // Reset page cuando cambian otros filtros (excepto page)
            if (!updates.hasOwnProperty('page') && Object.keys(updates).length > 0) {
                newFilters.page = 1;
            }
            // Actualizar URL de forma asíncrona
            setTimeout(()=>updateUrl(newFilters), 0);
            // Callback opcional
            onFiltersChange?.(newFilters);
            return newFilters;
        });
    }, [
        updateUrl,
        onFiltersChange
    ]);
    // Handlers memoizados para evitar re-renders
    const updateCategories = (0, _react.useCallback)((categories)=>{
        updateFilters({
            categories
        });
    }, [
        updateFilters
    ]);
    const updateBrands = (0, _react.useCallback)((brands)=>{
        updateFilters({
            brands
        });
    }, [
        updateFilters
    ]);
    const updatePriceRange = (0, _react.useCallback)((priceMin, priceMax)=>{
        updateFilters({
            priceMin,
            priceMax
        });
    }, [
        updateFilters
    ]);
    const updateSearch = (0, _react.useCallback)((search)=>{
        updateFilters({
            search
        });
    }, [
        updateFilters
    ]);
    const updateSort = (0, _react.useCallback)((sortBy)=>{
        updateFilters({
            sortBy
        });
    }, [
        updateFilters
    ]);
    const updatePage = (0, _react.useCallback)((page)=>{
        updateFilters({
            page
        });
    }, [
        updateFilters
    ]);
    const updateLimit = (0, _react.useCallback)((limit)=>{
        updateFilters({
            limit
        });
    }, [
        updateFilters
    ]);
    const clearFilters = (0, _react.useCallback)(()=>{
        const clearedFilters = {
            ...DEFAULT_FILTERS,
            sortBy: defaultSort,
            limit: defaultLimit
        };
        setFilters(clearedFilters);
        updateUrl(clearedFilters);
    }, [
        defaultSort,
        defaultLimit,
        updateUrl
    ]);
    const applyFilters = (0, _react.useCallback)(()=>{
        // Forzar actualización de URL
        updateUrl(filters);
        onFiltersChange?.(filters);
    }, [
        filters,
        updateUrl,
        onFiltersChange
    ]);
    // Computed values memoizados
    const hasActiveFilters = (0, _react.useMemo)(()=>{
        return filters.categories.length > 0 || filters.brands.length > 0 || filters.priceMin !== undefined || filters.priceMax !== undefined || filters.search && filters.search.trim() !== '' || filters.sortBy !== defaultSort || filters.page > 1;
    }, [
        filters,
        defaultSort
    ]);
    const totalActiveFilters = (0, _react.useMemo)(()=>{
        let count = 0;
        count += filters.categories.length;
        count += filters.brands.length;
        if (filters.priceMin !== undefined || filters.priceMax !== undefined) {
            count += 1;
        }
        if (filters.search && filters.search.trim() !== '') {
            count += 1;
        }
        return count;
    }, [
        filters
    ]);
    return {
        filters,
        updateCategories,
        updateBrands,
        updatePriceRange,
        updateSearch,
        updateSort,
        updatePage,
        updateLimit,
        clearFilters,
        applyFilters,
        hasActiveFilters,
        totalActiveFilters,
        isLoading
    };
}

//# sourceMappingURL=data:application/json;base64,