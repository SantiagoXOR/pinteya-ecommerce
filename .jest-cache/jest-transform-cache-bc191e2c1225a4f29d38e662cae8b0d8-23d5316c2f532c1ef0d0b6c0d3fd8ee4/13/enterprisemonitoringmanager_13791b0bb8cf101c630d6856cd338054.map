{"version":3,"names":["_default","perfHooks","cov_2mm4eitwes","s","window","b","require","EnterpriseMonitoringManager","constructor","config","f","errors","Map","performanceData","alertRules","activeAlerts","sessionId","generateSessionId","initializeDefaultAlertRules","startPerformanceMonitoring","getInstance","instance","Error","captureError","error","level","context","tags","errorTracking","enabled","Math","random","sampleRate","errorMessage","message","stack","undefined","ignoreErrors","some","pattern","includes","fingerprint","generateErrorFingerprint","errorId","generateErrorId","errorEvent","id","timestamp","Date","url","location","href","userAgent","navigator","count","existingError","Array","from","values","find","e","set","checkErrorAlerts","process","env","NODE_ENV","console","getErrors","filters","filter","timeRange","start","end","component","sort","a","getTime","limit","slice","performance","monitorWebVitals","setInterval","capturePerformanceMetrics","document","addEventListener","visibilityState","PerformanceObserver","entryList","entries","getEntries","lastEntry","length","recordMetric","startTime","observe","entryTypes","forEach","entry","processingStart","clsValue","hadRecentInput","value","metrics","loadTime","getLoadTime","renderTime","getRenderTime","memoryUsage","getMemoryUsage","bundleSize","getBundleSize","apiResponseTime","getAverageApiResponseTime","apiErrorRate","getApiErrorRate","sessionDuration","getSessionDuration","pageViews","getPageViews","bounceRate","getBounceRate","page","pathname","device","getDeviceType","browser","getBrowserType","userId","getUserId","push","checkPerformanceAlerts","log","name","metric","checkMetricAlerts","defaultRules","threshold","operator","severity","cooldown","rule","recentErrors","now","errorRate","triggerAlert","m","Object","metricName","relevantRules","shouldTrigger","evaluateAlertCondition","canTriggerAlert","lastTriggered","cooldownMs","timeSinceLastTrigger","ruleId","alertData","get","alertId","generateAlertId","alert","acknowledged","sendAlertNotifications","warn","alerts","channels","email","join","slack","webhook","toString","substr","content","hash","i","char","charCodeAt","navigation","getEntriesByType","loadEventEnd","loadEventStart","domContentLoadedEventEnd","domContentLoadedEventStart","memory","usedJSHeapSize","parseInt","split","width","innerWidth","getPerformanceMetrics","data","getActiveAlerts","resolvedAt","acknowledgeAlert","resolveAlert","getMonitoringSummary","oneHourAgo","recentMetrics","total","critical","warning","averageLoadTime","reduce","sum","averageMemoryUsage","active","unacknowledged","system","uptime"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-monitoring-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE MONITORING MANAGER\r\n// Sistema de monitoreo enterprise con error tracking, performance y analytics\r\n// ===================================\r\n\r\n// Importar performance hooks solo en servidor\r\nconst perfHooks = typeof window === 'undefined' ? require('perf_hooks') : null;\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES ESPECÍFICAS\r\n// ===================================\r\n\r\n// Tipos base para métricas\r\ntype MetricValue = number;\r\ntype MetricTimestamp = Date;\r\ntype MetricContext = Record<string, string | number | boolean>;\r\n\r\n// Interfaces específicas para Core Web Vitals\r\ninterface CoreWebVitals {\r\n  lcp?: MetricValue; // Largest Contentful Paint\r\n  fid?: MetricValue; // First Input Delay\r\n  cls?: MetricValue; // Cumulative Layout Shift\r\n}\r\n\r\n// Interfaces específicas para métricas personalizadas\r\ninterface CustomPerformanceMetrics {\r\n  loadTime: MetricValue;\r\n  renderTime: MetricValue;\r\n  memoryUsage: MetricValue;\r\n  bundleSize: MetricValue;\r\n}\r\n\r\n// Interfaces específicas para métricas de API\r\ninterface ApiMetrics {\r\n  apiResponseTime: MetricValue;\r\n  apiErrorRate: MetricValue;\r\n}\r\n\r\n// Interfaces específicas para métricas de usuario\r\ninterface UserMetrics {\r\n  sessionDuration: MetricValue;\r\n  pageViews: MetricValue;\r\n  bounceRate: MetricValue;\r\n}\r\n\r\n// Interface específica para contexto de métricas\r\ninterface MetricsContext {\r\n  page: string;\r\n  userId?: string;\r\n  sessionId: string;\r\n  device: string;\r\n  browser: string;\r\n}\r\n\r\ninterface ErrorEvent {\r\n  id: string;\r\n  timestamp: MetricTimestamp;\r\n  message: string;\r\n  stack?: string;\r\n  level: 'info' | 'warning' | 'error' | 'critical';\r\n  context: {\r\n    userId?: string;\r\n    sessionId: string;\r\n    url: string;\r\n    userAgent: string;\r\n    component?: string;\r\n    action?: string;\r\n  };\r\n  tags: string[];\r\n  fingerprint: string;\r\n  count: number;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  timestamp: MetricTimestamp;\r\n  metrics: CoreWebVitals & CustomPerformanceMetrics & ApiMetrics & UserMetrics;\r\n  context: MetricsContext;\r\n}\r\n\r\n// Tipos específicos para alertas\r\ntype AlertSeverity = 'low' | 'medium' | 'high' | 'critical';\r\ntype AlertOperator = '>' | '<' | '=' | '>=' | '<=';\r\ntype AlertMetricName = string;\r\n\r\n// Interface específica para contexto de alertas\r\ninterface AlertContext {\r\n  page?: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  component?: string;\r\n  action?: string;\r\n  metadata?: Record<string, string | number | boolean>;\r\n}\r\n\r\n// Interfaces específicas para configuración de monitoreo\r\ninterface ErrorTrackingConfig {\r\n  enabled: boolean;\r\n  sampleRate: number;\r\n  ignoreErrors: string[];\r\n  maxBreadcrumbs: number;\r\n}\r\n\r\ninterface PerformanceThresholds {\r\n  lcp: MetricValue;\r\n  fid: MetricValue;\r\n  cls: MetricValue;\r\n  loadTime: MetricValue;\r\n}\r\n\r\ninterface PerformanceConfig {\r\n  enabled: boolean;\r\n  sampleRate: number;\r\n  thresholds: PerformanceThresholds;\r\n}\r\n\r\ninterface AlertChannels {\r\n  email?: string[];\r\n  slack?: string;\r\n  webhook?: string;\r\n}\r\n\r\ninterface AlertsConfig {\r\n  enabled: boolean;\r\n  channels: AlertChannels;\r\n}\r\n\r\ninterface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  metric: AlertMetricName;\r\n  threshold: MetricValue;\r\n  operator: AlertOperator;\r\n  severity: AlertSeverity;\r\n  enabled: boolean;\r\n  cooldown: number; // minutes\r\n  lastTriggered?: MetricTimestamp;\r\n}\r\n\r\ninterface AlertEvent {\r\n  id: string;\r\n  ruleId: string;\r\n  timestamp: MetricTimestamp;\r\n  severity: AlertSeverity;\r\n  message: string;\r\n  value: MetricValue;\r\n  threshold: MetricValue;\r\n  context: AlertContext;\r\n  acknowledged: boolean;\r\n  resolvedAt?: MetricTimestamp;\r\n}\r\n\r\ninterface MonitoringConfig {\r\n  errorTracking: ErrorTrackingConfig;\r\n  performance: PerformanceConfig;\r\n  alerts: AlertsConfig;\r\n}\r\n\r\n// ===================================\r\n// INTERFACES\r\n// ===================================\r\n\r\n// Interface para Navigation Timing\r\ninterface NavigationTiming extends PerformanceEntry {\r\n  loadEventEnd: number;\r\n  loadEventStart: number;\r\n  domContentLoadedEventEnd: number;\r\n  domContentLoadedEventStart: number;\r\n}\r\n\r\n// Interface para Performance Memory\r\ninterface PerformanceMemory {\r\n  usedJSHeapSize: number;\r\n}\r\n\r\ninterface PerformanceWithMemory extends Performance {\r\n  memory?: PerformanceMemory;\r\n}\r\n\r\n// ===================================\r\n// ENTERPRISE MONITORING MANAGER\r\n// ===================================\r\n// CLASE PRINCIPAL\r\n// ===================================\r\n\r\nclass EnterpriseMonitoringManager {\r\n  private static instance: EnterpriseMonitoringManager;\r\n  private config: MonitoringConfig;\r\n  private errors: Map<string, ErrorEvent> = new Map();\r\n  private performanceData: PerformanceMetrics[] = [];\r\n  private alertRules: Map<string, AlertRule> = new Map();\r\n  private activeAlerts: Map<string, AlertEvent> = new Map();\r\n  private sessionId: string;\r\n\r\n  constructor(config: MonitoringConfig) {\r\n    this.config = config;\r\n    this.sessionId = this.generateSessionId();\r\n    this.initializeDefaultAlertRules();\r\n    this.startPerformanceMonitoring();\r\n  }\r\n\r\n  static getInstance(config?: MonitoringConfig): EnterpriseMonitoringManager {\r\n    if (!EnterpriseMonitoringManager.instance) {\r\n      if (!config) {\r\n        throw new Error('Configuration required for first initialization');\r\n      }\r\n      EnterpriseMonitoringManager.instance = new EnterpriseMonitoringManager(config);\r\n    }\r\n    return EnterpriseMonitoringManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // ERROR TRACKING\r\n  // ===================================\r\n\r\n  /**\r\n   * Capturar y procesar error\r\n   */\r\n  captureError(\r\n    error: Error | string,\r\n    level: ErrorEvent['level'] = 'error',\r\n    context: Partial<ErrorEvent['context']> = {},\r\n    tags: string[] = []\r\n  ): string {\r\n    if (!this.config.errorTracking.enabled) {\r\n      return '';\r\n    }\r\n\r\n    // Sample rate check\r\n    if (Math.random() > this.config.errorTracking.sampleRate) {\r\n      return '';\r\n    }\r\n\r\n    const errorMessage = typeof error === 'string' ? error : error.message;\r\n    const stack = typeof error === 'string' ? undefined : error.stack;\r\n\r\n    // Check if error should be ignored\r\n    if (this.config.errorTracking.ignoreErrors.some(pattern => \r\n      errorMessage.includes(pattern)\r\n    )) {\r\n      return '';\r\n    }\r\n\r\n    const fingerprint = this.generateErrorFingerprint(errorMessage, stack);\r\n    const errorId = this.generateErrorId();\r\n\r\n    const errorEvent: ErrorEvent = {\r\n      id: errorId,\r\n      timestamp: new Date(),\r\n      message: errorMessage,\r\n      stack,\r\n      level,\r\n      context: {\r\n        sessionId: this.sessionId,\r\n        url: typeof window !== 'undefined' ? window.location.href : '',\r\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\r\n        ...context\r\n      },\r\n      tags,\r\n      fingerprint,\r\n      count: 1\r\n    };\r\n\r\n    // Check if error already exists (deduplication)\r\n    const existingError = Array.from(this.errors.values())\r\n      .find(e => e.fingerprint === fingerprint);\r\n\r\n    if (existingError) {\r\n      existingError.count++;\r\n      existingError.timestamp = new Date();\r\n    } else {\r\n      this.errors.set(errorId, errorEvent);\r\n    }\r\n\r\n    // Check alert rules\r\n    this.checkErrorAlerts(errorEvent);\r\n\r\n    // Log to console in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.error('[Monitoring] Error captured:', errorEvent);\r\n    }\r\n\r\n    return errorId;\r\n  }\r\n\r\n  /**\r\n   * Obtener errores con filtros\r\n   */\r\n  getErrors(filters: {\r\n    level?: ErrorEvent['level'];\r\n    timeRange?: { start: Date; end: Date };\r\n    component?: string;\r\n    limit?: number;\r\n  } = {}): ErrorEvent[] {\r\n    let errors = Array.from(this.errors.values());\r\n\r\n    // Apply filters\r\n    if (filters.level) {\r\n      errors = errors.filter(e => e.level === filters.level);\r\n    }\r\n\r\n    if (filters.timeRange) {\r\n      errors = errors.filter(e => \r\n        e.timestamp >= filters.timeRange!.start && \r\n        e.timestamp <= filters.timeRange!.end\r\n      );\r\n    }\r\n\r\n    if (filters.component) {\r\n      errors = errors.filter(e => e.context.component === filters.component);\r\n    }\r\n\r\n    // Sort by timestamp (newest first)\r\n    errors.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n\r\n    // Apply limit\r\n    if (filters.limit) {\r\n      errors = errors.slice(0, filters.limit);\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  // ===================================\r\n  // PERFORMANCE MONITORING\r\n  // ===================================\r\n\r\n  /**\r\n   * Inicializar monitoreo de performance\r\n   */\r\n  private startPerformanceMonitoring(): void {\r\n    if (!this.config.performance.enabled || typeof window === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    // Monitor Core Web Vitals\r\n    this.monitorWebVitals();\r\n\r\n    // Monitor custom metrics every 30 seconds\r\n    setInterval(() => {\r\n      this.capturePerformanceMetrics();\r\n    }, 30000);\r\n\r\n    // Monitor page visibility changes\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.visibilityState === 'hidden') {\r\n        this.capturePerformanceMetrics();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Monitorear Core Web Vitals\r\n   */\r\n  private monitorWebVitals(): void {\r\n    // LCP - Largest Contentful Paint\r\n    new PerformanceObserver((entryList) => {\r\n      const entries = entryList.getEntries();\r\n      const lastEntry = entries[entries.length - 1];\r\n      this.recordMetric('lcp', lastEntry.startTime);\r\n    }).observe({ entryTypes: ['largest-contentful-paint'] });\r\n\r\n    // FID - First Input Delay\r\n// Interfaces para Performance Observer entries\r\ninterface PerformanceEventTiming extends PerformanceEntry {\r\n  processingStart: number;\r\n  startTime: number;\r\n}\r\n\r\ninterface LayoutShiftEntry extends PerformanceEntry {\r\n  value: number;\r\n  hadRecentInput: boolean;\r\n}\r\n\r\n    new PerformanceObserver((entryList) => {\r\n      const entries = entryList.getEntries();\r\n      entries.forEach((entry: PerformanceEventTiming) => {\r\n        this.recordMetric('fid', entry.processingStart - entry.startTime);\r\n      });\r\n    }).observe({ entryTypes: ['first-input'] });\r\n\r\n    // CLS - Cumulative Layout Shift\r\n    let clsValue = 0;\r\n    new PerformanceObserver((entryList) => {\r\n      const entries = entryList.getEntries();\r\n      entries.forEach((entry: LayoutShiftEntry) => {\r\n        if (!entry.hadRecentInput) {\r\n          clsValue += entry.value;\r\n        }\r\n      });\r\n      this.recordMetric('cls', clsValue);\r\n    }).observe({ entryTypes: ['layout-shift'] });\r\n  }\r\n\r\n  /**\r\n   * Capturar métricas de performance\r\n   */\r\n  capturePerformanceMetrics(): void {\r\n    if (!this.config.performance.enabled) {\r\n      return;\r\n    }\r\n\r\n    // Sample rate check\r\n    if (Math.random() > this.config.performance.sampleRate) {\r\n      return;\r\n    }\r\n\r\n    const metrics: PerformanceMetrics = {\r\n      timestamp: new Date(),\r\n      metrics: {\r\n        loadTime: this.getLoadTime(),\r\n        renderTime: this.getRenderTime(),\r\n        memoryUsage: this.getMemoryUsage(),\r\n        bundleSize: this.getBundleSize(),\r\n        apiResponseTime: this.getAverageApiResponseTime(),\r\n        apiErrorRate: this.getApiErrorRate(),\r\n        sessionDuration: this.getSessionDuration(),\r\n        pageViews: this.getPageViews(),\r\n        bounceRate: this.getBounceRate()\r\n      },\r\n      context: {\r\n        page: typeof window !== 'undefined' ? window.location.pathname : '',\r\n        sessionId: this.sessionId,\r\n        device: this.getDeviceType(),\r\n        browser: this.getBrowserType(),\r\n        userId: this.getUserId()\r\n      }\r\n    };\r\n\r\n    this.performanceData.push(metrics);\r\n\r\n    // Keep only last 1000 entries\r\n    if (this.performanceData.length > 1000) {\r\n      this.performanceData = this.performanceData.slice(-1000);\r\n    }\r\n\r\n    // Check performance alerts\r\n    this.checkPerformanceAlerts(metrics);\r\n\r\n    // Log in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('[Monitoring] Performance metrics captured:', metrics);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registrar métrica específica\r\n   */\r\n  recordMetric(name: string, value: number, context: MetricContext = {}): void {\r\n    const metric = {\r\n      name,\r\n      value,\r\n      timestamp: new Date(),\r\n      context: {\r\n        sessionId: this.sessionId,\r\n        ...context\r\n      }\r\n    };\r\n\r\n    // Check if metric triggers alerts\r\n    this.checkMetricAlerts(name, value);\r\n\r\n    // Log in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`[Monitoring] Metric recorded: ${name} = ${value}`, metric);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // ALERT SYSTEM\r\n  // ===================================\r\n\r\n  /**\r\n   * Inicializar reglas de alerta por defecto\r\n   */\r\n  private initializeDefaultAlertRules(): void {\r\n    const defaultRules: AlertRule[] = [\r\n      {\r\n        id: 'high-error-rate',\r\n        name: 'High Error Rate',\r\n        metric: 'error_rate',\r\n        threshold: 0.05, // 5%\r\n        operator: '>',\r\n        severity: 'high',\r\n        enabled: true,\r\n        cooldown: 15\r\n      },\r\n      {\r\n        id: 'slow-page-load',\r\n        name: 'Slow Page Load',\r\n        metric: 'load_time',\r\n        threshold: 3000, // 3 seconds\r\n        operator: '>',\r\n        severity: 'medium',\r\n        enabled: true,\r\n        cooldown: 10\r\n      },\r\n      {\r\n        id: 'high-memory-usage',\r\n        name: 'High Memory Usage',\r\n        metric: 'memory_usage',\r\n        threshold: 100, // 100MB\r\n        operator: '>',\r\n        severity: 'medium',\r\n        enabled: true,\r\n        cooldown: 20\r\n      },\r\n      {\r\n        id: 'poor-lcp',\r\n        name: 'Poor Largest Contentful Paint',\r\n        metric: 'lcp',\r\n        threshold: 2500, // 2.5 seconds\r\n        operator: '>',\r\n        severity: 'medium',\r\n        enabled: true,\r\n        cooldown: 15\r\n      }\r\n    ];\r\n\r\n    defaultRules.forEach(rule => {\r\n      this.alertRules.set(rule.id, rule);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verificar alertas de errores\r\n   */\r\n  private checkErrorAlerts(errorEvent: ErrorEvent): void {\r\n    // Calculate error rate\r\n    const recentErrors = this.getErrors({\r\n      timeRange: {\r\n        start: new Date(Date.now() - 5 * 60 * 1000), // Last 5 minutes\r\n        end: new Date()\r\n      }\r\n    });\r\n\r\n    const errorRate = recentErrors.length / 100; // Assuming 100 requests per 5 minutes\r\n\r\n    this.checkMetricAlerts('error_rate', errorRate);\r\n\r\n    // Check for critical errors\r\n    if (errorEvent.level === 'critical') {\r\n      this.triggerAlert('critical-error', {\r\n        message: `Critical error occurred: ${errorEvent.message}`,\r\n        value: 1,\r\n        threshold: 0,\r\n        context: errorEvent\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verificar alertas de performance\r\n   */\r\n  private checkPerformanceAlerts(metrics: PerformanceMetrics): void {\r\n    const { metrics: m } = metrics;\r\n\r\n    // Check each metric against alert rules\r\n    Object.entries(m).forEach(([metricName, value]) => {\r\n      if (typeof value === 'number') {\r\n        this.checkMetricAlerts(metricName, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verificar alertas para una métrica específica\r\n   */\r\n  private checkMetricAlerts(metricName: string, value: number): void {\r\n    const relevantRules = Array.from(this.alertRules.values())\r\n      .filter(rule => rule.metric === metricName && rule.enabled);\r\n\r\n    relevantRules.forEach(rule => {\r\n      const shouldTrigger = this.evaluateAlertCondition(rule, value);\r\n      \r\n      if (shouldTrigger && this.canTriggerAlert(rule)) {\r\n        this.triggerAlert(rule.id, {\r\n          message: `${rule.name}: ${metricName} is ${value} (threshold: ${rule.threshold})`,\r\n          value,\r\n          threshold: rule.threshold,\r\n          context: { metricName, rule }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Evaluar condición de alerta\r\n   */\r\n  private evaluateAlertCondition(rule: AlertRule, value: number): boolean {\r\n    switch (rule.operator) {\r\n      case '>': return value > rule.threshold;\r\n      case '<': return value < rule.threshold;\r\n      case '>=': return value >= rule.threshold;\r\n      case '<=': return value <= rule.threshold;\r\n      case '=': return value === rule.threshold;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verificar si se puede disparar alerta (cooldown)\r\n   */\r\n  private canTriggerAlert(rule: AlertRule): boolean {\r\n    if (!rule.lastTriggered) {\r\n      return true;\r\n    }\r\n\r\n    const cooldownMs = rule.cooldown * 60 * 1000;\r\n    const timeSinceLastTrigger = Date.now() - rule.lastTriggered.getTime();\r\n    \r\n    return timeSinceLastTrigger >= cooldownMs;\r\n  }\r\n\r\n  /**\r\n   * Disparar alerta\r\n   */\r\n  private triggerAlert(ruleId: string, alertData: {\r\n    message: string;\r\n    value: number;\r\n    threshold: number;\r\n    context: AlertContext;\r\n  }): void {\r\n    const rule = this.alertRules.get(ruleId);\r\n    if (!rule) {return;}\r\n\r\n    const alertId = this.generateAlertId();\r\n    const alert: AlertEvent = {\r\n      id: alertId,\r\n      ruleId,\r\n      timestamp: new Date(),\r\n      severity: rule.severity,\r\n      message: alertData.message,\r\n      value: alertData.value,\r\n      threshold: alertData.threshold,\r\n      context: alertData.context,\r\n      acknowledged: false\r\n    };\r\n\r\n    this.activeAlerts.set(alertId, alert);\r\n    rule.lastTriggered = new Date();\r\n\r\n    // Send notifications\r\n    this.sendAlertNotifications(alert);\r\n\r\n    console.warn('[Monitoring] Alert triggered:', alert);\r\n  }\r\n\r\n  /**\r\n   * Enviar notificaciones de alerta\r\n   */\r\n  private async sendAlertNotifications(alert: AlertEvent): Promise<void> {\r\n    if (!this.config.alerts.enabled) {\r\n      return;\r\n    }\r\n\r\n    const { channels } = this.config.alerts;\r\n\r\n    // Email notifications\r\n    if (channels.email && channels.email.length > 0) {\r\n      // Implementation would integrate with email service\r\n      console.log(`[Monitoring] Email alert sent to: ${channels.email.join(', ')}`);\r\n    }\r\n\r\n    // Slack notifications\r\n    if (channels.slack) {\r\n      // Implementation would integrate with Slack webhook\r\n      console.log(`[Monitoring] Slack alert sent to: ${channels.slack}`);\r\n    }\r\n\r\n    // Webhook notifications\r\n    if (channels.webhook) {\r\n      try {\r\n        // Implementation would send HTTP POST to webhook\r\n        console.log(`[Monitoring] Webhook alert sent to: ${channels.webhook}`);\r\n      } catch (error) {\r\n        console.error('[Monitoring] Failed to send webhook alert:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // UTILITY METHODS\r\n  // ===================================\r\n\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generateErrorId(): string {\r\n    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generateAlertId(): string {\r\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generateErrorFingerprint(message: string, stack?: string): string {\r\n    const content = `${message}${stack || ''}`;\r\n    // Simple hash function for fingerprinting\r\n    let hash = 0;\r\n    for (let i = 0; i < content.length; i++) {\r\n      const char = content.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return hash.toString(36);\r\n  }\r\n\r\n\r\n\r\n  private getLoadTime(): number {\r\n    if (typeof window === 'undefined') {return 0;}\r\n    const navigation = performance.getEntriesByType('navigation')[0] as NavigationTiming;\r\n    return navigation ? navigation.loadEventEnd - navigation.loadEventStart : 0;\r\n  }\r\n\r\n  private getRenderTime(): number {\r\n    if (typeof window === 'undefined') {return 0;}\r\n    const navigation = performance.getEntriesByType('navigation')[0] as NavigationTiming;\r\n    return navigation ? navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart : 0;\r\n  }\r\n\r\n  private getMemoryUsage(): number {\r\n    if (typeof window === 'undefined' || !(performance as PerformanceWithMemory).memory) {return 0;}\r\n    return (performance as PerformanceWithMemory).memory!.usedJSHeapSize / 1024 / 1024; // MB\r\n  }\r\n\r\n  private getBundleSize(): number {\r\n    // This would be calculated based on loaded resources\r\n    return 0; // Placeholder\r\n  }\r\n\r\n  private getAverageApiResponseTime(): number {\r\n    // This would be calculated from API call metrics\r\n    return 0; // Placeholder\r\n  }\r\n\r\n  private getApiErrorRate(): number {\r\n    // This would be calculated from API call metrics\r\n    return 0; // Placeholder\r\n  }\r\n\r\n  private getSessionDuration(): number {\r\n    return Date.now() - parseInt(this.sessionId.split('_')[1]);\r\n  }\r\n\r\n  private getPageViews(): number {\r\n    // This would be tracked separately\r\n    return 1; // Placeholder\r\n  }\r\n\r\n  private getBounceRate(): number {\r\n    // This would be calculated from user behavior\r\n    return 0; // Placeholder\r\n  }\r\n\r\n  private getDeviceType(): string {\r\n    if (typeof window === 'undefined') {return 'unknown';}\r\n    const width = window.innerWidth;\r\n    if (width < 768) {return 'mobile';}\r\n    if (width < 1024) {return 'tablet';}\r\n    return 'desktop';\r\n  }\r\n\r\n  private getBrowserType(): string {\r\n    if (typeof navigator === 'undefined') {return 'unknown';}\r\n    const userAgent = navigator.userAgent;\r\n    if (userAgent.includes('Chrome')) {return 'chrome';}\r\n    if (userAgent.includes('Firefox')) {return 'firefox';}\r\n    if (userAgent.includes('Safari')) {return 'safari';}\r\n    if (userAgent.includes('Edge')) {return 'edge';}\r\n    return 'other';\r\n  }\r\n\r\n  private getUserId(): string | undefined {\r\n    // This would be retrieved from authentication context\r\n    return undefined; // Placeholder\r\n  }\r\n\r\n  // ===================================\r\n  // PUBLIC API\r\n  // ===================================\r\n\r\n  /**\r\n   * Obtener métricas de performance\r\n   */\r\n  getPerformanceMetrics(timeRange?: { start: Date; end: Date }): PerformanceMetrics[] {\r\n    let data = this.performanceData;\r\n\r\n    if (timeRange) {\r\n      data = data.filter(m => \r\n        m.timestamp >= timeRange.start && m.timestamp <= timeRange.end\r\n      );\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Obtener alertas activas\r\n   */\r\n  getActiveAlerts(): AlertEvent[] {\r\n    return Array.from(this.activeAlerts.values())\r\n      .filter(alert => !alert.resolvedAt)\r\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n  }\r\n\r\n  /**\r\n   * Reconocer alerta\r\n   */\r\n  acknowledgeAlert(alertId: string): boolean {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (alert) {\r\n      alert.acknowledged = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Resolver alerta\r\n   */\r\n  resolveAlert(alertId: string): boolean {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (alert) {\r\n      alert.resolvedAt = new Date();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Obtener resumen de monitoreo\r\n   */\r\n  getMonitoringSummary() {\r\n    const now = new Date();\r\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\r\n\r\n    const recentErrors = this.getErrors({\r\n      timeRange: { start: oneHourAgo, end: now }\r\n    });\r\n\r\n    const recentMetrics = this.getPerformanceMetrics({\r\n      start: oneHourAgo,\r\n      end: now\r\n    });\r\n\r\n    const activeAlerts = this.getActiveAlerts();\r\n\r\n    return {\r\n      errors: {\r\n        total: recentErrors.length,\r\n        critical: recentErrors.filter(e => e.level === 'critical').length,\r\n        warning: recentErrors.filter(e => e.level === 'warning').length\r\n      },\r\n      performance: {\r\n        averageLoadTime: recentMetrics.length > 0 \r\n          ? recentMetrics.reduce((sum, m) => sum + m.metrics.loadTime, 0) / recentMetrics.length \r\n          : 0,\r\n        averageMemoryUsage: recentMetrics.length > 0\r\n          ? recentMetrics.reduce((sum, m) => sum + m.metrics.memoryUsage, 0) / recentMetrics.length\r\n          : 0\r\n      },\r\n      alerts: {\r\n        active: activeAlerts.length,\r\n        critical: activeAlerts.filter(a => a.severity === 'critical').length,\r\n        unacknowledged: activeAlerts.filter(a => !a.acknowledged).length\r\n      },\r\n      system: {\r\n        uptime: this.getSessionDuration(),\r\n        sessionId: this.sessionId\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport default EnterpriseMonitoringManager;\r\n\r\nexport type {\r\n  ErrorEvent,\r\n  PerformanceMetrics,\r\n  AlertRule,\r\n  AlertEvent,\r\n  MonitoringConfig\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsu2BA;AACA;AACA;AAEA;;;;;;WAAAA,QAAA;;;AA12BA,MAAMC,SAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,OAAY,OAAOC,MAAA,KAAW;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,UAAcC,OAAA,CAAQ;AAAA;AAAA,CAAAJ,cAAA,GAAAG,CAAA,UAAgB;AA4K1E;AACA;AACA;AACA;AACA;AAEA,MAAME,2BAAA;EASJC,YAAYC,MAAwB,EAAE;IAAA;IAAAP,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;SAN9BQ,MAAA,GAAkC,IAAIC,GAAA;IAAA;IAAAV,cAAA,GAAAC,CAAA;SACtCU,eAAA,GAAwC,EAAE;IAAA;IAAAX,cAAA,GAAAC,CAAA;SAC1CW,UAAA,GAAqC,IAAIF,GAAA;IAAA;IAAAV,cAAA,GAAAC,CAAA;SACzCY,YAAA,GAAwC,IAAIH,GAAA;IAAA;IAAAV,cAAA,GAAAC,CAAA;IAIlD,IAAI,CAACM,MAAM,GAAGA,MAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IACd,IAAI,CAACa,SAAS,GAAG,IAAI,CAACC,iBAAiB;IAAA;IAAAf,cAAA,GAAAC,CAAA;IACvC,IAAI,CAACe,2BAA2B;IAAA;IAAAhB,cAAA,GAAAC,CAAA;IAChC,IAAI,CAACgB,0BAA0B;EACjC;EAEA,OAAOC,YAAYX,MAAyB,EAA+B;IAAA;IAAAP,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IACzE,IAAI,CAACI,2BAAA,CAA4Bc,QAAQ,EAAE;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACzC,IAAI,CAACM,MAAA,EAAQ;QAAA;QAAAP,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QACX,MAAM,IAAImB,KAAA,CAAM;MAClB;MAAA;MAAA;QAAApB,cAAA,GAAAG,CAAA;MAAA;MAAAH,cAAA,GAAAC,CAAA;MACAI,2BAAA,CAA4Bc,QAAQ,GAAG,IAAId,2BAAA,CAA4BE,MAAA;IACzE;IAAA;IAAA;MAAAP,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IACA,OAAOI,2BAAA,CAA4Bc,QAAQ;EAC7C;EAEA;EACA;EACA;EAEA;;;EAGAE,aACEC,KAAqB,EACrBC,KAAA;EAAA;EAAA,CAAAvB,cAAA,GAAAG,CAAA,UAA6B,OAAO,GACpCqB,OAAA;EAAA;EAAA,CAAAxB,cAAA,GAAAG,CAAA,UAA0C,CAAC,CAAC,GAC5CsB,IAAA;EAAA;EAAA,CAAAzB,cAAA,GAAAG,CAAA,UAAiB,EAAE,GACX;IAAA;IAAAH,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IACR,IAAI,CAAC,IAAI,CAACM,MAAM,CAACmB,aAAa,CAACC,OAAO,EAAE;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACtC,OAAO;IACT;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA;IAAAH,cAAA,GAAAC,CAAA;IACA,IAAI2B,IAAA,CAAKC,MAAM,KAAK,IAAI,CAACtB,MAAM,CAACmB,aAAa,CAACI,UAAU,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACxD,OAAO;IACT;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA,MAAM4B,YAAA;IAAA;IAAA,CAAA/B,cAAA,GAAAC,CAAA,QAAe,OAAOqB,KAAA,KAAU;IAAA;IAAA,CAAAtB,cAAA,GAAAG,CAAA,UAAWmB,KAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAG,CAAA,UAAQmB,KAAA,CAAMU,OAAO;IACtE,MAAMC,KAAA;IAAA;IAAA,CAAAjC,cAAA,GAAAC,CAAA,QAAQ,OAAOqB,KAAA,KAAU;IAAA;IAAA,CAAAtB,cAAA,GAAAG,CAAA,UAAW+B,SAAA;IAAA;IAAA,CAAAlC,cAAA,GAAAG,CAAA,UAAYmB,KAAA,CAAMW,KAAK;IAEjE;IAAA;IAAAjC,cAAA,GAAAC,CAAA;IACA,IAAI,IAAI,CAACM,MAAM,CAACmB,aAAa,CAACS,YAAY,CAACC,IAAI,CAACC,OAAA,IAC9C;MAAA;MAAArC,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAAA,OAAA8B,YAAA,CAAaO,QAAQ,CAACD,OAAA;IAAA,IACrB;MAAA;MAAArC,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACD,OAAO;IACT;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA,MAAMoC,WAAA;IAAA;IAAA,CAAAvC,cAAA,GAAAC,CAAA,QAAc,IAAI,CAACuC,wBAAwB,CAACT,YAAA,EAAcE,KAAA;IAChE,MAAMQ,OAAA;IAAA;IAAA,CAAAzC,cAAA,GAAAC,CAAA,QAAU,IAAI,CAACyC,eAAe;IAEpC,MAAMC,UAAA;IAAA;IAAA,CAAA3C,cAAA,GAAAC,CAAA,QAAyB;MAC7B2C,EAAA,EAAIH,OAAA;MACJI,SAAA,EAAW,IAAIC,IAAA;MACfd,OAAA,EAASD,YAAA;MACTE,KAAA;MACAV,KAAA;MACAC,OAAA,EAAS;QACPV,SAAA,EAAW,IAAI,CAACA,SAAS;QACzBiC,GAAA,EAAK,OAAO7C,MAAA,KAAW;QAAA;QAAA,CAAAF,cAAA,GAAAG,CAAA,WAAcD,MAAA,CAAO8C,QAAQ,CAACC,IAAI;QAAA;QAAA,CAAAjD,cAAA,GAAAG,CAAA,WAAG;QAC5D+C,SAAA,EAAW,OAAOC,SAAA,KAAc;QAAA;QAAA,CAAAnD,cAAA,GAAAG,CAAA,WAAcgD,SAAA,CAAUD,SAAS;QAAA;QAAA,CAAAlD,cAAA,GAAAG,CAAA,WAAG;QACpE,GAAGqB;MACL;MACAC,IAAA;MACAc,WAAA;MACAa,KAAA,EAAO;IACT;IAEA;IACA,MAAMC,aAAA;IAAA;IAAA,CAAArD,cAAA,GAAAC,CAAA,QAAgBqD,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC9C,MAAM,CAAC+C,MAAM,IAChDC,IAAI,CAACC,CAAA,IAAK;MAAA;MAAA1D,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAAA,OAAAyD,CAAA,CAAEnB,WAAW,KAAKA,WAAA;IAAA;IAAA;IAAAvC,cAAA,GAAAC,CAAA;IAE/B,IAAIoD,aAAA,EAAe;MAAA;MAAArD,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACjBoD,aAAA,CAAcD,KAAK;MAAA;MAAApD,cAAA,GAAAC,CAAA;MACnBoD,aAAA,CAAcR,SAAS,GAAG,IAAIC,IAAA;IAChC,OAAO;MAAA;MAAA9C,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACL,IAAI,CAACQ,MAAM,CAACkD,GAAG,CAAClB,OAAA,EAASE,UAAA;IAC3B;IAEA;IAAA;IAAA3C,cAAA,GAAAC,CAAA;IACA,IAAI,CAAC2D,gBAAgB,CAACjB,UAAA;IAEtB;IAAA;IAAA3C,cAAA,GAAAC,CAAA;IACA,IAAI4D,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;MAAA;MAAA/D,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAC1C+D,OAAA,CAAQ1C,KAAK,CAAC,gCAAgCqB,UAAA;IAChD;IAAA;IAAA;MAAA3C,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAEA,OAAOwC,OAAA;EACT;EAEA;;;EAGAwB,UAAUC,OAAA;EAAA;EAAA,CAAAlE,cAAA,GAAAG,CAAA,WAKN,CAAC,CAAC,GAAgB;IAAA;IAAAH,cAAA,GAAAQ,CAAA;IACpB,IAAIC,MAAA;IAAA;IAAA,CAAAT,cAAA,GAAAC,CAAA,QAASqD,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC9C,MAAM,CAAC+C,MAAM;IAE1C;IAAA;IAAAxD,cAAA,GAAAC,CAAA;IACA,IAAIiE,OAAA,CAAQ3C,KAAK,EAAE;MAAA;MAAAvB,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACjBQ,MAAA,GAASA,MAAA,CAAO0D,MAAM,CAACT,CAAA,IAAK;QAAA;QAAA1D,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAC,CAAA;QAAA,OAAAyD,CAAA,CAAEnC,KAAK,KAAK2C,OAAA,CAAQ3C,KAAK;MAAL,CAAK;IACvD;IAAA;IAAA;MAAAvB,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAEA,IAAIiE,OAAA,CAAQE,SAAS,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACrBQ,MAAA,GAASA,MAAA,CAAO0D,MAAM,CAACT,CAAA,IACrB;QAAA;QAAA1D,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAC,CAAA;QAAA,kCAAAD,cAAA,GAAAG,CAAA,WAAAuD,CAAA,CAAEb,SAAS,IAAIqB,OAAA,CAAQE,SAAS,CAAEC,KAAK;QAAA;QAAA,CAAArE,cAAA,GAAAG,CAAA,WACvCuD,CAAA,CAAEb,SAAS,IAAIqB,OAAA,CAAQE,SAAS,CAAEE,GAAG;MAAH,CAAG;IAEzC;IAAA;IAAA;MAAAtE,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAEA,IAAIiE,OAAA,CAAQK,SAAS,EAAE;MAAA;MAAAvE,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACrBQ,MAAA,GAASA,MAAA,CAAO0D,MAAM,CAACT,CAAA,IAAK;QAAA;QAAA1D,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAC,CAAA;QAAA,OAAAyD,CAAA,CAAElC,OAAO,CAAC+C,SAAS,KAAKL,OAAA,CAAQK,SAAS;MAAT,CAAS;IACvE;IAAA;IAAA;MAAAvE,cAAA,GAAAG,CAAA;IAAA;IAEA;IAAAH,cAAA,GAAAC,CAAA;IACAQ,MAAA,CAAO+D,IAAI,CAAC,CAACC,CAAA,EAAGtE,CAAA,KAAM;MAAA;MAAAH,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAAA,OAAAE,CAAA,CAAE0C,SAAS,CAAC6B,OAAO,KAAKD,CAAA,CAAE5B,SAAS,CAAC6B,OAAO;IAAA;IAEjE;IAAA;IAAA1E,cAAA,GAAAC,CAAA;IACA,IAAIiE,OAAA,CAAQS,KAAK,EAAE;MAAA;MAAA3E,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACjBQ,MAAA,GAASA,MAAA,CAAOmE,KAAK,CAAC,GAAGV,OAAA,CAAQS,KAAK;IACxC;IAAA;IAAA;MAAA3E,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAEA,OAAOQ,MAAA;EACT;EAEA;EACA;EACA;EAEA;;;EAGAQ,0BAAQA,CAAA,EAAmC;IAAA;IAAAjB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IACzC;IAAI;IAAA,CAAAD,cAAA,GAAAG,CAAA,YAAC,IAAI,CAACI,MAAM,CAACsE,WAAW,CAAClD,OAAO;IAAA;IAAA,CAAA3B,cAAA,GAAAG,CAAA,WAAI,OAAOD,MAAA,KAAW,cAAa;MAAA;MAAAF,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACrE;IACF;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA;IAAAH,cAAA,GAAAC,CAAA;IACA,IAAI,CAAC6E,gBAAgB;IAErB;IAAA;IAAA9E,cAAA,GAAAC,CAAA;IACA8E,WAAA,CAAY;MAAA;MAAA/E,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MACV,IAAI,CAAC+E,yBAAyB;IAChC,GAAG;IAEH;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IACAgF,QAAA,CAASC,gBAAgB,CAAC,oBAAoB;MAAA;MAAAlF,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAC5C,IAAIgF,QAAA,CAASE,eAAe,KAAK,UAAU;QAAA;QAAAnF,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QACzC,IAAI,CAAC+E,yBAAyB;MAChC;MAAA;MAAA;QAAAhF,cAAA,GAAAG,CAAA;MAAA;IACF;EACF;EAEA;;;EAGA2E,gBAAQA,CAAA,EAAyB;IAAA;IAAA9E,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC/B;IACA,IAAImF,mBAAA,CAAqBC,SAAA;MAAA;MAAArF,cAAA,GAAAQ,CAAA;MACvB,MAAM8E,OAAA;MAAA;MAAA,CAAAtF,cAAA,GAAAC,CAAA,QAAUoF,SAAA,CAAUE,UAAU;MACpC,MAAMC,SAAA;MAAA;MAAA,CAAAxF,cAAA,GAAAC,CAAA,QAAYqF,OAAO,CAACA,OAAA,CAAQG,MAAM,GAAG,EAAE;MAAA;MAAAzF,cAAA,GAAAC,CAAA;MAC7C,IAAI,CAACyF,YAAY,CAAC,OAAOF,SAAA,CAAUG,SAAS;IAC9C,GAAGC,OAAO,CAAC;MAAEC,UAAA,EAAY,CAAC;IAA4B;IAAA;IAAA7F,cAAA,GAAAC,CAAA;IActD,IAAImF,mBAAA,CAAqBC,SAAA;MAAA;MAAArF,cAAA,GAAAQ,CAAA;MACvB,MAAM8E,OAAA;MAAA;MAAA,CAAAtF,cAAA,GAAAC,CAAA,QAAUoF,SAAA,CAAUE,UAAU;MAAA;MAAAvF,cAAA,GAAAC,CAAA;MACpCqF,OAAA,CAAQQ,OAAO,CAAEC,KAAA;QAAA;QAAA/F,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAC,CAAA;QACf,IAAI,CAACyF,YAAY,CAAC,OAAOK,KAAA,CAAMC,eAAe,GAAGD,KAAA,CAAMJ,SAAS;MAClE;IACF,GAAGC,OAAO,CAAC;MAAEC,UAAA,EAAY,CAAC;IAAe;IAEzC;IACA,IAAII,QAAA;IAAA;IAAA,CAAAjG,cAAA,GAAAC,CAAA,QAAW;IAAA;IAAAD,cAAA,GAAAC,CAAA;IACf,IAAImF,mBAAA,CAAqBC,SAAA;MAAA;MAAArF,cAAA,GAAAQ,CAAA;MACvB,MAAM8E,OAAA;MAAA;MAAA,CAAAtF,cAAA,GAAAC,CAAA,QAAUoF,SAAA,CAAUE,UAAU;MAAA;MAAAvF,cAAA,GAAAC,CAAA;MACpCqF,OAAA,CAAQQ,OAAO,CAAEC,KAAA;QAAA;QAAA/F,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAC,CAAA;QACf,IAAI,CAAC8F,KAAA,CAAMG,cAAc,EAAE;UAAA;UAAAlG,cAAA,GAAAG,CAAA;UAAAH,cAAA,GAAAC,CAAA;UACzBgG,QAAA,IAAYF,KAAA,CAAMI,KAAK;QACzB;QAAA;QAAA;UAAAnG,cAAA,GAAAG,CAAA;QAAA;MACF;MAAA;MAAAH,cAAA,GAAAC,CAAA;MACA,IAAI,CAACyF,YAAY,CAAC,OAAOO,QAAA;IAC3B,GAAGL,OAAO,CAAC;MAAEC,UAAA,EAAY,CAAC;IAAgB;EAC5C;EAEA;;;EAGAb,0BAAA,EAAkC;IAAA;IAAAhF,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAChC,IAAI,CAAC,IAAI,CAACM,MAAM,CAACsE,WAAW,CAAClD,OAAO,EAAE;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACpC;IACF;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA;IAAAH,cAAA,GAAAC,CAAA;IACA,IAAI2B,IAAA,CAAKC,MAAM,KAAK,IAAI,CAACtB,MAAM,CAACsE,WAAW,CAAC/C,UAAU,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACtD;IACF;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA,MAAMiG,OAAA;IAAA;IAAA,CAAApG,cAAA,GAAAC,CAAA,QAA8B;MAClC4C,SAAA,EAAW,IAAIC,IAAA;MACfsD,OAAA,EAAS;QACPC,QAAA,EAAU,IAAI,CAACC,WAAW;QAC1BC,UAAA,EAAY,IAAI,CAACC,aAAa;QAC9BC,WAAA,EAAa,IAAI,CAACC,cAAc;QAChCC,UAAA,EAAY,IAAI,CAACC,aAAa;QAC9BC,eAAA,EAAiB,IAAI,CAACC,yBAAyB;QAC/CC,YAAA,EAAc,IAAI,CAACC,eAAe;QAClCC,eAAA,EAAiB,IAAI,CAACC,kBAAkB;QACxCC,SAAA,EAAW,IAAI,CAACC,YAAY;QAC5BC,UAAA,EAAY,IAAI,CAACC,aAAa;MAChC;MACA9F,OAAA,EAAS;QACP+F,IAAA,EAAM,OAAOrH,MAAA,KAAW;QAAA;QAAA,CAAAF,cAAA,GAAAG,CAAA,WAAcD,MAAA,CAAO8C,QAAQ,CAACwE,QAAQ;QAAA;QAAA,CAAAxH,cAAA,GAAAG,CAAA,WAAG;QACjEW,SAAA,EAAW,IAAI,CAACA,SAAS;QACzB2G,MAAA,EAAQ,IAAI,CAACC,aAAa;QAC1BC,OAAA,EAAS,IAAI,CAACC,cAAc;QAC5BC,MAAA,EAAQ,IAAI,CAACC,SAAS;MACxB;IACF;IAAA;IAAA9H,cAAA,GAAAC,CAAA;IAEA,IAAI,CAACU,eAAe,CAACoH,IAAI,CAAC3B,OAAA;IAE1B;IAAA;IAAApG,cAAA,GAAAC,CAAA;IACA,IAAI,IAAI,CAACU,eAAe,CAAC8E,MAAM,GAAG,MAAM;MAAA;MAAAzF,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACtC,IAAI,CAACU,eAAe,GAAG,IAAI,CAACA,eAAe,CAACiE,KAAK,CAAC,CAAC;IACrD;IAAA;IAAA;MAAA5E,cAAA,GAAAG,CAAA;IAAA;IAEA;IAAAH,cAAA,GAAAC,CAAA;IACA,IAAI,CAAC+H,sBAAsB,CAAC5B,OAAA;IAE5B;IAAA;IAAApG,cAAA,GAAAC,CAAA;IACA,IAAI4D,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;MAAA;MAAA/D,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAC1C+D,OAAA,CAAQiE,GAAG,CAAC,8CAA8C7B,OAAA;IAC5D;IAAA;IAAA;MAAApG,cAAA,GAAAG,CAAA;IAAA;EACF;EAEA;;;EAGAuF,aAAawC,IAAY,EAAE/B,KAAa,EAAE3E,OAAA;EAAA;EAAA,CAAAxB,cAAA,GAAAG,CAAA,WAAyB,CAAC,CAAC,GAAQ;IAAA;IAAAH,cAAA,GAAAQ,CAAA;IAC3E,MAAM2H,MAAA;IAAA;IAAA,CAAAnI,cAAA,GAAAC,CAAA,QAAS;MACbiI,IAAA;MACA/B,KAAA;MACAtD,SAAA,EAAW,IAAIC,IAAA;MACftB,OAAA,EAAS;QACPV,SAAA,EAAW,IAAI,CAACA,SAAS;QACzB,GAAGU;MACL;IACF;IAEA;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IACA,IAAI,CAACmI,iBAAiB,CAACF,IAAA,EAAM/B,KAAA;IAE7B;IAAA;IAAAnG,cAAA,GAAAC,CAAA;IACA,IAAI4D,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;MAAA;MAAA/D,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAC1C+D,OAAA,CAAQiE,GAAG,CAAC,iCAAiCC,IAAA,MAAU/B,KAAA,EAAO,EAAEgC,MAAA;IAClE;IAAA;IAAA;MAAAnI,cAAA,GAAAG,CAAA;IAAA;EACF;EAEA;EACA;EACA;EAEA;;;EAGAa,2BAAQA,CAAA,EAAoC;IAAA;IAAAhB,cAAA,GAAAQ,CAAA;IAC1C,MAAM6H,YAAA;IAAA;IAAA,CAAArI,cAAA,GAAAC,CAAA,QAA4B,CAChC;MACE2C,EAAA,EAAI;MACJsF,IAAA,EAAM;MACNC,MAAA,EAAQ;MACRG,SAAA,EAAW;MACXC,QAAA,EAAU;MACVC,QAAA,EAAU;MACV7G,OAAA,EAAS;MACT8G,QAAA,EAAU;IACZ,GACA;MACE7F,EAAA,EAAI;MACJsF,IAAA,EAAM;MACNC,MAAA,EAAQ;MACRG,SAAA,EAAW;MACXC,QAAA,EAAU;MACVC,QAAA,EAAU;MACV7G,OAAA,EAAS;MACT8G,QAAA,EAAU;IACZ,GACA;MACE7F,EAAA,EAAI;MACJsF,IAAA,EAAM;MACNC,MAAA,EAAQ;MACRG,SAAA,EAAW;MACXC,QAAA,EAAU;MACVC,QAAA,EAAU;MACV7G,OAAA,EAAS;MACT8G,QAAA,EAAU;IACZ,GACA;MACE7F,EAAA,EAAI;MACJsF,IAAA,EAAM;MACNC,MAAA,EAAQ;MACRG,SAAA,EAAW;MACXC,QAAA,EAAU;MACVC,QAAA,EAAU;MACV7G,OAAA,EAAS;MACT8G,QAAA,EAAU;IACZ,EACD;IAAA;IAAAzI,cAAA,GAAAC,CAAA;IAEDoI,YAAA,CAAavC,OAAO,CAAC4C,IAAA;MAAA;MAAA1I,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MACnB,IAAI,CAACW,UAAU,CAAC+C,GAAG,CAAC+E,IAAA,CAAK9F,EAAE,EAAE8F,IAAA;IAC/B;EACF;EAEA;;;EAGA9E,gBAAQA,CAAiBjB,UAAsB,EAAQ;IAAA;IAAA3C,cAAA,GAAAQ,CAAA;IACrD;IACA,MAAMmI,YAAA;IAAA;IAAA,CAAA3I,cAAA,GAAAC,CAAA,QAAe,IAAI,CAACgE,SAAS,CAAC;MAClCG,SAAA,EAAW;QACTC,KAAA,EAAO,IAAIvB,IAAA,CAAKA,IAAA,CAAK8F,GAAG,KAAK,IAAI,KAAK;QACtCtE,GAAA,EAAK,IAAIxB,IAAA;MACX;IACF;IAEA,MAAM+F,SAAA;IAAA;IAAA,CAAA7I,cAAA,GAAAC,CAAA,QAAY0I,YAAA,CAAalD,MAAM,GAAG,MAAK;IAAA;IAAAzF,cAAA,GAAAC,CAAA;IAE7C,IAAI,CAACmI,iBAAiB,CAAC,cAAcS,SAAA;IAErC;IAAA;IAAA7I,cAAA,GAAAC,CAAA;IACA,IAAI0C,UAAA,CAAWpB,KAAK,KAAK,YAAY;MAAA;MAAAvB,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACnC,IAAI,CAAC6I,YAAY,CAAC,kBAAkB;QAClC9G,OAAA,EAAS,4BAA4BW,UAAA,CAAWX,OAAO,EAAE;QACzDmE,KAAA,EAAO;QACPmC,SAAA,EAAW;QACX9G,OAAA,EAASmB;MACX;IACF;IAAA;IAAA;MAAA3C,cAAA,GAAAG,CAAA;IAAA;EACF;EAEA;;;EAGA6H,sBAAQA,CAAuB5B,OAA2B,EAAQ;IAAA;IAAApG,cAAA,GAAAQ,CAAA;IAChE,MAAM;MAAE4F,OAAA,EAAS2C;IAAC,CAAE;IAAA;IAAA,CAAA/I,cAAA,GAAAC,CAAA,SAAGmG,OAAA;IAEvB;IAAA;IAAApG,cAAA,GAAAC,CAAA;IACA+I,MAAA,CAAO1D,OAAO,CAACyD,CAAA,EAAGjD,OAAO,CAAC,CAAC,CAACmD,UAAA,EAAY9C,KAAA,CAAM;MAAA;MAAAnG,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAC5C,IAAI,OAAOkG,KAAA,KAAU,UAAU;QAAA;QAAAnG,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAC7B,IAAI,CAACmI,iBAAiB,CAACa,UAAA,EAAY9C,KAAA;MACrC;MAAA;MAAA;QAAAnG,cAAA,GAAAG,CAAA;MAAA;IACF;EACF;EAEA;;;EAGAiI,iBAAQA,CAAkBa,UAAkB,EAAE9C,KAAa,EAAQ;IAAA;IAAAnG,cAAA,GAAAQ,CAAA;IACjE,MAAM0I,aAAA;IAAA;IAAA,CAAAlJ,cAAA,GAAAC,CAAA,SAAgBqD,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC3C,UAAU,CAAC4C,MAAM,IACpDW,MAAM,CAACuE,IAAA,IAAQ;MAAA;MAAA1I,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAAA,kCAAAD,cAAA,GAAAG,CAAA,WAAAuI,IAAA,CAAKP,MAAM,KAAKc,UAAA;MAAA;MAAA,CAAAjJ,cAAA,GAAAG,CAAA,WAAcuI,IAAA,CAAK/G,OAAO;IAAP,CAAO;IAAA;IAAA3B,cAAA,GAAAC,CAAA;IAE5DiJ,aAAA,CAAcpD,OAAO,CAAC4C,IAAA;MAAA;MAAA1I,cAAA,GAAAQ,CAAA;MACpB,MAAM2I,aAAA;MAAA;MAAA,CAAAnJ,cAAA,GAAAC,CAAA,SAAgB,IAAI,CAACmJ,sBAAsB,CAACV,IAAA,EAAMvC,KAAA;MAAA;MAAAnG,cAAA,GAAAC,CAAA;MAExD;MAAI;MAAA,CAAAD,cAAA,GAAAG,CAAA,WAAAgJ,aAAA;MAAA;MAAA,CAAAnJ,cAAA,GAAAG,CAAA,WAAiB,IAAI,CAACkJ,eAAe,CAACX,IAAA,IAAO;QAAA;QAAA1I,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAC/C,IAAI,CAAC6I,YAAY,CAACJ,IAAA,CAAK9F,EAAE,EAAE;UACzBZ,OAAA,EAAS,GAAG0G,IAAA,CAAKR,IAAI,KAAKe,UAAA,OAAiB9C,KAAA,gBAAqBuC,IAAA,CAAKJ,SAAS,GAAG;UACjFnC,KAAA;UACAmC,SAAA,EAAWI,IAAA,CAAKJ,SAAS;UACzB9G,OAAA,EAAS;YAAEyH,UAAA;YAAYP;UAAK;QAC9B;MACF;MAAA;MAAA;QAAA1I,cAAA,GAAAG,CAAA;MAAA;IACF;EACF;EAEA;;;EAGAiJ,sBAAQA,CAAuBV,IAAe,EAAEvC,KAAa,EAAW;IAAA;IAAAnG,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IACtE,QAAQyI,IAAA,CAAKH,QAAQ;MACnB,KAAK;QAAA;QAAAvI,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAAK,OAAOkG,KAAA,GAAQuC,IAAA,CAAKJ,SAAS;MACvC,KAAK;QAAA;QAAAtI,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAAK,OAAOkG,KAAA,GAAQuC,IAAA,CAAKJ,SAAS;MACvC,KAAK;QAAA;QAAAtI,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAAM,OAAOkG,KAAA,IAASuC,IAAA,CAAKJ,SAAS;MACzC,KAAK;QAAA;QAAAtI,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAAM,OAAOkG,KAAA,IAASuC,IAAA,CAAKJ,SAAS;MACzC,KAAK;QAAA;QAAAtI,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAAK,OAAOkG,KAAA,KAAUuC,IAAA,CAAKJ,SAAS;MACzC;QAAA;QAAAtI,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAAS,OAAO;IAClB;EACF;EAEA;;;EAGAoJ,eAAQA,CAAgBX,IAAe,EAAW;IAAA;IAAA1I,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAChD,IAAI,CAACyI,IAAA,CAAKY,aAAa,EAAE;MAAA;MAAAtJ,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACvB,OAAO;IACT;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA,MAAMoJ,UAAA;IAAA;IAAA,CAAAvJ,cAAA,GAAAC,CAAA,SAAayI,IAAA,CAAKD,QAAQ,GAAG,KAAK;IACxC,MAAMe,oBAAA;IAAA;IAAA,CAAAxJ,cAAA,GAAAC,CAAA,SAAuB6C,IAAA,CAAK8F,GAAG,KAAKF,IAAA,CAAKY,aAAa,CAAC5E,OAAO;IAAA;IAAA1E,cAAA,GAAAC,CAAA;IAEpE,OAAOuJ,oBAAA,IAAwBD,UAAA;EACjC;EAEA;;;EAGAT,YAAQA,CAAaW,MAAc,EAAEC,SAKpC,EAAQ;IAAA;IAAA1J,cAAA,GAAAQ,CAAA;IACP,MAAMkI,IAAA;IAAA;IAAA,CAAA1I,cAAA,GAAAC,CAAA,SAAO,IAAI,CAACW,UAAU,CAAC+I,GAAG,CAACF,MAAA;IAAA;IAAAzJ,cAAA,GAAAC,CAAA;IACjC,IAAI,CAACyI,IAAA,EAAM;MAAA;MAAA1I,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC;IAAO;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEnB,MAAMyJ,OAAA;IAAA;IAAA,CAAA5J,cAAA,GAAAC,CAAA,SAAU,IAAI,CAAC4J,eAAe;IACpC,MAAMC,KAAA;IAAA;IAAA,CAAA9J,cAAA,GAAAC,CAAA,SAAoB;MACxB2C,EAAA,EAAIgH,OAAA;MACJH,MAAA;MACA5G,SAAA,EAAW,IAAIC,IAAA;MACf0F,QAAA,EAAUE,IAAA,CAAKF,QAAQ;MACvBxG,OAAA,EAAS0H,SAAA,CAAU1H,OAAO;MAC1BmE,KAAA,EAAOuD,SAAA,CAAUvD,KAAK;MACtBmC,SAAA,EAAWoB,SAAA,CAAUpB,SAAS;MAC9B9G,OAAA,EAASkI,SAAA,CAAUlI,OAAO;MAC1BuI,YAAA,EAAc;IAChB;IAAA;IAAA/J,cAAA,GAAAC,CAAA;IAEA,IAAI,CAACY,YAAY,CAAC8C,GAAG,CAACiG,OAAA,EAASE,KAAA;IAAA;IAAA9J,cAAA,GAAAC,CAAA;IAC/ByI,IAAA,CAAKY,aAAa,GAAG,IAAIxG,IAAA;IAEzB;IAAA;IAAA9C,cAAA,GAAAC,CAAA;IACA,IAAI,CAAC+J,sBAAsB,CAACF,KAAA;IAAA;IAAA9J,cAAA,GAAAC,CAAA;IAE5B+D,OAAA,CAAQiG,IAAI,CAAC,iCAAiCH,KAAA;EAChD;EAEA;;;EAGA,MAAcE,uBAAuBF,KAAiB,EAAiB;IAAA;IAAA9J,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IACrE,IAAI,CAAC,IAAI,CAACM,MAAM,CAAC2J,MAAM,CAACvI,OAAO,EAAE;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAC/B;IACF;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAEA,MAAM;MAAEgK;IAAQ,CAAE;IAAA;IAAA,CAAAnK,cAAA,GAAAC,CAAA,SAAG,IAAI,CAACM,MAAM,CAAC2J,MAAM;IAEvC;IAAA;IAAAlK,cAAA,GAAAC,CAAA;IACA;IAAI;IAAA,CAAAD,cAAA,GAAAG,CAAA,WAAAgK,QAAA,CAASC,KAAK;IAAA;IAAA,CAAApK,cAAA,GAAAG,CAAA,WAAIgK,QAAA,CAASC,KAAK,CAAC3E,MAAM,GAAG,IAAG;MAAA;MAAAzF,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAC/C;MACA+D,OAAA,CAAQiE,GAAG,CAAC,qCAAqCkC,QAAA,CAASC,KAAK,CAACC,IAAI,CAAC,OAAO;IAC9E;IAAA;IAAA;MAAArK,cAAA,GAAAG,CAAA;IAAA;IAEA;IAAAH,cAAA,GAAAC,CAAA;IACA,IAAIkK,QAAA,CAASG,KAAK,EAAE;MAAA;MAAAtK,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAClB;MACA+D,OAAA,CAAQiE,GAAG,CAAC,qCAAqCkC,QAAA,CAASG,KAAK,EAAE;IACnE;IAAA;IAAA;MAAAtK,cAAA,GAAAG,CAAA;IAAA;IAEA;IAAAH,cAAA,GAAAC,CAAA;IACA,IAAIkK,QAAA,CAASI,OAAO,EAAE;MAAA;MAAAvK,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACpB,IAAI;QAAA;QAAAD,cAAA,GAAAC,CAAA;QACF;QACA+D,OAAA,CAAQiE,GAAG,CAAC,uCAAuCkC,QAAA,CAASI,OAAO,EAAE;MACvE,EAAE,OAAOjJ,KAAA,EAAO;QAAA;QAAAtB,cAAA,GAAAC,CAAA;QACd+D,OAAA,CAAQ1C,KAAK,CAAC,8CAA8CA,KAAA;MAC9D;IACF;IAAA;IAAA;MAAAtB,cAAA,GAAAG,CAAA;IAAA;EACF;EAEA;EACA;EACA;EAEQY,kBAAA,EAA4B;IAAA;IAAAf,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAClC,OAAO,WAAW6C,IAAA,CAAK8F,GAAG,MAAMhH,IAAA,CAAKC,MAAM,GAAG2I,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;EAC3E;EAEQ/H,gBAAA,EAA0B;IAAA;IAAA1C,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAChC,OAAO,SAAS6C,IAAA,CAAK8F,GAAG,MAAMhH,IAAA,CAAKC,MAAM,GAAG2I,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;EACzE;EAEQZ,gBAAA,EAA0B;IAAA;IAAA7J,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAChC,OAAO,SAAS6C,IAAA,CAAK8F,GAAG,MAAMhH,IAAA,CAAKC,MAAM,GAAG2I,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;EACzE;EAEQjI,yBAAyBR,OAAe,EAAEC,KAAc,EAAU;IAAA;IAAAjC,cAAA,GAAAQ,CAAA;IACxE,MAAMkK,OAAA;IAAA;IAAA,CAAA1K,cAAA,GAAAC,CAAA,SAAU,GAAG+B,OAAA;IAAU;IAAA,CAAAhC,cAAA,GAAAG,CAAA,WAAA8B,KAAA;IAAA;IAAA,CAAAjC,cAAA,GAAAG,CAAA,WAAS,KAAI;IAC1C;IACA,IAAIwK,IAAA;IAAA;IAAA,CAAA3K,cAAA,GAAAC,CAAA,SAAO;IAAA;IAAAD,cAAA,GAAAC,CAAA;IACX,KAAK,IAAI2K,CAAA;IAAA;IAAA,CAAA5K,cAAA,GAAAC,CAAA,SAAI,IAAG2K,CAAA,GAAIF,OAAA,CAAQjF,MAAM,EAAEmF,CAAA,IAAK;MACvC,MAAMC,IAAA;MAAA;MAAA,CAAA7K,cAAA,GAAAC,CAAA,SAAOyK,OAAA,CAAQI,UAAU,CAACF,CAAA;MAAA;MAAA5K,cAAA,GAAAC,CAAA;MAChC0K,IAAA,GAAO,CAAEA,IAAA,IAAQ,KAAKA,IAAA,GAAQE,IAAA;MAAA;MAAA7K,cAAA,GAAAC,CAAA;MAC9B0K,IAAA,GAAOA,IAAA,GAAOA,IAAA,EAAM;IACtB;IAAA;IAAA3K,cAAA,GAAAC,CAAA;IACA,OAAO0K,IAAA,CAAKH,QAAQ,CAAC;EACvB;EAIQlE,YAAA,EAAsB;IAAA;IAAAtG,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC5B,IAAI,OAAOC,MAAA,KAAW,aAAa;MAAA;MAAAF,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAE;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAC7C,MAAM4K,UAAA;IAAA;IAAA,CAAA/K,cAAA,GAAAC,CAAA,SAAa4E,WAAA,CAAYmG,gBAAgB,CAAC,aAAa,CAAC,EAAE;IAAA;IAAAhL,cAAA,GAAAC,CAAA;IAChE,OAAO8K,UAAA;IAAA;IAAA,CAAA/K,cAAA,GAAAG,CAAA,WAAa4K,UAAA,CAAWE,YAAY,GAAGF,UAAA,CAAWG,cAAc;IAAA;IAAA,CAAAlL,cAAA,GAAAG,CAAA,WAAG;EAC5E;EAEQqG,cAAA,EAAwB;IAAA;IAAAxG,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC9B,IAAI,OAAOC,MAAA,KAAW,aAAa;MAAA;MAAAF,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAE;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAC7C,MAAM4K,UAAA;IAAA;IAAA,CAAA/K,cAAA,GAAAC,CAAA,SAAa4E,WAAA,CAAYmG,gBAAgB,CAAC,aAAa,CAAC,EAAE;IAAA;IAAAhL,cAAA,GAAAC,CAAA;IAChE,OAAO8K,UAAA;IAAA;IAAA,CAAA/K,cAAA,GAAAG,CAAA,WAAa4K,UAAA,CAAWI,wBAAwB,GAAGJ,UAAA,CAAWK,0BAA0B;IAAA;IAAA,CAAApL,cAAA,GAAAG,CAAA,WAAG;EACpG;EAEQuG,eAAA,EAAyB;IAAA;IAAA1G,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC/B;IAAI;IAAA,CAAAD,cAAA,GAAAG,CAAA,kBAAOD,MAAA,KAAW;IAAA;IAAA,CAAAF,cAAA,GAAAG,CAAA,WAAe,CAAC0E,WAAC,CAAsCwG,MAAM,GAAE;MAAA;MAAArL,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAE;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAC/F,OAAO4E,WAAC,CAAsCwG,MAAM,CAAEC,cAAc,GAAG,OAAO,MAAM;EACtF;EAEQ1E,cAAA,EAAwB;IAAA;IAAA5G,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC9B;IACA,OAAO,GAAG;EACZ;EAEQ6G,0BAAA,EAAoC;IAAA;IAAA9G,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC1C;IACA,OAAO,GAAG;EACZ;EAEQ+G,gBAAA,EAA0B;IAAA;IAAAhH,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAChC;IACA,OAAO,GAAG;EACZ;EAEQiH,mBAAA,EAA6B;IAAA;IAAAlH,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IACnC,OAAO6C,IAAA,CAAK8F,GAAG,KAAK2C,QAAA,CAAS,IAAI,CAACzK,SAAS,CAAC0K,KAAK,CAAC,IAAI,CAAC,EAAE;EAC3D;EAEQpE,aAAA,EAAuB;IAAA;IAAApH,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC7B;IACA,OAAO,GAAG;EACZ;EAEQqH,cAAA,EAAwB;IAAA;IAAAtH,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC9B;IACA,OAAO,GAAG;EACZ;EAEQyH,cAAA,EAAwB;IAAA;IAAA1H,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC9B,IAAI,OAAOC,MAAA,KAAW,aAAa;MAAA;MAAAF,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAU;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IACrD,MAAMsL,KAAA;IAAA;IAAA,CAAAzL,cAAA,GAAAC,CAAA,SAAQC,MAAA,CAAOwL,UAAU;IAAA;IAAA1L,cAAA,GAAAC,CAAA;IAC/B,IAAIwL,KAAA,GAAQ,KAAK;MAAA;MAAAzL,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAClC,IAAIwL,KAAA,GAAQ,MAAM;MAAA;MAAAzL,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IACnC,OAAO;EACT;EAEQ2H,eAAA,EAAyB;IAAA;IAAA5H,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC/B,IAAI,OAAOkD,SAAA,KAAc,aAAa;MAAA;MAAAnD,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAU;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IACxD,MAAM+C,SAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAC,CAAA,SAAYkD,SAAA,CAAUD,SAAS;IAAA;IAAAlD,cAAA,GAAAC,CAAA;IACrC,IAAIiD,SAAA,CAAUZ,QAAQ,CAAC,WAAW;MAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IACnD,IAAIiD,SAAA,CAAUZ,QAAQ,CAAC,YAAY;MAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAU;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IACrD,IAAIiD,SAAA,CAAUZ,QAAQ,CAAC,WAAW;MAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IACnD,IAAIiD,SAAA,CAAUZ,QAAQ,CAAC,SAAS;MAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MAAC,OAAO;IAAO;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAC/C,OAAO;EACT;EAEQ6H,UAAA,EAAgC;IAAA;IAAA9H,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IACtC;IACA,OAAOiC,SAAA,EAAW;EACpB;EAEA;EACA;EACA;EAEA;;;EAGAyJ,sBAAsBvH,SAAsC,EAAwB;IAAA;IAAApE,cAAA,GAAAQ,CAAA;IAClF,IAAIoL,IAAA;IAAA;IAAA,CAAA5L,cAAA,GAAAC,CAAA,SAAO,IAAI,CAACU,eAAe;IAAA;IAAAX,cAAA,GAAAC,CAAA;IAE/B,IAAImE,SAAA,EAAW;MAAA;MAAApE,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACb2L,IAAA,GAAOA,IAAA,CAAKzH,MAAM,CAAC4E,CAAA,IACjB;QAAA;QAAA/I,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAC,CAAA;QAAA,kCAAAD,cAAA,GAAAG,CAAA,WAAA4I,CAAA,CAAElG,SAAS,IAAIuB,SAAA,CAAUC,KAAK;QAAA;QAAA,CAAArE,cAAA,GAAAG,CAAA,WAAI4I,CAAA,CAAElG,SAAS,IAAIuB,SAAA,CAAUE,GAAG;MAAH,CAAG;IAElE;IAAA;IAAA;MAAAtE,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAEA,OAAO2L,IAAA;EACT;EAEA;;;EAGAC,gBAAA,EAAgC;IAAA;IAAA7L,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAC,CAAA;IAC9B,OAAOqD,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC1C,YAAY,CAAC2C,MAAM,IACvCW,MAAM,CAAC2F,KAAA,IAAS;MAAA;MAAA9J,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAAA,QAAC6J,KAAA,CAAMgC,UAAU;IAAV,CAAU,EACjCtH,IAAI,CAAC,CAACC,CAAA,EAAGtE,CAAA,KAAM;MAAA;MAAAH,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAC,CAAA;MAAA,OAAAE,CAAA,CAAE0C,SAAS,CAAC6B,OAAO,KAAKD,CAAA,CAAE5B,SAAS,CAAC6B,OAAO;IAAA;EAC/D;EAEA;;;EAGAqH,iBAAiBnC,OAAe,EAAW;IAAA;IAAA5J,cAAA,GAAAQ,CAAA;IACzC,MAAMsJ,KAAA;IAAA;IAAA,CAAA9J,cAAA,GAAAC,CAAA,SAAQ,IAAI,CAACY,YAAY,CAAC8I,GAAG,CAACC,OAAA;IAAA;IAAA5J,cAAA,GAAAC,CAAA;IACpC,IAAI6J,KAAA,EAAO;MAAA;MAAA9J,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACT6J,KAAA,CAAMC,YAAY,GAAG;MAAA;MAAA/J,cAAA,GAAAC,CAAA;MACrB,OAAO;IACT;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IACA,OAAO;EACT;EAEA;;;EAGA+L,aAAapC,OAAe,EAAW;IAAA;IAAA5J,cAAA,GAAAQ,CAAA;IACrC,MAAMsJ,KAAA;IAAA;IAAA,CAAA9J,cAAA,GAAAC,CAAA,SAAQ,IAAI,CAACY,YAAY,CAAC8I,GAAG,CAACC,OAAA;IAAA;IAAA5J,cAAA,GAAAC,CAAA;IACpC,IAAI6J,KAAA,EAAO;MAAA;MAAA9J,cAAA,GAAAG,CAAA;MAAAH,cAAA,GAAAC,CAAA;MACT6J,KAAA,CAAMgC,UAAU,GAAG,IAAIhJ,IAAA;MAAA;MAAA9C,cAAA,GAAAC,CAAA;MACvB,OAAO;IACT;IAAA;IAAA;MAAAD,cAAA,GAAAG,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IACA,OAAO;EACT;EAEA;;;EAGAgM,qBAAA,EAAuB;IAAA;IAAAjM,cAAA,GAAAQ,CAAA;IACrB,MAAMoI,GAAA;IAAA;IAAA,CAAA5I,cAAA,GAAAC,CAAA,SAAM,IAAI6C,IAAA;IAChB,MAAMoJ,UAAA;IAAA;IAAA,CAAAlM,cAAA,GAAAC,CAAA,SAAa,IAAI6C,IAAA,CAAK8F,GAAA,CAAIlE,OAAO,KAAK,KAAK,KAAK;IAEtD,MAAMiE,YAAA;IAAA;IAAA,CAAA3I,cAAA,GAAAC,CAAA,SAAe,IAAI,CAACgE,SAAS,CAAC;MAClCG,SAAA,EAAW;QAAEC,KAAA,EAAO6H,UAAA;QAAY5H,GAAA,EAAKsE;MAAI;IAC3C;IAEA,MAAMuD,aAAA;IAAA;IAAA,CAAAnM,cAAA,GAAAC,CAAA,SAAgB,IAAI,CAAC0L,qBAAqB,CAAC;MAC/CtH,KAAA,EAAO6H,UAAA;MACP5H,GAAA,EAAKsE;IACP;IAEA,MAAM/H,YAAA;IAAA;IAAA,CAAAb,cAAA,GAAAC,CAAA,SAAe,IAAI,CAAC4L,eAAe;IAAA;IAAA7L,cAAA,GAAAC,CAAA;IAEzC,OAAO;MACLQ,MAAA,EAAQ;QACN2L,KAAA,EAAOzD,YAAA,CAAalD,MAAM;QAC1B4G,QAAA,EAAU1D,YAAA,CAAaxE,MAAM,CAACT,CAAA,IAAK;UAAA;UAAA1D,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAC,CAAA;UAAA,OAAAyD,CAAA,CAAEnC,KAAK,KAAK;QAAA,GAAYkE,MAAM;QACjE6G,OAAA,EAAS3D,YAAA,CAAaxE,MAAM,CAACT,CAAA,IAAK;UAAA;UAAA1D,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAC,CAAA;UAAA,OAAAyD,CAAA,CAAEnC,KAAK,KAAK;QAAA,GAAWkE;MAC3D;MACAZ,WAAA,EAAa;QACX0H,eAAA,EAAiBJ,aAAA,CAAc1G,MAAM,GAAG;QAAA;QAAA,CAAAzF,cAAA,GAAAG,CAAA,WACpCgM,aAAA,CAAcK,MAAM,CAAC,CAACC,GAAA,EAAK1D,CAAA,KAAM;UAAA;UAAA/I,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAC,CAAA;UAAA,OAAAwM,GAAA,GAAM1D,CAAA,CAAE3C,OAAO,CAACC,QAAQ;QAAR,CAAQ,EAAE,KAAK8F,aAAA,CAAc1G,MAAM;QAAA;QAAA,CAAAzF,cAAA,GAAAG,CAAA,WACpF;QACJuM,kBAAA,EAAoBP,aAAA,CAAc1G,MAAM,GAAG;QAAA;QAAA,CAAAzF,cAAA,GAAAG,CAAA,WACvCgM,aAAA,CAAcK,MAAM,CAAC,CAACC,GAAA,EAAK1D,CAAA,KAAM;UAAA;UAAA/I,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAC,CAAA;UAAA,OAAAwM,GAAA,GAAM1D,CAAA,CAAE3C,OAAO,CAACK,WAAW;QAAX,CAAW,EAAE,KAAK0F,aAAA,CAAc1G,MAAM;QAAA;QAAA,CAAAzF,cAAA,GAAAG,CAAA,WACvF;MACN;MACA+J,MAAA,EAAQ;QACNyC,MAAA,EAAQ9L,YAAA,CAAa4E,MAAM;QAC3B4G,QAAA,EAAUxL,YAAA,CAAasD,MAAM,CAACM,CAAA,IAAK;UAAA;UAAAzE,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAC,CAAA;UAAA,OAAAwE,CAAA,CAAE+D,QAAQ,KAAK;QAAA,GAAY/C,MAAM;QACpEmH,cAAA,EAAgB/L,YAAA,CAAasD,MAAM,CAACM,CAAA,IAAK;UAAA;UAAAzE,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAC,CAAA;UAAA,QAACwE,CAAA,CAAEsF,YAAY;QAAZ,CAAY,EAAEtE;MAC5D;MACAoH,MAAA,EAAQ;QACNC,MAAA,EAAQ,IAAI,CAAC5F,kBAAkB;QAC/BpG,SAAA,EAAW,IAAI,CAACA;MAClB;IACF;EACF;AACF;MAMAhB,QAAA;AAAA;AAAA,CAAAE,cAAA,GAAAC,CAAA,SAAeI,2BAAA","ignoreList":[]}