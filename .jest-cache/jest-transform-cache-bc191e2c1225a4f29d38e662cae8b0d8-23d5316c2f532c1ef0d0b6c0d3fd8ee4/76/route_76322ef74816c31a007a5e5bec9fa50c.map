{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\deliveries\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para gestión de entregas por parte de los drivers\r\n * GET /api/driver/deliveries - Obtener entregas asignadas\r\n * POST /api/driver/deliveries - Actualizar estado de entrega\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const status = searchParams.get('status'); // pending, in_transit, delivered, exception\r\n    const date = searchParams.get('date'); // YYYY-MM-DD\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Construir query para obtener rutas con entregas\r\n    let query = supabase\r\n      .from('optimized_routes')\r\n      .select('*')\r\n      .eq('driver_id', driver.id);\r\n\r\n    // Filtrar por fecha si se especifica\r\n    if (date) {\r\n      query = query\r\n        .gte('created_at', `${date}T00:00:00.000Z`)\r\n        .lte('created_at', `${date}T23:59:59.999Z`);\r\n    }\r\n\r\n    const { data: routes, error: routesError } = await query;\r\n\r\n    if (routesError) {\r\n      console.error('Error fetching routes:', routesError);\r\n      return NextResponse.json(\r\n        { error: 'Error obteniendo rutas' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Extraer y procesar todas las entregas\r\n    const allDeliveries = [];\r\n    \r\n    for (const route of routes || []) {\r\n      if (route.shipments && Array.isArray(route.shipments)) {\r\n        for (let i = 0; i < route.shipments.length; i++) {\r\n          const shipment = route.shipments[i];\r\n          \r\n          // Filtrar por estado si se especifica\r\n          if (status && shipment.status !== status) {\r\n            continue;\r\n          }\r\n\r\n          const delivery = {\r\n            id: shipment.id || `${route.id}-${i}`,\r\n            route_id: route.id,\r\n            route_name: route.name,\r\n            tracking_number: shipment.tracking_number || `TRK-${route.id.slice(-6)}-${i + 1}`,\r\n            customer_name: shipment.customer_name || `Cliente ${i + 1}`,\r\n            customer_phone: shipment.customer_phone,\r\n            destination: {\r\n              address: shipment.destination?.address || `Dirección ${i + 1}`,\r\n              city: shipment.destination?.city || 'Buenos Aires',\r\n              postal_code: shipment.destination?.postal_code || '1000',\r\n              coordinates: shipment.destination?.coordinates,\r\n              notes: shipment.destination?.notes\r\n            },\r\n            items: shipment.items || [],\r\n            status: shipment.status || 'confirmed',\r\n            estimated_delivery_time: shipment.estimated_delivery_time,\r\n            special_instructions: shipment.special_instructions,\r\n            requires_signature: shipment.requires_signature || false,\r\n            cash_on_delivery: shipment.cash_on_delivery,\r\n            delivery_notes: shipment.delivery_notes,\r\n            delivered_at: shipment.delivered_at,\r\n            delivered_by: shipment.delivered_by,\r\n            created_at: route.created_at,\r\n            updated_at: route.updated_at\r\n          };\r\n\r\n          allDeliveries.push(delivery);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Ordenar por fecha de creación (más recientes primero)\r\n    allDeliveries.sort((a, b) => \r\n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\r\n    );\r\n\r\n    // Estadísticas\r\n    const stats = {\r\n      total: allDeliveries.length,\r\n      pending: allDeliveries.filter(d => d.status === 'pending').length,\r\n      confirmed: allDeliveries.filter(d => d.status === 'confirmed').length,\r\n      in_transit: allDeliveries.filter(d => d.status === 'in_transit').length,\r\n      delivered: allDeliveries.filter(d => d.status === 'delivered').length,\r\n      exception: allDeliveries.filter(d => d.status === 'exception').length\r\n    };\r\n\r\n    return NextResponse.json({\r\n      deliveries: allDeliveries,\r\n      stats,\r\n      driver_id: driver.id\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in driver deliveries API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { \r\n      delivery_id, \r\n      route_id, \r\n      status, \r\n      delivery_notes, \r\n      signature_data,\r\n      photo_evidence,\r\n      location \r\n    } = body;\r\n\r\n    // Validar parámetros requeridos\r\n    if (!delivery_id || !route_id || !status) {\r\n      return NextResponse.json(\r\n        { error: 'delivery_id, route_id y status son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, name')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener la ruta actual\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('*')\r\n      .eq('id', route_id)\r\n      .eq('driver_id', driver.id)\r\n      .single();\r\n\r\n    if (routeError || !route) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Actualizar el shipment específico\r\n    const updatedShipments = route.shipments.map((shipment: any) => {\r\n      if (shipment.id === delivery_id || \r\n          `${route_id}-${route.shipments.indexOf(shipment)}` === delivery_id) {\r\n        \r\n        const updatedShipment = {\r\n          ...shipment,\r\n          status,\r\n          delivery_notes,\r\n          updated_at: new Date().toISOString()\r\n        };\r\n\r\n        // Si se marca como entregado, agregar información adicional\r\n        if (status === 'delivered') {\r\n          updatedShipment.delivered_at = new Date().toISOString();\r\n          updatedShipment.delivered_by = driver.name;\r\n          updatedShipment.delivery_location = location;\r\n          \r\n          if (signature_data) {\r\n            updatedShipment.signature_data = signature_data;\r\n          }\r\n          \r\n          if (photo_evidence) {\r\n            updatedShipment.photo_evidence = photo_evidence;\r\n          }\r\n        }\r\n\r\n        return updatedShipment;\r\n      }\r\n      return shipment;\r\n    });\r\n\r\n    // Actualizar la ruta en la base de datos\r\n    const { data: updatedRoute, error: updateError } = await supabase\r\n      .from('optimized_routes')\r\n      .update({\r\n        shipments: updatedShipments,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', route_id)\r\n      .eq('driver_id', driver.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error updating delivery:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error actualizando entrega' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Verificar si todas las entregas están completadas\r\n    const allDelivered = updatedShipments.every(\r\n      (shipment: any) => shipment.status === 'delivered'\r\n    );\r\n\r\n    // Si todas las entregas están completadas, marcar la ruta como completada\r\n    if (allDelivered) {\r\n      await supabase\r\n        .from('optimized_routes')\r\n        .update({\r\n          status: 'completed',\r\n          completed_at: new Date().toISOString()\r\n        })\r\n        .eq('id', route_id);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      delivery_id,\r\n      status,\r\n      route_completed: allDelivered,\r\n      updated_at: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in driver delivery update API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","POST","runtime","request","session","auth","user","email","NextResponse","json","error","status","searchParams","URL","url","get","date","supabase","createClient","data","driver","driverError","from","select","eq","single","query","id","gte","lte","routes","routesError","console","allDeliveries","route","shipments","Array","isArray","i","length","shipment","delivery","route_id","route_name","name","tracking_number","slice","customer_name","customer_phone","destination","address","city","postal_code","coordinates","notes","items","estimated_delivery_time","special_instructions","requires_signature","cash_on_delivery","delivery_notes","delivered_at","delivered_by","created_at","updated_at","push","sort","a","b","Date","getTime","stats","total","pending","filter","d","confirmed","in_transit","delivered","exception","deliveries","driver_id","body","delivery_id","signature_data","photo_evidence","location","routeError","updatedShipments","map","indexOf","updatedShipment","toISOString","delivery_location","updatedRoute","updateError","update","allDelivered","every","completed_at","success","route_completed"],"mappings":"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"}