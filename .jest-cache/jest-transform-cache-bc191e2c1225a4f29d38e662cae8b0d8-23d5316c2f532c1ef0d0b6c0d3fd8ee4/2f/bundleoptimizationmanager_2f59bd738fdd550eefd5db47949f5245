3f0385de57e612ed18e7f07555d7a9b9
// ===================================
// BUNDLE OPTIMIZATION MANAGER
// ===================================
// Sistema avanzado de optimizaciÃ³n de bundles para Pinteya E-commerce
"use strict";

/* istanbul ignore next */
function cov_1v8kv25k1m() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\bundle-optimization-manager.ts";
  var hash = "a5dc9ba1847a7db75808062b5f8af5ff824b920c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\bundle-optimization-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "3": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 25
        }
      },
      "4": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 16,
          column: 69
        }
      },
      "5": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 6
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 39
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 46
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "9": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 81
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 50
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "12": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "13": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 53
        }
      },
      "14": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "15": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "16": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "17": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 69,
          column: 72
        }
      },
      "18": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 55
        }
      },
      "19": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "20": {
        start: {
          line: 73,
          column: 33
        },
        end: {
          line: 73,
          column: 71
        }
      },
      "21": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 52
        }
      },
      "22": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 28
        }
      },
      "23": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 61
        }
      },
      "24": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 115
        }
      },
      "25": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 66
        }
      },
      "26": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 59
        }
      },
      "27": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 85,
          column: 61
        }
      },
      "28": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 68
        }
      },
      "29": {
        start: {
          line: 87,
          column: 32
        },
        end: {
          line: 87,
          column: 95
        }
      },
      "30": {
        start: {
          line: 88,
          column: 26
        },
        end: {
          line: 88,
          column: 74
        }
      },
      "31": {
        start: {
          line: 88,
          column: 54
        },
        end: {
          line: 88,
          column: 70
        }
      },
      "32": {
        start: {
          line: 89,
          column: 28
        },
        end: {
          line: 89,
          column: 83
        }
      },
      "33": {
        start: {
          line: 89,
          column: 56
        },
        end: {
          line: 89,
          column: 79
        }
      },
      "34": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 97,
          column: 10
        }
      },
      "35": {
        start: {
          line: 100,
          column: 23
        },
        end: {
          line: 100,
          column: 25
        }
      },
      "36": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "37": {
        start: {
          line: 103,
          column: 31
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "38": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "39": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 130,
          column: 19
        }
      },
      "40": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 86
        }
      },
      "41": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 22
        }
      },
      "42": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 153,
          column: 10
        }
      },
      "43": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "44": {
        start: {
          line: 157,
          column: 36
        },
        end: {
          line: 157,
          column: 85
        }
      },
      "45": {
        start: {
          line: 158,
          column: 32
        },
        end: {
          line: 158,
          column: 97
        }
      },
      "46": {
        start: {
          line: 159,
          column: 33
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "47": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 170,
          column: 20
        }
      },
      "48": {
        start: {
          line: 163,
          column: 72
        },
        end: {
          line: 170,
          column: 17
        }
      },
      "49": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 67
        }
      },
      "50": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 22
        }
      },
      "51": {
        start: {
          line: 178,
          column: 24
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "52": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 42
        }
      },
      "53": {
        start: {
          line: 191,
          column: 29
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "54": {
        start: {
          line: 196,
          column: 30
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "55": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "56": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 30
        }
      },
      "57": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "58": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 31
        }
      },
      "59": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 26
        }
      },
      "60": {
        start: {
          line: 210,
          column: 29
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "61": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 40
        }
      },
      "62": {
        start: {
          line: 232,
          column: 32
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "63": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 43
        }
      },
      "64": {
        start: {
          line: 241,
          column: 28
        },
        end: {
          line: 241,
          column: 127
        }
      },
      "65": {
        start: {
          line: 241,
          column: 51
        },
        end: {
          line: 241,
          column: 84
        }
      },
      "66": {
        start: {
          line: 241,
          column: 107
        },
        end: {
          line: 241,
          column: 123
        }
      },
      "67": {
        start: {
          line: 242,
          column: 24
        },
        end: {
          line: 242,
          column: 72
        }
      },
      "68": {
        start: {
          line: 242,
          column: 52
        },
        end: {
          line: 242,
          column: 68
        }
      },
      "69": {
        start: {
          line: 244,
          column: 22
        },
        end: {
          line: 244,
          column: 74
        }
      },
      "70": {
        start: {
          line: 245,
          column: 22
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "71": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 255,
          column: 10
        }
      },
      "72": {
        start: {
          line: 258,
          column: 39
        },
        end: {
          line: 258,
          column: 50
        }
      },
      "73": {
        start: {
          line: 259,
          column: 31
        },
        end: {
          line: 259,
          column: 78
        }
      },
      "74": {
        start: {
          line: 260,
          column: 27
        },
        end: {
          line: 260,
          column: 69
        }
      },
      "75": {
        start: {
          line: 261,
          column: 24
        },
        end: {
          line: 261,
          column: 85
        }
      },
      "76": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 47
        }
      },
      "77": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "78": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 23
        }
      },
      "79": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "80": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 23
        }
      },
      "81": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "82": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 23
        }
      },
      "83": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "84": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 23
        }
      },
      "85": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 19
        }
      },
      "86": {
        start: {
          line: 280,
          column: 32
        },
        end: {
          line: 280,
          column: 34
        }
      },
      "87": {
        start: {
          line: 282,
          column: 28
        },
        end: {
          line: 282,
          column: 89
        }
      },
      "88": {
        start: {
          line: 282,
          column: 51
        },
        end: {
          line: 282,
          column: 88
        }
      },
      "89": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "90": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 291,
          column: 15
        }
      },
      "91": {
        start: {
          line: 294,
          column: 26
        },
        end: {
          line: 294,
          column: 109
        }
      },
      "92": {
        start: {
          line: 294,
          column: 53
        },
        end: {
          line: 294,
          column: 108
        }
      },
      "93": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "94": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "95": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "96": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 314,
          column: 15
        }
      },
      "97": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 324,
          column: 11
        }
      },
      "98": {
        start: {
          line: 317,
          column: 34
        },
        end: {
          line: 322,
          column: 13
        }
      },
      "99": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 73
        }
      },
      "100": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 334,
          column: 9
        }
      },
      "101": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 333,
          column: 13
        }
      },
      "102": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 70
        }
      },
      "103": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "104": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 50
        }
      },
      "105": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 22
        }
      },
      "106": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 47
        }
      },
      "107": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 22
        }
      },
      "108": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 345,
          column: 98
        }
      },
      "109": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 62
        }
      },
      "110": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 47
        }
      },
      "111": {
        start: {
          line: 360,
          column: 23
        },
        end: {
          line: 387,
          column: 1
        }
      },
      "112": {
        start: {
          line: 371,
          column: 31
        },
        end: {
          line: 373,
          column: 1
        }
      },
      "113": {
        start: {
          line: 376,
          column: 53
        },
        end: {
          line: 381,
          column: 1
        }
      },
      "114": {
        start: {
          line: 385,
          column: 62
        },
        end: {
          line: 385,
          column: 81
        }
      },
      "115": {
        start: {
          line: 386,
          column: 82
        },
        end: {
          line: 386,
          column: 111
        }
      },
      "116": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 22
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 9
          },
          end: {
            line: 11,
            column: 10
          }
        },
        loc: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 33
          }
        },
        loc: {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 36
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 28
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 46
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 63
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 43
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 88,
            column: 40
          },
          end: {
            line: 88,
            column: 41
          }
        },
        loc: {
          start: {
            line: 88,
            column: 54
          },
          end: {
            line: 88,
            column: 70
          }
        },
        line: 88
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 42
          },
          end: {
            line: 89,
            column: 43
          }
        },
        loc: {
          start: {
            line: 89,
            column: 56
          },
          end: {
            line: 89,
            column: 79
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 36
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 99
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 41
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 137
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 32
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 155
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 163,
            column: 52
          },
          end: {
            line: 163,
            column: 53
          }
        },
        loc: {
          start: {
            line: 163,
            column: 72
          },
          end: {
            line: 170,
            column: 17
          }
        },
        line: 163
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 33
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 176
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 190
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 30
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 209
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 41
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 230
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 40
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 240
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 241,
            column: 42
          },
          end: {
            line: 241,
            column: 43
          }
        },
        loc: {
          start: {
            line: 241,
            column: 51
          },
          end: {
            line: 241,
            column: 84
          }
        },
        line: 241
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 241,
            column: 93
          },
          end: {
            line: 241,
            column: 94
          }
        },
        loc: {
          start: {
            line: 241,
            column: 107
          },
          end: {
            line: 241,
            column: 123
          }
        },
        line: 241
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 242,
            column: 38
          },
          end: {
            line: 242,
            column: 39
          }
        },
        loc: {
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 242,
            column: 68
          }
        },
        line: 242
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 52
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 257
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 31
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 264
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 279,
            column: 4
          },
          end: {
            line: 279,
            column: 5
          }
        },
        loc: {
          start: {
            line: 279,
            column: 63
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 279
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 282,
            column: 42
          },
          end: {
            line: 282,
            column: 43
          }
        },
        loc: {
          start: {
            line: 282,
            column: 51
          },
          end: {
            line: 282,
            column: 88
          }
        },
        line: 282
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 294,
            column: 46
          },
          end: {
            line: 294,
            column: 47
          }
        },
        loc: {
          start: {
            line: 294,
            column: 53
          },
          end: {
            line: 294,
            column: 108
          }
        },
        line: 294
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 316,
            column: 36
          },
          end: {
            line: 316,
            column: 37
          }
        },
        loc: {
          start: {
            line: 316,
            column: 44
          },
          end: {
            line: 324,
            column: 9
          }
        },
        line: 316
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 46
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 329
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 53
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 336
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 33
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 348
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 30
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 352
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 41
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 359
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 371,
            column: 22
          },
          end: {
            line: 371,
            column: 23
          }
        },
        loc: {
          start: {
            line: 371,
            column: 31
          },
          end: {
            line: 373,
            column: 1
          }
        },
        line: 371
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 376,
            column: 43
          },
          end: {
            line: 376,
            column: 44
          }
        },
        loc: {
          start: {
            line: 376,
            column: 53
          },
          end: {
            line: 381,
            column: 1
          }
        },
        line: 376
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 385,
            column: 57
          },
          end: {
            line: 385,
            column: 58
          }
        },
        loc: {
          start: {
            line: 385,
            column: 62
          },
          end: {
            line: 385,
            column: 81
          }
        },
        line: 385
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 386,
            column: 72
          },
          end: {
            line: 386,
            column: 73
          }
        },
        loc: {
          start: {
            line: 386,
            column: 82
          },
          end: {
            line: 386,
            column: 111
          }
        },
        line: 386
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 20,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 38
          }
        }, {
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 20,
            column: 5
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 14
          }
        }, {
          start: {
            line: 18,
            column: 18
          },
          end: {
            line: 18,
            column: 32
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 25
          },
          end: {
            line: 63,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 37
          },
          end: {
            line: 63,
            column: 44
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 55
          },
          end: {
            line: 79,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 80
          },
          end: {
            line: 79,
            column: 93
          }
        }, {
          start: {
            line: 79,
            column: 96
          },
          end: {
            line: 79,
            column: 111
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 188,
            column: 15
          },
          end: {
            line: 188,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 15
          },
          end: {
            line: 188,
            column: 28
          }
        }, {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 41
          }
        }],
        line: 188
      },
      "8": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "9": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "10": {
        loc: {
          start: {
            line: 228,
            column: 15
          },
          end: {
            line: 228,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 15
          },
          end: {
            line: 228,
            column: 33
          }
        }, {
          start: {
            line: 228,
            column: 37
          },
          end: {
            line: 228,
            column: 39
          }
        }],
        line: 228
      },
      "11": {
        loc: {
          start: {
            line: 238,
            column: 15
          },
          end: {
            line: 238,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 15
          },
          end: {
            line: 238,
            column: 36
          }
        }, {
          start: {
            line: 238,
            column: 40
          },
          end: {
            line: 238,
            column: 42
          }
        }],
        line: 238
      },
      "12": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "13": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "14": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "15": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "16": {
        loc: {
          start: {
            line: 294,
            column: 53
          },
          end: {
            line: 294,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 53
          },
          end: {
            line: 294,
            column: 74
          }
        }, {
          start: {
            line: 294,
            column: 78
          },
          end: {
            line: 294,
            column: 108
          }
        }],
        line: 294
      },
      "17": {
        loc: {
          start: {
            line: 301,
            column: 60
          },
          end: {
            line: 301,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 60
          },
          end: {
            line: 301,
            column: 88
          }
        }, {
          start: {
            line: 301,
            column: 92
          },
          end: {
            line: 301,
            column: 106
          }
        }],
        line: 301
      },
      "18": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "19": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "20": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 338,
            column: 12
          },
          end: {
            line: 340,
            column: 22
          }
        }, {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 343,
            column: 22
          }
        }, {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 345,
            column: 98
          }
        }],
        line: 337
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\bundle-optimization-manager.ts"],
      sourcesContent: ["// ===================================\r\n// BUNDLE OPTIMIZATION MANAGER\r\n// ===================================\r\n// Sistema avanzado de optimizaci\xF3n de bundles para Pinteya E-commerce\r\n\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS\r\n// ===================================\r\n\r\nexport interface BundleAnalysis {\r\n  totalSize: number;\r\n  gzippedSize: number;\r\n  chunks: ChunkInfo[];\r\n  dependencies: DependencyInfo[];\r\n  recommendations: OptimizationRecommendation[];\r\n  performance: PerformanceMetrics;\r\n}\r\n\r\nexport interface ChunkInfo {\r\n  name: string;\r\n  size: number;\r\n  gzippedSize: number;\r\n  modules: ModuleInfo[];\r\n  type: 'vendor' | 'app' | 'shared' | 'dynamic';\r\n  loadPriority: 'critical' | 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport interface ModuleInfo {\r\n  name: string;\r\n  size: number;\r\n  path: string;\r\n  imports: string[];\r\n  exports: string[];\r\n  isTreeShakeable: boolean;\r\n}\r\n\r\nexport interface DependencyInfo {\r\n  name: string;\r\n  version: string;\r\n  size: number;\r\n  usage: 'critical' | 'important' | 'optional' | 'unused';\r\n  alternatives?: string[];\r\n  optimizationPotential: number;\r\n}\r\n\r\nexport interface OptimizationRecommendation {\r\n  type: 'code-splitting' | 'tree-shaking' | 'dependency-replacement' | 'lazy-loading' | 'compression';\r\n  priority: 'critical' | 'high' | 'medium' | 'low';\r\n  description: string;\r\n  estimatedSavings: number;\r\n  implementation: string;\r\n  effort: 'low' | 'medium' | 'high';\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  firstLoadJS: number;\r\n  totalJS: number;\r\n  css: number;\r\n  images: number;\r\n  fonts: number;\r\n  other: number;\r\n  score: number;\r\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\r\n}\r\n\r\nexport interface BundleOptimizationConfig {\r\n  maxChunkSize: number;\r\n  maxFirstLoadSize: number;\r\n  enableTreeShaking: boolean;\r\n  enableCodeSplitting: boolean;\r\n  enableCompression: boolean;\r\n  enableLazyLoading: boolean;\r\n  performanceBudgets: PerformanceBudgets;\r\n}\r\n\r\nexport interface PerformanceBudgets {\r\n  maxBundleSize: number;\r\n  maxFirstLoadJS: number;\r\n  maxCSS: number;\r\n  maxImages: number;\r\n  warningThreshold: number;\r\n  errorThreshold: number;\r\n}\r\n\r\n// ===================================\r\n// BUNDLE OPTIMIZATION MANAGER\r\n// ===================================\r\n\r\nexport class BundleOptimizationManager {\r\n  private static instance: BundleOptimizationManager;\r\n  private config: BundleOptimizationConfig;\r\n  private analysisCache: Map<string, BundleAnalysis> = new Map();\r\n\r\n  private constructor() {\r\n    this.config = this.getDefaultConfig();\r\n  }\r\n\r\n  public static getInstance(): BundleOptimizationManager {\r\n    if (!BundleOptimizationManager.instance) {\r\n      BundleOptimizationManager.instance = new BundleOptimizationManager();\r\n    }\r\n    return BundleOptimizationManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // CONFIGURACI\xD3N\r\n  // ===================================\r\n\r\n  private getDefaultConfig(): BundleOptimizationConfig {\r\n    return {\r\n      maxChunkSize: 250 * 1024, // 250KB\r\n      maxFirstLoadSize: 128 * 1024, // 128KB\r\n      enableTreeShaking: true,\r\n      enableCodeSplitting: true,\r\n      enableCompression: true,\r\n      enableLazyLoading: true,\r\n      performanceBudgets: {\r\n        maxBundleSize: 500 * 1024, // 500KB\r\n        maxFirstLoadJS: 128 * 1024, // 128KB\r\n        maxCSS: 50 * 1024, // 50KB\r\n        maxImages: 200 * 1024, // 200KB\r\n        warningThreshold: 0.8, // 80%\r\n        errorThreshold: 1.0 // 100%\r\n      }\r\n    };\r\n  }\r\n\r\n  public updateConfig(newConfig: Partial<BundleOptimizationConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n\r\n  // ===================================\r\n  // AN\xC1LISIS DE BUNDLES\r\n  // ===================================\r\n\r\n  public async analyzeBundles(buildPath: string = '.next'): Promise<BundleAnalysis> {\r\n    const cacheKey = `${buildPath}-${Date.now()}`;\r\n    \r\n    if (this.analysisCache.has(cacheKey)) {\r\n      return this.analysisCache.get(cacheKey)!;\r\n    }\r\n\r\n    try {\r\n      const analysis = await this.performBundleAnalysis(buildPath);\r\n      this.analysisCache.set(cacheKey, analysis);\r\n      \r\n      // Limpiar cache antiguo\r\n      if (this.analysisCache.size > 5) {\r\n        const firstKey = this.analysisCache.keys().next().value;\r\n        this.analysisCache.delete(firstKey);\r\n      }\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      console.error('Error analyzing bundles:', error);\r\n      throw new Error(`Bundle analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  private async performBundleAnalysis(buildPath: string): Promise<BundleAnalysis> {\r\n    const staticPath = path.join(buildPath, 'static');\r\n    const chunks = await this.analyzeChunks(staticPath);\r\n    const dependencies = await this.analyzeDependencies();\r\n    const performance = this.calculatePerformanceMetrics(chunks);\r\n    const recommendations = this.generateRecommendations(chunks, dependencies, performance);\r\n\r\n    const totalSize = chunks.reduce((sum, chunk) => sum + chunk.size, 0);\r\n    const gzippedSize = chunks.reduce((sum, chunk) => sum + chunk.gzippedSize, 0);\r\n\r\n    return {\r\n      totalSize,\r\n      gzippedSize,\r\n      chunks,\r\n      dependencies,\r\n      recommendations,\r\n      performance\r\n    };\r\n  }\r\n\r\n  private async analyzeChunks(staticPath: string): Promise<ChunkInfo[]> {\r\n    const chunks: ChunkInfo[] = [];\r\n\r\n    try {\r\n      // Simular an\xE1lisis de chunks (en implementaci\xF3n real usar\xEDamos webpack-bundle-analyzer)\r\n      const mockChunks = [\r\n        {\r\n          name: 'main',\r\n          size: 85 * 1024,\r\n          gzippedSize: 28 * 1024,\r\n          type: 'app' as const,\r\n          loadPriority: 'critical' as const\r\n        },\r\n        {\r\n          name: 'vendors',\r\n          size: 180 * 1024,\r\n          gzippedSize: 65 * 1024,\r\n          type: 'vendor' as const,\r\n          loadPriority: 'critical' as const\r\n        },\r\n        {\r\n          name: 'admin',\r\n          size: 120 * 1024,\r\n          gzippedSize: 42 * 1024,\r\n          type: 'dynamic' as const,\r\n          loadPriority: 'medium' as const\r\n        }\r\n      ];\r\n\r\n      for (const mockChunk of mockChunks) {\r\n        chunks.push({\r\n          ...mockChunk,\r\n          modules: await this.analyzeChunkModules(mockChunk.name)\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Could not analyze chunks from filesystem, using mock data');\r\n    }\r\n\r\n    return chunks;\r\n  }\r\n\r\n  private async analyzeChunkModules(chunkName: string): Promise<ModuleInfo[]> {\r\n    // Simular an\xE1lisis de m\xF3dulos\r\n    return [\r\n      {\r\n        name: `${chunkName}-module-1`,\r\n        size: 15 * 1024,\r\n        path: `src/components/${chunkName}`,\r\n        imports: ['react', 'next'],\r\n        exports: ['default'],\r\n        isTreeShakeable: true\r\n      }\r\n    ];\r\n  }\r\n\r\n  private async analyzeDependencies(): Promise<DependencyInfo[]> {\r\n    try {\r\n      const packageJsonPath = path.join(process.cwd(), 'package.json');\r\n      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));\r\n      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\r\n\r\n      return Object.entries(dependencies).map(([name, version]) => ({\r\n        name,\r\n        version: version as string,\r\n        size: this.estimateDependencySize(name),\r\n        usage: this.analyzeDependencyUsage(name),\r\n        alternatives: this.suggestAlternatives(name),\r\n        optimizationPotential: this.calculateOptimizationPotential(name)\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Could not analyze dependencies:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private estimateDependencySize(name: string): number {\r\n    // Estimaciones basadas en dependencias comunes\r\n    const sizeMap: Record<string, number> = {\r\n      'react': 45 * 1024,\r\n      'react-dom': 130 * 1024,\r\n      'next': 200 * 1024,\r\n      'framer-motion': 180 * 1024,\r\n      'recharts': 250 * 1024,\r\n      'maplibre-gl': 400 * 1024,\r\n      'lodash-es': 70 * 1024,\r\n      '@radix-ui/react-dialog': 25 * 1024\r\n    };\r\n\r\n    return sizeMap[name] || 20 * 1024; // Default 20KB\r\n  }\r\n\r\n  private analyzeDependencyUsage(name: string): 'critical' | 'important' | 'optional' | 'unused' {\r\n    const criticalDeps = ['react', 'react-dom', 'next'];\r\n    const importantDeps = ['@supabase/supabase-js', 'zod', 'next-auth'];\r\n    \r\n    if (criticalDeps.includes(name)) {return 'critical';}\r\n    if (importantDeps.includes(name)) {return 'important';}\r\n    return 'optional';\r\n  }\r\n\r\n  private suggestAlternatives(name: string): string[] {\r\n    const alternatives: Record<string, string[]> = {\r\n      'lodash-es': ['ramda', 'native-methods'],\r\n      'moment': ['date-fns', 'dayjs'],\r\n      'recharts': ['chart.js', 'victory'],\r\n      'framer-motion': ['react-spring', 'lottie-react']\r\n    };\r\n\r\n    return alternatives[name] || [];\r\n  }\r\n\r\n  private calculateOptimizationPotential(name: string): number {\r\n    // Porcentaje de optimizaci\xF3n potencial\r\n    const optimizationMap: Record<string, number> = {\r\n      'lodash-es': 60, // Tree shaking potential\r\n      'framer-motion': 40, // Code splitting potential\r\n      'recharts': 50, // Lazy loading potential\r\n      'maplibre-gl': 30 // Compression potential\r\n    };\r\n\r\n    return optimizationMap[name] || 10;\r\n  }\r\n\r\n  private calculatePerformanceMetrics(chunks: ChunkInfo[]): PerformanceMetrics {\r\n    const firstLoadJS = chunks\r\n      .filter(chunk => chunk.loadPriority === 'critical')\r\n      .reduce((sum, chunk) => sum + chunk.size, 0);\r\n\r\n    const totalJS = chunks.reduce((sum, chunk) => sum + chunk.size, 0);\r\n\r\n    // Calcular score basado en performance budgets\r\n    const score = this.calculatePerformanceScore(firstLoadJS, totalJS);\r\n    const grade = this.getPerformanceGrade(score);\r\n\r\n    return {\r\n      firstLoadJS,\r\n      totalJS,\r\n      css: 25 * 1024, // Estimado\r\n      images: 150 * 1024, // Estimado\r\n      fonts: 30 * 1024, // Estimado\r\n      other: 20 * 1024, // Estimado\r\n      score,\r\n      grade\r\n    };\r\n  }\r\n\r\n  private calculatePerformanceScore(firstLoadJS: number, totalJS: number): number {\r\n    const { performanceBudgets } = this.config;\r\n    \r\n    const firstLoadRatio = firstLoadJS / performanceBudgets.maxFirstLoadJS;\r\n    const totalRatio = totalJS / performanceBudgets.maxBundleSize;\r\n    \r\n    const penalty = Math.max(firstLoadRatio - 1, 0) + Math.max(totalRatio - 1, 0);\r\n    return Math.max(100 - (penalty * 50), 0);\r\n  }\r\n\r\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\r\n    if (score >= 90) {return 'A';}\r\n    if (score >= 80) {return 'B';}\r\n    if (score >= 70) {return 'C';}\r\n    if (score >= 60) {return 'D';}\r\n    return 'F';\r\n  }\r\n\r\n  private generateRecommendations(\r\n    chunks: ChunkInfo[],\r\n    dependencies: DependencyInfo[],\r\n    performance: PerformanceMetrics\r\n  ): OptimizationRecommendation[] {\r\n    const recommendations: OptimizationRecommendation[] = [];\r\n\r\n    // Recomendaciones basadas en tama\xF1o de chunks\r\n    const largeChunks = chunks.filter(chunk => chunk.size > this.config.maxChunkSize);\r\n    for (const chunk of largeChunks) {\r\n      recommendations.push({\r\n        type: 'code-splitting',\r\n        priority: 'high',\r\n        description: `Chunk '${chunk.name}' es demasiado grande (${Math.round(chunk.size / 1024)}KB)`,\r\n        estimatedSavings: chunk.size * 0.3,\r\n        implementation: `Dividir ${chunk.name} en chunks m\xE1s peque\xF1os usando dynamic imports`,\r\n        effort: 'medium'\r\n      });\r\n    }\r\n\r\n    // Recomendaciones basadas en dependencias\r\n    const heavyDeps = dependencies.filter(dep => dep.size > 100 * 1024 && dep.optimizationPotential > 30);\r\n    for (const dep of heavyDeps) {\r\n      recommendations.push({\r\n        type: 'dependency-replacement',\r\n        priority: 'medium',\r\n        description: `Dependencia '${dep.name}' es pesada y tiene potencial de optimizaci\xF3n`,\r\n        estimatedSavings: dep.size * (dep.optimizationPotential / 100),\r\n        implementation: `Considerar alternativas: ${dep.alternatives?.join(', ') || 'tree shaking'}`,\r\n        effort: 'high'\r\n      });\r\n    }\r\n\r\n    // Recomendaciones basadas en performance\r\n    if (performance.firstLoadJS > this.config.performanceBudgets.maxFirstLoadJS) {\r\n      recommendations.push({\r\n        type: 'lazy-loading',\r\n        priority: 'critical',\r\n        description: 'First Load JS excede el presupuesto de performance',\r\n        estimatedSavings: performance.firstLoadJS - this.config.performanceBudgets.maxFirstLoadJS,\r\n        implementation: 'Implementar lazy loading para componentes no cr\xEDticos',\r\n        effort: 'low'\r\n      });\r\n    }\r\n\r\n    return recommendations.sort((a, b) => {\r\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\r\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n    });\r\n  }\r\n\r\n  // ===================================\r\n  // OPTIMIZACIONES AUTOM\xC1TICAS\r\n  // ===================================\r\n\r\n  public async applyOptimizations(recommendations: OptimizationRecommendation[]): Promise<void> {\r\n    for (const recommendation of recommendations) {\r\n      if (recommendation.effort === 'low') {\r\n        await this.applyLowEffortOptimization(recommendation);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async applyLowEffortOptimization(recommendation: OptimizationRecommendation): Promise<void> {\r\n    switch (recommendation.type) {\r\n      case 'lazy-loading':\r\n        await this.implementLazyLoading();\r\n        break;\r\n      case 'compression':\r\n        await this.enableCompression();\r\n        break;\r\n      default:\r\n        console.log(`Optimization ${recommendation.type} requires manual implementation`);\r\n    }\r\n  }\r\n\r\n  private async implementLazyLoading(): Promise<void> {\r\n    // Implementar lazy loading autom\xE1tico para componentes pesados\r\n    console.log('Implementing automatic lazy loading...');\r\n  }\r\n\r\n  private async enableCompression(): Promise<void> {\r\n    // Habilitar compresi\xF3n autom\xE1tica\r\n    console.log('Enabling compression...');\r\n  }\r\n\r\n  // ===================================\r\n  // REPORTES Y M\xC9TRICAS\r\n  // ===================================\r\n\r\n  public generateOptimizationReport(analysis: BundleAnalysis): string {\r\n    const report = `\r\n# Bundle Optimization Report\r\n\r\n## Performance Metrics\r\n- **Score**: ${analysis.performance.score}/100 (Grade: ${analysis.performance.grade})\r\n- **First Load JS**: ${Math.round(analysis.performance.firstLoadJS / 1024)}KB\r\n- **Total JS**: ${Math.round(analysis.performance.totalJS / 1024)}KB\r\n- **Total Bundle Size**: ${Math.round(analysis.totalSize / 1024)}KB\r\n- **Gzipped Size**: ${Math.round(analysis.gzippedSize / 1024)}KB\r\n\r\n## Chunks Analysis\r\n${analysis.chunks.map(chunk => `\r\n- **${chunk.name}**: ${Math.round(chunk.size / 1024)}KB (${chunk.type}, ${chunk.loadPriority} priority)\r\n`).join('')}\r\n\r\n## Top Recommendations\r\n${analysis.recommendations.slice(0, 5).map((rec, i) => `\r\n${i + 1}. **${rec.type}** (${rec.priority} priority)\r\n   - ${rec.description}\r\n   - Estimated savings: ${Math.round(rec.estimatedSavings / 1024)}KB\r\n   - Implementation: ${rec.implementation}\r\n`).join('')}\r\n\r\n## Dependencies Analysis\r\n- **Total Dependencies**: ${analysis.dependencies.length}\r\n- **Heavy Dependencies**: ${analysis.dependencies.filter(d => d.size > 100 * 1024).length}\r\n- **Optimization Potential**: ${Math.round(analysis.dependencies.reduce((sum, d) => sum + d.optimizationPotential, 0) / analysis.dependencies.length)}%\r\n`;\r\n\r\n    return report;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["BundleOptimizationManager", "analysisCache", "Map", "config", "getDefaultConfig", "getInstance", "instance", "maxChunkSize", "maxFirstLoadSize", "enableTreeShaking", "enableCodeSplitting", "enableCompression", "enableLazyLoading", "performanceBudgets", "maxBundleSize", "maxFirstLoadJS", "maxCSS", "maxImages", "warningThreshold", "errorThreshold", "updateConfig", "newConfig", "analyzeBundles", "buildPath", "cacheKey", "Date", "now", "has", "get", "analysis", "performBundleAnalysis", "set", "size", "firstKey", "keys", "next", "value", "delete", "error", "console", "Error", "message", "staticPath", "path", "join", "chunks", "analyzeChunks", "dependencies", "analyzeDependencies", "performance", "calculatePerformanceMetrics", "recommendations", "generateRecommendations", "totalSize", "reduce", "sum", "chunk", "gzippedSize", "mockChunks", "name", "type", "loadPriority", "mockChunk", "push", "modules", "analyzeChunkModules", "warn", "chunkName", "imports", "exports", "isTreeShakeable", "packageJsonPath", "process", "cwd", "packageJson", "JSON", "parse", "fs", "readFile", "devDependencies", "Object", "entries", "map", "version", "estimateDependencySize", "usage", "analyzeDependencyUsage", "alternatives", "suggestAlternatives", "optimizationPotential", "calculateOptimizationPotential", "sizeMap", "criticalDeps", "importantDeps", "includes", "optimizationMap", "firstLoadJS", "filter", "totalJS", "score", "calculatePerformanceScore", "grade", "getPerformanceGrade", "css", "images", "fonts", "other", "firstLoadRatio", "totalRatio", "penalty", "Math", "max", "largeChunks", "priority", "description", "round", "estimatedSavings", "implementation", "effort", "heavyDeps", "dep", "sort", "a", "b", "priorityOrder", "critical", "high", "medium", "low", "applyOptimizations", "recommendation", "applyLowEffortOptimization", "implementLazyLoading", "log", "generateOptimizationReport", "report", "slice", "rec", "i", "length", "d"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a5dc9ba1847a7db75808062b5f8af5ff824b920c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v8kv25k1m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1v8kv25k1m();
cov_1v8kv25k1m().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1v8kv25k1m().s[1]++;
Object.defineProperty(exports, "BundleOptimizationManager", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[0]++;
    cov_1v8kv25k1m().s[2]++;
    return BundleOptimizationManager;
  }
});
const _fs =
/* istanbul ignore next */
(cov_1v8kv25k1m().s[3]++, require("fs"));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_1v8kv25k1m().s[4]++, _interop_require_default(require("path")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1v8kv25k1m().f[1]++;
  cov_1v8kv25k1m().s[5]++;
  return /* istanbul ignore next */(cov_1v8kv25k1m().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1v8kv25k1m().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1v8kv25k1m().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1v8kv25k1m().b[0][1]++, {
    default: obj
  });
}
class BundleOptimizationManager {
  constructor() {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[2]++;
    cov_1v8kv25k1m().s[6]++;
    this.analysisCache = new Map();
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[7]++;
    this.config = this.getDefaultConfig();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[3]++;
    cov_1v8kv25k1m().s[8]++;
    if (!BundleOptimizationManager.instance) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[2][0]++;
      cov_1v8kv25k1m().s[9]++;
      BundleOptimizationManager.instance = new BundleOptimizationManager();
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[2][1]++;
    }
    cov_1v8kv25k1m().s[10]++;
    return BundleOptimizationManager.instance;
  }
  // ===================================
  // CONFIGURACIÃN
  // ===================================
  getDefaultConfig() {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[4]++;
    cov_1v8kv25k1m().s[11]++;
    return {
      maxChunkSize: 250 * 1024,
      maxFirstLoadSize: 128 * 1024,
      enableTreeShaking: true,
      enableCodeSplitting: true,
      enableCompression: true,
      enableLazyLoading: true,
      performanceBudgets: {
        maxBundleSize: 500 * 1024,
        maxFirstLoadJS: 128 * 1024,
        maxCSS: 50 * 1024,
        maxImages: 200 * 1024,
        warningThreshold: 0.8,
        errorThreshold: 1.0 // 100%
      }
    };
  }
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[5]++;
    cov_1v8kv25k1m().s[12]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
  }
  // ===================================
  // ANÃLISIS DE BUNDLES
  // ===================================
  async analyzeBundles(buildPath =
  /* istanbul ignore next */
  (cov_1v8kv25k1m().b[3][0]++, '.next')) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[6]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[13]++, `${buildPath}-${Date.now()}`);
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[14]++;
    if (this.analysisCache.has(cacheKey)) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[4][0]++;
      cov_1v8kv25k1m().s[15]++;
      return this.analysisCache.get(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[4][1]++;
    }
    cov_1v8kv25k1m().s[16]++;
    try {
      const analysis =
      /* istanbul ignore next */
      (cov_1v8kv25k1m().s[17]++, await this.performBundleAnalysis(buildPath));
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[18]++;
      this.analysisCache.set(cacheKey, analysis);
      // Limpiar cache antiguo
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[19]++;
      if (this.analysisCache.size > 5) {
        /* istanbul ignore next */
        cov_1v8kv25k1m().b[5][0]++;
        const firstKey =
        /* istanbul ignore next */
        (cov_1v8kv25k1m().s[20]++, this.analysisCache.keys().next().value);
        /* istanbul ignore next */
        cov_1v8kv25k1m().s[21]++;
        this.analysisCache.delete(firstKey);
      } else
      /* istanbul ignore next */
      {
        cov_1v8kv25k1m().b[5][1]++;
      }
      cov_1v8kv25k1m().s[22]++;
      return analysis;
    } catch (error) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[23]++;
      console.error('Error analyzing bundles:', error);
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[24]++;
      throw new Error(`Bundle analysis failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1v8kv25k1m().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1v8kv25k1m().b[6][1]++, 'Unknown error')}`);
    }
  }
  async performBundleAnalysis(buildPath) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[7]++;
    const staticPath =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[25]++, _path.default.join(buildPath, 'static'));
    const chunks =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[26]++, await this.analyzeChunks(staticPath));
    const dependencies =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[27]++, await this.analyzeDependencies());
    const performance =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[28]++, this.calculatePerformanceMetrics(chunks));
    const recommendations =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[29]++, this.generateRecommendations(chunks, dependencies, performance));
    const totalSize =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[30]++, chunks.reduce((sum, chunk) => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[8]++;
      cov_1v8kv25k1m().s[31]++;
      return sum + chunk.size;
    }, 0));
    const gzippedSize =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[32]++, chunks.reduce((sum, chunk) => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[9]++;
      cov_1v8kv25k1m().s[33]++;
      return sum + chunk.gzippedSize;
    }, 0));
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[34]++;
    return {
      totalSize,
      gzippedSize,
      chunks,
      dependencies,
      recommendations,
      performance
    };
  }
  async analyzeChunks(staticPath) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[10]++;
    const chunks =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[35]++, []);
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[36]++;
    try {
      // Simular anÃ¡lisis de chunks (en implementaciÃ³n real usarÃ­amos webpack-bundle-analyzer)
      const mockChunks =
      /* istanbul ignore next */
      (cov_1v8kv25k1m().s[37]++, [{
        name: 'main',
        size: 85 * 1024,
        gzippedSize: 28 * 1024,
        type: 'app',
        loadPriority: 'critical'
      }, {
        name: 'vendors',
        size: 180 * 1024,
        gzippedSize: 65 * 1024,
        type: 'vendor',
        loadPriority: 'critical'
      }, {
        name: 'admin',
        size: 120 * 1024,
        gzippedSize: 42 * 1024,
        type: 'dynamic',
        loadPriority: 'medium'
      }]);
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[38]++;
      for (const mockChunk of mockChunks) {
        /* istanbul ignore next */
        cov_1v8kv25k1m().s[39]++;
        chunks.push({
          ...mockChunk,
          modules: await this.analyzeChunkModules(mockChunk.name)
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[40]++;
      console.warn('Could not analyze chunks from filesystem, using mock data');
    }
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[41]++;
    return chunks;
  }
  async analyzeChunkModules(chunkName) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[11]++;
    cov_1v8kv25k1m().s[42]++;
    // Simular anÃ¡lisis de mÃ³dulos
    return [{
      name: `${chunkName}-module-1`,
      size: 15 * 1024,
      path: `src/components/${chunkName}`,
      imports: ['react', 'next'],
      exports: ['default'],
      isTreeShakeable: true
    }];
  }
  async analyzeDependencies() {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[12]++;
    cov_1v8kv25k1m().s[43]++;
    try {
      const packageJsonPath =
      /* istanbul ignore next */
      (cov_1v8kv25k1m().s[44]++, _path.default.join(process.cwd(), 'package.json'));
      const packageJson =
      /* istanbul ignore next */
      (cov_1v8kv25k1m().s[45]++, JSON.parse(await _fs.promises.readFile(packageJsonPath, 'utf-8')));
      const dependencies =
      /* istanbul ignore next */
      (cov_1v8kv25k1m().s[46]++, {
        ...packageJson.dependencies,
        ...packageJson.devDependencies
      });
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[47]++;
      return Object.entries(dependencies).map(([name, version]) => {
        /* istanbul ignore next */
        cov_1v8kv25k1m().f[13]++;
        cov_1v8kv25k1m().s[48]++;
        return {
          name,
          version: version,
          size: this.estimateDependencySize(name),
          usage: this.analyzeDependencyUsage(name),
          alternatives: this.suggestAlternatives(name),
          optimizationPotential: this.calculateOptimizationPotential(name)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[49]++;
      console.warn('Could not analyze dependencies:', error);
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[50]++;
      return [];
    }
  }
  estimateDependencySize(name) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[14]++;
    // Estimaciones basadas en dependencias comunes
    const sizeMap =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[51]++, {
      'react': 45 * 1024,
      'react-dom': 130 * 1024,
      'next': 200 * 1024,
      'framer-motion': 180 * 1024,
      'recharts': 250 * 1024,
      'maplibre-gl': 400 * 1024,
      'lodash-es': 70 * 1024,
      '@radix-ui/react-dialog': 25 * 1024
    });
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[52]++;
    return /* istanbul ignore next */(cov_1v8kv25k1m().b[7][0]++, sizeMap[name]) ||
    /* istanbul ignore next */
    (cov_1v8kv25k1m().b[7][1]++, 20 * 1024); // Default 20KB
  }
  analyzeDependencyUsage(name) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[15]++;
    const criticalDeps =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[53]++, ['react', 'react-dom', 'next']);
    const importantDeps =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[54]++, ['@supabase/supabase-js', 'zod', 'next-auth']);
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[55]++;
    if (criticalDeps.includes(name)) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[8][0]++;
      cov_1v8kv25k1m().s[56]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[8][1]++;
    }
    cov_1v8kv25k1m().s[57]++;
    if (importantDeps.includes(name)) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[9][0]++;
      cov_1v8kv25k1m().s[58]++;
      return 'important';
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[9][1]++;
    }
    cov_1v8kv25k1m().s[59]++;
    return 'optional';
  }
  suggestAlternatives(name) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[16]++;
    const alternatives =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[60]++, {
      'lodash-es': ['ramda', 'native-methods'],
      'moment': ['date-fns', 'dayjs'],
      'recharts': ['chart.js', 'victory'],
      'framer-motion': ['react-spring', 'lottie-react']
    });
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[61]++;
    return /* istanbul ignore next */(cov_1v8kv25k1m().b[10][0]++, alternatives[name]) ||
    /* istanbul ignore next */
    (cov_1v8kv25k1m().b[10][1]++, []);
  }
  calculateOptimizationPotential(name) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[17]++;
    // Porcentaje de optimizaciÃ³n potencial
    const optimizationMap =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[62]++, {
      'lodash-es': 60,
      'framer-motion': 40,
      'recharts': 50,
      'maplibre-gl': 30 // Compression potential
    });
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[63]++;
    return /* istanbul ignore next */(cov_1v8kv25k1m().b[11][0]++, optimizationMap[name]) ||
    /* istanbul ignore next */
    (cov_1v8kv25k1m().b[11][1]++, 10);
  }
  calculatePerformanceMetrics(chunks) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[18]++;
    const firstLoadJS =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[64]++, chunks.filter(chunk => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[19]++;
      cov_1v8kv25k1m().s[65]++;
      return chunk.loadPriority === 'critical';
    }).reduce((sum, chunk) => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[20]++;
      cov_1v8kv25k1m().s[66]++;
      return sum + chunk.size;
    }, 0));
    const totalJS =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[67]++, chunks.reduce((sum, chunk) => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[21]++;
      cov_1v8kv25k1m().s[68]++;
      return sum + chunk.size;
    }, 0));
    // Calcular score basado en performance budgets
    const score =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[69]++, this.calculatePerformanceScore(firstLoadJS, totalJS));
    const grade =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[70]++, this.getPerformanceGrade(score));
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[71]++;
    return {
      firstLoadJS,
      totalJS,
      css: 25 * 1024,
      images: 150 * 1024,
      fonts: 30 * 1024,
      other: 20 * 1024,
      score,
      grade
    };
  }
  calculatePerformanceScore(firstLoadJS, totalJS) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[22]++;
    const {
      performanceBudgets
    } =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[72]++, this.config);
    const firstLoadRatio =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[73]++, firstLoadJS / performanceBudgets.maxFirstLoadJS);
    const totalRatio =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[74]++, totalJS / performanceBudgets.maxBundleSize);
    const penalty =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[75]++, Math.max(firstLoadRatio - 1, 0) + Math.max(totalRatio - 1, 0));
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[76]++;
    return Math.max(100 - penalty * 50, 0);
  }
  getPerformanceGrade(score) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[23]++;
    cov_1v8kv25k1m().s[77]++;
    if (score >= 90) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[12][0]++;
      cov_1v8kv25k1m().s[78]++;
      return 'A';
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[12][1]++;
    }
    cov_1v8kv25k1m().s[79]++;
    if (score >= 80) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[13][0]++;
      cov_1v8kv25k1m().s[80]++;
      return 'B';
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[13][1]++;
    }
    cov_1v8kv25k1m().s[81]++;
    if (score >= 70) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[14][0]++;
      cov_1v8kv25k1m().s[82]++;
      return 'C';
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[14][1]++;
    }
    cov_1v8kv25k1m().s[83]++;
    if (score >= 60) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[15][0]++;
      cov_1v8kv25k1m().s[84]++;
      return 'D';
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[15][1]++;
    }
    cov_1v8kv25k1m().s[85]++;
    return 'F';
  }
  generateRecommendations(chunks, dependencies, performance) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[24]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[86]++, []);
    // Recomendaciones basadas en tamaÃ±o de chunks
    const largeChunks =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[87]++, chunks.filter(chunk => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[25]++;
      cov_1v8kv25k1m().s[88]++;
      return chunk.size > this.config.maxChunkSize;
    }));
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[89]++;
    for (const chunk of largeChunks) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[90]++;
      recommendations.push({
        type: 'code-splitting',
        priority: 'high',
        description: `Chunk '${chunk.name}' es demasiado grande (${Math.round(chunk.size / 1024)}KB)`,
        estimatedSavings: chunk.size * 0.3,
        implementation: `Dividir ${chunk.name} en chunks mÃ¡s pequeÃ±os usando dynamic imports`,
        effort: 'medium'
      });
    }
    // Recomendaciones basadas en dependencias
    const heavyDeps =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[91]++, dependencies.filter(dep => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[26]++;
      cov_1v8kv25k1m().s[92]++;
      return /* istanbul ignore next */(cov_1v8kv25k1m().b[16][0]++, dep.size > 100 * 1024) &&
      /* istanbul ignore next */
      (cov_1v8kv25k1m().b[16][1]++, dep.optimizationPotential > 30);
    }));
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[93]++;
    for (const dep of heavyDeps) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[94]++;
      recommendations.push({
        type: 'dependency-replacement',
        priority: 'medium',
        description: `Dependencia '${dep.name}' es pesada y tiene potencial de optimizaciÃ³n`,
        estimatedSavings: dep.size * (dep.optimizationPotential / 100),
        implementation: `Considerar alternativas: ${
        /* istanbul ignore next */
        (cov_1v8kv25k1m().b[17][0]++, dep.alternatives?.join(', ')) ||
        /* istanbul ignore next */
        (cov_1v8kv25k1m().b[17][1]++, 'tree shaking')}`,
        effort: 'high'
      });
    }
    // Recomendaciones basadas en performance
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[95]++;
    if (performance.firstLoadJS > this.config.performanceBudgets.maxFirstLoadJS) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().b[18][0]++;
      cov_1v8kv25k1m().s[96]++;
      recommendations.push({
        type: 'lazy-loading',
        priority: 'critical',
        description: 'First Load JS excede el presupuesto de performance',
        estimatedSavings: performance.firstLoadJS - this.config.performanceBudgets.maxFirstLoadJS,
        implementation: 'Implementar lazy loading para componentes no crÃ­ticos',
        effort: 'low'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1v8kv25k1m().b[18][1]++;
    }
    cov_1v8kv25k1m().s[97]++;
    return recommendations.sort((a, b) => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[27]++;
      const priorityOrder =
      /* istanbul ignore next */
      (cov_1v8kv25k1m().s[98]++, {
        critical: 4,
        high: 3,
        medium: 2,
        low: 1
      });
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[99]++;
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
  }
  // ===================================
  // OPTIMIZACIONES AUTOMÃTICAS
  // ===================================
  async applyOptimizations(recommendations) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[28]++;
    cov_1v8kv25k1m().s[100]++;
    for (const recommendation of recommendations) {
      /* istanbul ignore next */
      cov_1v8kv25k1m().s[101]++;
      if (recommendation.effort === 'low') {
        /* istanbul ignore next */
        cov_1v8kv25k1m().b[19][0]++;
        cov_1v8kv25k1m().s[102]++;
        await this.applyLowEffortOptimization(recommendation);
      } else
      /* istanbul ignore next */
      {
        cov_1v8kv25k1m().b[19][1]++;
      }
    }
  }
  async applyLowEffortOptimization(recommendation) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[29]++;
    cov_1v8kv25k1m().s[103]++;
    switch (recommendation.type) {
      case 'lazy-loading':
        /* istanbul ignore next */
        cov_1v8kv25k1m().b[20][0]++;
        cov_1v8kv25k1m().s[104]++;
        await this.implementLazyLoading();
        /* istanbul ignore next */
        cov_1v8kv25k1m().s[105]++;
        break;
      case 'compression':
        /* istanbul ignore next */
        cov_1v8kv25k1m().b[20][1]++;
        cov_1v8kv25k1m().s[106]++;
        await this.enableCompression();
        /* istanbul ignore next */
        cov_1v8kv25k1m().s[107]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1v8kv25k1m().b[20][2]++;
        cov_1v8kv25k1m().s[108]++;
        console.log(`Optimization ${recommendation.type} requires manual implementation`);
    }
  }
  async implementLazyLoading() {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[30]++;
    cov_1v8kv25k1m().s[109]++;
    // Implementar lazy loading automÃ¡tico para componentes pesados
    console.log('Implementing automatic lazy loading...');
  }
  async enableCompression() {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[31]++;
    cov_1v8kv25k1m().s[110]++;
    // Habilitar compresiÃ³n automÃ¡tica
    console.log('Enabling compression...');
  }
  // ===================================
  // REPORTES Y MÃTRICAS
  // ===================================
  generateOptimizationReport(analysis) {
    /* istanbul ignore next */
    cov_1v8kv25k1m().f[32]++;
    const report =
    /* istanbul ignore next */
    (cov_1v8kv25k1m().s[111]++, `
# Bundle Optimization Report

## Performance Metrics
- **Score**: ${analysis.performance.score}/100 (Grade: ${analysis.performance.grade})
- **First Load JS**: ${Math.round(analysis.performance.firstLoadJS / 1024)}KB
- **Total JS**: ${Math.round(analysis.performance.totalJS / 1024)}KB
- **Total Bundle Size**: ${Math.round(analysis.totalSize / 1024)}KB
- **Gzipped Size**: ${Math.round(analysis.gzippedSize / 1024)}KB

## Chunks Analysis
${analysis.chunks.map(chunk => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[33]++;
      cov_1v8kv25k1m().s[112]++;
      return `
- **${chunk.name}**: ${Math.round(chunk.size / 1024)}KB (${chunk.type}, ${chunk.loadPriority} priority)
`;
    }).join('')}

## Top Recommendations
${analysis.recommendations.slice(0, 5).map((rec, i) => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[34]++;
      cov_1v8kv25k1m().s[113]++;
      return `
${i + 1}. **${rec.type}** (${rec.priority} priority)
   - ${rec.description}
   - Estimated savings: ${Math.round(rec.estimatedSavings / 1024)}KB
   - Implementation: ${rec.implementation}
`;
    }).join('')}

## Dependencies Analysis
- **Total Dependencies**: ${analysis.dependencies.length}
- **Heavy Dependencies**: ${analysis.dependencies.filter(d => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[35]++;
      cov_1v8kv25k1m().s[114]++;
      return d.size > 100 * 1024;
    }).length}
- **Optimization Potential**: ${Math.round(analysis.dependencies.reduce((sum, d) => {
      /* istanbul ignore next */
      cov_1v8kv25k1m().f[36]++;
      cov_1v8kv25k1m().s[115]++;
      return sum + d.optimizationPotential;
    }, 0) / analysis.dependencies.length)}%
`);
    /* istanbul ignore next */
    cov_1v8kv25k1m().s[116]++;
    return report;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,