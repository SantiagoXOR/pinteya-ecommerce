{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\logistics\\RealTimeDashboard.tsx"],"sourcesContent":["// =====================================================\n// COMPONENTE: REAL TIME DASHBOARD ENTERPRISE\n// Descripción: Dashboard integrado con mapas, WebSockets y tracking live\n// Basado en: MapLibre GL JS + WebSockets + React + TanStack Query\n// =====================================================\n\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport {\n  Map as MapIcon,\n  Activity,\n  Bell,\n  Zap,\n  Package,\n  Truck,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  BarChart3,\n  Settings,\n  Maximize2,\n  RefreshCw,\n} from 'lucide-react'\nimport { LogisticsMap } from './LogisticsMap'\nimport { TrackingTimeline } from './TrackingTimeline'\nimport { LogisticsAlerts } from './LogisticsAlerts'\nimport { GeofenceManager } from './GeofenceManager'\nimport { useLogisticsDashboard } from '@/hooks/admin/useLogisticsDashboard'\nimport { useLogisticsWebSocket, useLogisticsAlerts } from '@/hooks/admin/useLogisticsWebSocket'\nimport { useShipments } from '@/hooks/admin/useShipments'\nimport { cn } from '@/lib/core/utils'\n\n// =====================================================\n// INTERFACES\n// =====================================================\n\ninterface RealTimeDashboardProps {\n  className?: string\n}\n\ninterface LiveMetric {\n  label: string\n  value: string | number\n  change: number\n  trend: 'up' | 'down' | 'stable'\n  icon: React.ComponentType<{ className?: string }>\n  color: string\n}\n\n// =====================================================\n// COMPONENTE PRINCIPAL\n// =====================================================\n\nexport function RealTimeDashboard({ className }: RealTimeDashboardProps) {\n  const [selectedShipment, setSelectedShipment] = useState<any>(null)\n  const [isFullscreen, setIsFullscreen] = useState(false)\n  const [activeTab, setActiveTab] = useState('overview')\n\n  // Hooks de datos\n  const {\n    data: dashboardData,\n    isLoading: dashboardLoading,\n    refetch: refetchDashboard,\n  } = useLogisticsDashboard()\n\n  const { data: shipmentsData, isLoading: shipmentsLoading } = useShipments({\n    limit: 50,\n    order_by: 'created_at',\n    order_direction: 'desc',\n  })\n\n  // WebSocket tiempo real\n  const { isConnected, connectionState, lastTrackingUpdate, connect, disconnect } =\n    useLogisticsWebSocket({\n      enabled: true,\n      autoConnect: true,\n      showNotifications: true,\n      simulateInDevelopment: false, // Deshabilitado para evitar notificaciones persistentes\n    })\n\n  // Alertas tiempo real\n  const { alerts, criticalAlerts, unreadAlerts, clearAlerts } = useLogisticsAlerts()\n\n  // =====================================================\n  // MÉTRICAS EN TIEMPO REAL\n  // =====================================================\n\n  const liveMetrics: LiveMetric[] = [\n    {\n      label: 'Envíos Activos',\n      value: dashboardData?.stats.in_transit_shipments || 0,\n      change: 5.2,\n      trend: 'up',\n      icon: Truck,\n      color: 'text-blue-600',\n    },\n    {\n      label: 'En Reparto',\n      value: dashboardData?.stats.pending_shipments || 0,\n      change: -2.1,\n      trend: 'down',\n      icon: Package,\n      color: 'text-orange-600',\n    },\n    {\n      label: 'Entregados Hoy',\n      value: dashboardData?.stats.delivered_shipments || 0,\n      change: 12.5,\n      trend: 'up',\n      icon: CheckCircle,\n      color: 'text-green-600',\n    },\n    {\n      label: 'Alertas Críticas',\n      value: criticalAlerts.length,\n      change: 0,\n      trend: 'stable',\n      icon: AlertTriangle,\n      color: 'text-red-600',\n    },\n  ]\n\n  // =====================================================\n  // EFECTOS\n  // =====================================================\n\n  useEffect(() => {\n    // Refrescar dashboard cuando llegan actualizaciones\n    if (lastTrackingUpdate) {\n      refetchDashboard()\n    }\n  }, [lastTrackingUpdate, refetchDashboard])\n\n  // =====================================================\n  // HANDLERS\n  // =====================================================\n\n  const handleShipmentSelect = (shipment: any) => {\n    setSelectedShipment(shipment)\n    setActiveTab('tracking')\n  }\n\n  const handleToggleConnection = () => {\n    if (isConnected) {\n      disconnect()\n    } else {\n      connect()\n    }\n  }\n\n  const handleFullscreen = () => {\n    setIsFullscreen(!isFullscreen)\n  }\n\n  const handleRefresh = () => {\n    refetchDashboard()\n  }\n\n  if (dashboardLoading || shipmentsLoading) {\n    return <DashboardSkeleton />\n  }\n\n  return (\n    <div\n      className={cn(\n        'space-y-6 p-6',\n        isFullscreen && 'fixed inset-0 z-50 bg-background overflow-auto',\n        className\n      )}\n    >\n      {/* Header */}\n      <div className='flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4'>\n        <div>\n          <h1 className='text-3xl font-bold tracking-tight flex items-center gap-2'>\n            <Activity className='w-8 h-8' />\n            Dashboard en Tiempo Real\n          </h1>\n          <p className='text-muted-foreground'>\n            Monitoreo live de logística con tracking GPS y alertas automáticas\n          </p>\n        </div>\n\n        <div className='flex items-center gap-3'>\n          {/* Estado de conexión */}\n          <Badge\n            variant={isConnected ? 'default' : 'secondary'}\n            className='flex items-center gap-1'\n          >\n            {isConnected ? (\n              <>\n                <Zap className='w-3 h-3' />\n                Tiempo Real\n              </>\n            ) : (\n              <>\n                <Clock className='w-3 h-3' />\n                Desconectado\n              </>\n            )}\n          </Badge>\n\n          {/* Alertas */}\n          {unreadAlerts.length > 0 && (\n            <Badge variant='destructive' className='flex items-center gap-1'>\n              <Bell className='w-3 h-3' />\n              {unreadAlerts.length} Alertas\n            </Badge>\n          )}\n\n          {/* Controles */}\n          <Button variant='outline' size='sm' onClick={handleToggleConnection}>\n            {isConnected ? 'Desconectar' : 'Conectar'}\n          </Button>\n\n          <Button variant='outline' size='sm' onClick={handleRefresh}>\n            <RefreshCw className='w-4 h-4' />\n          </Button>\n\n          <Button variant='outline' size='sm' onClick={handleFullscreen}>\n            <Maximize2 className='w-4 h-4' />\n          </Button>\n        </div>\n      </div>\n\n      {/* Métricas en tiempo real */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>\n        {liveMetrics.map((metric, index) => (\n          <Card key={index} className='relative overflow-hidden'>\n            <CardContent className='p-4'>\n              <div className='flex items-center justify-between'>\n                <div>\n                  <p className='text-sm font-medium text-muted-foreground'>{metric.label}</p>\n                  <p className='text-2xl font-bold'>{metric.value}</p>\n                  <div className='flex items-center gap-1 mt-1'>\n                    <span\n                      className={cn(\n                        'text-xs font-medium',\n                        metric.trend === 'up' && 'text-green-600',\n                        metric.trend === 'down' && 'text-red-600',\n                        metric.trend === 'stable' && 'text-gray-600'\n                      )}\n                    >\n                      {metric.trend === 'up' && '+'}\n                      {metric.change}%\n                    </span>\n                    <span className='text-xs text-muted-foreground'>vs ayer</span>\n                  </div>\n                </div>\n                <metric.icon className={cn('w-8 h-8', metric.color)} />\n              </div>\n\n              {/* Indicador de tiempo real */}\n              {isConnected && (\n                <div className='absolute top-2 right-2'>\n                  <div className='w-2 h-2 bg-green-500 rounded-full animate-pulse'></div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Alertas críticas */}\n      {criticalAlerts.length > 0 && (\n        <LogisticsAlerts\n          alerts={criticalAlerts}\n          maxVisible={3}\n          onDismiss={alertId => console.log('Dismiss alert:', alertId)}\n        />\n      )}\n\n      {/* Contenido principal */}\n      <div className='grid grid-cols-1 lg:grid-cols-3 gap-6'>\n        {/* Mapa principal */}\n        <div className='lg:col-span-2'>\n          <LogisticsMap\n            shipments={shipmentsData?.data || []}\n            selectedShipment={selectedShipment}\n            onShipmentSelect={handleShipmentSelect}\n            realTimeEnabled={isConnected}\n            className='h-[600px]'\n          />\n        </div>\n\n        {/* Panel lateral */}\n        <div className='space-y-6'>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className='grid w-full grid-cols-3'>\n              <TabsTrigger value='overview'>Resumen</TabsTrigger>\n              <TabsTrigger value='tracking'>Tracking</TabsTrigger>\n              <TabsTrigger value='alerts'>Alertas</TabsTrigger>\n            </TabsList>\n\n            {/* Tab: Resumen */}\n            <TabsContent value='overview' className='space-y-4'>\n              <Card>\n                <CardHeader className='pb-3'>\n                  <CardTitle className='text-lg'>Actividad Reciente</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className='space-y-3'>\n                    {shipmentsData?.data.slice(0, 5).map(shipment => (\n                      <div\n                        key={shipment.id}\n                        className='flex items-center gap-3 p-2 rounded-lg hover:bg-muted/50 cursor-pointer'\n                        onClick={() => handleShipmentSelect(shipment)}\n                      >\n                        <div\n                          className={cn(\n                            'w-2 h-2 rounded-full',\n                            shipment.status === 'delivered' && 'bg-green-500',\n                            shipment.status === 'in_transit' && 'bg-blue-500',\n                            shipment.status === 'out_for_delivery' && 'bg-orange-500',\n                            shipment.status === 'exception' && 'bg-red-500'\n                          )}\n                        />\n                        <div className='flex-1 min-w-0'>\n                          <div className='font-medium text-sm'>{shipment.shipment_number}</div>\n                          <div className='text-xs text-muted-foreground'>\n                            {shipment.delivery_address.city}\n                          </div>\n                        </div>\n                        <Badge variant='outline' className='text-xs'>\n                          {shipment.status}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className='pb-3'>\n                  <CardTitle className='text-lg'>Estado de Conexión</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className='space-y-3'>\n                    <div className='flex items-center justify-between'>\n                      <span className='text-sm'>WebSocket</span>\n                      <Badge variant={isConnected ? 'default' : 'secondary'}>\n                        {connectionState}\n                      </Badge>\n                    </div>\n\n                    <div className='flex items-center justify-between'>\n                      <span className='text-sm'>Última actualización</span>\n                      <span className='text-xs text-muted-foreground'>\n                        {lastTrackingUpdate\n                          ? new Date(lastTrackingUpdate.timestamp).toLocaleTimeString()\n                          : 'Sin datos'}\n                      </span>\n                    </div>\n\n                    <div className='flex items-center justify-between'>\n                      <span className='text-sm'>Alertas activas</span>\n                      <span className='text-sm font-medium'>{alerts.length}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Tab: Tracking */}\n            <TabsContent value='tracking'>\n              {selectedShipment ? (\n                <TrackingTimeline\n                  shipmentId={selectedShipment.id}\n                  realTime={isConnected}\n                  compact={true}\n                />\n              ) : (\n                <Card>\n                  <CardContent className='p-6 text-center'>\n                    <Package className='w-8 h-8 text-muted-foreground mx-auto mb-2' />\n                    <p className='text-muted-foreground'>\n                      Selecciona un envío en el mapa para ver su tracking\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Tab: Alertas */}\n            <TabsContent value='alerts'>\n              <Card>\n                <CardHeader className='pb-3'>\n                  <div className='flex items-center justify-between'>\n                    <CardTitle className='text-lg'>Alertas Activas</CardTitle>\n                    {alerts.length > 0 && (\n                      <Button variant='outline' size='sm' onClick={clearAlerts}>\n                        Limpiar\n                      </Button>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className='space-y-3 max-h-96 overflow-y-auto'>\n                    {alerts.slice(0, 10).map((alert, index) => (\n                      <div key={index} className='flex items-start gap-3 p-3 border rounded-lg'>\n                        <div\n                          className={cn(\n                            'w-2 h-2 rounded-full mt-2',\n                            alert.severity === 'critical' && 'bg-red-500',\n                            alert.severity === 'high' && 'bg-orange-500',\n                            alert.severity === 'medium' && 'bg-yellow-500',\n                            alert.severity === 'low' && 'bg-blue-500'\n                          )}\n                        />\n                        <div className='flex-1 min-w-0'>\n                          <div className='font-medium text-sm'>{alert.type}</div>\n                          <div className='text-xs text-muted-foreground'>{alert.message}</div>\n                          <div className='text-xs text-muted-foreground mt-1'>\n                            {new Date(alert.timestamp).toLocaleString()}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n\n                    {alerts.length === 0 && (\n                      <div className='text-center py-8'>\n                        <CheckCircle className='w-8 h-8 text-green-500 mx-auto mb-2' />\n                        <p className='text-muted-foreground'>No hay alertas activas</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Panel de geofences (opcional) */}\n      {activeTab === 'geofences' && <GeofenceManager />}\n    </div>\n  )\n}\n\n// =====================================================\n// COMPONENTE SKELETON\n// =====================================================\n\nfunction DashboardSkeleton() {\n  return (\n    <div className='space-y-6 p-6'>\n      <div className='flex justify-between items-center'>\n        <div className='space-y-2'>\n          <div className='h-8 w-64 bg-gray-200 rounded animate-pulse' />\n          <div className='h-4 w-96 bg-gray-200 rounded animate-pulse' />\n        </div>\n        <div className='flex gap-3'>\n          <div className='h-10 w-24 bg-gray-200 rounded animate-pulse' />\n          <div className='h-10 w-24 bg-gray-200 rounded animate-pulse' />\n        </div>\n      </div>\n\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className='h-32 bg-gray-200 rounded-lg animate-pulse' />\n        ))}\n      </div>\n\n      <div className='grid grid-cols-1 lg:grid-cols-3 gap-6'>\n        <div className='lg:col-span-2 h-96 bg-gray-200 rounded-lg animate-pulse' />\n        <div className='h-96 bg-gray-200 rounded-lg animate-pulse' />\n      </div>\n    </div>\n  )\n}\n"],"names":["RealTimeDashboard","className","selectedShipment","setSelectedShipment","useState","isFullscreen","setIsFullscreen","activeTab","setActiveTab","data","dashboardData","isLoading","dashboardLoading","refetch","refetchDashboard","useLogisticsDashboard","shipmentsData","shipmentsLoading","useShipments","limit","order_by","order_direction","isConnected","connectionState","lastTrackingUpdate","connect","disconnect","useLogisticsWebSocket","enabled","autoConnect","showNotifications","simulateInDevelopment","alerts","criticalAlerts","unreadAlerts","clearAlerts","useLogisticsAlerts","liveMetrics","label","value","stats","in_transit_shipments","change","trend","icon","Truck","color","pending_shipments","Package","delivered_shipments","CheckCircle","length","AlertTriangle","useEffect","handleShipmentSelect","shipment","handleToggleConnection","handleFullscreen","handleRefresh","DashboardSkeleton","div","cn","h1","Activity","p","Badge","variant","Zap","Clock","Bell","Button","size","onClick","RefreshCw","Maximize2","map","metric","index","Card","CardContent","span","LogisticsAlerts","maxVisible","onDismiss","alertId","console","log","LogisticsMap","shipments","onShipmentSelect","realTimeEnabled","Tabs","onValueChange","TabsList","TabsTrigger","TabsContent","CardHeader","CardTitle","slice","status","shipment_number","delivery_address","city","id","Date","timestamp","toLocaleTimeString","TrackingTimeline","shipmentId","realTime","compact","alert","severity","type","message","toLocaleString","GeofenceManager","Array","_","i"],"mappings":"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"}