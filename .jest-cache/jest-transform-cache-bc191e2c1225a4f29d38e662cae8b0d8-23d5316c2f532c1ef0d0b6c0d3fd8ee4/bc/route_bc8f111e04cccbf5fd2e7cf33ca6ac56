82e07e90aaf75ee8e5af90e8b73a230b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DELETE () {
        return DELETE;
    },
    get GET () {
        return GET;
    },
    get PUT () {
        return PUT;
    }
});
const _server = require("next/server");
const _adminauth = require("../../../../../lib/auth/admin-auth");
const _zod = require("zod");
const _errorhandler = require("../../../../../lib/api/error-handler");
const _apilogger = require("../../../../../lib/api/api-logger");
const _apiauthmiddleware = require("../../../../../lib/auth/api-auth-middleware");
const _adminschemas = require("../../../../../lib/validation/admin-schemas");
const _middlewarecomposer = require("../../../../../lib/api/middleware-composer");
// Validation schemas
const UpdateProductSchema = _zod.z.object({
    name: _zod.z.string().min(1, 'El nombre es requerido').max(255, 'Máximo 255 caracteres').optional(),
    description: _zod.z.string().optional(),
    short_description: _zod.z.string().max(500, 'Máximo 500 caracteres').optional(),
    price: _zod.z.number().min(0, 'El precio debe ser mayor a 0').optional(),
    discounted_price: _zod.z.number().min(0).optional(),
    stock: _zod.z.number().min(0, 'El stock debe ser mayor o igual a 0').optional(),
    low_stock_threshold: _zod.z.number().min(0).optional(),
    category_id: _zod.z.string().uuid('ID de categoría inválido').optional(),
    brand: _zod.z.string().optional(),
    images: _zod.z.array(_zod.z.object({
        url: _zod.z.string().url(),
        alt_text: _zod.z.string().optional(),
        is_primary: _zod.z.boolean().default(false)
    })).optional(),
    is_active: _zod.z.boolean().optional(),
    is_featured: _zod.z.boolean().optional(),
    status: _zod.z.enum([
        'active',
        'inactive',
        'draft'
    ]).optional()
});
const ProductParamsSchema = _zod.z.object({
    id: _zod.z.string().uuid('ID de producto inválido')
});
// Helper function to get product by ID with enhanced error handling
async function getProductById(supabase, productId) {
    const { data: product, error } = await supabase.from('products').select(`
      id,
      name,
      slug,
      description,
      short_description,
      price,
      discounted_price,
      stock,
      low_stock_threshold,
      category_id,
      brand,
      images,
      is_active,
      is_featured,
      status,
      created_at,
      updated_at,
      categories (
        id,
        name
      )
    `).eq('id', productId).single();
    if (error) {
        throw new _errorhandler.NotFoundError('Producto');
    }
    // Transform response with enhanced data
    const transformedProduct = {
        ...product,
        category_name: product.categories?.name || null,
        categories: undefined
    };
    return transformedProduct;
}
// Helper function to generate unique slug
function generateSlug(name) {
    return name.toLowerCase().replace(/[^a-z0-9\s-]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-').trim();
}
/**
 * GET /api/admin/products/[id] - Enterprise Handler
 * Obtener producto específico por ID con middleware enterprise
 */ const getHandler = async (request, { params })=>{
    const { supabase } = request;
    const productId = params.id;
    // Validar parámetros
    const paramsValidation = ProductParamsSchema.safeParse({
        id: productId
    });
    if (!paramsValidation.success) {
        throw new _errorhandler.ValidationError('ID de producto inválido', paramsValidation.error.errors);
    }
    const product = await getProductById(supabase, productId);
    return _server.NextResponse.json({
        data: product,
        success: true,
        message: 'Producto obtenido exitosamente'
    });
};
/**
 * PUT /api/admin/products/[id] - Enterprise Handler
 * Actualizar producto específico con middleware enterprise
 */ const putHandler = async (request, { params })=>{
    const { supabase, user, validatedData } = request;
    const productId = params.id;
    // Validar parámetros
    const paramsValidation = ProductParamsSchema.safeParse({
        id: productId
    });
    if (!paramsValidation.success) {
        throw new _errorhandler.ValidationError('ID de producto inválido', paramsValidation.error.errors);
    }
    // Verificar que el producto existe
    const existingProduct = await getProductById(supabase, productId);
    // Verificar categoría si se está actualizando
    if (validatedData.category_id) {
        const { data: category, error: categoryError } = await supabase.from('categories').select('id').eq('id', validatedData.category_id).single();
        if (categoryError || !category) {
            throw new _errorhandler.ValidationError('Categoría no encontrada');
        }
    }
    // Generar slug si se actualiza el nombre
    const updateData = {
        ...validatedData,
        updated_at: new Date().toISOString()
    };
    if (validatedData.name) {
        updateData.slug = generateSlug(validatedData.name);
    }
    // Actualizar producto
    const { data: updatedProduct, error } = await supabase.from('products').update(updateData).eq('id', productId).select(`
      id,
      name,
      slug,
      description,
      short_description,
      price,
      discounted_price,
      stock,
      low_stock_threshold,
      category_id,
      brand,
      images,
      is_active,
      is_featured,
      status,
      created_at,
      updated_at,
      categories (
        id,
        name
      )
    `).single();
    if (error) {
        throw new _errorhandler.ApiError('Error al actualizar producto', 500, 'DATABASE_ERROR', error);
    }
    // Log de auditoría
    await (0, _adminauth.logAdminAction)(user.id, 'UPDATE', 'product', productId, existingProduct, updatedProduct);
    // Transform response
    const transformedProduct = {
        ...updatedProduct,
        category_name: updatedProduct.categories?.name || null,
        categories: undefined
    };
    return _server.NextResponse.json({
        data: transformedProduct,
        success: true,
        message: 'Producto actualizado exitosamente'
    });
};
/**
 * DELETE /api/admin/products/[id] - Enterprise Handler
 * Eliminar producto específico con middleware enterprise
 */ const deleteHandler = async (request, { params })=>{
    const { supabase, user } = request;
    const productId = params.id;
    // Validar parámetros
    const paramsValidation = ProductParamsSchema.safeParse({
        id: productId
    });
    if (!paramsValidation.success) {
        throw new _errorhandler.ValidationError('ID de producto inválido', paramsValidation.error.errors);
    }
    // Verificar que el producto existe
    const existingProduct = await getProductById(supabase, productId);
    // Verificar si el producto está referenciado en órdenes
    const { data: orderItems, error: orderCheckError } = await supabase.from('order_items').select('id').eq('product_id', productId).limit(1);
    if (orderCheckError) {
        console.warn('Error checking order references:', orderCheckError);
    // Continuar con eliminación aunque falle la verificación
    }
    let deletionResult;
    let isHardDelete = false;
    if (orderItems && orderItems.length > 0) {
        // Soft delete: marcar como inactivo
        const { error: updateError } = await supabase.from('products').update({
            status: 'inactive',
            is_active: false,
            updated_at: new Date().toISOString()
        }).eq('id', productId);
        if (updateError) {
            throw new _errorhandler.ApiError('Error al eliminar producto', 500, 'DATABASE_ERROR', updateError);
        }
        deletionResult = {
            message: 'Producto marcado como inactivo (tiene órdenes asociadas)',
            soft_delete: true
        };
    } else {
        // Hard delete si no hay referencias
        const { error } = await supabase.from('products').delete().eq('id', productId);
        if (error) {
            throw new _errorhandler.ApiError('Error al eliminar producto', 500, 'DATABASE_ERROR', error);
        }
        isHardDelete = true;
        deletionResult = {
            message: 'Producto eliminado exitosamente',
            hard_delete: true
        };
    }
    // Log de auditoría
    await (0, _adminauth.logAdminAction)(user.id, isHardDelete ? 'DELETE' : 'SOFT_DELETE', 'product', productId, existingProduct, null);
    return _server.NextResponse.json({
        ...deletionResult,
        success: true
    });
};
const GET = (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)([
    'products_read'
]))(getHandler);
const PUT = (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)([
    'products_update'
]), (0, _adminschemas.withValidation)(UpdateProductSchema))(putHandler);
const DELETE = (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)([
    'products_delete'
]))(deleteHandler);

//# sourceMappingURL=data:application/json;base64,