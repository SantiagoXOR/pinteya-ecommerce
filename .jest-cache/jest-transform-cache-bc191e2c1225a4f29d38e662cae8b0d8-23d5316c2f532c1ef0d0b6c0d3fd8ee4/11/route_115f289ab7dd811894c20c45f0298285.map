{"version":3,"names":["cov_ulew4kg14","actualCoverage","s","DELETE","f","GET","POST","runtime","request","body","json","b","url","stepName","_server","NextResponse","success","error","status","screenshotsDir","_path","default","join","process","cwd","_promises","mkdir","recursive","timestamp","Date","toISOString","replace","safeName","filename","filepath","browser","_playwright","chromium","launch","headless","page","newPage","viewport","width","height","goto","waitUntil","waitForTimeout","selector","waitForSelector","timeout","screenshotOptions","path","fullPage","type","screenshot","stats","stat","id","metadata","size","console","log","close","Error","message","files","readdir","screenshots","file","endsWith","push","created","birthtime","modified","mtime","sort","a","getTime","dirError","searchParams","URL","olderThan","get","pattern","deletedCount","shouldDelete","includes","hoursOld","now","parseInt","unlink"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test-screenshots\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API ENDPOINT PARA GENERAR SCREENSHOTS DE TESTING\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server'\r\nimport { chromium } from 'playwright'\r\nimport fs from 'fs/promises'\r\nimport path from 'path'\r\n\r\ninterface ScreenshotRequest {\r\n  url: string\r\n  stepName: string\r\n  description: string\r\n  selector?: string\r\n  fullPage?: boolean\r\n  width?: number\r\n  height?: number\r\n}\r\n\r\ninterface ScreenshotResponse {\r\n  success: boolean\r\n  screenshot?: {\r\n    id: string\r\n    filename: string\r\n    path: string\r\n    url: string\r\n    metadata: {\r\n      width: number\r\n      height: number\r\n      size: number\r\n      timestamp: string\r\n    }\r\n  }\r\n  error?: string\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: ScreenshotRequest = await request.json()\r\n    \r\n    // Validar par√°metros requeridos\r\n    if (!body.url || !body.stepName) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'URL y stepName son requeridos'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // Configurar directorio de screenshots\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots')\r\n    await fs.mkdir(screenshotsDir, { recursive: true })\r\n\r\n    // Generar nombre de archivo √∫nico\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')\r\n    const safeName = body.stepName.replace(/[^a-zA-Z0-9-_]/g, '_')\r\n    const filename = `checkout-flow-${safeName}-${timestamp}.png`\r\n    const filepath = path.join(screenshotsDir, filename)\r\n\r\n    // Lanzar browser y capturar screenshot\r\n    const browser = await chromium.launch({ headless: true })\r\n    const page = await browser.newPage({\r\n      viewport: {\r\n        width: body.width || 1920,\r\n        height: body.height || 1080\r\n      }\r\n    })\r\n\r\n    try {\r\n      // Navegar a la URL\r\n      await page.goto(body.url, { waitUntil: 'networkidle' })\r\n\r\n      // Esperar un poco para que la p√°gina se estabilice\r\n      await page.waitForTimeout(1000)\r\n\r\n      // Si hay un selector espec√≠fico, esperar a que sea visible\r\n      if (body.selector) {\r\n        await page.waitForSelector(body.selector, { timeout: 10000 })\r\n      }\r\n\r\n      // Capturar screenshot\r\n      const screenshotOptions: any = {\r\n        path: filepath,\r\n        fullPage: body.fullPage !== false,\r\n        type: 'png'\r\n      }\r\n\r\n      await page.screenshot(screenshotOptions)\r\n\r\n      // Obtener informaci√≥n del archivo\r\n      const stats = await fs.stat(filepath)\r\n      const screenshot = {\r\n        id: `${safeName}-${timestamp}`,\r\n        filename,\r\n        path: filepath,\r\n        url: `/test-screenshots/${filename}`,\r\n        metadata: {\r\n          width: body.width || 1920,\r\n          height: body.height || 1080,\r\n          size: stats.size,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      }\r\n\r\n      console.log(`üì∏ Screenshot capturado: ${body.stepName} -> ${filename}`)\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        screenshot\r\n      })\r\n\r\n    } finally {\r\n      await browser.close()\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error capturando screenshot:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n// Endpoint GET para listar screenshots existentes\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots')\r\n    \r\n    try {\r\n      const files = await fs.readdir(screenshotsDir)\r\n      const screenshots = []\r\n\r\n      for (const file of files) {\r\n        if (file.endsWith('.png')) {\r\n          const filepath = path.join(screenshotsDir, file)\r\n          const stats = await fs.stat(filepath)\r\n          \r\n          screenshots.push({\r\n            filename: file,\r\n            url: `/test-screenshots/${file}`,\r\n            size: stats.size,\r\n            created: stats.birthtime.toISOString(),\r\n            modified: stats.mtime.toISOString()\r\n          })\r\n        }\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        screenshots: screenshots.sort((a, b) => \r\n          new Date(b.created).getTime() - new Date(a.created).getTime()\r\n        )\r\n      })\r\n\r\n    } catch (dirError) {\r\n      // Directorio no existe, devolver lista vac√≠a\r\n      return NextResponse.json({\r\n        success: true,\r\n        screenshots: []\r\n      })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error listando screenshots:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n// Endpoint DELETE para limpiar screenshots antiguos\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const olderThan = searchParams.get('olderThan') // en horas\r\n    const pattern = searchParams.get('pattern') // patr√≥n de nombre de archivo\r\n\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots')\r\n    \r\n    try {\r\n      const files = await fs.readdir(screenshotsDir)\r\n      let deletedCount = 0\r\n\r\n      for (const file of files) {\r\n        if (!file.endsWith('.png')) {continue}\r\n\r\n        let shouldDelete = false\r\n\r\n        // Filtrar por patr√≥n si se especifica\r\n        if (pattern && !file.includes(pattern)) {continue}\r\n\r\n        // Filtrar por antig√ºedad si se especifica\r\n        if (olderThan) {\r\n          const filepath = path.join(screenshotsDir, file)\r\n          const stats = await fs.stat(filepath)\r\n          const hoursOld = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60)\r\n          \r\n          if (hoursOld > parseInt(olderThan)) {\r\n            shouldDelete = true\r\n          }\r\n        } else {\r\n          // Si no se especifica antig√ºedad, eliminar todos los que coincidan con el patr√≥n\r\n          shouldDelete = true\r\n        }\r\n\r\n        if (shouldDelete) {\r\n          const filepath = path.join(screenshotsDir, file)\r\n          await fs.unlink(filepath)\r\n          deletedCount++\r\n          console.log(`üóëÔ∏è Screenshot eliminado: ${file}`)\r\n        }\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        deletedCount,\r\n        message: `${deletedCount} screenshots eliminados`\r\n      })\r\n\r\n    } catch (dirError) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        deletedCount: 0,\r\n        message: 'Directorio de screenshots no existe'\r\n      })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error eliminando screenshots:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}