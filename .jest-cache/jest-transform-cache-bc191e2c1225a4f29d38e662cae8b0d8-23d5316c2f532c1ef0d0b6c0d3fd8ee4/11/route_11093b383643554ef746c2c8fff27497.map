{"version":3,"names":["cov_1qknxl133o","actualCoverage","s","DELETE","f","GET","POST","PUT","runtime","RoleSchema","_zod","z","object","role_name","string","min","display_name","description","optional","permissions","record","any","default","is_active","boolean","request","authResult","_adminauth","checkCRUDPermissions","success","b","_server","NextResponse","json","error","status","supabase","user","searchParams","URL","url","includeInactive","get","query","from","select","order","eq","data","roles","console","logAdminAction","id","include_inactive","body","roleData","parse","existingRole","single","newRole","createError","insert","is_system_role","toString","message","ZodError","details","errors","roleId","partial","fetchError","duplicateRole","neq","updatedRole","updateError","update","updated_at","Date","toISOString","count","head","deleteError","delete"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\roles\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para gestión de roles del sistema\r\n * Requiere permisos de administrador para modificar\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { checkCRUDPermissions, logAdminAction } from '@/lib/auth/admin-auth';\r\nimport { z } from 'zod';\r\n\r\n// Schema de validación para roles\r\nconst RoleSchema = z.object({\r\n  role_name: z.string().min(1, 'El nombre del rol es requerido'),\r\n  display_name: z.string().min(1, 'El nombre para mostrar es requerido'),\r\n  description: z.string().optional(),\r\n  permissions: z.record(z.any()).default({}),\r\n  is_active: z.boolean().default(true)\r\n});\r\n\r\n/**\r\n * GET /api/admin/roles\r\n * Obtener lista de roles del sistema\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Para leer roles, solo necesita estar autenticado como admin/moderator\r\n    const authResult = await checkCRUDPermissions('users', 'read');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const { searchParams } = new URL(request.url);\r\n\r\n    // Parámetros de consulta\r\n    const includeInactive = searchParams.get('include_inactive') === 'true';\r\n\r\n    // Construir query\r\n    let query = supabase\r\n      .from('user_roles')\r\n      .select('*')\r\n      .order('role_name');\r\n\r\n    // Filtrar por estado activo si no se incluyen inactivos\r\n    if (!includeInactive) {\r\n      query = query.eq('is_active', true);\r\n    }\r\n\r\n    const { data: roles, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error fetching roles:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener roles' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log access\r\n    await logAdminAction(\r\n      user.id,\r\n      'READ',\r\n      'roles',\r\n      'list',\r\n      null,\r\n      { include_inactive: includeInactive }\r\n    );\r\n\r\n    return NextResponse.json({\r\n      data: roles\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in GET /api/admin/roles:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/roles\r\n * Crear nuevo rol (solo para super admins)\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const authResult = await checkCRUDPermissions('users', 'manage_roles');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const body = await request.json();\r\n\r\n    // Validar datos de entrada\r\n    const roleData = RoleSchema.parse(body);\r\n\r\n    // Verificar que el nombre del rol no existe\r\n    const { data: existingRole } = await supabase\r\n      .from('user_roles')\r\n      .select('id')\r\n      .eq('role_name', roleData.role_name)\r\n      .single();\r\n\r\n    if (existingRole) {\r\n      return NextResponse.json(\r\n        { error: 'Ya existe un rol con ese nombre' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear nuevo rol\r\n    const { data: newRole, error: createError } = await supabase\r\n      .from('user_roles')\r\n      .insert({\r\n        ...roleData,\r\n        is_system_role: false // Los roles creados por admin no son del sistema\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (createError) {\r\n      console.error('Error creating role:', createError);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear rol' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log admin action\r\n    await logAdminAction(\r\n      user.id,\r\n      'CREATE',\r\n      'role',\r\n      newRole.id.toString(),\r\n      null,\r\n      newRole\r\n    );\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: 'Rol creado exitosamente',\r\n        data: newRole\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error in POST /api/admin/roles:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Datos inválidos', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * PUT /api/admin/roles/[id]\r\n * Actualizar rol existente\r\n */\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const authResult = await checkCRUDPermissions('users', 'manage_roles');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const { searchParams } = new URL(request.url);\r\n    const roleId = searchParams.get('id');\r\n    const body = await request.json();\r\n\r\n    if (!roleId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de rol requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const roleData = RoleSchema.partial().parse(body);\r\n\r\n    // Verificar que el rol existe y no es del sistema\r\n    const { data: existingRole, error: fetchError } = await supabase\r\n      .from('user_roles')\r\n      .select('*')\r\n      .eq('id', roleId)\r\n      .single();\r\n\r\n    if (fetchError || !existingRole) {\r\n      return NextResponse.json(\r\n        { error: 'Rol no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (existingRole.is_system_role) {\r\n      return NextResponse.json(\r\n        { error: 'No se pueden modificar roles del sistema' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Verificar nombre único si se está cambiando\r\n    if (roleData.role_name && roleData.role_name !== existingRole.role_name) {\r\n      const { data: duplicateRole } = await supabase\r\n        .from('user_roles')\r\n        .select('id')\r\n        .eq('role_name', roleData.role_name)\r\n        .neq('id', roleId)\r\n        .single();\r\n\r\n      if (duplicateRole) {\r\n        return NextResponse.json(\r\n          { error: 'Ya existe un rol con ese nombre' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Actualizar rol\r\n    const { data: updatedRole, error: updateError } = await supabase\r\n      .from('user_roles')\r\n      .update({\r\n        ...roleData,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', roleId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error updating role:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar rol' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log admin action\r\n    await logAdminAction(\r\n      user.id,\r\n      'UPDATE',\r\n      'role',\r\n      roleId,\r\n      existingRole,\r\n      updatedRole\r\n    );\r\n\r\n    return NextResponse.json({\r\n      message: 'Rol actualizado exitosamente',\r\n      data: updatedRole\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in PUT /api/admin/roles:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Datos inválidos', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * DELETE /api/admin/roles/[id]\r\n * Eliminar rol (solo si no está en uso)\r\n */\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const authResult = await checkCRUDPermissions('users', 'manage_roles');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const { searchParams } = new URL(request.url);\r\n    const roleId = searchParams.get('id');\r\n\r\n    if (!roleId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de rol requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar que el rol existe y no es del sistema\r\n    const { data: existingRole, error: fetchError } = await supabase\r\n      .from('user_roles')\r\n      .select('*')\r\n      .eq('id', roleId)\r\n      .single();\r\n\r\n    if (fetchError || !existingRole) {\r\n      return NextResponse.json(\r\n        { error: 'Rol no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (existingRole.is_system_role) {\r\n      return NextResponse.json(\r\n        { error: 'No se pueden eliminar roles del sistema' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Verificar que no hay usuarios con este rol\r\n    const { count } = await supabase\r\n      .from('user_profiles')\r\n      .select('*', { count: 'exact', head: true })\r\n      .eq('role_id', roleId);\r\n\r\n    if (count && count > 0) {\r\n      return NextResponse.json(\r\n        { error: `No se puede eliminar el rol. Hay ${count} usuario(s) asignado(s) a este rol.` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Eliminar rol\r\n    const { error: deleteError } = await supabase\r\n      .from('user_roles')\r\n      .delete()\r\n      .eq('id', roleId);\r\n\r\n    if (deleteError) {\r\n      console.error('Error deleting role:', deleteError);\r\n      return NextResponse.json(\r\n        { error: 'Error al eliminar rol' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log admin action\r\n    await logAdminAction(\r\n      user.id,\r\n      'DELETE',\r\n      'role',\r\n      roleId,\r\n      existingRole,\r\n      null\r\n    );\r\n\r\n    return NextResponse.json({\r\n      message: 'Rol eliminado exitosamente'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in DELETE /api/admin/roles:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}