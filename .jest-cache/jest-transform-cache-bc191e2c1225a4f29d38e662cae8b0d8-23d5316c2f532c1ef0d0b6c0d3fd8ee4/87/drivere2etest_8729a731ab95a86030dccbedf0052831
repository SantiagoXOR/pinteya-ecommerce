647cb612439b22cc868e6c4caaef36d0
/**
 * Tests end-to-end para el sistema de navegación GPS de drivers
 * Verifica el flujo completo desde login hasta navegación
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _test = require("@playwright/test");
// Configuración de pruebas E2E
_test.test.describe('Driver GPS Navigation System E2E Tests', ()=>{
    let page;
    const DRIVER_CREDENTIALS = {
        email: 'carlos@pinteya.com',
        name: 'Carlos Rodríguez'
    };
    _test.test.beforeEach(async ({ page: testPage })=>{
        page = testPage;
        // Configurar geolocalización mock
        await page.context().grantPermissions([
            'geolocation'
        ]);
        await page.context().setGeolocation({
            latitude: -34.6037,
            longitude: -58.3816
        });
        // Navegar a la página de login de drivers
        await page.goto('/driver/login');
    });
    _test.test.describe('Authentication Flow', ()=>{
        (0, _test.test)('should login successfully with valid driver credentials', async ()=>{
            // Llenar formulario de login
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            // Verificar redirección al dashboard
            await (0, _test.expect)(page).toHaveURL('/driver/dashboard');
            // Verificar que se muestra el nombre del driver
            await (0, _test.expect)(page.locator('text=' + DRIVER_CREDENTIALS.name)).toBeVisible();
        });
        (0, _test.test)('should show error for invalid credentials', async ()=>{
            // Intentar login con credenciales inválidas
            await page.fill('input[type="email"]', 'invalid@example.com');
            await page.click('button[type="submit"]');
            // Verificar mensaje de error
            await (0, _test.expect)(page.locator('text=Error de autenticación')).toBeVisible();
        });
        (0, _test.test)('should redirect unauthenticated users to login', async ()=>{
            // Intentar acceder al dashboard sin autenticación
            await page.goto('/driver/dashboard');
            // Verificar redirección al login
            await (0, _test.expect)(page).toHaveURL('/driver/login');
        });
    });
    _test.test.describe('Dashboard Functionality', ()=>{
        _test.test.beforeEach(async ()=>{
            // Login como driver
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
        });
        (0, _test.test)('should display driver status and controls', async ()=>{
            // Verificar elementos del dashboard
            await (0, _test.expect)(page.locator('text=Estado del Driver')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Van - ABC123')).toBeVisible();
            // Verificar controles de estado
            await (0, _test.expect)(page.locator('button:has-text("Conectarse")')).toBeVisible();
            await (0, _test.expect)(page.locator('button:has-text("Desconectar")')).toBeVisible();
        });
        (0, _test.test)('should toggle online/offline status', async ()=>{
            // Conectarse
            await page.click('button:has-text("Conectarse")');
            await (0, _test.expect)(page.locator('text=En Línea')).toBeVisible();
            // Desconectarse
            await page.click('button:has-text("Desconectar")');
            await (0, _test.expect)(page.locator('text=Desconectado')).toBeVisible();
        });
        (0, _test.test)('should show current location when GPS is active', async ()=>{
            // Conectarse para activar GPS
            await page.click('button:has-text("Conectarse")');
            // Verificar que se muestra la ubicación
            await (0, _test.expect)(page.locator('text=Ubicación:')).toBeVisible();
            await (0, _test.expect)(page.locator('text=GPS Activo')).toBeVisible();
        });
        (0, _test.test)('should display today statistics', async ()=>{
            // Verificar estadísticas del día
            await (0, _test.expect)(page.locator('text=Estadísticas de Hoy')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Entregas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Distancia')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Tiempo Activo')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Eficiencia')).toBeVisible();
        });
    });
    _test.test.describe('Navigation Between Pages', ()=>{
        _test.test.beforeEach(async ()=>{
            // Login como driver
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
        });
        (0, _test.test)('should navigate to routes page', async ()=>{
            await page.click('text=Rutas');
            await (0, _test.expect)(page).toHaveURL('/driver/routes');
            await (0, _test.expect)(page.locator('text=Mis Rutas')).toBeVisible();
        });
        (0, _test.test)('should navigate to deliveries page', async ()=>{
            await page.click('text=Entregas');
            await (0, _test.expect)(page).toHaveURL('/driver/deliveries');
            await (0, _test.expect)(page.locator('text=Mis Entregas')).toBeVisible();
        });
        (0, _test.test)('should navigate to profile page', async ()=>{
            await page.click('text=Perfil');
            await (0, _test.expect)(page).toHaveURL('/driver/profile');
            await (0, _test.expect)(page.locator('text=Mi Perfil')).toBeVisible();
        });
        (0, _test.test)('should return to dashboard from any page', async ()=>{
            // Ir a rutas
            await page.click('text=Rutas');
            await (0, _test.expect)(page).toHaveURL('/driver/routes');
            // Volver al dashboard
            await page.click('text=Inicio');
            await (0, _test.expect)(page).toHaveURL('/driver/dashboard');
        });
    });
    _test.test.describe('Routes Management', ()=>{
        _test.test.beforeEach(async ()=>{
            // Login y navegar a rutas
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
            await page.click('text=Rutas');
        });
        (0, _test.test)('should display assigned routes', async ()=>{
            await (0, _test.expect)(page.locator('text=Mis Rutas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Planificadas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Activa')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Completadas')).toBeVisible();
        });
        (0, _test.test)('should filter routes by date', async ()=>{
            // Cambiar fecha
            const today = new Date().toISOString().split('T')[0];
            await page.fill('input[type="date"]', today);
            // Verificar que se actualiza la vista
            await (0, _test.expect)(page.locator('input[type="date"]')).toHaveValue(today);
        });
        (0, _test.test)('should start a route when online', async ()=>{
            // Primero conectarse
            await page.click('text=Inicio');
            await page.click('button:has-text("Conectarse")');
            // Volver a rutas
            await page.click('text=Rutas');
            // Buscar botón de iniciar ruta (si hay rutas disponibles)
            const startButton = page.locator('button:has-text("Iniciar")').first();
            if (await startButton.isVisible()) {
                await startButton.click();
                // Verificar que se inicia la ruta
                await (0, _test.expect)(page.locator('text=Ruta Activa')).toBeVisible();
            }
        });
    });
    _test.test.describe('GPS Navigation', ()=>{
        _test.test.beforeEach(async ()=>{
            // Login y setup para navegación
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
        });
        (0, _test.test)('should access GPS navigation for active route', async ()=>{
            // Si hay una ruta activa, probar navegación
            const navButton = page.locator('button:has-text("Continuar Navegación")');
            if (await navButton.isVisible()) {
                await navButton.click();
                // Verificar que se carga la página de navegación
                await (0, _test.expect)(page.url()).toContain('/driver/route/');
                // Verificar elementos de navegación
                await (0, _test.expect)(page.locator('[data-testid="google-map"]')).toBeVisible();
            }
        });
        (0, _test.test)('should show navigation instructions when available', async ()=>{
            // Navegar a una ruta específica (mock)
            await page.goto('/driver/route/test-route-id');
            // Verificar elementos de navegación
            await (0, _test.expect)(page.locator('text=Navegando')).toBeVisible();
            await (0, _test.expect)(page.locator('button:has-text("Navegar")')).toBeVisible();
        });
    });
    _test.test.describe('Delivery Management', ()=>{
        _test.test.beforeEach(async ()=>{
            // Login y navegar a entregas
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
            await page.click('text=Entregas');
        });
        (0, _test.test)('should display delivery history', async ()=>{
            await (0, _test.expect)(page.locator('text=Mis Entregas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Historial y gestión de entregas')).toBeVisible();
        });
        (0, _test.test)('should filter deliveries by status', async ()=>{
            // Cambiar filtro de estado
            await page.selectOption('select', 'delivered');
            // Verificar que se aplica el filtro
            await (0, _test.expect)(page.locator('select')).toHaveValue('delivered');
        });
        (0, _test.test)('should search deliveries', async ()=>{
            // Buscar por término
            await page.fill('input[placeholder*="Buscar"]', 'Cliente Test');
            // Verificar que se actualiza la búsqueda
            await (0, _test.expect)(page.locator('input[placeholder*="Buscar"]')).toHaveValue('Cliente Test');
        });
    });
    _test.test.describe('Profile Management', ()=>{
        _test.test.beforeEach(async ()=>{
            // Login y navegar a perfil
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
            await page.click('text=Perfil');
        });
        (0, _test.test)('should display driver profile information', async ()=>{
            await (0, _test.expect)(page.locator('text=Mi Perfil')).toBeVisible();
            await (0, _test.expect)(page.locator('text=' + DRIVER_CREDENTIALS.name)).toBeVisible();
            await (0, _test.expect)(page.locator('text=' + DRIVER_CREDENTIALS.email)).toBeVisible();
        });
        (0, _test.test)('should show driver statistics', async ()=>{
            await (0, _test.expect)(page.locator('text=Estadísticas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Entregas Totales')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Rutas Completadas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Calificación')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Eficiencia')).toBeVisible();
        });
        (0, _test.test)('should logout successfully', async ()=>{
            await page.click('button:has-text("Cerrar Sesión")');
            // Verificar redirección al login
            await (0, _test.expect)(page).toHaveURL('/driver/login');
        });
    });
    _test.test.describe('Responsive Design', ()=>{
        (0, _test.test)('should work correctly on mobile viewport', async ()=>{
            // Cambiar a viewport móvil
            await page.setViewportSize({
                width: 375,
                height: 667
            });
            // Login
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
            // Verificar que la navegación móvil funciona
            await (0, _test.expect)(page.locator('nav')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Inicio')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Rutas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Entregas')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Perfil')).toBeVisible();
        });
        (0, _test.test)('should maintain functionality on tablet viewport', async ()=>{
            // Cambiar a viewport tablet
            await page.setViewportSize({
                width: 768,
                height: 1024
            });
            // Login y verificar funcionalidad
            await page.fill('input[type="email"]', DRIVER_CREDENTIALS.email);
            await page.click('button[type="submit"]');
            await page.waitForURL('/driver/dashboard');
            // Verificar que todos los elementos son visibles y funcionales
            await (0, _test.expect)(page.locator('text=Estado del Driver')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Estadísticas de Hoy')).toBeVisible();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,