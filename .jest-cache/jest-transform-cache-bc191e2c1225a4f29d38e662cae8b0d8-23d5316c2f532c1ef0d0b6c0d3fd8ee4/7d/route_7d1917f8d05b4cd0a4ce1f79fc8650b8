7a350c485ee95b2858be2eeefa525fda
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2l40eg1e1l() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\monitoring\\errors\\route.ts";
  var hash = "4db87dcb5bf972bb5c59ae3dc3f8ebe4a2ddfc23";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\monitoring\\errors\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 52
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "10": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 123
        }
      },
      "11": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "12": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 76
        }
      },
      "13": {
        start: {
          line: 34,
          column: 21
        },
        end: {
          line: 34,
          column: 41
        }
      },
      "14": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 32
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "17": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "18": {
        start: {
          line: 66,
          column: 41
        },
        end: {
          line: 66,
          column: 113
        }
      },
      "19": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "20": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 67
        }
      },
      "21": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "22": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 43
        }
      },
      "23": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 77
        }
      },
      "24": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "25": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 61
        }
      },
      "26": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "27": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "28": {
        start: {
          line: 99,
          column: 33
        },
        end: {
          line: 99,
          column: 53
        }
      },
      "29": {
        start: {
          line: 100,
          column: 22
        },
        end: {
          line: 100,
          column: 65
        }
      },
      "30": {
        start: {
          line: 101,
          column: 23
        },
        end: {
          line: 101,
          column: 66
        }
      },
      "31": {
        start: {
          line: 102,
          column: 22
        },
        end: {
          line: 102,
          column: 47
        }
      },
      "32": {
        start: {
          line: 103,
          column: 26
        },
        end: {
          line: 103,
          column: 55
        }
      },
      "33": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 64
        }
      },
      "34": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 79
        }
      },
      "35": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 30
        }
      },
      "36": {
        start: {
          line: 108,
          column: 31
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "37": {
        start: {
          line: 115,
          column: 26
        },
        end: {
          line: 115,
          column: 83
        }
      },
      "38": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 119,
          column: 44
        }
      },
      "39": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "40": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 45
        }
      },
      "41": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "42": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 53
        }
      },
      "43": {
        start: {
          line: 127,
          column: 49
        },
        end: {
          line: 127,
          column: 60
        }
      },
      "44": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "45": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 67
        }
      },
      "46": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "47": {
        start: {
          line: 139,
          column: 22
        },
        end: {
          line: 139,
          column: 52
        }
      },
      "48": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "49": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 61
        }
      },
      "50": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "51": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "52": {
        start: {
          line: 174,
          column: 25
        },
        end: {
          line: 174,
          column: 55
        }
      },
      "53": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "54": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 49
        }
      },
      "55": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 46
        }
      },
      "56": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 60
        }
      },
      "57": {
        start: {
          line: 186,
          column: 33
        },
        end: {
          line: 186,
          column: 52
        }
      },
      "58": {
        start: {
          line: 187,
          column: 32
        },
        end: {
          line: 187,
          column: 49
        }
      },
      "59": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 191,
          column: 5
        }
      },
      "60": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 26
        }
      },
      "61": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "62": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 22
        }
      },
      "63": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "64": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 24
        }
      },
      "65": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 17
        }
      },
      "66": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "67": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 211,
          column: 11
        }
      },
      "68": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "69": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "70": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 65
        }
      },
      "71": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 274,
          column: 5
        }
      },
      "72": {
        start: {
          line: 257,
          column: 37
        },
        end: {
          line: 257,
          column: 56
        }
      },
      "73": {
        start: {
          line: 258,
          column: 36
        },
        end: {
          line: 258,
          column: 53
        }
      },
      "74": {
        start: {
          line: 260,
          column: 26
        },
        end: {
          line: 260,
          column: 68
        }
      },
      "75": {
        start: {
          line: 261,
          column: 47
        },
        end: {
          line: 261,
          column: 210
        }
      },
      "76": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "77": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 66
        }
      },
      "78": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 19
        }
      },
      "79": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "80": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 122
        }
      },
      "81": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 79
        }
      },
      "82": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 62
        }
      },
      "83": {
        start: {
          line: 277,
          column: 4
        },
        end: {
          line: 283,
          column: 5
        }
      },
      "84": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 101
        }
      },
      "85": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 67
        }
      },
      "86": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 318,
          column: 5
        }
      },
      "87": {
        start: {
          line: 287,
          column: 39
        },
        end: {
          line: 287,
          column: 156
        }
      },
      "88": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "89": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 69
        }
      },
      "90": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 24
        }
      },
      "91": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "92": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 24
        }
      },
      "93": {
        start: {
          line: 296,
          column: 28
        },
        end: {
          line: 296,
          column: 40
        }
      },
      "94": {
        start: {
          line: 297,
          column: 30
        },
        end: {
          line: 300,
          column: 14
        }
      },
      "95": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 59
        }
      },
      "96": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 23
        }
      },
      "97": {
        start: {
          line: 301,
          column: 29
        },
        end: {
          line: 304,
          column: 14
        }
      },
      "98": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 69
        }
      },
      "99": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 23
        }
      },
      "100": {
        start: {
          line: 305,
          column: 34
        },
        end: {
          line: 308,
          column: 14
        }
      },
      "101": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 67
        }
      },
      "102": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 23
        }
      },
      "103": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 314,
          column: 10
        }
      },
      "104": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 65
        }
      },
      "105": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 19
          }
        },
        loc: {
          start: {
            line: 31,
            column: 29
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 31
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 97,
            column: 18
          }
        },
        loc: {
          start: {
            line: 97,
            column: 28
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 97
      },
      "6": {
        name: "analyzeAndAlert",
        decl: {
          start: {
            line: 171,
            column: 15
          },
          end: {
            line: 171,
            column: 30
          }
        },
        loc: {
          start: {
            line: 171,
            column: 44
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 171
      },
      "7": {
        name: "determineSeverity",
        decl: {
          start: {
            line: 185,
            column: 9
          },
          end: {
            line: 185,
            column: 26
          }
        },
        loc: {
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 185
      },
      "8": {
        name: "sendCriticalAlert",
        decl: {
          start: {
            line: 202,
            column: 15
          },
          end: {
            line: 202,
            column: 32
          }
        },
        loc: {
          start: {
            line: 202,
            column: 46
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 202
      },
      "9": {
        name: "checkErrorPatterns",
        decl: {
          start: {
            line: 255,
            column: 15
          },
          end: {
            line: 255,
            column: 33
          }
        },
        loc: {
          start: {
            line: 255,
            column: 47
          },
          end: {
            line: 275,
            column: 1
          }
        },
        line: 255
      },
      "10": {
        name: "sendPatternAlert",
        decl: {
          start: {
            line: 276,
            column: 15
          },
          end: {
            line: 276,
            column: 31
          }
        },
        loc: {
          start: {
            line: 276,
            column: 61
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 276
      },
      "11": {
        name: "getErrorStats",
        decl: {
          start: {
            line: 285,
            column: 15
          },
          end: {
            line: 285,
            column: 28
          }
        },
        loc: {
          start: {
            line: 285,
            column: 40
          },
          end: {
            line: 319,
            column: 1
          }
        },
        line: 285
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 297,
            column: 43
          },
          end: {
            line: 297,
            column: 44
          }
        },
        loc: {
          start: {
            line: 297,
            column: 57
          },
          end: {
            line: 300,
            column: 9
          }
        },
        line: 297
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 301,
            column: 42
          },
          end: {
            line: 301,
            column: 43
          }
        },
        loc: {
          start: {
            line: 301,
            column: 56
          },
          end: {
            line: 304,
            column: 9
          }
        },
        line: 301
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 305,
            column: 47
          },
          end: {
            line: 305,
            column: 48
          }
        },
        loc: {
          start: {
            line: 305,
            column: 61
          },
          end: {
            line: 308,
            column: 9
          }
        },
        line: 305
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 37,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 37,
            column: 32
          }
        }, {
          start: {
            line: 37,
            column: 36
          },
          end: {
            line: 37,
            column: 54
          }
        }, {
          start: {
            line: 37,
            column: 58
          },
          end: {
            line: 37,
            column: 78
          }
        }],
        line: 37
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 25
          },
          end: {
            line: 59,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 25
          },
          end: {
            line: 59,
            column: 57
          }
        }, {
          start: {
            line: 59,
            column: 61
          },
          end: {
            line: 59,
            column: 62
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 33
          },
          end: {
            line: 60,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 33
          },
          end: {
            line: 60,
            column: 65
          }
        }, {
          start: {
            line: 60,
            column: 69
          },
          end: {
            line: 60,
            column: 74
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 100,
            column: 31
          },
          end: {
            line: 100,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 31
          },
          end: {
            line: 100,
            column: 56
          }
        }, {
          start: {
            line: 100,
            column: 60
          },
          end: {
            line: 100,
            column: 64
          }
        }],
        line: 100
      },
      "6": {
        loc: {
          start: {
            line: 101,
            column: 32
          },
          end: {
            line: 101,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 32
          },
          end: {
            line: 101,
            column: 58
          }
        }, {
          start: {
            line: 101,
            column: 62
          },
          end: {
            line: 101,
            column: 65
          }
        }],
        line: 101
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 26
          },
          end: {
            line: 104,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 26
          },
          end: {
            line: 104,
            column: 55
          }
        }, {
          start: {
            line: 104,
            column: 59
          },
          end: {
            line: 104,
            column: 64
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 31
          },
          end: {
            line: 114,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 31
          },
          end: {
            line: 114,
            column: 20
          }
        }, {
          start: {
            line: 114,
            column: 24
          },
          end: {
            line: 114,
            column: 26
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "10": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 143,
            column: 24
          },
          end: {
            line: 143,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 24
          },
          end: {
            line: 143,
            column: 30
          }
        }, {
          start: {
            line: 143,
            column: 34
          },
          end: {
            line: 143,
            column: 36
          }
        }],
        line: 143
      },
      "13": {
        loc: {
          start: {
            line: 148,
            column: 27
          },
          end: {
            line: 148,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 27
          },
          end: {
            line: 148,
            column: 41
          }
        }, {
          start: {
            line: 148,
            column: 45
          },
          end: {
            line: 148,
            column: 46
          }
        }],
        line: 148
      },
      "14": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 189,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 189,
            column: 24
          }
        }, {
          start: {
            line: 189,
            column: 28
          },
          end: {
            line: 189,
            column: 58
          }
        }, {
          start: {
            line: 189,
            column: 62
          },
          end: {
            line: 189,
            column: 91
          }
        }],
        line: 189
      },
      "17": {
        loc: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "18": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 44
          }
        }, {
          start: {
            line: 193,
            column: 48
          },
          end: {
            line: 193,
            column: 82
          }
        }],
        line: 193
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "21": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "22": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "23": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 267,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 267,
            column: 25
          }
        }, {
          start: {
            line: 267,
            column: 29
          },
          end: {
            line: 267,
            column: 54
          }
        }],
        line: 267
      },
      "24": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "25": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "26": {
        loc: {
          start: {
            line: 298,
            column: 32
          },
          end: {
            line: 298,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 32
          },
          end: {
            line: 298,
            column: 48
          }
        }, {
          start: {
            line: 298,
            column: 52
          },
          end: {
            line: 298,
            column: 53
          }
        }],
        line: 298
      },
      "27": {
        loc: {
          start: {
            line: 302,
            column: 37
          },
          end: {
            line: 302,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 37
          },
          end: {
            line: 302,
            column: 58
          }
        }, {
          start: {
            line: 302,
            column: 62
          },
          end: {
            line: 302,
            column: 63
          }
        }],
        line: 302
      },
      "28": {
        loc: {
          start: {
            line: 306,
            column: 36
          },
          end: {
            line: 306,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 36
          },
          end: {
            line: 306,
            column: 56
          }
        }, {
          start: {
            line: 306,
            column: 60
          },
          end: {
            line: 306,
            column: 61
          }
        }],
        line: 306
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\monitoring\\errors\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// ===================================\r\n// ERROR MONITORING API\r\n// ===================================\r\n// API para recibir y almacenar reportes de errores del Error Boundary System\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// ===================================\r\n// INTERFACES\r\n// ===================================\r\n\r\ninterface ErrorReport {\r\n  errorId: string;\r\n  timestamp: number;\r\n  error: {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n  };\r\n  errorInfo?: {\r\n    componentStack: string;\r\n  };\r\n  context: {\r\n    level: string;\r\n    component: string;\r\n    url: string;\r\n    userAgent: string;\r\n    userId?: string;\r\n  };\r\n  recovery?: {\r\n    strategy: string;\r\n    retryCount: number;\r\n    successful: boolean;\r\n  };\r\n  performance?: {\r\n    timeToError: number;\r\n    memoryUsage?: number;\r\n  };\r\n}\r\n\r\n// ===================================\r\n// POST - RECIBIR REPORTE DE ERROR\r\n// ===================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('\uD83D\uDEA8 Error Monitoring API: Recibiendo reporte de error');\r\n\r\n    const body = await request.json();\r\n    const errorReport: ErrorReport = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!errorReport.errorId || !errorReport.error || !errorReport.context) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Datos de error incompletos' \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos para almacenamiento\r\n    const errorData = {\r\n      error_id: errorReport.errorId,\r\n      timestamp: new Date(errorReport.timestamp).toISOString(),\r\n      error_name: errorReport.error.name,\r\n      error_message: errorReport.error.message,\r\n      error_stack: errorReport.error.stack,\r\n      component_stack: errorReport.errorInfo?.componentStack,\r\n      level: errorReport.context.level,\r\n      component: errorReport.context.component,\r\n      url: errorReport.context.url,\r\n      user_agent: errorReport.context.userAgent,\r\n      user_id: errorReport.context.userId,\r\n      recovery_strategy: errorReport.recovery?.strategy,\r\n      retry_count: errorReport.recovery?.retryCount || 0,\r\n      recovery_successful: errorReport.recovery?.successful || false,\r\n      time_to_error: errorReport.performance?.timeToError,\r\n      memory_usage: errorReport.performance?.memoryUsage,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    // Almacenar en Supabase\r\n    const { data, error: dbError } = await supabase\r\n      .from('error_reports')\r\n      .insert(errorData)\r\n      .select()\r\n      .single();\r\n\r\n    if (dbError) {\r\n      console.error('\u274C Error almacenando reporte:', dbError);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Error almacenando reporte',\r\n          details: dbError.message \r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Analizar severidad y enviar alertas si es necesario\r\n    await analyzeAndAlert(errorReport);\r\n\r\n    console.log(`\u2705 Reporte de error almacenado: ${errorReport.errorId}`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Reporte de error procesado exitosamente',\r\n      errorId: errorReport.errorId,\r\n      stored: true\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('\u274C Error en API de monitoreo:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Error interno del servidor',\r\n        details: error.message \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - OBTENER REPORTES DE ERRORES\r\n// ===================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n    const level = searchParams.get('level');\r\n    const component = searchParams.get('component');\r\n    const timeframe = searchParams.get('timeframe') || '24h';\r\n\r\n    console.log('\uD83D\uDCCA Error Monitoring API: Obteniendo reportes de errores');\r\n\r\n    // Calcular fecha de inicio seg\xFAn timeframe\r\n    const now = new Date();\r\n    const timeframeHours = {\r\n      '1h': 1,\r\n      '6h': 6,\r\n      '24h': 24,\r\n      '7d': 24 * 7,\r\n      '30d': 24 * 30\r\n    }[timeframe] || 24;\r\n\r\n    const startTime = new Date(now.getTime() - (timeframeHours * 60 * 60 * 1000));\r\n\r\n    // Construir query\r\n    let query = supabase\r\n      .from('error_reports')\r\n      .select('*')\r\n      .gte('timestamp', startTime.toISOString())\r\n      .order('timestamp', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (level) {\r\n      query = query.eq('level', level);\r\n    }\r\n    if (component) {\r\n      query = query.eq('component', component);\r\n    }\r\n\r\n    const { data: errors, error: dbError } = await query;\r\n\r\n    if (dbError) {\r\n      console.error('\u274C Error obteniendo reportes:', dbError);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Error obteniendo reportes',\r\n          details: dbError.message \r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener estad\xEDsticas\r\n    const stats = await getErrorStats(startTime);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        errors: errors || [],\r\n        stats,\r\n        pagination: {\r\n          limit,\r\n          offset,\r\n          total: errors?.length || 0\r\n        },\r\n        filters: {\r\n          level,\r\n          component,\r\n          timeframe\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('\u274C Error en API de monitoreo:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Error interno del servidor',\r\n        details: error.message \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nasync function analyzeAndAlert(errorReport: ErrorReport) {\r\n  try {\r\n    // Determinar severidad\r\n    const severity = determineSeverity(errorReport);\r\n    \r\n    // Enviar alerta si es cr\xEDtico\r\n    if (severity === 'critical') {\r\n      await sendCriticalAlert(errorReport);\r\n    }\r\n\r\n    // Verificar patrones de errores frecuentes\r\n    await checkErrorPatterns(errorReport);\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error analizando reporte:', error);\r\n  }\r\n}\r\n\r\nfunction determineSeverity(errorReport: ErrorReport): 'low' | 'medium' | 'high' | 'critical' {\r\n  const { level, component } = errorReport.context;\r\n  const { name: errorName } = errorReport.error;\r\n\r\n  // Errores cr\xEDticos\r\n  if (level === 'page' || component.includes('checkout') || component.includes('payment')) {\r\n    return 'critical';\r\n  }\r\n\r\n  // Errores de alta prioridad\r\n  if (errorName.includes('ChunkLoadError') || errorName.includes('NetworkError')) {\r\n    return 'high';\r\n  }\r\n\r\n  // Errores de secci\xF3n\r\n  if (level === 'section') {\r\n    return 'medium';\r\n  }\r\n\r\n  return 'low';\r\n}\r\n\r\nasync function sendCriticalAlert(errorReport: ErrorReport) {\r\n  try {\r\n    // Aqu\xED se podr\xEDa integrar con servicios de notificaci\xF3n\r\n    // como Slack, Discord, email, etc.\r\n    \r\n    console.log('\uD83D\uDEA8 CRITICAL ERROR ALERT:', {\r\n      errorId: errorReport.errorId,\r\n      component: errorReport.context.component,\r\n      message: errorReport.error.message,\r\n      url: errorReport.context.url\r\n    });\r\n\r\n    // Ejemplo de integraci\xF3n con webhook de Slack\r\n    if (process.env.SLACK_WEBHOOK_URL) {\r\n      await fetch(process.env.SLACK_WEBHOOK_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          text: `\uD83D\uDEA8 CRITICAL ERROR in ${errorReport.context.component}`,\r\n          attachments: [{\r\n            color: 'danger',\r\n            fields: [\r\n              { title: 'Error ID', value: errorReport.errorId, short: true },\r\n              { title: 'Component', value: errorReport.context.component, short: true },\r\n              { title: 'Message', value: errorReport.error.message, short: false },\r\n              { title: 'URL', value: errorReport.context.url, short: false }\r\n            ]\r\n          }]\r\n        })\r\n      });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error enviando alerta cr\xEDtica:', error);\r\n  }\r\n}\r\n\r\nasync function checkErrorPatterns(errorReport: ErrorReport) {\r\n  try {\r\n    const { component, level } = errorReport.context;\r\n    const { name: errorName } = errorReport.error;\r\n\r\n    // Buscar errores similares en las \xFAltimas 24 horas\r\n    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n    \r\n    const { data: similarErrors, error } = await supabase\r\n      .from('error_reports')\r\n      .select('error_id, timestamp')\r\n      .eq('component', component)\r\n      .eq('error_name', errorName)\r\n      .gte('timestamp', oneDayAgo.toISOString());\r\n\r\n    if (error) {\r\n      console.error('\u274C Error verificando patrones:', error);\r\n      return;\r\n    }\r\n\r\n    // Si hay m\xE1s de 5 errores similares, es un patr\xF3n\r\n    if (similarErrors && similarErrors.length >= 5) {\r\n      console.warn(`\u26A0\uFE0F Error pattern detected: ${errorName} in ${component} (${similarErrors.length} occurrences)`);\r\n      \r\n      // Aqu\xED se podr\xEDa enviar una alerta de patr\xF3n detectado\r\n      await sendPatternAlert(component, errorName, similarErrors.length);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error verificando patrones:', error);\r\n  }\r\n}\r\n\r\nasync function sendPatternAlert(component: string, errorName: string, count: number) {\r\n  try {\r\n    console.log(`\uD83D\uDCC8 PATTERN ALERT: ${errorName} in ${component} occurred ${count} times in 24h`);\r\n    \r\n    // Aqu\xED se podr\xEDa enviar notificaci\xF3n de patr\xF3n\r\n    // por ejemplo, crear un issue en GitHub, enviar email, etc.\r\n    \r\n  } catch (error) {\r\n    console.error('\u274C Error enviando alerta de patr\xF3n:', error);\r\n  }\r\n}\r\n\r\nasync function getErrorStats(startTime: Date) {\r\n  try {\r\n    const { data: stats, error } = await supabase\r\n      .from('error_reports')\r\n      .select('level, error_name, component')\r\n      .gte('timestamp', startTime.toISOString());\r\n\r\n    if (error) {\r\n      console.error('\u274C Error obteniendo estad\xEDsticas:', error);\r\n      return null;\r\n    }\r\n\r\n    if (!stats) {return null;}\r\n\r\n    // Calcular estad\xEDsticas\r\n    const totalErrors = stats.length;\r\n    const errorsByLevel = stats.reduce((acc: any, error) => {\r\n      acc[error.level] = (acc[error.level] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const errorsByType = stats.reduce((acc: any, error) => {\r\n      acc[error.error_name] = (acc[error.error_name] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const errorsByComponent = stats.reduce((acc: any, error) => {\r\n      acc[error.component] = (acc[error.component] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      totalErrors,\r\n      errorsByLevel,\r\n      errorsByType,\r\n      errorsByComponent\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error calculando estad\xEDsticas:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "supabase", "createClient", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "SUPABASE_SERVICE_ROLE_KEY", "request", "console", "log", "body", "json", "errorReport", "errorId", "error", "context", "NextResponse", "success", "status", "errorData", "error_id", "timestamp", "Date", "toISOString", "error_name", "name", "error_message", "message", "error_stack", "stack", "component_stack", "errorInfo", "componentStack", "level", "component", "url", "user_agent", "userAgent", "user_id", "userId", "recovery_strategy", "recovery", "strategy", "retry_count", "retryCount", "recovery_successful", "successful", "time_to_error", "performance", "timeToError", "memory_usage", "memoryUsage", "created_at", "data", "dbError", "from", "insert", "select", "single", "details", "analyzeAndAlert", "stored", "searchParams", "URL", "limit", "parseInt", "get", "offset", "timeframe", "now", "timeframeHours", "startTime", "getTime", "query", "gte", "order", "ascending", "range", "eq", "errors", "stats", "getErrorStats", "pagination", "total", "length", "filters", "severity", "determineSeverity", "sendCriticalAlert", "checkErrorPatterns", "errorName", "includes", "SLACK_WEBHOOK_URL", "fetch", "method", "headers", "JSON", "stringify", "text", "attachments", "color", "fields", "title", "value", "short", "oneDayAgo", "similarErrors", "warn", "sendPatternAlert", "count", "totalErrors", "errorsByLevel", "reduce", "acc", "errorsByType", "errorsByComponent"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4db87dcb5bf972bb5c59ae3dc3f8ebe4a2ddfc23"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2l40eg1e1l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2l40eg1e1l();
cov_2l40eg1e1l().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[0]++;
  cov_2l40eg1e1l().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2l40eg1e1l().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2l40eg1e1l().f[1]++;
    cov_2l40eg1e1l().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2l40eg1e1l().f[2]++;
    cov_2l40eg1e1l().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2l40eg1e1l().f[3]++;
    cov_2l40eg1e1l().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2l40eg1e1l().s[7]++, require("next/server"));
const _supabasejs =
/* istanbul ignore next */
(cov_2l40eg1e1l().s[8]++, require("@supabase/supabase-js"));
const runtime =
/* istanbul ignore next */
(cov_2l40eg1e1l().s[9]++, 'nodejs');
// ===================================
// ERROR MONITORING API
// ===================================
// API para recibir y almacenar reportes de errores del Error Boundary System
const supabase =
/* istanbul ignore next */
(cov_2l40eg1e1l().s[10]++, (0, _supabasejs.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY));
async function POST(request) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[4]++;
  cov_2l40eg1e1l().s[11]++;
  try {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[12]++;
    console.log('ğ¨ Error Monitoring API: Recibiendo reporte de error');
    const body =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[13]++, await request.json());
    const errorReport =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[14]++, body);
    // Validar datos requeridos
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[1][0]++, !errorReport.errorId) ||
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[1][1]++, !errorReport.error) ||
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[1][2]++, !errorReport.context)) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[0][0]++;
      cov_2l40eg1e1l().s[16]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Datos de error incompletos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[0][1]++;
    }
    // Preparar datos para almacenamiento
    const errorData =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[17]++, {
      error_id: errorReport.errorId,
      timestamp: new Date(errorReport.timestamp).toISOString(),
      error_name: errorReport.error.name,
      error_message: errorReport.error.message,
      error_stack: errorReport.error.stack,
      component_stack: errorReport.errorInfo?.componentStack,
      level: errorReport.context.level,
      component: errorReport.context.component,
      url: errorReport.context.url,
      user_agent: errorReport.context.userAgent,
      user_id: errorReport.context.userId,
      recovery_strategy: errorReport.recovery?.strategy,
      retry_count:
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[2][0]++, errorReport.recovery?.retryCount) ||
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[2][1]++, 0),
      recovery_successful:
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[3][0]++, errorReport.recovery?.successful) ||
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[3][1]++, false),
      time_to_error: errorReport.performance?.timeToError,
      memory_usage: errorReport.performance?.memoryUsage,
      created_at: new Date().toISOString()
    });
    // Almacenar en Supabase
    const {
      data,
      error: dbError
    } =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[18]++, await supabase.from('error_reports').insert(errorData).select().single());
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[19]++;
    if (dbError) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[4][0]++;
      cov_2l40eg1e1l().s[20]++;
      console.error('â Error almacenando reporte:', dbError);
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[21]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error almacenando reporte',
        details: dbError.message
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[4][1]++;
    }
    // Analizar severidad y enviar alertas si es necesario
    cov_2l40eg1e1l().s[22]++;
    await analyzeAndAlert(errorReport);
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[23]++;
    console.log(`â Reporte de error almacenado: ${errorReport.errorId}`);
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[24]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Reporte de error procesado exitosamente',
      errorId: errorReport.errorId,
      stored: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[25]++;
    console.error('â Error en API de monitoreo:', error);
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[26]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor',
      details: error.message
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[5]++;
  cov_2l40eg1e1l().s[27]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[28]++, new URL(request.url));
    const limit =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[29]++, parseInt(
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[5][0]++, searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[5][1]++, '50')));
    const offset =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[30]++, parseInt(
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[6][0]++, searchParams.get('offset')) ||
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[6][1]++, '0')));
    const level =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[31]++, searchParams.get('level'));
    const component =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[32]++, searchParams.get('component'));
    const timeframe =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[33]++,
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[7][0]++, searchParams.get('timeframe')) ||
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[7][1]++, '24h'));
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[34]++;
    console.log('ğ Error Monitoring API: Obteniendo reportes de errores');
    // Calcular fecha de inicio segÃºn timeframe
    const now =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[35]++, new Date());
    const timeframeHours =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[36]++,
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[8][0]++, {
      '1h': 1,
      '6h': 6,
      '24h': 24,
      '7d': 24 * 7,
      '30d': 24 * 30
    }[timeframe]) ||
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[8][1]++, 24));
    const startTime =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[37]++, new Date(now.getTime() - timeframeHours * 60 * 60 * 1000));
    // Construir query
    let query =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[38]++, supabase.from('error_reports').select('*').gte('timestamp', startTime.toISOString()).order('timestamp', {
      ascending: false
    }).range(offset, offset + limit - 1));
    // Aplicar filtros
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[39]++;
    if (level) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[9][0]++;
      cov_2l40eg1e1l().s[40]++;
      query = query.eq('level', level);
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[9][1]++;
    }
    cov_2l40eg1e1l().s[41]++;
    if (component) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[10][0]++;
      cov_2l40eg1e1l().s[42]++;
      query = query.eq('component', component);
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[10][1]++;
    }
    const {
      data: errors,
      error: dbError
    } =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[43]++, await query);
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[44]++;
    if (dbError) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[11][0]++;
      cov_2l40eg1e1l().s[45]++;
      console.error('â Error obteniendo reportes:', dbError);
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[46]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error obteniendo reportes',
        details: dbError.message
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[11][1]++;
    }
    // Obtener estadÃ­sticas
    const stats =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[47]++, await getErrorStats(startTime));
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[48]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        errors:
        /* istanbul ignore next */
        (cov_2l40eg1e1l().b[12][0]++, errors) ||
        /* istanbul ignore next */
        (cov_2l40eg1e1l().b[12][1]++, []),
        stats,
        pagination: {
          limit,
          offset,
          total:
          /* istanbul ignore next */
          (cov_2l40eg1e1l().b[13][0]++, errors?.length) ||
          /* istanbul ignore next */
          (cov_2l40eg1e1l().b[13][1]++, 0)
        },
        filters: {
          level,
          component,
          timeframe
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[49]++;
    console.error('â Error en API de monitoreo:', error);
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[50]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor',
      details: error.message
    }, {
      status: 500
    });
  }
}
// ===================================
// FUNCIONES AUXILIARES
// ===================================
async function analyzeAndAlert(errorReport) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[6]++;
  cov_2l40eg1e1l().s[51]++;
  try {
    // Determinar severidad
    const severity =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[52]++, determineSeverity(errorReport));
    // Enviar alerta si es crÃ­tico
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[53]++;
    if (severity === 'critical') {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[14][0]++;
      cov_2l40eg1e1l().s[54]++;
      await sendCriticalAlert(errorReport);
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[14][1]++;
    }
    // Verificar patrones de errores frecuentes
    cov_2l40eg1e1l().s[55]++;
    await checkErrorPatterns(errorReport);
  } catch (error) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[56]++;
    console.error('â Error analizando reporte:', error);
  }
}
function determineSeverity(errorReport) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[7]++;
  const {
    level,
    component
  } =
  /* istanbul ignore next */
  (cov_2l40eg1e1l().s[57]++, errorReport.context);
  const {
    name: errorName
  } =
  /* istanbul ignore next */
  (cov_2l40eg1e1l().s[58]++, errorReport.error);
  // Errores crÃ­ticos
  /* istanbul ignore next */
  cov_2l40eg1e1l().s[59]++;
  if (
  /* istanbul ignore next */
  (cov_2l40eg1e1l().b[16][0]++, level === 'page') ||
  /* istanbul ignore next */
  (cov_2l40eg1e1l().b[16][1]++, component.includes('checkout')) ||
  /* istanbul ignore next */
  (cov_2l40eg1e1l().b[16][2]++, component.includes('payment'))) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().b[15][0]++;
    cov_2l40eg1e1l().s[60]++;
    return 'critical';
  } else
  /* istanbul ignore next */
  {
    cov_2l40eg1e1l().b[15][1]++;
  }
  // Errores de alta prioridad
  cov_2l40eg1e1l().s[61]++;
  if (
  /* istanbul ignore next */
  (cov_2l40eg1e1l().b[18][0]++, errorName.includes('ChunkLoadError')) ||
  /* istanbul ignore next */
  (cov_2l40eg1e1l().b[18][1]++, errorName.includes('NetworkError'))) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().b[17][0]++;
    cov_2l40eg1e1l().s[62]++;
    return 'high';
  } else
  /* istanbul ignore next */
  {
    cov_2l40eg1e1l().b[17][1]++;
  }
  // Errores de secciÃ³n
  cov_2l40eg1e1l().s[63]++;
  if (level === 'section') {
    /* istanbul ignore next */
    cov_2l40eg1e1l().b[19][0]++;
    cov_2l40eg1e1l().s[64]++;
    return 'medium';
  } else
  /* istanbul ignore next */
  {
    cov_2l40eg1e1l().b[19][1]++;
  }
  cov_2l40eg1e1l().s[65]++;
  return 'low';
}
async function sendCriticalAlert(errorReport) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[8]++;
  cov_2l40eg1e1l().s[66]++;
  try {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[67]++;
    // AquÃ­ se podrÃ­a integrar con servicios de notificaciÃ³n
    // como Slack, Discord, email, etc.
    console.log('ğ¨ CRITICAL ERROR ALERT:', {
      errorId: errorReport.errorId,
      component: errorReport.context.component,
      message: errorReport.error.message,
      url: errorReport.context.url
    });
    // Ejemplo de integraciÃ³n con webhook de Slack
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[68]++;
    if (process.env.SLACK_WEBHOOK_URL) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[20][0]++;
      cov_2l40eg1e1l().s[69]++;
      await fetch(process.env.SLACK_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: `ğ¨ CRITICAL ERROR in ${errorReport.context.component}`,
          attachments: [{
            color: 'danger',
            fields: [{
              title: 'Error ID',
              value: errorReport.errorId,
              short: true
            }, {
              title: 'Component',
              value: errorReport.context.component,
              short: true
            }, {
              title: 'Message',
              value: errorReport.error.message,
              short: false
            }, {
              title: 'URL',
              value: errorReport.context.url,
              short: false
            }]
          }]
        })
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[20][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[70]++;
    console.error('â Error enviando alerta crÃ­tica:', error);
  }
}
async function checkErrorPatterns(errorReport) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[9]++;
  cov_2l40eg1e1l().s[71]++;
  try {
    const {
      component,
      level
    } =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[72]++, errorReport.context);
    const {
      name: errorName
    } =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[73]++, errorReport.error);
    // Buscar errores similares en las Ãºltimas 24 horas
    const oneDayAgo =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[74]++, new Date(Date.now() - 24 * 60 * 60 * 1000));
    const {
      data: similarErrors,
      error
    } =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[75]++, await supabase.from('error_reports').select('error_id, timestamp').eq('component', component).eq('error_name', errorName).gte('timestamp', oneDayAgo.toISOString()));
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[76]++;
    if (error) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[21][0]++;
      cov_2l40eg1e1l().s[77]++;
      console.error('â Error verificando patrones:', error);
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[78]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[21][1]++;
    }
    // Si hay mÃ¡s de 5 errores similares, es un patrÃ³n
    cov_2l40eg1e1l().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[23][0]++, similarErrors) &&
    /* istanbul ignore next */
    (cov_2l40eg1e1l().b[23][1]++, similarErrors.length >= 5)) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[22][0]++;
      cov_2l40eg1e1l().s[80]++;
      console.warn(`â ï¸ Error pattern detected: ${errorName} in ${component} (${similarErrors.length} occurrences)`);
      // AquÃ­ se podrÃ­a enviar una alerta de patrÃ³n detectado
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[81]++;
      await sendPatternAlert(component, errorName, similarErrors.length);
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[22][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[82]++;
    console.error('â Error verificando patrones:', error);
  }
}
async function sendPatternAlert(component, errorName, count) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[10]++;
  cov_2l40eg1e1l().s[83]++;
  try {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[84]++;
    console.log(`ğ PATTERN ALERT: ${errorName} in ${component} occurred ${count} times in 24h`);
    // AquÃ­ se podrÃ­a enviar notificaciÃ³n de patrÃ³n
    // por ejemplo, crear un issue en GitHub, enviar email, etc.
  } catch (error) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[85]++;
    console.error('â Error enviando alerta de patrÃ³n:', error);
  }
}
async function getErrorStats(startTime) {
  /* istanbul ignore next */
  cov_2l40eg1e1l().f[11]++;
  cov_2l40eg1e1l().s[86]++;
  try {
    const {
      data: stats,
      error
    } =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[87]++, await supabase.from('error_reports').select('level, error_name, component').gte('timestamp', startTime.toISOString()));
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[88]++;
    if (error) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[24][0]++;
      cov_2l40eg1e1l().s[89]++;
      console.error('â Error obteniendo estadÃ­sticas:', error);
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[90]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[24][1]++;
    }
    cov_2l40eg1e1l().s[91]++;
    if (!stats) {
      /* istanbul ignore next */
      cov_2l40eg1e1l().b[25][0]++;
      cov_2l40eg1e1l().s[92]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2l40eg1e1l().b[25][1]++;
    }
    // Calcular estadÃ­sticas
    const totalErrors =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[93]++, stats.length);
    const errorsByLevel =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[94]++, stats.reduce((acc, error) => {
      /* istanbul ignore next */
      cov_2l40eg1e1l().f[12]++;
      cov_2l40eg1e1l().s[95]++;
      acc[error.level] = (
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[26][0]++, acc[error.level]) ||
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[26][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[96]++;
      return acc;
    }, {}));
    const errorsByType =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[97]++, stats.reduce((acc, error) => {
      /* istanbul ignore next */
      cov_2l40eg1e1l().f[13]++;
      cov_2l40eg1e1l().s[98]++;
      acc[error.error_name] = (
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[27][0]++, acc[error.error_name]) ||
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[27][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[99]++;
      return acc;
    }, {}));
    const errorsByComponent =
    /* istanbul ignore next */
    (cov_2l40eg1e1l().s[100]++, stats.reduce((acc, error) => {
      /* istanbul ignore next */
      cov_2l40eg1e1l().f[14]++;
      cov_2l40eg1e1l().s[101]++;
      acc[error.component] = (
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[28][0]++, acc[error.component]) ||
      /* istanbul ignore next */
      (cov_2l40eg1e1l().b[28][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_2l40eg1e1l().s[102]++;
      return acc;
    }, {}));
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[103]++;
    return {
      totalErrors,
      errorsByLevel,
      errorsByType,
      errorsByComponent
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[104]++;
    console.error('â Error calculando estadÃ­sticas:', error);
    /* istanbul ignore next */
    cov_2l40eg1e1l().s[105]++;
    return null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,