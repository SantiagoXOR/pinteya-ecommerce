{"version":3,"names":["cov_2l40eg1e1l","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","request","console","log","body","json","errorReport","b","errorId","error","context","_server","NextResponse","success","status","errorData","error_id","timestamp","Date","toISOString","error_name","name","error_message","message","error_stack","stack","component_stack","errorInfo","componentStack","level","component","url","user_agent","userAgent","user_id","userId","recovery_strategy","recovery","strategy","retry_count","retryCount","recovery_successful","successful","time_to_error","performance","timeToError","memory_usage","memoryUsage","created_at","data","dbError","from","insert","select","single","details","analyzeAndAlert","stored","searchParams","URL","limit","parseInt","get","offset","timeframe","now","timeframeHours","startTime","getTime","query","gte","order","ascending","range","eq","errors","stats","getErrorStats","pagination","total","length","filters","severity","determineSeverity","sendCriticalAlert","checkErrorPatterns","errorName","includes","SLACK_WEBHOOK_URL","fetch","method","headers","JSON","stringify","text","attachments","color","fields","title","value","short","oneDayAgo","similarErrors","warn","sendPatternAlert","count","totalErrors","errorsByLevel","reduce","acc","errorsByType","errorsByComponent"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\monitoring\\errors\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// ===================================\r\n// ERROR MONITORING API\r\n// ===================================\r\n// API para recibir y almacenar reportes de errores del Error Boundary System\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// ===================================\r\n// INTERFACES\r\n// ===================================\r\n\r\ninterface ErrorReport {\r\n  errorId: string;\r\n  timestamp: number;\r\n  error: {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n  };\r\n  errorInfo?: {\r\n    componentStack: string;\r\n  };\r\n  context: {\r\n    level: string;\r\n    component: string;\r\n    url: string;\r\n    userAgent: string;\r\n    userId?: string;\r\n  };\r\n  recovery?: {\r\n    strategy: string;\r\n    retryCount: number;\r\n    successful: boolean;\r\n  };\r\n  performance?: {\r\n    timeToError: number;\r\n    memoryUsage?: number;\r\n  };\r\n}\r\n\r\n// ===================================\r\n// POST - RECIBIR REPORTE DE ERROR\r\n// ===================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üö® Error Monitoring API: Recibiendo reporte de error');\r\n\r\n    const body = await request.json();\r\n    const errorReport: ErrorReport = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!errorReport.errorId || !errorReport.error || !errorReport.context) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Datos de error incompletos' \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos para almacenamiento\r\n    const errorData = {\r\n      error_id: errorReport.errorId,\r\n      timestamp: new Date(errorReport.timestamp).toISOString(),\r\n      error_name: errorReport.error.name,\r\n      error_message: errorReport.error.message,\r\n      error_stack: errorReport.error.stack,\r\n      component_stack: errorReport.errorInfo?.componentStack,\r\n      level: errorReport.context.level,\r\n      component: errorReport.context.component,\r\n      url: errorReport.context.url,\r\n      user_agent: errorReport.context.userAgent,\r\n      user_id: errorReport.context.userId,\r\n      recovery_strategy: errorReport.recovery?.strategy,\r\n      retry_count: errorReport.recovery?.retryCount || 0,\r\n      recovery_successful: errorReport.recovery?.successful || false,\r\n      time_to_error: errorReport.performance?.timeToError,\r\n      memory_usage: errorReport.performance?.memoryUsage,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    // Almacenar en Supabase\r\n    const { data, error: dbError } = await supabase\r\n      .from('error_reports')\r\n      .insert(errorData)\r\n      .select()\r\n      .single();\r\n\r\n    if (dbError) {\r\n      console.error('‚ùå Error almacenando reporte:', dbError);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Error almacenando reporte',\r\n          details: dbError.message \r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Analizar severidad y enviar alertas si es necesario\r\n    await analyzeAndAlert(errorReport);\r\n\r\n    console.log(`‚úÖ Reporte de error almacenado: ${errorReport.errorId}`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Reporte de error procesado exitosamente',\r\n      errorId: errorReport.errorId,\r\n      stored: true\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('‚ùå Error en API de monitoreo:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Error interno del servidor',\r\n        details: error.message \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - OBTENER REPORTES DE ERRORES\r\n// ===================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n    const level = searchParams.get('level');\r\n    const component = searchParams.get('component');\r\n    const timeframe = searchParams.get('timeframe') || '24h';\r\n\r\n    console.log('üìä Error Monitoring API: Obteniendo reportes de errores');\r\n\r\n    // Calcular fecha de inicio seg√∫n timeframe\r\n    const now = new Date();\r\n    const timeframeHours = {\r\n      '1h': 1,\r\n      '6h': 6,\r\n      '24h': 24,\r\n      '7d': 24 * 7,\r\n      '30d': 24 * 30\r\n    }[timeframe] || 24;\r\n\r\n    const startTime = new Date(now.getTime() - (timeframeHours * 60 * 60 * 1000));\r\n\r\n    // Construir query\r\n    let query = supabase\r\n      .from('error_reports')\r\n      .select('*')\r\n      .gte('timestamp', startTime.toISOString())\r\n      .order('timestamp', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (level) {\r\n      query = query.eq('level', level);\r\n    }\r\n    if (component) {\r\n      query = query.eq('component', component);\r\n    }\r\n\r\n    const { data: errors, error: dbError } = await query;\r\n\r\n    if (dbError) {\r\n      console.error('‚ùå Error obteniendo reportes:', dbError);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Error obteniendo reportes',\r\n          details: dbError.message \r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener estad√≠sticas\r\n    const stats = await getErrorStats(startTime);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        errors: errors || [],\r\n        stats,\r\n        pagination: {\r\n          limit,\r\n          offset,\r\n          total: errors?.length || 0\r\n        },\r\n        filters: {\r\n          level,\r\n          component,\r\n          timeframe\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('‚ùå Error en API de monitoreo:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Error interno del servidor',\r\n        details: error.message \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nasync function analyzeAndAlert(errorReport: ErrorReport) {\r\n  try {\r\n    // Determinar severidad\r\n    const severity = determineSeverity(errorReport);\r\n    \r\n    // Enviar alerta si es cr√≠tico\r\n    if (severity === 'critical') {\r\n      await sendCriticalAlert(errorReport);\r\n    }\r\n\r\n    // Verificar patrones de errores frecuentes\r\n    await checkErrorPatterns(errorReport);\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error analizando reporte:', error);\r\n  }\r\n}\r\n\r\nfunction determineSeverity(errorReport: ErrorReport): 'low' | 'medium' | 'high' | 'critical' {\r\n  const { level, component } = errorReport.context;\r\n  const { name: errorName } = errorReport.error;\r\n\r\n  // Errores cr√≠ticos\r\n  if (level === 'page' || component.includes('checkout') || component.includes('payment')) {\r\n    return 'critical';\r\n  }\r\n\r\n  // Errores de alta prioridad\r\n  if (errorName.includes('ChunkLoadError') || errorName.includes('NetworkError')) {\r\n    return 'high';\r\n  }\r\n\r\n  // Errores de secci√≥n\r\n  if (level === 'section') {\r\n    return 'medium';\r\n  }\r\n\r\n  return 'low';\r\n}\r\n\r\nasync function sendCriticalAlert(errorReport: ErrorReport) {\r\n  try {\r\n    // Aqu√≠ se podr√≠a integrar con servicios de notificaci√≥n\r\n    // como Slack, Discord, email, etc.\r\n    \r\n    console.log('üö® CRITICAL ERROR ALERT:', {\r\n      errorId: errorReport.errorId,\r\n      component: errorReport.context.component,\r\n      message: errorReport.error.message,\r\n      url: errorReport.context.url\r\n    });\r\n\r\n    // Ejemplo de integraci√≥n con webhook de Slack\r\n    if (process.env.SLACK_WEBHOOK_URL) {\r\n      await fetch(process.env.SLACK_WEBHOOK_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          text: `üö® CRITICAL ERROR in ${errorReport.context.component}`,\r\n          attachments: [{\r\n            color: 'danger',\r\n            fields: [\r\n              { title: 'Error ID', value: errorReport.errorId, short: true },\r\n              { title: 'Component', value: errorReport.context.component, short: true },\r\n              { title: 'Message', value: errorReport.error.message, short: false },\r\n              { title: 'URL', value: errorReport.context.url, short: false }\r\n            ]\r\n          }]\r\n        })\r\n      });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error enviando alerta cr√≠tica:', error);\r\n  }\r\n}\r\n\r\nasync function checkErrorPatterns(errorReport: ErrorReport) {\r\n  try {\r\n    const { component, level } = errorReport.context;\r\n    const { name: errorName } = errorReport.error;\r\n\r\n    // Buscar errores similares en las √∫ltimas 24 horas\r\n    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n    \r\n    const { data: similarErrors, error } = await supabase\r\n      .from('error_reports')\r\n      .select('error_id, timestamp')\r\n      .eq('component', component)\r\n      .eq('error_name', errorName)\r\n      .gte('timestamp', oneDayAgo.toISOString());\r\n\r\n    if (error) {\r\n      console.error('‚ùå Error verificando patrones:', error);\r\n      return;\r\n    }\r\n\r\n    // Si hay m√°s de 5 errores similares, es un patr√≥n\r\n    if (similarErrors && similarErrors.length >= 5) {\r\n      console.warn(`‚ö†Ô∏è Error pattern detected: ${errorName} in ${component} (${similarErrors.length} occurrences)`);\r\n      \r\n      // Aqu√≠ se podr√≠a enviar una alerta de patr√≥n detectado\r\n      await sendPatternAlert(component, errorName, similarErrors.length);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error verificando patrones:', error);\r\n  }\r\n}\r\n\r\nasync function sendPatternAlert(component: string, errorName: string, count: number) {\r\n  try {\r\n    console.log(`üìà PATTERN ALERT: ${errorName} in ${component} occurred ${count} times in 24h`);\r\n    \r\n    // Aqu√≠ se podr√≠a enviar notificaci√≥n de patr√≥n\r\n    // por ejemplo, crear un issue en GitHub, enviar email, etc.\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error enviando alerta de patr√≥n:', error);\r\n  }\r\n}\r\n\r\nasync function getErrorStats(startTime: Date) {\r\n  try {\r\n    const { data: stats, error } = await supabase\r\n      .from('error_reports')\r\n      .select('level, error_name, component')\r\n      .gte('timestamp', startTime.toISOString());\r\n\r\n    if (error) {\r\n      console.error('‚ùå Error obteniendo estad√≠sticas:', error);\r\n      return null;\r\n    }\r\n\r\n    if (!stats) {return null;}\r\n\r\n    // Calcular estad√≠sticas\r\n    const totalErrors = stats.length;\r\n    const errorsByLevel = stats.reduce((acc: any, error) => {\r\n      acc[error.level] = (acc[error.level] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const errorsByType = stats.reduce((acc: any, error) => {\r\n      acc[error.error_name] = (acc[error.error_name] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const errorsByComponent = stats.reduce((acc: any, error) => {\r\n      acc[error.component] = (acc[error.component] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      totalErrors,\r\n      errorsByLevel,\r\n      errorsByType,\r\n      errorsByComponent\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error calculando estad√≠sticas:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}