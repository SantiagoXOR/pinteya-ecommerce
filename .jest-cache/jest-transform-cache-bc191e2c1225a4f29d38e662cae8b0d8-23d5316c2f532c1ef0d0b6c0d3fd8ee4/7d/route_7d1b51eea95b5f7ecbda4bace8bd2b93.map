{"version":3,"names":["cov_1u39iq4k6t","actualCoverage","s","GET","f","POST","runtime","request","authResult","_enterpriseauthutils","requireCriticalAuth","success","b","_server","NextResponse","json","error","code","enterprise","operation","status","context","permissions","includes","role","required_permissions","securityKey","email","password","firstName","lastName","emailRegex","test","length","hasUpperCase","hasLowerCase","hasNumbers","hasSpecialChar","result","_enterpriserlsutils","executeWithRLS","client","rlsContext","checkRLSPermission","Error","data","existingAuthUser","_supabase","supabaseAdmin","auth","admin","listUsers","userExists","users","find","u","authUser","newAuthUser","authError","createUser","email_confirm","user_metadata","first_name","last_name","created_by","userId","enterprise_admin","security_level","message","user","existingProfile","from","select","eq","single","updatedProfile","updateError","update","supabase_user_id","id","metadata","updated_by","last_admin_update","Date","toISOString","updated_at","action","profile","adminRole","newProfile","profileError","insert","role_id","is_active","is_verified","created_via","created_at","enforceRLS","auditLog","adminOverride","rls","_enterprisecache","invalidateUserCache","auth_id","name","user_roles","role_name","rls_enabled","permissions_granted","timestamp","console","instructions","method","required_fields","optional_fields","security_key","password_requirements","min_length","must_contain","features"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user-enterprise\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API Enterprise para crear usuario administrador\r\n * Refactorizada con utilidades enterprise + RLS + validaciones robustas\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { \r\n  requireCriticalAuth \r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS,\r\n  checkRLSPermission\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  invalidateUserCache\r\n} from '@/lib/auth/enterprise-cache';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // ENTERPRISE: Autenticación crítica para operaciones de creación de admin\r\n    const authResult = await requireCriticalAuth(request);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true,\r\n          operation: 'CREATE_ADMIN_USER'\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // ENTERPRISE: Verificar permisos específicos para crear admins\r\n    if (!context.permissions.includes('admin_create') && context.role !== 'admin') {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Permisos insuficientes para crear usuarios administradores',\r\n          code: 'INSUFFICIENT_PERMISSIONS',\r\n          enterprise: true,\r\n          required_permissions: ['admin_create']\r\n        },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    const { \r\n      securityKey, \r\n      email, \r\n      password, \r\n      firstName = 'Admin', \r\n      lastName = 'User',\r\n      permissions = ['admin_access', 'user_management', 'products_create', 'products_update', 'products_delete']\r\n    } = await request.json();\r\n\r\n    // ENTERPRISE: Validación de clave de seguridad\r\n    if (securityKey !== 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025') {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Clave de seguridad enterprise incorrecta',\r\n          code: 'INVALID_SECURITY_KEY',\r\n          enterprise: true\r\n        },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // ENTERPRISE: Validaciones robustas\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Email y contraseña son requeridos',\r\n          code: 'MISSING_REQUIRED_FIELDS',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // ENTERPRISE: Validación de email\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Formato de email inválido',\r\n          code: 'INVALID_EMAIL_FORMAT',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // ENTERPRISE: Validación de contraseña robusta\r\n    if (password.length < 12) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'La contraseña debe tener al menos 12 caracteres para admin',\r\n          code: 'WEAK_PASSWORD',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // ENTERPRISE: Validación de complejidad de contraseña\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n    if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'La contraseña debe contener mayúsculas, minúsculas, números y caracteres especiales',\r\n          code: 'PASSWORD_COMPLEXITY_FAILED',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // ENTERPRISE: Ejecutar creación con RLS y auditoría\r\n    const result = await executeWithRLS(\r\n      context,\r\n      async (client, rlsContext) => {\r\n        // Verificar permisos RLS específicos\r\n        if (!checkRLSPermission(rlsContext, 'admin_create')) {\r\n          throw new Error('Permisos RLS insuficientes para crear administradores');\r\n        }\r\n\r\n        // 1. Verificar si el usuario ya existe en auth.users\r\n        const { data: existingAuthUser } = await supabaseAdmin.auth.admin.listUsers();\r\n        const userExists = existingAuthUser.users.find(u => u.email === email);\r\n\r\n        let authUser;\r\n\r\n        if (userExists) {\r\n          authUser = userExists;\r\n        } else {\r\n          // 2. Crear usuario en Supabase Auth con metadata enterprise\r\n          const { data: newAuthUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n            email,\r\n            password,\r\n            email_confirm: true,\r\n            user_metadata: {\r\n              first_name: firstName,\r\n              last_name: lastName,\r\n              role: 'admin',\r\n              created_by: context.userId,\r\n              enterprise_admin: true,\r\n              security_level: 'critical'\r\n            }\r\n          });\r\n\r\n          if (authError) {\r\n            throw new Error(`Error creando usuario en Auth: ${authError.message}`);\r\n          }\r\n\r\n          authUser = newAuthUser.user;\r\n        }\r\n\r\n        // 3. Verificar si el perfil ya existe\r\n        const { data: existingProfile } = await client\r\n          .from('user_profiles')\r\n          .select('*')\r\n          .eq('email', email)\r\n          .single();\r\n\r\n        if (existingProfile) {\r\n          // 4. Actualizar perfil existente con datos enterprise\r\n          const { data: updatedProfile, error: updateError } = await client\r\n            .from('user_profiles')\r\n            .update({\r\n              supabase_user_id: authUser.id,\r\n              first_name: firstName,\r\n              last_name: lastName,\r\n              permissions: permissions,\r\n              metadata: {\r\n                ...existingProfile.metadata,\r\n                updated_by: context.userId,\r\n                enterprise_admin: true,\r\n                last_admin_update: new Date().toISOString()\r\n              },\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('email', email)\r\n            .select(`\r\n              *,\r\n              user_roles (\r\n                role_name,\r\n                permissions\r\n              )\r\n            `)\r\n            .single();\r\n\r\n          if (updateError) {\r\n            throw new Error(`Error actualizando perfil: ${updateError.message}`);\r\n          }\r\n\r\n          return {\r\n            action: 'updated',\r\n            authUser,\r\n            profile: updatedProfile\r\n          };\r\n        } else {\r\n          // 5. Obtener rol de admin\r\n          const { data: adminRole } = await client\r\n            .from('user_roles')\r\n            .select('id')\r\n            .eq('role_name', 'admin')\r\n            .single();\r\n\r\n          if (!adminRole) {\r\n            throw new Error('Rol de admin no encontrado en la base de datos');\r\n          }\r\n\r\n          // 6. Crear nuevo perfil enterprise\r\n          const { data: newProfile, error: profileError } = await client\r\n            .from('user_profiles')\r\n            .insert({\r\n              supabase_user_id: authUser.id,\r\n              email,\r\n              first_name: firstName,\r\n              last_name: lastName,\r\n              role_id: adminRole.id,\r\n              permissions: permissions,\r\n              is_active: true,\r\n              is_verified: true,\r\n              metadata: {\r\n                created_by: context.userId,\r\n                enterprise_admin: true,\r\n                security_level: 'critical',\r\n                created_via: 'enterprise_api'\r\n              },\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .select(`\r\n              *,\r\n              user_roles (\r\n                role_name,\r\n                permissions\r\n              )\r\n            `)\r\n            .single();\r\n\r\n          if (profileError) {\r\n            throw new Error(`Error creando perfil: ${profileError.message}`);\r\n          }\r\n\r\n          return {\r\n            action: 'created',\r\n            authUser,\r\n            profile: newProfile\r\n          };\r\n        }\r\n      },\r\n      {\r\n        enforceRLS: true,\r\n        auditLog: true,\r\n        adminOverride: true // Permitir bypass RLS para esta operación crítica\r\n      }\r\n    );\r\n\r\n    if (!result.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: result.error,\r\n          code: result.code,\r\n          enterprise: true,\r\n          rls: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { action, authUser, profile } = result.data!;\r\n\r\n    // ENTERPRISE: Invalidar cache relacionado\r\n    invalidateUserCache(authUser.id);\r\n\r\n    // ENTERPRISE: Respuesta enterprise con información completa\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `Usuario administrador ${action === 'created' ? 'creado' : 'actualizado'} correctamente`,\r\n      data: {\r\n        action,\r\n        user: {\r\n          auth_id: authUser.id,\r\n          email: authUser.email,\r\n          profile: {\r\n            id: profile.id,\r\n            name: `${profile.first_name} ${profile.last_name}`,\r\n            role: profile.user_roles?.role_name,\r\n            permissions: profile.permissions,\r\n            is_active: profile.is_active,\r\n            created_at: profile.created_at\r\n          }\r\n        }\r\n      },\r\n      enterprise: {\r\n        security_level: 'critical',\r\n        rls_enabled: true,\r\n        created_by: context.userId,\r\n        permissions_granted: permissions\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    }, { status: action === 'created' ? 201 : 200 });\r\n\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE] Error en create-admin-user-enterprise:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor enterprise',\r\n        code: 'INTERNAL_SERVER_ERROR',\r\n        enterprise: true\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    message: 'API Enterprise para crear usuario administrador',\r\n    enterprise: true,\r\n    instructions: {\r\n      method: 'POST',\r\n      required_fields: ['securityKey', 'email', 'password'],\r\n      optional_fields: ['firstName', 'lastName', 'permissions'],\r\n      security_key: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\r\n      password_requirements: {\r\n        min_length: 12,\r\n        must_contain: ['uppercase', 'lowercase', 'numbers', 'special_chars']\r\n      }\r\n    },\r\n    features: [\r\n      'Enterprise authentication with critical security level',\r\n      'Row Level Security (RLS) enforcement',\r\n      'Robust password validation',\r\n      'Audit logging',\r\n      'Cache invalidation',\r\n      'Comprehensive error handling'\r\n    ]\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}