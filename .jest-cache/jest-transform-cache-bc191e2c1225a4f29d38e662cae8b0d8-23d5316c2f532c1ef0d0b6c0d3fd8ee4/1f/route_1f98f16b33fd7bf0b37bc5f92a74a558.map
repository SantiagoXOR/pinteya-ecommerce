{"version":3,"names":["cov_2bmppjh4xr","actualCoverage","s","GET","f","POST","POST_QUOTE","runtime","CreateCourierSchema","_zod","z","object","name","string","min","code","regex","api_endpoint","url","optional","api_key","supported_services","array","nativeEnum","_logistics","ShippingService","coverage_areas","base_cost","number","cost_per_kg","free_shipping_threshold","positive","max_weight_kg","max_dimensions_cm","logo_url","website_url","contact_phone","contact_email","email","is_active","boolean","default","UpdateCourierSchema","partial","ShippingQuoteSchema","origin_address","city","state","postal_code","destination_address","weight_kg","dimensions_cm","declared_value","service_type","courier_codes","validateAdminAuth","request","session","_config","auth","user","b","_server","NextResponse","json","error","status","calculateShippingCost","courier","weightKg","declaredValue","cost","Math","round","calculateEstimatedDeliveryDays","service","originState","destinationState","baseDays","SAME_DAY","NEXT_DAY","EXPRESS","STANDARD","extraDays","authError","searchParams","URL","activeOnly","get","includeStats","supabase","_server1","createClient","query","from","select","order","eq","data","couriers","couriersWithStats","courierStats","Promise","all","map","shipments","id","totalShipments","length","deliveredShipments","filter","totalRevenue","reduce","acc","shipping_cost","stats","total_shipments","delivered_shipments","delivery_rate","total_revenue","console","details","Error","message","body","validatedData","parse","existingCourier","single","apiKeyEncrypted","Buffer","toString","courierError","insert","api_key_encrypted","ZodError","errors","err","path","join","in","quotes","includes","servicesToQuote","estimatedDays","estimatedDate","Date","setDate","getDate","push","courier_id","courier_name","estimated_delivery_days","estimated_delivery_date","toISOString","split","includes_insurance","max_declared_value","restrictions","cheapestQuote","prev","current","fastestQuote","recommendedQuote","prevScore","currentScore","response","sort","a","cheapest_quote","fastest_quote","recommended_quote"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\couriers\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: GESTIÓN DE COURIERS ENTERPRISE\r\n// Endpoints: GET/POST/PUT /api/admin/logistics/couriers\r\n// Descripción: CRUD completo de proveedores de envío\r\n// Basado en: Patrones Spree Commerce + WooCommerce\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\nimport { z } from 'zod';\r\nimport { \r\n  Courier,\r\n  ShippingService,\r\n  ShippingQuoteRequest,\r\n  ShippingQuote,\r\n  ShippingQuoteResponse \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// SCHEMAS DE VALIDACIÓN ZOD\r\n// =====================================================\r\n\r\nconst CreateCourierSchema = z.object({\r\n  name: z.string().min(1, 'Nombre es requerido'),\r\n  code: z.string().min(2, 'Código debe tener al menos 2 caracteres').regex(/^[a-z_]+$/, 'Código debe ser lowercase con underscores'),\r\n  api_endpoint: z.string().url().optional(),\r\n  api_key: z.string().optional(),\r\n  supported_services: z.array(z.nativeEnum(ShippingService)).min(1, 'Debe soportar al menos un servicio'),\r\n  coverage_areas: z.array(z.string()).min(1, 'Debe cubrir al menos un área'),\r\n  base_cost: z.number().min(0, 'Costo base debe ser positivo'),\r\n  cost_per_kg: z.number().min(0, 'Costo por kg debe ser positivo'),\r\n  free_shipping_threshold: z.number().positive().optional(),\r\n  max_weight_kg: z.number().positive().optional(),\r\n  max_dimensions_cm: z.string().regex(/^\\d+x\\d+x\\d+$/, 'Formato debe ser LxWxH').optional(),\r\n  logo_url: z.string().url().optional(),\r\n  website_url: z.string().url().optional(),\r\n  contact_phone: z.string().optional(),\r\n  contact_email: z.string().email().optional(),\r\n  is_active: z.boolean().default(true)\r\n});\r\n\r\nconst UpdateCourierSchema = CreateCourierSchema.partial();\r\n\r\nconst ShippingQuoteSchema = z.object({\r\n  origin_address: z.object({\r\n    city: z.string(),\r\n    state: z.string(),\r\n    postal_code: z.string()\r\n  }),\r\n  destination_address: z.object({\r\n    city: z.string(),\r\n    state: z.string(),\r\n    postal_code: z.string()\r\n  }),\r\n  weight_kg: z.number().positive('Peso debe ser positivo'),\r\n  dimensions_cm: z.string().regex(/^\\d+x\\d+x\\d+$/, 'Formato debe ser LxWxH'),\r\n  declared_value: z.number().positive().optional(),\r\n  service_type: z.nativeEnum(ShippingService).optional(),\r\n  courier_codes: z.array(z.string()).optional()\r\n});\r\n\r\n// =====================================================\r\n// MIDDLEWARE DE AUTENTICACIÓN\r\n// =====================================================\r\nasync function validateAdminAuth(request: NextRequest) {\r\n  const session = await auth();\r\n\r\n  if (!session?.user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  // TODO: Verificar rol de admin cuando esté implementado\r\n  // if (session.user.role !== 'admin' && session.user.role !== 'manager') {\r\n  //   return NextResponse.json(\r\n  //     { error: 'Insufficient permissions' },\r\n  //     { status: 403 }\r\n  //   );\r\n  // }\r\n\r\n  return null;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction calculateShippingCost(\r\n  courier: Courier, \r\n  weightKg: number, \r\n  declaredValue?: number\r\n): number {\r\n  let cost = courier.base_cost + (courier.cost_per_kg * weightKg);\r\n  \r\n  // Aplicar envío gratis si aplica\r\n  if (courier.free_shipping_threshold && declaredValue && declaredValue >= courier.free_shipping_threshold) {\r\n    cost = 0;\r\n  }\r\n  \r\n  return Math.round(cost * 100) / 100; // Redondear a 2 decimales\r\n}\r\n\r\nfunction calculateEstimatedDeliveryDays(\r\n  service: ShippingService,\r\n  originState: string,\r\n  destinationState: string\r\n): number {\r\n  const baseDays = {\r\n    [ShippingService.SAME_DAY]: 1,\r\n    [ShippingService.NEXT_DAY]: 1,\r\n    [ShippingService.EXPRESS]: 2,\r\n    [ShippingService.STANDARD]: 5\r\n  };\r\n  \r\n  // Agregar días extra si es envío interprovincial\r\n  const extraDays = originState !== destinationState ? 2 : 0;\r\n  \r\n  return baseDays[service] + extraDays;\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER COURIERS\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear query parameters\r\n    const { searchParams } = new URL(request.url);\r\n    const activeOnly = searchParams.get('active_only') === 'true';\r\n    const includeStats = searchParams.get('include_stats') === 'true';\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Construir query\r\n    let query = supabase\r\n      .from('couriers')\r\n      .select('*')\r\n      .order('name');\r\n    \r\n    if (activeOnly) {\r\n      query = query.eq('is_active', true);\r\n    }\r\n    \r\n    const { data: couriers, error } = await query;\r\n    \r\n    if (error) {throw error;}\r\n    \r\n    // Si se solicitan estadísticas, obtenerlas\r\n    let couriersWithStats = couriers;\r\n    \r\n    if (includeStats && couriers) {\r\n      const courierStats = await Promise.all(\r\n        couriers.map(async (courier) => {\r\n          const { data: shipments } = await supabase\r\n            .from('shipments')\r\n            .select('status, shipping_cost, created_at, delivered_at')\r\n            .eq('carrier_id', courier.id);\r\n          \r\n          const totalShipments = shipments?.length || 0;\r\n          const deliveredShipments = shipments?.filter(s => s.status === 'delivered').length || 0;\r\n          const totalRevenue = shipments?.reduce((acc, s) => acc + (s.shipping_cost || 0), 0) || 0;\r\n          \r\n          return {\r\n            ...courier,\r\n            stats: {\r\n              total_shipments: totalShipments,\r\n              delivered_shipments: deliveredShipments,\r\n              delivery_rate: totalShipments > 0 ? (deliveredShipments / totalShipments) * 100 : 0,\r\n              total_revenue: totalRevenue\r\n            }\r\n          };\r\n        })\r\n      );\r\n      \r\n      couriersWithStats = courierStats;\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      data: couriersWithStats || []\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error in GET couriers API:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: CREAR COURIER\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear y validar body\r\n    const body = await request.json();\r\n    const validatedData = CreateCourierSchema.parse(body);\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Verificar que el código no exista\r\n    const { data: existingCourier } = await supabase\r\n      .from('couriers')\r\n      .select('id')\r\n      .eq('code', validatedData.code)\r\n      .single();\r\n    \r\n    if (existingCourier) {\r\n      return NextResponse.json(\r\n        { error: 'Courier code already exists' },\r\n        { status: 409 }\r\n      );\r\n    }\r\n    \r\n    // Encriptar API key si se proporciona\r\n    let apiKeyEncrypted = null;\r\n    if (validatedData.api_key) {\r\n      // TODO: Implementar encriptación real\r\n      apiKeyEncrypted = Buffer.from(validatedData.api_key).toString('base64');\r\n    }\r\n    \r\n    // Crear courier\r\n    const { data: courier, error: courierError } = await supabase\r\n      .from('couriers')\r\n      .insert({\r\n        name: validatedData.name,\r\n        code: validatedData.code,\r\n        api_endpoint: validatedData.api_endpoint,\r\n        api_key_encrypted: apiKeyEncrypted,\r\n        supported_services: validatedData.supported_services,\r\n        coverage_areas: validatedData.coverage_areas,\r\n        base_cost: validatedData.base_cost,\r\n        cost_per_kg: validatedData.cost_per_kg,\r\n        free_shipping_threshold: validatedData.free_shipping_threshold,\r\n        max_weight_kg: validatedData.max_weight_kg,\r\n        max_dimensions_cm: validatedData.max_dimensions_cm,\r\n        logo_url: validatedData.logo_url,\r\n        website_url: validatedData.website_url,\r\n        contact_phone: validatedData.contact_phone,\r\n        contact_email: validatedData.contact_email,\r\n        is_active: validatedData.is_active\r\n      })\r\n      .select('*')\r\n      .single();\r\n    \r\n    if (courierError) {throw courierError;}\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        data: courier,\r\n        message: 'Courier created successfully'\r\n      },\r\n      { status: 201 }\r\n    );\r\n    \r\n  } catch (error) {\r\n    console.error('Error in POST couriers API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: COTIZAR ENVÍOS\r\n// =====================================================\r\n\r\nexport async function POST_QUOTE(request: NextRequest) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear y validar body\r\n    const body = await request.json();\r\n    const validatedData = ShippingQuoteSchema.parse(body);\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Obtener couriers activos\r\n    let query = supabase\r\n      .from('couriers')\r\n      .select('*')\r\n      .eq('is_active', true);\r\n    \r\n    if (validatedData.courier_codes && validatedData.courier_codes.length > 0) {\r\n      query = query.in('code', validatedData.courier_codes);\r\n    }\r\n    \r\n    const { data: couriers, error } = await query;\r\n    \r\n    if (error) {throw error;}\r\n    \r\n    // Generar cotizaciones\r\n    const quotes: ShippingQuote[] = [];\r\n    \r\n    for (const courier of couriers || []) {\r\n      // Verificar restricciones de peso\r\n      if (courier.max_weight_kg && validatedData.weight_kg > courier.max_weight_kg) {\r\n        continue;\r\n      }\r\n      \r\n      // Verificar cobertura\r\n      const destinationState = validatedData.destination_address.state;\r\n      if (!courier.coverage_areas.includes(destinationState)) {\r\n        continue;\r\n      }\r\n      \r\n      // Generar cotizaciones para cada servicio soportado\r\n      const servicesToQuote = validatedData.service_type \r\n        ? [validatedData.service_type]\r\n        : courier.supported_services;\r\n      \r\n      for (const service of servicesToQuote) {\r\n        const cost = calculateShippingCost(\r\n          courier, \r\n          validatedData.weight_kg, \r\n          validatedData.declared_value\r\n        );\r\n        \r\n        const estimatedDays = calculateEstimatedDeliveryDays(\r\n          service,\r\n          validatedData.origin_address.state,\r\n          validatedData.destination_address.state\r\n        );\r\n        \r\n        const estimatedDate = new Date();\r\n        estimatedDate.setDate(estimatedDate.getDate() + estimatedDays);\r\n        \r\n        quotes.push({\r\n          courier_id: courier.id,\r\n          courier_name: courier.name,\r\n          service_type: service,\r\n          cost,\r\n          estimated_delivery_days: estimatedDays,\r\n          estimated_delivery_date: estimatedDate.toISOString().split('T')[0],\r\n          includes_insurance: validatedData.declared_value ? validatedData.declared_value <= 10000 : false,\r\n          max_declared_value: 50000,\r\n          restrictions: courier.max_weight_kg ? [`Peso máximo: ${courier.max_weight_kg}kg`] : []\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Encontrar mejores opciones\r\n    const cheapestQuote = quotes.reduce((prev, current) => \r\n      prev.cost < current.cost ? prev : current\r\n    );\r\n    \r\n    const fastestQuote = quotes.reduce((prev, current) => \r\n      prev.estimated_delivery_days < current.estimated_delivery_days ? prev : current\r\n    );\r\n    \r\n    // Recomendar el mejor balance precio/velocidad\r\n    const recommendedQuote = quotes.reduce((prev, current) => {\r\n      const prevScore = (1 / prev.cost) + (1 / prev.estimated_delivery_days);\r\n      const currentScore = (1 / current.cost) + (1 / current.estimated_delivery_days);\r\n      return currentScore > prevScore ? current : prev;\r\n    });\r\n    \r\n    const response: ShippingQuoteResponse = {\r\n      quotes: quotes.sort((a, b) => a.cost - b.cost),\r\n      cheapest_quote: cheapestQuote,\r\n      fastest_quote: fastestQuote,\r\n      recommended_quote: recommendedQuote\r\n    };\r\n    \r\n    return NextResponse.json({ data: response });\r\n    \r\n  } catch (error) {\r\n    console.error('Error in POST quote API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}