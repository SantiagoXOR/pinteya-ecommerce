7b4ddd42615377fe2077016593983009
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _card = require("../card");
describe('ProductCard with E-commerce Components', ()=>{
    const defaultProps = {
        title: 'Pintura Sherwin Williams',
        price: 8500,
        originalPrice: 10000,
        stock: 12,
        onAddToCart: jest.fn()
    };
    it('renders legacy version when useNewComponents is false', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: false
        }));
        // Verifica que use el formato legacy de precios
        expect(_react.screen.getByText('$8.500')).toBeInTheDocument();
        expect(_react.screen.getByText('$10.000')).toBeInTheDocument();
        // Verifica mensaje de stock legacy
        expect(_react.screen.queryByText(/Solo quedan/)).not.toBeInTheDocument();
    });
    it('renders new components when useNewComponents is true', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showExactStock: true,
            stockUnit: "latas"
        }));
        // Verifica que use PriceDisplay (formato con separadores de miles)
        expect(_react.screen.getByText('$ 8.500,00')).toBeInTheDocument();
        // Verifica que use StockIndicator
        expect(_react.screen.getByText(/12 latas disponibles/)).toBeInTheDocument();
    });
    it('shows installments when enabled', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showInstallments: true,
            installments: {
                quantity: 6,
                amount: 1417,
                interestFree: true
            }
        }));
        // Verifica información de cuotas (ahora en una sola línea en variant compact)
        expect(_react.screen.getByText(/6x de.*\$ 14,17.*sin interés/)).toBeInTheDocument();
    });
    it('shows free shipping badge when enabled', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showFreeShipping: true
        }));
        expect(_react.screen.getByAltText('Envío gratis')).toBeInTheDocument();
    });
    it('shows low stock warning with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 3,
            useNewComponents: true,
            showExactStock: true,
            lowStockThreshold: 5,
            stockUnit: "unidades"
        }));
        // Verifica que muestre stock bajo
        expect(_react.screen.getByText(/3 unidades disponibles/)).toBeInTheDocument();
    });
    it('shows out of stock with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 0,
            useNewComponents: true
        }));
        expect(_react.screen.getAllByText('Sin stock')[0]).toBeInTheDocument();
    });
    it('handles different stock units correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 5,
            useNewComponents: true,
            showExactStock: true,
            stockUnit: "litros"
        }));
        expect(_react.screen.getByText(/5 litros disponibles/)).toBeInTheDocument();
    });
    it('shows discount percentage with new PriceDisplay', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true
        }));
        // PriceDisplay calcula automáticamente el descuento
        // (10000-8500)/10000 * 100 = 15%
        expect(_react.screen.getByText('-15%')).toBeInTheDocument();
    });
    it('maintains backward compatibility with legacy props', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            badge: "Env\xedo gratis",
            discount: "15%",
            useNewComponents: false
        }));
        // Verifica que los props legacy sigan funcionando
        expect(_react.screen.getByAltText('Envío gratis')).toBeInTheDocument();
        expect(_react.screen.getByText('15%')).toBeInTheDocument();
    });
    it('applies compact variant for PriceDisplay in ProductCard', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true
        }));
        // Verifica que PriceDisplay use variante compact
        expect(container.querySelector('.flex-col.gap-0\\.5')).toBeInTheDocument();
    });
    it('uses minimal variant for StockIndicator in ProductCard', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 10,
            useNewComponents: true,
            showExactStock: true
        }));
        // StockIndicator debería estar presente con información de stock
        expect(_react.screen.getByText(/10 unidades disponibles/)).toBeInTheDocument();
    });
    it('handles zero price correctly with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            price: 0,
            originalPrice: undefined,
            useNewComponents: true
        }));
        expect(_react.screen.getByText('$ 0,00')).toBeInTheDocument();
    });
    it('handles large prices correctly with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            price: 123456,
            useNewComponents: true
        }));
        // Verifica formato con separadores de miles
        expect(_react.screen.getByText('$ 123.456,00')).toBeInTheDocument();
    });
    it('shows pre-order option when stock is 0 and allowPreOrder is enabled', ()=>{
        // Nota: Esta funcionalidad requeriría agregar allowPreOrder prop al ProductCard
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 0,
            useNewComponents: true
        }));
        // Por ahora solo verifica que muestre sin stock
        expect(_react.screen.getAllByText('Sin stock')[0]).toBeInTheDocument();
    });
    it('integrates all new components together', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showInstallments: true,
            installments: {
                quantity: 12,
                amount: 708,
                interestFree: true
            },
            showFreeShipping: true,
            showExactStock: true,
            stockUnit: "latas",
            lowStockThreshold: 10
        }));
        // Verifica que todos los componentes estén presentes
        expect(_react.screen.getByText('$ 8.500,00')).toBeInTheDocument(); // PriceDisplay
        expect(_react.screen.getByText(/12x de/)).toBeInTheDocument(); // Installments
        expect(_react.screen.getByAltText('Envío gratis')).toBeInTheDocument(); // Free shipping
        expect(_react.screen.getByText(/12 latas disponibles/)).toBeInTheDocument(); // StockIndicator
    });
});

//# sourceMappingURL=data:application/json;base64,