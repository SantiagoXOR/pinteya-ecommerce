8c95ae55b1efedf20ff80bd2a5659dfd
// ===================================
// HOOK: useSearch - Sistema de búsqueda centralizado
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useSearch () {
        return useSearch;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _navigation = require("next/navigation");
const _usedebounce = require("use-debounce");
const _products = require("../lib/api/products");
const _useSearchErrorHandler = require("./useSearchErrorHandler");
const _useSearchToast = require("./useSearchToast");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// ===================================
// BÚSQUEDAS TRENDING POR DEFECTO
// ===================================
const defaultTrendingSearches = [
    {
        id: 'trending-1',
        type: 'trending',
        title: 'Pintura látex',
        href: '/search?q=pintura+latex'
    },
    {
        id: 'trending-2',
        type: 'trending',
        title: 'Sherwin Williams',
        href: '/search?q=sherwin+williams'
    },
    {
        id: 'trending-3',
        type: 'trending',
        title: 'Rodillos premium',
        href: '/search?q=rodillos+premium'
    },
    {
        id: 'trending-4',
        type: 'trending',
        title: 'Pinceles',
        href: '/search?q=pinceles'
    }
];
function useSearch(options = {}) {
    const { debounceMs = 150, maxSuggestions = 8, searchLimit = 12, saveRecentSearches = true, onSearch, onSuggestionSelect } = options;
    const router = (0, _navigation.useRouter)();
    const debounceRef = (0, _react.useRef)();
    const safetyTimeoutRef = (0, _react.useRef)() // Timeout de seguridad para evitar loading permanente
    ;
    const optionsRef = (0, _react.useRef)(options) // Ref para opciones estables
    ;
    const recentSearchesRef = (0, _react.useRef)([]) // Ref para búsquedas recientes
    ;
    // Hooks para manejo de errores y toast notifications
    const errorHandler = (0, _useSearchErrorHandler.useSearchErrorHandler)({
        onError: (error)=>{
            console.error('Error de búsqueda:', error);
        },
        onRetrySuccess: ()=>{
            toastHandler.showRetrySuccessToast();
        },
        onRetryFailed: (error, attempts)=>{
            toastHandler.showRetryFailedToast(attempts);
        }
    });
    const toastHandler = (0, _useSearchToast.useSearchToast)({
        defaultDuration: 4000,
        maxToasts: 2
    });
    // Actualizar ref cuando cambien las opciones
    optionsRef.current = options;
    // Estado principal
    const [state, setState] = (0, _react.useState)({
        query: '',
        results: [],
        suggestions: [],
        isLoading: false,
        error: null,
        hasSearched: false
    });
    const [recentSearches, setRecentSearches] = (0, _react.useState)([]);
    // Sincronizar referencia con estado para evitar dependencias en useCallback
    _react.default.useEffect(()=>{
        recentSearchesRef.current = recentSearches;
    }, [
        recentSearches
    ]);
    // ===================================
    // FUNCIONES AUXILIARES SIMPLIFICADAS
    // ===================================
    // ===================================
    // FUNCIONES PRINCIPALES CON USE-DEBOUNCE
    // ===================================
    /**
   * Función de búsqueda interna optimizada
   */ const performSearch = (0, _react.useCallback)(async (searchQuery)=>{
        // Limpiar timeout de seguridad anterior
        if (safetyTimeoutRef.current) {
            clearTimeout(safetyTimeoutRef.current);
        }
        // Si la query está vacía, mostrar sugerencias por defecto
        if (!searchQuery.trim()) {
            const defaultSuggestions = [
                ...defaultTrendingSearches.slice(0, 4),
                ...recentSearchesRef.current.slice(0, 3).map((search, index)=>({
                        id: `recent-${index}`,
                        type: 'recent',
                        title: search,
                        href: `/search?q=${encodeURIComponent(search)}`
                    }))
            ].slice(0, maxSuggestions);
            setState((prev)=>({
                    ...prev,
                    query: searchQuery,
                    suggestions: defaultSuggestions,
                    isLoading: false
                }));
            return;
        }
        // Timeout de seguridad para evitar loading permanente (5 segundos)
        safetyTimeoutRef.current = setTimeout(()=>{
            setState((prev)=>({
                    ...prev,
                    isLoading: false,
                    error: 'Tiempo de espera agotado. Intenta nuevamente.'
                }));
        }, 5000);
        // Ejecutar búsqueda directamente (el debounce se maneja en searchWithDebounce)
        try {
            const response = await (0, _products.searchProducts)(searchQuery, maxSuggestions);
            // Limpiar timeout de seguridad ya que la API respondió
            if (safetyTimeoutRef.current) {
                clearTimeout(safetyTimeoutRef.current);
            }
            if (response.success && response.data && Array.isArray(response.data)) {
                const productSuggestions = response.data.map((product)=>({
                        id: `product-${product.id}`,
                        type: 'product',
                        title: product.name,
                        subtitle: product.category?.name || 'Sin categoría',
                        image: product.images?.previews?.[0] || '/images/products/placeholder.jpg',
                        badge: product.stock > 0 ? 'En stock' : 'Sin stock',
                        href: `/shop-details/${product.id}`
                    }));
                setState((prev)=>({
                        ...prev,
                        query: searchQuery,
                        suggestions: productSuggestions,
                        isLoading: false,
                        error: null
                    }));
            } else {
                setState((prev)=>({
                        ...prev,
                        query: searchQuery,
                        suggestions: [],
                        isLoading: false,
                        error: response.error || 'No se encontraron resultados'
                    }));
            }
        } catch (error) {
            console.error('❌ useSearch: Error en búsqueda:', error);
            // Limpiar timeout de seguridad
            if (safetyTimeoutRef.current) {
                clearTimeout(safetyTimeoutRef.current);
            }
            setState((prev)=>({
                    ...prev,
                    query: searchQuery,
                    suggestions: [],
                    isLoading: false,
                    error: 'Error en la búsqueda. Intenta nuevamente.'
                }));
        }
    }, [
        maxSuggestions
    ]) // Solo maxSuggestions es necesario como dependencia
    ;
    /**
   * Función de búsqueda con debounce optimizado usando use-debounce
   */ const searchWithDebounce = (0, _usedebounce.useDebouncedCallback)((searchQuery)=>{
        console.log('🔍 useSearch: searchWithDebounce (use-debounce) llamado con:', searchQuery);
        // Actualizar estado de loading inmediatamente
        setState((prev)=>({
                ...prev,
                isLoading: !!searchQuery.trim(),
                error: null
            }));
        // Ejecutar búsqueda
        performSearch(searchQuery);
    }, debounceMs, {
        maxWait: 2000,
        leading: false,
        trailing: true
    });
    /**
   * Ejecuta una búsqueda completa y navega a resultados
   */ const executeSearch = (0, _react.useCallback)(async (searchQuery, category)=>{
        if (!searchQuery.trim()) {
            return;
        }
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true,
                    error: null
                }));
            // Guardar en historial
            if (saveRecentSearches && searchQuery.trim()) {
                const updated = [
                    searchQuery.trim(),
                    ...recentSearchesRef.current.filter((s)=>s !== searchQuery.trim())
                ].slice(0, 5);
                setRecentSearches(updated);
                try {
                    localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));
                } catch (error) {
                    console.warn('Error guardando búsqueda reciente:', error);
                }
            }
            // Realizar búsqueda con manejo robusto de errores
            const response = await errorHandler.executeWithRetry(()=>(0, _products.searchProducts)(searchQuery.trim(), searchLimit), `búsqueda de "${searchQuery.trim()}"`);
            if (response.success && response.data) {
                const resultCount = response.data.length;
                setState((prev)=>({
                        ...prev,
                        results: response.data || [],
                        isLoading: false,
                        hasSearched: true,
                        error: null
                    }));
                // Limpiar errores previos
                errorHandler.clearError();
                // Mostrar toast de éxito si hay resultados
                if (resultCount > 0) {
                    toastHandler.showSuccessToast(searchQuery.trim(), resultCount);
                } else {
                    toastHandler.showNoResultsToast(searchQuery.trim());
                }
                // Callback personalizado
                optionsRef.current.onSearch?.(searchQuery.trim(), response.data || []);
                // Navegar a resultados
                const searchParams = new URLSearchParams();
                searchParams.set('q', searchQuery.trim());
                if (category) {
                    searchParams.set('category', category);
                }
                router.push(`/search?${searchParams.toString()}`);
            } else {
                const errorMessage = response.error || 'No se encontraron resultados';
                setState((prev)=>({
                        ...prev,
                        results: [],
                        isLoading: false,
                        hasSearched: true,
                        error: errorMessage
                    }));
                // Mostrar toast de advertencia para respuestas sin éxito
                toastHandler.showWarningToast('Búsqueda sin resultados', errorMessage);
            }
        } catch (error) {
            console.error('❌ Error ejecutando búsqueda:', error);
            // Manejar error con el error handler
            const searchError = errorHandler.handleError(error);
            setState((prev)=>({
                    ...prev,
                    results: [],
                    isLoading: false,
                    hasSearched: true,
                    error: searchError.message
                }));
            // Mostrar toast de error
            toastHandler.showErrorToast(searchError, errorHandler.retryCount, ()=>{
                executeSearch(searchQuery.trim(), category);
            });
        }
    }, [
        searchLimit,
        saveRecentSearches,
        router,
        errorHandler,
        toastHandler
    ]) // Remover recentSearches de dependencias para evitar bucle infinito
    ;
    /**
   * Maneja la selección de una sugerencia
   */ const selectSuggestion = (0, _react.useCallback)((suggestion)=>{
        // Guardar en historial si es producto o categoría
        if ((suggestion.type === 'product' || suggestion.type === 'category') && saveRecentSearches) {
            const updated = [
                suggestion.title,
                ...recentSearchesRef.current.filter((s)=>s !== suggestion.title)
            ].slice(0, 5);
            setRecentSearches(updated);
            try {
                localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));
            } catch (error) {
                console.warn('Error guardando búsqueda reciente:', error);
            }
        }
        // Actualizar estado
        setState((prev)=>({
                ...prev,
                query: suggestion.title
            }));
        // Callback personalizado
        optionsRef.current.onSuggestionSelect?.(suggestion);
        // Navegar
        router.push(suggestion.href);
    }, [
        saveRecentSearches,
        router
    ]) // Remover recentSearches de dependencias para evitar bucle infinito
    ;
    /**
   * Limpia el estado de búsqueda
   */ const clearSearch = (0, _react.useCallback)(()=>{
        // Limpiar todos los timeouts
        if (debounceRef.current) {
            clearTimeout(debounceRef.current);
        }
        if (safetyTimeoutRef.current) {
            clearTimeout(safetyTimeoutRef.current);
        }
        // Resetear estado completamente (sin sugerencias por defecto para tests)
        setState({
            query: '',
            results: [],
            suggestions: [],
            isLoading: false,
            error: null,
            hasSearched: false
        });
    }, []) // Remover dependencia circular
    ;
    /**
   * Inicializa el hook (cargar búsquedas recientes)
   */ const initialize = (0, _react.useCallback)(()=>{
        if (saveRecentSearches) {
            try {
                const stored = localStorage.getItem('pinteya-recent-searches');
                if (stored && stored.trim() !== '' && stored !== '""' && stored !== "''") {
                    // Validar que no esté corrupto
                    if (stored.includes('""') && stored.length < 5) {
                        console.warn('Detected corrupted recent searches data, cleaning up');
                        localStorage.removeItem('pinteya-recent-searches');
                        return;
                    }
                    const parsed = JSON.parse(stored);
                    // Verificar que sea un array válido
                    if (Array.isArray(parsed)) {
                        setRecentSearches(parsed);
                    } else {
                        console.warn('Invalid recent searches format, resetting');
                        localStorage.removeItem('pinteya-recent-searches');
                    }
                }
            } catch (error) {
                console.warn('Error cargando búsquedas recientes:', error);
                // Limpiar datos corruptos
                localStorage.removeItem('pinteya-recent-searches');
            }
        }
    }, [
        saveRecentSearches
    ]);
    // ===================================
    // CLEANUP
    // ===================================
    const cleanup = (0, _react.useCallback)(()=>{
        // Cancelar debounce de use-debounce
        searchWithDebounce.cancel();
        // Limpiar timeouts manuales restantes
        if (debounceRef.current) {
            clearTimeout(debounceRef.current);
        }
        if (safetyTimeoutRef.current) {
            clearTimeout(safetyTimeoutRef.current);
        }
    }, [
        searchWithDebounce
    ]);
    // ===================================
    // RETURN
    // ===================================
    return {
        // Estado
        ...state,
        recentSearches,
        // Estado de errores y toasts
        searchError: errorHandler.currentError,
        isRetrying: errorHandler.isRetrying,
        retryCount: errorHandler.retryCount,
        toasts: toastHandler.toasts,
        // Funciones principales
        searchWithDebounce,
        executeSearch,
        selectSuggestion,
        clearSearch,
        initialize,
        cleanup,
        // Funciones de manejo de errores
        clearError: errorHandler.clearError,
        retryManually: errorHandler.retryManually,
        // Funciones de toast
        removeToast: toastHandler.removeToast,
        clearToasts: toastHandler.clearToasts
    };
}
const _default = useSearch;

//# sourceMappingURL=data:application/json;base64,