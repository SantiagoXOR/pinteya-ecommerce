e1bf30c39be1a6e55af8025436ab31f5
// ===================================
// PINTEYA E-COMMERCE - API MONITORING SYSTEM
// Sistema de monitoreo para detectar problemas de renderizado y API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get apiMonitoring () {
        return apiMonitoring;
    },
    get detectApiDiscrepancy () {
        return detectApiDiscrepancy;
    },
    get monitorApiCall () {
        return monitorApiCall;
    },
    get useApiMonitoring () {
        return useApiMonitoring;
    }
});
class ApiMonitoringService {
    constructor(){
        this.events = [];
        this.renderingIssues = [];
        this.sessionId = this.generateSessionId();
    }
    static getInstance() {
        if (!ApiMonitoringService.instance) {
            ApiMonitoringService.instance = new ApiMonitoringService();
        }
        return ApiMonitoringService.instance;
    }
    generateSessionId() {
        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
   * Registra una discrepancia entre datos de API y renderizado
   */ recordApiDiscrepancy(endpoint, expectedCount, actualCount) {
        const event = {
            timestamp: new Date().toISOString(),
            endpoint,
            expectedCount,
            actualCount,
            discrepancy: expectedCount - actualCount,
            userAgent: navigator.userAgent,
            sessionId: this.sessionId
        };
        this.events.push(event);
        // Log crítico si hay discrepancia significativa
        if (event.discrepancy > 0) {
            console.error('🚨 API Discrepancy Detected:', {
                endpoint: event.endpoint,
                expected: event.expectedCount,
                actual: event.actualCount,
                lost: event.discrepancy,
                percentage: (event.discrepancy / event.expectedCount * 100).toFixed(2) + '%'
            });
            // Enviar alerta si la discrepancia es mayor al 20%
            if (event.discrepancy / event.expectedCount > 0.2) {
                this.sendCriticalAlert(event);
            }
        }
        // Mantener solo los últimos 100 eventos
        if (this.events.length > 100) {
            this.events = this.events.slice(-100);
        }
    }
    /**
   * Registra un problema de renderizado
   */ recordRenderingIssue(component, expectedItems, renderedItems, filterCriteria, errorDetails) {
        const issue = {
            timestamp: new Date().toISOString(),
            component,
            expectedItems,
            renderedItems,
            filterCriteria,
            errorDetails
        };
        this.renderingIssues.push(issue);
        console.warn('⚠️ Rendering Issue Detected:', {
            component: issue.component,
            expected: issue.expectedItems,
            rendered: issue.renderedItems,
            filters: issue.filterCriteria,
            error: issue.errorDetails
        });
        // Mantener solo los últimos 50 problemas
        if (this.renderingIssues.length > 50) {
            this.renderingIssues = this.renderingIssues.slice(-50);
        }
    }
    /**
   * Envía una alerta crítica (en producción se enviaría a un servicio de monitoreo)
   */ sendCriticalAlert(event) {
        // En desarrollo, solo log
        if (process.env.NODE_ENV === 'development') {
            console.error('🚨 CRITICAL ALERT:', {
                message: 'Significant data loss detected',
                event,
                recommendation: 'Check API validation logic and data filtering'
            });
        }
    // En producción, enviar a servicio de monitoreo
    // fetch('/api/monitoring/alerts', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify({ type: 'api_discrepancy', event })
    // }).catch(console.error);
    }
    /**
   * Obtiene estadísticas de monitoreo
   */ getMonitoringStats() {
        const criticalEvents = this.events.filter((e)=>e.discrepancy > 0).length;
        const totalDiscrepancy = this.events.reduce((sum, e)=>sum + Math.abs(e.discrepancy), 0);
        const averageDiscrepancy = this.events.length > 0 ? totalDiscrepancy / this.events.length : 0;
        return {
            totalEvents: this.events.length,
            totalIssues: this.renderingIssues.length,
            criticalEvents,
            averageDiscrepancy,
            recentEvents: this.events.slice(-10),
            recentIssues: this.renderingIssues.slice(-10)
        };
    }
    /**
   * Limpia los datos de monitoreo
   */ clearMonitoringData() {
        this.events = [];
        this.renderingIssues = [];
        console.log('🧹 Monitoring data cleared');
    }
    /**
   * Exporta datos de monitoreo para análisis
   */ exportMonitoringData() {
        const data = {
            sessionId: this.sessionId,
            exportTimestamp: new Date().toISOString(),
            events: this.events,
            renderingIssues: this.renderingIssues,
            stats: this.getMonitoringStats()
        };
        return JSON.stringify(data, null, 2);
    }
}
const apiMonitoring = ApiMonitoringService.getInstance();
function useApiMonitoring() {
    return {
        recordDiscrepancy: apiMonitoring.recordApiDiscrepancy.bind(apiMonitoring),
        recordRenderingIssue: apiMonitoring.recordRenderingIssue.bind(apiMonitoring),
        getStats: apiMonitoring.getMonitoringStats.bind(apiMonitoring),
        clearData: apiMonitoring.clearMonitoringData.bind(apiMonitoring),
        exportData: apiMonitoring.exportMonitoringData.bind(apiMonitoring)
    };
}
function detectApiDiscrepancy(endpoint, apiResponse, renderedItems) {
    const expectedCount = apiResponse.total || apiResponse.count || apiResponse.length || 0;
    const actualCount = Array.isArray(renderedItems) ? renderedItems.length : 0;
    if (expectedCount !== actualCount) {
        apiMonitoring.recordApiDiscrepancy(endpoint, expectedCount, actualCount);
    }
}
function monitorApiCall(endpoint) {
    return function(target, propertyName, descriptor) {
        const method = descriptor.value;
        descriptor.value = async function(...args) {
            const startTime = Date.now();
            try {
                const result = await method.apply(this, args);
                // Si el resultado tiene datos paginados, verificar discrepancias
                if (result && typeof result === 'object') {
                    if ('data' in result && 'pagination' in result.data) {
                        const { data } = result;
                        detectApiDiscrepancy(endpoint, data.pagination, data.orders || data.items || []);
                    }
                }
                return result;
            } catch (error) {
                const duration = Date.now() - startTime;
                console.error(`API call failed for ${endpoint} after ${duration}ms:`, error);
                throw error;
            }
        };
        return descriptor;
    };
}

//# sourceMappingURL=data:application/json;base64,