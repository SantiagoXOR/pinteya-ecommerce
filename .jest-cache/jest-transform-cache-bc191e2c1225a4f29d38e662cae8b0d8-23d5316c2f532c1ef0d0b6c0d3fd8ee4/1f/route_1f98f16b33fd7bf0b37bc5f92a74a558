a6aeb10fa83387812016e9270ab091ca
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2bmppjh4xr() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\couriers\\route.ts";
  var hash = "4f15584708c694de63d38db22ece58e7ff064d14";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\couriers\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 26
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 57
        }
      },
      "10": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 28,
          column: 75
        }
      },
      "11": {
        start: {
          line: 29,
          column: 13
        },
        end: {
          line: 29,
          column: 27
        }
      },
      "12": {
        start: {
          line: 30,
          column: 19
        },
        end: {
          line: 30,
          column: 60
        }
      },
      "13": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 24
        }
      },
      "14": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "15": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 53,
          column: 57
        }
      },
      "16": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 70,
          column: 2
        }
      },
      "17": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 45
        }
      },
      "18": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "19": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "20": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 90,
          column: 16
        }
      },
      "21": {
        start: {
          line: 96,
          column: 15
        },
        end: {
          line: 96,
          column: 65
        }
      },
      "22": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "23": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "24": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 40
        }
      },
      "25": {
        start: {
          line: 104,
          column: 21
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "26": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 111,
          column: 62
        }
      },
      "27": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 41
        }
      },
      "28": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "29": {
        start: {
          line: 117,
          column: 26
        },
        end: {
          line: 117,
          column: 58
        }
      },
      "30": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "31": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 29
        }
      },
      "32": {
        start: {
          line: 122,
          column: 33
        },
        end: {
          line: 122,
          column: 53
        }
      },
      "33": {
        start: {
          line: 123,
          column: 27
        },
        end: {
          line: 123,
          column: 69
        }
      },
      "34": {
        start: {
          line: 124,
          column: 29
        },
        end: {
          line: 124,
          column: 73
        }
      },
      "35": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 126,
          column: 59
        }
      },
      "36": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 71
        }
      },
      "37": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "38": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 48
        }
      },
      "39": {
        start: {
          line: 132,
          column: 42
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "40": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "41": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 24
        }
      },
      "42": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 40
        }
      },
      "43": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "44": {
        start: {
          line: 139,
          column: 33
        },
        end: {
          line: 153,
          column: 15
        }
      },
      "45": {
        start: {
          line: 140,
          column: 44
        },
        end: {
          line: 140,
          column: 163
        }
      },
      "46": {
        start: {
          line: 141,
          column: 39
        },
        end: {
          line: 141,
          column: 61
        }
      },
      "47": {
        start: {
          line: 142,
          column: 43
        },
        end: {
          line: 142,
          column: 103
        }
      },
      "48": {
        start: {
          line: 142,
          column: 66
        },
        end: {
          line: 142,
          column: 90
        }
      },
      "49": {
        start: {
          line: 143,
          column: 37
        },
        end: {
          line: 143,
          column: 102
        }
      },
      "50": {
        start: {
          line: 143,
          column: 65
        },
        end: {
          line: 143,
          column: 93
        }
      },
      "51": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 152,
          column: 18
        }
      },
      "52": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 45
        }
      },
      "53": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "54": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 59
        }
      },
      "55": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "56": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "57": {
        start: {
          line: 172,
          column: 26
        },
        end: {
          line: 172,
          column: 58
        }
      },
      "58": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "59": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 29
        }
      },
      "60": {
        start: {
          line: 177,
          column: 21
        },
        end: {
          line: 177,
          column: 41
        }
      },
      "61": {
        start: {
          line: 178,
          column: 30
        },
        end: {
          line: 178,
          column: 61
        }
      },
      "62": {
        start: {
          line: 180,
          column: 25
        },
        end: {
          line: 180,
          column: 59
        }
      },
      "63": {
        start: {
          line: 182,
          column: 42
        },
        end: {
          line: 182,
          column: 126
        }
      },
      "64": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "65": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "66": {
        start: {
          line: 191,
          column: 30
        },
        end: {
          line: 191,
          column: 34
        }
      },
      "67": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "68": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 84
        }
      },
      "69": {
        start: {
          line: 197,
          column: 55
        },
        end: {
          line: 214,
          column: 31
        }
      },
      "70": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "71": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 31
        }
      },
      "72": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 223,
          column: 11
        }
      },
      "73": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 60
        }
      },
      "74": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "75": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "76": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 232,
          column: 22
        }
      },
      "77": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 31
        }
      },
      "78": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "79": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 343,
          column: 5
        }
      },
      "80": {
        start: {
          line: 250,
          column: 26
        },
        end: {
          line: 250,
          column: 58
        }
      },
      "81": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "82": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 29
        }
      },
      "83": {
        start: {
          line: 255,
          column: 21
        },
        end: {
          line: 255,
          column: 41
        }
      },
      "84": {
        start: {
          line: 256,
          column: 30
        },
        end: {
          line: 256,
          column: 61
        }
      },
      "85": {
        start: {
          line: 258,
          column: 25
        },
        end: {
          line: 258,
          column: 59
        }
      },
      "86": {
        start: {
          line: 260,
          column: 20
        },
        end: {
          line: 260,
          column: 79
        }
      },
      "87": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "88": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 66
        }
      },
      "89": {
        start: {
          line: 264,
          column: 42
        },
        end: {
          line: 264,
          column: 53
        }
      },
      "90": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "91": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 24
        }
      },
      "92": {
        start: {
          line: 269,
          column: 23
        },
        end: {
          line: 269,
          column: 25
        }
      },
      "93": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "94": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "95": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 25
        }
      },
      "96": {
        start: {
          line: 276,
          column: 37
        },
        end: {
          line: 276,
          column: 76
        }
      },
      "97": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "98": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 25
        }
      },
      "99": {
        start: {
          line: 281,
          column: 36
        },
        end: {
          line: 283,
          column: 42
        }
      },
      "100": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "101": {
        start: {
          line: 285,
          column: 29
        },
        end: {
          line: 285,
          column: 114
        }
      },
      "102": {
        start: {
          line: 286,
          column: 38
        },
        end: {
          line: 286,
          column: 154
        }
      },
      "103": {
        start: {
          line: 287,
          column: 38
        },
        end: {
          line: 287,
          column: 48
        }
      },
      "104": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 79
        }
      },
      "105": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 301,
          column: 19
        }
      },
      "106": {
        start: {
          line: 305,
          column: 30
        },
        end: {
          line: 305,
          column: 103
        }
      },
      "107": {
        start: {
          line: 305,
          column: 61
        },
        end: {
          line: 305,
          column: 102
        }
      },
      "108": {
        start: {
          line: 306,
          column: 29
        },
        end: {
          line: 306,
          column: 140
        }
      },
      "109": {
        start: {
          line: 306,
          column: 60
        },
        end: {
          line: 306,
          column: 139
        }
      },
      "110": {
        start: {
          line: 308,
          column: 33
        },
        end: {
          line: 312,
          column: 10
        }
      },
      "111": {
        start: {
          line: 309,
          column: 30
        },
        end: {
          line: 309,
          column: 78
        }
      },
      "112": {
        start: {
          line: 310,
          column: 33
        },
        end: {
          line: 310,
          column: 87
        }
      },
      "113": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 61
        }
      },
      "114": {
        start: {
          line: 313,
          column: 25
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "115": {
        start: {
          line: 314,
          column: 40
        },
        end: {
          line: 314,
          column: 55
        }
      },
      "116": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 321,
          column: 11
        }
      },
      "117": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 57
        }
      },
      "118": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "119": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 335,
          column: 15
        }
      },
      "120": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 330,
          column: 22
        }
      },
      "121": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 31
        }
      },
      "122": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 342,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 22
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "validateAdminAuth",
        decl: {
          start: {
            line: 74,
            column: 15
          },
          end: {
            line: 74,
            column: 32
          }
        },
        loc: {
          start: {
            line: 74,
            column: 42
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 74
      },
      "6": {
        name: "calculateShippingCost",
        decl: {
          start: {
            line: 95,
            column: 9
          },
          end: {
            line: 95,
            column: 30
          }
        },
        loc: {
          start: {
            line: 95,
            column: 65
          },
          end: {
            line: 102,
            column: 1
          }
        },
        line: 95
      },
      "7": {
        name: "calculateEstimatedDeliveryDays",
        decl: {
          start: {
            line: 103,
            column: 9
          },
          end: {
            line: 103,
            column: 39
          }
        },
        loc: {
          start: {
            line: 103,
            column: 80
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 103
      },
      "8": {
        name: "GET",
        decl: {
          start: {
            line: 114,
            column: 15
          },
          end: {
            line: 114,
            column: 18
          }
        },
        loc: {
          start: {
            line: 114,
            column: 28
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 114
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 139,
            column: 64
          },
          end: {
            line: 139,
            column: 65
          }
        },
        loc: {
          start: {
            line: 139,
            column: 81
          },
          end: {
            line: 153,
            column: 13
          }
        },
        line: 139
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 61
          },
          end: {
            line: 142,
            column: 62
          }
        },
        loc: {
          start: {
            line: 142,
            column: 66
          },
          end: {
            line: 142,
            column: 90
          }
        },
        line: 142
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 143,
            column: 55
          },
          end: {
            line: 143,
            column: 56
          }
        },
        loc: {
          start: {
            line: 143,
            column: 65
          },
          end: {
            line: 143,
            column: 93
          }
        },
        line: 143
      },
      "12": {
        name: "POST",
        decl: {
          start: {
            line: 169,
            column: 15
          },
          end: {
            line: 169,
            column: 19
          }
        },
        loc: {
          start: {
            line: 169,
            column: 29
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 169
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 229,
            column: 45
          },
          end: {
            line: 229,
            column: 46
          }
        },
        loc: {
          start: {
            line: 229,
            column: 57
          },
          end: {
            line: 234,
            column: 17
          }
        },
        line: 229
      },
      "14": {
        name: "POST_QUOTE",
        decl: {
          start: {
            line: 247,
            column: 15
          },
          end: {
            line: 247,
            column: 25
          }
        },
        loc: {
          start: {
            line: 247,
            column: 35
          },
          end: {
            line: 344,
            column: 1
          }
        },
        line: 247
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 305,
            column: 44
          },
          end: {
            line: 305,
            column: 45
          }
        },
        loc: {
          start: {
            line: 305,
            column: 61
          },
          end: {
            line: 305,
            column: 102
          }
        },
        line: 305
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 306,
            column: 43
          },
          end: {
            line: 306,
            column: 44
          }
        },
        loc: {
          start: {
            line: 306,
            column: 60
          },
          end: {
            line: 306,
            column: 139
          }
        },
        line: 306
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 308,
            column: 47
          },
          end: {
            line: 308,
            column: 48
          }
        },
        loc: {
          start: {
            line: 308,
            column: 64
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 308
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 314,
            column: 32
          },
          end: {
            line: 314,
            column: 33
          }
        },
        loc: {
          start: {
            line: 314,
            column: 40
          },
          end: {
            line: 314,
            column: 55
          }
        },
        line: 314
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 327,
            column: 45
          },
          end: {
            line: 327,
            column: 46
          }
        },
        loc: {
          start: {
            line: 327,
            column: 57
          },
          end: {
            line: 332,
            column: 17
          }
        },
        line: 327
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "1": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "2": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 39
          }
        }, {
          start: {
            line: 98,
            column: 43
          },
          end: {
            line: 98,
            column: 56
          }
        }, {
          start: {
            line: 98,
            column: 60
          },
          end: {
            line: 98,
            column: 108
          }
        }],
        line: 98
      },
      "3": {
        loc: {
          start: {
            line: 111,
            column: 22
          },
          end: {
            line: 111,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 57
          },
          end: {
            line: 111,
            column: 58
          }
        }, {
          start: {
            line: 111,
            column: 61
          },
          end: {
            line: 111,
            column: 62
          }
        }],
        line: 111
      },
      "4": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "5": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "6": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "7": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 24
          }
        }, {
          start: {
            line: 138,
            column: 28
          },
          end: {
            line: 138,
            column: 36
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 141,
            column: 39
          },
          end: {
            line: 141,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 39
          },
          end: {
            line: 141,
            column: 56
          }
        }, {
          start: {
            line: 141,
            column: 60
          },
          end: {
            line: 141,
            column: 61
          }
        }],
        line: 141
      },
      "10": {
        loc: {
          start: {
            line: 142,
            column: 43
          },
          end: {
            line: 142,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 43
          },
          end: {
            line: 142,
            column: 98
          }
        }, {
          start: {
            line: 142,
            column: 102
          },
          end: {
            line: 142,
            column: 103
          }
        }],
        line: 142
      },
      "11": {
        loc: {
          start: {
            line: 143,
            column: 37
          },
          end: {
            line: 143,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 37
          },
          end: {
            line: 143,
            column: 97
          }
        }, {
          start: {
            line: 143,
            column: 101
          },
          end: {
            line: 143,
            column: 102
          }
        }],
        line: 143
      },
      "12": {
        loc: {
          start: {
            line: 143,
            column: 72
          },
          end: {
            line: 143,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 72
          },
          end: {
            line: 143,
            column: 87
          }
        }, {
          start: {
            line: 143,
            column: 91
          },
          end: {
            line: 143,
            column: 92
          }
        }],
        line: 143
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 39
          },
          end: {
            line: 149,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 60
          },
          end: {
            line: 149,
            column: 101
          }
        }, {
          start: {
            line: 149,
            column: 104
          },
          end: {
            line: 149,
            column: 105
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 157,
            column: 18
          },
          end: {
            line: 157,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 18
          },
          end: {
            line: 157,
            column: 35
          }
        }, {
          start: {
            line: 157,
            column: 39
          },
          end: {
            line: 157,
            column: 41
          }
        }],
        line: 157
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 21
          },
          end: {
            line: 163,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 46
          },
          end: {
            line: 163,
            column: 59
          }
        }, {
          start: {
            line: 163,
            column: 62
          },
          end: {
            line: 163,
            column: 77
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "17": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "18": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "19": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "20": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "21": {
        loc: {
          start: {
            line: 241,
            column: 21
          },
          end: {
            line: 241,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 241,
            column: 46
          },
          end: {
            line: 241,
            column: 59
          }
        }, {
          start: {
            line: 241,
            column: 62
          },
          end: {
            line: 241,
            column: 77
          }
        }],
        line: 241
      },
      "22": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "23": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "24": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 39
          }
        }, {
          start: {
            line: 261,
            column: 43
          },
          end: {
            line: 261,
            column: 81
          }
        }],
        line: 261
      },
      "25": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "26": {
        loc: {
          start: {
            line: 270,
            column: 30
          },
          end: {
            line: 270,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 30
          },
          end: {
            line: 270,
            column: 38
          }
        }, {
          start: {
            line: 270,
            column: 42
          },
          end: {
            line: 270,
            column: 44
          }
        }],
        line: 270
      },
      "27": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "28": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 37
          }
        }, {
          start: {
            line: 272,
            column: 41
          },
          end: {
            line: 272,
            column: 88
          }
        }],
        line: 272
      },
      "29": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "30": {
        loc: {
          start: {
            line: 281,
            column: 36
          },
          end: {
            line: 283,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 281,
            column: 65
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 283,
            column: 42
          }
        }],
        line: 281
      },
      "31": {
        loc: {
          start: {
            line: 296,
            column: 40
          },
          end: {
            line: 296,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 296,
            column: 71
          },
          end: {
            line: 296,
            column: 108
          }
        }, {
          start: {
            line: 296,
            column: 111
          },
          end: {
            line: 296,
            column: 116
          }
        }],
        line: 296
      },
      "32": {
        loc: {
          start: {
            line: 298,
            column: 34
          },
          end: {
            line: 300,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 58
          },
          end: {
            line: 300,
            column: 21
          }
        }, {
          start: {
            line: 300,
            column: 24
          },
          end: {
            line: 300,
            column: 26
          }
        }],
        line: 298
      },
      "33": {
        loc: {
          start: {
            line: 305,
            column: 61
          },
          end: {
            line: 305,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 305,
            column: 88
          },
          end: {
            line: 305,
            column: 92
          }
        }, {
          start: {
            line: 305,
            column: 95
          },
          end: {
            line: 305,
            column: 102
          }
        }],
        line: 305
      },
      "34": {
        loc: {
          start: {
            line: 306,
            column: 60
          },
          end: {
            line: 306,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 306,
            column: 125
          },
          end: {
            line: 306,
            column: 129
          }
        }, {
          start: {
            line: 306,
            column: 132
          },
          end: {
            line: 306,
            column: 139
          }
        }],
        line: 306
      },
      "35": {
        loc: {
          start: {
            line: 311,
            column: 19
          },
          end: {
            line: 311,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 46
          },
          end: {
            line: 311,
            column: 53
          }
        }, {
          start: {
            line: 311,
            column: 56
          },
          end: {
            line: 311,
            column: 60
          }
        }],
        line: 311
      },
      "36": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "37": {
        loc: {
          start: {
            line: 339,
            column: 21
          },
          end: {
            line: 339,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 339,
            column: 46
          },
          end: {
            line: 339,
            column: 59
          }
        }, {
          start: {
            line: 339,
            column: 62
          },
          end: {
            line: 339,
            column: 77
          }
        }],
        line: 339
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\couriers\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: GESTI\xD3N DE COURIERS ENTERPRISE\r\n// Endpoints: GET/POST/PUT /api/admin/logistics/couriers\r\n// Descripci\xF3n: CRUD completo de proveedores de env\xEDo\r\n// Basado en: Patrones Spree Commerce + WooCommerce\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\nimport { z } from 'zod';\r\nimport { \r\n  Courier,\r\n  ShippingService,\r\n  ShippingQuoteRequest,\r\n  ShippingQuote,\r\n  ShippingQuoteResponse \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// SCHEMAS DE VALIDACI\xD3N ZOD\r\n// =====================================================\r\n\r\nconst CreateCourierSchema = z.object({\r\n  name: z.string().min(1, 'Nombre es requerido'),\r\n  code: z.string().min(2, 'C\xF3digo debe tener al menos 2 caracteres').regex(/^[a-z_]+$/, 'C\xF3digo debe ser lowercase con underscores'),\r\n  api_endpoint: z.string().url().optional(),\r\n  api_key: z.string().optional(),\r\n  supported_services: z.array(z.nativeEnum(ShippingService)).min(1, 'Debe soportar al menos un servicio'),\r\n  coverage_areas: z.array(z.string()).min(1, 'Debe cubrir al menos un \xE1rea'),\r\n  base_cost: z.number().min(0, 'Costo base debe ser positivo'),\r\n  cost_per_kg: z.number().min(0, 'Costo por kg debe ser positivo'),\r\n  free_shipping_threshold: z.number().positive().optional(),\r\n  max_weight_kg: z.number().positive().optional(),\r\n  max_dimensions_cm: z.string().regex(/^\\d+x\\d+x\\d+$/, 'Formato debe ser LxWxH').optional(),\r\n  logo_url: z.string().url().optional(),\r\n  website_url: z.string().url().optional(),\r\n  contact_phone: z.string().optional(),\r\n  contact_email: z.string().email().optional(),\r\n  is_active: z.boolean().default(true)\r\n});\r\n\r\nconst UpdateCourierSchema = CreateCourierSchema.partial();\r\n\r\nconst ShippingQuoteSchema = z.object({\r\n  origin_address: z.object({\r\n    city: z.string(),\r\n    state: z.string(),\r\n    postal_code: z.string()\r\n  }),\r\n  destination_address: z.object({\r\n    city: z.string(),\r\n    state: z.string(),\r\n    postal_code: z.string()\r\n  }),\r\n  weight_kg: z.number().positive('Peso debe ser positivo'),\r\n  dimensions_cm: z.string().regex(/^\\d+x\\d+x\\d+$/, 'Formato debe ser LxWxH'),\r\n  declared_value: z.number().positive().optional(),\r\n  service_type: z.nativeEnum(ShippingService).optional(),\r\n  courier_codes: z.array(z.string()).optional()\r\n});\r\n\r\n// =====================================================\r\n// MIDDLEWARE DE AUTENTICACI\xD3N\r\n// =====================================================\r\nasync function validateAdminAuth(request: NextRequest) {\r\n  const session = await auth();\r\n\r\n  if (!session?.user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  // TODO: Verificar rol de admin cuando est\xE9 implementado\r\n  // if (session.user.role !== 'admin' && session.user.role !== 'manager') {\r\n  //   return NextResponse.json(\r\n  //     { error: 'Insufficient permissions' },\r\n  //     { status: 403 }\r\n  //   );\r\n  // }\r\n\r\n  return null;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction calculateShippingCost(\r\n  courier: Courier, \r\n  weightKg: number, \r\n  declaredValue?: number\r\n): number {\r\n  let cost = courier.base_cost + (courier.cost_per_kg * weightKg);\r\n  \r\n  // Aplicar env\xEDo gratis si aplica\r\n  if (courier.free_shipping_threshold && declaredValue && declaredValue >= courier.free_shipping_threshold) {\r\n    cost = 0;\r\n  }\r\n  \r\n  return Math.round(cost * 100) / 100; // Redondear a 2 decimales\r\n}\r\n\r\nfunction calculateEstimatedDeliveryDays(\r\n  service: ShippingService,\r\n  originState: string,\r\n  destinationState: string\r\n): number {\r\n  const baseDays = {\r\n    [ShippingService.SAME_DAY]: 1,\r\n    [ShippingService.NEXT_DAY]: 1,\r\n    [ShippingService.EXPRESS]: 2,\r\n    [ShippingService.STANDARD]: 5\r\n  };\r\n  \r\n  // Agregar d\xEDas extra si es env\xEDo interprovincial\r\n  const extraDays = originState !== destinationState ? 2 : 0;\r\n  \r\n  return baseDays[service] + extraDays;\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER COURIERS\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Validar autenticaci\xF3n\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear query parameters\r\n    const { searchParams } = new URL(request.url);\r\n    const activeOnly = searchParams.get('active_only') === 'true';\r\n    const includeStats = searchParams.get('include_stats') === 'true';\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Construir query\r\n    let query = supabase\r\n      .from('couriers')\r\n      .select('*')\r\n      .order('name');\r\n    \r\n    if (activeOnly) {\r\n      query = query.eq('is_active', true);\r\n    }\r\n    \r\n    const { data: couriers, error } = await query;\r\n    \r\n    if (error) {throw error;}\r\n    \r\n    // Si se solicitan estad\xEDsticas, obtenerlas\r\n    let couriersWithStats = couriers;\r\n    \r\n    if (includeStats && couriers) {\r\n      const courierStats = await Promise.all(\r\n        couriers.map(async (courier) => {\r\n          const { data: shipments } = await supabase\r\n            .from('shipments')\r\n            .select('status, shipping_cost, created_at, delivered_at')\r\n            .eq('carrier_id', courier.id);\r\n          \r\n          const totalShipments = shipments?.length || 0;\r\n          const deliveredShipments = shipments?.filter(s => s.status === 'delivered').length || 0;\r\n          const totalRevenue = shipments?.reduce((acc, s) => acc + (s.shipping_cost || 0), 0) || 0;\r\n          \r\n          return {\r\n            ...courier,\r\n            stats: {\r\n              total_shipments: totalShipments,\r\n              delivered_shipments: deliveredShipments,\r\n              delivery_rate: totalShipments > 0 ? (deliveredShipments / totalShipments) * 100 : 0,\r\n              total_revenue: totalRevenue\r\n            }\r\n          };\r\n        })\r\n      );\r\n      \r\n      couriersWithStats = courierStats;\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      data: couriersWithStats || []\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error in GET couriers API:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: CREAR COURIER\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Validar autenticaci\xF3n\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear y validar body\r\n    const body = await request.json();\r\n    const validatedData = CreateCourierSchema.parse(body);\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Verificar que el c\xF3digo no exista\r\n    const { data: existingCourier } = await supabase\r\n      .from('couriers')\r\n      .select('id')\r\n      .eq('code', validatedData.code)\r\n      .single();\r\n    \r\n    if (existingCourier) {\r\n      return NextResponse.json(\r\n        { error: 'Courier code already exists' },\r\n        { status: 409 }\r\n      );\r\n    }\r\n    \r\n    // Encriptar API key si se proporciona\r\n    let apiKeyEncrypted = null;\r\n    if (validatedData.api_key) {\r\n      // TODO: Implementar encriptaci\xF3n real\r\n      apiKeyEncrypted = Buffer.from(validatedData.api_key).toString('base64');\r\n    }\r\n    \r\n    // Crear courier\r\n    const { data: courier, error: courierError } = await supabase\r\n      .from('couriers')\r\n      .insert({\r\n        name: validatedData.name,\r\n        code: validatedData.code,\r\n        api_endpoint: validatedData.api_endpoint,\r\n        api_key_encrypted: apiKeyEncrypted,\r\n        supported_services: validatedData.supported_services,\r\n        coverage_areas: validatedData.coverage_areas,\r\n        base_cost: validatedData.base_cost,\r\n        cost_per_kg: validatedData.cost_per_kg,\r\n        free_shipping_threshold: validatedData.free_shipping_threshold,\r\n        max_weight_kg: validatedData.max_weight_kg,\r\n        max_dimensions_cm: validatedData.max_dimensions_cm,\r\n        logo_url: validatedData.logo_url,\r\n        website_url: validatedData.website_url,\r\n        contact_phone: validatedData.contact_phone,\r\n        contact_email: validatedData.contact_email,\r\n        is_active: validatedData.is_active\r\n      })\r\n      .select('*')\r\n      .single();\r\n    \r\n    if (courierError) {throw courierError;}\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        data: courier,\r\n        message: 'Courier created successfully'\r\n      },\r\n      { status: 201 }\r\n    );\r\n    \r\n  } catch (error) {\r\n    console.error('Error in POST couriers API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: COTIZAR ENV\xCDOS\r\n// =====================================================\r\n\r\nexport async function POST_QUOTE(request: NextRequest) {\r\n  try {\r\n    // Validar autenticaci\xF3n\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear y validar body\r\n    const body = await request.json();\r\n    const validatedData = ShippingQuoteSchema.parse(body);\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Obtener couriers activos\r\n    let query = supabase\r\n      .from('couriers')\r\n      .select('*')\r\n      .eq('is_active', true);\r\n    \r\n    if (validatedData.courier_codes && validatedData.courier_codes.length > 0) {\r\n      query = query.in('code', validatedData.courier_codes);\r\n    }\r\n    \r\n    const { data: couriers, error } = await query;\r\n    \r\n    if (error) {throw error;}\r\n    \r\n    // Generar cotizaciones\r\n    const quotes: ShippingQuote[] = [];\r\n    \r\n    for (const courier of couriers || []) {\r\n      // Verificar restricciones de peso\r\n      if (courier.max_weight_kg && validatedData.weight_kg > courier.max_weight_kg) {\r\n        continue;\r\n      }\r\n      \r\n      // Verificar cobertura\r\n      const destinationState = validatedData.destination_address.state;\r\n      if (!courier.coverage_areas.includes(destinationState)) {\r\n        continue;\r\n      }\r\n      \r\n      // Generar cotizaciones para cada servicio soportado\r\n      const servicesToQuote = validatedData.service_type \r\n        ? [validatedData.service_type]\r\n        : courier.supported_services;\r\n      \r\n      for (const service of servicesToQuote) {\r\n        const cost = calculateShippingCost(\r\n          courier, \r\n          validatedData.weight_kg, \r\n          validatedData.declared_value\r\n        );\r\n        \r\n        const estimatedDays = calculateEstimatedDeliveryDays(\r\n          service,\r\n          validatedData.origin_address.state,\r\n          validatedData.destination_address.state\r\n        );\r\n        \r\n        const estimatedDate = new Date();\r\n        estimatedDate.setDate(estimatedDate.getDate() + estimatedDays);\r\n        \r\n        quotes.push({\r\n          courier_id: courier.id,\r\n          courier_name: courier.name,\r\n          service_type: service,\r\n          cost,\r\n          estimated_delivery_days: estimatedDays,\r\n          estimated_delivery_date: estimatedDate.toISOString().split('T')[0],\r\n          includes_insurance: validatedData.declared_value ? validatedData.declared_value <= 10000 : false,\r\n          max_declared_value: 50000,\r\n          restrictions: courier.max_weight_kg ? [`Peso m\xE1ximo: ${courier.max_weight_kg}kg`] : []\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Encontrar mejores opciones\r\n    const cheapestQuote = quotes.reduce((prev, current) => \r\n      prev.cost < current.cost ? prev : current\r\n    );\r\n    \r\n    const fastestQuote = quotes.reduce((prev, current) => \r\n      prev.estimated_delivery_days < current.estimated_delivery_days ? prev : current\r\n    );\r\n    \r\n    // Recomendar el mejor balance precio/velocidad\r\n    const recommendedQuote = quotes.reduce((prev, current) => {\r\n      const prevScore = (1 / prev.cost) + (1 / prev.estimated_delivery_days);\r\n      const currentScore = (1 / current.cost) + (1 / current.estimated_delivery_days);\r\n      return currentScore > prevScore ? current : prev;\r\n    });\r\n    \r\n    const response: ShippingQuoteResponse = {\r\n      quotes: quotes.sort((a, b) => a.cost - b.cost),\r\n      cheapest_quote: cheapestQuote,\r\n      fastest_quote: fastestQuote,\r\n      recommended_quote: recommendedQuote\r\n    };\r\n    \r\n    return NextResponse.json({ data: response });\r\n    \r\n  } catch (error) {\r\n    console.error('Error in POST quote API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "POST_QUOTE", "runtime", "CreateCourierSchema", "z", "object", "name", "string", "min", "code", "regex", "api_endpoint", "url", "optional", "api_key", "supported_services", "array", "nativeEnum", "ShippingService", "coverage_areas", "base_cost", "number", "cost_per_kg", "free_shipping_threshold", "positive", "max_weight_kg", "max_dimensions_cm", "logo_url", "website_url", "contact_phone", "contact_email", "email", "is_active", "boolean", "default", "UpdateCourierSchema", "partial", "ShippingQuoteSchema", "origin_address", "city", "state", "postal_code", "destination_address", "weight_kg", "dimensions_cm", "declared_value", "service_type", "courier_codes", "validateAdminAuth", "request", "session", "auth", "user", "NextResponse", "json", "error", "status", "calculateShippingCost", "courier", "weightKg", "declaredValue", "cost", "Math", "round", "calculateEstimatedDeliveryDays", "service", "originState", "destinationState", "baseDays", "SAME_DAY", "NEXT_DAY", "EXPRESS", "STANDARD", "extraDays", "authError", "searchParams", "URL", "activeOnly", "get", "includeStats", "supabase", "createClient", "query", "from", "select", "order", "eq", "data", "couriers", "couriersWithStats", "courierStats", "Promise", "all", "map", "shipments", "id", "totalShipments", "length", "deliveredShipments", "filter", "s", "totalRevenue", "reduce", "acc", "shipping_cost", "stats", "total_shipments", "delivered_shipments", "delivery_rate", "total_revenue", "console", "details", "Error", "message", "body", "validatedData", "parse", "existingCourier", "single", "apiKeyEncrypted", "Buffer", "toString", "courierError", "insert", "api_key_encrypted", "ZodError", "errors", "err", "path", "join", "in", "quotes", "includes", "servicesToQuote", "estimatedDays", "estimatedDate", "Date", "setDate", "getDate", "push", "courier_id", "courier_name", "estimated_delivery_days", "estimated_delivery_date", "toISOString", "split", "includes_insurance", "max_declared_value", "restrictions", "cheapestQuote", "prev", "current", "fastestQuote", "recommendedQuote", "prevScore", "currentScore", "response", "sort", "a", "b", "cheapest_quote", "fastest_quote", "recommended_quote"],
      mappings: "AAAA,qCAAqC;;;;;;;;;;;;QAkIfA;eAAAA;;QA+EAC;eAAAA;;QAkGAC;eAAAA;;QAlTTC;eAAAA;;;wBAS6B;wBACrB;yBACQ;qBACX;2BAOX;AAnBA,MAAMA,UAAU;AAqBvB,wDAAwD;AACxD,4BAA4B;AAC5B,wDAAwD;AAExD,MAAMC,sBAAsBC,MAAC,CAACC,MAAM,CAAC;IACnCC,MAAMF,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG;IACxBC,MAAML,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG,2CAA2CE,KAAK,CAAC,aAAa;IACtFC,cAAcP,MAAC,CAACG,MAAM,GAAGK,GAAG,GAAGC,QAAQ;IACvCC,SAASV,MAAC,CAACG,MAAM,GAAGM,QAAQ;IAC5BE,oBAAoBX,MAAC,CAACY,KAAK,CAACZ,MAAC,CAACa,UAAU,CAACC,0BAAe,GAAGV,GAAG,CAAC,GAAG;IAClEW,gBAAgBf,MAAC,CAACY,KAAK,CAACZ,MAAC,CAACG,MAAM,IAAIC,GAAG,CAAC,GAAG;IAC3CY,WAAWhB,MAAC,CAACiB,MAAM,GAAGb,GAAG,CAAC,GAAG;IAC7Bc,aAAalB,MAAC,CAACiB,MAAM,GAAGb,GAAG,CAAC,GAAG;IAC/Be,yBAAyBnB,MAAC,CAACiB,MAAM,GAAGG,QAAQ,GAAGX,QAAQ;IACvDY,eAAerB,MAAC,CAACiB,MAAM,GAAGG,QAAQ,GAAGX,QAAQ;IAC7Ca,mBAAmBtB,MAAC,CAACG,MAAM,GAAGG,KAAK,CAAC,iBAAiB,0BAA0BG,QAAQ;IACvFc,UAAUvB,MAAC,CAACG,MAAM,GAAGK,GAAG,GAAGC,QAAQ;IACnCe,aAAaxB,MAAC,CAACG,MAAM,GAAGK,GAAG,GAAGC,QAAQ;IACtCgB,eAAezB,MAAC,CAACG,MAAM,GAAGM,QAAQ;IAClCiB,eAAe1B,MAAC,CAACG,MAAM,GAAGwB,KAAK,GAAGlB,QAAQ;IAC1CmB,WAAW5B,MAAC,CAAC6B,OAAO,GAAGC,OAAO,CAAC;AACjC;AAEA,MAAMC,sBAAsBhC,oBAAoBiC,OAAO;AAEvD,MAAMC,sBAAsBjC,MAAC,CAACC,MAAM,CAAC;IACnCiC,gBAAgBlC,MAAC,CAACC,MAAM,CAAC;QACvBkC,MAAMnC,MAAC,CAACG,MAAM;QACdiC,OAAOpC,MAAC,CAACG,MAAM;QACfkC,aAAarC,MAAC,CAACG,MAAM;IACvB;IACAmC,qBAAqBtC,MAAC,CAACC,MAAM,CAAC;QAC5BkC,MAAMnC,MAAC,CAACG,MAAM;QACdiC,OAAOpC,MAAC,CAACG,MAAM;QACfkC,aAAarC,MAAC,CAACG,MAAM;IACvB;IACAoC,WAAWvC,MAAC,CAACiB,MAAM,GAAGG,QAAQ,CAAC;IAC/BoB,eAAexC,MAAC,CAACG,MAAM,GAAGG,KAAK,CAAC,iBAAiB;IACjDmC,gBAAgBzC,MAAC,CAACiB,MAAM,GAAGG,QAAQ,GAAGX,QAAQ;IAC9CiC,cAAc1C,MAAC,CAACa,UAAU,CAACC,0BAAe,EAAEL,QAAQ;IACpDkC,eAAe3C,MAAC,CAACY,KAAK,CAACZ,MAAC,CAACG,MAAM,IAAIM,QAAQ;AAC7C;AAEA,wDAAwD;AACxD,8BAA8B;AAC9B,wDAAwD;AACxD,eAAemC,kBAAkBC,OAAoB;IACnD,MAAMC,UAAU,MAAMC,IAAAA,YAAI;IAE1B,IAAI,CAACD,SAASE,MAAM;QAClB,OAAOC,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAe,GACxB;YAAEC,QAAQ;QAAI;IAElB;IAEA,wDAAwD;IACxD,0EAA0E;IAC1E,8BAA8B;IAC9B,6CAA6C;IAC7C,sBAAsB;IACtB,OAAO;IACP,IAAI;IAEJ,OAAO;AACT;AAEA,wDAAwD;AACxD,uBAAuB;AACvB,wDAAwD;AAExD,SAASC,sBACPC,OAAgB,EAChBC,QAAgB,EAChBC,aAAsB;IAEtB,IAAIC,OAAOH,QAAQtC,SAAS,GAAIsC,QAAQpC,WAAW,GAAGqC;IAEtD,iCAAiC;IACjC,IAAID,QAAQnC,uBAAuB,IAAIqC,iBAAiBA,iBAAiBF,QAAQnC,uBAAuB,EAAE;QACxGsC,OAAO;IACT;IAEA,OAAOC,KAAKC,KAAK,CAACF,OAAO,OAAO,KAAK,0BAA0B;AACjE;AAEA,SAASG,+BACPC,OAAwB,EACxBC,WAAmB,EACnBC,gBAAwB;IAExB,MAAMC,WAAW;QACf,CAAClD,0BAAe,CAACmD,QAAQ,CAAC,EAAE;QAC5B,CAACnD,0BAAe,CAACoD,QAAQ,CAAC,EAAE;QAC5B,CAACpD,0BAAe,CAACqD,OAAO,CAAC,EAAE;QAC3B,CAACrD,0BAAe,CAACsD,QAAQ,CAAC,EAAE;IAC9B;IAEA,iDAAiD;IACjD,MAAMC,YAAYP,gBAAgBC,mBAAmB,IAAI;IAEzD,OAAOC,QAAQ,CAACH,QAAQ,GAAGQ;AAC7B;AAMO,eAAe1E,IAAIkD,OAAoB;IAC5C,IAAI;QACF,wBAAwB;QACxB,MAAMyB,YAAY,MAAM1B,kBAAkBC;QAC1C,IAAIyB,WAAW;YAAC,OAAOA;QAAU;QAEjC,2BAA2B;QAC3B,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAI3B,QAAQrC,GAAG;QAC5C,MAAMiE,aAAaF,aAAaG,GAAG,CAAC,mBAAmB;QACvD,MAAMC,eAAeJ,aAAaG,GAAG,CAAC,qBAAqB;QAE3D,yBAAyB;QACzB,MAAME,WAAW,MAAMC,IAAAA,qBAAY;QAEnC,kBAAkB;QAClB,IAAIC,QAAQF,SACTG,IAAI,CAAC,YACLC,MAAM,CAAC,KACPC,KAAK,CAAC;QAET,IAAIR,YAAY;YACdK,QAAQA,MAAMI,EAAE,CAAC,aAAa;QAChC;QAEA,MAAM,EAAEC,MAAMC,QAAQ,EAAEjC,KAAK,EAAE,GAAG,MAAM2B;QAExC,IAAI3B,OAAO;YAAC,MAAMA;QAAM;QAExB,2CAA2C;QAC3C,IAAIkC,oBAAoBD;QAExB,IAAIT,gBAAgBS,UAAU;YAC5B,MAAME,eAAe,MAAMC,QAAQC,GAAG,CACpCJ,SAASK,GAAG,CAAC,OAAOnC;gBAClB,MAAM,EAAE6B,MAAMO,SAAS,EAAE,GAAG,MAAMd,SAC/BG,IAAI,CAAC,aACLC,MAAM,CAAC,mDACPE,EAAE,CAAC,cAAc5B,QAAQqC,EAAE;gBAE9B,MAAMC,iBAAiBF,WAAWG,UAAU;gBAC5C,MAAMC,qBAAqBJ,WAAWK,OAAOC,CAAAA,IAAKA,EAAE5C,MAAM,KAAK,aAAayC,UAAU;gBACtF,MAAMI,eAAeP,WAAWQ,OAAO,CAACC,KAAKH,IAAMG,MAAOH,CAAAA,EAAEI,aAAa,IAAI,CAAA,GAAI,MAAM;gBAEvF,OAAO;oBACL,GAAG9C,OAAO;oBACV+C,OAAO;wBACLC,iBAAiBV;wBACjBW,qBAAqBT;wBACrBU,eAAeZ,iBAAiB,IAAI,AAACE,qBAAqBF,iBAAkB,MAAM;wBAClFa,eAAeR;oBACjB;gBACF;YACF;YAGFZ,oBAAoBC;QACtB;QAEA,OAAOrC,oBAAY,CAACC,IAAI,CAAC;YACvBiC,MAAME,qBAAqB,EAAE;QAC/B;IAEF,EAAE,OAAOlC,OAAO;QACduD,QAAQvD,KAAK,CAAC,8BAA8BA;QAE5C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YACEC,OAAO;YACPwD,SAASxD,iBAAiByD,QAAQzD,MAAM0D,OAAO,GAAG;QACpD,GACA;YAAEzD,QAAQ;QAAI;IAElB;AACF;AAMO,eAAexD,KAAKiD,OAAoB;IAC7C,IAAI;QACF,wBAAwB;QACxB,MAAMyB,YAAY,MAAM1B,kBAAkBC;QAC1C,IAAIyB,WAAW;YAAC,OAAOA;QAAU;QAEjC,yBAAyB;QACzB,MAAMwC,OAAO,MAAMjE,QAAQK,IAAI;QAC/B,MAAM6D,gBAAgBhH,oBAAoBiH,KAAK,CAACF;QAEhD,yBAAyB;QACzB,MAAMlC,WAAW,MAAMC,IAAAA,qBAAY;QAEnC,oCAAoC;QACpC,MAAM,EAAEM,MAAM8B,eAAe,EAAE,GAAG,MAAMrC,SACrCG,IAAI,CAAC,YACLC,MAAM,CAAC,MACPE,EAAE,CAAC,QAAQ6B,cAAc1G,IAAI,EAC7B6G,MAAM;QAET,IAAID,iBAAiB;YACnB,OAAOhE,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAA8B,GACvC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,IAAI+D,kBAAkB;QACtB,IAAIJ,cAAcrG,OAAO,EAAE;YACzB,sCAAsC;YACtCyG,kBAAkBC,OAAOrC,IAAI,CAACgC,cAAcrG,OAAO,EAAE2G,QAAQ,CAAC;QAChE;QAEA,gBAAgB;QAChB,MAAM,EAAElC,MAAM7B,OAAO,EAAEH,OAAOmE,YAAY,EAAE,GAAG,MAAM1C,SAClDG,IAAI,CAAC,YACLwC,MAAM,CAAC;YACNrH,MAAM6G,cAAc7G,IAAI;YACxBG,MAAM0G,cAAc1G,IAAI;YACxBE,cAAcwG,cAAcxG,YAAY;YACxCiH,mBAAmBL;YACnBxG,oBAAoBoG,cAAcpG,kBAAkB;YACpDI,gBAAgBgG,cAAchG,cAAc;YAC5CC,WAAW+F,cAAc/F,SAAS;YAClCE,aAAa6F,cAAc7F,WAAW;YACtCC,yBAAyB4F,cAAc5F,uBAAuB;YAC9DE,eAAe0F,cAAc1F,aAAa;YAC1CC,mBAAmByF,cAAczF,iBAAiB;YAClDC,UAAUwF,cAAcxF,QAAQ;YAChCC,aAAauF,cAAcvF,WAAW;YACtCC,eAAesF,cAActF,aAAa;YAC1CC,eAAeqF,cAAcrF,aAAa;YAC1CE,WAAWmF,cAAcnF,SAAS;QACpC,GACCoD,MAAM,CAAC,KACPkC,MAAM;QAET,IAAII,cAAc;YAAC,MAAMA;QAAa;QAEtC,OAAOrE,oBAAY,CAACC,IAAI,CACtB;YACEiC,MAAM7B;YACNuD,SAAS;QACX,GACA;YAAEzD,QAAQ;QAAI;IAGlB,EAAE,OAAOD,OAAO;QACduD,QAAQvD,KAAK,CAAC,+BAA+BA;QAE7C,IAAIA,iBAAiBnD,MAAC,CAACyH,QAAQ,EAAE;YAC/B,OAAOxE,oBAAY,CAACC,IAAI,CACtB;gBACEC,OAAO;gBACPwD,SAASxD,MAAMuE,MAAM,CAACxB,MAAM,CAAC,CAACC,KAAKwB;oBACjCxB,GAAG,CAACwB,IAAIC,IAAI,CAACC,IAAI,CAAC,KAAK,GAAG;wBAACF,IAAId,OAAO;qBAAC;oBACvC,OAAOV;gBACT,GAAG,CAAC;YACN,GACA;gBAAE/C,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YACEC,OAAO;YACPwD,SAASxD,iBAAiByD,QAAQzD,MAAM0D,OAAO,GAAG;QACpD,GACA;YAAEzD,QAAQ;QAAI;IAElB;AACF;AAMO,eAAevD,WAAWgD,OAAoB;IACnD,IAAI;QACF,wBAAwB;QACxB,MAAMyB,YAAY,MAAM1B,kBAAkBC;QAC1C,IAAIyB,WAAW;YAAC,OAAOA;QAAU;QAEjC,yBAAyB;QACzB,MAAMwC,OAAO,MAAMjE,QAAQK,IAAI;QAC/B,MAAM6D,gBAAgB9E,oBAAoB+E,KAAK,CAACF;QAEhD,yBAAyB;QACzB,MAAMlC,WAAW,MAAMC,IAAAA,qBAAY;QAEnC,2BAA2B;QAC3B,IAAIC,QAAQF,SACTG,IAAI,CAAC,YACLC,MAAM,CAAC,KACPE,EAAE,CAAC,aAAa;QAEnB,IAAI6B,cAAcpE,aAAa,IAAIoE,cAAcpE,aAAa,CAACkD,MAAM,GAAG,GAAG;YACzEf,QAAQA,MAAMgD,EAAE,CAAC,QAAQf,cAAcpE,aAAa;QACtD;QAEA,MAAM,EAAEwC,MAAMC,QAAQ,EAAEjC,KAAK,EAAE,GAAG,MAAM2B;QAExC,IAAI3B,OAAO;YAAC,MAAMA;QAAM;QAExB,uBAAuB;QACvB,MAAM4E,SAA0B,EAAE;QAElC,KAAK,MAAMzE,WAAW8B,YAAY,EAAE,CAAE;YACpC,kCAAkC;YAClC,IAAI9B,QAAQjC,aAAa,IAAI0F,cAAcxE,SAAS,GAAGe,QAAQjC,aAAa,EAAE;gBAC5E;YACF;YAEA,sBAAsB;YACtB,MAAM0C,mBAAmBgD,cAAczE,mBAAmB,CAACF,KAAK;YAChE,IAAI,CAACkB,QAAQvC,cAAc,CAACiH,QAAQ,CAACjE,mBAAmB;gBACtD;YACF;YAEA,oDAAoD;YACpD,MAAMkE,kBAAkBlB,cAAcrE,YAAY,GAC9C;gBAACqE,cAAcrE,YAAY;aAAC,GAC5BY,QAAQ3C,kBAAkB;YAE9B,KAAK,MAAMkD,WAAWoE,gBAAiB;gBACrC,MAAMxE,OAAOJ,sBACXC,SACAyD,cAAcxE,SAAS,EACvBwE,cAActE,cAAc;gBAG9B,MAAMyF,gBAAgBtE,+BACpBC,SACAkD,cAAc7E,cAAc,CAACE,KAAK,EAClC2E,cAAczE,mBAAmB,CAACF,KAAK;gBAGzC,MAAM+F,gBAAgB,IAAIC;gBAC1BD,cAAcE,OAAO,CAACF,cAAcG,OAAO,KAAKJ;gBAEhDH,OAAOQ,IAAI,CAAC;oBACVC,YAAYlF,QAAQqC,EAAE;oBACtB8C,cAAcnF,QAAQpD,IAAI;oBAC1BwC,cAAcmB;oBACdJ;oBACAiF,yBAAyBR;oBACzBS,yBAAyBR,cAAcS,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;oBAClEC,oBAAoB/B,cAActE,cAAc,GAAGsE,cAActE,cAAc,IAAI,QAAQ;oBAC3FsG,oBAAoB;oBACpBC,cAAc1F,QAAQjC,aAAa,GAAG;wBAAC,CAAC,aAAa,EAAEiC,QAAQjC,aAAa,CAAC,EAAE,CAAC;qBAAC,GAAG,EAAE;gBACxF;YACF;QACF;QAEA,6BAA6B;QAC7B,MAAM4H,gBAAgBlB,OAAO7B,MAAM,CAAC,CAACgD,MAAMC,UACzCD,KAAKzF,IAAI,GAAG0F,QAAQ1F,IAAI,GAAGyF,OAAOC;QAGpC,MAAMC,eAAerB,OAAO7B,MAAM,CAAC,CAACgD,MAAMC,UACxCD,KAAKR,uBAAuB,GAAGS,QAAQT,uBAAuB,GAAGQ,OAAOC;QAG1E,+CAA+C;QAC/C,MAAME,mBAAmBtB,OAAO7B,MAAM,CAAC,CAACgD,MAAMC;YAC5C,MAAMG,YAAY,AAAC,IAAIJ,KAAKzF,IAAI,GAAK,IAAIyF,KAAKR,uBAAuB;YACrE,MAAMa,eAAe,AAAC,IAAIJ,QAAQ1F,IAAI,GAAK,IAAI0F,QAAQT,uBAAuB;YAC9E,OAAOa,eAAeD,YAAYH,UAAUD;QAC9C;QAEA,MAAMM,WAAkC;YACtCzB,QAAQA,OAAO0B,IAAI,CAAC,CAACC,GAAGC,IAAMD,EAAEjG,IAAI,GAAGkG,EAAElG,IAAI;YAC7CmG,gBAAgBX;YAChBY,eAAeT;YACfU,mBAAmBT;QACrB;QAEA,OAAOpG,oBAAY,CAACC,IAAI,CAAC;YAAEiC,MAAMqE;QAAS;IAE5C,EAAE,OAAOrG,OAAO;QACduD,QAAQvD,KAAK,CAAC,4BAA4BA;QAE1C,IAAIA,iBAAiBnD,MAAC,CAACyH,QAAQ,EAAE;YAC/B,OAAOxE,oBAAY,CAACC,IAAI,CACtB;gBACEC,OAAO;gBACPwD,SAASxD,MAAMuE,MAAM,CAACxB,MAAM,CAAC,CAACC,KAAKwB;oBACjCxB,GAAG,CAACwB,IAAIC,IAAI,CAACC,IAAI,CAAC,KAAK,GAAG;wBAACF,IAAId,OAAO;qBAAC;oBACvC,OAAOV;gBACT,GAAG,CAAC;YACN,GACA;gBAAE/C,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YACEC,OAAO;YACPwD,SAASxD,iBAAiByD,QAAQzD,MAAM0D,OAAO,GAAG;QACpD,GACA;YAAEzD,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4f15584708c694de63d38db22ece58e7ff064d14"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bmppjh4xr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bmppjh4xr();
cov_2bmppjh4xr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2bmppjh4xr().f[0]++;
  cov_2bmppjh4xr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2bmppjh4xr().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2bmppjh4xr().f[1]++;
    cov_2bmppjh4xr().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2bmppjh4xr().f[2]++;
    cov_2bmppjh4xr().s[5]++;
    return POST;
  },
  get POST_QUOTE() {
    /* istanbul ignore next */
    cov_2bmppjh4xr().f[3]++;
    cov_2bmppjh4xr().s[6]++;
    return POST_QUOTE;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2bmppjh4xr().f[4]++;
    cov_2bmppjh4xr().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[8]++, require("next/server"));
const _config =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[9]++, require("../../../../../lib/auth/config"));
const _server1 =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[10]++, require("../../../../../lib/integrations/supabase/server"));
const _zod =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[11]++, require("zod"));
const _logistics =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[12]++, require("../../../../../types/logistics"));
const runtime =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[13]++, 'nodejs');
// =====================================================
// SCHEMAS DE VALIDACIÃN ZOD
// =====================================================
const CreateCourierSchema =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[14]++, _zod.z.object({
  name: _zod.z.string().min(1, 'Nombre es requerido'),
  code: _zod.z.string().min(2, 'CÃ³digo debe tener al menos 2 caracteres').regex(/^[a-z_]+$/, 'CÃ³digo debe ser lowercase con underscores'),
  api_endpoint: _zod.z.string().url().optional(),
  api_key: _zod.z.string().optional(),
  supported_services: _zod.z.array(_zod.z.nativeEnum(_logistics.ShippingService)).min(1, 'Debe soportar al menos un servicio'),
  coverage_areas: _zod.z.array(_zod.z.string()).min(1, 'Debe cubrir al menos un Ã¡rea'),
  base_cost: _zod.z.number().min(0, 'Costo base debe ser positivo'),
  cost_per_kg: _zod.z.number().min(0, 'Costo por kg debe ser positivo'),
  free_shipping_threshold: _zod.z.number().positive().optional(),
  max_weight_kg: _zod.z.number().positive().optional(),
  max_dimensions_cm: _zod.z.string().regex(/^\d+x\d+x\d+$/, 'Formato debe ser LxWxH').optional(),
  logo_url: _zod.z.string().url().optional(),
  website_url: _zod.z.string().url().optional(),
  contact_phone: _zod.z.string().optional(),
  contact_email: _zod.z.string().email().optional(),
  is_active: _zod.z.boolean().default(true)
}));
const UpdateCourierSchema =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[15]++, CreateCourierSchema.partial());
const ShippingQuoteSchema =
/* istanbul ignore next */
(cov_2bmppjh4xr().s[16]++, _zod.z.object({
  origin_address: _zod.z.object({
    city: _zod.z.string(),
    state: _zod.z.string(),
    postal_code: _zod.z.string()
  }),
  destination_address: _zod.z.object({
    city: _zod.z.string(),
    state: _zod.z.string(),
    postal_code: _zod.z.string()
  }),
  weight_kg: _zod.z.number().positive('Peso debe ser positivo'),
  dimensions_cm: _zod.z.string().regex(/^\d+x\d+x\d+$/, 'Formato debe ser LxWxH'),
  declared_value: _zod.z.number().positive().optional(),
  service_type: _zod.z.nativeEnum(_logistics.ShippingService).optional(),
  courier_codes: _zod.z.array(_zod.z.string()).optional()
}));
// =====================================================
// MIDDLEWARE DE AUTENTICACIÃN
// =====================================================
async function validateAdminAuth(request) {
  /* istanbul ignore next */
  cov_2bmppjh4xr().f[5]++;
  const session =
  /* istanbul ignore next */
  (cov_2bmppjh4xr().s[17]++, await (0, _config.auth)());
  /* istanbul ignore next */
  cov_2bmppjh4xr().s[18]++;
  if (!session?.user) {
    /* istanbul ignore next */
    cov_2bmppjh4xr().b[0][0]++;
    cov_2bmppjh4xr().s[19]++;
    return _server.NextResponse.json({
      error: 'Unauthorized'
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_2bmppjh4xr().b[0][1]++;
  }
  // TODO: Verificar rol de admin cuando estÃ© implementado
  // if (session.user.role !== 'admin' && session.user.role !== 'manager') {
  //   return NextResponse.json(
  //     { error: 'Insufficient permissions' },
  //     { status: 403 }
  //   );
  // }
  cov_2bmppjh4xr().s[20]++;
  return null;
}
// =====================================================
// FUNCIONES AUXILIARES
// =====================================================
function calculateShippingCost(courier, weightKg, declaredValue) {
  /* istanbul ignore next */
  cov_2bmppjh4xr().f[6]++;
  let cost =
  /* istanbul ignore next */
  (cov_2bmppjh4xr().s[21]++, courier.base_cost + courier.cost_per_kg * weightKg);
  // Aplicar envÃ­o gratis si aplica
  /* istanbul ignore next */
  cov_2bmppjh4xr().s[22]++;
  if (
  /* istanbul ignore next */
  (cov_2bmppjh4xr().b[2][0]++, courier.free_shipping_threshold) &&
  /* istanbul ignore next */
  (cov_2bmppjh4xr().b[2][1]++, declaredValue) &&
  /* istanbul ignore next */
  (cov_2bmppjh4xr().b[2][2]++, declaredValue >= courier.free_shipping_threshold)) {
    /* istanbul ignore next */
    cov_2bmppjh4xr().b[1][0]++;
    cov_2bmppjh4xr().s[23]++;
    cost = 0;
  } else
  /* istanbul ignore next */
  {
    cov_2bmppjh4xr().b[1][1]++;
  }
  cov_2bmppjh4xr().s[24]++;
  return Math.round(cost * 100) / 100; // Redondear a 2 decimales
}
function calculateEstimatedDeliveryDays(service, originState, destinationState) {
  /* istanbul ignore next */
  cov_2bmppjh4xr().f[7]++;
  const baseDays =
  /* istanbul ignore next */
  (cov_2bmppjh4xr().s[25]++, {
    [_logistics.ShippingService.SAME_DAY]: 1,
    [_logistics.ShippingService.NEXT_DAY]: 1,
    [_logistics.ShippingService.EXPRESS]: 2,
    [_logistics.ShippingService.STANDARD]: 5
  });
  // Agregar dÃ­as extra si es envÃ­o interprovincial
  const extraDays =
  /* istanbul ignore next */
  (cov_2bmppjh4xr().s[26]++, originState !== destinationState ?
  /* istanbul ignore next */
  (cov_2bmppjh4xr().b[3][0]++, 2) :
  /* istanbul ignore next */
  (cov_2bmppjh4xr().b[3][1]++, 0));
  /* istanbul ignore next */
  cov_2bmppjh4xr().s[27]++;
  return baseDays[service] + extraDays;
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2bmppjh4xr().f[8]++;
  cov_2bmppjh4xr().s[28]++;
  try {
    // Validar autenticaciÃ³n
    const authError =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[29]++, await validateAdminAuth(request));
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[30]++;
    if (authError) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[4][0]++;
      cov_2bmppjh4xr().s[31]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[4][1]++;
    }
    // Parsear query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[32]++, new URL(request.url));
    const activeOnly =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[33]++, searchParams.get('active_only') === 'true');
    const includeStats =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[34]++, searchParams.get('include_stats') === 'true');
    // Crear cliente Supabase
    const supabase =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[35]++, await (0, _server1.createClient)());
    // Construir query
    let query =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[36]++, supabase.from('couriers').select('*').order('name'));
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[37]++;
    if (activeOnly) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[5][0]++;
      cov_2bmppjh4xr().s[38]++;
      query = query.eq('is_active', true);
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[5][1]++;
    }
    const {
      data: couriers,
      error
    } =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[39]++, await query);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[40]++;
    if (error) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[6][0]++;
      cov_2bmppjh4xr().s[41]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[6][1]++;
    }
    // Si se solicitan estadÃ­sticas, obtenerlas
    let couriersWithStats =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[42]++, couriers);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[43]++;
    if (
    /* istanbul ignore next */
    (cov_2bmppjh4xr().b[8][0]++, includeStats) &&
    /* istanbul ignore next */
    (cov_2bmppjh4xr().b[8][1]++, couriers)) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[7][0]++;
      const courierStats =
      /* istanbul ignore next */
      (cov_2bmppjh4xr().s[44]++, await Promise.all(couriers.map(async courier => {
        /* istanbul ignore next */
        cov_2bmppjh4xr().f[9]++;
        const {
          data: shipments
        } =
        /* istanbul ignore next */
        (cov_2bmppjh4xr().s[45]++, await supabase.from('shipments').select('status, shipping_cost, created_at, delivered_at').eq('carrier_id', courier.id));
        const totalShipments =
        /* istanbul ignore next */
        (cov_2bmppjh4xr().s[46]++,
        /* istanbul ignore next */
        (cov_2bmppjh4xr().b[9][0]++, shipments?.length) ||
        /* istanbul ignore next */
        (cov_2bmppjh4xr().b[9][1]++, 0));
        const deliveredShipments =
        /* istanbul ignore next */
        (cov_2bmppjh4xr().s[47]++,
        /* istanbul ignore next */
        (cov_2bmppjh4xr().b[10][0]++, shipments?.filter(s => {
          /* istanbul ignore next */
          cov_2bmppjh4xr().f[10]++;
          cov_2bmppjh4xr().s[48]++;
          return s.status === 'delivered';
        }).length) ||
        /* istanbul ignore next */
        (cov_2bmppjh4xr().b[10][1]++, 0));
        const totalRevenue =
        /* istanbul ignore next */
        (cov_2bmppjh4xr().s[49]++,
        /* istanbul ignore next */
        (cov_2bmppjh4xr().b[11][0]++, shipments?.reduce((acc, s) => {
          /* istanbul ignore next */
          cov_2bmppjh4xr().f[11]++;
          cov_2bmppjh4xr().s[50]++;
          return acc + (
          /* istanbul ignore next */
          (cov_2bmppjh4xr().b[12][0]++, s.shipping_cost) ||
          /* istanbul ignore next */
          (cov_2bmppjh4xr().b[12][1]++, 0));
        }, 0)) ||
        /* istanbul ignore next */
        (cov_2bmppjh4xr().b[11][1]++, 0));
        /* istanbul ignore next */
        cov_2bmppjh4xr().s[51]++;
        return {
          ...courier,
          stats: {
            total_shipments: totalShipments,
            delivered_shipments: deliveredShipments,
            delivery_rate: totalShipments > 0 ?
            /* istanbul ignore next */
            (cov_2bmppjh4xr().b[13][0]++, deliveredShipments / totalShipments * 100) :
            /* istanbul ignore next */
            (cov_2bmppjh4xr().b[13][1]++, 0),
            total_revenue: totalRevenue
          }
        };
      })));
      /* istanbul ignore next */
      cov_2bmppjh4xr().s[52]++;
      couriersWithStats = courierStats;
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[7][1]++;
    }
    cov_2bmppjh4xr().s[53]++;
    return _server.NextResponse.json({
      data:
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[14][0]++, couriersWithStats) ||
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[14][1]++, [])
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[54]++;
    console.error('Error in GET couriers API:', error);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[55]++;
    return _server.NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[15][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2bmppjh4xr().f[12]++;
  cov_2bmppjh4xr().s[56]++;
  try {
    // Validar autenticaciÃ³n
    const authError =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[57]++, await validateAdminAuth(request));
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[58]++;
    if (authError) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[16][0]++;
      cov_2bmppjh4xr().s[59]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[16][1]++;
    }
    // Parsear y validar body
    const body =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[60]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[61]++, CreateCourierSchema.parse(body));
    // Crear cliente Supabase
    const supabase =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[62]++, await (0, _server1.createClient)());
    // Verificar que el cÃ³digo no exista
    const {
      data: existingCourier
    } =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[63]++, await supabase.from('couriers').select('id').eq('code', validatedData.code).single());
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[64]++;
    if (existingCourier) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[17][0]++;
      cov_2bmppjh4xr().s[65]++;
      return _server.NextResponse.json({
        error: 'Courier code already exists'
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[17][1]++;
    }
    // Encriptar API key si se proporciona
    let apiKeyEncrypted =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[66]++, null);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[67]++;
    if (validatedData.api_key) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[18][0]++;
      cov_2bmppjh4xr().s[68]++;
      // TODO: Implementar encriptaciÃ³n real
      apiKeyEncrypted = Buffer.from(validatedData.api_key).toString('base64');
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[18][1]++;
    }
    // Crear courier
    const {
      data: courier,
      error: courierError
    } =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[69]++, await supabase.from('couriers').insert({
      name: validatedData.name,
      code: validatedData.code,
      api_endpoint: validatedData.api_endpoint,
      api_key_encrypted: apiKeyEncrypted,
      supported_services: validatedData.supported_services,
      coverage_areas: validatedData.coverage_areas,
      base_cost: validatedData.base_cost,
      cost_per_kg: validatedData.cost_per_kg,
      free_shipping_threshold: validatedData.free_shipping_threshold,
      max_weight_kg: validatedData.max_weight_kg,
      max_dimensions_cm: validatedData.max_dimensions_cm,
      logo_url: validatedData.logo_url,
      website_url: validatedData.website_url,
      contact_phone: validatedData.contact_phone,
      contact_email: validatedData.contact_email,
      is_active: validatedData.is_active
    }).select('*').single());
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[70]++;
    if (courierError) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[19][0]++;
      cov_2bmppjh4xr().s[71]++;
      throw courierError;
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[19][1]++;
    }
    cov_2bmppjh4xr().s[72]++;
    return _server.NextResponse.json({
      data: courier,
      message: 'Courier created successfully'
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[73]++;
    console.error('Error in POST couriers API:', error);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[74]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[20][0]++;
      cov_2bmppjh4xr().s[75]++;
      return _server.NextResponse.json({
        error: 'Validation error',
        details: error.errors.reduce((acc, err) => {
          /* istanbul ignore next */
          cov_2bmppjh4xr().f[13]++;
          cov_2bmppjh4xr().s[76]++;
          acc[err.path.join('.')] = [err.message];
          /* istanbul ignore next */
          cov_2bmppjh4xr().s[77]++;
          return acc;
        }, {})
      }, {
        status: 422
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[20][1]++;
    }
    cov_2bmppjh4xr().s[78]++;
    return _server.NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[21][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[21][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function POST_QUOTE(request) {
  /* istanbul ignore next */
  cov_2bmppjh4xr().f[14]++;
  cov_2bmppjh4xr().s[79]++;
  try {
    // Validar autenticaciÃ³n
    const authError =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[80]++, await validateAdminAuth(request));
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[81]++;
    if (authError) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[22][0]++;
      cov_2bmppjh4xr().s[82]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[22][1]++;
    }
    // Parsear y validar body
    const body =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[83]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[84]++, ShippingQuoteSchema.parse(body));
    // Crear cliente Supabase
    const supabase =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[85]++, await (0, _server1.createClient)());
    // Obtener couriers activos
    let query =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[86]++, supabase.from('couriers').select('*').eq('is_active', true));
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_2bmppjh4xr().b[24][0]++, validatedData.courier_codes) &&
    /* istanbul ignore next */
    (cov_2bmppjh4xr().b[24][1]++, validatedData.courier_codes.length > 0)) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[23][0]++;
      cov_2bmppjh4xr().s[88]++;
      query = query.in('code', validatedData.courier_codes);
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[23][1]++;
    }
    const {
      data: couriers,
      error
    } =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[89]++, await query);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[90]++;
    if (error) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[25][0]++;
      cov_2bmppjh4xr().s[91]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[25][1]++;
    }
    // Generar cotizaciones
    const quotes =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[92]++, []);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[93]++;
    for (const courier of
    /* istanbul ignore next */
    (cov_2bmppjh4xr().b[26][0]++, couriers) ||
    /* istanbul ignore next */
    (cov_2bmppjh4xr().b[26][1]++, [])) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().s[94]++;
      // Verificar restricciones de peso
      if (
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[28][0]++, courier.max_weight_kg) &&
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[28][1]++, validatedData.weight_kg > courier.max_weight_kg)) {
        /* istanbul ignore next */
        cov_2bmppjh4xr().b[27][0]++;
        cov_2bmppjh4xr().s[95]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2bmppjh4xr().b[27][1]++;
      }
      // Verificar cobertura
      const destinationState =
      /* istanbul ignore next */
      (cov_2bmppjh4xr().s[96]++, validatedData.destination_address.state);
      /* istanbul ignore next */
      cov_2bmppjh4xr().s[97]++;
      if (!courier.coverage_areas.includes(destinationState)) {
        /* istanbul ignore next */
        cov_2bmppjh4xr().b[29][0]++;
        cov_2bmppjh4xr().s[98]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2bmppjh4xr().b[29][1]++;
      }
      // Generar cotizaciones para cada servicio soportado
      const servicesToQuote =
      /* istanbul ignore next */
      (cov_2bmppjh4xr().s[99]++, validatedData.service_type ?
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[30][0]++, [validatedData.service_type]) :
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[30][1]++, courier.supported_services));
      /* istanbul ignore next */
      cov_2bmppjh4xr().s[100]++;
      for (const service of servicesToQuote) {
        const cost =
        /* istanbul ignore next */
        (cov_2bmppjh4xr().s[101]++, calculateShippingCost(courier, validatedData.weight_kg, validatedData.declared_value));
        const estimatedDays =
        /* istanbul ignore next */
        (cov_2bmppjh4xr().s[102]++, calculateEstimatedDeliveryDays(service, validatedData.origin_address.state, validatedData.destination_address.state));
        const estimatedDate =
        /* istanbul ignore next */
        (cov_2bmppjh4xr().s[103]++, new Date());
        /* istanbul ignore next */
        cov_2bmppjh4xr().s[104]++;
        estimatedDate.setDate(estimatedDate.getDate() + estimatedDays);
        /* istanbul ignore next */
        cov_2bmppjh4xr().s[105]++;
        quotes.push({
          courier_id: courier.id,
          courier_name: courier.name,
          service_type: service,
          cost,
          estimated_delivery_days: estimatedDays,
          estimated_delivery_date: estimatedDate.toISOString().split('T')[0],
          includes_insurance: validatedData.declared_value ?
          /* istanbul ignore next */
          (cov_2bmppjh4xr().b[31][0]++, validatedData.declared_value <= 10000) :
          /* istanbul ignore next */
          (cov_2bmppjh4xr().b[31][1]++, false),
          max_declared_value: 50000,
          restrictions: courier.max_weight_kg ?
          /* istanbul ignore next */
          (cov_2bmppjh4xr().b[32][0]++, [`Peso mÃ¡ximo: ${courier.max_weight_kg}kg`]) :
          /* istanbul ignore next */
          (cov_2bmppjh4xr().b[32][1]++, [])
        });
      }
    }
    // Encontrar mejores opciones
    const cheapestQuote =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[106]++, quotes.reduce((prev, current) => {
      /* istanbul ignore next */
      cov_2bmppjh4xr().f[15]++;
      cov_2bmppjh4xr().s[107]++;
      return prev.cost < current.cost ?
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[33][0]++, prev) :
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[33][1]++, current);
    }));
    const fastestQuote =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[108]++, quotes.reduce((prev, current) => {
      /* istanbul ignore next */
      cov_2bmppjh4xr().f[16]++;
      cov_2bmppjh4xr().s[109]++;
      return prev.estimated_delivery_days < current.estimated_delivery_days ?
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[34][0]++, prev) :
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[34][1]++, current);
    }));
    // Recomendar el mejor balance precio/velocidad
    const recommendedQuote =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[110]++, quotes.reduce((prev, current) => {
      /* istanbul ignore next */
      cov_2bmppjh4xr().f[17]++;
      const prevScore =
      /* istanbul ignore next */
      (cov_2bmppjh4xr().s[111]++, 1 / prev.cost + 1 / prev.estimated_delivery_days);
      const currentScore =
      /* istanbul ignore next */
      (cov_2bmppjh4xr().s[112]++, 1 / current.cost + 1 / current.estimated_delivery_days);
      /* istanbul ignore next */
      cov_2bmppjh4xr().s[113]++;
      return currentScore > prevScore ?
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[35][0]++, current) :
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[35][1]++, prev);
    }));
    const response =
    /* istanbul ignore next */
    (cov_2bmppjh4xr().s[114]++, {
      quotes: quotes.sort((a, b) => {
        /* istanbul ignore next */
        cov_2bmppjh4xr().f[18]++;
        cov_2bmppjh4xr().s[115]++;
        return a.cost - b.cost;
      }),
      cheapest_quote: cheapestQuote,
      fastest_quote: fastestQuote,
      recommended_quote: recommendedQuote
    });
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[116]++;
    return _server.NextResponse.json({
      data: response
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[117]++;
    console.error('Error in POST quote API:', error);
    /* istanbul ignore next */
    cov_2bmppjh4xr().s[118]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_2bmppjh4xr().b[36][0]++;
      cov_2bmppjh4xr().s[119]++;
      return _server.NextResponse.json({
        error: 'Validation error',
        details: error.errors.reduce((acc, err) => {
          /* istanbul ignore next */
          cov_2bmppjh4xr().f[19]++;
          cov_2bmppjh4xr().s[120]++;
          acc[err.path.join('.')] = [err.message];
          /* istanbul ignore next */
          cov_2bmppjh4xr().s[121]++;
          return acc;
        }, {})
      }, {
        status: 422
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bmppjh4xr().b[36][1]++;
    }
    cov_2bmppjh4xr().s[122]++;
    return _server.NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bmppjh4xr().b[37][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,