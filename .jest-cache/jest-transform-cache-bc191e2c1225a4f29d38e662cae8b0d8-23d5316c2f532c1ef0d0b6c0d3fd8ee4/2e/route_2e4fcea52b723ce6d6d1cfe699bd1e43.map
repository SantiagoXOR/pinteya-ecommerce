{"version":3,"names":["cov_1j85caxn6w","actualCoverage","s","GET","f","runtime","supabaseAdmin","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","validateAdminAuth","request","session","_config","auth","user","b","_server","NextResponse","json","error","status","adminEmails","includes","email","getLogisticsStats","supabase","data","orders","from","select","total_shipments","length","pending_shipments","filter","o","fulfillment_status","in_transit_shipments","delivered_shipments","exception_shipments","deliveredOrders","average_delivery_time","on_time_delivery_rate","total_shipping_cost","reduce","acc","parseFloat","total","couriers","eq","active_couriers","Math","round","getRecentShipments","order","ascending","limit","courierMap","Map","map","c","code","index","shippingAddr","shipping_address","courierCode","carrier","courier","get","id","name","shipmentStatus","shipment_number","tracking_number","String","padStart","order_id","courier_id","recipient_name","recipient_address","street","street_name","recipient_city","city","city_name","recipient_postal_code","postal_code","zip_code","recipient_country","country","package_weight_kg","package_value","shipping_cost","total_cost","estimated_delivery_date","estimated_delivery","created_at","updated_at","delivery_address","number","street_number","neighborhood","state","state_name","weight_kg","getLogisticsAlerts","alerts","twoDaysAgo","Date","setDate","getDate","pendingOrders","lt","toISOString","forEach","push","type","title","description","order_number","shipment_id","is_read","action_url","ordersWithoutAddress","is","getPerformanceMetrics","thirtyDaysAgo","gte","dailyMetrics","date","split","shipments_count","delivered_count","on_time_count","Object","values","sort","a","localeCompare","getCarrierPerformance","carrierStats","carrierCode","carrier_id","carrier_name","on_time_deliveries","on_time_rate","average_cost_per_shipment","stats","authError","recentShipments","performanceMetrics","carrierPerformance","Promise","all","response","recent_shipments","performance_metrics","carrier_performance","headers","console","details","Error","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\dashboard\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: DASHBOARD DE LOGÍSTICA ENTERPRISE\r\n// Endpoint: GET /api/admin/logistics/dashboard\r\n// Descripción: Dashboard principal con métricas tiempo real\r\n// Basado en: Patrones WooCommerce Activity Panels\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { Database } from '@/types/database';\r\nimport {\r\n  LogisticsDashboardResponse,\r\n  LogisticsStats,\r\n  LogisticsAlert,\r\n  PerformanceMetric,\r\n  CarrierPerformance,\r\n  Shipment\r\n} from '@/types/logistics';\r\n\r\n// Cliente admin de Supabase\r\nconst supabaseAdmin = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// =====================================================\r\n// MIDDLEWARE DE AUTENTICACIÓN\r\n// =====================================================\r\nasync function validateAdminAuth(request: NextRequest) {\r\n  const session = await auth();\r\n\r\n  if (!session?.user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  // Verificar rol de administrador usando el email\r\n  const adminEmails = ['santiago@xor.com.ar'];\r\n  if (!adminEmails.includes(session.user.email || '')) {\r\n    return NextResponse.json(\r\n      { error: 'Insufficient permissions' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE DATOS\r\n// =====================================================\r\n\r\nasync function getLogisticsStats(supabase: ReturnType<typeof createClient<Database>>): Promise<LogisticsStats> {\r\n  // Obtener estadísticas basadas en órdenes reales\r\n  const { data: orders, error } = await supabase\r\n    .from('orders')\r\n    .select('id, status, fulfillment_status, total, created_at, tracking_number, carrier, estimated_delivery');\r\n\r\n  if (error) {throw error;}\r\n\r\n  const total_shipments = orders.length;\r\n\r\n  // Mapear estados de órdenes a estados de envío\r\n  const pending_shipments = orders.filter(o =>\r\n    o.status === 'pending' || o.fulfillment_status === 'unfulfilled'\r\n  ).length;\r\n\r\n  const in_transit_shipments = orders.filter(o =>\r\n    o.status === 'shipped' || o.fulfillment_status === 'partial'\r\n  ).length;\r\n\r\n  const delivered_shipments = orders.filter(o =>\r\n    o.status === 'delivered' || o.fulfillment_status === 'fulfilled'\r\n  ).length;\r\n\r\n  const exception_shipments = orders.filter(o =>\r\n    o.status === 'cancelled' || o.status === 'refunded'\r\n  ).length;\r\n\r\n  // Calcular tiempo promedio de entrega (estimado basado en órdenes entregadas)\r\n  const deliveredOrders = orders.filter(o => o.status === 'delivered');\r\n  const average_delivery_time = deliveredOrders.length > 0 ? 3.5 : 0; // Promedio estimado\r\n\r\n  // Calcular tasa de entrega a tiempo (estimado)\r\n  const on_time_delivery_rate = deliveredOrders.length > 0 ? 85.0 : 100.0;\r\n\r\n  // Calcular costo total estimado de envíos (10% del total de órdenes)\r\n  const total_shipping_cost = orders.reduce((acc, o) => acc + (parseFloat(o.total) * 0.1), 0);\r\n\r\n  // Obtener couriers activos\r\n  const { data: couriers } = await supabase\r\n    .from('couriers')\r\n    .select('id')\r\n    .eq('is_active', true);\r\n\r\n  const active_couriers = couriers?.length || 0;\r\n\r\n  return {\r\n    total_shipments,\r\n    pending_shipments,\r\n    in_transit_shipments,\r\n    delivered_shipments,\r\n    exception_shipments,\r\n    average_delivery_time: Math.round(average_delivery_time * 10) / 10,\r\n    on_time_delivery_rate: Math.round(on_time_delivery_rate * 10) / 10,\r\n    total_shipping_cost: Math.round(total_shipping_cost * 100) / 100,\r\n    active_couriers\r\n  };\r\n}\r\n\r\nasync function getRecentShipments(supabase: ReturnType<typeof createClient<Database>>): Promise<Shipment[]> {\r\n  // Obtener órdenes reales con información de envío\r\n  const { data: orders, error } = await supabase\r\n    .from('orders')\r\n    .select(`\r\n      id,\r\n      order_number,\r\n      status,\r\n      fulfillment_status,\r\n      total,\r\n      shipping_address,\r\n      tracking_number,\r\n      carrier,\r\n      estimated_delivery,\r\n      created_at,\r\n      updated_at\r\n    `)\r\n    .order('created_at', { ascending: false })\r\n    .limit(10);\r\n\r\n  if (error) {throw error;}\r\n\r\n  // Obtener couriers para mapear nombres\r\n  const { data: couriers } = await supabase\r\n    .from('couriers')\r\n    .select('id, name, code');\r\n\r\n  const courierMap = new Map(couriers?.map(c => [c.code, c]) || []);\r\n\r\n  // Transformar órdenes a formato de envíos\r\n  return (orders || []).map((order, index) => {\r\n    const shippingAddr = order.shipping_address || {};\r\n    const courierCode = order.carrier || 'CORREO_AR';\r\n    const courier = courierMap.get(courierCode) || { id: '68cbf83e-a5bd-413b-bf44-9138e29fa870', name: 'Correo Argentino', code: 'CORREO_AR' };\r\n\r\n    // Mapear estado de orden a estado de envío\r\n    let shipmentStatus = 'pending';\r\n    if (order.status === 'shipped') shipmentStatus = 'in_transit';\r\n    else if (order.status === 'delivered') shipmentStatus = 'delivered';\r\n    else if (order.status === 'paid') shipmentStatus = 'confirmed';\r\n\r\n    return {\r\n      id: `order-${order.id}`,\r\n      shipment_number: order.tracking_number || `TRK${String(order.id).padStart(8, '0')}`,\r\n      order_id: order.id,\r\n      status: shipmentStatus,\r\n      courier_id: courier.id,\r\n      tracking_number: order.tracking_number || `TRK${String(order.id).padStart(8, '0')}`,\r\n      recipient_name: shippingAddr.name || 'Cliente',\r\n      recipient_address: shippingAddr.street || shippingAddr.street_name || 'Dirección no especificada',\r\n      recipient_city: shippingAddr.city || shippingAddr.city_name || 'Buenos Aires',\r\n      recipient_postal_code: shippingAddr.postal_code || shippingAddr.zip_code || '1000',\r\n      recipient_country: shippingAddr.country || 'Argentina',\r\n      package_weight_kg: 2.5, // Peso estimado\r\n      package_value: parseFloat(order.total),\r\n      shipping_cost: parseFloat(order.total) * 0.1, // 10% del total como costo de envío\r\n      total_cost: parseFloat(order.total) * 0.1,\r\n      estimated_delivery_date: order.estimated_delivery,\r\n      created_at: order.created_at,\r\n      updated_at: order.updated_at,\r\n      carrier: courier,\r\n      delivery_address: {\r\n        street: shippingAddr.street || shippingAddr.street_name || 'Dirección no especificada',\r\n        number: shippingAddr.street_number || '',\r\n        neighborhood: '',\r\n        city: shippingAddr.city || shippingAddr.city_name || 'Buenos Aires',\r\n        state: shippingAddr.state || shippingAddr.state_name || 'Buenos Aires',\r\n        postal_code: shippingAddr.postal_code || shippingAddr.zip_code || '1000',\r\n        country: shippingAddr.country || 'Argentina'\r\n      },\r\n      weight_kg: 2.5\r\n    };\r\n  });\r\n}\r\n\r\nasync function getLogisticsAlerts(supabase: ReturnType<typeof createClient<Database>>): Promise<LogisticsAlert[]> {\r\n  const alerts: LogisticsAlert[] = [];\r\n\r\n  // Alertas por órdenes pendientes de envío (más de 2 días)\r\n  const twoDaysAgo = new Date();\r\n  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\r\n\r\n  const { data: pendingOrders } = await supabase\r\n    .from('orders')\r\n    .select('id, order_number, status, created_at')\r\n    .eq('status', 'paid')\r\n    .eq('fulfillment_status', 'unfulfilled')\r\n    .lt('created_at', twoDaysAgo.toISOString());\r\n\r\n  pendingOrders?.forEach(order => {\r\n    alerts.push({\r\n      id: `pending-${order.id}`,\r\n      type: 'warning',\r\n      title: 'Orden pendiente de envío',\r\n      description: `La orden ${order.order_number || order.id} lleva más de 2 días sin enviar`,\r\n      shipment_id: `order-${order.id}`,\r\n      created_at: new Date().toISOString(),\r\n      is_read: false,\r\n      action_url: `/admin/orders/${order.id}`\r\n    });\r\n  });\r\n\r\n  // Alertas por órdenes sin dirección de envío\r\n  const { data: ordersWithoutAddress } = await supabase\r\n    .from('orders')\r\n    .select('id, order_number, status')\r\n    .eq('status', 'paid')\r\n    .is('shipping_address', null);\r\n\r\n  ordersWithoutAddress?.forEach(order => {\r\n    alerts.push({\r\n      id: `no-address-${order.id}`,\r\n      type: 'error',\r\n      title: 'Orden sin dirección de envío',\r\n      description: `La orden ${order.order_number || order.id} no tiene dirección de envío`,\r\n      shipment_id: `order-${order.id}`,\r\n      created_at: new Date().toISOString(),\r\n      is_read: false,\r\n      action_url: `/admin/orders/${order.id}`\r\n    });\r\n  });\r\n\r\n  return alerts;\r\n}\r\n\r\nasync function getPerformanceMetrics(supabase: ReturnType<typeof createClient<Database>>): Promise<PerformanceMetric[]> {\r\n  // Obtener métricas basadas en órdenes reales de los últimos 30 días\r\n  const thirtyDaysAgo = new Date();\r\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n\r\n  const { data: orders } = await supabase\r\n    .from('orders')\r\n    .select('created_at, status, total, updated_at')\r\n    .gte('created_at', thirtyDaysAgo.toISOString());\r\n\r\n  // Agrupar por día\r\n  const dailyMetrics: Record<string, PerformanceMetric> = {};\r\n\r\n  orders?.forEach(order => {\r\n    const date = order.created_at.split('T')[0];\r\n\r\n    if (!dailyMetrics[date]) {\r\n      dailyMetrics[date] = {\r\n        date,\r\n        shipments_count: 0,\r\n        delivered_count: 0,\r\n        on_time_count: 0,\r\n        average_delivery_time: 0,\r\n        total_cost: 0\r\n      };\r\n    }\r\n\r\n    dailyMetrics[date].shipments_count++;\r\n    dailyMetrics[date].total_cost += parseFloat(order.total) * 0.1; // 10% como costo de envío\r\n\r\n    if (order.status === 'delivered') {\r\n      dailyMetrics[date].delivered_count++;\r\n      dailyMetrics[date].on_time_count++; // Asumir que las entregas son a tiempo\r\n    }\r\n  });\r\n\r\n  return Object.values(dailyMetrics).sort((a, b) => a.date.localeCompare(b.date));\r\n}\r\n\r\nasync function getCarrierPerformance(supabase: ReturnType<typeof createClient<Database>>): Promise<CarrierPerformance[]> {\r\n  // Obtener órdenes reales y couriers\r\n  const { data: orders } = await supabase\r\n    .from('orders')\r\n    .select('id, status, total, carrier, created_at');\r\n\r\n  const { data: couriers } = await supabase\r\n    .from('couriers')\r\n    .select('id, name, code')\r\n    .eq('is_active', true);\r\n\r\n  // Crear mapa de couriers\r\n  const courierMap = new Map(couriers?.map(c => [c.code, c]) || []);\r\n\r\n  // Agrupar por courier (usar Correo Argentino como default)\r\n  const carrierStats: Record<string, CarrierPerformance> = {};\r\n\r\n  orders?.forEach(order => {\r\n    const carrierCode = order.carrier || 'CORREO_AR';\r\n    const courier = courierMap.get(carrierCode) || {\r\n      id: '68cbf83e-a5bd-413b-bf44-9138e29fa870',\r\n      name: 'Correo Argentino',\r\n      code: 'CORREO_AR'\r\n    };\r\n\r\n    if (!carrierStats[courier.id]) {\r\n      carrierStats[courier.id] = {\r\n        carrier_id: courier.id,\r\n        carrier_name: courier.name,\r\n        total_shipments: 0,\r\n        delivered_shipments: 0,\r\n        on_time_deliveries: 0,\r\n        on_time_rate: 0,\r\n        average_delivery_time: 3.5,\r\n        total_cost: 0,\r\n        average_cost_per_shipment: 0\r\n      };\r\n    }\r\n\r\n    const stats = carrierStats[courier.id];\r\n    stats.total_shipments++;\r\n    stats.total_cost += parseFloat(order.total) * 0.1; // 10% como costo de envío\r\n\r\n    if (order.status === 'delivered') {\r\n      stats.delivered_shipments++;\r\n      stats.on_time_deliveries++; // Asumir entregas a tiempo\r\n    }\r\n  });\r\n\r\n  // Calcular métricas finales\r\n  Object.values(carrierStats).forEach(stats => {\r\n    stats.on_time_rate = stats.delivered_shipments > 0\r\n      ? (stats.on_time_deliveries / stats.delivered_shipments) * 100\r\n      : 100; // 100% si no hay entregas aún\r\n    stats.average_cost_per_shipment = stats.total_shipments > 0\r\n      ? stats.total_cost / stats.total_shipments\r\n      : 0;\r\n  });\r\n\r\n  return Object.values(carrierStats).filter(stats => stats.total_shipments > 0);\r\n}\r\n\r\n// =====================================================\r\n// ENDPOINT PRINCIPAL\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Obtener todos los datos en paralelo para mejor performance usando cliente admin\r\n    const [stats, recentShipments, alerts, performanceMetrics, carrierPerformance] =\r\n      await Promise.all([\r\n        getLogisticsStats(supabaseAdmin),\r\n        getRecentShipments(supabaseAdmin),\r\n        getLogisticsAlerts(supabaseAdmin),\r\n        getPerformanceMetrics(supabaseAdmin),\r\n        getCarrierPerformance(supabaseAdmin)\r\n      ]);\r\n    \r\n    const response: LogisticsDashboardResponse = {\r\n      data: {\r\n        stats,\r\n        recent_shipments: recentShipments,\r\n        alerts,\r\n        performance_metrics: performanceMetrics,\r\n        carrier_performance: carrierPerformance\r\n      }\r\n    };\r\n    \r\n    return NextResponse.json(response, {\r\n      headers: {\r\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n        'Pragma': 'no-cache',\r\n        'Expires': '0'\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error in logistics dashboard API:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}