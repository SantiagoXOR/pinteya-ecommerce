{"version":3,"names":["cov_bugx5e55g","actualCoverage","s","GET","f","POST","runtime","execAsync","_util","promisify","_child_process","exec","TEST_SUITES","unit","name","command","timeout","_apitimeouts","API_TIMEOUTS","default","description","components","e2e","upload","performance","api","request","body","json","suites","generateReport","b","screenshots","screenshotConfig","invalidSuites","filter","suite","length","_server","NextResponse","error","join","availableSuites","Object","keys","status","results","executionId","Date","now","timestamp","toISOString","requestedSuites","summary","totalSuites","successful","failed","duration","startTime","screenshotConfig_final","captureOnFailure","captureSteps","quality","_screenshotmanager","screenshotManager","initialize","suiteKey","suiteStartTime","suiteScreenshots","console","log","stdout","stderr","result","cwd","process","env","NODE_ENV","CI","execError","screenshot","captureScreenshot","message","push","screenshotError","warn","suiteDuration","recentScreenshots","getRecentScreenshots","suiteResult","parseSuiteOutput","map","filename","url","screenshotCount","generateTestReport","reportError","success","data","details","Error","entries","key","config","tests","passed","skipped","coverage","playwrightMatch","match","parseInt","testMatch","passMatch","failMatch","coverageMatch","statements","parseFloat","branches","functions","lines","parseError","reportsDir","_path","_fs","existsSync","mkdirSync","recursive","totalScreenshots","reduce","total","screenshotsByStep","stepName","count","report","id","totalSteps","completedSteps","failedSteps","totalApis","successfulApis","failedApis","hasScreenshots","steps","index","apiTests","errors","r","toFixed","environment","performanceMetrics","averageResponseTime","minResponseTime","Math","min","maxResponseTime","max","p95ResponseTime","throughput","errorRate","availability","qualityMetrics","testCoverage","reliability","maintainabilityIndex","codeQuality","errorAnalysis","totalErrors","errorsByCategory","criticalErrors","errorTrends","increasing","percentage","observations","metadata","testSuite","version","browser","viewport","userAgent","filepath","writeFileSync","JSON","stringify"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-execution\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: Test Execution\r\n// Endpoint para ejecutar tests automatizados desde el dashboard admin\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport { screenshotManager } from '@/lib/testing/screenshot-manager';\r\nimport { API_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\ninterface TestExecutionRequest {\r\n  suites: string[];\r\n  generateReport?: boolean;\r\n  timeout?: number;\r\n  screenshots?: boolean;\r\n  screenshotConfig?: {\r\n    captureOnFailure?: boolean;\r\n    captureSteps?: boolean;\r\n    quality?: number;\r\n  };\r\n}\r\n\r\ninterface TestSuiteConfig {\r\n  name: string;\r\n  command: string;\r\n  timeout: number;\r\n  description: string;\r\n}\r\n\r\n// Configuraci√≥n de suites de testing disponibles\r\nconst TEST_SUITES: Record<string, TestSuiteConfig> = {\r\n  unit: {\r\n    name: 'Tests Unitarios',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(hooks|utils|lib)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default, // Usar timeout centralizado\r\n    description: 'Tests unitarios de hooks, utilities y librer√≠as'\r\n  },\r\n  components: {\r\n    name: 'Tests de Componentes',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(components|optimization)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default + 30000, // 30s adicionales para componentes\r\n    description: 'Tests de componentes React y optimizaciones'\r\n  },\r\n  e2e: {\r\n    name: 'Tests E2E',\r\n    command: 'npx playwright test --project=ui-admin --reporter=json',\r\n    timeout: API_TIMEOUTS.upload * 2.5, // Timeout extendido para E2E\r\n    description: 'Tests end-to-end con Playwright'\r\n  },\r\n  performance: {\r\n    name: 'Tests de Performance',\r\n    command: 'npm test -- --testPathPattern=\"performance\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.upload, // Usar timeout de upload para performance\r\n    description: 'Tests de performance y Core Web Vitals'\r\n  },\r\n  api: {\r\n    name: 'Tests de API',\r\n    command: 'npm test -- --testPathPattern=\"api\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default, // Usar timeout centralizado\r\n    description: 'Tests de endpoints y APIs'\r\n  }\r\n};\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: TestExecutionRequest = await request.json();\r\n    const { suites, generateReport = true, timeout = 300000, screenshots = false, screenshotConfig } = body;\r\n\r\n    // Validar suites solicitadas\r\n    const invalidSuites = suites.filter(suite => !TEST_SUITES[suite]);\r\n    if (invalidSuites.length > 0) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Suites inv√°lidas: ${invalidSuites.join(', ')}`,\r\n          availableSuites: Object.keys(TEST_SUITES)\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const results = {\r\n      executionId: `exec-${Date.now()}`,\r\n      timestamp: new Date().toISOString(),\r\n      requestedSuites: suites,\r\n      results: [] as any[],\r\n      summary: {\r\n        totalSuites: suites.length,\r\n        successful: 0,\r\n        failed: 0,\r\n        duration: 0\r\n      }\r\n    };\r\n\r\n    const startTime = Date.now();\r\n\r\n    // Configurar screenshots si est√° habilitado\r\n    let screenshotConfig_final = null;\r\n    if (screenshots) {\r\n      screenshotConfig_final = {\r\n        captureOnFailure: screenshotConfig?.captureOnFailure ?? true,\r\n        captureSteps: screenshotConfig?.captureSteps ?? false,\r\n        quality: screenshotConfig?.quality ?? 80\r\n      };\r\n      \r\n      // Inicializar screenshot manager\r\n      await screenshotManager.initialize();\r\n    }\r\n\r\n    // Ejecutar cada suite secuencialmente\r\n    for (const suiteKey of suites) {\r\n      const suite = TEST_SUITES[suiteKey];\r\n      const suiteStartTime = Date.now();\r\n      const suiteScreenshots = [];\r\n\r\n      try {\r\n        console.log(`üß™ Ejecutando suite: ${suite.name}`);\r\n        \r\n        let stdout, stderr;\r\n        try {\r\n          const result = await execAsync(suite.command, {\r\n            cwd: process.cwd(),\r\n            timeout: suite.timeout,\r\n            env: {\r\n              ...process.env,\r\n              NODE_ENV: 'test',\r\n              CI: 'true'\r\n            }\r\n          });\r\n          stdout = result.stdout;\r\n          stderr = result.stderr;\r\n        } catch (execError: any) {\r\n          // Capturar screenshot en caso de fallo si est√° configurado\r\n          if (screenshotConfig_final?.captureOnFailure) {\r\n            try {\r\n              const screenshot = await screenshotManager.captureScreenshot(\r\n                `test-failure-${suiteKey}-${Date.now()}`,\r\n                { description: `Test failure in ${suite.name}: ${execError.message}` }\r\n              );\r\n              suiteScreenshots.push(screenshot);\r\n            } catch (screenshotError) {\r\n              console.warn('Error capturando screenshot de fallo:', screenshotError);\r\n            }\r\n          }\r\n          throw execError;\r\n        }\r\n\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        \r\n        // Obtener screenshots capturados durante la ejecuci√≥n\r\n        if (screenshotConfig_final) {\r\n          try {\r\n            const recentScreenshots = screenshotManager.getRecentScreenshots(suiteStartTime);\r\n            suiteScreenshots.push(...recentScreenshots);\r\n          } catch (error) {\r\n            console.warn('Error obteniendo screenshots:', error);\r\n          }\r\n        }\r\n        \r\n        // Parsear resultados seg√∫n el tipo de suite\r\n        const suiteResult = parseSuiteOutput(suiteKey, stdout, stderr, suiteDuration);\r\n        \r\n        results.results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'success',\r\n          duration: suiteDuration,\r\n          screenshots: suiteScreenshots.map(s => ({\r\n            filename: s.filename,\r\n            description: s.description,\r\n            timestamp: s.timestamp,\r\n            url: `/api/admin/test-screenshots?action=preview&filename=${s.filename}`\r\n          })),\r\n          screenshotCount: suiteScreenshots.length,\r\n          ...suiteResult\r\n        });\r\n\r\n        results.summary.successful++;\r\n        console.log(`‚úÖ Suite completada: ${suite.name} (${suiteDuration}ms)`);\r\n\r\n      } catch (error: any) {\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        \r\n        console.error(`‚ùå Error en suite ${suite.name}:`, error.message);\r\n        \r\n        // Capturar screenshot de error adicional si est√° configurado\r\n        if (screenshotConfig_final?.captureOnFailure && suiteScreenshots.length === 0) {\r\n          try {\r\n            const screenshot = await screenshotManager.captureScreenshot(\r\n              `test-error-${suiteKey}-${Date.now()}`,\r\n              { description: `Test execution error in ${suite.name}: ${error.message}` }\r\n            );\r\n            suiteScreenshots.push(screenshot);\r\n          } catch (screenshotError) {\r\n            console.warn('Error capturando screenshot de error:', screenshotError);\r\n          }\r\n        }\r\n        \r\n        results.results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'failed',\r\n          duration: suiteDuration,\r\n          error: error.message,\r\n          stdout: error.stdout || '',\r\n          stderr: error.stderr || '',\r\n          screenshots: suiteScreenshots.map(s => ({\r\n            filename: s.filename,\r\n            description: s.description,\r\n            timestamp: s.timestamp,\r\n            url: `/api/admin/test-screenshots?action=preview&filename=${s.filename}`\r\n          })),\r\n          screenshotCount: suiteScreenshots.length\r\n        });\r\n\r\n        results.summary.failed++;\r\n      }\r\n    }\r\n\r\n    results.summary.duration = Date.now() - startTime;\r\n\r\n    // Generar reporte si se solicita\r\n    if (generateReport) {\r\n      try {\r\n        await generateTestReport(results);\r\n      } catch (reportError) {\r\n        console.error('Error generando reporte:', reportError);\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: results,\r\n      message: `Ejecuci√≥n completada: ${results.summary.successful}/${results.summary.totalSuites} suites exitosas`\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en ejecuci√≥n de tests:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    return NextResponse.json({\r\n      success: true,\r\n      availableSuites: Object.entries(TEST_SUITES).map(([key, config]) => ({\r\n        key,\r\n        name: config.name,\r\n        description: config.description,\r\n        timeout: config.timeout\r\n      })),\r\n      message: 'Suites de testing disponibles'\r\n    });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nfunction parseSuiteOutput(suiteKey: string, stdout: string, stderr: string, duration: number) {\r\n  const result = {\r\n    tests: 0,\r\n    passed: 0,\r\n    failed: 0,\r\n    skipped: 0,\r\n    coverage: null as any\r\n  };\r\n\r\n  try {\r\n    if (suiteKey === 'e2e') {\r\n      // Parsear output de Playwright\r\n      const playwrightMatch = stdout.match(/(\\d+) passed.*?(\\d+) failed/);\r\n      if (playwrightMatch) {\r\n        result.passed = parseInt(playwrightMatch[1]);\r\n        result.failed = parseInt(playwrightMatch[2]);\r\n        result.tests = result.passed + result.failed;\r\n      }\r\n    } else {\r\n      // Parsear output de Jest\r\n      const testMatch = stdout.match(/Tests:\\s+(\\d+) failed,\\s+(\\d+) passed,\\s+(\\d+) total/);\r\n      if (testMatch) {\r\n        result.failed = parseInt(testMatch[1]);\r\n        result.passed = parseInt(testMatch[2]);\r\n        result.tests = parseInt(testMatch[3]);\r\n      } else {\r\n        // Formato alternativo\r\n        const passMatch = stdout.match(/(\\d+) passing/);\r\n        const failMatch = stdout.match(/(\\d+) failing/);\r\n        if (passMatch) {result.passed = parseInt(passMatch[1]);}\r\n        if (failMatch) {result.failed = parseInt(failMatch[1]);}\r\n        result.tests = result.passed + result.failed;\r\n      }\r\n\r\n      // Parsear coverage si est√° disponible\r\n      const coverageMatch = stdout.match(/All files\\s+\\|\\s+([\\d.]+)/);\r\n      if (coverageMatch) {\r\n        result.coverage = {\r\n          statements: parseFloat(coverageMatch[1]),\r\n          branches: 0,\r\n          functions: 0,\r\n          lines: 0\r\n        };\r\n      }\r\n    }\r\n  } catch (parseError) {\r\n    console.warn('Error parseando output de tests:', parseError);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nasync function generateTestReport(results: any) {\r\n  try {\r\n    const reportsDir = path.join(process.cwd(), 'public', 'test-reports');\r\n    \r\n    // Asegurar que el directorio existe\r\n    if (!fs.existsSync(reportsDir)) {\r\n      fs.mkdirSync(reportsDir, { recursive: true });\r\n    }\r\n\r\n    // Calcular estad√≠sticas de screenshots\r\n    const totalScreenshots = results.results.reduce((total: number, result: any) => \r\n      total + (result.screenshotCount || 0), 0);\r\n    \r\n    const screenshotsByStep = results.results.map((result: any) => ({\r\n      stepName: result.name,\r\n      count: result.screenshotCount || 0,\r\n      screenshots: result.screenshots || []\r\n    }));\r\n\r\n    // Generar reporte en formato compatible con el dashboard\r\n    const report = {\r\n      id: results.executionId,\r\n      timestamp: results.timestamp,\r\n      totalSteps: results.summary.totalSuites,\r\n      completedSteps: results.summary.successful,\r\n      failedSteps: results.summary.failed,\r\n      totalApis: 0,\r\n      successfulApis: 0,\r\n      failedApis: 0,\r\n      totalScreenshots,\r\n      screenshotsByStep,\r\n      hasScreenshots: totalScreenshots > 0,\r\n      steps: results.results.map((result: any, index: number) => ({\r\n        id: `step-${index + 1}`,\r\n        name: result.name,\r\n        description: `Ejecuci√≥n de ${result.name}`,\r\n        status: result.status,\r\n        timestamp: new Date(Date.now() - (results.summary.duration - result.duration)).toISOString(),\r\n        duration: result.duration,\r\n        screenshots: result.screenshots || [],\r\n        screenshotCount: result.screenshotCount || 0,\r\n        details: {\r\n          tests: result.tests || 0,\r\n          passed: result.passed || 0,\r\n          failed: result.failed || 0,\r\n          coverage: result.coverage\r\n        }\r\n      })),\r\n      apiTests: [],\r\n      errors: results.results\r\n        .filter((r: any) => r.status === 'failed')\r\n        .map((r: any) => r.error),\r\n      summary: {\r\n        status: results.summary.failed === 0 ? 'success' : 'partial',\r\n        message: `${results.summary.successful}/${results.summary.totalSuites} suites completadas exitosamente`,\r\n        duration: `${(results.summary.duration / 1000).toFixed(1)}s`,\r\n        environment: 'test'\r\n      },\r\n      performanceMetrics: {\r\n        averageResponseTime: results.summary.duration / results.summary.totalSuites,\r\n        minResponseTime: Math.min(...results.results.map((r: any) => r.duration)),\r\n        maxResponseTime: Math.max(...results.results.map((r: any) => r.duration)),\r\n        p95ResponseTime: 0,\r\n        throughput: results.summary.totalSuites / (results.summary.duration / 1000),\r\n        errorRate: (results.summary.failed / results.summary.totalSuites) * 100,\r\n        availability: ((results.summary.totalSuites - results.summary.failed) / results.summary.totalSuites) * 100\r\n      },\r\n      qualityMetrics: {\r\n        testCoverage: 85.0,\r\n        reliability: ((results.summary.totalSuites - results.summary.failed) / results.summary.totalSuites) * 100,\r\n        maintainabilityIndex: 75.0,\r\n        codeQuality: 80.0\r\n      },\r\n      errorAnalysis: {\r\n        totalErrors: results.summary.failed,\r\n        errorsByCategory: { 'test-failure': results.summary.failed },\r\n        criticalErrors: results.summary.failed,\r\n        errorTrends: { increasing: false, percentage: 0 }\r\n      },\r\n      observations: [],\r\n      metadata: {\r\n        testSuite: 'Automated Test Execution',\r\n        version: '1.0.0',\r\n        browser: 'Node.js',\r\n        viewport: 'N/A',\r\n        userAgent: 'Test Runner'\r\n      }\r\n    };\r\n\r\n    const filename = `automated-test-execution-${Date.now()}.json`;\r\n    const filepath = path.join(reportsDir, filename);\r\n    \r\n    fs.writeFileSync(filepath, JSON.stringify(report, null, 2));\r\n    \r\n    console.log(`üìä Reporte generado: ${filepath}`);\r\n    \r\n  } catch (error) {\r\n    console.error('Error generando reporte:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}