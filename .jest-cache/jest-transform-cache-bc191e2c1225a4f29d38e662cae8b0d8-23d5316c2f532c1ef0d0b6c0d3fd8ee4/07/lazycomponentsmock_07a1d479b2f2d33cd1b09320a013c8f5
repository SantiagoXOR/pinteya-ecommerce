b593b0d18fce2dc982cde00edf703a16
// ===================================
// PINTEYA E-COMMERCE - LAZY COMPONENTS MOCKS
// Mocks para componentes lazy loading en tests
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get checkLoadingStates () {
        return checkLoadingStates;
    },
    get createFailingMockDynamicImport () {
        return createFailingMockDynamicImport;
    },
    get createMockDynamicImport () {
        return createMockDynamicImport;
    },
    get // ===================================
    // EXPORT DEFAULT
    // ===================================
    default () {
        return _default;
    },
    get mockAdminPageModule () {
        return mockAdminPageModule;
    },
    get mockLazy () {
        return mockLazy;
    },
    get mockLogisticsMapModule () {
        return mockLogisticsMapModule;
    },
    get mockProductFormModule () {
        return mockProductFormModule;
    },
    get mockProductListModule () {
        return mockProductListModule;
    },
    get mockRealTimeDashboardModule () {
        return mockRealTimeDashboardModule;
    },
    get mockSuspense () {
        return mockSuspense;
    },
    get setupFailingLazyMocks () {
        return setupFailingLazyMocks;
    },
    get setupSuccessfulLazyMocks () {
        return setupSuccessfulLazyMocks;
    },
    get simulateLoadingTime () {
        return simulateLoadingTime;
    },
    get waitForLazyComponent () {
        return waitForLazyComponent;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ===================================
// MOCK COMPONENTS
// ===================================
// Mock de componente admin dashboard
const MockAdminDashboard = /*#__PURE__*/ _react.default.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        "data-testid": "mock-admin-dashboard",
        ...props,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Mock Admin Dashboard"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Dashboard content loaded"
            })
        ]
    }));
MockAdminDashboard.displayName = 'MockAdminDashboard';
// Mock de componente product list
const MockProductList = /*#__PURE__*/ _react.default.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        "data-testid": "mock-product-list",
        ...props,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "Mock Product List"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Products loaded"
            })
        ]
    }));
MockProductList.displayName = 'MockProductList';
// Mock de componente product form
const MockProductForm = /*#__PURE__*/ _react.default.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        "data-testid": "mock-product-form",
        ...props,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "Mock Product Form"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
                children: "Form loaded"
            })
        ]
    }));
MockProductForm.displayName = 'MockProductForm';
// Mock de componente logistics map
const MockLogisticsMap = /*#__PURE__*/ _react.default.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        "data-testid": "mock-logistics-map",
        ...props,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "Mock Logistics Map"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Map loaded"
            })
        ]
    }));
MockLogisticsMap.displayName = 'MockLogisticsMap';
// Mock de componente real time dashboard
const MockRealTimeDashboard = /*#__PURE__*/ _react.default.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        "data-testid": "mock-realtime-dashboard",
        ...props,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "Mock Real Time Dashboard"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Real time data loaded"
            })
        ]
    }));
MockRealTimeDashboard.displayName = 'MockRealTimeDashboard';
const mockLazy = _globals.jest.fn((importFn)=>{
    return /*#__PURE__*/ _react.default.forwardRef((props, ref)=>{
        const [Component, setComponent] = _react.default.useState(null);
        const [loading, setLoading] = _react.default.useState(true);
        const [error, setError] = _react.default.useState(null);
        _react.default.useEffect(()=>{
            importFn().then((module)=>{
                setComponent(()=>module.default || module);
                setLoading(false);
            }).catch((err)=>{
                setError(err);
                setLoading(false);
            });
        }, []);
        if (loading) {
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'lazy-loading',
                children: 'Loading...'
            });
        }
        if (error) {
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'lazy-error',
                children: `Error: ${error.message}`
            });
        }
        if (Component) {
            return /*#__PURE__*/ _react.default.createElement(Component, {
                ...props,
                ref
            });
        }
        return null;
    });
});
const mockSuspense = _globals.jest.fn(({ children, fallback })=>{
    return /*#__PURE__*/ _react.default.createElement('div', {
        'data-testid': 'suspense-boundary',
        children: [
            /*#__PURE__*/ _react.default.createElement('div', {
                key: 'fallback',
                'data-testid': 'suspense-fallback',
                children: fallback
            }),
            /*#__PURE__*/ _react.default.createElement('div', {
                key: 'content',
                'data-testid': 'suspense-content',
                children
            })
        ]
    });
});
const mockAdminPageModule = {
    default: MockAdminDashboard,
    AdminPage: MockAdminDashboard
};
const mockProductListModule = {
    default: MockProductList,
    ProductList: MockProductList
};
const mockProductFormModule = {
    default: MockProductForm,
    ProductForm: MockProductForm
};
const mockLogisticsMapModule = {
    default: MockLogisticsMap,
    LogisticsMap: MockLogisticsMap
};
const mockRealTimeDashboardModule = {
    default: MockRealTimeDashboard,
    RealTimeDashboard: MockRealTimeDashboard
};
const createMockDynamicImport = (component, delay = 100)=>{
    return _globals.jest.fn(()=>new Promise((resolve)=>{
            setTimeout(()=>{
                resolve({
                    default: component
                });
            }, delay);
        }));
};
const createFailingMockDynamicImport = (errorMessage = 'Failed to load component')=>{
    return _globals.jest.fn(()=>new Promise((_, reject)=>{
            setTimeout(()=>{
                reject(new Error(errorMessage));
            }, 100);
        }));
};
const setupSuccessfulLazyMocks = ()=>{
    // Mock de dynamic imports
    _globals.jest.doMock('@/app/admin/page', ()=>mockAdminPageModule);
    _globals.jest.doMock('@/components/admin/products/ProductList', ()=>mockProductListModule);
    _globals.jest.doMock('@/components/admin/products/ProductForm', ()=>mockProductFormModule);
    _globals.jest.doMock('@/components/admin/logistics/LogisticsMap', ()=>mockLogisticsMapModule);
    _globals.jest.doMock('@/components/admin/logistics/RealTimeDashboard', ()=>mockRealTimeDashboardModule);
    // Mock de React.lazy
    const originalLazy = _react.default.lazy;
    _react.default.lazy = mockLazy;
    // Mock de React.Suspense
    const originalSuspense = _react.default.Suspense;
    _react.default.Suspense = mockSuspense;
    return ()=>{
        // Cleanup function
        _react.default.lazy = originalLazy;
        _react.default.Suspense = originalSuspense;
        _globals.jest.dontMock('@/app/admin/page');
        _globals.jest.dontMock('@/components/admin/products/ProductList');
        _globals.jest.dontMock('@/components/admin/products/ProductForm');
        _globals.jest.dontMock('@/components/admin/logistics/LogisticsMap');
        _globals.jest.dontMock('@/components/admin/logistics/RealTimeDashboard');
    };
};
const setupFailingLazyMocks = ()=>{
    // Mock de dynamic imports que fallan
    _globals.jest.doMock('@/app/admin/page', ()=>{
        throw new Error('Failed to load admin page');
    });
    _globals.jest.doMock('@/components/admin/products/ProductList', ()=>{
        throw new Error('Failed to load product list');
    });
    const originalLazy = _react.default.lazy;
    _react.default.lazy = _globals.jest.fn((importFn)=>{
        return /*#__PURE__*/ _react.default.forwardRef((props, ref)=>{
            _react.default.useEffect(()=>{
                importFn().catch(()=>{
                // Error serÃ¡ manejado por error boundary
                });
            }, []);
            throw new Error('Component failed to load');
        });
    });
    return ()=>{
        _react.default.lazy = originalLazy;
        _globals.jest.dontMock('@/app/admin/page');
        _globals.jest.dontMock('@/components/admin/products/ProductList');
    };
};
const simulateLoadingTime = (ms)=>{
    return new Promise((resolve)=>setTimeout(resolve, ms));
};
const waitForLazyComponent = async (testId, timeout = 5000)=>{
    const startTime = Date.now();
    while(Date.now() - startTime < timeout){
        const element = document.querySelector(`[data-testid="${testId}"]`);
        if (element) {
            return element;
        }
        await simulateLoadingTime(100);
    }
    throw new Error(`Lazy component with testId "${testId}" did not load within ${timeout}ms`);
};
const checkLoadingStates = ()=>{
    const loadingElements = document.querySelectorAll('[data-testid="lazy-loading"]');
    const errorElements = document.querySelectorAll('[data-testid="lazy-error"]');
    const suspenseElements = document.querySelectorAll('[data-testid="suspense-boundary"]');
    return {
        loading: loadingElements.length,
        errors: errorElements.length,
        suspense: suspenseElements.length,
        hasLoading: loadingElements.length > 0,
        hasErrors: errorElements.length > 0,
        hasSuspense: suspenseElements.length > 0
    };
};
const _default = {
    mockLazy,
    mockSuspense,
    setupSuccessfulLazyMocks,
    setupFailingLazyMocks,
    createMockDynamicImport,
    createFailingMockDynamicImport,
    simulateLoadingTime,
    waitForLazyComponent,
    checkLoadingStates,
    components: {
        MockAdminDashboard,
        MockProductList,
        MockProductForm,
        MockLogisticsMap,
        MockRealTimeDashboard
    }
};

//# sourceMappingURL=data:application/json;base64,