af3724f18a3c63aacc3beac6698765ed
// ===================================
// PINTEYA E-COMMERCE - LOGGING ESTRUCTURADO DE SEGURIDAD
// ===================================
// Sistema de logging estructurado para eventos de seguridad
// con contexto enriquecido y formato consistente
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createSecurityLogger () {
        return createSecurityLogger;
    },
    get default () {
        return _default;
    },
    get extractSecurityContext () {
        return extractSecurityContext;
    },
    get securityLog () {
        return securityLog;
    }
});
function extractSecurityContext(request, additionalContext = {}) {
    const url = new URL(request.url);
    // Extraer IP de headers
    const forwarded = request.headers.get('x-forwarded-for');
    const ip = forwarded ? forwarded.split(',')[0].trim() : request.headers.get('x-real-ip') || 'unknown';
    // Generar request ID único
    const requestId = request.headers.get('x-request-id') || `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    return {
        ip,
        userAgent: request.headers.get('user-agent') || 'unknown',
        endpoint: url.pathname,
        method: request.method,
        timestamp: new Date().toISOString(),
        requestId,
        ...additionalContext
    };
}
// ===================================
// IMPLEMENTACIÓN DEL LOGGER
// ===================================
class SecurityLoggerImpl {
    formatLogEntry(event) {
        const logEntry = {
            timestamp: event.context.timestamp,
            level: this.mapSeverityToLevel(event.severity),
            type: 'SECURITY',
            event_type: event.type,
            severity: event.severity,
            message: event.message,
            context: event.context,
            metadata: event.metadata,
            error: event.error ? {
                name: event.error.name,
                message: event.error.message,
                stack: event.error.stack
            } : undefined
        };
        return JSON.stringify(logEntry, null, process.env.NODE_ENV === 'development' ? 2 : 0);
    }
    mapSeverityToLevel(severity) {
        switch(severity){
            case 'low':
                return 'info';
            case 'medium':
                return 'warn';
            case 'high':
                return 'error';
            case 'critical':
                return 'error';
            default:
                return 'info';
        }
    }
    shouldLog(severity) {
        const logLevel = process.env.SECURITY_LOG_LEVEL || 'medium';
        const levels = {
            low: 1,
            medium: 2,
            high: 3,
            critical: 4
        };
        const currentLevel = levels[logLevel] || 2;
        const eventLevel = levels[severity];
        return eventLevel >= currentLevel;
    }
    log(event) {
        if (!this.shouldLog(event.severity)) {
            return;
        }
        const logEntry = this.formatLogEntry(event);
        // En desarrollo, usar console con colores
        if (process.env.NODE_ENV === 'development') {
            const colors = {
                low: '\x1b[36m',
                medium: '\x1b[33m',
                high: '\x1b[31m',
                critical: '\x1b[35m'
            };
            const reset = '\x1b[0m';
            const color = colors[event.severity];
            console.log(`${color}[SECURITY:${event.type.toUpperCase()}]${reset}`, logEntry);
        } else {
            // En producción, usar console.log estándar para integración con sistemas de logging
            console.log(logEntry);
        }
    // TODO: Integrar con servicio de logging externo (DataDog, LogRocket, etc.)
    // await this.sendToExternalLogger(logEntry);
    }
    logAuthAttempt(context, success, metadata) {
        this.log({
            type: success ? 'auth_success' : 'auth_failure',
            severity: success ? 'low' : 'medium',
            message: success ? `Authentication successful for ${context.userId || 'unknown user'}` : `Authentication failed for ${context.userId || 'unknown user'}`,
            context,
            metadata: {
                success,
                ...metadata
            }
        });
    }
    logRateLimitExceeded(context, metadata) {
        this.log({
            type: 'rate_limit_exceeded',
            severity: 'medium',
            message: `Rate limit exceeded for ${context.endpoint}`,
            context,
            metadata: {
                endpoint: context.endpoint,
                ip: context.ip,
                ...metadata
            }
        });
    }
    logPermissionDenied(context, resource, action) {
        this.log({
            type: 'permission_denied',
            severity: 'high',
            message: `Permission denied: ${action} on ${resource}`,
            context,
            metadata: {
                resource,
                action,
                userId: context.userId
            }
        });
    }
    logSuspiciousActivity(context, reason, metadata) {
        this.log({
            type: 'suspicious_activity',
            severity: 'high',
            message: `Suspicious activity detected: ${reason}`,
            context,
            metadata: {
                reason,
                ...metadata
            }
        });
    }
    logAdminAction(context, action, metadata) {
        this.log({
            type: 'admin_action',
            severity: 'medium',
            message: `Admin action performed: ${action}`,
            context,
            metadata: {
                action,
                adminUserId: context.userId,
                ...metadata
            }
        });
    }
    logApiError(context, error, metadata) {
        this.log({
            type: 'api_error',
            severity: 'medium',
            message: `API error in ${context.endpoint}: ${error.message}`,
            context,
            error,
            metadata
        });
    }
}
// ===================================
// INSTANCIA GLOBAL Y FACTORY
// ===================================
const globalSecurityLogger = new SecurityLoggerImpl();
function createSecurityLogger(request, additionalContext) {
    const context = request ? extractSecurityContext(request, additionalContext) : {
        endpoint: 'unknown',
        method: 'unknown',
        timestamp: new Date().toISOString(),
        ...additionalContext
    };
    return {
        context,
        log: globalSecurityLogger.log.bind(globalSecurityLogger),
        logAuthAttempt: (ctx, success, metadata)=>globalSecurityLogger.logAuthAttempt({
                ...context,
                ...ctx
            }, success, metadata),
        logRateLimitExceeded: (ctx, metadata)=>globalSecurityLogger.logRateLimitExceeded({
                ...context,
                ...ctx
            }, metadata),
        logPermissionDenied: (ctx, resource, action)=>globalSecurityLogger.logPermissionDenied({
                ...context,
                ...ctx
            }, resource, action),
        logSuspiciousActivity: (ctx, reason, metadata)=>globalSecurityLogger.logSuspiciousActivity({
                ...context,
                ...ctx
            }, reason, metadata),
        logAdminAction: (ctx, action, metadata)=>globalSecurityLogger.logAdminAction({
                ...context,
                ...ctx
            }, action, metadata),
        logApiError: (ctx, error, metadata)=>globalSecurityLogger.logApiError({
                ...context,
                ...ctx
            }, error, metadata)
    };
}
const securityLog = {
    info: (message, context = {})=>{
        globalSecurityLogger.log({
            type: 'security_scan',
            severity: 'low',
            message,
            context: {
                endpoint: 'system',
                method: 'SYSTEM',
                timestamp: new Date().toISOString(),
                ...context
            }
        });
    },
    warn: (message, context = {})=>{
        globalSecurityLogger.log({
            type: 'suspicious_activity',
            severity: 'medium',
            message,
            context: {
                endpoint: 'system',
                method: 'SYSTEM',
                timestamp: new Date().toISOString(),
                ...context
            }
        });
    },
    error: (message, error, context = {})=>{
        globalSecurityLogger.log({
            type: 'api_error',
            severity: 'high',
            message,
            error,
            context: {
                endpoint: 'system',
                method: 'SYSTEM',
                timestamp: new Date().toISOString(),
                ...context
            }
        });
    }
};
const _default = globalSecurityLogger;

//# sourceMappingURL=data:application/json;base64,