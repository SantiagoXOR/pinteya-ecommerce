{"version":3,"names":["cov_29soprssx3","actualCoverage","s","POST","f","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","request","session","_config","auth","user","b","_server","NextResponse","json","success","error","status","id","email","name","image","data","existingUser","fetchError","from","select","eq","single","code","console","userData","updatedUser","updateError","update","first_name","split","last_name","slice","join","metadata","updated_via","last_sync","Date","toISOString","updated_at","newUser","insertError","insert","role_id","is_active","created_via","source","created_at"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\sync\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para sincronizar usuarios de NextAuth.js con Supabase\r\n * POST /api/admin/users/sync\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server'\r\nimport { auth } from '@/lib/auth/config'\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n)\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth()\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    const { id, email, name, image } = await request.json()\r\n\r\n    if (!id || !email) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'ID y email son requeridos' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Buscar usuario existente en la tabla pública\r\n    const { data: existingUser, error: fetchError } = await supabase\r\n      .from('user_profiles')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single()\r\n\r\n    if (fetchError && fetchError.code !== 'PGRST116') {\r\n      console.error('Error al buscar usuario:', fetchError)\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al buscar usuario' },\r\n        { status: 500 }\r\n      )\r\n    }\r\n\r\n    let userData\r\n\r\n    if (existingUser) {\r\n      // Actualizar usuario existente\r\n      const { data: updatedUser, error: updateError } = await supabase\r\n        .from('user_profiles')\r\n        .update({\r\n          first_name: name?.split(' ')[0] || null,\r\n          last_name: name?.split(' ').slice(1).join(' ') || null,\r\n          email,\r\n          metadata: {\r\n            ...existingUser.metadata,\r\n            updated_via: 'sync_api',\r\n            last_sync: new Date().toISOString()\r\n          },\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', id)\r\n        .select('*')\r\n        .single()\r\n\r\n      if (updateError) {\r\n        console.error('Error al actualizar usuario:', updateError)\r\n        return NextResponse.json(\r\n          { success: false, error: 'Error al actualizar usuario' },\r\n          { status: 500 }\r\n        )\r\n      }\r\n\r\n      userData = updatedUser\r\n    } else {\r\n      // Crear nuevo usuario\r\n      const { data: newUser, error: insertError } = await supabase\r\n        .from('user_profiles')\r\n        .insert({\r\n          id,\r\n          first_name: name?.split(' ')[0] || null,\r\n          last_name: name?.split(' ').slice(1).join(' ') || null,\r\n          email,\r\n          role_id: null,\r\n          is_active: true,\r\n          metadata: {\r\n            created_via: 'sync_api',\r\n            source: 'nextauth',\r\n            created_at: new Date().toISOString()\r\n          },\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .select('*')\r\n        .single()\r\n\r\n      if (insertError) {\r\n        console.error('Error al crear usuario:', insertError)\r\n        return NextResponse.json(\r\n          { success: false, error: 'Error al crear usuario' },\r\n          { status: 500 }\r\n        )\r\n      }\r\n\r\n      userData = newUser\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: userData,\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Error en sincronización de usuario:', error)\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}