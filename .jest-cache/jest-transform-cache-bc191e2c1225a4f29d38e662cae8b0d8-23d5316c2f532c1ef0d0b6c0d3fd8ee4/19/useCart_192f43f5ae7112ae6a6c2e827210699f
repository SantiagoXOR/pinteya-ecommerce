32bee5b759883c38d141f3cc18be318b
// ===================================
// HOOK DEL CARRITO
// Hook completo para el carrito de compras con Redux
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useCart", {
    enumerable: true,
    get: function() {
        return useCart;
    }
});
const _store = require("../redux/store");
const _cartslice = require("../redux/features/cart-slice");
const useCart = ()=>{
    const cartItems = (0, _store.useAppSelector)((state)=>state.cartReducer.items);
    const dispatch = (0, _store.useAppDispatch)();
    // CÃ¡lculos derivados
    const cartCount = cartItems.length;
    const totalQuantity = cartItems.reduce((total, item)=>total + item.quantity, 0);
    const totalPrice = cartItems.reduce((total, item)=>total + item.price * item.quantity, 0);
    // Acciones del carrito
    const addToCart = (item)=>{
        dispatch((0, _cartslice.addItemToCart)(item));
    };
    const removeFromCart = (id)=>{
        dispatch((0, _cartslice.removeItemFromCart)(id));
    };
    const updateQuantity = (id, quantity)=>{
        if (quantity <= 0) {
            dispatch((0, _cartslice.removeItemFromCart)(id));
        } else {
            dispatch((0, _cartslice.updateCartItemQuantity)({
                id,
                quantity
            }));
        }
    };
    const clearCart = ()=>{
        dispatch((0, _cartslice.removeAllItemsFromCart)());
    };
    return {
        cartItems,
        cartCount,
        totalQuantity,
        totalPrice,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart,
        dispatch
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZUNhcnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEhPT0sgREVMIENBUlJJVE9cbi8vIEhvb2sgY29tcGxldG8gcGFyYSBlbCBjYXJyaXRvIGRlIGNvbXByYXMgY29uIFJlZHV4XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgeyB1c2VBcHBTZWxlY3RvciwgdXNlQXBwRGlzcGF0Y2ggfSBmcm9tICdAL3JlZHV4L3N0b3JlJ1xuaW1wb3J0IHtcbiAgYWRkSXRlbVRvQ2FydCxcbiAgcmVtb3ZlSXRlbUZyb21DYXJ0LFxuICB1cGRhdGVDYXJ0SXRlbVF1YW50aXR5LFxuICByZW1vdmVBbGxJdGVtc0Zyb21DYXJ0LFxuICBDYXJ0SXRlbSxcbn0gZnJvbSAnQC9yZWR1eC9mZWF0dXJlcy9jYXJ0LXNsaWNlJ1xuXG5leHBvcnQgY29uc3QgdXNlQ2FydCA9ICgpID0+IHtcbiAgY29uc3QgY2FydEl0ZW1zID0gdXNlQXBwU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY2FydFJlZHVjZXIuaXRlbXMpXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlQXBwRGlzcGF0Y2goKVxuXG4gIC8vIEPDoWxjdWxvcyBkZXJpdmFkb3NcbiAgY29uc3QgY2FydENvdW50ID0gY2FydEl0ZW1zLmxlbmd0aFxuICBjb25zdCB0b3RhbFF1YW50aXR5ID0gY2FydEl0ZW1zLnJlZHVjZSgodG90YWwsIGl0ZW0pID0+IHRvdGFsICsgaXRlbS5xdWFudGl0eSwgMClcbiAgY29uc3QgdG90YWxQcmljZSA9IGNhcnRJdGVtcy5yZWR1Y2UoKHRvdGFsLCBpdGVtKSA9PiB0b3RhbCArIGl0ZW0ucHJpY2UgKiBpdGVtLnF1YW50aXR5LCAwKVxuXG4gIC8vIEFjY2lvbmVzIGRlbCBjYXJyaXRvXG4gIGNvbnN0IGFkZFRvQ2FydCA9IChpdGVtOiBDYXJ0SXRlbSkgPT4ge1xuICAgIGRpc3BhdGNoKGFkZEl0ZW1Ub0NhcnQoaXRlbSkpXG4gIH1cblxuICBjb25zdCByZW1vdmVGcm9tQ2FydCA9IChpZDogbnVtYmVyKSA9PiB7XG4gICAgZGlzcGF0Y2gocmVtb3ZlSXRlbUZyb21DYXJ0KGlkKSlcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZVF1YW50aXR5ID0gKGlkOiBudW1iZXIsIHF1YW50aXR5OiBudW1iZXIpID0+IHtcbiAgICBpZiAocXVhbnRpdHkgPD0gMCkge1xuICAgICAgZGlzcGF0Y2gocmVtb3ZlSXRlbUZyb21DYXJ0KGlkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGF0Y2godXBkYXRlQ2FydEl0ZW1RdWFudGl0eSh7IGlkLCBxdWFudGl0eSB9KSlcbiAgICB9XG4gIH1cblxuICBjb25zdCBjbGVhckNhcnQgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2gocmVtb3ZlQWxsSXRlbXNGcm9tQ2FydCgpKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjYXJ0SXRlbXMsXG4gICAgY2FydENvdW50LFxuICAgIHRvdGFsUXVhbnRpdHksXG4gICAgdG90YWxQcmljZSxcbiAgICBhZGRUb0NhcnQsXG4gICAgcmVtb3ZlRnJvbUNhcnQsXG4gICAgdXBkYXRlUXVhbnRpdHksXG4gICAgY2xlYXJDYXJ0LFxuICAgIGRpc3BhdGNoLFxuICB9XG59XG4iXSwibmFtZXMiOlsidXNlQ2FydCIsImNhcnRJdGVtcyIsInVzZUFwcFNlbGVjdG9yIiwic3RhdGUiLCJjYXJ0UmVkdWNlciIsIml0ZW1zIiwiZGlzcGF0Y2giLCJ1c2VBcHBEaXNwYXRjaCIsImNhcnRDb3VudCIsImxlbmd0aCIsInRvdGFsUXVhbnRpdHkiLCJyZWR1Y2UiLCJ0b3RhbCIsIml0ZW0iLCJxdWFudGl0eSIsInRvdGFsUHJpY2UiLCJwcmljZSIsImFkZFRvQ2FydCIsImFkZEl0ZW1Ub0NhcnQiLCJyZW1vdmVGcm9tQ2FydCIsImlkIiwicmVtb3ZlSXRlbUZyb21DYXJ0IiwidXBkYXRlUXVhbnRpdHkiLCJ1cGRhdGVDYXJ0SXRlbVF1YW50aXR5IiwiY2xlYXJDYXJ0IiwicmVtb3ZlQWxsSXRlbXNGcm9tQ2FydCJdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBQ3RDLG1CQUFtQjtBQUNuQixxREFBcUQ7QUFDckQsc0NBQXNDOzs7OzsrQkFXekJBOzs7ZUFBQUE7Ozt1QkFUa0M7MkJBT3hDO0FBRUEsTUFBTUEsVUFBVTtJQUNyQixNQUFNQyxZQUFZQyxJQUFBQSxxQkFBYyxFQUFDQyxDQUFBQSxRQUFTQSxNQUFNQyxXQUFXLENBQUNDLEtBQUs7SUFDakUsTUFBTUMsV0FBV0MsSUFBQUEscUJBQWM7SUFFL0IscUJBQXFCO0lBQ3JCLE1BQU1DLFlBQVlQLFVBQVVRLE1BQU07SUFDbEMsTUFBTUMsZ0JBQWdCVCxVQUFVVSxNQUFNLENBQUMsQ0FBQ0MsT0FBT0MsT0FBU0QsUUFBUUMsS0FBS0MsUUFBUSxFQUFFO0lBQy9FLE1BQU1DLGFBQWFkLFVBQVVVLE1BQU0sQ0FBQyxDQUFDQyxPQUFPQyxPQUFTRCxRQUFRQyxLQUFLRyxLQUFLLEdBQUdILEtBQUtDLFFBQVEsRUFBRTtJQUV6Rix1QkFBdUI7SUFDdkIsTUFBTUcsWUFBWSxDQUFDSjtRQUNqQlAsU0FBU1ksSUFBQUEsd0JBQWEsRUFBQ0w7SUFDekI7SUFFQSxNQUFNTSxpQkFBaUIsQ0FBQ0M7UUFDdEJkLFNBQVNlLElBQUFBLDZCQUFrQixFQUFDRDtJQUM5QjtJQUVBLE1BQU1FLGlCQUFpQixDQUFDRixJQUFZTjtRQUNsQyxJQUFJQSxZQUFZLEdBQUc7WUFDakJSLFNBQVNlLElBQUFBLDZCQUFrQixFQUFDRDtRQUM5QixPQUFPO1lBQ0xkLFNBQVNpQixJQUFBQSxpQ0FBc0IsRUFBQztnQkFBRUg7Z0JBQUlOO1lBQVM7UUFDakQ7SUFDRjtJQUVBLE1BQU1VLFlBQVk7UUFDaEJsQixTQUFTbUIsSUFBQUEsaUNBQXNCO0lBQ2pDO0lBRUEsT0FBTztRQUNMeEI7UUFDQU87UUFDQUU7UUFDQUs7UUFDQUU7UUFDQUU7UUFDQUc7UUFDQUU7UUFDQWxCO0lBQ0Y7QUFDRiJ9