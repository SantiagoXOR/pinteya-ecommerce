{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useOrdersEnterprise-validation.test.js"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - VALIDATION TESTS\r\n// Pruebas específicas para validación de datos en useOrdersEnterprise\r\n// ===================================\r\n\r\nimport { renderHook, act, waitFor } from '@testing-library/react';\r\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\r\nimport { jest } from '@jest/globals';\r\nimport { useOrdersEnterprise } from '@/hooks/useOrdersEnterprise';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\nconst mockFetch = jest.fn();\r\nglobal.fetch = mockFetch;\r\n\r\nconst mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation(() => {});\r\n\r\n// Datos de prueba con valores problemáticos\r\nconst mockOrdersWithInvalidData = [\r\n  {\r\n    id: 'order-1',\r\n    order_number: 'ORD-001',\r\n    status: 'pending',\r\n    total: undefined, // Valor problemático\r\n    created_at: '2024-01-01T10:00:00Z'\r\n  },\r\n  {\r\n    id: 'order-2', \r\n    order_number: 'ORD-002',\r\n    status: 'confirmed',\r\n    total: NaN, // Valor problemático\r\n    created_at: '2024-01-02T10:00:00Z'\r\n  },\r\n  {\r\n    id: 'order-3',\r\n    order_number: 'ORD-003', \r\n    status: 'shipped',\r\n    total: 'invalid', // Valor problemático\r\n    created_at: '2024-01-03T10:00:00Z'\r\n  },\r\n  {\r\n    id: 'order-4',\r\n    order_number: 'ORD-004',\r\n    status: 'delivered',\r\n    total: 15000, // Valor válido\r\n    created_at: '2024-01-04T10:00:00Z'\r\n  },\r\n  {\r\n    id: 'order-5',\r\n    order_number: 'ORD-005',\r\n    status: 'cancelled',\r\n    total: 25000, // Valor válido pero cancelado\r\n    created_at: '2024-01-05T10:00:00Z'\r\n  }\r\n];\r\n\r\nconst mockApiResponse = {\r\n  data: {\r\n    orders: mockOrdersWithInvalidData,\r\n    pagination: {\r\n      page: 1,\r\n      limit: 20,\r\n      total: mockOrdersWithInvalidData.length,\r\n      totalPages: 1,\r\n      hasNextPage: false,\r\n      hasPreviousPage: false\r\n    },\r\n    filters: {}\r\n  }\r\n};\r\n\r\n// ===================================\r\n// SETUP Y CLEANUP\r\n// ===================================\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  \r\n  mockFetch.mockResolvedValue({\r\n    ok: true,\r\n    status: 200,\r\n    json: async () => mockApiResponse\r\n  });\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllTimers();\r\n});\r\n\r\n// ===================================\r\n// TESTS DE VALIDACIÓN\r\n// ===================================\r\n\r\ndescribe('useOrdersEnterprise - Validación de Datos', () => {\r\n  it('debe manejar valores undefined en total sin retornar NaN', async () => {\r\n    // Arrange\r\n    const { result } = renderHook(() => useOrdersEnterprise());\r\n\r\n    // Wait for initial fetch\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Act\r\n    const totalRevenue = result.current.getTotalRevenue();\r\n    const avgOrderValue = result.current.getAverageOrderValue();\r\n\r\n    // Assert\r\n    expect(totalRevenue).not.toBeNaN();\r\n    expect(avgOrderValue).not.toBeNaN();\r\n    expect(typeof totalRevenue).toBe('number');\r\n    expect(typeof avgOrderValue).toBe('number');\r\n    \r\n    // Solo debe contar la orden válida (order-4: 15000)\r\n    expect(totalRevenue).toBe(15000);\r\n    expect(avgOrderValue).toBe(15000);\r\n    \r\n    // Debe mostrar warnings para valores inválidos\r\n    expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n      '[useOrdersEnterprise] Invalid order total detected:', \r\n      undefined\r\n    );\r\n    expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n      '[useOrdersEnterprise] Invalid order total detected:', \r\n      NaN\r\n    );\r\n    expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n      '[useOrdersEnterprise] Invalid order total detected:', \r\n      'invalid'\r\n    );\r\n  });\r\n\r\n  it('debe excluir órdenes canceladas del cálculo', async () => {\r\n    // Arrange\r\n    const { result } = renderHook(() => useOrdersEnterprise());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Act\r\n    const totalRevenue = result.current.getTotalRevenue();\r\n    const avgOrderValue = result.current.getAverageOrderValue();\r\n\r\n    // Assert\r\n    // No debe incluir la orden cancelada (order-5: 25000)\r\n    expect(totalRevenue).toBe(15000); // Solo order-4\r\n    expect(avgOrderValue).toBe(15000); // Solo order-4\r\n  });\r\n\r\n  it('debe retornar 0 cuando no hay órdenes válidas', async () => {\r\n    // Arrange - Mock con solo órdenes inválidas\r\n    const invalidOrdersOnly = mockOrdersWithInvalidData.filter(order => \r\n      order.status === 'cancelled' || order.total === undefined || isNaN(order.total) || typeof order.total === 'string'\r\n    );\r\n    \r\n    mockFetch.mockResolvedValue({\r\n      ok: true,\r\n      status: 200,\r\n      json: async () => ({\r\n        data: {\r\n          orders: invalidOrdersOnly,\r\n          pagination: { page: 1, limit: 20, total: invalidOrdersOnly.length, totalPages: 1 },\r\n          filters: {}\r\n        }\r\n      })\r\n    });\r\n\r\n    const { result } = renderHook(() => useOrdersEnterprise());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Act\r\n    const totalRevenue = result.current.getTotalRevenue();\r\n    const avgOrderValue = result.current.getAverageOrderValue();\r\n\r\n    // Assert\r\n    expect(totalRevenue).toBe(0);\r\n    expect(avgOrderValue).toBe(0);\r\n    expect(totalRevenue).not.toBeNaN();\r\n    expect(avgOrderValue).not.toBeNaN();\r\n  });\r\n\r\n  it('debe redondear correctamente el valor promedio', async () => {\r\n    // Arrange - Mock con valores que requieren redondeo\r\n    const ordersWithDecimals = [\r\n      { id: 'order-1', status: 'delivered', total: 33.33, created_at: '2024-01-01T10:00:00Z' },\r\n      { id: 'order-2', status: 'delivered', total: 33.33, created_at: '2024-01-02T10:00:00Z' },\r\n      { id: 'order-3', status: 'delivered', total: 33.34, created_at: '2024-01-03T10:00:00Z' }\r\n    ];\r\n    \r\n    mockFetch.mockResolvedValue({\r\n      ok: true,\r\n      status: 200,\r\n      json: async () => ({\r\n        data: {\r\n          orders: ordersWithDecimals,\r\n          pagination: { page: 1, limit: 20, total: ordersWithDecimals.length, totalPages: 1 },\r\n          filters: {}\r\n        }\r\n      })\r\n    });\r\n\r\n    const { result } = renderHook(() => useOrdersEnterprise());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Act\r\n    const avgOrderValue = result.current.getAverageOrderValue();\r\n\r\n    // Assert\r\n    // (33.33 + 33.33 + 33.34) / 3 = 33.333... -> redondeado a 33.33\r\n    expect(avgOrderValue).toBe(33.33);\r\n    expect(avgOrderValue).not.toBeNaN();\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n"],"names":["mockFetch","jest","fn","global","fetch","mockConsoleWarn","spyOn","console","mockImplementation","mockOrdersWithInvalidData","id","order_number","status","total","undefined","created_at","NaN","mockApiResponse","data","orders","pagination","page","limit","length","totalPages","hasNextPage","hasPreviousPage","filters","beforeEach","clearAllMocks","mockResolvedValue","ok","json","afterEach","clearAllTimers","describe","it","result","renderHook","useOrdersEnterprise","waitFor","expect","current","loading","toBe","totalRevenue","getTotalRevenue","avgOrderValue","getAverageOrderValue","not","toBeNaN","toHaveBeenCalledWith","invalidOrdersOnly","filter","order","isNaN","ordersWithDecimals"],"mappings":"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"}