{"version":3,"names":["cov_293v1fo1e1","actualCoverage","s","GET","f","POST","runtime","request","searchParams","URL","url","filters","search","b","get","undefined","minProducts","Number","supabase","_supabase","getSupabaseClient","console","error","errorResponse","data","success","_server","NextResponse","json","status","query","from","select","not","gt","ilike","products","handleSupabaseError","brandCounts","forEach","product","brand","brands","Object","entries","filter","_","count","map","name","products_count","sort","a","localeCompare","response","message","length","brandStats","total_stock","avg_price","min_price","Infinity","max_price","discounted_products","stats","currentPrice","discounted_price","price","stock","Math","min","max","finalStats","values","brandProducts","p","totalPrice","reduce","sum","round"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\brands\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE MARCAS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// TIPOS PARA MARCAS\r\n// ===================================\r\nexport interface Brand {\r\n  name: string;\r\n  products_count: number;\r\n}\r\n\r\nexport interface BrandFilters {\r\n  search?: string;\r\n  minProducts?: number;\r\n}\r\n\r\n// ===================================\r\n// GET /api/brands - Obtener marcas disponibles\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer parámetros de query\r\n    const filters: BrandFilters = {\r\n      search: searchParams.get('search') || undefined,\r\n      minProducts: searchParams.get('minProducts') ? Number(searchParams.get('minProducts')) : 1,\r\n    };\r\n    \r\n    const supabase = getSupabaseClient();\r\n\r\n    // Verificar que el cliente de Supabase esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/brands');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Construir query para obtener marcas con conteo de productos\r\n    let query = supabase\r\n      .from('products')\r\n      .select('brand')\r\n      .not('brand', 'is', null)\r\n      .gt('stock', 0); // Solo productos con stock\r\n\r\n    // Aplicar filtro de búsqueda si existe\r\n    if (filters.search) {\r\n      query = query.ilike('brand', `%${filters.search}%`);\r\n    }\r\n\r\n    // Ejecutar query\r\n    const { data: products, error } = await query;\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'GET /api/brands');\r\n    }\r\n\r\n    // Procesar datos para obtener marcas únicas con conteo\r\n    const brandCounts: Record<string, number> = {};\r\n    \r\n    products?.forEach(product => {\r\n      if (product.brand) {\r\n        brandCounts[product.brand] = (brandCounts[product.brand] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    // Convertir a array y filtrar por mínimo de productos\r\n    const brands: Brand[] = Object.entries(brandCounts)\r\n      .filter(([_, count]) => count >= (filters.minProducts || 1))\r\n      .map(([name, products_count]) => ({\r\n        name,\r\n        products_count,\r\n      }))\r\n      .sort((a, b) => {\r\n        // Ordenar por número de productos (descendente) y luego por nombre\r\n        if (a.products_count !== b.products_count) {\r\n          return b.products_count - a.products_count;\r\n        }\r\n        return a.name.localeCompare(b.name);\r\n      });\r\n\r\n    const response: ApiResponse<Brand[]> = {\r\n      data: brands,\r\n      success: true,\r\n      message: `${brands.length} marcas encontradas`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en GET /api/brands:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET /api/brands/stats - Estadísticas de marcas\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const supabase = getSupabaseClient();\r\n\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en POST /api/brands');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Obtener estadísticas detalladas de marcas\r\n    const { data: products, error } = await supabase\r\n      .from('products')\r\n      .select('brand, price, discounted_price, stock, category_id')\r\n      .not('brand', 'is', null);\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'POST /api/brands (stats)');\r\n    }\r\n\r\n    // Calcular estadísticas por marca\r\n    const brandStats: Record<string, {\r\n      name: string;\r\n      products_count: number;\r\n      total_stock: number;\r\n      avg_price: number;\r\n      min_price: number;\r\n      max_price: number;\r\n      discounted_products: number;\r\n    }> = {};\r\n\r\n    products?.forEach(product => {\r\n      if (product.brand) {\r\n        if (!brandStats[product.brand]) {\r\n          brandStats[product.brand] = {\r\n            name: product.brand,\r\n            products_count: 0,\r\n            total_stock: 0,\r\n            avg_price: 0,\r\n            min_price: Infinity,\r\n            max_price: 0,\r\n            discounted_products: 0,\r\n          };\r\n        }\r\n\r\n        const stats = brandStats[product.brand];\r\n        const currentPrice = product.discounted_price || product.price;\r\n\r\n        stats.products_count++;\r\n        stats.total_stock += product.stock || 0;\r\n        stats.min_price = Math.min(stats.min_price, currentPrice);\r\n        stats.max_price = Math.max(stats.max_price, currentPrice);\r\n        \r\n        if (product.discounted_price && product.discounted_price < product.price) {\r\n          stats.discounted_products++;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calcular precio promedio y finalizar estadísticas\r\n    const finalStats = Object.values(brandStats).map(stats => {\r\n      const brandProducts = products?.filter(p => p.brand === stats.name) || [];\r\n      const totalPrice = brandProducts.reduce((sum, p) => sum + (p.discounted_price || p.price), 0);\r\n      \r\n      return {\r\n        ...stats,\r\n        avg_price: Math.round(totalPrice / stats.products_count),\r\n        min_price: stats.min_price === Infinity ? 0 : stats.min_price,\r\n      };\r\n    }).sort((a, b) => b.products_count - a.products_count);\r\n\r\n    const response: ApiResponse<typeof finalStats> = {\r\n      data: finalStats,\r\n      success: true,\r\n      message: `Estadísticas de ${finalStats.length} marcas calculadas`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en POST /api/brands (stats):', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}