685944d499060de278df329e1b3362ee
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1zld96qtye() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\validation-demo\\route.ts";
  var hash = "c8bec596df4c87ca73c683af2041d45ed7d726b5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\validation-demo\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 19
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 13
        },
        end: {
          line: 27,
          column: 27
        }
      },
      "10": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 82
        }
      },
      "11": {
        start: {
          line: 29,
          column: 40
        },
        end: {
          line: 29,
          column: 110
        }
      },
      "12": {
        start: {
          line: 30,
          column: 36
        },
        end: {
          line: 30,
          column: 102
        }
      },
      "13": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 31,
          column: 83
        }
      },
      "14": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 24
        }
      },
      "15": {
        start: {
          line: 36,
          column: 29
        },
        end: {
          line: 58,
          column: 2
        }
      },
      "16": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 72,
          column: 2
        }
      },
      "17": {
        start: {
          line: 77,
          column: 19
        },
        end: {
          line: 222,
          column: 1
        }
      },
      "18": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "19": {
        start: {
          line: 80,
          column: 27
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "20": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "21": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "22": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 42
        }
      },
      "23": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "24": {
        start: {
          line: 193,
          column: 25
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "25": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 51
        }
      },
      "26": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 61
        }
      },
      "27": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "28": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 376,
          column: 1
        }
      },
      "29": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 375,
          column: 5
        }
      },
      "30": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 233,
          column: 10
        }
      },
      "31": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "32": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 241,
          column: 15
        }
      },
      "33": {
        start: {
          line: 243,
          column: 24
        },
        end: {
          line: 243,
          column: 42
        }
      },
      "34": {
        start: {
          line: 245,
          column: 30
        },
        end: {
          line: 245,
          column: 51
        }
      },
      "35": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "36": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 253,
          column: 15
        }
      },
      "37": {
        start: {
          line: 256,
          column: 34
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "38": {
        start: {
          line: 264,
          column: 25
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "39": {
        start: {
          line: 271,
          column: 31
        },
        end: {
          line: 276,
          column: 48
        }
      },
      "40": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 282,
          column: 10
        }
      },
      "41": {
        start: {
          line: 284,
          column: 31
        },
        end: {
          line: 289,
          column: 49
        }
      },
      "42": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 295,
          column: 10
        }
      },
      "43": {
        start: {
          line: 297,
          column: 33
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "44": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 312,
          column: 10
        }
      },
      "45": {
        start: {
          line: 314,
          column: 26
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "46": {
        start: {
          line: 319,
          column: 26
        },
        end: {
          line: 319,
          column: 35
        }
      },
      "47": {
        start: {
          line: 323,
          column: 26
        },
        end: {
          line: 323,
          column: 36
        }
      },
      "48": {
        start: {
          line: 326,
          column: 54
        },
        end: {
          line: 326,
          column: 108
        }
      },
      "49": {
        start: {
          line: 327,
          column: 54
        },
        end: {
          line: 327,
          column: 108
        }
      },
      "50": {
        start: {
          line: 334,
          column: 25
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "51": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 51
        }
      },
      "52": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 62
        }
      },
      "53": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 374,
          column: 11
        }
      },
      "54": {
        start: {
          line: 381,
          column: 19
        },
        end: {
          line: 455,
          column: 1
        }
      },
      "55": {
        start: {
          line: 382,
          column: 4
        },
        end: {
          line: 454,
          column: 5
        }
      },
      "56": {
        start: {
          line: 384,
          column: 27
        },
        end: {
          line: 387,
          column: 10
        }
      },
      "57": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "58": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 395,
          column: 15
        }
      },
      "59": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 397,
          column: 42
        }
      },
      "60": {
        start: {
          line: 398,
          column: 25
        },
        end: {
          line: 398,
          column: 46
        }
      },
      "61": {
        start: {
          line: 400,
          column: 29
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "62": {
        start: {
          line: 406,
          column: 27
        },
        end: {
          line: 408,
          column: 10
        }
      },
      "63": {
        start: {
          line: 409,
          column: 27
        },
        end: {
          line: 411,
          column: 28
        }
      },
      "64": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 418,
          column: 10
        }
      },
      "65": {
        start: {
          line: 416,
          column: 68
        },
        end: {
          line: 416,
          column: 122
        }
      },
      "66": {
        start: {
          line: 419,
          column: 25
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "67": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 51
        }
      },
      "68": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 61
        }
      },
      "69": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 453,
          column: 11
        }
      },
      "70": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 87
        }
      },
      "71": {
        start: {
          line: 457,
          column: 13
        },
        end: {
          line: 459,
          column: 15
        }
      },
      "72": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 462,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 19
          },
          end: {
            line: 77,
            column: 20
          }
        },
        loc: {
          start: {
            line: 77,
            column: 36
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 227,
            column: 21
          }
        },
        loc: {
          start: {
            line: 227,
            column: 37
          },
          end: {
            line: 376,
            column: 1
          }
        },
        line: 227
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 319,
            column: 21
          },
          end: {
            line: 319,
            column: 22
          }
        },
        loc: {
          start: {
            line: 319,
            column: 26
          },
          end: {
            line: 319,
            column: 35
          }
        },
        line: 319
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 323,
            column: 21
          },
          end: {
            line: 323,
            column: 22
          }
        },
        loc: {
          start: {
            line: 323,
            column: 26
          },
          end: {
            line: 323,
            column: 36
          }
        },
        line: 323
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 326,
            column: 49
          },
          end: {
            line: 326,
            column: 50
          }
        },
        loc: {
          start: {
            line: 326,
            column: 54
          },
          end: {
            line: 326,
            column: 108
          }
        },
        line: 326
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 327,
            column: 49
          },
          end: {
            line: 327,
            column: 50
          }
        },
        loc: {
          start: {
            line: 327,
            column: 54
          },
          end: {
            line: 327,
            column: 108
          }
        },
        line: 327
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 381,
            column: 19
          },
          end: {
            line: 381,
            column: 20
          }
        },
        loc: {
          start: {
            line: 381,
            column: 36
          },
          end: {
            line: 455,
            column: 1
          }
        },
        line: 381
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 416,
            column: 63
          },
          end: {
            line: 416,
            column: 64
          }
        },
        loc: {
          start: {
            line: 416,
            column: 68
          },
          end: {
            line: 416,
            column: 122
          }
        },
        line: 416
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "1": {
        loc: {
          start: {
            line: 90,
            column: 24
          },
          end: {
            line: 90,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 24
          },
          end: {
            line: 90,
            column: 41
          }
        }, {
          start: {
            line: 90,
            column: 45
          },
          end: {
            line: 90,
            column: 48
          }
        }],
        line: 90
      },
      "2": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "3": {
        loc: {
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 240,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 240,
            column: 41
          }
        }, {
          start: {
            line: 240,
            column: 45
          },
          end: {
            line: 240,
            column: 48
          }
        }],
        line: 240
      },
      "4": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "5": {
        loc: {
          start: {
            line: 267,
            column: 25
          },
          end: {
            line: 267,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 25
          },
          end: {
            line: 267,
            column: 50
          }
        }, {
          start: {
            line: 267,
            column: 54
          },
          end: {
            line: 267,
            column: 107
          }
        }],
        line: 267
      },
      "6": {
        loc: {
          start: {
            line: 268,
            column: 24
          },
          end: {
            line: 268,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 24
          },
          end: {
            line: 268,
            column: 48
          }
        }, {
          start: {
            line: 268,
            column: 52
          },
          end: {
            line: 268,
            column: 86
          }
        }],
        line: 268
      },
      "7": {
        loc: {
          start: {
            line: 326,
            column: 19
          },
          end: {
            line: 326,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 19
          },
          end: {
            line: 326,
            column: 109
          }
        }, {
          start: {
            line: 326,
            column: 113
          },
          end: {
            line: 326,
            column: 115
          }
        }],
        line: 326
      },
      "8": {
        loc: {
          start: {
            line: 326,
            column: 54
          },
          end: {
            line: 326,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 54
          },
          end: {
            line: 326,
            column: 82
          }
        }, {
          start: {
            line: 326,
            column: 86
          },
          end: {
            line: 326,
            column: 108
          }
        }],
        line: 326
      },
      "9": {
        loc: {
          start: {
            line: 327,
            column: 19
          },
          end: {
            line: 327,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 19
          },
          end: {
            line: 327,
            column: 109
          }
        }, {
          start: {
            line: 327,
            column: 113
          },
          end: {
            line: 327,
            column: 115
          }
        }],
        line: 327
      },
      "10": {
        loc: {
          start: {
            line: 327,
            column: 54
          },
          end: {
            line: 327,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 54
          },
          end: {
            line: 327,
            column: 82
          }
        }, {
          start: {
            line: 327,
            column: 86
          },
          end: {
            line: 327,
            column: 108
          }
        }],
        line: 327
      },
      "11": {
        loc: {
          start: {
            line: 330,
            column: 32
          },
          end: {
            line: 330,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 32
          },
          end: {
            line: 330,
            column: 70
          }
        }, {
          start: {
            line: 330,
            column: 74
          },
          end: {
            line: 330,
            column: 75
          }
        }],
        line: 330
      },
      "12": {
        loc: {
          start: {
            line: 330,
            column: 80
          },
          end: {
            line: 330,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 80
          },
          end: {
            line: 330,
            column: 118
          }
        }, {
          start: {
            line: 330,
            column: 122
          },
          end: {
            line: 330,
            column: 123
          }
        }],
        line: 330
      },
      "13": {
        loc: {
          start: {
            line: 331,
            column: 35
          },
          end: {
            line: 331,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 35
          },
          end: {
            line: 331,
            column: 73
          }
        }, {
          start: {
            line: 331,
            column: 77
          },
          end: {
            line: 331,
            column: 78
          }
        }],
        line: 331
      },
      "14": {
        loc: {
          start: {
            line: 331,
            column: 83
          },
          end: {
            line: 331,
            column: 126
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 83
          },
          end: {
            line: 331,
            column: 121
          }
        }, {
          start: {
            line: 331,
            column: 125
          },
          end: {
            line: 331,
            column: 126
          }
        }],
        line: 331
      },
      "15": {
        loc: {
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "16": {
        loc: {
          start: {
            line: 394,
            column: 24
          },
          end: {
            line: 394,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 24
          },
          end: {
            line: 394,
            column: 41
          }
        }, {
          start: {
            line: 394,
            column: 45
          },
          end: {
            line: 394,
            column: 48
          }
        }],
        line: 394
      },
      "17": {
        loc: {
          start: {
            line: 414,
            column: 29
          },
          end: {
            line: 414,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 29
          },
          end: {
            line: 414,
            column: 46
          }
        }, {
          start: {
            line: 414,
            column: 50
          },
          end: {
            line: 414,
            column: 52
          }
        }],
        line: 414
      },
      "18": {
        loc: {
          start: {
            line: 416,
            column: 37
          },
          end: {
            line: 416,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 416,
            column: 37
          },
          end: {
            line: 416,
            column: 123
          }
        }, {
          start: {
            line: 416,
            column: 127
          },
          end: {
            line: 416,
            column: 129
          }
        }],
        line: 416
      },
      "19": {
        loc: {
          start: {
            line: 416,
            column: 68
          },
          end: {
            line: 416,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 416,
            column: 68
          },
          end: {
            line: 416,
            column: 96
          }
        }, {
          start: {
            line: 416,
            column: 100
          },
          end: {
            line: 416,
            column: 122
          }
        }],
        line: 416
      },
      "20": {
        loc: {
          start: {
            line: 427,
            column: 36
          },
          end: {
            line: 427,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 427,
            column: 57
          },
          end: {
            line: 427,
            column: 79
          }
        }, {
          start: {
            line: 427,
            column: 82
          },
          end: {
            line: 427,
            column: 133
          }
        }],
        line: 427
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\validation-demo\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Demostraci\xF3n del Sistema Enterprise de Validaci\xF3n\r\n * Muestra todas las funcionalidades del sistema de validaci\xF3n y sanitizaci\xF3n\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { withCriticalValidation } from '@/lib/validation/enterprise-validation-middleware';\r\nimport {\r\n  validateData,\r\n  sanitizeData\r\n} from '@/lib/validation/enterprise-validation-middleware';\r\nimport {\r\n  criticalValidator,\r\n  highValidator,\r\n  standardValidator,\r\n  basicValidator\r\n} from '@/lib/validation/enterprise-validation-system';\r\nimport {\r\n  EnterpriseEmailSchema,\r\n  EnterprisePasswordSchema,\r\n  EnterpriseProductSchema,\r\n  EnterpriseUserSchema\r\n} from '@/lib/validation/enterprise-schemas';\r\nimport type { ValidatedRequest } from '@/lib/validation/enterprise-validation-middleware';\r\n\r\n// =====================================================\r\n// ESQUEMAS DE DEMOSTRACI\xD3N\r\n// =====================================================\r\n\r\nconst ValidationDemoSchema = z.object({\r\n  // Datos b\xE1sicos\r\n  name: z.string().min(2, 'Nombre muy corto').max(100, 'Nombre muy largo'),\r\n  email: EnterpriseEmailSchema,\r\n  \r\n  // Datos potencialmente peligrosos\r\n  description: z.string().max(1000, 'Descripci\xF3n muy larga').optional(),\r\n  html_content: z.string().max(5000, 'Contenido HTML muy largo').optional(),\r\n  \r\n  // Datos de prueba de seguridad\r\n  user_input: z.string().max(500, 'Input muy largo').optional(),\r\n  search_query: z.string().max(200, 'Query muy largo').optional(),\r\n  \r\n  // Datos estructurados\r\n  metadata: z.record(z.any()).optional(),\r\n  tags: z.array(z.string().max(50)).max(20, 'Demasiadas etiquetas').optional(),\r\n  \r\n  // Configuraci\xF3n de prueba\r\n  test_level: z.enum(['basic', 'standard', 'high', 'critical']).default('standard'),\r\n  enable_sanitization: z.boolean().default(true),\r\n  enable_security_validation: z.boolean().default(true)\r\n});\r\n\r\nconst SecurityTestSchema = z.object({\r\n  test_type: z.enum(['sql_injection', 'xss', 'script_injection', 'html_injection']),\r\n  payload: z.string().max(1000),\r\n  expected_result: z.enum(['blocked', 'sanitized', 'allowed']).optional()\r\n});\r\n\r\n// =====================================================\r\n// GET /api/admin/validation-demo\r\n// Informaci\xF3n del sistema de validaci\xF3n\r\n// =====================================================\r\n\r\nconst getHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'system_info']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Informaci\xF3n del sistema de validaci\xF3n\r\n    const systemInfo = {\r\n      validation_system: {\r\n        name: 'Enterprise Validation System',\r\n        version: '1.0.0',\r\n        features: [\r\n          'Zod schema validation',\r\n          'DOMPurify sanitization',\r\n          'SQL injection detection',\r\n          'XSS prevention',\r\n          'Enterprise audit logging',\r\n          'Performance metrics',\r\n          'Multi-level security configs'\r\n        ]\r\n      },\r\n      \r\n      security_levels: {\r\n        critical: {\r\n          description: 'M\xE1xima seguridad para operaciones admin',\r\n          sanitization: true,\r\n          security_validation: true,\r\n          audit_logging: true,\r\n          allowed_html_tags: [],\r\n          max_string_length: 1000\r\n        },\r\n        high: {\r\n          description: 'Alta seguridad para APIs de pagos',\r\n          sanitization: true,\r\n          security_validation: true,\r\n          audit_logging: true,\r\n          allowed_html_tags: [],\r\n          max_string_length: 500\r\n        },\r\n        standard: {\r\n          description: 'Seguridad est\xE1ndar para APIs p\xFAblicas',\r\n          sanitization: true,\r\n          security_validation: true,\r\n          audit_logging: false,\r\n          allowed_html_tags: ['b', 'i', 'em', 'strong'],\r\n          max_string_length: 2000\r\n        },\r\n        basic: {\r\n          description: 'Seguridad b\xE1sica para contenido de usuario',\r\n          sanitization: true,\r\n          security_validation: false,\r\n          audit_logging: false,\r\n          allowed_html_tags: ['b', 'i', 'em', 'strong', 'p', 'br'],\r\n          max_string_length: 5000\r\n        }\r\n      },\r\n      \r\n      detection_patterns: {\r\n        sql_injection: [\r\n          'SELECT ... FROM',\r\n          'UNION ... SELECT',\r\n          'INSERT ... INTO',\r\n          'UPDATE ... SET',\r\n          'DELETE ... FROM',\r\n          'DROP ... TABLE'\r\n        ],\r\n        xss: [\r\n          '<script>...</script>',\r\n          'javascript:',\r\n          'on*= event handlers',\r\n          'eval(...)',\r\n          'expression(...)'\r\n        ]\r\n      },\r\n      \r\n      sanitization_features: [\r\n        'Script removal',\r\n        'HTML tag filtering',\r\n        'SQL keyword removal',\r\n        'Whitespace normalization',\r\n        'String length limits',\r\n        'Character validation',\r\n        'HTML escaping',\r\n        'Emoji removal (optional)'\r\n      ],\r\n      \r\n      validation_features: [\r\n        'Type validation',\r\n        'Format validation',\r\n        'Range validation',\r\n        'Custom validation rules',\r\n        'Nested object validation',\r\n        'Array validation',\r\n        'File validation',\r\n        'Security pattern detection'\r\n      ]\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: systemInfo,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        system: {\r\n          validation_enabled: true,\r\n          sanitization_enabled: true,\r\n          audit_enabled: true\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[VALIDATION_DEMO_GET] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener informaci\xF3n del sistema',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// POST /api/admin/validation-demo\r\n// Demostraci\xF3n de validaci\xF3n y sanitizaci\xF3n\r\n// =====================================================\r\n\r\nconst postHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'system_test']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener datos validados del middleware\r\n    const validatedData = request.validatedBody;\r\n    \r\n    if (!validatedData) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Datos de validaci\xF3n no encontrados',\r\n          code: 'VALIDATION_DATA_MISSING',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Demostrar diferentes niveles de validaci\xF3n\r\n    const validationResults: any = {\r\n      middleware_validation: {\r\n        success: true,\r\n        data: validatedData,\r\n        metadata: request.validationMetadata\r\n      }\r\n    };\r\n\r\n    // Probar validaci\xF3n manual con diferentes niveles\r\n    const testData = {\r\n      name: validatedData.name,\r\n      email: validatedData.email,\r\n      description: validatedData.description || 'Test description with <script>alert(\"xss\")</script>',\r\n      user_input: validatedData.user_input || 'SELECT * FROM users WHERE id = 1'\r\n    };\r\n\r\n    // Validaci\xF3n cr\xEDtica\r\n    const criticalResult = await validateData(\r\n      z.object({\r\n        name: z.string(),\r\n        email: EnterpriseEmailSchema,\r\n        description: z.string(),\r\n        user_input: z.string()\r\n      }),\r\n      testData,\r\n      'CRITICAL_ADMIN',\r\n      context\r\n    );\r\n\r\n    validationResults.critical_validation = {\r\n      success: criticalResult.success,\r\n      errors: criticalResult.errors,\r\n      sanitized_data: criticalResult.sanitized,\r\n      metadata: criticalResult.metadata\r\n    };\r\n\r\n    // Validaci\xF3n est\xE1ndar\r\n    const standardResult = await validateData(\r\n      z.object({\r\n        name: z.string(),\r\n        email: EnterpriseEmailSchema,\r\n        description: z.string(),\r\n        user_input: z.string()\r\n      }),\r\n      testData,\r\n      'STANDARD_PUBLIC',\r\n      context\r\n    );\r\n\r\n    validationResults.standard_validation = {\r\n      success: standardResult.success,\r\n      errors: standardResult.errors,\r\n      sanitized_data: standardResult.sanitized,\r\n      metadata: standardResult.metadata\r\n    };\r\n\r\n    // Demostrar sanitizaci\xF3n manual\r\n    const sanitizationDemo = {\r\n      original_data: {\r\n        malicious_script: '<script>alert(\"XSS Attack!\")</script>Hello World',\r\n        sql_injection: \"'; DROP TABLE users; --\",\r\n        html_content: '<div onclick=\"alert(1)\">Click me</div>',\r\n        normal_text: 'This is normal text with n\xFAmeros 123'\r\n      },\r\n      sanitized_data: {}\r\n    };\r\n\r\n    // Sanitizar con diferentes niveles\r\n    sanitizationDemo.sanitized_data = {\r\n      critical_level: sanitizeData(sanitizationDemo.original_data, 'CRITICAL_ADMIN'),\r\n      high_level: sanitizeData(sanitizationDemo.original_data, 'HIGH_PAYMENT'),\r\n      standard_level: sanitizeData(sanitizationDemo.original_data, 'STANDARD_PUBLIC'),\r\n      basic_level: sanitizeData(sanitizationDemo.original_data, 'BASIC_USER')\r\n    };\r\n\r\n    // Estad\xEDsticas de la demostraci\xF3n\r\n    const demoStats = {\r\n      total_validations: 3,\r\n      successful_validations: [criticalResult, standardResult].filter(r => r.success).length,\r\n      failed_validations: [criticalResult, standardResult].filter(r => !r.success).length,\r\n      sanitization_applied: true,\r\n      security_patterns_detected: [\r\n        ...(criticalResult.errors?.filter(e => e.code.includes('INJECTION') || e.code.includes('XSS')) || []),\r\n        ...(standardResult.errors?.filter(e => e.code.includes('INJECTION') || e.code.includes('XSS')) || [])\r\n      ].length,\r\n      performance_metrics: {\r\n        total_time_ms: (criticalResult.metadata?.performanceMs || 0) + (standardResult.metadata?.performanceMs || 0),\r\n        average_time_ms: ((criticalResult.metadata?.performanceMs || 0) + (standardResult.metadata?.performanceMs || 0)) / 2\r\n      }\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        validation_results: validationResults,\r\n        sanitization_demo: sanitizationDemo,\r\n        demo_statistics: demoStats,\r\n        recommendations: [\r\n          'Use CRITICAL_ADMIN for admin operations',\r\n          'Use HIGH_PAYMENT for payment processing',\r\n          'Use STANDARD_PUBLIC for public APIs',\r\n          'Use BASIC_USER for user-generated content',\r\n          'Always enable sanitization for user input',\r\n          'Monitor validation performance metrics',\r\n          'Review security pattern detections regularly'\r\n        ]\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        validation: {\r\n          level: 'critical',\r\n          audit_logged: true,\r\n          patterns_detected: demoStats.security_patterns_detected\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[VALIDATION_DEMO_POST] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en demostraci\xF3n de validaci\xF3n',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// PUT /api/admin/validation-demo\r\n// Pruebas de seguridad espec\xEDficas\r\n// =====================================================\r\n\r\nconst putHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_test']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const testData = request.validatedBody;\r\n\r\n    // Ejecutar prueba de seguridad espec\xEDfica\r\n    const securityTest = {\r\n      test_type: testData.test_type,\r\n      payload: testData.payload,\r\n      results: {}\r\n    };\r\n\r\n    // Probar con validador cr\xEDtico\r\n    const testSchema = z.object({\r\n      payload: z.string()\r\n    });\r\n\r\n    const testResult = await criticalValidator.validateAndSanitize(\r\n      testSchema,\r\n      { payload: testData.payload },\r\n      context,\r\n      request\r\n    );\r\n\r\n    securityTest.results = {\r\n      validation_passed: testResult.success,\r\n      errors_detected: testResult.errors || [],\r\n      sanitized_payload: testResult.sanitized?.payload,\r\n      security_patterns_found: testResult.errors?.filter(e => \r\n        e.code.includes('INJECTION') || e.code.includes('XSS')\r\n      ) || [],\r\n      performance_ms: testResult.metadata?.performanceMs\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        security_test: securityTest,\r\n        test_summary: {\r\n          payload_blocked: !testResult.success,\r\n          patterns_detected: securityTest.results.security_patterns_found.length,\r\n          sanitization_effective: testResult.sanitized?.payload !== testData.payload,\r\n          recommendation: testResult.success ? \r\n            'Payload appears safe' : \r\n            'Payload contains security threats and was blocked'\r\n        }\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          test_type: testData.test_type,\r\n          threat_detected: !testResult.success,\r\n          audit_logged: true\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[VALIDATION_DEMO_PUT] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en prueba de seguridad',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// APLICAR MIDDLEWARE DE VALIDACI\xD3N ENTERPRISE\r\n// =====================================================\r\n\r\nexport const GET = withCriticalValidation({})(getHandler);\r\n\r\nexport const POST = withCriticalValidation({\r\n  bodySchema: ValidationDemoSchema\r\n})(postHandler);\r\n\r\nexport const PUT = withCriticalValidation({\r\n  bodySchema: SecurityTestSchema\r\n})(putHandler);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "PUT", "runtime", "ValidationDemoSchema", "z", "object", "name", "string", "min", "max", "email", "EnterpriseEmailSchema", "description", "optional", "html_content", "user_input", "search_query", "metadata", "record", "any", "tags", "array", "test_level", "enum", "default", "enable_sanitization", "boolean", "enable_security_validation", "SecurityTestSchema", "test_type", "payload", "expected_result", "getHandler", "request", "authResult", "requireAdminAuth", "success", "NextResponse", "json", "error", "code", "enterprise", "status", "context", "systemInfo", "validation_system", "version", "features", "security_levels", "critical", "sanitization", "security_validation", "audit_logging", "allowed_html_tags", "max_string_length", "high", "standard", "basic", "detection_patterns", "sql_injection", "xss", "sanitization_features", "validation_features", "response", "data", "requester", "userId", "role", "permissions", "system", "validation_enabled", "sanitization_enabled", "audit_enabled", "timestamp", "Date", "toISOString", "console", "postHandler", "validatedData", "validatedBody", "validationResults", "middleware_validation", "validationMetadata", "testData", "criticalResult", "validateData", "critical_validation", "errors", "sanitized_data", "sanitized", "standardResult", "standard_validation", "sanitizationDemo", "original_data", "malicious_script", "normal_text", "critical_level", "sanitizeData", "high_level", "standard_level", "basic_level", "demoStats", "total_validations", "successful_validations", "filter", "r", "length", "failed_validations", "sanitization_applied", "security_patterns_detected", "e", "includes", "performance_metrics", "total_time_ms", "performanceMs", "average_time_ms", "validation_results", "sanitization_demo", "demo_statistics", "recommendations", "validation", "level", "audit_logged", "patterns_detected", "putHandler", "securityTest", "results", "testSchema", "testResult", "criticalValidator", "validateAndSanitize", "validation_passed", "errors_detected", "sanitized_payload", "security_patterns_found", "performance_ms", "security_test", "test_summary", "payload_blocked", "sanitization_effective", "recommendation", "security", "threat_detected", "withCriticalValidation", "bodySchema"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c8bec596df4c87ca73c683af2041d45ed7d726b5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zld96qtye = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zld96qtye();
cov_1zld96qtye().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1zld96qtye().f[0]++;
  cov_1zld96qtye().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1zld96qtye().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1zld96qtye().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1zld96qtye().f[1]++;
    cov_1zld96qtye().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1zld96qtye().f[2]++;
    cov_1zld96qtye().s[5]++;
    return POST;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1zld96qtye().f[3]++;
    cov_1zld96qtye().s[6]++;
    return PUT;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1zld96qtye().f[4]++;
    cov_1zld96qtye().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1zld96qtye().s[8]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_1zld96qtye().s[9]++, require("zod"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_1zld96qtye().s[10]++, require("../../../../lib/auth/enterprise-auth-utils"));
const _enterprisevalidationmiddleware =
/* istanbul ignore next */
(cov_1zld96qtye().s[11]++, require("../../../../lib/validation/enterprise-validation-middleware"));
const _enterprisevalidationsystem =
/* istanbul ignore next */
(cov_1zld96qtye().s[12]++, require("../../../../lib/validation/enterprise-validation-system"));
const _enterpriseschemas =
/* istanbul ignore next */
(cov_1zld96qtye().s[13]++, require("../../../../lib/validation/enterprise-schemas"));
const runtime =
/* istanbul ignore next */
(cov_1zld96qtye().s[14]++, 'nodejs');
// =====================================================
// ESQUEMAS DE DEMOSTRACIÃN
// =====================================================
const ValidationDemoSchema =
/* istanbul ignore next */
(cov_1zld96qtye().s[15]++, _zod.z.object({
  // Datos bÃ¡sicos
  name: _zod.z.string().min(2, 'Nombre muy corto').max(100, 'Nombre muy largo'),
  email: _enterpriseschemas.EnterpriseEmailSchema,
  // Datos potencialmente peligrosos
  description: _zod.z.string().max(1000, 'DescripciÃ³n muy larga').optional(),
  html_content: _zod.z.string().max(5000, 'Contenido HTML muy largo').optional(),
  // Datos de prueba de seguridad
  user_input: _zod.z.string().max(500, 'Input muy largo').optional(),
  search_query: _zod.z.string().max(200, 'Query muy largo').optional(),
  // Datos estructurados
  metadata: _zod.z.record(_zod.z.any()).optional(),
  tags: _zod.z.array(_zod.z.string().max(50)).max(20, 'Demasiadas etiquetas').optional(),
  // ConfiguraciÃ³n de prueba
  test_level: _zod.z.enum(['basic', 'standard', 'high', 'critical']).default('standard'),
  enable_sanitization: _zod.z.boolean().default(true),
  enable_security_validation: _zod.z.boolean().default(true)
}));
const SecurityTestSchema =
/* istanbul ignore next */
(cov_1zld96qtye().s[16]++, _zod.z.object({
  test_type: _zod.z.enum(['sql_injection', 'xss', 'script_injection', 'html_injection']),
  payload: _zod.z.string().max(1000),
  expected_result: _zod.z.enum(['blocked', 'sanitized', 'allowed']).optional()
}));
// =====================================================
// GET /api/admin/validation-demo
// InformaciÃ³n del sistema de validaciÃ³n
// =====================================================
/* istanbul ignore next */
cov_1zld96qtye().s[17]++;
const getHandler = async request => {
  /* istanbul ignore next */
  cov_1zld96qtye().f[5]++;
  cov_1zld96qtye().s[18]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[19]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'system_info']));
    /* istanbul ignore next */
    cov_1zld96qtye().s[20]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1zld96qtye().b[0][0]++;
      cov_1zld96qtye().s[21]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1zld96qtye().b[1][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[1][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zld96qtye().b[0][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[22]++, authResult.context);
    // InformaciÃ³n del sistema de validaciÃ³n
    const systemInfo =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[23]++, {
      validation_system: {
        name: 'Enterprise Validation System',
        version: '1.0.0',
        features: ['Zod schema validation', 'DOMPurify sanitization', 'SQL injection detection', 'XSS prevention', 'Enterprise audit logging', 'Performance metrics', 'Multi-level security configs']
      },
      security_levels: {
        critical: {
          description: 'MÃ¡xima seguridad para operaciones admin',
          sanitization: true,
          security_validation: true,
          audit_logging: true,
          allowed_html_tags: [],
          max_string_length: 1000
        },
        high: {
          description: 'Alta seguridad para APIs de pagos',
          sanitization: true,
          security_validation: true,
          audit_logging: true,
          allowed_html_tags: [],
          max_string_length: 500
        },
        standard: {
          description: 'Seguridad estÃ¡ndar para APIs pÃºblicas',
          sanitization: true,
          security_validation: true,
          audit_logging: false,
          allowed_html_tags: ['b', 'i', 'em', 'strong'],
          max_string_length: 2000
        },
        basic: {
          description: 'Seguridad bÃ¡sica para contenido de usuario',
          sanitization: true,
          security_validation: false,
          audit_logging: false,
          allowed_html_tags: ['b', 'i', 'em', 'strong', 'p', 'br'],
          max_string_length: 5000
        }
      },
      detection_patterns: {
        sql_injection: ['SELECT ... FROM', 'UNION ... SELECT', 'INSERT ... INTO', 'UPDATE ... SET', 'DELETE ... FROM', 'DROP ... TABLE'],
        xss: ['<script>...</script>', 'javascript:', 'on*= event handlers', 'eval(...)', 'expression(...)']
      },
      sanitization_features: ['Script removal', 'HTML tag filtering', 'SQL keyword removal', 'Whitespace normalization', 'String length limits', 'Character validation', 'HTML escaping', 'Emoji removal (optional)'],
      validation_features: ['Type validation', 'Format validation', 'Range validation', 'Custom validation rules', 'Nested object validation', 'Array validation', 'File validation', 'Security pattern detection']
    });
    const response =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[24]++, {
      success: true,
      data: systemInfo,
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        system: {
          validation_enabled: true,
          sanitization_enabled: true,
          audit_enabled: true
        }
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1zld96qtye().s[25]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1zld96qtye().s[26]++;
    console.error('[VALIDATION_DEMO_GET] Error:', error);
    /* istanbul ignore next */
    cov_1zld96qtye().s[27]++;
    return _server.NextResponse.json({
      error: 'Error interno al obtener informaciÃ³n del sistema',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
};
// =====================================================
// POST /api/admin/validation-demo
// DemostraciÃ³n de validaciÃ³n y sanitizaciÃ³n
// =====================================================
/* istanbul ignore next */
cov_1zld96qtye().s[28]++;
const postHandler = async request => {
  /* istanbul ignore next */
  cov_1zld96qtye().f[6]++;
  cov_1zld96qtye().s[29]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[30]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'system_test']));
    /* istanbul ignore next */
    cov_1zld96qtye().s[31]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1zld96qtye().b[2][0]++;
      cov_1zld96qtye().s[32]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1zld96qtye().b[3][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[3][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zld96qtye().b[2][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[33]++, authResult.context);
    // Obtener datos validados del middleware
    const validatedData =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[34]++, request.validatedBody);
    /* istanbul ignore next */
    cov_1zld96qtye().s[35]++;
    if (!validatedData) {
      /* istanbul ignore next */
      cov_1zld96qtye().b[4][0]++;
      cov_1zld96qtye().s[36]++;
      return _server.NextResponse.json({
        error: 'Datos de validaciÃ³n no encontrados',
        code: 'VALIDATION_DATA_MISSING',
        enterprise: true
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zld96qtye().b[4][1]++;
    }
    // Demostrar diferentes niveles de validaciÃ³n
    const validationResults =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[37]++, {
      middleware_validation: {
        success: true,
        data: validatedData,
        metadata: request.validationMetadata
      }
    });
    // Probar validaciÃ³n manual con diferentes niveles
    const testData =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[38]++, {
      name: validatedData.name,
      email: validatedData.email,
      description:
      /* istanbul ignore next */
      (cov_1zld96qtye().b[5][0]++, validatedData.description) ||
      /* istanbul ignore next */
      (cov_1zld96qtye().b[5][1]++, 'Test description with <script>alert("xss")</script>'),
      user_input:
      /* istanbul ignore next */
      (cov_1zld96qtye().b[6][0]++, validatedData.user_input) ||
      /* istanbul ignore next */
      (cov_1zld96qtye().b[6][1]++, 'SELECT * FROM users WHERE id = 1')
    });
    // ValidaciÃ³n crÃ­tica
    const criticalResult =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[39]++, await (0, _enterprisevalidationmiddleware.validateData)(_zod.z.object({
      name: _zod.z.string(),
      email: _enterpriseschemas.EnterpriseEmailSchema,
      description: _zod.z.string(),
      user_input: _zod.z.string()
    }), testData, 'CRITICAL_ADMIN', context));
    /* istanbul ignore next */
    cov_1zld96qtye().s[40]++;
    validationResults.critical_validation = {
      success: criticalResult.success,
      errors: criticalResult.errors,
      sanitized_data: criticalResult.sanitized,
      metadata: criticalResult.metadata
    };
    // ValidaciÃ³n estÃ¡ndar
    const standardResult =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[41]++, await (0, _enterprisevalidationmiddleware.validateData)(_zod.z.object({
      name: _zod.z.string(),
      email: _enterpriseschemas.EnterpriseEmailSchema,
      description: _zod.z.string(),
      user_input: _zod.z.string()
    }), testData, 'STANDARD_PUBLIC', context));
    /* istanbul ignore next */
    cov_1zld96qtye().s[42]++;
    validationResults.standard_validation = {
      success: standardResult.success,
      errors: standardResult.errors,
      sanitized_data: standardResult.sanitized,
      metadata: standardResult.metadata
    };
    // Demostrar sanitizaciÃ³n manual
    const sanitizationDemo =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[43]++, {
      original_data: {
        malicious_script: '<script>alert("XSS Attack!")</script>Hello World',
        sql_injection: "'; DROP TABLE users; --",
        html_content: '<div onclick="alert(1)">Click me</div>',
        normal_text: 'This is normal text with nÃºmeros 123'
      },
      sanitized_data: {}
    });
    // Sanitizar con diferentes niveles
    /* istanbul ignore next */
    cov_1zld96qtye().s[44]++;
    sanitizationDemo.sanitized_data = {
      critical_level: (0, _enterprisevalidationmiddleware.sanitizeData)(sanitizationDemo.original_data, 'CRITICAL_ADMIN'),
      high_level: (0, _enterprisevalidationmiddleware.sanitizeData)(sanitizationDemo.original_data, 'HIGH_PAYMENT'),
      standard_level: (0, _enterprisevalidationmiddleware.sanitizeData)(sanitizationDemo.original_data, 'STANDARD_PUBLIC'),
      basic_level: (0, _enterprisevalidationmiddleware.sanitizeData)(sanitizationDemo.original_data, 'BASIC_USER')
    };
    // EstadÃ­sticas de la demostraciÃ³n
    const demoStats =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[45]++, {
      total_validations: 3,
      successful_validations: [criticalResult, standardResult].filter(r => {
        /* istanbul ignore next */
        cov_1zld96qtye().f[7]++;
        cov_1zld96qtye().s[46]++;
        return r.success;
      }).length,
      failed_validations: [criticalResult, standardResult].filter(r => {
        /* istanbul ignore next */
        cov_1zld96qtye().f[8]++;
        cov_1zld96qtye().s[47]++;
        return !r.success;
      }).length,
      sanitization_applied: true,
      security_patterns_detected: [...(
      /* istanbul ignore next */
      (cov_1zld96qtye().b[7][0]++, criticalResult.errors?.filter(e => {
        /* istanbul ignore next */
        cov_1zld96qtye().f[9]++;
        cov_1zld96qtye().s[48]++;
        return /* istanbul ignore next */(cov_1zld96qtye().b[8][0]++, e.code.includes('INJECTION')) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[8][1]++, e.code.includes('XSS'));
      })) ||
      /* istanbul ignore next */
      (cov_1zld96qtye().b[7][1]++, [])), ...(
      /* istanbul ignore next */
      (cov_1zld96qtye().b[9][0]++, standardResult.errors?.filter(e => {
        /* istanbul ignore next */
        cov_1zld96qtye().f[10]++;
        cov_1zld96qtye().s[49]++;
        return /* istanbul ignore next */(cov_1zld96qtye().b[10][0]++, e.code.includes('INJECTION')) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[10][1]++, e.code.includes('XSS'));
      })) ||
      /* istanbul ignore next */
      (cov_1zld96qtye().b[9][1]++, []))].length,
      performance_metrics: {
        total_time_ms: (
        /* istanbul ignore next */
        (cov_1zld96qtye().b[11][0]++, criticalResult.metadata?.performanceMs) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[11][1]++, 0)) + (
        /* istanbul ignore next */
        (cov_1zld96qtye().b[12][0]++, standardResult.metadata?.performanceMs) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[12][1]++, 0)),
        average_time_ms: ((
        /* istanbul ignore next */
        (cov_1zld96qtye().b[13][0]++, criticalResult.metadata?.performanceMs) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[13][1]++, 0)) + (
        /* istanbul ignore next */
        (cov_1zld96qtye().b[14][0]++, standardResult.metadata?.performanceMs) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[14][1]++, 0))) / 2
      }
    });
    const response =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[50]++, {
      success: true,
      data: {
        validation_results: validationResults,
        sanitization_demo: sanitizationDemo,
        demo_statistics: demoStats,
        recommendations: ['Use CRITICAL_ADMIN for admin operations', 'Use HIGH_PAYMENT for payment processing', 'Use STANDARD_PUBLIC for public APIs', 'Use BASIC_USER for user-generated content', 'Always enable sanitization for user input', 'Monitor validation performance metrics', 'Review security pattern detections regularly']
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        validation: {
          level: 'critical',
          audit_logged: true,
          patterns_detected: demoStats.security_patterns_detected
        }
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1zld96qtye().s[51]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1zld96qtye().s[52]++;
    console.error('[VALIDATION_DEMO_POST] Error:', error);
    /* istanbul ignore next */
    cov_1zld96qtye().s[53]++;
    return _server.NextResponse.json({
      error: 'Error interno en demostraciÃ³n de validaciÃ³n',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
};
// =====================================================
// PUT /api/admin/validation-demo
// Pruebas de seguridad especÃ­ficas
// =====================================================
/* istanbul ignore next */
cov_1zld96qtye().s[54]++;
const putHandler = async request => {
  /* istanbul ignore next */
  cov_1zld96qtye().f[11]++;
  cov_1zld96qtye().s[55]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[56]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'security_test']));
    /* istanbul ignore next */
    cov_1zld96qtye().s[57]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1zld96qtye().b[15][0]++;
      cov_1zld96qtye().s[58]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1zld96qtye().b[16][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[16][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zld96qtye().b[15][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[59]++, authResult.context);
    const testData =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[60]++, request.validatedBody);
    // Ejecutar prueba de seguridad especÃ­fica
    const securityTest =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[61]++, {
      test_type: testData.test_type,
      payload: testData.payload,
      results: {}
    });
    // Probar con validador crÃ­tico
    const testSchema =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[62]++, _zod.z.object({
      payload: _zod.z.string()
    }));
    const testResult =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[63]++, await _enterprisevalidationsystem.criticalValidator.validateAndSanitize(testSchema, {
      payload: testData.payload
    }, context, request));
    /* istanbul ignore next */
    cov_1zld96qtye().s[64]++;
    securityTest.results = {
      validation_passed: testResult.success,
      errors_detected:
      /* istanbul ignore next */
      (cov_1zld96qtye().b[17][0]++, testResult.errors) ||
      /* istanbul ignore next */
      (cov_1zld96qtye().b[17][1]++, []),
      sanitized_payload: testResult.sanitized?.payload,
      security_patterns_found:
      /* istanbul ignore next */
      (cov_1zld96qtye().b[18][0]++, testResult.errors?.filter(e => {
        /* istanbul ignore next */
        cov_1zld96qtye().f[12]++;
        cov_1zld96qtye().s[65]++;
        return /* istanbul ignore next */(cov_1zld96qtye().b[19][0]++, e.code.includes('INJECTION')) ||
        /* istanbul ignore next */
        (cov_1zld96qtye().b[19][1]++, e.code.includes('XSS'));
      })) ||
      /* istanbul ignore next */
      (cov_1zld96qtye().b[18][1]++, []),
      performance_ms: testResult.metadata?.performanceMs
    };
    const response =
    /* istanbul ignore next */
    (cov_1zld96qtye().s[66]++, {
      success: true,
      data: {
        security_test: securityTest,
        test_summary: {
          payload_blocked: !testResult.success,
          patterns_detected: securityTest.results.security_patterns_found.length,
          sanitization_effective: testResult.sanitized?.payload !== testData.payload,
          recommendation: testResult.success ?
          /* istanbul ignore next */
          (cov_1zld96qtye().b[20][0]++, 'Payload appears safe') :
          /* istanbul ignore next */
          (cov_1zld96qtye().b[20][1]++, 'Payload contains security threats and was blocked')
        }
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role
        },
        security: {
          test_type: testData.test_type,
          threat_detected: !testResult.success,
          audit_logged: true
        }
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1zld96qtye().s[67]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1zld96qtye().s[68]++;
    console.error('[VALIDATION_DEMO_PUT] Error:', error);
    /* istanbul ignore next */
    cov_1zld96qtye().s[69]++;
    return _server.NextResponse.json({
      error: 'Error interno en prueba de seguridad',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
};
const GET =
/* istanbul ignore next */
(cov_1zld96qtye().s[70]++, (0, _enterprisevalidationmiddleware.withCriticalValidation)({})(getHandler));
const POST =
/* istanbul ignore next */
(cov_1zld96qtye().s[71]++, (0, _enterprisevalidationmiddleware.withCriticalValidation)({
  bodySchema: ValidationDemoSchema
})(postHandler));
const PUT =
/* istanbul ignore next */
(cov_1zld96qtye().s[72]++, (0, _enterprisevalidationmiddleware.withCriticalValidation)({
  bodySchema: SecurityTestSchema
})(putHandler));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,