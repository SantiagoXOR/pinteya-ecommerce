97d9de451b552c293430b2a7904c705f
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_293v1fo1e1() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\brands\\route.ts";
  var hash = "4bd40554b59b51bb0c4e51bdafa12c45e0accd7f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\brands\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 18
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "10": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "11": {
        start: {
          line: 28,
          column: 33
        },
        end: {
          line: 28,
          column: 53
        }
      },
      "12": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "13": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 82
        }
      },
      "16": {
        start: {
          line: 38,
          column: 34
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "18": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 101
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "20": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 64
        }
      },
      "21": {
        start: {
          line: 54,
          column: 42
        },
        end: {
          line: 54,
          column: 53
        }
      },
      "22": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "23": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 73
        }
      },
      "24": {
        start: {
          line: 59,
          column: 28
        },
        end: {
          line: 59,
          column: 30
        }
      },
      "25": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "26": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "27": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 83
        }
      },
      "28": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "29": {
        start: {
          line: 66,
          column: 72
        },
        end: {
          line: 66,
          column: 107
        }
      },
      "30": {
        start: {
          line: 66,
          column: 140
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "31": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "32": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 59
        }
      },
      "33": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 48
        }
      },
      "34": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "35": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 51
        }
      },
      "36": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 58
        }
      },
      "37": {
        start: {
          line: 84,
          column: 30
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "38": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "39": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "40": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 96,
          column: 59
        }
      },
      "41": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "42": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 83
        }
      },
      "43": {
        start: {
          line: 99,
          column: 34
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "44": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "45": {
        start: {
          line: 109,
          column: 42
        },
        end: {
          line: 109,
          column: 159
        }
      },
      "46": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 82
        }
      },
      "48": {
        start: {
          line: 114,
          column: 27
        },
        end: {
          line: 114,
          column: 29
        }
      },
      "49": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "50": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "51": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "52": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 126,
          column: 22
        }
      },
      "53": {
        start: {
          line: 128,
          column: 30
        },
        end: {
          line: 128,
          column: 55
        }
      },
      "54": {
        start: {
          line: 129,
          column: 37
        },
        end: {
          line: 129,
          column: 78
        }
      },
      "55": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 39
        }
      },
      "56": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 56
        }
      },
      "57": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 74
        }
      },
      "58": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 74
        }
      },
      "59": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 136,
          column: 17
        }
      },
      "60": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 135,
          column: 48
        }
      },
      "61": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 148,
          column: 60
        }
      },
      "62": {
        start: {
          line: 141,
          column: 34
        },
        end: {
          line: 141,
          column: 85
        }
      },
      "63": {
        start: {
          line: 141,
          column: 56
        },
        end: {
          line: 141,
          column: 78
        }
      },
      "64": {
        start: {
          line: 142,
          column: 31
        },
        end: {
          line: 142,
          column: 103
        }
      },
      "65": {
        start: {
          line: 142,
          column: 62
        },
        end: {
          line: 142,
          column: 99
        }
      },
      "66": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "67": {
        start: {
          line: 148,
          column: 24
        },
        end: {
          line: 148,
          column: 59
        }
      },
      "68": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "69": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 51
        }
      },
      "70": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 67
        }
      },
      "71": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "72": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 27
          }
        },
        loc: {
          start: {
            line: 60,
            column: 37
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 60
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 66,
            column: 58
          },
          end: {
            line: 66,
            column: 59
          }
        },
        loc: {
          start: {
            line: 66,
            column: 72
          },
          end: {
            line: 66,
            column: 107
          }
        },
        line: 66
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 66,
            column: 113
          },
          end: {
            line: 66,
            column: 114
          }
        },
        loc: {
          start: {
            line: 66,
            column: 140
          },
          end: {
            line: 69,
            column: 13
          }
        },
        line: 66
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 69,
            column: 21
          },
          end: {
            line: 69,
            column: 22
          }
        },
        loc: {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 75,
            column: 9
          }
        },
        line: 69
      },
      "9": {
        name: "POST",
        decl: {
          start: {
            line: 94,
            column: 15
          },
          end: {
            line: 94,
            column: 19
          }
        },
        loc: {
          start: {
            line: 94,
            column: 29
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 94
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 115,
            column: 26
          },
          end: {
            line: 115,
            column: 27
          }
        },
        loc: {
          start: {
            line: 115,
            column: 37
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 115
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 140,
            column: 57
          },
          end: {
            line: 140,
            column: 58
          }
        },
        loc: {
          start: {
            line: 140,
            column: 66
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 140
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 141,
            column: 51
          },
          end: {
            line: 141,
            column: 52
          }
        },
        loc: {
          start: {
            line: 141,
            column: 56
          },
          end: {
            line: 141,
            column: 78
          }
        },
        line: 141
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 142,
            column: 52
          },
          end: {
            line: 142,
            column: 53
          }
        },
        loc: {
          start: {
            line: 142,
            column: 62
          },
          end: {
            line: 142,
            column: 99
          }
        },
        line: 142
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        },
        loc: {
          start: {
            line: 148,
            column: 24
          },
          end: {
            line: 148,
            column: 59
          }
        },
        line: 148
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 20
          },
          end: {
            line: 31,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 20
          },
          end: {
            line: 31,
            column: 46
          }
        }, {
          start: {
            line: 31,
            column: 50
          },
          end: {
            line: 31,
            column: 59
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 25
          },
          end: {
            line: 32,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 59
          },
          end: {
            line: 32,
            column: 98
          }
        }, {
          start: {
            line: 32,
            column: 101
          },
          end: {
            line: 32,
            column: 102
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 46
          },
          end: {
            line: 62,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 46
          },
          end: {
            line: 62,
            column: 72
          }
        }, {
          start: {
            line: 62,
            column: 76
          },
          end: {
            line: 62,
            column: 77
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 82
          },
          end: {
            line: 66,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 82
          },
          end: {
            line: 66,
            column: 101
          }
        }, {
          start: {
            line: 66,
            column: 105
          },
          end: {
            line: 66,
            column: 106
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 19
          },
          end: {
            line: 87,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 19
          },
          end: {
            line: 87,
            column: 32
          }
        }, {
          start: {
            line: 87,
            column: 36
          },
          end: {
            line: 87,
            column: 64
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "11": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "12": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "13": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "14": {
        loc: {
          start: {
            line: 129,
            column: 37
          },
          end: {
            line: 129,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 37
          },
          end: {
            line: 129,
            column: 61
          }
        }, {
          start: {
            line: 129,
            column: 65
          },
          end: {
            line: 129,
            column: 78
          }
        }],
        line: 129
      },
      "15": {
        loc: {
          start: {
            line: 131,
            column: 37
          },
          end: {
            line: 131,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 37
          },
          end: {
            line: 131,
            column: 50
          }
        }, {
          start: {
            line: 131,
            column: 54
          },
          end: {
            line: 131,
            column: 55
          }
        }],
        line: 131
      },
      "16": {
        loc: {
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "17": {
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 44
          }
        }, {
          start: {
            line: 134,
            column: 48
          },
          end: {
            line: 134,
            column: 88
          }
        }],
        line: 134
      },
      "18": {
        loc: {
          start: {
            line: 141,
            column: 34
          },
          end: {
            line: 141,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 34
          },
          end: {
            line: 141,
            column: 79
          }
        }, {
          start: {
            line: 141,
            column: 83
          },
          end: {
            line: 141,
            column: 85
          }
        }],
        line: 141
      },
      "19": {
        loc: {
          start: {
            line: 142,
            column: 69
          },
          end: {
            line: 142,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 69
          },
          end: {
            line: 142,
            column: 87
          }
        }, {
          start: {
            line: 142,
            column: 91
          },
          end: {
            line: 142,
            column: 98
          }
        }],
        line: 142
      },
      "20": {
        loc: {
          start: {
            line: 146,
            column: 27
          },
          end: {
            line: 146,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 58
          },
          end: {
            line: 146,
            column: 59
          }
        }, {
          start: {
            line: 146,
            column: 62
          },
          end: {
            line: 146,
            column: 77
          }
        }],
        line: 146
      },
      "21": {
        loc: {
          start: {
            line: 160,
            column: 19
          },
          end: {
            line: 160,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 19
          },
          end: {
            line: 160,
            column: 32
          }
        }, {
          start: {
            line: 160,
            column: 36
          },
          end: {
            line: 160,
            column: 64
          }
        }],
        line: 160
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\brands\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE MARCAS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// TIPOS PARA MARCAS\r\n// ===================================\r\nexport interface Brand {\r\n  name: string;\r\n  products_count: number;\r\n}\r\n\r\nexport interface BrandFilters {\r\n  search?: string;\r\n  minProducts?: number;\r\n}\r\n\r\n// ===================================\r\n// GET /api/brands - Obtener marcas disponibles\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer par\xE1metros de query\r\n    const filters: BrandFilters = {\r\n      search: searchParams.get('search') || undefined,\r\n      minProducts: searchParams.get('minProducts') ? Number(searchParams.get('minProducts')) : 1,\r\n    };\r\n    \r\n    const supabase = getSupabaseClient();\r\n\r\n    // Verificar que el cliente de Supabase est\xE9 disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/brands');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Construir query para obtener marcas con conteo de productos\r\n    let query = supabase\r\n      .from('products')\r\n      .select('brand')\r\n      .not('brand', 'is', null)\r\n      .gt('stock', 0); // Solo productos con stock\r\n\r\n    // Aplicar filtro de b\xFAsqueda si existe\r\n    if (filters.search) {\r\n      query = query.ilike('brand', `%${filters.search}%`);\r\n    }\r\n\r\n    // Ejecutar query\r\n    const { data: products, error } = await query;\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'GET /api/brands');\r\n    }\r\n\r\n    // Procesar datos para obtener marcas \xFAnicas con conteo\r\n    const brandCounts: Record<string, number> = {};\r\n    \r\n    products?.forEach(product => {\r\n      if (product.brand) {\r\n        brandCounts[product.brand] = (brandCounts[product.brand] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    // Convertir a array y filtrar por m\xEDnimo de productos\r\n    const brands: Brand[] = Object.entries(brandCounts)\r\n      .filter(([_, count]) => count >= (filters.minProducts || 1))\r\n      .map(([name, products_count]) => ({\r\n        name,\r\n        products_count,\r\n      }))\r\n      .sort((a, b) => {\r\n        // Ordenar por n\xFAmero de productos (descendente) y luego por nombre\r\n        if (a.products_count !== b.products_count) {\r\n          return b.products_count - a.products_count;\r\n        }\r\n        return a.name.localeCompare(b.name);\r\n      });\r\n\r\n    const response: ApiResponse<Brand[]> = {\r\n      data: brands,\r\n      success: true,\r\n      message: `${brands.length} marcas encontradas`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en GET /api/brands:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET /api/brands/stats - Estad\xEDsticas de marcas\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const supabase = getSupabaseClient();\r\n\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en POST /api/brands');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Obtener estad\xEDsticas detalladas de marcas\r\n    const { data: products, error } = await supabase\r\n      .from('products')\r\n      .select('brand, price, discounted_price, stock, category_id')\r\n      .not('brand', 'is', null);\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'POST /api/brands (stats)');\r\n    }\r\n\r\n    // Calcular estad\xEDsticas por marca\r\n    const brandStats: Record<string, {\r\n      name: string;\r\n      products_count: number;\r\n      total_stock: number;\r\n      avg_price: number;\r\n      min_price: number;\r\n      max_price: number;\r\n      discounted_products: number;\r\n    }> = {};\r\n\r\n    products?.forEach(product => {\r\n      if (product.brand) {\r\n        if (!brandStats[product.brand]) {\r\n          brandStats[product.brand] = {\r\n            name: product.brand,\r\n            products_count: 0,\r\n            total_stock: 0,\r\n            avg_price: 0,\r\n            min_price: Infinity,\r\n            max_price: 0,\r\n            discounted_products: 0,\r\n          };\r\n        }\r\n\r\n        const stats = brandStats[product.brand];\r\n        const currentPrice = product.discounted_price || product.price;\r\n\r\n        stats.products_count++;\r\n        stats.total_stock += product.stock || 0;\r\n        stats.min_price = Math.min(stats.min_price, currentPrice);\r\n        stats.max_price = Math.max(stats.max_price, currentPrice);\r\n        \r\n        if (product.discounted_price && product.discounted_price < product.price) {\r\n          stats.discounted_products++;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calcular precio promedio y finalizar estad\xEDsticas\r\n    const finalStats = Object.values(brandStats).map(stats => {\r\n      const brandProducts = products?.filter(p => p.brand === stats.name) || [];\r\n      const totalPrice = brandProducts.reduce((sum, p) => sum + (p.discounted_price || p.price), 0);\r\n      \r\n      return {\r\n        ...stats,\r\n        avg_price: Math.round(totalPrice / stats.products_count),\r\n        min_price: stats.min_price === Infinity ? 0 : stats.min_price,\r\n      };\r\n    }).sort((a, b) => b.products_count - a.products_count);\r\n\r\n    const response: ApiResponse<typeof finalStats> = {\r\n      data: finalStats,\r\n      success: true,\r\n      message: `Estad\xEDsticas de ${finalStats.length} marcas calculadas`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en POST /api/brands (stats):', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "searchParams", "URL", "url", "filters", "search", "get", "undefined", "minProducts", "Number", "supabase", "getSupabaseClient", "console", "error", "errorResponse", "data", "success", "NextResponse", "json", "status", "query", "from", "select", "not", "gt", "ilike", "products", "handleSupabaseError", "brandCounts", "forEach", "product", "brand", "brands", "Object", "entries", "filter", "_", "count", "map", "name", "products_count", "sort", "a", "b", "localeCompare", "response", "message", "length", "brandStats", "total_stock", "avg_price", "min_price", "Infinity", "max_price", "discounted_products", "stats", "currentPrice", "discounted_price", "price", "stock", "Math", "min", "max", "finalStats", "values", "brandProducts", "p", "totalPrice", "reduce", "sum", "round"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4bd40554b59b51bb0c4e51bdafa12c45e0accd7f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_293v1fo1e1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_293v1fo1e1();
cov_293v1fo1e1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_293v1fo1e1().f[0]++;
  cov_293v1fo1e1().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_293v1fo1e1().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_293v1fo1e1().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_293v1fo1e1().f[1]++;
    cov_293v1fo1e1().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_293v1fo1e1().f[2]++;
    cov_293v1fo1e1().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_293v1fo1e1().f[3]++;
    cov_293v1fo1e1().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_293v1fo1e1().s[7]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_293v1fo1e1().s[8]++, require("../../../lib/integrations/supabase"));
const runtime =
/* istanbul ignore next */
(cov_293v1fo1e1().s[9]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_293v1fo1e1().f[4]++;
  cov_293v1fo1e1().s[10]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[11]++, new URL(request.url));
    // Extraer parÃ¡metros de query
    const filters =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[12]++, {
      search:
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[0][0]++, searchParams.get('search')) ||
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[0][1]++, undefined),
      minProducts: searchParams.get('minProducts') ?
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[1][0]++, Number(searchParams.get('minProducts'))) :
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[1][1]++, 1)
    });
    const supabase =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[13]++, (0, _supabase.getSupabaseClient)());
    // Verificar que el cliente de Supabase estÃ© disponible
    /* istanbul ignore next */
    cov_293v1fo1e1().s[14]++;
    if (!supabase) {
      /* istanbul ignore next */
      cov_293v1fo1e1().b[2][0]++;
      cov_293v1fo1e1().s[15]++;
      console.error('Cliente de Supabase no disponible en GET /api/brands');
      const errorResponse =
      /* istanbul ignore next */
      (cov_293v1fo1e1().s[16]++, {
        data: null,
        success: false,
        error: 'Servicio de base de datos no disponible'
      });
      /* istanbul ignore next */
      cov_293v1fo1e1().s[17]++;
      return _server.NextResponse.json(errorResponse, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_293v1fo1e1().b[2][1]++;
    }
    // Construir query para obtener marcas con conteo de productos
    let query =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[18]++, supabase.from('products').select('brand').not('brand', 'is', null).gt('stock', 0)); // Solo productos con stock
    // Aplicar filtro de bÃºsqueda si existe
    /* istanbul ignore next */
    cov_293v1fo1e1().s[19]++;
    if (filters.search) {
      /* istanbul ignore next */
      cov_293v1fo1e1().b[3][0]++;
      cov_293v1fo1e1().s[20]++;
      query = query.ilike('brand', `%${filters.search}%`);
    } else
    /* istanbul ignore next */
    {
      cov_293v1fo1e1().b[3][1]++;
    }
    // Ejecutar query
    const {
      data: products,
      error
    } =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[21]++, await query);
    /* istanbul ignore next */
    cov_293v1fo1e1().s[22]++;
    if (error) {
      /* istanbul ignore next */
      cov_293v1fo1e1().b[4][0]++;
      cov_293v1fo1e1().s[23]++;
      (0, _supabase.handleSupabaseError)(error, 'GET /api/brands');
    } else
    /* istanbul ignore next */
    {
      cov_293v1fo1e1().b[4][1]++;
    }
    // Procesar datos para obtener marcas Ãºnicas con conteo
    const brandCounts =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[24]++, {});
    /* istanbul ignore next */
    cov_293v1fo1e1().s[25]++;
    products?.forEach(product => {
      /* istanbul ignore next */
      cov_293v1fo1e1().f[5]++;
      cov_293v1fo1e1().s[26]++;
      if (product.brand) {
        /* istanbul ignore next */
        cov_293v1fo1e1().b[5][0]++;
        cov_293v1fo1e1().s[27]++;
        brandCounts[product.brand] = (
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[6][0]++, brandCounts[product.brand]) ||
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[6][1]++, 0)) + 1;
      } else
      /* istanbul ignore next */
      {
        cov_293v1fo1e1().b[5][1]++;
      }
    });
    // Convertir a array y filtrar por mÃ­nimo de productos
    const brands =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[28]++, Object.entries(brandCounts).filter(([_, count]) => {
      /* istanbul ignore next */
      cov_293v1fo1e1().f[6]++;
      cov_293v1fo1e1().s[29]++;
      return count >= (
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[7][0]++, filters.minProducts) ||
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[7][1]++, 1));
    }).map(([name, products_count]) => {
      /* istanbul ignore next */
      cov_293v1fo1e1().f[7]++;
      cov_293v1fo1e1().s[30]++;
      return {
        name,
        products_count
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_293v1fo1e1().f[8]++;
      cov_293v1fo1e1().s[31]++;
      // Ordenar por nÃºmero de productos (descendente) y luego por nombre
      if (a.products_count !== b.products_count) {
        /* istanbul ignore next */
        cov_293v1fo1e1().b[8][0]++;
        cov_293v1fo1e1().s[32]++;
        return b.products_count - a.products_count;
      } else
      /* istanbul ignore next */
      {
        cov_293v1fo1e1().b[8][1]++;
      }
      cov_293v1fo1e1().s[33]++;
      return a.name.localeCompare(b.name);
    }));
    const response =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[34]++, {
      data: brands,
      success: true,
      message: `${brands.length} marcas encontradas`
    });
    /* istanbul ignore next */
    cov_293v1fo1e1().s[35]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_293v1fo1e1().s[36]++;
    console.error('Error en GET /api/brands:', error);
    const errorResponse =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[37]++, {
      data: null,
      success: false,
      error:
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[9][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[9][1]++, 'Error interno del servidor')
    });
    /* istanbul ignore next */
    cov_293v1fo1e1().s[38]++;
    return _server.NextResponse.json(errorResponse, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_293v1fo1e1().f[9]++;
  cov_293v1fo1e1().s[39]++;
  try {
    const supabase =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[40]++, (0, _supabase.getSupabaseClient)());
    /* istanbul ignore next */
    cov_293v1fo1e1().s[41]++;
    if (!supabase) {
      /* istanbul ignore next */
      cov_293v1fo1e1().b[10][0]++;
      cov_293v1fo1e1().s[42]++;
      console.error('Cliente de Supabase no disponible en POST /api/brands');
      const errorResponse =
      /* istanbul ignore next */
      (cov_293v1fo1e1().s[43]++, {
        data: null,
        success: false,
        error: 'Servicio de base de datos no disponible'
      });
      /* istanbul ignore next */
      cov_293v1fo1e1().s[44]++;
      return _server.NextResponse.json(errorResponse, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_293v1fo1e1().b[10][1]++;
    }
    // Obtener estadÃ­sticas detalladas de marcas
    const {
      data: products,
      error
    } =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[45]++, await supabase.from('products').select('brand, price, discounted_price, stock, category_id').not('brand', 'is', null));
    /* istanbul ignore next */
    cov_293v1fo1e1().s[46]++;
    if (error) {
      /* istanbul ignore next */
      cov_293v1fo1e1().b[11][0]++;
      cov_293v1fo1e1().s[47]++;
      (0, _supabase.handleSupabaseError)(error, 'POST /api/brands (stats)');
    } else
    /* istanbul ignore next */
    {
      cov_293v1fo1e1().b[11][1]++;
    }
    // Calcular estadÃ­sticas por marca
    const brandStats =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[48]++, {});
    /* istanbul ignore next */
    cov_293v1fo1e1().s[49]++;
    products?.forEach(product => {
      /* istanbul ignore next */
      cov_293v1fo1e1().f[10]++;
      cov_293v1fo1e1().s[50]++;
      if (product.brand) {
        /* istanbul ignore next */
        cov_293v1fo1e1().b[12][0]++;
        cov_293v1fo1e1().s[51]++;
        if (!brandStats[product.brand]) {
          /* istanbul ignore next */
          cov_293v1fo1e1().b[13][0]++;
          cov_293v1fo1e1().s[52]++;
          brandStats[product.brand] = {
            name: product.brand,
            products_count: 0,
            total_stock: 0,
            avg_price: 0,
            min_price: Infinity,
            max_price: 0,
            discounted_products: 0
          };
        } else
        /* istanbul ignore next */
        {
          cov_293v1fo1e1().b[13][1]++;
        }
        const stats =
        /* istanbul ignore next */
        (cov_293v1fo1e1().s[53]++, brandStats[product.brand]);
        const currentPrice =
        /* istanbul ignore next */
        (cov_293v1fo1e1().s[54]++,
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[14][0]++, product.discounted_price) ||
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[14][1]++, product.price));
        /* istanbul ignore next */
        cov_293v1fo1e1().s[55]++;
        stats.products_count++;
        /* istanbul ignore next */
        cov_293v1fo1e1().s[56]++;
        stats.total_stock +=
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[15][0]++, product.stock) ||
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[15][1]++, 0);
        /* istanbul ignore next */
        cov_293v1fo1e1().s[57]++;
        stats.min_price = Math.min(stats.min_price, currentPrice);
        /* istanbul ignore next */
        cov_293v1fo1e1().s[58]++;
        stats.max_price = Math.max(stats.max_price, currentPrice);
        /* istanbul ignore next */
        cov_293v1fo1e1().s[59]++;
        if (
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[17][0]++, product.discounted_price) &&
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[17][1]++, product.discounted_price < product.price)) {
          /* istanbul ignore next */
          cov_293v1fo1e1().b[16][0]++;
          cov_293v1fo1e1().s[60]++;
          stats.discounted_products++;
        } else
        /* istanbul ignore next */
        {
          cov_293v1fo1e1().b[16][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_293v1fo1e1().b[12][1]++;
      }
    });
    // Calcular precio promedio y finalizar estadÃ­sticas
    const finalStats =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[61]++, Object.values(brandStats).map(stats => {
      /* istanbul ignore next */
      cov_293v1fo1e1().f[11]++;
      const brandProducts =
      /* istanbul ignore next */
      (cov_293v1fo1e1().s[62]++,
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[18][0]++, products?.filter(p => {
        /* istanbul ignore next */
        cov_293v1fo1e1().f[12]++;
        cov_293v1fo1e1().s[63]++;
        return p.brand === stats.name;
      })) ||
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[18][1]++, []));
      const totalPrice =
      /* istanbul ignore next */
      (cov_293v1fo1e1().s[64]++, brandProducts.reduce((sum, p) => {
        /* istanbul ignore next */
        cov_293v1fo1e1().f[13]++;
        cov_293v1fo1e1().s[65]++;
        return sum + (
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[19][0]++, p.discounted_price) ||
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[19][1]++, p.price));
      }, 0));
      /* istanbul ignore next */
      cov_293v1fo1e1().s[66]++;
      return {
        ...stats,
        avg_price: Math.round(totalPrice / stats.products_count),
        min_price: stats.min_price === Infinity ?
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[20][0]++, 0) :
        /* istanbul ignore next */
        (cov_293v1fo1e1().b[20][1]++, stats.min_price)
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_293v1fo1e1().f[14]++;
      cov_293v1fo1e1().s[67]++;
      return b.products_count - a.products_count;
    }));
    const response =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[68]++, {
      data: finalStats,
      success: true,
      message: `EstadÃ­sticas de ${finalStats.length} marcas calculadas`
    });
    /* istanbul ignore next */
    cov_293v1fo1e1().s[69]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_293v1fo1e1().s[70]++;
    console.error('Error en POST /api/brands (stats):', error);
    const errorResponse =
    /* istanbul ignore next */
    (cov_293v1fo1e1().s[71]++, {
      data: null,
      success: false,
      error:
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[21][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_293v1fo1e1().b[21][1]++, 'Error interno del servidor')
    });
    /* istanbul ignore next */
    cov_293v1fo1e1().s[72]++;
    return _server.NextResponse.json(errorResponse, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,