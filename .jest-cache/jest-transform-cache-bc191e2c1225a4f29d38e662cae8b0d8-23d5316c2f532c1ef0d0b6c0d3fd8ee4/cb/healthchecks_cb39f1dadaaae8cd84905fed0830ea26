f94aa8929185d7e0281e9de601fa0aba
// ===================================
// PINTEYA E-COMMERCE - ENTERPRISE HEALTH CHECKS SYSTEM
// ===================================
"use strict";

/* istanbul ignore next */
function cov_13lbuy7905() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\health-checks.ts";
  var hash = "9f177259b34c0ee53945e9b057fb0ef99bfdcaa6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\health-checks.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 28
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "8": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "9": {
        start: {
          line: 29,
          column: 18
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "10": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 30,
          column: 49
        }
      },
      "11": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 78
        }
      },
      "12": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 58
        }
      },
      "13": {
        start: {
          line: 33,
          column: 33
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "14": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 40
        }
      },
      "15": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 42
        }
      },
      "16": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 44
        }
      },
      "17": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 40
        }
      },
      "18": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "19": {
        start: {
          line: 40,
          column: 35
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "20": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 34
        }
      },
      "21": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 40
        }
      },
      "22": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 36
        }
      },
      "23": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 44
        }
      },
      "24": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "25": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 38
        }
      },
      "26": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 41
        }
      },
      "27": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 37
        }
      },
      "28": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 40
        }
      },
      "29": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "30": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 39
        }
      },
      "31": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 41
        }
      },
      "32": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "33": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 75
        }
      },
      "34": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 47
        }
      },
      "35": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 54
        }
      },
      "36": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "37": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 45
        }
      },
      "38": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 74,
          column: 39
        }
      },
      "39": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 52
        }
      },
      "40": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 39
        }
      },
      "41": {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 89,
          column: 53
        }
      },
      "42": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "43": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 83
        }
      },
      "44": {
        start: {
          line: 93,
          column: 26
        },
        end: {
          line: 93,
          column: 36
        }
      },
      "45": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "46": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 68
        }
      },
      "47": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 108,
          column: 14
        }
      },
      "48": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 46
        }
      },
      "49": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 47
        }
      },
      "50": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "51": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 60
        }
      },
      "52": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 22
        }
      },
      "53": {
        start: {
          line: 123,
          column: 24
        },
        end: {
          line: 123,
          column: 26
        }
      },
      "54": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "55": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "56": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "57": {
        start: {
          line: 127,
          column: 35
        },
        end: {
          line: 127,
          column: 69
        }
      },
      "58": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 41
        }
      },
      "59": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 132,
          column: 51
        }
      },
      "60": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 23
        }
      },
      "61": {
        start: {
          line: 141,
          column: 25
        },
        end: {
          line: 141,
          column: 62
        }
      },
      "62": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "63": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "64": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 38
        }
      },
      "65": {
        start: {
          line: 152,
          column: 22
        },
        end: {
          line: 152,
          column: 31
        }
      },
      "66": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "67": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 34
        }
      },
      "68": {
        start: {
          line: 155,
          column: 15
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "69": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 33
        }
      },
      "70": {
        start: {
          line: 157,
          column: 15
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "71": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 32
        }
      },
      "72": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "73": {
        start: {
          line: 170,
          column: 23
        },
        end: {
          line: 170,
          column: 57
        }
      },
      "74": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "75": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 70
        }
      },
      "76": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "77": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 69
        }
      },
      "78": {
        start: {
          line: 178,
          column: 25
        },
        end: {
          line: 178,
          column: 60
        }
      },
      "79": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "80": {
        start: {
          line: 180,
          column: 32
        },
        end: {
          line: 180,
          column: 109
        }
      },
      "81": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "82": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 76
        }
      },
      "83": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "84": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 85
        }
      },
      "85": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "86": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 189,
          column: 55
        }
      },
      "87": {
        start: {
          line: 191,
          column: 36
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "88": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "89": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 203,
          column: 43
        }
      },
      "90": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 27
        }
      },
      "91": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 209,
          column: 43
        }
      },
      "92": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 24
        }
      },
      "93": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "94": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 62
        }
      },
      "95": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 59
        }
      },
      "96": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 65
        }
      },
      "97": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 69
        }
      },
      "98": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 66
        }
      },
      "99": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 64
        }
      },
      "100": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 76
        }
      },
      "101": {
        start: {
          line: 234,
          column: 26
        },
        end: {
          line: 234,
          column: 36
        }
      },
      "102": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "103": {
        start: {
          line: 236,
          column: 29
        },
        end: {
          line: 236,
          column: 67
        }
      },
      "104": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "105": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 65
        }
      },
      "106": {
        start: {
          line: 241,
          column: 36
        },
        end: {
          line: 241,
          column: 89
        }
      },
      "107": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "108": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 28
        }
      },
      "109": {
        start: {
          line: 245,
          column: 33
        },
        end: {
          line: 245,
          column: 55
        }
      },
      "110": {
        start: {
          line: 247,
          column: 25
        },
        end: {
          line: 247,
          column: 34
        }
      },
      "111": {
        start: {
          line: 248,
          column: 27
        },
        end: {
          line: 248,
          column: 32
        }
      },
      "112": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "113": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 37
        }
      },
      "114": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 38
        }
      },
      "115": {
        start: {
          line: 252,
          column: 19
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "116": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 36
        }
      },
      "117": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 36
        }
      },
      "118": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 273,
          column: 14
        }
      },
      "119": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 290,
          column: 14
        }
      },
      "120": {
        start: {
          line: 294,
          column: 26
        },
        end: {
          line: 294,
          column: 36
        }
      },
      "121": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "122": {
        start: {
          line: 296,
          column: 28
        },
        end: {
          line: 296,
          column: 56
        }
      },
      "123": {
        start: {
          line: 297,
          column: 30
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "124": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 71
        }
      },
      "125": {
        start: {
          line: 304,
          column: 30
        },
        end: {
          line: 304,
          column: 73
        }
      },
      "126": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 307,
          column: 13
        }
      },
      "127": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 64
        }
      },
      "128": {
        start: {
          line: 308,
          column: 33
        },
        end: {
          line: 308,
          column: 55
        }
      },
      "129": {
        start: {
          line: 309,
          column: 25
        },
        end: {
          line: 309,
          column: 34
        }
      },
      "130": {
        start: {
          line: 310,
          column: 27
        },
        end: {
          line: 310,
          column: 32
        }
      },
      "131": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "132": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 36
        }
      },
      "133": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 36
        }
      },
      "134": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 332,
          column: 14
        }
      },
      "135": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 349,
          column: 14
        }
      },
      "136": {
        start: {
          line: 353,
          column: 26
        },
        end: {
          line: 353,
          column: 36
        }
      },
      "137": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "138": {
        start: {
          line: 355,
          column: 30
        },
        end: {
          line: 355,
          column: 112
        }
      },
      "139": {
        start: {
          line: 356,
          column: 32
        },
        end: {
          line: 356,
          column: 118
        }
      },
      "140": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 359,
          column: 13
        }
      },
      "141": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 74
        }
      },
      "142": {
        start: {
          line: 360,
          column: 33
        },
        end: {
          line: 360,
          column: 55
        }
      },
      "143": {
        start: {
          line: 361,
          column: 32
        },
        end: {
          line: 361,
          column: 82
        }
      },
      "144": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 378,
          column: 14
        }
      },
      "145": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 395,
          column: 14
        }
      },
      "146": {
        start: {
          line: 399,
          column: 26
        },
        end: {
          line: 399,
          column: 36
        }
      },
      "147": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "148": {
        start: {
          line: 401,
          column: 34
        },
        end: {
          line: 401,
          column: 87
        }
      },
      "149": {
        start: {
          line: 402,
          column: 34
        },
        end: {
          line: 402,
          column: 87
        }
      },
      "150": {
        start: {
          line: 403,
          column: 33
        },
        end: {
          line: 403,
          column: 84
        }
      },
      "151": {
        start: {
          line: 404,
          column: 27
        },
        end: {
          line: 408,
          column: 13
        }
      },
      "152": {
        start: {
          line: 409,
          column: 33
        },
        end: {
          line: 409,
          column: 80
        }
      },
      "153": {
        start: {
          line: 409,
          column: 56
        },
        end: {
          line: 409,
          column: 72
        }
      },
      "154": {
        start: {
          line: 410,
          column: 37
        },
        end: {
          line: 410,
          column: 89
        }
      },
      "155": {
        start: {
          line: 410,
          column: 60
        },
        end: {
          line: 410,
          column: 81
        }
      },
      "156": {
        start: {
          line: 411,
          column: 25
        },
        end: {
          line: 411,
          column: 34
        }
      },
      "157": {
        start: {
          line: 412,
          column: 27
        },
        end: {
          line: 412,
          column: 32
        }
      },
      "158": {
        start: {
          line: 413,
          column: 26
        },
        end: {
          line: 413,
          column: 60
        }
      },
      "159": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 422,
          column: 13
        }
      },
      "160": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 37
        }
      },
      "161": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 38
        }
      },
      "162": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 68
        }
      },
      "163": {
        start: {
          line: 418,
          column: 19
        },
        end: {
          line: 422,
          column: 13
        }
      },
      "164": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 419,
          column: 36
        }
      },
      "165": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 36
        }
      },
      "166": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 79
        }
      },
      "167": {
        start: {
          line: 423,
          column: 33
        },
        end: {
          line: 423,
          column: 55
        }
      },
      "168": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 450,
          column: 14
        }
      },
      "169": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 462,
          column: 14
        }
      },
      "170": {
        start: {
          line: 466,
          column: 26
        },
        end: {
          line: 466,
          column: 36
        }
      },
      "171": {
        start: {
          line: 468,
          column: 29
        },
        end: {
          line: 468,
          column: 57
        }
      },
      "172": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 488,
          column: 10
        }
      },
      "173": {
        start: {
          line: 491,
          column: 26
        },
        end: {
          line: 491,
          column: 36
        }
      },
      "174": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 524,
          column: 9
        }
      },
      "175": {
        start: {
          line: 494,
          column: 33
        },
        end: {
          line: 494,
          column: 60
        }
      },
      "176": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 511,
          column: 14
        }
      },
      "177": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 523,
          column: 14
        }
      },
      "178": {
        start: {
          line: 530,
          column: 33
        },
        end: {
          line: 530,
          column: 72
        }
      },
      "179": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 533,
          column: 9
        }
      },
      "180": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 532,
          column: 44
        }
      },
      "181": {
        start: {
          line: 535,
          column: 25
        },
        end: {
          line: 543,
          column: 34
        }
      },
      "182": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 542,
          column: 13
        }
      },
      "183": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 58
        }
      },
      "184": {
        start: {
          line: 539,
          column: 16
        },
        end: {
          line: 541,
          column: 47
        }
      },
      "185": {
        start: {
          line: 544,
          column: 8
        },
        end: {
          line: 544,
          column: 58
        }
      },
      "186": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 574,
          column: 9
        }
      },
      "187": {
        start: {
          line: 551,
          column: 12
        },
        end: {
          line: 554,
          column: 15
        }
      },
      "188": {
        start: {
          line: 556,
          column: 38
        },
        end: {
          line: 556,
          column: 73
        }
      },
      "189": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 560,
          column: 15
        }
      },
      "190": {
        start: {
          line: 562,
          column: 12
        },
        end: {
          line: 568,
          column: 13
        }
      },
      "191": {
        start: {
          line: 563,
          column: 16
        },
        end: {
          line: 567,
          column: 19
        }
      },
      "192": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 573,
          column: 43
        }
      },
      "193": {
        start: {
          line: 579,
          column: 32
        },
        end: {
          line: 579,
          column: 156
        }
      },
      "194": {
        start: {
          line: 579,
          column: 91
        },
        end: {
          line: 579,
          column: 155
        }
      },
      "195": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 600,
          column: 9
        }
      },
      "196": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 599,
          column: 13
        }
      },
      "197": {
        start: {
          line: 582,
          column: 16
        },
        end: {
          line: 586,
          column: 47
        }
      },
      "198": {
        start: {
          line: 587,
          column: 32
        },
        end: {
          line: 587,
          column: 75
        }
      },
      "199": {
        start: {
          line: 588,
          column: 16
        },
        end: {
          line: 593,
          column: 17
        }
      },
      "200": {
        start: {
          line: 589,
          column: 20
        },
        end: {
          line: 591,
          column: 51
        }
      },
      "201": {
        start: {
          line: 592,
          column: 20
        },
        end: {
          line: 592,
          column: 26
        }
      },
      "202": {
        start: {
          line: 595,
          column: 16
        },
        end: {
          line: 598,
          column: 47
        }
      },
      "203": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 627,
          column: 11
        }
      },
      "204": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 650,
          column: 11
        }
      },
      "205": {
        start: {
          line: 652,
          column: 8
        },
        end: {
          line: 673,
          column: 11
        }
      },
      "206": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 696,
          column: 11
        }
      },
      "207": {
        start: {
          line: 702,
          column: 8
        },
        end: {
          line: 717,
          column: 11
        }
      },
      "208": {
        start: {
          line: 712,
          column: 16
        },
        end: {
          line: 712,
          column: 67
        }
      },
      "209": {
        start: {
          line: 713,
          column: 16
        },
        end: {
          line: 713,
          column: 67
        }
      },
      "210": {
        start: {
          line: 714,
          column: 16
        },
        end: {
          line: 714,
          column: 65
        }
      },
      "211": {
        start: {
          line: 715,
          column: 16
        },
        end: {
          line: 715,
          column: 28
        }
      },
      "212": {
        start: {
          line: 719,
          column: 8
        },
        end: {
          line: 732,
          column: 11
        }
      },
      "213": {
        start: {
          line: 730,
          column: 16
        },
        end: {
          line: 730,
          column: 28
        }
      },
      "214": {
        start: {
          line: 738,
          column: 8
        },
        end: {
          line: 740,
          column: 9
        }
      },
      "215": {
        start: {
          line: 739,
          column: 12
        },
        end: {
          line: 739,
          column: 36
        }
      },
      "216": {
        start: {
          line: 741,
          column: 8
        },
        end: {
          line: 741,
          column: 36
        }
      },
      "217": {
        start: {
          line: 744,
          column: 31
        },
        end: {
          line: 744,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 34
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 34
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 33,
            column: 33
          },
          end: {
            line: 33,
            column: 34
          }
        },
        loc: {
          start: {
            line: 33,
            column: 56
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 33
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 40,
            column: 35
          },
          end: {
            line: 40,
            column: 36
          }
        },
        loc: {
          start: {
            line: 40,
            column: 60
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 40
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 17
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 48
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 57
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 65,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        },
        loc: {
          start: {
            line: 65,
            column: 34
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 65
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 78,
            column: 6
          },
          end: {
            line: 78,
            column: 7
          }
        },
        loc: {
          start: {
            line: 78,
            column: 37
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 78
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 88,
            column: 6
          },
          end: {
            line: 88,
            column: 7
          }
        },
        loc: {
          start: {
            line: 88,
            column: 36
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 88
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 122,
            column: 6
          },
          end: {
            line: 122,
            column: 7
          }
        },
        loc: {
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 122
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 140,
            column: 6
          },
          end: {
            line: 140,
            column: 7
          }
        },
        loc: {
          start: {
            line: 140,
            column: 24
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 140
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 148,
            column: 25
          },
          end: {
            line: 148,
            column: 26
          }
        },
        loc: {
          start: {
            line: 148,
            column: 36
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 148
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 169,
            column: 6
          },
          end: {
            line: 169,
            column: 7
          }
        },
        loc: {
          start: {
            line: 169,
            column: 52
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 169
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 215,
            column: 6
          },
          end: {
            line: 215,
            column: 7
          }
        },
        loc: {
          start: {
            line: 215,
            column: 48
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 215
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 38
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 233
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 35
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 293
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 41
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 352
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 398,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        },
        loc: {
          start: {
            line: 398,
            column: 45
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 398
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 409,
            column: 47
          },
          end: {
            line: 409,
            column: 48
          }
        },
        loc: {
          start: {
            line: 409,
            column: 56
          },
          end: {
            line: 409,
            column: 72
          }
        },
        line: 409
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 410,
            column: 51
          },
          end: {
            line: 410,
            column: 52
          }
        },
        loc: {
          start: {
            line: 410,
            column: 60
          },
          end: {
            line: 410,
            column: 81
          }
        },
        line: 410
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 465,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        loc: {
          start: {
            line: 465,
            column: 42
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 465
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 490,
            column: 4
          },
          end: {
            line: 490,
            column: 5
          }
        },
        loc: {
          start: {
            line: 490,
            column: 40
          },
          end: {
            line: 525,
            column: 5
          }
        },
        line: 490
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 528,
            column: 6
          },
          end: {
            line: 528,
            column: 7
          }
        },
        loc: {
          start: {
            line: 528,
            column: 34
          },
          end: {
            line: 545,
            column: 5
          }
        },
        line: 528
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 535,
            column: 37
          },
          end: {
            line: 535,
            column: 38
          }
        },
        loc: {
          start: {
            line: 535,
            column: 47
          },
          end: {
            line: 543,
            column: 9
          }
        },
        line: 535
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 548,
            column: 6
          },
          end: {
            line: 548,
            column: 7
          }
        },
        loc: {
          start: {
            line: 548,
            column: 40
          },
          end: {
            line: 575,
            column: 5
          }
        },
        line: 548
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 578,
            column: 6
          },
          end: {
            line: 578,
            column: 7
          }
        },
        loc: {
          start: {
            line: 578,
            column: 49
          },
          end: {
            line: 601,
            column: 5
          }
        },
        line: 578
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 579,
            column: 81
          },
          end: {
            line: 579,
            column: 82
          }
        },
        loc: {
          start: {
            line: 579,
            column: 91
          },
          end: {
            line: 579,
            column: 155
          }
        },
        line: 579
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 604,
            column: 6
          },
          end: {
            line: 604,
            column: 7
          }
        },
        loc: {
          start: {
            line: 604,
            column: 32
          },
          end: {
            line: 697,
            column: 5
          }
        },
        line: 604
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 700,
            column: 6
          },
          end: {
            line: 700,
            column: 7
          }
        },
        loc: {
          start: {
            line: 700,
            column: 34
          },
          end: {
            line: 733,
            column: 5
          }
        },
        line: 700
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 711,
            column: 20
          },
          end: {
            line: 711,
            column: 21
          }
        },
        loc: {
          start: {
            line: 711,
            column: 30
          },
          end: {
            line: 716,
            column: 13
          }
        },
        line: 711
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 728,
            column: 20
          },
          end: {
            line: 728,
            column: 21
          }
        },
        loc: {
          start: {
            line: 728,
            column: 30
          },
          end: {
            line: 731,
            column: 13
          }
        },
        line: 728
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 736,
            column: 6
          },
          end: {
            line: 736,
            column: 7
          }
        },
        loc: {
          start: {
            line: 736,
            column: 16
          },
          end: {
            line: 742,
            column: 5
          }
        },
        line: 736
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "1": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "2": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 26
          }
        }, {
          start: {
            line: 67,
            column: 30
          },
          end: {
            line: 67,
            column: 49
          }
        }],
        line: 67
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 49
          },
          end: {
            line: 103,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 74
          },
          end: {
            line: 103,
            column: 87
          }
        }, {
          start: {
            line: 103,
            column: 90
          },
          end: {
            line: 103,
            column: 105
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 105,
            column: 27
          },
          end: {
            line: 105,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 52
          },
          end: {
            line: 105,
            column: 65
          }
        }, {
          start: {
            line: 105,
            column: 68
          },
          end: {
            line: 105,
            column: 83
          }
        }],
        line: 105
      },
      "6": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "7": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 115,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 115,
            column: 41
          }
        }, {
          start: {
            line: 115,
            column: 45
          },
          end: {
            line: 115,
            column: 63
          }
        }],
        line: 115
      },
      "8": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "9": {
        loc: {
          start: {
            line: 131,
            column: 31
          },
          end: {
            line: 131,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 56
          },
          end: {
            line: 131,
            column: 69
          }
        }, {
          start: {
            line: 131,
            column: 72
          },
          end: {
            line: 131,
            column: 87
          }
        }],
        line: 131
      },
      "10": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: 155,
            column: 15
          },
          end: {
            line: 159,
            column: 9
          }
        }],
        line: 153
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 15
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 15
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 159,
            column: 9
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "15": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "16": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "17": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "18": {
        loc: {
          start: {
            line: 191,
            column: 36
          },
          end: {
            line: 194,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 36
          },
          end: {
            line: 191,
            column: 71
          }
        }, {
          start: {
            line: 191,
            column: 75
          },
          end: {
            line: 194,
            column: 13
          }
        }],
        line: 191
      },
      "19": {
        loc: {
          start: {
            line: 196,
            column: 23
          },
          end: {
            line: 196,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 33
          },
          end: {
            line: 196,
            column: 34
          }
        }, {
          start: {
            line: 196,
            column: 37
          },
          end: {
            line: 196,
            column: 62
          }
        }],
        line: 196
      },
      "20": {
        loc: {
          start: {
            line: 207,
            column: 23
          },
          end: {
            line: 207,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 48
          },
          end: {
            line: 207,
            column: 61
          }
        }, {
          start: {
            line: 207,
            column: 64
          },
          end: {
            line: 207,
            column: 79
          }
        }],
        line: 207
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 62
          }
        }, {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 220,
            column: 59
          }
        }, {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 222,
            column: 65
          }
        }, {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 69
          }
        }, {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 226,
            column: 66
          }
        }, {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 228,
            column: 64
          }
        }, {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 230,
            column: 76
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "23": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "24": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        }, {
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 255,
            column: 13
          }
        }],
        line: 249
      },
      "25": {
        loc: {
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 255,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 255,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "26": {
        loc: {
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 263,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 263,
            column: 46
          }
        }, {
          start: {
            line: 263,
            column: 50
          },
          end: {
            line: 263,
            column: 51
          }
        }],
        line: 263
      },
      "27": {
        loc: {
          start: {
            line: 271,
            column: 33
          },
          end: {
            line: 271,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 33
          },
          end: {
            line: 271,
            column: 45
          }
        }, {
          start: {
            line: 271,
            column: 49
          },
          end: {
            line: 271,
            column: 50
          }
        }],
        line: 271
      },
      "28": {
        loc: {
          start: {
            line: 280,
            column: 44
          },
          end: {
            line: 280,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 69
          },
          end: {
            line: 280,
            column: 82
          }
        }, {
          start: {
            line: 280,
            column: 85
          },
          end: {
            line: 280,
            column: 100
          }
        }],
        line: 280
      },
      "29": {
        loc: {
          start: {
            line: 282,
            column: 27
          },
          end: {
            line: 282,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 52
          },
          end: {
            line: 282,
            column: 65
          }
        }, {
          start: {
            line: 282,
            column: 68
          },
          end: {
            line: 282,
            column: 83
          }
        }],
        line: 282
      },
      "30": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "31": {
        loc: {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 305,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 305,
            column: 26
          }
        }, {
          start: {
            line: 305,
            column: 30
          },
          end: {
            line: 305,
            column: 53
          }
        }],
        line: 305
      },
      "32": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "33": {
        loc: {
          start: {
            line: 339,
            column: 41
          },
          end: {
            line: 339,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 339,
            column: 66
          },
          end: {
            line: 339,
            column: 79
          }
        }, {
          start: {
            line: 339,
            column: 82
          },
          end: {
            line: 339,
            column: 97
          }
        }],
        line: 339
      },
      "34": {
        loc: {
          start: {
            line: 341,
            column: 27
          },
          end: {
            line: 341,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 341,
            column: 52
          },
          end: {
            line: 341,
            column: 65
          }
        }, {
          start: {
            line: 341,
            column: 68
          },
          end: {
            line: 341,
            column: 83
          }
        }],
        line: 341
      },
      "35": {
        loc: {
          start: {
            line: 355,
            column: 30
          },
          end: {
            line: 355,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 30
          },
          end: {
            line: 355,
            column: 69
          }
        }, {
          start: {
            line: 355,
            column: 73
          },
          end: {
            line: 355,
            column: 112
          }
        }],
        line: 355
      },
      "36": {
        loc: {
          start: {
            line: 356,
            column: 32
          },
          end: {
            line: 356,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 32
          },
          end: {
            line: 356,
            column: 73
          }
        }, {
          start: {
            line: 356,
            column: 77
          },
          end: {
            line: 356,
            column: 118
          }
        }],
        line: 356
      },
      "37": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 359,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 359,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "38": {
        loc: {
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 357,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 357,
            column: 26
          }
        }, {
          start: {
            line: 357,
            column: 30
          },
          end: {
            line: 357,
            column: 42
          }
        }],
        line: 357
      },
      "39": {
        loc: {
          start: {
            line: 361,
            column: 32
          },
          end: {
            line: 361,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 361,
            column: 61
          },
          end: {
            line: 361,
            column: 67
          }
        }, {
          start: {
            line: 361,
            column: 70
          },
          end: {
            line: 361,
            column: 82
          }
        }],
        line: 361
      },
      "40": {
        loc: {
          start: {
            line: 385,
            column: 47
          },
          end: {
            line: 385,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 385,
            column: 72
          },
          end: {
            line: 385,
            column: 85
          }
        }, {
          start: {
            line: 385,
            column: 88
          },
          end: {
            line: 385,
            column: 103
          }
        }],
        line: 385
      },
      "41": {
        loc: {
          start: {
            line: 387,
            column: 27
          },
          end: {
            line: 387,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 387,
            column: 52
          },
          end: {
            line: 387,
            column: 65
          }
        }, {
          start: {
            line: 387,
            column: 68
          },
          end: {
            line: 387,
            column: 83
          }
        }],
        line: 387
      },
      "42": {
        loc: {
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        }, {
          start: {
            line: 418,
            column: 19
          },
          end: {
            line: 422,
            column: 13
          }
        }],
        line: 414
      },
      "43": {
        loc: {
          start: {
            line: 418,
            column: 19
          },
          end: {
            line: 422,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 19
          },
          end: {
            line: 422,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "44": {
        loc: {
          start: {
            line: 445,
            column: 33
          },
          end: {
            line: 449,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 445,
            column: 52
          },
          end: {
            line: 449,
            column: 17
          }
        }, {
          start: {
            line: 449,
            column: 20
          },
          end: {
            line: 449,
            column: 29
          }
        }],
        line: 445
      },
      "45": {
        loc: {
          start: {
            line: 457,
            column: 52
          },
          end: {
            line: 457,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 457,
            column: 77
          },
          end: {
            line: 457,
            column: 90
          }
        }, {
          start: {
            line: 457,
            column: 93
          },
          end: {
            line: 457,
            column: 108
          }
        }],
        line: 457
      },
      "46": {
        loc: {
          start: {
            line: 459,
            column: 27
          },
          end: {
            line: 459,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 459,
            column: 52
          },
          end: {
            line: 459,
            column: 65
          }
        }, {
          start: {
            line: 459,
            column: 68
          },
          end: {
            line: 459,
            column: 83
          }
        }],
        line: 459
      },
      "47": {
        loc: {
          start: {
            line: 518,
            column: 47
          },
          end: {
            line: 518,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 518,
            column: 72
          },
          end: {
            line: 518,
            column: 85
          }
        }, {
          start: {
            line: 518,
            column: 88
          },
          end: {
            line: 518,
            column: 103
          }
        }],
        line: 518
      },
      "48": {
        loc: {
          start: {
            line: 520,
            column: 27
          },
          end: {
            line: 520,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 520,
            column: 52
          },
          end: {
            line: 520,
            column: 65
          }
        }, {
          start: {
            line: 520,
            column: 68
          },
          end: {
            line: 520,
            column: 83
          }
        }],
        line: 520
      },
      "49": {
        loc: {
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 533,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 533,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      },
      "50": {
        loc: {
          start: {
            line: 540,
            column: 27
          },
          end: {
            line: 540,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 540,
            column: 52
          },
          end: {
            line: 540,
            column: 65
          }
        }, {
          start: {
            line: 540,
            column: 68
          },
          end: {
            line: 540,
            column: 83
          }
        }],
        line: 540
      },
      "51": {
        loc: {
          start: {
            line: 556,
            column: 38
          },
          end: {
            line: 556,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 556,
            column: 68
          },
          end: {
            line: 556,
            column: 69
          }
        }, {
          start: {
            line: 556,
            column: 72
          },
          end: {
            line: 556,
            column: 73
          }
        }],
        line: 556
      },
      "52": {
        loc: {
          start: {
            line: 562,
            column: 12
          },
          end: {
            line: 568,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 12
          },
          end: {
            line: 568,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 562
      },
      "53": {
        loc: {
          start: {
            line: 562,
            column: 16
          },
          end: {
            line: 562,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 562,
            column: 16
          },
          end: {
            line: 562,
            column: 45
          }
        }, {
          start: {
            line: 562,
            column: 49
          },
          end: {
            line: 562,
            column: 79
          }
        }],
        line: 562
      },
      "54": {
        loc: {
          start: {
            line: 572,
            column: 23
          },
          end: {
            line: 572,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 572,
            column: 48
          },
          end: {
            line: 572,
            column: 61
          }
        }, {
          start: {
            line: 572,
            column: 64
          },
          end: {
            line: 572,
            column: 79
          }
        }],
        line: 572
      },
      "55": {
        loc: {
          start: {
            line: 579,
            column: 91
          },
          end: {
            line: 579,
            column: 155
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 579,
            column: 91
          },
          end: {
            line: 579,
            column: 117
          }
        }, {
          start: {
            line: 579,
            column: 121
          },
          end: {
            line: 579,
            column: 137
          }
        }, {
          start: {
            line: 579,
            column: 141
          },
          end: {
            line: 579,
            column: 155
          }
        }],
        line: 579
      },
      "56": {
        loc: {
          start: {
            line: 588,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 588,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 588
      },
      "57": {
        loc: {
          start: {
            line: 597,
            column: 27
          },
          end: {
            line: 597,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 597,
            column: 52
          },
          end: {
            line: 597,
            column: 65
          }
        }, {
          start: {
            line: 597,
            column: 68
          },
          end: {
            line: 597,
            column: 83
          }
        }],
        line: 597
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0, 0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\health-checks.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE HEALTH CHECKS SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { CacheUtils } from '@/lib/cache-manager';\r\nimport { \r\n  mercadoPagoCriticalBreaker, \r\n  mercadoPagoStandardBreaker, \r\n  webhookProcessingBreaker \r\n} from '@/lib/integrations/mercadopago/circuit-breaker';\r\nimport { recordPerformanceMetric, recordSecurityMetric } from './enterprise-metrics';\r\n\r\n// Estados de salud\r\nexport enum HealthStatus {\r\n  HEALTHY = 'healthy',\r\n  DEGRADED = 'degraded',\r\n  UNHEALTHY = 'unhealthy',\r\n  UNKNOWN = 'unknown'\r\n}\r\n\r\n// Severidad de problemas\r\nexport enum HealthSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n// Resultado de health check\r\nexport interface HealthCheckResult {\r\n  service: string;\r\n  status: HealthStatus;\r\n  severity: HealthSeverity;\r\n  responseTime: number;\r\n  message: string;\r\n  details: Record<string, any>;\r\n  lastChecked: string;\r\n  nextCheck?: string;\r\n  recommendations?: string[];\r\n  metrics?: Record<string, number>;\r\n}\r\n\r\n// Configuraci\xF3n de health check\r\nexport interface HealthCheckConfig {\r\n  service: string;\r\n  enabled: boolean;\r\n  interval: number; // segundos\r\n  timeout: number; // segundos\r\n  retries: number;\r\n  thresholds: {\r\n    responseTime: {\r\n      warning: number;\r\n      critical: number;\r\n    };\r\n    errorRate: {\r\n      warning: number;\r\n      critical: number;\r\n    };\r\n  };\r\n  dependencies: string[];\r\n  autoRecover: boolean;\r\n  notifications: string[];\r\n}\r\n\r\n// Acci\xF3n de recuperaci\xF3n\r\nexport interface RecoveryAction {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  service: string;\r\n  enabled: boolean;\r\n  automatic: boolean;\r\n  cooldownMinutes: number;\r\n  maxRetries: number;\r\n  action: (config?: any) => Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Sistema Enterprise de Health Checks\r\n */\r\nexport class EnterpriseHealthSystem {\r\n  private static instance: EnterpriseHealthSystem;\r\n  private healthChecks: Map<string, HealthCheckConfig> = new Map();\r\n  private recoveryActions: Map<string, RecoveryAction> = new Map();\r\n  private lastResults: Map<string, HealthCheckResult> = new Map();\r\n  private checkIntervals: Map<string, NodeJS.Timeout> = new Map();\r\n  private recoveryAttempts: Map<string, { count: number; lastAttempt: Date }> = new Map();\r\n\r\n  constructor() {\r\n    this.initializeDefaultChecks();\r\n    this.initializeRecoveryActions();\r\n  }\r\n\r\n  static getInstance(): EnterpriseHealthSystem {\r\n    if (!EnterpriseHealthSystem.instance) {\r\n      EnterpriseHealthSystem.instance = new EnterpriseHealthSystem();\r\n    }\r\n    return EnterpriseHealthSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra un health check\r\n   */\r\n  registerHealthCheck(config: HealthCheckConfig): void {\r\n    this.healthChecks.set(config.service, config);\r\n    \r\n    if (config.enabled && config.interval > 0) {\r\n      this.scheduleHealthCheck(config);\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, `Health check registered: ${config.service}`, {\r\n      interval: config.interval,\r\n      enabled: config.enabled,\r\n      autoRecover: config.autoRecover\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Registra una acci\xF3n de recuperaci\xF3n\r\n   */\r\n  registerRecoveryAction(action: RecoveryAction): void {\r\n    this.recoveryActions.set(action.id, action);\r\n    \r\n    logger.info(LogLevel.INFO, `Recovery action registered: ${action.id}`, {\r\n      service: action.service,\r\n      automatic: action.automatic,\r\n      enabled: action.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Ejecuta health check espec\xEDfico\r\n   */\r\n  async runHealthCheck(service: string): Promise<HealthCheckResult> {\r\n    const config = this.healthChecks.get(service);\r\n    if (!config) {\r\n      throw new Error(`Health check not configured for service: ${service}`);\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    let result: HealthCheckResult;\r\n\r\n    try {\r\n      result = await this.executeHealthCheck(service, config);\r\n    } catch (error) {\r\n      result = {\r\n        service,\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    // Almacenar resultado\r\n    this.lastResults.set(service, result);\r\n\r\n    // Registrar m\xE9tricas\r\n    await this.recordHealthMetrics(result);\r\n\r\n    // Verificar si necesita recuperaci\xF3n autom\xE1tica\r\n    if (result.status === HealthStatus.UNHEALTHY && config.autoRecover) {\r\n      await this.attemptAutoRecovery(service, result);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todos los health checks\r\n   */\r\n  async runAllHealthChecks(): Promise<HealthCheckResult[]> {\r\n    const results: HealthCheckResult[] = [];\r\n    \r\n    for (const [service, config] of this.healthChecks.entries()) {\r\n      if (config.enabled) {\r\n        try {\r\n          const result = await this.runHealthCheck(service);\r\n          results.push(result);\r\n        } catch (error) {\r\n          logger.error(LogLevel.ERROR, `Failed to run health check for ${service}`, {\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          }, LogCategory.SYSTEM);\r\n        }\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado general del sistema\r\n   */\r\n  getSystemHealth(): {\r\n    overall: HealthStatus;\r\n    services: HealthCheckResult[];\r\n    summary: Record<HealthStatus, number>;\r\n    lastUpdated: string;\r\n  } {\r\n    const services = Array.from(this.lastResults.values());\r\n    \r\n    const summary = {\r\n      [HealthStatus.HEALTHY]: 0,\r\n      [HealthStatus.DEGRADED]: 0,\r\n      [HealthStatus.UNHEALTHY]: 0,\r\n      [HealthStatus.UNKNOWN]: 0\r\n    };\r\n\r\n    services.forEach(service => {\r\n      summary[service.status]++;\r\n    });\r\n\r\n    // Determinar estado general\r\n    let overall = HealthStatus.HEALTHY;\r\n    if (summary[HealthStatus.UNHEALTHY] > 0) {\r\n      overall = HealthStatus.UNHEALTHY;\r\n    } else if (summary[HealthStatus.DEGRADED] > 0) {\r\n      overall = HealthStatus.DEGRADED;\r\n    } else if (summary[HealthStatus.UNKNOWN] > 0) {\r\n      overall = HealthStatus.UNKNOWN;\r\n    }\r\n\r\n    return {\r\n      overall,\r\n      services,\r\n      summary,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ejecuta acci\xF3n de recuperaci\xF3n manual\r\n   */\r\n  async executeRecoveryAction(actionId: string, config?: any): Promise<boolean> {\r\n    const action = this.recoveryActions.get(actionId);\r\n    if (!action) {\r\n      throw new Error(`Recovery action not found: ${actionId}`);\r\n    }\r\n\r\n    if (!action.enabled) {\r\n      throw new Error(`Recovery action disabled: ${actionId}`);\r\n    }\r\n\r\n    // Verificar cooldown\r\n    const attempts = this.recoveryAttempts.get(actionId);\r\n    if (attempts) {\r\n      const cooldownEnd = new Date(attempts.lastAttempt.getTime() + action.cooldownMinutes * 60 * 1000);\r\n      if (new Date() < cooldownEnd) {\r\n        throw new Error(`Recovery action in cooldown: ${actionId}`);\r\n      }\r\n\r\n      if (attempts.count >= action.maxRetries) {\r\n        throw new Error(`Recovery action max retries exceeded: ${actionId}`);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const success = await action.action(config);\r\n      \r\n      // Actualizar intentos\r\n      const currentAttempts = this.recoveryAttempts.get(actionId) || { count: 0, lastAttempt: new Date() };\r\n      this.recoveryAttempts.set(actionId, {\r\n        count: success ? 0 : currentAttempts.count + 1,\r\n        lastAttempt: new Date()\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, `Recovery action executed: ${actionId}`, {\r\n        success,\r\n        service: action.service,\r\n        automatic: false\r\n      }, LogCategory.SYSTEM);\r\n\r\n      return success;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Recovery action failed: ${actionId}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        service: action.service\r\n      }, LogCategory.SYSTEM);\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implementaciones de health checks espec\xEDficos\r\n   */\r\n  private async executeHealthCheck(service: string, config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    switch (service) {\r\n      case 'database':\r\n        return await this.checkDatabaseHealth(config);\r\n      case 'cache':\r\n        return await this.checkCacheHealth(config);\r\n      case 'mercadopago':\r\n        return await this.checkMercadoPagoHealth(config);\r\n      case 'circuit_breakers':\r\n        return await this.checkCircuitBreakersHealth(config);\r\n      case 'external_apis':\r\n        return await this.checkExternalAPIsHealth(config);\r\n      case 'file_system':\r\n        return await this.checkFileSystemHealth(config);\r\n      default:\r\n        throw new Error(`Unknown health check service: ${service}`);\r\n    }\r\n  }\r\n\r\n  private async checkDatabaseHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {\r\n        throw new Error('Supabase client not available');\r\n      }\r\n\r\n      // Test de conectividad\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .select('id')\r\n        .limit(1);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Determinar estado basado en tiempo de respuesta\r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      \r\n      if (responseTime > config.thresholds.responseTime.critical) {\r\n        status = HealthStatus.UNHEALTHY;\r\n        severity = HealthSeverity.CRITICAL;\r\n      } else if (responseTime > config.thresholds.responseTime.warning) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n      }\r\n\r\n      return {\r\n        service: 'database',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message: `Database responding in ${responseTime}ms`,\r\n        details: {\r\n          recordsFound: data?.length || 0,\r\n          connectionPool: 'active',\r\n          queryType: 'SELECT'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          recordCount: data?.length || 0\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'database',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Database error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Check database connection',\r\n          'Verify Supabase credentials',\r\n          'Check network connectivity'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkCacheHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const testKey = `health_check_${Date.now()}`;\r\n      const testValue = { test: true, timestamp: Date.now() };\r\n\r\n      // Test write\r\n      await CacheUtils.set(testKey, testValue, 10);\r\n      \r\n      // Test read\r\n      const retrieved = await CacheUtils.get(testKey);\r\n      \r\n      if (!retrieved || retrieved.test !== true) {\r\n        throw new Error('Cache read/write test failed');\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      \r\n      if (responseTime > 500) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n      }\r\n\r\n      return {\r\n        service: 'cache',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message: `Cache responding in ${responseTime}ms`,\r\n        details: {\r\n          readWrite: 'success',\r\n          testKey,\r\n          provider: 'redis'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          operationsPerSecond: 1000 / responseTime\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'cache',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Cache error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Check Redis connection',\r\n          'Verify cache configuration',\r\n          'Check memory usage'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkMercadoPagoHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const publicKey = process.env.MERCADOPAGO_PUBLIC_KEY_PROD || process.env.MERCADOPAGO_PUBLIC_KEY_TEST;\r\n      const accessToken = process.env.MERCADOPAGO_ACCESS_TOKEN_PROD || process.env.MERCADOPAGO_ACCESS_TOKEN_TEST;\r\n\r\n      if (!publicKey || !accessToken) {\r\n        throw new Error('MercadoPago credentials not configured');\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      const environment = publicKey.includes('TEST') ? 'test' : 'production';\r\n\r\n      return {\r\n        service: 'mercadopago',\r\n        status: HealthStatus.HEALTHY,\r\n        severity: HealthSeverity.LOW,\r\n        responseTime,\r\n        message: `MercadoPago credentials configured for ${environment}`,\r\n        details: {\r\n          publicKeyConfigured: !!publicKey,\r\n          accessTokenConfigured: !!accessToken,\r\n          environment\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          configurationScore: 100\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'mercadopago',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `MercadoPago error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Configure MercadoPago credentials',\r\n          'Check environment variables',\r\n          'Verify API keys'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkCircuitBreakersHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const criticalState = mercadoPagoCriticalBreaker.getState();\r\n      const standardState = mercadoPagoStandardBreaker.getState();\r\n      const webhookState = webhookProcessingBreaker.getState();\r\n\r\n      const states = [criticalState, standardState, webhookState];\r\n      const openBreakers = states.filter(state => state === 'open').length;\r\n      const halfOpenBreakers = states.filter(state => state === 'half-open').length;\r\n\r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      let message = 'All circuit breakers operational';\r\n\r\n      if (openBreakers > 0) {\r\n        status = HealthStatus.UNHEALTHY;\r\n        severity = HealthSeverity.CRITICAL;\r\n        message = `${openBreakers} circuit breaker(s) open`;\r\n      } else if (halfOpenBreakers > 0) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n        message = `${halfOpenBreakers} circuit breaker(s) in recovery`;\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      return {\r\n        service: 'circuit_breakers',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message,\r\n        details: {\r\n          mercadopago_critical: criticalState,\r\n          mercadopago_standard: standardState,\r\n          webhook_processing: webhookState,\r\n          totalBreakers: 3,\r\n          openBreakers,\r\n          halfOpenBreakers\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          healthScore: ((3 - openBreakers) / 3) * 100,\r\n          openBreakers,\r\n          halfOpenBreakers\r\n        },\r\n        recommendations: openBreakers > 0 ? [\r\n          'Check service dependencies',\r\n          'Review error logs',\r\n          'Consider manual reset if appropriate'\r\n        ] : undefined\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'circuit_breakers',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Circuit breakers error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkExternalAPIsHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // Simulaci\xF3n de check de APIs externas\r\n    const responseTime = Date.now() - startTime + 150; // Simular latencia\r\n\r\n    return {\r\n      service: 'external_apis',\r\n      status: HealthStatus.HEALTHY,\r\n      severity: HealthSeverity.LOW,\r\n      responseTime,\r\n      message: 'External APIs responding normally',\r\n      details: {\r\n        checkedAPIs: ['mercadopago', 'vercel'],\r\n        successRate: 100\r\n      },\r\n      lastChecked: new Date().toISOString(),\r\n      nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n      metrics: {\r\n        responseTime,\r\n        successRate: 100\r\n      }\r\n    };\r\n  }\r\n\r\n  private async checkFileSystemHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Verificar espacio en disco y permisos b\xE1sicos\r\n      const responseTime = Date.now() - startTime + 50;\r\n\r\n      return {\r\n        service: 'file_system',\r\n        status: HealthStatus.HEALTHY,\r\n        severity: HealthSeverity.LOW,\r\n        responseTime,\r\n        message: 'File system accessible',\r\n        details: {\r\n          diskSpace: 'sufficient',\r\n          permissions: 'ok'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          diskUsage: 65\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'file_system',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `File system error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Programa health check autom\xE1tico\r\n   */\r\n  private scheduleHealthCheck(config: HealthCheckConfig): void {\r\n    // Limpiar intervalo existente\r\n    const existingInterval = this.checkIntervals.get(config.service);\r\n    if (existingInterval) {\r\n      clearInterval(existingInterval);\r\n    }\r\n\r\n    // Programar nuevo intervalo\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.runHealthCheck(config.service);\r\n      } catch (error) {\r\n        logger.error(LogLevel.ERROR, `Scheduled health check failed: ${config.service}`, {\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    }, config.interval * 1000);\r\n\r\n    this.checkIntervals.set(config.service, interval);\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de health check\r\n   */\r\n  private async recordHealthMetrics(result: HealthCheckResult): Promise<void> {\r\n    try {\r\n      // Registrar m\xE9tricas de performance\r\n      await recordPerformanceMetric(\r\n        `health.${result.service}.response_time`,\r\n        result.responseTime,\r\n        true,\r\n        { service: result.service, status: result.status }\r\n      );\r\n\r\n      // Registrar m\xE9tricas de disponibilidad\r\n      const availabilityScore = result.status === HealthStatus.HEALTHY ? 1 : 0;\r\n      await recordPerformanceMetric(\r\n        `health.${result.service}.availability`,\r\n        availabilityScore,\r\n        true,\r\n        { service: result.service, status: result.status }\r\n      );\r\n\r\n      // Registrar eventos de seguridad si hay problemas\r\n      if (result.status === HealthStatus.UNHEALTHY && result.severity === HealthSeverity.CRITICAL) {\r\n        await recordSecurityMetric(\r\n          'health_check_critical_failure',\r\n          'high',\r\n          { \r\n            service: result.service,\r\n            message: result.message,\r\n            severity: result.severity\r\n          }\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to record health metrics', {\r\n        service: result.service,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Intenta recuperaci\xF3n autom\xE1tica\r\n   */\r\n  private async attemptAutoRecovery(service: string, result: HealthCheckResult): Promise<void> {\r\n    const recoveryActions = Array.from(this.recoveryActions.values())\r\n      .filter(action => action.service === service && action.automatic && action.enabled);\r\n\r\n    for (const action of recoveryActions) {\r\n      try {\r\n        logger.info(LogLevel.INFO, `Attempting auto-recovery: ${action.id}`, {\r\n          service,\r\n          status: result.status,\r\n          severity: result.severity\r\n        }, LogCategory.SYSTEM);\r\n\r\n        const success = await this.executeRecoveryAction(action.id);\r\n        \r\n        if (success) {\r\n          logger.info(LogLevel.INFO, `Auto-recovery successful: ${action.id}`, {\r\n            service\r\n          }, LogCategory.SYSTEM);\r\n          break; // Salir si la recuperaci\xF3n fue exitosa\r\n        }\r\n\r\n      } catch (error) {\r\n        logger.error(LogLevel.ERROR, `Auto-recovery failed: ${action.id}`, {\r\n          service,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inicializa health checks por defecto\r\n   */\r\n  private initializeDefaultChecks(): void {\r\n    // Database health check\r\n    this.registerHealthCheck({\r\n      service: 'database',\r\n      enabled: true,\r\n      interval: 60, // 1 minuto\r\n      timeout: 5,\r\n      retries: 3,\r\n      thresholds: {\r\n        responseTime: { warning: 1000, critical: 3000 },\r\n        errorRate: { warning: 0.05, critical: 0.1 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // Cache health check\r\n    this.registerHealthCheck({\r\n      service: 'cache',\r\n      enabled: true,\r\n      interval: 30, // 30 segundos\r\n      timeout: 3,\r\n      retries: 2,\r\n      thresholds: {\r\n        responseTime: { warning: 100, critical: 500 },\r\n        errorRate: { warning: 0.02, critical: 0.05 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // MercadoPago health check\r\n    this.registerHealthCheck({\r\n      service: 'mercadopago',\r\n      enabled: true,\r\n      interval: 300, // 5 minutos\r\n      timeout: 10,\r\n      retries: 1,\r\n      thresholds: {\r\n        responseTime: { warning: 2000, critical: 5000 },\r\n        errorRate: { warning: 0.01, critical: 0.03 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: false,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // Circuit breakers health check\r\n    this.registerHealthCheck({\r\n      service: 'circuit_breakers',\r\n      enabled: true,\r\n      interval: 30, // 30 segundos\r\n      timeout: 1,\r\n      retries: 1,\r\n      thresholds: {\r\n        responseTime: { warning: 100, critical: 1000 },\r\n        errorRate: { warning: 0, critical: 0 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicializa acciones de recuperaci\xF3n\r\n   */\r\n  private initializeRecoveryActions(): void {\r\n    // Reset circuit breakers\r\n    this.registerRecoveryAction({\r\n      id: 'reset_circuit_breakers',\r\n      name: 'Reset Circuit Breakers',\r\n      description: 'Reset all circuit breakers to closed state',\r\n      service: 'circuit_breakers',\r\n      enabled: true,\r\n      automatic: true,\r\n      cooldownMinutes: 5,\r\n      maxRetries: 3,\r\n      action: async () => {\r\n        mercadoPagoCriticalBreaker.reset();\r\n        mercadoPagoStandardBreaker.reset();\r\n        webhookProcessingBreaker.reset();\r\n        return true;\r\n      }\r\n    });\r\n\r\n    // Clear cache\r\n    this.registerRecoveryAction({\r\n      id: 'clear_cache',\r\n      name: 'Clear Cache',\r\n      description: 'Clear cache to resolve potential issues',\r\n      service: 'cache',\r\n      enabled: true,\r\n      automatic: false, // Manual only\r\n      cooldownMinutes: 10,\r\n      maxRetries: 1,\r\n      action: async () => {\r\n        // Implementar limpieza de cache si es necesario\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    // Limpiar intervalos\r\n    for (const interval of this.checkIntervals.values()) {\r\n      clearInterval(interval);\r\n    }\r\n    this.checkIntervals.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseHealthSystem = EnterpriseHealthSystem.getInstance();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["EnterpriseHealthSystem", "HealthSeverity", "HealthStatus", "enterpriseHealthSystem", "healthChecks", "Map", "recoveryActions", "lastResults", "checkIntervals", "recoveryAttempts", "initializeDefaultChecks", "initializeRecoveryActions", "getInstance", "instance", "registerHealthCheck", "config", "set", "service", "enabled", "interval", "scheduleHealthCheck", "logger", "info", "LogLevel", "INFO", "autoRecover", "LogCategory", "SYSTEM", "registerRecoveryAction", "action", "id", "automatic", "runHealthCheck", "get", "Error", "startTime", "Date", "now", "result", "executeHealthCheck", "error", "status", "severity", "responseTime", "message", "details", "lastChecked", "toISOString", "recordHealthMetrics", "attemptAutoRecovery", "runAllHealthChecks", "results", "entries", "push", "ERROR", "getSystemHealth", "services", "Array", "from", "values", "summary", "forEach", "overall", "lastUpdated", "executeRecoveryAction", "actionId", "attempts", "cooldownEnd", "lastAttempt", "getTime", "cooldownMinutes", "count", "maxRetries", "success", "currentAttempts", "checkDatabaseHealth", "checkCacheHealth", "checkMercadoPagoHealth", "checkCircuitBreakersHealth", "checkExternalAPIsHealth", "checkFileSystemHealth", "supabase", "getSupabaseClient", "data", "select", "limit", "thresholds", "critical", "warning", "recordsFound", "length", "connectionPool", "queryType", "nextCheck", "metrics", "recordCount", "recommendations", "testKey", "testValue", "test", "timestamp", "CacheUtils", "retrieved", "readWrite", "provider", "operationsPerSecond", "publicKey", "process", "env", "MERCADOPAGO_PUBLIC_KEY_PROD", "MERCADOPAGO_PUBLIC_KEY_TEST", "accessToken", "MERCADOPAGO_ACCESS_TOKEN_PROD", "MERCADOPAGO_ACCESS_TOKEN_TEST", "environment", "includes", "publicKeyConfigured", "accessTokenConfigured", "configurationScore", "criticalState", "mercadoPagoCriticalBreaker", "getState", "standardState", "mercadoPagoStandardBreaker", "webhookState", "webhookProcessingBreaker", "states", "openBreakers", "filter", "state", "halfOpenBreakers", "mercadopago_critical", "mercadopago_standard", "webhook_processing", "totalBreakers", "healthScore", "undefined", "checkedAPIs", "successRate", "diskSpace", "permissions", "diskUsage", "existingInterval", "clearInterval", "setInterval", "recordPerformanceMetric", "availabilityScore", "recordSecurityMetric", "timeout", "retries", "errorRate", "dependencies", "notifications", "name", "description", "reset", "destroy", "clear"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9f177259b34c0ee53945e9b057fb0ef99bfdcaa6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13lbuy7905 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13lbuy7905();
cov_13lbuy7905().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_13lbuy7905().f[0]++;
  cov_13lbuy7905().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_13lbuy7905().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_13lbuy7905().s[3]++;
_export(exports, {
  get EnterpriseHealthSystem() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[1]++;
    cov_13lbuy7905().s[4]++;
    return EnterpriseHealthSystem;
  },
  get HealthSeverity() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[2]++;
    cov_13lbuy7905().s[5]++;
    return HealthSeverity;
  },
  get HealthStatus() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[3]++;
    cov_13lbuy7905().s[6]++;
    return HealthStatus;
  },
  get enterpriseHealthSystem() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[4]++;
    cov_13lbuy7905().s[7]++;
    return enterpriseHealthSystem;
  }
});
const _logger =
/* istanbul ignore next */
(cov_13lbuy7905().s[8]++, require("../enterprise/logger"));
const _supabase =
/* istanbul ignore next */
(cov_13lbuy7905().s[9]++, require("../integrations/supabase"));
const _cachemanager =
/* istanbul ignore next */
(cov_13lbuy7905().s[10]++, require("../cache-manager"));
const _circuitbreaker =
/* istanbul ignore next */
(cov_13lbuy7905().s[11]++, require("../integrations/mercadopago/circuit-breaker"));
const _enterprisemetrics =
/* istanbul ignore next */
(cov_13lbuy7905().s[12]++, require("./enterprise-metrics"));
var HealthStatus =
/* istanbul ignore next */
(/*#__PURE__*/cov_13lbuy7905().s[13]++, function (HealthStatus) {
  /* istanbul ignore next */
  cov_13lbuy7905().f[5]++;
  cov_13lbuy7905().s[14]++;
  HealthStatus["HEALTHY"] = "healthy";
  /* istanbul ignore next */
  cov_13lbuy7905().s[15]++;
  HealthStatus["DEGRADED"] = "degraded";
  /* istanbul ignore next */
  cov_13lbuy7905().s[16]++;
  HealthStatus["UNHEALTHY"] = "unhealthy";
  /* istanbul ignore next */
  cov_13lbuy7905().s[17]++;
  HealthStatus["UNKNOWN"] = "unknown";
  /* istanbul ignore next */
  cov_13lbuy7905().s[18]++;
  return HealthStatus;
}({}));
var HealthSeverity =
/* istanbul ignore next */
(/*#__PURE__*/cov_13lbuy7905().s[19]++, function (HealthSeverity) {
  /* istanbul ignore next */
  cov_13lbuy7905().f[6]++;
  cov_13lbuy7905().s[20]++;
  HealthSeverity["LOW"] = "low";
  /* istanbul ignore next */
  cov_13lbuy7905().s[21]++;
  HealthSeverity["MEDIUM"] = "medium";
  /* istanbul ignore next */
  cov_13lbuy7905().s[22]++;
  HealthSeverity["HIGH"] = "high";
  /* istanbul ignore next */
  cov_13lbuy7905().s[23]++;
  HealthSeverity["CRITICAL"] = "critical";
  /* istanbul ignore next */
  cov_13lbuy7905().s[24]++;
  return HealthSeverity;
}({}));
class EnterpriseHealthSystem {
  constructor() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[7]++;
    cov_13lbuy7905().s[25]++;
    this.healthChecks = new Map();
    /* istanbul ignore next */
    cov_13lbuy7905().s[26]++;
    this.recoveryActions = new Map();
    /* istanbul ignore next */
    cov_13lbuy7905().s[27]++;
    this.lastResults = new Map();
    /* istanbul ignore next */
    cov_13lbuy7905().s[28]++;
    this.checkIntervals = new Map();
    /* istanbul ignore next */
    cov_13lbuy7905().s[29]++;
    this.recoveryAttempts = new Map();
    /* istanbul ignore next */
    cov_13lbuy7905().s[30]++;
    this.initializeDefaultChecks();
    /* istanbul ignore next */
    cov_13lbuy7905().s[31]++;
    this.initializeRecoveryActions();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[8]++;
    cov_13lbuy7905().s[32]++;
    if (!EnterpriseHealthSystem.instance) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[0][0]++;
      cov_13lbuy7905().s[33]++;
      EnterpriseHealthSystem.instance = new EnterpriseHealthSystem();
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[0][1]++;
    }
    cov_13lbuy7905().s[34]++;
    return EnterpriseHealthSystem.instance;
  }
  /**
  * Registra un health check
  */
  registerHealthCheck(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[9]++;
    cov_13lbuy7905().s[35]++;
    this.healthChecks.set(config.service, config);
    /* istanbul ignore next */
    cov_13lbuy7905().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_13lbuy7905().b[2][0]++, config.enabled) &&
    /* istanbul ignore next */
    (cov_13lbuy7905().b[2][1]++, config.interval > 0)) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[1][0]++;
      cov_13lbuy7905().s[37]++;
      this.scheduleHealthCheck(config);
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[1][1]++;
    }
    cov_13lbuy7905().s[38]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Health check registered: ${config.service}`, {
      interval: config.interval,
      enabled: config.enabled,
      autoRecover: config.autoRecover
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Registra una acción de recuperación
  */
  registerRecoveryAction(action) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[10]++;
    cov_13lbuy7905().s[39]++;
    this.recoveryActions.set(action.id, action);
    /* istanbul ignore next */
    cov_13lbuy7905().s[40]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Recovery action registered: ${action.id}`, {
      service: action.service,
      automatic: action.automatic,
      enabled: action.enabled
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Ejecuta health check específico
  */
  async runHealthCheck(service) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[11]++;
    const config =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[41]++, this.healthChecks.get(service));
    /* istanbul ignore next */
    cov_13lbuy7905().s[42]++;
    if (!config) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[3][0]++;
      cov_13lbuy7905().s[43]++;
      throw new Error(`Health check not configured for service: ${service}`);
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[3][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[44]++, Date.now());
    let result;
    /* istanbul ignore next */
    cov_13lbuy7905().s[45]++;
    try {
      /* istanbul ignore next */
      cov_13lbuy7905().s[46]++;
      result = await this.executeHealthCheck(service, config);
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[47]++;
      result = {
        service,
        status: "unhealthy",
        severity: "critical",
        responseTime: Date.now() - startTime,
        message: `Health check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[4][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[4][1]++, 'Unknown error')}`,
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[5][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[5][1]++, 'Unknown error')
        },
        lastChecked: new Date().toISOString()
      };
    }
    // Almacenar resultado
    /* istanbul ignore next */
    cov_13lbuy7905().s[48]++;
    this.lastResults.set(service, result);
    // Registrar métricas
    /* istanbul ignore next */
    cov_13lbuy7905().s[49]++;
    await this.recordHealthMetrics(result);
    // Verificar si necesita recuperación automática
    /* istanbul ignore next */
    cov_13lbuy7905().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_13lbuy7905().b[7][0]++, result.status === "unhealthy") &&
    /* istanbul ignore next */
    (cov_13lbuy7905().b[7][1]++, config.autoRecover)) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[6][0]++;
      cov_13lbuy7905().s[51]++;
      await this.attemptAutoRecovery(service, result);
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[6][1]++;
    }
    cov_13lbuy7905().s[52]++;
    return result;
  }
  /**
  * Ejecuta todos los health checks
  */
  async runAllHealthChecks() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[12]++;
    const results =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[53]++, []);
    /* istanbul ignore next */
    cov_13lbuy7905().s[54]++;
    for (const [service, config] of this.healthChecks.entries()) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[55]++;
      if (config.enabled) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[8][0]++;
        cov_13lbuy7905().s[56]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_13lbuy7905().s[57]++, await this.runHealthCheck(service));
          /* istanbul ignore next */
          cov_13lbuy7905().s[58]++;
          results.push(result);
        } catch (error) {
          /* istanbul ignore next */
          cov_13lbuy7905().s[59]++;
          _logger.logger.error(_logger.LogLevel.ERROR, `Failed to run health check for ${service}`, {
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_13lbuy7905().b[9][0]++, error.message) :
            /* istanbul ignore next */
            (cov_13lbuy7905().b[9][1]++, 'Unknown error')
          }, _logger.LogCategory.SYSTEM);
        }
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[8][1]++;
      }
    }
    /* istanbul ignore next */
    cov_13lbuy7905().s[60]++;
    return results;
  }
  /**
  * Obtiene el estado general del sistema
  */
  getSystemHealth() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[13]++;
    const services =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[61]++, Array.from(this.lastResults.values()));
    const summary =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[62]++, {
      ["healthy"]: 0,
      ["degraded"]: 0,
      ["unhealthy"]: 0,
      ["unknown"]: 0
    });
    /* istanbul ignore next */
    cov_13lbuy7905().s[63]++;
    services.forEach(service => {
      /* istanbul ignore next */
      cov_13lbuy7905().f[14]++;
      cov_13lbuy7905().s[64]++;
      summary[service.status]++;
    });
    // Determinar estado general
    let overall =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[65]++, "healthy");
    /* istanbul ignore next */
    cov_13lbuy7905().s[66]++;
    if (summary["unhealthy"] > 0) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[10][0]++;
      cov_13lbuy7905().s[67]++;
      overall = "unhealthy";
    } else {
      /* istanbul ignore next */
      cov_13lbuy7905().b[10][1]++;
      cov_13lbuy7905().s[68]++;
      if (summary["degraded"] > 0) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[11][0]++;
        cov_13lbuy7905().s[69]++;
        overall = "degraded";
      } else {
        /* istanbul ignore next */
        cov_13lbuy7905().b[11][1]++;
        cov_13lbuy7905().s[70]++;
        if (summary["unknown"] > 0) {
          /* istanbul ignore next */
          cov_13lbuy7905().b[12][0]++;
          cov_13lbuy7905().s[71]++;
          overall = "unknown";
        } else
        /* istanbul ignore next */
        {
          cov_13lbuy7905().b[12][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_13lbuy7905().s[72]++;
    return {
      overall,
      services,
      summary,
      lastUpdated: new Date().toISOString()
    };
  }
  /**
  * Ejecuta acción de recuperación manual
  */
  async executeRecoveryAction(actionId, config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[15]++;
    const action =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[73]++, this.recoveryActions.get(actionId));
    /* istanbul ignore next */
    cov_13lbuy7905().s[74]++;
    if (!action) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[13][0]++;
      cov_13lbuy7905().s[75]++;
      throw new Error(`Recovery action not found: ${actionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[13][1]++;
    }
    cov_13lbuy7905().s[76]++;
    if (!action.enabled) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[14][0]++;
      cov_13lbuy7905().s[77]++;
      throw new Error(`Recovery action disabled: ${actionId}`);
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[14][1]++;
    }
    // Verificar cooldown
    const attempts =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[78]++, this.recoveryAttempts.get(actionId));
    /* istanbul ignore next */
    cov_13lbuy7905().s[79]++;
    if (attempts) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[15][0]++;
      const cooldownEnd =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[80]++, new Date(attempts.lastAttempt.getTime() + action.cooldownMinutes * 60 * 1000));
      /* istanbul ignore next */
      cov_13lbuy7905().s[81]++;
      if (new Date() < cooldownEnd) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[16][0]++;
        cov_13lbuy7905().s[82]++;
        throw new Error(`Recovery action in cooldown: ${actionId}`);
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[16][1]++;
      }
      cov_13lbuy7905().s[83]++;
      if (attempts.count >= action.maxRetries) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[17][0]++;
        cov_13lbuy7905().s[84]++;
        throw new Error(`Recovery action max retries exceeded: ${actionId}`);
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[17][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[15][1]++;
    }
    cov_13lbuy7905().s[85]++;
    try {
      const success =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[86]++, await action.action(config));
      // Actualizar intentos
      const currentAttempts =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[87]++,
      /* istanbul ignore next */
      (cov_13lbuy7905().b[18][0]++, this.recoveryAttempts.get(actionId)) ||
      /* istanbul ignore next */
      (cov_13lbuy7905().b[18][1]++, {
        count: 0,
        lastAttempt: new Date()
      }));
      /* istanbul ignore next */
      cov_13lbuy7905().s[88]++;
      this.recoveryAttempts.set(actionId, {
        count: success ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[19][0]++, 0) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[19][1]++, currentAttempts.count + 1),
        lastAttempt: new Date()
      });
      /* istanbul ignore next */
      cov_13lbuy7905().s[89]++;
      _logger.logger.info(_logger.LogLevel.INFO, `Recovery action executed: ${actionId}`, {
        success,
        service: action.service,
        automatic: false
      }, _logger.LogCategory.SYSTEM);
      /* istanbul ignore next */
      cov_13lbuy7905().s[90]++;
      return success;
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[91]++;
      _logger.logger.error(_logger.LogLevel.ERROR, `Recovery action failed: ${actionId}`, {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[20][1]++, 'Unknown error'),
        service: action.service
      }, _logger.LogCategory.SYSTEM);
      /* istanbul ignore next */
      cov_13lbuy7905().s[92]++;
      throw error;
    }
  }
  /**
  * Implementaciones de health checks específicos
  */
  async executeHealthCheck(service, config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[16]++;
    cov_13lbuy7905().s[93]++;
    switch (service) {
      case 'database':
        /* istanbul ignore next */
        cov_13lbuy7905().b[21][0]++;
        cov_13lbuy7905().s[94]++;
        return await this.checkDatabaseHealth(config);
      case 'cache':
        /* istanbul ignore next */
        cov_13lbuy7905().b[21][1]++;
        cov_13lbuy7905().s[95]++;
        return await this.checkCacheHealth(config);
      case 'mercadopago':
        /* istanbul ignore next */
        cov_13lbuy7905().b[21][2]++;
        cov_13lbuy7905().s[96]++;
        return await this.checkMercadoPagoHealth(config);
      case 'circuit_breakers':
        /* istanbul ignore next */
        cov_13lbuy7905().b[21][3]++;
        cov_13lbuy7905().s[97]++;
        return await this.checkCircuitBreakersHealth(config);
      case 'external_apis':
        /* istanbul ignore next */
        cov_13lbuy7905().b[21][4]++;
        cov_13lbuy7905().s[98]++;
        return await this.checkExternalAPIsHealth(config);
      case 'file_system':
        /* istanbul ignore next */
        cov_13lbuy7905().b[21][5]++;
        cov_13lbuy7905().s[99]++;
        return await this.checkFileSystemHealth(config);
      default:
        /* istanbul ignore next */
        cov_13lbuy7905().b[21][6]++;
        cov_13lbuy7905().s[100]++;
        throw new Error(`Unknown health check service: ${service}`);
    }
  }
  async checkDatabaseHealth(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[17]++;
    const startTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[101]++, Date.now());
    /* istanbul ignore next */
    cov_13lbuy7905().s[102]++;
    try {
      const supabase =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[103]++, (0, _supabase.getSupabaseClient)(true));
      /* istanbul ignore next */
      cov_13lbuy7905().s[104]++;
      if (!supabase) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[22][0]++;
        cov_13lbuy7905().s[105]++;
        throw new Error('Supabase client not available');
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[22][1]++;
      }
      // Test de conectividad
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[106]++, await supabase.from('products').select('id').limit(1));
      /* istanbul ignore next */
      cov_13lbuy7905().s[107]++;
      if (error) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[23][0]++;
        cov_13lbuy7905().s[108]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[23][1]++;
      }
      const responseTime =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[109]++, Date.now() - startTime);
      // Determinar estado basado en tiempo de respuesta
      let status =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[110]++, "healthy");
      let severity =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[111]++, "low");
      /* istanbul ignore next */
      cov_13lbuy7905().s[112]++;
      if (responseTime > config.thresholds.responseTime.critical) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[24][0]++;
        cov_13lbuy7905().s[113]++;
        status = "unhealthy";
        /* istanbul ignore next */
        cov_13lbuy7905().s[114]++;
        severity = "critical";
      } else {
        /* istanbul ignore next */
        cov_13lbuy7905().b[24][1]++;
        cov_13lbuy7905().s[115]++;
        if (responseTime > config.thresholds.responseTime.warning) {
          /* istanbul ignore next */
          cov_13lbuy7905().b[25][0]++;
          cov_13lbuy7905().s[116]++;
          status = "degraded";
          /* istanbul ignore next */
          cov_13lbuy7905().s[117]++;
          severity = "medium";
        } else
        /* istanbul ignore next */
        {
          cov_13lbuy7905().b[25][1]++;
        }
      }
      /* istanbul ignore next */
      cov_13lbuy7905().s[118]++;
      return {
        service: 'database',
        status,
        severity,
        responseTime,
        message: `Database responding in ${responseTime}ms`,
        details: {
          recordsFound:
          /* istanbul ignore next */
          (cov_13lbuy7905().b[26][0]++, data?.length) ||
          /* istanbul ignore next */
          (cov_13lbuy7905().b[26][1]++, 0),
          connectionPool: 'active',
          queryType: 'SELECT'
        },
        lastChecked: new Date().toISOString(),
        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),
        metrics: {
          responseTime,
          recordCount:
          /* istanbul ignore next */
          (cov_13lbuy7905().b[27][0]++, data?.length) ||
          /* istanbul ignore next */
          (cov_13lbuy7905().b[27][1]++, 0)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[119]++;
      return {
        service: 'database',
        status: "unhealthy",
        severity: "critical",
        responseTime: Date.now() - startTime,
        message: `Database error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[28][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[28][1]++, 'Unknown error')}`,
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[29][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[29][1]++, 'Unknown error')
        },
        lastChecked: new Date().toISOString(),
        recommendations: ['Check database connection', 'Verify Supabase credentials', 'Check network connectivity']
      };
    }
  }
  async checkCacheHealth(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[18]++;
    const startTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[120]++, Date.now());
    /* istanbul ignore next */
    cov_13lbuy7905().s[121]++;
    try {
      const testKey =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[122]++, `health_check_${Date.now()}`);
      const testValue =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[123]++, {
        test: true,
        timestamp: Date.now()
      });
      // Test write
      /* istanbul ignore next */
      cov_13lbuy7905().s[124]++;
      await _cachemanager.CacheUtils.set(testKey, testValue, 10);
      // Test read
      const retrieved =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[125]++, await _cachemanager.CacheUtils.get(testKey));
      /* istanbul ignore next */
      cov_13lbuy7905().s[126]++;
      if (
      /* istanbul ignore next */
      (cov_13lbuy7905().b[31][0]++, !retrieved) ||
      /* istanbul ignore next */
      (cov_13lbuy7905().b[31][1]++, retrieved.test !== true)) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[30][0]++;
        cov_13lbuy7905().s[127]++;
        throw new Error('Cache read/write test failed');
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[30][1]++;
      }
      const responseTime =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[128]++, Date.now() - startTime);
      let status =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[129]++, "healthy");
      let severity =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[130]++, "low");
      /* istanbul ignore next */
      cov_13lbuy7905().s[131]++;
      if (responseTime > 500) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[32][0]++;
        cov_13lbuy7905().s[132]++;
        status = "degraded";
        /* istanbul ignore next */
        cov_13lbuy7905().s[133]++;
        severity = "medium";
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[32][1]++;
      }
      cov_13lbuy7905().s[134]++;
      return {
        service: 'cache',
        status,
        severity,
        responseTime,
        message: `Cache responding in ${responseTime}ms`,
        details: {
          readWrite: 'success',
          testKey,
          provider: 'redis'
        },
        lastChecked: new Date().toISOString(),
        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),
        metrics: {
          responseTime,
          operationsPerSecond: 1000 / responseTime
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[135]++;
      return {
        service: 'cache',
        status: "unhealthy",
        severity: "high",
        responseTime: Date.now() - startTime,
        message: `Cache error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[33][1]++, 'Unknown error')}`,
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[34][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[34][1]++, 'Unknown error')
        },
        lastChecked: new Date().toISOString(),
        recommendations: ['Check Redis connection', 'Verify cache configuration', 'Check memory usage']
      };
    }
  }
  async checkMercadoPagoHealth(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[19]++;
    const startTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[136]++, Date.now());
    /* istanbul ignore next */
    cov_13lbuy7905().s[137]++;
    try {
      const publicKey =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[138]++,
      /* istanbul ignore next */
      (cov_13lbuy7905().b[35][0]++, process.env.MERCADOPAGO_PUBLIC_KEY_PROD) ||
      /* istanbul ignore next */
      (cov_13lbuy7905().b[35][1]++, process.env.MERCADOPAGO_PUBLIC_KEY_TEST));
      const accessToken =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[139]++,
      /* istanbul ignore next */
      (cov_13lbuy7905().b[36][0]++, process.env.MERCADOPAGO_ACCESS_TOKEN_PROD) ||
      /* istanbul ignore next */
      (cov_13lbuy7905().b[36][1]++, process.env.MERCADOPAGO_ACCESS_TOKEN_TEST));
      /* istanbul ignore next */
      cov_13lbuy7905().s[140]++;
      if (
      /* istanbul ignore next */
      (cov_13lbuy7905().b[38][0]++, !publicKey) ||
      /* istanbul ignore next */
      (cov_13lbuy7905().b[38][1]++, !accessToken)) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[37][0]++;
        cov_13lbuy7905().s[141]++;
        throw new Error('MercadoPago credentials not configured');
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[37][1]++;
      }
      const responseTime =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[142]++, Date.now() - startTime);
      const environment =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[143]++, publicKey.includes('TEST') ?
      /* istanbul ignore next */
      (cov_13lbuy7905().b[39][0]++, 'test') :
      /* istanbul ignore next */
      (cov_13lbuy7905().b[39][1]++, 'production'));
      /* istanbul ignore next */
      cov_13lbuy7905().s[144]++;
      return {
        service: 'mercadopago',
        status: "healthy",
        severity: "low",
        responseTime,
        message: `MercadoPago credentials configured for ${environment}`,
        details: {
          publicKeyConfigured: !!publicKey,
          accessTokenConfigured: !!accessToken,
          environment
        },
        lastChecked: new Date().toISOString(),
        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),
        metrics: {
          configurationScore: 100
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[145]++;
      return {
        service: 'mercadopago',
        status: "unhealthy",
        severity: "critical",
        responseTime: Date.now() - startTime,
        message: `MercadoPago error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[40][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[40][1]++, 'Unknown error')}`,
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[41][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[41][1]++, 'Unknown error')
        },
        lastChecked: new Date().toISOString(),
        recommendations: ['Configure MercadoPago credentials', 'Check environment variables', 'Verify API keys']
      };
    }
  }
  async checkCircuitBreakersHealth(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[20]++;
    const startTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[146]++, Date.now());
    /* istanbul ignore next */
    cov_13lbuy7905().s[147]++;
    try {
      const criticalState =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[148]++, _circuitbreaker.mercadoPagoCriticalBreaker.getState());
      const standardState =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[149]++, _circuitbreaker.mercadoPagoStandardBreaker.getState());
      const webhookState =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[150]++, _circuitbreaker.webhookProcessingBreaker.getState());
      const states =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[151]++, [criticalState, standardState, webhookState]);
      const openBreakers =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[152]++, states.filter(state => {
        /* istanbul ignore next */
        cov_13lbuy7905().f[21]++;
        cov_13lbuy7905().s[153]++;
        return state === 'open';
      }).length);
      const halfOpenBreakers =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[154]++, states.filter(state => {
        /* istanbul ignore next */
        cov_13lbuy7905().f[22]++;
        cov_13lbuy7905().s[155]++;
        return state === 'half-open';
      }).length);
      let status =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[156]++, "healthy");
      let severity =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[157]++, "low");
      let message =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[158]++, 'All circuit breakers operational');
      /* istanbul ignore next */
      cov_13lbuy7905().s[159]++;
      if (openBreakers > 0) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[42][0]++;
        cov_13lbuy7905().s[160]++;
        status = "unhealthy";
        /* istanbul ignore next */
        cov_13lbuy7905().s[161]++;
        severity = "critical";
        /* istanbul ignore next */
        cov_13lbuy7905().s[162]++;
        message = `${openBreakers} circuit breaker(s) open`;
      } else {
        /* istanbul ignore next */
        cov_13lbuy7905().b[42][1]++;
        cov_13lbuy7905().s[163]++;
        if (halfOpenBreakers > 0) {
          /* istanbul ignore next */
          cov_13lbuy7905().b[43][0]++;
          cov_13lbuy7905().s[164]++;
          status = "degraded";
          /* istanbul ignore next */
          cov_13lbuy7905().s[165]++;
          severity = "medium";
          /* istanbul ignore next */
          cov_13lbuy7905().s[166]++;
          message = `${halfOpenBreakers} circuit breaker(s) in recovery`;
        } else
        /* istanbul ignore next */
        {
          cov_13lbuy7905().b[43][1]++;
        }
      }
      const responseTime =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[167]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_13lbuy7905().s[168]++;
      return {
        service: 'circuit_breakers',
        status,
        severity,
        responseTime,
        message,
        details: {
          mercadopago_critical: criticalState,
          mercadopago_standard: standardState,
          webhook_processing: webhookState,
          totalBreakers: 3,
          openBreakers,
          halfOpenBreakers
        },
        lastChecked: new Date().toISOString(),
        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),
        metrics: {
          healthScore: (3 - openBreakers) / 3 * 100,
          openBreakers,
          halfOpenBreakers
        },
        recommendations: openBreakers > 0 ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[44][0]++, ['Check service dependencies', 'Review error logs', 'Consider manual reset if appropriate']) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[44][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[169]++;
      return {
        service: 'circuit_breakers',
        status: "unhealthy",
        severity: "high",
        responseTime: Date.now() - startTime,
        message: `Circuit breakers error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[45][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[45][1]++, 'Unknown error')}`,
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[46][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[46][1]++, 'Unknown error')
        },
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkExternalAPIsHealth(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[23]++;
    const startTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[170]++, Date.now());
    // Simulación de check de APIs externas
    const responseTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[171]++, Date.now() - startTime + 150); // Simular latencia
    /* istanbul ignore next */
    cov_13lbuy7905().s[172]++;
    return {
      service: 'external_apis',
      status: "healthy",
      severity: "low",
      responseTime,
      message: 'External APIs responding normally',
      details: {
        checkedAPIs: ['mercadopago', 'vercel'],
        successRate: 100
      },
      lastChecked: new Date().toISOString(),
      nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),
      metrics: {
        responseTime,
        successRate: 100
      }
    };
  }
  async checkFileSystemHealth(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[24]++;
    const startTime =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[173]++, Date.now());
    /* istanbul ignore next */
    cov_13lbuy7905().s[174]++;
    try {
      // Verificar espacio en disco y permisos básicos
      const responseTime =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[175]++, Date.now() - startTime + 50);
      /* istanbul ignore next */
      cov_13lbuy7905().s[176]++;
      return {
        service: 'file_system',
        status: "healthy",
        severity: "low",
        responseTime,
        message: 'File system accessible',
        details: {
          diskSpace: 'sufficient',
          permissions: 'ok'
        },
        lastChecked: new Date().toISOString(),
        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),
        metrics: {
          responseTime,
          diskUsage: 65
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[177]++;
      return {
        service: 'file_system',
        status: "unhealthy",
        severity: "high",
        responseTime: Date.now() - startTime,
        message: `File system error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[47][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[47][1]++, 'Unknown error')}`,
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[48][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[48][1]++, 'Unknown error')
        },
        lastChecked: new Date().toISOString()
      };
    }
  }
  /**
  * Programa health check automático
  */
  scheduleHealthCheck(config) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[25]++;
    // Limpiar intervalo existente
    const existingInterval =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[178]++, this.checkIntervals.get(config.service));
    /* istanbul ignore next */
    cov_13lbuy7905().s[179]++;
    if (existingInterval) {
      /* istanbul ignore next */
      cov_13lbuy7905().b[49][0]++;
      cov_13lbuy7905().s[180]++;
      clearInterval(existingInterval);
    } else
    /* istanbul ignore next */
    {
      cov_13lbuy7905().b[49][1]++;
    }
    // Programar nuevo intervalo
    const interval =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[181]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_13lbuy7905().f[26]++;
      cov_13lbuy7905().s[182]++;
      try {
        /* istanbul ignore next */
        cov_13lbuy7905().s[183]++;
        await this.runHealthCheck(config.service);
      } catch (error) {
        /* istanbul ignore next */
        cov_13lbuy7905().s[184]++;
        _logger.logger.error(_logger.LogLevel.ERROR, `Scheduled health check failed: ${config.service}`, {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[50][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[50][1]++, 'Unknown error')
        }, _logger.LogCategory.SYSTEM);
      }
    }, config.interval * 1000));
    /* istanbul ignore next */
    cov_13lbuy7905().s[185]++;
    this.checkIntervals.set(config.service, interval);
  }
  /**
  * Registra métricas de health check
  */
  async recordHealthMetrics(result) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[27]++;
    cov_13lbuy7905().s[186]++;
    try {
      /* istanbul ignore next */
      cov_13lbuy7905().s[187]++;
      // Registrar métricas de performance
      await (0, _enterprisemetrics.recordPerformanceMetric)(`health.${result.service}.response_time`, result.responseTime, true, {
        service: result.service,
        status: result.status
      });
      // Registrar métricas de disponibilidad
      const availabilityScore =
      /* istanbul ignore next */
      (cov_13lbuy7905().s[188]++, result.status === "healthy" ?
      /* istanbul ignore next */
      (cov_13lbuy7905().b[51][0]++, 1) :
      /* istanbul ignore next */
      (cov_13lbuy7905().b[51][1]++, 0));
      /* istanbul ignore next */
      cov_13lbuy7905().s[189]++;
      await (0, _enterprisemetrics.recordPerformanceMetric)(`health.${result.service}.availability`, availabilityScore, true, {
        service: result.service,
        status: result.status
      });
      // Registrar eventos de seguridad si hay problemas
      /* istanbul ignore next */
      cov_13lbuy7905().s[190]++;
      if (
      /* istanbul ignore next */
      (cov_13lbuy7905().b[53][0]++, result.status === "unhealthy") &&
      /* istanbul ignore next */
      (cov_13lbuy7905().b[53][1]++, result.severity === "critical")) {
        /* istanbul ignore next */
        cov_13lbuy7905().b[52][0]++;
        cov_13lbuy7905().s[191]++;
        await (0, _enterprisemetrics.recordSecurityMetric)('health_check_critical_failure', 'high', {
          service: result.service,
          message: result.message,
          severity: result.severity
        });
      } else
      /* istanbul ignore next */
      {
        cov_13lbuy7905().b[52][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[192]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to record health metrics', {
        service: result.service,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_13lbuy7905().b[54][0]++, error.message) :
        /* istanbul ignore next */
        (cov_13lbuy7905().b[54][1]++, 'Unknown error')
      }, _logger.LogCategory.SYSTEM);
    }
  }
  /**
  * Intenta recuperación automática
  */
  async attemptAutoRecovery(service, result) {
    /* istanbul ignore next */
    cov_13lbuy7905().f[28]++;
    const recoveryActions =
    /* istanbul ignore next */
    (cov_13lbuy7905().s[193]++, Array.from(this.recoveryActions.values()).filter(action => {
      /* istanbul ignore next */
      cov_13lbuy7905().f[29]++;
      cov_13lbuy7905().s[194]++;
      return /* istanbul ignore next */(cov_13lbuy7905().b[55][0]++, action.service === service) &&
      /* istanbul ignore next */
      (cov_13lbuy7905().b[55][1]++, action.automatic) &&
      /* istanbul ignore next */
      (cov_13lbuy7905().b[55][2]++, action.enabled);
    }));
    /* istanbul ignore next */
    cov_13lbuy7905().s[195]++;
    for (const action of recoveryActions) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[196]++;
      try {
        /* istanbul ignore next */
        cov_13lbuy7905().s[197]++;
        _logger.logger.info(_logger.LogLevel.INFO, `Attempting auto-recovery: ${action.id}`, {
          service,
          status: result.status,
          severity: result.severity
        }, _logger.LogCategory.SYSTEM);
        const success =
        /* istanbul ignore next */
        (cov_13lbuy7905().s[198]++, await this.executeRecoveryAction(action.id));
        /* istanbul ignore next */
        cov_13lbuy7905().s[199]++;
        if (success) {
          /* istanbul ignore next */
          cov_13lbuy7905().b[56][0]++;
          cov_13lbuy7905().s[200]++;
          _logger.logger.info(_logger.LogLevel.INFO, `Auto-recovery successful: ${action.id}`, {
            service
          }, _logger.LogCategory.SYSTEM);
          /* istanbul ignore next */
          cov_13lbuy7905().s[201]++;
          break; // Salir si la recuperación fue exitosa
        } else
        /* istanbul ignore next */
        {
          cov_13lbuy7905().b[56][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_13lbuy7905().s[202]++;
        _logger.logger.error(_logger.LogLevel.ERROR, `Auto-recovery failed: ${action.id}`, {
          service,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_13lbuy7905().b[57][0]++, error.message) :
          /* istanbul ignore next */
          (cov_13lbuy7905().b[57][1]++, 'Unknown error')
        }, _logger.LogCategory.SYSTEM);
      }
    }
  }
  /**
  * Inicializa health checks por defecto
  */
  initializeDefaultChecks() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[30]++;
    cov_13lbuy7905().s[203]++;
    // Database health check
    this.registerHealthCheck({
      service: 'database',
      enabled: true,
      interval: 60,
      timeout: 5,
      retries: 3,
      thresholds: {
        responseTime: {
          warning: 1000,
          critical: 3000
        },
        errorRate: {
          warning: 0.05,
          critical: 0.1
        }
      },
      dependencies: [],
      autoRecover: true,
      notifications: ['default_log']
    });
    // Cache health check
    /* istanbul ignore next */
    cov_13lbuy7905().s[204]++;
    this.registerHealthCheck({
      service: 'cache',
      enabled: true,
      interval: 30,
      timeout: 3,
      retries: 2,
      thresholds: {
        responseTime: {
          warning: 100,
          critical: 500
        },
        errorRate: {
          warning: 0.02,
          critical: 0.05
        }
      },
      dependencies: [],
      autoRecover: true,
      notifications: ['default_log']
    });
    // MercadoPago health check
    /* istanbul ignore next */
    cov_13lbuy7905().s[205]++;
    this.registerHealthCheck({
      service: 'mercadopago',
      enabled: true,
      interval: 300,
      timeout: 10,
      retries: 1,
      thresholds: {
        responseTime: {
          warning: 2000,
          critical: 5000
        },
        errorRate: {
          warning: 0.01,
          critical: 0.03
        }
      },
      dependencies: [],
      autoRecover: false,
      notifications: ['default_log']
    });
    // Circuit breakers health check
    /* istanbul ignore next */
    cov_13lbuy7905().s[206]++;
    this.registerHealthCheck({
      service: 'circuit_breakers',
      enabled: true,
      interval: 30,
      timeout: 1,
      retries: 1,
      thresholds: {
        responseTime: {
          warning: 100,
          critical: 1000
        },
        errorRate: {
          warning: 0,
          critical: 0
        }
      },
      dependencies: [],
      autoRecover: true,
      notifications: ['default_log']
    });
  }
  /**
  * Inicializa acciones de recuperación
  */
  initializeRecoveryActions() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[31]++;
    cov_13lbuy7905().s[207]++;
    // Reset circuit breakers
    this.registerRecoveryAction({
      id: 'reset_circuit_breakers',
      name: 'Reset Circuit Breakers',
      description: 'Reset all circuit breakers to closed state',
      service: 'circuit_breakers',
      enabled: true,
      automatic: true,
      cooldownMinutes: 5,
      maxRetries: 3,
      action: async () => {
        /* istanbul ignore next */
        cov_13lbuy7905().f[32]++;
        cov_13lbuy7905().s[208]++;
        _circuitbreaker.mercadoPagoCriticalBreaker.reset();
        /* istanbul ignore next */
        cov_13lbuy7905().s[209]++;
        _circuitbreaker.mercadoPagoStandardBreaker.reset();
        /* istanbul ignore next */
        cov_13lbuy7905().s[210]++;
        _circuitbreaker.webhookProcessingBreaker.reset();
        /* istanbul ignore next */
        cov_13lbuy7905().s[211]++;
        return true;
      }
    });
    // Clear cache
    /* istanbul ignore next */
    cov_13lbuy7905().s[212]++;
    this.registerRecoveryAction({
      id: 'clear_cache',
      name: 'Clear Cache',
      description: 'Clear cache to resolve potential issues',
      service: 'cache',
      enabled: true,
      automatic: false,
      cooldownMinutes: 10,
      maxRetries: 1,
      action: async () => {
        /* istanbul ignore next */
        cov_13lbuy7905().f[33]++;
        cov_13lbuy7905().s[213]++;
        // Implementar limpieza de cache si es necesario
        return true;
      }
    });
  }
  /**
  * Limpia recursos
  */
  destroy() {
    /* istanbul ignore next */
    cov_13lbuy7905().f[34]++;
    cov_13lbuy7905().s[214]++;
    // Limpiar intervalos
    for (const interval of this.checkIntervals.values()) {
      /* istanbul ignore next */
      cov_13lbuy7905().s[215]++;
      clearInterval(interval);
    }
    /* istanbul ignore next */
    cov_13lbuy7905().s[216]++;
    this.checkIntervals.clear();
  }
}
const enterpriseHealthSystem =
/* istanbul ignore next */
(cov_13lbuy7905().s[217]++, EnterpriseHealthSystem.getInstance());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,