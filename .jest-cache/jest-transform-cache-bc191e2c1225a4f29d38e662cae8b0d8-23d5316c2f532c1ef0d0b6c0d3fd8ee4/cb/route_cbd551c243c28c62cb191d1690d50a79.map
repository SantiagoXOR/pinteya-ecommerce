{"version":3,"names":["cov_1zld96qtye","actualCoverage","s","GET","f","POST","PUT","runtime","ValidationDemoSchema","_zod","z","object","name","string","min","max","email","_enterpriseschemas","EnterpriseEmailSchema","description","optional","html_content","user_input","search_query","metadata","record","any","tags","array","test_level","enum","default","enable_sanitization","boolean","enable_security_validation","SecurityTestSchema","test_type","payload","expected_result","getHandler","request","authResult","_enterpriseauthutils","requireAdminAuth","success","b","_server","NextResponse","json","error","code","enterprise","status","context","systemInfo","validation_system","version","features","security_levels","critical","sanitization","security_validation","audit_logging","allowed_html_tags","max_string_length","high","standard","basic","detection_patterns","sql_injection","xss","sanitization_features","validation_features","response","data","requester","userId","role","permissions","system","validation_enabled","sanitization_enabled","audit_enabled","timestamp","Date","toISOString","console","postHandler","validatedData","validatedBody","validationResults","middleware_validation","validationMetadata","testData","criticalResult","_enterprisevalidationmiddleware","validateData","critical_validation","errors","sanitized_data","sanitized","standardResult","standard_validation","sanitizationDemo","original_data","malicious_script","normal_text","critical_level","sanitizeData","high_level","standard_level","basic_level","demoStats","total_validations","successful_validations","filter","r","length","failed_validations","sanitization_applied","security_patterns_detected","e","includes","performance_metrics","total_time_ms","performanceMs","average_time_ms","validation_results","sanitization_demo","demo_statistics","recommendations","validation","level","audit_logged","patterns_detected","putHandler","securityTest","results","testSchema","testResult","_enterprisevalidationsystem","criticalValidator","validateAndSanitize","validation_passed","errors_detected","sanitized_payload","security_patterns_found","performance_ms","security_test","test_summary","payload_blocked","sanitization_effective","recommendation","security","threat_detected","withCriticalValidation","bodySchema"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\validation-demo\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Demostración del Sistema Enterprise de Validación\r\n * Muestra todas las funcionalidades del sistema de validación y sanitización\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { withCriticalValidation } from '@/lib/validation/enterprise-validation-middleware';\r\nimport {\r\n  validateData,\r\n  sanitizeData\r\n} from '@/lib/validation/enterprise-validation-middleware';\r\nimport {\r\n  criticalValidator,\r\n  highValidator,\r\n  standardValidator,\r\n  basicValidator\r\n} from '@/lib/validation/enterprise-validation-system';\r\nimport {\r\n  EnterpriseEmailSchema,\r\n  EnterprisePasswordSchema,\r\n  EnterpriseProductSchema,\r\n  EnterpriseUserSchema\r\n} from '@/lib/validation/enterprise-schemas';\r\nimport type { ValidatedRequest } from '@/lib/validation/enterprise-validation-middleware';\r\n\r\n// =====================================================\r\n// ESQUEMAS DE DEMOSTRACIÓN\r\n// =====================================================\r\n\r\nconst ValidationDemoSchema = z.object({\r\n  // Datos básicos\r\n  name: z.string().min(2, 'Nombre muy corto').max(100, 'Nombre muy largo'),\r\n  email: EnterpriseEmailSchema,\r\n  \r\n  // Datos potencialmente peligrosos\r\n  description: z.string().max(1000, 'Descripción muy larga').optional(),\r\n  html_content: z.string().max(5000, 'Contenido HTML muy largo').optional(),\r\n  \r\n  // Datos de prueba de seguridad\r\n  user_input: z.string().max(500, 'Input muy largo').optional(),\r\n  search_query: z.string().max(200, 'Query muy largo').optional(),\r\n  \r\n  // Datos estructurados\r\n  metadata: z.record(z.any()).optional(),\r\n  tags: z.array(z.string().max(50)).max(20, 'Demasiadas etiquetas').optional(),\r\n  \r\n  // Configuración de prueba\r\n  test_level: z.enum(['basic', 'standard', 'high', 'critical']).default('standard'),\r\n  enable_sanitization: z.boolean().default(true),\r\n  enable_security_validation: z.boolean().default(true)\r\n});\r\n\r\nconst SecurityTestSchema = z.object({\r\n  test_type: z.enum(['sql_injection', 'xss', 'script_injection', 'html_injection']),\r\n  payload: z.string().max(1000),\r\n  expected_result: z.enum(['blocked', 'sanitized', 'allowed']).optional()\r\n});\r\n\r\n// =====================================================\r\n// GET /api/admin/validation-demo\r\n// Información del sistema de validación\r\n// =====================================================\r\n\r\nconst getHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'system_info']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Información del sistema de validación\r\n    const systemInfo = {\r\n      validation_system: {\r\n        name: 'Enterprise Validation System',\r\n        version: '1.0.0',\r\n        features: [\r\n          'Zod schema validation',\r\n          'DOMPurify sanitization',\r\n          'SQL injection detection',\r\n          'XSS prevention',\r\n          'Enterprise audit logging',\r\n          'Performance metrics',\r\n          'Multi-level security configs'\r\n        ]\r\n      },\r\n      \r\n      security_levels: {\r\n        critical: {\r\n          description: 'Máxima seguridad para operaciones admin',\r\n          sanitization: true,\r\n          security_validation: true,\r\n          audit_logging: true,\r\n          allowed_html_tags: [],\r\n          max_string_length: 1000\r\n        },\r\n        high: {\r\n          description: 'Alta seguridad para APIs de pagos',\r\n          sanitization: true,\r\n          security_validation: true,\r\n          audit_logging: true,\r\n          allowed_html_tags: [],\r\n          max_string_length: 500\r\n        },\r\n        standard: {\r\n          description: 'Seguridad estándar para APIs públicas',\r\n          sanitization: true,\r\n          security_validation: true,\r\n          audit_logging: false,\r\n          allowed_html_tags: ['b', 'i', 'em', 'strong'],\r\n          max_string_length: 2000\r\n        },\r\n        basic: {\r\n          description: 'Seguridad básica para contenido de usuario',\r\n          sanitization: true,\r\n          security_validation: false,\r\n          audit_logging: false,\r\n          allowed_html_tags: ['b', 'i', 'em', 'strong', 'p', 'br'],\r\n          max_string_length: 5000\r\n        }\r\n      },\r\n      \r\n      detection_patterns: {\r\n        sql_injection: [\r\n          'SELECT ... FROM',\r\n          'UNION ... SELECT',\r\n          'INSERT ... INTO',\r\n          'UPDATE ... SET',\r\n          'DELETE ... FROM',\r\n          'DROP ... TABLE'\r\n        ],\r\n        xss: [\r\n          '<script>...</script>',\r\n          'javascript:',\r\n          'on*= event handlers',\r\n          'eval(...)',\r\n          'expression(...)'\r\n        ]\r\n      },\r\n      \r\n      sanitization_features: [\r\n        'Script removal',\r\n        'HTML tag filtering',\r\n        'SQL keyword removal',\r\n        'Whitespace normalization',\r\n        'String length limits',\r\n        'Character validation',\r\n        'HTML escaping',\r\n        'Emoji removal (optional)'\r\n      ],\r\n      \r\n      validation_features: [\r\n        'Type validation',\r\n        'Format validation',\r\n        'Range validation',\r\n        'Custom validation rules',\r\n        'Nested object validation',\r\n        'Array validation',\r\n        'File validation',\r\n        'Security pattern detection'\r\n      ]\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: systemInfo,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        system: {\r\n          validation_enabled: true,\r\n          sanitization_enabled: true,\r\n          audit_enabled: true\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[VALIDATION_DEMO_GET] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener información del sistema',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// POST /api/admin/validation-demo\r\n// Demostración de validación y sanitización\r\n// =====================================================\r\n\r\nconst postHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'system_test']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener datos validados del middleware\r\n    const validatedData = request.validatedBody;\r\n    \r\n    if (!validatedData) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Datos de validación no encontrados',\r\n          code: 'VALIDATION_DATA_MISSING',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Demostrar diferentes niveles de validación\r\n    const validationResults: any = {\r\n      middleware_validation: {\r\n        success: true,\r\n        data: validatedData,\r\n        metadata: request.validationMetadata\r\n      }\r\n    };\r\n\r\n    // Probar validación manual con diferentes niveles\r\n    const testData = {\r\n      name: validatedData.name,\r\n      email: validatedData.email,\r\n      description: validatedData.description || 'Test description with <script>alert(\"xss\")</script>',\r\n      user_input: validatedData.user_input || 'SELECT * FROM users WHERE id = 1'\r\n    };\r\n\r\n    // Validación crítica\r\n    const criticalResult = await validateData(\r\n      z.object({\r\n        name: z.string(),\r\n        email: EnterpriseEmailSchema,\r\n        description: z.string(),\r\n        user_input: z.string()\r\n      }),\r\n      testData,\r\n      'CRITICAL_ADMIN',\r\n      context\r\n    );\r\n\r\n    validationResults.critical_validation = {\r\n      success: criticalResult.success,\r\n      errors: criticalResult.errors,\r\n      sanitized_data: criticalResult.sanitized,\r\n      metadata: criticalResult.metadata\r\n    };\r\n\r\n    // Validación estándar\r\n    const standardResult = await validateData(\r\n      z.object({\r\n        name: z.string(),\r\n        email: EnterpriseEmailSchema,\r\n        description: z.string(),\r\n        user_input: z.string()\r\n      }),\r\n      testData,\r\n      'STANDARD_PUBLIC',\r\n      context\r\n    );\r\n\r\n    validationResults.standard_validation = {\r\n      success: standardResult.success,\r\n      errors: standardResult.errors,\r\n      sanitized_data: standardResult.sanitized,\r\n      metadata: standardResult.metadata\r\n    };\r\n\r\n    // Demostrar sanitización manual\r\n    const sanitizationDemo = {\r\n      original_data: {\r\n        malicious_script: '<script>alert(\"XSS Attack!\")</script>Hello World',\r\n        sql_injection: \"'; DROP TABLE users; --\",\r\n        html_content: '<div onclick=\"alert(1)\">Click me</div>',\r\n        normal_text: 'This is normal text with números 123'\r\n      },\r\n      sanitized_data: {}\r\n    };\r\n\r\n    // Sanitizar con diferentes niveles\r\n    sanitizationDemo.sanitized_data = {\r\n      critical_level: sanitizeData(sanitizationDemo.original_data, 'CRITICAL_ADMIN'),\r\n      high_level: sanitizeData(sanitizationDemo.original_data, 'HIGH_PAYMENT'),\r\n      standard_level: sanitizeData(sanitizationDemo.original_data, 'STANDARD_PUBLIC'),\r\n      basic_level: sanitizeData(sanitizationDemo.original_data, 'BASIC_USER')\r\n    };\r\n\r\n    // Estadísticas de la demostración\r\n    const demoStats = {\r\n      total_validations: 3,\r\n      successful_validations: [criticalResult, standardResult].filter(r => r.success).length,\r\n      failed_validations: [criticalResult, standardResult].filter(r => !r.success).length,\r\n      sanitization_applied: true,\r\n      security_patterns_detected: [\r\n        ...(criticalResult.errors?.filter(e => e.code.includes('INJECTION') || e.code.includes('XSS')) || []),\r\n        ...(standardResult.errors?.filter(e => e.code.includes('INJECTION') || e.code.includes('XSS')) || [])\r\n      ].length,\r\n      performance_metrics: {\r\n        total_time_ms: (criticalResult.metadata?.performanceMs || 0) + (standardResult.metadata?.performanceMs || 0),\r\n        average_time_ms: ((criticalResult.metadata?.performanceMs || 0) + (standardResult.metadata?.performanceMs || 0)) / 2\r\n      }\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        validation_results: validationResults,\r\n        sanitization_demo: sanitizationDemo,\r\n        demo_statistics: demoStats,\r\n        recommendations: [\r\n          'Use CRITICAL_ADMIN for admin operations',\r\n          'Use HIGH_PAYMENT for payment processing',\r\n          'Use STANDARD_PUBLIC for public APIs',\r\n          'Use BASIC_USER for user-generated content',\r\n          'Always enable sanitization for user input',\r\n          'Monitor validation performance metrics',\r\n          'Review security pattern detections regularly'\r\n        ]\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        validation: {\r\n          level: 'critical',\r\n          audit_logged: true,\r\n          patterns_detected: demoStats.security_patterns_detected\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[VALIDATION_DEMO_POST] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en demostración de validación',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// PUT /api/admin/validation-demo\r\n// Pruebas de seguridad específicas\r\n// =====================================================\r\n\r\nconst putHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_test']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const testData = request.validatedBody;\r\n\r\n    // Ejecutar prueba de seguridad específica\r\n    const securityTest = {\r\n      test_type: testData.test_type,\r\n      payload: testData.payload,\r\n      results: {}\r\n    };\r\n\r\n    // Probar con validador crítico\r\n    const testSchema = z.object({\r\n      payload: z.string()\r\n    });\r\n\r\n    const testResult = await criticalValidator.validateAndSanitize(\r\n      testSchema,\r\n      { payload: testData.payload },\r\n      context,\r\n      request\r\n    );\r\n\r\n    securityTest.results = {\r\n      validation_passed: testResult.success,\r\n      errors_detected: testResult.errors || [],\r\n      sanitized_payload: testResult.sanitized?.payload,\r\n      security_patterns_found: testResult.errors?.filter(e => \r\n        e.code.includes('INJECTION') || e.code.includes('XSS')\r\n      ) || [],\r\n      performance_ms: testResult.metadata?.performanceMs\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        security_test: securityTest,\r\n        test_summary: {\r\n          payload_blocked: !testResult.success,\r\n          patterns_detected: securityTest.results.security_patterns_found.length,\r\n          sanitization_effective: testResult.sanitized?.payload !== testData.payload,\r\n          recommendation: testResult.success ? \r\n            'Payload appears safe' : \r\n            'Payload contains security threats and was blocked'\r\n        }\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          test_type: testData.test_type,\r\n          threat_detected: !testResult.success,\r\n          audit_logged: true\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[VALIDATION_DEMO_PUT] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en prueba de seguridad',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// APLICAR MIDDLEWARE DE VALIDACIÓN ENTERPRISE\r\n// =====================================================\r\n\r\nexport const GET = withCriticalValidation({})(getHandler);\r\n\r\nexport const POST = withCriticalValidation({\r\n  bodySchema: ValidationDemoSchema\r\n})(postHandler);\r\n\r\nexport const PUT = withCriticalValidation({\r\n  bodySchema: SecurityTestSchema\r\n})(putHandler);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}