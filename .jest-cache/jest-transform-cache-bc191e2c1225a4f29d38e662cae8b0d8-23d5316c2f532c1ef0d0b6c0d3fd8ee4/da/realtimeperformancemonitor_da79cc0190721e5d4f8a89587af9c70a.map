{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\real-time-performance-monitor.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - REAL-TIME PERFORMANCE MONITOR\n// ===================================\n\nimport { logger, LogCategory } from '../enterprise/logger'\nimport { getRedisClient } from '../integrations/redis'\n\n/**\n * Métricas de performance en tiempo real\n */\nexport interface RealTimeMetrics {\n  timestamp: number\n  responseTime: number\n  throughput: number\n  errorRate: number\n  cpuUsage: number\n  memoryUsage: number\n  activeConnections: number\n  queueSize: number\n  cacheHitRate: number\n  dbConnectionPool: number\n}\n\n/**\n * Core Web Vitals en tiempo real\n */\nexport interface CoreWebVitals {\n  lcp: number // Largest Contentful Paint\n  fid: number // First Input Delay\n  cls: number // Cumulative Layout Shift\n  fcp: number // First Contentful Paint\n  ttfb: number // Time to First Byte\n  inp: number // Interaction to Next Paint\n  timestamp: number\n}\n\n/**\n * Métricas de API en tiempo real\n */\nexport interface APIMetrics {\n  endpoint: string\n  method: string\n  responseTime: number\n  statusCode: number\n  requestSize: number\n  responseSize: number\n  userAgent: string\n  ip: string\n  timestamp: number\n}\n\n/**\n * Métricas de base de datos\n */\nexport interface DatabaseMetrics {\n  queryTime: number\n  queryType: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE'\n  tableName: string\n  rowsAffected: number\n  connectionPoolSize: number\n  activeConnections: number\n  waitingConnections: number\n  timestamp: number\n}\n\n/**\n * Alertas de performance\n */\nexport interface PerformanceAlert {\n  id: string\n  type: 'performance' | 'error' | 'capacity' | 'availability'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  metric: string\n  value: number\n  threshold: number\n  message: string\n  timestamp: number\n  resolved: boolean\n  resolvedAt?: number\n  escalated: boolean\n  escalatedAt?: number\n}\n\n/**\n * Configuración de umbrales\n */\nexport interface PerformanceThresholds {\n  responseTime: {\n    warning: number\n    critical: number\n  }\n  errorRate: {\n    warning: number\n    critical: number\n  }\n  cpuUsage: {\n    warning: number\n    critical: number\n  }\n  memoryUsage: {\n    warning: number\n    critical: number\n  }\n  coreWebVitals: {\n    lcp: { good: number; poor: number }\n    fid: { good: number; poor: number }\n    cls: { good: number; poor: number }\n    fcp: { good: number; poor: number }\n    ttfb: { good: number; poor: number }\n  }\n}\n\n/**\n * Configuración por defecto de umbrales\n */\nexport const DEFAULT_THRESHOLDS: PerformanceThresholds = {\n  responseTime: {\n    warning: 1000, // 1 segundo\n    critical: 3000, // 3 segundos\n  },\n  errorRate: {\n    warning: 0.05, // 5%\n    critical: 0.1, // 10%\n  },\n  cpuUsage: {\n    warning: 0.7, // 70%\n    critical: 0.9, // 90%\n  },\n  memoryUsage: {\n    warning: 0.8, // 80%\n    critical: 0.95, // 95%\n  },\n  coreWebVitals: {\n    lcp: { good: 2500, poor: 4000 },\n    fid: { good: 100, poor: 300 },\n    cls: { good: 0.1, poor: 0.25 },\n    fcp: { good: 1800, poor: 3000 },\n    ttfb: { good: 800, poor: 1800 },\n  },\n}\n\n/**\n * Monitor de performance en tiempo real\n */\nexport class RealTimePerformanceMonitor {\n  private static instance: RealTimePerformanceMonitor\n  private redis = getRedisClient()\n  private thresholds: PerformanceThresholds = DEFAULT_THRESHOLDS\n  private alerts: Map<string, PerformanceAlert> = new Map()\n  private metricsBuffer: RealTimeMetrics[] = []\n  private webVitalsBuffer: CoreWebVitals[] = []\n  private apiMetricsBuffer: APIMetrics[] = []\n  private dbMetricsBuffer: DatabaseMetrics[] = []\n  private subscribers: Set<(data: any) => void> = new Set()\n  private flushInterval?: NodeJS.Timeout\n  private monitoringInterval?: NodeJS.Timeout\n\n  private constructor() {\n    this.startMonitoring()\n    this.startPeriodicFlush()\n  }\n\n  static getInstance(): RealTimePerformanceMonitor {\n    if (!RealTimePerformanceMonitor.instance) {\n      RealTimePerformanceMonitor.instance = new RealTimePerformanceMonitor()\n    }\n    return RealTimePerformanceMonitor.instance\n  }\n\n  /**\n   * Inicia el monitoreo en tiempo real\n   */\n  private startMonitoring(): void {\n    this.monitoringInterval = setInterval(() => {\n      this.collectSystemMetrics()\n    }, 5000) // Cada 5 segundos\n\n    logger.info(LogCategory.MONITORING, 'Real-time performance monitoring started')\n  }\n\n  /**\n   * Inicia el flush periódico de métricas\n   */\n  private startPeriodicFlush(): void {\n    this.flushInterval = setInterval(() => {\n      this.flushMetricsToRedis()\n    }, 30000) // Cada 30 segundos\n  }\n\n  /**\n   * Recolecta métricas del sistema\n   */\n  private async collectSystemMetrics(): Promise<void> {\n    try {\n      const metrics: RealTimeMetrics = {\n        timestamp: Date.now(),\n        responseTime: await this.getAverageResponseTime(),\n        throughput: await this.getCurrentThroughput(),\n        errorRate: await this.getCurrentErrorRate(),\n        cpuUsage: await this.getCPUUsage(),\n        memoryUsage: await this.getMemoryUsage(),\n        activeConnections: await this.getActiveConnections(),\n        queueSize: await this.getQueueSize(),\n        cacheHitRate: await this.getCacheHitRate(),\n        dbConnectionPool: await this.getDBConnectionPoolSize(),\n      }\n\n      this.metricsBuffer.push(metrics)\n\n      // Mantener solo las últimas 100 métricas en buffer\n      if (this.metricsBuffer.length > 100) {\n        this.metricsBuffer = this.metricsBuffer.slice(-100)\n      }\n\n      // Verificar umbrales y generar alertas\n      await this.checkThresholds(metrics)\n\n      // Notificar a suscriptores\n      this.notifySubscribers('metrics', metrics)\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error collecting system metrics', error as Error)\n    }\n  }\n\n  /**\n   * Registra métricas de Core Web Vitals\n   */\n  recordWebVitals(vitals: Omit<CoreWebVitals, 'timestamp'>): void {\n    const webVitals: CoreWebVitals = {\n      ...vitals,\n      timestamp: Date.now(),\n    }\n\n    this.webVitalsBuffer.push(webVitals)\n\n    // Mantener solo las últimas 50 métricas\n    if (this.webVitalsBuffer.length > 50) {\n      this.webVitalsBuffer = this.webVitalsBuffer.slice(-50)\n    }\n\n    // Verificar umbrales de Core Web Vitals\n    this.checkWebVitalsThresholds(webVitals)\n\n    // Notificar a suscriptores\n    this.notifySubscribers('webVitals', webVitals)\n  }\n\n  /**\n   * Registra métricas de API\n   */\n  recordAPIMetrics(metrics: Omit<APIMetrics, 'timestamp'>): void {\n    const apiMetrics: APIMetrics = {\n      ...metrics,\n      timestamp: Date.now(),\n    }\n\n    this.apiMetricsBuffer.push(apiMetrics)\n\n    // Mantener solo las últimas 200 métricas\n    if (this.apiMetricsBuffer.length > 200) {\n      this.apiMetricsBuffer = this.apiMetricsBuffer.slice(-200)\n    }\n\n    // Verificar umbrales de API\n    this.checkAPIThresholds(apiMetrics)\n\n    // Notificar a suscriptores\n    this.notifySubscribers('apiMetrics', apiMetrics)\n  }\n\n  /**\n   * Registra métricas de base de datos\n   */\n  recordDatabaseMetrics(metrics: Omit<DatabaseMetrics, 'timestamp'>): void {\n    const dbMetrics: DatabaseMetrics = {\n      ...metrics,\n      timestamp: Date.now(),\n    }\n\n    this.dbMetricsBuffer.push(dbMetrics)\n\n    // Mantener solo las últimas 100 métricas\n    if (this.dbMetricsBuffer.length > 100) {\n      this.dbMetricsBuffer = this.dbMetricsBuffer.slice(-100)\n    }\n\n    // Verificar umbrales de DB\n    this.checkDatabaseThresholds(dbMetrics)\n\n    // Notificar a suscriptores\n    this.notifySubscribers('dbMetrics', dbMetrics)\n  }\n\n  /**\n   * Verifica umbrales y genera alertas\n   */\n  private async checkThresholds(metrics: RealTimeMetrics): Promise<void> {\n    // Verificar tiempo de respuesta\n    if (metrics.responseTime > this.thresholds.responseTime.critical) {\n      await this.createAlert(\n        'performance',\n        'critical',\n        'responseTime',\n        metrics.responseTime,\n        this.thresholds.responseTime.critical,\n        `Response time crítico: ${metrics.responseTime}ms`\n      )\n    } else if (metrics.responseTime > this.thresholds.responseTime.warning) {\n      await this.createAlert(\n        'performance',\n        'medium',\n        'responseTime',\n        metrics.responseTime,\n        this.thresholds.responseTime.warning,\n        `Response time alto: ${metrics.responseTime}ms`\n      )\n    }\n\n    // Verificar tasa de errores\n    if (metrics.errorRate > this.thresholds.errorRate.critical) {\n      await this.createAlert(\n        'error',\n        'critical',\n        'errorRate',\n        metrics.errorRate,\n        this.thresholds.errorRate.critical,\n        `Tasa de errores crítica: ${(metrics.errorRate * 100).toFixed(1)}%`\n      )\n    } else if (metrics.errorRate > this.thresholds.errorRate.warning) {\n      await this.createAlert(\n        'error',\n        'medium',\n        'errorRate',\n        metrics.errorRate,\n        this.thresholds.errorRate.warning,\n        `Tasa de errores alta: ${(metrics.errorRate * 100).toFixed(1)}%`\n      )\n    }\n\n    // Verificar uso de CPU\n    if (metrics.cpuUsage > this.thresholds.cpuUsage.critical) {\n      await this.createAlert(\n        'capacity',\n        'critical',\n        'cpuUsage',\n        metrics.cpuUsage,\n        this.thresholds.cpuUsage.critical,\n        `Uso de CPU crítico: ${(metrics.cpuUsage * 100).toFixed(1)}%`\n      )\n    } else if (metrics.cpuUsage > this.thresholds.cpuUsage.warning) {\n      await this.createAlert(\n        'capacity',\n        'medium',\n        'cpuUsage',\n        metrics.cpuUsage,\n        this.thresholds.cpuUsage.warning,\n        `Uso de CPU alto: ${(metrics.cpuUsage * 100).toFixed(1)}%`\n      )\n    }\n\n    // Verificar uso de memoria\n    if (metrics.memoryUsage > this.thresholds.memoryUsage.critical) {\n      await this.createAlert(\n        'capacity',\n        'critical',\n        'memoryUsage',\n        metrics.memoryUsage,\n        this.thresholds.memoryUsage.critical,\n        `Uso de memoria crítico: ${(metrics.memoryUsage * 100).toFixed(1)}%`\n      )\n    } else if (metrics.memoryUsage > this.thresholds.memoryUsage.warning) {\n      await this.createAlert(\n        'capacity',\n        'medium',\n        'memoryUsage',\n        metrics.memoryUsage,\n        this.thresholds.memoryUsage.warning,\n        `Uso de memoria alto: ${(metrics.memoryUsage * 100).toFixed(1)}%`\n      )\n    }\n  }\n\n  /**\n   * Verifica umbrales de Core Web Vitals\n   */\n  private checkWebVitalsThresholds(vitals: CoreWebVitals): void {\n    const { coreWebVitals } = this.thresholds\n\n    // Verificar LCP\n    if (vitals.lcp > coreWebVitals.lcp.poor) {\n      this.createAlert(\n        'performance',\n        'high',\n        'lcp',\n        vitals.lcp,\n        coreWebVitals.lcp.poor,\n        `LCP pobre: ${vitals.lcp}ms`\n      )\n    } else if (vitals.lcp > coreWebVitals.lcp.good) {\n      this.createAlert(\n        'performance',\n        'medium',\n        'lcp',\n        vitals.lcp,\n        coreWebVitals.lcp.good,\n        `LCP necesita mejora: ${vitals.lcp}ms`\n      )\n    }\n\n    // Verificar FID\n    if (vitals.fid > coreWebVitals.fid.poor) {\n      this.createAlert(\n        'performance',\n        'high',\n        'fid',\n        vitals.fid,\n        coreWebVitals.fid.poor,\n        `FID pobre: ${vitals.fid}ms`\n      )\n    } else if (vitals.fid > coreWebVitals.fid.good) {\n      this.createAlert(\n        'performance',\n        'medium',\n        'fid',\n        vitals.fid,\n        coreWebVitals.fid.good,\n        `FID necesita mejora: ${vitals.fid}ms`\n      )\n    }\n\n    // Verificar CLS\n    if (vitals.cls > coreWebVitals.cls.poor) {\n      this.createAlert(\n        'performance',\n        'high',\n        'cls',\n        vitals.cls,\n        coreWebVitals.cls.poor,\n        `CLS pobre: ${vitals.cls}`\n      )\n    } else if (vitals.cls > coreWebVitals.cls.good) {\n      this.createAlert(\n        'performance',\n        'medium',\n        'cls',\n        vitals.cls,\n        coreWebVitals.cls.good,\n        `CLS necesita mejora: ${vitals.cls}`\n      )\n    }\n  }\n\n  /**\n   * Verifica umbrales de API\n   */\n  private checkAPIThresholds(metrics: APIMetrics): void {\n    if (metrics.responseTime > this.thresholds.responseTime.critical) {\n      this.createAlert(\n        'performance',\n        'high',\n        'apiResponseTime',\n        metrics.responseTime,\n        this.thresholds.responseTime.critical,\n        `API lenta: ${metrics.method} ${metrics.endpoint} - ${metrics.responseTime}ms`\n      )\n    }\n\n    if (metrics.statusCode >= 500) {\n      this.createAlert(\n        'error',\n        'high',\n        'apiError',\n        metrics.statusCode,\n        500,\n        `Error de servidor: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`\n      )\n    } else if (metrics.statusCode >= 400) {\n      this.createAlert(\n        'error',\n        'medium',\n        'apiClientError',\n        metrics.statusCode,\n        400,\n        `Error de cliente: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`\n      )\n    }\n  }\n\n  /**\n   * Verifica umbrales de base de datos\n   */\n  private checkDatabaseThresholds(metrics: DatabaseMetrics): void {\n    if (metrics.queryTime > 5000) {\n      // 5 segundos\n      this.createAlert(\n        'performance',\n        'high',\n        'slowQuery',\n        metrics.queryTime,\n        5000,\n        `Query lenta: ${metrics.queryType} en ${metrics.tableName} - ${metrics.queryTime}ms`\n      )\n    }\n\n    if (metrics.waitingConnections > 10) {\n      this.createAlert(\n        'capacity',\n        'medium',\n        'dbConnectionWait',\n        metrics.waitingConnections,\n        10,\n        `Conexiones esperando: ${metrics.waitingConnections}`\n      )\n    }\n  }\n\n  /**\n   * Crea una alerta\n   */\n  private async createAlert(\n    type: PerformanceAlert['type'],\n    severity: PerformanceAlert['severity'],\n    metric: string,\n    value: number,\n    threshold: number,\n    message: string\n  ): Promise<void> {\n    const alertId = `${type}_${metric}_${Date.now()}`\n\n    const alert: PerformanceAlert = {\n      id: alertId,\n      type,\n      severity,\n      metric,\n      value,\n      threshold,\n      message,\n      timestamp: Date.now(),\n      resolved: false,\n      escalated: false,\n    }\n\n    this.alerts.set(alertId, alert)\n\n    // Notificar a suscriptores\n    this.notifySubscribers('alert', alert)\n\n    // Log de la alerta\n    logger.warn(LogCategory.MONITORING, `Performance alert: ${message}`, {\n      type,\n      severity,\n      metric,\n      value,\n      threshold,\n    })\n\n    // Persistir en Redis\n    await this.persistAlert(alert)\n  }\n\n  /**\n   * Suscribirse a actualizaciones en tiempo real\n   */\n  subscribe(callback: (data: any) => void): () => void {\n    this.subscribers.add(callback)\n\n    return () => {\n      this.subscribers.delete(callback)\n    }\n  }\n\n  /**\n   * Notifica a todos los suscriptores\n   */\n  private notifySubscribers(type: string, data: any): void {\n    this.subscribers.forEach(callback => {\n      try {\n        callback({ type, data, timestamp: Date.now() })\n      } catch (error) {\n        logger.error(LogCategory.MONITORING, 'Error notifying subscriber', error as Error)\n      }\n    })\n  }\n\n  /**\n   * Obtiene métricas actuales\n   */\n  getCurrentMetrics(): {\n    realTime: RealTimeMetrics[]\n    webVitals: CoreWebVitals[]\n    apiMetrics: APIMetrics[]\n    dbMetrics: DatabaseMetrics[]\n    alerts: PerformanceAlert[]\n  } {\n    return {\n      realTime: [...this.metricsBuffer],\n      webVitals: [...this.webVitalsBuffer],\n      apiMetrics: [...this.apiMetricsBuffer],\n      dbMetrics: [...this.dbMetricsBuffer],\n      alerts: Array.from(this.alerts.values()).filter(a => !a.resolved),\n    }\n  }\n\n  /**\n   * Actualiza umbrales\n   */\n  updateThresholds(newThresholds: Partial<PerformanceThresholds>): void {\n    this.thresholds = { ...this.thresholds, ...newThresholds }\n    logger.info(LogCategory.MONITORING, 'Performance thresholds updated')\n  }\n\n  /**\n   * Resuelve una alerta\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.get(alertId)\n    if (alert && !alert.resolved) {\n      alert.resolved = true\n      alert.resolvedAt = Date.now()\n\n      this.notifySubscribers('alertResolved', alert)\n      logger.info(LogCategory.MONITORING, `Alert resolved: ${alertId}`)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Flush de métricas a Redis\n   */\n  private async flushMetricsToRedis(): Promise<void> {\n    try {\n      const timestamp = Date.now()\n\n      // Guardar métricas en Redis con TTL de 24 horas\n      if (this.metricsBuffer.length > 0) {\n        await this.redis.setex(\n          `metrics:realtime:${timestamp}`,\n          86400,\n          JSON.stringify(this.metricsBuffer)\n        )\n      }\n\n      if (this.webVitalsBuffer.length > 0) {\n        await this.redis.setex(\n          `metrics:webvitals:${timestamp}`,\n          86400,\n          JSON.stringify(this.webVitalsBuffer)\n        )\n      }\n\n      if (this.apiMetricsBuffer.length > 0) {\n        await this.redis.setex(\n          `metrics:api:${timestamp}`,\n          86400,\n          JSON.stringify(this.apiMetricsBuffer)\n        )\n      }\n\n      if (this.dbMetricsBuffer.length > 0) {\n        await this.redis.setex(\n          `metrics:database:${timestamp}`,\n          86400,\n          JSON.stringify(this.dbMetricsBuffer)\n        )\n      }\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error flushing metrics to Redis', error as Error)\n    }\n  }\n\n  /**\n   * Persiste alerta en Redis\n   */\n  private async persistAlert(alert: PerformanceAlert): Promise<void> {\n    try {\n      await this.redis.setex(\n        `alert:${alert.id}`,\n        86400 * 7, // 7 días\n        JSON.stringify(alert)\n      )\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error persisting alert', error as Error)\n    }\n  }\n\n  // ===================================\n  // MÉTODOS DE RECOLECCIÓN DE MÉTRICAS\n  // ===================================\n\n  private async getAverageResponseTime(): Promise<number> {\n    // Calcular tiempo de respuesta promedio de las últimas métricas de API\n    const recentAPI = this.apiMetricsBuffer.slice(-10)\n    if (recentAPI.length === 0) {\n      return 0\n    }\n\n    const total = recentAPI.reduce((sum, metric) => sum + metric.responseTime, 0)\n    return total / recentAPI.length\n  }\n\n  private async getCurrentThroughput(): Promise<number> {\n    // Calcular throughput basado en requests por segundo\n    const now = Date.now()\n    const oneMinuteAgo = now - 60000\n    const recentRequests = this.apiMetricsBuffer.filter(m => m.timestamp > oneMinuteAgo)\n    return recentRequests.length / 60 // requests por segundo\n  }\n\n  private async getCurrentErrorRate(): Promise<number> {\n    const recentAPI = this.apiMetricsBuffer.slice(-100)\n    if (recentAPI.length === 0) {\n      return 0\n    }\n\n    const errors = recentAPI.filter(m => m.statusCode >= 400).length\n    return errors / recentAPI.length\n  }\n\n  private async getCPUUsage(): Promise<number> {\n    // Simulación de uso de CPU (en implementación real, usar librerías del sistema)\n    return Math.random() * 0.8 // 0-80%\n  }\n\n  private async getMemoryUsage(): Promise<number> {\n    // Obtener uso de memoria real\n    if (typeof process !== 'undefined') {\n      const memUsage = process.memoryUsage()\n      return memUsage.heapUsed / memUsage.heapTotal\n    }\n    return Math.random() * 0.7 // Fallback\n  }\n\n  private async getActiveConnections(): Promise<number> {\n    // Simulación de conexiones activas\n    return Math.floor(Math.random() * 100) + 10\n  }\n\n  private async getQueueSize(): Promise<number> {\n    // Simulación de tamaño de cola\n    return Math.floor(Math.random() * 20)\n  }\n\n  private async getCacheHitRate(): Promise<number> {\n    // Obtener hit rate del cache (integrar con cache manager)\n    return Math.random() * 0.3 + 0.7 // 70-100%\n  }\n\n  private async getDBConnectionPoolSize(): Promise<number> {\n    // Simulación de pool de conexiones DB\n    return Math.floor(Math.random() * 10) + 5\n  }\n\n  /**\n   * Destructor\n   */\n  destroy(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval)\n    }\n    if (this.flushInterval) {\n      clearInterval(this.flushInterval)\n    }\n    this.subscribers.clear()\n  }\n}\n\n// Instancia singleton\nexport const realTimePerformanceMonitor = RealTimePerformanceMonitor.getInstance()\n\n/**\n * Utilidades para monitoreo en tiempo real\n */\nexport const RealTimeMonitoringUtils = {\n  /**\n   * Registra métricas de Web Vitals desde el cliente\n   */\n  recordWebVitals(vitals: Omit<CoreWebVitals, 'timestamp'>): void {\n    realTimePerformanceMonitor.recordWebVitals(vitals)\n  },\n\n  /**\n   * Registra métricas de API\n   */\n  recordAPICall(metrics: Omit<APIMetrics, 'timestamp'>): void {\n    realTimePerformanceMonitor.recordAPIMetrics(metrics)\n  },\n\n  /**\n   * Registra métricas de base de datos\n   */\n  recordDatabaseQuery(metrics: Omit<DatabaseMetrics, 'timestamp'>): void {\n    realTimePerformanceMonitor.recordDatabaseMetrics(metrics)\n  },\n\n  /**\n   * Obtiene resumen de estado actual\n   */\n  getCurrentStatus(): {\n    healthy: boolean\n    activeAlerts: number\n    avgResponseTime: number\n    errorRate: number\n    lastUpdate: number\n  } {\n    const current = realTimePerformanceMonitor.getCurrentMetrics()\n    const latestMetrics = current.realTime[current.realTime.length - 1]\n\n    if (!latestMetrics) {\n      return {\n        healthy: false,\n        activeAlerts: 0,\n        avgResponseTime: 0,\n        errorRate: 0,\n        lastUpdate: 0,\n      }\n    }\n\n    const activeAlerts = current.alerts.length\n    const healthy =\n      activeAlerts === 0 && latestMetrics.responseTime < 2000 && latestMetrics.errorRate < 0.05\n\n    return {\n      healthy,\n      activeAlerts,\n      avgResponseTime: latestMetrics.responseTime,\n      errorRate: latestMetrics.errorRate,\n      lastUpdate: latestMetrics.timestamp,\n    }\n  },\n}\n"],"names":["DEFAULT_THRESHOLDS","RealTimeMonitoringUtils","RealTimePerformanceMonitor","realTimePerformanceMonitor","responseTime","warning","critical","errorRate","cpuUsage","memoryUsage","coreWebVitals","lcp","good","poor","fid","cls","fcp","ttfb","redis","getRedisClient","thresholds","alerts","Map","metricsBuffer","webVitalsBuffer","apiMetricsBuffer","dbMetricsBuffer","subscribers","Set","startMonitoring","startPeriodicFlush","getInstance","instance","monitoringInterval","setInterval","collectSystemMetrics","logger","info","LogCategory","MONITORING","flushInterval","flushMetricsToRedis","metrics","timestamp","Date","now","getAverageResponseTime","throughput","getCurrentThroughput","getCurrentErrorRate","getCPUUsage","getMemoryUsage","activeConnections","getActiveConnections","queueSize","getQueueSize","cacheHitRate","getCacheHitRate","dbConnectionPool","getDBConnectionPoolSize","push","length","slice","checkThresholds","notifySubscribers","error","recordWebVitals","vitals","webVitals","checkWebVitalsThresholds","recordAPIMetrics","apiMetrics","checkAPIThresholds","recordDatabaseMetrics","dbMetrics","checkDatabaseThresholds","createAlert","toFixed","method","endpoint","statusCode","queryTime","queryType","tableName","waitingConnections","type","severity","metric","value","threshold","message","alertId","alert","id","resolved","escalated","set","warn","persistAlert","subscribe","callback","add","delete","data","forEach","getCurrentMetrics","realTime","Array","from","values","filter","a","updateThresholds","newThresholds","resolveAlert","get","resolvedAt","setex","JSON","stringify","recentAPI","total","reduce","sum","oneMinuteAgo","recentRequests","m","errors","Math","random","process","memUsage","heapUsed","heapTotal","floor","destroy","clearInterval","clear","recordAPICall","recordDatabaseQuery","getCurrentStatus","current","latestMetrics","healthy","activeAlerts","avgResponseTime","lastUpdate"],"mappings":"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"}