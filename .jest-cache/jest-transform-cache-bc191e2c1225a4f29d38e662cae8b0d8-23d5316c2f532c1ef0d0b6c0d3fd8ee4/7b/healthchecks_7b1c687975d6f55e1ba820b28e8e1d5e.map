{"version":3,"names":["EnterpriseHealthSystem","cov_13lbuy7905","f","s","HealthSeverity","HealthStatus","enterpriseHealthSystem","constructor","healthChecks","Map","recoveryActions","lastResults","checkIntervals","recoveryAttempts","initializeDefaultChecks","initializeRecoveryActions","getInstance","instance","b","registerHealthCheck","config","set","service","enabled","interval","scheduleHealthCheck","_logger","logger","info","LogLevel","INFO","autoRecover","LogCategory","SYSTEM","registerRecoveryAction","action","id","automatic","runHealthCheck","get","Error","startTime","Date","now","result","executeHealthCheck","error","status","severity","responseTime","message","details","lastChecked","toISOString","recordHealthMetrics","attemptAutoRecovery","runAllHealthChecks","results","entries","push","ERROR","getSystemHealth","services","Array","from","values","summary","forEach","overall","lastUpdated","executeRecoveryAction","actionId","attempts","cooldownEnd","lastAttempt","getTime","cooldownMinutes","count","maxRetries","success","currentAttempts","checkDatabaseHealth","checkCacheHealth","checkMercadoPagoHealth","checkCircuitBreakersHealth","checkExternalAPIsHealth","checkFileSystemHealth","supabase","_supabase","getSupabaseClient","data","select","limit","thresholds","critical","warning","recordsFound","length","connectionPool","queryType","nextCheck","metrics","recordCount","recommendations","testKey","testValue","test","timestamp","_cachemanager","CacheUtils","retrieved","readWrite","provider","operationsPerSecond","publicKey","process","env","MERCADOPAGO_PUBLIC_KEY_PROD","MERCADOPAGO_PUBLIC_KEY_TEST","accessToken","MERCADOPAGO_ACCESS_TOKEN_PROD","MERCADOPAGO_ACCESS_TOKEN_TEST","environment","includes","publicKeyConfigured","accessTokenConfigured","configurationScore","criticalState","_circuitbreaker","mercadoPagoCriticalBreaker","getState","standardState","mercadoPagoStandardBreaker","webhookState","webhookProcessingBreaker","states","openBreakers","filter","state","halfOpenBreakers","mercadopago_critical","mercadopago_standard","webhook_processing","totalBreakers","healthScore","undefined","checkedAPIs","successRate","diskSpace","permissions","diskUsage","existingInterval","clearInterval","setInterval","_enterprisemetrics","recordPerformanceMetric","availabilityScore","recordSecurityMetric","timeout","retries","errorRate","dependencies","notifications","name","description","reset","destroy","clear"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\health-checks.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE HEALTH CHECKS SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { CacheUtils } from '@/lib/cache-manager';\r\nimport { \r\n  mercadoPagoCriticalBreaker, \r\n  mercadoPagoStandardBreaker, \r\n  webhookProcessingBreaker \r\n} from '@/lib/integrations/mercadopago/circuit-breaker';\r\nimport { recordPerformanceMetric, recordSecurityMetric } from './enterprise-metrics';\r\n\r\n// Estados de salud\r\nexport enum HealthStatus {\r\n  HEALTHY = 'healthy',\r\n  DEGRADED = 'degraded',\r\n  UNHEALTHY = 'unhealthy',\r\n  UNKNOWN = 'unknown'\r\n}\r\n\r\n// Severidad de problemas\r\nexport enum HealthSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n// Resultado de health check\r\nexport interface HealthCheckResult {\r\n  service: string;\r\n  status: HealthStatus;\r\n  severity: HealthSeverity;\r\n  responseTime: number;\r\n  message: string;\r\n  details: Record<string, any>;\r\n  lastChecked: string;\r\n  nextCheck?: string;\r\n  recommendations?: string[];\r\n  metrics?: Record<string, number>;\r\n}\r\n\r\n// Configuración de health check\r\nexport interface HealthCheckConfig {\r\n  service: string;\r\n  enabled: boolean;\r\n  interval: number; // segundos\r\n  timeout: number; // segundos\r\n  retries: number;\r\n  thresholds: {\r\n    responseTime: {\r\n      warning: number;\r\n      critical: number;\r\n    };\r\n    errorRate: {\r\n      warning: number;\r\n      critical: number;\r\n    };\r\n  };\r\n  dependencies: string[];\r\n  autoRecover: boolean;\r\n  notifications: string[];\r\n}\r\n\r\n// Acción de recuperación\r\nexport interface RecoveryAction {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  service: string;\r\n  enabled: boolean;\r\n  automatic: boolean;\r\n  cooldownMinutes: number;\r\n  maxRetries: number;\r\n  action: (config?: any) => Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Sistema Enterprise de Health Checks\r\n */\r\nexport class EnterpriseHealthSystem {\r\n  private static instance: EnterpriseHealthSystem;\r\n  private healthChecks: Map<string, HealthCheckConfig> = new Map();\r\n  private recoveryActions: Map<string, RecoveryAction> = new Map();\r\n  private lastResults: Map<string, HealthCheckResult> = new Map();\r\n  private checkIntervals: Map<string, NodeJS.Timeout> = new Map();\r\n  private recoveryAttempts: Map<string, { count: number; lastAttempt: Date }> = new Map();\r\n\r\n  constructor() {\r\n    this.initializeDefaultChecks();\r\n    this.initializeRecoveryActions();\r\n  }\r\n\r\n  static getInstance(): EnterpriseHealthSystem {\r\n    if (!EnterpriseHealthSystem.instance) {\r\n      EnterpriseHealthSystem.instance = new EnterpriseHealthSystem();\r\n    }\r\n    return EnterpriseHealthSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra un health check\r\n   */\r\n  registerHealthCheck(config: HealthCheckConfig): void {\r\n    this.healthChecks.set(config.service, config);\r\n    \r\n    if (config.enabled && config.interval > 0) {\r\n      this.scheduleHealthCheck(config);\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, `Health check registered: ${config.service}`, {\r\n      interval: config.interval,\r\n      enabled: config.enabled,\r\n      autoRecover: config.autoRecover\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Registra una acción de recuperación\r\n   */\r\n  registerRecoveryAction(action: RecoveryAction): void {\r\n    this.recoveryActions.set(action.id, action);\r\n    \r\n    logger.info(LogLevel.INFO, `Recovery action registered: ${action.id}`, {\r\n      service: action.service,\r\n      automatic: action.automatic,\r\n      enabled: action.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Ejecuta health check específico\r\n   */\r\n  async runHealthCheck(service: string): Promise<HealthCheckResult> {\r\n    const config = this.healthChecks.get(service);\r\n    if (!config) {\r\n      throw new Error(`Health check not configured for service: ${service}`);\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    let result: HealthCheckResult;\r\n\r\n    try {\r\n      result = await this.executeHealthCheck(service, config);\r\n    } catch (error) {\r\n      result = {\r\n        service,\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    // Almacenar resultado\r\n    this.lastResults.set(service, result);\r\n\r\n    // Registrar métricas\r\n    await this.recordHealthMetrics(result);\r\n\r\n    // Verificar si necesita recuperación automática\r\n    if (result.status === HealthStatus.UNHEALTHY && config.autoRecover) {\r\n      await this.attemptAutoRecovery(service, result);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todos los health checks\r\n   */\r\n  async runAllHealthChecks(): Promise<HealthCheckResult[]> {\r\n    const results: HealthCheckResult[] = [];\r\n    \r\n    for (const [service, config] of this.healthChecks.entries()) {\r\n      if (config.enabled) {\r\n        try {\r\n          const result = await this.runHealthCheck(service);\r\n          results.push(result);\r\n        } catch (error) {\r\n          logger.error(LogLevel.ERROR, `Failed to run health check for ${service}`, {\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          }, LogCategory.SYSTEM);\r\n        }\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado general del sistema\r\n   */\r\n  getSystemHealth(): {\r\n    overall: HealthStatus;\r\n    services: HealthCheckResult[];\r\n    summary: Record<HealthStatus, number>;\r\n    lastUpdated: string;\r\n  } {\r\n    const services = Array.from(this.lastResults.values());\r\n    \r\n    const summary = {\r\n      [HealthStatus.HEALTHY]: 0,\r\n      [HealthStatus.DEGRADED]: 0,\r\n      [HealthStatus.UNHEALTHY]: 0,\r\n      [HealthStatus.UNKNOWN]: 0\r\n    };\r\n\r\n    services.forEach(service => {\r\n      summary[service.status]++;\r\n    });\r\n\r\n    // Determinar estado general\r\n    let overall = HealthStatus.HEALTHY;\r\n    if (summary[HealthStatus.UNHEALTHY] > 0) {\r\n      overall = HealthStatus.UNHEALTHY;\r\n    } else if (summary[HealthStatus.DEGRADED] > 0) {\r\n      overall = HealthStatus.DEGRADED;\r\n    } else if (summary[HealthStatus.UNKNOWN] > 0) {\r\n      overall = HealthStatus.UNKNOWN;\r\n    }\r\n\r\n    return {\r\n      overall,\r\n      services,\r\n      summary,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ejecuta acción de recuperación manual\r\n   */\r\n  async executeRecoveryAction(actionId: string, config?: any): Promise<boolean> {\r\n    const action = this.recoveryActions.get(actionId);\r\n    if (!action) {\r\n      throw new Error(`Recovery action not found: ${actionId}`);\r\n    }\r\n\r\n    if (!action.enabled) {\r\n      throw new Error(`Recovery action disabled: ${actionId}`);\r\n    }\r\n\r\n    // Verificar cooldown\r\n    const attempts = this.recoveryAttempts.get(actionId);\r\n    if (attempts) {\r\n      const cooldownEnd = new Date(attempts.lastAttempt.getTime() + action.cooldownMinutes * 60 * 1000);\r\n      if (new Date() < cooldownEnd) {\r\n        throw new Error(`Recovery action in cooldown: ${actionId}`);\r\n      }\r\n\r\n      if (attempts.count >= action.maxRetries) {\r\n        throw new Error(`Recovery action max retries exceeded: ${actionId}`);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const success = await action.action(config);\r\n      \r\n      // Actualizar intentos\r\n      const currentAttempts = this.recoveryAttempts.get(actionId) || { count: 0, lastAttempt: new Date() };\r\n      this.recoveryAttempts.set(actionId, {\r\n        count: success ? 0 : currentAttempts.count + 1,\r\n        lastAttempt: new Date()\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, `Recovery action executed: ${actionId}`, {\r\n        success,\r\n        service: action.service,\r\n        automatic: false\r\n      }, LogCategory.SYSTEM);\r\n\r\n      return success;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Recovery action failed: ${actionId}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        service: action.service\r\n      }, LogCategory.SYSTEM);\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implementaciones de health checks específicos\r\n   */\r\n  private async executeHealthCheck(service: string, config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    switch (service) {\r\n      case 'database':\r\n        return await this.checkDatabaseHealth(config);\r\n      case 'cache':\r\n        return await this.checkCacheHealth(config);\r\n      case 'mercadopago':\r\n        return await this.checkMercadoPagoHealth(config);\r\n      case 'circuit_breakers':\r\n        return await this.checkCircuitBreakersHealth(config);\r\n      case 'external_apis':\r\n        return await this.checkExternalAPIsHealth(config);\r\n      case 'file_system':\r\n        return await this.checkFileSystemHealth(config);\r\n      default:\r\n        throw new Error(`Unknown health check service: ${service}`);\r\n    }\r\n  }\r\n\r\n  private async checkDatabaseHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {\r\n        throw new Error('Supabase client not available');\r\n      }\r\n\r\n      // Test de conectividad\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .select('id')\r\n        .limit(1);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Determinar estado basado en tiempo de respuesta\r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      \r\n      if (responseTime > config.thresholds.responseTime.critical) {\r\n        status = HealthStatus.UNHEALTHY;\r\n        severity = HealthSeverity.CRITICAL;\r\n      } else if (responseTime > config.thresholds.responseTime.warning) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n      }\r\n\r\n      return {\r\n        service: 'database',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message: `Database responding in ${responseTime}ms`,\r\n        details: {\r\n          recordsFound: data?.length || 0,\r\n          connectionPool: 'active',\r\n          queryType: 'SELECT'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          recordCount: data?.length || 0\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'database',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Database error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Check database connection',\r\n          'Verify Supabase credentials',\r\n          'Check network connectivity'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkCacheHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const testKey = `health_check_${Date.now()}`;\r\n      const testValue = { test: true, timestamp: Date.now() };\r\n\r\n      // Test write\r\n      await CacheUtils.set(testKey, testValue, 10);\r\n      \r\n      // Test read\r\n      const retrieved = await CacheUtils.get(testKey);\r\n      \r\n      if (!retrieved || retrieved.test !== true) {\r\n        throw new Error('Cache read/write test failed');\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      \r\n      if (responseTime > 500) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n      }\r\n\r\n      return {\r\n        service: 'cache',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message: `Cache responding in ${responseTime}ms`,\r\n        details: {\r\n          readWrite: 'success',\r\n          testKey,\r\n          provider: 'redis'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          operationsPerSecond: 1000 / responseTime\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'cache',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Cache error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Check Redis connection',\r\n          'Verify cache configuration',\r\n          'Check memory usage'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkMercadoPagoHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const publicKey = process.env.MERCADOPAGO_PUBLIC_KEY_PROD || process.env.MERCADOPAGO_PUBLIC_KEY_TEST;\r\n      const accessToken = process.env.MERCADOPAGO_ACCESS_TOKEN_PROD || process.env.MERCADOPAGO_ACCESS_TOKEN_TEST;\r\n\r\n      if (!publicKey || !accessToken) {\r\n        throw new Error('MercadoPago credentials not configured');\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      const environment = publicKey.includes('TEST') ? 'test' : 'production';\r\n\r\n      return {\r\n        service: 'mercadopago',\r\n        status: HealthStatus.HEALTHY,\r\n        severity: HealthSeverity.LOW,\r\n        responseTime,\r\n        message: `MercadoPago credentials configured for ${environment}`,\r\n        details: {\r\n          publicKeyConfigured: !!publicKey,\r\n          accessTokenConfigured: !!accessToken,\r\n          environment\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          configurationScore: 100\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'mercadopago',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.CRITICAL,\r\n        responseTime: Date.now() - startTime,\r\n        message: `MercadoPago error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString(),\r\n        recommendations: [\r\n          'Configure MercadoPago credentials',\r\n          'Check environment variables',\r\n          'Verify API keys'\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkCircuitBreakersHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const criticalState = mercadoPagoCriticalBreaker.getState();\r\n      const standardState = mercadoPagoStandardBreaker.getState();\r\n      const webhookState = webhookProcessingBreaker.getState();\r\n\r\n      const states = [criticalState, standardState, webhookState];\r\n      const openBreakers = states.filter(state => state === 'open').length;\r\n      const halfOpenBreakers = states.filter(state => state === 'half-open').length;\r\n\r\n      let status = HealthStatus.HEALTHY;\r\n      let severity = HealthSeverity.LOW;\r\n      let message = 'All circuit breakers operational';\r\n\r\n      if (openBreakers > 0) {\r\n        status = HealthStatus.UNHEALTHY;\r\n        severity = HealthSeverity.CRITICAL;\r\n        message = `${openBreakers} circuit breaker(s) open`;\r\n      } else if (halfOpenBreakers > 0) {\r\n        status = HealthStatus.DEGRADED;\r\n        severity = HealthSeverity.MEDIUM;\r\n        message = `${halfOpenBreakers} circuit breaker(s) in recovery`;\r\n      }\r\n\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      return {\r\n        service: 'circuit_breakers',\r\n        status,\r\n        severity,\r\n        responseTime,\r\n        message,\r\n        details: {\r\n          mercadopago_critical: criticalState,\r\n          mercadopago_standard: standardState,\r\n          webhook_processing: webhookState,\r\n          totalBreakers: 3,\r\n          openBreakers,\r\n          halfOpenBreakers\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          healthScore: ((3 - openBreakers) / 3) * 100,\r\n          openBreakers,\r\n          halfOpenBreakers\r\n        },\r\n        recommendations: openBreakers > 0 ? [\r\n          'Check service dependencies',\r\n          'Review error logs',\r\n          'Consider manual reset if appropriate'\r\n        ] : undefined\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'circuit_breakers',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `Circuit breakers error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkExternalAPIsHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    // Simulación de check de APIs externas\r\n    const responseTime = Date.now() - startTime + 150; // Simular latencia\r\n\r\n    return {\r\n      service: 'external_apis',\r\n      status: HealthStatus.HEALTHY,\r\n      severity: HealthSeverity.LOW,\r\n      responseTime,\r\n      message: 'External APIs responding normally',\r\n      details: {\r\n        checkedAPIs: ['mercadopago', 'vercel'],\r\n        successRate: 100\r\n      },\r\n      lastChecked: new Date().toISOString(),\r\n      nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n      metrics: {\r\n        responseTime,\r\n        successRate: 100\r\n      }\r\n    };\r\n  }\r\n\r\n  private async checkFileSystemHealth(config: HealthCheckConfig): Promise<HealthCheckResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Verificar espacio en disco y permisos básicos\r\n      const responseTime = Date.now() - startTime + 50;\r\n\r\n      return {\r\n        service: 'file_system',\r\n        status: HealthStatus.HEALTHY,\r\n        severity: HealthSeverity.LOW,\r\n        responseTime,\r\n        message: 'File system accessible',\r\n        details: {\r\n          diskSpace: 'sufficient',\r\n          permissions: 'ok'\r\n        },\r\n        lastChecked: new Date().toISOString(),\r\n        nextCheck: new Date(Date.now() + config.interval * 1000).toISOString(),\r\n        metrics: {\r\n          responseTime,\r\n          diskUsage: 65\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        service: 'file_system',\r\n        status: HealthStatus.UNHEALTHY,\r\n        severity: HealthSeverity.HIGH,\r\n        responseTime: Date.now() - startTime,\r\n        message: `File system error: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\r\n        lastChecked: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Programa health check automático\r\n   */\r\n  private scheduleHealthCheck(config: HealthCheckConfig): void {\r\n    // Limpiar intervalo existente\r\n    const existingInterval = this.checkIntervals.get(config.service);\r\n    if (existingInterval) {\r\n      clearInterval(existingInterval);\r\n    }\r\n\r\n    // Programar nuevo intervalo\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        await this.runHealthCheck(config.service);\r\n      } catch (error) {\r\n        logger.error(LogLevel.ERROR, `Scheduled health check failed: ${config.service}`, {\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    }, config.interval * 1000);\r\n\r\n    this.checkIntervals.set(config.service, interval);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de health check\r\n   */\r\n  private async recordHealthMetrics(result: HealthCheckResult): Promise<void> {\r\n    try {\r\n      // Registrar métricas de performance\r\n      await recordPerformanceMetric(\r\n        `health.${result.service}.response_time`,\r\n        result.responseTime,\r\n        true,\r\n        { service: result.service, status: result.status }\r\n      );\r\n\r\n      // Registrar métricas de disponibilidad\r\n      const availabilityScore = result.status === HealthStatus.HEALTHY ? 1 : 0;\r\n      await recordPerformanceMetric(\r\n        `health.${result.service}.availability`,\r\n        availabilityScore,\r\n        true,\r\n        { service: result.service, status: result.status }\r\n      );\r\n\r\n      // Registrar eventos de seguridad si hay problemas\r\n      if (result.status === HealthStatus.UNHEALTHY && result.severity === HealthSeverity.CRITICAL) {\r\n        await recordSecurityMetric(\r\n          'health_check_critical_failure',\r\n          'high',\r\n          { \r\n            service: result.service,\r\n            message: result.message,\r\n            severity: result.severity\r\n          }\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to record health metrics', {\r\n        service: result.service,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Intenta recuperación automática\r\n   */\r\n  private async attemptAutoRecovery(service: string, result: HealthCheckResult): Promise<void> {\r\n    const recoveryActions = Array.from(this.recoveryActions.values())\r\n      .filter(action => action.service === service && action.automatic && action.enabled);\r\n\r\n    for (const action of recoveryActions) {\r\n      try {\r\n        logger.info(LogLevel.INFO, `Attempting auto-recovery: ${action.id}`, {\r\n          service,\r\n          status: result.status,\r\n          severity: result.severity\r\n        }, LogCategory.SYSTEM);\r\n\r\n        const success = await this.executeRecoveryAction(action.id);\r\n        \r\n        if (success) {\r\n          logger.info(LogLevel.INFO, `Auto-recovery successful: ${action.id}`, {\r\n            service\r\n          }, LogCategory.SYSTEM);\r\n          break; // Salir si la recuperación fue exitosa\r\n        }\r\n\r\n      } catch (error) {\r\n        logger.error(LogLevel.ERROR, `Auto-recovery failed: ${action.id}`, {\r\n          service,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inicializa health checks por defecto\r\n   */\r\n  private initializeDefaultChecks(): void {\r\n    // Database health check\r\n    this.registerHealthCheck({\r\n      service: 'database',\r\n      enabled: true,\r\n      interval: 60, // 1 minuto\r\n      timeout: 5,\r\n      retries: 3,\r\n      thresholds: {\r\n        responseTime: { warning: 1000, critical: 3000 },\r\n        errorRate: { warning: 0.05, critical: 0.1 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // Cache health check\r\n    this.registerHealthCheck({\r\n      service: 'cache',\r\n      enabled: true,\r\n      interval: 30, // 30 segundos\r\n      timeout: 3,\r\n      retries: 2,\r\n      thresholds: {\r\n        responseTime: { warning: 100, critical: 500 },\r\n        errorRate: { warning: 0.02, critical: 0.05 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // MercadoPago health check\r\n    this.registerHealthCheck({\r\n      service: 'mercadopago',\r\n      enabled: true,\r\n      interval: 300, // 5 minutos\r\n      timeout: 10,\r\n      retries: 1,\r\n      thresholds: {\r\n        responseTime: { warning: 2000, critical: 5000 },\r\n        errorRate: { warning: 0.01, critical: 0.03 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: false,\r\n      notifications: ['default_log']\r\n    });\r\n\r\n    // Circuit breakers health check\r\n    this.registerHealthCheck({\r\n      service: 'circuit_breakers',\r\n      enabled: true,\r\n      interval: 30, // 30 segundos\r\n      timeout: 1,\r\n      retries: 1,\r\n      thresholds: {\r\n        responseTime: { warning: 100, critical: 1000 },\r\n        errorRate: { warning: 0, critical: 0 }\r\n      },\r\n      dependencies: [],\r\n      autoRecover: true,\r\n      notifications: ['default_log']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicializa acciones de recuperación\r\n   */\r\n  private initializeRecoveryActions(): void {\r\n    // Reset circuit breakers\r\n    this.registerRecoveryAction({\r\n      id: 'reset_circuit_breakers',\r\n      name: 'Reset Circuit Breakers',\r\n      description: 'Reset all circuit breakers to closed state',\r\n      service: 'circuit_breakers',\r\n      enabled: true,\r\n      automatic: true,\r\n      cooldownMinutes: 5,\r\n      maxRetries: 3,\r\n      action: async () => {\r\n        mercadoPagoCriticalBreaker.reset();\r\n        mercadoPagoStandardBreaker.reset();\r\n        webhookProcessingBreaker.reset();\r\n        return true;\r\n      }\r\n    });\r\n\r\n    // Clear cache\r\n    this.registerRecoveryAction({\r\n      id: 'clear_cache',\r\n      name: 'Clear Cache',\r\n      description: 'Clear cache to resolve potential issues',\r\n      service: 'cache',\r\n      enabled: true,\r\n      automatic: false, // Manual only\r\n      cooldownMinutes: 10,\r\n      maxRetries: 1,\r\n      action: async () => {\r\n        // Implementar limpieza de cache si es necesario\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    // Limpiar intervalos\r\n    for (const interval of this.checkIntervals.values()) {\r\n      clearInterval(interval);\r\n    }\r\n    this.checkIntervals.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseHealthSystem = EnterpriseHealthSystem.getInstance();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}