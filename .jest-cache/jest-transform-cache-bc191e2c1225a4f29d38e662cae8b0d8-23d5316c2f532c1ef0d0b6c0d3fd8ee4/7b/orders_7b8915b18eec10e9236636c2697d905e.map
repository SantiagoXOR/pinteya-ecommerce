{"version":3,"names":["calculateOrderTotal","cov_1xr2f5y9r6","f","s","convertCartToOrderItems","createOrder","formatOrderStatus","getOrderStatus","getUserOrder","getUserOrders","updateOrderStatus","validateOrderData","orderData","response","fetch","method","headers","body","JSON","stringify","parseResult","_jsonutils","safeApiResponseJson","success","b","data","error","result","ok","console","message","orderId","json","paymentData","cartItems","map","item","id","toString","name","price","discounted_price","quantity","image","images","previews","items","shippingCost","itemsTotal","reduce","total","errors","length","push","forEach","index","payer","surname","email","emailRegex","test","shipping","address","street_name","city_name","zip_code","isValid","status","statusMap","pending","label","color","description","paid","shipped","delivered","cancelled","refunded"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\orders.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ORDERS API FUNCTIONS\r\n// ===================================\r\n\r\nimport { ApiResponse } from '@/types/api';\r\nimport { CreateOrderRequest } from '@/types/mercadopago';\r\nimport { safeApiResponseJson } from '@/lib/json-utils';\r\n\r\n/**\r\n * Crea una nueva orden y preferencia de pago\r\n */\r\nexport async function createOrder(orderData: CreateOrderRequest): Promise<ApiResponse<any>> {\r\n  try {\r\n    const response = await fetch('/api/payments/create-preference', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(orderData),\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const parseResult = await safeApiResponseJson<ApiResponse<any>>(response);\r\n\r\n    if (!parseResult.success) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: parseResult.error || 'Error parsing API response',\r\n      };\r\n    }\r\n\r\n    const result = parseResult.data;\r\n\r\n    if (!response.ok) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: result?.error || 'Error creando orden',\r\n      };\r\n    }\r\n\r\n    if (!result) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error: respuesta nula del servidor',\r\n      };\r\n    }\r\n\r\n    return result;\r\n  } catch (error: any) {\r\n    console.error('Error creating order:', error);\r\n    return {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error de conexión',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene el estado de una orden y su pago\r\n */\r\nexport async function getOrderStatus(orderId: string): Promise<ApiResponse<any>> {\r\n  try {\r\n    const response = await fetch(`/api/payments/status/${orderId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    const result = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: result?.error || 'Error obteniendo estado de orden',\r\n      };\r\n    }\r\n\r\n    if (!result) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error: respuesta nula del servidor',\r\n      };\r\n    }\r\n\r\n    return result;\r\n  } catch (error: any) {\r\n    console.error('Error getting order status:', error);\r\n    return {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error de conexión',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Actualiza el estado de una orden después de redirección de MercadoPago\r\n */\r\nexport async function updateOrderStatus(\r\n  orderId: string, \r\n  paymentData: {\r\n    payment_id?: string;\r\n    status?: string;\r\n    merchant_order_id?: string;\r\n  }\r\n): Promise<ApiResponse<any>> {\r\n  try {\r\n    const response = await fetch(`/api/payments/status/${orderId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(paymentData),\r\n    });\r\n\r\n    const result = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: result?.error || 'Error actualizando estado de orden',\r\n      };\r\n    }\r\n\r\n    if (!result) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error: respuesta nula del servidor',\r\n      };\r\n    }\r\n\r\n    return result;\r\n  } catch (error: any) {\r\n    console.error('Error updating order status:', error);\r\n    return {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error de conexión',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene todas las órdenes del usuario autenticado\r\n */\r\nexport async function getUserOrders(): Promise<ApiResponse<any[]>> {\r\n  try {\r\n    const response = await fetch('/api/orders', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    const result = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return {\r\n        data: [],\r\n        success: false,\r\n        error: result?.error || 'Error obteniendo órdenes',\r\n      };\r\n    }\r\n\r\n    if (!result) {\r\n      return {\r\n        data: [],\r\n        success: false,\r\n        error: 'Error: respuesta nula del servidor',\r\n      };\r\n    }\r\n\r\n    return result;\r\n  } catch (error: any) {\r\n    console.error('Error getting user orders:', error);\r\n    return {\r\n      data: [],\r\n      success: false,\r\n      error: error.message || 'Error de conexión',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene una orden específica del usuario\r\n */\r\nexport async function getUserOrder(orderId: string): Promise<ApiResponse<any>> {\r\n  try {\r\n    const response = await fetch(`/api/orders/${orderId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    const result = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: result?.error || 'Error obteniendo orden',\r\n      };\r\n    }\r\n\r\n    if (!result) {\r\n      return {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error: respuesta nula del servidor',\r\n      };\r\n    }\r\n\r\n    return result;\r\n  } catch (error: any) {\r\n    console.error('Error getting user order:', error);\r\n    return {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error de conexión',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Convierte items del carrito al formato requerido para crear orden\r\n */\r\nexport function convertCartToOrderItems(cartItems: any[]): CreateOrderRequest['items'] {\r\n  return cartItems.map(item => ({\r\n    id: item.id.toString(),\r\n    name: item.name,\r\n    price: item.discounted_price || item.price,\r\n    quantity: item.quantity,\r\n    image: item.images?.previews?.[0] || '',\r\n  }));\r\n}\r\n\r\n/**\r\n * Calcula el total de una orden\r\n */\r\nexport function calculateOrderTotal(items: CreateOrderRequest['items'], shippingCost: number = 0): number {\r\n  const itemsTotal = items.reduce((total, item) => {\r\n    return total + (item.price * item.quantity);\r\n  }, 0);\r\n  \r\n  return itemsTotal + shippingCost;\r\n}\r\n\r\n/**\r\n * Valida los datos de una orden antes de enviarla\r\n */\r\nexport function validateOrderData(orderData: CreateOrderRequest): { isValid: boolean; errors: string[] } {\r\n  const errors: string[] = [];\r\n\r\n  // Validar items\r\n  if (!orderData.items || orderData.items.length === 0) {\r\n    errors.push('La orden debe tener al menos un producto');\r\n  }\r\n\r\n  orderData.items.forEach((item, index) => {\r\n    if (!item.id || !item.name) {\r\n      errors.push(`Producto ${index + 1}: ID y nombre son requeridos`);\r\n    }\r\n    if (item.price <= 0) {\r\n      errors.push(`Producto ${index + 1}: El precio debe ser mayor a 0`);\r\n    }\r\n    if (item.quantity <= 0) {\r\n      errors.push(`Producto ${index + 1}: La cantidad debe ser mayor a 0`);\r\n    }\r\n  });\r\n\r\n  // Validar payer\r\n  if (!orderData.payer.name || !orderData.payer.surname) {\r\n    errors.push('Nombre y apellido del comprador son requeridos');\r\n  }\r\n  if (!orderData.payer.email) {\r\n    errors.push('Email del comprador es requerido');\r\n  }\r\n\r\n  // Validar email format\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (orderData.payer.email && !emailRegex.test(orderData.payer.email)) {\r\n    errors.push('El formato del email no es válido');\r\n  }\r\n\r\n  // Validar shipping si está presente\r\n  if (orderData.shipping) {\r\n    if (!orderData.shipping.address.street_name || !orderData.shipping.address.city_name) {\r\n      errors.push('Dirección de envío incompleta');\r\n    }\r\n    if (!orderData.shipping.address.zip_code) {\r\n      errors.push('Código postal es requerido');\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  };\r\n}\r\n\r\n/**\r\n * Formatea el estado de una orden para mostrar al usuario\r\n */\r\nexport function formatOrderStatus(status: string): { label: string; color: string; description: string } {\r\n  const statusMap: Record<string, { label: string; color: string; description: string }> = {\r\n    pending: {\r\n      label: 'Pendiente',\r\n      color: 'yellow',\r\n      description: 'Esperando confirmación de pago',\r\n    },\r\n    paid: {\r\n      label: 'Pagado',\r\n      color: 'green',\r\n      description: 'Pago confirmado, preparando envío',\r\n    },\r\n    shipped: {\r\n      label: 'Enviado',\r\n      color: 'blue',\r\n      description: 'Producto en camino',\r\n    },\r\n    delivered: {\r\n      label: 'Entregado',\r\n      color: 'green',\r\n      description: 'Producto entregado exitosamente',\r\n    },\r\n    cancelled: {\r\n      label: 'Cancelado',\r\n      color: 'red',\r\n      description: 'Orden cancelada',\r\n    },\r\n    refunded: {\r\n      label: 'Reembolsado',\r\n      color: 'gray',\r\n      description: 'Pago reembolsado',\r\n    },\r\n  };\r\n\r\n  return statusMap[status] || {\r\n    label: 'Desconocido',\r\n    color: 'gray',\r\n    description: 'Estado no reconocido',\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}