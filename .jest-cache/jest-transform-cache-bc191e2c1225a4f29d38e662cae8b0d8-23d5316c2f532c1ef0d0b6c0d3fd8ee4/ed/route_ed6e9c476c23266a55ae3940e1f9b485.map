{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\debug\\admin-products\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { checkCRUDPermissions } from '@/lib/auth/admin-auth';\r\nimport {\r\n  requireAdminAuth\r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS,\r\n  createRLSFilters\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  getCacheStats\r\n} from '@/lib/auth/enterprise-cache';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('🔍 Debug Admin Products Enterprise: Starting check...');\r\n\r\n    // ENTERPRISE: Usar nueva autenticación enterprise\r\n    const enterpriseResult = await requireAdminAuth(request, ['products_read']);\r\n\r\n    // LEGACY: Mantener método anterior para comparación\r\n    const legacyResult = await checkCRUDPermissions('read', 'products');\r\n\r\n    console.log('🔍 Debug Admin Products: Results comparison:', {\r\n      enterprise: {\r\n        success: enterpriseResult.success,\r\n        error: enterpriseResult.error,\r\n        code: enterpriseResult.code\r\n      },\r\n      legacy: {\r\n        success: legacyResult.success,\r\n        error: legacyResult.error,\r\n        status: legacyResult.status,\r\n        hasUser: !!legacyResult.user,\r\n        hasSupabase: !!legacyResult.supabase\r\n      }\r\n    });\r\n\r\n    if (!enterpriseResult.success && !legacyResult.success) {\r\n      return NextResponse.json({\r\n        error: 'Ambos métodos de autenticación fallaron',\r\n        enterprise: {\r\n          error: enterpriseResult.error,\r\n          code: enterpriseResult.code\r\n        },\r\n        legacy: {\r\n          error: legacyResult.error,\r\n          step: 'checkCRUDPermissions failed'\r\n        },\r\n        debug: {\r\n          both_methods_failed: true,\r\n          recommended_action: 'Check authentication setup'\r\n        }\r\n      }, { status: enterpriseResult.status || legacyResult.status || 401 });\r\n    }\r\n\r\n    // ENTERPRISE: Probar consulta de productos con RLS si enterprise auth es exitoso\r\n    let productsData = null;\r\n    let rlsFilters = null;\r\n    let cacheStats = null;\r\n\r\n    if (enterpriseResult.success) {\r\n      const context = enterpriseResult.context!;\r\n\r\n      // Obtener estadísticas de cache\r\n      cacheStats = getCacheStats();\r\n\r\n      // Crear filtros RLS para productos\r\n      rlsFilters = createRLSFilters({\r\n        userId: context.userId,\r\n        role: context.role,\r\n        permissions: context.permissions,\r\n        isActive: true\r\n      }, 'products');\r\n\r\n      // Ejecutar consulta con RLS\r\n      const productsResult = await executeWithRLS(\r\n        context,\r\n        async (client, rlsContext) => {\r\n          let query = client\r\n            .from('products')\r\n            .select('id, name, price, is_active, category_id')\r\n            .limit(5);\r\n\r\n          // Aplicar filtros RLS automáticos\r\n          Object.entries(rlsFilters || {}).forEach(([key, value]) => {\r\n            query = query.eq(key, value);\r\n          });\r\n\r\n          const { data, error } = await query;\r\n\r\n          if (error) {\r\n            throw new Error(`Error consultando productos: ${error.message}`);\r\n          }\r\n\r\n          return data;\r\n        },\r\n        { enforceRLS: true, auditLog: true }\r\n      );\r\n\r\n      if (productsResult.success) {\r\n        productsData = productsResult.data;\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: enterpriseResult.success || legacyResult.success,\r\n      message: 'Admin products access comparison completed',\r\n      enterprise: {\r\n        status: enterpriseResult.success ? 'SUCCESS' : 'FAILED',\r\n        context: enterpriseResult.success ? {\r\n          userId: enterpriseResult.context?.userId,\r\n          role: enterpriseResult.context?.role,\r\n          permissions: enterpriseResult.context?.permissions,\r\n          securityLevel: enterpriseResult.context?.securityLevel\r\n        } : null,\r\n        rls: {\r\n          filters_applied: rlsFilters,\r\n          products_found: productsData?.length || 0,\r\n          sample_products: productsData?.slice(0, 3)\r\n        },\r\n        cache: cacheStats,\r\n        error: enterpriseResult.error,\r\n        code: enterpriseResult.code\r\n      },\r\n      legacy: {\r\n        status: legacyResult.success ? 'SUCCESS' : 'FAILED',\r\n        authResult: {\r\n          success: legacyResult.success,\r\n          hasUser: !!legacyResult.user,\r\n          hasSupabase: !!legacyResult.supabase,\r\n          userEmail: legacyResult.user?.email,\r\n          userRole: legacyResult.user?.user_roles?.role_name\r\n        },\r\n        error: legacyResult.error\r\n      },\r\n      comparison: {\r\n        methods_agree: enterpriseResult.success === legacyResult.success,\r\n        enterprise_advantages: [\r\n          'RLS integration with automatic filters',\r\n          'Cache statistics and optimization',\r\n          'Granular permissions checking',\r\n          'Complete security context',\r\n          'Audit logging enabled'\r\n        ],\r\n        recommendation: enterpriseResult.success ? 'Use enterprise method' : 'Fix authentication issues'\r\n      },\r\n      debug: {\r\n        timestamp: new Date().toISOString(),\r\n        request_info: {\r\n          method: request.method,\r\n          url: request.url\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('🔍 Debug Admin Products: Error:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Unexpected error',\r\n      debug: {\r\n        errorMessage: error instanceof Error ? error.message : 'Unknown error'\r\n      }\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","runtime","request","console","log","enterpriseResult","requireAdminAuth","legacyResult","checkCRUDPermissions","enterprise","success","error","code","legacy","status","hasUser","user","hasSupabase","supabase","NextResponse","json","step","debug","both_methods_failed","recommended_action","productsData","rlsFilters","cacheStats","context","getCacheStats","createRLSFilters","userId","role","permissions","isActive","productsResult","executeWithRLS","client","rlsContext","query","from","select","limit","Object","entries","forEach","key","value","eq","data","Error","message","enforceRLS","auditLog","securityLevel","rls","filters_applied","products_found","length","sample_products","slice","cache","authResult","userEmail","email","userRole","user_roles","role_name","comparison","methods_agree","enterprise_advantages","recommendation","timestamp","Date","toISOString","request_info","method","url","errorMessage"],"mappings":"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"}