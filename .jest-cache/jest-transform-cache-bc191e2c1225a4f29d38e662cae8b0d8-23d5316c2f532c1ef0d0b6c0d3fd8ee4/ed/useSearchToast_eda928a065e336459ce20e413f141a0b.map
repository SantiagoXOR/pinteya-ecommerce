{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchToast.ts"],"sourcesContent":["// ===================================\n// HOOK: useSearchToast - Toast notifications para búsquedas\n// ===================================\n\nimport { useState, useCallback } from 'react'\nimport type { SearchError } from './useSearchErrorHandler'\n\n// ===================================\n// TIPOS\n// ===================================\n\nexport interface ToastNotification {\n  id: string\n  type: 'success' | 'error' | 'warning' | 'info'\n  title: string\n  description?: string\n  duration?: number\n  action?: {\n    label: string\n    onClick: () => void\n  }\n}\n\nexport interface UseSearchToastOptions {\n  defaultDuration?: number\n  maxToasts?: number\n}\n\n// ===================================\n// CONFIGURACIÓN\n// ===================================\n\nconst DEFAULT_DURATION = 5000\nconst MAX_TOASTS = 3\n\n// ===================================\n// UTILIDADES\n// ===================================\n\nfunction generateToastId(): string {\n  return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n}\n\nfunction getErrorToastContent(error: SearchError, retryCount: number = 0) {\n  const baseTitle = 'Error en la búsqueda'\n\n  switch (error.type) {\n    case 'network':\n      return {\n        title: 'Sin conexión',\n        description:\n          retryCount > 0 ? `Reintentando... (${retryCount}/3)` : 'Verifica tu conexión a internet',\n      }\n\n    case 'timeout':\n      return {\n        title: 'Búsqueda lenta',\n        description:\n          retryCount > 0\n            ? `Reintentando búsqueda... (${retryCount}/3)`\n            : 'La búsqueda tardó demasiado',\n      }\n\n    case 'server':\n      return {\n        title: 'Error del servidor',\n        description:\n          retryCount > 0\n            ? `Reintentando conexión... (${retryCount}/3)`\n            : 'Problema temporal del servidor',\n      }\n\n    case 'validation':\n      return {\n        title: 'Búsqueda inválida',\n        description: 'Verifica los términos de búsqueda',\n      }\n\n    default:\n      return {\n        title: baseTitle,\n        description: retryCount > 0 ? `Reintentando... (${retryCount}/3)` : 'Error inesperado',\n      }\n  }\n}\n\n// ===================================\n// HOOK PRINCIPAL\n// ===================================\n\nexport function useSearchToast(options: UseSearchToastOptions = {}) {\n  const { defaultDuration = DEFAULT_DURATION, maxToasts = MAX_TOASTS } = options\n\n  const [toasts, setToasts] = useState<ToastNotification[]>([])\n\n  /**\n   * Remueve un toast específico\n   */\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id))\n  }, [])\n\n  /**\n   * Agrega un nuevo toast\n   */\n  const addToast = useCallback(\n    (toast: Omit<ToastNotification, 'id'>): string => {\n      const id = generateToastId()\n      const newToast: ToastNotification = {\n        ...toast,\n        id,\n        duration: toast.duration ?? defaultDuration,\n      }\n\n      setToasts(prev => {\n        const updated = [newToast, ...prev]\n        // Limitar número máximo de toasts\n        return updated.slice(0, maxToasts)\n      })\n\n      // Auto-remove después del duration\n      if (newToast.duration && newToast.duration > 0) {\n        setTimeout(() => {\n          removeToast(id)\n        }, newToast.duration)\n      }\n\n      return id\n    },\n    [defaultDuration, maxToasts, removeToast]\n  )\n\n  /**\n   * Limpia todos los toasts\n   */\n  const clearToasts = useCallback(() => {\n    setToasts([])\n  }, [])\n\n  /**\n   * Toast de éxito para búsquedas\n   */\n  const showSuccessToast = useCallback(\n    (query: string, resultCount: number) => {\n      return addToast({\n        type: 'success',\n        title: '¡Búsqueda exitosa!',\n        description: `Se encontraron ${resultCount} productos para \"${query}\"`,\n        duration: 3000,\n      })\n    },\n    [addToast]\n  )\n\n  /**\n   * Toast de error para búsquedas\n   */\n  const showErrorToast = useCallback(\n    (error: SearchError, retryCount: number = 0, onRetry?: () => void) => {\n      const { title, description } = getErrorToastContent(error, retryCount)\n\n      return addToast({\n        type: 'error',\n        title,\n        description,\n        duration: error.retryable ? 4000 : 6000,\n        action:\n          error.retryable && onRetry\n            ? {\n                label: 'Reintentar',\n                onClick: onRetry,\n              }\n            : undefined,\n      })\n    },\n    [addToast]\n  )\n\n  /**\n   * Toast de advertencia para búsquedas\n   */\n  const showWarningToast = useCallback(\n    (message: string, description?: string) => {\n      return addToast({\n        type: 'warning',\n        title: message,\n        description,\n        duration: 4000,\n      })\n    },\n    [addToast]\n  )\n\n  /**\n   * Toast informativo\n   */\n  const showInfoToast = useCallback(\n    (message: string, description?: string) => {\n      return addToast({\n        type: 'info',\n        title: message,\n        description,\n        duration: 4000,\n      })\n    },\n    [addToast]\n  )\n\n  /**\n   * Toast para cuando no hay resultados\n   */\n  const showNoResultsToast = useCallback(\n    (query: string) => {\n      return addToast({\n        type: 'warning',\n        title: 'Sin resultados',\n        description: `No se encontraron productos para \"${query}\"`,\n        duration: 4000,\n      })\n    },\n    [addToast]\n  )\n\n  /**\n   * Toast para retry en progreso\n   */\n  const showRetryToast = useCallback(\n    (attempt: number, maxAttempts: number) => {\n      return addToast({\n        type: 'info',\n        title: 'Reintentando búsqueda...',\n        description: `Intento ${attempt} de ${maxAttempts}`,\n        duration: 2000,\n      })\n    },\n    [addToast]\n  )\n\n  /**\n   * Toast para retry exitoso\n   */\n  const showRetrySuccessToast = useCallback(() => {\n    return addToast({\n      type: 'success',\n      title: '¡Conexión restaurada!',\n      description: 'La búsqueda se completó exitosamente',\n      duration: 3000,\n    })\n  }, [addToast])\n\n  /**\n   * Toast para retry fallido\n   */\n  const showRetryFailedToast = useCallback(\n    (attempts: number) => {\n      return addToast({\n        type: 'error',\n        title: 'Búsqueda fallida',\n        description: `No se pudo completar después de ${attempts} intentos`,\n        duration: 6000,\n      })\n    },\n    [addToast]\n  )\n\n  return {\n    // Estado\n    toasts,\n    hasToasts: toasts.length > 0,\n\n    // Funciones generales\n    addToast,\n    removeToast,\n    clearToasts,\n\n    // Funciones específicas para búsquedas\n    showSuccessToast,\n    showErrorToast,\n    showWarningToast,\n    showInfoToast,\n    showNoResultsToast,\n    showRetryToast,\n    showRetrySuccessToast,\n    showRetryFailedToast,\n  }\n}\n\nexport default useSearchToast\n"],"names":["useSearchToast","DEFAULT_DURATION","MAX_TOASTS","generateToastId","Date","now","Math","random","toString","substr","getErrorToastContent","error","retryCount","baseTitle","type","title","description","options","defaultDuration","maxToasts","toasts","setToasts","useState","removeToast","useCallback","id","prev","filter","toast","addToast","newToast","duration","updated","slice","setTimeout","clearToasts","showSuccessToast","query","resultCount","showErrorToast","onRetry","retryable","action","label","onClick","undefined","showWarningToast","message","showInfoToast","showNoResultsToast","showRetryToast","attempt","maxAttempts","showRetrySuccessToast","showRetryFailedToast","attempts","hasToasts","length"],"mappings":"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"}