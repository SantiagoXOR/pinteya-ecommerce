23d5c9bdc7ea4e27221689618b1c4148
// ===================================
// HOOK: useSearchToast - Toast notifications para búsquedas
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useSearchToast () {
        return useSearchToast;
    }
});
const _react = require("react");
// ===================================
// CONFIGURACIÓN
// ===================================
const DEFAULT_DURATION = 5000;
const MAX_TOASTS = 3;
// ===================================
// UTILIDADES
// ===================================
function generateToastId() {
    return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}
function getErrorToastContent(error, retryCount = 0) {
    const baseTitle = 'Error en la búsqueda';
    switch(error.type){
        case 'network':
            return {
                title: 'Sin conexión',
                description: retryCount > 0 ? `Reintentando... (${retryCount}/3)` : 'Verifica tu conexión a internet'
            };
        case 'timeout':
            return {
                title: 'Búsqueda lenta',
                description: retryCount > 0 ? `Reintentando búsqueda... (${retryCount}/3)` : 'La búsqueda tardó demasiado'
            };
        case 'server':
            return {
                title: 'Error del servidor',
                description: retryCount > 0 ? `Reintentando conexión... (${retryCount}/3)` : 'Problema temporal del servidor'
            };
        case 'validation':
            return {
                title: 'Búsqueda inválida',
                description: 'Verifica los términos de búsqueda'
            };
        default:
            return {
                title: baseTitle,
                description: retryCount > 0 ? `Reintentando... (${retryCount}/3)` : 'Error inesperado'
            };
    }
}
function useSearchToast(options = {}) {
    const { defaultDuration = DEFAULT_DURATION, maxToasts = MAX_TOASTS } = options;
    const [toasts, setToasts] = (0, _react.useState)([]);
    /**
   * Remueve un toast específico
   */ const removeToast = (0, _react.useCallback)((id)=>{
        setToasts((prev)=>prev.filter((toast)=>toast.id !== id));
    }, []);
    /**
   * Agrega un nuevo toast
   */ const addToast = (0, _react.useCallback)((toast)=>{
        const id = generateToastId();
        const newToast = {
            ...toast,
            id,
            duration: toast.duration ?? defaultDuration
        };
        setToasts((prev)=>{
            const updated = [
                newToast,
                ...prev
            ];
            // Limitar número máximo de toasts
            return updated.slice(0, maxToasts);
        });
        // Auto-remove después del duration
        if (newToast.duration && newToast.duration > 0) {
            setTimeout(()=>{
                removeToast(id);
            }, newToast.duration);
        }
        return id;
    }, [
        defaultDuration,
        maxToasts,
        removeToast
    ]);
    /**
   * Limpia todos los toasts
   */ const clearToasts = (0, _react.useCallback)(()=>{
        setToasts([]);
    }, []);
    /**
   * Toast de éxito para búsquedas
   */ const showSuccessToast = (0, _react.useCallback)((query, resultCount)=>{
        return addToast({
            type: 'success',
            title: '¡Búsqueda exitosa!',
            description: `Se encontraron ${resultCount} productos para "${query}"`,
            duration: 3000
        });
    }, [
        addToast
    ]);
    /**
   * Toast de error para búsquedas
   */ const showErrorToast = (0, _react.useCallback)((error, retryCount = 0, onRetry)=>{
        const { title, description } = getErrorToastContent(error, retryCount);
        return addToast({
            type: 'error',
            title,
            description,
            duration: error.retryable ? 4000 : 6000,
            action: error.retryable && onRetry ? {
                label: 'Reintentar',
                onClick: onRetry
            } : undefined
        });
    }, [
        addToast
    ]);
    /**
   * Toast de advertencia para búsquedas
   */ const showWarningToast = (0, _react.useCallback)((message, description)=>{
        return addToast({
            type: 'warning',
            title: message,
            description,
            duration: 4000
        });
    }, [
        addToast
    ]);
    /**
   * Toast informativo
   */ const showInfoToast = (0, _react.useCallback)((message, description)=>{
        return addToast({
            type: 'info',
            title: message,
            description,
            duration: 4000
        });
    }, [
        addToast
    ]);
    /**
   * Toast para cuando no hay resultados
   */ const showNoResultsToast = (0, _react.useCallback)((query)=>{
        return addToast({
            type: 'warning',
            title: 'Sin resultados',
            description: `No se encontraron productos para "${query}"`,
            duration: 4000
        });
    }, [
        addToast
    ]);
    /**
   * Toast para retry en progreso
   */ const showRetryToast = (0, _react.useCallback)((attempt, maxAttempts)=>{
        return addToast({
            type: 'info',
            title: 'Reintentando búsqueda...',
            description: `Intento ${attempt} de ${maxAttempts}`,
            duration: 2000
        });
    }, [
        addToast
    ]);
    /**
   * Toast para retry exitoso
   */ const showRetrySuccessToast = (0, _react.useCallback)(()=>{
        return addToast({
            type: 'success',
            title: '¡Conexión restaurada!',
            description: 'La búsqueda se completó exitosamente',
            duration: 3000
        });
    }, [
        addToast
    ]);
    /**
   * Toast para retry fallido
   */ const showRetryFailedToast = (0, _react.useCallback)((attempts)=>{
        return addToast({
            type: 'error',
            title: 'Búsqueda fallida',
            description: `No se pudo completar después de ${attempts} intentos`,
            duration: 6000
        });
    }, [
        addToast
    ]);
    return {
        // Estado
        toasts,
        hasToasts: toasts.length > 0,
        // Funciones generales
        addToast,
        removeToast,
        clearToasts,
        // Funciones específicas para búsquedas
        showSuccessToast,
        showErrorToast,
        showWarningToast,
        showInfoToast,
        showNoResultsToast,
        showRetryToast,
        showRetrySuccessToast,
        showRetryFailedToast
    };
}
const _default = useSearchToast;

//# sourceMappingURL=data:application/json;base64,