{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\seo\\seo-analytics-manager.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - SEO ANALYTICS MANAGER - ENHANCED\n// Sistema avanzado de análisis y monitoreo SEO en tiempo real\n// Incluye tracking de rankings, métricas de performance y reportes automatizados\n// ===================================\n\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger'\nimport { getRedisClient } from '@/lib/integrations/redis'\nimport { realTimePerformanceMonitor } from '@/lib/monitoring/real-time-performance-monitor'\nimport {\n  advancedAlertingEngine,\n  AlertType,\n  AlertSeverity,\n} from '@/lib/monitoring/advanced-alerting-engine'\n\n// ===================================\n// INTERFACES Y TIPOS MEJORADOS\n// ===================================\n\n// Tipos para métricas SEO mejoradas\nexport interface SEOMetrics {\n  pageViews: number\n  uniqueVisitors: number\n  bounceRate: number\n  avgSessionDuration: number\n  organicTraffic: number\n  searchImpressions: number\n  searchClicks: number\n  avgPosition: number\n  ctr: number // Click Through Rate\n  coreWebVitals: CoreWebVitals\n  indexationStatus: IndexationStatus\n  technicalSEO: TechnicalSEOMetrics\n  timestamp: Date\n\n  // Nuevas métricas avanzadas\n  conversionRate: number\n  revenueFromOrganic: number\n  topLandingPages: PageMetrics[]\n  topExitPages: PageMetrics[]\n  deviceBreakdown: DeviceMetrics\n  geographicData: GeographicMetrics[]\n}\n\n// Nuevas interfaces para métricas avanzadas\nexport interface PageMetrics {\n  url: string\n  pageViews: number\n  uniquePageViews: number\n  avgTimeOnPage: number\n  bounceRate: number\n  exitRate: number\n  conversions: number\n  revenue: number\n}\n\nexport interface DeviceMetrics {\n  desktop: {\n    sessions: number\n    bounceRate: number\n    conversionRate: number\n    avgSessionDuration: number\n  }\n  mobile: {\n    sessions: number\n    bounceRate: number\n    conversionRate: number\n    avgSessionDuration: number\n  }\n  tablet: {\n    sessions: number\n    bounceRate: number\n    conversionRate: number\n    avgSessionDuration: number\n  }\n}\n\nexport interface GeographicMetrics {\n  country: string\n  region: string\n  city: string\n  sessions: number\n  users: number\n  bounceRate: number\n  conversionRate: number\n  revenue: number\n}\n\nexport interface CoreWebVitals {\n  lcp: number // Largest Contentful Paint\n  fid: number // First Input Delay\n  cls: number // Cumulative Layout Shift\n  fcp: number // First Contentful Paint\n  ttfb: number // Time to First Byte\n  inp: number // Interaction to Next Paint\n  score: 'good' | 'needs-improvement' | 'poor'\n\n  // Métricas adicionales\n  speedIndex: number\n  totalBlockingTime: number\n  largestContentfulPaintElement: string\n  cumulativeLayoutShiftSources: string[]\n}\n\nexport interface IndexationStatus {\n  totalPages: number\n  indexedPages: number\n  notIndexedPages: number\n  indexationRate: number\n  crawlErrors: number\n  sitemapStatus: 'submitted' | 'processed' | 'error'\n  lastCrawlDate: Date\n}\n\nexport interface TechnicalSEOMetrics {\n  mobileUsability: number\n  pagespeedScore: number\n  httpsUsage: number\n  structuredDataErrors: number\n  metaTagsOptimization: number\n  internalLinkingScore: number\n  imageOptimization: number\n  canonicalIssues: number\n}\n\nexport interface KeywordMetrics {\n  keyword: string\n  position: number\n  previousPosition: number\n  searchVolume: number\n  difficulty: number\n  clicks: number\n  impressions: number\n  ctr: number\n  url: string\n  trend: 'up' | 'down' | 'stable'\n\n  // Métricas avanzadas de keywords\n  searchEngine: 'google' | 'bing' | 'yahoo' | 'duckduckgo'\n  device: 'desktop' | 'mobile' | 'tablet'\n  location: string\n  intent: 'informational' | 'navigational' | 'transactional' | 'commercial'\n  competitorRankings: CompetitorKeywordData[]\n  relatedKeywords: string[]\n  seasonalTrends: SeasonalData[]\n  conversionRate: number\n  revenue: number\n  costPerClick: number\n  lastUpdated: Date\n}\n\nexport interface CompetitorKeywordData {\n  domain: string\n  position: number\n  url: string\n  title: string\n  description: string\n}\n\nexport interface SeasonalData {\n  month: number\n  searchVolume: number\n  competition: number\n  cpc: number\n}\n\nexport interface CompetitorAnalysis {\n  competitor: string\n  domain: string\n  organicKeywords: number\n  organicTraffic: number\n  backlinks: number\n  domainAuthority: number\n  commonKeywords: string[]\n  keywordGaps: string[]\n\n  // Análisis avanzado de competidores\n  pageAuthority: number\n  trustFlow: number\n  citationFlow: number\n  referringDomains: number\n  organicCost: number\n  paidKeywords: number\n  paidTraffic: number\n  paidCost: number\n  topPages: CompetitorPage[]\n  contentGaps: ContentGap[]\n  backlinksGaps: BacklinkGap[]\n  socialMetrics: SocialMetrics\n  technicalSEOScore: number\n  lastAnalyzed: Date\n}\n\nexport interface CompetitorPage {\n  url: string\n  title: string\n  traffic: number\n  keywords: number\n  backlinks: number\n  socialShares: number\n}\n\nexport interface ContentGap {\n  topic: string\n  keywords: string[]\n  searchVolume: number\n  difficulty: number\n  opportunity: 'high' | 'medium' | 'low'\n}\n\nexport interface BacklinkGap {\n  domain: string\n  domainAuthority: number\n  linkType: 'dofollow' | 'nofollow'\n  anchorText: string\n  opportunity: 'high' | 'medium' | 'low'\n}\n\nexport interface SocialMetrics {\n  facebook: {\n    likes: number\n    shares: number\n    comments: number\n  }\n  twitter: {\n    followers: number\n    tweets: number\n    retweets: number\n  }\n  linkedin: {\n    followers: number\n    posts: number\n    engagement: number\n  }\n  instagram: {\n    followers: number\n    posts: number\n    engagement: number\n  }\n}\n\nexport interface SEOAlert {\n  id: string\n  type: 'critical' | 'warning' | 'info'\n  category:\n    | 'technical'\n    | 'content'\n    | 'performance'\n    | 'indexation'\n    | 'security'\n    | 'mobile'\n    | 'schema'\n  title: string\n  description: string\n  url?: string\n  severity: number\n  timestamp: Date\n  resolved: boolean\n  recommendations: string[]\n\n  // Campos avanzados para alertas\n  impact: 'high' | 'medium' | 'low'\n  effort: 'low' | 'medium' | 'high'\n  priority: number\n  affectedPages: string[]\n  estimatedTrafficImpact: number\n  estimatedRevenueImpact: number\n  relatedAlerts: string[]\n  autoResolvable: boolean\n  resolutionSteps: ResolutionStep[]\n  lastOccurrence: Date\n  frequency: number\n  tags: string[]\n}\n\nexport interface ResolutionStep {\n  step: number\n  description: string\n  action: string\n  estimatedTime: number // minutos\n  difficulty: 'easy' | 'medium' | 'hard'\n  requiredSkills: string[]\n}\n\nexport interface SEOReport {\n  id: string\n  period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'custom'\n  startDate: Date\n  endDate: Date\n  metrics: SEOMetrics\n  keywords: KeywordMetrics[]\n  alerts: SEOAlert[]\n  recommendations: SEORecommendation[]\n  competitorAnalysis?: CompetitorAnalysis[]\n\n  // Secciones avanzadas del reporte\n  executiveSummary: ExecutiveSummary\n  performanceAnalysis: PerformanceAnalysis\n  keywordAnalysis: KeywordAnalysis\n  technicalAnalysis: TechnicalAnalysis\n  contentAnalysis: ContentAnalysis\n  competitiveAnalysis: CompetitiveAnalysis\n  actionPlan: ActionPlan\n\n  // Metadatos del reporte\n  generatedBy: string\n  generatedAt: Date\n  version: string\n  exportFormats: ('pdf' | 'excel' | 'csv' | 'json')[]\n  scheduledDelivery: ScheduledDelivery[]\n}\n\nexport interface SEORecommendation {\n  id: string\n  category: 'technical' | 'content' | 'performance' | 'mobile' | 'schema' | 'keywords'\n  title: string\n  description: string\n  priority: 'high' | 'medium' | 'low'\n  impact: 'high' | 'medium' | 'low'\n  effort: 'low' | 'medium' | 'high'\n  estimatedTimeToImplement: number // días\n  estimatedTrafficIncrease: number // porcentaje\n  estimatedRevenueIncrease: number // monto\n  implementationSteps: string[]\n  requiredResources: string[]\n  kpis: string[]\n  relatedRecommendations: string[]\n  status: 'pending' | 'in-progress' | 'completed' | 'dismissed'\n  assignedTo?: string\n  dueDate?: Date\n  completedDate?: Date\n  notes: string[]\n}\n\nexport interface ExecutiveSummary {\n  overallScore: number\n  scoreChange: number\n  keyAchievements: string[]\n  majorConcerns: string[]\n  quickWins: string[]\n  budgetRecommendations: BudgetRecommendation[]\n}\n\nexport interface BudgetRecommendation {\n  category: string\n  description: string\n  estimatedCost: number\n  expectedROI: number\n  timeframe: string\n}\n\n// Interfaces adicionales para análisis avanzado\nexport interface PerformanceAnalysis {\n  coreWebVitalsScore: number\n  coreWebVitalsChange: number\n  pageSpeedScore: number\n  pageSpeedChange: number\n  mobileScore: number\n  mobileChange: number\n  slowestPages: PagePerformance[]\n  performanceRecommendations: string[]\n}\n\nexport interface PagePerformance {\n  url: string\n  lcp: number\n  fid: number\n  cls: number\n  speedIndex: number\n  totalBlockingTime: number\n  issues: string[]\n}\n\nexport interface KeywordAnalysis {\n  totalKeywords: number\n  keywordsChange: number\n  averagePosition: number\n  positionChange: number\n  topGainers: KeywordMetrics[]\n  topLosers: KeywordMetrics[]\n  newKeywords: KeywordMetrics[]\n  lostKeywords: KeywordMetrics[]\n  opportunityKeywords: KeywordMetrics[]\n}\n\nexport interface TechnicalAnalysis {\n  crawlabilityScore: number\n  indexabilityScore: number\n  structuredDataScore: number\n  mobileUsabilityScore: number\n  securityScore: number\n  technicalIssues: TechnicalIssue[]\n  improvements: string[]\n}\n\nexport interface TechnicalIssue {\n  type: string\n  severity: 'high' | 'medium' | 'low'\n  count: number\n  affectedPages: string[]\n  description: string\n  fix: string\n}\n\nexport interface ContentAnalysis {\n  totalPages: number\n  indexedPages: number\n  duplicateContent: number\n  thinContent: number\n  missingMetaTags: number\n  contentQualityScore: number\n  topPerformingContent: ContentMetrics[]\n  contentGaps: string[]\n}\n\nexport interface ContentMetrics {\n  url: string\n  title: string\n  wordCount: number\n  readabilityScore: number\n  organicTraffic: number\n  socialShares: number\n  backlinks: number\n  conversionRate: number\n}\n\nexport interface CompetitiveAnalysis {\n  marketShare: number\n  visibilityScore: number\n  competitorComparison: CompetitorComparison[]\n  opportunityAnalysis: OpportunityAnalysis[]\n}\n\nexport interface CompetitorComparison {\n  competitor: string\n  ourPosition: number\n  theirPosition: number\n  gap: number\n  opportunity: 'high' | 'medium' | 'low'\n}\n\nexport interface OpportunityAnalysis {\n  type: 'keyword' | 'content' | 'backlink' | 'technical'\n  description: string\n  potential: number\n  difficulty: number\n  priority: 'high' | 'medium' | 'low'\n}\n\nexport interface ActionPlan {\n  quickWins: ActionItem[]\n  shortTerm: ActionItem[]\n  longTerm: ActionItem[]\n  ongoing: ActionItem[]\n}\n\nexport interface ActionItem {\n  id: string\n  title: string\n  description: string\n  category: string\n  priority: 'high' | 'medium' | 'low'\n  effort: 'low' | 'medium' | 'high'\n  impact: 'high' | 'medium' | 'low'\n  estimatedTime: number\n  assignee?: string\n  dueDate?: Date\n  dependencies: string[]\n  kpis: string[]\n}\n\nexport interface ScheduledDelivery {\n  email: string\n  frequency: 'daily' | 'weekly' | 'monthly'\n  format: 'pdf' | 'excel' | 'summary'\n  enabled: boolean\n}\n\n// Configuración avanzada del sistema\nexport interface SEOAnalyticsConfig {\n  enableRealTimeTracking: boolean\n  enableKeywordTracking: boolean\n  enableCompetitorAnalysis: boolean\n  enableAutomatedReports: boolean\n  enableAlerts: boolean\n\n  // Intervalos de actualización\n  metricsUpdateInterval: number // minutos\n  keywordUpdateInterval: number // horas\n  competitorUpdateInterval: number // días\n  alertCheckInterval: number // minutos\n\n  // Configuración de reportes\n  reportSchedule: {\n    daily: { enabled: boolean; time: string; recipients: string[] }\n    weekly: { enabled: boolean; day: number; time: string; recipients: string[] }\n    monthly: { enabled: boolean; day: number; time: string; recipients: string[] }\n  }\n\n  // Thresholds para alertas\n  alertThresholds: {\n    seoScoreDrop: number\n    rankingDrop: number\n    trafficDrop: number\n    performanceDrop: number\n    criticalIssuesIncrease: number\n    conversionRateDrop: number\n  }\n\n  // Integraciones externas\n  integrations: {\n    googleSearchConsole: { enabled: boolean; credentials?: any }\n    googleAnalytics: { enabled: boolean; credentials?: any }\n    semrush: { enabled: boolean; apiKey?: string }\n    ahrefs: { enabled: boolean; apiKey?: string }\n    screaminFrog: { enabled: boolean; apiKey?: string }\n  }\n\n  // Configuración de cache y almacenamiento\n  cache: {\n    enabled: boolean\n    ttl: number\n    maxSize: number\n  }\n\n  dataRetention: {\n    metricsRetentionDays: number\n    alertsRetentionDays: number\n    reportsRetentionDays: number\n  }\n}\n\n// Configuración por defecto\nconst DEFAULT_SEO_CONFIG: SEOAnalyticsConfig = {\n  enableRealTimeTracking: true,\n  enableKeywordTracking: true,\n  enableCompetitorAnalysis: true,\n  enableAutomatedReports: true,\n  enableAlerts: true,\n\n  metricsUpdateInterval: 15,\n  keywordUpdateInterval: 24,\n  competitorUpdateInterval: 7,\n  alertCheckInterval: 5,\n\n  reportSchedule: {\n    daily: { enabled: true, time: '09:00', recipients: [] },\n    weekly: { enabled: true, day: 1, time: '09:00', recipients: [] },\n    monthly: { enabled: true, day: 1, time: '09:00', recipients: [] },\n  },\n\n  alertThresholds: {\n    seoScoreDrop: 10,\n    rankingDrop: 5,\n    trafficDrop: 20,\n    performanceDrop: 15,\n    criticalIssuesIncrease: 3,\n    conversionRateDrop: 25,\n  },\n\n  integrations: {\n    googleSearchConsole: { enabled: false },\n    googleAnalytics: { enabled: false },\n    semrush: { enabled: false },\n    ahrefs: { enabled: false },\n    screaminFrog: { enabled: false },\n  },\n\n  cache: {\n    enabled: true,\n    ttl: 3600,\n    maxSize: 1000,\n  },\n\n  dataRetention: {\n    metricsRetentionDays: 90,\n    alertsRetentionDays: 30,\n    reportsRetentionDays: 365,\n  },\n}\n\n// ===================================\n// ENHANCED SEO ANALYTICS MANAGER CLASS\n// ===================================\n\nexport class EnhancedSEOAnalyticsManager {\n  private static instance: EnhancedSEOAnalyticsManager\n  private config: SEOAnalyticsConfig\n  private metrics: SEOMetrics[] = []\n  private keywords: KeywordMetrics[] = []\n  private alerts: SEOAlert[] = []\n  private reports: SEOReport[] = []\n  private competitors: CompetitorAnalysis[] = []\n  private listeners: ((data: any) => void)[] = []\n  private cache: Map<string, { data: any; timestamp: number }> = new Map()\n  private redis: any\n\n  // Intervalos de tracking\n  private metricsInterval: NodeJS.Timeout | null = null\n  private keywordInterval: NodeJS.Timeout | null = null\n  private competitorInterval: NodeJS.Timeout | null = null\n  private alertInterval: NodeJS.Timeout | null = null\n\n  private constructor(config?: Partial<SEOAnalyticsConfig>) {\n    this.config = { ...DEFAULT_SEO_CONFIG, ...config }\n    this.initializeRedis()\n    this.startTracking()\n\n    logger.info(\n      LogLevel.INFO,\n      'Enhanced SEO Analytics Manager initialized',\n      {\n        realTimeTracking: this.config.enableRealTimeTracking,\n        keywordTracking: this.config.enableKeywordTracking,\n        competitorAnalysis: this.config.enableCompetitorAnalysis,\n        automatedReports: this.config.enableAutomatedReports,\n      },\n      LogCategory.SEO\n    )\n  }\n\n  public static getInstance(config?: Partial<SEOAnalyticsConfig>): EnhancedSEOAnalyticsManager {\n    if (!EnhancedSEOAnalyticsManager.instance) {\n      EnhancedSEOAnalyticsManager.instance = new EnhancedSEOAnalyticsManager(config)\n    }\n    return EnhancedSEOAnalyticsManager.instance\n  }\n\n  private async initializeRedis(): Promise<void> {\n    try {\n      this.redis = await getRedisClient()\n      logger.info(LogLevel.INFO, 'Redis initialized for SEO analytics', {}, LogCategory.SEO)\n    } catch (error) {\n      logger.warn(LogLevel.WARN, 'Redis not available for SEO analytics', {}, LogCategory.SEO)\n    }\n  }\n\n  // ===================================\n  // TRACKING Y RECOPILACIÓN DE MÉTRICAS\n  // ===================================\n\n  private startTracking(): void {\n    if (this.config.enableRealTimeTracking) {\n      this.metricsInterval = setInterval(\n        () => {\n          this.collectAndProcessMetrics()\n        },\n        this.config.metricsUpdateInterval * 60 * 1000\n      )\n    }\n\n    if (this.config.enableKeywordTracking) {\n      this.keywordInterval = setInterval(\n        () => {\n          this.updateKeywordRankings()\n        },\n        this.config.keywordUpdateInterval * 60 * 60 * 1000\n      )\n    }\n\n    if (this.config.enableCompetitorAnalysis) {\n      this.competitorInterval = setInterval(\n        () => {\n          this.updateCompetitorAnalysis()\n        },\n        this.config.competitorUpdateInterval * 24 * 60 * 60 * 1000\n      )\n    }\n\n    if (this.config.enableAlerts) {\n      this.alertInterval = setInterval(\n        () => {\n          this.checkAlerts()\n        },\n        this.config.alertCheckInterval * 60 * 1000\n      )\n    }\n\n    logger.info(\n      LogLevel.INFO,\n      'SEO tracking started',\n      {\n        metricsInterval: this.config.metricsUpdateInterval,\n        keywordInterval: this.config.keywordUpdateInterval,\n        competitorInterval: this.config.competitorUpdateInterval,\n        alertInterval: this.config.alertCheckInterval,\n      },\n      LogCategory.SEO\n    )\n  }\n\n  private async collectAndProcessMetrics(): Promise<void> {\n    try {\n      const coreWebVitals = await this.collectCoreWebVitals()\n      const indexationStatus = await this.analyzeIndexationStatus()\n      const technicalSEO = await this.evaluateTechnicalSEO()\n\n      // Obtener métricas del performance monitor\n      const performanceMetrics = realTimePerformanceMonitor.getCurrentMetrics()\n\n      // Procesar métricas de tráfico (simulado - en producción vendría de GA)\n      const trafficMetrics = await this.collectTrafficMetrics()\n\n      const metrics: SEOMetrics = {\n        ...trafficMetrics,\n        coreWebVitals,\n        indexationStatus,\n        technicalSEO,\n        timestamp: new Date(),\n      }\n\n      this.metrics.push(metrics)\n      await this.cacheMetrics('latest_metrics', metrics)\n\n      // Verificar thresholds y generar alertas\n      await this.checkMetricsThresholds(metrics)\n\n      this.notifyListeners({ type: 'metrics_updated', data: metrics })\n\n      logger.info(\n        LogLevel.INFO,\n        'SEO metrics collected and processed',\n        {\n          coreWebVitalsScore: coreWebVitals.score,\n          indexationRate: indexationStatus.indexationRate,\n          organicTraffic: trafficMetrics.organicTraffic,\n        },\n        LogCategory.SEO\n      )\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to collect SEO metrics', error as Error, LogCategory.SEO)\n    }\n  }\n\n  // Recopilar métricas de Core Web Vitals mejoradas\n  async collectCoreWebVitals(): Promise<CoreWebVitals> {\n    return new Promise(resolve => {\n      // Obtener métricas reales del performance monitor si están disponibles\n      const performanceMetrics = realTimePerformanceMonitor.getCurrentMetrics()\n\n      let metrics: CoreWebVitals\n\n      if (performanceMetrics.webVitals.length > 0) {\n        const latest = performanceMetrics.webVitals[performanceMetrics.webVitals.length - 1]\n        metrics = {\n          lcp: latest.lcp,\n          fid: latest.fid,\n          cls: latest.cls,\n          fcp: latest.fcp,\n          ttfb: latest.ttfb,\n          inp: latest.inp || Math.random() * 500 + 100,\n          score: 'good', // Se calculará\n          speedIndex: latest.lcp * 0.8, // Estimación\n          totalBlockingTime: latest.fid * 2, // Estimación\n          largestContentfulPaintElement: 'main-content', // Simulado\n          cumulativeLayoutShiftSources: ['header', 'sidebar'], // Simulado\n        }\n      } else {\n        // Fallback a métricas simuladas\n        metrics = {\n          lcp: Math.random() * 4000 + 1000,\n          fid: Math.random() * 300 + 50,\n          cls: Math.random() * 0.25,\n          fcp: Math.random() * 3000 + 500,\n          ttfb: Math.random() * 800 + 200,\n          inp: Math.random() * 500 + 100,\n          score: 'good',\n          speedIndex: Math.random() * 5000 + 2000,\n          totalBlockingTime: Math.random() * 600 + 100,\n          largestContentfulPaintElement: 'main-content',\n          cumulativeLayoutShiftSources: [],\n        }\n      }\n\n      // Calcular score basado en thresholds de Google\n      const lcpScore =\n        metrics.lcp <= 2500 ? 'good' : metrics.lcp <= 4000 ? 'needs-improvement' : 'poor'\n      const fidScore =\n        metrics.fid <= 100 ? 'good' : metrics.fid <= 300 ? 'needs-improvement' : 'poor'\n      const clsScore =\n        metrics.cls <= 0.1 ? 'good' : metrics.cls <= 0.25 ? 'needs-improvement' : 'poor'\n\n      const scores = [lcpScore, fidScore, clsScore]\n      if (scores.every(s => s === 'good')) {\n        metrics.score = 'good'\n      } else if (scores.some(s => s === 'poor')) {\n        metrics.score = 'poor'\n      } else {\n        metrics.score = 'needs-improvement'\n      }\n\n      resolve(metrics)\n    })\n  }\n\n  // Recopilar métricas de tráfico\n  private async collectTrafficMetrics(): Promise<Partial<SEOMetrics>> {\n    // En producción, esto se integraría con Google Analytics API\n    const baseTraffic = Math.floor(Math.random() * 5000) + 2000\n\n    return {\n      pageViews: baseTraffic * 2,\n      uniqueVisitors: baseTraffic,\n      bounceRate: Math.random() * 40 + 30,\n      avgSessionDuration: Math.random() * 300 + 120,\n      organicTraffic: Math.floor(baseTraffic * 0.6),\n      searchImpressions: Math.floor(baseTraffic * 10),\n      searchClicks: Math.floor(baseTraffic * 0.8),\n      avgPosition: Math.random() * 20 + 5,\n      ctr: Math.random() * 8 + 2,\n      conversionRate: Math.random() * 5 + 1,\n      revenueFromOrganic: Math.floor(Math.random() * 50000) + 10000,\n      topLandingPages: this.getTopLandingPages(),\n      topExitPages: this.getTopExitPages(),\n      deviceBreakdown: this.getDeviceBreakdown(),\n      geographicData: this.getGeographicData(),\n    }\n  }\n\n  private getTopLandingPages(): PageMetrics[] {\n    const pages = [\n      '/products/pintura-interior',\n      '/products/pintura-exterior',\n      '/categories/herramientas',\n      '/categories/pinturas',\n      '/products/sherwin-williams',\n    ]\n\n    return pages.map(url => ({\n      url,\n      pageViews: Math.floor(Math.random() * 1000) + 100,\n      uniquePageViews: Math.floor(Math.random() * 800) + 80,\n      avgTimeOnPage: Math.random() * 300 + 60,\n      bounceRate: Math.random() * 60 + 20,\n      exitRate: Math.random() * 50 + 10,\n      conversions: Math.floor(Math.random() * 20) + 1,\n      revenue: Math.floor(Math.random() * 5000) + 500,\n    }))\n  }\n\n  private getTopExitPages(): PageMetrics[] {\n    const pages = ['/checkout', '/cart', '/contact', '/about', '/shipping-info']\n\n    return pages.map(url => ({\n      url,\n      pageViews: Math.floor(Math.random() * 500) + 50,\n      uniquePageViews: Math.floor(Math.random() * 400) + 40,\n      avgTimeOnPage: Math.random() * 200 + 30,\n      bounceRate: Math.random() * 80 + 40,\n      exitRate: Math.random() * 90 + 50,\n      conversions: Math.floor(Math.random() * 5),\n      revenue: Math.floor(Math.random() * 1000),\n    }))\n  }\n\n  private getDeviceBreakdown(): DeviceMetrics {\n    return {\n      desktop: {\n        sessions: Math.floor(Math.random() * 2000) + 500,\n        bounceRate: Math.random() * 40 + 25,\n        conversionRate: Math.random() * 4 + 2,\n        avgSessionDuration: Math.random() * 400 + 200,\n      },\n      mobile: {\n        sessions: Math.floor(Math.random() * 3000) + 1000,\n        bounceRate: Math.random() * 50 + 35,\n        conversionRate: Math.random() * 3 + 1,\n        avgSessionDuration: Math.random() * 300 + 150,\n      },\n      tablet: {\n        sessions: Math.floor(Math.random() * 500) + 100,\n        bounceRate: Math.random() * 45 + 30,\n        conversionRate: Math.random() * 3.5 + 1.5,\n        avgSessionDuration: Math.random() * 350 + 180,\n      },\n    }\n  }\n\n  private getGeographicData(): GeographicMetrics[] {\n    const locations = [\n      { country: 'Argentina', region: 'Buenos Aires', city: 'CABA' },\n      { country: 'Argentina', region: 'Buenos Aires', city: 'La Plata' },\n      { country: 'Argentina', region: 'Córdoba', city: 'Córdoba' },\n      { country: 'Argentina', region: 'Santa Fe', city: 'Rosario' },\n      { country: 'Argentina', region: 'Mendoza', city: 'Mendoza' },\n    ]\n\n    return locations.map(location => ({\n      ...location,\n      sessions: Math.floor(Math.random() * 1000) + 100,\n      users: Math.floor(Math.random() * 800) + 80,\n      bounceRate: Math.random() * 50 + 25,\n      conversionRate: Math.random() * 4 + 1,\n      revenue: Math.floor(Math.random() * 10000) + 1000,\n    }))\n  }\n\n  // Analizar estado de indexación mejorado\n  async analyzeIndexationStatus(): Promise<IndexationStatus> {\n    // En producción, esto se integraría con Google Search Console API\n    const totalPages = 150 + Math.floor(Math.random() * 50)\n    const indexedPages = Math.floor(totalPages * (0.9 + Math.random() * 0.1))\n\n    return {\n      totalPages,\n      indexedPages,\n      notIndexedPages: totalPages - indexedPages,\n      indexationRate: Number(((indexedPages / totalPages) * 100).toFixed(1)),\n      crawlErrors: Math.floor(Math.random() * 5),\n      sitemapStatus: Math.random() > 0.1 ? 'processed' : 'error',\n      lastCrawlDate: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000),\n    }\n  }\n\n  // Evaluar SEO técnico\n  async evaluateTechnicalSEO(): Promise<TechnicalSEOMetrics> {\n    return {\n      mobileUsability: 95,\n      pagespeedScore: 88,\n      httpsUsage: 100,\n      structuredDataErrors: 2,\n      metaTagsOptimization: 92,\n      internalLinkingScore: 85,\n      imageOptimization: 78,\n      canonicalIssues: 1,\n    }\n  }\n\n  // Recopilar métricas completas\n  async collectMetrics(): Promise<SEOMetrics> {\n    const coreWebVitals = await this.collectCoreWebVitals()\n    const indexationStatus = await this.analyzeIndexationStatus()\n    const technicalSEO = await this.evaluateTechnicalSEO()\n\n    const metrics: SEOMetrics = {\n      pageViews: Math.floor(Math.random() * 10000) + 5000,\n      uniqueVisitors: Math.floor(Math.random() * 5000) + 2000,\n      bounceRate: Math.random() * 40 + 30, // 30-70%\n      avgSessionDuration: Math.random() * 300 + 120, // 2-7 minutos\n      organicTraffic: Math.floor(Math.random() * 3000) + 1000,\n      searchImpressions: Math.floor(Math.random() * 50000) + 20000,\n      searchClicks: Math.floor(Math.random() * 2000) + 800,\n      avgPosition: Math.random() * 20 + 5, // Posición 5-25\n      ctr: Math.random() * 8 + 2, // 2-10%\n      coreWebVitals,\n      indexationStatus,\n      technicalSEO,\n      timestamp: new Date(),\n    }\n\n    this.metrics.push(metrics)\n    this.notifyListeners({ type: 'metrics', data: metrics })\n\n    return metrics\n  }\n\n  // ===================================\n  // ANÁLISIS DE KEYWORDS AVANZADO\n  // ===================================\n\n  private async updateKeywordRankings(): Promise<void> {\n    try {\n      const keywords = await this.analyzeKeywords()\n      this.keywords = keywords\n\n      await this.cacheMetrics('latest_keywords', keywords)\n\n      // Verificar cambios significativos en rankings\n      await this.checkKeywordAlerts(keywords)\n\n      this.notifyListeners({ type: 'keywords_updated', data: keywords })\n\n      logger.info(\n        LogLevel.INFO,\n        'Keyword rankings updated',\n        {\n          totalKeywords: keywords.length,\n          averagePosition: keywords.reduce((sum, k) => sum + k.position, 0) / keywords.length,\n        },\n        LogCategory.SEO\n      )\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Failed to update keyword rankings',\n        error as Error,\n        LogCategory.SEO\n      )\n    }\n  }\n\n  // Analizar keywords con métricas avanzadas\n  async analyzeKeywords(): Promise<KeywordMetrics[]> {\n    const sampleKeywords = [\n      { keyword: 'pinturería online', intent: 'commercial' as const, volume: 2400 },\n      { keyword: 'pinturas sherwin williams', intent: 'commercial' as const, volume: 1800 },\n      { keyword: 'ferretería online', intent: 'commercial' as const, volume: 3200 },\n      { keyword: 'herramientas pintura', intent: 'commercial' as const, volume: 1500 },\n      { keyword: 'corralón online', intent: 'commercial' as const, volume: 2800 },\n      { keyword: 'pinturas argentina', intent: 'informational' as const, volume: 4200 },\n      { keyword: 'petrilac pinturas', intent: 'navigational' as const, volume: 800 },\n      { keyword: 'sinteplast', intent: 'navigational' as const, volume: 1200 },\n      { keyword: 'plavicon', intent: 'navigational' as const, volume: 600 },\n      { keyword: 'akapol', intent: 'navigational' as const, volume: 400 },\n      { keyword: 'pintura interior precio', intent: 'transactional' as const, volume: 1600 },\n      { keyword: 'pintura exterior mejor', intent: 'informational' as const, volume: 900 },\n      { keyword: 'como pintar paredes', intent: 'informational' as const, volume: 5500 },\n      { keyword: 'rodillos pintura profesional', intent: 'commercial' as const, volume: 700 },\n      { keyword: 'pintura antioxido', intent: 'commercial' as const, volume: 1100 },\n    ]\n\n    const keywords: KeywordMetrics[] = await Promise.all(\n      sampleKeywords.map(async ({ keyword, intent, volume }) => {\n        const position = Math.floor(Math.random() * 50) + 1\n        const previousPosition = position + Math.floor(Math.random() * 10) - 5\n        const clicks = Math.floor(Math.random() * 200) + 10\n        const impressions = Math.floor(Math.random() * 2000) + 100\n\n        return {\n          keyword,\n          position,\n          previousPosition,\n          searchVolume: volume,\n          difficulty: Math.floor(Math.random() * 100),\n          clicks,\n          impressions,\n          ctr: (clicks / impressions) * 100,\n          url: `/shop?search=${encodeURIComponent(keyword)}`,\n          trend:\n            position < previousPosition ? 'up' : position > previousPosition ? 'down' : 'stable',\n          searchEngine: 'google',\n          device: Math.random() > 0.6 ? 'mobile' : 'desktop',\n          location: 'Argentina',\n          intent,\n          competitorRankings: this.getCompetitorRankings(keyword),\n          relatedKeywords: this.getRelatedKeywords(keyword),\n          seasonalTrends: this.getSeasonalTrends(keyword),\n          conversionRate: Math.random() * 5 + 1,\n          revenue: Math.floor(Math.random() * 10000) + 1000,\n          costPerClick: Math.random() * 5 + 0.5,\n          lastUpdated: new Date(),\n        }\n      })\n    )\n\n    // Guardar keywords en el manager\n    this.keywords = keywords\n\n    return keywords\n  }\n\n  private getCompetitorRankings(keyword: string): CompetitorKeywordData[] {\n    const competitors = ['easy.com.ar', 'sodimac.com.ar', 'mercadolibre.com.ar']\n\n    return competitors.map(domain => ({\n      domain,\n      position: Math.floor(Math.random() * 20) + 1,\n      url: `https://${domain}/search?q=${encodeURIComponent(keyword)}`,\n      title: `${keyword} - ${domain}`,\n      description: `Encuentra ${keyword} en ${domain} con los mejores precios y calidad.`,\n    }))\n  }\n\n  private getRelatedKeywords(keyword: string): string[] {\n    const relatedMap: Record<string, string[]> = {\n      'pinturería online': ['pintura online', 'comprar pintura', 'tienda pintura'],\n      'pinturas sherwin williams': ['sherwin williams argentina', 'pintura sherwin', 'sw pinturas'],\n      'ferretería online': ['ferretería virtual', 'herramientas online', 'comprar herramientas'],\n      'herramientas pintura': ['rodillos pintura', 'pinceles', 'brochas pintura'],\n      'corralón online': ['materiales construcción', 'corralón virtual', 'construcción online'],\n    }\n\n    return relatedMap[keyword] || [`${keyword} precio`, `${keyword} argentina`, `mejor ${keyword}`]\n  }\n\n  private getSeasonalTrends(keyword: string): SeasonalData[] {\n    return Array.from({ length: 12 }, (_, month) => ({\n      month: month + 1,\n      searchVolume: Math.floor(Math.random() * 2000) + 500,\n      competition: Math.random(),\n      cpc: Math.random() * 3 + 0.5,\n    }))\n  }\n\n  // ===================================\n  // ANÁLISIS DE COMPETIDORES\n  // ===================================\n\n  private async updateCompetitorAnalysis(): Promise<void> {\n    try {\n      const competitors = await this.analyzeCompetitors()\n      this.competitors = competitors\n\n      await this.cacheMetrics('latest_competitors', competitors)\n\n      this.notifyListeners({ type: 'competitors_updated', data: competitors })\n\n      logger.info(\n        LogLevel.INFO,\n        'Competitor analysis updated',\n        {\n          competitorsAnalyzed: competitors.length,\n        },\n        LogCategory.SEO\n      )\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Failed to update competitor analysis',\n        error as Error,\n        LogCategory.SEO\n      )\n    }\n  }\n\n  private async analyzeCompetitors(): Promise<CompetitorAnalysis[]> {\n    const competitorDomains = [\n      'easy.com.ar',\n      'sodimac.com.ar',\n      'mercadolibre.com.ar',\n      'pinturerias-rex.com.ar',\n      'sherwin-williams.com.ar',\n    ]\n\n    return Promise.all(\n      competitorDomains.map(async domain => {\n        const organicKeywords = Math.floor(Math.random() * 10000) + 5000\n        const organicTraffic = Math.floor(Math.random() * 500000) + 100000\n\n        return {\n          competitor: domain.split('.')[0],\n          domain,\n          organicKeywords,\n          organicTraffic,\n          backlinks: Math.floor(Math.random() * 100000) + 10000,\n          domainAuthority: Math.floor(Math.random() * 40) + 40,\n          commonKeywords: this.getCommonKeywords(domain),\n          keywordGaps: this.getKeywordGaps(domain),\n          pageAuthority: Math.floor(Math.random() * 30) + 30,\n          trustFlow: Math.floor(Math.random() * 40) + 20,\n          citationFlow: Math.floor(Math.random() * 50) + 25,\n          referringDomains: Math.floor(Math.random() * 5000) + 1000,\n          organicCost: Math.floor(Math.random() * 100000) + 20000,\n          paidKeywords: Math.floor(Math.random() * 2000) + 500,\n          paidTraffic: Math.floor(Math.random() * 50000) + 10000,\n          paidCost: Math.floor(Math.random() * 50000) + 10000,\n          topPages: this.getCompetitorTopPages(domain),\n          contentGaps: this.getContentGaps(domain),\n          backlinksGaps: this.getBacklinkGaps(domain),\n          socialMetrics: this.getSocialMetrics(domain),\n          technicalSEOScore: Math.floor(Math.random() * 30) + 70,\n          lastAnalyzed: new Date(),\n        }\n      })\n    )\n  }\n\n  private getCommonKeywords(domain: string): string[] {\n    return ['pintura interior', 'pintura exterior', 'herramientas pintura', 'rodillos', 'pinceles']\n  }\n\n  private getKeywordGaps(domain: string): string[] {\n    return [\n      'pintura ecológica',\n      'pintura antimanchas',\n      'pintura magnética',\n      'pintura pizarra',\n      'pintura texturada',\n    ]\n  }\n\n  private getCompetitorTopPages(domain: string): CompetitorPage[] {\n    const pages = ['/productos/pinturas', '/herramientas', '/ofertas', '/marcas', '/consejos']\n\n    return pages.map(url => ({\n      url: `https://${domain}${url}`,\n      title: `${url.split('/').pop()} - ${domain}`,\n      traffic: Math.floor(Math.random() * 10000) + 1000,\n      keywords: Math.floor(Math.random() * 100) + 20,\n      backlinks: Math.floor(Math.random() * 500) + 50,\n      socialShares: Math.floor(Math.random() * 1000) + 100,\n    }))\n  }\n\n  private getContentGaps(domain: string): ContentGap[] {\n    return [\n      {\n        topic: 'Guías de pintura',\n        keywords: ['como pintar', 'técnicas pintura', 'consejos pintura'],\n        searchVolume: 5000,\n        difficulty: 45,\n        opportunity: 'high',\n      },\n      {\n        topic: 'Comparativas de productos',\n        keywords: ['mejor pintura', 'comparar pinturas', 'pintura vs pintura'],\n        searchVolume: 3000,\n        difficulty: 60,\n        opportunity: 'medium',\n      },\n    ]\n  }\n\n  private getBacklinkGaps(domain: string): BacklinkGap[] {\n    return [\n      {\n        domain: 'arquitectura.com',\n        domainAuthority: 65,\n        linkType: 'dofollow',\n        anchorText: 'mejores pinturas',\n        opportunity: 'high',\n      },\n      {\n        domain: 'decoracion.com.ar',\n        domainAuthority: 55,\n        linkType: 'dofollow',\n        anchorText: 'pintura interior',\n        opportunity: 'medium',\n      },\n    ]\n  }\n\n  private getSocialMetrics(domain: string): SocialMetrics {\n    return {\n      facebook: {\n        likes: Math.floor(Math.random() * 50000) + 10000,\n        shares: Math.floor(Math.random() * 5000) + 1000,\n        comments: Math.floor(Math.random() * 2000) + 500,\n      },\n      twitter: {\n        followers: Math.floor(Math.random() * 20000) + 5000,\n        tweets: Math.floor(Math.random() * 1000) + 200,\n        retweets: Math.floor(Math.random() * 500) + 100,\n      },\n      linkedin: {\n        followers: Math.floor(Math.random() * 10000) + 2000,\n        posts: Math.floor(Math.random() * 200) + 50,\n        engagement: Math.floor(Math.random() * 1000) + 200,\n      },\n      instagram: {\n        followers: Math.floor(Math.random() * 30000) + 8000,\n        posts: Math.floor(Math.random() * 500) + 100,\n        engagement: Math.floor(Math.random() * 2000) + 500,\n      },\n    }\n  }\n\n  // ===================================\n  // SISTEMA DE ALERTAS AVANZADO\n  // ===================================\n\n  private async checkAlerts(): Promise<void> {\n    try {\n      const alerts = await this.detectSEOIssues()\n\n      // Enviar alertas críticas al sistema de alertas\n      const criticalAlerts = alerts.filter(alert => alert.type === 'critical')\n      for (const alert of criticalAlerts) {\n        await advancedAlertingEngine.createAlert(\n          AlertType.PERFORMANCE,\n          AlertSeverity.CRITICAL,\n          alert.title,\n          alert.description,\n          {\n            category: alert.category,\n            url: alert.url,\n            severity: alert.severity,\n            recommendations: alert.recommendations,\n          }\n        )\n      }\n\n      this.notifyListeners({ type: 'alerts_updated', data: alerts })\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to check SEO alerts', error as Error, LogCategory.SEO)\n    }\n  }\n\n  private async checkMetricsThresholds(metrics: SEOMetrics): Promise<void> {\n    const alerts: SEOAlert[] = []\n\n    // Verificar Core Web Vitals\n    if (metrics.coreWebVitals.score === 'poor') {\n      alerts.push(\n        await this.createAlert(\n          'critical',\n          'performance',\n          'Core Web Vitals críticos',\n          `Las métricas de Core Web Vitals están en estado crítico. LCP: ${metrics.coreWebVitals.lcp}ms, FID: ${metrics.coreWebVitals.fid}ms, CLS: ${metrics.coreWebVitals.cls}`,\n          [\n            'Optimizar imágenes y recursos',\n            'Reducir JavaScript que bloquea',\n            'Mejorar estabilidad del layout',\n          ],\n          'high',\n          9\n        )\n      )\n    }\n\n    // Verificar tasa de indexación\n    if (metrics.indexationStatus.indexationRate < 90) {\n      alerts.push(\n        await this.createAlert(\n          'warning',\n          'indexation',\n          'Baja tasa de indexación',\n          `Solo el ${metrics.indexationStatus.indexationRate}% de las páginas están indexadas`,\n          ['Revisar robots.txt', 'Verificar sitemap', 'Analizar errores de crawl'],\n          'medium',\n          7\n        )\n      )\n    }\n\n    // Verificar tráfico orgánico\n    const previousMetrics = this.getLastMetrics()\n    if (previousMetrics && metrics.organicTraffic < previousMetrics.organicTraffic * 0.8) {\n      const drop = (\n        ((previousMetrics.organicTraffic - metrics.organicTraffic) /\n          previousMetrics.organicTraffic) *\n        100\n      ).toFixed(1)\n      alerts.push(\n        await this.createAlert(\n          'warning',\n          'content',\n          'Caída en tráfico orgánico',\n          `El tráfico orgánico ha caído un ${drop}% respecto al período anterior`,\n          [\n            'Analizar cambios en rankings',\n            'Revisar contenido actualizado',\n            'Verificar penalizaciones',\n          ],\n          'high',\n          8\n        )\n      )\n    }\n\n    if (alerts.length > 0) {\n      this.alerts.push(...alerts)\n    }\n  }\n\n  private async checkKeywordAlerts(keywords: KeywordMetrics[]): Promise<void> {\n    const alerts: SEOAlert[] = []\n\n    // Verificar caídas significativas en rankings\n    const significantDrops = keywords.filter(\n      k =>\n        k.previousPosition &&\n        k.position > k.previousPosition + this.config.alertThresholds.rankingDrop\n    )\n\n    if (significantDrops.length > 0) {\n      alerts.push(\n        await this.createAlert(\n          'warning',\n          'content',\n          'Caídas significativas en rankings',\n          `${significantDrops.length} keywords han caído más de ${this.config.alertThresholds.rankingDrop} posiciones`,\n          ['Analizar cambios en contenido', 'Revisar competencia', 'Optimizar páginas afectadas'],\n          'medium',\n          6\n        )\n      )\n    }\n\n    // Verificar keywords que salieron del top 10\n    const lostTopPositions = keywords.filter(\n      k => k.previousPosition && k.previousPosition <= 10 && k.position > 10\n    )\n\n    if (lostTopPositions.length > 0) {\n      alerts.push(\n        await this.createAlert(\n          'critical',\n          'content',\n          'Keywords perdieron posiciones top 10',\n          `${lostTopPositions.length} keywords importantes salieron del top 10`,\n          [\n            'Priorizar optimización de contenido',\n            'Analizar intención de búsqueda',\n            'Mejorar autoridad de página',\n          ],\n          'high',\n          9\n        )\n      )\n    }\n\n    if (alerts.length > 0) {\n      this.alerts.push(...alerts)\n    }\n  }\n\n  // Detectar problemas SEO avanzados\n  async detectSEOIssues(): Promise<SEOAlert[]> {\n    const alerts: SEOAlert[] = []\n\n    // Análisis técnico\n    const technicalIssues = await this.detectTechnicalIssues()\n    alerts.push(...technicalIssues)\n\n    // Análisis de contenido\n    const contentIssues = await this.detectContentIssues()\n    alerts.push(...contentIssues)\n\n    // Análisis de performance\n    const performanceIssues = await this.detectPerformanceIssues()\n    alerts.push(...performanceIssues)\n\n    // Análisis de mobile\n    const mobileIssues = await this.detectMobileIssues()\n    alerts.push(...mobileIssues)\n\n    // Agregar alertas al array del manager\n    this.alerts.push(...alerts)\n\n    return alerts\n  }\n\n  // Métodos de detección de issues específicos\n  private async detectTechnicalIssues(): Promise<SEOAlert[]> {\n    const issues: SEOAlert[] = []\n\n    // Simular detección de problemas técnicos\n    const technicalProblems = [\n      {\n        type: 'warning' as const,\n        category: 'technical' as const,\n        title: 'Páginas con tiempo de carga lento',\n        description: '3 páginas tienen un LCP superior a 4 segundos',\n        affectedPages: ['/products/pintura-premium', '/categories/herramientas', '/checkout'],\n        impact: 'high' as const,\n        effort: 'medium' as const,\n        priority: 8,\n        estimatedTrafficImpact: 15,\n        estimatedRevenueImpact: 5000,\n      },\n      {\n        type: 'info' as const,\n        category: 'schema' as const,\n        title: 'Schema markup faltante',\n        description: 'Algunas páginas de productos no tienen structured data',\n        affectedPages: ['/products/pintura-exterior', '/products/rodillos'],\n        impact: 'medium' as const,\n        effort: 'low' as const,\n        priority: 5,\n        estimatedTrafficImpact: 8,\n        estimatedRevenueImpact: 2000,\n      },\n    ]\n\n    for (const problem of technicalProblems) {\n      issues.push(await this.createAdvancedAlert(problem))\n    }\n\n    return issues\n  }\n\n  private async detectContentIssues(): Promise<SEOAlert[]> {\n    const issues: SEOAlert[] = []\n\n    const contentProblems = [\n      {\n        type: 'warning' as const,\n        category: 'content' as const,\n        title: 'Meta descriptions faltantes',\n        description: '5 páginas importantes no tienen meta description',\n        affectedPages: ['/about', '/shipping', '/returns', '/contact', '/blog'],\n        impact: 'medium' as const,\n        effort: 'low' as const,\n        priority: 6,\n        estimatedTrafficImpact: 10,\n        estimatedRevenueImpact: 1500,\n      },\n      {\n        type: 'info' as const,\n        category: 'content' as const,\n        title: 'Oportunidades de contenido',\n        description: 'Se detectaron 8 keywords con potencial de mejora',\n        affectedPages: [],\n        impact: 'high' as const,\n        effort: 'high' as const,\n        priority: 7,\n        estimatedTrafficImpact: 25,\n        estimatedRevenueImpact: 8000,\n      },\n    ]\n\n    for (const problem of contentProblems) {\n      issues.push(await this.createAdvancedAlert(problem))\n    }\n\n    return issues\n  }\n\n  private async detectPerformanceIssues(): Promise<SEOAlert[]> {\n    const issues: SEOAlert[] = []\n\n    const performanceProblems = [\n      {\n        type: 'critical' as const,\n        category: 'performance' as const,\n        title: 'Imágenes sin optimizar',\n        description: 'Múltiples imágenes grandes están afectando el LCP',\n        affectedPages: ['/products/pintura-interior', '/home'],\n        impact: 'high' as const,\n        effort: 'medium' as const,\n        priority: 9,\n        estimatedTrafficImpact: 20,\n        estimatedRevenueImpact: 6000,\n      },\n    ]\n\n    for (const problem of performanceProblems) {\n      issues.push(await this.createAdvancedAlert(problem))\n    }\n\n    return issues\n  }\n\n  private async detectMobileIssues(): Promise<SEOAlert[]> {\n    const issues: SEOAlert[] = []\n\n    const mobileProblems = [\n      {\n        type: 'warning' as const,\n        category: 'mobile' as const,\n        title: 'Problemas de usabilidad móvil',\n        description: 'Algunos elementos son demasiado pequeños para tocar en móvil',\n        affectedPages: ['/cart', '/checkout'],\n        impact: 'medium' as const,\n        effort: 'medium' as const,\n        priority: 6,\n        estimatedTrafficImpact: 12,\n        estimatedRevenueImpact: 3000,\n      },\n    ]\n\n    for (const problem of mobileProblems) {\n      issues.push(await this.createAdvancedAlert(problem))\n    }\n\n    return issues\n  }\n\n  private async createAlert(\n    type: 'critical' | 'warning' | 'info',\n    category: SEOAlert['category'],\n    title: string,\n    description: string,\n    recommendations: string[],\n    impact: 'high' | 'medium' | 'low',\n    priority: number\n  ): Promise<SEOAlert> {\n    return {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      category,\n      title,\n      description,\n      severity: priority,\n      timestamp: new Date(),\n      resolved: false,\n      recommendations,\n      impact,\n      effort: 'medium',\n      priority,\n      affectedPages: [],\n      estimatedTrafficImpact: 0,\n      estimatedRevenueImpact: 0,\n      relatedAlerts: [],\n      autoResolvable: false,\n      resolutionSteps: [],\n      lastOccurrence: new Date(),\n      frequency: 1,\n      tags: [category, impact],\n    }\n  }\n\n  private async createAdvancedAlert(problem: any): Promise<SEOAlert> {\n    return {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: problem.type,\n      category: problem.category,\n      title: problem.title,\n      description: problem.description,\n      severity: problem.priority,\n      timestamp: new Date(),\n      resolved: false,\n      recommendations: this.getRecommendationsForCategory(problem.category),\n      impact: problem.impact,\n      effort: problem.effort,\n      priority: problem.priority,\n      affectedPages: problem.affectedPages,\n      estimatedTrafficImpact: problem.estimatedTrafficImpact,\n      estimatedRevenueImpact: problem.estimatedRevenueImpact,\n      relatedAlerts: [],\n      autoResolvable: problem.category === 'schema' || problem.category === 'content',\n      resolutionSteps: this.getResolutionSteps(problem.category),\n      lastOccurrence: new Date(),\n      frequency: 1,\n      tags: [problem.category, problem.impact, problem.type],\n    }\n  }\n\n  private getRecommendationsForCategory(category: string): string[] {\n    const recommendations: Record<string, string[]> = {\n      technical: [\n        'Optimizar imágenes y recursos',\n        'Implementar lazy loading',\n        'Revisar recursos que bloquean el renderizado',\n        'Configurar compresión GZIP',\n      ],\n      content: [\n        'Crear contenido específico para keywords objetivo',\n        'Optimizar meta descriptions',\n        'Mejorar estructura de headings',\n        'Agregar contenido relevante y único',\n      ],\n      performance: [\n        'Optimizar Core Web Vitals',\n        'Reducir tiempo de carga',\n        'Implementar CDN',\n        'Optimizar JavaScript y CSS',\n      ],\n      mobile: [\n        'Mejorar experiencia móvil',\n        'Ajustar tamaños de elementos táctiles',\n        'Optimizar viewport',\n        'Implementar diseño responsive',\n      ],\n      schema: [\n        'Implementar structured data',\n        'Validar markup existente',\n        'Agregar schema de productos',\n        'Configurar breadcrumbs schema',\n      ],\n    }\n\n    return recommendations[category] || ['Revisar y optimizar según mejores prácticas SEO']\n  }\n\n  private getResolutionSteps(category: string): ResolutionStep[] {\n    const steps: Record<string, ResolutionStep[]> = {\n      technical: [\n        {\n          step: 1,\n          description: 'Analizar páginas afectadas',\n          action: 'Usar herramientas de análisis de performance',\n          estimatedTime: 30,\n          difficulty: 'easy',\n          requiredSkills: ['SEO básico'],\n        },\n        {\n          step: 2,\n          description: 'Optimizar recursos',\n          action: 'Comprimir imágenes y minificar CSS/JS',\n          estimatedTime: 120,\n          difficulty: 'medium',\n          requiredSkills: ['Desarrollo web', 'Optimización'],\n        },\n      ],\n      content: [\n        {\n          step: 1,\n          description: 'Auditar contenido existente',\n          action: 'Revisar meta tags y contenido de páginas',\n          estimatedTime: 60,\n          difficulty: 'easy',\n          requiredSkills: ['SEO', 'Redacción'],\n        },\n        {\n          step: 2,\n          description: 'Crear contenido optimizado',\n          action: 'Escribir meta descriptions y mejorar contenido',\n          estimatedTime: 180,\n          difficulty: 'medium',\n          requiredSkills: ['SEO', 'Redacción', 'Marketing'],\n        },\n      ],\n    }\n\n    return steps[category] || []\n  }\n\n  // ===================================\n  // GENERACIÓN DE REPORTES AVANZADOS\n  // ===================================\n\n  // Generar reporte SEO completo\n  async generateSEOReport(\n    period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'custom',\n    customDateRange?: { start: Date; end: Date }\n  ): Promise<SEOReport> {\n    const endDate = new Date()\n    const startDate = new Date()\n\n    if (customDateRange) {\n      startDate.setTime(customDateRange.start.getTime())\n      endDate.setTime(customDateRange.end.getTime())\n    } else {\n      switch (period) {\n        case 'daily':\n          startDate.setDate(endDate.getDate() - 1)\n          break\n        case 'weekly':\n          startDate.setDate(endDate.getDate() - 7)\n          break\n        case 'monthly':\n          startDate.setMonth(endDate.getMonth() - 1)\n          break\n        case 'quarterly':\n          startDate.setMonth(endDate.getMonth() - 3)\n          break\n        case 'yearly':\n          startDate.setFullYear(endDate.getFullYear() - 1)\n          break\n      }\n    }\n\n    const metrics = await this.collectAndProcessMetrics()\n    const keywords = await this.analyzeKeywords()\n    const alerts = await this.detectSEOIssues()\n    const competitors = this.competitors\n\n    const report: SEOReport = {\n      id: `report-${Date.now()}`,\n      period,\n      startDate,\n      endDate,\n      metrics: this.getLastMetrics() || metrics,\n      keywords,\n      alerts,\n      recommendations: await this.generateRecommendations(),\n      competitorAnalysis: competitors,\n      executiveSummary: await this.generateExecutiveSummary(),\n      performanceAnalysis: await this.generatePerformanceAnalysis(),\n      keywordAnalysis: await this.generateKeywordAnalysis(keywords),\n      technicalAnalysis: await this.generateTechnicalAnalysis(),\n      contentAnalysis: await this.generateContentAnalysis(),\n      competitiveAnalysis: await this.generateCompetitiveAnalysis(competitors),\n      actionPlan: await this.generateActionPlan(),\n      generatedBy: 'Enhanced SEO Analytics Manager',\n      generatedAt: new Date(),\n      version: '2.0.0',\n      exportFormats: ['pdf', 'excel', 'csv', 'json'],\n      scheduledDelivery: [],\n    }\n\n    this.reports.push(report)\n    await this.cacheMetrics(`report_${report.id}`, report)\n\n    logger.info(\n      LogLevel.INFO,\n      'SEO report generated',\n      {\n        reportId: report.id,\n        period,\n        overallScore: report.executiveSummary.overallScore,\n        alertsCount: alerts.length,\n        keywordsCount: keywords.length,\n      },\n      LogCategory.SEO\n    )\n\n    return report\n  }\n\n  // Métodos de generación de análisis específicos\n  private async generateExecutiveSummary(): Promise<ExecutiveSummary> {\n    const currentMetrics = this.getLastMetrics()\n    const overallScore = currentMetrics ? this.calculateOverallSEOScore(currentMetrics) : 85\n\n    return {\n      overallScore,\n      scoreChange: Math.floor(Math.random() * 10) - 5, // -5 a +5\n      keyAchievements: [\n        'CTR aumentó 12% en la última semana',\n        'Posición promedio mejoró 2.3 posiciones',\n        'Tráfico orgánico creció 8%',\n        'Core Web Vitals mejorados en 15%',\n      ],\n      majorConcerns: [\n        'Algunas páginas tienen LCP alto',\n        'Falta schema markup en productos',\n        'Meta descriptions incompletas',\n      ],\n      quickWins: [\n        'Agregar meta descriptions faltantes',\n        'Implementar schema de productos',\n        'Optimizar imágenes principales',\n        'Mejorar títulos de páginas',\n      ],\n      budgetRecommendations: [\n        {\n          category: 'Contenido',\n          description: 'Creación de contenido optimizado para keywords objetivo',\n          estimatedCost: 15000,\n          expectedROI: 3.5,\n          timeframe: '3 meses',\n        },\n        {\n          category: 'Técnico',\n          description: 'Optimización de performance y Core Web Vitals',\n          estimatedCost: 25000,\n          expectedROI: 2.8,\n          timeframe: '2 meses',\n        },\n      ],\n    }\n  }\n\n  private async generatePerformanceAnalysis(): Promise<PerformanceAnalysis> {\n    const currentMetrics = this.getLastMetrics()\n    const cwv = currentMetrics?.coreWebVitals\n\n    return {\n      coreWebVitalsScore: cwv?.score === 'good' ? 90 : cwv?.score === 'needs-improvement' ? 70 : 40,\n      coreWebVitalsChange: Math.floor(Math.random() * 20) - 10,\n      pageSpeedScore: Math.floor(Math.random() * 30) + 70,\n      pageSpeedChange: Math.floor(Math.random() * 10) - 5,\n      mobileScore: Math.floor(Math.random() * 20) + 80,\n      mobileChange: Math.floor(Math.random() * 8) - 4,\n      slowestPages: [\n        {\n          url: '/products/pintura-premium',\n          lcp: 4200,\n          fid: 150,\n          cls: 0.15,\n          speedIndex: 3800,\n          totalBlockingTime: 300,\n          issues: ['Imágenes grandes sin optimizar', 'JavaScript bloqueante'],\n        },\n        {\n          url: '/checkout',\n          lcp: 3800,\n          fid: 120,\n          cls: 0.12,\n          speedIndex: 3500,\n          totalBlockingTime: 250,\n          issues: ['Formularios complejos', 'Validaciones síncronas'],\n        },\n      ],\n      performanceRecommendations: [\n        'Implementar lazy loading para imágenes',\n        'Optimizar JavaScript crítico',\n        'Usar CDN para recursos estáticos',\n        'Implementar service workers',\n      ],\n    }\n  }\n\n  private async generateKeywordAnalysis(keywords: KeywordMetrics[]): Promise<KeywordAnalysis> {\n    const totalKeywords = keywords.length\n    const averagePosition = keywords.reduce((sum, k) => sum + k.position, 0) / totalKeywords\n\n    return {\n      totalKeywords,\n      keywordsChange: Math.floor(Math.random() * 20) - 10,\n      averagePosition: Number(averagePosition.toFixed(1)),\n      positionChange: Math.random() * 4 - 2,\n      topGainers: keywords\n        .filter(k => k.trend === 'up')\n        .sort(\n          (a, b) =>\n            (a.previousPosition || 50) - a.position - ((b.previousPosition || 50) - b.position)\n        )\n        .slice(0, 5),\n      topLosers: keywords\n        .filter(k => k.trend === 'down')\n        .sort(\n          (a, b) =>\n            b.position - (b.previousPosition || 1) - (a.position - (a.previousPosition || 1))\n        )\n        .slice(0, 5),\n      newKeywords: keywords.filter(k => !k.previousPosition).slice(0, 3),\n      lostKeywords: [], // Simulated\n      opportunityKeywords: keywords\n        .filter(k => k.position > 10 && k.position <= 20)\n        .sort((a, b) => b.searchVolume - a.searchVolume)\n        .slice(0, 10),\n    }\n  }\n\n  private async generateTechnicalAnalysis(): Promise<TechnicalAnalysis> {\n    return {\n      crawlabilityScore: Math.floor(Math.random() * 20) + 80,\n      indexabilityScore: Math.floor(Math.random() * 15) + 85,\n      structuredDataScore: Math.floor(Math.random() * 25) + 75,\n      mobileUsabilityScore: Math.floor(Math.random() * 20) + 80,\n      securityScore: Math.floor(Math.random() * 10) + 90,\n      technicalIssues: [\n        {\n          type: 'Missing meta descriptions',\n          severity: 'medium',\n          count: 5,\n          affectedPages: ['/about', '/contact', '/shipping'],\n          description: 'Páginas importantes sin meta description',\n          fix: 'Agregar meta descriptions únicas y descriptivas',\n        },\n        {\n          type: 'Large images',\n          severity: 'high',\n          count: 12,\n          affectedPages: ['/products/pintura-interior', '/home'],\n          description: 'Imágenes grandes que afectan el LCP',\n          fix: 'Optimizar y comprimir imágenes',\n        },\n      ],\n      improvements: [\n        'Implementar schema markup en todas las páginas de productos',\n        'Optimizar robots.txt para mejor crawling',\n        'Agregar breadcrumbs estructurados',\n        'Mejorar estructura de URLs',\n      ],\n    }\n  }\n\n  private async generateContentAnalysis(): Promise<ContentAnalysis> {\n    return {\n      totalPages: 150,\n      indexedPages: 142,\n      duplicateContent: 3,\n      thinContent: 8,\n      missingMetaTags: 12,\n      contentQualityScore: Math.floor(Math.random() * 20) + 75,\n      topPerformingContent: [\n        {\n          url: '/blog/como-elegir-pintura-interior',\n          title: 'Cómo elegir la pintura interior perfecta',\n          wordCount: 1500,\n          readabilityScore: 85,\n          organicTraffic: 2500,\n          socialShares: 150,\n          backlinks: 25,\n          conversionRate: 3.2,\n        },\n        {\n          url: '/guia/herramientas-pintura',\n          title: 'Guía completa de herramientas de pintura',\n          wordCount: 2200,\n          readabilityScore: 78,\n          organicTraffic: 1800,\n          socialShares: 89,\n          backlinks: 18,\n          conversionRate: 2.8,\n        },\n      ],\n      contentGaps: [\n        'Guías de aplicación de pintura',\n        'Comparativas de marcas',\n        'Tendencias en decoración',\n        'Mantenimiento de herramientas',\n      ],\n    }\n  }\n\n  private async generateCompetitiveAnalysis(\n    competitors: CompetitorAnalysis[]\n  ): Promise<CompetitiveAnalysis> {\n    return {\n      marketShare: Math.floor(Math.random() * 15) + 10, // 10-25%\n      visibilityScore: Math.floor(Math.random() * 30) + 60, // 60-90\n      competitorComparison: competitors.slice(0, 3).map(comp => ({\n        competitor: comp.competitor,\n        ourPosition: Math.floor(Math.random() * 10) + 5,\n        theirPosition: Math.floor(Math.random() * 8) + 3,\n        gap: Math.floor(Math.random() * 5) + 1,\n        opportunity: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\n      })),\n      opportunityAnalysis: [\n        {\n          type: 'keyword',\n          description: 'Keywords de cola larga con baja competencia',\n          potential: 85,\n          difficulty: 35,\n          priority: 'high',\n        },\n        {\n          type: 'content',\n          description: 'Gaps de contenido en guías técnicas',\n          potential: 70,\n          difficulty: 50,\n          priority: 'medium',\n        },\n        {\n          type: 'backlink',\n          description: 'Oportunidades de enlaces en sitios de arquitectura',\n          potential: 60,\n          difficulty: 70,\n          priority: 'medium',\n        },\n      ],\n    }\n  }\n\n  private async generateActionPlan(): Promise<ActionPlan> {\n    return {\n      quickWins: [\n        {\n          id: 'qw-1',\n          title: 'Agregar meta descriptions faltantes',\n          description: 'Completar meta descriptions en 5 páginas importantes',\n          category: 'Content',\n          priority: 'high',\n          effort: 'low',\n          impact: 'medium',\n          estimatedTime: 2,\n          dependencies: [],\n          kpis: ['CTR', 'Impresiones'],\n        },\n        {\n          id: 'qw-2',\n          title: 'Implementar schema de productos',\n          description: 'Agregar structured data a páginas de productos',\n          category: 'Technical',\n          priority: 'high',\n          effort: 'low',\n          impact: 'high',\n          estimatedTime: 3,\n          dependencies: [],\n          kpis: ['Rich snippets', 'CTR'],\n        },\n      ],\n      shortTerm: [\n        {\n          id: 'st-1',\n          title: 'Optimizar Core Web Vitals',\n          description: 'Mejorar LCP, FID y CLS en páginas principales',\n          category: 'Performance',\n          priority: 'high',\n          effort: 'medium',\n          impact: 'high',\n          estimatedTime: 14,\n          dependencies: ['qw-2'],\n          kpis: ['LCP', 'FID', 'CLS', 'Page Speed Score'],\n        },\n      ],\n      longTerm: [\n        {\n          id: 'lt-1',\n          title: 'Estrategia de contenido SEO',\n          description: 'Crear plan de contenido para keywords objetivo',\n          category: 'Content',\n          priority: 'medium',\n          effort: 'high',\n          impact: 'high',\n          estimatedTime: 90,\n          dependencies: ['st-1'],\n          kpis: ['Organic Traffic', 'Keyword Rankings', 'Conversions'],\n        },\n      ],\n      ongoing: [\n        {\n          id: 'og-1',\n          title: 'Monitoreo y optimización continua',\n          description: 'Seguimiento mensual de métricas y ajustes',\n          category: 'Monitoring',\n          priority: 'medium',\n          effort: 'low',\n          impact: 'medium',\n          estimatedTime: 30, // mensual\n          dependencies: [],\n          kpis: ['Overall SEO Score', 'Organic Growth'],\n        },\n      ],\n    }\n  }\n\n  private async generateRecommendations(): Promise<SEORecommendation[]> {\n    return [\n      {\n        id: 'rec-1',\n        category: 'performance',\n        title: 'Optimizar Core Web Vitals',\n        description: 'Mejorar LCP, FID y CLS para mejor experiencia de usuario y rankings',\n        priority: 'high',\n        impact: 'high',\n        effort: 'medium',\n        estimatedTimeToImplement: 14,\n        estimatedTrafficIncrease: 15,\n        estimatedRevenueIncrease: 25000,\n        implementationSteps: [\n          'Auditar páginas con peor performance',\n          'Optimizar imágenes y recursos',\n          'Implementar lazy loading',\n          'Optimizar JavaScript crítico',\n        ],\n        requiredResources: ['Desarrollador frontend', 'Herramientas de optimización'],\n        kpis: ['LCP', 'FID', 'CLS', 'Page Speed Score'],\n        relatedRecommendations: ['rec-2'],\n        status: 'pending',\n        notes: [],\n      },\n      {\n        id: 'rec-2',\n        category: 'technical',\n        title: 'Implementar schema markup completo',\n        description: 'Agregar structured data a todas las páginas de productos y categorías',\n        priority: 'high',\n        impact: 'medium',\n        effort: 'low',\n        estimatedTimeToImplement: 7,\n        estimatedTrafficIncrease: 8,\n        estimatedRevenueIncrease: 12000,\n        implementationSteps: [\n          'Definir schemas necesarios',\n          'Implementar en templates',\n          'Validar con herramientas de Google',\n          'Monitorear rich snippets',\n        ],\n        requiredResources: ['Desarrollador', 'Herramientas de validación'],\n        kpis: ['Rich snippets', 'CTR', 'Impresiones'],\n        relatedRecommendations: ['rec-1'],\n        status: 'pending',\n        notes: [],\n      },\n    ]\n  }\n\n  // ===================================\n  // MÉTODOS DE UTILIDAD Y CACHE\n  // ===================================\n\n  private async cacheMetrics(key: string, data: any): Promise<void> {\n    try {\n      const cacheKey = `seo_analytics:${key}`\n      const cacheData = { data, timestamp: Date.now() }\n\n      // Cache en Redis si está disponible\n      if (this.redis) {\n        await this.redis.setex(cacheKey, this.config.cache.ttl, JSON.stringify(cacheData))\n      }\n\n      // Cache en memoria\n      this.cache.set(cacheKey, cacheData)\n\n      // Limpiar cache si excede el tamaño máximo\n      if (this.cache.size > this.config.cache.maxSize) {\n        const oldestKey = this.cache.keys().next().value\n        this.cache.delete(oldestKey)\n      }\n    } catch (error) {\n      logger.warn(LogLevel.WARN, 'Failed to cache SEO metrics', { key }, LogCategory.SEO)\n    }\n  }\n\n  private async getCachedMetrics(key: string): Promise<any> {\n    try {\n      const cacheKey = `seo_analytics:${key}`\n\n      // Intentar Redis primero\n      if (this.redis) {\n        const cached = await this.redis.get(cacheKey)\n        if (cached) {\n          const parsed = JSON.parse(cached)\n          if (Date.now() - parsed.timestamp < this.config.cache.ttl * 1000) {\n            return parsed.data\n          }\n        }\n      }\n\n      // Fallback a cache en memoria\n      const memoryCached = this.cache.get(cacheKey)\n      if (memoryCached) {\n        if (Date.now() - memoryCached.timestamp < this.config.cache.ttl * 1000) {\n          return memoryCached.data\n        } else {\n          this.cache.delete(cacheKey)\n        }\n      }\n\n      return null\n    } catch (error) {\n      logger.warn(LogLevel.WARN, 'Failed to get cached SEO metrics', { key }, LogCategory.SEO)\n      return null\n    }\n  }\n\n  // Obtener métricas históricas\n  getHistoricalMetrics(days: number = 30): SEOMetrics[] {\n    const cutoffDate = new Date()\n    cutoffDate.setDate(cutoffDate.getDate() - days)\n\n    return this.metrics.filter(metric => metric.timestamp >= cutoffDate)\n  }\n\n  // Obtener últimas métricas\n  getLastMetrics(): SEOMetrics | null {\n    return this.metrics.length > 0 ? this.metrics[this.metrics.length - 1] : null\n  }\n\n  // Calcular score SEO general mejorado\n  private calculateOverallSEOScore(metrics: SEOMetrics): number {\n    let score = 0\n    let factors = 0\n\n    // Core Web Vitals (30%)\n    if (metrics.coreWebVitals.score === 'good') {\n      score += 30\n    } else if (metrics.coreWebVitals.score === 'needs-improvement') {\n      score += 20\n    } else {\n      score += 10\n    }\n    factors += 30\n\n    // Indexación (20%)\n    score += (metrics.indexationStatus.indexationRate / 100) * 20\n    factors += 20\n\n    // CTR (15%)\n    const normalizedCTR = Math.min(metrics.ctr / 10, 1) // Normalizar a 0-1\n    score += normalizedCTR * 15\n    factors += 15\n\n    // Posición promedio (15%)\n    const positionScore = Math.max(0, (50 - metrics.avgPosition) / 50)\n    score += positionScore * 15\n    factors += 15\n\n    // Tráfico orgánico (10%)\n    const trafficScore = Math.min(metrics.organicTraffic / 10000, 1) // Normalizar\n    score += trafficScore * 10\n    factors += 10\n\n    // Alertas críticas (10%)\n    const criticalAlerts = this.alerts.filter(a => a.type === 'critical' && !a.resolved).length\n    const alertPenalty = Math.min(criticalAlerts * 2, 10)\n    score += Math.max(0, 10 - alertPenalty)\n    factors += 10\n\n    return Math.round(score)\n  }\n\n  // Obtener keywords por tendencia\n  getKeywordsByTrend(trend: 'up' | 'down' | 'stable'): KeywordMetrics[] {\n    return this.keywords.filter(keyword => keyword.trend === trend)\n  }\n\n  // Obtener alertas por tipo\n  getAlertsByType(type: 'critical' | 'warning' | 'info'): SEOAlert[] {\n    return this.alerts.filter(alert => alert.type === type && !alert.resolved)\n  }\n\n  // Obtener alertas no resueltas\n  getUnresolvedAlerts(): SEOAlert[] {\n    return this.alerts.filter(alert => !alert.resolved)\n  }\n\n  // Resolver alerta mejorado\n  async resolveAlert(alertId: string, notes?: string): Promise<boolean> {\n    const alert = this.alerts.find(a => a.id === alertId)\n    if (alert) {\n      alert.resolved = true\n      if (notes) {\n        if (!alert.notes) {\n          alert.notes = []\n        }\n        alert.notes.push(notes)\n      }\n\n      await this.cacheMetrics('alerts', this.alerts)\n      this.notifyListeners({ type: 'alert_resolved', data: alert })\n\n      logger.info(\n        LogLevel.INFO,\n        'SEO alert resolved',\n        {\n          alertId,\n          title: alert.title,\n          category: alert.category,\n        },\n        LogCategory.SEO\n      )\n\n      return true\n    }\n    return false\n  }\n\n  // Obtener estadísticas de keywords\n  getKeywordStats(): {\n    total: number\n    topPositions: number\n    improvements: number\n    declines: number\n    averagePosition: number\n  } {\n    const total = this.keywords.length\n    const topPositions = this.keywords.filter(k => k.position <= 10).length\n    const improvements = this.keywords.filter(k => k.trend === 'up').length\n    const declines = this.keywords.filter(k => k.trend === 'down').length\n    const averagePosition =\n      total > 0 ? this.keywords.reduce((sum, k) => sum + k.position, 0) / total : 0\n\n    return {\n      total,\n      topPositions,\n      improvements,\n      declines,\n      averagePosition: Number(averagePosition.toFixed(1)),\n    }\n  }\n\n  // Obtener métricas de performance\n  getPerformanceMetrics(): {\n    coreWebVitalsScore: string\n    averageLCP: number\n    averageFID: number\n    averageCLS: number\n    performanceIssues: number\n  } {\n    const lastMetrics = this.getLastMetrics()\n    if (!lastMetrics) {\n      return {\n        coreWebVitalsScore: 'unknown',\n        averageLCP: 0,\n        averageFID: 0,\n        averageCLS: 0,\n        performanceIssues: 0,\n      }\n    }\n\n    const performanceIssues = this.alerts.filter(\n      a => a.category === 'performance' && !a.resolved\n    ).length\n\n    return {\n      coreWebVitalsScore: lastMetrics.coreWebVitals.score,\n      averageLCP: lastMetrics.coreWebVitals.lcp,\n      averageFID: lastMetrics.coreWebVitals.fid,\n      averageCLS: lastMetrics.coreWebVitals.cls,\n      performanceIssues,\n    }\n  }\n\n  // Obtener resumen de competidores\n  getCompetitorSummary(): {\n    totalCompetitors: number\n    averageDomainAuthority: number\n    keywordOpportunities: number\n    contentGaps: number\n  } {\n    const totalCompetitors = this.competitors.length\n    const averageDomainAuthority =\n      totalCompetitors > 0\n        ? this.competitors.reduce((sum, c) => sum + c.domainAuthority, 0) / totalCompetitors\n        : 0\n\n    const keywordOpportunities = this.competitors.reduce((sum, c) => sum + c.keywordGaps.length, 0)\n    const contentGaps = this.competitors.reduce((sum, c) => sum + c.contentGaps.length, 0)\n\n    return {\n      totalCompetitors,\n      averageDomainAuthority: Number(averageDomainAuthority.toFixed(1)),\n      keywordOpportunities,\n      contentGaps,\n    }\n  }\n\n  // Exportar datos para dashboard\n  exportDashboardData(): {\n    overview: any\n    keywords: KeywordMetrics[]\n    alerts: SEOAlert[]\n    performance: any\n    competitors: any\n    reports: SEOReport[]\n  } {\n    const lastMetrics = this.getLastMetrics()\n\n    return {\n      overview: {\n        overallScore: lastMetrics ? this.calculateOverallSEOScore(lastMetrics) : 0,\n        organicTraffic: lastMetrics?.organicTraffic || 0,\n        averagePosition: this.getKeywordStats().averagePosition,\n        indexationRate: lastMetrics?.indexationStatus.indexationRate || 0,\n        coreWebVitalsScore: lastMetrics?.coreWebVitals.score || 'unknown',\n        unresolvedAlerts: this.getUnresolvedAlerts().length,\n        lastUpdated: lastMetrics?.timestamp || new Date(),\n      },\n      keywords: this.keywords.slice(0, 20), // Top 20 keywords\n      alerts: this.getUnresolvedAlerts().slice(0, 10), // Top 10 alerts\n      performance: this.getPerformanceMetrics(),\n      competitors: this.getCompetitorSummary(),\n      reports: this.reports.slice(-5), // Últimos 5 reportes\n    }\n  }\n\n  // Limpiar datos antiguos\n  async cleanupOldData(): Promise<void> {\n    const now = new Date()\n\n    // Limpiar métricas antiguas\n    const metricsRetentionDate = new Date(\n      now.getTime() - this.config.dataRetention.metricsRetentionDays * 24 * 60 * 60 * 1000\n    )\n    this.metrics = this.metrics.filter(m => m.timestamp >= metricsRetentionDate)\n\n    // Limpiar alertas antiguas\n    const alertsRetentionDate = new Date(\n      now.getTime() - this.config.dataRetention.alertsRetentionDays * 24 * 60 * 60 * 1000\n    )\n    this.alerts = this.alerts.filter(a => a.timestamp >= alertsRetentionDate)\n\n    // Limpiar reportes antiguos\n    const reportsRetentionDate = new Date(\n      now.getTime() - this.config.dataRetention.reportsRetentionDays * 24 * 60 * 60 * 1000\n    )\n    this.reports = this.reports.filter(r => r.generatedAt >= reportsRetentionDate)\n\n    logger.info(\n      LogLevel.INFO,\n      'SEO analytics data cleanup completed',\n      {\n        metricsCount: this.metrics.length,\n        alertsCount: this.alerts.length,\n        reportsCount: this.reports.length,\n      },\n      LogCategory.SEO\n    )\n  }\n\n  // Suscribirse a actualizaciones\n  subscribe(callback: (data: any) => void): void {\n    this.listeners.push(callback)\n  }\n\n  // Desuscribirse de actualizaciones\n  unsubscribe(callback: (data: any) => void): void {\n    const index = this.listeners.indexOf(callback)\n    if (index > -1) {\n      this.listeners.splice(index, 1)\n    }\n  }\n\n  // Notificar a todos los listeners\n  private notifyListeners(data: any): void {\n    this.listeners.forEach(callback => {\n      try {\n        callback(data)\n      } catch (error) {\n        logger.error(\n          LogLevel.ERROR,\n          'Error in SEO analytics listener',\n          error as Error,\n          LogCategory.SEO\n        )\n      }\n    })\n  }\n\n  // Destructor para limpiar intervalos\n  destroy(): void {\n    if (this.metricsInterval) {\n      clearInterval(this.metricsInterval)\n      this.metricsInterval = null\n    }\n    if (this.keywordInterval) {\n      clearInterval(this.keywordInterval)\n      this.keywordInterval = null\n    }\n    if (this.competitorInterval) {\n      clearInterval(this.competitorInterval)\n      this.competitorInterval = null\n    }\n    if (this.alertInterval) {\n      clearInterval(this.alertInterval)\n      this.alertInterval = null\n    }\n\n    this.listeners = []\n    this.cache.clear()\n\n    logger.info(LogLevel.INFO, 'Enhanced SEO Analytics Manager destroyed', {}, LogCategory.SEO)\n  }\n}\n\n// ===================================\n// INSTANCIAS Y EXPORTACIONES\n// ===================================\n\n// Instancia singleton mejorada\nexport const enhancedSEOAnalyticsManager = EnhancedSEOAnalyticsManager.getInstance()\n\n// Mantener compatibilidad con la instancia anterior\nexport const seoAnalyticsManager = enhancedSEOAnalyticsManager\n\n// Exportar configuración por defecto\nexport { DEFAULT_SEO_CONFIG }\n\n// Exportar tipos principales\nexport type {\n  SEOAnalyticsConfig,\n  SEOMetrics,\n  KeywordMetrics,\n  CompetitorAnalysis,\n  SEOAlert,\n  SEOReport,\n  SEORecommendation,\n  CoreWebVitals,\n  IndexationStatus,\n  TechnicalSEOMetrics,\n  PageMetrics,\n  DeviceMetrics,\n  GeographicMetrics,\n  CompetitorKeywordData,\n  SeasonalData,\n  CompetitorPage,\n  ContentGap,\n  BacklinkGap,\n  SocialMetrics,\n  ResolutionStep,\n  ExecutiveSummary,\n  PerformanceAnalysis,\n  KeywordAnalysis,\n  TechnicalAnalysis,\n  ContentAnalysis,\n  CompetitiveAnalysis,\n  ActionPlan,\n  ActionItem,\n  ScheduledDelivery,\n  BudgetRecommendation,\n  PagePerformance,\n  TechnicalIssue,\n  ContentMetrics,\n  CompetitorComparison,\n  OpportunityAnalysis,\n}\n"],"names":["DEFAULT_SEO_CONFIG","EnhancedSEOAnalyticsManager","enhancedSEOAnalyticsManager","seoAnalyticsManager","enableRealTimeTracking","enableKeywordTracking","enableCompetitorAnalysis","enableAutomatedReports","enableAlerts","metricsUpdateInterval","keywordUpdateInterval","competitorUpdateInterval","alertCheckInterval","reportSchedule","daily","enabled","time","recipients","weekly","day","monthly","alertThresholds","seoScoreDrop","rankingDrop","trafficDrop","performanceDrop","criticalIssuesIncrease","conversionRateDrop","integrations","googleSearchConsole","googleAnalytics","semrush","ahrefs","screaminFrog","cache","ttl","maxSize","dataRetention","metricsRetentionDays","alertsRetentionDays","reportsRetentionDays","config","metrics","keywords","alerts","reports","competitors","listeners","Map","metricsInterval","keywordInterval","competitorInterval","alertInterval","initializeRedis","startTracking","logger","info","LogLevel","INFO","realTimeTracking","keywordTracking","competitorAnalysis","automatedReports","LogCategory","SEO","getInstance","instance","redis","getRedisClient","error","warn","WARN","setInterval","collectAndProcessMetrics","updateKeywordRankings","updateCompetitorAnalysis","checkAlerts","coreWebVitals","collectCoreWebVitals","indexationStatus","analyzeIndexationStatus","technicalSEO","evaluateTechnicalSEO","performanceMetrics","realTimePerformanceMonitor","getCurrentMetrics","trafficMetrics","collectTrafficMetrics","timestamp","Date","push","cacheMetrics","checkMetricsThresholds","notifyListeners","type","data","coreWebVitalsScore","score","indexationRate","organicTraffic","ERROR","Promise","resolve","webVitals","length","latest","lcp","fid","cls","fcp","ttfb","inp","Math","random","speedIndex","totalBlockingTime","largestContentfulPaintElement","cumulativeLayoutShiftSources","lcpScore","fidScore","clsScore","scores","every","s","some","baseTraffic","floor","pageViews","uniqueVisitors","bounceRate","avgSessionDuration","searchImpressions","searchClicks","avgPosition","ctr","conversionRate","revenueFromOrganic","topLandingPages","getTopLandingPages","topExitPages","getTopExitPages","deviceBreakdown","getDeviceBreakdown","geographicData","getGeographicData","pages","map","url","uniquePageViews","avgTimeOnPage","exitRate","conversions","revenue","desktop","sessions","mobile","tablet","locations","country","region","city","location","users","totalPages","indexedPages","notIndexedPages","Number","toFixed","crawlErrors","sitemapStatus","lastCrawlDate","now","mobileUsability","pagespeedScore","httpsUsage","structuredDataErrors","metaTagsOptimization","internalLinkingScore","imageOptimization","canonicalIssues","collectMetrics","analyzeKeywords","checkKeywordAlerts","totalKeywords","averagePosition","reduce","sum","k","position","sampleKeywords","keyword","intent","volume","all","previousPosition","clicks","impressions","searchVolume","difficulty","encodeURIComponent","trend","searchEngine","device","competitorRankings","getCompetitorRankings","relatedKeywords","getRelatedKeywords","seasonalTrends","getSeasonalTrends","costPerClick","lastUpdated","domain","title","description","relatedMap","Array","from","_","month","competition","cpc","analyzeCompetitors","competitorsAnalyzed","competitorDomains","organicKeywords","competitor","split","backlinks","domainAuthority","commonKeywords","getCommonKeywords","keywordGaps","getKeywordGaps","pageAuthority","trustFlow","citationFlow","referringDomains","organicCost","paidKeywords","paidTraffic","paidCost","topPages","getCompetitorTopPages","contentGaps","getContentGaps","backlinksGaps","getBacklinkGaps","socialMetrics","getSocialMetrics","technicalSEOScore","lastAnalyzed","pop","traffic","socialShares","topic","opportunity","linkType","anchorText","facebook","likes","shares","comments","twitter","followers","tweets","retweets","linkedin","posts","engagement","instagram","detectSEOIssues","criticalAlerts","filter","alert","advancedAlertingEngine","createAlert","AlertType","PERFORMANCE","AlertSeverity","CRITICAL","category","severity","recommendations","previousMetrics","getLastMetrics","drop","significantDrops","lostTopPositions","technicalIssues","detectTechnicalIssues","contentIssues","detectContentIssues","performanceIssues","detectPerformanceIssues","mobileIssues","detectMobileIssues","issues","technicalProblems","affectedPages","impact","effort","priority","estimatedTrafficImpact","estimatedRevenueImpact","problem","createAdvancedAlert","contentProblems","performanceProblems","mobileProblems","id","toString","substr","resolved","relatedAlerts","autoResolvable","resolutionSteps","lastOccurrence","frequency","tags","getRecommendationsForCategory","getResolutionSteps","technical","content","performance","schema","steps","step","action","estimatedTime","requiredSkills","generateSEOReport","period","customDateRange","endDate","startDate","setTime","start","getTime","end","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","report","generateRecommendations","executiveSummary","generateExecutiveSummary","performanceAnalysis","generatePerformanceAnalysis","keywordAnalysis","generateKeywordAnalysis","technicalAnalysis","generateTechnicalAnalysis","contentAnalysis","generateContentAnalysis","competitiveAnalysis","generateCompetitiveAnalysis","actionPlan","generateActionPlan","generatedBy","generatedAt","version","exportFormats","scheduledDelivery","reportId","overallScore","alertsCount","keywordsCount","currentMetrics","calculateOverallSEOScore","scoreChange","keyAchievements","majorConcerns","quickWins","budgetRecommendations","estimatedCost","expectedROI","timeframe","cwv","coreWebVitalsChange","pageSpeedScore","pageSpeedChange","mobileScore","mobileChange","slowestPages","performanceRecommendations","keywordsChange","positionChange","topGainers","sort","a","b","slice","topLosers","newKeywords","lostKeywords","opportunityKeywords","crawlabilityScore","indexabilityScore","structuredDataScore","mobileUsabilityScore","securityScore","count","fix","improvements","duplicateContent","thinContent","missingMetaTags","contentQualityScore","topPerformingContent","wordCount","readabilityScore","marketShare","visibilityScore","competitorComparison","comp","ourPosition","theirPosition","gap","opportunityAnalysis","potential","dependencies","kpis","shortTerm","longTerm","ongoing","estimatedTimeToImplement","estimatedTrafficIncrease","estimatedRevenueIncrease","implementationSteps","requiredResources","relatedRecommendations","status","notes","key","cacheKey","cacheData","setex","JSON","stringify","set","size","oldestKey","keys","next","value","delete","getCachedMetrics","cached","get","parsed","parse","memoryCached","getHistoricalMetrics","days","cutoffDate","metric","factors","normalizedCTR","min","positionScore","max","trafficScore","alertPenalty","round","getKeywordsByTrend","getAlertsByType","getUnresolvedAlerts","resolveAlert","alertId","find","getKeywordStats","total","topPositions","declines","getPerformanceMetrics","lastMetrics","averageLCP","averageFID","averageCLS","getCompetitorSummary","totalCompetitors","averageDomainAuthority","c","keywordOpportunities","exportDashboardData","overview","unresolvedAlerts","cleanupOldData","metricsRetentionDate","m","alertsRetentionDate","reportsRetentionDate","r","metricsCount","reportsCount","subscribe","callback","unsubscribe","index","indexOf","splice","forEach","destroy","clearInterval","clear"],"mappings":"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"}