53768e364657d9f3ba9410dc325777f8
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Checkbox () {
        return Checkbox;
    },
    get CheckboxGroup () {
        return CheckboxGroup;
    },
    get SwitchCheckbox () {
        return SwitchCheckbox;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactcheckbox = /*#__PURE__*/ _interop_require_wildcard(require("@radix-ui/react-checkbox"));
const _optimizedimports = require("../../lib/optimized-imports");
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const checkboxVariants = (0, _classvarianceauthority.cva)('peer h-4 w-4 shrink-0 rounded-sm border border-gray-300 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200', {
    variants: {
        variant: {
            default: 'data-[state=checked]:bg-primary data-[state=checked]:text-white data-[state=checked]:border-primary',
            destructive: 'data-[state=checked]:bg-red-600 data-[state=checked]:text-white data-[state=checked]:border-red-600',
            success: 'data-[state=checked]:bg-green-600 data-[state=checked]:text-white data-[state=checked]:border-green-600',
            warning: 'data-[state=checked]:bg-yellow-600 data-[state=checked]:text-white data-[state=checked]:border-yellow-600'
        },
        size: {
            sm: 'h-3 w-3',
            md: 'h-4 w-4',
            lg: 'h-5 w-5'
        }
    },
    defaultVariants: {
        variant: 'default',
        size: 'md'
    }
});
const Checkbox = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, label, description, error, indeterminate, id, ...props }, ref)=>{
    const generatedId = _react.useId();
    const checkboxId = id || generatedId;
    const hasError = !!error;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-2",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-start space-x-2",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Root, {
                        ref: ref,
                        id: checkboxId,
                        className: (0, _utils.cn)(checkboxVariants({
                            variant: hasError ? 'destructive' : variant,
                            size
                        }), hasError && 'border-red-500', className),
                        ...props,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Indicator, {
                            className: (0, _utils.cn)('flex items-center justify-center text-current'),
                            children: indeterminate ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedimports.Minus, {
                                className: "h-3 w-3"
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedimports.Check, {
                                className: "h-3 w-3"
                            })
                        })
                    }),
                    (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "grid gap-1.5 leading-none",
                        children: [
                            label && /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                                htmlFor: checkboxId,
                                className: (0, _utils.cn)('text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer', hasError && 'text-red-600'),
                                children: [
                                    label,
                                    props.required && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-red-500 ml-1",
                                        children: "*"
                                    })
                                ]
                            }),
                            description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: (0, _utils.cn)('text-xs text-gray-600', hasError && 'text-red-500'),
                                children: description
                            })
                        ]
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: "text-xs text-red-600 mt-1",
                children: error instanceof Error ? error.message : error?.toString() || 'Error desconocido'
            })
        ]
    });
});
Checkbox.displayName = _reactcheckbox.Root.displayName;
function CheckboxGroup({ children, label, description, error, orientation = 'vertical', className }) {
    const hasError = !!error;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: (0, _utils.cn)('space-y-3', className),
        children: [
            (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-1",
                children: [
                    label && /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        className: (0, _utils.cn)('text-sm font-medium text-gray-900', hasError && 'text-red-600'),
                        children: label
                    }),
                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: (0, _utils.cn)('text-xs text-gray-600', hasError && 'text-red-500'),
                        children: description
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: (0, _utils.cn)('space-y-2', orientation === 'horizontal' && 'flex flex-wrap gap-4 space-y-0'),
                children: children
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: "text-xs text-red-600",
                children: error instanceof Error ? error.message : error?.toString() || 'Error desconocido'
            })
        ]
    });
}
const SwitchCheckbox = /*#__PURE__*/ _react.forwardRef(({ className, switchStyle = true, size = 'md', ...props }, ref)=>{
    if (!switchStyle) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Checkbox, {
            ref: ref,
            className: className,
            size: size,
            ...props
        });
    }
    const sizeClasses = {
        sm: 'h-4 w-7',
        md: 'h-5 w-9',
        lg: 'h-6 w-11'
    };
    const thumbSizeClasses = {
        sm: 'h-3 w-3 data-[state=checked]:translate-x-3',
        md: 'h-4 w-4 data-[state=checked]:translate-x-4',
        lg: 'h-5 w-5 data-[state=checked]:translate-x-5'
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Root, {
        ref: ref,
        className: (0, _utils.cn)('peer inline-flex shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-gray-200', sizeClasses[size || 'md'], className),
        ...props,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Indicator, {
            className: (0, _utils.cn)('pointer-events-none block rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=unchecked]:translate-x-0', thumbSizeClasses[size || 'md'])
        })
    });
});
SwitchCheckbox.displayName = 'SwitchCheckbox';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcdWlcXGNoZWNrYm94LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgKiBhcyBDaGVja2JveFByaW1pdGl2ZSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtY2hlY2tib3gnXG5pbXBvcnQgeyBDaGVjaywgTWludXMgfSBmcm9tICdAL2xpYi9vcHRpbWl6ZWQtaW1wb3J0cydcbmltcG9ydCB7IGN2YSwgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tICdjbGFzcy12YXJpYW5jZS1hdXRob3JpdHknXG5pbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJ1xuXG5jb25zdCBjaGVja2JveFZhcmlhbnRzID0gY3ZhKFxuICAncGVlciBoLTQgdy00IHNocmluay0wIHJvdW5kZWQtc20gYm9yZGVyIGJvcmRlci1ncmF5LTMwMCByaW5nLW9mZnNldC13aGl0ZSBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmctMiBmb2N1cy12aXNpYmxlOnJpbmctcHJpbWFyeSBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LTIgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIGRpc2FibGVkOm9wYWNpdHktNTAgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwJyxcbiAge1xuICAgIHZhcmlhbnRzOiB7XG4gICAgICB2YXJpYW50OiB7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgJ2RhdGEtW3N0YXRlPWNoZWNrZWRdOmJnLXByaW1hcnkgZGF0YS1bc3RhdGU9Y2hlY2tlZF06dGV4dC13aGl0ZSBkYXRhLVtzdGF0ZT1jaGVja2VkXTpib3JkZXItcHJpbWFyeScsXG4gICAgICAgIGRlc3RydWN0aXZlOlxuICAgICAgICAgICdkYXRhLVtzdGF0ZT1jaGVja2VkXTpiZy1yZWQtNjAwIGRhdGEtW3N0YXRlPWNoZWNrZWRdOnRleHQtd2hpdGUgZGF0YS1bc3RhdGU9Y2hlY2tlZF06Ym9yZGVyLXJlZC02MDAnLFxuICAgICAgICBzdWNjZXNzOlxuICAgICAgICAgICdkYXRhLVtzdGF0ZT1jaGVja2VkXTpiZy1ncmVlbi02MDAgZGF0YS1bc3RhdGU9Y2hlY2tlZF06dGV4dC13aGl0ZSBkYXRhLVtzdGF0ZT1jaGVja2VkXTpib3JkZXItZ3JlZW4tNjAwJyxcbiAgICAgICAgd2FybmluZzpcbiAgICAgICAgICAnZGF0YS1bc3RhdGU9Y2hlY2tlZF06YmcteWVsbG93LTYwMCBkYXRhLVtzdGF0ZT1jaGVja2VkXTp0ZXh0LXdoaXRlIGRhdGEtW3N0YXRlPWNoZWNrZWRdOmJvcmRlci15ZWxsb3ctNjAwJyxcbiAgICAgIH0sXG4gICAgICBzaXplOiB7XG4gICAgICAgIHNtOiAnaC0zIHctMycsXG4gICAgICAgIG1kOiAnaC00IHctNCcsXG4gICAgICAgIGxnOiAnaC01IHctNScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZGVmYXVsdFZhcmlhbnRzOiB7XG4gICAgICB2YXJpYW50OiAnZGVmYXVsdCcsXG4gICAgICBzaXplOiAnbWQnLFxuICAgIH0sXG4gIH1cbilcblxuZXhwb3J0IGludGVyZmFjZSBDaGVja2JveFByb3BzXG4gIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBDaGVja2JveFByaW1pdGl2ZS5Sb290PixcbiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIGNoZWNrYm94VmFyaWFudHM+IHtcbiAgbGFiZWw/OiBzdHJpbmdcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmdcbiAgZXJyb3I/OiBzdHJpbmdcbiAgaW5kZXRlcm1pbmF0ZT86IGJvb2xlYW5cbn1cblxuY29uc3QgQ2hlY2tib3ggPSBSZWFjdC5mb3J3YXJkUmVmPFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIENoZWNrYm94UHJpbWl0aXZlLlJvb3Q+LCBDaGVja2JveFByb3BzPihcbiAgKHsgY2xhc3NOYW1lLCB2YXJpYW50LCBzaXplLCBsYWJlbCwgZGVzY3JpcHRpb24sIGVycm9yLCBpbmRldGVybWluYXRlLCBpZCwgLi4ucHJvcHMgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgZ2VuZXJhdGVkSWQgPSBSZWFjdC51c2VJZCgpXG4gICAgY29uc3QgY2hlY2tib3hJZCA9IGlkIHx8IGdlbmVyYXRlZElkXG4gICAgY29uc3QgaGFzRXJyb3IgPSAhIWVycm9yXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J3NwYWNlLXktMic+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLXN0YXJ0IHNwYWNlLXgtMic+XG4gICAgICAgICAgPENoZWNrYm94UHJpbWl0aXZlLlJvb3RcbiAgICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICAgICAgaWQ9e2NoZWNrYm94SWR9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICAgICBjaGVja2JveFZhcmlhbnRzKHsgdmFyaWFudDogaGFzRXJyb3IgPyAnZGVzdHJ1Y3RpdmUnIDogdmFyaWFudCwgc2l6ZSB9KSxcbiAgICAgICAgICAgICAgaGFzRXJyb3IgJiYgJ2JvcmRlci1yZWQtNTAwJyxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGVja2JveFByaW1pdGl2ZS5JbmRpY2F0b3JcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbignZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC1jdXJyZW50Jyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtpbmRldGVybWluYXRlID8gPE1pbnVzIGNsYXNzTmFtZT0naC0zIHctMycgLz4gOiA8Q2hlY2sgY2xhc3NOYW1lPSdoLTMgdy0zJyAvPn1cbiAgICAgICAgICAgIDwvQ2hlY2tib3hQcmltaXRpdmUuSW5kaWNhdG9yPlxuICAgICAgICAgIDwvQ2hlY2tib3hQcmltaXRpdmUuUm9vdD5cblxuICAgICAgICAgIHsobGFiZWwgfHwgZGVzY3JpcHRpb24pICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdncmlkIGdhcC0xLjUgbGVhZGluZy1ub25lJz5cbiAgICAgICAgICAgICAge2xhYmVsICYmIChcbiAgICAgICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2NoZWNrYm94SWR9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICAgICAgICAgICAndGV4dC1zbSBmb250LW1lZGl1bSBsZWFkaW5nLW5vbmUgcGVlci1kaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWQgcGVlci1kaXNhYmxlZDpvcGFjaXR5LTcwIGN1cnNvci1wb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgJiYgJ3RleHQtcmVkLTYwMCdcbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICAgICAgICAgICAge3Byb3BzLnJlcXVpcmVkICYmIDxzcGFuIGNsYXNzTmFtZT0ndGV4dC1yZWQtNTAwIG1sLTEnPio8L3NwYW4+fVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtkZXNjcmlwdGlvbiAmJiAoXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtjbigndGV4dC14cyB0ZXh0LWdyYXktNjAwJywgaGFzRXJyb3IgJiYgJ3RleHQtcmVkLTUwMCcpfT5cbiAgICAgICAgICAgICAgICAgIHtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7ZXJyb3IgJiYgKFxuICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC14cyB0ZXh0LXJlZC02MDAgbXQtMSc+XG4gICAgICAgICAgICB7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvcj8udG9TdHJpbmcoKSB8fCAnRXJyb3IgZGVzY29ub2NpZG8nfVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuKVxuQ2hlY2tib3guZGlzcGxheU5hbWUgPSBDaGVja2JveFByaW1pdGl2ZS5Sb290LmRpc3BsYXlOYW1lXG5cbi8vIENoZWNrYm94IEdyb3VwIHBhcmEgbcO6bHRpcGxlcyBvcGNpb25lc1xuZXhwb3J0IGludGVyZmFjZSBDaGVja2JveEdyb3VwUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG4gIGxhYmVsPzogc3RyaW5nXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nXG4gIGVycm9yPzogc3RyaW5nXG4gIG9yaWVudGF0aW9uPzogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJ1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENoZWNrYm94R3JvdXAoe1xuICBjaGlsZHJlbixcbiAgbGFiZWwsXG4gIGRlc2NyaXB0aW9uLFxuICBlcnJvcixcbiAgb3JpZW50YXRpb24gPSAndmVydGljYWwnLFxuICBjbGFzc05hbWUsXG59OiBDaGVja2JveEdyb3VwUHJvcHMpIHtcbiAgY29uc3QgaGFzRXJyb3IgPSAhIWVycm9yXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y24oJ3NwYWNlLXktMycsIGNsYXNzTmFtZSl9PlxuICAgICAgeyhsYWJlbCB8fCBkZXNjcmlwdGlvbikgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nc3BhY2UteS0xJz5cbiAgICAgICAgICB7bGFiZWwgJiYgKFxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT17Y24oJ3RleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTkwMCcsIGhhc0Vycm9yICYmICd0ZXh0LXJlZC02MDAnKX0+XG4gICAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7ZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtjbigndGV4dC14cyB0ZXh0LWdyYXktNjAwJywgaGFzRXJyb3IgJiYgJ3RleHQtcmVkLTUwMCcpfT57ZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICdzcGFjZS15LTInLFxuICAgICAgICAgIG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgJ2ZsZXggZmxleC13cmFwIGdhcC00IHNwYWNlLXktMCdcbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG5cbiAgICAgIHtlcnJvciAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC14cyB0ZXh0LXJlZC02MDAnPlxuICAgICAgICAgIHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IGVycm9yPy50b1N0cmluZygpIHx8ICdFcnJvciBkZXNjb25vY2lkbyd9XG4gICAgICAgIDwvcD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cblxuLy8gQ2hlY2tib3ggY29uIHN3aXRjaCBzdHlsZVxuZXhwb3J0IGludGVyZmFjZSBTd2l0Y2hDaGVja2JveFByb3BzIGV4dGVuZHMgQ2hlY2tib3hQcm9wcyB7XG4gIHN3aXRjaFN0eWxlPzogYm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgU3dpdGNoQ2hlY2tib3ggPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBDaGVja2JveFByaW1pdGl2ZS5Sb290PixcbiAgU3dpdGNoQ2hlY2tib3hQcm9wc1xuPigoeyBjbGFzc05hbWUsIHN3aXRjaFN0eWxlID0gdHJ1ZSwgc2l6ZSA9ICdtZCcsIC4uLnByb3BzIH0sIHJlZikgPT4ge1xuICBpZiAoIXN3aXRjaFN0eWxlKSB7XG4gICAgcmV0dXJuIDxDaGVja2JveCByZWY9e3JlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHNpemU9e3NpemV9IHsuLi5wcm9wc30gLz5cbiAgfVxuXG4gIGNvbnN0IHNpemVDbGFzc2VzID0ge1xuICAgIHNtOiAnaC00IHctNycsXG4gICAgbWQ6ICdoLTUgdy05JyxcbiAgICBsZzogJ2gtNiB3LTExJyxcbiAgfVxuXG4gIGNvbnN0IHRodW1iU2l6ZUNsYXNzZXMgPSB7XG4gICAgc206ICdoLTMgdy0zIGRhdGEtW3N0YXRlPWNoZWNrZWRdOnRyYW5zbGF0ZS14LTMnLFxuICAgIG1kOiAnaC00IHctNCBkYXRhLVtzdGF0ZT1jaGVja2VkXTp0cmFuc2xhdGUteC00JyxcbiAgICBsZzogJ2gtNSB3LTUgZGF0YS1bc3RhdGU9Y2hlY2tlZF06dHJhbnNsYXRlLXgtNScsXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxDaGVja2JveFByaW1pdGl2ZS5Sb290XG4gICAgICByZWY9e3JlZn1cbiAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICdwZWVyIGlubGluZS1mbGV4IHNocmluay0wIGN1cnNvci1wb2ludGVyIGl0ZW1zLWNlbnRlciByb3VuZGVkLWZ1bGwgYm9yZGVyLTIgYm9yZGVyLXRyYW5zcGFyZW50IHRyYW5zaXRpb24tY29sb3JzIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0yIGZvY3VzLXZpc2libGU6cmluZy1wcmltYXJ5IGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMiBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXdoaXRlIGRpc2FibGVkOmN1cnNvci1ub3QtYWxsb3dlZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGRhdGEtW3N0YXRlPWNoZWNrZWRdOmJnLXByaW1hcnkgZGF0YS1bc3RhdGU9dW5jaGVja2VkXTpiZy1ncmF5LTIwMCcsXG4gICAgICAgIHNpemVDbGFzc2VzW3NpemUgfHwgJ21kJ10sXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICA8Q2hlY2tib3hQcmltaXRpdmUuSW5kaWNhdG9yXG4gICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgJ3BvaW50ZXItZXZlbnRzLW5vbmUgYmxvY2sgcm91bmRlZC1mdWxsIGJnLXdoaXRlIHNoYWRvdy1sZyByaW5nLTAgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZGF0YS1bc3RhdGU9dW5jaGVja2VkXTp0cmFuc2xhdGUteC0wJyxcbiAgICAgICAgICB0aHVtYlNpemVDbGFzc2VzW3NpemUgfHwgJ21kJ11cbiAgICAgICAgKX1cbiAgICAgIC8+XG4gICAgPC9DaGVja2JveFByaW1pdGl2ZS5Sb290PlxuICApXG59KVxuU3dpdGNoQ2hlY2tib3guZGlzcGxheU5hbWUgPSAnU3dpdGNoQ2hlY2tib3gnXG5cbmV4cG9ydCB7IENoZWNrYm94IH1cbiJdLCJuYW1lcyI6WyJDaGVja2JveCIsIkNoZWNrYm94R3JvdXAiLCJTd2l0Y2hDaGVja2JveCIsImNoZWNrYm94VmFyaWFudHMiLCJjdmEiLCJ2YXJpYW50cyIsInZhcmlhbnQiLCJkZWZhdWx0IiwiZGVzdHJ1Y3RpdmUiLCJzdWNjZXNzIiwid2FybmluZyIsInNpemUiLCJzbSIsIm1kIiwibGciLCJkZWZhdWx0VmFyaWFudHMiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJjbGFzc05hbWUiLCJsYWJlbCIsImRlc2NyaXB0aW9uIiwiZXJyb3IiLCJpbmRldGVybWluYXRlIiwiaWQiLCJwcm9wcyIsInJlZiIsImdlbmVyYXRlZElkIiwidXNlSWQiLCJjaGVja2JveElkIiwiaGFzRXJyb3IiLCJkaXYiLCJDaGVja2JveFByaW1pdGl2ZSIsIlJvb3QiLCJjbiIsIkluZGljYXRvciIsIk1pbnVzIiwiQ2hlY2siLCJodG1sRm9yIiwicmVxdWlyZWQiLCJzcGFuIiwicCIsIkVycm9yIiwibWVzc2FnZSIsInRvU3RyaW5nIiwiZGlzcGxheU5hbWUiLCJjaGlsZHJlbiIsIm9yaWVudGF0aW9uIiwic3dpdGNoU3R5bGUiLCJzaXplQ2xhc3NlcyIsInRodW1iU2l6ZUNsYXNzZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7UUEyTVNBO2VBQUFBOztRQXpGT0M7ZUFBQUE7O1FBZ0RIQztlQUFBQTs7OzsrREFoS1U7dUVBQ1k7a0NBQ047d0NBQ1U7dUJBQ3BCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFbkIsTUFBTUMsbUJBQW1CQyxJQUFBQSwyQkFBRyxFQUMxQixnUUFDQTtJQUNFQyxVQUFVO1FBQ1JDLFNBQVM7WUFDUEMsU0FDRTtZQUNGQyxhQUNFO1lBQ0ZDLFNBQ0U7WUFDRkMsU0FDRTtRQUNKO1FBQ0FDLE1BQU07WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7UUFDTjtJQUNGO0lBQ0FDLGlCQUFpQjtRQUNmVCxTQUFTO1FBQ1RLLE1BQU07SUFDUjtBQUNGO0FBWUYsTUFBTVgseUJBQVdnQixPQUFNQyxVQUFVLENBQy9CLENBQUMsRUFBRUMsU0FBUyxFQUFFWixPQUFPLEVBQUVLLElBQUksRUFBRVEsS0FBSyxFQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRUMsYUFBYSxFQUFFQyxFQUFFLEVBQUUsR0FBR0MsT0FBTyxFQUFFQztJQUNyRixNQUFNQyxjQUFjVixPQUFNVyxLQUFLO0lBQy9CLE1BQU1DLGFBQWFMLE1BQU1HO0lBQ3pCLE1BQU1HLFdBQVcsQ0FBQyxDQUFDUjtJQUVuQixxQkFDRSxzQkFBQ1M7UUFBSVosV0FBVTs7MEJBQ2Isc0JBQUNZO2dCQUFJWixXQUFVOztrQ0FDYixxQkFBQ2EsZUFBa0JDLElBQUk7d0JBQ3JCUCxL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