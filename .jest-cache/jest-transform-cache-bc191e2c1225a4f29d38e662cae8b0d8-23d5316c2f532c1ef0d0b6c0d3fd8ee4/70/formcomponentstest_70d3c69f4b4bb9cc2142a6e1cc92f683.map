{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\ui\\form-components.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { Checkbox, CheckboxGroup } from '@/components/ui/checkbox'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { SelectField, SelectItem } from '@/components/ui/select'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Form, FormSection, FormRow, useForm } from '@/components/ui/form'\n\n// Mock para Radix UI\njest.mock('@radix-ui/react-checkbox', () => ({\n  ...jest.requireActual('@radix-ui/react-checkbox'),\n  Root: ({ children, onCheckedChange, checked, ...props }: any) => (\n    <div>\n      <input\n        type='checkbox'\n        checked={checked}\n        onChange={e => onCheckedChange?.(e.target.checked)}\n        {...props}\n      />\n      {children}\n    </div>\n  ),\n  Indicator: ({ children }: any) => <span>{children}</span>,\n}))\n\njest.mock('@radix-ui/react-radio-group', () => ({\n  ...jest.requireActual('@radix-ui/react-radio-group'),\n  Root: ({ children, onValueChange, value, ...props }: any) => (\n    <div role='radiogroup' {...props}>\n      {children}\n    </div>\n  ),\n  Item: ({ children, value, ...props }: any) => (\n    <div>\n      <input type='radio' value={value} {...props} />\n      {children}\n    </div>\n  ),\n  Indicator: ({ children }: any) => <span>{children}</span>,\n}))\n\ndescribe('Form Components', () => {\n  describe('Checkbox', () => {\n    it('renders with label and description', () => {\n      render(<Checkbox label='Accept terms' description='Please read our terms and conditions' />)\n\n      expect(screen.getByText('Accept terms')).toBeInTheDocument()\n      expect(screen.getByText('Please read our terms and conditions')).toBeInTheDocument()\n    })\n\n    it('shows required indicator', () => {\n      render(<Checkbox label='Required field' required />)\n      expect(screen.getByText('*')).toBeInTheDocument()\n    })\n\n    it('displays error message', () => {\n      render(<Checkbox label='Field' error='This field is required' />)\n      expect(screen.getByText('This field is required')).toBeInTheDocument()\n    })\n\n    it('calls onCheckedChange when clicked', async () => {\n      const user = userEvent.setup()\n      const onCheckedChange = jest.fn()\n\n      render(<Checkbox label='Test checkbox' onCheckedChange={onCheckedChange} />)\n\n      const checkbox = screen.getByRole('checkbox')\n      await user.click(checkbox)\n\n      expect(onCheckedChange).toHaveBeenCalledWith(true)\n    })\n  })\n\n  describe('CheckboxGroup', () => {\n    it('renders group with label and description', () => {\n      render(\n        <CheckboxGroup label='Preferences' description='Select your preferences'>\n          <Checkbox label='Option 1' />\n          <Checkbox label='Option 2' />\n        </CheckboxGroup>\n      )\n\n      expect(screen.getByText('Preferences')).toBeInTheDocument()\n      expect(screen.getByText('Select your preferences')).toBeInTheDocument()\n      expect(screen.getByText('Option 1')).toBeInTheDocument()\n      expect(screen.getByText('Option 2')).toBeInTheDocument()\n    })\n\n    it('displays error message', () => {\n      render(\n        <CheckboxGroup error='Please select at least one option'>\n          <Checkbox label='Option 1' />\n        </CheckboxGroup>\n      )\n\n      expect(screen.getByText('Please select at least one option')).toBeInTheDocument()\n    })\n  })\n\n  describe('RadioGroup', () => {\n    it('renders with label and items', () => {\n      render(\n        <RadioGroup label='Choose option'>\n          <RadioGroupItem value='option1' label='Option 1' />\n          <RadioGroupItem value='option2' label='Option 2' />\n        </RadioGroup>\n      )\n\n      expect(screen.getByText('Choose option')).toBeInTheDocument()\n      expect(screen.getByText('Option 1')).toBeInTheDocument()\n      expect(screen.getByText('Option 2')).toBeInTheDocument()\n    })\n\n    it('shows required indicator', () => {\n      render(\n        <RadioGroup label='Required choice' required>\n          <RadioGroupItem value='option1' label='Option 1' />\n        </RadioGroup>\n      )\n\n      expect(screen.getByText('*')).toBeInTheDocument()\n    })\n  })\n\n  describe('Textarea', () => {\n    it('renders with label and placeholder', () => {\n      render(<Textarea label='Message' placeholder='Enter your message' />)\n\n      expect(screen.getByText('Message')).toBeInTheDocument()\n      expect(screen.getByPlaceholderText('Enter your message')).toBeInTheDocument()\n    })\n\n    it('shows character count when enabled', () => {\n      render(<Textarea showCharCount maxLength={100} defaultValue='Hello' />)\n\n      // El componente muestra el contador de caracteres\n      expect(screen.getByText(/\\/100/)).toBeInTheDocument()\n    })\n\n    it('displays error message', () => {\n      render(<Textarea label='Message' error='Message is required' />)\n      expect(screen.getByText('Message is required')).toBeInTheDocument()\n    })\n\n    it('enforces max length', async () => {\n      const user = userEvent.setup()\n\n      render(<Textarea maxLength={5} />)\n\n      const textarea = screen.getByRole('textbox')\n      await user.type(textarea, 'This is a long message')\n\n      expect(textarea).toHaveValue('This ')\n    })\n  })\n\n  describe('Form Structure', () => {\n    it('renders form with sections and rows', () => {\n      render(\n        <Form>\n          <FormSection title='Personal Info' description='Your details'>\n            <FormRow columns={2}>\n              <div>Field 1</div>\n              <div>Field 2</div>\n            </FormRow>\n          </FormSection>\n        </Form>\n      )\n\n      expect(screen.getByText('Personal Info')).toBeInTheDocument()\n      expect(screen.getByText('Your details')).toBeInTheDocument()\n      expect(screen.getByText('Field 1')).toBeInTheDocument()\n      expect(screen.getByText('Field 2')).toBeInTheDocument()\n    })\n  })\n\n  describe('useForm hook', () => {\n    function TestForm() {\n      const { values, errors, handleSubmit, register } = useForm({\n        defaultValues: { name: '', email: '' },\n        validate: data => {\n          const errors: Record<string, string> = {}\n          if (!data.name) {\n            errors.name = 'Name required'\n          }\n          if (!data.email) {\n            errors.email = 'Email required'\n          }\n          return Object.keys(errors).length > 0 ? errors : null\n        },\n        onSubmit: data => {\n          console.log('Submitted:', data)\n        },\n      })\n\n      return (\n        <form onSubmit={handleSubmit}>\n          <input placeholder='Name' {...register('name')} />\n          {errors.name && <span>{errors.name}</span>}\n\n          <input placeholder='Email' {...register('email')} />\n          {errors.email && <span>{errors.email}</span>}\n\n          <button type='submit'>Submit</button>\n        </form>\n      )\n    }\n\n    it('handles form validation', async () => {\n      const user = userEvent.setup()\n      render(<TestForm />)\n\n      const submitButton = screen.getByRole('button', { name: /submit/i })\n      await user.click(submitButton)\n\n      expect(screen.getByText('Name required')).toBeInTheDocument()\n      expect(screen.getByText('Email required')).toBeInTheDocument()\n    })\n\n    it('clears errors when user types', async () => {\n      const user = userEvent.setup()\n      render(<TestForm />)\n\n      // Submit to show errors\n      const submitButton = screen.getByRole('button', { name: /submit/i })\n      await user.click(submitButton)\n\n      expect(screen.getByText('Name required')).toBeInTheDocument()\n\n      // Type in name field\n      const nameInput = screen.getByPlaceholderText('Name')\n      await user.type(nameInput, 'John')\n\n      expect(screen.queryByText('Name required')).not.toBeInTheDocument()\n    })\n\n    it('updates values when user types', async () => {\n      const user = userEvent.setup()\n      render(<TestForm />)\n\n      const nameInput = screen.getByPlaceholderText('Name')\n      await user.type(nameInput, 'John Doe')\n\n      expect(nameInput).toHaveValue('John Doe')\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('checkbox has proper labels', () => {\n      render(<Checkbox label='Accept terms' id='terms' />)\n\n      const checkbox = screen.getByRole('checkbox')\n      const label = screen.getByText('Accept terms')\n\n      expect(checkbox).toHaveAttribute('id', 'terms')\n      expect(label).toHaveAttribute('for', 'terms')\n    })\n\n    it('radio group has proper structure', () => {\n      render(\n        <RadioGroup label='Choose option'>\n          <RadioGroupItem value='option1' label='Option 1' />\n          <RadioGroupItem value='option2' label='Option 2' />\n        </RadioGroup>\n      )\n\n      expect(screen.getByRole('radiogroup')).toBeInTheDocument()\n    })\n\n    it('textarea has proper labeling', () => {\n      render(<Textarea label='Message' id='message' />)\n\n      const textarea = screen.getByRole('textbox')\n      const label = screen.getByText('Message')\n\n      expect(textarea).toHaveAttribute('id', 'message')\n      expect(label).toHaveAttribute('for', 'message')\n    })\n\n    it('form fields support required attribute', () => {\n      render(\n        <div>\n          <Checkbox label='Required checkbox' required />\n          <Textarea label='Required textarea' required />\n        </div>\n      )\n\n      expect(screen.getAllByText('*')).toHaveLength(2)\n    })\n  })\n\n  describe('Error States', () => {\n    it('shows error styling for invalid fields', () => {\n      render(\n        <div>\n          <Checkbox label='Field' error='Error message' />\n          <Textarea label='Field' error='Error message' />\n        </div>\n      )\n\n      expect(screen.getAllByText('Error message')).toHaveLength(2)\n    })\n\n    it('applies error variant to components', () => {\n      render(<Textarea variant='error' />)\n\n      const textarea = screen.getByRole('textbox')\n      expect(textarea).toHaveClass('border-red-500')\n    })\n  })\n})\n"],"names":["jest","mock","requireActual","Root","children","onCheckedChange","checked","props","div","input","type","onChange","e","target","Indicator","span","onValueChange","value","role","Item","describe","it","render","Checkbox","label","description","expect","screen","getByText","toBeInTheDocument","required","error","user","userEvent","setup","fn","checkbox","getByRole","click","toHaveBeenCalledWith","CheckboxGroup","RadioGroup","RadioGroupItem","Textarea","placeholder","getByPlaceholderText","showCharCount","maxLength","defaultValue","textarea","toHaveValue","Form","FormSection","title","FormRow","columns","TestForm","values","errors","handleSubmit","register","useForm","defaultValues","name","email","validate","data","Object","keys","length","onSubmit","console","log","form","button","submitButton","nameInput","queryByText","not","id","toHaveAttribute","getAllByText","toHaveLength","variant","toHaveClass"],"mappings":"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"}