{"version":3,"names":["cov_25ji1wo38k","actualCoverage","s","GET","f","runtime","request","publicReportsDir","_path","default","join","process","cwd","rootReportsDir","reports","_fs","existsSync","b","publicFiles","readdirSync","filter","file","endsWith","sort","a","timestampA","match","timestampB","parseInt","localeCompare","length","rootFiles","mkdirSync","recursive","sourcePath","destPath","copyFileSync","_server","NextResponse","json","success","total","message","error","console","status"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test-reports\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const publicReportsDir = path.join(process.cwd(), 'public', 'test-reports');\r\n    const rootReportsDir = path.join(process.cwd(), 'test-reports');\r\n    \r\n    let reports: string[] = [];\r\n    \r\n    // Verificar carpeta public/test-reports\r\n    if (fs.existsSync(publicReportsDir)) {\r\n      const publicFiles = fs.readdirSync(publicReportsDir)\r\n        .filter(file => file.endsWith('.json'))\r\n        .sort((a, b) => {\r\n          // Ordenar por timestamp (más reciente primero)\r\n          const timestampA = a.match(/\\d+/);\r\n          const timestampB = b.match(/\\d+/);\r\n          if (timestampA && timestampB) {\r\n            return parseInt(timestampB[0]) - parseInt(timestampA[0]);\r\n          }\r\n          return b.localeCompare(a);\r\n        });\r\n      reports = [...reports, ...publicFiles];\r\n    }\r\n    \r\n    // Si no hay reportes en public, verificar carpeta raíz\r\n    if (reports.length === 0 && fs.existsSync(rootReportsDir)) {\r\n      const rootFiles = fs.readdirSync(rootReportsDir)\r\n        .filter(file => file.endsWith('.json'))\r\n        .sort((a, b) => {\r\n          const timestampA = a.match(/\\d+/);\r\n          const timestampB = b.match(/\\d+/);\r\n          if (timestampA && timestampB) {\r\n            return parseInt(timestampB[0]) - parseInt(timestampA[0]);\r\n          }\r\n          return b.localeCompare(a);\r\n        });\r\n      \r\n      // Copiar archivos a public para que sean accesibles\r\n      if (!fs.existsSync(publicReportsDir)) {\r\n        fs.mkdirSync(publicReportsDir, { recursive: true });\r\n      }\r\n      \r\n      for (const file of rootFiles) {\r\n        const sourcePath = path.join(rootReportsDir, file);\r\n        const destPath = path.join(publicReportsDir, file);\r\n        if (!fs.existsSync(destPath)) {\r\n          fs.copyFileSync(sourcePath, destPath);\r\n        }\r\n      }\r\n      \r\n      reports = rootFiles;\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      reports,\r\n      total: reports.length,\r\n      message: reports.length > 0 ? 'Reportes cargados exitosamente' : 'No se encontraron reportes'\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error al cargar reportes:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Error interno del servidor',\r\n        reports: [],\r\n        total: 0\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}