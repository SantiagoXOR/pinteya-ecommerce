{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCategoryFilter.ts"],"sourcesContent":["/**\r\n * useCategoryFilter Hook\r\n * Manages category filter state and logic\r\n * Pinteya E-commerce - Enterprise-ready implementation\r\n */\r\n\r\nimport { useState, useCallback, useMemo } from 'react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport type { \r\n  CategoryId, \r\n  UseCategoryFilterReturn,\r\n  CategoryChangeEvent \r\n} from '@/types/categories';\r\n\r\n/**\r\n * Configuration options for the category filter hook\r\n */\r\ninterface UseCategoryFilterOptions {\r\n  /** Initial selected categories */\r\n  initialCategories?: CategoryId[];\r\n  /** Maximum number of categories that can be selected */\r\n  maxSelections?: number;\r\n  /** Whether to sync with URL parameters */\r\n  syncWithUrl?: boolean;\r\n  /** URL parameter name for categories */\r\n  urlParamName?: string;\r\n  /** Callback for category change events */\r\n  onCategoryChange?: (event: CategoryChangeEvent) => void;\r\n  /** Whether to enable analytics tracking */\r\n  enableAnalytics?: boolean;\r\n}\r\n\r\n/**\r\n * Custom hook for managing category filter state\r\n * \r\n * Features:\r\n * - State management for selected categories\r\n * - URL synchronization\r\n * - Analytics tracking\r\n * - Accessibility support\r\n * - Performance optimization\r\n * \r\n * @param options Configuration options\r\n * @returns Category filter state and actions\r\n */\r\nexport const useCategoryFilter = (\r\n  options: UseCategoryFilterOptions = {}\r\n): UseCategoryFilterReturn => {\r\n  const {\r\n    initialCategories = [],\r\n    maxSelections = 10,\r\n    syncWithUrl = true,\r\n    urlParamName = 'categories',\r\n    onCategoryChange,\r\n    enableAnalytics = true,\r\n  } = options;\r\n\r\n  const searchParams = useSearchParams();\r\n\r\n  // Initialize state from URL if sync is enabled, otherwise use initial categories\r\n  const getInitialState = useCallback((): CategoryId[] => {\r\n    if (syncWithUrl) {\r\n      const urlCategories = searchParams.get(urlParamName);\r\n      if (urlCategories) {\r\n        return urlCategories.split(',').filter(Boolean);\r\n      }\r\n    }\r\n    return initialCategories;\r\n  }, [syncWithUrl, searchParams, urlParamName, initialCategories]);\r\n\r\n  const [selectedCategories, setSelectedCategories] = useState<CategoryId[]>(getInitialState);\r\n\r\n  /**\r\n   * Create category change event for analytics and callbacks\r\n   */\r\n  const createChangeEvent = useCallback((\r\n    type: CategoryChangeEvent['type'],\r\n    categoryId: CategoryId | undefined,\r\n    newCategories: CategoryId[],\r\n    previousCategories: CategoryId[]\r\n  ): CategoryChangeEvent => ({\r\n    type,\r\n    categoryId,\r\n    selectedCategories: newCategories,\r\n    previousCategories,\r\n    timestamp: new Date(),\r\n  }), []);\r\n\r\n  /**\r\n   * Track analytics event if enabled\r\n   */\r\n  const trackAnalytics = useCallback((event: CategoryChangeEvent) => {\r\n    if (!enableAnalytics) {return;}\r\n\r\n    // Track with analytics service (placeholder for actual implementation)\r\n    if (typeof window !== 'undefined' && window.gtag) {\r\n      window.gtag('event', 'category_filter_change', {\r\n        event_category: 'filters',\r\n        event_label: event.categoryId || 'bulk_action',\r\n        value: event.selectedCategories.length,\r\n        custom_parameters: {\r\n          action_type: event.type,\r\n          selected_count: event.selectedCategories.length,\r\n        },\r\n      });\r\n    }\r\n\r\n    // Console log for development\r\n    if (process.env.NODE_ENV === 'development') {\r\n    }\r\n  }, [enableAnalytics]);\r\n\r\n  /**\r\n   * Toggle a category selection\r\n   */\r\n  const toggleCategory = useCallback((categoryId: CategoryId) => {\r\n    setSelectedCategories(prev => {\r\n      const isCurrentlySelected = prev.includes(categoryId);\r\n      let newCategories: CategoryId[];\r\n\r\n      if (isCurrentlySelected) {\r\n        // Remove category\r\n        newCategories = prev.filter(id => id !== categoryId);\r\n      } else {\r\n        // Add category (respect max selections)\r\n        if (prev.length >= maxSelections) {\r\n          console.warn(`Maximum ${maxSelections} categories can be selected`);\r\n          return prev;\r\n        }\r\n        newCategories = [...prev, categoryId];\r\n      }\r\n\r\n      // Create and track event\r\n      const event = createChangeEvent(\r\n        isCurrentlySelected ? 'deselect' : 'select',\r\n        categoryId,\r\n        newCategories,\r\n        prev\r\n      );\r\n\r\n      trackAnalytics(event);\r\n      onCategoryChange?.(event);\r\n\r\n      return newCategories;\r\n    });\r\n  }, [maxSelections, createChangeEvent, trackAnalytics, onCategoryChange]);\r\n\r\n  /**\r\n   * Clear all selected categories\r\n   */\r\n  const clearAll = useCallback(() => {\r\n    setSelectedCategories(prev => {\r\n      if (prev.length === 0) {return prev;}\r\n\r\n      const event = createChangeEvent('clear', undefined, [], prev);\r\n      trackAnalytics(event);\r\n      onCategoryChange?.(event);\r\n\r\n      return [];\r\n    });\r\n  }, [createChangeEvent, trackAnalytics, onCategoryChange]);\r\n\r\n  /**\r\n   * Select all provided categories\r\n   */\r\n  const selectAll = useCallback((categoryIds: CategoryId[]) => {\r\n    setSelectedCategories(prev => {\r\n      // Respect max selections\r\n      const limitedCategories = categoryIds.slice(0, maxSelections);\r\n\r\n      if (categoryIds.length > maxSelections) {\r\n        console.warn(`Only first ${maxSelections} categories will be selected`);\r\n      }\r\n\r\n      const event = createChangeEvent('selectAll', undefined, limitedCategories, prev);\r\n      trackAnalytics(event);\r\n      onCategoryChange?.(event);\r\n\r\n      return limitedCategories;\r\n    });\r\n  }, [maxSelections, createChangeEvent, trackAnalytics, onCategoryChange]);\r\n\r\n  /**\r\n   * Check if a category is selected\r\n   */\r\n  const isSelected = useCallback((categoryId: CategoryId): boolean => {\r\n    return selectedCategories.includes(categoryId);\r\n  }, [selectedCategories]);\r\n\r\n  /**\r\n   * Get count of selected categories\r\n   */\r\n  const selectedCount = useMemo(() => selectedCategories.length, [selectedCategories]);\r\n\r\n  /**\r\n   * Memoized return object for performance\r\n   */\r\n  const returnValue = useMemo((): UseCategoryFilterReturn => ({\r\n    selectedCategories,\r\n    toggleCategory,\r\n    clearAll,\r\n    selectAll,\r\n    isSelected,\r\n    selectedCount,\r\n  }), [\r\n    selectedCategories,\r\n    toggleCategory,\r\n    clearAll,\r\n    selectAll,\r\n    isSelected,\r\n    selectedCount,\r\n  ]);\r\n\r\n  return returnValue;\r\n};\r\n\r\n/**\r\n * Type guard to check if a value is a valid CategoryId\r\n */\r\nexport const isCategoryId = (value: unknown): value is CategoryId => {\r\n  return typeof value === 'string' && value.length > 0;\r\n};\r\n\r\n/**\r\n * Utility to validate category IDs array\r\n */\r\nexport const validateCategoryIds = (categoryIds: unknown[]): CategoryId[] => {\r\n  return categoryIds.filter(isCategoryId);\r\n};\r\n\r\n/**\r\n * Default export for convenience\r\n */\r\nexport default useCategoryFilter;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["isCategoryId","useCategoryFilter","validateCategoryIds","options","initialCategories","maxSelections","syncWithUrl","urlParamName","onCategoryChange","enableAnalytics","searchParams","useSearchParams","getInitialState","useCallback","urlCategories","get","split","filter","Boolean","selectedCategories","setSelectedCategories","useState","createChangeEvent","type","categoryId","newCategories","previousCategories","timestamp","Date","trackAnalytics","event","window","gtag","event_category","event_label","value","length","custom_parameters","action_type","selected_count","process","env","NODE_ENV","toggleCategory","prev","isCurrentlySelected","includes","id","console","warn","clearAll","undefined","selectAll","categoryIds","limitedCategories","slice","isSelected","selectedCount","useMemo","returnValue"],"mappings":"AAAA;;;;CAIC;;;;;;;;;;;QAkOD;;CAEC,GACD;eAAA;;QAdaA;eAAAA;;QA9KAC;eAAAA;;QAqLAC;eAAAA;;;uBA5NkC;4BACf;AAsCzB,MAAMD,oBAAoB,CAC/BE,UAAoC,CAAC,CAAC;IAEtC,MAAM,EACJC,oBAAoB,EAAE,EACtBC,gBAAgB,EAAE,EAClBC,cAAc,IAAI,EAClBC,eAAe,YAAY,EAC3BC,gBAAgB,EAChBC,kBAAkB,IAAI,EACvB,GAAGN;IAEJ,MAAMO,eAAeC,IAAAA,2BAAe;IAEpC,iFAAiF;IACjF,MAAMC,kBAAkBC,IAAAA,kBAAW,EAAC;QAClC,IAAIP,aAAa;YACf,MAAMQ,gBAAgBJ,aAAaK,GAAG,CAACR;YACvC,IAAIO,eAAe;gBACjB,OAAOA,cAAcE,KAAK,CAAC,KAAKC,MAAM,CAACC;YACzC;QACF;QACA,OAAOd;IACT,GAAG;QAACE;QAAaI;QAAcH;QAAcH;KAAkB;IAE/D,MAAM,CAACe,oBAAoBC,sBAAsB,GAAGC,IAAAA,eAAQ,EAAeT;IAE3E;;GAEC,GACD,MAAMU,oBAAoBT,IAAAA,kBAAW,EAAC,CACpCU,MACAC,YACAC,eACAC,qBACyB,CAAA;YACzBH;YACAC;YACAL,oBAAoBM;YACpBC;YACAC,WAAW,IAAIC;QACjB,CAAA,GAAI,EAAE;IAEN;;GAEC,GACD,MAAMC,iBAAiBhB,IAAAA,kBAAW,EAAC,CAACiB;QAClC,IAAI,CAACrB,iBAAiB;YAAC;QAAO;QAE9B,uEAAuE;QACvE,IAAI,OAAOsB,WAAW,eAAeA,OAAOC,IAAI,EAAE;YAChDD,OAAOC,IAAI,CAAC,SAAS,0BAA0B;gBAC7CC,gBAAgB;gBAChBC,aAAaJ,MAAMN,UAAU,IAAI;gBACjCW,OAAOL,MAAMX,kBAAkB,CAACiB,MAAM;gBACtCC,mBAAmB;oBACjBC,aAAaR,MAAMP,IAAI;oBACvBgB,gBAAgBT,MAAMX,kBAAkB,CAACiB,MAAM;gBACjD;YACF;QACF;QAEA,8BAA8B;QAC9B,IAAII,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe,CAC5C;IACF,GAAG;QAACjC;KAAgB;IAEpB;;GAEC,GACD,MAAMkC,iBAAiB9B,IAAAA,kBAAW,EAAC,CAACW;QAClCJ,sBAAsBwB,CAAAA;YACpB,MAAMC,sBAAsBD,KAAKE,QAAQ,CAACtB;YAC1C,IAAIC;YAEJ,IAAIoB,qBAAqB;gBACvB,kBAAkB;gBAClBpB,gBAAgBmB,KAAK3B,MAAM,CAAC8B,CAAAA,KAAMA,OAAOvB;YAC3C,OAAO;gBACL,wCAAwC;gBACxC,IAAIoB,KAAKR,MAAM,IAAI/B,eAAe;oBAChC2C,QAAQC,IAAI,CAAC,CAAC,QAAQ,EAAE5C,cAAc,2BAA2B,CAAC;oBAClE,OAAOuC;gBACT;gBACAnB,gBAAgB;uBAAImB;oBAAMpB;iBAAW;YACvC;YAEA,yBAAyB;YACzB,MAAMM,QAAQR,kBACZuB,sBAAsB,aAAa,UACnCrB,YACAC,eACAmB;YAGFf,eAAeC;YACftB,mBAAmBsB;YAEnB,OAAOL;QACT;IACF,GAAG;QAACpB;QAAeiB;QAAmBO;QAAgBrB;KAAiB;IAEvE;;GAEC,GACD,MAAM0C,WAAWrC,IAAAA,kBAAW,EAAC;QAC3BO,sBAAsBwB,CAAAA;YACpB,IAAIA,KAAKR,MAAM,KAAK,GAAG;gBAAC,OAAOQ;YAAK;YAEpC,MAAMd,QAAQR,kBAAkB,SAAS6B,WAAW,EAAE,EAAEP;YACxDf,eAAeC;YACftB,mBAAmBsB;YAEnB,OAAO,EAAE;QACX;IACF,GAAG;QAACR;QAAmBO;QAAgBrB;KAAiB;IAExD;;GAEC,GACD,MAAM4C,YAAYvC,IAAAA,kBAAW,EAAC,CAACwC;QAC7BjC,sBAAsBwB,CAAAA;YACpB,yBAAyB;YACzB,MAAMU,oBAAoBD,YAAYE,KAAK,CAAC,GAAGlD;YAE/C,IAAIgD,YAAYjB,MAAM,GAAG/B,eAAe;gBACtC2C,QAAQC,IAAI,CAAC,CAAC,WAAW,EAAE5C,cAAc,4BAA4B,CAAC;YACxE;YAEA,MAAMyB,QAAQR,kBAAkB,aAAa6B,WAAWG,mBAAmBV;YAC3Ef,eAAeC;YACftB,mBAAmBsB;YAEnB,OAAOwB;QACT;IACF,GAAG;QAACjD;QAAeiB;QAAmBO;QAAgBrB;KAAiB;IAEvE;;GAEC,GACD,MAAMgD,aAAa3C,IAAAA,kBAAW,EAAC,CAACW;QAC9B,OAAOL,mBAAmB2B,QAAQ,CAACtB;IACrC,GAAG;QAACL;KAAmB;IAEvB;;GAEC,GACD,MAAMsC,gBAAgBC,IAAAA,cAAO,EAAC,IAAMvC,mBAAmBiB,MAAM,EAAE;QAACjB;KAAmB;IAEnF;;GAEC,GACD,MAAMwC,cAAcD,IAAAA,cAAO,EAAC,IAAgC,CAAA;YAC1DvC;YACAwB;YACAO;YACAE;YACAI;YACAC;QACF,CAAA,GAAI;QACFtC;QACAwB;QACAO;QACAE;QACAI;QACAC;KACD;IAED,OAAOE;AACT;AAKO,MAAM3D,eAAe,CAACmC;IAC3B,OAAO,OAAOA,UAAU,YAAYA,MAAMC,MAAM,GAAG;AACrD;AAKO,MAAMlC,sBAAsB,CAACmD;IAClC,OAAOA,YAAYpC,MAAM,CAACjB;AAC5B;MAKA,WAAeC"}