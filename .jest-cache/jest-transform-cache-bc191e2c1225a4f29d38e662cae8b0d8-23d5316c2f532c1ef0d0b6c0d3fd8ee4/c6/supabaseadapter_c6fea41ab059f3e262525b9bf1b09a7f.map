{"version":3,"names":["cov_1ef4jj0v7m","actualCoverage","s","SupabaseAdapter","options","f","url","secret","supabase","_supabasejs","createClient","db","schema","auth","persistSession","createUser","user","console","log","data","error","from","insert","id","crypto","randomUUID","name","email","emailVerified","toISOString","image","select","single","b","Error","message","Date","getUser","eq","getUserByEmail","getUserByAccount","providerAccountId","provider","users","Array","isArray","updateUser","update","deleteUser","userId","delete","linkAccount","account","type","refresh_token","access_token","expires_at","token_type","scope","id_token","session_state","unlinkAccount","createSession","sessionToken","expires","getSessionAndUser","session","updateSession","deleteSession","createVerificationToken","identifier","token","useVerificationToken"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\supabase\\supabase-adapter.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\nimport type { Adapter, AdapterUser, AdapterAccount, AdapterSession, VerificationToken } from '@auth/core/adapters'\r\n\r\nexport interface SupabaseAdapterClientOptions {\r\n  url: string\r\n  secret: string\r\n}\r\n\r\nexport function SupabaseAdapter(options: SupabaseAdapterClientOptions): Adapter {\r\n  const { url, secret } = options\r\n  const supabase = createClient(url, secret, {\r\n    db: { schema: 'public' },\r\n    auth: { persistSession: false }\r\n  })\r\n\r\n  return {\r\n    async createUser(user) {\r\n      console.log('[CUSTOM_ADAPTER] createUser:', user)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified?.toISOString(),\r\n          image: user.image,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createUser error:', error)\r\n        throw new Error(`Error creating user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUser(id) {\r\n      console.log('[CUSTOM_ADAPTER] getUser:', id)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUser error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] getUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUserByEmail(email) {\r\n      console.log('[CUSTOM_ADAPTER] getUserByEmail:', email)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('email', email)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUserByEmail error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] getUserByEmail success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUserByAccount({ providerAccountId, provider }) {\r\n      console.log('[CUSTOM_ADAPTER] getUserByAccount:', { providerAccountId, provider })\r\n      \r\n      const { data, error } = await supabase\r\n        .from('accounts')\r\n        .select(`\r\n          users (\r\n            id,\r\n            name,\r\n            email,\r\n            emailVerified,\r\n            image\r\n          )\r\n        `)\r\n        .eq('providerAccountId', providerAccountId)\r\n        .eq('provider', provider)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUserByAccount error:', error)\r\n        return null\r\n      }\r\n\r\n      if (!data?.users) {\r\n        console.log('[CUSTOM_ADAPTER] getUserByAccount: no user found')\r\n        return null\r\n      }\r\n\r\n      const user = Array.isArray(data.users) ? data.users[0] : data.users\r\n      console.log('[CUSTOM_ADAPTER] getUserByAccount success:', user)\r\n      \r\n      return {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        emailVerified: user.emailVerified ? new Date(user.emailVerified) : null,\r\n        image: user.image,\r\n      }\r\n    },\r\n\r\n    async updateUser(user) {\r\n      console.log('[CUSTOM_ADAPTER] updateUser:', user)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .update({\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified?.toISOString(),\r\n          image: user.image,\r\n        })\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] updateUser error:', error)\r\n        throw new Error(`Error updating user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] updateUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async deleteUser(userId) {\r\n      console.log('[CUSTOM_ADAPTER] deleteUser:', userId)\r\n      const { error } = await supabase\r\n        .from('users')\r\n        .delete()\r\n        .eq('id', userId)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] deleteUser error:', error)\r\n        throw new Error(`Error deleting user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] deleteUser success')\r\n    },\r\n\r\n    async linkAccount(account) {\r\n      console.log('[CUSTOM_ADAPTER] linkAccount:', account)\r\n      const { data, error } = await supabase\r\n        .from('accounts')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          userId: account.userId,\r\n          type: account.type,\r\n          provider: account.provider,\r\n          providerAccountId: account.providerAccountId,\r\n          refresh_token: account.refresh_token,\r\n          access_token: account.access_token,\r\n          expires_at: account.expires_at,\r\n          token_type: account.token_type,\r\n          scope: account.scope,\r\n          id_token: account.id_token,\r\n          session_state: account.session_state,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] linkAccount error:', error)\r\n        throw new Error(`Error linking account: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] linkAccount success:', data)\r\n      return {\r\n        id: data.id,\r\n        userId: data.userId,\r\n        type: data.type,\r\n        provider: data.provider,\r\n        providerAccountId: data.providerAccountId,\r\n        refresh_token: data.refresh_token,\r\n        access_token: data.access_token,\r\n        expires_at: data.expires_at,\r\n        token_type: data.token_type,\r\n        scope: data.scope,\r\n        id_token: data.id_token,\r\n        session_state: data.session_state,\r\n      }\r\n    },\r\n\r\n    async unlinkAccount({ providerAccountId, provider }) {\r\n      console.log('[CUSTOM_ADAPTER] unlinkAccount:', { providerAccountId, provider })\r\n      const { error } = await supabase\r\n        .from('accounts')\r\n        .delete()\r\n        .eq('providerAccountId', providerAccountId)\r\n        .eq('provider', provider)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] unlinkAccount error:', error)\r\n        throw new Error(`Error unlinking account: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] unlinkAccount success')\r\n    },\r\n\r\n    async createSession({ sessionToken, userId, expires }) {\r\n      console.log('[CUSTOM_ADAPTER] createSession:', { sessionToken, userId, expires })\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          sessionToken,\r\n          userId,\r\n          expires: expires.toISOString(),\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createSession error:', error)\r\n        throw new Error(`Error creating session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createSession success:', data)\r\n      return {\r\n        id: data.id,\r\n        sessionToken: data.sessionToken,\r\n        userId: data.userId,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async getSessionAndUser(sessionToken) {\r\n      console.log('[CUSTOM_ADAPTER] getSessionAndUser:', sessionToken)\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .select(`\r\n          *,\r\n          users (\r\n            id,\r\n            name,\r\n            email,\r\n            emailVerified,\r\n            image\r\n          )\r\n        `)\r\n        .eq('sessionToken', sessionToken)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getSessionAndUser error:', error)\r\n        return null\r\n      }\r\n\r\n      if (!data?.users) {\r\n        console.log('[CUSTOM_ADAPTER] getSessionAndUser: no user found')\r\n        return null\r\n      }\r\n\r\n      const user = Array.isArray(data.users) ? data.users[0] : data.users\r\n      console.log('[CUSTOM_ADAPTER] getSessionAndUser success:', { session: data, user })\r\n      \r\n      return {\r\n        session: {\r\n          id: data.id,\r\n          sessionToken: data.sessionToken,\r\n          userId: data.userId,\r\n          expires: new Date(data.expires),\r\n        },\r\n        user: {\r\n          id: user.id,\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified ? new Date(user.emailVerified) : null,\r\n          image: user.image,\r\n        },\r\n      }\r\n    },\r\n\r\n    async updateSession({ sessionToken, ...session }) {\r\n      console.log('[CUSTOM_ADAPTER] updateSession:', { sessionToken, session })\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .update({\r\n          expires: session.expires?.toISOString(),\r\n        })\r\n        .eq('sessionToken', sessionToken)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] updateSession error:', error)\r\n        throw new Error(`Error updating session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] updateSession success:', data)\r\n      return {\r\n        id: data.id,\r\n        sessionToken: data.sessionToken,\r\n        userId: data.userId,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async deleteSession(sessionToken) {\r\n      console.log('[CUSTOM_ADAPTER] deleteSession:', sessionToken)\r\n      const { error } = await supabase\r\n        .from('sessions')\r\n        .delete()\r\n        .eq('sessionToken', sessionToken)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] deleteSession error:', error)\r\n        throw new Error(`Error deleting session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] deleteSession success')\r\n    },\r\n\r\n    async createVerificationToken({ identifier, expires, token }) {\r\n      console.log('[CUSTOM_ADAPTER] createVerificationToken:', { identifier, expires, token })\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .insert({\r\n          identifier,\r\n          token,\r\n          expires: expires.toISOString(),\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createVerificationToken error:', error)\r\n        throw new Error(`Error creating verification token: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createVerificationToken success:', data)\r\n      return {\r\n        identifier: data.identifier,\r\n        token: data.token,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async useVerificationToken({ identifier, token }) {\r\n      console.log('[CUSTOM_ADAPTER] useVerificationToken:', { identifier, token })\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .delete()\r\n        .eq('identifier', identifier)\r\n        .eq('token', token)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] useVerificationToken error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] useVerificationToken success:', data)\r\n      return {\r\n        identifier: data.identifier,\r\n        token: data.token,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}