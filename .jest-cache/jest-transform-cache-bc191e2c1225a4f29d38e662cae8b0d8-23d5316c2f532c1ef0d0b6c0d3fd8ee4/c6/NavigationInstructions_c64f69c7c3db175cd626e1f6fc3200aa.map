{"version":3,"names":["NavigationInstructions","instructions","currentLocation","cov_1ea1xd1ow1","f","currentStepIndex","setCurrentStepIndex","s","_react","useState","nextStepIndex","setNextStepIndex","currentStep","nextStep","calculateDistance","point1","point2","R","dLat","lat","Math","PI","dLon","lng","a","sin","cos","c","atan2","sqrt","useEffect","b","length","closestStepIndex","minDistance","Infinity","forEach","step","index","distance","coordinates","min","getManeuverIcon","maneuver","iconClass","toLowerCase","_jsxruntime","jsx","_lucidereact","ArrowLeft","className","ArrowRight","ArrowUp","RotateCcw","Navigation","getManeuverColor","jsxs","_card","Card","CardContent","_utils","cn","instruction","MapPin","Clock","duration","style","width","round"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\NavigationInstructions.tsx"],"sourcesContent":["/**\r\n * Componente de instrucciones de navegación turn-by-turn\r\n * Muestra direcciones paso a paso de forma clara y legible\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { \r\n  ArrowUp, \r\n  ArrowDown, \r\n  ArrowLeft, \r\n  ArrowRight,\r\n  RotateCcw,\r\n  Navigation,\r\n  MapPin,\r\n  Clock\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/core/utils';\r\n\r\ninterface NavigationStep {\r\n  instruction: string;\r\n  distance: string;\r\n  duration: string;\r\n  maneuver: string;\r\n  coordinates: { lat: number; lng: number };\r\n}\r\n\r\ninterface NavigationInstructionsProps {\r\n  instructions: NavigationStep[];\r\n  currentLocation: { lat: number; lng: number } | null;\r\n}\r\n\r\nexport function NavigationInstructions({\r\n  instructions,\r\n  currentLocation\r\n}: NavigationInstructionsProps) {\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n  const [nextStepIndex, setNextStepIndex] = useState(1);\r\n\r\n  const currentStep = instructions[currentStepIndex];\r\n  const nextStep = instructions[nextStepIndex];\r\n\r\n  // Calcular distancia entre dos puntos\r\n  const calculateDistance = (\r\n    point1: { lat: number; lng: number },\r\n    point2: { lat: number; lng: number }\r\n  ) => {\r\n    const R = 6371; // Radio de la Tierra en km\r\n    const dLat = (point2.lat - point1.lat) * Math.PI / 180;\r\n    const dLon = (point2.lng - point1.lng) * Math.PI / 180;\r\n    const a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c * 1000; // Convertir a metros\r\n  };\r\n\r\n  // Actualizar paso actual basado en la ubicación\r\n  useEffect(() => {\r\n    if (!currentLocation || !instructions.length) return;\r\n\r\n    // Encontrar el paso más cercano a la ubicación actual\r\n    let closestStepIndex = 0;\r\n    let minDistance = Infinity;\r\n\r\n    instructions.forEach((step, index) => {\r\n      const distance = calculateDistance(currentLocation, step.coordinates);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closestStepIndex = index;\r\n      }\r\n    });\r\n\r\n    // Solo actualizar si estamos cerca del siguiente paso (menos de 50 metros)\r\n    if (minDistance < 50 && closestStepIndex !== currentStepIndex) {\r\n      setCurrentStepIndex(closestStepIndex);\r\n      setNextStepIndex(Math.min(closestStepIndex + 1, instructions.length - 1));\r\n    }\r\n  }, [currentLocation, instructions]);\r\n\r\n  const getManeuverIcon = (maneuver: string) => {\r\n    const iconClass = \"h-8 w-8 text-white\";\r\n    \r\n    switch (maneuver.toLowerCase()) {\r\n      case 'turn-left':\r\n      case 'turn-slight-left':\r\n        return <ArrowLeft className={iconClass} />;\r\n      case 'turn-right':\r\n      case 'turn-slight-right':\r\n        return <ArrowRight className={iconClass} />;\r\n      case 'straight':\r\n      case 'continue':\r\n        return <ArrowUp className={iconClass} />;\r\n      case 'u-turn':\r\n        return <RotateCcw className={iconClass} />;\r\n      case 'roundabout':\r\n        return <RotateCcw className={iconClass} />;\r\n      default:\r\n        return <Navigation className={iconClass} />;\r\n    }\r\n  };\r\n\r\n  const getManeuverColor = (maneuver: string) => {\r\n    switch (maneuver.toLowerCase()) {\r\n      case 'turn-left':\r\n      case 'turn-slight-left':\r\n        return 'bg-blue-600';\r\n      case 'turn-right':\r\n      case 'turn-slight-right':\r\n        return 'bg-green-600';\r\n      case 'straight':\r\n      case 'continue':\r\n        return 'bg-gray-600';\r\n      case 'u-turn':\r\n        return 'bg-red-600';\r\n      case 'roundabout':\r\n        return 'bg-purple-600';\r\n      default:\r\n        return 'bg-blue-600';\r\n    }\r\n  };\r\n\r\n  if (!currentStep) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {/* Instrucción principal */}\r\n      <Card className=\"bg-white shadow-lg\">\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className={cn(\r\n              \"rounded-full p-3 flex-shrink-0\",\r\n              getManeuverColor(currentStep.maneuver)\r\n            )}>\r\n              {getManeuverIcon(currentStep.maneuver)}\r\n            </div>\r\n            \r\n            <div className=\"flex-1 min-w-0\">\r\n              <p className=\"text-lg font-semibold text-gray-900 leading-tight\">\r\n                {currentStep.instruction}\r\n              </p>\r\n              <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\r\n                <div className=\"flex items-center space-x-1\">\r\n                  <MapPin className=\"h-4 w-4\" />\r\n                  <span>{currentStep.distance}</span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-1\">\r\n                  <Clock className=\"h-4 w-4\" />\r\n                  <span>{currentStep.duration}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Próxima instrucción */}\r\n      {nextStep && nextStepIndex < instructions.length && (\r\n        <Card className=\"bg-gray-50 border-gray-200\">\r\n          <CardContent className=\"p-3\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className={cn(\r\n                \"rounded-full p-2 flex-shrink-0\",\r\n                getManeuverColor(nextStep.maneuver),\r\n                \"opacity-70\"\r\n              )}>\r\n                {getManeuverIcon(nextStep.maneuver)}\r\n              </div>\r\n              \r\n              <div className=\"flex-1 min-w-0\">\r\n                <p className=\"text-sm font-medium text-gray-700 leading-tight\">\r\n                  Luego: {nextStep.instruction}\r\n                </p>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  {nextStep.distance}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Progreso de la ruta */}\r\n      <Card className=\"bg-blue-50 border-blue-200\">\r\n        <CardContent className=\"p-3\">\r\n          <div className=\"flex items-center justify-between text-sm\">\r\n            <span className=\"text-blue-800 font-medium\">\r\n              Paso {currentStepIndex + 1} de {instructions.length}\r\n            </span>\r\n            <div className=\"flex-1 mx-3\">\r\n              <div className=\"bg-blue-200 rounded-full h-2\">\r\n                <div \r\n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                  style={{ \r\n                    width: `${((currentStepIndex + 1) / instructions.length) * 100}%` \r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <span className=\"text-blue-600 text-xs\">\r\n              {Math.round(((currentStepIndex + 1) / instructions.length) * 100)}%\r\n            </span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsgB;;;;;;WAAAA,sBAAA;;;;;;;;yEA3B2B;;;kCACT;;;kCAU3B;;;kCACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeZ,SAASA,uBAAuB;EACrCC,YAAY;EACZC;AAAe,CACa;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAC5B,MAAM,CAACC,gBAAA,EAAkBC,mBAAA,CAAoB;EAAA;EAAA,CAAAH,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAC;EACzD,MAAM,CAACC,aAAA,EAAeC,gBAAA,CAAiB;EAAA;EAAA,CAAAR,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAC;EAEnD,MAAMG,WAAA;EAAA;EAAA,CAAAT,cAAA,GAAAI,CAAA,QAAcN,YAAY,CAACI,gBAAA,CAAiB;EAClD,MAAMQ,QAAA;EAAA;EAAA,CAAAV,cAAA,GAAAI,CAAA,QAAWN,YAAY,CAACS,aAAA,CAAc;EAE5C;EAAA;EAAAP,cAAA,GAAAI,CAAA;EACA,MAAMO,iBAAA,GAAoBA,CACxBC,MAAA,EACAC,MAAA;IAAA;IAAAb,cAAA,GAAAC,CAAA;IAEA,MAAMa,CAAA;IAAA;IAAA,CAAAd,cAAA,GAAAI,CAAA,QAAI,OAAM;IAChB,MAAMW,IAAA;IAAA;IAAA,CAAAf,cAAA,GAAAI,CAAA,QAAO,CAACS,MAAA,CAAOG,GAAG,GAAGJ,MAAA,CAAOI,GAAG,IAAIC,IAAA,CAAKC,EAAE,GAAG;IACnD,MAAMC,IAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAI,CAAA,QAAO,CAACS,MAAA,CAAOO,GAAG,GAAGR,MAAA,CAAOQ,GAAG,IAAIH,IAAA,CAAKC,EAAE,GAAG;IACnD,MAAMG,CAAA;IAAA;IAAA,CAAArB,cAAA,GAAAI,CAAA,QACJa,IAAA,CAAKK,GAAG,CAACP,IAAA,GAAK,KAAKE,IAAA,CAAKK,GAAG,CAACP,IAAA,GAAK,KACjCE,IAAA,CAAKM,GAAG,CAACX,MAAA,CAAOI,GAAG,GAAGC,IAAA,CAAKC,EAAE,GAAG,OAAOD,IAAA,CAAKM,GAAG,CAACV,MAAA,CAAOG,GAAG,GAAGC,IAAA,CAAKC,EAAE,GAAG,OACvED,IAAA,CAAKK,GAAG,CAACH,IAAA,GAAK,KAAKF,IAAA,CAAKK,GAAG,CAACH,IAAA,GAAK;IACnC,MAAMK,CAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAI,CAAA,QAAI,IAAIa,IAAA,CAAKQ,KAAK,CAACR,IAAA,CAAKS,IAAI,CAACL,CAAA,GAAIJ,IAAA,CAAKS,IAAI,CAAC,IAAEL,CAAA;IAAA;IAAArB,cAAA,GAAAI,CAAA;IACnD,OAAOU,CAAA,GAAIU,CAAA,GAAI,MAAM;EACvB;EAEA;EAAA;EAAAxB,cAAA,GAAAI,CAAA;EACA,IAAAC,MAAA,CAAAsB,SAAS,EAAC;IAAA;IAAA3B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAI,CAAA;IACR;IAAI;IAAA,CAAAJ,cAAA,GAAA4B,CAAA,YAAC7B,eAAA;IAAA;IAAA,CAAAC,cAAA,GAAA4B,CAAA,WAAmB,CAAC9B,YAAA,CAAa+B,MAAM,GAAE;MAAA;MAAA7B,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAI,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAJ,cAAA,GAAA4B,CAAA;IAAA;IAE9C;IACA,IAAIE,gBAAA;IAAA;IAAA,CAAA9B,cAAA,GAAAI,CAAA,QAAmB;IACvB,IAAI2B,WAAA;IAAA;IAAA,CAAA/B,cAAA,GAAAI,CAAA,QAAc4B,QAAA;IAAA;IAAAhC,cAAA,GAAAI,CAAA;IAElBN,YAAA,CAAamC,OAAO,CAAC,CAACC,IAAA,EAAMC,KAAA;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MAC1B,MAAMmC,QAAA;MAAA;MAAA,CAAApC,cAAA,GAAAI,CAAA,QAAWO,iBAAA,CAAkBZ,eAAA,EAAiBmC,IAAA,CAAKG,WAAW;MAAA;MAAArC,cAAA,GAAAI,CAAA;MACpE,IAAIgC,QAAA,GAAWL,WAAA,EAAa;QAAA;QAAA/B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QAC1B2B,WAAA,GAAcK,QAAA;QAAA;QAAApC,cAAA,GAAAI,CAAA;QACd0B,gBAAA,GAAmBK,KAAA;MACrB;MAAA;MAAA;QAAAnC,cAAA,GAAA4B,CAAA;MAAA;IACF;IAEA;IAAA;IAAA5B,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAA4B,CAAA,WAAAG,WAAA,GAAc;IAAA;IAAA,CAAA/B,cAAA,GAAA4B,CAAA,WAAME,gBAAA,KAAqB5B,gBAAA,GAAkB;MAAA;MAAAF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAI,CAAA;MAC7DD,mBAAA,CAAoB2B,gBAAA;MAAA;MAAA9B,cAAA,GAAAI,CAAA;MACpBI,gBAAA,CAAiBS,IAAA,CAAKqB,GAAG,CAACR,gBAAA,GAAmB,GAAGhC,YAAA,CAAa+B,MAAM,GAAG;IACxE;IAAA;IAAA;MAAA7B,cAAA,GAAA4B,CAAA;IAAA;EACF,GAAG,CAAC7B,eAAA,EAAiBD,YAAA,CAAa;EAAA;EAAAE,cAAA,GAAAI,CAAA;EAElC,MAAMmC,eAAA,GAAmBC,QAAA;IAAA;IAAAxC,cAAA,GAAAC,CAAA;IACvB,MAAMwC,SAAA;IAAA;IAAA,CAAAzC,cAAA,GAAAI,CAAA,QAAY;IAAA;IAAAJ,cAAA,GAAAI,CAAA;IAElB,QAAQoC,QAAA,CAASE,WAAW;MAC1B,KAAK;QAAA;QAAA1C,cAAA,GAAA4B,CAAA;MACL,KAAK;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,oBAAO,IAAAuC,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAC,SAAS;UAACC,SAAA,EAAWN;;MAC/B,KAAK;QAAA;QAAAzC,cAAA,GAAA4B,CAAA;MACL,KAAK;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,oBAAO,IAAAuC,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAG,UAAU;UAACD,SAAA,EAAWN;;MAChC,KAAK;QAAA;QAAAzC,cAAA,GAAA4B,CAAA;MACL,KAAK;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,oBAAO,IAAAuC,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAI,OAAO;UAACF,SAAA,EAAWN;;MAC7B,KAAK;QAAA;QAAAzC,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,oBAAO,IAAAuC,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAK,SAAS;UAACH,SAAA,EAAWN;;MAC/B,KAAK;QAAA;QAAAzC,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,oBAAO,IAAAuC,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAK,SAAS;UAACH,SAAA,EAAWN;;MAC/B;QAAA;QAAAzC,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACE,oBAAO,IAAAuC,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAM,UAAU;UAACJ,SAAA,EAAWN;;IAClC;EACF;EAAA;EAAAzC,cAAA,GAAAI,CAAA;EAEA,MAAMgD,gBAAA,GAAoBZ,QAAA;IAAA;IAAAxC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAI,CAAA;IACxB,QAAQoC,QAAA,CAASE,WAAW;MAC1B,KAAK;QAAA;QAAA1C,cAAA,GAAA4B,CAAA;MACL,KAAK;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAAJ,cAAA,GAAA4B,CAAA;MACL,KAAK;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAAJ,cAAA,GAAA4B,CAAA;MACL,KAAK;QAAA;QAAA5B,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAAJ,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAAJ,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACH,OAAO;MACT;QAAA;QAAAJ,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAI,CAAA;QACE,OAAO;IACX;EACF;EAAA;EAAAJ,cAAA,GAAAI,CAAA;EAEA,IAAI,CAACK,WAAA,EAAa;IAAA;IAAAT,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAI,CAAA;IAChB,OAAO;EACT;EAAA;EAAA;IAAAJ,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAI,CAAA;EAEA,oBACE,IAAAuC,WAAA,CAAAU,IAAA,EAAC;IAAIN,SAAA,EAAU;4BAEb,IAAAJ,WAAA,CAAAC,GAAA,EAACU,KAAA,CAAAC,IAAI;MAACR,SAAA,EAAU;gBACd,iBAAAJ,WAAA,CAAAC,GAAA,EAACU,KAAA,CAAAE,WAAW;QAACT,SAAA,EAAU;kBACrB,iBAAAJ,WAAA,CAAAU,IAAA,EAAC;UAAIN,SAAA,EAAU;kCACb,IAAAJ,WAAA,CAAAC,GAAA,EAAC;YAAIG,SAAA,EAAW,IAAAU,MAAA,CAAAC,EAAE,EAChB,kCACAN,gBAAA,CAAiB3C,WAAA,CAAY+B,QAAQ;sBAEpCD,eAAA,CAAgB9B,WAAA,CAAY+B,QAAQ;2BAGvC,IAAAG,WAAA,CAAAU,IAAA,EAAC;YAAIN,SAAA,EAAU;oCACb,IAAAJ,WAAA,CAAAC,GAAA,EAAC;cAAEG,SAAA,EAAU;wBACVtC,WAAA,CAAYkD;6BAEf,IAAAhB,WAAA,CAAAU,IAAA,EAAC;cAAIN,SAAA,EAAU;sCACb,IAAAJ,WAAA,CAAAU,IAAA,EAAC;gBAAIN,SAAA,EAAU;wCACb,IAAAJ,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAe,MAAM;kBAACb,SAAA,EAAU;iCAClB,IAAAJ,WAAA,CAAAC,GAAA,EAAC;4BAAMnC,WAAA,CAAY2B;;+BAErB,IAAAO,WAAA,CAAAU,IAAA,EAAC;gBAAIN,SAAA,EAAU;wCACb,IAAAJ,WAAA,CAAAC,GAAA,EAACC,YAAA,CAAAgB,KAAK;kBAACd,SAAA,EAAU;iCACjB,IAAAJ,WAAA,CAAAC,GAAA,EAAC;4BAAMnC,WAAA,CAAYqD;;;;;;;;IAS9B;IAAA,CAAA9D,cAAA,GAAA4B,CAAA,WAAAlB,QAAA;IAAA;IAAA,CAAAV,cAAA,GAAA4B,CAAA,WAAYrB,aAAA,GAAgBT,YAAA,CAAa+B,MAAM;IAAA;IAAA,CAAA7B,cAAA,GAAA4B,CAAA,wBAC9C,IAAAe,WAAA,CAAAC,GAAA,EAACU,KAAA,CAAAC,IAAI;MAACR,SAAA,EAAU;gBACd,iBAAAJ,WAAA,CAAAC,GAAA,EAACU,KAAA,CAAAE,WAAW;QAACT,SAAA,EAAU;kBACrB,iBAAAJ,WAAA,CAAAU,IAAA,EAAC;UAAIN,SAAA,EAAU;kCACb,IAAAJ,WAAA,CAAAC,GAAA,EAAC;YAAIG,SAAA,EAAW,IAAAU,MAAA,CAAAC,EAAE,EAChB,kCACAN,gBAAA,CAAiB1C,QAAA,CAAS8B,QAAQ,GAClC;sBAECD,eAAA,CAAgB7B,QAAA,CAAS8B,QAAQ;2BAGpC,IAAAG,WAAA,CAAAU,IAAA,EAAC;YAAIN,SAAA,EAAU;oCACb,IAAAJ,WAAA,CAAAU,IAAA,EAAC;cAAEN,SAAA,EAAU;yBAAkD,WACrDrC,QAAA,CAASiD,WAAW;6BAE9B,IAAAhB,WAAA,CAAAC,GAAA,EAAC;cAAEG,SAAA,EAAU;wBACVrC,QAAA,CAAS0B;;;;;sBAStB,IAAAO,WAAA,CAAAC,GAAA,EAACU,KAAA,CAAAC,IAAI;MAACR,SAAA,EAAU;gBACd,iBAAAJ,WAAA,CAAAC,GAAA,EAACU,KAAA,CAAAE,WAAW;QAACT,SAAA,EAAU;kBACrB,iBAAAJ,WAAA,CAAAU,IAAA,EAAC;UAAIN,SAAA,EAAU;kCACb,IAAAJ,WAAA,CAAAU,IAAA,EAAC;YAAKN,SAAA,EAAU;uBAA4B,SACpC7C,gBAAA,GAAmB,GAAE,QAAKJ,YAAA,CAAa+B,MAAM;2BAErD,IAAAc,WAAA,CAAAC,GAAA,EAAC;YAAIG,SAAA,EAAU;sBACb,iBAAAJ,WAAA,CAAAC,GAAA,EAAC;cAAIG,SAAA,EAAU;wBACb,iBAAAJ,WAAA,CAAAC,GAAA,EAAC;gBACCG,SAAA,EAAU;gBACVgB,KAAA,EAAO;kBACLC,KAAA,EAAO,GAAG,CAAE9D,gBAAA,GAAmB,KAAKJ,YAAA,CAAa+B,MAAM,GAAI;gBAC7D;;;2BAIN,IAAAc,WAAA,CAAAU,IAAA,EAAC;YAAKN,SAAA,EAAU;uBACb9B,IAAA,CAAKgD,KAAK,CAAC,CAAE/D,gBAAA,GAAmB,KAAKJ,YAAA,CAAa+B,MAAM,GAAI,MAAK;;;;;;AAOhF","ignoreList":[]}