{"version":3,"names":["DynamicSitemapGenerator","cov_2fho5ia9mg","f","s","EnhancedDynamicSitemapGenerator","enhancedDynamicSitemapGenerator","DEFAULT_SITEMAP_CONFIG","baseUrl","b","process","env","NEXT_PUBLIC_SITE_URL","maxUrlsPerSitemap","enableImages","enableVideos","enableNews","enableCompression","enableIndexSitemap","cacheEnabled","cacheTTL","priorities","homepage","categories","products","staticPages","blogPosts","searchPages","changeFrequencies","excludePatterns","searchEngineNotifications","google","enabled","bing","yandex","performanceAnalysis","trackGenerationTime","trackCacheHitRate","trackUrlDiscovery","constructor","config","cache","Map","stats","totalUrls","totalSitemaps","productPages","categoryPages","blogPages","lastGenerated","Date","generationTime","fileSize","cacheHitRate","urlDiscoveryTime","errors","warnings","initializeRedis","_logger","logger","info","LogLevel","INFO","LogCategory","SEO","getInstance","instance","redis","_redis","getRedisClient","error","warn","WARN","generateSitemap","startTime","now","cachedSitemap","getCachedSitemap","updateCacheStats","urlDiscoveryStart","allEntries","collectAllUrls","sitemaps","splitIntoSitemaps","sitemapUrls","length","xml","generateSitemapXML","filename","saveSitemap","push","i","indexXml","generateSitemapIndexXML","updateStats","cacheSitemap","notifySearchEngines","message","ERROR","entries","staticEntries","getStaticPages","productEntries","getProductPages","categoryEntries","getCategoryPages","blogEntries","getBlogPages","filteredEntries","filterExcludedUrls","sort","a","priority","lastModified","getTime","path","changeFreq","map","page","url","changeFrequency","supabase","_supabase","getSupabaseClient","data","from","select","eq","order","ascending","product","slug","updated_at","images","slice","img","caption","name","title","undefined","category","image","filter","entry","URL","pathname","some","pattern","endsWith","startsWith","maxUrls","xmlHeader","urlsetOpen","urls","generateUrlXML","join","urlsetClose","escapeXml","toISOString","split","toFixed","forEach","sitemapIndexOpen","sitemapIndexClose","text","replace","cached","get","JSON","parse","timestamp","cacheData","setex","stringify","set","content","Buffer","byteLength","size","match","sitemapUrl","notifications","notifyGoogle","notifyBing","notifyYandex","Promise","allSettled","pingUrl","encodeURIComponent","sitemapCount","compressionRatio","isHit","totalRequests","hits","getStats","configure","clearCache","del","clear","validateSitemap","includes","urlMatches","urlCount","locMatches","index","isValid","generateReport","recommendations","summary","performance","cacheEfficiency","destroy"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\seo\\dynamic-sitemap-generator.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENHANCED DYNAMIC SITEMAP GENERATOR\r\n// Sistema avanzado de generación automática de sitemap con priorización inteligente\r\n// Incluye notificaciones a motores de búsqueda, cache multi-capa y análisis de performance\r\n// ===================================\r\n\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\nimport { getRedisClient } from '@/lib/integrations/redis';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS MEJORADOS\r\n// ===================================\r\n\r\nexport interface SitemapEntry {\r\n  url: string;\r\n  lastModified: Date;\r\n  changeFrequency: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';\r\n  priority: number;\r\n  images?: SitemapImage[];\r\n  videos?: SitemapVideo[];\r\n  news?: SitemapNews[];\r\n  alternateLanguages?: SitemapAlternate[];\r\n}\r\n\r\nexport interface SitemapImage {\r\n  url: string;\r\n  caption?: string;\r\n  title?: string;\r\n  geoLocation?: string;\r\n  license?: string;\r\n}\r\n\r\nexport interface SitemapVideo {\r\n  url: string;\r\n  thumbnailUrl: string;\r\n  title: string;\r\n  description: string;\r\n  duration?: number;\r\n  rating?: number;\r\n  viewCount?: number;\r\n  publicationDate?: Date;\r\n  familyFriendly?: boolean;\r\n  tags?: string[];\r\n}\r\n\r\nexport interface SitemapNews {\r\n  title: string;\r\n  publicationDate: Date;\r\n  language: string;\r\n  keywords?: string;\r\n  genres?: string;\r\n  stockTickers?: string;\r\n}\r\n\r\nexport interface SitemapAlternate {\r\n  hreflang: string;\r\n  href: string;\r\n}\r\n\r\nexport interface SitemapConfig {\r\n  baseUrl: string;\r\n  maxUrlsPerSitemap: number;\r\n  enableImages: boolean;\r\n  enableVideos: boolean;\r\n  enableNews: boolean;\r\n  enableCompression: boolean;\r\n  enableIndexSitemap: boolean;\r\n  cacheEnabled: boolean;\r\n  cacheTTL: number; // segundos\r\n  \r\n  // Configuración de prioridades inteligentes\r\n  priorities: {\r\n    homepage: number;\r\n    categories: number;\r\n    products: number;\r\n    staticPages: number;\r\n    blogPosts: number;\r\n    searchPages: number;\r\n  };\r\n  \r\n  // Configuración de frecuencias de cambio\r\n  changeFrequencies: {\r\n    homepage: SitemapEntry['changeFrequency'];\r\n    categories: SitemapEntry['changeFrequency'];\r\n    products: SitemapEntry['changeFrequency'];\r\n    staticPages: SitemapEntry['changeFrequency'];\r\n    blogPosts: SitemapEntry['changeFrequency'];\r\n    searchPages: SitemapEntry['changeFrequency'];\r\n  };\r\n  \r\n  // Rutas a excluir\r\n  excludePatterns: string[];\r\n  \r\n  // Configuración de notificaciones a motores de búsqueda\r\n  searchEngineNotifications: {\r\n    google: { enabled: boolean; apiKey?: string };\r\n    bing: { enabled: boolean; apiKey?: string };\r\n    yandex: { enabled: boolean; apiKey?: string };\r\n  };\r\n  \r\n  // Configuración de análisis de performance\r\n  performanceAnalysis: {\r\n    enabled: boolean;\r\n    trackGenerationTime: boolean;\r\n    trackCacheHitRate: boolean;\r\n    trackUrlDiscovery: boolean;\r\n  };\r\n}\r\n\r\nexport interface SitemapStats {\r\n  totalUrls: number;\r\n  totalSitemaps: number;\r\n  staticPages: number;\r\n  productPages: number;\r\n  categoryPages: number;\r\n  blogPages: number;\r\n  lastGenerated: Date;\r\n  generationTime: number; // milliseconds\r\n  fileSize: number;\r\n  compressionRatio?: number;\r\n  cacheHitRate: number;\r\n  urlDiscoveryTime: number;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\nexport interface ProductData {\r\n  id: number;\r\n  slug: string;\r\n  name: string;\r\n  updatedAt: Date;\r\n  images?: string[];\r\n  category?: {\r\n    slug: string;\r\n    name: string;\r\n  };\r\n  isActive?: boolean;\r\n  stock?: number;\r\n}\r\n\r\nexport interface CategoryData {\r\n  id: number;\r\n  slug: string;\r\n  name: string;\r\n  updatedAt: Date;\r\n  image?: string;\r\n  productsCount?: number;\r\n  isActive?: boolean;\r\n}\r\n\r\nexport interface BlogData {\r\n  id: number;\r\n  slug: string;\r\n  title: string;\r\n  publishedAt: Date;\r\n  updatedAt: Date;\r\n  featuredImage?: string;\r\n  isPublished?: boolean;\r\n}\r\n\r\n// Configuración por defecto mejorada\r\nconst DEFAULT_SITEMAP_CONFIG: SitemapConfig = {\r\n  baseUrl: process.env.NEXT_PUBLIC_SITE_URL || 'https://pinteya-ecommerce.vercel.app',\r\n  maxUrlsPerSitemap: 50000,\r\n  enableImages: true,\r\n  enableVideos: false,\r\n  enableNews: false,\r\n  enableCompression: true,\r\n  enableIndexSitemap: true,\r\n  cacheEnabled: true,\r\n  cacheTTL: 3600, // 1 hora\r\n  \r\n  priorities: {\r\n    homepage: 1.0,\r\n    categories: 0.8,\r\n    products: 0.7,\r\n    staticPages: 0.6,\r\n    blogPosts: 0.5,\r\n    searchPages: 0.4\r\n  },\r\n  \r\n  changeFrequencies: {\r\n    homepage: 'daily',\r\n    categories: 'weekly',\r\n    products: 'weekly',\r\n    staticPages: 'monthly',\r\n    blogPosts: 'weekly',\r\n    searchPages: 'monthly'\r\n  },\r\n  \r\n  excludePatterns: [\r\n    '/admin',\r\n    '/api',\r\n    '/auth',\r\n    '/checkout',\r\n    '/cart',\r\n    '/_next',\r\n    '/test',\r\n    '/debug',\r\n    '/clerk-status',\r\n    '/demo'\r\n  ],\r\n  \r\n  searchEngineNotifications: {\r\n    google: { enabled: true },\r\n    bing: { enabled: true },\r\n    yandex: { enabled: false }\r\n  },\r\n  \r\n  performanceAnalysis: {\r\n    enabled: true,\r\n    trackGenerationTime: true,\r\n    trackCacheHitRate: true,\r\n    trackUrlDiscovery: true\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ENHANCED DYNAMIC SITEMAP GENERATOR CLASS\r\n// ===================================\r\n\r\nexport class EnhancedDynamicSitemapGenerator {\r\n  private static instance: EnhancedDynamicSitemapGenerator;\r\n  private config: SitemapConfig;\r\n  private redis: any;\r\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\r\n  private stats: SitemapStats;\r\n\r\n  private constructor(config?: Partial<SitemapConfig>) {\r\n    this.config = { ...DEFAULT_SITEMAP_CONFIG, ...config };\r\n    \r\n    this.stats = {\r\n      totalUrls: 0,\r\n      totalSitemaps: 0,\r\n      staticPages: 0,\r\n      productPages: 0,\r\n      categoryPages: 0,\r\n      blogPages: 0,\r\n      lastGenerated: new Date(),\r\n      generationTime: 0,\r\n      fileSize: 0,\r\n      cacheHitRate: 0,\r\n      urlDiscoveryTime: 0,\r\n      errors: [],\r\n      warnings: []\r\n    };\r\n    \r\n    this.initializeRedis();\r\n\r\n    logger.info(LogLevel.INFO, 'Enhanced Dynamic Sitemap Generator initialized', {\r\n      baseUrl: this.config.baseUrl,\r\n      maxUrlsPerSitemap: this.config.maxUrlsPerSitemap,\r\n      cacheEnabled: this.config.cacheEnabled,\r\n      enableImages: this.config.enableImages\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  public static getInstance(config?: Partial<SitemapConfig>): EnhancedDynamicSitemapGenerator {\r\n    if (!EnhancedDynamicSitemapGenerator.instance) {\r\n      EnhancedDynamicSitemapGenerator.instance = new EnhancedDynamicSitemapGenerator(config);\r\n    }\r\n    return EnhancedDynamicSitemapGenerator.instance;\r\n  }\r\n\r\n  private async initializeRedis(): Promise<void> {\r\n    try {\r\n      this.redis = await getRedisClient();\r\n      logger.info(LogLevel.INFO, 'Redis initialized for sitemap generator', {}, LogCategory.SEO);\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Redis not available for sitemap generator', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS PRINCIPALES DE GENERACIÓN\r\n  // ===================================\r\n\r\n  /**\r\n   * Generar sitemap completo con análisis de performance\r\n   */\r\n  public async generateSitemap(): Promise<string[]> {\r\n    const startTime = Date.now();\r\n    this.stats.errors = [];\r\n    this.stats.warnings = [];\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Starting enhanced sitemap generation', {}, LogCategory.SEO);\r\n\r\n      // Verificar cache\r\n      const cachedSitemap = await this.getCachedSitemap();\r\n      if (cachedSitemap) {\r\n        this.updateCacheStats(true);\r\n        logger.info(LogLevel.INFO, 'Sitemap served from cache', {}, LogCategory.SEO);\r\n        return cachedSitemap;\r\n      }\r\n\r\n      this.updateCacheStats(false);\r\n\r\n      // Recopilar todas las URLs con análisis de tiempo\r\n      const urlDiscoveryStart = Date.now();\r\n      const allEntries = await this.collectAllUrls();\r\n      this.stats.urlDiscoveryTime = Date.now() - urlDiscoveryStart;\r\n\r\n      // Dividir en múltiples sitemaps si es necesario\r\n      const sitemaps = this.splitIntoSitemaps(allEntries);\r\n\r\n      // Generar XML para cada sitemap\r\n      const sitemapUrls: string[] = [];\r\n\r\n      if (sitemaps.length === 1) {\r\n        // Sitemap único\r\n        const xml = this.generateSitemapXML(sitemaps[0]);\r\n        const filename = 'sitemap.xml';\r\n        await this.saveSitemap(filename, xml);\r\n        sitemapUrls.push(`${this.config.baseUrl}/${filename}`);\r\n      } else {\r\n        // Múltiples sitemaps + índice\r\n        for (let i = 0; i < sitemaps.length; i++) {\r\n          const xml = this.generateSitemapXML(sitemaps[i]);\r\n          const filename = `sitemap-${i + 1}.xml`;\r\n          await this.saveSitemap(filename, xml);\r\n          sitemapUrls.push(`${this.config.baseUrl}/${filename}`);\r\n        }\r\n\r\n        // Generar sitemap índice\r\n        if (this.config.enableIndexSitemap) {\r\n          const indexXml = this.generateSitemapIndexXML(sitemapUrls);\r\n          await this.saveSitemap('sitemap.xml', indexXml);\r\n        }\r\n      }\r\n\r\n      // Actualizar estadísticas\r\n      this.updateStats(allEntries, sitemaps.length, Date.now() - startTime);\r\n\r\n      // Cachear resultado\r\n      await this.cacheSitemap(sitemapUrls);\r\n\r\n      // Notificar a motores de búsqueda\r\n      await this.notifySearchEngines();\r\n\r\n      logger.info(LogLevel.INFO, 'Enhanced sitemap generation completed', {\r\n        totalUrls: this.stats.totalUrls,\r\n        totalSitemaps: this.stats.totalSitemaps,\r\n        generationTime: this.stats.generationTime,\r\n        cacheHitRate: this.stats.cacheHitRate\r\n      }, LogCategory.SEO);\r\n\r\n      return sitemapUrls;\r\n\r\n    } catch (error) {\r\n      this.stats.errors.push((error as Error).message);\r\n      logger.error(LogLevel.ERROR, 'Failed to generate enhanced sitemap', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recopilar todas las URLs del sitio\r\n   */\r\n  private async collectAllUrls(): Promise<SitemapEntry[]> {\r\n    const entries: SitemapEntry[] = [];\r\n\r\n    try {\r\n      // URLs estáticas\r\n      const staticEntries = await this.getStaticPages();\r\n      entries.push(...staticEntries);\r\n      this.stats.staticPages = staticEntries.length;\r\n\r\n      // URLs de productos\r\n      const productEntries = await this.getProductPages();\r\n      entries.push(...productEntries);\r\n\r\n      // URLs de categorías\r\n      const categoryEntries = await this.getCategoryPages();\r\n      entries.push(...categoryEntries);\r\n\r\n      // URLs de blog (si existen)\r\n      const blogEntries = await this.getBlogPages();\r\n      entries.push(...blogEntries);\r\n\r\n      // Actualizar estadísticas después de recopilar todas las URLs\r\n      this.stats.staticPages = staticEntries.length;\r\n      this.stats.productPages = productEntries.length;\r\n      this.stats.categoryPages = categoryEntries.length;\r\n      this.stats.blogPages = blogEntries.length;\r\n\r\n      // Filtrar URLs excluidas\r\n      const filteredEntries = this.filterExcludedUrls(entries);\r\n\r\n      // Ordenar por prioridad y fecha de modificación\r\n      filteredEntries.sort((a, b) => {\r\n        if (a.priority !== b.priority) {\r\n          return b.priority - a.priority;\r\n        }\r\n        return b.lastModified.getTime() - a.lastModified.getTime();\r\n      });\r\n\r\n      return filteredEntries;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to collect URLs', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener páginas estáticas\r\n   */\r\n  private async getStaticPages(): Promise<SitemapEntry[]> {\r\n    const staticPages = [\r\n      {\r\n        path: '/',\r\n        priority: this.config.priorities.homepage,\r\n        changeFreq: this.config.changeFrequencies.homepage,\r\n        lastModified: new Date()\r\n      },\r\n      {\r\n        path: '/shop',\r\n        priority: this.config.priorities.staticPages,\r\n        changeFreq: this.config.changeFrequencies.staticPages,\r\n        lastModified: new Date()\r\n      },\r\n      {\r\n        path: '/about',\r\n        priority: this.config.priorities.staticPages,\r\n        changeFreq: this.config.changeFrequencies.staticPages,\r\n        lastModified: new Date()\r\n      },\r\n      {\r\n        path: '/contact',\r\n        priority: this.config.priorities.staticPages,\r\n        changeFreq: this.config.changeFrequencies.staticPages,\r\n        lastModified: new Date()\r\n      },\r\n      {\r\n        path: '/help',\r\n        priority: this.config.priorities.staticPages,\r\n        changeFreq: this.config.changeFrequencies.staticPages,\r\n        lastModified: new Date()\r\n      },\r\n      {\r\n        path: '/search',\r\n        priority: this.config.priorities.searchPages,\r\n        changeFreq: this.config.changeFrequencies.searchPages,\r\n        lastModified: new Date()\r\n      }\r\n    ];\r\n\r\n    return staticPages.map(page => ({\r\n      url: `${this.config.baseUrl}${page.path}`,\r\n      lastModified: page.lastModified,\r\n      changeFrequency: page.changeFreq,\r\n      priority: page.priority\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Obtener páginas de productos desde la base de datos\r\n   */\r\n  private async getProductPages(): Promise<SitemapEntry[]> {\r\n    try {\r\n      const supabase = getSupabaseClient();\r\n      if (!supabase) {\r\n        this.stats.warnings.push('Supabase client not available for product pages');\r\n        return [];\r\n      }\r\n\r\n      const { data: products, error } = await supabase\r\n        .from('products')\r\n        .select(`\r\n          id, slug, name, updated_at, images,\r\n          category:categories(slug, name)\r\n        `)\r\n        .eq('is_active', true)\r\n        .order('updated_at', { ascending: false });\r\n\r\n      if (error) {\r\n        logger.error(LogLevel.ERROR, 'Failed to fetch products for sitemap', error, LogCategory.SEO);\r\n        this.stats.errors.push(`Product fetch error: ${error.message}`);\r\n        return [];\r\n      }\r\n\r\n      const productEntries = (products || []).map(product => ({\r\n        url: `${this.config.baseUrl}/shop-details/${product.slug}`,\r\n        lastModified: new Date(product.updated_at),\r\n        changeFrequency: this.config.changeFrequencies.products,\r\n        priority: this.config.priorities.products,\r\n        images: this.config.enableImages && product.images ? product.images.slice(0, 3).map((img: string) => ({\r\n          url: `${this.config.baseUrl}${img}`,\r\n          caption: product.name,\r\n          title: product.name\r\n        })) : undefined\r\n      }));\r\n\r\n      return productEntries;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error fetching product pages', error as Error, LogCategory.SEO);\r\n      this.stats.errors.push(`Product pages error: ${(error as Error).message}`);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener páginas de categorías desde la base de datos\r\n   */\r\n  private async getCategoryPages(): Promise<SitemapEntry[]> {\r\n    try {\r\n      const supabase = getSupabaseClient();\r\n      if (!supabase) {\r\n        this.stats.warnings.push('Supabase client not available for category pages');\r\n        return [];\r\n      }\r\n\r\n      const { data: categories, error } = await supabase\r\n        .from('categories')\r\n        .select(`\r\n          id, slug, name, updated_at, image,\r\n          products_count:products(count)\r\n        `)\r\n        .order('name');\r\n\r\n      if (error) {\r\n        logger.error(LogLevel.ERROR, 'Failed to fetch categories for sitemap', error, LogCategory.SEO);\r\n        this.stats.errors.push(`Category fetch error: ${error.message}`);\r\n        return [];\r\n      }\r\n\r\n      return (categories || []).map(category => ({\r\n        url: `${this.config.baseUrl}/shop?category=${category.slug}`,\r\n        lastModified: new Date(category.updated_at || new Date()),\r\n        changeFrequency: this.config.changeFrequencies.categories,\r\n        priority: this.config.priorities.categories,\r\n        images: this.config.enableImages && category.image ? [{\r\n          url: `${this.config.baseUrl}${category.image}`,\r\n          caption: category.name,\r\n          title: category.name\r\n        }] : undefined\r\n      }));\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error fetching category pages', error as Error, LogCategory.SEO);\r\n      this.stats.errors.push(`Category pages error: ${(error as Error).message}`);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener páginas de blog (placeholder para futuras implementaciones)\r\n   */\r\n  private async getBlogPages(): Promise<SitemapEntry[]> {\r\n    // Por ahora retornamos array vacío, pero se puede implementar cuando se agregue blog\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Filtrar URLs excluidas según patrones configurados\r\n   */\r\n  private filterExcludedUrls(entries: SitemapEntry[]): SitemapEntry[] {\r\n    return entries.filter(entry => {\r\n      const url = new URL(entry.url);\r\n      const path = url.pathname;\r\n\r\n      return !this.config.excludePatterns.some(pattern => {\r\n        if (pattern.endsWith('*')) {\r\n          return path.startsWith(pattern.slice(0, -1));\r\n        }\r\n        return path === pattern || path.startsWith(pattern + '/');\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dividir entradas en múltiples sitemaps si exceden el límite\r\n   */\r\n  private splitIntoSitemaps(entries: SitemapEntry[]): SitemapEntry[][] {\r\n    const sitemaps: SitemapEntry[][] = [];\r\n    const maxUrls = this.config.maxUrlsPerSitemap;\r\n\r\n    for (let i = 0; i < entries.length; i += maxUrls) {\r\n      sitemaps.push(entries.slice(i, i + maxUrls));\r\n    }\r\n\r\n    return sitemaps.length > 0 ? sitemaps : [[]];\r\n  }\r\n\r\n  /**\r\n   * Generar XML para un sitemap\r\n   */\r\n  private generateSitemapXML(entries: SitemapEntry[]): string {\r\n    const xmlHeader = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\r\n    const urlsetOpen = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"' +\r\n      (this.config.enableImages ? ' xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"' : '') +\r\n      (this.config.enableVideos ? ' xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"' : '') +\r\n      (this.config.enableNews ? ' xmlns:news=\"http://www.google.com/schemas/sitemap-news/0.9\"' : '') +\r\n      '>\\n';\r\n\r\n    const urls = entries.map(entry => this.generateUrlXML(entry)).join('');\r\n    const urlsetClose = '</urlset>';\r\n\r\n    return xmlHeader + urlsetOpen + urls + urlsetClose;\r\n  }\r\n\r\n  /**\r\n   * Generar XML para una URL individual\r\n   */\r\n  private generateUrlXML(entry: SitemapEntry): string {\r\n    let xml = '  <url>\\n';\r\n    xml += `    <loc>${this.escapeXml(entry.url)}</loc>\\n`;\r\n    xml += `    <lastmod>${entry.lastModified.toISOString().split('T')[0]}</lastmod>\\n`;\r\n    xml += `    <changefreq>${entry.changeFrequency}</changefreq>\\n`;\r\n    xml += `    <priority>${entry.priority.toFixed(1)}</priority>\\n`;\r\n\r\n    // Agregar imágenes si están habilitadas\r\n    if (this.config.enableImages && entry.images) {\r\n      entry.images.forEach(image => {\r\n        xml += '    <image:image>\\n';\r\n        xml += `      <image:loc>${this.escapeXml(image.url)}</image:loc>\\n`;\r\n        if (image.caption) {\r\n          xml += `      <image:caption>${this.escapeXml(image.caption)}</image:caption>\\n`;\r\n        }\r\n        if (image.title) {\r\n          xml += `      <image:title>${this.escapeXml(image.title)}</image:title>\\n`;\r\n        }\r\n        xml += '    </image:image>\\n';\r\n      });\r\n    }\r\n\r\n    xml += '  </url>\\n';\r\n    return xml;\r\n  }\r\n\r\n  /**\r\n   * Generar XML para sitemap índice\r\n   */\r\n  private generateSitemapIndexXML(sitemapUrls: string[]): string {\r\n    const xmlHeader = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\r\n    const sitemapIndexOpen = '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n';\r\n\r\n    const sitemaps = sitemapUrls.map(url => {\r\n      return `  <sitemap>\\n` +\r\n             `    <loc>${this.escapeXml(url)}</loc>\\n` +\r\n             `    <lastmod>${new Date().toISOString().split('T')[0]}</lastmod>\\n` +\r\n             `  </sitemap>\\n`;\r\n    }).join('');\r\n\r\n    const sitemapIndexClose = '</sitemapindex>';\r\n\r\n    return xmlHeader + sitemapIndexOpen + sitemaps + sitemapIndexClose;\r\n  }\r\n\r\n  /**\r\n   * Escapar caracteres especiales para XML\r\n   */\r\n  private escapeXml(text: string): string {\r\n    return text\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&#39;');\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE CACHE Y PERSISTENCIA\r\n  // ===================================\r\n\r\n  /**\r\n   * Obtener sitemap desde cache\r\n   */\r\n  private async getCachedSitemap(): Promise<string[] | null> {\r\n    if (!this.config.cacheEnabled) {return null;}\r\n\r\n    try {\r\n      // Intentar Redis primero\r\n      if (this.redis) {\r\n        const cached = await this.redis.get('sitemap:urls');\r\n        if (cached) {\r\n          const data = JSON.parse(cached);\r\n          if (Date.now() - data.timestamp < this.config.cacheTTL * 1000) {\r\n            return data.urls;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Fallback a cache en memoria\r\n      const cached = this.cache.get('sitemap:urls');\r\n      if (cached && Date.now() - cached.timestamp < this.config.cacheTTL * 1000) {\r\n        return cached.data;\r\n      }\r\n\r\n      return null;\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error accessing sitemap cache', {}, LogCategory.SEO);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cachear sitemap generado\r\n   */\r\n  private async cacheSitemap(urls: string[]): Promise<void> {\r\n    if (!this.config.cacheEnabled) {return;}\r\n\r\n    const cacheData = {\r\n      urls,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    try {\r\n      // Cachear en Redis\r\n      if (this.redis) {\r\n        await this.redis.setex('sitemap:urls', this.config.cacheTTL, JSON.stringify(cacheData));\r\n      }\r\n\r\n      // Cachear en memoria como fallback\r\n      this.cache.set('sitemap:urls', cacheData);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error caching sitemap', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guardar sitemap en el sistema de archivos\r\n   */\r\n  private async saveSitemap(filename: string, content: string): Promise<void> {\r\n    try {\r\n      // En un entorno real, esto guardaría el archivo en el sistema de archivos\r\n      // Por ahora, solo calculamos el tamaño para estadísticas\r\n      this.stats.fileSize += Buffer.byteLength(content, 'utf8');\r\n\r\n      logger.info(LogLevel.INFO, `Sitemap saved: ${filename}`, {\r\n        size: Buffer.byteLength(content, 'utf8'),\r\n        urls: (content.match(/<url>/g) || []).length\r\n      }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to save sitemap: ${filename}`, error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // NOTIFICACIONES A MOTORES DE BÚSQUEDA\r\n  // ===================================\r\n\r\n  /**\r\n   * Notificar a motores de búsqueda sobre sitemap actualizado\r\n   */\r\n  private async notifySearchEngines(): Promise<void> {\r\n    const sitemapUrl = `${this.config.baseUrl}/sitemap.xml`;\r\n\r\n    try {\r\n      const notifications: Promise<void>[] = [];\r\n\r\n      // Google Search Console\r\n      if (this.config.searchEngineNotifications.google.enabled) {\r\n        notifications.push(this.notifyGoogle(sitemapUrl));\r\n      }\r\n\r\n      // Bing Webmaster Tools\r\n      if (this.config.searchEngineNotifications.bing.enabled) {\r\n        notifications.push(this.notifyBing(sitemapUrl));\r\n      }\r\n\r\n      // Yandex Webmaster\r\n      if (this.config.searchEngineNotifications.yandex.enabled) {\r\n        notifications.push(this.notifyYandex(sitemapUrl));\r\n      }\r\n\r\n      await Promise.allSettled(notifications);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error notifying search engines', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar a Google\r\n   */\r\n  private async notifyGoogle(sitemapUrl: string): Promise<void> {\r\n    try {\r\n      const pingUrl = `https://www.google.com/ping?sitemap=${encodeURIComponent(sitemapUrl)}`;\r\n\r\n      // En un entorno real, haríamos una petición HTTP\r\n      logger.info(LogLevel.INFO, 'Google sitemap notification sent', { sitemapUrl }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Failed to notify Google', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar a Bing\r\n   */\r\n  private async notifyBing(sitemapUrl: string): Promise<void> {\r\n    try {\r\n      const pingUrl = `https://www.bing.com/ping?sitemap=${encodeURIComponent(sitemapUrl)}`;\r\n\r\n      // En un entorno real, haríamos una petición HTTP\r\n      logger.info(LogLevel.INFO, 'Bing sitemap notification sent', { sitemapUrl }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Failed to notify Bing', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar a Yandex\r\n   */\r\n  private async notifyYandex(sitemapUrl: string): Promise<void> {\r\n    try {\r\n      const pingUrl = `https://webmaster.yandex.com/ping?sitemap=${encodeURIComponent(sitemapUrl)}`;\r\n\r\n      // En un entorno real, haríamos una petición HTTP\r\n      logger.info(LogLevel.INFO, 'Yandex sitemap notification sent', { sitemapUrl }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Failed to notify Yandex', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE ESTADÍSTICAS Y UTILIDADES\r\n  // ===================================\r\n\r\n  /**\r\n   * Actualizar estadísticas después de la generación\r\n   */\r\n  private updateStats(entries: SitemapEntry[], sitemapCount: number, generationTime: number): void {\r\n    this.stats.totalUrls = entries.length;\r\n    this.stats.totalSitemaps = sitemapCount;\r\n    this.stats.lastGenerated = new Date();\r\n    this.stats.generationTime = generationTime;\r\n\r\n    // Calcular ratio de compresión si está habilitado\r\n    if (this.config.enableCompression) {\r\n      // Placeholder para cálculo real de compresión\r\n      this.stats.compressionRatio = 0.7; // 70% de compresión estimada\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar estadísticas de cache\r\n   */\r\n  private updateCacheStats(isHit: boolean): void {\r\n    const totalRequests = this.stats.cacheHitRate * 100 + (isHit ? 1 : 0);\r\n    const hits = this.stats.cacheHitRate * (totalRequests - 1) + (isHit ? 1 : 0);\r\n    this.stats.cacheHitRate = totalRequests > 0 ? hits / totalRequests : 0;\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas del generador\r\n   */\r\n  public getStats(): SitemapStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Configurar el generador\r\n   */\r\n  public configure(config: Partial<SitemapConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    logger.info(LogLevel.INFO, 'Sitemap generator reconfigured', {\r\n      baseUrl: this.config.baseUrl,\r\n      maxUrlsPerSitemap: this.config.maxUrlsPerSitemap\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  /**\r\n   * Limpiar cache\r\n   */\r\n  public async clearCache(): Promise<void> {\r\n    try {\r\n      // Limpiar Redis\r\n      if (this.redis) {\r\n        await this.redis.del('sitemap:urls');\r\n      }\r\n\r\n      // Limpiar cache en memoria\r\n      this.cache.clear();\r\n\r\n      logger.info(LogLevel.INFO, 'Sitemap cache cleared', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error clearing sitemap cache', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validar sitemap XML\r\n   */\r\n  public validateSitemap(xml: string): { isValid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    try {\r\n      // Verificaciones básicas\r\n      if (!xml.includes('<?xml version=\"1.0\"')) {\r\n        errors.push('Missing XML declaration');\r\n      }\r\n\r\n      if (!xml.includes('<urlset')) {\r\n        errors.push('Missing urlset element');\r\n      }\r\n\r\n      if (!xml.includes('</urlset>')) {\r\n        errors.push('Sitemap not properly closed');\r\n      }\r\n\r\n      // Contar URLs\r\n      const urlMatches = xml.match(/<url>/g);\r\n      const urlCount = urlMatches ? urlMatches.length : 0;\r\n\r\n      if (urlCount === 0) {\r\n        errors.push('No URLs found in sitemap');\r\n      }\r\n\r\n      if (urlCount > this.config.maxUrlsPerSitemap) {\r\n        errors.push(`Too many URLs: ${urlCount} (max: ${this.config.maxUrlsPerSitemap})`);\r\n      }\r\n\r\n      // Verificar URLs válidas\r\n      const locMatches = xml.match(/<loc>(.*?)<\\/loc>/g);\r\n      if (locMatches) {\r\n        locMatches.forEach((match, index) => {\r\n          const url = match.replace(/<\\/?loc>/g, '');\r\n          try {\r\n            new URL(url);\r\n          } catch {\r\n            errors.push(`Invalid URL at position ${index + 1}: ${url}`);\r\n          }\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      errors.push(`Validation error: ${error}`);\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generar reporte de sitemap\r\n   */\r\n  public generateReport(): {\r\n    summary: SitemapStats;\r\n    recommendations: string[];\r\n    performance: {\r\n      generationTime: number;\r\n      cacheEfficiency: number;\r\n      urlDiscoveryTime: number;\r\n    };\r\n  } {\r\n    const recommendations: string[] = [];\r\n\r\n    // Analizar performance y generar recomendaciones\r\n    if (this.stats.generationTime > 5000) {\r\n      recommendations.push('Consider enabling caching to improve generation time');\r\n    }\r\n\r\n    if (this.stats.cacheHitRate < 0.5) {\r\n      recommendations.push('Cache hit rate is low, consider increasing cache TTL');\r\n    }\r\n\r\n    if (this.stats.totalUrls > 40000) {\r\n      recommendations.push('Consider splitting into multiple sitemaps for better performance');\r\n    }\r\n\r\n    if (this.stats.errors.length > 0) {\r\n      recommendations.push('Fix errors in sitemap generation process');\r\n    }\r\n\r\n    return {\r\n      summary: this.getStats(),\r\n      recommendations,\r\n      performance: {\r\n        generationTime: this.stats.generationTime,\r\n        cacheEfficiency: this.stats.cacheHitRate,\r\n        urlDiscoveryTime: this.stats.urlDiscoveryTime\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destruir instancia y limpiar recursos\r\n   */\r\n  public async destroy(): Promise<void> {\r\n    try {\r\n      await this.clearCache();\r\n\r\n      if (this.redis) {\r\n        // En un entorno real, cerraríamos la conexión Redis\r\n        this.redis = null;\r\n      }\r\n\r\n      this.cache.clear();\r\n\r\n      logger.info(LogLevel.INFO, 'Enhanced Dynamic Sitemap Generator destroyed', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error destroying sitemap generator', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTACIONES\r\n// ===================================\r\n\r\n// Instancia singleton\r\nexport const enhancedDynamicSitemapGenerator = EnhancedDynamicSitemapGenerator.getInstance();\r\n\r\n// Exportar clase para uso directo\r\nexport { EnhancedDynamicSitemapGenerator as DynamicSitemapGenerator };\r\n\r\n// Exportar tipos\r\nexport type {\r\n  SitemapEntry,\r\n  SitemapImage,\r\n  SitemapVideo,\r\n  SitemapNews,\r\n  SitemapAlternate,\r\n  SitemapConfig,\r\n  SitemapStats,\r\n  ProductData,\r\n  CategoryData,\r\n  BlogData\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}