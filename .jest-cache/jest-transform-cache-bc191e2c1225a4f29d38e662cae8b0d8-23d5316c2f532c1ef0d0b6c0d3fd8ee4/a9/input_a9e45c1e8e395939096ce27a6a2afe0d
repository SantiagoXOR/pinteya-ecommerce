d38d209f0b82adc89c18d354ec92cc5b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Input () {
        return Input;
    },
    get inputVariants () {
        return inputVariants;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const inputVariants = (0, _classvarianceauthority.cva)("flex w-full rounded-md border bg-white px-3 py-2 text-sm transition-all duration-200 file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50", {
    variants: {
        variant: {
            default: "border-gray-300 focus-visible:border-primary focus-visible:ring-2 focus-visible:ring-primary/20",
            error: "border-error focus-visible:border-error focus-visible:ring-2 focus-visible:ring-error/20",
            success: "border-success focus-visible:border-success focus-visible:ring-2 focus-visible:ring-success/20"
        },
        size: {
            sm: "h-8 px-2 text-xs",
            md: "h-9 px-3 text-sm",
            lg: "h-10 px-4 text-base"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "md"
    }
});
const Input = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, type = "text", label, error, helperText, leftIcon, rightIcon, onRightIconClick, id, ...props }, ref)=>{
    const generatedId = _react.useId();
    const inputId = id || generatedId;
    const hasError = !!error;
    const finalVariant = hasError ? "error" : variant;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "w-full",
        children: [
            label && /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                htmlFor: inputId,
                className: "block text-sm font-medium text-gray-700 mb-2",
                children: [
                    label,
                    props.required && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        className: "text-error ml-1",
                        children: "*"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative",
                children: [
                    leftIcon && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400",
                        children: leftIcon
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: type,
                        className: (0, _utils.cn)(inputVariants({
                            variant: finalVariant,
                            size
                        }), leftIcon && "pl-10", rightIcon && "pr-10", className),
                        ref: ref,
                        id: inputId,
                        ...props
                    }),
                    rightIcon && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: (0, _utils.cn)("absolute right-3 top-1/2 -translate-y-1/2 text-gray-400", onRightIconClick && "cursor-pointer hover:text-gray-600"),
                        onClick: onRightIconClick,
                        children: rightIcon
                    })
                ]
            }),
            (error || helperText) && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: (0, _utils.cn)("mt-1 text-xs", error ? "text-error" : "text-gray-500"),
                children: error || helperText
            })
        ]
    });
});
Input.displayName = "Input";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcdWlcXGlucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgeyBjdmEsIHR5cGUgVmFyaWFudFByb3BzIH0gZnJvbSBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiXHJcbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCJcclxuXHJcbmNvbnN0IGlucHV0VmFyaWFudHMgPSBjdmEoXHJcbiAgXCJmbGV4IHctZnVsbCByb3VuZGVkLW1kIGJvcmRlciBiZy13aGl0ZSBweC0zIHB5LTIgdGV4dC1zbSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZmlsZTpib3JkZXItMCBmaWxlOmJnLXRyYW5zcGFyZW50IGZpbGU6dGV4dC1zbSBmaWxlOmZvbnQtbWVkaXVtIHBsYWNlaG9sZGVyOnRleHQtZ3JheS01MDAgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIGRpc2FibGVkOm9wYWNpdHktNTBcIixcclxuICB7XHJcbiAgICB2YXJpYW50czoge1xyXG4gICAgICB2YXJpYW50OiB7XHJcbiAgICAgICAgZGVmYXVsdDogXHJcbiAgICAgICAgICBcImJvcmRlci1ncmF5LTMwMCBmb2N1cy12aXNpYmxlOmJvcmRlci1wcmltYXJ5IGZvY3VzLXZpc2libGU6cmluZy0yIGZvY3VzLXZpc2libGU6cmluZy1wcmltYXJ5LzIwXCIsXHJcbiAgICAgICAgZXJyb3I6IFxyXG4gICAgICAgICAgXCJib3JkZXItZXJyb3IgZm9jdXMtdmlzaWJsZTpib3JkZXItZXJyb3IgZm9jdXMtdmlzaWJsZTpyaW5nLTIgZm9jdXMtdmlzaWJsZTpyaW5nLWVycm9yLzIwXCIsXHJcbiAgICAgICAgc3VjY2VzczogXHJcbiAgICAgICAgICBcImJvcmRlci1zdWNjZXNzIGZvY3VzLXZpc2libGU6Ym9yZGVyLXN1Y2Nlc3MgZm9jdXMtdmlzaWJsZTpyaW5nLTIgZm9jdXMtdmlzaWJsZTpyaW5nLXN1Y2Nlc3MvMjBcIixcclxuICAgICAgfSxcclxuICAgICAgc2l6ZToge1xyXG4gICAgICAgIHNtOiBcImgtOCBweC0yIHRleHQteHNcIixcclxuICAgICAgICBtZDogXCJoLTkgcHgtMyB0ZXh0LXNtXCIsXHJcbiAgICAgICAgbGc6IFwiaC0xMCBweC00IHRleHQtYmFzZVwiLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGRlZmF1bHRWYXJpYW50czoge1xyXG4gICAgICB2YXJpYW50OiBcImRlZmF1bHRcIixcclxuICAgICAgc2l6ZTogXCJtZFwiLFxyXG4gICAgfSxcclxuICB9XHJcbilcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRQcm9wc1xyXG4gIGV4dGVuZHMgT21pdDxSZWFjdC5JbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+LCAnc2l6ZSc+LFxyXG4gICAgVmFyaWFudFByb3BzPHR5cGVvZiBpbnB1dFZhcmlhbnRzPiB7XHJcbiAgbGFiZWw/OiBzdHJpbmdcclxuICBlcnJvcj86IHN0cmluZ1xyXG4gIGhlbHBlclRleHQ/OiBzdHJpbmdcclxuICBsZWZ0SWNvbj86IFJlYWN0LlJlYWN0Tm9kZVxyXG4gIHJpZ2h0SWNvbj86IFJlYWN0LlJlYWN0Tm9kZVxyXG4gIG9uUmlnaHRJY29uQ2xpY2s/OiAoKSA9PiB2b2lkXHJcbn1cclxuXHJcbmNvbnN0IElucHV0ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MSW5wdXRFbGVtZW50LCBJbnB1dFByb3BzPihcclxuICAoeyBcclxuICAgIGNsYXNzTmFtZSwgXHJcbiAgICB2YXJpYW50LCBcclxuICAgIHNpemUsIFxyXG4gICAgdHlwZSA9IFwidGV4dFwiLFxyXG4gICAgbGFiZWwsXHJcbiAgICBlcnJvcixcclxuICAgIGhlbHBlclRleHQsXHJcbiAgICBsZWZ0SWNvbixcclxuICAgIHJpZ2h0SWNvbixcclxuICAgIG9uUmlnaHRJY29uQ2xpY2ssXHJcbiAgICBpZCxcclxuICAgIC4uLnByb3BzIFxyXG4gIH0sIHJlZikgPT4ge1xyXG4gICAgY29uc3QgZ2VuZXJhdGVkSWQgPSBSZWFjdC51c2VJZCgpXHJcbiAgICBjb25zdCBpbnB1dElkID0gaWQgfHwgZ2VuZXJhdGVkSWRcclxuICAgIGNvbnN0IGhhc0Vycm9yID0gISFlcnJvclxyXG4gICAgY29uc3QgZmluYWxWYXJpYW50ID0gaGFzRXJyb3IgPyBcImVycm9yXCIgOiB2YXJpYW50XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cclxuICAgICAgICB7bGFiZWwgJiYgKFxyXG4gICAgICAgICAgPGxhYmVsIFxyXG4gICAgICAgICAgICBodG1sRm9yPXtpbnB1dElkfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS03MDAgbWItMlwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtsYWJlbH1cclxuICAgICAgICAgICAge3Byb3BzLnJlcXVpcmVkICYmIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZXJyb3IgbWwtMVwiPio8L3NwYW4+fVxyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICApfVxyXG4gICAgICAgIFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmVcIj5cclxuICAgICAgICAgIHtsZWZ0SWNvbiAmJiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgbGVmdC0zIHRvcC0xLzIgLXRyYW5zbGF0ZS15LTEvMiB0ZXh0LWdyYXktNDAwXCI+XHJcbiAgICAgICAgICAgICAge2xlZnRJY29ufVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICB0eXBlPXt0eXBlfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxyXG4gICAgICAgICAgICAgIGlucHV0VmFyaWFudHMoeyB2YXJpYW50OiBmaW5hbFZhcmlhbnQsIHNpemUgfSksXHJcbiAgICAgICAgICAgICAgbGVmdEljb24gJiYgXCJwbC0xMFwiLFxyXG4gICAgICAgICAgICAgIHJpZ2h0SWNvbiAmJiBcInByLTEwXCIsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lXHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIHJlZj17cmVmfVxyXG4gICAgICAgICAgICBpZD17aW5wdXRJZH1cclxuICAgICAgICAgICAgey4uLnByb3BzfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAge3JpZ2h0SWNvbiAmJiAoXHJcbiAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbihcclxuICAgICAgICAgICAgICAgIFwiYWJzb2x1dGUgcmlnaHQtMyB0b3AtMS8yIC10cmFuc2xhdGUteS0xLzIgdGV4dC1ncmF5LTQwMFwiLFxyXG4gICAgICAgICAgICAgICAgb25SaWdodEljb25DbGljayAmJiBcImN1cnNvci1wb2ludGVyIGhvdmVyOnRleHQtZ3JheS02MDBcIlxyXG4gICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgb25DbGljaz17b25SaWdodEljb25DbGlja31cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIHtyaWdodEljb259XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBcclxuICAgICAgICB7KGVycm9yIHx8IGhlbHBlclRleHQpICYmIChcclxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17Y24oXHJcbiAgICAgICAgICAgIFwibXQtMSB0ZXh0LXhzXCIsXHJcbiAgICAgICAgICAgIGVycm9yID8gXCJ0ZXh0LWVycm9yXCIgOiBcInRleHQtZ3JheS01MDBcIlxyXG4gICAgICAgICAgKX0+XHJcbiAgICAgICAgICAgIHtlcnJvciB8fCBoZWxwZXJUZXh0fVxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxuKVxyXG5JbnB1dC5kaXNwbGF5TmFtZSA9IFwiSW5wdXRcIlxyXG5cclxuZXhwb3J0IHsgSW5wdXQsIGlucHV0VmFyaWFudHMgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiSW5wdXQiLCJpbnB1dFZhcmlhbnRzIiwiY3ZhIiwidmFyaWFudHMiLCJ2YXJpYW50IiwiZGVmYXVsdCIsImVycm9yIiwic3VjY2VzcyIsInNpemUiLCJzbSIsIm1kIiwibGciLCJkZWZhdWx0VmFyaWFudHMiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJjbGFzc05hbWUiLCJ0eXBlIiwibGFiZWwiLCJoZWxwZXJUZXh0IiwibGVmdEljb24iLCJyaWdodEljb24iLCJvblJpZ2h0SWNvbkNsaWNrIiwiaWQiLCJwcm9wcyIsInJlZiIsImdlbmVyYXRlZElkIiwidXNlSWQiLCJpbnB1dElkIiwiaGFzRXJyb3IiLCJmaW5hbFZhcmlhbnQiLCJkaXYiLCJodG1sRm9yIiwicmVxdWlyZWQiLCJzcGFuIiwiaW5wdXQiLCJjbiIsIm9uQ2xpY2siLCJwIiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1FBdUhTQTtlQUFBQTs7UUFBT0M7ZUFBQUE7Ozs7K0RBdkhPO3dDQUNnQjt1QkFDcEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVuQixNQUFNQSxnQkFBZ0JDLElBQUFBLDJCQUFHLEVBQ3ZCLDZQQUNBO0lBQ0VDLFVBQVU7UUFDUkMsU0FBUztZQUNQQyxTQUNFO1lBQ0ZDLE9BQ0U7WUFDRkMsU0FDRTtRQUNKO1FBQ0FDLE1BQU07WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7UUFDTjtJQUNGO0lBQ0FDLGlCQUFpQjtRQUNmUixTQUFTO1FBQ1RJLE1BQU07SUFDUjtBQUNGO0FBY0YsTUFBTVIsc0JBQVFhLE9BQU1DLFVBQVUsQ0FDNUIsQ0FBQyxFQUNDQyxTQUFTLEVBQ1RYLE9BQU8sRUFDUEksSUFBSSxFQUNKUSxPQUFPLE1BQU0sRUFDYkMsS0FBSyxFQUNMWCxLQUFLLEVBQ0xZLFVBQVUsRUFDVkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLGdCQUFnQixFQUNoQkMsRUFBRSxFQUNGLEdBQUdDLE9BQ0osRUFBRUM7SUFDRCxNQUFNQyxjQUFjWixPQUFNYSxLQUFLO0lBQy9CLE1BQU1DLFVBQVVMLE1BQU1HO0lBQ3RCLE1BQU1HLFdBQVcsQ0FBQyxDQUFDdEI7SUFDbkIsTUFBTXVCLGVBQWVELFdBQVcsVUFBVXhCO0lBRTFDLHFCQUNFLHNCQUFDMEI7UUFBSWYsV0FBVTs7WUFDWkUsdUJBQ0Msc0JBQUNBO2dCQUNDYyxTQUFTSjtnQkFDVFosV0FBVTs7b0JBRVRFO29CQUNBTSxNQUFNUyxRQUFRLGtCQUFJLHFCQUFDQzt3QkFBS2xCLFdBQVU7a0NBQWtCOzs7OzBCQUl6RCxzQkFBQ2U7Z0JBQUlmLFdBQVU7O29CQUNaSSwwQkFDQyxxQkFBQ1c7d0JBQUlmLFdBQVU7a0NBQ1pJOztrQ0FJTCxxQkFBQ2U7d0JBQ0NsQixNQUFNQTt3QkFDTkQsV0FBV29CLElBQUFBLFNBQUUsRUFDWGxDLGNBQWM7NEJBQUVHLFNBQVN5Qjs0QkFBY3JCO3dCQUFLLElBQzVDVyxZQUFZLFNBQ1pDLGFBQWEsU0FDYkw7d0JBRUZTLEtBQUtBO3dCQUNMRixJQUFJSzt3QkFDSCxHQUFHSixLQUFLOztvQkFHVkgsMkJBQ0MscUJBQUNVO3dCQUNDZixXQUFXb0IsSUFBQUEsU0FBRSxFQUNYLDJEQUNBZCxvQkFBb0I7d0JBRXRCZSxTQUFTZjtrQ0FFUkQ7Ozs7WUFLTGQsQ0FBQUEsU0FBU1ksVUFBUyxtQkFDbEIscUJBQUNtQjtnQkFBRXRCLFdBQVdvQixJQUFBQSxTQUFFLEVBQ2QsZ0JBQ0E3QixRQUFRLGVBQWU7MEJBRXRCQSxTQUFTWTs7OztBQUtwQjtBQUVGbEIsTUFBTXNDLFdBQVcsR0FBRyJ9