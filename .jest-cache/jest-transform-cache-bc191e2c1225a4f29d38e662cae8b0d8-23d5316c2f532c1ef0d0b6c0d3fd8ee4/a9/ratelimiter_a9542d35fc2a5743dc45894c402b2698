a98a352d5d0a80bf42ac84f1baacce4e
// ===================================
// PINTEYA E-COMMERCE - RATE LIMITING MIDDLEWARE
// ===================================
// Sistema de rate limiting enterprise con configuración flexible
// y logging estructurado para APIs críticas
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RATE_LIMIT_CONFIGS () {
        return RATE_LIMIT_CONFIGS;
    },
    get checkRateLimit () {
        return checkRateLimit;
    },
    get createRateLimitMiddleware () {
        return createRateLimitMiddleware;
    },
    get createRateLimiter () {
        return createRateLimiter;
    },
    get keyGenerators () {
        return keyGenerators;
    },
    get withRateLimit () {
        return withRateLimit;
    }
});
const _server = require("next/server");
// ===================================
// CONFIGURACIONES PREDEFINIDAS
// ===================================
// Configuraciones base para producción
const PRODUCTION_CONFIGS = {
    public: {
        windowMs: 15 * 60 * 1000,
        maxRequests: 1000,
        message: 'Demasiadas solicitudes. Intente nuevamente en 15 minutos.'
    },
    products: {
        windowMs: 5 * 60 * 1000,
        maxRequests: 200,
        message: 'Límite de consultas de productos excedido. Intente en 5 minutos.'
    },
    search: {
        windowMs: 5 * 60 * 1000,
        maxRequests: 150,
        message: 'Límite de búsquedas excedido. Intente en 5 minutos.'
    }
};
// Configuraciones relajadas para desarrollo
const DEVELOPMENT_CONFIGS = {
    public: {
        windowMs: 15 * 60 * 1000,
        maxRequests: 10000,
        message: 'Demasiadas solicitudes. Intente nuevamente en 15 minutos.'
    },
    products: {
        windowMs: 1 * 60 * 1000,
        maxRequests: 1000,
        message: 'Límite de consultas de productos excedido. Intente en 1 minuto.'
    },
    search: {
        windowMs: 1 * 60 * 1000,
        maxRequests: 500,
        message: 'Límite de búsquedas excedido. Intente en 1 minuto.'
    }
};
// ===================================
// HELPER PARA VERIFICAR SI RATE LIMITING ESTÁ HABILITADO
// ===================================
function isRateLimitingEnabled() {
    // Permitir deshabilitar rate limiting en desarrollo con variable de entorno
    if (process.env.DISABLE_RATE_LIMITING === 'true') {
        return false;
    }
    // En desarrollo, usar rate limiting relajado pero habilitado por defecto
    return true;
}
// Seleccionar configuración según el entorno
const isDevelopment = process.env.NODE_ENV === 'development';
const baseConfigs = isDevelopment ? DEVELOPMENT_CONFIGS : PRODUCTION_CONFIGS;
const RATE_LIMIT_CONFIGS = {
    // APIs públicas - límites generosos
    public: baseConfigs.public,
    // APIs de productos - límites moderados
    products: baseConfigs.products,
    // APIs de búsqueda - límites moderados
    search: baseConfigs.search,
    // APIs de autenticación - límites estrictos
    auth: {
        windowMs: 15 * 60 * 1000,
        maxRequests: isDevelopment ? 100 : 10,
        message: 'Demasiados intentos de autenticación. Intente en 15 minutos.'
    },
    // APIs de admin - límites moderados pero monitoreados
    admin: {
        windowMs: 10 * 60 * 1000,
        maxRequests: isDevelopment ? 1000 : 100,
        message: 'Límite de operaciones administrativas excedido.'
    },
    // APIs de pagos - límites muy estrictos
    payment: {
        windowMs: 15 * 60 * 1000,
        maxRequests: isDevelopment ? 100 : 30,
        message: 'Límite de operaciones de pago excedido. Intente en 15 minutos.'
    },
    // APIs de creación - límites estrictos
    creation: {
        windowMs: 10 * 60 * 1000,
        maxRequests: isDevelopment ? 200 : 20,
        message: 'Límite de creación de recursos excedido.'
    },
    // Webhooks - límites rápidos pero altos
    webhook: {
        windowMs: 1 * 60 * 1000,
        maxRequests: isDevelopment ? 1000 : 100,
        message: 'Límite de webhooks excedido. Intente en 1 minuto.'
    }
};
// ===================================
// LOGGING DE CONFIGURACIÓN
// ===================================
// Log de configuración al cargar el módulo
if (process.env.NODE_ENV === 'development') {
    console.log('[RATE_LIMITER] Configuración cargada:', {
        environment: process.env.NODE_ENV,
        rateLimitingEnabled: isRateLimitingEnabled(),
        disableRateLimiting: process.env.DISABLE_RATE_LIMITING,
        productLimits: {
            windowMs: RATE_LIMIT_CONFIGS.products.windowMs / 1000 / 60 + ' minutos',
            maxRequests: RATE_LIMIT_CONFIGS.products.maxRequests
        },
        searchLimits: {
            windowMs: RATE_LIMIT_CONFIGS.search.windowMs / 1000 / 60 + ' minutos',
            maxRequests: RATE_LIMIT_CONFIGS.search.maxRequests
        }
    });
}
// ===================================
// STORE EN MEMORIA (PARA DESARROLLO)
// ===================================
class MemoryStore {
    async get(key) {
        const data = this.store.get(key);
        if (!data) {
            return null;
        }
        // Limpiar datos expirados
        if (Date.now() > data.resetTime) {
            this.store.delete(key);
            return null;
        }
        return data;
    }
    async set(key, value, ttl) {
        this.store.set(key, value);
        // Limpiar automáticamente después del TTL
        setTimeout(()=>{
            this.store.delete(key);
        }, ttl);
    }
    async increment(key, ttl) {
        const now = Date.now();
        const existing = await this.get(key);
        if (!existing) {
            const newData = {
                count: 1,
                resetTime: now + ttl
            };
            await this.set(key, newData, ttl);
            return newData;
        }
        const updatedData = {
            ...existing,
            count: existing.count + 1
        };
        await this.set(key, updatedData, existing.resetTime - now);
        return updatedData;
    }
    constructor(){
        this.store = new Map();
    }
}
// ===================================
// INSTANCIA GLOBAL DEL STORE
// ===================================
const defaultStore = new MemoryStore();
const keyGenerators = {
    // Por IP
    ip: (req)=>{
        const forwarded = req.headers.get('x-forwarded-for');
        const ip = forwarded ? forwarded.split(',')[0] : req.headers.get('x-real-ip') || 'unknown';
        return `ip:${ip}`;
    },
    // Por usuario autenticado (requiere implementación específica)
    user: (req)=>{
        // TODO: Implementar extracción de user ID desde token/session
        const userId = req.headers.get('x-user-id') || 'anonymous';
        return `user:${userId}`;
    },
    // Por endpoint específico
    endpoint: (req)=>{
        const url = new URL(req.url);
        return `endpoint:${url.pathname}`;
    },
    // Combinado IP + endpoint
    combined: (req)=>{
        const ip = keyGenerators.ip(req);
        const endpoint = keyGenerators.endpoint(req);
        return `${ip}:${endpoint}`;
    }
};
function createRateLimiter(config = {}, store = defaultStore) {
    const finalConfig = {
        windowMs: 15 * 60 * 1000,
        maxRequests: 100,
        message: 'Rate limit exceeded',
        headers: true,
        standardHeaders: true,
        legacyHeaders: true,
        ...config
    };
    return async (req)=>{
        return await checkRateLimit(req, finalConfig, store);
    };
}
async function checkRateLimit(req, config, store = defaultStore) {
    const keyGenerator = config.keyGenerator || keyGenerators.combined;
    const key = keyGenerator(req);
    try {
        const data = await store.increment(key, config.windowMs);
        const result = {
            allowed: data.count <= config.maxRequests,
            limit: config.maxRequests,
            remaining: Math.max(0, config.maxRequests - data.count),
            resetTime: data.resetTime
        };
        if (!result.allowed) {
            result.retryAfter = Math.ceil((data.resetTime - Date.now()) / 1000);
        }
        return result;
    } catch (error) {
        console.error('[RATE_LIMITER] Error checking rate limit:', error);
        // En caso de error, permitir la request (fail-open)
        return {
            allowed: true,
            limit: config.maxRequests,
            remaining: config.maxRequests,
            resetTime: Date.now() + config.windowMs
        };
    }
}
function createRateLimitMiddleware(config) {
    return async (req)=>{
        const result = await checkRateLimit(req, config);
        // Crear headers de rate limit
        const headers = new Headers();
        if (config.headers !== false) {
            if (config.standardHeaders !== false) {
                // Headers estándar RFC 6585
                headers.set('RateLimit-Limit', result.limit.toString());
                headers.set('RateLimit-Remaining', result.remaining.toString());
                headers.set('RateLimit-Reset', new Date(result.resetTime).toISOString());
            }
            if (config.legacyHeaders !== false) {
                // Headers legacy para compatibilidad
                headers.set('X-RateLimit-Limit', result.limit.toString());
                headers.set('X-RateLimit-Remaining', result.remaining.toString());
                headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());
            }
        }
        if (!result.allowed) {
            if (result.retryAfter) {
                headers.set('Retry-After', result.retryAfter.toString());
            }
            // Log del rate limit excedido
            console.warn('[RATE_LIMITER] Rate limit exceeded:', {
                key: config.keyGenerator ? config.keyGenerator(req) : 'combined',
                limit: result.limit,
                resetTime: new Date(result.resetTime).toISOString(),
                userAgent: req.headers.get('user-agent'),
                ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip')
            });
            return new _server.NextResponse(JSON.stringify({
                error: 'Rate limit exceeded',
                message: config.message || 'Too many requests',
                retryAfter: result.retryAfter
            }), {
                status: 429,
                headers
            });
        }
        // Request permitida, agregar headers informativos
        return _server.NextResponse.next({
            headers
        });
    };
}
async function withRateLimit(req, config, handler) {
    // Si rate limiting está deshabilitado, ejecutar directamente el handler
    if (!isRateLimitingEnabled()) {
        return await handler();
    }
    const result = await checkRateLimit(req, config);
    if (!result.allowed) {
        // Crear headers de rate limit
        const headers = new Headers();
        if (config.headers !== false) {
            if (config.standardHeaders !== false) {
                // Headers estándar RFC 6585
                headers.set('RateLimit-Limit', result.limit.toString());
                headers.set('RateLimit-Remaining', result.remaining.toString());
                headers.set('RateLimit-Reset', new Date(result.resetTime).toISOString());
            }
            if (config.legacyHeaders !== false) {
                // Headers legacy para compatibilidad
                headers.set('X-RateLimit-Limit', result.limit.toString());
                headers.set('X-RateLimit-Remaining', result.remaining.toString());
                headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());
            }
        }
        if (result.retryAfter) {
            headers.set('Retry-After', result.retryAfter.toString());
        }
        // Log del rate limit excedido
        console.warn('[RATE_LIMITER] Rate limit exceeded:', {
            key: config.keyGenerator ? config.keyGenerator(req) : 'combined',
            limit: result.limit,
            resetTime: new Date(result.resetTime).toISOString(),
            userAgent: req.headers.get('user-agent'),
            ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip')
        });
        return new _server.NextResponse(JSON.stringify({
            error: 'Rate limit exceeded',
            message: config.message || 'Too many requests',
            retryAfter: result.retryAfter
        }), {
            status: 429,
            headers
        });
    }
    return handler();
}

//# sourceMappingURL=data:application/json;base64,