{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\admin\\useOrdersApi.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - USEORDERSAPI TESTS\n// Tests completos para el hook de API de órdenes\n// ===================================\n\nimport { renderHook, act } from '@testing-library/react'\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals'\nimport { useOrdersApi } from '@/hooks/admin/useOrdersApi'\n\n// ===================================\n// MOCKS Y SETUP\n// ===================================\n\n// Mock de fetch global\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\n// Mock de AbortController\nconst mockAbort = jest.fn()\nconst mockAbortController = {\n  abort: mockAbort,\n  signal: { aborted: false },\n}\n\nglobal.AbortController = jest.fn(() => mockAbortController) as any\n\n// Datos de prueba\nconst mockOrdersResponse = {\n  orders: [\n    { id: '1', order_number: 'ORD-001', status: 'pending', total: 100 },\n    { id: '2', order_number: 'ORD-002', status: 'confirmed', total: 200 },\n  ],\n  pagination: { page: 1, totalPages: 5, hasNextPage: true },\n  analytics: { totalOrders: 2, totalRevenue: 300 },\n}\n\nconst mockFilters = {\n  page: 1,\n  limit: 20,\n  status: 'pending',\n  search: 'test',\n}\n\nconst mockOptions = {\n  timeout: 10000,\n  maxRetries: 3,\n}\n\n// ===================================\n// SETUP Y CLEANUP\n// ===================================\n\nbeforeEach(() => {\n  jest.clearAllMocks()\n  mockAbort.mockClear()\n  mockAbortController.signal.aborted = false\n\n  // Mock de respuesta exitosa por defecto\n  mockFetch.mockResolvedValue({\n    ok: true,\n    status: 200,\n    json: jest.fn().mockResolvedValue(mockOrdersResponse),\n    headers: new Headers(),\n    statusText: 'OK',\n  })\n})\n\nafterEach(() => {\n  jest.clearAllTimers()\n})\n\n// ===================================\n// TESTS PRINCIPALES\n// ===================================\n\ndescribe('useOrdersApi', () => {\n  it('debe inicializarse correctamente', () => {\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    expect(result.current.fetchOrdersInternal).toBeDefined()\n    expect(result.current.abortCurrentRequest).toBeDefined()\n    expect(result.current.isRequestInProgress).toBeDefined()\n    expect(typeof result.current.fetchOrdersInternal).toBe('function')\n    expect(typeof result.current.abortCurrentRequest).toBe('function')\n    expect(typeof result.current.isRequestInProgress).toBe('function')\n  })\n\n  it('debe realizar fetch exitoso de órdenes', async () => {\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    let response\n    await act(async () => {\n      response = await result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      '/api/admin/orders?page=1&limit=20&status=pending&search=test',\n      expect.objectContaining({\n        method: 'GET',\n        headers: expect.objectContaining({\n          'Content-Type': 'application/json',\n        }),\n        signal: expect.any(Object),\n      })\n    )\n\n    expect(response).toEqual(mockOrdersResponse)\n  })\n\n  it('debe construir URL correctamente con diferentes filtros', async () => {\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    const filtersWithNulls = {\n      page: 2,\n      limit: 10,\n      status: undefined,\n      search: null,\n      sort_by: 'created_at',\n      sort_order: 'desc',\n    }\n\n    await act(async () => {\n      await result.current.fetchOrdersInternal(filtersWithNulls)\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      '/api/admin/orders?page=2&limit=10&sort_by=created_at&sort_order=desc',\n      expect.any(Object)\n    )\n  })\n\n  it('debe manejar errores de red correctamente', async () => {\n    mockFetch.mockRejectedValue(new Error('Network error'))\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    await act(async () => {\n      await expect(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow('Network error')\n    })\n  })\n\n  it('debe manejar respuestas HTTP de error', async () => {\n    mockFetch.mockResolvedValue({\n      ok: false,\n      status: 500,\n      statusText: 'Internal Server Error',\n      json: jest.fn().mockResolvedValue({ error: 'Server error' }),\n    })\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    await act(async () => {\n      await expect(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow(\n        'HTTP error! status: 500'\n      )\n    })\n  })\n\n  it('debe implementar retry logic correctamente', async () => {\n    // Fallar las primeras 2 llamadas, exitosa en la 3ra\n    mockFetch\n      .mockRejectedValueOnce(new Error('Network error'))\n      .mockRejectedValueOnce(new Error('Network error'))\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: jest.fn().mockResolvedValue(mockOrdersResponse),\n      })\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    let response\n    await act(async () => {\n      response = await result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    expect(mockFetch).toHaveBeenCalledTimes(3)\n    expect(response).toEqual(mockOrdersResponse)\n  })\n\n  it('debe fallar después de agotar todos los reintentos', async () => {\n    mockFetch.mockRejectedValue(new Error('Persistent network error'))\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    await act(async () => {\n      await expect(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow(\n        'Persistent network error'\n      )\n    })\n\n    expect(mockFetch).toHaveBeenCalledTimes(4) // 1 intento inicial + 3 reintentos\n  })\n\n  it('debe implementar timeout correctamente', async () => {\n    jest.useFakeTimers()\n\n    // Mock de fetch que nunca se resuelve\n    mockFetch.mockImplementation(() => new Promise(() => {}))\n\n    const { result } = renderHook(() => useOrdersApi({ ...mockOptions, timeout: 5000 }))\n\n    const fetchPromise = act(async () => {\n      return result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    // Avanzar el tiempo más allá del timeout\n    act(() => {\n      jest.advanceTimersByTime(6000)\n    })\n\n    await expect(fetchPromise).rejects.toThrow()\n\n    jest.useRealTimers()\n  })\n\n  it('debe abortar requests correctamente', async () => {\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    // Iniciar un request\n    const fetchPromise = act(async () => {\n      return result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    // Abortar el request\n    act(() => {\n      result.current.abortCurrentRequest()\n    })\n\n    expect(mockAbort).toHaveBeenCalled()\n  })\n\n  it('debe detectar requests en progreso', async () => {\n    jest.useFakeTimers()\n\n    // Mock de fetch que tarda en resolverse\n    mockFetch.mockImplementation(\n      () =>\n        new Promise(resolve =>\n          setTimeout(\n            () =>\n              resolve({\n                ok: true,\n                status: 200,\n                json: jest.fn().mockResolvedValue(mockOrdersResponse),\n              }),\n            1000\n          )\n        )\n    )\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    // Iniciar request\n    const fetchPromise = act(async () => {\n      return result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    // Verificar que está en progreso\n    expect(result.current.isRequestInProgress()).toBe(true)\n\n    // Completar el request\n    act(() => {\n      jest.advanceTimersByTime(1000)\n    })\n\n    await fetchPromise\n\n    // Verificar que ya no está en progreso\n    expect(result.current.isRequestInProgress()).toBe(false)\n\n    jest.useRealTimers()\n  })\n\n  it('debe validar respuesta JSON correctamente', async () => {\n    mockFetch.mockResolvedValue({\n      ok: true,\n      status: 200,\n      json: jest.fn().mockResolvedValue({ invalid: 'response' }), // Respuesta sin estructura esperada\n    })\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    await act(async () => {\n      await expect(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow(\n        'Invalid response format'\n      )\n    })\n  })\n\n  it('debe manejar respuestas vacías correctamente', async () => {\n    mockFetch.mockResolvedValue({\n      ok: true,\n      status: 200,\n      json: jest.fn().mockResolvedValue({\n        orders: [],\n        pagination: { page: 1, totalPages: 0, hasNextPage: false },\n        analytics: { totalOrders: 0, totalRevenue: 0 },\n      }),\n    })\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    let response\n    await act(async () => {\n      response = await result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    expect(response.orders).toEqual([])\n    expect(response.analytics.totalOrders).toBe(0)\n  })\n\n  it('debe usar headers de autenticación cuando están disponibles', async () => {\n    // Mock de session con token\n    const mockSession = { accessToken: 'test-token' }\n    jest.doMock('next-auth/react', () => ({\n      useSession: () => ({ data: mockSession }),\n    }))\n\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    await act(async () => {\n      await result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.any(String),\n      expect.objectContaining({\n        headers: expect.objectContaining({\n          'Content-Type': 'application/json',\n        }),\n      })\n    )\n  })\n\n  it('debe limpiar recursos al desmontar', () => {\n    const { result, unmount } = renderHook(() => useOrdersApi(mockOptions))\n\n    // Iniciar un request\n    act(() => {\n      result.current.fetchOrdersInternal(mockFilters)\n    })\n\n    // Desmontar el hook\n    unmount()\n\n    // Debe haber abortado el request\n    expect(mockAbort).toHaveBeenCalled()\n  })\n\n  it('debe manejar múltiples requests concurrentes', async () => {\n    const { result } = renderHook(() => useOrdersApi(mockOptions))\n\n    // Iniciar múltiples requests\n    const promises = [\n      result.current.fetchOrdersInternal(mockFilters),\n      result.current.fetchOrdersInternal({ ...mockFilters, page: 2 }),\n      result.current.fetchOrdersInternal({ ...mockFilters, page: 3 }),\n    ]\n\n    await act(async () => {\n      await Promise.all(promises)\n    })\n\n    expect(mockFetch).toHaveBeenCalledTimes(3)\n  })\n})\n"],"names":["mockFetch","jest","fn","global","fetch","mockAbort","mockAbortController","abort","signal","aborted","AbortController","mockOrdersResponse","orders","id","order_number","status","total","pagination","page","totalPages","hasNextPage","analytics","totalOrders","totalRevenue","mockFilters","limit","search","mockOptions","timeout","maxRetries","beforeEach","clearAllMocks","mockClear","mockResolvedValue","ok","json","headers","Headers","statusText","afterEach","clearAllTimers","describe","it","result","renderHook","useOrdersApi","expect","current","fetchOrdersInternal","toBeDefined","abortCurrentRequest","isRequestInProgress","toBe","response","act","toHaveBeenCalledWith","objectContaining","method","any","Object","toEqual","filtersWithNulls","undefined","sort_by","sort_order","mockRejectedValue","Error","rejects","toThrow","error","mockRejectedValueOnce","mockResolvedValueOnce","toHaveBeenCalledTimes","useFakeTimers","mockImplementation","Promise","fetchPromise","advanceTimersByTime","useRealTimers","toHaveBeenCalled","resolve","setTimeout","invalid","mockSession","accessToken","doMock","useSession","data","String","unmount","promises","all"],"mappings":"AAAA,sCAAsC;AACtC,0CAA0C;AAC1C,iDAAiD;AACjD,sCAAsC;;;;;uBAEN;yBACkC;8BACrC;AAE7B,sCAAsC;AACtC,gBAAgB;AAChB,sCAAsC;AAEtC,uBAAuB;AACvB,MAAMA,YAAYC,aAAI,CAACC,EAAE;AACzBC,OAAOC,KAAK,GAAGJ;AAEf,0BAA0B;AAC1B,MAAMK,YAAYJ,aAAI,CAACC,EAAE;AACzB,MAAMI,sBAAsB;IAC1BC,OAAOF;IACPG,QAAQ;QAAEC,SAAS;IAAM;AAC3B;AAEAN,OAAOO,eAAe,GAAGT,aAAI,CAACC,EAAE,CAAC,IAAMI;AAEvC,kBAAkB;AAClB,MAAMK,qBAAqB;IACzBC,QAAQ;QACN;YAAEC,IAAI;YAAKC,cAAc;YAAWC,QAAQ;YAAWC,OAAO;QAAI;QAClE;YAAEH,IAAI;YAAKC,cAAc;YAAWC,QAAQ;YAAaC,OAAO;QAAI;KACrE;IACDC,YAAY;QAAEC,MAAM;QAAGC,YAAY;QAAGC,aAAa;IAAK;IACxDC,WAAW;QAAEC,aAAa;QAAGC,cAAc;IAAI;AACjD;AAEA,MAAMC,cAAc;IAClBN,MAAM;IACNO,OAAO;IACPV,QAAQ;IACRW,QAAQ;AACV;AAEA,MAAMC,cAAc;IAClBC,SAAS;IACTC,YAAY;AACd;AAEA,sCAAsC;AACtC,kBAAkB;AAClB,sCAAsC;AAEtCC,IAAAA,mBAAU,EAAC;IACT7B,aAAI,CAAC8B,aAAa;IAClB1B,UAAU2B,SAAS;IACnB1B,oBAAoBE,MAAM,CAACC,OAAO,GAAG;IAErC,wCAAwC;IACxCT,UAAUiC,iBAAiB,CAAC;QAC1BC,IAAI;QACJnB,QAAQ;QACRoB,MAAMlC,aAAI,CAACC,EAAE,GAAG+B,iBAAiB,CAACtB;QAClCyB,SAAS,IAAIC;QACbC,YAAY;IACd;AACF;AAEAC,IAAAA,kBAAS,EAAC;IACRtC,aAAI,CAACuC,cAAc;AACrB;AAEA,sCAAsC;AACtC,oBAAoB;AACpB,sCAAsC;AAEtCC,IAAAA,iBAAQ,EAAC,gBAAgB;IACvBC,IAAAA,WAAE,EAAC,oCAAoC;QACrC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjDmB,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACC,mBAAmB,EAAEC,WAAW;QACtDH,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACG,mBAAmB,EAAED,WAAW;QACtDH,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACI,mBAAmB,EAAEF,WAAW;QACtDH,IAAAA,eAAM,EAAC,OAAOH,OAAOI,OAAO,CAACC,mBAAmB,EAAEI,IAAI,CAAC;QACvDN,IAAAA,eAAM,EAAC,OAAOH,OAAOI,OAAO,CAACG,mBAAmB,EAAEE,IAAI,CAAC;QACvDN,IAAAA,eAAM,EAAC,OAAOH,OAAOI,OAAO,CAACI,mBAAmB,EAAEC,IAAI,CAAC;IACzD;IAEAV,IAAAA,WAAE,EAAC,0CAA0C;QAC3C,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,IAAI0B;QACJ,MAAMC,IAAAA,UAAG,EAAC;YACRD,WAAW,MAAMV,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QACtD;QAEAsB,IAAAA,eAAM,EAAC9C,WAAWuD,oBAAoB,CACpC,gEACAT,eAAM,CAACU,gBAAgB,CAAC;YACtBC,QAAQ;YACRrB,SAASU,eAAM,CAACU,gBAAgB,CAAC;gBAC/B,gBAAgB;YAClB;YACAhD,QAAQsC,eAAM,CAACY,GAAG,CAACC;QACrB;QAGFb,IAAAA,eAAM,EAACO,UAAUO,OAAO,CAACjD;IAC3B;IAEA+B,IAAAA,WAAE,EAAC,2DAA2D;QAC5D,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,MAAMkC,mBAAmB;YACvB3C,MAAM;YACNO,OAAO;YACPV,QAAQ+C;YACRpC,QAAQ;YACRqC,SAAS;YACTC,YAAY;QACd;QAEA,MAAMV,IAAAA,UAAG,EAAC;YACR,MAAMX,OAAOI,OAAO,CAACC,mBAAmB,CAACa;QAC3C;QAEAf,IAAAA,eAAM,EAAC9C,WAAWuD,oBAAoB,CACpC,wEACAT,eAAM,CAACY,GAAG,CAACC;IAEf;IAEAjB,IAAAA,WAAE,EAAC,6CAA6C;QAC9C1C,UAAUiE,iBAAiB,CAAC,IAAIC,MAAM;QAEtC,MAAM,EAAEvB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,MAAM2B,IAAAA,UAAG,EAAC;YACR,MAAMR,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACC,mBAAmB,CAACxB,cAAc2C,OAAO,CAACC,OAAO,CAAC;QAChF;IACF;IAEA1B,IAAAA,WAAE,EAAC,yCAAyC;QAC1C1C,UAAUiC,iBAAiB,CAAC;YAC1BC,IAAI;YACJnB,QAAQ;YACRuB,YAAY;YACZH,MAAMlC,aAAI,CAACC,EAAE,GAAG+B,iBAAiB,CAAC;gBAAEoC,OAAO;YAAe;QAC5D;QAEA,MAAM,EAAE1B,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,MAAM2B,IAAAA,UAAG,EAAC;YACR,MAAMR,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACC,mBAAmB,CAACxB,cAAc2C,OAAO,CAACC,OAAO,CAC3E;QAEJ;IACF;IAEA1B,IAAAA,WAAE,EAAC,8CAA8C;QAC/C,oDAAoD;QACpD1C,UACGsE,qBAAqB,CAAC,IAAIJ,MAAM,kBAChCI,qBAAqB,CAAC,IAAIJ,MAAM,kBAChCK,qBAAqB,CAAC;YACrBrC,IAAI;YACJnB,QAAQ;YACRoB,MAAMlC,aAAI,CAACC,EAAE,GAAG+B,iBAAiB,CAACtB;QACpC;QAEF,MAAM,EAAEgC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,IAAI0B;QACJ,MAAMC,IAAAA,UAAG,EAAC;YACRD,WAAW,MAAMV,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QACtD;QAEAsB,IAAAA,eAAM,EAAC9C,WAAWwE,qBAAqB,CAAC;QACxC1B,IAAAA,eAAM,EAACO,UAAUO,OAAO,CAACjD;IAC3B;IAEA+B,IAAAA,WAAE,EAAC,sDAAsD;QACvD1C,UAAUiE,iBAAiB,CAAC,IAAIC,MAAM;QAEtC,MAAM,EAAEvB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,MAAM2B,IAAAA,UAAG,EAAC;YACR,MAAMR,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACC,mBAAmB,CAACxB,cAAc2C,OAAO,CAACC,OAAO,CAC3E;QAEJ;QAEAtB,IAAAA,eAAM,EAAC9C,WAAWwE,qBAAqB,CAAC,IAAG,mCAAmC;IAChF;IAEA9B,IAAAA,WAAE,EAAC,0CAA0C;QAC3CzC,aAAI,CAACwE,aAAa;QAElB,sCAAsC;QACtCzE,UAAU0E,kBAAkB,CAAC,IAAM,IAAIC,QAAQ,KAAO;QAEtD,MAAM,EAAEhC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAC;gBAAE,GAAGlB,WAAW;gBAAEC,SAAS;YAAK;QAEjF,MAAMgD,eAAetB,IAAAA,UAAG,EAAC;YACvB,OAAOX,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QAC5C;QAEA,yCAAyC;QACzC8B,IAAAA,UAAG,EAAC;YACFrD,aAAI,CAAC4E,mBAAmB,CAAC;QAC3B;QAEA,MAAM/B,IAAAA,eAAM,EAAC8B,cAAcT,OAAO,CAACC,OAAO;QAE1CnE,aAAI,CAAC6E,aAAa;IACpB;IAEApC,IAAAA,WAAE,EAAC,uCAAuC;QACxC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,qBAAqB;QACrB,MAAMiD,eAAetB,IAAAA,UAAG,EAAC;YACvB,OAAOX,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QAC5C;QAEA,qBAAqB;QACrB8B,IAAAA,UAAG,EAAC;YACFX,OAAOI,OAAO,CAACG,mBAAmB;QACpC;QAEAJ,IAAAA,eAAM,EAACzC,WAAW0E,gBAAgB;IACpC;IAEArC,IAAAA,WAAE,EAAC,sCAAsC;QACvCzC,aAAI,CAACwE,aAAa;QAElB,wCAAwC;QACxCzE,UAAU0E,kBAAkB,CAC1B,IACE,IAAIC,QAAQK,CAAAA,UACVC,WACE,IACED,QAAQ;wBACN9C,IAAI;wBACJnB,QAAQ;wBACRoB,MAAMlC,aAAI,CAACC,EAAE,GAAG+B,iBAAiB,CAACtB;oBACpC,IACF;QAKR,MAAM,EAAEgC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,kBAAkB;QAClB,MAAMiD,eAAetB,IAAAA,UAAG,EAAC;YACvB,OAAOX,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QAC5C;QAEA,iCAAiC;QACjCsB,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACI,mBAAmB,IAAIC,IAAI,CAAC;QAElD,uBAAuB;QACvBE,IAAAA,UAAG,EAAC;YACFrD,aAAI,CAAC4E,mBAAmB,CAAC;QAC3B;QAEA,MAAMD;QAEN,uCAAuC;QACvC9B,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACI,mBAAmB,IAAIC,IAAI,CAAC;QAElDnD,aAAI,CAAC6E,aAAa;IACpB;IAEApC,IAAAA,WAAE,EAAC,6CAA6C;QAC9C1C,UAAUiC,iBAAiB,CAAC;YAC1BC,IAAI;YACJnB,QAAQ;YACRoB,MAAMlC,aAAI,CAACC,EAAE,GAAG+B,iBAAiB,CAAC;gBAAEiD,SAAS;YAAW;QAC1D;QAEA,MAAM,EAAEvC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,MAAM2B,IAAAA,UAAG,EAAC;YACR,MAAMR,IAAAA,eAAM,EAACH,OAAOI,OAAO,CAACC,mBAAmB,CAACxB,cAAc2C,OAAO,CAACC,OAAO,CAC3E;QAEJ;IACF;IAEA1B,IAAAA,WAAE,EAAC,gDAAgD;QACjD1C,UAAUiC,iBAAiB,CAAC;YAC1BC,IAAI;YACJnB,QAAQ;YACRoB,MAAMlC,aAAI,CAACC,EAAE,GAAG+B,iBAAiB,CAAC;gBAChCrB,QAAQ,EAAE;gBACVK,YAAY;oBAAEC,MAAM;oBAAGC,YAAY;oBAAGC,aAAa;gBAAM;gBACzDC,WAAW;oBAAEC,aAAa;oBAAGC,cAAc;gBAAE;YAC/C;QACF;QAEA,MAAM,EAAEoB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,IAAI0B;QACJ,MAAMC,IAAAA,UAAG,EAAC;YACRD,WAAW,MAAMV,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QACtD;QAEAsB,IAAAA,eAAM,EAACO,SAASzC,MAAM,EAAEgD,OAAO,CAAC,EAAE;QAClCd,IAAAA,eAAM,EAACO,SAAShC,SAAS,CAACC,WAAW,EAAE8B,IAAI,CAAC;IAC9C;IAEAV,IAAAA,WAAE,EAAC,+DAA+D;QAChE,4BAA4B;QAC5B,MAAMyC,cAAc;YAAEC,aAAa;QAAa;QAChDnF,aAAI,CAACoF,MAAM,CAAC,mBAAmB,IAAO,CAAA;gBACpCC,YAAY,IAAO,CAAA;wBAAEC,MAAMJ;oBAAY,CAAA;YACzC,CAAA;QAEA,MAAM,EAAExC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,MAAM2B,IAAAA,UAAG,EAAC;YACR,MAAMX,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QAC3C;QAEAsB,IAAAA,eAAM,EAAC9C,WAAWuD,oBAAoB,CACpCT,eAAM,CAACY,GAAG,CAAC8B,SACX1C,eAAM,CAACU,gBAAgB,CAAC;YACtBpB,SAASU,eAAM,CAACU,gBAAgB,CAAC;gBAC/B,gBAAgB;YAClB;QACF;IAEJ;IAEAd,IAAAA,WAAE,EAAC,sCAAsC;QACvC,MAAM,EAAEC,MAAM,EAAE8C,OAAO,EAAE,GAAG7C,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAE1D,qBAAqB;QACrB2B,IAAAA,UAAG,EAAC;YACFX,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;QACrC;QAEA,oBAAoB;QACpBiE;QAEA,iCAAiC;QACjC3C,IAAAA,eAAM,EAACzC,WAAW0E,gBAAgB;IACpC;IAEArC,IAAAA,WAAE,EAAC,gDAAgD;QACjD,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0BAAY,EAAClB;QAEjD,6BAA6B;QAC7B,MAAM+D,WAAW;YACf/C,OAAOI,OAAO,CAACC,mBAAmB,CAACxB;YACnCmB,OAAOI,OAAO,CAACC,mBAAmB,CAAC;gBAAE,GAAGxB,WAAW;gBAAEN,MAAM;YAAE;YAC7DyB,OAAOI,OAAO,CAACC,mBAAmB,CAAC;gBAAE,GAAGxB,WAAW;gBAAEN,MAAM;YAAE;SAC9D;QAED,MAAMoC,IAAAA,UAAG,EAAC;YACR,MAAMqB,QAAQgB,GAAG,CAACD;QACpB;QAEA5C,IAAAA,eAAM,EAAC9C,WAAWwE,qBAAqB,CAAC;IAC1C;AACF"}