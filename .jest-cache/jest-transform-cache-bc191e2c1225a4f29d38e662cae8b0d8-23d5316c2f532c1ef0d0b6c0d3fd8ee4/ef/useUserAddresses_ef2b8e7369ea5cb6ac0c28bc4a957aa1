7331cc16f6fb167239a9f2ca7c63803d
// ===================================
// PINTEYA E-COMMERCE - HOOK PARA DIRECCIONES DE USUARIO
// ===================================
"use strict";

/* istanbul ignore next */
function cov_9us3p6r08() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useUserAddresses.ts";
  var hash = "024ecbc1c9288918128f410fd1af5d9047210355";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useUserAddresses.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 13,
          column: 3
        }
      },
      "2": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "3": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "4": {
        start: {
          line: 16,
          column: 38
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "5": {
        start: {
          line: 17,
          column: 34
        },
        end: {
          line: 17,
          column: 60
        }
      },
      "6": {
        start: {
          line: 18,
          column: 30
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "7": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "10": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "11": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "12": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 46
        }
      },
      "13": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "14": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 78
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 13
        }
      },
      "16": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 45
        }
      },
      "17": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 64
        }
      },
      "18": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "19": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 79
        }
      },
      "20": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 30
        }
      },
      "21": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "22": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "23": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 27
        }
      },
      "24": {
        start: {
          line: 45,
          column: 29
        },
        end: {
          line: 51,
          column: 14
        }
      },
      "25": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 46
        }
      },
      "26": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "27": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 74
        }
      },
      "28": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "29": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 60,
          column: 23
        }
      },
      "30": {
        start: {
          line: 57,
          column: 37
        },
        end: {
          line: 60,
          column: 21
        }
      },
      "31": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 28
        }
      },
      "32": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 60
        }
      },
      "33": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 60
        }
      },
      "34": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 79
        }
      },
      "35": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 25
        }
      },
      "36": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "37": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "38": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 27
        }
      },
      "39": {
        start: {
          line: 75,
          column: 29
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "40": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 46
        }
      },
      "41": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "42": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 79
        }
      },
      "43": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "44": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 93
        }
      },
      "45": {
        start: {
          line: 87,
          column: 37
        },
        end: {
          line: 87,
          column: 91
        }
      },
      "46": {
        start: {
          line: 87,
          column: 54
        },
        end: {
          line: 87,
          column: 90
        }
      },
      "47": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 28
        }
      },
      "48": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 65
        }
      },
      "49": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 65
        }
      },
      "50": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 79
        }
      },
      "51": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 25
        }
      },
      "52": {
        start: {
          line: 99,
          column: 26
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "53": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "54": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 27
        }
      },
      "55": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 104,
          column: 14
        }
      },
      "56": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 46
        }
      },
      "57": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "58": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 77
        }
      },
      "59": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "60": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 74
        }
      },
      "61": {
        start: {
          line: 110,
          column: 37
        },
        end: {
          line: 110,
          column: 72
        }
      },
      "62": {
        start: {
          line: 110,
          column: 57
        },
        end: {
          line: 110,
          column: 71
        }
      },
      "63": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 28
        }
      },
      "64": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 63
        }
      },
      "65": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 63
        }
      },
      "66": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 79
        }
      },
      "67": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 25
        }
      },
      "68": {
        start: {
          line: 122,
          column: 30
        },
        end: {
          line: 143,
          column: 5
        }
      },
      "69": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "70": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 27
        }
      },
      "71": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "72": {
        start: {
          line: 128,
          column: 25
        },
        end: {
          line: 128,
          column: 46
        }
      },
      "73": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "74": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 86
        }
      },
      "75": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "76": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 45
        }
      },
      "77": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 28
        }
      },
      "78": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 72
        }
      },
      "79": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 72
        }
      },
      "80": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 79
        }
      },
      "81": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 25
        }
      },
      "82": {
        start: {
          line: 145,
          column: 29
        },
        end: {
          line: 147,
          column: 5
        }
      },
      "83": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 31
        }
      },
      "84": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "85": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 25
        }
      },
      "86": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 161,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 10
          }
        },
        loc: {
          start: {
            line: 10,
            column: 20
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "useUserAddresses",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 25
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 162,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 27
          },
          end: {
            line: 20,
            column: 28
          }
        },
        loc: {
          start: {
            line: 20,
            column: 37
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 23
          },
          end: {
            line: 42,
            column: 24
          }
        },
        loc: {
          start: {
            line: 42,
            column: 44
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 57,
            column: 30
          }
        },
        loc: {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 60,
            column: 21
          }
        },
        line: 57
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 72,
            column: 26
          },
          end: {
            line: 72,
            column: 27
          }
        },
        loc: {
          start: {
            line: 72,
            column: 50
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 72
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 87,
            column: 30
          }
        },
        loc: {
          start: {
            line: 87,
            column: 37
          },
          end: {
            line: 87,
            column: 91
          }
        },
        line: 87
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 87,
            column: 46
          },
          end: {
            line: 87,
            column: 47
          }
        },
        loc: {
          start: {
            line: 87,
            column: 54
          },
          end: {
            line: 87,
            column: 90
          }
        },
        line: 87
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 27
          }
        },
        loc: {
          start: {
            line: 99,
            column: 38
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 110,
            column: 29
          },
          end: {
            line: 110,
            column: 30
          }
        },
        loc: {
          start: {
            line: 110,
            column: 37
          },
          end: {
            line: 110,
            column: 72
          }
        },
        line: 110
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 110,
            column: 49
          },
          end: {
            line: 110,
            column: 50
          }
        },
        loc: {
          start: {
            line: 110,
            column: 57
          },
          end: {
            line: 110,
            column: 71
          }
        },
        line: 110
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 122,
            column: 30
          },
          end: {
            line: 122,
            column: 31
          }
        },
        loc: {
          start: {
            line: 122,
            column: 42
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 122
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 145,
            column: 29
          },
          end: {
            line: 145,
            column: 30
          }
        },
        loc: {
          start: {
            line: 145,
            column: 39
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 145
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 149,
            column: 26
          },
          end: {
            line: 149,
            column: 27
          }
        },
        loc: {
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 149
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 27,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 27,
            column: 42
          }
        }, {
          start: {
            line: 27,
            column: 46
          },
          end: {
            line: 27,
            column: 76
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        }, {
          start: {
            line: 31,
            column: 19
          },
          end: {
            line: 33,
            column: 13
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 21
          },
          end: {
            line: 36,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 36,
            column: 55
          }
        }, {
          start: {
            line: 36,
            column: 58
          },
          end: {
            line: 36,
            column: 77
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 54,
            column: 32
          },
          end: {
            line: 54,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 32
          },
          end: {
            line: 54,
            column: 42
          }
        }, {
          start: {
            line: 54,
            column: 46
          },
          end: {
            line: 54,
            column: 72
          }
        }],
        line: 54
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: 62,
            column: 19
          },
          end: {
            line: 64,
            column: 13
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 28
          }
        }, {
          start: {
            line: 56,
            column: 32
          },
          end: {
            line: 56,
            column: 44
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 44
          },
          end: {
            line: 67,
            column: 55
          }
        }, {
          start: {
            line: 67,
            column: 58
          },
          end: {
            line: 67,
            column: 77
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "10": {
        loc: {
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 42
          }
        }, {
          start: {
            line: 84,
            column: 46
          },
          end: {
            line: 84,
            column: 77
          }
        }],
        line: 84
      },
      "11": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 91,
            column: 13
          }
        }],
        line: 86
      },
      "12": {
        loc: {
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 86,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 86,
            column: 28
          }
        }, {
          start: {
            line: 86,
            column: 32
          },
          end: {
            line: 86,
            column: 44
          }
        }],
        line: 86
      },
      "13": {
        loc: {
          start: {
            line: 87,
            column: 54
          },
          end: {
            line: 87,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 71
          },
          end: {
            line: 87,
            column: 83
          }
        }, {
          start: {
            line: 87,
            column: 86
          },
          end: {
            line: 87,
            column: 90
          }
        }],
        line: 87
      },
      "14": {
        loc: {
          start: {
            line: 94,
            column: 21
          },
          end: {
            line: 94,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 44
          },
          end: {
            line: 94,
            column: 55
          }
        }, {
          start: {
            line: 94,
            column: 58
          },
          end: {
            line: 94,
            column: 77
          }
        }],
        line: 94
      },
      "15": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "16": {
        loc: {
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 42
          }
        }, {
          start: {
            line: 107,
            column: 46
          },
          end: {
            line: 107,
            column: 75
          }
        }],
        line: 107
      },
      "17": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: 112,
            column: 19
          },
          end: {
            line: 114,
            column: 13
          }
        }],
        line: 109
      },
      "18": {
        loc: {
          start: {
            line: 117,
            column: 21
          },
          end: {
            line: 117,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 44
          },
          end: {
            line: 117,
            column: 55
          }
        }, {
          start: {
            line: 117,
            column: 58
          },
          end: {
            line: 117,
            column: 77
          }
        }],
        line: 117
      },
      "19": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "20": {
        loc: {
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 130,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 130,
            column: 42
          }
        }, {
          start: {
            line: 130,
            column: 46
          },
          end: {
            line: 130,
            column: 84
          }
        }],
        line: 130
      },
      "21": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: 135,
            column: 19
          },
          end: {
            line: 137,
            column: 13
          }
        }],
        line: 132
      },
      "22": {
        loc: {
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 132,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 132,
            column: 28
          }
        }, {
          start: {
            line: 132,
            column: 32
          },
          end: {
            line: 132,
            column: 46
          }
        }],
        line: 132
      },
      "23": {
        loc: {
          start: {
            line: 140,
            column: 21
          },
          end: {
            line: 140,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 140,
            column: 44
          },
          end: {
            line: 140,
            column: 55
          }
        }, {
          start: {
            line: 140,
            column: 58
          },
          end: {
            line: 140,
            column: 77
          }
        }],
        line: 140
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useUserAddresses.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - HOOK PARA DIRECCIONES DE USUARIO\r\n// ===================================\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport interface UserAddress {\r\n  id: string;\r\n  user_id: string;\r\n  title: string;\r\n  street: string;\r\n  city: string;\r\n  state: string;\r\n  postal_code: string;\r\n  country: string;\r\n  is_default: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface CreateAddressData {\r\n  title: string;\r\n  street: string;\r\n  city: string;\r\n  state: string;\r\n  postal_code: string;\r\n  country: string;\r\n  is_default: boolean;\r\n}\r\n\r\nexport interface UseUserAddressesReturn {\r\n  addresses: UserAddress[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  addAddress: (data: CreateAddressData) => Promise<boolean>;\r\n  updateAddress: (id: string, data: CreateAddressData) => Promise<boolean>;\r\n  deleteAddress: (id: string) => Promise<boolean>;\r\n  setDefaultAddress: (id: string) => Promise<boolean>;\r\n  refreshAddresses: () => Promise<void>;\r\n}\r\n\r\nexport function useUserAddresses(): UseUserAddressesReturn {\r\n  const [addresses, setAddresses] = useState<UserAddress[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Funci\xF3n para obtener las direcciones\r\n  const fetchAddresses = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/user/addresses');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al obtener direcciones');\r\n      }\r\n\r\n      if (data.success) {\r\n        setAddresses(data.addresses);\r\n      } else {\r\n        throw new Error('Error al obtener direcciones');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error en useUserAddresses:', err);\r\n      setError(err instanceof Error ? err.message : 'Error desconocido');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Funci\xF3n para agregar una nueva direcci\xF3n\r\n  const addAddress = async (addressData: CreateAddressData): Promise<boolean> => {\r\n    try {\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/user/addresses', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(addressData),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al crear direcci\xF3n');\r\n      }\r\n\r\n      if (data.success && data.address) {\r\n        setAddresses(prev => [...prev, data.address]);\r\n        return true;\r\n      } else {\r\n        throw new Error('Error al crear direcci\xF3n');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al crear direcci\xF3n:', err);\r\n      setError(err instanceof Error ? err.message : 'Error desconocido');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Funci\xF3n para actualizar una direcci\xF3n\r\n  const updateAddress = async (id: string, updateData: CreateAddressData): Promise<boolean> => {\r\n    try {\r\n      setError(null);\r\n\r\n      const response = await fetch(`/api/user/addresses/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updateData),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al actualizar direcci\xF3n');\r\n      }\r\n\r\n      if (data.success && data.address) {\r\n        setAddresses(prev =>\r\n          prev.map(addr => addr.id === id ? data.address : addr)\r\n        );\r\n        return true;\r\n      } else {\r\n        throw new Error('Error al actualizar direcci\xF3n');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al actualizar direcci\xF3n:', err);\r\n      setError(err instanceof Error ? err.message : 'Error desconocido');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Funci\xF3n para eliminar una direcci\xF3n\r\n  const deleteAddress = async (id: string): Promise<boolean> => {\r\n    try {\r\n      setError(null);\r\n\r\n      const response = await fetch(`/api/user/addresses/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al eliminar direcci\xF3n');\r\n      }\r\n\r\n      if (data.success) {\r\n        setAddresses(prev => prev.filter(addr => addr.id !== id));\r\n        return true;\r\n      } else {\r\n        throw new Error('Error al eliminar direcci\xF3n');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al eliminar direcci\xF3n:', err);\r\n      setError(err instanceof Error ? err.message : 'Error desconocido');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Funci\xF3n para marcar direcci\xF3n como principal\r\n  const setDefaultAddress = async (id: string): Promise<boolean> => {\r\n    try {\r\n      setError(null);\r\n\r\n      const response = await fetch(`/api/user/addresses/${id}/default`, {\r\n        method: 'PATCH',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al cambiar direcci\xF3n principal');\r\n      }\r\n\r\n      if (data.success && data.addresses) {\r\n        setAddresses(data.addresses);\r\n        return true;\r\n      } else {\r\n        throw new Error('Error al cambiar direcci\xF3n principal');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al cambiar direcci\xF3n principal:', err);\r\n      setError(err instanceof Error ? err.message : 'Error desconocido');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Funci\xF3n para refrescar las direcciones\r\n  const refreshAddresses = async () => {\r\n    await fetchAddresses();\r\n  };\r\n\r\n  // Cargar direcciones al montar el componente\r\n  useEffect(() => {\r\n    fetchAddresses();\r\n  }, []);\r\n\r\n  return {\r\n    addresses,\r\n    loading,\r\n    error,\r\n    addAddress,\r\n    updateAddress,\r\n    deleteAddress,\r\n    setDefaultAddress,\r\n    refreshAddresses,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["useUserAddresses", "addresses", "setAddresses", "useState", "loading", "setLoading", "error", "setError", "fetchAddresses", "response", "fetch", "data", "json", "ok", "Error", "success", "err", "console", "message", "addAddress", "addressData", "method", "headers", "body", "JSON", "stringify", "address", "prev", "updateAddress", "id", "updateData", "map", "addr", "deleteAddress", "filter", "setDefaultAddress", "refreshAddresses", "useEffect"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "024ecbc1c9288918128f410fd1af5d9047210355"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9us3p6r08 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9us3p6r08();
cov_9us3p6r08().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9us3p6r08().s[1]++;
Object.defineProperty(exports, "useUserAddresses", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9us3p6r08().f[0]++;
    cov_9us3p6r08().s[2]++;
    return useUserAddresses;
  }
});
const _react =
/* istanbul ignore next */
(cov_9us3p6r08().s[3]++, require("react"));
function useUserAddresses() {
  /* istanbul ignore next */
  cov_9us3p6r08().f[1]++;
  const [addresses, setAddresses] =
  /* istanbul ignore next */
  (cov_9us3p6r08().s[4]++, (0, _react.useState)([]));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_9us3p6r08().s[5]++, (0, _react.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_9us3p6r08().s[6]++, (0, _react.useState)(null));
  // Función para obtener las direcciones
  /* istanbul ignore next */
  cov_9us3p6r08().s[7]++;
  const fetchAddresses = async () => {
    /* istanbul ignore next */
    cov_9us3p6r08().f[2]++;
    cov_9us3p6r08().s[8]++;
    try {
      /* istanbul ignore next */
      cov_9us3p6r08().s[9]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_9us3p6r08().s[10]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[11]++, await fetch('/api/user/addresses'));
      const data =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[12]++, await response.json());
      /* istanbul ignore next */
      cov_9us3p6r08().s[13]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[0][0]++;
        cov_9us3p6r08().s[14]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9us3p6r08().b[1][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_9us3p6r08().b[1][1]++, 'Error al obtener direcciones'));
      } else
      /* istanbul ignore next */
      {
        cov_9us3p6r08().b[0][1]++;
      }
      cov_9us3p6r08().s[15]++;
      if (data.success) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[2][0]++;
        cov_9us3p6r08().s[16]++;
        setAddresses(data.addresses);
      } else {
        /* istanbul ignore next */
        cov_9us3p6r08().b[2][1]++;
        cov_9us3p6r08().s[17]++;
        throw new Error('Error al obtener direcciones');
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_9us3p6r08().s[18]++;
      console.error('Error en useUserAddresses:', err);
      /* istanbul ignore next */
      cov_9us3p6r08().s[19]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_9us3p6r08().b[3][0]++, err.message) :
      /* istanbul ignore next */
      (cov_9us3p6r08().b[3][1]++, 'Error desconocido'));
    } finally {
      /* istanbul ignore next */
      cov_9us3p6r08().s[20]++;
      setLoading(false);
    }
  };
  // Función para agregar una nueva dirección
  /* istanbul ignore next */
  cov_9us3p6r08().s[21]++;
  const addAddress = async addressData => {
    /* istanbul ignore next */
    cov_9us3p6r08().f[3]++;
    cov_9us3p6r08().s[22]++;
    try {
      /* istanbul ignore next */
      cov_9us3p6r08().s[23]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[24]++, await fetch('/api/user/addresses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(addressData)
      }));
      const data =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[25]++, await response.json());
      /* istanbul ignore next */
      cov_9us3p6r08().s[26]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[4][0]++;
        cov_9us3p6r08().s[27]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9us3p6r08().b[5][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_9us3p6r08().b[5][1]++, 'Error al crear dirección'));
      } else
      /* istanbul ignore next */
      {
        cov_9us3p6r08().b[4][1]++;
      }
      cov_9us3p6r08().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_9us3p6r08().b[7][0]++, data.success) &&
      /* istanbul ignore next */
      (cov_9us3p6r08().b[7][1]++, data.address)) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[6][0]++;
        cov_9us3p6r08().s[29]++;
        setAddresses(prev => {
          /* istanbul ignore next */
          cov_9us3p6r08().f[4]++;
          cov_9us3p6r08().s[30]++;
          return [...prev, data.address];
        });
        /* istanbul ignore next */
        cov_9us3p6r08().s[31]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_9us3p6r08().b[6][1]++;
        cov_9us3p6r08().s[32]++;
        throw new Error('Error al crear dirección');
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_9us3p6r08().s[33]++;
      console.error('Error al crear dirección:', err);
      /* istanbul ignore next */
      cov_9us3p6r08().s[34]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_9us3p6r08().b[8][0]++, err.message) :
      /* istanbul ignore next */
      (cov_9us3p6r08().b[8][1]++, 'Error desconocido'));
      /* istanbul ignore next */
      cov_9us3p6r08().s[35]++;
      return false;
    }
  };
  // Función para actualizar una dirección
  /* istanbul ignore next */
  cov_9us3p6r08().s[36]++;
  const updateAddress = async (id, updateData) => {
    /* istanbul ignore next */
    cov_9us3p6r08().f[5]++;
    cov_9us3p6r08().s[37]++;
    try {
      /* istanbul ignore next */
      cov_9us3p6r08().s[38]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[39]++, await fetch(`/api/user/addresses/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updateData)
      }));
      const data =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[40]++, await response.json());
      /* istanbul ignore next */
      cov_9us3p6r08().s[41]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[9][0]++;
        cov_9us3p6r08().s[42]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9us3p6r08().b[10][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_9us3p6r08().b[10][1]++, 'Error al actualizar dirección'));
      } else
      /* istanbul ignore next */
      {
        cov_9us3p6r08().b[9][1]++;
      }
      cov_9us3p6r08().s[43]++;
      if (
      /* istanbul ignore next */
      (cov_9us3p6r08().b[12][0]++, data.success) &&
      /* istanbul ignore next */
      (cov_9us3p6r08().b[12][1]++, data.address)) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[11][0]++;
        cov_9us3p6r08().s[44]++;
        setAddresses(prev => {
          /* istanbul ignore next */
          cov_9us3p6r08().f[6]++;
          cov_9us3p6r08().s[45]++;
          return prev.map(addr => {
            /* istanbul ignore next */
            cov_9us3p6r08().f[7]++;
            cov_9us3p6r08().s[46]++;
            return addr.id === id ?
            /* istanbul ignore next */
            (cov_9us3p6r08().b[13][0]++, data.address) :
            /* istanbul ignore next */
            (cov_9us3p6r08().b[13][1]++, addr);
          });
        });
        /* istanbul ignore next */
        cov_9us3p6r08().s[47]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_9us3p6r08().b[11][1]++;
        cov_9us3p6r08().s[48]++;
        throw new Error('Error al actualizar dirección');
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_9us3p6r08().s[49]++;
      console.error('Error al actualizar dirección:', err);
      /* istanbul ignore next */
      cov_9us3p6r08().s[50]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_9us3p6r08().b[14][0]++, err.message) :
      /* istanbul ignore next */
      (cov_9us3p6r08().b[14][1]++, 'Error desconocido'));
      /* istanbul ignore next */
      cov_9us3p6r08().s[51]++;
      return false;
    }
  };
  // Función para eliminar una dirección
  /* istanbul ignore next */
  cov_9us3p6r08().s[52]++;
  const deleteAddress = async id => {
    /* istanbul ignore next */
    cov_9us3p6r08().f[8]++;
    cov_9us3p6r08().s[53]++;
    try {
      /* istanbul ignore next */
      cov_9us3p6r08().s[54]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[55]++, await fetch(`/api/user/addresses/${id}`, {
        method: 'DELETE'
      }));
      const data =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[56]++, await response.json());
      /* istanbul ignore next */
      cov_9us3p6r08().s[57]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[15][0]++;
        cov_9us3p6r08().s[58]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9us3p6r08().b[16][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_9us3p6r08().b[16][1]++, 'Error al eliminar dirección'));
      } else
      /* istanbul ignore next */
      {
        cov_9us3p6r08().b[15][1]++;
      }
      cov_9us3p6r08().s[59]++;
      if (data.success) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[17][0]++;
        cov_9us3p6r08().s[60]++;
        setAddresses(prev => {
          /* istanbul ignore next */
          cov_9us3p6r08().f[9]++;
          cov_9us3p6r08().s[61]++;
          return prev.filter(addr => {
            /* istanbul ignore next */
            cov_9us3p6r08().f[10]++;
            cov_9us3p6r08().s[62]++;
            return addr.id !== id;
          });
        });
        /* istanbul ignore next */
        cov_9us3p6r08().s[63]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_9us3p6r08().b[17][1]++;
        cov_9us3p6r08().s[64]++;
        throw new Error('Error al eliminar dirección');
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_9us3p6r08().s[65]++;
      console.error('Error al eliminar dirección:', err);
      /* istanbul ignore next */
      cov_9us3p6r08().s[66]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_9us3p6r08().b[18][0]++, err.message) :
      /* istanbul ignore next */
      (cov_9us3p6r08().b[18][1]++, 'Error desconocido'));
      /* istanbul ignore next */
      cov_9us3p6r08().s[67]++;
      return false;
    }
  };
  // Función para marcar dirección como principal
  /* istanbul ignore next */
  cov_9us3p6r08().s[68]++;
  const setDefaultAddress = async id => {
    /* istanbul ignore next */
    cov_9us3p6r08().f[11]++;
    cov_9us3p6r08().s[69]++;
    try {
      /* istanbul ignore next */
      cov_9us3p6r08().s[70]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[71]++, await fetch(`/api/user/addresses/${id}/default`, {
        method: 'PATCH'
      }));
      const data =
      /* istanbul ignore next */
      (cov_9us3p6r08().s[72]++, await response.json());
      /* istanbul ignore next */
      cov_9us3p6r08().s[73]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[19][0]++;
        cov_9us3p6r08().s[74]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9us3p6r08().b[20][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_9us3p6r08().b[20][1]++, 'Error al cambiar dirección principal'));
      } else
      /* istanbul ignore next */
      {
        cov_9us3p6r08().b[19][1]++;
      }
      cov_9us3p6r08().s[75]++;
      if (
      /* istanbul ignore next */
      (cov_9us3p6r08().b[22][0]++, data.success) &&
      /* istanbul ignore next */
      (cov_9us3p6r08().b[22][1]++, data.addresses)) {
        /* istanbul ignore next */
        cov_9us3p6r08().b[21][0]++;
        cov_9us3p6r08().s[76]++;
        setAddresses(data.addresses);
        /* istanbul ignore next */
        cov_9us3p6r08().s[77]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_9us3p6r08().b[21][1]++;
        cov_9us3p6r08().s[78]++;
        throw new Error('Error al cambiar dirección principal');
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_9us3p6r08().s[79]++;
      console.error('Error al cambiar dirección principal:', err);
      /* istanbul ignore next */
      cov_9us3p6r08().s[80]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_9us3p6r08().b[23][0]++, err.message) :
      /* istanbul ignore next */
      (cov_9us3p6r08().b[23][1]++, 'Error desconocido'));
      /* istanbul ignore next */
      cov_9us3p6r08().s[81]++;
      return false;
    }
  };
  // Función para refrescar las direcciones
  /* istanbul ignore next */
  cov_9us3p6r08().s[82]++;
  const refreshAddresses = async () => {
    /* istanbul ignore next */
    cov_9us3p6r08().f[12]++;
    cov_9us3p6r08().s[83]++;
    await fetchAddresses();
  };
  // Cargar direcciones al montar el componente
  /* istanbul ignore next */
  cov_9us3p6r08().s[84]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_9us3p6r08().f[13]++;
    cov_9us3p6r08().s[85]++;
    fetchAddresses();
  }, []);
  /* istanbul ignore next */
  cov_9us3p6r08().s[86]++;
  return {
    addresses,
    loading,
    error,
    addAddress,
    updateAddress,
    deleteAddress,
    setDefaultAddress,
    refreshAddresses
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,