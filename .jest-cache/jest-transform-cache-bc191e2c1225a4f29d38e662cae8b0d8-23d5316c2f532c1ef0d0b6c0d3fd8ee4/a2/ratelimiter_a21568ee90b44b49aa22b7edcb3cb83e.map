{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\rate-limiting\\rate-limiter.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - RATE LIMITING MIDDLEWARE\r\n// ===================================\r\n// Sistema de rate limiting enterprise con configuración flexible\r\n// y logging estructurado para APIs críticas\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { headers } from 'next/headers';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface RateLimitConfig {\r\n  windowMs: number;           // Ventana de tiempo en milisegundos\r\n  maxRequests: number;        // Máximo de requests por ventana\r\n  keyGenerator?: (req: NextRequest) => string;  // Generador de clave personalizado\r\n  skipSuccessfulRequests?: boolean;             // Omitir requests exitosos\r\n  skipFailedRequests?: boolean;                 // Omitir requests fallidos\r\n  message?: string;           // Mensaje de error personalizado\r\n  headers?: boolean;          // Incluir headers de rate limit\r\n  standardHeaders?: boolean;  // Usar headers estándar RFC\r\n  legacyHeaders?: boolean;    // Incluir headers legacy\r\n}\r\n\r\nexport interface RateLimitResult {\r\n  allowed: boolean;\r\n  limit: number;\r\n  remaining: number;\r\n  resetTime: number;\r\n  retryAfter?: number;\r\n}\r\n\r\nexport interface RateLimitStore {\r\n  get(key: string): Promise<{ count: number; resetTime: number } | null>;\r\n  set(key: string, value: { count: number; resetTime: number }, ttl: number): Promise<void>;\r\n  increment(key: string, ttl: number): Promise<{ count: number; resetTime: number }>;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIONES PREDEFINIDAS\r\n// ===================================\r\n\r\n// Configuraciones base para producción\r\nconst PRODUCTION_CONFIGS = {\r\n  public: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: 1000,         // 1000 requests por ventana\r\n    message: 'Demasiadas solicitudes. Intente nuevamente en 15 minutos.',\r\n  },\r\n  products: {\r\n    windowMs: 5 * 60 * 1000,   // 5 minutos\r\n    maxRequests: 200,          // 200 requests por ventana\r\n    message: 'Límite de consultas de productos excedido. Intente en 5 minutos.',\r\n  },\r\n  search: {\r\n    windowMs: 5 * 60 * 1000,   // 5 minutos\r\n    maxRequests: 150,          // 150 requests por ventana\r\n    message: 'Límite de búsquedas excedido. Intente en 5 minutos.',\r\n  },\r\n};\r\n\r\n// Configuraciones relajadas para desarrollo\r\nconst DEVELOPMENT_CONFIGS = {\r\n  public: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: 10000,        // 10000 requests por ventana (muy generoso)\r\n    message: 'Demasiadas solicitudes. Intente nuevamente en 15 minutos.',\r\n  },\r\n  products: {\r\n    windowMs: 1 * 60 * 1000,   // 1 minuto\r\n    maxRequests: 1000,         // 1000 requests por minuto (muy generoso)\r\n    message: 'Límite de consultas de productos excedido. Intente en 1 minuto.',\r\n  },\r\n  search: {\r\n    windowMs: 1 * 60 * 1000,   // 1 minuto\r\n    maxRequests: 500,          // 500 requests por minuto (muy generoso)\r\n    message: 'Límite de búsquedas excedido. Intente en 1 minuto.',\r\n  },\r\n};\r\n\r\n// ===================================\r\n// HELPER PARA VERIFICAR SI RATE LIMITING ESTÁ HABILITADO\r\n// ===================================\r\n\r\nfunction isRateLimitingEnabled(): boolean {\r\n  // Permitir deshabilitar rate limiting en desarrollo con variable de entorno\r\n  if (process.env.DISABLE_RATE_LIMITING === 'true') {\r\n    return false;\r\n  }\r\n\r\n  // En desarrollo, usar rate limiting relajado pero habilitado por defecto\r\n  return true;\r\n}\r\n\r\n// Seleccionar configuración según el entorno\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\nconst baseConfigs = isDevelopment ? DEVELOPMENT_CONFIGS : PRODUCTION_CONFIGS;\r\n\r\nexport const RATE_LIMIT_CONFIGS = {\r\n  // APIs públicas - límites generosos\r\n  public: baseConfigs.public,\r\n\r\n  // APIs de productos - límites moderados\r\n  products: baseConfigs.products,\r\n\r\n  // APIs de búsqueda - límites moderados\r\n  search: baseConfigs.search,\r\n  \r\n  // APIs de autenticación - límites estrictos\r\n  auth: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: isDevelopment ? 100 : 10,  // 100 en dev, 10 en prod\r\n    message: 'Demasiados intentos de autenticación. Intente en 15 minutos.',\r\n  },\r\n\r\n  // APIs de admin - límites moderados pero monitoreados\r\n  admin: {\r\n    windowMs: 10 * 60 * 1000,  // 10 minutos\r\n    maxRequests: isDevelopment ? 1000 : 100,  // 1000 en dev, 100 en prod\r\n    message: 'Límite de operaciones administrativas excedido.',\r\n  },\r\n\r\n  // APIs de pagos - límites muy estrictos\r\n  payment: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: isDevelopment ? 100 : 30,  // 100 en dev, 30 en prod\r\n    message: 'Límite de operaciones de pago excedido. Intente en 15 minutos.',\r\n  },\r\n\r\n  // APIs de creación - límites estrictos\r\n  creation: {\r\n    windowMs: 10 * 60 * 1000,  // 10 minutos\r\n    maxRequests: isDevelopment ? 200 : 20,  // 200 en dev, 20 en prod\r\n    message: 'Límite de creación de recursos excedido.',\r\n  },\r\n\r\n  // Webhooks - límites rápidos pero altos\r\n  webhook: {\r\n    windowMs: 1 * 60 * 1000,   // 1 minuto\r\n    maxRequests: isDevelopment ? 1000 : 100,  // 1000 en dev, 100 en prod\r\n    message: 'Límite de webhooks excedido. Intente en 1 minuto.',\r\n  }\r\n} as const;\r\n\r\n// ===================================\r\n// LOGGING DE CONFIGURACIÓN\r\n// ===================================\r\n\r\n// Log de configuración al cargar el módulo\r\nif (process.env.NODE_ENV === 'development') {\r\n  console.log('[RATE_LIMITER] Configuración cargada:', {\r\n    environment: process.env.NODE_ENV,\r\n    rateLimitingEnabled: isRateLimitingEnabled(),\r\n    disableRateLimiting: process.env.DISABLE_RATE_LIMITING,\r\n    productLimits: {\r\n      windowMs: RATE_LIMIT_CONFIGS.products.windowMs / 1000 / 60 + ' minutos',\r\n      maxRequests: RATE_LIMIT_CONFIGS.products.maxRequests\r\n    },\r\n    searchLimits: {\r\n      windowMs: RATE_LIMIT_CONFIGS.search.windowMs / 1000 / 60 + ' minutos',\r\n      maxRequests: RATE_LIMIT_CONFIGS.search.maxRequests\r\n    }\r\n  });\r\n}\r\n\r\n// ===================================\r\n// STORE EN MEMORIA (PARA DESARROLLO)\r\n// ===================================\r\n\r\nclass MemoryStore implements RateLimitStore {\r\n  private store = new Map<string, { count: number; resetTime: number }>();\r\n\r\n  async get(key: string): Promise<{ count: number; resetTime: number } | null> {\r\n    const data = this.store.get(key);\r\n    if (!data) {return null;}\r\n    \r\n    // Limpiar datos expirados\r\n    if (Date.now() > data.resetTime) {\r\n      this.store.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  async set(key: string, value: { count: number; resetTime: number }, ttl: number): Promise<void> {\r\n    this.store.set(key, value);\r\n    \r\n    // Limpiar automáticamente después del TTL\r\n    setTimeout(() => {\r\n      this.store.delete(key);\r\n    }, ttl);\r\n  }\r\n\r\n  async increment(key: string, ttl: number): Promise<{ count: number; resetTime: number }> {\r\n    const now = Date.now();\r\n    const existing = await this.get(key);\r\n    \r\n    if (!existing) {\r\n      const newData = { count: 1, resetTime: now + ttl };\r\n      await this.set(key, newData, ttl);\r\n      return newData;\r\n    }\r\n    \r\n    const updatedData = { ...existing, count: existing.count + 1 };\r\n    await this.set(key, updatedData, existing.resetTime - now);\r\n    return updatedData;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// INSTANCIA GLOBAL DEL STORE\r\n// ===================================\r\n\r\nconst defaultStore = new MemoryStore();\r\n\r\n// ===================================\r\n// GENERADORES DE CLAVE\r\n// ===================================\r\n\r\nexport const keyGenerators = {\r\n  // Por IP\r\n  ip: (req: NextRequest): string => {\r\n    const forwarded = req.headers.get('x-forwarded-for');\r\n    const ip = forwarded ? forwarded.split(',')[0] : req.headers.get('x-real-ip') || 'unknown';\r\n    return `ip:${ip}`;\r\n  },\r\n  \r\n  // Por usuario autenticado (requiere implementación específica)\r\n  user: (req: NextRequest): string => {\r\n    // TODO: Implementar extracción de user ID desde token/session\r\n    const userId = req.headers.get('x-user-id') || 'anonymous';\r\n    return `user:${userId}`;\r\n  },\r\n  \r\n  // Por endpoint específico\r\n  endpoint: (req: NextRequest): string => {\r\n    const url = new URL(req.url);\r\n    return `endpoint:${url.pathname}`;\r\n  },\r\n  \r\n  // Combinado IP + endpoint\r\n  combined: (req: NextRequest): string => {\r\n    const ip = keyGenerators.ip(req);\r\n    const endpoint = keyGenerators.endpoint(req);\r\n    return `${ip}:${endpoint}`;\r\n  }\r\n};\r\n\r\n// ===================================\r\n// FACTORY PARA CREAR RATE LIMITERS\r\n// ===================================\r\n\r\n/**\r\n * Crea un rate limiter con configuración específica\r\n */\r\nexport function createRateLimiter(\r\n  config: Partial<RateLimitConfig> = {},\r\n  store: RateLimitStore = defaultStore\r\n) {\r\n  const finalConfig: RateLimitConfig = {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos por defecto\r\n    maxRequests: 100,          // 100 requests por defecto\r\n    message: 'Rate limit exceeded',\r\n    headers: true,\r\n    standardHeaders: true,\r\n    legacyHeaders: true,\r\n    ...config\r\n  };\r\n\r\n  return async (req: NextRequest): Promise<RateLimitResult> => {\r\n    return await checkRateLimit(req, finalConfig, store);\r\n  };\r\n}\r\n\r\n// ===================================\r\n// FUNCIÓN PRINCIPAL DE RATE LIMITING\r\n// ===================================\r\n\r\nexport async function checkRateLimit(\r\n  req: NextRequest,\r\n  config: RateLimitConfig,\r\n  store: RateLimitStore = defaultStore\r\n): Promise<RateLimitResult> {\r\n  const keyGenerator = config.keyGenerator || keyGenerators.combined;\r\n  const key = keyGenerator(req);\r\n  \r\n  try {\r\n    const data = await store.increment(key, config.windowMs);\r\n    \r\n    const result: RateLimitResult = {\r\n      allowed: data.count <= config.maxRequests,\r\n      limit: config.maxRequests,\r\n      remaining: Math.max(0, config.maxRequests - data.count),\r\n      resetTime: data.resetTime,\r\n    };\r\n    \r\n    if (!result.allowed) {\r\n      result.retryAfter = Math.ceil((data.resetTime - Date.now()) / 1000);\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('[RATE_LIMITER] Error checking rate limit:', error);\r\n    \r\n    // En caso de error, permitir la request (fail-open)\r\n    return {\r\n      allowed: true,\r\n      limit: config.maxRequests,\r\n      remaining: config.maxRequests,\r\n      resetTime: Date.now() + config.windowMs,\r\n    };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE RATE LIMITING\r\n// ===================================\r\n\r\nexport function createRateLimitMiddleware(config: RateLimitConfig) {\r\n  return async (req: NextRequest): Promise<NextResponse | null> => {\r\n    const result = await checkRateLimit(req, config);\r\n    \r\n    // Crear headers de rate limit\r\n    const headers = new Headers();\r\n    \r\n    if (config.headers !== false) {\r\n      if (config.standardHeaders !== false) {\r\n        // Headers estándar RFC 6585\r\n        headers.set('RateLimit-Limit', result.limit.toString());\r\n        headers.set('RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('RateLimit-Reset', new Date(result.resetTime).toISOString());\r\n      }\r\n      \r\n      if (config.legacyHeaders !== false) {\r\n        // Headers legacy para compatibilidad\r\n        headers.set('X-RateLimit-Limit', result.limit.toString());\r\n        headers.set('X-RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\r\n      }\r\n    }\r\n    \r\n    if (!result.allowed) {\r\n      if (result.retryAfter) {\r\n        headers.set('Retry-After', result.retryAfter.toString());\r\n      }\r\n      \r\n      // Log del rate limit excedido\r\n      console.warn('[RATE_LIMITER] Rate limit exceeded:', {\r\n        key: config.keyGenerator ? config.keyGenerator(req) : 'combined',\r\n        limit: result.limit,\r\n        resetTime: new Date(result.resetTime).toISOString(),\r\n        userAgent: req.headers.get('user-agent'),\r\n        ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip'),\r\n      });\r\n      \r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: 'Rate limit exceeded',\r\n          message: config.message || 'Too many requests',\r\n          retryAfter: result.retryAfter,\r\n        }),\r\n        {\r\n          status: 429,\r\n          headers,\r\n        }\r\n      );\r\n    }\r\n    \r\n    // Request permitida, agregar headers informativos\r\n    return NextResponse.next({\r\n      headers,\r\n    });\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HELPER PARA APLICAR RATE LIMITING\r\n// ===================================\r\n\r\nexport async function withRateLimit<T>(\r\n  req: NextRequest,\r\n  config: RateLimitConfig,\r\n  handler: () => Promise<T>\r\n): Promise<T | NextResponse> {\r\n  // Si rate limiting está deshabilitado, ejecutar directamente el handler\r\n  if (!isRateLimitingEnabled()) {\r\n    return await handler();\r\n  }\r\n\r\n  const result = await checkRateLimit(req, config);\r\n\r\n  if (!result.allowed) {\r\n    // Crear headers de rate limit\r\n    const headers = new Headers();\r\n\r\n    if (config.headers !== false) {\r\n      if (config.standardHeaders !== false) {\r\n        // Headers estándar RFC 6585\r\n        headers.set('RateLimit-Limit', result.limit.toString());\r\n        headers.set('RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('RateLimit-Reset', new Date(result.resetTime).toISOString());\r\n      }\r\n\r\n      if (config.legacyHeaders !== false) {\r\n        // Headers legacy para compatibilidad\r\n        headers.set('X-RateLimit-Limit', result.limit.toString());\r\n        headers.set('X-RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\r\n      }\r\n    }\r\n\r\n    if (result.retryAfter) {\r\n      headers.set('Retry-After', result.retryAfter.toString());\r\n    }\r\n\r\n    // Log del rate limit excedido\r\n    console.warn('[RATE_LIMITER] Rate limit exceeded:', {\r\n      key: config.keyGenerator ? config.keyGenerator(req) : 'combined',\r\n      limit: result.limit,\r\n      resetTime: new Date(result.resetTime).toISOString(),\r\n      userAgent: req.headers.get('user-agent'),\r\n      ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip'),\r\n    });\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Rate limit exceeded',\r\n        message: config.message || 'Too many requests',\r\n        retryAfter: result.retryAfter,\r\n      }),\r\n      {\r\n        status: 429,\r\n        headers,\r\n      }\r\n    );\r\n  }\r\n\r\n  return handler();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["RATE_LIMIT_CONFIGS","checkRateLimit","createRateLimitMiddleware","createRateLimiter","keyGenerators","withRateLimit","PRODUCTION_CONFIGS","public","windowMs","maxRequests","message","products","search","DEVELOPMENT_CONFIGS","isRateLimitingEnabled","process","env","DISABLE_RATE_LIMITING","isDevelopment","NODE_ENV","baseConfigs","auth","admin","payment","creation","webhook","console","log","environment","rateLimitingEnabled","disableRateLimiting","productLimits","searchLimits","MemoryStore","get","key","data","store","Date","now","resetTime","delete","set","value","ttl","setTimeout","increment","existing","newData","count","updatedData","Map","defaultStore","ip","req","forwarded","headers","split","user","userId","endpoint","url","URL","pathname","combined","config","finalConfig","standardHeaders","legacyHeaders","keyGenerator","result","allowed","limit","remaining","Math","max","retryAfter","ceil","error","Headers","toString","toISOString","warn","userAgent","NextResponse","JSON","stringify","status","next","handler"],"mappings":"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"}