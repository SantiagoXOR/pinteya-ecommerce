{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security\\penetration-audit-system.test.ts"],"sourcesContent":["/**\r\n * Tests de Penetración para Sistema de Auditoría Enterprise\r\n * Valida la robustez del sistema de auditoría contra ataques sofisticados\r\n */\r\n\r\n// Mock de dependencias con eventos simulados\r\nconst mockEvents: any[] = [];\r\n// Hacer el array accesible globalmente para el sistema de auditoría\r\n(global as any).__mockEvents = mockEvents;\r\n\r\njest.mock('@/lib/supabase', () => ({\r\n  supabaseAdmin: {\r\n    from: jest.fn((table: string) => {\r\n      if (table === 'enterprise_audit_events') {\r\n        // Crear un objeto query builder que soporte encadenamiento\r\n        const createQueryBuilder = () => ({\r\n          eq: jest.fn(() => createQueryBuilder()),\r\n          single: jest.fn().mockResolvedValue({ data: null, error: null }),\r\n          range: jest.fn(() => createQueryBuilder()),\r\n          order: jest.fn().mockResolvedValue({ data: mockEvents, error: null }),\r\n          gte: jest.fn(() => createQueryBuilder()),\r\n          lte: jest.fn(() => createQueryBuilder())\r\n        });\r\n\r\n        return {\r\n          select: jest.fn(() => createQueryBuilder()),\r\n          insert: jest.fn((event: any) => {\r\n            // Simular inserción de evento con timestamp\r\n            const eventWithTimestamp = {\r\n              ...event,\r\n              id: `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n              created_at: new Date().toISOString()\r\n            };\r\n            mockEvents.push(eventWithTimestamp);\r\n            return {\r\n              select: jest.fn(() => ({\r\n                single: jest.fn().mockResolvedValue({ data: { id: 'test_id' }, error: null })\r\n              }))\r\n            };\r\n          })\r\n        };\r\n      }\r\n      // Para otras tablas, retornar mock básico\r\n      return {\r\n        select: jest.fn(() => ({\r\n          eq: jest.fn(() => ({\r\n            single: jest.fn().mockResolvedValue({ data: null, error: null })\r\n          }))\r\n        }))\r\n      };\r\n    })\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/auth/security-audit', () => ({\r\n  logSecurityEvent: jest.fn().mockResolvedValue(true)\r\n}));\r\n\r\njest.mock('@/lib/rate-limiting/enterprise-rate-limiter', () => ({\r\n  metricsCollector: {\r\n    getMetrics: jest.fn().mockReturnValue({\r\n      totalRequests: 1000,\r\n      allowedRequests: 950,\r\n      blockedRequests: 50,\r\n      redisHits: 900,\r\n      memoryFallbacks: 100,\r\n      errors: 5,\r\n      averageResponseTime: 45,\r\n      topBlockedIPs: [\r\n        { ip: '192.168.1.100', count: 25 },\r\n        { ip: '10.0.0.50', count: 15 }\r\n      ],\r\n      topEndpoints: [\r\n        { endpoint: '/api/admin', count: 30 },\r\n        { endpoint: '/api/payments', count: 20 }\r\n      ]\r\n    })\r\n  }\r\n}));\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport {\r\n  enterpriseAuditSystem,\r\n  type EnterpriseSecurityEvent,\r\n  type SecurityAnomalyDetection,\r\n  ENTERPRISE_AUDIT_CONFIG\r\n} from '@/lib/security/enterprise-audit-system';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\n\r\ndescribe('Tests de Penetración - Sistema de Auditoría Enterprise', () => {\r\n  let mockContext: EnterpriseAuthContext;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n\r\n    // Limpiar eventos mock\r\n    mockEvents.length = 0;\r\n\r\n    mockContext = {\r\n      userId: 'test_user_123',\r\n      sessionId: 'test_session_123',\r\n      email: 'test@example.com',\r\n      role: 'admin',\r\n      permissions: ['admin_access'],\r\n      sessionValid: true,\r\n      securityLevel: 'high',\r\n      ipAddress: '192.168.1.1',\r\n      userAgent: 'test-agent',\r\n      supabase: {} as any,\r\n      validations: {\r\n        jwtValid: true,\r\n        csrfValid: true,\r\n        rateLimitPassed: true,\r\n        originValid: true\r\n      }\r\n    };\r\n  });\r\n\r\n  describe('Ataques de Evasión de Auditoría', () => {\r\n    it('debe detectar intentos de bypass del sistema de logging', async () => {\r\n      const evasionAttempts = [\r\n        // Intento 1: Event type manipulation\r\n        {\r\n          user_id: 'attacker_123',\r\n          event_type: 'AUTH_SUCCESS' as any, // Falso éxito\r\n          event_category: 'authentication',\r\n          severity: 'low' as any,\r\n          description: 'Legitimate login', // Descripción engañosa\r\n          metadata: { \r\n            actual_event: 'UNAUTHORIZED_ACCESS',\r\n            bypass_attempt: true \r\n          },\r\n          ip_address: '192.168.1.100',\r\n          user_agent: 'LegitimateBot/1.0'\r\n        },\r\n        \r\n        // Intento 2: Severity downgrade\r\n        {\r\n          user_id: 'attacker_123',\r\n          event_type: 'SECURITY_VIOLATION' as any,\r\n          event_category: 'suspicious_behavior',\r\n          severity: 'low' as any, // Debería ser critical\r\n          description: 'Minor security issue',\r\n          metadata: { \r\n            real_severity: 'critical',\r\n            admin_access_attempt: true \r\n          },\r\n          ip_address: '192.168.1.100',\r\n          user_agent: 'AttackBot/2.0'\r\n        },\r\n\r\n        // Intento 3: Metadata pollution\r\n        {\r\n          user_id: 'attacker_123',\r\n          event_type: 'DATA_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'medium' as any,\r\n          description: 'Normal data access',\r\n          metadata: {\r\n            // Intentar contaminar con datos masivos\r\n            pollution: 'x'.repeat(10000),\r\n            nested: {\r\n              deep: {\r\n                very: {\r\n                  deep: {\r\n                    data: 'x'.repeat(5000)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          ip_address: '192.168.1.100',\r\n          user_agent: 'DataPollutionBot/1.0'\r\n        }\r\n      ];\r\n\r\n      const results = [];\r\n      for (const attempt of evasionAttempts) {\r\n        try {\r\n          const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\r\n            attempt,\r\n            mockContext\r\n          );\r\n          results.push({ success: true, correlationId });\r\n        } catch (error) {\r\n          results.push({ success: false, error: error.message });\r\n        }\r\n      }\r\n\r\n      // Verificar que todos los eventos fueron registrados (no evasión exitosa)\r\n      expect(results.every(r => r.success)).toBe(true);\r\n      \r\n      // Verificar que se generaron correlation IDs únicos\r\n      const correlationIds = results.map(r => r.correlationId);\r\n      expect(new Set(correlationIds).size).toBe(correlationIds.length);\r\n    });\r\n\r\n    it('debe resistir ataques de flooding de eventos', async () => {\r\n      const floodingAttack = Array.from({ length: 1000 }, (_, i) => ({\r\n        user_id: 'flooder_123',\r\n        event_type: 'SPAM_EVENT' as any,\r\n        event_category: 'attack',\r\n        severity: 'low' as any,\r\n        description: `Flooding event ${i}`,\r\n        metadata: { \r\n          flood_index: i,\r\n          timestamp: Date.now() + i \r\n        },\r\n        ip_address: '10.0.0.100',\r\n        user_agent: 'FloodBot/1.0'\r\n      }));\r\n\r\n      const startTime = Date.now();\r\n      const results = [];\r\n\r\n      // Intentar flooding masivo\r\n      for (const event of floodingAttack) {\r\n        try {\r\n          const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\r\n            event,\r\n            mockContext\r\n          );\r\n          results.push({ success: true, correlationId });\r\n        } catch (error) {\r\n          results.push({ success: false, error: error.message });\r\n        }\r\n      }\r\n\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n      const avgTimePerEvent = totalTime / 1000;\r\n\r\n      // Verificar que el sistema mantuvo performance\r\n      expect(avgTimePerEvent).toBeLessThan(10); // < 10ms por evento\r\n\r\n      // Verificar que se procesaron todos los eventos\r\n      expect(results.length).toBe(1000);\r\n      \r\n      // Verificar que el sistema no se crasheó\r\n      const successCount = results.filter(r => r.success).length;\r\n      expect(successCount).toBeGreaterThan(900); // Al menos 90% exitosos\r\n    });\r\n\r\n    it('debe detectar intentos de manipulación de timestamps', async () => {\r\n      const timestampManipulationAttempts = [\r\n        // Futuro lejano\r\n        {\r\n          user_id: 'time_attacker_123',\r\n          event_type: 'AUTH_SUCCESS' as any,\r\n          event_category: 'authentication',\r\n          severity: 'low' as any,\r\n          description: 'Future login attempt',\r\n          metadata: { \r\n            manipulated_timestamp: new Date('2030-01-01').toISOString(),\r\n            real_time: new Date().toISOString()\r\n          },\r\n          ip_address: '172.16.0.100',\r\n          user_agent: 'TimeTravelBot/1.0'\r\n        },\r\n        \r\n        // Pasado lejano\r\n        {\r\n          user_id: 'time_attacker_123',\r\n          event_type: 'DATA_DELETION' as any,\r\n          event_category: 'data_access',\r\n          severity: 'critical' as any,\r\n          description: 'Historical data deletion',\r\n          metadata: { \r\n            manipulated_timestamp: new Date('1990-01-01').toISOString(),\r\n            backdated: true\r\n          },\r\n          ip_address: '172.16.0.100',\r\n          user_agent: 'BackdateBot/1.0'\r\n        }\r\n      ];\r\n\r\n      const results = [];\r\n      for (const attempt of timestampManipulationAttempts) {\r\n        const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\r\n          attempt,\r\n          mockContext\r\n        );\r\n        results.push(correlationId);\r\n      }\r\n\r\n      // Verificar que se generaron correlation IDs (eventos registrados)\r\n      expect(results.every(id => id && id.startsWith('corr_'))).toBe(true);\r\n      \r\n      // El sistema debería usar sus propios timestamps, no los manipulados\r\n      expect(results.length).toBe(2);\r\n    });\r\n  });\r\n\r\n  describe('Ataques de Detección de Anomalías', () => {\r\n    it('debe detectar patrones de ataque sofisticados', async () => {\r\n      // Simular patrón de ataque APT (Advanced Persistent Threat)\r\n      const aptAttackPattern = [\r\n        // Fase 1: Múltiples fallos de autenticación (brute force)\r\n        {\r\n          user_id: 'apt_actor_123',\r\n          event_type: 'AUTH_FAILURE' as any,\r\n          event_category: 'authentication',\r\n          severity: 'medium' as any,\r\n          description: 'Failed login attempt',\r\n          metadata: {\r\n            phase: 'reconnaissance',\r\n            location: 'Unknown Country',\r\n            reason: 'invalid_password'\r\n          },\r\n          ip_address: '203.0.113.100',\r\n          user_agent: 'Mozilla/5.0 (legitimate looking)',\r\n          timestamp: new Date(Date.now() - 300000).toISOString() // 5 min ago\r\n        },\r\n        {\r\n          user_id: 'apt_actor_123',\r\n          event_type: 'AUTH_FAILURE' as any,\r\n          event_category: 'authentication',\r\n          severity: 'medium' as any,\r\n          description: 'Failed login attempt',\r\n          metadata: {\r\n            phase: 'reconnaissance',\r\n            location: 'Unknown Country',\r\n            reason: 'invalid_password'\r\n          },\r\n          ip_address: '203.0.113.100',\r\n          user_agent: 'Mozilla/5.0 (legitimate looking)',\r\n          timestamp: new Date(Date.now() - 240000).toISOString() // 4 min ago\r\n        },\r\n        {\r\n          user_id: 'apt_actor_123',\r\n          event_type: 'AUTH_FAILURE' as any,\r\n          event_category: 'authentication',\r\n          severity: 'medium' as any,\r\n          description: 'Failed login attempt',\r\n          metadata: {\r\n            phase: 'reconnaissance',\r\n            location: 'Unknown Country',\r\n            reason: 'invalid_password'\r\n          },\r\n          ip_address: '203.0.113.100',\r\n          user_agent: 'Mozilla/5.0 (legitimate looking)',\r\n          timestamp: new Date(Date.now() - 180000).toISOString() // 3 min ago\r\n        },\r\n\r\n        // Fase 2: Login exitoso después de fallos (brute force exitoso)\r\n        {\r\n          user_id: 'apt_actor_123',\r\n          event_type: 'AUTH_SUCCESS' as any,\r\n          event_category: 'authentication',\r\n          severity: 'high' as any,\r\n          description: 'Successful login after multiple failures',\r\n          metadata: {\r\n            phase: 'privilege_escalation',\r\n            location: 'Unknown Country',\r\n            suspicious_pattern: true\r\n          },\r\n          ip_address: '203.0.113.100',\r\n          user_agent: 'Mozilla/5.0 (legitimate looking)',\r\n          timestamp: new Date(Date.now() - 120000).toISOString() // 2 min ago\r\n        },\r\n\r\n        // Fase 3: Acceso a APIs críticas\r\n        {\r\n          user_id: 'apt_actor_123',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'api_usage',\r\n          severity: 'high' as any,\r\n          description: 'Critical API access',\r\n          metadata: {\r\n            phase: 'data_exfiltration',\r\n            endpoint: '/api/admin/users',\r\n            method: 'GET',\r\n            response_size: 50000\r\n          },\r\n          ip_address: '203.0.113.100',\r\n          user_agent: 'Mozilla/5.0 (legitimate looking)',\r\n          timestamp: new Date(Date.now() - 60000).toISOString() // 1 min ago\r\n        }\r\n      ];\r\n\r\n      // Registrar patrón de ataque con intervalos realistas\r\n      for (const [index, event] of aptAttackPattern.entries()) {\r\n        await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\r\n        \r\n        // Esperar entre eventos para simular comportamiento real\r\n        if (index < aptAttackPattern.length - 1) {\r\n          await new Promise(resolve => setTimeout(resolve, 100));\r\n        }\r\n      }\r\n\r\n      // Ejecutar detección de anomalías\r\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('apt_actor_123');\r\n\r\n      // Verificar que se detectó el patrón APT\r\n      expect(anomalies.length).toBeGreaterThan(0);\r\n      \r\n      // Verificar que se detectaron anomalías de alta confianza\r\n      const highConfidenceAnomalies = anomalies.filter(a => a.confidence_score >= 0.8);\r\n      expect(highConfidenceAnomalies.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('debe detectar ataques de lateral movement', async () => {\r\n      const lateralMovementPattern = [\r\n        // Usuario comprometido accede a múltiples sistemas (data_access para detectSuspiciousAPIUsage)\r\n        {\r\n          user_id: 'compromised_user_456',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'medium' as any,\r\n          description: 'Database system access',\r\n          metadata: {\r\n            endpoint: '/api/database/users',\r\n            method: 'GET',\r\n            response_size: 15000,\r\n            unusual_access: true\r\n          },\r\n          ip_address: '192.168.1.150',\r\n          user_agent: 'InternalTool/1.0'\r\n        },\r\n\r\n        {\r\n          user_id: 'compromised_user_456',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'medium' as any,\r\n          description: 'File server system access',\r\n          metadata: {\r\n            endpoint: '/api/files/list',\r\n            method: 'GET',\r\n            response_size: 25000,\r\n            unusual_time: true\r\n          },\r\n          ip_address: '192.168.1.150',\r\n          user_agent: 'InternalTool/1.0'\r\n        },\r\n\r\n        {\r\n          user_id: 'compromised_user_456',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'medium' as any,\r\n          description: 'Admin system access',\r\n          metadata: {\r\n            endpoint: '/api/admin/settings',\r\n            method: 'GET',\r\n            response_size: 8000,\r\n            unusual_access: true\r\n          },\r\n          ip_address: '192.168.1.150',\r\n          user_agent: 'InternalTool/1.0'\r\n        },\r\n\r\n        {\r\n          user_id: 'compromised_user_456',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'medium' as any,\r\n          description: 'Payment system access',\r\n          metadata: {\r\n            endpoint: '/api/payments/history',\r\n            method: 'GET',\r\n            response_size: 35000,\r\n            unusual_access: true\r\n          },\r\n          ip_address: '192.168.1.150',\r\n          user_agent: 'InternalTool/1.0'\r\n        },\r\n\r\n        {\r\n          user_id: 'compromised_user_456',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'high' as any,\r\n          description: 'Customer system access',\r\n          metadata: {\r\n            endpoint: '/api/customers/sensitive',\r\n            method: 'GET',\r\n            response_size: 50000,\r\n            unusual_access: true\r\n          },\r\n          ip_address: '192.168.1.150',\r\n          user_agent: 'InternalTool/1.0'\r\n        }\r\n      ];\r\n\r\n      // Registrar patrón de lateral movement\r\n      for (const event of lateralMovementPattern) {\r\n        await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\r\n      }\r\n\r\n      // Detectar anomalías\r\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('compromised_user_456');\r\n\r\n      // Debug logs removidos para limpieza\r\n\r\n      // Verificar detección de lateral movement\r\n      expect(anomalies.length).toBeGreaterThan(0);\r\n\r\n      // Verificar que se identificó el patrón de acceso múltiple\r\n      const systemAccessAnomalies = anomalies.filter(a =>\r\n        a.description.includes('system') || a.description.includes('access') ||\r\n        a.description.includes('API') || a.description.includes('sospechoso')\r\n      );\r\n      expect(systemAccessAnomalies.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('debe detectar ataques de data exfiltration', async () => {\r\n      const dataExfiltrationPattern = [\r\n        // Acceso masivo a datos (API_ACCESS para detectSuspiciousAPIUsage)\r\n        {\r\n          user_id: 'data_thief_789',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'critical' as any,\r\n          description: 'Large dataset download',\r\n          metadata: {\r\n            endpoint: '/api/users/export',\r\n            method: 'GET',\r\n            response_size: 500000, // 500MB para trigger high confidence\r\n            records_accessed: 10000,\r\n            suspicious: true\r\n          },\r\n          ip_address: '198.51.100.200',\r\n          user_agent: 'DataExtractor/2.0'\r\n        },\r\n\r\n        // Múltiples exportaciones masivas\r\n        {\r\n          user_id: 'data_thief_789',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'critical' as any,\r\n          description: 'Customer data export',\r\n          metadata: {\r\n            endpoint: '/api/customers/bulk-export',\r\n            method: 'POST',\r\n            response_size: 750000, // 750MB para trigger high confidence\r\n            records_count: 15000,\r\n            contains_pii: true\r\n          },\r\n          ip_address: '198.51.100.200',\r\n          user_agent: 'DataExtractor/2.0'\r\n        },\r\n\r\n        {\r\n          user_id: 'data_thief_789',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'critical' as any,\r\n          description: 'Financial data access',\r\n          metadata: {\r\n            endpoint: '/api/financial/reports',\r\n            method: 'GET',\r\n            response_size: 600000,\r\n            records_accessed: 8000,\r\n            sensitive_data: true\r\n          },\r\n          ip_address: '198.51.100.200',\r\n          user_agent: 'DataExtractor/2.0'\r\n        },\r\n\r\n        {\r\n          user_id: 'data_thief_789',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'critical' as any,\r\n          description: 'Payment data access',\r\n          metadata: {\r\n            endpoint: '/api/payments/transactions',\r\n            method: 'GET',\r\n            response_size: 800000,\r\n            records_accessed: 12000,\r\n            contains_pii: true\r\n          },\r\n          ip_address: '198.51.100.200',\r\n          user_agent: 'DataExtractor/2.0'\r\n        },\r\n\r\n        {\r\n          user_id: 'data_thief_789',\r\n          event_type: 'API_ACCESS' as any,\r\n          event_category: 'data_access',\r\n          severity: 'critical' as any,\r\n          description: 'Admin data access',\r\n          metadata: {\r\n            endpoint: '/api/admin/users/full',\r\n            method: 'GET',\r\n            response_size: 900000,\r\n            records_accessed: 20000,\r\n            admin_only: true\r\n          },\r\n          ip_address: '198.51.100.200',\r\n          user_agent: 'DataExtractor/2.0'\r\n        }\r\n      ];\r\n\r\n      // Registrar patrón de exfiltración\r\n      for (const event of dataExfiltrationPattern) {\r\n        await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\r\n      }\r\n\r\n      // Detectar anomalías\r\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('data_thief_789');\r\n\r\n      // Debug logs removidos para limpieza\r\n\r\n      // Verificar detección de exfiltración\r\n      expect(anomalies.length).toBeGreaterThan(0);\r\n\r\n      // Verificar alta confianza en detección\r\n      const criticalAnomalies = anomalies.filter(a => a.confidence_score > 0.9);\r\n      expect(criticalAnomalies.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Ataques de Negación de Servicio al Sistema de Auditoría', () => {\r\n    it('debe resistir ataques de log bombing', async () => {\r\n      const logBombingAttack = Array.from({ length: 10000 }, (_, i) => ({\r\n        user_id: `bomber_${i % 100}`, // 100 usuarios diferentes\r\n        event_type: 'LOG_BOMB' as any,\r\n        event_category: 'attack',\r\n        severity: 'low' as any,\r\n        description: `Log bomb event ${i}`,\r\n        metadata: { \r\n          bomb_index: i,\r\n          payload: 'x'.repeat(1000) // 1KB por evento\r\n        },\r\n        ip_address: `10.0.${Math.floor(i/255)}.${i%255}`,\r\n        user_agent: 'LogBomber/1.0'\r\n      }));\r\n\r\n      const startTime = Date.now();\r\n      let successCount = 0;\r\n      let errorCount = 0;\r\n\r\n      // Ejecutar log bombing en lotes para simular concurrencia\r\n      const batchSize = 100;\r\n      for (let i = 0; i < logBombingAttack.length; i += batchSize) {\r\n        const batch = logBombingAttack.slice(i, i + batchSize);\r\n        \r\n        const batchPromises = batch.map(async (event) => {\r\n          try {\r\n            await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\r\n            successCount++;\r\n          } catch (error) {\r\n            errorCount++;\r\n          }\r\n        });\r\n\r\n        await Promise.all(batchPromises);\r\n      }\r\n\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n      const avgTimePerEvent = totalTime / 10000;\r\n\r\n      // Verificar que el sistema mantuvo performance razonable\r\n      expect(avgTimePerEvent).toBeLessThan(50); // < 50ms por evento\r\n\r\n      // Verificar que el sistema no se crasheó completamente\r\n      expect(successCount + errorCount).toBe(10000);\r\n      \r\n      // Permitir algunos errores bajo carga extrema, pero no todos\r\n      expect(successCount).toBeGreaterThan(5000); // Al menos 50% exitosos\r\n    });\r\n\r\n    it('debe manejar ataques de memory exhaustion', async () => {\r\n      const memoryExhaustionEvents = Array.from({ length: 100 }, (_, i) => ({\r\n        user_id: 'memory_attacker_999',\r\n        event_type: 'MEMORY_ATTACK' as any,\r\n        event_category: 'attack',\r\n        severity: 'high' as any,\r\n        description: 'Memory exhaustion attempt',\r\n        metadata: {\r\n          // Intentar agotar memoria con objetos grandes\r\n          large_object: {\r\n            data: 'x'.repeat(100000), // 100KB\r\n            nested_arrays: Array.from({ length: 1000 }, (_, j) => ({\r\n              index: j,\r\n              payload: 'y'.repeat(1000)\r\n            }))\r\n          },\r\n          attack_vector: 'memory_exhaustion',\r\n          attempt_number: i\r\n        },\r\n        ip_address: '172.16.255.100',\r\n        user_agent: 'MemoryExhaustionBot/1.0'\r\n      }));\r\n\r\n      const results = [];\r\n      const startMemory = process.memoryUsage();\r\n\r\n      for (const event of memoryExhaustionEvents) {\r\n        try {\r\n          const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\r\n            event,\r\n            mockContext\r\n          );\r\n          results.push({ success: true, correlationId });\r\n        } catch (error) {\r\n          results.push({ success: false, error: error.message });\r\n        }\r\n      }\r\n\r\n      const endMemory = process.memoryUsage();\r\n      const memoryIncrease = endMemory.heapUsed - startMemory.heapUsed;\r\n\r\n      // Verificar que el aumento de memoria es razonable (< 100MB)\r\n      expect(memoryIncrease).toBeLessThan(100 * 1024 * 1024);\r\n      \r\n      // Verificar que se procesaron los eventos\r\n      expect(results.length).toBe(100);\r\n      \r\n      // Verificar que el sistema mantuvo funcionalidad\r\n      const successCount = results.filter(r => r.success).length;\r\n      expect(successCount).toBeGreaterThan(50); // Al menos 50% exitosos\r\n    });\r\n  });\r\n\r\n  describe('Validación de Integridad del Sistema', () => {\r\n    it('debe mantener consistencia durante ataques concurrentes', async () => {\r\n      const concurrentAttacks = [\r\n        // Ataque 1: Flooding\r\n        Array.from({ length: 100 }, (_, i) => \r\n          enterpriseAuditSystem.logEnterpriseEvent({\r\n            user_id: 'flood_attacker_1',\r\n            event_type: 'FLOOD_ATTACK' as any,\r\n            event_category: 'attack',\r\n            severity: 'low' as any,\r\n            description: `Flood ${i}`,\r\n            metadata: { attack_type: 'flood', index: i },\r\n            ip_address: '10.1.1.100',\r\n            user_agent: 'FloodBot/1.0'\r\n          }, mockContext)\r\n        ),\r\n        \r\n        // Ataque 2: Anomaly generation\r\n        Array.from({ length: 50 }, (_, i) => \r\n          enterpriseAuditSystem.logEnterpriseEvent({\r\n            user_id: 'anomaly_attacker_2',\r\n            event_type: 'ANOMALY_ATTACK' as any,\r\n            event_category: 'suspicious_behavior',\r\n            severity: 'high' as any,\r\n            description: `Anomaly ${i}`,\r\n            metadata: { attack_type: 'anomaly', index: i },\r\n            ip_address: '10.2.2.100',\r\n            user_agent: 'AnomalyBot/1.0'\r\n          }, mockContext)\r\n        ),\r\n        \r\n        // Ataque 3: Detection evasion\r\n        Array.from({ length: 25 }, (_, i) => \r\n          enterpriseAuditSystem.detectAnomalies(`evasion_target_${i}`)\r\n        )\r\n      ];\r\n\r\n      // Ejecutar todos los ataques concurrentemente\r\n      const allPromises = concurrentAttacks.flat();\r\n      const results = await Promise.allSettled(allPromises);\r\n\r\n      // Verificar que el sistema mantuvo consistencia\r\n      const successfulResults = results.filter(r => r.status === 'fulfilled');\r\n      const failedResults = results.filter(r => r.status === 'rejected');\r\n\r\n      // Permitir algunos fallos bajo carga extrema\r\n      expect(successfulResults.length).toBeGreaterThan(100); // Al menos 60% exitosos\r\n      \r\n      // Verificar que no hubo crashes catastróficos\r\n      expect(failedResults.length).toBeLessThan(75); // Menos del 40% de fallos\r\n    });\r\n\r\n    it('debe preservar datos críticos durante ataques', async () => {\r\n      // Registrar evento crítico antes del ataque\r\n      const criticalEvent = {\r\n        user_id: 'critical_user_999',\r\n        event_type: 'CRITICAL_SECURITY_EVENT' as any,\r\n        event_category: 'security_incident',\r\n        severity: 'critical' as any,\r\n        description: 'Critical security breach detected',\r\n        metadata: { \r\n          incident_id: 'INC-2025-001',\r\n          severity_level: 'critical',\r\n          requires_immediate_attention: true\r\n        },\r\n        ip_address: '192.168.1.200',\r\n        user_agent: 'SecuritySystem/1.0'\r\n      };\r\n\r\n      const criticalCorrelationId = await enterpriseAuditSystem.logEnterpriseEvent(\r\n        criticalEvent,\r\n        mockContext\r\n      );\r\n\r\n      // Ejecutar ataque masivo\r\n      const massiveAttack = Array.from({ length: 1000 }, (_, i) => \r\n        enterpriseAuditSystem.logEnterpriseEvent({\r\n          user_id: `attacker_${i}`,\r\n          event_type: 'ATTACK_EVENT' as any,\r\n          event_category: 'attack',\r\n          severity: 'low' as any,\r\n          description: `Attack event ${i}`,\r\n          metadata: { attack_index: i },\r\n          ip_address: `192.168.${Math.floor(i/255)}.${i%255}`,\r\n          user_agent: 'MassAttackBot/1.0'\r\n        }, mockContext)\r\n      );\r\n\r\n      await Promise.allSettled(massiveAttack);\r\n\r\n      // Verificar que el evento crítico se preservó\r\n      expect(criticalCorrelationId).toBeDefined();\r\n      expect(criticalCorrelationId).toMatch(/^corr_\\d+_[a-z0-9]+$/);\r\n      \r\n      // Verificar que el sistema sigue funcionando\r\n      const postAttackEvent = {\r\n        user_id: 'post_attack_user',\r\n        event_type: 'POST_ATTACK_TEST' as any,\r\n        event_category: 'test',\r\n        severity: 'low' as any,\r\n        description: 'Post attack functionality test',\r\n        metadata: { test: true },\r\n        ip_address: '192.168.1.201',\r\n        user_agent: 'TestBot/1.0'\r\n      };\r\n\r\n      const postAttackCorrelationId = await enterpriseAuditSystem.logEnterpriseEvent(\r\n        postAttackEvent,\r\n        mockContext\r\n      );\r\n\r\n      expect(postAttackCorrelationId).toBeDefined();\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","supabaseAdmin","from","fn","table","createQueryBuilder","eq","single","mockResolvedValue","data","error","range","order","mockEvents","gte","lte","select","insert","event","eventWithTimestamp","id","Date","now","Math","random","toString","substr","created_at","toISOString","push","logSecurityEvent","metricsCollector","getMetrics","mockReturnValue","totalRequests","allowedRequests","blockedRequests","redisHits","memoryFallbacks","errors","averageResponseTime","topBlockedIPs","ip","count","topEndpoints","endpoint","global","__mockEvents","describe","mockContext","beforeEach","clearAllMocks","length","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","it","evasionAttempts","user_id","event_type","event_category","severity","description","metadata","actual_event","bypass_attempt","ip_address","user_agent","real_severity","admin_access_attempt","pollution","repeat","nested","deep","very","results","attempt","correlationId","enterpriseAuditSystem","logEnterpriseEvent","success","message","expect","every","r","toBe","correlationIds","map","Set","size","floodingAttack","Array","_","i","flood_index","timestamp","startTime","endTime","totalTime","avgTimePerEvent","toBeLessThan","successCount","filter","toBeGreaterThan","timestampManipulationAttempts","manipulated_timestamp","real_time","backdated","startsWith","aptAttackPattern","phase","location","reason","suspicious_pattern","method","response_size","index","entries","Promise","resolve","setTimeout","anomalies","detectAnomalies","highConfidenceAnomalies","a","confidence_score","lateralMovementPattern","unusual_access","unusual_time","systemAccessAnomalies","includes","dataExfiltrationPattern","records_accessed","suspicious","records_count","contains_pii","sensitive_data","admin_only","criticalAnomalies","logBombingAttack","bomb_index","payload","floor","errorCount","batchSize","batch","slice","batchPromises","all","memoryExhaustionEvents","large_object","nested_arrays","j","attack_vector","attempt_number","startMemory","process","memoryUsage","endMemory","memoryIncrease","heapUsed","concurrentAttacks","attack_type","allPromises","flat","allSettled","successfulResults","status","failedResults","criticalEvent","incident_id","severity_level","requires_immediate_attention","criticalCorrelationId","massiveAttack","attack_index","toBeDefined","toMatch","postAttackEvent","test","postAttackCorrelationId"],"mappings":"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"}