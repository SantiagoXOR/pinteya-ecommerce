{"version":3,"names":["RealTimeTracker","driverId","orderId","currentLocation","plannedRoute","isNavigating","onLocationUpdate","onRouteDeviation","onNeedRecalculation","className","cov_1x23la191h","f","isTracking","setIsTracking","s","_react","useState","trackingAccuracy","setTrackingAccuracy","lastUpdateTime","setLastUpdateTime","connectionStatus","setConnectionStatus","deviationDistance","setDeviationDistance","trackingHistory","setTrackingHistory","geolocationError","setGeolocationError","trackerRef","useRef","updateIntervalRef","lastLocationRef","TRACKING_INTERVAL","DEVIATION_THRESHOLD","MAX_ACCURACY_THRESHOLD","useEffect","b","startRealTimeTracking","stopRealTimeTracking","handleOnline","handleOffline","window","addEventListener","removeEventListener","calculateRouteDeviation","useCallback","currentPos","route","routes","google","routePath","overview_path","length","minDistance","Infinity","currentLatLng","maps","LatLng","lat","lng","i","segmentStart","segmentEnd","distance","geometry","spherical","computeDistanceBetween","Math","min","sendProgressUpdate","trackingData","response","fetch","method","headers","body","JSON","stringify","ok","Error","Date","error","console","processLocationUpdate","position","newLocation","accuracy","speed","heading","warn","deviation","timestamp","status","prev","slice","current","handleGeolocationError","code","message","type","retryable","toISOString","originalError","_geolocation","isGeolocationSupported","getIsTracking","GeolocationTracker","HIGH_ACCURACY_OPTIONS","updateCallbacks","start","setInterval","stop","clearInterval","forceUpdate","getCurrentPosition","Promise","resolve","then","_interop_require_wildcard","require","_jsxruntime","jsxs","_utils","cn","jsx","_lucidereact","Wifi","WifiOff","onClick","title","RefreshCw","round","toLocaleTimeString","AlertCircle"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\RealTimeTracker.tsx"],"sourcesContent":["/**\r\n * Sistema de tracking en tiempo real para drivers\r\n * Maneja geolocalización continua, recálculo de rutas y actualizaciones de progreso\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { MapPin, AlertCircle, RefreshCw, Wifi, WifiOff } from 'lucide-react';\r\nimport { cn } from '@/lib/core/utils';\r\nimport {\r\n  GeolocationTracker,\r\n  GeolocationPosition,\r\n  GeolocationError,\r\n  HIGH_ACCURACY_OPTIONS,\r\n  isGeolocationSupported\r\n} from '@/lib/utils/geolocation';\r\n\r\ninterface TrackingData {\r\n  driverId: string;\r\n  orderId: string;\r\n  currentLocation: { lat: number; lng: number };\r\n  timestamp: Date;\r\n  speed: number;\r\n  heading: number;\r\n  accuracy: number;\r\n  status: 'en_route' | 'arrived' | 'delayed' | 'offline';\r\n}\r\n\r\ninterface RealTimeTrackerProps {\r\n  driverId: string;\r\n  orderId: string;\r\n  currentLocation: { lat: number; lng: number } | null;\r\n  plannedRoute: google.maps.DirectionsResult | null;\r\n  isNavigating: boolean;\r\n  onLocationUpdate: (location: { lat: number; lng: number }) => void;\r\n  onRouteDeviation: (deviation: number) => void;\r\n  onNeedRecalculation: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport function RealTimeTracker({\r\n  driverId,\r\n  orderId,\r\n  currentLocation,\r\n  plannedRoute,\r\n  isNavigating,\r\n  onLocationUpdate,\r\n  onRouteDeviation,\r\n  onNeedRecalculation,\r\n  className\r\n}: RealTimeTrackerProps) {\r\n  const [isTracking, setIsTracking] = useState(false);\r\n  const [trackingAccuracy, setTrackingAccuracy] = useState<number>(0);\r\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date | null>(null);\r\n  const [connectionStatus, setConnectionStatus] = useState<'online' | 'offline'>('online');\r\n  const [deviationDistance, setDeviationDistance] = useState<number>(0);\r\n  const [trackingHistory, setTrackingHistory] = useState<TrackingData[]>([]);\r\n  const [geolocationError, setGeolocationError] = useState<string | null>(null);\r\n\r\n  const trackerRef = useRef<GeolocationTracker | null>(null);\r\n  const updateIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const lastLocationRef = useRef<{ lat: number; lng: number } | null>(null);\r\n\r\n  // Configuración de tracking\r\n  const TRACKING_INTERVAL = 5000; // 5 segundos\r\n  const DEVIATION_THRESHOLD = 100; // 100 metros\r\n  const MAX_ACCURACY_THRESHOLD = 50; // 50 metros\r\n\r\n  // Iniciar/detener tracking basado en estado de navegación\r\n  useEffect(() => {\r\n    if (isNavigating) {\r\n      startRealTimeTracking();\r\n    } else {\r\n      stopRealTimeTracking();\r\n    }\r\n\r\n    return () => stopRealTimeTracking();\r\n  }, [isNavigating]);\r\n\r\n  // Monitorear conectividad\r\n  useEffect(() => {\r\n    const handleOnline = () => setConnectionStatus('online');\r\n    const handleOffline = () => setConnectionStatus('offline');\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Calcular desviación de la ruta planificada\r\n  const calculateRouteDeviation = useCallback((\r\n    currentPos: { lat: number; lng: number },\r\n    route: google.maps.DirectionsResult\r\n  ): number => {\r\n    if (!route.routes[0] || !window.google) return 0;\r\n\r\n    const routePath = route.routes[0].overview_path;\r\n    if (!routePath || routePath.length === 0) return 0;\r\n\r\n    let minDistance = Infinity;\r\n    const currentLatLng = new google.maps.LatLng(currentPos.lat, currentPos.lng);\r\n\r\n    // Encontrar el punto más cercano en la ruta\r\n    for (let i = 0; i < routePath.length - 1; i++) {\r\n      const segmentStart = routePath[i];\r\n      const segmentEnd = routePath[i + 1];\r\n      \r\n      // Calcular distancia al segmento de línea\r\n      const distance = google.maps.geometry.spherical.computeDistanceBetween(\r\n        currentLatLng,\r\n        segmentStart\r\n      );\r\n      \r\n      minDistance = Math.min(minDistance, distance);\r\n    }\r\n\r\n    return minDistance;\r\n  }, []);\r\n\r\n  // Enviar actualización de progreso a la base de datos\r\n  const sendProgressUpdate = useCallback(async (trackingData: TrackingData) => {\r\n    if (connectionStatus === 'offline') return;\r\n\r\n    try {\r\n      const response = await fetch('/api/driver/tracking/update', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(trackingData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update tracking data');\r\n      }\r\n\r\n      setLastUpdateTime(new Date());\r\n    } catch (error) {\r\n      console.error('Error updating tracking data:', error);\r\n    }\r\n  }, [connectionStatus]);\r\n\r\n  // Procesar nueva ubicación\r\n  const processLocationUpdate = useCallback((position: GeolocationPosition) => {\r\n    const newLocation = {\r\n      lat: position.lat,\r\n      lng: position.lng\r\n    };\r\n\r\n    const accuracy = position.accuracy || 0;\r\n    const speed = (position.speed || 0) * 3.6; // Convertir m/s a km/h\r\n    const heading = position.heading || 0;\r\n\r\n    setTrackingAccuracy(accuracy);\r\n    setGeolocationError(null); // Limpiar errores previos\r\n\r\n    // Solo procesar si la precisión es aceptable\r\n    if (accuracy > MAX_ACCURACY_THRESHOLD) {\r\n      console.warn(`Low GPS accuracy: ${accuracy}m`);\r\n      return;\r\n    }\r\n\r\n    // Calcular desviación de la ruta si existe\r\n    let deviation = 0;\r\n    if (plannedRoute && currentLocation) {\r\n      deviation = calculateRouteDeviation(newLocation, plannedRoute);\r\n      setDeviationDistance(deviation);\r\n      onRouteDeviation(deviation);\r\n\r\n      // Solicitar recálculo si hay desviación significativa\r\n      if (deviation > DEVIATION_THRESHOLD) {\r\n        onNeedRecalculation();\r\n      }\r\n    }\r\n\r\n    // Crear datos de tracking\r\n    const trackingData: TrackingData = {\r\n      driverId,\r\n      orderId,\r\n      currentLocation: newLocation,\r\n      timestamp: new Date(),\r\n      speed: speed, // Ya convertido a km/h\r\n      heading,\r\n      accuracy,\r\n      status: deviation > DEVIATION_THRESHOLD ? 'delayed' : 'en_route'\r\n    };\r\n\r\n    // Actualizar historial local\r\n    setTrackingHistory(prev => [...prev.slice(-50), trackingData]); // Mantener últimas 50 ubicaciones\r\n\r\n    // Enviar actualización a la base de datos\r\n    sendProgressUpdate(trackingData);\r\n\r\n    // Notificar cambio de ubicación\r\n    onLocationUpdate(newLocation);\r\n    lastLocationRef.current = newLocation;\r\n\r\n  }, [\r\n    driverId,\r\n    orderId,\r\n    plannedRoute,\r\n    currentLocation,\r\n    calculateRouteDeviation,\r\n    onRouteDeviation,\r\n    onNeedRecalculation,\r\n    onLocationUpdate,\r\n    sendProgressUpdate\r\n  ]);\r\n\r\n  // Manejar errores de geolocalización con información detallada\r\n  const handleGeolocationError = useCallback((error: GeolocationError) => {\r\n    console.error('RealTime Tracker - Geolocation error details:', {\r\n      code: error.code,\r\n      message: error.message,\r\n      type: error.type,\r\n      retryable: error.retryable,\r\n      timestamp: new Date(error.timestamp).toISOString(),\r\n      originalError: error.originalError\r\n    });\r\n\r\n    setGeolocationError(error.message);\r\n\r\n    // Solo detener tracking si el error no es retryable\r\n    if (!error.retryable) {\r\n      setIsTracking(false);\r\n    }\r\n  }, []);\r\n\r\n  // Iniciar tracking en tiempo real\r\n  const startRealTimeTracking = useCallback(() => {\r\n    if (!isGeolocationSupported()) {\r\n      setGeolocationError('Geolocalización no soportada en este navegador');\r\n      return;\r\n    }\r\n\r\n    if (isTracking || trackerRef.current?.getIsTracking()) return;\r\n\r\n    setIsTracking(true);\r\n    setGeolocationError(null);\r\n\r\n    // Crear nuevo tracker si no existe\r\n    if (!trackerRef.current) {\r\n      trackerRef.current = new GeolocationTracker(\r\n        HIGH_ACCURACY_OPTIONS,\r\n        processLocationUpdate,\r\n        handleGeolocationError\r\n      );\r\n    } else {\r\n      trackerRef.current.updateCallbacks(processLocationUpdate, handleGeolocationError);\r\n    }\r\n\r\n    // Iniciar tracking\r\n    trackerRef.current.start();\r\n\r\n    // Configurar intervalo de actualizaciones regulares\r\n    updateIntervalRef.current = setInterval(() => {\r\n      if (lastLocationRef.current) {\r\n        // Forzar actualización periódica incluso sin cambio de ubicación\r\n        const trackingData: TrackingData = {\r\n          driverId,\r\n          orderId,\r\n          currentLocation: lastLocationRef.current,\r\n          timestamp: new Date(),\r\n          speed: 0,\r\n          heading: 0,\r\n          accuracy: trackingAccuracy,\r\n          status: 'en_route'\r\n        };\r\n        sendProgressUpdate(trackingData);\r\n      }\r\n    }, TRACKING_INTERVAL);\r\n\r\n  }, [isTracking, processLocationUpdate, driverId, orderId, trackingAccuracy, sendProgressUpdate]);\r\n\r\n  // Detener tracking\r\n  const stopRealTimeTracking = useCallback(() => {\r\n    setIsTracking(false);\r\n\r\n    if (trackerRef.current) {\r\n      trackerRef.current.stop();\r\n    }\r\n\r\n    if (updateIntervalRef.current) {\r\n      clearInterval(updateIntervalRef.current);\r\n      updateIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Función para forzar actualización manual\r\n  const forceUpdate = useCallback(async () => {\r\n    if (!isGeolocationSupported()) {\r\n      setGeolocationError('Geolocalización no soportada');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { getCurrentPosition } = await import('@/lib/utils/geolocation');\r\n      const position = await getCurrentPosition(HIGH_ACCURACY_OPTIONS);\r\n      processLocationUpdate(position);\r\n    } catch (error) {\r\n      console.error('Manual location update failed:', error);\r\n      setGeolocationError('Error al obtener ubicación manual');\r\n    }\r\n  }, [processLocationUpdate]);\r\n\r\n  if (!isNavigating) return null;\r\n\r\n  return (\r\n    <div className={cn(\r\n      \"bg-white rounded-lg shadow-lg border border-gray-200 p-4\",\r\n      className\r\n    )}>\r\n      {/* Header de estado */}\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className={cn(\r\n            \"w-3 h-3 rounded-full\",\r\n            isTracking ? \"bg-green-500 animate-pulse\" : \"bg-red-500\"\r\n          )} />\r\n          <span className=\"font-medium text-gray-900\">\r\n            {isTracking ? 'Tracking Activo' : 'Tracking Inactivo'}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"flex items-center space-x-2\">\r\n          {connectionStatus === 'online' ? (\r\n            <Wifi className=\"w-4 h-4 text-green-600\" />\r\n          ) : (\r\n            <WifiOff className=\"w-4 h-4 text-red-600\" />\r\n          )}\r\n          <button\r\n            onClick={forceUpdate}\r\n            className=\"p-1 rounded hover:bg-gray-100\"\r\n            title=\"Forzar actualización\"\r\n          >\r\n            <RefreshCw className=\"w-4 h-4 text-gray-600\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Métricas de tracking */}\r\n      <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n        <div>\r\n          <div className=\"text-gray-600\">Precisión GPS</div>\r\n          <div className={cn(\r\n            \"font-medium\",\r\n            trackingAccuracy <= 10 ? \"text-green-600\" :\r\n            trackingAccuracy <= 25 ? \"text-yellow-600\" : \"text-red-600\"\r\n          )}>\r\n            ±{Math.round(trackingAccuracy)}m\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"text-gray-600\">Última actualización</div>\r\n          <div className=\"font-medium text-gray-900\">\r\n            {lastUpdateTime ? lastUpdateTime.toLocaleTimeString('es-ES') : 'Nunca'}\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"text-gray-600\">Desviación de ruta</div>\r\n          <div className={cn(\r\n            \"font-medium\",\r\n            deviationDistance <= 50 ? \"text-green-600\" :\r\n            deviationDistance <= 100 ? \"text-yellow-600\" : \"text-red-600\"\r\n          )}>\r\n            {Math.round(deviationDistance)}m\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"text-gray-600\">Estado</div>\r\n          <div className=\"font-medium text-gray-900\">\r\n            {connectionStatus === 'online' ? 'En línea' : 'Sin conexión'}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Alerta de error de geolocalización */}\r\n      {geolocationError && (\r\n        <div className=\"mt-4 flex items-center space-x-2 bg-red-50 border border-red-200 rounded-lg p-3\">\r\n          <AlertCircle className=\"w-5 h-5 text-red-600\" />\r\n          <div className=\"text-sm text-red-800\">\r\n            <div className=\"font-medium\">Error de GPS</div>\r\n            <div>{geolocationError}</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Alerta de desviación */}\r\n      {deviationDistance > DEVIATION_THRESHOLD && !geolocationError && (\r\n        <div className=\"mt-4 flex items-center space-x-2 bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\r\n          <AlertCircle className=\"w-5 h-5 text-yellow-600\" />\r\n          <div className=\"text-sm text-yellow-800\">\r\n            <div className=\"font-medium\">Desviación detectada</div>\r\n            <div>Te has alejado {Math.round(deviationDistance)}m de la ruta planificada</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}