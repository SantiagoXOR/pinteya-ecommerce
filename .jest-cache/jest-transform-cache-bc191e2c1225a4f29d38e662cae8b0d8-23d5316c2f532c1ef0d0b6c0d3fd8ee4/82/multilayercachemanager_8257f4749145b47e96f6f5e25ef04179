7aca35e7f4f81c2cae123c2146bb7c39
// ===================================
// PINTEYA E-COMMERCE - MULTI-LAYER CACHE MANAGER
// ===================================
"use strict";

/* istanbul ignore next */
function cov_1fa4bqrkps() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\multi-layer-cache-manager.ts";
  var hash = "6ec69303a41dfd3adcdc117255b21a0ea9f49747";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\multi-layer-cache-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 29
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 36
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 38
        }
      },
      "9": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 47
        }
      },
      "10": {
        start: {
          line: 32,
          column: 15
        },
        end: {
          line: 32,
          column: 47
        }
      },
      "11": {
        start: {
          line: 33,
          column: 31
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "12": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 36
        }
      },
      "13": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 34
        }
      },
      "14": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 30
        }
      },
      "15": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "16": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 32
        }
      },
      "17": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 22
        }
      },
      "18": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 88,
          column: 1
        }
      },
      "19": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 31
        }
      },
      "20": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 37
        }
      },
      "21": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 31
        }
      },
      "22": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 31
        }
      },
      "23": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 37
        }
      },
      "24": {
        start: {
          line: 100,
          column: 22
        },
        end: {
          line: 100,
          column: 41
        }
      },
      "25": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "26": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 24
        }
      },
      "27": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "28": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 35
        }
      },
      "29": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 41
        }
      },
      "30": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 24
        }
      },
      "31": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 56
        }
      },
      "32": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 26
        }
      },
      "33": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "34": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 28
        }
      },
      "35": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "36": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 56
        }
      },
      "37": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 46
        }
      },
      "38": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 37
        }
      },
      "39": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 23
        }
      },
      "40": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 27
        }
      },
      "41": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 33
        }
      },
      "42": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 31
        }
      },
      "43": {
        start: {
          line: 137,
          column: 24
        },
        end: {
          line: 137,
          column: 26
        }
      },
      "44": {
        start: {
          line: 138,
          column: 27
        },
        end: {
          line: 138,
          column: 35
        }
      },
      "45": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "46": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "47": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 38
        }
      },
      "48": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 32
        }
      },
      "49": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "50": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 41
        }
      },
      "51": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 47
        }
      },
      "52": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "53": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 50
        }
      },
      "54": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 37
        }
      },
      "55": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 38
        }
      },
      "56": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "57": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 112
        }
      },
      "58": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 38
        }
      },
      "59": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "60": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 75
        }
      },
      "61": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 47
        }
      },
      "62": {
        start: {
          line: 177,
          column: 29
        },
        end: {
          line: 177,
          column: 72
        }
      },
      "63": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "64": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 181,
          column: 13
        }
      },
      "65": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 25
        }
      },
      "66": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "67": {
        start: {
          line: 183,
          column: 34
        },
        end: {
          line: 183,
          column: 44
        }
      },
      "68": {
        start: {
          line: 184,
          column: 31
        },
        end: {
          line: 184,
          column: 66
        }
      },
      "69": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 194,
          column: 17
        }
      },
      "70": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 76
        }
      },
      "71": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 83
        }
      },
      "72": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 34
        }
      },
      "73": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 193,
          column: 77
        }
      },
      "74": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 98
        }
      },
      "75": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 54
        }
      },
      "76": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 20
        }
      },
      "77": {
        start: {
          line: 205,
          column: 29
        },
        end: {
          line: 205,
          column: 72
        }
      },
      "78": {
        start: {
          line: 206,
          column: 28
        },
        end: {
          line: 218,
          column: 10
        }
      },
      "79": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "80": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 23
        }
      },
      "81": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "82": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 211,
          column: 64
        }
      },
      "83": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 66
        }
      },
      "84": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 108
        }
      },
      "85": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 108
        }
      },
      "86": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 54
        }
      },
      "87": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 46
        }
      },
      "88": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 224,
          column: 72
        }
      },
      "89": {
        start: {
          line: 225,
          column: 31
        },
        end: {
          line: 231,
          column: 10
        }
      },
      "90": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "91": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 55
        }
      },
      "92": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 109
        }
      },
      "93": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 49
        }
      },
      "94": {
        start: {
          line: 237,
          column: 29
        },
        end: {
          line: 237,
          column: 72
        }
      },
      "95": {
        start: {
          line: 238,
          column: 35
        },
        end: {
          line: 244,
          column: 10
        }
      },
      "96": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "97": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 68
        }
      },
      "98": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 117
        }
      },
      "99": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "100": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "101": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 49
        }
      },
      "102": {
        start: {
          line: 254,
          column: 35
        },
        end: {
          line: 254,
          column: 60
        }
      },
      "103": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 66
        }
      },
      "104": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 28
        }
      },
      "105": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 28
        }
      },
      "106": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 28
        }
      },
      "107": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 28
        }
      },
      "108": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "109": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 53
        }
      },
      "110": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 22
        }
      },
      "111": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 71
        }
      },
      "112": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 22
        }
      },
      "113": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 22
        }
      },
      "114": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 22
        }
      },
      "115": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 22
        }
      },
      "116": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "117": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 45
        }
      },
      "118": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 22
        }
      },
      "119": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 42
        }
      },
      "120": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 22
        }
      },
      "121": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 22
        }
      },
      "122": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 22
        }
      },
      "123": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 22
        }
      },
      "124": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "125": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 22
        }
      },
      "126": {
        start: {
          line: 312,
          column: 29
        },
        end: {
          line: 312,
          column: 59
        }
      },
      "127": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 315,
          column: 17
        }
      },
      "128": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 50
        }
      },
      "129": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 22
        }
      },
      "130": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 318,
          column: 22
        }
      },
      "131": {
        start: {
          line: 324,
          column: 32
        },
        end: {
          line: 324,
          column: 68
        }
      },
      "132": {
        start: {
          line: 325,
          column: 37
        },
        end: {
          line: 325,
          column: 135
        }
      },
      "133": {
        start: {
          line: 325,
          column: 87
        },
        end: {
          line: 325,
          column: 134
        }
      },
      "134": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "135": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "136": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 328,
          column: 52
        }
      },
      "137": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 61
        }
      },
      "138": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 108
        }
      },
      "139": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 157
        }
      },
      "140": {
        start: {
          line: 338,
          column: 67
        },
        end: {
          line: 338,
          column: 81
        }
      },
      "141": {
        start: {
          line: 338,
          column: 107
        },
        end: {
          line: 338,
          column: 130
        }
      },
      "142": {
        start: {
          line: 338,
          column: 150
        },
        end: {
          line: 338,
          column: 155
        }
      },
      "143": {
        start: {
          line: 343,
          column: 23
        },
        end: {
          line: 343,
          column: 50
        }
      },
      "144": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 46
        }
      },
      "145": {
        start: {
          line: 349,
          column: 23
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "146": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 31
        }
      },
      "147": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 42
        }
      },
      "148": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 38
        }
      },
      "149": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "150": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 53
        }
      },
      "151": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 44
        }
      },
      "152": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "153": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 32
        }
      },
      "154": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "155": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 27
        }
      },
      "156": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 29
        }
      },
      "157": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 69
        }
      },
      "158": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 114
        }
      },
      "159": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 41
        }
      },
      "160": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 46
        }
      },
      "161": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 401,
          column: 11
        }
      },
      "162": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "163": {
        start: {
          line: 396,
          column: 33
        },
        end: {
          line: 398,
          column: 46
        }
      },
      "164": {
        start: {
          line: 397,
          column: 20
        },
        end: {
          line: 397,
          column: 51
        }
      },
      "165": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 63
        }
      },
      "166": {
        start: {
          line: 406,
          column: 26
        },
        end: {
          line: 406,
          column: 36
        }
      },
      "167": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "168": {
        start: {
          line: 409,
          column: 28
        },
        end: {
          line: 409,
          column: 65
        }
      },
      "169": {
        start: {
          line: 410,
          column: 29
        },
        end: {
          line: 413,
          column: 13
        }
      },
      "170": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 64
        }
      },
      "171": {
        start: {
          line: 415,
          column: 30
        },
        end: {
          line: 415,
          column: 69
        }
      },
      "172": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 55
        }
      },
      "173": {
        start: {
          line: 417,
          column: 28
        },
        end: {
          line: 417,
          column: 50
        }
      },
      "174": {
        start: {
          line: 419,
          column: 27
        },
        end: {
          line: 426,
          column: 13
        }
      },
      "175": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 48
        }
      },
      "176": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 50
        }
      },
      "177": {
        start: {
          line: 435,
          column: 23
        },
        end: {
          line: 435,
          column: 25
        }
      },
      "178": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 438,
          column: 11
        }
      },
      "179": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 35
        }
      },
      "180": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 22
        }
      },
      "181": {
        start: {
          line: 444,
          column: 23
        },
        end: {
          line: 444,
          column: 25
        }
      },
      "182": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 447,
          column: 11
        }
      },
      "183": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 36
        }
      },
      "184": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 22
        }
      },
      "185": {
        start: {
          line: 453,
          column: 30
        },
        end: {
          line: 466,
          column: 10
        }
      },
      "186": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 465,
          column: 13
        }
      },
      "187": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 462,
          column: 17
        }
      },
      "188": {
        start: {
          line: 457,
          column: 24
        },
        end: {
          line: 457,
          column: 49
        }
      },
      "189": {
        start: {
          line: 458,
          column: 24
        },
        end: {
          line: 458,
          column: 30
        }
      },
      "190": {
        start: {
          line: 460,
          column: 24
        },
        end: {
          line: 460,
          column: 51
        }
      },
      "191": {
        start: {
          line: 461,
          column: 24
        },
        end: {
          line: 461,
          column: 30
        }
      },
      "192": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 105
        }
      },
      "193": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 48
        }
      },
      "194": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 474,
          column: 11
        }
      },
      "195": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 36
        }
      },
      "196": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 42
        }
      },
      "197": {
        start: {
          line: 478,
          column: 31
        },
        end: {
          line: 478,
          column: 67
        }
      },
      "198": {
        start: {
          line: 479,
          column: 29
        },
        end: {
          line: 530,
          column: 1
        }
      },
      "199": {
        start: {
          line: 484,
          column: 23
        },
        end: {
          line: 484,
          column: 68
        }
      },
      "200": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 487,
          column: 9
        }
      },
      "201": {
        start: {
          line: 486,
          column: 12
        },
        end: {
          line: 486,
          column: 26
        }
      },
      "202": {
        start: {
          line: 489,
          column: 21
        },
        end: {
          line: 489,
          column: 36
        }
      },
      "203": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 490,
          column: 71
        }
      },
      "204": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 491,
          column: 20
        }
      },
      "205": {
        start: {
          line: 496,
          column: 28
        },
        end: {
          line: 500,
          column: 10
        }
      },
      "206": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 499,
          column: 15
        }
      },
      "207": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 501,
          column: 46
        }
      },
      "208": {
        start: {
          line: 506,
          column: 24
        },
        end: {
          line: 506,
          column: 64
        }
      },
      "209": {
        start: {
          line: 507,
          column: 23
        },
        end: {
          line: 507,
          column: 62
        }
      },
      "210": {
        start: {
          line: 508,
          column: 24
        },
        end: {
          line: 508,
          column: 25
        }
      },
      "211": {
        start: {
          line: 509,
          column: 26
        },
        end: {
          line: 509,
          column: 27
        }
      },
      "212": {
        start: {
          line: 510,
          column: 28
        },
        end: {
          line: 510,
          column: 29
        }
      },
      "213": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 514,
          column: 11
        }
      },
      "214": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 512,
          column: 37
        }
      },
      "215": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 513,
          column: 41
        }
      },
      "216": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 519,
          column: 11
        }
      },
      "217": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 518,
          column: 13
        }
      },
      "218": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 32
        }
      },
      "219": {
        start: {
          line: 520,
          column: 30
        },
        end: {
          line: 520,
          column: 53
        }
      },
      "220": {
        start: {
          line: 521,
          column: 31
        },
        end: {
          line: 521,
          column: 86
        }
      },
      "221": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 528,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 34
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 32
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 34
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 33,
            column: 32
          }
        },
        loc: {
          start: {
            line: 33,
            column: 52
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 33
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 63
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 92
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 24
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 114
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 126
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 131
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 15
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 136
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 15
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 150
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 17
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 160
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 168
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 176,
            column: 7
          }
        },
        loc: {
          start: {
            line: 176,
            column: 29
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 176
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 204,
            column: 6
          },
          end: {
            line: 204,
            column: 7
          }
        },
        loc: {
          start: {
            line: 204,
            column: 40
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 204
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 206,
            column: 45
          },
          end: {
            line: 206,
            column: 46
          }
        },
        loc: {
          start: {
            line: 206,
            column: 60
          },
          end: {
            line: 218,
            column: 9
          }
        },
        line: 206
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 223,
            column: 6
          },
          end: {
            line: 223,
            column: 7
          }
        },
        loc: {
          start: {
            line: 223,
            column: 32
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 223
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 225,
            column: 48
          },
          end: {
            line: 225,
            column: 49
          }
        },
        loc: {
          start: {
            line: 225,
            column: 63
          },
          end: {
            line: 231,
            column: 9
          }
        },
        line: 225
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 236,
            column: 6
          },
          end: {
            line: 236,
            column: 7
          }
        },
        loc: {
          start: {
            line: 236,
            column: 47
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 236
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 238,
            column: 52
          },
          end: {
            line: 238,
            column: 53
          }
        },
        loc: {
          start: {
            line: 238,
            column: 67
          },
          end: {
            line: 244,
            column: 9
          }
        },
        line: 238
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 249,
            column: 6
          },
          end: {
            line: 249,
            column: 7
          }
        },
        loc: {
          start: {
            line: 249,
            column: 37
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 249
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 271,
            column: 6
          },
          end: {
            line: 271,
            column: 7
          }
        },
        loc: {
          start: {
            line: 271,
            column: 46
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 271
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 289,
            column: 6
          },
          end: {
            line: 289,
            column: 7
          }
        },
        loc: {
          start: {
            line: 289,
            column: 40
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 289
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 307,
            column: 6
          },
          end: {
            line: 307,
            column: 7
          }
        },
        loc: {
          start: {
            line: 307,
            column: 53
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 307
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 323,
            column: 6
          },
          end: {
            line: 323,
            column: 7
          }
        },
        loc: {
          start: {
            line: 323,
            column: 69
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 323
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 325,
            column: 78
          },
          end: {
            line: 325,
            column: 79
          }
        },
        loc: {
          start: {
            line: 325,
            column: 87
          },
          end: {
            line: 325,
            column: 134
          }
        },
        line: 325
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 337,
            column: 6
          },
          end: {
            line: 337,
            column: 7
          }
        },
        loc: {
          start: {
            line: 337,
            column: 35
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 337
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 338,
            column: 52
          },
          end: {
            line: 338,
            column: 53
          }
        },
        loc: {
          start: {
            line: 338,
            column: 67
          },
          end: {
            line: 338,
            column: 81
          }
        },
        line: 338
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 338,
            column: 88
          },
          end: {
            line: 338,
            column: 89
          }
        },
        loc: {
          start: {
            line: 338,
            column: 107
          },
          end: {
            line: 338,
            column: 130
          }
        },
        line: 338
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 338,
            column: 136
          },
          end: {
            line: 338,
            column: 137
          }
        },
        loc: {
          start: {
            line: 338,
            column: 150
          },
          end: {
            line: 338,
            column: 155
          }
        },
        line: 338
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 342,
            column: 6
          },
          end: {
            line: 342,
            column: 7
          }
        },
        loc: {
          start: {
            line: 342,
            column: 28
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 342
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 348,
            column: 6
          },
          end: {
            line: 348,
            column: 7
          }
        },
        loc: {
          start: {
            line: 348,
            column: 39
          },
          end: {
            line: 365,
            column: 5
          }
        },
        line: 348
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 368,
            column: 6
          },
          end: {
            line: 368,
            column: 7
          }
        },
        loc: {
          start: {
            line: 368,
            column: 41
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 368
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 393,
            column: 6
          },
          end: {
            line: 393,
            column: 7
          }
        },
        loc: {
          start: {
            line: 393,
            column: 31
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 393
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 394,
            column: 46
          },
          end: {
            line: 394,
            column: 47
          }
        },
        loc: {
          start: {
            line: 394,
            column: 65
          },
          end: {
            line: 401,
            column: 9
          }
        },
        line: 394
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 396,
            column: 45
          },
          end: {
            line: 396,
            column: 46
          }
        },
        loc: {
          start: {
            line: 396,
            column: 49
          },
          end: {
            line: 398,
            column: 17
          }
        },
        line: 396
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 405,
            column: 6
          },
          end: {
            line: 405,
            column: 7
          }
        },
        loc: {
          start: {
            line: 405,
            column: 38
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 405
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 434,
            column: 6
          },
          end: {
            line: 434,
            column: 7
          }
        },
        loc: {
          start: {
            line: 434,
            column: 23
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 434
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 436,
            column: 33
          },
          end: {
            line: 436,
            column: 34
          }
        },
        loc: {
          start: {
            line: 436,
            column: 50
          },
          end: {
            line: 438,
            column: 9
          }
        },
        line: 436
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 443,
            column: 6
          },
          end: {
            line: 443,
            column: 7
          }
        },
        loc: {
          start: {
            line: 443,
            column: 24
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 443
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 445,
            column: 34
          },
          end: {
            line: 445,
            column: 35
          }
        },
        loc: {
          start: {
            line: 445,
            column: 52
          },
          end: {
            line: 447,
            column: 9
          }
        },
        line: 445
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 452,
            column: 6
          },
          end: {
            line: 452,
            column: 7
          }
        },
        loc: {
          start: {
            line: 452,
            column: 23
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 452
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 453,
            column: 68
          },
          end: {
            line: 453,
            column: 69
          }
        },
        loc: {
          start: {
            line: 453,
            column: 83
          },
          end: {
            line: 466,
            column: 9
          }
        },
        line: 453
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 471,
            column: 6
          },
          end: {
            line: 471,
            column: 7
          }
        },
        loc: {
          start: {
            line: 471,
            column: 16
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 471
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 472,
            column: 42
          },
          end: {
            line: 472,
            column: 43
          }
        },
        loc: {
          start: {
            line: 472,
            column: 54
          },
          end: {
            line: 474,
            column: 9
          }
        },
        line: 472
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 482,
            column: 6
          },
          end: {
            line: 482,
            column: 7
          }
        },
        loc: {
          start: {
            line: 482,
            column: 51
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 482
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 495,
            column: 6
          },
          end: {
            line: 495,
            column: 7
          }
        },
        loc: {
          start: {
            line: 495,
            column: 52
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 495
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 496,
            column: 58
          },
          end: {
            line: 496,
            column: 59
          }
        },
        loc: {
          start: {
            line: 496,
            column: 80
          },
          end: {
            line: 500,
            column: 9
          }
        },
        line: 496
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 505,
            column: 6
          },
          end: {
            line: 505,
            column: 7
          }
        },
        loc: {
          start: {
            line: 505,
            column: 25
          },
          end: {
            line: 529,
            column: 5
          }
        },
        line: 505
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 511,
            column: 39
          },
          end: {
            line: 511,
            column: 40
          }
        },
        loc: {
          start: {
            line: 511,
            column: 49
          },
          end: {
            line: 514,
            column: 9
          }
        },
        line: 511
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 515,
            column: 38
          },
          end: {
            line: 515,
            column: 39
          }
        },
        loc: {
          start: {
            line: 515,
            column: 43
          },
          end: {
            line: 519,
            column: 9
          }
        },
        line: 515
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 92,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 26
          },
          end: {
            line: 92,
            column: 42
          }
        }],
        line: 92
      },
      "1": {
        loc: {
          start: {
            line: 92,
            column: 44
          },
          end: {
            line: 92,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 57
          },
          end: {
            line: 92,
            column: 62
          }
        }],
        line: 92
      },
      "2": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "3": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "4": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "5": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "6": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "7": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "8": {
        loc: {
          start: {
            line: 177,
            column: 29
          },
          end: {
            line: 177,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 29
          },
          end: {
            line: 177,
            column: 35
          }
        }, {
          start: {
            line: 177,
            column: 39
          },
          end: {
            line: 177,
            column: 72
          }
        }],
        line: 177
      },
      "9": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "10": {
        loc: {
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 194,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 194,
            column: 17
          }
        }, {
          start: {
            line: 191,
            column: 23
          },
          end: {
            line: 194,
            column: 17
          }
        }],
        line: 185
      },
      "11": {
        loc: {
          start: {
            line: 205,
            column: 29
          },
          end: {
            line: 205,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 29
          },
          end: {
            line: 205,
            column: 35
          }
        }, {
          start: {
            line: 205,
            column: 39
          },
          end: {
            line: 205,
            column: 72
          }
        }],
        line: 205
      },
      "12": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "13": {
        loc: {
          start: {
            line: 211,
            column: 33
          },
          end: {
            line: 211,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 33
          },
          end: {
            line: 211,
            column: 36
          }
        }, {
          start: {
            line: 211,
            column: 40
          },
          end: {
            line: 211,
            column: 64
          }
        }],
        line: 211
      },
      "14": {
        loc: {
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 35
          }
        }, {
          start: {
            line: 224,
            column: 39
          },
          end: {
            line: 224,
            column: 72
          }
        }],
        line: 224
      },
      "15": {
        loc: {
          start: {
            line: 237,
            column: 29
          },
          end: {
            line: 237,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 29
          },
          end: {
            line: 237,
            column: 35
          }
        }, {
          start: {
            line: 237,
            column: 39
          },
          end: {
            line: 237,
            column: 72
          }
        }],
        line: 237
      },
      "16": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 252,
            column: 49
          }
        }, {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 255,
            column: 66
          }
        }, {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 258,
            column: 28
          }
        }, {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 261,
            column: 28
          }
        }, {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 264,
            column: 28
          }
        }, {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 266,
            column: 28
          }
        }],
        line: 250
      },
      "17": {
        loc: {
          start: {
            line: 255,
            column: 23
          },
          end: {
            line: 255,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 255,
            column: 36
          },
          end: {
            line: 255,
            column: 58
          }
        }, {
          start: {
            line: 255,
            column: 61
          },
          end: {
            line: 255,
            column: 65
          }
        }],
        line: 255
      },
      "18": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 22
          }
        }, {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 278,
            column: 22
          }
        }, {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 280,
            column: 22
          }
        }, {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 282,
            column: 22
          }
        }, {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 284,
            column: 22
          }
        }],
        line: 272
      },
      "19": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 291,
            column: 12
          },
          end: {
            line: 293,
            column: 22
          }
        }, {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 296,
            column: 22
          }
        }, {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 298,
            column: 22
          }
        }, {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 300,
            column: 22
          }
        }, {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 302,
            column: 22
          }
        }],
        line: 290
      },
      "20": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 310,
            column: 22
          }
        }, {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 316,
            column: 22
          }
        }, {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 318,
            column: 22
          }
        }],
        line: 308
      },
      "21": {
        loc: {
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 315,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 315,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "22": {
        loc: {
          start: {
            line: 344,
            column: 15
          },
          end: {
            line: 344,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 344,
            column: 24
          },
          end: {
            line: 344,
            column: 38
          }
        }, {
          start: {
            line: 344,
            column: 41
          },
          end: {
            line: 344,
            column: 45
          }
        }],
        line: 344
      },
      "23": {
        loc: {
          start: {
            line: 349,
            column: 23
          },
          end: {
            line: 356,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 23
          },
          end: {
            line: 349,
            column: 50
          }
        }, {
          start: {
            line: 349,
            column: 54
          },
          end: {
            line: 356,
            column: 9
          }
        }],
        line: 349
      },
      "24": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "25": {
        loc: {
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 24
          },
          end: {
            line: 369,
            column: 52
          }
        }, {
          start: {
            line: 369,
            column: 56
          },
          end: {
            line: 379,
            column: 9
          }
        }],
        line: 369
      },
      "26": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        }, {
          start: {
            line: 383,
            column: 15
          },
          end: {
            line: 385,
            column: 9
          }
        }],
        line: 381
      },
      "27": {
        loc: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "28": {
        loc: {
          start: {
            line: 395,
            column: 16
          },
          end: {
            line: 395,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 16
          },
          end: {
            line: 395,
            column: 30
          }
        }, {
          start: {
            line: 395,
            column: 34
          },
          end: {
            line: 395,
            column: 60
          }
        }],
        line: 395
      },
      "29": {
        loc: {
          start: {
            line: 455,
            column: 16
          },
          end: {
            line: 462,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 456,
            column: 20
          },
          end: {
            line: 458,
            column: 30
          }
        }, {
          start: {
            line: 459,
            column: 20
          },
          end: {
            line: 461,
            column: 30
          }
        }],
        line: 455
      },
      "30": {
        loc: {
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 487,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 487,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "31": {
        loc: {
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 518,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 518,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "32": {
        loc: {
          start: {
            line: 521,
            column: 31
          },
          end: {
            line: 521,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 521,
            column: 51
          },
          end: {
            line: 521,
            column: 82
          }
        }, {
          start: {
            line: 521,
            column: 85
          },
          end: {
            line: 521,
            column: 86
          }
        }],
        line: 521
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0, 0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0, 0],
      "19": [0, 0, 0, 0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\multi-layer-cache-manager.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - MULTI-LAYER CACHE MANAGER\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\nimport { advancedCacheStrategyManager } from './advanced-cache-strategy-manager';\r\n\r\n/**\r\n * Capas de cache disponibles\r\n */\r\nexport enum CacheLayer {\r\n  MEMORY = 'memory',           // Cache en memoria (m\xE1s r\xE1pido)\r\n  REDIS = 'redis',            // Cache Redis (persistente)\r\n  CDN = 'cdn',                // Cache CDN (distribuido)\r\n  BROWSER = 'browser',        // Cache del navegador\r\n  EDGE = 'edge'               // Cache en edge locations\r\n}\r\n\r\n/**\r\n * Configuraci\xF3n de capa de cache\r\n */\r\nexport interface CacheLayerConfig {\r\n  enabled: boolean;\r\n  priority: number;           // Prioridad (1 = m\xE1s alta)\r\n  ttl: number;               // TTL por defecto\r\n  maxSize?: number;          // Tama\xF1o m\xE1ximo en bytes\r\n  maxEntries?: number;       // N\xFAmero m\xE1ximo de entradas\r\n  compressionEnabled?: boolean;\r\n  encryptionEnabled?: boolean;\r\n  fallbackLayer?: CacheLayer;\r\n  healthCheckInterval?: number;\r\n}\r\n\r\n/**\r\n * Estado de salud de una capa\r\n */\r\nexport interface LayerHealth {\r\n  layer: CacheLayer;\r\n  healthy: boolean;\r\n  latency: number;\r\n  errorRate: number;\r\n  lastCheck: number;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * M\xE9tricas de capa de cache\r\n */\r\nexport interface LayerMetrics {\r\n  layer: CacheLayer;\r\n  hits: number;\r\n  misses: number;\r\n  hitRate: number;\r\n  avgLatency: number;\r\n  totalRequests: number;\r\n  bytesStored: number;\r\n  entriesCount: number;\r\n  lastUpdated: number;\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas por capa\r\n */\r\nexport const LAYER_CONFIGS: Record<CacheLayer, CacheLayerConfig> = {\r\n  [CacheLayer.MEMORY]: {\r\n    enabled: true,\r\n    priority: 1,\r\n    ttl: 300,                 // 5 minutos\r\n    maxSize: 50 * 1024 * 1024, // 50MB\r\n    maxEntries: 10000,\r\n    compressionEnabled: false,\r\n    encryptionEnabled: false,\r\n    healthCheckInterval: 30000 // 30 segundos\r\n  },\r\n  \r\n  [CacheLayer.REDIS]: {\r\n    enabled: true,\r\n    priority: 2,\r\n    ttl: 1800,                // 30 minutos\r\n    maxSize: 500 * 1024 * 1024, // 500MB\r\n    compressionEnabled: true,\r\n    encryptionEnabled: false,\r\n    fallbackLayer: CacheLayer.MEMORY,\r\n    healthCheckInterval: 60000 // 1 minuto\r\n  },\r\n  \r\n  [CacheLayer.CDN]: {\r\n    enabled: true,\r\n    priority: 3,\r\n    ttl: 3600,                // 1 hora\r\n    compressionEnabled: true,\r\n    encryptionEnabled: false,\r\n    fallbackLayer: CacheLayer.REDIS,\r\n    healthCheckInterval: 300000 // 5 minutos\r\n  },\r\n  \r\n  [CacheLayer.BROWSER]: {\r\n    enabled: true,\r\n    priority: 4,\r\n    ttl: 86400,               // 24 horas\r\n    compressionEnabled: false,\r\n    encryptionEnabled: false,\r\n    healthCheckInterval: 600000 // 10 minutos\r\n  },\r\n  \r\n  [CacheLayer.EDGE]: {\r\n    enabled: false,           // Deshabilitado por defecto\r\n    priority: 5,\r\n    ttl: 7200,                // 2 horas\r\n    compressionEnabled: true,\r\n    encryptionEnabled: false,\r\n    fallbackLayer: CacheLayer.CDN,\r\n    healthCheckInterval: 300000 // 5 minutos\r\n  }\r\n};\r\n\r\n/**\r\n * Cache en memoria con LRU\r\n */\r\nclass MemoryCache {\r\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\r\n  private accessOrder = new Map<string, number>();\r\n  private accessCounter = 0;\r\n  private maxSize: number;\r\n  private maxEntries: number;\r\n\r\n  constructor(maxSize: number = 50 * 1024 * 1024, maxEntries: number = 10000) {\r\n    this.maxSize = maxSize;\r\n    this.maxEntries = maxEntries;\r\n  }\r\n\r\n  get<T>(key: string): T | null {\r\n    const entry = this.cache.get(key);\r\n    if (!entry) {return null;}\r\n\r\n    // Verificar TTL\r\n    if (Date.now() - entry.timestamp > entry.ttl * 1000) {\r\n      this.cache.delete(key);\r\n      this.accessOrder.delete(key);\r\n      return null;\r\n    }\r\n\r\n    // Actualizar orden de acceso\r\n    this.accessOrder.set(key, ++this.accessCounter);\r\n    return entry.data;\r\n  }\r\n\r\n  set<T>(key: string, data: T, ttl: number): void {\r\n    // Verificar l\xEDmites\r\n    if (this.cache.size >= this.maxEntries) {\r\n      this.evictLRU();\r\n    }\r\n\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n    this.accessOrder.set(key, ++this.accessCounter);\r\n  }\r\n\r\n  delete(key: string): boolean {\r\n    const deleted = this.cache.delete(key);\r\n    this.accessOrder.delete(key);\r\n    return deleted;\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.accessOrder.clear();\r\n    this.accessCounter = 0;\r\n  }\r\n\r\n  private evictLRU(): void {\r\n    let oldestKey = '';\r\n    let oldestAccess = Infinity;\r\n\r\n    for (const [key, access] of this.accessOrder) {\r\n      if (access < oldestAccess) {\r\n        oldestAccess = access;\r\n        oldestKey = key;\r\n      }\r\n    }\r\n\r\n    if (oldestKey) {\r\n      this.cache.delete(oldestKey);\r\n      this.accessOrder.delete(oldestKey);\r\n    }\r\n  }\r\n\r\n  getStats(): { size: number; entries: number } {\r\n    return {\r\n      size: JSON.stringify([...this.cache.values()]).length,\r\n      entries: this.cache.size\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Manager de cache multi-capa\r\n */\r\nexport class MultiLayerCacheManager {\r\n  private static instance: MultiLayerCacheManager;\r\n  private memoryCache: MemoryCache;\r\n  private redis = getRedisClient();\r\n  private layerHealth = new Map<CacheLayer, LayerHealth>();\r\n  private layerMetrics = new Map<CacheLayer, LayerMetrics>();\r\n  private healthCheckIntervals = new Map<CacheLayer, NodeJS.Timeout>();\r\n\r\n  private constructor() {\r\n    this.memoryCache = new MemoryCache(\r\n      LAYER_CONFIGS[CacheLayer.MEMORY].maxSize,\r\n      LAYER_CONFIGS[CacheLayer.MEMORY].maxEntries\r\n    );\r\n    this.initializeHealthChecks();\r\n  }\r\n\r\n  static getInstance(): MultiLayerCacheManager {\r\n    if (!MultiLayerCacheManager.instance) {\r\n      MultiLayerCacheManager.instance = new MultiLayerCacheManager();\r\n    }\r\n    return MultiLayerCacheManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos del cache multi-capa\r\n   */\r\n  async get<T>(key: string, layers?: CacheLayer[]): Promise<T | null> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    for (const layer of targetLayers) {\r\n      if (!this.isLayerHealthy(layer)) {continue;}\r\n\r\n      try {\r\n        const startTime = Date.now();\r\n        const result = await this.getFromLayer<T>(key, layer);\r\n        \r\n        if (result !== null) {\r\n          // Registrar hit\r\n          this.recordMetric(layer, 'hit', Date.now() - startTime);\r\n          \r\n          // Propagar a capas de mayor prioridad\r\n          await this.propagateToHigherPriorityLayers(key, result, layer);\r\n          \r\n          return result;\r\n        } else {\r\n          // Registrar miss\r\n          this.recordMetric(layer, 'miss', Date.now() - startTime);\r\n        }\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error en capa ${layer}:`, error as Error);\r\n        this.markLayerUnhealthy(layer, error as Error);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Guarda datos en el cache multi-capa\r\n   */\r\n  async set<T>(key: string, data: T, ttl?: number, layers?: CacheLayer[]): Promise<void> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    const setPromises = targetLayers.map(async (layer) => {\r\n      if (!this.isLayerHealthy(layer)) {return;}\r\n\r\n      try {\r\n        const layerTtl = ttl || LAYER_CONFIGS[layer].ttl;\r\n        await this.setToLayer(key, data, layerTtl, layer);\r\n        logger.debug(LogCategory.CACHE, `Datos guardados en capa ${layer}: ${key}`);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error guardando en capa ${layer}:`, error as Error);\r\n        this.markLayerUnhealthy(layer, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(setPromises);\r\n  }\r\n\r\n  /**\r\n   * Elimina datos del cache multi-capa\r\n   */\r\n  async delete(key: string, layers?: CacheLayer[]): Promise<void> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    const deletePromises = targetLayers.map(async (layer) => {\r\n      try {\r\n        await this.deleteFromLayer(key, layer);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error eliminando de capa ${layer}:`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(deletePromises);\r\n  }\r\n\r\n  /**\r\n   * Invalida cache por patr\xF3n\r\n   */\r\n  async invalidatePattern(pattern: string, layers?: CacheLayer[]): Promise<void> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    const invalidatePromises = targetLayers.map(async (layer) => {\r\n      try {\r\n        await this.invalidatePatternInLayer(pattern, layer);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error invalidando patr\xF3n en capa ${layer}:`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(invalidatePromises);\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos de una capa espec\xEDfica\r\n   */\r\n  private async getFromLayer<T>(key: string, layer: CacheLayer): Promise<T | null> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        return this.memoryCache.get<T>(key);\r\n      \r\n      case CacheLayer.REDIS:\r\n        const redisValue = await this.redis.get(key);\r\n        return redisValue ? JSON.parse(redisValue) : null;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementaci\xF3n CDN (placeholder)\r\n        return null;\r\n      \r\n      case CacheLayer.BROWSER:\r\n        // Cache del navegador se maneja en el cliente\r\n        return null;\r\n      \r\n      case CacheLayer.EDGE:\r\n        // Implementaci\xF3n edge cache (placeholder)\r\n        return null;\r\n      \r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guarda datos en una capa espec\xEDfica\r\n   */\r\n  private async setToLayer<T>(key: string, data: T, ttl: number, layer: CacheLayer): Promise<void> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        this.memoryCache.set(key, data, ttl);\r\n        break;\r\n      \r\n      case CacheLayer.REDIS:\r\n        await this.redis.setex(key, ttl, JSON.stringify(data));\r\n        break;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementaci\xF3n CDN (placeholder)\r\n        break;\r\n      \r\n      case CacheLayer.BROWSER:\r\n        // Cache del navegador se maneja en el cliente\r\n        break;\r\n      \r\n      case CacheLayer.EDGE:\r\n        // Implementaci\xF3n edge cache (placeholder)\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina datos de una capa espec\xEDfica\r\n   */\r\n  private async deleteFromLayer(key: string, layer: CacheLayer): Promise<void> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        this.memoryCache.delete(key);\r\n        break;\r\n      \r\n      case CacheLayer.REDIS:\r\n        await this.redis.del(key);\r\n        break;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementaci\xF3n CDN (placeholder)\r\n        break;\r\n      \r\n      case CacheLayer.BROWSER:\r\n        // Cache del navegador se maneja en el cliente\r\n        break;\r\n      \r\n      case CacheLayer.EDGE:\r\n        // Implementaci\xF3n edge cache (placeholder)\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalida patr\xF3n en una capa espec\xEDfica\r\n   */\r\n  private async invalidatePatternInLayer(pattern: string, layer: CacheLayer): Promise<void> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        // Implementar invalidaci\xF3n por patr\xF3n en memoria\r\n        break;\r\n      \r\n      case CacheLayer.REDIS:\r\n        const keys = await this.redis.keys(pattern);\r\n        if (keys.length > 0) {\r\n          await this.redis.del(...keys);\r\n        }\r\n        break;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementaci\xF3n CDN (placeholder)\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Propaga datos a capas de mayor prioridad\r\n   */\r\n  private async propagateToHigherPriorityLayers<T>(\r\n    key: string,\r\n    data: T,\r\n    currentLayer: CacheLayer\r\n  ): Promise<void> {\r\n    const currentPriority = LAYER_CONFIGS[currentLayer].priority;\r\n    const higherPriorityLayers = this.getEnabledLayersByPriority()\r\n      .filter(layer => LAYER_CONFIGS[layer].priority < currentPriority);\r\n\r\n    for (const layer of higherPriorityLayers) {\r\n      try {\r\n        const ttl = LAYER_CONFIGS[layer].ttl;\r\n        await this.setToLayer(key, data, ttl, layer);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error propagando a capa ${layer}:`, error as Error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene capas habilitadas ordenadas por prioridad\r\n   */\r\n  private getEnabledLayersByPriority(): CacheLayer[] {\r\n    return Object.entries(LAYER_CONFIGS)\r\n      .filter(([_, config]) => config.enabled)\r\n      .sort(([_, a], [__, b]) => a.priority - b.priority)\r\n      .map(([layer, _]) => layer as CacheLayer);\r\n  }\r\n\r\n  /**\r\n   * Verifica si una capa est\xE1 saludable\r\n   */\r\n  private isLayerHealthy(layer: CacheLayer): boolean {\r\n    const health = this.layerHealth.get(layer);\r\n    return health ? health.healthy : true; // Asumir saludable si no hay datos\r\n  }\r\n\r\n  /**\r\n   * Marca una capa como no saludable\r\n   */\r\n  private markLayerUnhealthy(layer: CacheLayer, error: Error): void {\r\n    const health = this.layerHealth.get(layer) || {\r\n      layer,\r\n      healthy: true,\r\n      latency: 0,\r\n      errorRate: 0,\r\n      lastCheck: Date.now(),\r\n      errors: []\r\n    };\r\n\r\n    health.healthy = false;\r\n    health.errors.push(error.message);\r\n    health.lastCheck = Date.now();\r\n    \r\n    // Mantener solo los \xFAltimos 10 errores\r\n    if (health.errors.length > 10) {\r\n      health.errors = health.errors.slice(-10);\r\n    }\r\n\r\n    this.layerHealth.set(layer, health);\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de una capa\r\n   */\r\n  private recordMetric(layer: CacheLayer, type: 'hit' | 'miss', latency: number): void {\r\n    const metrics = this.layerMetrics.get(layer) || {\r\n      layer,\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      avgLatency: 0,\r\n      totalRequests: 0,\r\n      bytesStored: 0,\r\n      entriesCount: 0,\r\n      lastUpdated: Date.now()\r\n    };\r\n\r\n    metrics.totalRequests++;\r\n    if (type === 'hit') {\r\n      metrics.hits++;\r\n    } else {\r\n      metrics.misses++;\r\n    }\r\n\r\n    metrics.hitRate = (metrics.hits / metrics.totalRequests) * 100;\r\n    metrics.avgLatency = ((metrics.avgLatency * (metrics.totalRequests - 1)) + latency) / metrics.totalRequests;\r\n    metrics.lastUpdated = Date.now();\r\n\r\n    this.layerMetrics.set(layer, metrics);\r\n  }\r\n\r\n  /**\r\n   * Inicializa health checks para todas las capas\r\n   */\r\n  private initializeHealthChecks(): void {\r\n    Object.entries(LAYER_CONFIGS).forEach(([layer, config]) => {\r\n      if (config.enabled && config.healthCheckInterval) {\r\n        const interval = setInterval(() => {\r\n          this.performHealthCheck(layer as CacheLayer);\r\n        }, config.healthCheckInterval);\r\n        \r\n        this.healthCheckIntervals.set(layer as CacheLayer, interval);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Realiza health check de una capa\r\n   */\r\n  private async performHealthCheck(layer: CacheLayer): Promise<void> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Test b\xE1sico de la capa\r\n      const testKey = `health_check_${layer}_${Date.now()}`;\r\n      const testData = { test: true, timestamp: Date.now() };\r\n      \r\n      await this.setToLayer(testKey, testData, 60, layer);\r\n      const retrieved = await this.getFromLayer(testKey, layer);\r\n      await this.deleteFromLayer(testKey, layer);\r\n      \r\n      const latency = Date.now() - startTime;\r\n      \r\n      // Actualizar estado de salud\r\n      const health: LayerHealth = {\r\n        layer,\r\n        healthy: retrieved !== null,\r\n        latency,\r\n        errorRate: 0, // Calcular basado en m\xE9tricas hist\xF3ricas\r\n        lastCheck: Date.now(),\r\n        errors: []\r\n      };\r\n      \r\n      this.layerHealth.set(layer, health);\r\n      \r\n    } catch (error) {\r\n      this.markLayerUnhealthy(layer, error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene estado de salud de todas las capas\r\n   */\r\n  getLayerHealth(): Record<CacheLayer, LayerHealth> {\r\n    const result: Record<CacheLayer, LayerHealth> = {} as any;\r\n    this.layerHealth.forEach((health, layer) => {\r\n      result[layer] = health;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas de todas las capas\r\n   */\r\n  getLayerMetrics(): Record<CacheLayer, LayerMetrics> {\r\n    const result: Record<CacheLayer, LayerMetrics> = {} as any;\r\n    this.layerMetrics.forEach((metrics, layer) => {\r\n      result[layer] = metrics;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Limpia todos los caches\r\n   */\r\n  async clearAll(): Promise<void> {\r\n    const clearPromises = this.getEnabledLayersByPriority().map(async (layer) => {\r\n      try {\r\n        switch (layer) {\r\n          case CacheLayer.MEMORY:\r\n            this.memoryCache.clear();\r\n            break;\r\n          case CacheLayer.REDIS:\r\n            await this.redis.flushdb();\r\n            break;\r\n        }\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error limpiando capa ${layer}:`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(clearPromises);\r\n  }\r\n\r\n  /**\r\n   * Destructor para limpiar recursos\r\n   */\r\n  destroy(): void {\r\n    this.healthCheckIntervals.forEach((interval) => {\r\n      clearInterval(interval);\r\n    });\r\n    this.healthCheckIntervals.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const multiLayerCacheManager = MultiLayerCacheManager.getInstance();\r\n\r\n/**\r\n * Utilidades para cache multi-capa\r\n */\r\nexport const MultiLayerCacheUtils = {\r\n  /**\r\n   * Cache con fallback autom\xE1tico\r\n   */\r\n  async getWithFallback<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    layers?: CacheLayer[]\r\n  ): Promise<T> {\r\n    // Intentar obtener del cache\r\n    const cached = await multiLayerCacheManager.get<T>(key, layers);\r\n    if (cached !== null) {return cached;}\r\n\r\n    // Si no est\xE1 en cache, obtener de la fuente\r\n    const data = await fetcher();\r\n    await multiLayerCacheManager.set(key, data, undefined, layers);\r\n    return data;\r\n  },\r\n\r\n  /**\r\n   * Cache con TTL espec\xEDfico por capa\r\n   */\r\n  async setWithLayerTTLs<T>(\r\n    key: string,\r\n    data: T,\r\n    layerTTLs: Partial<Record<CacheLayer, number>>\r\n  ): Promise<void> {\r\n    const setPromises = Object.entries(layerTTLs).map(async ([layer, ttl]) => {\r\n      await multiLayerCacheManager.set(key, data, ttl, [layer as CacheLayer]);\r\n    });\r\n\r\n    await Promise.allSettled(setPromises);\r\n  },\r\n\r\n  /**\r\n   * Obtiene estad\xEDsticas generales del cache\r\n   */\r\n  getOverallStats(): {\r\n    totalHits: number;\r\n    totalMisses: number;\r\n    overallHitRate: number;\r\n    healthyLayers: number;\r\n    totalLayers: number;\r\n  } {\r\n    const metrics = multiLayerCacheManager.getLayerMetrics();\r\n    const health = multiLayerCacheManager.getLayerHealth();\r\n    \r\n    let totalHits = 0;\r\n    let totalMisses = 0;\r\n    let healthyLayers = 0;\r\n    \r\n    Object.values(metrics).forEach(metric => {\r\n      totalHits += metric.hits;\r\n      totalMisses += metric.misses;\r\n    });\r\n    \r\n    Object.values(health).forEach(h => {\r\n      if (h.healthy) {healthyLayers++;}\r\n    });\r\n    \r\n    const totalRequests = totalHits + totalMisses;\r\n    const overallHitRate = totalRequests > 0 ? (totalHits / totalRequests) * 100 : 0;\r\n    \r\n    return {\r\n      totalHits,\r\n      totalMisses,\r\n      overallHitRate,\r\n      healthyLayers,\r\n      totalLayers: Object.keys(LAYER_CONFIGS).length\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["CacheLayer", "LAYER_CONFIGS", "MultiLayerCacheManager", "MultiLayerCacheUtils", "multiLayerCacheManager", "enabled", "priority", "ttl", "maxSize", "maxEntries", "compressionEnabled", "encryptionEnabled", "healthCheckInterval", "fallbackLayer", "MemoryCache", "cache", "Map", "accessOrder", "accessCounter", "get", "key", "entry", "Date", "now", "timestamp", "delete", "set", "data", "size", "evictLRU", "deleted", "clear", "oldestKey", "oldestAccess", "Infinity", "access", "getStats", "JSON", "stringify", "values", "length", "entries", "redis", "getRedisClient", "layerHealth", "layerMetrics", "healthCheckIntervals", "memoryCache", "initializeHealthChecks", "getInstance", "instance", "layers", "targetLayers", "getEnabledLayersByPriority", "layer", "isLayerHealthy", "startTime", "result", "getFromLayer", "recordMetric", "propagateToHigherPriorityLayers", "error", "logger", "LogCategory", "CACHE", "markLayerUnhealthy", "setPromises", "map", "layerTtl", "setToLayer", "debug", "Promise", "allSettled", "deletePromises", "deleteFromLayer", "invalidatePattern", "pattern", "invalidatePromises", "invalidatePatternInLayer", "redisValue", "parse", "setex", "del", "keys", "currentLayer", "currentPriority", "higherPriorityLayers", "filter", "Object", "_", "config", "sort", "a", "__", "b", "health", "healthy", "latency", "errorRate", "lastCheck", "errors", "push", "message", "slice", "type", "metrics", "hits", "misses", "hitRate", "avgLatency", "totalRequests", "bytesStored", "entriesCount", "lastUpdated", "forEach", "interval", "setInterval", "performHealthCheck", "testKey", "testData", "test", "retrieved", "getLayerHealth", "getLayerMetrics", "clearAll", "clearPromises", "flushdb", "destroy", "clearInterval", "getWithFallback", "fetcher", "cached", "undefined", "setWithLayerTTLs", "layerTTLs", "getOverallStats", "totalHits", "totalMisses", "healthyLayers", "metric", "h", "overallHitRate", "totalLayers"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6ec69303a41dfd3adcdc117255b21a0ea9f49747"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fa4bqrkps = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fa4bqrkps();
cov_1fa4bqrkps().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1fa4bqrkps().f[0]++;
  cov_1fa4bqrkps().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1fa4bqrkps().s[3]++;
_export(exports, {
  get CacheLayer() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[1]++;
    cov_1fa4bqrkps().s[4]++;
    return CacheLayer;
  },
  get LAYER_CONFIGS() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[2]++;
    cov_1fa4bqrkps().s[5]++;
    return LAYER_CONFIGS;
  },
  get MultiLayerCacheManager() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[3]++;
    cov_1fa4bqrkps().s[6]++;
    return MultiLayerCacheManager;
  },
  get MultiLayerCacheUtils() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[4]++;
    cov_1fa4bqrkps().s[7]++;
    return MultiLayerCacheUtils;
  },
  get multiLayerCacheManager() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[5]++;
    cov_1fa4bqrkps().s[8]++;
    return multiLayerCacheManager;
  }
});
const _logger =
/* istanbul ignore next */
(cov_1fa4bqrkps().s[9]++, require("../enterprise/logger"));
const _redis =
/* istanbul ignore next */
(cov_1fa4bqrkps().s[10]++, require("../integrations/redis"));
var CacheLayer =
/* istanbul ignore next */
(/*#__PURE__*/cov_1fa4bqrkps().s[11]++, function (CacheLayer) {
  /* istanbul ignore next */
  cov_1fa4bqrkps().f[6]++;
  cov_1fa4bqrkps().s[12]++;
  CacheLayer["MEMORY"] = "memory";
  /* istanbul ignore next */
  cov_1fa4bqrkps().s[13]++;
  CacheLayer["REDIS"] = "redis";
  /* istanbul ignore next */
  cov_1fa4bqrkps().s[14]++;
  CacheLayer["CDN"] = "cdn";
  /* istanbul ignore next */
  cov_1fa4bqrkps().s[15]++;
  CacheLayer["BROWSER"] = "browser";
  /* istanbul ignore next */
  cov_1fa4bqrkps().s[16]++;
  CacheLayer["EDGE"] = "edge"; // Cache en edge locations
  /* istanbul ignore next */
  cov_1fa4bqrkps().s[17]++;
  return CacheLayer;
}({}));
const LAYER_CONFIGS =
/* istanbul ignore next */
(cov_1fa4bqrkps().s[18]++, {
  ["memory"]: {
    enabled: true,
    priority: 1,
    ttl: 300,
    maxSize: 50 * 1024 * 1024,
    maxEntries: 10000,
    compressionEnabled: false,
    encryptionEnabled: false,
    healthCheckInterval: 30000 // 30 segundos
  },
  ["redis"]: {
    enabled: true,
    priority: 2,
    ttl: 1800,
    maxSize: 500 * 1024 * 1024,
    compressionEnabled: true,
    encryptionEnabled: false,
    fallbackLayer: "memory",
    healthCheckInterval: 60000 // 1 minuto
  },
  ["cdn"]: {
    enabled: true,
    priority: 3,
    ttl: 3600,
    compressionEnabled: true,
    encryptionEnabled: false,
    fallbackLayer: "redis",
    healthCheckInterval: 300000 // 5 minutos
  },
  ["browser"]: {
    enabled: true,
    priority: 4,
    ttl: 86400,
    compressionEnabled: false,
    encryptionEnabled: false,
    healthCheckInterval: 600000 // 10 minutos
  },
  ["edge"]: {
    enabled: false,
    priority: 5,
    ttl: 7200,
    compressionEnabled: true,
    encryptionEnabled: false,
    fallbackLayer: "cdn",
    healthCheckInterval: 300000 // 5 minutos
  }
});
/**
 * Cache en memoria con LRU
 */
class MemoryCache {
  constructor(maxSize =
  /* istanbul ignore next */
  (cov_1fa4bqrkps().b[0][0]++, 50 * 1024 * 1024), maxEntries =
  /* istanbul ignore next */
  (cov_1fa4bqrkps().b[1][0]++, 10000)) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[7]++;
    cov_1fa4bqrkps().s[19]++;
    this.cache = new Map();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[20]++;
    this.accessOrder = new Map();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[21]++;
    this.accessCounter = 0;
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[22]++;
    this.maxSize = maxSize;
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[23]++;
    this.maxEntries = maxEntries;
  }
  get(key) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[8]++;
    const entry =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[24]++, this.cache.get(key));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[25]++;
    if (!entry) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[2][0]++;
      cov_1fa4bqrkps().s[26]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1fa4bqrkps().b[2][1]++;
    }
    // Verificar TTL
    cov_1fa4bqrkps().s[27]++;
    if (Date.now() - entry.timestamp > entry.ttl * 1000) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[3][0]++;
      cov_1fa4bqrkps().s[28]++;
      this.cache.delete(key);
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[29]++;
      this.accessOrder.delete(key);
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[30]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1fa4bqrkps().b[3][1]++;
    }
    // Actualizar orden de acceso
    cov_1fa4bqrkps().s[31]++;
    this.accessOrder.set(key, ++this.accessCounter);
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[32]++;
    return entry.data;
  }
  set(key, data, ttl) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[9]++;
    cov_1fa4bqrkps().s[33]++;
    // Verificar límites
    if (this.cache.size >= this.maxEntries) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[4][0]++;
      cov_1fa4bqrkps().s[34]++;
      this.evictLRU();
    } else
    /* istanbul ignore next */
    {
      cov_1fa4bqrkps().b[4][1]++;
    }
    cov_1fa4bqrkps().s[35]++;
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[36]++;
    this.accessOrder.set(key, ++this.accessCounter);
  }
  delete(key) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[10]++;
    const deleted =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[37]++, this.cache.delete(key));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[38]++;
    this.accessOrder.delete(key);
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[39]++;
    return deleted;
  }
  clear() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[11]++;
    cov_1fa4bqrkps().s[40]++;
    this.cache.clear();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[41]++;
    this.accessOrder.clear();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[42]++;
    this.accessCounter = 0;
  }
  evictLRU() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[12]++;
    let oldestKey =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[43]++, '');
    let oldestAccess =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[44]++, Infinity);
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[45]++;
    for (const [key, access] of this.accessOrder) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[46]++;
      if (access < oldestAccess) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[5][0]++;
        cov_1fa4bqrkps().s[47]++;
        oldestAccess = access;
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[48]++;
        oldestKey = key;
      } else
      /* istanbul ignore next */
      {
        cov_1fa4bqrkps().b[5][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[49]++;
    if (oldestKey) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[6][0]++;
      cov_1fa4bqrkps().s[50]++;
      this.cache.delete(oldestKey);
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[51]++;
      this.accessOrder.delete(oldestKey);
    } else
    /* istanbul ignore next */
    {
      cov_1fa4bqrkps().b[6][1]++;
    }
  }
  getStats() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[13]++;
    cov_1fa4bqrkps().s[52]++;
    return {
      size: JSON.stringify([...this.cache.values()]).length,
      entries: this.cache.size
    };
  }
}
class MultiLayerCacheManager {
  constructor() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[14]++;
    cov_1fa4bqrkps().s[53]++;
    this.redis = (0, _redis.getRedisClient)();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[54]++;
    this.layerHealth = new Map();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[55]++;
    this.layerMetrics = new Map();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[56]++;
    this.healthCheckIntervals = new Map();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[57]++;
    this.memoryCache = new MemoryCache(LAYER_CONFIGS["memory"].maxSize, LAYER_CONFIGS["memory"].maxEntries);
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[58]++;
    this.initializeHealthChecks();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[15]++;
    cov_1fa4bqrkps().s[59]++;
    if (!MultiLayerCacheManager.instance) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[7][0]++;
      cov_1fa4bqrkps().s[60]++;
      MultiLayerCacheManager.instance = new MultiLayerCacheManager();
    } else
    /* istanbul ignore next */
    {
      cov_1fa4bqrkps().b[7][1]++;
    }
    cov_1fa4bqrkps().s[61]++;
    return MultiLayerCacheManager.instance;
  }
  /**
  * Obtiene datos del cache multi-capa
  */
  async get(key, layers) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[16]++;
    const targetLayers =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[62]++,
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[8][0]++, layers) ||
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[8][1]++, this.getEnabledLayersByPriority()));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[63]++;
    for (const layer of targetLayers) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[64]++;
      if (!this.isLayerHealthy(layer)) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[9][0]++;
        cov_1fa4bqrkps().s[65]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1fa4bqrkps().b[9][1]++;
      }
      cov_1fa4bqrkps().s[66]++;
      try {
        const startTime =
        /* istanbul ignore next */
        (cov_1fa4bqrkps().s[67]++, Date.now());
        const result =
        /* istanbul ignore next */
        (cov_1fa4bqrkps().s[68]++, await this.getFromLayer(key, layer));
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[69]++;
        if (result !== null) {
          /* istanbul ignore next */
          cov_1fa4bqrkps().b[10][0]++;
          cov_1fa4bqrkps().s[70]++;
          // Registrar hit
          this.recordMetric(layer, 'hit', Date.now() - startTime);
          // Propagar a capas de mayor prioridad
          /* istanbul ignore next */
          cov_1fa4bqrkps().s[71]++;
          await this.propagateToHigherPriorityLayers(key, result, layer);
          /* istanbul ignore next */
          cov_1fa4bqrkps().s[72]++;
          return result;
        } else {
          /* istanbul ignore next */
          cov_1fa4bqrkps().b[10][1]++;
          cov_1fa4bqrkps().s[73]++;
          // Registrar miss
          this.recordMetric(layer, 'miss', Date.now() - startTime);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[74]++;
        _logger.logger.error(_logger.LogCategory.CACHE, `Error en capa ${layer}:`, error);
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[75]++;
        this.markLayerUnhealthy(layer, error);
      }
    }
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[76]++;
    return null;
  }
  /**
  * Guarda datos en el cache multi-capa
  */
  async set(key, data, ttl, layers) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[17]++;
    const targetLayers =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[77]++,
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[11][0]++, layers) ||
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[11][1]++, this.getEnabledLayersByPriority()));
    const setPromises =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[78]++, targetLayers.map(async layer => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[18]++;
      cov_1fa4bqrkps().s[79]++;
      if (!this.isLayerHealthy(layer)) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[12][0]++;
        cov_1fa4bqrkps().s[80]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1fa4bqrkps().b[12][1]++;
      }
      cov_1fa4bqrkps().s[81]++;
      try {
        const layerTtl =
        /* istanbul ignore next */
        (cov_1fa4bqrkps().s[82]++,
        /* istanbul ignore next */
        (cov_1fa4bqrkps().b[13][0]++, ttl) ||
        /* istanbul ignore next */
        (cov_1fa4bqrkps().b[13][1]++, LAYER_CONFIGS[layer].ttl));
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[83]++;
        await this.setToLayer(key, data, layerTtl, layer);
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[84]++;
        _logger.logger.debug(_logger.LogCategory.CACHE, `Datos guardados en capa ${layer}: ${key}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[85]++;
        _logger.logger.error(_logger.LogCategory.CACHE, `Error guardando en capa ${layer}:`, error);
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[86]++;
        this.markLayerUnhealthy(layer, error);
      }
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[87]++;
    await Promise.allSettled(setPromises);
  }
  /**
  * Elimina datos del cache multi-capa
  */
  async delete(key, layers) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[19]++;
    const targetLayers =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[88]++,
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[14][0]++, layers) ||
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[14][1]++, this.getEnabledLayersByPriority()));
    const deletePromises =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[89]++, targetLayers.map(async layer => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[20]++;
      cov_1fa4bqrkps().s[90]++;
      try {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[91]++;
        await this.deleteFromLayer(key, layer);
      } catch (error) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[92]++;
        _logger.logger.error(_logger.LogCategory.CACHE, `Error eliminando de capa ${layer}:`, error);
      }
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[93]++;
    await Promise.allSettled(deletePromises);
  }
  /**
  * Invalida cache por patrón
  */
  async invalidatePattern(pattern, layers) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[21]++;
    const targetLayers =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[94]++,
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[15][0]++, layers) ||
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[15][1]++, this.getEnabledLayersByPriority()));
    const invalidatePromises =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[95]++, targetLayers.map(async layer => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[22]++;
      cov_1fa4bqrkps().s[96]++;
      try {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[97]++;
        await this.invalidatePatternInLayer(pattern, layer);
      } catch (error) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[98]++;
        _logger.logger.error(_logger.LogCategory.CACHE, `Error invalidando patrón en capa ${layer}:`, error);
      }
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[99]++;
    await Promise.allSettled(invalidatePromises);
  }
  /**
  * Obtiene datos de una capa específica
  */
  async getFromLayer(key, layer) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[23]++;
    cov_1fa4bqrkps().s[100]++;
    switch (layer) {
      case "memory":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[16][0]++;
        cov_1fa4bqrkps().s[101]++;
        return this.memoryCache.get(key);
      case "redis":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[16][1]++;
        const redisValue =
        /* istanbul ignore next */
        (cov_1fa4bqrkps().s[102]++, await this.redis.get(key));
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[103]++;
        return redisValue ?
        /* istanbul ignore next */
        (cov_1fa4bqrkps().b[17][0]++, JSON.parse(redisValue)) :
        /* istanbul ignore next */
        (cov_1fa4bqrkps().b[17][1]++, null);
      case "cdn":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[16][2]++;
        cov_1fa4bqrkps().s[104]++;
        // Implementación CDN (placeholder)
        return null;
      case "browser":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[16][3]++;
        cov_1fa4bqrkps().s[105]++;
        // Cache del navegador se maneja en el cliente
        return null;
      case "edge":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[16][4]++;
        cov_1fa4bqrkps().s[106]++;
        // Implementación edge cache (placeholder)
        return null;
      default:
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[16][5]++;
        cov_1fa4bqrkps().s[107]++;
        return null;
    }
  }
  /**
  * Guarda datos en una capa específica
  */
  async setToLayer(key, data, ttl, layer) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[24]++;
    cov_1fa4bqrkps().s[108]++;
    switch (layer) {
      case "memory":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[18][0]++;
        cov_1fa4bqrkps().s[109]++;
        this.memoryCache.set(key, data, ttl);
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[110]++;
        break;
      case "redis":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[18][1]++;
        cov_1fa4bqrkps().s[111]++;
        await this.redis.setex(key, ttl, JSON.stringify(data));
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[112]++;
        break;
      case "cdn":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[18][2]++;
        cov_1fa4bqrkps().s[113]++;
        break;
      case "browser":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[18][3]++;
        cov_1fa4bqrkps().s[114]++;
        break;
      case "edge":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[18][4]++;
        cov_1fa4bqrkps().s[115]++;
        break;
    }
  }
  /**
  * Elimina datos de una capa específica
  */
  async deleteFromLayer(key, layer) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[25]++;
    cov_1fa4bqrkps().s[116]++;
    switch (layer) {
      case "memory":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[19][0]++;
        cov_1fa4bqrkps().s[117]++;
        this.memoryCache.delete(key);
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[118]++;
        break;
      case "redis":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[19][1]++;
        cov_1fa4bqrkps().s[119]++;
        await this.redis.del(key);
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[120]++;
        break;
      case "cdn":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[19][2]++;
        cov_1fa4bqrkps().s[121]++;
        break;
      case "browser":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[19][3]++;
        cov_1fa4bqrkps().s[122]++;
        break;
      case "edge":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[19][4]++;
        cov_1fa4bqrkps().s[123]++;
        break;
    }
  }
  /**
  * Invalida patrón en una capa específica
  */
  async invalidatePatternInLayer(pattern, layer) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[26]++;
    cov_1fa4bqrkps().s[124]++;
    switch (layer) {
      case "memory":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[20][0]++;
        cov_1fa4bqrkps().s[125]++;
        break;
      case "redis":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[20][1]++;
        const keys =
        /* istanbul ignore next */
        (cov_1fa4bqrkps().s[126]++, await this.redis.keys(pattern));
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[127]++;
        if (keys.length > 0) {
          /* istanbul ignore next */
          cov_1fa4bqrkps().b[21][0]++;
          cov_1fa4bqrkps().s[128]++;
          await this.redis.del(...keys);
        } else
        /* istanbul ignore next */
        {
          cov_1fa4bqrkps().b[21][1]++;
        }
        cov_1fa4bqrkps().s[129]++;
        break;
      case "cdn":
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[20][2]++;
        cov_1fa4bqrkps().s[130]++;
        break;
    }
  }
  /**
  * Propaga datos a capas de mayor prioridad
  */
  async propagateToHigherPriorityLayers(key, data, currentLayer) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[27]++;
    const currentPriority =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[131]++, LAYER_CONFIGS[currentLayer].priority);
    const higherPriorityLayers =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[132]++, this.getEnabledLayersByPriority().filter(layer => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[28]++;
      cov_1fa4bqrkps().s[133]++;
      return LAYER_CONFIGS[layer].priority < currentPriority;
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[134]++;
    for (const layer of higherPriorityLayers) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[135]++;
      try {
        const ttl =
        /* istanbul ignore next */
        (cov_1fa4bqrkps().s[136]++, LAYER_CONFIGS[layer].ttl);
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[137]++;
        await this.setToLayer(key, data, ttl, layer);
      } catch (error) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[138]++;
        _logger.logger.error(_logger.LogCategory.CACHE, `Error propagando a capa ${layer}:`, error);
      }
    }
  }
  /**
  * Obtiene capas habilitadas ordenadas por prioridad
  */
  getEnabledLayersByPriority() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[29]++;
    cov_1fa4bqrkps().s[139]++;
    return Object.entries(LAYER_CONFIGS).filter(([_, config]) => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[30]++;
      cov_1fa4bqrkps().s[140]++;
      return config.enabled;
    }).sort(([_, a], [__, b]) => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[31]++;
      cov_1fa4bqrkps().s[141]++;
      return a.priority - b.priority;
    }).map(([layer, _]) => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[32]++;
      cov_1fa4bqrkps().s[142]++;
      return layer;
    });
  }
  /**
  * Verifica si una capa está saludable
  */
  isLayerHealthy(layer) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[33]++;
    const health =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[143]++, this.layerHealth.get(layer));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[144]++;
    return health ?
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[22][0]++, health.healthy) :
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[22][1]++, true); // Asumir saludable si no hay datos
  }
  /**
  * Marca una capa como no saludable
  */
  markLayerUnhealthy(layer, error) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[34]++;
    const health =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[145]++,
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[23][0]++, this.layerHealth.get(layer)) ||
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[23][1]++, {
      layer,
      healthy: true,
      latency: 0,
      errorRate: 0,
      lastCheck: Date.now(),
      errors: []
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[146]++;
    health.healthy = false;
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[147]++;
    health.errors.push(error.message);
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[148]++;
    health.lastCheck = Date.now();
    // Mantener solo los últimos 10 errores
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[149]++;
    if (health.errors.length > 10) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[24][0]++;
      cov_1fa4bqrkps().s[150]++;
      health.errors = health.errors.slice(-10);
    } else
    /* istanbul ignore next */
    {
      cov_1fa4bqrkps().b[24][1]++;
    }
    cov_1fa4bqrkps().s[151]++;
    this.layerHealth.set(layer, health);
  }
  /**
  * Registra métricas de una capa
  */
  recordMetric(layer, type, latency) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[35]++;
    const metrics =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[152]++,
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[25][0]++, this.layerMetrics.get(layer)) ||
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[25][1]++, {
      layer,
      hits: 0,
      misses: 0,
      hitRate: 0,
      avgLatency: 0,
      totalRequests: 0,
      bytesStored: 0,
      entriesCount: 0,
      lastUpdated: Date.now()
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[153]++;
    metrics.totalRequests++;
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[154]++;
    if (type === 'hit') {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[26][0]++;
      cov_1fa4bqrkps().s[155]++;
      metrics.hits++;
    } else {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[26][1]++;
      cov_1fa4bqrkps().s[156]++;
      metrics.misses++;
    }
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[157]++;
    metrics.hitRate = metrics.hits / metrics.totalRequests * 100;
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[158]++;
    metrics.avgLatency = (metrics.avgLatency * (metrics.totalRequests - 1) + latency) / metrics.totalRequests;
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[159]++;
    metrics.lastUpdated = Date.now();
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[160]++;
    this.layerMetrics.set(layer, metrics);
  }
  /**
  * Inicializa health checks para todas las capas
  */
  initializeHealthChecks() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[36]++;
    cov_1fa4bqrkps().s[161]++;
    Object.entries(LAYER_CONFIGS).forEach(([layer, config]) => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[37]++;
      cov_1fa4bqrkps().s[162]++;
      if (
      /* istanbul ignore next */
      (cov_1fa4bqrkps().b[28][0]++, config.enabled) &&
      /* istanbul ignore next */
      (cov_1fa4bqrkps().b[28][1]++, config.healthCheckInterval)) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[27][0]++;
        const interval =
        /* istanbul ignore next */
        (cov_1fa4bqrkps().s[163]++, setInterval(() => {
          /* istanbul ignore next */
          cov_1fa4bqrkps().f[38]++;
          cov_1fa4bqrkps().s[164]++;
          this.performHealthCheck(layer);
        }, config.healthCheckInterval));
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[165]++;
        this.healthCheckIntervals.set(layer, interval);
      } else
      /* istanbul ignore next */
      {
        cov_1fa4bqrkps().b[27][1]++;
      }
    });
  }
  /**
  * Realiza health check de una capa
  */
  async performHealthCheck(layer) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[39]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[166]++, Date.now());
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[167]++;
    try {
      // Test básico de la capa
      const testKey =
      /* istanbul ignore next */
      (cov_1fa4bqrkps().s[168]++, `health_check_${layer}_${Date.now()}`);
      const testData =
      /* istanbul ignore next */
      (cov_1fa4bqrkps().s[169]++, {
        test: true,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[170]++;
      await this.setToLayer(testKey, testData, 60, layer);
      const retrieved =
      /* istanbul ignore next */
      (cov_1fa4bqrkps().s[171]++, await this.getFromLayer(testKey, layer));
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[172]++;
      await this.deleteFromLayer(testKey, layer);
      const latency =
      /* istanbul ignore next */
      (cov_1fa4bqrkps().s[173]++, Date.now() - startTime);
      // Actualizar estado de salud
      const health =
      /* istanbul ignore next */
      (cov_1fa4bqrkps().s[174]++, {
        layer,
        healthy: retrieved !== null,
        latency,
        errorRate: 0,
        lastCheck: Date.now(),
        errors: []
      });
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[175]++;
      this.layerHealth.set(layer, health);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[176]++;
      this.markLayerUnhealthy(layer, error);
    }
  }
  /**
  * Obtiene estado de salud de todas las capas
  */
  getLayerHealth() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[40]++;
    const result =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[177]++, {});
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[178]++;
    this.layerHealth.forEach((health, layer) => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[41]++;
      cov_1fa4bqrkps().s[179]++;
      result[layer] = health;
    });
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[180]++;
    return result;
  }
  /**
  * Obtiene métricas de todas las capas
  */
  getLayerMetrics() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[42]++;
    const result =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[181]++, {});
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[182]++;
    this.layerMetrics.forEach((metrics, layer) => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[43]++;
      cov_1fa4bqrkps().s[183]++;
      result[layer] = metrics;
    });
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[184]++;
    return result;
  }
  /**
  * Limpia todos los caches
  */
  async clearAll() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[44]++;
    const clearPromises =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[185]++, this.getEnabledLayersByPriority().map(async layer => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[45]++;
      cov_1fa4bqrkps().s[186]++;
      try {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[187]++;
        switch (layer) {
          case "memory":
            /* istanbul ignore next */
            cov_1fa4bqrkps().b[29][0]++;
            cov_1fa4bqrkps().s[188]++;
            this.memoryCache.clear();
            /* istanbul ignore next */
            cov_1fa4bqrkps().s[189]++;
            break;
          case "redis":
            /* istanbul ignore next */
            cov_1fa4bqrkps().b[29][1]++;
            cov_1fa4bqrkps().s[190]++;
            await this.redis.flushdb();
            /* istanbul ignore next */
            cov_1fa4bqrkps().s[191]++;
            break;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().s[192]++;
        _logger.logger.error(_logger.LogCategory.CACHE, `Error limpiando capa ${layer}:`, error);
      }
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[193]++;
    await Promise.allSettled(clearPromises);
  }
  /**
  * Destructor para limpiar recursos
  */
  destroy() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[46]++;
    cov_1fa4bqrkps().s[194]++;
    this.healthCheckIntervals.forEach(interval => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[47]++;
      cov_1fa4bqrkps().s[195]++;
      clearInterval(interval);
    });
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[196]++;
    this.healthCheckIntervals.clear();
  }
}
const multiLayerCacheManager =
/* istanbul ignore next */
(cov_1fa4bqrkps().s[197]++, MultiLayerCacheManager.getInstance());
const MultiLayerCacheUtils =
/* istanbul ignore next */
(cov_1fa4bqrkps().s[198]++, {
  /**
  * Cache con fallback automático
  */
  async getWithFallback(key, fetcher, layers) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[48]++;
    // Intentar obtener del cache
    const cached =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[199]++, await multiLayerCacheManager.get(key, layers));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[200]++;
    if (cached !== null) {
      /* istanbul ignore next */
      cov_1fa4bqrkps().b[30][0]++;
      cov_1fa4bqrkps().s[201]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1fa4bqrkps().b[30][1]++;
    }
    // Si no está en cache, obtener de la fuente
    const data =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[202]++, await fetcher());
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[203]++;
    await multiLayerCacheManager.set(key, data, undefined, layers);
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[204]++;
    return data;
  },
  /**
  * Cache con TTL específico por capa
  */
  async setWithLayerTTLs(key, data, layerTTLs) {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[49]++;
    const setPromises =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[205]++, Object.entries(layerTTLs).map(async ([layer, ttl]) => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[50]++;
      cov_1fa4bqrkps().s[206]++;
      await multiLayerCacheManager.set(key, data, ttl, [layer]);
    }));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[207]++;
    await Promise.allSettled(setPromises);
  },
  /**
  * Obtiene estadísticas generales del cache
  */
  getOverallStats() {
    /* istanbul ignore next */
    cov_1fa4bqrkps().f[51]++;
    const metrics =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[208]++, multiLayerCacheManager.getLayerMetrics());
    const health =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[209]++, multiLayerCacheManager.getLayerHealth());
    let totalHits =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[210]++, 0);
    let totalMisses =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[211]++, 0);
    let healthyLayers =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[212]++, 0);
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[213]++;
    Object.values(metrics).forEach(metric => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[52]++;
      cov_1fa4bqrkps().s[214]++;
      totalHits += metric.hits;
      /* istanbul ignore next */
      cov_1fa4bqrkps().s[215]++;
      totalMisses += metric.misses;
    });
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[216]++;
    Object.values(health).forEach(h => {
      /* istanbul ignore next */
      cov_1fa4bqrkps().f[53]++;
      cov_1fa4bqrkps().s[217]++;
      if (h.healthy) {
        /* istanbul ignore next */
        cov_1fa4bqrkps().b[31][0]++;
        cov_1fa4bqrkps().s[218]++;
        healthyLayers++;
      } else
      /* istanbul ignore next */
      {
        cov_1fa4bqrkps().b[31][1]++;
      }
    });
    const totalRequests =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[219]++, totalHits + totalMisses);
    const overallHitRate =
    /* istanbul ignore next */
    (cov_1fa4bqrkps().s[220]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[32][0]++, totalHits / totalRequests * 100) :
    /* istanbul ignore next */
    (cov_1fa4bqrkps().b[32][1]++, 0));
    /* istanbul ignore next */
    cov_1fa4bqrkps().s[221]++;
    return {
      totalHits,
      totalMisses,
      overallHitRate,
      healthyLayers,
      totalLayers: Object.keys(LAYER_CONFIGS).length
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,