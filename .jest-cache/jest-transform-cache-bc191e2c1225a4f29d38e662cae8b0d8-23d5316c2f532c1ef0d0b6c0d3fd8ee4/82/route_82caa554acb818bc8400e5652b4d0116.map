{"version":3,"names":["cov_po62tdwmm","actualCoverage","s","GET","f","POST","runtime","EMAIL_TEMPLATES","profile_email_changed","subject","template","data","userName","oldValue","newValue","profile_phone_changed","b","profile_updated","security_alert","message","request","session","_config","auth","user","_server","NextResponse","json","success","error","status","userId","id","body","type","metadata","userData","userError","_supabase","supabaseAdmin","from","select","eq","single","console","templateData","name","userEmail","email","emailTemplate","htmlContent","notification","notificationError","insert","user_id","title","content","email_type","recipient","sent_at","Date","toISOString","read","created_at","log","notification_id","email_sent","searchParams","URL","url","limit","parseInt","get","offset","notifications","order","ascending","range","total","length"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\notifications\\email\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE NOTIFICACIONES POR EMAIL\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// Tipos de notificaciones por email\r\nexport type EmailNotificationType = \r\n  | 'profile_email_changed'\r\n  | 'profile_phone_changed'\r\n  | 'profile_updated'\r\n  | 'avatar_changed'\r\n  | 'address_added'\r\n  | 'address_updated'\r\n  | 'security_alert';\r\n\r\ninterface EmailNotificationData {\r\n  type: EmailNotificationType;\r\n  oldValue?: string;\r\n  newValue?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Plantillas de email\r\nconst EMAIL_TEMPLATES = {\r\n  profile_email_changed: {\r\n    subject: 'Pinteya - Cambio de email confirmado',\r\n    template: (data: any) => `\r\n      <h2>Cambio de email confirmado</h2>\r\n      <p>Hola ${data.userName},</p>\r\n      <p>Tu dirección de email ha sido actualizada exitosamente.</p>\r\n      <p><strong>Email anterior:</strong> ${data.oldValue}</p>\r\n      <p><strong>Nuevo email:</strong> ${data.newValue}</p>\r\n      <p>Si no realizaste este cambio, contacta inmediatamente a nuestro soporte.</p>\r\n      <p>Saludos,<br>Equipo Pinteya</p>\r\n    `,\r\n  },\r\n  profile_phone_changed: {\r\n    subject: 'Pinteya - Cambio de teléfono confirmado',\r\n    template: (data: any) => `\r\n      <h2>Cambio de teléfono confirmado</h2>\r\n      <p>Hola ${data.userName},</p>\r\n      <p>Tu número de teléfono ha sido actualizado exitosamente.</p>\r\n      <p><strong>Teléfono anterior:</strong> ${data.oldValue || 'No especificado'}</p>\r\n      <p><strong>Nuevo teléfono:</strong> ${data.newValue}</p>\r\n      <p>Si no realizaste este cambio, contacta inmediatamente a nuestro soporte.</p>\r\n      <p>Saludos,<br>Equipo Pinteya</p>\r\n    `,\r\n  },\r\n  profile_updated: {\r\n    subject: 'Pinteya - Perfil actualizado',\r\n    template: (data: any) => `\r\n      <h2>Perfil actualizado</h2>\r\n      <p>Hola ${data.userName},</p>\r\n      <p>Tu perfil ha sido actualizado exitosamente.</p>\r\n      <p>Si no realizaste estos cambios, contacta inmediatamente a nuestro soporte.</p>\r\n      <p>Saludos,<br>Equipo Pinteya</p>\r\n    `,\r\n  },\r\n  security_alert: {\r\n    subject: 'Pinteya - Alerta de seguridad',\r\n    template: (data: any) => `\r\n      <h2>Alerta de seguridad</h2>\r\n      <p>Hola ${data.userName},</p>\r\n      <p>Se han detectado cambios importantes en tu cuenta:</p>\r\n      <p>${data.message}</p>\r\n      <p>Si no realizaste estos cambios, contacta inmediatamente a nuestro soporte.</p>\r\n      <p>Saludos,<br>Equipo Pinteya</p>\r\n    `,\r\n  },\r\n};\r\n\r\n// ===================================\r\n// POST - Enviar notificación por email\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n    const body = await request.json();\r\n    const { type, oldValue, newValue, metadata }: EmailNotificationData = body;\r\n\r\n    // Validar tipo de notificación\r\n    if (!type || !EMAIL_TEMPLATES[type]) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Tipo de notificación inválido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener datos del usuario\r\n    const { data: userData, error: userError } = await supabaseAdmin\r\n      .from('users')\r\n      .select('name, email')\r\n      .eq('clerk_id', userId)\r\n      .single();\r\n\r\n    if (userError || !userData) {\r\n      console.error('Error al obtener usuario:', userError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al obtener datos del usuario' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos para la plantilla\r\n    const templateData = {\r\n      userName: userData.name,\r\n      userEmail: userData.email,\r\n      oldValue,\r\n      newValue,\r\n      ...metadata,\r\n    };\r\n\r\n    // Obtener plantilla de email\r\n    const emailTemplate = EMAIL_TEMPLATES[type];\r\n    const subject = emailTemplate.subject;\r\n    const htmlContent = emailTemplate.template(templateData);\r\n\r\n    // En un entorno de producción, aquí enviarías el email usando un servicio como:\r\n    // - SendGrid\r\n    // - AWS SES\r\n    // - Resend\r\n    // - Nodemailer\r\n    \r\n    // Por ahora, simularemos el envío y guardaremos la notificación en la base de datos\r\n    const { data: notification, error: notificationError } = await supabaseAdmin\r\n      .from('user_notifications')\r\n      .insert({\r\n        user_id: userId,\r\n        type: 'email',\r\n        title: subject,\r\n        content: htmlContent,\r\n        metadata: {\r\n          email_type: type,\r\n          recipient: userData.email,\r\n          sent_at: new Date().toISOString(),\r\n          ...templateData,\r\n        },\r\n        read: false,\r\n        created_at: new Date().toISOString(),\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (notificationError) {\r\n      console.error('Error al guardar notificación:', notificationError);\r\n      // No fallar si no se puede guardar la notificación\r\n    }\r\n\r\n    // Log para desarrollo\r\n    console.log('📧 Email notification sent:', {\r\n      type,\r\n      recipient: userData.email,\r\n      subject,\r\n      userId,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Notificación por email enviada correctamente',\r\n      notification_id: notification?.id,\r\n      email_sent: true,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en POST /api/user/notifications/email:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener historial de notificaciones\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n    const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get('limit') || '10');\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n\r\n    // Obtener notificaciones del usuario\r\n    const { data: notifications, error } = await supabaseAdmin\r\n      .from('user_notifications')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .eq('type', 'email')\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    if (error) {\r\n      console.error('Error al obtener notificaciones:', error);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al obtener notificaciones' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      notifications: notifications || [],\r\n      total: notifications?.length || 0,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/notifications/email:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}