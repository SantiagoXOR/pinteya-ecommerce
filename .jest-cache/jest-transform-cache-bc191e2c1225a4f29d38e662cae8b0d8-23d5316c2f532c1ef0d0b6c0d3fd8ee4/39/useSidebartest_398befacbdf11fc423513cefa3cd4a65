784ef1265da9243990a61d1b978f67b8
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA HOOK SIDEBAR
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useSidebar = require("../../hooks/useSidebar");
// Mock para eventos del DOM
const mockAddEventListener = jest.fn();
const mockRemoveEventListener = jest.fn();
beforeEach(()=>{
    // Reset mocks
    mockAddEventListener.mockClear();
    mockRemoveEventListener.mockClear();
    // Mock document.addEventListener
    Object.defineProperty(document, 'addEventListener', {
        value: mockAddEventListener,
        writable: true
    });
    Object.defineProperty(document, 'removeEventListener', {
        value: mockRemoveEventListener,
        writable: true
    });
});
describe('useSidebar', ()=>{
    it('should initialize with closed state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        expect(result.current.isOpen).toBe(false);
    });
    it('should toggle sidebar state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        (0, _react.act)(()=>{
            result.current.toggle();
        });
        expect(result.current.isOpen).toBe(true);
        (0, _react.act)(()=>{
            result.current.toggle();
        });
        expect(result.current.isOpen).toBe(false);
    });
    it('should open sidebar', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        (0, _react.act)(()=>{
            result.current.open();
        });
        expect(result.current.isOpen).toBe(true);
    });
    it('should close sidebar', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        // First open it
        (0, _react.act)(()=>{
            result.current.open();
        });
        expect(result.current.isOpen).toBe(true);
        // Then close it
        (0, _react.act)(()=>{
            result.current.close();
        });
        expect(result.current.isOpen).toBe(false);
    });
    it('should add event listeners when sidebar is open', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        (0, _react.act)(()=>{
            result.current.open();
        });
        expect(mockAddEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function));
        expect(mockAddEventListener).toHaveBeenCalledWith('keydown', expect.any(Function));
    });
    it('should remove event listeners when sidebar is closed', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        // Open sidebar first
        (0, _react.act)(()=>{
            result.current.open();
        });
        // Then close it
        (0, _react.act)(()=>{
            result.current.close();
        });
        expect(mockRemoveEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function));
        expect(mockRemoveEventListener).toHaveBeenCalledWith('keydown', expect.any(Function));
    });
    it('should provide stable function references', ()=>{
        const { result, rerender } = (0, _react.renderHook)(()=>(0, _useSidebar.useSidebar)());
        const initialToggle = result.current.toggle;
        const initialOpen = result.current.open;
        const initialClose = result.current.close;
        rerender();
        expect(result.current.toggle).toBe(initialToggle);
        expect(result.current.open).toBe(initialOpen);
        expect(result.current.close).toBe(initialClose);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlU2lkZWJhci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFBJTlRFWUEgRS1DT01NRVJDRSAtIFRFU1RTIFBBUkEgSE9PSyBTSURFQkFSXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgeyByZW5kZXJIb29rLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcclxuaW1wb3J0IHsgdXNlU2lkZWJhciB9IGZyb20gJ0AvaG9va3MvdXNlU2lkZWJhcic7XHJcblxyXG4vLyBNb2NrIHBhcmEgZXZlbnRvcyBkZWwgRE9NXHJcbmNvbnN0IG1vY2tBZGRFdmVudExpc3RlbmVyID0gamVzdC5mbigpO1xyXG5jb25zdCBtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGplc3QuZm4oKTtcclxuXHJcbmJlZm9yZUVhY2goKCkgPT4ge1xyXG4gIC8vIFJlc2V0IG1vY2tzXHJcbiAgbW9ja0FkZEV2ZW50TGlzdGVuZXIubW9ja0NsZWFyKCk7XHJcbiAgbW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIubW9ja0NsZWFyKCk7XHJcbiAgXHJcbiAgLy8gTW9jayBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LCAnYWRkRXZlbnRMaXN0ZW5lcicsIHtcclxuICAgIHZhbHVlOiBtb2NrQWRkRXZlbnRMaXN0ZW5lcixcclxuICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gIH0pO1xyXG4gIFxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCB7XHJcbiAgICB2YWx1ZTogbW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIsXHJcbiAgICB3cml0YWJsZTogdHJ1ZSxcclxuICB9KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgndXNlU2lkZWJhcicsICgpID0+IHtcclxuICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBjbG9zZWQgc3RhdGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTaWRlYmFyKCkpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNPcGVuKS50b0JlKGZhbHNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCB0b2dnbGUgc2lkZWJhciBzdGF0ZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNpZGViYXIoKSk7XHJcbiAgICBcclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LnRvZ2dsZSgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc09wZW4pLnRvQmUodHJ1ZSk7XHJcbiAgICBcclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LnRvZ2dsZSgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc09wZW4pLnRvQmUoZmFsc2UpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIG9wZW4gc2lkZWJhcicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNpZGViYXIoKSk7XHJcbiAgICBcclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm9wZW4oKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNPcGVuKS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGNsb3NlIHNpZGViYXInLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTaWRlYmFyKCkpO1xyXG4gICAgXHJcbiAgICAvLyBGaXJzdCBvcGVuIGl0XHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5vcGVuKCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzT3BlbikudG9CZSh0cnVlKTtcclxuICAgIFxyXG4gICAgLy8gVGhlbiBjbG9zZSBpdFxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNPcGVuKS50b0JlKGZhbHNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBhZGQgZXZlbnQgbGlzdGVuZXJzIHdoZW4gc2lkZWJhciBpcyBvcGVuJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2lkZWJhcigpKTtcclxuICAgIFxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQub3BlbigpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChtb2NrQWRkRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ21vdXNlZG93bicsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcclxuICAgIGV4cGVjdChtb2NrQWRkRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2tleWRvd24nLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB3aGVuIHNpZGViYXIgaXMgY2xvc2VkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2lkZWJhcigpKTtcclxuICAgIFxyXG4gICAgLy8gT3BlbiBzaWRlYmFyIGZpcnN0XHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5vcGVuKCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gVGhlbiBjbG9zZSBpdFxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdtb3VzZWRvd24nLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XHJcbiAgICBleHBlY3QobW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdrZXlkb3duJywgZXhwZWN0LmFueShGdW5jdGlvbikpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHByb3ZpZGUgc3RhYmxlIGZ1bmN0aW9uIHJlZmVyZW5jZXMnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCwgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2lkZWJhcigpKTtcclxuICAgIFxyXG4gICAgY29uc3QgaW5pdGlhbFRvZ2dsZSA9IHJlc3VsdC5jdXJyZW50LnRvZ2dsZTtcclxuICAgIGNvbnN0IGluaXRpYWxPcGVuID0gcmVzdWx0LmN1cnJlbnQub3BlbjtcclxuICAgIGNvbnN0IGluaXRpYWxDbG9zZSA9IHJlc3VsdC5jdXJyZW50LmNsb3NlO1xyXG4gICAgXHJcbiAgICByZXJlbmRlcigpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG9nZ2xlKS50b0JlKGluaXRpYWxUb2dnbGUpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lm9wZW4pLnRvQmUoaW5pdGlhbE9wZW4pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNsb3NlKS50b0JlKGluaXRpYWxDbG9zZSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsibW9ja0FkZEV2ZW50TGlzdGVuZXIiLCJqZXN0IiwiZm4iLCJtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJlZm9yZUVhY2giLCJtb2NrQ2xlYXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImRvY3VtZW50IiwidmFsdWUiLCJ3cml0YWJsZSIsImRlc2NyaWJlIiwiaXQiLCJyZXN1bHQiLCJyZW5kZXJIb29rIiwidXNlU2lkZWJhciIsImV4cGVjdCIsImN1cnJlbnQiLCJpc09wZW4iLCJ0b0JlIiwiYWN0IiwidG9nZ2xlIiwib3BlbiIsImNsb3NlIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJhbnkiLCJGdW5jdGlvbiIsInJlcmVuZGVyIiwiaW5pdGlhbFRvZ2dsZSIsImluaXRpYWxPcGVuIiwiaW5pdGlhbENsb3NlIl0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMsK0NBQStDO0FBQy9DLHNDQUFzQzs7Ozs7dUJBRU47NEJBQ0w7QUFFM0IsNEJBQTRCO0FBQzVCLE1BQU1BLHVCQUF1QkMsS0FBS0MsRUFBRTtBQUNwQyxNQUFNQywwQkFBMEJGLEtBQUtDLEVBQUU7QUFFdkNFLFdBQVc7SUFDVCxjQUFjO0lBQ2RKLHFCQUFxQkssU0FBUztJQUM5QkYsd0JBQXdCRSxTQUFTO0lBRWpDLGlDQUFpQztJQUNqQ0MsT0FBT0MsY0FBYyxDQUFDQyxVQUFVLG9CQUFvQjtRQUNsREMsT0FBT1Q7UUFDUFUsVUFBVTtJQUNaO0lBRUFKLE9BQU9DLGNBQWMsQ0FBQ0MsVUFBVSx1QkFBdUI7UUFDckRDLE9BQU9OO1FBQ1BPLFVBQVU7SUFDWjtBQUNGO0FBRUFDLFNBQVMsY0FBYztJQUNyQkMsR0FBRyx1Q0FBdUM7UUFDeEMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUs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