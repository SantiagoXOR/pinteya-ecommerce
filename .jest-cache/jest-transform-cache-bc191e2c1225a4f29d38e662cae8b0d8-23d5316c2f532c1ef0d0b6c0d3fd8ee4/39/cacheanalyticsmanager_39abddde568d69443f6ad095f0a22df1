df9d721ae38b5b5b3226ac406fdf6104
// ===================================
// PINTEYA E-COMMERCE - CACHE ANALYTICS MANAGER
// ===================================
"use strict";

/* istanbul ignore next */
function cov_mzr50xe94() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\cache-analytics-manager.ts";
  var hash = "f976d261e52cce17f127480b450272c79fb2814d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\cache-analytics-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 36
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "8": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "9": {
        start: {
          line: 29,
          column: 15
        },
        end: {
          line: 29,
          column: 47
        }
      },
      "10": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 70
        }
      },
      "11": {
        start: {
          line: 31,
          column: 38
        },
        end: {
          line: 31,
          column: 82
        }
      },
      "12": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 39,
          column: 1
        }
      },
      "13": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 50
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 33
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 32
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 48
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 39
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 38
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "20": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 73
        }
      },
      "21": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "22": {
        start: {
          line: 58,
          column: 26
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "23": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 59,
          column: 54
        }
      },
      "24": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 60
        }
      },
      "25": {
        start: {
          line: 62,
          column: 30
        },
        end: {
          line: 62,
          column: 66
        }
      },
      "26": {
        start: {
          line: 63,
          column: 26
        },
        end: {
          line: 63,
          column: 78
        }
      },
      "27": {
        start: {
          line: 64,
          column: 28
        },
        end: {
          line: 64,
          column: 84
        }
      },
      "28": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 65,
          column: 66
        }
      },
      "29": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "30": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 32
        }
      },
      "31": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "32": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 59
        }
      },
      "33": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 42
        }
      },
      "34": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 47
        }
      },
      "35": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 44
        }
      },
      "36": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 26
        }
      },
      "37": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "38": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "39": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 59
        }
      },
      "40": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 23
        }
      },
      "41": {
        start: {
          line: 104,
          column: 27
        },
        end: {
          line: 104,
          column: 54
        }
      },
      "42": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 105
        }
      },
      "43": {
        start: {
          line: 105,
          column: 43
        },
        end: {
          line: 105,
          column: 103
        }
      },
      "44": {
        start: {
          line: 110,
          column: 32
        },
        end: {
          line: 110,
          column: 106
        }
      },
      "45": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 119,
          column: 16
        }
      },
      "46": {
        start: {
          line: 111,
          column: 75
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "47": {
        start: {
          line: 124,
          column: 29
        },
        end: {
          line: 124,
          column: 93
        }
      },
      "48": {
        start: {
          line: 125,
          column: 28
        },
        end: {
          line: 125,
          column: 91
        }
      },
      "49": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "50": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 45
        }
      },
      "51": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 137,
          column: 14
        }
      },
      "52": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 30
        }
      },
      "53": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 144,
          column: 49
        }
      },
      "54": {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 145,
          column: 40
        }
      },
      "55": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 147,
          column: 29
        }
      },
      "56": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "57": {
        start: {
          line: 149,
          column: 34
        },
        end: {
          line: 149,
          column: 101
        }
      },
      "58": {
        start: {
          line: 149,
          column: 54
        },
        end: {
          line: 149,
          column: 100
        }
      },
      "59": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 46
        }
      },
      "60": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "61": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 54
        }
      },
      "62": {
        start: {
          line: 156,
          column: 25
        },
        end: {
          line: 156,
          column: 49
        }
      },
      "63": {
        start: {
          line: 157,
          column: 26
        },
        end: {
          line: 157,
          column: 73
        }
      },
      "64": {
        start: {
          line: 157,
          column: 49
        },
        end: {
          line: 157,
          column: 72
        }
      },
      "65": {
        start: {
          line: 158,
          column: 27
        },
        end: {
          line: 158,
          column: 73
        }
      },
      "66": {
        start: {
          line: 158,
          column: 50
        },
        end: {
          line: 158,
          column: 72
        }
      },
      "67": {
        start: {
          line: 159,
          column: 29
        },
        end: {
          line: 159,
          column: 68
        }
      },
      "68": {
        start: {
          line: 160,
          column: 30
        },
        end: {
          line: 160,
          column: 70
        }
      },
      "69": {
        start: {
          line: 161,
          column: 29
        },
        end: {
          line: 161,
          column: 93
        }
      },
      "70": {
        start: {
          line: 162,
          column: 30
        },
        end: {
          line: 162,
          column: 110
        }
      },
      "71": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 84
        }
      },
      "72": {
        start: {
          line: 164,
          column: 27
        },
        end: {
          line: 164,
          column: 89
        }
      },
      "73": {
        start: {
          line: 166,
          column: 28
        },
        end: {
          line: 166,
          column: 70
        }
      },
      "74": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 174,
          column: 10
        }
      },
      "75": {
        start: {
          line: 179,
          column: 23
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "76": {
        start: {
          line: 184,
          column: 27
        },
        end: {
          line: 184,
          column: 29
        }
      },
      "77": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 188,
          column: 11
        }
      },
      "78": {
        start: {
          line: 186,
          column: 34
        },
        end: {
          line: 186,
          column: 105
        }
      },
      "79": {
        start: {
          line: 186,
          column: 54
        },
        end: {
          line: 186,
          column: 104
        }
      },
      "80": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 46
        }
      },
      "81": {
        start: {
          line: 190,
          column: 24
        },
        end: {
          line: 190,
          column: 57
        }
      },
      "82": {
        start: {
          line: 192,
          column: 27
        },
        end: {
          line: 192,
          column: 52
        }
      },
      "83": {
        start: {
          line: 193,
          column: 23
        },
        end: {
          line: 193,
          column: 45
        }
      },
      "84": {
        start: {
          line: 195,
          column: 23
        },
        end: {
          line: 195,
          column: 54
        }
      },
      "85": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 131
        }
      },
      "86": {
        start: {
          line: 197,
          column: 72
        },
        end: {
          line: 197,
          column: 130
        }
      },
      "87": {
        start: {
          line: 199,
          column: 32
        },
        end: {
          line: 199,
          column: 97
        }
      },
      "88": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 43
        }
      },
      "89": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 211,
          column: 10
        }
      },
      "90": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 219,
          column: 10
        }
      },
      "91": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 95
        }
      },
      "92": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 81
        }
      },
      "93": {
        start: {
          line: 225,
          column: 64
        },
        end: {
          line: 225,
          column: 79
        }
      },
      "94": {
        start: {
          line: 230,
          column: 22
        },
        end: {
          line: 230,
          column: 46
        }
      },
      "95": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "96": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 34
        }
      },
      "97": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 42
        }
      },
      "98": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 90
        }
      },
      "99": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 24
        }
      },
      "100": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 21
        }
      },
      "101": {
        start: {
          line: 242,
          column: 23
        },
        end: {
          line: 242,
          column: 42
        }
      },
      "102": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 248,
          column: 11
        }
      },
      "103": {
        start: {
          line: 244,
          column: 29
        },
        end: {
          line: 244,
          column: 80
        }
      },
      "104": {
        start: {
          line: 244,
          column: 54
        },
        end: {
          line: 244,
          column: 79
        }
      },
      "105": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "106": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 48
        }
      },
      "107": {
        start: {
          line: 250,
          column: 26
        },
        end: {
          line: 250,
          column: 132
        }
      },
      "108": {
        start: {
          line: 250,
          column: 81
        },
        end: {
          line: 250,
          column: 131
        }
      },
      "109": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "110": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 35
        }
      },
      "111": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 127
        }
      },
      "112": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 264,
          column: 49
        }
      },
      "113": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 38
        }
      },
      "114": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "115": {
        start: {
          line: 271,
          column: 32
        },
        end: {
          line: 271,
          column: 95
        }
      },
      "116": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 279,
          column: 15
        }
      },
      "117": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 278,
          column: 17
        }
      },
      "118": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 277,
          column: 23
        }
      },
      "119": {
        start: {
          line: 281,
          column: 35
        },
        end: {
          line: 281,
          column: 59
        }
      },
      "120": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 284,
          column: 15
        }
      },
      "121": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 57
        }
      },
      "122": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 92
        }
      },
      "123": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "124": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "125": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "126": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 306,
          column: 15
        }
      },
      "127": {
        start: {
          line: 309,
          column: 26
        },
        end: {
          line: 309,
          column: 64
        }
      },
      "128": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "129": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 315,
          column: 15
        }
      },
      "130": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "131": {
        start: {
          line: 322,
          column: 29
        },
        end: {
          line: 322,
          column: 65
        }
      },
      "132": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 80
        }
      },
      "133": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 98
        }
      },
      "134": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 48
        }
      },
      "135": {
        start: {
          line: 336,
          column: 25
        },
        end: {
          line: 336,
          column: 57
        }
      },
      "136": {
        start: {
          line: 337,
          column: 26
        },
        end: {
          line: 337,
          column: 58
        }
      },
      "137": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 338,
          column: 30
        }
      },
      "138": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "139": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 19
        }
      },
      "140": {
        start: {
          line: 343,
          column: 22
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "141": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 41
        }
      },
      "142": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 353,
          column: 46
        }
      },
      "143": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 95
        }
      },
      "144": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "145": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 38
        }
      },
      "146": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 43
        }
      },
      "147": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 365,
          column: 47
        }
      },
      "148": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 48
        }
      },
      "149": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "150": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 386,
          column: 14
        }
      },
      "151": {
        start: {
          line: 388,
          column: 20
        },
        end: {
          line: 400,
          column: 15
        }
      },
      "152": {
        start: {
          line: 388,
          column: 51
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "153": {
        start: {
          line: 401,
          column: 22
        },
        end: {
          line: 401,
          column: 36
        }
      },
      "154": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 414,
          column: 10
        }
      },
      "155": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "156": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 42
        }
      },
      "157": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 54
        }
      },
      "158": {
        start: {
          line: 428,
          column: 23
        },
        end: {
          line: 428,
          column: 41
        }
      },
      "159": {
        start: {
          line: 429,
          column: 27
        },
        end: {
          line: 429,
          column: 86
        }
      },
      "160": {
        start: {
          line: 429,
          column: 51
        },
        end: {
          line: 429,
          column: 66
        }
      },
      "161": {
        start: {
          line: 430,
          column: 26
        },
        end: {
          line: 430,
          column: 91
        }
      },
      "162": {
        start: {
          line: 430,
          column: 50
        },
        end: {
          line: 430,
          column: 71
        }
      },
      "163": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 435,
          column: 10
        }
      },
      "164": {
        start: {
          line: 440,
          column: 24
        },
        end: {
          line: 440,
          column: 26
        }
      },
      "165": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "166": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 61
        }
      },
      "167": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 64
        }
      },
      "168": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 448,
          column: 9
        }
      },
      "169": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 59
        }
      },
      "170": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 61
        }
      },
      "171": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 23
        }
      },
      "172": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 465,
          column: 10
        }
      },
      "173": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "174": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 477,
          column: 14
        }
      },
      "175": {
        start: {
          line: 479,
          column: 23
        },
        end: {
          line: 479,
          column: 50
        }
      },
      "176": {
        start: {
          line: 480,
          column: 27
        },
        end: {
          line: 480,
          column: 64
        }
      },
      "177": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 487,
          column: 10
        }
      },
      "178": {
        start: {
          line: 492,
          column: 32
        },
        end: {
          line: 492,
          column: 34
        }
      },
      "179": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 496,
          column: 9
        }
      },
      "180": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 97
        }
      },
      "181": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "182": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 101
        }
      },
      "183": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 504,
          column: 9
        }
      },
      "184": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 503,
          column: 90
        }
      },
      "185": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "186": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 94
        }
      },
      "187": {
        start: {
          line: 509,
          column: 32
        },
        end: {
          line: 509,
          column: 80
        }
      },
      "188": {
        start: {
          line: 509,
          column: 51
        },
        end: {
          line: 509,
          column: 79
        }
      },
      "189": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 512,
          column: 9
        }
      },
      "190": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 511,
          column: 105
        }
      },
      "191": {
        start: {
          line: 511,
          column: 82
        },
        end: {
          line: 511,
          column: 89
        }
      },
      "192": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 513,
          column: 31
        }
      },
      "193": {
        start: {
          line: 518,
          column: 25
        },
        end: {
          line: 518,
          column: 27
        }
      },
      "194": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 528,
          column: 11
        }
      },
      "195": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 527,
          column: 13
        }
      },
      "196": {
        start: {
          line: 521,
          column: 31
        },
        end: {
          line: 521,
          column: 58
        }
      },
      "197": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 526,
          column: 19
        }
      },
      "198": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 94
        }
      },
      "199": {
        start: {
          line: 529,
          column: 37
        },
        end: {
          line: 529,
          column: 76
        }
      },
      "200": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 536,
          column: 9
        }
      },
      "201": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 52
        }
      },
      "202": {
        start: {
          line: 539,
          column: 30
        },
        end: {
          line: 539,
          column: 65
        }
      },
      "203": {
        start: {
          line: 540,
          column: 28
        },
        end: {
          line: 573,
          column: 1
        }
      },
      "204": {
        start: {
          line: 544,
          column: 8
        },
        end: {
          line: 544,
          column: 92
        }
      },
      "205": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 549,
          column: 82
        }
      },
      "206": {
        start: {
          line: 554,
          column: 8
        },
        end: {
          line: 554,
          column: 81
        }
      },
      "207": {
        start: {
          line: 559,
          column: 31
        },
        end: {
          line: 559,
          column: 72
        }
      },
      "208": {
        start: {
          line: 560,
          column: 23
        },
        end: {
          line: 560,
          column: 62
        }
      },
      "209": {
        start: {
          line: 561,
          column: 23
        },
        end: {
          line: 561,
          column: 62
        }
      },
      "210": {
        start: {
          line: 562,
          column: 26
        },
        end: {
          line: 562,
          column: 60
        }
      },
      "211": {
        start: {
          line: 563,
          column: 27
        },
        end: {
          line: 563,
          column: 110
        }
      },
      "212": {
        start: {
          line: 563,
          column: 74
        },
        end: {
          line: 563,
          column: 89
        }
      },
      "213": {
        start: {
          line: 564,
          column: 29
        },
        end: {
          line: 564,
          column: 42
        }
      },
      "214": {
        start: {
          line: 565,
          column: 30
        },
        end: {
          line: 565,
          column: 85
        }
      },
      "215": {
        start: {
          line: 565,
          column: 49
        },
        end: {
          line: 565,
          column: 77
        }
      },
      "216": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 571,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 32
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 33
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 49
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 57,
            column: 7
          }
        },
        loc: {
          start: {
            line: 57,
            column: 86
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 57
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 7
          }
        },
        loc: {
          start: {
            line: 92,
            column: 26
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 92
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 94,
            column: 29
          },
          end: {
            line: 94,
            column: 30
          }
        },
        loc: {
          start: {
            line: 94,
            column: 45
          },
          end: {
            line: 98,
            column: 9
          }
        },
        line: 94
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 6
          },
          end: {
            line: 103,
            column: 7
          }
        },
        loc: {
          start: {
            line: 103,
            column: 52
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 105,
            column: 33
          },
          end: {
            line: 105,
            column: 34
          }
        },
        loc: {
          start: {
            line: 105,
            column: 43
          },
          end: {
            line: 105,
            column: 103
          }
        },
        line: 105
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 109,
            column: 6
          },
          end: {
            line: 109,
            column: 7
          }
        },
        loc: {
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 109
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 111,
            column: 51
          },
          end: {
            line: 111,
            column: 52
          }
        },
        loc: {
          start: {
            line: 111,
            column: 75
          },
          end: {
            line: 119,
            column: 13
          }
        },
        line: 111
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 123,
            column: 6
          },
          end: {
            line: 123,
            column: 7
          }
        },
        loc: {
          start: {
            line: 123,
            column: 24
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 123
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 126,
            column: 48
          },
          end: {
            line: 126,
            column: 49
          }
        },
        loc: {
          start: {
            line: 126,
            column: 68
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 126
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 142,
            column: 6
          },
          end: {
            line: 142,
            column: 7
          }
        },
        loc: {
          start: {
            line: 142,
            column: 34
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 142
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 148,
            column: 29
          },
          end: {
            line: 148,
            column: 30
          }
        },
        loc: {
          start: {
            line: 148,
            column: 40
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 148
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 149,
            column: 49
          },
          end: {
            line: 149,
            column: 50
          }
        },
        loc: {
          start: {
            line: 149,
            column: 54
          },
          end: {
            line: 149,
            column: 100
          }
        },
        line: 149
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 157,
            column: 44
          },
          end: {
            line: 157,
            column: 45
          }
        },
        loc: {
          start: {
            line: 157,
            column: 49
          },
          end: {
            line: 157,
            column: 72
          }
        },
        line: 157
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 158,
            column: 45
          },
          end: {
            line: 158,
            column: 46
          }
        },
        loc: {
          start: {
            line: 158,
            column: 50
          },
          end: {
            line: 158,
            column: 72
          }
        },
        line: 158
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 178,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        },
        loc: {
          start: {
            line: 178,
            column: 47
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 178
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 185,
            column: 29
          },
          end: {
            line: 185,
            column: 30
          }
        },
        loc: {
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 188,
            column: 9
          }
        },
        line: 185
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 186,
            column: 49
          },
          end: {
            line: 186,
            column: 50
          }
        },
        loc: {
          start: {
            line: 186,
            column: 54
          },
          end: {
            line: 186,
            column: 104
          }
        },
        line: 186
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 197,
            column: 63
          },
          end: {
            line: 197,
            column: 64
          }
        },
        loc: {
          start: {
            line: 197,
            column: 72
          },
          end: {
            line: 197,
            column: 130
          }
        },
        line: 197
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 215,
            column: 6
          },
          end: {
            line: 215,
            column: 7
          }
        },
        loc: {
          start: {
            line: 215,
            column: 30
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 215
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 224,
            column: 7
          }
        },
        loc: {
          start: {
            line: 224,
            column: 24
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 224
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 225,
            column: 55
          },
          end: {
            line: 225,
            column: 56
          }
        },
        loc: {
          start: {
            line: 225,
            column: 64
          },
          end: {
            line: 225,
            column: 79
          }
        },
        line: 225
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 229,
            column: 6
          },
          end: {
            line: 229,
            column: 7
          }
        },
        loc: {
          start: {
            line: 229,
            column: 28
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 229
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 241,
            column: 6
          },
          end: {
            line: 241,
            column: 7
          }
        },
        loc: {
          start: {
            line: 241,
            column: 64
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 241
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 243,
            column: 30
          }
        },
        loc: {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 248,
            column: 9
          }
        },
        line: 243
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 244,
            column: 44
          },
          end: {
            line: 244,
            column: 45
          }
        },
        loc: {
          start: {
            line: 244,
            column: 54
          },
          end: {
            line: 244,
            column: 79
          }
        },
        line: 244
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 250,
            column: 67
          },
          end: {
            line: 250,
            column: 68
          }
        },
        loc: {
          start: {
            line: 250,
            column: 81
          },
          end: {
            line: 250,
            column: 131
          }
        },
        line: 250
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 251,
            column: 26
          },
          end: {
            line: 251,
            column: 27
          }
        },
        loc: {
          start: {
            line: 251,
            column: 37
          },
          end: {
            line: 253,
            column: 9
          }
        },
        line: 251
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 261,
            column: 6
          },
          end: {
            line: 261,
            column: 7
          }
        },
        loc: {
          start: {
            line: 261,
            column: 31
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 261
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 262,
            column: 47
          },
          end: {
            line: 262,
            column: 48
          }
        },
        loc: {
          start: {
            line: 262,
            column: 51
          },
          end: {
            line: 264,
            column: 9
          }
        },
        line: 262
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 268,
            column: 6
          },
          end: {
            line: 268,
            column: 7
          }
        },
        loc: {
          start: {
            line: 268,
            column: 33
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 268
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 272,
            column: 48
          },
          end: {
            line: 272,
            column: 49
          }
        },
        loc: {
          start: {
            line: 272,
            column: 67
          },
          end: {
            line: 279,
            column: 13
          }
        },
        line: 272
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 282,
            column: 51
          },
          end: {
            line: 282,
            column: 52
          }
        },
        loc: {
          start: {
            line: 282,
            column: 69
          },
          end: {
            line: 284,
            column: 13
          }
        },
        line: 282
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 291,
            column: 6
          },
          end: {
            line: 291,
            column: 7
          }
        },
        loc: {
          start: {
            line: 291,
            column: 42
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 291
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 320,
            column: 6
          },
          end: {
            line: 320,
            column: 7
          }
        },
        loc: {
          start: {
            line: 320,
            column: 40
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 320
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 330,
            column: 6
          },
          end: {
            line: 330,
            column: 7
          }
        },
        loc: {
          start: {
            line: 330,
            column: 37
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 330
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 335,
            column: 6
          },
          end: {
            line: 335,
            column: 7
          }
        },
        loc: {
          start: {
            line: 335,
            column: 52
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 335
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 358,
            column: 6
          },
          end: {
            line: 358,
            column: 7
          }
        },
        loc: {
          start: {
            line: 358,
            column: 26
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 358
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 372,
            column: 6
          },
          end: {
            line: 372,
            column: 7
          }
        },
        loc: {
          start: {
            line: 372,
            column: 39
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 372
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 388,
            column: 35
          },
          end: {
            line: 388,
            column: 36
          }
        },
        loc: {
          start: {
            line: 388,
            column: 51
          },
          end: {
            line: 400,
            column: 13
          }
        },
        line: 388
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 418,
            column: 6
          },
          end: {
            line: 418,
            column: 7
          }
        },
        loc: {
          start: {
            line: 418,
            column: 41
          },
          end: {
            line: 423,
            column: 5
          }
        },
        line: 418
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 426,
            column: 6
          },
          end: {
            line: 426,
            column: 7
          }
        },
        loc: {
          start: {
            line: 426,
            column: 41
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 426
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 429,
            column: 41
          },
          end: {
            line: 429,
            column: 42
          }
        },
        loc: {
          start: {
            line: 429,
            column: 51
          },
          end: {
            line: 429,
            column: 66
          }
        },
        line: 429
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 430,
            column: 40
          },
          end: {
            line: 430,
            column: 41
          }
        },
        loc: {
          start: {
            line: 430,
            column: 50
          },
          end: {
            line: 430,
            column: 71
          }
        },
        line: 430
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 439,
            column: 6
          },
          end: {
            line: 439,
            column: 7
          }
        },
        loc: {
          start: {
            line: 439,
            column: 49
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 439
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 453,
            column: 6
          },
          end: {
            line: 453,
            column: 7
          }
        },
        loc: {
          start: {
            line: 453,
            column: 36
          },
          end: {
            line: 466,
            column: 5
          }
        },
        line: 453
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 469,
            column: 6
          },
          end: {
            line: 469,
            column: 7
          }
        },
        loc: {
          start: {
            line: 469,
            column: 32
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 469
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 491,
            column: 6
          },
          end: {
            line: 491,
            column: 7
          }
        },
        loc: {
          start: {
            line: 491,
            column: 67
          },
          end: {
            line: 514,
            column: 5
          }
        },
        line: 491
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 509,
            column: 46
          },
          end: {
            line: 509,
            column: 47
          }
        },
        loc: {
          start: {
            line: 509,
            column: 51
          },
          end: {
            line: 509,
            column: 79
          }
        },
        line: 509
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 511,
            column: 77
          },
          end: {
            line: 511,
            column: 78
          }
        },
        loc: {
          start: {
            line: 511,
            column: 82
          },
          end: {
            line: 511,
            column: 89
          }
        },
        line: 511
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 517,
            column: 6
          },
          end: {
            line: 517,
            column: 7
          }
        },
        loc: {
          start: {
            line: 517,
            column: 24
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 517
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 519,
            column: 29
          },
          end: {
            line: 519,
            column: 30
          }
        },
        loc: {
          start: {
            line: 519,
            column: 45
          },
          end: {
            line: 528,
            column: 9
          }
        },
        line: 519
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 529,
            column: 29
          },
          end: {
            line: 529,
            column: 30
          }
        },
        loc: {
          start: {
            line: 529,
            column: 37
          },
          end: {
            line: 529,
            column: 76
          }
        },
        line: 529
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 533,
            column: 6
          },
          end: {
            line: 533,
            column: 7
          }
        },
        loc: {
          start: {
            line: 533,
            column: 16
          },
          end: {
            line: 537,
            column: 5
          }
        },
        line: 533
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 543,
            column: 6
          },
          end: {
            line: 543,
            column: 7
          }
        },
        loc: {
          start: {
            line: 543,
            column: 59
          },
          end: {
            line: 545,
            column: 5
          }
        },
        line: 543
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 548,
            column: 6
          },
          end: {
            line: 548,
            column: 7
          }
        },
        loc: {
          start: {
            line: 548,
            column: 43
          },
          end: {
            line: 550,
            column: 5
          }
        },
        line: 548
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 553,
            column: 6
          },
          end: {
            line: 553,
            column: 7
          }
        },
        loc: {
          start: {
            line: 553,
            column: 44
          },
          end: {
            line: 555,
            column: 5
          }
        },
        line: 553
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 558,
            column: 6
          },
          end: {
            line: 558,
            column: 7
          }
        },
        loc: {
          start: {
            line: 558,
            column: 25
          },
          end: {
            line: 572,
            column: 5
          }
        },
        line: 558
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 563,
            column: 64
          },
          end: {
            line: 563,
            column: 65
          }
        },
        loc: {
          start: {
            line: 563,
            column: 74
          },
          end: {
            line: 563,
            column: 89
          }
        },
        line: 563
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 565,
            column: 44
          },
          end: {
            line: 565,
            column: 45
          }
        },
        loc: {
          start: {
            line: 565,
            column: 49
          },
          end: {
            line: 565,
            column: 77
          }
        },
        line: 565
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 54
          },
          end: {
            line: 57,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 68
          },
          end: {
            line: 57,
            column: 69
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 71
          },
          end: {
            line: 57,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 79
          },
          end: {
            line: 57,
            column: 84
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 27
          },
          end: {
            line: 59,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 27
          },
          end: {
            line: 59,
            column: 48
          }
        }, {
          start: {
            line: 59,
            column: 52
          },
          end: {
            line: 59,
            column: 54
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 62,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 62,
            column: 56
          }
        }, {
          start: {
            line: 62,
            column: 60
          },
          end: {
            line: 62,
            column: 61
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 63,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 63,
            column: 48
          }
        }, {
          start: {
            line: 63,
            column: 52
          },
          end: {
            line: 63,
            column: 53
          }
        }],
        line: 63
      },
      "6": {
        loc: {
          start: {
            line: 63,
            column: 58
          },
          end: {
            line: 63,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 72
          },
          end: {
            line: 63,
            column: 73
          }
        }, {
          start: {
            line: 63,
            column: 76
          },
          end: {
            line: 63,
            column: 77
          }
        }],
        line: 63
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 64,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 64,
            column: 52
          }
        }, {
          start: {
            line: 64,
            column: 56
          },
          end: {
            line: 64,
            column: 57
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 62
          },
          end: {
            line: 64,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 78
          },
          end: {
            line: 64,
            column: 79
          }
        }, {
          start: {
            line: 64,
            column: 82
          },
          end: {
            line: 64,
            column: 83
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 65,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 65,
            column: 42
          }
        }, {
          start: {
            line: 65,
            column: 46
          },
          end: {
            line: 65,
            column: 47
          }
        }],
        line: 65
      },
      "10": {
        loc: {
          start: {
            line: 65,
            column: 52
          },
          end: {
            line: 65,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 60
          },
          end: {
            line: 65,
            column: 61
          }
        }, {
          start: {
            line: 65,
            column: 64
          },
          end: {
            line: 65,
            column: 65
          }
        }],
        line: 65
      },
      "11": {
        loc: {
          start: {
            line: 73,
            column: 26
          },
          end: {
            line: 73,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 26
          },
          end: {
            line: 73,
            column: 49
          }
        }, {
          start: {
            line: 73,
            column: 53
          },
          end: {
            line: 73,
            column: 54
          }
        }],
        line: 73
      },
      "12": {
        loc: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 48
          }
        }, {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 74,
            column: 53
          }
        }],
        line: 74
      },
      "13": {
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 75,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 75,
            column: 44
          }
        }, {
          start: {
            line: 75,
            column: 48
          },
          end: {
            line: 75,
            column: 49
          }
        }],
        line: 75
      },
      "14": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "15": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "16": {
        loc: {
          start: {
            line: 104,
            column: 27
          },
          end: {
            line: 104,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 27
          },
          end: {
            line: 104,
            column: 48
          }
        }, {
          start: {
            line: 104,
            column: 52
          },
          end: {
            line: 104,
            column: 54
          }
        }],
        line: 104
      },
      "17": {
        loc: {
          start: {
            line: 105,
            column: 43
          },
          end: {
            line: 105,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 43
          },
          end: {
            line: 105,
            column: 72
          }
        }, {
          start: {
            line: 105,
            column: 76
          },
          end: {
            line: 105,
            column: 103
          }
        }],
        line: 105
      },
      "18": {
        loc: {
          start: {
            line: 135,
            column: 30
          },
          end: {
            line: 135,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 48
          },
          end: {
            line: 135,
            column: 57
          }
        }, {
          start: {
            line: 135,
            column: 60
          },
          end: {
            line: 135,
            column: 71
          }
        }],
        line: 135
      },
      "19": {
        loc: {
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 136,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 136,
            column: 44
          }
        }, {
          start: {
            line: 136,
            column: 48
          },
          end: {
            line: 136,
            column: 49
          }
        }],
        line: 136
      },
      "20": {
        loc: {
          start: {
            line: 149,
            column: 54
          },
          end: {
            line: 149,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 54
          },
          end: {
            line: 149,
            column: 78
          }
        }, {
          start: {
            line: 149,
            column: 82
          },
          end: {
            line: 149,
            column: 100
          }
        }],
        line: 149
      },
      "21": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "22": {
        loc: {
          start: {
            line: 186,
            column: 54
          },
          end: {
            line: 186,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 54
          },
          end: {
            line: 186,
            column: 78
          }
        }, {
          start: {
            line: 186,
            column: 82
          },
          end: {
            line: 186,
            column: 104
          }
        }],
        line: 186
      },
      "23": {
        loc: {
          start: {
            line: 197,
            column: 72
          },
          end: {
            line: 197,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 72
          },
          end: {
            line: 197,
            column: 100
          }
        }, {
          start: {
            line: 197,
            column: 104
          },
          end: {
            line: 197,
            column: 130
          }
        }],
        line: 197
      },
      "24": {
        loc: {
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "25": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 17
          }
        }, {
          start: {
            line: 231,
            column: 21
          },
          end: {
            line: 231,
            column: 36
          }
        }],
        line: 231
      },
      "26": {
        loc: {
          start: {
            line: 241,
            column: 30
          },
          end: {
            line: 241,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 241,
            column: 39
          },
          end: {
            line: 241,
            column: 62
          }
        }],
        line: 241
      },
      "27": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "28": {
        loc: {
          start: {
            line: 250,
            column: 81
          },
          end: {
            line: 250,
            column: 131
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 81
          },
          end: {
            line: 250,
            column: 95
          }
        }, {
          start: {
            line: 250,
            column: 99
          },
          end: {
            line: 250,
            column: 131
          }
        }],
        line: 250
      },
      "29": {
        loc: {
          start: {
            line: 250,
            column: 100
          },
          end: {
            line: 250,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 100
          },
          end: {
            line: 250,
            column: 116
          }
        }, {
          start: {
            line: 250,
            column: 120
          },
          end: {
            line: 250,
            column: 121
          }
        }],
        line: 250
      },
      "30": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "31": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "32": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "33": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "34": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "35": {
        loc: {
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 340,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 340,
            column: 21
          }
        }, {
          start: {
            line: 340,
            column: 25
          },
          end: {
            line: 340,
            column: 73
          }
        }],
        line: 340
      },
      "36": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 361,
            column: 38
          }
        }, {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 363,
            column: 43
          }
        }, {
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 365,
            column: 47
          }
        }, {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 367,
            column: 48
          }
        }],
        line: 359
      },
      "37": {
        loc: {
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "38": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "39": {
        loc: {
          start: {
            line: 420,
            column: 19
          },
          end: {
            line: 420,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 34
          },
          end: {
            line: 420,
            column: 37
          }
        }, {
          start: {
            line: 420,
            column: 40
          },
          end: {
            line: 420,
            column: 41
          }
        }],
        line: 420
      },
      "40": {
        loc: {
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 444,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 444,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "41": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "42": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 478,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 478,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "43": {
        loc: {
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 496,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 496,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      },
      "44": {
        loc: {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "45": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "46": {
        loc: {
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      },
      "47": {
        loc: {
          start: {
            line: 510,
            column: 8
          },
          end: {
            line: 512,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 510,
            column: 8
          },
          end: {
            line: 512,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 510
      },
      "48": {
        loc: {
          start: {
            line: 520,
            column: 12
          },
          end: {
            line: 527,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 520,
            column: 12
          },
          end: {
            line: 527,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 520
      },
      "49": {
        loc: {
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 534
      },
      "50": {
        loc: {
          start: {
            line: 543,
            column: 42
          },
          end: {
            line: 543,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 543,
            column: 56
          },
          end: {
            line: 543,
            column: 57
          }
        }],
        line: 543
      },
      "51": {
        loc: {
          start: {
            line: 563,
            column: 27
          },
          end: {
            line: 563,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 563,
            column: 27
          },
          end: {
            line: 563,
            column: 105
          }
        }, {
          start: {
            line: 563,
            column: 109
          },
          end: {
            line: 563,
            column: 110
          }
        }],
        line: 563
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0, 0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0],
      "51": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\cache-analytics-manager.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - CACHE ANALYTICS MANAGER\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\nimport { multiLayerCacheManager } from './multi-layer-cache-manager';\r\nimport { advancedCacheStrategyManager } from './advanced-cache-strategy-manager';\r\n\r\n/**\r\n * M\xE9tricas de performance de cache\r\n */\r\nexport interface CachePerformanceMetrics {\r\n  hitRate: number;\r\n  missRate: number;\r\n  avgResponseTime: number;\r\n  totalRequests: number;\r\n  totalHits: number;\r\n  totalMisses: number;\r\n  bytesServed: number;\r\n  bytesStored: number;\r\n  evictions: number;\r\n  errors: number;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * M\xE9tricas por estrategia\r\n */\r\nexport interface StrategyMetrics {\r\n  strategy: string;\r\n  hitRate: number;\r\n  avgResponseTime: number;\r\n  totalRequests: number;\r\n  successRate: number;\r\n  errorRate: number;\r\n  lastUsed: number;\r\n}\r\n\r\n/**\r\n * M\xE9tricas por capa de cache\r\n */\r\nexport interface LayerMetrics {\r\n  layer: string;\r\n  hitRate: number;\r\n  avgLatency: number;\r\n  totalRequests: number;\r\n  bytesStored: number;\r\n  entriesCount: number;\r\n  healthStatus: 'healthy' | 'degraded' | 'unhealthy';\r\n  lastCheck: number;\r\n}\r\n\r\n/**\r\n * An\xE1lisis de tendencias\r\n */\r\nexport interface TrendAnalysis {\r\n  period: 'hour' | 'day' | 'week' | 'month';\r\n  hitRateTrend: number; // Porcentaje de cambio\r\n  responseTrend: number;\r\n  volumeTrend: number;\r\n  errorTrend: number;\r\n  predictions: {\r\n    nextHourHitRate: number;\r\n    nextDayVolume: number;\r\n    recommendedActions: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Alertas de cache\r\n */\r\nexport interface CacheAlert {\r\n  id: string;\r\n  type: 'performance' | 'capacity' | 'error' | 'health';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  message: string;\r\n  details: any;\r\n  timestamp: number;\r\n  resolved: boolean;\r\n  resolvedAt?: number;\r\n}\r\n\r\n/**\r\n * Configuraci\xF3n de alertas\r\n */\r\nexport interface AlertConfig {\r\n  hitRateThreshold: number;\r\n  responseTimeThreshold: number;\r\n  errorRateThreshold: number;\r\n  capacityThreshold: number;\r\n  healthCheckInterval: number;\r\n  alertCooldown: number;\r\n}\r\n\r\n/**\r\n * Reporte de cache\r\n */\r\nexport interface CacheReport {\r\n  period: { start: number; end: number };\r\n  summary: {\r\n    totalRequests: number;\r\n    avgHitRate: number;\r\n    avgResponseTime: number;\r\n    totalErrors: number;\r\n    dataTransferred: number;\r\n  };\r\n  strategies: StrategyMetrics[];\r\n  layers: LayerMetrics[];\r\n  trends: TrendAnalysis;\r\n  alerts: CacheAlert[];\r\n  recommendations: string[];\r\n  topKeys: Array<{ key: string; hits: number; misses: number }>;\r\n}\r\n\r\n/**\r\n * Configuraci\xF3n por defecto de alertas\r\n */\r\nexport const DEFAULT_ALERT_CONFIG: AlertConfig = {\r\n  hitRateThreshold: 0.8,        // 80% hit rate m\xEDnimo\r\n  responseTimeThreshold: 100,    // 100ms m\xE1ximo\r\n  errorRateThreshold: 0.05,     // 5% error rate m\xE1ximo\r\n  capacityThreshold: 0.85,      // 85% capacidad m\xE1xima\r\n  healthCheckInterval: 60000,   // 1 minuto\r\n  alertCooldown: 300000         // 5 minutos\r\n};\r\n\r\n/**\r\n * Manager de analytics de cache\r\n */\r\nexport class CacheAnalyticsManager {\r\n  private static instance: CacheAnalyticsManager;\r\n  private redis = getRedisClient();\r\n  private metrics: Map<string, CachePerformanceMetrics[]> = new Map();\r\n  private alerts: Map<string, CacheAlert> = new Map();\r\n  private alertConfig: AlertConfig = DEFAULT_ALERT_CONFIG;\r\n  private lastAlertTime: Map<string, number> = new Map();\r\n  private healthCheckInterval?: NodeJS.Timeout;\r\n\r\n  private constructor() {\r\n    this.initializeHealthChecks();\r\n  }\r\n\r\n  static getInstance(): CacheAnalyticsManager {\r\n    if (!CacheAnalyticsManager.instance) {\r\n      CacheAnalyticsManager.instance = new CacheAnalyticsManager();\r\n    }\r\n    return CacheAnalyticsManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de performance\r\n   */\r\n  async recordMetrics(\r\n    key: string,\r\n    hitRate: number,\r\n    responseTime: number,\r\n    bytesServed: number = 0,\r\n    error: boolean = false\r\n  ): Promise<void> {\r\n    const timestamp = Date.now();\r\n    const keyMetrics = this.metrics.get(key) || [];\r\n    \r\n    // Obtener m\xE9tricas anteriores para calcular totales\r\n    const lastMetric = keyMetrics[keyMetrics.length - 1];\r\n    const totalRequests = (lastMetric?.totalRequests || 0) + 1;\r\n    const totalHits = (lastMetric?.totalHits || 0) + (hitRate > 0 ? 1 : 0);\r\n    const totalMisses = (lastMetric?.totalMisses || 0) + (hitRate === 0 ? 1 : 0);\r\n    const errors = (lastMetric?.errors || 0) + (error ? 1 : 0);\r\n\r\n    const metric: CachePerformanceMetrics = {\r\n      hitRate,\r\n      missRate: 1 - hitRate,\r\n      avgResponseTime: responseTime,\r\n      totalRequests,\r\n      totalHits,\r\n      totalMisses,\r\n      bytesServed: (lastMetric?.bytesServed || 0) + bytesServed,\r\n      bytesStored: lastMetric?.bytesStored || 0,\r\n      evictions: lastMetric?.evictions || 0,\r\n      errors,\r\n      timestamp\r\n    };\r\n\r\n    keyMetrics.push(metric);\r\n    \r\n    // Mantener solo las \xFAltimas 1000 m\xE9tricas por key\r\n    if (keyMetrics.length > 1000) {\r\n      keyMetrics.splice(0, keyMetrics.length - 1000);\r\n    }\r\n    \r\n    this.metrics.set(key, keyMetrics);\r\n\r\n    // Persistir en Redis para an\xE1lisis hist\xF3rico\r\n    await this.persistMetrics(key, metric);\r\n\r\n    // Verificar alertas\r\n    await this.checkAlerts(key, metric);\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas actuales\r\n   */\r\n  getCurrentMetrics(): Record<string, CachePerformanceMetrics> {\r\n    const current: Record<string, CachePerformanceMetrics> = {};\r\n    \r\n    this.metrics.forEach((metrics, key) => {\r\n      if (metrics.length > 0) {\r\n        current[key] = metrics[metrics.length - 1];\r\n      }\r\n    });\r\n    \r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas hist\xF3ricas\r\n   */\r\n  getHistoricalMetrics(\r\n    key: string,\r\n    startTime: number,\r\n    endTime: number\r\n  ): CachePerformanceMetrics[] {\r\n    const keyMetrics = this.metrics.get(key) || [];\r\n    return keyMetrics.filter(\r\n      metric => metric.timestamp >= startTime && metric.timestamp <= endTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas por estrategia\r\n   */\r\n  getStrategyMetrics(): StrategyMetrics[] {\r\n    const strategyMetrics = advancedCacheStrategyManager.getAllMetrics();\r\n    \r\n    return Object.entries(strategyMetrics).map(([strategy, metrics]) => ({\r\n      strategy,\r\n      hitRate: metrics.hitRate,\r\n      avgResponseTime: metrics.avgResponseTime,\r\n      totalRequests: metrics.totalRequests,\r\n      successRate: metrics.hits / metrics.totalRequests,\r\n      errorRate: (metrics.totalRequests - metrics.hits) / metrics.totalRequests,\r\n      lastUsed: metrics.lastUpdated\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas por capa\r\n   */\r\n  getLayerMetrics(): LayerMetrics[] {\r\n    const layerMetrics = multiLayerCacheManager.getLayerMetrics();\r\n    const layerHealth = multiLayerCacheManager.getLayerHealth();\r\n    \r\n    return Object.entries(layerMetrics).map(([layer, metrics]) => {\r\n      const health = layerHealth[layer as keyof typeof layerHealth];\r\n      \r\n      return {\r\n        layer,\r\n        hitRate: metrics.hitRate,\r\n        avgLatency: metrics.avgLatency,\r\n        totalRequests: metrics.totalRequests,\r\n        bytesStored: metrics.bytesStored,\r\n        entriesCount: metrics.entriesCount,\r\n        healthStatus: health?.healthy ? 'healthy' : 'unhealthy',\r\n        lastCheck: health?.lastCheck || 0\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Analiza tendencias\r\n   */\r\n  async analyzeTrends(period: 'hour' | 'day' | 'week' | 'month'): Promise<TrendAnalysis> {\r\n    const now = Date.now();\r\n    const periodMs = this.getPeriodMs(period);\r\n    const startTime = now - periodMs;\r\n    \r\n    // Obtener m\xE9tricas del per\xEDodo\r\n    const allMetrics: CachePerformanceMetrics[] = [];\r\n    this.metrics.forEach(metrics => {\r\n      const periodMetrics = metrics.filter(\r\n        m => m.timestamp >= startTime && m.timestamp <= now\r\n      );\r\n      allMetrics.push(...periodMetrics);\r\n    });\r\n\r\n    if (allMetrics.length === 0) {\r\n      return this.getEmptyTrendAnalysis(period);\r\n    }\r\n\r\n    // Calcular tendencias\r\n    const midPoint = startTime + (periodMs / 2);\r\n    const firstHalf = allMetrics.filter(m => m.timestamp <= midPoint);\r\n    const secondHalf = allMetrics.filter(m => m.timestamp > midPoint);\r\n\r\n    const firstHalfAvg = this.calculateAverageMetrics(firstHalf);\r\n    const secondHalfAvg = this.calculateAverageMetrics(secondHalf);\r\n\r\n    const hitRateTrend = this.calculateTrend(firstHalfAvg.hitRate, secondHalfAvg.hitRate);\r\n    const responseTrend = this.calculateTrend(firstHalfAvg.avgResponseTime, secondHalfAvg.avgResponseTime);\r\n    const volumeTrend = this.calculateTrend(firstHalf.length, secondHalf.length);\r\n    const errorTrend = this.calculateTrend(firstHalfAvg.errors, secondHalfAvg.errors);\r\n\r\n    // Generar predicciones\r\n    const predictions = await this.generatePredictions(allMetrics);\r\n\r\n    return {\r\n      period,\r\n      hitRateTrend,\r\n      responseTrend,\r\n      volumeTrend,\r\n      errorTrend,\r\n      predictions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Genera reporte comprehensivo\r\n   */\r\n  async generateReport(\r\n    startTime: number,\r\n    endTime: number\r\n  ): Promise<CacheReport> {\r\n    const period = { start: startTime, end: endTime };\r\n    \r\n    // Recopilar todas las m\xE9tricas del per\xEDodo\r\n    const allMetrics: CachePerformanceMetrics[] = [];\r\n    this.metrics.forEach(metrics => {\r\n      const periodMetrics = metrics.filter(\r\n        m => m.timestamp >= startTime && m.timestamp <= endTime\r\n      );\r\n      allMetrics.push(...periodMetrics);\r\n    });\r\n\r\n    // Calcular resumen\r\n    const summary = this.calculateSummary(allMetrics);\r\n    \r\n    // Obtener m\xE9tricas por estrategia y capa\r\n    const strategies = this.getStrategyMetrics();\r\n    const layers = this.getLayerMetrics();\r\n    \r\n    // Analizar tendencias\r\n    const trends = await this.analyzeTrends('day');\r\n    \r\n    // Obtener alertas del per\xEDodo\r\n    const alerts = Array.from(this.alerts.values()).filter(\r\n      alert => alert.timestamp >= startTime && alert.timestamp <= endTime\r\n    );\r\n    \r\n    // Generar recomendaciones\r\n    const recommendations = this.generateRecommendations(summary, strategies, layers, trends);\r\n    \r\n    // Obtener top keys\r\n    const topKeys = this.getTopKeys(10);\r\n\r\n    return {\r\n      period,\r\n      summary,\r\n      strategies,\r\n      layers,\r\n      trends,\r\n      alerts,\r\n      recommendations,\r\n      topKeys\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Configura alertas\r\n   */\r\n  configureAlerts(config: Partial<AlertConfig>): void {\r\n    this.alertConfig = { ...this.alertConfig, ...config };\r\n    logger.info(LogCategory.CACHE, 'Configuraci\xF3n de alertas actualizada');\r\n  }\r\n\r\n  /**\r\n   * Obtiene alertas activas\r\n   */\r\n  getActiveAlerts(): CacheAlert[] {\r\n    return Array.from(this.alerts.values()).filter(alert => !alert.resolved);\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  resolveAlert(alertId: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (alert && !alert.resolved) {\r\n      alert.resolved = true;\r\n      alert.resolvedAt = Date.now();\r\n      logger.info(LogCategory.CACHE, `Alerta resuelta: ${alertId}`);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Limpia m\xE9tricas antiguas\r\n   */\r\n  async cleanupOldMetrics(maxAge: number = 7 * 24 * 60 * 60 * 1000): Promise<void> {\r\n    const cutoff = Date.now() - maxAge;\r\n    \r\n    this.metrics.forEach((metrics, key) => {\r\n      const filtered = metrics.filter(metric => metric.timestamp > cutoff);\r\n      if (filtered.length !== metrics.length) {\r\n        this.metrics.set(key, filtered);\r\n      }\r\n    });\r\n\r\n    // Limpiar alertas resueltas antiguas\r\n    const oldAlerts = Array.from(this.alerts.entries()).filter(\r\n      ([_, alert]) => alert.resolved && (alert.resolvedAt || 0) < cutoff\r\n    );\r\n    \r\n    oldAlerts.forEach(([id, _]) => {\r\n      this.alerts.delete(id);\r\n    });\r\n\r\n    logger.info(LogCategory.CACHE, `Limpieza completada: ${oldAlerts.length} alertas antiguas eliminadas`);\r\n  }\r\n\r\n  // ===================================\r\n  // M\xC9TODOS PRIVADOS\r\n  // ===================================\r\n\r\n  /**\r\n   * Inicializa health checks\r\n   */\r\n  private initializeHealthChecks(): void {\r\n    this.healthCheckInterval = setInterval(() => {\r\n      this.performHealthCheck();\r\n    }, this.alertConfig.healthCheckInterval);\r\n  }\r\n\r\n  /**\r\n   * Realiza health check\r\n   */\r\n  private async performHealthCheck(): Promise<void> {\r\n    try {\r\n      // Verificar estado de las capas\r\n      const layerHealth = multiLayerCacheManager.getLayerHealth();\r\n      \r\n      Object.entries(layerHealth).forEach(([layer, health]) => {\r\n        if (!health.healthy) {\r\n          this.createAlert(\r\n            'health',\r\n            'high',\r\n            `Capa de cache no saludable: ${layer}`,\r\n            { layer, errors: health.errors }\r\n          );\r\n        }\r\n      });\r\n\r\n      // Verificar m\xE9tricas generales\r\n      const currentMetrics = this.getCurrentMetrics();\r\n      Object.entries(currentMetrics).forEach(([key, metrics]) => {\r\n        this.checkMetricThresholds(key, metrics);\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error en health check', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de m\xE9tricas\r\n   */\r\n  private checkMetricThresholds(key: string, metrics: CachePerformanceMetrics): void {\r\n    // Verificar hit rate\r\n    if (metrics.hitRate < this.alertConfig.hitRateThreshold) {\r\n      this.createAlert(\r\n        'performance',\r\n        'medium',\r\n        `Hit rate bajo para ${key}: ${(metrics.hitRate * 100).toFixed(1)}%`,\r\n        { key, hitRate: metrics.hitRate, threshold: this.alertConfig.hitRateThreshold }\r\n      );\r\n    }\r\n\r\n    // Verificar response time\r\n    if (metrics.avgResponseTime > this.alertConfig.responseTimeThreshold) {\r\n      this.createAlert(\r\n        'performance',\r\n        'medium',\r\n        `Tiempo de respuesta alto para ${key}: ${metrics.avgResponseTime}ms`,\r\n        { key, responseTime: metrics.avgResponseTime, threshold: this.alertConfig.responseTimeThreshold }\r\n      );\r\n    }\r\n\r\n    // Verificar error rate\r\n    const errorRate = metrics.errors / metrics.totalRequests;\r\n    if (errorRate > this.alertConfig.errorRateThreshold) {\r\n      this.createAlert(\r\n        'error',\r\n        'high',\r\n        `Tasa de errores alta para ${key}: ${(errorRate * 100).toFixed(1)}%`,\r\n        { key, errorRate, threshold: this.alertConfig.errorRateThreshold }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Persiste m\xE9tricas en Redis\r\n   */\r\n  private async persistMetrics(key: string, metric: CachePerformanceMetrics): Promise<void> {\r\n    try {\r\n      const redisKey = `cache_metrics:${key}:${Date.now()}`;\r\n      await this.redis.setex(redisKey, 86400 * 7, JSON.stringify(metric)); // 7 d\xEDas\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error persistiendo m\xE9tricas', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica alertas\r\n   */\r\n  private async checkAlerts(key: string, metric: CachePerformanceMetrics): Promise<void> {\r\n    this.checkMetricThresholds(key, metric);\r\n  }\r\n\r\n  /**\r\n   * Crea una alerta\r\n   */\r\n  private createAlert(\r\n    type: CacheAlert['type'],\r\n    severity: CacheAlert['severity'],\r\n    message: string,\r\n    details: any\r\n  ): void {\r\n    const alertKey = `${type}_${severity}_${message}`;\r\n    const lastAlert = this.lastAlertTime.get(alertKey);\r\n    const now = Date.now();\r\n\r\n    // Verificar cooldown\r\n    if (lastAlert && (now - lastAlert) < this.alertConfig.alertCooldown) {\r\n      return;\r\n    }\r\n\r\n    const alert: CacheAlert = {\r\n      id: `alert_${now}_${Math.random().toString(36).substr(2, 9)}`,\r\n      type,\r\n      severity,\r\n      message,\r\n      details,\r\n      timestamp: now,\r\n      resolved: false\r\n    };\r\n\r\n    this.alerts.set(alert.id, alert);\r\n    this.lastAlertTime.set(alertKey, now);\r\n\r\n    logger.warn(LogCategory.CACHE, `Alerta de cache: ${message}`, details);\r\n  }\r\n\r\n  /**\r\n   * Obtiene duraci\xF3n del per\xEDodo en ms\r\n   */\r\n  private getPeriodMs(period: 'hour' | 'day' | 'week' | 'month'): number {\r\n    switch (period) {\r\n      case 'hour': return 60 * 60 * 1000;\r\n      case 'day': return 24 * 60 * 60 * 1000;\r\n      case 'week': return 7 * 24 * 60 * 60 * 1000;\r\n      case 'month': return 30 * 24 * 60 * 60 * 1000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcula m\xE9tricas promedio\r\n   */\r\n  private calculateAverageMetrics(metrics: CachePerformanceMetrics[]): CachePerformanceMetrics {\r\n    if (metrics.length === 0) {\r\n      return {\r\n        hitRate: 0, missRate: 0, avgResponseTime: 0, totalRequests: 0,\r\n        totalHits: 0, totalMisses: 0, bytesServed: 0, bytesStored: 0,\r\n        evictions: 0, errors: 0, timestamp: Date.now()\r\n      };\r\n    }\r\n\r\n    const sum = metrics.reduce((acc, metric) => ({\r\n      hitRate: acc.hitRate + metric.hitRate,\r\n      missRate: acc.missRate + metric.missRate,\r\n      avgResponseTime: acc.avgResponseTime + metric.avgResponseTime,\r\n      totalRequests: acc.totalRequests + metric.totalRequests,\r\n      totalHits: acc.totalHits + metric.totalHits,\r\n      totalMisses: acc.totalMisses + metric.totalMisses,\r\n      bytesServed: acc.bytesServed + metric.bytesServed,\r\n      bytesStored: acc.bytesStored + metric.bytesStored,\r\n      evictions: acc.evictions + metric.evictions,\r\n      errors: acc.errors + metric.errors,\r\n      timestamp: Math.max(acc.timestamp, metric.timestamp)\r\n    }));\r\n\r\n    const count = metrics.length;\r\n    return {\r\n      hitRate: sum.hitRate / count,\r\n      missRate: sum.missRate / count,\r\n      avgResponseTime: sum.avgResponseTime / count,\r\n      totalRequests: sum.totalRequests,\r\n      totalHits: sum.totalHits,\r\n      totalMisses: sum.totalMisses,\r\n      bytesServed: sum.bytesServed,\r\n      bytesStored: sum.bytesStored,\r\n      evictions: sum.evictions,\r\n      errors: sum.errors,\r\n      timestamp: sum.timestamp\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcula tendencia porcentual\r\n   */\r\n  private calculateTrend(oldValue: number, newValue: number): number {\r\n    if (oldValue === 0) {return newValue > 0 ? 100 : 0;}\r\n    return ((newValue - oldValue) / oldValue) * 100;\r\n  }\r\n\r\n  /**\r\n   * Genera predicciones\r\n   */\r\n  private async generatePredictions(metrics: CachePerformanceMetrics[]): Promise<TrendAnalysis['predictions']> {\r\n    // Implementaci\xF3n simplificada de predicciones\r\n    const recent = metrics.slice(-10);\r\n    const avgHitRate = recent.reduce((sum, m) => sum + m.hitRate, 0) / recent.length;\r\n    const avgVolume = recent.reduce((sum, m) => sum + m.totalRequests, 0) / recent.length;\r\n\r\n    return {\r\n      nextHourHitRate: Math.min(1, avgHitRate * 1.02), // Predicci\xF3n optimista\r\n      nextDayVolume: avgVolume * 24,\r\n      recommendedActions: this.generatePredictionActions(avgHitRate, avgVolume)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Genera acciones recomendadas basadas en predicciones\r\n   */\r\n  private generatePredictionActions(hitRate: number, volume: number): string[] {\r\n    const actions: string[] = [];\r\n\r\n    if (hitRate < 0.8) {\r\n      actions.push('Considerar aumentar TTL de cache');\r\n      actions.push('Revisar estrategias de invalidaci\xF3n');\r\n    }\r\n\r\n    if (volume > 1000) {\r\n      actions.push('Considerar escalado horizontal');\r\n      actions.push('Optimizar queries m\xE1s frecuentes');\r\n    }\r\n\r\n    return actions;\r\n  }\r\n\r\n  /**\r\n   * Obtiene an\xE1lisis de tendencias vac\xEDo\r\n   */\r\n  private getEmptyTrendAnalysis(period: 'hour' | 'day' | 'week' | 'month'): TrendAnalysis {\r\n    return {\r\n      period,\r\n      hitRateTrend: 0,\r\n      responseTrend: 0,\r\n      volumeTrend: 0,\r\n      errorTrend: 0,\r\n      predictions: {\r\n        nextHourHitRate: 0,\r\n        nextDayVolume: 0,\r\n        recommendedActions: []\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcula resumen de m\xE9tricas\r\n   */\r\n  private calculateSummary(metrics: CachePerformanceMetrics[]): CacheReport['summary'] {\r\n    if (metrics.length === 0) {\r\n      return {\r\n        totalRequests: 0,\r\n        avgHitRate: 0,\r\n        avgResponseTime: 0,\r\n        totalErrors: 0,\r\n        dataTransferred: 0\r\n      };\r\n    }\r\n\r\n    const latest = metrics[metrics.length - 1];\r\n    const avgMetrics = this.calculateAverageMetrics(metrics);\r\n\r\n    return {\r\n      totalRequests: latest.totalRequests,\r\n      avgHitRate: avgMetrics.hitRate,\r\n      avgResponseTime: avgMetrics.avgResponseTime,\r\n      totalErrors: latest.errors,\r\n      dataTransferred: latest.bytesServed\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Genera recomendaciones\r\n   */\r\n  private generateRecommendations(\r\n    summary: CacheReport['summary'],\r\n    strategies: StrategyMetrics[],\r\n    layers: LayerMetrics[],\r\n    trends: TrendAnalysis\r\n  ): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Recomendaciones basadas en hit rate\r\n    if (summary.avgHitRate < 0.8) {\r\n      recommendations.push('Hit rate bajo: considerar ajustar TTL o estrategias de cache');\r\n    }\r\n\r\n    // Recomendaciones basadas en response time\r\n    if (summary.avgResponseTime > 100) {\r\n      recommendations.push('Tiempo de respuesta alto: optimizar queries o aumentar capacidad');\r\n    }\r\n\r\n    // Recomendaciones basadas en tendencias\r\n    if (trends.hitRateTrend < -10) {\r\n      recommendations.push('Hit rate en declive: revisar patrones de invalidaci\xF3n');\r\n    }\r\n\r\n    if (trends.volumeTrend > 50) {\r\n      recommendations.push('Volumen creciente: considerar escalado de infraestructura');\r\n    }\r\n\r\n    // Recomendaciones basadas en capas\r\n    const unhealthyLayers = layers.filter(l => l.healthStatus !== 'healthy');\r\n    if (unhealthyLayers.length > 0) {\r\n      recommendations.push(`Capas no saludables: ${unhealthyLayers.map(l => l.layer).join(', ')}`);\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Obtiene top keys por actividad\r\n   */\r\n  private getTopKeys(limit: number): Array<{ key: string; hits: number; misses: number }> {\r\n    const keyStats: Array<{ key: string; hits: number; misses: number }> = [];\r\n\r\n    this.metrics.forEach((metrics, key) => {\r\n      if (metrics.length > 0) {\r\n        const latest = metrics[metrics.length - 1];\r\n        keyStats.push({\r\n          key,\r\n          hits: latest.totalHits,\r\n          misses: latest.totalMisses\r\n        });\r\n      }\r\n    });\r\n\r\n    return keyStats\r\n      .sort((a, b) => (b.hits + b.misses) - (a.hits + a.misses))\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    if (this.healthCheckInterval) {\r\n      clearInterval(this.healthCheckInterval);\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const cacheAnalyticsManager = CacheAnalyticsManager.getInstance();\r\n\r\n/**\r\n * Utilidades para analytics de cache\r\n */\r\nexport const CacheAnalyticsUtils = {\r\n  /**\r\n   * Registra hit de cache\r\n   */\r\n  async recordHit(key: string, responseTime: number, bytesServed: number = 0): Promise<void> {\r\n    await cacheAnalyticsManager.recordMetrics(key, 1, responseTime, bytesServed, false);\r\n  },\r\n\r\n  /**\r\n   * Registra miss de cache\r\n   */\r\n  async recordMiss(key: string, responseTime: number): Promise<void> {\r\n    await cacheAnalyticsManager.recordMetrics(key, 0, responseTime, 0, false);\r\n  },\r\n\r\n  /**\r\n   * Registra error de cache\r\n   */\r\n  async recordError(key: string, responseTime: number): Promise<void> {\r\n    await cacheAnalyticsManager.recordMetrics(key, 0, responseTime, 0, true);\r\n  },\r\n\r\n  /**\r\n   * Obtiene resumen r\xE1pido\r\n   */\r\n  getQuickSummary(): {\r\n    totalKeys: number;\r\n    avgHitRate: number;\r\n    activeAlerts: number;\r\n    healthyLayers: number;\r\n  } {\r\n    const currentMetrics = cacheAnalyticsManager.getCurrentMetrics();\r\n    const alerts = cacheAnalyticsManager.getActiveAlerts();\r\n    const layers = cacheAnalyticsManager.getLayerMetrics();\r\n\r\n    const totalKeys = Object.keys(currentMetrics).length;\r\n    const avgHitRate = Object.values(currentMetrics).reduce((sum, m) => sum + m.hitRate, 0) / totalKeys || 0;\r\n    const activeAlerts = alerts.length;\r\n    const healthyLayers = layers.filter(l => l.healthStatus === 'healthy').length;\r\n\r\n    return { totalKeys, avgHitRate, activeAlerts, healthyLayers };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["CacheAnalyticsManager", "CacheAnalyticsUtils", "DEFAULT_ALERT_CONFIG", "cacheAnalyticsManager", "hitRateThreshold", "responseTimeThreshold", "errorRateThreshold", "capacityThreshold", "healthCheckInterval", "alertCooldown", "redis", "getRedisClient", "metrics", "Map", "alerts", "alertConfig", "lastAlertTime", "initializeHealthChecks", "getInstance", "instance", "recordMetrics", "key", "hitRate", "responseTime", "bytesServed", "error", "timestamp", "Date", "now", "keyMetrics", "get", "lastMetric", "length", "totalRequests", "totalHits", "totalMisses", "errors", "metric", "missRate", "avgResponseTime", "bytesStored", "evictions", "push", "splice", "set", "persistMetrics", "checkAlerts", "getCurrentMetrics", "current", "forEach", "getHistoricalMetrics", "startTime", "endTime", "filter", "getStrategyMetrics", "strategyMetrics", "advancedCacheStrategyManager", "getAllMetrics", "Object", "entries", "map", "strategy", "successRate", "hits", "errorRate", "lastUsed", "lastUpdated", "getLayerMetrics", "layerMetrics", "multiLayerCacheManager", "layerHealth", "getLayerHealth", "layer", "health", "avgLatency", "entriesCount", "healthStatus", "healthy", "lastCheck", "analyzeTrends", "period", "periodMs", "getPeriodMs", "allMetrics", "periodMetrics", "m", "getEmptyTrendAnalysis", "midPoint", "firstHalf", "secondHalf", "firstHalfAvg", "calculateAverageMetrics", "secondHalfAvg", "hitRateTrend", "calculateTrend", "responseTrend", "volumeTrend", "errorTrend", "predictions", "generatePredictions", "generateReport", "start", "end", "summary", "calculateSummary", "strategies", "layers", "trends", "Array", "from", "values", "alert", "recommendations", "generateRecommendations", "topKeys", "getTopKeys", "configureAlerts", "config", "logger", "info", "LogCategory", "CACHE", "getActiveAlerts", "resolved", "resolveAlert", "alertId", "resolvedAt", "cleanupOldMetrics", "maxAge", "cutoff", "filtered", "oldAlerts", "_", "id", "delete", "setInterval", "performHealthCheck", "createAlert", "currentMetrics", "checkMetricThresholds", "toFixed", "threshold", "redisKey", "setex", "JSON", "stringify", "type", "severity", "message", "details", "alertKey", "lastAlert", "Math", "random", "toString", "substr", "warn", "sum", "reduce", "acc", "max", "count", "oldValue", "newValue", "recent", "slice", "avgHitRate", "avgVolume", "nextHourHitRate", "min", "nextDayVolume", "recommendedActions", "generatePredictionActions", "volume", "actions", "totalErrors", "dataTransferred", "latest", "avgMetrics", "unhealthyLayers", "l", "join", "limit", "keyStats", "misses", "sort", "a", "b", "destroy", "clearInterval", "recordHit", "recordMiss", "recordError", "getQuickSummary", "totalKeys", "keys", "activeAlerts", "healthyLayers"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f976d261e52cce17f127480b450272c79fb2814d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_mzr50xe94 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_mzr50xe94();
cov_mzr50xe94().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_mzr50xe94().f[0]++;
  cov_mzr50xe94().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_mzr50xe94().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_mzr50xe94().s[3]++;
_export(exports, {
  get CacheAnalyticsManager() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[1]++;
    cov_mzr50xe94().s[4]++;
    return CacheAnalyticsManager;
  },
  get CacheAnalyticsUtils() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[2]++;
    cov_mzr50xe94().s[5]++;
    return CacheAnalyticsUtils;
  },
  get DEFAULT_ALERT_CONFIG() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[3]++;
    cov_mzr50xe94().s[6]++;
    return DEFAULT_ALERT_CONFIG;
  },
  get cacheAnalyticsManager() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[4]++;
    cov_mzr50xe94().s[7]++;
    return cacheAnalyticsManager;
  }
});
const _logger =
/* istanbul ignore next */
(cov_mzr50xe94().s[8]++, require("../enterprise/logger"));
const _redis =
/* istanbul ignore next */
(cov_mzr50xe94().s[9]++, require("../integrations/redis"));
const _multilayercachemanager =
/* istanbul ignore next */
(cov_mzr50xe94().s[10]++, require("./multi-layer-cache-manager"));
const _advancedcachestrategymanager =
/* istanbul ignore next */
(cov_mzr50xe94().s[11]++, require("./advanced-cache-strategy-manager"));
const DEFAULT_ALERT_CONFIG =
/* istanbul ignore next */
(cov_mzr50xe94().s[12]++, {
  hitRateThreshold: 0.8,
  responseTimeThreshold: 100,
  errorRateThreshold: 0.05,
  capacityThreshold: 0.85,
  healthCheckInterval: 60000,
  alertCooldown: 300000 // 5 minutos
});
class CacheAnalyticsManager {
  constructor() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[5]++;
    cov_mzr50xe94().s[13]++;
    this.redis = (0, _redis.getRedisClient)();
    /* istanbul ignore next */
    cov_mzr50xe94().s[14]++;
    this.metrics = new Map();
    /* istanbul ignore next */
    cov_mzr50xe94().s[15]++;
    this.alerts = new Map();
    /* istanbul ignore next */
    cov_mzr50xe94().s[16]++;
    this.alertConfig = DEFAULT_ALERT_CONFIG;
    /* istanbul ignore next */
    cov_mzr50xe94().s[17]++;
    this.lastAlertTime = new Map();
    /* istanbul ignore next */
    cov_mzr50xe94().s[18]++;
    this.initializeHealthChecks();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[6]++;
    cov_mzr50xe94().s[19]++;
    if (!CacheAnalyticsManager.instance) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[0][0]++;
      cov_mzr50xe94().s[20]++;
      CacheAnalyticsManager.instance = new CacheAnalyticsManager();
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[0][1]++;
    }
    cov_mzr50xe94().s[21]++;
    return CacheAnalyticsManager.instance;
  }
  /**
  * Registra métricas de performance
  */
  async recordMetrics(key, hitRate, responseTime, bytesServed =
  /* istanbul ignore next */
  (cov_mzr50xe94().b[1][0]++, 0), error =
  /* istanbul ignore next */
  (cov_mzr50xe94().b[2][0]++, false)) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[7]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[22]++, Date.now());
    const keyMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[23]++,
    /* istanbul ignore next */
    (cov_mzr50xe94().b[3][0]++, this.metrics.get(key)) ||
    /* istanbul ignore next */
    (cov_mzr50xe94().b[3][1]++, []));
    // Obtener métricas anteriores para calcular totales
    const lastMetric =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[24]++, keyMetrics[keyMetrics.length - 1]);
    const totalRequests =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[25]++, (
    /* istanbul ignore next */
    (cov_mzr50xe94().b[4][0]++, lastMetric?.totalRequests) ||
    /* istanbul ignore next */
    (cov_mzr50xe94().b[4][1]++, 0)) + 1);
    const totalHits =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[26]++, (
    /* istanbul ignore next */
    (cov_mzr50xe94().b[5][0]++, lastMetric?.totalHits) ||
    /* istanbul ignore next */
    (cov_mzr50xe94().b[5][1]++, 0)) + (hitRate > 0 ?
    /* istanbul ignore next */
    (cov_mzr50xe94().b[6][0]++, 1) :
    /* istanbul ignore next */
    (cov_mzr50xe94().b[6][1]++, 0)));
    const totalMisses =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[27]++, (
    /* istanbul ignore next */
    (cov_mzr50xe94().b[7][0]++, lastMetric?.totalMisses) ||
    /* istanbul ignore next */
    (cov_mzr50xe94().b[7][1]++, 0)) + (hitRate === 0 ?
    /* istanbul ignore next */
    (cov_mzr50xe94().b[8][0]++, 1) :
    /* istanbul ignore next */
    (cov_mzr50xe94().b[8][1]++, 0)));
    const errors =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[28]++, (
    /* istanbul ignore next */
    (cov_mzr50xe94().b[9][0]++, lastMetric?.errors) ||
    /* istanbul ignore next */
    (cov_mzr50xe94().b[9][1]++, 0)) + (error ?
    /* istanbul ignore next */
    (cov_mzr50xe94().b[10][0]++, 1) :
    /* istanbul ignore next */
    (cov_mzr50xe94().b[10][1]++, 0)));
    const metric =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[29]++, {
      hitRate,
      missRate: 1 - hitRate,
      avgResponseTime: responseTime,
      totalRequests,
      totalHits,
      totalMisses,
      bytesServed: (
      /* istanbul ignore next */
      (cov_mzr50xe94().b[11][0]++, lastMetric?.bytesServed) ||
      /* istanbul ignore next */
      (cov_mzr50xe94().b[11][1]++, 0)) + bytesServed,
      bytesStored:
      /* istanbul ignore next */
      (cov_mzr50xe94().b[12][0]++, lastMetric?.bytesStored) ||
      /* istanbul ignore next */
      (cov_mzr50xe94().b[12][1]++, 0),
      evictions:
      /* istanbul ignore next */
      (cov_mzr50xe94().b[13][0]++, lastMetric?.evictions) ||
      /* istanbul ignore next */
      (cov_mzr50xe94().b[13][1]++, 0),
      errors,
      timestamp
    });
    /* istanbul ignore next */
    cov_mzr50xe94().s[30]++;
    keyMetrics.push(metric);
    // Mantener solo las últimas 1000 métricas por key
    /* istanbul ignore next */
    cov_mzr50xe94().s[31]++;
    if (keyMetrics.length > 1000) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[14][0]++;
      cov_mzr50xe94().s[32]++;
      keyMetrics.splice(0, keyMetrics.length - 1000);
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[14][1]++;
    }
    cov_mzr50xe94().s[33]++;
    this.metrics.set(key, keyMetrics);
    // Persistir en Redis para análisis histórico
    /* istanbul ignore next */
    cov_mzr50xe94().s[34]++;
    await this.persistMetrics(key, metric);
    // Verificar alertas
    /* istanbul ignore next */
    cov_mzr50xe94().s[35]++;
    await this.checkAlerts(key, metric);
  }
  /**
  * Obtiene métricas actuales
  */
  getCurrentMetrics() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[8]++;
    const current =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[36]++, {});
    /* istanbul ignore next */
    cov_mzr50xe94().s[37]++;
    this.metrics.forEach((metrics, key) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[9]++;
      cov_mzr50xe94().s[38]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_mzr50xe94().b[15][0]++;
        cov_mzr50xe94().s[39]++;
        current[key] = metrics[metrics.length - 1];
      } else
      /* istanbul ignore next */
      {
        cov_mzr50xe94().b[15][1]++;
      }
    });
    /* istanbul ignore next */
    cov_mzr50xe94().s[40]++;
    return current;
  }
  /**
  * Obtiene métricas históricas
  */
  getHistoricalMetrics(key, startTime, endTime) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[10]++;
    const keyMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[41]++,
    /* istanbul ignore next */
    (cov_mzr50xe94().b[16][0]++, this.metrics.get(key)) ||
    /* istanbul ignore next */
    (cov_mzr50xe94().b[16][1]++, []));
    /* istanbul ignore next */
    cov_mzr50xe94().s[42]++;
    return keyMetrics.filter(metric => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[11]++;
      cov_mzr50xe94().s[43]++;
      return /* istanbul ignore next */(cov_mzr50xe94().b[17][0]++, metric.timestamp >= startTime) &&
      /* istanbul ignore next */
      (cov_mzr50xe94().b[17][1]++, metric.timestamp <= endTime);
    });
  }
  /**
  * Obtiene métricas por estrategia
  */
  getStrategyMetrics() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[12]++;
    const strategyMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[44]++, _advancedcachestrategymanager.advancedCacheStrategyManager.getAllMetrics());
    /* istanbul ignore next */
    cov_mzr50xe94().s[45]++;
    return Object.entries(strategyMetrics).map(([strategy, metrics]) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[13]++;
      cov_mzr50xe94().s[46]++;
      return {
        strategy,
        hitRate: metrics.hitRate,
        avgResponseTime: metrics.avgResponseTime,
        totalRequests: metrics.totalRequests,
        successRate: metrics.hits / metrics.totalRequests,
        errorRate: (metrics.totalRequests - metrics.hits) / metrics.totalRequests,
        lastUsed: metrics.lastUpdated
      };
    });
  }
  /**
  * Obtiene métricas por capa
  */
  getLayerMetrics() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[14]++;
    const layerMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[47]++, _multilayercachemanager.multiLayerCacheManager.getLayerMetrics());
    const layerHealth =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[48]++, _multilayercachemanager.multiLayerCacheManager.getLayerHealth());
    /* istanbul ignore next */
    cov_mzr50xe94().s[49]++;
    return Object.entries(layerMetrics).map(([layer, metrics]) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[15]++;
      const health =
      /* istanbul ignore next */
      (cov_mzr50xe94().s[50]++, layerHealth[layer]);
      /* istanbul ignore next */
      cov_mzr50xe94().s[51]++;
      return {
        layer,
        hitRate: metrics.hitRate,
        avgLatency: metrics.avgLatency,
        totalRequests: metrics.totalRequests,
        bytesStored: metrics.bytesStored,
        entriesCount: metrics.entriesCount,
        healthStatus: health?.healthy ?
        /* istanbul ignore next */
        (cov_mzr50xe94().b[18][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_mzr50xe94().b[18][1]++, 'unhealthy'),
        lastCheck:
        /* istanbul ignore next */
        (cov_mzr50xe94().b[19][0]++, health?.lastCheck) ||
        /* istanbul ignore next */
        (cov_mzr50xe94().b[19][1]++, 0)
      };
    });
  }
  /**
  * Analiza tendencias
  */
  async analyzeTrends(period) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[16]++;
    const now =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[52]++, Date.now());
    const periodMs =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[53]++, this.getPeriodMs(period));
    const startTime =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[54]++, now - periodMs);
    // Obtener métricas del período
    const allMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[55]++, []);
    /* istanbul ignore next */
    cov_mzr50xe94().s[56]++;
    this.metrics.forEach(metrics => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[17]++;
      const periodMetrics =
      /* istanbul ignore next */
      (cov_mzr50xe94().s[57]++, metrics.filter(m => {
        /* istanbul ignore next */
        cov_mzr50xe94().f[18]++;
        cov_mzr50xe94().s[58]++;
        return /* istanbul ignore next */(cov_mzr50xe94().b[20][0]++, m.timestamp >= startTime) &&
        /* istanbul ignore next */
        (cov_mzr50xe94().b[20][1]++, m.timestamp <= now);
      }));
      /* istanbul ignore next */
      cov_mzr50xe94().s[59]++;
      allMetrics.push(...periodMetrics);
    });
    /* istanbul ignore next */
    cov_mzr50xe94().s[60]++;
    if (allMetrics.length === 0) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[21][0]++;
      cov_mzr50xe94().s[61]++;
      return this.getEmptyTrendAnalysis(period);
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[21][1]++;
    }
    // Calcular tendencias
    const midPoint =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[62]++, startTime + periodMs / 2);
    const firstHalf =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[63]++, allMetrics.filter(m => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[19]++;
      cov_mzr50xe94().s[64]++;
      return m.timestamp <= midPoint;
    }));
    const secondHalf =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[65]++, allMetrics.filter(m => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[20]++;
      cov_mzr50xe94().s[66]++;
      return m.timestamp > midPoint;
    }));
    const firstHalfAvg =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[67]++, this.calculateAverageMetrics(firstHalf));
    const secondHalfAvg =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[68]++, this.calculateAverageMetrics(secondHalf));
    const hitRateTrend =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[69]++, this.calculateTrend(firstHalfAvg.hitRate, secondHalfAvg.hitRate));
    const responseTrend =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[70]++, this.calculateTrend(firstHalfAvg.avgResponseTime, secondHalfAvg.avgResponseTime));
    const volumeTrend =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[71]++, this.calculateTrend(firstHalf.length, secondHalf.length));
    const errorTrend =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[72]++, this.calculateTrend(firstHalfAvg.errors, secondHalfAvg.errors));
    // Generar predicciones
    const predictions =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[73]++, await this.generatePredictions(allMetrics));
    /* istanbul ignore next */
    cov_mzr50xe94().s[74]++;
    return {
      period,
      hitRateTrend,
      responseTrend,
      volumeTrend,
      errorTrend,
      predictions
    };
  }
  /**
  * Genera reporte comprehensivo
  */
  async generateReport(startTime, endTime) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[21]++;
    const period =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[75]++, {
      start: startTime,
      end: endTime
    });
    // Recopilar todas las métricas del período
    const allMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[76]++, []);
    /* istanbul ignore next */
    cov_mzr50xe94().s[77]++;
    this.metrics.forEach(metrics => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[22]++;
      const periodMetrics =
      /* istanbul ignore next */
      (cov_mzr50xe94().s[78]++, metrics.filter(m => {
        /* istanbul ignore next */
        cov_mzr50xe94().f[23]++;
        cov_mzr50xe94().s[79]++;
        return /* istanbul ignore next */(cov_mzr50xe94().b[22][0]++, m.timestamp >= startTime) &&
        /* istanbul ignore next */
        (cov_mzr50xe94().b[22][1]++, m.timestamp <= endTime);
      }));
      /* istanbul ignore next */
      cov_mzr50xe94().s[80]++;
      allMetrics.push(...periodMetrics);
    });
    // Calcular resumen
    const summary =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[81]++, this.calculateSummary(allMetrics));
    // Obtener métricas por estrategia y capa
    const strategies =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[82]++, this.getStrategyMetrics());
    const layers =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[83]++, this.getLayerMetrics());
    // Analizar tendencias
    const trends =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[84]++, await this.analyzeTrends('day'));
    // Obtener alertas del período
    const alerts =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[85]++, Array.from(this.alerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[24]++;
      cov_mzr50xe94().s[86]++;
      return /* istanbul ignore next */(cov_mzr50xe94().b[23][0]++, alert.timestamp >= startTime) &&
      /* istanbul ignore next */
      (cov_mzr50xe94().b[23][1]++, alert.timestamp <= endTime);
    }));
    // Generar recomendaciones
    const recommendations =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[87]++, this.generateRecommendations(summary, strategies, layers, trends));
    // Obtener top keys
    const topKeys =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[88]++, this.getTopKeys(10));
    /* istanbul ignore next */
    cov_mzr50xe94().s[89]++;
    return {
      period,
      summary,
      strategies,
      layers,
      trends,
      alerts,
      recommendations,
      topKeys
    };
  }
  /**
  * Configura alertas
  */
  configureAlerts(config) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[25]++;
    cov_mzr50xe94().s[90]++;
    this.alertConfig = {
      ...this.alertConfig,
      ...config
    };
    /* istanbul ignore next */
    cov_mzr50xe94().s[91]++;
    _logger.logger.info(_logger.LogCategory.CACHE, 'Configuración de alertas actualizada');
  }
  /**
  * Obtiene alertas activas
  */
  getActiveAlerts() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[26]++;
    cov_mzr50xe94().s[92]++;
    return Array.from(this.alerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[27]++;
      cov_mzr50xe94().s[93]++;
      return !alert.resolved;
    });
  }
  /**
  * Resuelve una alerta
  */
  resolveAlert(alertId) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[28]++;
    const alert =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[94]++, this.alerts.get(alertId));
    /* istanbul ignore next */
    cov_mzr50xe94().s[95]++;
    if (
    /* istanbul ignore next */
    (cov_mzr50xe94().b[25][0]++, alert) &&
    /* istanbul ignore next */
    (cov_mzr50xe94().b[25][1]++, !alert.resolved)) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[24][0]++;
      cov_mzr50xe94().s[96]++;
      alert.resolved = true;
      /* istanbul ignore next */
      cov_mzr50xe94().s[97]++;
      alert.resolvedAt = Date.now();
      /* istanbul ignore next */
      cov_mzr50xe94().s[98]++;
      _logger.logger.info(_logger.LogCategory.CACHE, `Alerta resuelta: ${alertId}`);
      /* istanbul ignore next */
      cov_mzr50xe94().s[99]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[24][1]++;
    }
    cov_mzr50xe94().s[100]++;
    return false;
  }
  /**
  * Limpia métricas antiguas
  */
  async cleanupOldMetrics(maxAge =
  /* istanbul ignore next */
  (cov_mzr50xe94().b[26][0]++, 7 * 24 * 60 * 60 * 1000)) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[29]++;
    const cutoff =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[101]++, Date.now() - maxAge);
    /* istanbul ignore next */
    cov_mzr50xe94().s[102]++;
    this.metrics.forEach((metrics, key) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[30]++;
      const filtered =
      /* istanbul ignore next */
      (cov_mzr50xe94().s[103]++, metrics.filter(metric => {
        /* istanbul ignore next */
        cov_mzr50xe94().f[31]++;
        cov_mzr50xe94().s[104]++;
        return metric.timestamp > cutoff;
      }));
      /* istanbul ignore next */
      cov_mzr50xe94().s[105]++;
      if (filtered.length !== metrics.length) {
        /* istanbul ignore next */
        cov_mzr50xe94().b[27][0]++;
        cov_mzr50xe94().s[106]++;
        this.metrics.set(key, filtered);
      } else
      /* istanbul ignore next */
      {
        cov_mzr50xe94().b[27][1]++;
      }
    });
    // Limpiar alertas resueltas antiguas
    const oldAlerts =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[107]++, Array.from(this.alerts.entries()).filter(([_, alert]) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[32]++;
      cov_mzr50xe94().s[108]++;
      return /* istanbul ignore next */(cov_mzr50xe94().b[28][0]++, alert.resolved) &&
      /* istanbul ignore next */
      (cov_mzr50xe94().b[28][1]++, (
      /* istanbul ignore next */
      (cov_mzr50xe94().b[29][0]++, alert.resolvedAt) ||
      /* istanbul ignore next */
      (cov_mzr50xe94().b[29][1]++, 0)) < cutoff);
    }));
    /* istanbul ignore next */
    cov_mzr50xe94().s[109]++;
    oldAlerts.forEach(([id, _]) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[33]++;
      cov_mzr50xe94().s[110]++;
      this.alerts.delete(id);
    });
    /* istanbul ignore next */
    cov_mzr50xe94().s[111]++;
    _logger.logger.info(_logger.LogCategory.CACHE, `Limpieza completada: ${oldAlerts.length} alertas antiguas eliminadas`);
  }
  // ===================================
  // MÉTODOS PRIVADOS
  // ===================================
  /**
  * Inicializa health checks
  */
  initializeHealthChecks() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[34]++;
    cov_mzr50xe94().s[112]++;
    this.healthCheckInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[35]++;
      cov_mzr50xe94().s[113]++;
      this.performHealthCheck();
    }, this.alertConfig.healthCheckInterval);
  }
  /**
  * Realiza health check
  */
  async performHealthCheck() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[36]++;
    cov_mzr50xe94().s[114]++;
    try {
      // Verificar estado de las capas
      const layerHealth =
      /* istanbul ignore next */
      (cov_mzr50xe94().s[115]++, _multilayercachemanager.multiLayerCacheManager.getLayerHealth());
      /* istanbul ignore next */
      cov_mzr50xe94().s[116]++;
      Object.entries(layerHealth).forEach(([layer, health]) => {
        /* istanbul ignore next */
        cov_mzr50xe94().f[37]++;
        cov_mzr50xe94().s[117]++;
        if (!health.healthy) {
          /* istanbul ignore next */
          cov_mzr50xe94().b[30][0]++;
          cov_mzr50xe94().s[118]++;
          this.createAlert('health', 'high', `Capa de cache no saludable: ${layer}`, {
            layer,
            errors: health.errors
          });
        } else
        /* istanbul ignore next */
        {
          cov_mzr50xe94().b[30][1]++;
        }
      });
      // Verificar métricas generales
      const currentMetrics =
      /* istanbul ignore next */
      (cov_mzr50xe94().s[119]++, this.getCurrentMetrics());
      /* istanbul ignore next */
      cov_mzr50xe94().s[120]++;
      Object.entries(currentMetrics).forEach(([key, metrics]) => {
        /* istanbul ignore next */
        cov_mzr50xe94().f[38]++;
        cov_mzr50xe94().s[121]++;
        this.checkMetricThresholds(key, metrics);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_mzr50xe94().s[122]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error en health check', error);
    }
  }
  /**
  * Verifica umbrales de métricas
  */
  checkMetricThresholds(key, metrics) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[39]++;
    cov_mzr50xe94().s[123]++;
    // Verificar hit rate
    if (metrics.hitRate < this.alertConfig.hitRateThreshold) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[31][0]++;
      cov_mzr50xe94().s[124]++;
      this.createAlert('performance', 'medium', `Hit rate bajo para ${key}: ${(metrics.hitRate * 100).toFixed(1)}%`, {
        key,
        hitRate: metrics.hitRate,
        threshold: this.alertConfig.hitRateThreshold
      });
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[31][1]++;
    }
    // Verificar response time
    cov_mzr50xe94().s[125]++;
    if (metrics.avgResponseTime > this.alertConfig.responseTimeThreshold) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[32][0]++;
      cov_mzr50xe94().s[126]++;
      this.createAlert('performance', 'medium', `Tiempo de respuesta alto para ${key}: ${metrics.avgResponseTime}ms`, {
        key,
        responseTime: metrics.avgResponseTime,
        threshold: this.alertConfig.responseTimeThreshold
      });
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[32][1]++;
    }
    // Verificar error rate
    const errorRate =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[127]++, metrics.errors / metrics.totalRequests);
    /* istanbul ignore next */
    cov_mzr50xe94().s[128]++;
    if (errorRate > this.alertConfig.errorRateThreshold) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[33][0]++;
      cov_mzr50xe94().s[129]++;
      this.createAlert('error', 'high', `Tasa de errores alta para ${key}: ${(errorRate * 100).toFixed(1)}%`, {
        key,
        errorRate,
        threshold: this.alertConfig.errorRateThreshold
      });
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[33][1]++;
    }
  }
  /**
  * Persiste métricas en Redis
  */
  async persistMetrics(key, metric) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[40]++;
    cov_mzr50xe94().s[130]++;
    try {
      const redisKey =
      /* istanbul ignore next */
      (cov_mzr50xe94().s[131]++, `cache_metrics:${key}:${Date.now()}`);
      /* istanbul ignore next */
      cov_mzr50xe94().s[132]++;
      await this.redis.setex(redisKey, 86400 * 7, JSON.stringify(metric)); // 7 días
    } catch (error) {
      /* istanbul ignore next */
      cov_mzr50xe94().s[133]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error persistiendo métricas', error);
    }
  }
  /**
  * Verifica alertas
  */
  async checkAlerts(key, metric) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[41]++;
    cov_mzr50xe94().s[134]++;
    this.checkMetricThresholds(key, metric);
  }
  /**
  * Crea una alerta
  */
  createAlert(type, severity, message, details) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[42]++;
    const alertKey =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[135]++, `${type}_${severity}_${message}`);
    const lastAlert =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[136]++, this.lastAlertTime.get(alertKey));
    const now =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[137]++, Date.now());
    // Verificar cooldown
    /* istanbul ignore next */
    cov_mzr50xe94().s[138]++;
    if (
    /* istanbul ignore next */
    (cov_mzr50xe94().b[35][0]++, lastAlert) &&
    /* istanbul ignore next */
    (cov_mzr50xe94().b[35][1]++, now - lastAlert < this.alertConfig.alertCooldown)) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[34][0]++;
      cov_mzr50xe94().s[139]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[34][1]++;
    }
    const alert =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[140]++, {
      id: `alert_${now}_${Math.random().toString(36).substr(2, 9)}`,
      type,
      severity,
      message,
      details,
      timestamp: now,
      resolved: false
    });
    /* istanbul ignore next */
    cov_mzr50xe94().s[141]++;
    this.alerts.set(alert.id, alert);
    /* istanbul ignore next */
    cov_mzr50xe94().s[142]++;
    this.lastAlertTime.set(alertKey, now);
    /* istanbul ignore next */
    cov_mzr50xe94().s[143]++;
    _logger.logger.warn(_logger.LogCategory.CACHE, `Alerta de cache: ${message}`, details);
  }
  /**
  * Obtiene duración del período en ms
  */
  getPeriodMs(period) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[43]++;
    cov_mzr50xe94().s[144]++;
    switch (period) {
      case 'hour':
        /* istanbul ignore next */
        cov_mzr50xe94().b[36][0]++;
        cov_mzr50xe94().s[145]++;
        return 60 * 60 * 1000;
      case 'day':
        /* istanbul ignore next */
        cov_mzr50xe94().b[36][1]++;
        cov_mzr50xe94().s[146]++;
        return 24 * 60 * 60 * 1000;
      case 'week':
        /* istanbul ignore next */
        cov_mzr50xe94().b[36][2]++;
        cov_mzr50xe94().s[147]++;
        return 7 * 24 * 60 * 60 * 1000;
      case 'month':
        /* istanbul ignore next */
        cov_mzr50xe94().b[36][3]++;
        cov_mzr50xe94().s[148]++;
        return 30 * 24 * 60 * 60 * 1000;
    }
  }
  /**
  * Calcula métricas promedio
  */
  calculateAverageMetrics(metrics) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[44]++;
    cov_mzr50xe94().s[149]++;
    if (metrics.length === 0) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[37][0]++;
      cov_mzr50xe94().s[150]++;
      return {
        hitRate: 0,
        missRate: 0,
        avgResponseTime: 0,
        totalRequests: 0,
        totalHits: 0,
        totalMisses: 0,
        bytesServed: 0,
        bytesStored: 0,
        evictions: 0,
        errors: 0,
        timestamp: Date.now()
      };
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[37][1]++;
    }
    const sum =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[151]++, metrics.reduce((acc, metric) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[45]++;
      cov_mzr50xe94().s[152]++;
      return {
        hitRate: acc.hitRate + metric.hitRate,
        missRate: acc.missRate + metric.missRate,
        avgResponseTime: acc.avgResponseTime + metric.avgResponseTime,
        totalRequests: acc.totalRequests + metric.totalRequests,
        totalHits: acc.totalHits + metric.totalHits,
        totalMisses: acc.totalMisses + metric.totalMisses,
        bytesServed: acc.bytesServed + metric.bytesServed,
        bytesStored: acc.bytesStored + metric.bytesStored,
        evictions: acc.evictions + metric.evictions,
        errors: acc.errors + metric.errors,
        timestamp: Math.max(acc.timestamp, metric.timestamp)
      };
    }));
    const count =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[153]++, metrics.length);
    /* istanbul ignore next */
    cov_mzr50xe94().s[154]++;
    return {
      hitRate: sum.hitRate / count,
      missRate: sum.missRate / count,
      avgResponseTime: sum.avgResponseTime / count,
      totalRequests: sum.totalRequests,
      totalHits: sum.totalHits,
      totalMisses: sum.totalMisses,
      bytesServed: sum.bytesServed,
      bytesStored: sum.bytesStored,
      evictions: sum.evictions,
      errors: sum.errors,
      timestamp: sum.timestamp
    };
  }
  /**
  * Calcula tendencia porcentual
  */
  calculateTrend(oldValue, newValue) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[46]++;
    cov_mzr50xe94().s[155]++;
    if (oldValue === 0) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[38][0]++;
      cov_mzr50xe94().s[156]++;
      return newValue > 0 ?
      /* istanbul ignore next */
      (cov_mzr50xe94().b[39][0]++, 100) :
      /* istanbul ignore next */
      (cov_mzr50xe94().b[39][1]++, 0);
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[38][1]++;
    }
    cov_mzr50xe94().s[157]++;
    return (newValue - oldValue) / oldValue * 100;
  }
  /**
  * Genera predicciones
  */
  async generatePredictions(metrics) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[47]++;
    // Implementación simplificada de predicciones
    const recent =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[158]++, metrics.slice(-10));
    const avgHitRate =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[159]++, recent.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[48]++;
      cov_mzr50xe94().s[160]++;
      return sum + m.hitRate;
    }, 0) / recent.length);
    const avgVolume =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[161]++, recent.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[49]++;
      cov_mzr50xe94().s[162]++;
      return sum + m.totalRequests;
    }, 0) / recent.length);
    /* istanbul ignore next */
    cov_mzr50xe94().s[163]++;
    return {
      nextHourHitRate: Math.min(1, avgHitRate * 1.02),
      nextDayVolume: avgVolume * 24,
      recommendedActions: this.generatePredictionActions(avgHitRate, avgVolume)
    };
  }
  /**
  * Genera acciones recomendadas basadas en predicciones
  */
  generatePredictionActions(hitRate, volume) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[50]++;
    const actions =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[164]++, []);
    /* istanbul ignore next */
    cov_mzr50xe94().s[165]++;
    if (hitRate < 0.8) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[40][0]++;
      cov_mzr50xe94().s[166]++;
      actions.push('Considerar aumentar TTL de cache');
      /* istanbul ignore next */
      cov_mzr50xe94().s[167]++;
      actions.push('Revisar estrategias de invalidación');
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[40][1]++;
    }
    cov_mzr50xe94().s[168]++;
    if (volume > 1000) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[41][0]++;
      cov_mzr50xe94().s[169]++;
      actions.push('Considerar escalado horizontal');
      /* istanbul ignore next */
      cov_mzr50xe94().s[170]++;
      actions.push('Optimizar queries más frecuentes');
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[41][1]++;
    }
    cov_mzr50xe94().s[171]++;
    return actions;
  }
  /**
  * Obtiene análisis de tendencias vacío
  */
  getEmptyTrendAnalysis(period) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[51]++;
    cov_mzr50xe94().s[172]++;
    return {
      period,
      hitRateTrend: 0,
      responseTrend: 0,
      volumeTrend: 0,
      errorTrend: 0,
      predictions: {
        nextHourHitRate: 0,
        nextDayVolume: 0,
        recommendedActions: []
      }
    };
  }
  /**
  * Calcula resumen de métricas
  */
  calculateSummary(metrics) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[52]++;
    cov_mzr50xe94().s[173]++;
    if (metrics.length === 0) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[42][0]++;
      cov_mzr50xe94().s[174]++;
      return {
        totalRequests: 0,
        avgHitRate: 0,
        avgResponseTime: 0,
        totalErrors: 0,
        dataTransferred: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[42][1]++;
    }
    const latest =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[175]++, metrics[metrics.length - 1]);
    const avgMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[176]++, this.calculateAverageMetrics(metrics));
    /* istanbul ignore next */
    cov_mzr50xe94().s[177]++;
    return {
      totalRequests: latest.totalRequests,
      avgHitRate: avgMetrics.hitRate,
      avgResponseTime: avgMetrics.avgResponseTime,
      totalErrors: latest.errors,
      dataTransferred: latest.bytesServed
    };
  }
  /**
  * Genera recomendaciones
  */
  generateRecommendations(summary, strategies, layers, trends) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[53]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[178]++, []);
    // Recomendaciones basadas en hit rate
    /* istanbul ignore next */
    cov_mzr50xe94().s[179]++;
    if (summary.avgHitRate < 0.8) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[43][0]++;
      cov_mzr50xe94().s[180]++;
      recommendations.push('Hit rate bajo: considerar ajustar TTL o estrategias de cache');
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[43][1]++;
    }
    // Recomendaciones basadas en response time
    cov_mzr50xe94().s[181]++;
    if (summary.avgResponseTime > 100) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[44][0]++;
      cov_mzr50xe94().s[182]++;
      recommendations.push('Tiempo de respuesta alto: optimizar queries o aumentar capacidad');
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[44][1]++;
    }
    // Recomendaciones basadas en tendencias
    cov_mzr50xe94().s[183]++;
    if (trends.hitRateTrend < -10) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[45][0]++;
      cov_mzr50xe94().s[184]++;
      recommendations.push('Hit rate en declive: revisar patrones de invalidación');
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[45][1]++;
    }
    cov_mzr50xe94().s[185]++;
    if (trends.volumeTrend > 50) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[46][0]++;
      cov_mzr50xe94().s[186]++;
      recommendations.push('Volumen creciente: considerar escalado de infraestructura');
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[46][1]++;
    }
    // Recomendaciones basadas en capas
    const unhealthyLayers =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[187]++, layers.filter(l => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[54]++;
      cov_mzr50xe94().s[188]++;
      return l.healthStatus !== 'healthy';
    }));
    /* istanbul ignore next */
    cov_mzr50xe94().s[189]++;
    if (unhealthyLayers.length > 0) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[47][0]++;
      cov_mzr50xe94().s[190]++;
      recommendations.push(`Capas no saludables: ${unhealthyLayers.map(l => {
        /* istanbul ignore next */
        cov_mzr50xe94().f[55]++;
        cov_mzr50xe94().s[191]++;
        return l.layer;
      }).join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[47][1]++;
    }
    cov_mzr50xe94().s[192]++;
    return recommendations;
  }
  /**
  * Obtiene top keys por actividad
  */
  getTopKeys(limit) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[56]++;
    const keyStats =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[193]++, []);
    /* istanbul ignore next */
    cov_mzr50xe94().s[194]++;
    this.metrics.forEach((metrics, key) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[57]++;
      cov_mzr50xe94().s[195]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_mzr50xe94().b[48][0]++;
        const latest =
        /* istanbul ignore next */
        (cov_mzr50xe94().s[196]++, metrics[metrics.length - 1]);
        /* istanbul ignore next */
        cov_mzr50xe94().s[197]++;
        keyStats.push({
          key,
          hits: latest.totalHits,
          misses: latest.totalMisses
        });
      } else
      /* istanbul ignore next */
      {
        cov_mzr50xe94().b[48][1]++;
      }
    });
    /* istanbul ignore next */
    cov_mzr50xe94().s[198]++;
    return keyStats.sort((a, b) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[58]++;
      cov_mzr50xe94().s[199]++;
      return b.hits + b.misses - (a.hits + a.misses);
    }).slice(0, limit);
  }
  /**
  * Destructor
  */
  destroy() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[59]++;
    cov_mzr50xe94().s[200]++;
    if (this.healthCheckInterval) {
      /* istanbul ignore next */
      cov_mzr50xe94().b[49][0]++;
      cov_mzr50xe94().s[201]++;
      clearInterval(this.healthCheckInterval);
    } else
    /* istanbul ignore next */
    {
      cov_mzr50xe94().b[49][1]++;
    }
  }
}
const cacheAnalyticsManager =
/* istanbul ignore next */
(cov_mzr50xe94().s[202]++, CacheAnalyticsManager.getInstance());
const CacheAnalyticsUtils =
/* istanbul ignore next */
(cov_mzr50xe94().s[203]++, {
  /**
  * Registra hit de cache
  */
  async recordHit(key, responseTime, bytesServed =
  /* istanbul ignore next */
  (cov_mzr50xe94().b[50][0]++, 0)) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[60]++;
    cov_mzr50xe94().s[204]++;
    await cacheAnalyticsManager.recordMetrics(key, 1, responseTime, bytesServed, false);
  },
  /**
  * Registra miss de cache
  */
  async recordMiss(key, responseTime) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[61]++;
    cov_mzr50xe94().s[205]++;
    await cacheAnalyticsManager.recordMetrics(key, 0, responseTime, 0, false);
  },
  /**
  * Registra error de cache
  */
  async recordError(key, responseTime) {
    /* istanbul ignore next */
    cov_mzr50xe94().f[62]++;
    cov_mzr50xe94().s[206]++;
    await cacheAnalyticsManager.recordMetrics(key, 0, responseTime, 0, true);
  },
  /**
  * Obtiene resumen rápido
  */
  getQuickSummary() {
    /* istanbul ignore next */
    cov_mzr50xe94().f[63]++;
    const currentMetrics =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[207]++, cacheAnalyticsManager.getCurrentMetrics());
    const alerts =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[208]++, cacheAnalyticsManager.getActiveAlerts());
    const layers =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[209]++, cacheAnalyticsManager.getLayerMetrics());
    const totalKeys =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[210]++, Object.keys(currentMetrics).length);
    const avgHitRate =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[211]++,
    /* istanbul ignore next */
    (cov_mzr50xe94().b[51][0]++, Object.values(currentMetrics).reduce((sum, m) => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[64]++;
      cov_mzr50xe94().s[212]++;
      return sum + m.hitRate;
    }, 0) / totalKeys) ||
    /* istanbul ignore next */
    (cov_mzr50xe94().b[51][1]++, 0));
    const activeAlerts =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[213]++, alerts.length);
    const healthyLayers =
    /* istanbul ignore next */
    (cov_mzr50xe94().s[214]++, layers.filter(l => {
      /* istanbul ignore next */
      cov_mzr50xe94().f[65]++;
      cov_mzr50xe94().s[215]++;
      return l.healthStatus === 'healthy';
    }).length);
    /* istanbul ignore next */
    cov_mzr50xe94().s[216]++;
    return {
      totalKeys,
      avgHitRate,
      activeAlerts,
      healthyLayers
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,