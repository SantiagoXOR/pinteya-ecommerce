{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\logger.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - LOGGER TESTS\n// ===================================\n\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger'\n\n// Mock console methods\nconst originalConsole = { ...console }\nbeforeEach(() => {\n  console.info = jest.fn()\n  console.warn = jest.fn()\n  console.error = jest.fn()\n  console.debug = jest.fn()\n})\n\nafterEach(() => {\n  Object.assign(console, originalConsole)\n})\n\ndescribe('StructuredLogger', () => {\n  it('should log payment events correctly', () => {\n    logger.payment(LogLevel.INFO, 'Test payment', {\n      orderId: '123',\n      paymentId: 'mp_123',\n      amount: 100,\n      currency: 'ARS',\n      status: 'approved',\n      method: 'mercadopago',\n    })\n\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('\"category\":\"payment\"'))\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('\"message\":\"Test payment\"'))\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('\"orderId\":\"123\"'))\n  })\n\n  it('should log webhook events correctly', () => {\n    logger.webhook(LogLevel.INFO, 'Test webhook', {\n      type: 'payment',\n      action: 'created',\n      dataId: 'mp_123',\n      isValid: true,\n      processingTime: 150,\n    })\n\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('\"category\":\"webhook\"'))\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('\"type\":\"payment\"'))\n  })\n\n  it('should log security events correctly', () => {\n    logger.security(LogLevel.WARN, 'Test security', {\n      threat: 'rate_limit',\n      blocked: true,\n      reason: 'Too many requests',\n    })\n\n    expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('\"category\":\"security\"'))\n    expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('\"threat\":\"rate_limit\"'))\n  })\n\n  it('should log performance events correctly', () => {\n    logger.performance(LogLevel.INFO, 'Test performance', {\n      operation: 'test-operation',\n      duration: 250,\n      endpoint: '/api/test',\n      statusCode: 200,\n    })\n\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('\"category\":\"performance\"'))\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('\"duration\":250'))\n  })\n\n  it('should log errors correctly', () => {\n    const testError = new Error('Test error')\n    logger.error(LogCategory.API, 'Test error message', testError)\n\n    expect(console.error).toHaveBeenCalledWith(expect.stringContaining('\"category\":\"api\"'))\n    expect(console.error).toHaveBeenCalledWith(\n      expect.stringContaining('\"message\":\"Test error message\"')\n    )\n    expect(console.error).toHaveBeenCalledWith(expect.stringContaining('\"name\":\"Error\"'))\n  })\n\n  it('should measure performance correctly', async () => {\n    const testFunction = jest.fn().mockResolvedValue('test result')\n\n    const result = await logger.measurePerformance('test-operation', testFunction)\n\n    expect(result).toBe('test result')\n    expect(testFunction).toHaveBeenCalled()\n    expect(console.info).toHaveBeenCalledWith(\n      expect.stringContaining('\"operation\":\"test-operation\"')\n    )\n  })\n\n  it('should handle sync functions in measurePerformance', () => {\n    const testFunction = jest.fn().mockReturnValue('sync result')\n\n    const result = logger.measurePerformance('sync-operation', testFunction)\n\n    expect(result).toBe('sync result')\n    expect(testFunction).toHaveBeenCalled()\n    expect(console.info).toHaveBeenCalledWith(\n      expect.stringContaining('\"operation\":\"sync-operation\"')\n    )\n  })\n\n  it('should handle errors in measurePerformance', async () => {\n    const testError = new Error('Test error')\n    const testFunction = jest.fn().mockRejectedValue(testError)\n\n    await expect(logger.measurePerformance('error-operation', testFunction)).rejects.toThrow(\n      'Test error'\n    )\n\n    expect(console.error).toHaveBeenCalledWith(\n      expect.stringContaining('\"operation\":\"error-operation\"')\n    )\n  })\n})\n"],"names":["originalConsole","console","beforeEach","info","jest","fn","warn","error","debug","afterEach","Object","assign","describe","it","logger","payment","LogLevel","INFO","orderId","paymentId","amount","currency","status","method","expect","toHaveBeenCalledWith","stringContaining","webhook","type","action","dataId","isValid","processingTime","security","WARN","threat","blocked","reason","performance","operation","duration","endpoint","statusCode","testError","Error","LogCategory","API","testFunction","mockResolvedValue","result","measurePerformance","toBe","toHaveBeenCalled","mockReturnValue","mockRejectedValue","rejects","toThrow"],"mappings":"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"}