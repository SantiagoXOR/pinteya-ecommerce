{"version":3,"names":["AlertLevel","cov_26uroqvlnl","f","s","AlertStatus","EnterpriseAlertSystem","NotificationType","acknowledgeAlert","enterpriseAlertSystem","resolveAlert","triggerAlert","CacheUtils","window","b","require","error","console","warn","constructor","alertRules","Map","notificationChannels","escalationRules","activeAlerts","escalationInterval","initializeDefaultChannels","initializeDefaultRules","startEscalationMonitoring","getInstance","instance","setNotificationChannel","channel","set","id","_logger","logger","info","LogLevel","INFO","type","enabled","levels","LogCategory","SYSTEM","setEscalationRule","rule","level","conditions","duration","setAlertRule","metricName","threshold","ruleId","value","message","get","existingAlert","Array","from","values","find","alert","status","cooldownEnd","Date","triggeredAt","setMinutes","getMinutes","cooldownMinutes","generateAlertId","ruleName","name","description","toISOString","notificationsSent","tags","metadata","sendNotifications","channels","storeAlert","WARN","alertId","userId","acknowledgedAt","acknowledgedBy","updateAlert","resolvedAt","resolvedBy","delete","calculateDuration","channelIds","notifications","Promise","allSettled","map","channelId","sendNotification","forEach","result","index","push","ERROR","reason","includes","rateLimit","checkRateLimit","startTime","now","success","sendEmailNotification","sendSlackNotification","sendWebhookNotification","sendSMSNotification","sendLogNotification","Error","err","notificationLog","generateNotificationId","channelType","sentAt","responseTime","checkEscalations","escalationRuleId","escalationRule","shouldEscalate","escalateAlert","alertAge","getTime","requiredDuration","escalatedAt","originalLevel","actions","escalateToLevel","escalatedFrom","notifyChannels","assignToUser","assignedTo","newLevel","subject","toUpperCase","emailData","to","config","template","data","timestamp","toLocaleString","priority","_email","emailService","alertData","title","severity","details","toString","_slack","slackService","sendSystemAlert","webhook","webhookUrl","url","response","fetch","method","headers","body","JSON","stringify","source","ok","statusText","phoneNumber","logLevel","log","process","env","ALERT_WEBHOOK_URL","maxPerHour","maxPerDay","setInterval","Math","random","substr","start","end","round","supabase","_supabase","getSupabaseClient","insert","rule_id","rule_name","metric_name","triggered_at","acknowledged_at","acknowledged_by","resolved_at","resolved_by","escalated_at","escalated_from","notifications_sent","update","eq","destroy","clearInterval","bind"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\alert-system.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE ALERT SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { emailService } from '@/lib/notifications/email';\r\nimport { slackService } from '@/lib/notifications/slack';\r\n\r\n// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente\r\nlet CacheUtils: any = null;\r\nif (typeof window === 'undefined') {\r\n  // Solo en servidor\r\n  try {\r\n    CacheUtils = require('@/lib/cache-manager').CacheUtils;\r\n  } catch (error) {\r\n    console.warn('[EnterpriseAlertSystem] CacheUtils not available:', error);\r\n  }\r\n}\r\n\r\n// Niveles de alerta con escalamiento\r\nexport enum AlertLevel {\r\n  INFO = 'info',\r\n  WARNING = 'warning', \r\n  CRITICAL = 'critical',\r\n  EMERGENCY = 'emergency'\r\n}\r\n\r\n// Tipos de notificación\r\nexport enum NotificationType {\r\n  EMAIL = 'email',\r\n  SLACK = 'slack',\r\n  WEBHOOK = 'webhook',\r\n  SMS = 'sms',\r\n  PUSH = 'push',\r\n  LOG = 'log'\r\n}\r\n\r\n// Estados de alerta\r\nexport enum AlertStatus {\r\n  ACTIVE = 'active',\r\n  ACKNOWLEDGED = 'acknowledged',\r\n  RESOLVED = 'resolved',\r\n  SUPPRESSED = 'suppressed'\r\n}\r\n\r\n// Configuración de canal de notificación\r\nexport interface NotificationChannel {\r\n  id: string;\r\n  type: NotificationType;\r\n  name: string;\r\n  config: Record<string, any>;\r\n  enabled: boolean;\r\n  levels: AlertLevel[];\r\n  rateLimit?: {\r\n    maxPerHour: number;\r\n    maxPerDay: number;\r\n  };\r\n}\r\n\r\n// Regla de escalamiento\r\nexport interface EscalationRule {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  conditions: {\r\n    level: AlertLevel;\r\n    duration: number; // minutos sin resolución\r\n    repeatCount?: number; // número de repeticiones\r\n  };\r\n  actions: {\r\n    escalateToLevel?: AlertLevel;\r\n    notifyChannels: string[]; // IDs de canales\r\n    assignToUser?: string;\r\n  };\r\n}\r\n\r\n// Configuración de alerta\r\nexport interface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  enabled: boolean;\r\n  metricName: string;\r\n  condition: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\r\n  threshold: number;\r\n  level: AlertLevel;\r\n  cooldownMinutes: number;\r\n  channels: string[]; // IDs de canales de notificación\r\n  escalationRules: string[]; // IDs de reglas de escalamiento\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Alerta activa\r\nexport interface Alert {\r\n  id: string;\r\n  ruleId: string;\r\n  ruleName: string;\r\n  level: AlertLevel;\r\n  status: AlertStatus;\r\n  message: string;\r\n  metricName: string;\r\n  value: number;\r\n  threshold: number;\r\n  triggeredAt: string;\r\n  acknowledgedAt?: string;\r\n  acknowledgedBy?: string;\r\n  resolvedAt?: string;\r\n  resolvedBy?: string;\r\n  escalatedAt?: string;\r\n  escalatedFrom?: AlertLevel;\r\n  notificationsSent: NotificationLog[];\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Log de notificación\r\nexport interface NotificationLog {\r\n  id: string;\r\n  channelId: string;\r\n  channelType: NotificationType;\r\n  sentAt: string;\r\n  success: boolean;\r\n  error?: string;\r\n  responseTime: number;\r\n}\r\n\r\n/**\r\n * Sistema de Alertas Enterprise con escalamiento automático\r\n */\r\nexport class EnterpriseAlertSystem {\r\n  private static instance: EnterpriseAlertSystem;\r\n  private alertRules: Map<string, AlertRule> = new Map();\r\n  private notificationChannels: Map<string, NotificationChannel> = new Map();\r\n  private escalationRules: Map<string, EscalationRule> = new Map();\r\n  private activeAlerts: Map<string, Alert> = new Map();\r\n  private escalationInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.initializeDefaultChannels();\r\n    this.initializeDefaultRules();\r\n    this.startEscalationMonitoring();\r\n  }\r\n\r\n  static getInstance(): EnterpriseAlertSystem {\r\n    if (!EnterpriseAlertSystem.instance) {\r\n      EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();\r\n    }\r\n    return EnterpriseAlertSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Configura un canal de notificación\r\n   */\r\n  setNotificationChannel(channel: NotificationChannel): void {\r\n    this.notificationChannels.set(channel.id, channel);\r\n    logger.info(LogLevel.INFO, `Notification channel configured: ${channel.id}`, {\r\n      type: channel.type,\r\n      enabled: channel.enabled,\r\n      levels: channel.levels\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de escalamiento\r\n   */\r\n  setEscalationRule(rule: EscalationRule): void {\r\n    this.escalationRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Escalation rule configured: ${rule.id}`, {\r\n      level: rule.conditions.level,\r\n      duration: rule.conditions.duration,\r\n      enabled: rule.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de alerta\r\n   */\r\n  setAlertRule(rule: AlertRule): void {\r\n    this.alertRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Alert rule configured: ${rule.id}`, {\r\n      metricName: rule.metricName,\r\n      threshold: rule.threshold,\r\n      level: rule.level,\r\n      enabled: rule.enabled\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Dispara una alerta\r\n   */\r\n  async triggerAlert(\r\n    ruleId: string,\r\n    metricName: string,\r\n    value: number,\r\n    message?: string\r\n  ): Promise<Alert | null> {\r\n    const rule = this.alertRules.get(ruleId);\r\n    if (!rule || !rule.enabled) {\r\n      return null;\r\n    }\r\n\r\n    // Verificar cooldown\r\n    const existingAlert = Array.from(this.activeAlerts.values())\r\n      .find(alert => alert.ruleId === ruleId && alert.status === AlertStatus.ACTIVE);\r\n\r\n    if (existingAlert) {\r\n      const cooldownEnd = new Date(existingAlert.triggeredAt);\r\n      cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);\r\n      \r\n      if (new Date() < cooldownEnd) {\r\n        return null; // Aún en cooldown\r\n      }\r\n    }\r\n\r\n    // Crear nueva alerta\r\n    const alert: Alert = {\r\n      id: this.generateAlertId(),\r\n      ruleId: rule.id,\r\n      ruleName: rule.name,\r\n      level: rule.level,\r\n      status: AlertStatus.ACTIVE,\r\n      message: message || `${rule.description} - Value: ${value}, Threshold: ${rule.threshold}`,\r\n      metricName,\r\n      value,\r\n      threshold: rule.threshold,\r\n      triggeredAt: new Date().toISOString(),\r\n      notificationsSent: [],\r\n      tags: rule.tags,\r\n      metadata: rule.metadata\r\n    };\r\n\r\n    this.activeAlerts.set(alert.id, alert);\r\n\r\n    // Enviar notificaciones\r\n    await this.sendNotifications(alert, rule.channels);\r\n\r\n    // Almacenar en base de datos\r\n    await this.storeAlert(alert);\r\n\r\n    logger.warn(LogLevel.WARN, `Alert triggered: ${rule.name}`, {\r\n      alertId: alert.id,\r\n      level: alert.level,\r\n      metricName: alert.metricName,\r\n      value: alert.value,\r\n      threshold: alert.threshold\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return alert;\r\n  }\r\n\r\n  /**\r\n   * Reconoce una alerta\r\n   */\r\n  async acknowledgeAlert(alertId: string, userId: string): Promise<boolean> {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {\r\n      return false;\r\n    }\r\n\r\n    alert.status = AlertStatus.ACKNOWLEDGED;\r\n    alert.acknowledgedAt = new Date().toISOString();\r\n    alert.acknowledgedBy = userId;\r\n\r\n    await this.updateAlert(alert);\r\n\r\n    logger.info(LogLevel.INFO, `Alert acknowledged: ${alertId}`, {\r\n      userId,\r\n      level: alert.level,\r\n      ruleName: alert.ruleName\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  async resolveAlert(alertId: string, userId?: string): Promise<boolean> {\r\n    const alert = this.activeAlerts.get(alertId);\r\n    if (!alert) {\r\n      return false;\r\n    }\r\n\r\n    alert.status = AlertStatus.RESOLVED;\r\n    alert.resolvedAt = new Date().toISOString();\r\n    alert.resolvedBy = userId;\r\n\r\n    await this.updateAlert(alert);\r\n    this.activeAlerts.delete(alertId);\r\n\r\n    logger.info(LogLevel.INFO, `Alert resolved: ${alertId}`, {\r\n      userId,\r\n      level: alert.level,\r\n      ruleName: alert.ruleName,\r\n      duration: this.calculateDuration(alert.triggeredAt, alert.resolvedAt!)\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Envía notificaciones para una alerta\r\n   */\r\n  private async sendNotifications(alert: Alert, channelIds: string[]): Promise<void> {\r\n    const notifications = await Promise.allSettled(\r\n      channelIds.map(channelId => this.sendNotification(alert, channelId))\r\n    );\r\n\r\n    // Log resultados\r\n    notifications.forEach((result, index) => {\r\n      const channelId = channelIds[index];\r\n      if (result.status === 'fulfilled' && result.value) {\r\n        alert.notificationsSent.push(result.value);\r\n      } else if (result.status === 'rejected') {\r\n        logger.error(LogLevel.ERROR, `Failed to send notification to channel: ${channelId}`, {\r\n          alertId: alert.id,\r\n          error: result.reason\r\n        }, LogCategory.SYSTEM);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Envía notificación a un canal específico\r\n   */\r\n  private async sendNotification(alert: Alert, channelId: string): Promise<NotificationLog | null> {\r\n    const channel = this.notificationChannels.get(channelId);\r\n    if (!channel || !channel.enabled || !channel.levels.includes(alert.level)) {\r\n      return null;\r\n    }\r\n\r\n    // Verificar rate limiting\r\n    if (channel.rateLimit && !(await this.checkRateLimit(channelId, channel.rateLimit))) {\r\n      logger.warn(LogLevel.WARN, `Rate limit exceeded for channel: ${channelId}`, {\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n      return null;\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    let success = false;\r\n    let error: string | undefined;\r\n\r\n    try {\r\n      switch (channel.type) {\r\n        case NotificationType.EMAIL:\r\n          await this.sendEmailNotification(alert, channel);\r\n          break;\r\n        case NotificationType.SLACK:\r\n          await this.sendSlackNotification(alert, channel);\r\n          break;\r\n        case NotificationType.WEBHOOK:\r\n          await this.sendWebhookNotification(alert, channel);\r\n          break;\r\n        case NotificationType.SMS:\r\n          await this.sendSMSNotification(alert, channel);\r\n          break;\r\n        case NotificationType.LOG:\r\n          await this.sendLogNotification(alert, channel);\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported notification type: ${channel.type}`);\r\n      }\r\n      success = true;\r\n    } catch (err) {\r\n      error = err instanceof Error ? err.message : 'Unknown error';\r\n    }\r\n\r\n    const notificationLog: NotificationLog = {\r\n      id: this.generateNotificationId(),\r\n      channelId,\r\n      channelType: channel.type,\r\n      sentAt: new Date().toISOString(),\r\n      success,\r\n      error,\r\n      responseTime: Date.now() - startTime\r\n    };\r\n\r\n    return notificationLog;\r\n  }\r\n\r\n  /**\r\n   * Monitoreo de escalamiento automático\r\n   */\r\n  private async checkEscalations(): Promise<void> {\r\n    for (const alert of this.activeAlerts.values()) {\r\n      if (alert.status !== AlertStatus.ACTIVE) {\r\n        continue;\r\n      }\r\n\r\n      const rule = this.alertRules.get(alert.ruleId);\r\n      if (!rule) {\r\n        continue;\r\n      }\r\n\r\n      // Verificar reglas de escalamiento\r\n      for (const escalationRuleId of rule.escalationRules) {\r\n        const escalationRule = this.escalationRules.get(escalationRuleId);\r\n        if (!escalationRule || !escalationRule.enabled) {\r\n          continue;\r\n        }\r\n\r\n        // Verificar condiciones de escalamiento\r\n        if (this.shouldEscalate(alert, escalationRule)) {\r\n          await this.escalateAlert(alert, escalationRule);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si una alerta debe escalarse\r\n   */\r\n  private shouldEscalate(alert: Alert, rule: EscalationRule): boolean {\r\n    // Verificar nivel\r\n    if (alert.level !== rule.conditions.level) {\r\n      return false;\r\n    }\r\n\r\n    // Verificar duración\r\n    const alertAge = Date.now() - new Date(alert.triggeredAt).getTime();\r\n    const requiredDuration = rule.conditions.duration * 60 * 1000; // convertir a ms\r\n\r\n    if (alertAge < requiredDuration) {\r\n      return false;\r\n    }\r\n\r\n    // Verificar si ya fue escalada\r\n    if (alert.escalatedAt) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Escala una alerta\r\n   */\r\n  private async escalateAlert(alert: Alert, rule: EscalationRule): Promise<void> {\r\n    const originalLevel = alert.level;\r\n    \r\n    // Actualizar nivel si es necesario\r\n    if (rule.actions.escalateToLevel) {\r\n      alert.level = rule.actions.escalateToLevel;\r\n      alert.escalatedFrom = originalLevel;\r\n    }\r\n\r\n    alert.escalatedAt = new Date().toISOString();\r\n\r\n    // Enviar notificaciones de escalamiento\r\n    await this.sendNotifications(alert, rule.actions.notifyChannels);\r\n\r\n    // Asignar a usuario si es necesario\r\n    if (rule.actions.assignToUser) {\r\n      alert.metadata = {\r\n        ...alert.metadata,\r\n        assignedTo: rule.actions.assignToUser\r\n      };\r\n    }\r\n\r\n    await this.updateAlert(alert);\r\n\r\n    logger.error(LogLevel.ERROR, `Alert escalated: ${alert.id}`, {\r\n      originalLevel,\r\n      newLevel: alert.level,\r\n      escalationRule: rule.name,\r\n      duration: this.calculateDuration(alert.triggeredAt, alert.escalatedAt)\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Implementaciones de notificación específicas\r\n   */\r\n  private async sendEmailNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    try {\r\n      const subject = `[${alert.level.toUpperCase()}] ${alert.ruleName}`;\r\n      const emailData = {\r\n        to: channel.config.to || ['admin@example.com'],\r\n        subject,\r\n        template: 'alert-notification',\r\n        data: {\r\n          alert,\r\n          level: alert.level.toUpperCase(),\r\n          timestamp: new Date(alert.triggeredAt).toLocaleString(),\r\n          message: alert.message,\r\n          metricName: alert.metricName,\r\n          value: alert.value,\r\n          threshold: alert.threshold\r\n        },\r\n        priority: alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.EMERGENCY ? 'high' as const : 'normal' as const\r\n      };\r\n\r\n      await emailService.sendNotification(emailData);\r\n      \r\n      logger.info(LogLevel.INFO, `Email notification sent successfully`, {\r\n        alertId: alert.id,\r\n        to: channel.config.to,\r\n        subject\r\n      }, LogCategory.SYSTEM);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to send email notification`, {\r\n        alertId: alert.id,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async sendSlackNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    try {\r\n      const alertData = {\r\n        title: `${alert.level.toUpperCase()}: ${alert.ruleName}`,\r\n        message: alert.message,\r\n        severity: alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.EMERGENCY ? 'error' as const : \r\n                 alert.level === AlertLevel.WARNING ? 'warning' as const : 'info' as const,\r\n        details: {\r\n          'Alert ID': alert.id,\r\n          'Timestamp': new Date(alert.triggeredAt).toLocaleString(),\r\n          'Metric': alert.metricName,\r\n          'Value': alert.value?.toString() || 'N/A',\r\n          'Threshold': alert.threshold?.toString() || 'N/A',\r\n          'Status': alert.status,\r\n          ...alert.tags\r\n        }\r\n      };\r\n\r\n      await slackService.sendSystemAlert(alertData);\r\n      \r\n      logger.info(LogLevel.INFO, `Slack notification sent successfully`, {\r\n        alertId: alert.id,\r\n        channel: channel.config.channel,\r\n        webhook: channel.config.webhookUrl ? 'configured' : 'missing'\r\n      }, LogCategory.SYSTEM);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to send Slack notification`, {\r\n        alertId: alert.id,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async sendWebhookNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    if (!channel.config.url) {\r\n      throw new Error('Webhook URL not configured');\r\n    }\r\n\r\n    const response = await fetch(channel.config.url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(channel.config.headers || {})\r\n      },\r\n      body: JSON.stringify({\r\n        alert,\r\n        timestamp: new Date().toISOString(),\r\n        source: 'pinteya-ecommerce'\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\r\n    }\r\n  }\r\n\r\n  private async sendSMSNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    // TODO: Implementar envío de SMS\r\n    logger.info(LogLevel.INFO, `SMS notification sent`, {\r\n      alertId: alert.id,\r\n      to: channel.config.phoneNumber\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  private async sendLogNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\r\n    const logLevel = alert.level === AlertLevel.EMERGENCY || alert.level === AlertLevel.CRITICAL \r\n      ? LogLevel.ERROR \r\n      : LogLevel.WARN;\r\n\r\n    logger.log(logLevel, `ALERT: ${alert.message}`, {\r\n      alertId: alert.id,\r\n      level: alert.level,\r\n      metricName: alert.metricName,\r\n      value: alert.value,\r\n      threshold: alert.threshold,\r\n      ruleName: alert.ruleName\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Inicializa canales por defecto\r\n   */\r\n  private initializeDefaultChannels(): void {\r\n    // Canal de log por defecto\r\n    this.setNotificationChannel({\r\n      id: 'default_log',\r\n      type: NotificationType.LOG,\r\n      name: 'Default Log Channel',\r\n      config: {},\r\n      enabled: true,\r\n      levels: [AlertLevel.INFO, AlertLevel.WARNING, AlertLevel.CRITICAL, AlertLevel.EMERGENCY]\r\n    });\r\n\r\n    // Canal de webhook por defecto (deshabilitado)\r\n    this.setNotificationChannel({\r\n      id: 'default_webhook',\r\n      type: NotificationType.WEBHOOK,\r\n      name: 'Default Webhook Channel',\r\n      config: {\r\n        url: process.env.ALERT_WEBHOOK_URL || ''\r\n      },\r\n      enabled: false,\r\n      levels: [AlertLevel.CRITICAL, AlertLevel.EMERGENCY],\r\n      rateLimit: {\r\n        maxPerHour: 10,\r\n        maxPerDay: 50\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicializa reglas por defecto\r\n   */\r\n  private initializeDefaultRules(): void {\r\n    // Regla de escalamiento para alertas críticas\r\n    this.setEscalationRule({\r\n      id: 'critical_escalation',\r\n      name: 'Critical Alert Escalation',\r\n      enabled: true,\r\n      conditions: {\r\n        level: AlertLevel.CRITICAL,\r\n        duration: 15 // 15 minutos\r\n      },\r\n      actions: {\r\n        escalateToLevel: AlertLevel.EMERGENCY,\r\n        notifyChannels: ['default_log', 'default_webhook']\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicia monitoreo de escalamiento\r\n   */\r\n  private startEscalationMonitoring(): void {\r\n    this.escalationInterval = setInterval(() => {\r\n      this.checkEscalations();\r\n    }, 60000); // Verificar cada minuto\r\n  }\r\n\r\n  /**\r\n   * Funciones auxiliares\r\n   */\r\n  private generateAlertId(): string {\r\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generateNotificationId(): string {\r\n    return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private calculateDuration(start: string, end: string): number {\r\n    return Math.round((new Date(end).getTime() - new Date(start).getTime()) / 1000 / 60); // minutos\r\n  }\r\n\r\n  private async checkRateLimit(channelId: string, rateLimit: { maxPerHour: number; maxPerDay: number }): Promise<boolean> {\r\n    // TODO: Implementar verificación de rate limiting con Redis\r\n    return true;\r\n  }\r\n\r\n  private async storeAlert(alert: Alert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase.from('enterprise_alerts').insert({\r\n        id: alert.id,\r\n        rule_id: alert.ruleId,\r\n        rule_name: alert.ruleName,\r\n        level: alert.level,\r\n        status: alert.status,\r\n        message: alert.message,\r\n        metric_name: alert.metricName,\r\n        value: alert.value,\r\n        threshold: alert.threshold,\r\n        triggered_at: alert.triggeredAt,\r\n        acknowledged_at: alert.acknowledgedAt,\r\n        acknowledged_by: alert.acknowledgedBy,\r\n        resolved_at: alert.resolvedAt,\r\n        resolved_by: alert.resolvedBy,\r\n        escalated_at: alert.escalatedAt,\r\n        escalated_from: alert.escalatedFrom,\r\n        notifications_sent: alert.notificationsSent,\r\n        tags: alert.tags,\r\n        metadata: alert.metadata\r\n      });\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to store alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  private async updateAlert(alert: Alert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase\r\n        .from('enterprise_alerts')\r\n        .update({\r\n          level: alert.level,\r\n          status: alert.status,\r\n          acknowledged_at: alert.acknowledgedAt,\r\n          acknowledged_by: alert.acknowledgedBy,\r\n          resolved_at: alert.resolvedAt,\r\n          resolved_by: alert.resolvedBy,\r\n          escalated_at: alert.escalatedAt,\r\n          escalated_from: alert.escalatedFrom,\r\n          notifications_sent: alert.notificationsSent,\r\n          metadata: alert.metadata\r\n        })\r\n        .eq('id', alert.id);\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to update alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    if (this.escalationInterval) {\r\n      clearInterval(this.escalationInterval);\r\n      this.escalationInterval = null;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance();\r\n\r\n// Funciones de conveniencia\r\nexport const triggerAlert = enterpriseAlertSystem.triggerAlert.bind(enterpriseAlertSystem);\r\nexport const acknowledgeAlert = enterpriseAlertSystem.acknowledgeAlert.bind(enterpriseAlertSystem);\r\nexport const resolveAlert = enterpriseAlertSystem.resolveAlert.bind(enterpriseAlertSystem);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}