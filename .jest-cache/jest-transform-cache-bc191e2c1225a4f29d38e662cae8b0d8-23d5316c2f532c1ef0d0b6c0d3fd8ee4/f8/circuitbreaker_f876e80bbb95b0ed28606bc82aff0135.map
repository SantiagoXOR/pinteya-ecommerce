{"version":3,"names":["CIRCUIT_BREAKER_CONFIGS","cov_16lthjwxz5","f","s","CircuitBreaker","CircuitBreakerState","executeMercadoPagoCritical","executeMercadoPagoStandard","executeWebhookProcessing","mercadoPagoCriticalBreaker","mercadoPagoStandardBreaker","webhookProcessingBreaker","MERCADOPAGO_CRITICAL","failureThreshold","recoveryTimeout","monitoringWindow","halfOpenMaxCalls","successThreshold","MERCADOPAGO_STANDARD","WEBHOOK_PROCESSING","constructor","name","config","state","failures","successes","lastFailureTime","lastSuccessTime","halfOpenCalls","stateChanges","metrics","totalCalls","successfulCalls","failedCalls","rejectedCalls","_logger","logger","debug","LogLevel","DEBUG","LogCategory","SYSTEM","execute","operation","startTime","Date","now","shouldReject","b","recordMetrics","success","error","Error","executionTime","wasRejected","result","onSuccess","data","onFailure","transitionToHalfOpen","transitionToClosed","isInMonitoringWindow","warn","WARN","message","transitionToOpen","threshold","info","INFO","_metrics","metricsCollector","recordMetric","ERROR","getState","getMetrics","reset"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\mercadopago\\circuit-breaker.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CIRCUIT BREAKER PATTERN ENTERPRISE\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// Estados del Circuit Breaker\r\nexport enum CircuitBreakerState {\r\n  CLOSED = 'CLOSED',     // Funcionamiento normal\r\n  OPEN = 'OPEN',         // Circuito abierto, rechaza requests\r\n  HALF_OPEN = 'HALF_OPEN' // Probando si el servicio se recuperó\r\n}\r\n\r\n// Configuración del Circuit Breaker\r\nexport interface CircuitBreakerConfig {\r\n  failureThreshold: number;      // Número de fallos para abrir el circuito\r\n  recoveryTimeout: number;       // Tiempo antes de intentar recuperación (ms)\r\n  monitoringWindow: number;      // Ventana de monitoreo para contar fallos (ms)\r\n  halfOpenMaxCalls: number;      // Máximo de llamadas en estado HALF_OPEN\r\n  successThreshold: number;      // Éxitos necesarios para cerrar el circuito\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const CIRCUIT_BREAKER_CONFIGS = {\r\n  MERCADOPAGO_CRITICAL: {\r\n    failureThreshold: 5,\r\n    recoveryTimeout: 60000,      // 1 minuto\r\n    monitoringWindow: 120000,    // 2 minutos\r\n    halfOpenMaxCalls: 3,\r\n    successThreshold: 2\r\n  },\r\n  MERCADOPAGO_STANDARD: {\r\n    failureThreshold: 3,\r\n    recoveryTimeout: 30000,      // 30 segundos\r\n    monitoringWindow: 60000,     // 1 minuto\r\n    halfOpenMaxCalls: 2,\r\n    successThreshold: 1\r\n  },\r\n  WEBHOOK_PROCESSING: {\r\n    failureThreshold: 10,\r\n    recoveryTimeout: 15000,      // 15 segundos\r\n    monitoringWindow: 30000,     // 30 segundos\r\n    halfOpenMaxCalls: 5,\r\n    successThreshold: 3\r\n  }\r\n} as const;\r\n\r\n// Métricas del Circuit Breaker\r\ninterface CircuitBreakerMetrics {\r\n  totalCalls: number;\r\n  successfulCalls: number;\r\n  failedCalls: number;\r\n  rejectedCalls: number;\r\n  lastFailureTime: number;\r\n  lastSuccessTime: number;\r\n  stateChanges: number;\r\n}\r\n\r\n// Resultado de ejecución\r\nexport interface CircuitBreakerResult<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: Error;\r\n  state: CircuitBreakerState;\r\n  executionTime: number;\r\n  wasRejected: boolean;\r\n}\r\n\r\n/**\r\n * Circuit Breaker Enterprise para MercadoPago\r\n * Implementa el patrón Circuit Breaker con estados y recuperación automática\r\n */\r\nexport class CircuitBreaker {\r\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\r\n  private failures: number = 0;\r\n  private successes: number = 0;\r\n  private lastFailureTime: number = 0;\r\n  private lastSuccessTime: number = 0;\r\n  private halfOpenCalls: number = 0;\r\n  private stateChanges: number = 0;\r\n  private metrics: CircuitBreakerMetrics;\r\n\r\n  constructor(\r\n    private name: string,\r\n    private config: CircuitBreakerConfig\r\n  ) {\r\n    this.metrics = {\r\n      totalCalls: 0,\r\n      successfulCalls: 0,\r\n      failedCalls: 0,\r\n      rejectedCalls: 0,\r\n      lastFailureTime: 0,\r\n      lastSuccessTime: 0,\r\n      stateChanges: 0\r\n    };\r\n\r\n    logger.debug(LogLevel.DEBUG, `Circuit Breaker initialized: ${name}`, {\r\n      config: this.config\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Ejecuta una operación protegida por el circuit breaker\r\n   */\r\n  async execute<T>(operation: () => Promise<T>): Promise<CircuitBreakerResult<T>> {\r\n    const startTime = Date.now();\r\n    this.metrics.totalCalls++;\r\n\r\n    // Verificar si debemos rechazar la llamada\r\n    if (this.shouldReject()) {\r\n      this.metrics.rejectedCalls++;\r\n      \r\n      await this.recordMetrics('rejected');\r\n      \r\n      return {\r\n        success: false,\r\n        error: new Error(`Circuit breaker is ${this.state} - operation rejected`),\r\n        state: this.state,\r\n        executionTime: Date.now() - startTime,\r\n        wasRejected: true\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Ejecutar la operación\r\n      const result = await operation();\r\n      \r\n      // Registrar éxito\r\n      await this.onSuccess();\r\n      \r\n      const executionTime = Date.now() - startTime;\r\n      await this.recordMetrics('success', executionTime);\r\n      \r\n      return {\r\n        success: true,\r\n        data: result,\r\n        state: this.state,\r\n        executionTime,\r\n        wasRejected: false\r\n      };\r\n\r\n    } catch (error) {\r\n      // Registrar fallo\r\n      await this.onFailure(error as Error);\r\n      \r\n      const executionTime = Date.now() - startTime;\r\n      await this.recordMetrics('failure', executionTime);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error as Error,\r\n        state: this.state,\r\n        executionTime,\r\n        wasRejected: false\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determina si debemos rechazar la operación\r\n   */\r\n  private shouldReject(): boolean {\r\n    const now = Date.now();\r\n\r\n    switch (this.state) {\r\n      case CircuitBreakerState.CLOSED:\r\n        return false;\r\n\r\n      case CircuitBreakerState.OPEN:\r\n        // Verificar si es tiempo de intentar recuperación\r\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\r\n          this.transitionToHalfOpen();\r\n          return false;\r\n        }\r\n        return true;\r\n\r\n      case CircuitBreakerState.HALF_OPEN:\r\n        // Limitar llamadas en estado HALF_OPEN\r\n        return this.halfOpenCalls >= this.config.halfOpenMaxCalls;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja un éxito en la operación\r\n   */\r\n  private async onSuccess(): Promise<void> {\r\n    this.lastSuccessTime = Date.now();\r\n    this.metrics.successfulCalls++;\r\n\r\n    switch (this.state) {\r\n      case CircuitBreakerState.HALF_OPEN:\r\n        this.successes++;\r\n        this.halfOpenCalls++;\r\n        \r\n        if (this.successes >= this.config.successThreshold) {\r\n          this.transitionToClosed();\r\n        }\r\n        break;\r\n\r\n      case CircuitBreakerState.CLOSED:\r\n        // Reset failure counter en ventana de monitoreo\r\n        if (this.isInMonitoringWindow()) {\r\n          this.failures = 0;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja un fallo en la operación\r\n   */\r\n  private async onFailure(error: Error): Promise<void> {\r\n    this.lastFailureTime = Date.now();\r\n    this.metrics.failedCalls++;\r\n    this.failures++;\r\n\r\n    logger.warn(LogLevel.WARN, `Circuit Breaker failure: ${this.name}`, {\r\n      error: error.message,\r\n      failures: this.failures,\r\n      state: this.state\r\n    }, LogCategory.SYSTEM);\r\n\r\n    switch (this.state) {\r\n      case CircuitBreakerState.CLOSED:\r\n        if (this.failures >= this.config.failureThreshold) {\r\n          this.transitionToOpen();\r\n        }\r\n        break;\r\n\r\n      case CircuitBreakerState.HALF_OPEN:\r\n        this.transitionToOpen();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transición a estado OPEN\r\n   */\r\n  private transitionToOpen(): void {\r\n    this.state = CircuitBreakerState.OPEN;\r\n    this.stateChanges++;\r\n    this.metrics.stateChanges++;\r\n    this.halfOpenCalls = 0;\r\n    this.successes = 0;\r\n\r\n    logger.warn(LogLevel.WARN, `Circuit Breaker OPENED: ${this.name}`, {\r\n      failures: this.failures,\r\n      threshold: this.config.failureThreshold\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Transición a estado HALF_OPEN\r\n   */\r\n  private transitionToHalfOpen(): void {\r\n    this.state = CircuitBreakerState.HALF_OPEN;\r\n    this.stateChanges++;\r\n    this.metrics.stateChanges++;\r\n    this.halfOpenCalls = 0;\r\n    this.successes = 0;\r\n\r\n    logger.info(LogLevel.INFO, `Circuit Breaker HALF-OPEN: ${this.name}`, {\r\n      recoveryTimeout: this.config.recoveryTimeout\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Transición a estado CLOSED\r\n   */\r\n  private transitionToClosed(): void {\r\n    this.state = CircuitBreakerState.CLOSED;\r\n    this.stateChanges++;\r\n    this.metrics.stateChanges++;\r\n    this.failures = 0;\r\n    this.successes = 0;\r\n    this.halfOpenCalls = 0;\r\n\r\n    logger.info(LogLevel.INFO, `Circuit Breaker CLOSED: ${this.name}`, {\r\n      successThreshold: this.config.successThreshold\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Verifica si estamos en la ventana de monitoreo\r\n   */\r\n  private isInMonitoringWindow(): boolean {\r\n    const now = Date.now();\r\n    return (now - this.lastFailureTime) <= this.config.monitoringWindow;\r\n  }\r\n\r\n  /**\r\n   * Registra métricas del circuit breaker\r\n   */\r\n  private async recordMetrics(\r\n    operation: 'success' | 'failure' | 'rejected',\r\n    executionTime?: number\r\n  ): Promise<void> {\r\n    try {\r\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.${operation}`, 1, {\r\n        state: this.state,\r\n        operation\r\n      });\r\n\r\n      if (executionTime) {\r\n        await metricsCollector.recordMetric(\r\n          `circuit_breaker.${this.name}.execution_time`,\r\n          executionTime,\r\n          { state: this.state }\r\n        );\r\n      }\r\n\r\n      // Métricas de estado\r\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.state_changes`, this.stateChanges);\r\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.failure_rate`, \r\n        this.metrics.totalCalls > 0 ? this.metrics.failedCalls / this.metrics.totalCalls : 0\r\n      );\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to record circuit breaker metrics: ${this.name}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado actual del circuit breaker\r\n   */\r\n  getState(): CircuitBreakerState {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Obtiene las métricas del circuit breaker\r\n   */\r\n  getMetrics(): CircuitBreakerMetrics & { state: CircuitBreakerState; config: CircuitBreakerConfig } {\r\n    return {\r\n      ...this.metrics,\r\n      state: this.state,\r\n      config: this.config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fuerza el reset del circuit breaker (solo para testing/admin)\r\n   */\r\n  reset(): void {\r\n    this.state = CircuitBreakerState.CLOSED;\r\n    this.failures = 0;\r\n    this.successes = 0;\r\n    this.halfOpenCalls = 0;\r\n    this.lastFailureTime = 0;\r\n    this.lastSuccessTime = 0;\r\n\r\n    logger.info(LogLevel.INFO, `Circuit Breaker manually reset: ${this.name}`, {}, LogCategory.SYSTEM);\r\n  }\r\n}\r\n\r\n// Instancias globales de circuit breakers\r\nexport const mercadoPagoCriticalBreaker = new CircuitBreaker(\r\n  'mercadopago_critical',\r\n  CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_CRITICAL\r\n);\r\n\r\nexport const mercadoPagoStandardBreaker = new CircuitBreaker(\r\n  'mercadopago_standard', \r\n  CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_STANDARD\r\n);\r\n\r\nexport const webhookProcessingBreaker = new CircuitBreaker(\r\n  'webhook_processing',\r\n  CIRCUIT_BREAKER_CONFIGS.WEBHOOK_PROCESSING\r\n);\r\n\r\n/**\r\n * Wrapper para operaciones críticas de MercadoPago\r\n */\r\nexport async function executeMercadoPagoCritical<T>(\r\n  operation: () => Promise<T>\r\n): Promise<CircuitBreakerResult<T>> {\r\n  return mercadoPagoCriticalBreaker.execute(operation);\r\n}\r\n\r\n/**\r\n * Wrapper para operaciones estándar de MercadoPago\r\n */\r\nexport async function executeMercadoPagoStandard<T>(\r\n  operation: () => Promise<T>\r\n): Promise<CircuitBreakerResult<T>> {\r\n  return mercadoPagoStandardBreaker.execute(operation);\r\n}\r\n\r\n/**\r\n * Wrapper para procesamiento de webhooks\r\n */\r\nexport async function executeWebhookProcessing<T>(\r\n  operation: () => Promise<T>\r\n): Promise<CircuitBreakerResult<T>> {\r\n  return webhookProcessingBreaker.execute(operation);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}