{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\admin\\orders\\OrderListEnterprise.api-handling.test.jsx"],"sourcesContent":["// ===================================\r\n// PRUEBAS UNITARIAS PARA MANEJO DE API - ORDER LIST ENTERPRISE\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, waitFor, act } from '@testing-library/react';\r\nimport { OrderListEnterprise } from '@/components/admin/orders/OrderListEnterprise';\r\n\r\n// ===================================\r\n// MOCKS Y SETUP\r\n// ===================================\r\n\r\nconst mockToast = jest.fn();\r\njest.mock('../../../../hooks/use-toast', () => ({\r\n  useToast: () => ({ toast: mockToast })\r\n}));\r\n\r\njest.mock('next/navigation', () => ({\r\n  useRouter: () => ({\r\n    push: jest.fn(),\r\n    replace: jest.fn(),\r\n    back: jest.fn()\r\n  }),\r\n  useSearchParams: () => new URLSearchParams(),\r\n  usePathname: () => '/admin/orders'\r\n}));\r\n\r\n// ===================================\r\n// DATOS DE PRUEBA\r\n// ===================================\r\n\r\nconst mockValidApiResponse = {\r\n  success: true,\r\n  data: {\r\n    orders: [\r\n      {\r\n        id: '1',\r\n        order_number: 'ORD-001',\r\n        status: 'pending',\r\n        total_amount: 100.00,\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        user_profiles: { name: 'Test User', email: 'test@example.com' }\r\n      }\r\n    ],\r\n    pagination: {\r\n      page: 1,\r\n      limit: 20,\r\n      total: 1,\r\n      totalPages: 1,\r\n      hasNextPage: false,\r\n      hasPreviousPage: false\r\n    },\r\n    filters: {\r\n      search: '',\r\n      status: 'all',\r\n      payment_status: 'all'\r\n    }\r\n  }\r\n};\r\n\r\nconst mockEmptyApiResponse = {\r\n  success: true,\r\n  data: {\r\n    orders: [],\r\n    pagination: {\r\n      page: 1,\r\n      limit: 20,\r\n      total: 0,\r\n      totalPages: 0,\r\n      hasNextPage: false,\r\n      hasPreviousPage: false\r\n    },\r\n    filters: {\r\n      search: '',\r\n      status: 'all',\r\n      payment_status: 'all'\r\n    }\r\n  }\r\n};\r\n\r\n// ===================================\r\n// HELPER FUNCTIONS\r\n// ===================================\r\n\r\nconst renderComponent = (props = {}) => {\r\n  const defaultProps = {\r\n    onOrderSelect: jest.fn(),\r\n    onOrderEdit: jest.fn(),\r\n    onBulkAction: jest.fn(),\r\n    enableBulkActions: true,\r\n    enableFilters: true,\r\n    pageSize: 20,\r\n    ...props\r\n  };\r\n\r\n  return render(<OrderListEnterprise {...defaultProps} />);\r\n};\r\n\r\nconst createMockFetch = (response, shouldReject = false) => {\r\n  return jest.fn().mockImplementation(() => {\r\n    if (shouldReject) {\r\n      return Promise.reject(new Error('Network error'));\r\n    }\r\n    return Promise.resolve({\r\n      ok: response.success !== false,\r\n      status: response.success !== false ? 200 : 500,\r\n      json: () => Promise.resolve(response)\r\n    });\r\n  });\r\n};\r\n\r\n// ===================================\r\n// TESTS DE MANEJO DE API\r\n// ===================================\r\n\r\ndescribe('OrderListEnterprise - API Response Handling', () => {\r\n  let originalFetch;\r\n\r\n  beforeEach(() => {\r\n    originalFetch = global.fetch;\r\n    mockToast.mockClear();\r\n  });\r\n\r\n  afterEach(() => {\r\n    global.fetch = originalFetch;\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Respuestas Válidas de API', () => {\r\n    test('debe manejar respuesta válida con órdenes', async () => {\r\n      // Arrange\r\n      global.fetch = createMockFetch(mockValidApiResponse);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-001')).toBeInTheDocument();\r\n        expect(screen.getByText('Test User')).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockToast).not.toHaveBeenCalled();\r\n    });\r\n\r\n    test('debe manejar respuesta válida sin órdenes', async () => {\r\n      // Arrange\r\n      global.fetch = createMockFetch(mockEmptyApiResponse);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/No se encontraron órdenes/i)).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockToast).not.toHaveBeenCalled();\r\n    });\r\n\r\n    test('debe manejar respuesta con estructura de datos incompleta', async () => {\r\n      // Arrange - Respuesta sin campo orders\r\n      const incompleteResponse = {\r\n        success: true,\r\n        data: {\r\n          pagination: mockValidApiResponse.data.pagination,\r\n          filters: mockValidApiResponse.data.filters\r\n        }\r\n      };\r\n      global.fetch = createMockFetch(incompleteResponse);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert - Debe manejar gracefully la ausencia de orders\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/No se encontraron órdenes/i)).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockToast).not.toHaveBeenCalled();\r\n    });\r\n\r\n    test('debe manejar respuesta con paginación nula', async () => {\r\n      // Arrange\r\n      const responseWithNullPagination = {\r\n        success: true,\r\n        data: {\r\n          orders: mockValidApiResponse.data.orders,\r\n          pagination: null,\r\n          filters: mockValidApiResponse.data.filters\r\n        }\r\n      };\r\n      global.fetch = createMockFetch(responseWithNullPagination);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert - Debe mostrar órdenes sin paginación\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-001')).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockToast).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Manejo de Errores de API', () => {\r\n    test('debe manejar error de red', async () => {\r\n      // Arrange\r\n      global.fetch = createMockFetch(null, true);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalledWith({\r\n          title: 'Error',\r\n          description: expect.stringContaining('Error al cargar las órdenes'),\r\n          variant: 'destructive'\r\n        });\r\n      });\r\n    });\r\n\r\n    test('debe manejar respuesta HTTP 500', async () => {\r\n      // Arrange\r\n      const errorResponse = {\r\n        success: false,\r\n        error: 'Internal server error',\r\n        message: 'Error interno del servidor'\r\n      };\r\n      global.fetch = createMockFetch(errorResponse);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalledWith({\r\n          title: 'Error',\r\n          description: expect.stringContaining('Error al cargar las órdenes'),\r\n          variant: 'destructive'\r\n        });\r\n      });\r\n    });\r\n\r\n    test('debe manejar respuesta JSON malformada', async () => {\r\n      // Arrange\r\n      global.fetch = jest.fn().mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: () => Promise.reject(new Error('Invalid JSON'))\r\n      });\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalledWith({\r\n          title: 'Error',\r\n          description: expect.stringContaining('Error al cargar las órdenes'),\r\n          variant: 'destructive'\r\n        });\r\n      });\r\n    });\r\n\r\n    test('debe manejar timeout de API', async () => {\r\n      // Arrange\r\n      global.fetch = jest.fn().mockImplementation(() => {\r\n        return new Promise((_, reject) => {\r\n          setTimeout(() => reject(new Error('Request timeout')), 100);\r\n        });\r\n      });\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalledWith({\r\n          title: 'Error',\r\n          description: expect.stringContaining('Error al cargar las órdenes'),\r\n          variant: 'destructive'\r\n        });\r\n      }, { timeout: 3000 });\r\n    });\r\n  });\r\n\r\n  describe('Casos Edge de Estructura de Datos', () => {\r\n    test('debe manejar órdenes con campos faltantes', async () => {\r\n      // Arrange\r\n      const responseWithIncompleteOrders = {\r\n        success: true,\r\n        data: {\r\n          orders: [\r\n            {\r\n              id: '1',\r\n              order_number: 'ORD-001'\r\n              // Faltan campos como status, total_amount, user_profiles\r\n            }\r\n          ],\r\n          pagination: mockValidApiResponse.data.pagination,\r\n          filters: mockValidApiResponse.data.filters\r\n        }\r\n      };\r\n      global.fetch = createMockFetch(responseWithIncompleteOrders);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert - Debe renderizar sin errores\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-001')).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockToast).not.toHaveBeenCalled();\r\n    });\r\n\r\n    test('debe manejar user_profiles nulo', async () => {\r\n      // Arrange\r\n      const responseWithNullUserProfiles = {\r\n        success: true,\r\n        data: {\r\n          orders: [\r\n            {\r\n              id: '1',\r\n              order_number: 'ORD-001',\r\n              status: 'pending',\r\n              total_amount: 100.00,\r\n              created_at: '2024-01-01T00:00:00Z',\r\n              user_profiles: null\r\n            }\r\n          ],\r\n          pagination: mockValidApiResponse.data.pagination,\r\n          filters: mockValidApiResponse.data.filters\r\n        }\r\n      };\r\n      global.fetch = createMockFetch(responseWithNullUserProfiles);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert - Debe renderizar sin errores\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-001')).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockToast).not.toHaveBeenCalled();\r\n    });\r\n\r\n    test('debe manejar fechas inválidas', async () => {\r\n      // Arrange\r\n      const responseWithInvalidDates = {\r\n        success: true,\r\n        data: {\r\n          orders: [\r\n            {\r\n              id: '1',\r\n              order_number: 'ORD-001',\r\n              status: 'pending',\r\n              total_amount: 100.00,\r\n              created_at: 'invalid-date',\r\n              user_profiles: { name: 'Test User', email: 'test@example.com' }\r\n            }\r\n          ],\r\n          pagination: mockValidApiResponse.data.pagination,\r\n          filters: mockValidApiResponse.data.filters\r\n        }\r\n      };\r\n      global.fetch = createMockFetch(responseWithInvalidDates);\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert - Debe renderizar sin errores\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-001')).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockToast).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Reintentos y Recuperación', () => {\r\n    test('debe reintentar automáticamente en caso de fallo temporal', async () => {\r\n      // Arrange - Primer intento falla, segundo intento exitoso\r\n      let callCount = 0;\r\n      global.fetch = jest.fn().mockImplementation(() => {\r\n        callCount++;\r\n        if (callCount === 1) {\r\n          return Promise.reject(new Error('Temporary network error'));\r\n        }\r\n        return Promise.resolve({\r\n          ok: true,\r\n          status: 200,\r\n          json: () => Promise.resolve(mockValidApiResponse)\r\n        });\r\n      });\r\n\r\n      // Act\r\n      await act(async () => {\r\n        renderComponent();\r\n      });\r\n\r\n      // Assert - Debe eventualmente mostrar los datos\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-001')).toBeInTheDocument();\r\n      }, { timeout: 5000 });\r\n\r\n      // Verificar que se hicieron múltiples intentos\r\n      expect(global.fetch).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n"],"names":["jest","mock","useToast","toast","mockToast","useRouter","push","fn","replace","back","useSearchParams","URLSearchParams","usePathname","mockValidApiResponse","success","data","orders","id","order_number","status","total_amount","created_at","user_profiles","name","email","pagination","page","limit","total","totalPages","hasNextPage","hasPreviousPage","filters","search","payment_status","mockEmptyApiResponse","renderComponent","props","defaultProps","onOrderSelect","onOrderEdit","onBulkAction","enableBulkActions","enableFilters","pageSize","render","OrderListEnterprise","createMockFetch","response","shouldReject","mockImplementation","Promise","reject","Error","resolve","ok","json","describe","originalFetch","beforeEach","global","fetch","mockClear","afterEach","clearAllMocks","test","act","waitFor","expect","screen","getByText","toBeInTheDocument","not","toHaveBeenCalled","incompleteResponse","responseWithNullPagination","toHaveBeenCalledWith","title","description","stringContaining","variant","errorResponse","error","message","mockResolvedValue","_","setTimeout","timeout","responseWithIncompleteOrders","responseWithNullUserProfiles","responseWithInvalidDates","callCount","toHaveBeenCalledTimes"],"mappings":"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"}