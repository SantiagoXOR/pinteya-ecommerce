{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useSearchNavigation.test.tsx"],"sourcesContent":["// ===================================\r\n// TESTS: useSearchNavigation Hook - Navegación optimizada para búsquedas\r\n// ===================================\r\n\r\nimport { renderHook, act } from '@testing-library/react';\r\nimport { useRouter, useSearchParams } from 'next/navigation';\r\nimport { useSearchNavigation } from '@/hooks/useSearchNavigation';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\n// Mock Next.js router\r\njest.mock('next/navigation', () => ({\r\n  useRouter: jest.fn(),\r\n  useSearchParams: jest.fn(),\r\n}));\r\n\r\n// Mock window.scrollTo\r\nObject.defineProperty(window, 'scrollTo', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// ===================================\r\n// SETUP\r\n// ===================================\r\n\r\nconst mockPush = jest.fn();\r\nconst mockReplace = jest.fn();\r\nconst mockPrefetch = jest.fn();\r\nconst mockUseRouter = useRouter as jest.MockedFunction<typeof useRouter>;\r\nconst mockUseSearchParams = useSearchParams as jest.MockedFunction<typeof useSearchParams>;\r\n\r\nconst mockSearchParams = {\r\n  get: jest.fn(),\r\n  forEach: jest.fn(),\r\n  toString: jest.fn(() => ''),\r\n};\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  \r\n  mockUseRouter.mockReturnValue({\r\n    push: mockPush,\r\n    replace: mockReplace,\r\n    prefetch: mockPrefetch,\r\n  } as any);\r\n  \r\n  mockUseSearchParams.mockReturnValue(mockSearchParams as any);\r\n  \r\n  // Reset window.scrollTo mock\r\n  (window.scrollTo as jest.Mock).mockClear();\r\n});\r\n\r\n// ===================================\r\n// TESTS\r\n// ===================================\r\n\r\ndescribe('useSearchNavigation Hook', () => {\r\n  it('should navigate to search with query', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('pintura roja');\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/search?q=pintura+roja');\r\n  });\r\n\r\n  it('should navigate to search with query and category', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('pintura', 'pinturas');\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/search?q=pintura&category=pinturas');\r\n  });\r\n\r\n  it('should navigate to search with additional parameters', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('pintura', undefined, { \r\n        sort: 'price',\r\n        brand: 'sherwin' \r\n      });\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/search?q=pintura&sort=price&brand=sherwin');\r\n  });\r\n\r\n  it('should use replace instead of push when configured', () => {\r\n    const { result } = renderHook(() => useSearchNavigation({ replace: true }));\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('test query');\r\n    });\r\n\r\n    expect(mockReplace).toHaveBeenCalledWith('/search?q=test+query');\r\n    expect(mockPush).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should preserve existing parameters when configured', () => {\r\n    mockSearchParams.get.mockImplementation((key) => {\r\n      if (key === 'sort') {return 'price';}\r\n      if (key === 'brand') {return 'sherwin';}\r\n      return null;\r\n    });\r\n\r\n    mockSearchParams.forEach.mockImplementation((callback) => {\r\n      callback('price', 'sort');\r\n      callback('sherwin', 'brand');\r\n    });\r\n\r\n    const { result } = renderHook(() => useSearchNavigation({ \r\n      preserveParams: true \r\n    }));\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('nueva busqueda');\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/search?q=nueva+busqueda&sort=price&brand=sherwin');\r\n  });\r\n\r\n  it('should scroll to top when configured', () => {\r\n    jest.useFakeTimers();\r\n    \r\n    const { result } = renderHook(() => useSearchNavigation({ \r\n      scrollToTop: true \r\n    }));\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('test');\r\n    });\r\n\r\n    // Fast-forward timers\r\n    act(() => {\r\n      jest.advanceTimersByTime(100);\r\n    });\r\n\r\n    expect(window.scrollTo).toHaveBeenCalledWith({ \r\n      top: 0, \r\n      behavior: 'smooth' \r\n    });\r\n\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  it('should call navigation callbacks', () => {\r\n    const onBeforeNavigate = jest.fn();\r\n    const onAfterNavigate = jest.fn();\r\n\r\n    const { result } = renderHook(() => useSearchNavigation({\r\n      onBeforeNavigate,\r\n      onAfterNavigate,\r\n    }));\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('test');\r\n    });\r\n\r\n    expect(onBeforeNavigate).toHaveBeenCalledWith('/search?q=test');\r\n    expect(onAfterNavigate).toHaveBeenCalledWith('/search?q=test');\r\n  });\r\n\r\n  it('should navigate to product', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToProduct('123');\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/products/123');\r\n  });\r\n\r\n  it('should navigate to product with slug', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToProduct('123', 'pintura-sherwin-williams');\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/products/pintura-sherwin-williams');\r\n  });\r\n\r\n  it('should navigate to category', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToCategory('pinturas');\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/shop?category=pinturas');\r\n  });\r\n\r\n  it('should navigate to category with slug', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToCategory('pinturas', 'pinturas-interiores');\r\n    });\r\n\r\n    expect(mockPush).toHaveBeenCalledWith('/shop/pinturas-interiores');\r\n  });\r\n\r\n  it('should prefetch search page', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.prefetchSearch('pintura');\r\n    });\r\n\r\n    expect(mockPrefetch).toHaveBeenCalledWith('/search?q=pintura');\r\n  });\r\n\r\n  it('should prefetch product page', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.prefetchProduct('123');\r\n    });\r\n\r\n    expect(mockPrefetch).toHaveBeenCalledWith('/products/123');\r\n  });\r\n\r\n  it('should get current search query', () => {\r\n    mockSearchParams.get.mockImplementation((key) => {\r\n      if (key === 'q') {return 'current search';}\r\n      return null;\r\n    });\r\n\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    const query = result.current.getCurrentSearchQuery();\r\n    expect(query).toBe('current search');\r\n  });\r\n\r\n  it('should get current category', () => {\r\n    mockSearchParams.get.mockImplementation((key) => {\r\n      if (key === 'category') {return 'pinturas';}\r\n      return null;\r\n    });\r\n\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    const category = result.current.getCurrentCategory();\r\n    expect(category).toBe('pinturas');\r\n  });\r\n\r\n  it('should build search URL correctly', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    const url = result.current.buildSearchUrl('test query', 'pinturas', {\r\n      sort: 'price',\r\n      brand: 'sherwin'\r\n    });\r\n\r\n    expect(url).toBe('/search?q=test+query&category=pinturas&sort=price&brand=sherwin');\r\n  });\r\n\r\n  it('should not include category \"all\" in URL', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    const url = result.current.buildSearchUrl('test', 'all');\r\n    expect(url).toBe('/search?q=test');\r\n  });\r\n\r\n  it('should handle empty query gracefully', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('');\r\n    });\r\n\r\n    // Should not navigate with empty query\r\n    expect(mockPush).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should handle whitespace-only query', () => {\r\n    const { result } = renderHook(() => useSearchNavigation());\r\n\r\n    act(() => {\r\n      result.current.navigateToSearch('   ');\r\n    });\r\n\r\n    // Should not navigate with whitespace-only query\r\n    expect(mockPush).not.toHaveBeenCalled();\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","useRouter","fn","useSearchParams","Object","defineProperty","window","value","writable","mockPush","mockReplace","mockPrefetch","mockUseRouter","mockUseSearchParams","mockSearchParams","get","forEach","toString","beforeEach","clearAllMocks","mockReturnValue","push","replace","prefetch","scrollTo","mockClear","describe","it","result","renderHook","useSearchNavigation","act","current","navigateToSearch","expect","toHaveBeenCalledWith","undefined","sort","brand","not","toHaveBeenCalled","mockImplementation","key","callback","preserveParams","useFakeTimers","scrollToTop","advanceTimersByTime","top","behavior","useRealTimers","onBeforeNavigate","onAfterNavigate","navigateToProduct","navigateToCategory","prefetchSearch","prefetchProduct","query","getCurrentSearchQuery","toBe","category","getCurrentCategory","url","buildSearchUrl"],"mappings":"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"}