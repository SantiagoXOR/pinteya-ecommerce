{"version":3,"names":["cov_2iztof0djv","actualCoverage","s","GET","f","POST","runtime","request","rateLimitResult","_ratelimiter","withRateLimit","RATE_LIMIT_CONFIGS","auth","securityLogger","_securitylogger","createSecurityLogger","logApiAccess","context","url","URL","action","b","searchParams","get","userId","severity","enterpriseResult","_apitimeouts","withTimeout","_enterpriseauthutils","requireAdminAuth","ENDPOINT_TIMEOUTS","success","logPermissionDenied","errorResponse","data","error","enterprise","code","_server","NextResponse","json","status","legacyResult","_adminauth","getAuthenticatedUser","console","log","legacy","isAdmin","agree","metrics","_enterprisecache","withCache","_securityauditenhanced","getSecurityMetrics","metricsResponse","cache","getCacheStats","user","role","permissions","message","alerts","getActiveSecurityAlerts","undefined","alertsResponse","count","length","filtered_by_user","filtered_by_severity","requester","timeWindow","parseInt","analysisAlerts","analyzeSecurityPatterns","analysisResponse","healthCheck","runSecurityHealthCheck","healthResponse","startDateStr","endDateStr","startDate","Date","endDate","isNaN","getTime","report","generateSecurityReport","reportResponse","exportStartStr","exportEndStr","format","exportStart","exportEnd","exportData","exportSecurityEvents","headers","Headers","set","Response","logApiError","endpoint","method","admin","body","alertId","notes","assignedTo","authResult","updateResult","updateSecurityAlert","assigned_to","resolution_notes","updateResponse","resolveResult","resolveSecurityAlert","resolveResponse","fpResult","markAlertAsFalsePositive","fpResponse","daysToKeep","cleanupCount","cleanupOldSecurityEvents","cleanupResponse","deletedCount","forceUserId","forceTimeWindow","forceAlerts","forceResponse"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\auth\\security\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API Enterprise de Auditor√≠a de Seguridad Mejorada\r\n * Refactorizada con utilidades enterprise + RLS + validaciones robustas\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedUser } from '@/lib/auth/admin-auth';\r\nimport {\r\n  requireAdminAuth\r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  withCache,\r\n  getCacheStats\r\n} from '@/lib/auth/enterprise-cache';\r\nimport {\r\n  analyzeSecurityPatterns,\r\n  getSecurityMetrics,\r\n  generateSecurityReport,\r\n  getActiveSecurityAlerts,\r\n  updateSecurityAlert,\r\n  resolveSecurityAlert,\r\n  markAlertAsFalsePositive,\r\n  runSecurityHealthCheck,\r\n  cleanupOldSecurityEvents,\r\n  exportSecurityEvents\r\n} from '@/lib/auth/security-audit-enhanced';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { withRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/rate-limiter';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\nimport { withTimeout, ENDPOINT_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n\r\n// =====================================================\r\n// GET /api/auth/security\r\n// Obtiene m√©tricas, alertas o ejecuta an√°lisis\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Aplicar rate limiting para APIs de autenticaci√≥n\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.auth,\r\n    async () => {\r\n      // Crear logger de seguridad\r\n      const securityLogger = createSecurityLogger(request);\r\n\r\n      try {\r\n        // Log del acceso al API de seguridad\r\n        securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'read');\r\n\r\n        const url = new URL(request.url);\r\n        const action = url.searchParams.get('action') || 'metrics';\r\n        const userId = url.searchParams.get('userId');\r\n        const severity = url.searchParams.get('severity') as any;\r\n\r\n        // ENTERPRISE: Autenticaci√≥n enterprise con permisos espec√≠ficos de seguridad\r\n        const enterpriseResult = await withTimeout(\r\n          () => requireAdminAuth(request, ['security_read', 'admin_access']),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Autenticaci√≥n enterprise'\r\n        );\r\n\r\n        if (!enterpriseResult.success) {\r\n          // Log del intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'read');\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: enterpriseResult.error || 'Permisos de administrador requeridos',\r\n            enterprise: true,\r\n            code: enterpriseResult.code\r\n          };\r\n          return NextResponse.json(errorResponse, { status: enterpriseResult.status || 403 });\r\n        }\r\n\r\n    const context = enterpriseResult.context!;\r\n\r\n    // LEGACY: Mantener compatibilidad con m√©todo anterior\r\n    const legacyResult = await getAuthenticatedUser(request);\r\n    console.log('üîç Security API: Enterprise vs Legacy auth comparison:', {\r\n      enterprise: enterpriseResult.success,\r\n      legacy: legacyResult.isAdmin,\r\n      agree: enterpriseResult.success === legacyResult.isAdmin\r\n    });\r\n\r\n    switch (action) {\r\n      case 'metrics':\r\n        // ENTERPRISE: Obtener m√©tricas de seguridad con cache\r\n        const metrics = await withCache(\r\n          `security_metrics_${context.userId}`,\r\n          () => getSecurityMetrics(),\r\n          2 * 60 * 1000 // 2 minutos de cache\r\n        );\r\n\r\n        const metricsResponse: ApiResponse<any> = {\r\n          data: {\r\n            metrics,\r\n            cache: getCacheStats(),\r\n            enterprise: {\r\n              user: context.userId,\r\n              role: context.role,\r\n              permissions: context.permissions\r\n            }\r\n          },\r\n          success: true,\r\n          message: 'M√©tricas de seguridad obtenidas (enterprise)',\r\n          enterprise: true\r\n        };\r\n        return NextResponse.json(metricsResponse);\r\n\r\n      case 'alerts':\r\n        // ENTERPRISE: Obtener alertas activas con cache\r\n        const alerts = await withCache(\r\n          `security_alerts_${userId || 'all'}_${severity || 'all'}`,\r\n          () => getActiveSecurityAlerts(userId || undefined, severity),\r\n          1 * 60 * 1000 // 1 minuto de cache\r\n        );\r\n\r\n        const alertsResponse: ApiResponse<any> = {\r\n          data: {\r\n            alerts,\r\n            count: alerts.length,\r\n            cache: getCacheStats(),\r\n            enterprise: {\r\n              filtered_by_user: userId,\r\n              filtered_by_severity: severity,\r\n              requester: context.userId\r\n            }\r\n          },\r\n          success: true,\r\n          message: 'Alertas de seguridad obtenidas'\r\n        };\r\n        return NextResponse.json(alertsResponse);\r\n\r\n      case 'analyze':\r\n        // Ejecutar an√°lisis de patrones\r\n        const timeWindow = parseInt(url.searchParams.get('timeWindow') || '24');\r\n        const analysisAlerts = await analyzeSecurityPatterns(userId || undefined, timeWindow);\r\n        const analysisResponse: ApiResponse<any> = {\r\n          data: { alerts: analysisAlerts, count: analysisAlerts.length },\r\n          success: true,\r\n          message: `An√°lisis completado: ${analysisAlerts.length} alertas generadas`\r\n        };\r\n        return NextResponse.json(analysisResponse);\r\n\r\n      case 'health':\r\n        // Ejecutar verificaci√≥n de salud de seguridad\r\n        const healthCheck = await runSecurityHealthCheck();\r\n        const healthResponse: ApiResponse<any> = {\r\n          data: healthCheck,\r\n          success: true,\r\n          message: `Estado de seguridad: ${healthCheck.status}`\r\n        };\r\n        return NextResponse.json(healthResponse);\r\n\r\n      case 'report':\r\n        // Generar reporte de seguridad\r\n        const startDateStr = url.searchParams.get('startDate');\r\n        const endDateStr = url.searchParams.get('endDate');\r\n        \r\n        if (!startDateStr || !endDateStr) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'startDate y endDate son requeridos para generar reporte'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const startDate = new Date(startDateStr);\r\n        const endDate = new Date(endDateStr);\r\n        \r\n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Fechas inv√°lidas'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const report = await generateSecurityReport(startDate, endDate);\r\n        const reportResponse: ApiResponse<any> = {\r\n          data: { report },\r\n          success: true,\r\n          message: 'Reporte de seguridad generado'\r\n        };\r\n        return NextResponse.json(reportResponse);\r\n\r\n      case 'export':\r\n        // Exportar eventos de seguridad\r\n        const exportStartStr = url.searchParams.get('startDate');\r\n        const exportEndStr = url.searchParams.get('endDate');\r\n        const format = url.searchParams.get('format') as 'json' | 'csv' || 'json';\r\n        \r\n        if (!exportStartStr || !exportEndStr) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'startDate y endDate son requeridos para exportar'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const exportStart = new Date(exportStartStr);\r\n        const exportEnd = new Date(exportEndStr);\r\n        \r\n        const exportData = await exportSecurityEvents(exportStart, exportEnd, format);\r\n        \r\n        // Retornar como archivo descargable\r\n        const headers = new Headers();\r\n        headers.set('Content-Type', format === 'json' ? 'application/json' : 'text/csv');\r\n        headers.set('Content-Disposition', `attachment; filename=\"security-events-${exportStartStr}-${exportEndStr}.${format}\"`);\r\n        \r\n        return new Response(exportData, { headers });\r\n\r\n        default:\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Acci√≥n no v√°lida: ${action}`\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n      } catch (error) {\r\n        // Log del error de seguridad\r\n        securityLogger.logApiError(securityLogger.context, error as Error, {\r\n          endpoint: '/api/auth/security',\r\n          method: 'GET',\r\n          action: request.url\r\n        });\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Error interno del servidor'\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// =====================================================\r\n// POST /api/auth/security\r\n// Acciones sobre alertas y mantenimiento\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  // Aplicar rate limiting para APIs de autenticaci√≥n (acciones administrativas)\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.admin,\r\n    async () => {\r\n      // Crear logger de seguridad\r\n      const securityLogger = createSecurityLogger(request);\r\n\r\n      try {\r\n        // Log del acceso al API de seguridad (POST)\r\n        securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'write');\r\n\r\n        const body = await withTimeout(\r\n          () => request.json(),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Lectura del body de la request'\r\n        );\r\n\r\n        const { action, alertId, status, notes, assignedTo } = body;\r\n\r\n        if (!action) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Acci√≥n es requerida'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        // Verificar autenticaci√≥n y permisos de admin\r\n        const authResult = await withTimeout(\r\n          () => getAuthenticatedUser(request),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Verificaci√≥n de autenticaci√≥n'\r\n        );\r\n\r\n        if (!authResult.userId || !authResult.isAdmin) {\r\n          // Log del intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'write');\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Permisos de administrador requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 403 });\r\n        }\r\n\r\n    switch (action) {\r\n      case 'update_alert':\r\n        // Actualizar estado de alerta\r\n        if (!alertId) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId es requerido'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const updateResult = await updateSecurityAlert(alertId, {\r\n          status,\r\n          assigned_to: assignedTo,\r\n          resolution_notes: notes\r\n        });\r\n\r\n        const updateResponse: ApiResponse<any> = {\r\n          data: { success: updateResult },\r\n          success: updateResult,\r\n          message: updateResult ? 'Alerta actualizada' : 'Error actualizando alerta'\r\n        };\r\n        return NextResponse.json(updateResponse, { \r\n          status: updateResult ? 200 : 500 \r\n        });\r\n\r\n      case 'resolve_alert':\r\n        // Resolver alerta\r\n        if (!alertId || !notes) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId y notes son requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const resolveResult = await resolveSecurityAlert(\r\n          alertId, \r\n          notes, \r\n          authResult.userId\r\n        );\r\n\r\n        const resolveResponse: ApiResponse<any> = {\r\n          data: { success: resolveResult },\r\n          success: resolveResult,\r\n          message: resolveResult ? 'Alerta resuelta' : 'Error resolviendo alerta'\r\n        };\r\n        return NextResponse.json(resolveResponse, { \r\n          status: resolveResult ? 200 : 500 \r\n        });\r\n\r\n      case 'false_positive':\r\n        // Marcar como falso positivo\r\n        if (!alertId || !notes) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId y notes son requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const fpResult = await markAlertAsFalsePositive(\r\n          alertId, \r\n          notes, \r\n          authResult.userId\r\n        );\r\n\r\n        const fpResponse: ApiResponse<any> = {\r\n          data: { success: fpResult },\r\n          success: fpResult,\r\n          message: fpResult ? 'Alerta marcada como falso positivo' : 'Error marcando alerta'\r\n        };\r\n        return NextResponse.json(fpResponse, { \r\n          status: fpResult ? 200 : 500 \r\n        });\r\n\r\n      case 'cleanup':\r\n        // Limpiar eventos antiguos\r\n        const daysToKeep = body.daysToKeep || 90;\r\n        const cleanupCount = await cleanupOldSecurityEvents(daysToKeep);\r\n\r\n        const cleanupResponse: ApiResponse<any> = {\r\n          data: { deletedCount: cleanupCount },\r\n          success: true,\r\n          message: `Limpieza completada: ${cleanupCount} eventos eliminados`\r\n        };\r\n        return NextResponse.json(cleanupResponse);\r\n\r\n      case 'force_analysis':\r\n        // Forzar an√°lisis de seguridad\r\n        const forceUserId = body.userId;\r\n        const forceTimeWindow = body.timeWindow || 24;\r\n        \r\n        const forceAlerts = await analyzeSecurityPatterns(forceUserId, forceTimeWindow);\r\n        \r\n        const forceResponse: ApiResponse<any> = {\r\n          data: { alerts: forceAlerts, count: forceAlerts.length },\r\n          success: true,\r\n          message: `An√°lisis forzado completado: ${forceAlerts.length} alertas generadas`\r\n        };\r\n        return NextResponse.json(forceResponse);\r\n\r\n        default:\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Acci√≥n no v√°lida: ${action}`\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n      } catch (error) {\r\n        // Log del error de seguridad\r\n        securityLogger.logApiError(securityLogger.context, error as Error, {\r\n          endpoint: '/api/auth/security',\r\n          method: 'POST',\r\n          action: request.url\r\n        });\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Error interno del servidor'\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}