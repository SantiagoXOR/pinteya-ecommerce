9ca839645c69271cb20aa69706581f43
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2iztof0djv() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\auth\\security\\route.ts";
  var hash = "5264e7c708509355b15bc9739f9349b9025f7be7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\auth\\security\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 19
        },
        end: {
          line: 24,
          column: 61
        }
      },
      "9": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 82
        }
      },
      "10": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 73
        }
      },
      "11": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 86
        }
      },
      "12": {
        start: {
          line: 28,
          column: 21
        },
        end: {
          line: 28,
          column: 74
        }
      },
      "13": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 74
        }
      },
      "14": {
        start: {
          line: 30,
          column: 21
        },
        end: {
          line: 30,
          column: 67
        }
      },
      "15": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 24
        }
      },
      "16": {
        start: {
          line: 34,
          column: 28
        },
        end: {
          line: 218,
          column: 6
        }
      },
      "17": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 36,
          column: 81
        }
      },
      "18": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "19": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 89
        }
      },
      "20": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 44
        }
      },
      "21": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 41,
          column: 70
        }
      },
      "22": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "23": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 61
        }
      },
      "24": {
        start: {
          line: 45,
          column: 37
        },
        end: {
          line: 48,
          column: 110
        }
      },
      "25": {
        start: {
          line: 45,
          column: 77
        },
        end: {
          line: 48,
          column: 18
        }
      },
      "26": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "27": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 100
        }
      },
      "28": {
        start: {
          line: 52,
          column: 38
        },
        end: {
          line: 58,
          column: 17
        }
      },
      "29": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "30": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 63,
          column: 52
        }
      },
      "31": {
        start: {
          line: 65,
          column: 33
        },
        end: {
          line: 65,
          column: 84
        }
      },
      "32": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "33": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "34": {
        start: {
          line: 74,
          column: 36
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "35": {
        start: {
          line: 74,
          column: 116
        },
        end: {
          line: 74,
          column: 164
        }
      },
      "36": {
        start: {
          line: 76,
          column: 44
        },
        end: {
          line: 89,
          column: 21
        }
      },
      "37": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 70
        }
      },
      "38": {
        start: {
          line: 93,
          column: 35
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "39": {
        start: {
          line: 93,
          column: 136
        },
        end: {
          line: 93,
          column: 218
        }
      },
      "40": {
        start: {
          line: 95,
          column: 43
        },
        end: {
          line: 108,
          column: 21
        }
      },
      "41": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 109,
          column: 69
        }
      },
      "42": {
        start: {
          line: 112,
          column: 39
        },
        end: {
          line: 112,
          column: 91
        }
      },
      "43": {
        start: {
          line: 113,
          column: 43
        },
        end: {
          line: 113,
          column: 133
        }
      },
      "44": {
        start: {
          line: 114,
          column: 45
        },
        end: {
          line: 121,
          column: 21
        }
      },
      "45": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 71
        }
      },
      "46": {
        start: {
          line: 125,
          column: 40
        },
        end: {
          line: 125,
          column: 98
        }
      },
      "47": {
        start: {
          line: 126,
          column: 43
        },
        end: {
          line: 130,
          column: 21
        }
      },
      "48": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 69
        }
      },
      "49": {
        start: {
          line: 134,
          column: 41
        },
        end: {
          line: 134,
          column: 74
        }
      },
      "50": {
        start: {
          line: 135,
          column: 39
        },
        end: {
          line: 135,
          column: 70
        }
      },
      "51": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 145,
          column: 21
        }
      },
      "52": {
        start: {
          line: 137,
          column: 46
        },
        end: {
          line: 141,
          column: 25
        }
      },
      "53": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 144,
          column: 27
        }
      },
      "54": {
        start: {
          line: 146,
          column: 38
        },
        end: {
          line: 146,
          column: 60
        }
      },
      "55": {
        start: {
          line: 147,
          column: 36
        },
        end: {
          line: 147,
          column: 56
        }
      },
      "56": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 157,
          column: 21
        }
      },
      "57": {
        start: {
          line: 149,
          column: 46
        },
        end: {
          line: 153,
          column: 25
        }
      },
      "58": {
        start: {
          line: 154,
          column: 24
        },
        end: {
          line: 156,
          column: 27
        }
      },
      "59": {
        start: {
          line: 158,
          column: 35
        },
        end: {
          line: 158,
          column: 111
        }
      },
      "60": {
        start: {
          line: 159,
          column: 43
        },
        end: {
          line: 165,
          column: 21
        }
      },
      "61": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 69
        }
      },
      "62": {
        start: {
          line: 169,
          column: 43
        },
        end: {
          line: 169,
          column: 76
        }
      },
      "63": {
        start: {
          line: 170,
          column: 41
        },
        end: {
          line: 170,
          column: 72
        }
      },
      "64": {
        start: {
          line: 171,
          column: 35
        },
        end: {
          line: 171,
          column: 75
        }
      },
      "65": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 181,
          column: 21
        }
      },
      "66": {
        start: {
          line: 173,
          column: 46
        },
        end: {
          line: 177,
          column: 25
        }
      },
      "67": {
        start: {
          line: 178,
          column: 24
        },
        end: {
          line: 180,
          column: 27
        }
      },
      "68": {
        start: {
          line: 182,
          column: 40
        },
        end: {
          line: 182,
          column: 64
        }
      },
      "69": {
        start: {
          line: 183,
          column: 38
        },
        end: {
          line: 183,
          column: 60
        }
      },
      "70": {
        start: {
          line: 184,
          column: 39
        },
        end: {
          line: 184,
          column: 125
        }
      },
      "71": {
        start: {
          line: 186,
          column: 36
        },
        end: {
          line: 186,
          column: 49
        }
      },
      "72": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 101
        }
      },
      "73": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 141
        }
      },
      "74": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 191,
          column: 23
        }
      },
      "75": {
        start: {
          line: 193,
          column: 42
        },
        end: {
          line: 197,
          column: 21
        }
      },
      "76": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 200,
          column: 23
        }
      },
      "77": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "78": {
        start: {
          line: 209,
          column: 34
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "79": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 216,
          column: 15
        }
      },
      "80": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 219,
          column: 27
        }
      },
      "81": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 381,
          column: 6
        }
      },
      "82": {
        start: {
          line: 225,
          column: 31
        },
        end: {
          line: 225,
          column: 81
        }
      },
      "83": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "84": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 90
        }
      },
      "85": {
        start: {
          line: 229,
          column: 25
        },
        end: {
          line: 229,
          column: 177
        }
      },
      "86": {
        start: {
          line: 229,
          column: 65
        },
        end: {
          line: 229,
          column: 79
        }
      },
      "87": {
        start: {
          line: 230,
          column: 67
        },
        end: {
          line: 230,
          column: 71
        }
      },
      "88": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "89": {
        start: {
          line: 232,
          column: 38
        },
        end: {
          line: 236,
          column: 17
        }
      },
      "90": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 239,
          column: 19
        }
      },
      "91": {
        start: {
          line: 242,
          column: 31
        },
        end: {
          line: 242,
          column: 213
        }
      },
      "92": {
        start: {
          line: 242,
          column: 71
        },
        end: {
          line: 242,
          column: 116
        }
      },
      "93": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "94": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 101
        }
      },
      "95": {
        start: {
          line: 246,
          column: 38
        },
        end: {
          line: 250,
          column: 17
        }
      },
      "96": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 253,
          column: 19
        }
      },
      "97": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "98": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 267,
          column: 21
        }
      },
      "99": {
        start: {
          line: 259,
          column: 46
        },
        end: {
          line: 263,
          column: 25
        }
      },
      "100": {
        start: {
          line: 264,
          column: 24
        },
        end: {
          line: 266,
          column: 27
        }
      },
      "101": {
        start: {
          line: 268,
          column: 41
        },
        end: {
          line: 272,
          column: 22
        }
      },
      "102": {
        start: {
          line: 273,
          column: 43
        },
        end: {
          line: 279,
          column: 21
        }
      },
      "103": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 282,
          column: 23
        }
      },
      "104": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 294,
          column: 21
        }
      },
      "105": {
        start: {
          line: 286,
          column: 46
        },
        end: {
          line: 290,
          column: 25
        }
      },
      "106": {
        start: {
          line: 291,
          column: 24
        },
        end: {
          line: 293,
          column: 27
        }
      },
      "107": {
        start: {
          line: 295,
          column: 42
        },
        end: {
          line: 295,
          column: 131
        }
      },
      "108": {
        start: {
          line: 296,
          column: 44
        },
        end: {
          line: 302,
          column: 21
        }
      },
      "109": {
        start: {
          line: 303,
          column: 20
        },
        end: {
          line: 305,
          column: 23
        }
      },
      "110": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 317,
          column: 21
        }
      },
      "111": {
        start: {
          line: 309,
          column: 46
        },
        end: {
          line: 313,
          column: 25
        }
      },
      "112": {
        start: {
          line: 314,
          column: 24
        },
        end: {
          line: 316,
          column: 27
        }
      },
      "113": {
        start: {
          line: 318,
          column: 37
        },
        end: {
          line: 318,
          column: 130
        }
      },
      "114": {
        start: {
          line: 319,
          column: 39
        },
        end: {
          line: 325,
          column: 21
        }
      },
      "115": {
        start: {
          line: 326,
          column: 20
        },
        end: {
          line: 328,
          column: 23
        }
      },
      "116": {
        start: {
          line: 331,
          column: 39
        },
        end: {
          line: 331,
          column: 60
        }
      },
      "117": {
        start: {
          line: 332,
          column: 41
        },
        end: {
          line: 332,
          column: 111
        }
      },
      "118": {
        start: {
          line: 333,
          column: 44
        },
        end: {
          line: 339,
          column: 21
        }
      },
      "119": {
        start: {
          line: 340,
          column: 20
        },
        end: {
          line: 340,
          column: 70
        }
      },
      "120": {
        start: {
          line: 343,
          column: 40
        },
        end: {
          line: 343,
          column: 51
        }
      },
      "121": {
        start: {
          line: 344,
          column: 44
        },
        end: {
          line: 344,
          column: 65
        }
      },
      "122": {
        start: {
          line: 345,
          column: 40
        },
        end: {
          line: 345,
          column: 127
        }
      },
      "123": {
        start: {
          line: 346,
          column: 42
        },
        end: {
          line: 353,
          column: 21
        }
      },
      "124": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 68
        }
      },
      "125": {
        start: {
          line: 356,
          column: 42
        },
        end: {
          line: 360,
          column: 21
        }
      },
      "126": {
        start: {
          line: 361,
          column: 20
        },
        end: {
          line: 363,
          column: 23
        }
      },
      "127": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 371,
          column: 15
        }
      },
      "128": {
        start: {
          line: 372,
          column: 34
        },
        end: {
          line: 376,
          column: 13
        }
      },
      "129": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "130": {
        start: {
          line: 382,
          column: 4
        },
        end: {
          line: 382,
          column: 27
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 18
          }
        },
        loc: {
          start: {
            line: 32,
            column: 28
          },
          end: {
            line: 220,
            column: 1
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 34,
            column: 113
          },
          end: {
            line: 34,
            column: 114
          }
        },
        loc: {
          start: {
            line: 34,
            column: 123
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 34
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 45,
            column: 73
          },
          end: {
            line: 45,
            column: 74
          }
        },
        loc: {
          start: {
            line: 45,
            column: 77
          },
          end: {
            line: 48,
            column: 18
          }
        },
        line: 45
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 74,
            column: 112
          },
          end: {
            line: 74,
            column: 113
          }
        },
        loc: {
          start: {
            line: 74,
            column: 116
          },
          end: {
            line: 74,
            column: 164
          }
        },
        line: 74
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 93,
            column: 132
          },
          end: {
            line: 93,
            column: 133
          }
        },
        loc: {
          start: {
            line: 93,
            column: 136
          },
          end: {
            line: 93,
            column: 218
          }
        },
        line: 93
      },
      "9": {
        name: "POST",
        decl: {
          start: {
            line: 221,
            column: 15
          },
          end: {
            line: 221,
            column: 19
          }
        },
        loc: {
          start: {
            line: 221,
            column: 29
          },
          end: {
            line: 383,
            column: 1
          }
        },
        line: 221
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 223,
            column: 114
          },
          end: {
            line: 223,
            column: 115
          }
        },
        loc: {
          start: {
            line: 223,
            column: 124
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 223
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 229,
            column: 61
          },
          end: {
            line: 229,
            column: 62
          }
        },
        loc: {
          start: {
            line: 229,
            column: 65
          },
          end: {
            line: 229,
            column: 79
          }
        },
        line: 229
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 242,
            column: 67
          },
          end: {
            line: 242,
            column: 68
          }
        },
        loc: {
          start: {
            line: 242,
            column: 71
          },
          end: {
            line: 242,
            column: 116
          }
        },
        line: 242
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 41,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 41,
            column: 57
          }
        }, {
          start: {
            line: 41,
            column: 61
          },
          end: {
            line: 41,
            column: 70
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 20
          },
          end: {
            line: 48,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 20
          },
          end: {
            line: 48,
            column: 72
          }
        }, {
          start: {
            line: 48,
            column: 76
          },
          end: {
            line: 48,
            column: 81
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 55,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 55,
            column: 49
          }
        }, {
          start: {
            line: 55,
            column: 53
          },
          end: {
            line: 55,
            column: 91
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 60,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 60,
            column: 51
          }
        }, {
          start: {
            line: 60,
            column: 55
          },
          end: {
            line: 60,
            column: 58
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 90,
            column: 70
          }
        }, {
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 109,
            column: 69
          }
        }, {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 122,
            column: 71
          }
        }, {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 131,
            column: 69
          }
        }, {
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 166,
            column: 69
          }
        }, {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 191,
            column: 23
          }
        }, {
          start: {
            line: 192,
            column: 16
          },
          end: {
            line: 200,
            column: 23
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 93,
            column: 92
          },
          end: {
            line: 93,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 92
          },
          end: {
            line: 93,
            column: 98
          }
        }, {
          start: {
            line: 93,
            column: 102
          },
          end: {
            line: 93,
            column: 107
          }
        }],
        line: 93
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 111
          },
          end: {
            line: 93,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 111
          },
          end: {
            line: 93,
            column: 119
          }
        }, {
          start: {
            line: 93,
            column: 123
          },
          end: {
            line: 93,
            column: 128
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 188
          },
          end: {
            line: 93,
            column: 207
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 188
          },
          end: {
            line: 93,
            column: 194
          }
        }, {
          start: {
            line: 93,
            column: 198
          },
          end: {
            line: 93,
            column: 207
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 48
          },
          end: {
            line: 112,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 48
          },
          end: {
            line: 112,
            column: 82
          }
        }, {
          start: {
            line: 112,
            column: 86
          },
          end: {
            line: 112,
            column: 90
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 113,
            column: 101
          },
          end: {
            line: 113,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 101
          },
          end: {
            line: 113,
            column: 107
          }
        }, {
          start: {
            line: 113,
            column: 111
          },
          end: {
            line: 113,
            column: 120
          }
        }],
        line: 113
      },
      "11": {
        loc: {
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 145,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 145,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "12": {
        loc: {
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 37
          }
        }, {
          start: {
            line: 136,
            column: 41
          },
          end: {
            line: 136,
            column: 52
          }
        }],
        line: 136
      },
      "13": {
        loc: {
          start: {
            line: 148,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "14": {
        loc: {
          start: {
            line: 148,
            column: 24
          },
          end: {
            line: 148,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 24
          },
          end: {
            line: 148,
            column: 50
          }
        }, {
          start: {
            line: 148,
            column: 54
          },
          end: {
            line: 148,
            column: 78
          }
        }],
        line: 148
      },
      "15": {
        loc: {
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 171,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 171,
            column: 65
          }
        }, {
          start: {
            line: 171,
            column: 69
          },
          end: {
            line: 171,
            column: 75
          }
        }],
        line: 171
      },
      "16": {
        loc: {
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 181,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 181,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "17": {
        loc: {
          start: {
            line: 172,
            column: 24
          },
          end: {
            line: 172,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 24
          },
          end: {
            line: 172,
            column: 39
          }
        }, {
          start: {
            line: 172,
            column: 43
          },
          end: {
            line: 172,
            column: 56
          }
        }],
        line: 172
      },
      "18": {
        loc: {
          start: {
            line: 187,
            column: 48
          },
          end: {
            line: 187,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 68
          },
          end: {
            line: 187,
            column: 86
          }
        }, {
          start: {
            line: 187,
            column: 89
          },
          end: {
            line: 187,
            column: 99
          }
        }],
        line: 187
      },
      "19": {
        loc: {
          start: {
            line: 229,
            column: 81
          },
          end: {
            line: 229,
            column: 142
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 81
          },
          end: {
            line: 229,
            column: 133
          }
        }, {
          start: {
            line: 229,
            column: 137
          },
          end: {
            line: 229,
            column: 142
          }
        }],
        line: 229
      },
      "20": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "21": {
        loc: {
          start: {
            line: 242,
            column: 118
          },
          end: {
            line: 242,
            column: 179
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 118
          },
          end: {
            line: 242,
            column: 170
          }
        }, {
          start: {
            line: 242,
            column: 174
          },
          end: {
            line: 242,
            column: 179
          }
        }],
        line: 242
      },
      "22": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "23": {
        loc: {
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 243,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 243,
            column: 34
          }
        }, {
          start: {
            line: 243,
            column: 38
          },
          end: {
            line: 243,
            column: 57
          }
        }],
        line: 243
      },
      "24": {
        loc: {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 282,
            column: 23
          }
        }, {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 305,
            column: 23
          }
        }, {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 328,
            column: 23
          }
        }, {
          start: {
            line: 329,
            column: 16
          },
          end: {
            line: 340,
            column: 70
          }
        }, {
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 354,
            column: 68
          }
        }, {
          start: {
            line: 355,
            column: 16
          },
          end: {
            line: 363,
            column: 23
          }
        }],
        line: 255
      },
      "25": {
        loc: {
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 267,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 267,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "26": {
        loc: {
          start: {
            line: 278,
            column: 33
          },
          end: {
            line: 278,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 48
          },
          end: {
            line: 278,
            column: 68
          }
        }, {
          start: {
            line: 278,
            column: 71
          },
          end: {
            line: 278,
            column: 98
          }
        }],
        line: 278
      },
      "27": {
        loc: {
          start: {
            line: 281,
            column: 32
          },
          end: {
            line: 281,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 281,
            column: 47
          },
          end: {
            line: 281,
            column: 50
          }
        }, {
          start: {
            line: 281,
            column: 53
          },
          end: {
            line: 281,
            column: 56
          }
        }],
        line: 281
      },
      "28": {
        loc: {
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 294,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 294,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "29": {
        loc: {
          start: {
            line: 285,
            column: 24
          },
          end: {
            line: 285,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 24
          },
          end: {
            line: 285,
            column: 32
          }
        }, {
          start: {
            line: 285,
            column: 36
          },
          end: {
            line: 285,
            column: 42
          }
        }],
        line: 285
      },
      "30": {
        loc: {
          start: {
            line: 301,
            column: 33
          },
          end: {
            line: 301,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 49
          },
          end: {
            line: 301,
            column: 66
          }
        }, {
          start: {
            line: 301,
            column: 69
          },
          end: {
            line: 301,
            column: 95
          }
        }],
        line: 301
      },
      "31": {
        loc: {
          start: {
            line: 304,
            column: 32
          },
          end: {
            line: 304,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 304,
            column: 48
          },
          end: {
            line: 304,
            column: 51
          }
        }, {
          start: {
            line: 304,
            column: 54
          },
          end: {
            line: 304,
            column: 57
          }
        }],
        line: 304
      },
      "32": {
        loc: {
          start: {
            line: 308,
            column: 20
          },
          end: {
            line: 317,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 20
          },
          end: {
            line: 317,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "33": {
        loc: {
          start: {
            line: 308,
            column: 24
          },
          end: {
            line: 308,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 308,
            column: 24
          },
          end: {
            line: 308,
            column: 32
          }
        }, {
          start: {
            line: 308,
            column: 36
          },
          end: {
            line: 308,
            column: 42
          }
        }],
        line: 308
      },
      "34": {
        loc: {
          start: {
            line: 324,
            column: 33
          },
          end: {
            line: 324,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 44
          },
          end: {
            line: 324,
            column: 80
          }
        }, {
          start: {
            line: 324,
            column: 83
          },
          end: {
            line: 324,
            column: 106
          }
        }],
        line: 324
      },
      "35": {
        loc: {
          start: {
            line: 327,
            column: 32
          },
          end: {
            line: 327,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 327,
            column: 43
          },
          end: {
            line: 327,
            column: 46
          }
        }, {
          start: {
            line: 327,
            column: 49
          },
          end: {
            line: 327,
            column: 52
          }
        }],
        line: 327
      },
      "36": {
        loc: {
          start: {
            line: 331,
            column: 39
          },
          end: {
            line: 331,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 39
          },
          end: {
            line: 331,
            column: 54
          }
        }, {
          start: {
            line: 331,
            column: 58
          },
          end: {
            line: 331,
            column: 60
          }
        }],
        line: 331
      },
      "37": {
        loc: {
          start: {
            line: 344,
            column: 44
          },
          end: {
            line: 344,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 44
          },
          end: {
            line: 344,
            column: 59
          }
        }, {
          start: {
            line: 344,
            column: 63
          },
          end: {
            line: 344,
            column: 65
          }
        }],
        line: 344
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\auth\\security\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API Enterprise de Auditor\xEDa de Seguridad Mejorada\r\n * Refactorizada con utilidades enterprise + RLS + validaciones robustas\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedUser } from '@/lib/auth/admin-auth';\r\nimport {\r\n  requireAdminAuth\r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  withCache,\r\n  getCacheStats\r\n} from '@/lib/auth/enterprise-cache';\r\nimport {\r\n  analyzeSecurityPatterns,\r\n  getSecurityMetrics,\r\n  generateSecurityReport,\r\n  getActiveSecurityAlerts,\r\n  updateSecurityAlert,\r\n  resolveSecurityAlert,\r\n  markAlertAsFalsePositive,\r\n  runSecurityHealthCheck,\r\n  cleanupOldSecurityEvents,\r\n  exportSecurityEvents\r\n} from '@/lib/auth/security-audit-enhanced';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { withRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/rate-limiter';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\nimport { withTimeout, ENDPOINT_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n\r\n// =====================================================\r\n// GET /api/auth/security\r\n// Obtiene m\xE9tricas, alertas o ejecuta an\xE1lisis\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Aplicar rate limiting para APIs de autenticaci\xF3n\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.auth,\r\n    async () => {\r\n      // Crear logger de seguridad\r\n      const securityLogger = createSecurityLogger(request);\r\n\r\n      try {\r\n        // Log del acceso al API de seguridad\r\n        securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'read');\r\n\r\n        const url = new URL(request.url);\r\n        const action = url.searchParams.get('action') || 'metrics';\r\n        const userId = url.searchParams.get('userId');\r\n        const severity = url.searchParams.get('severity') as any;\r\n\r\n        // ENTERPRISE: Autenticaci\xF3n enterprise con permisos espec\xEDficos de seguridad\r\n        const enterpriseResult = await withTimeout(\r\n          () => requireAdminAuth(request, ['security_read', 'admin_access']),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Autenticaci\xF3n enterprise'\r\n        );\r\n\r\n        if (!enterpriseResult.success) {\r\n          // Log del intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'read');\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: enterpriseResult.error || 'Permisos de administrador requeridos',\r\n            enterprise: true,\r\n            code: enterpriseResult.code\r\n          };\r\n          return NextResponse.json(errorResponse, { status: enterpriseResult.status || 403 });\r\n        }\r\n\r\n    const context = enterpriseResult.context!;\r\n\r\n    // LEGACY: Mantener compatibilidad con m\xE9todo anterior\r\n    const legacyResult = await getAuthenticatedUser(request);\r\n    console.log('\uD83D\uDD0D Security API: Enterprise vs Legacy auth comparison:', {\r\n      enterprise: enterpriseResult.success,\r\n      legacy: legacyResult.isAdmin,\r\n      agree: enterpriseResult.success === legacyResult.isAdmin\r\n    });\r\n\r\n    switch (action) {\r\n      case 'metrics':\r\n        // ENTERPRISE: Obtener m\xE9tricas de seguridad con cache\r\n        const metrics = await withCache(\r\n          `security_metrics_${context.userId}`,\r\n          () => getSecurityMetrics(),\r\n          2 * 60 * 1000 // 2 minutos de cache\r\n        );\r\n\r\n        const metricsResponse: ApiResponse<any> = {\r\n          data: {\r\n            metrics,\r\n            cache: getCacheStats(),\r\n            enterprise: {\r\n              user: context.userId,\r\n              role: context.role,\r\n              permissions: context.permissions\r\n            }\r\n          },\r\n          success: true,\r\n          message: 'M\xE9tricas de seguridad obtenidas (enterprise)',\r\n          enterprise: true\r\n        };\r\n        return NextResponse.json(metricsResponse);\r\n\r\n      case 'alerts':\r\n        // ENTERPRISE: Obtener alertas activas con cache\r\n        const alerts = await withCache(\r\n          `security_alerts_${userId || 'all'}_${severity || 'all'}`,\r\n          () => getActiveSecurityAlerts(userId || undefined, severity),\r\n          1 * 60 * 1000 // 1 minuto de cache\r\n        );\r\n\r\n        const alertsResponse: ApiResponse<any> = {\r\n          data: {\r\n            alerts,\r\n            count: alerts.length,\r\n            cache: getCacheStats(),\r\n            enterprise: {\r\n              filtered_by_user: userId,\r\n              filtered_by_severity: severity,\r\n              requester: context.userId\r\n            }\r\n          },\r\n          success: true,\r\n          message: 'Alertas de seguridad obtenidas'\r\n        };\r\n        return NextResponse.json(alertsResponse);\r\n\r\n      case 'analyze':\r\n        // Ejecutar an\xE1lisis de patrones\r\n        const timeWindow = parseInt(url.searchParams.get('timeWindow') || '24');\r\n        const analysisAlerts = await analyzeSecurityPatterns(userId || undefined, timeWindow);\r\n        const analysisResponse: ApiResponse<any> = {\r\n          data: { alerts: analysisAlerts, count: analysisAlerts.length },\r\n          success: true,\r\n          message: `An\xE1lisis completado: ${analysisAlerts.length} alertas generadas`\r\n        };\r\n        return NextResponse.json(analysisResponse);\r\n\r\n      case 'health':\r\n        // Ejecutar verificaci\xF3n de salud de seguridad\r\n        const healthCheck = await runSecurityHealthCheck();\r\n        const healthResponse: ApiResponse<any> = {\r\n          data: healthCheck,\r\n          success: true,\r\n          message: `Estado de seguridad: ${healthCheck.status}`\r\n        };\r\n        return NextResponse.json(healthResponse);\r\n\r\n      case 'report':\r\n        // Generar reporte de seguridad\r\n        const startDateStr = url.searchParams.get('startDate');\r\n        const endDateStr = url.searchParams.get('endDate');\r\n        \r\n        if (!startDateStr || !endDateStr) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'startDate y endDate son requeridos para generar reporte'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const startDate = new Date(startDateStr);\r\n        const endDate = new Date(endDateStr);\r\n        \r\n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Fechas inv\xE1lidas'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const report = await generateSecurityReport(startDate, endDate);\r\n        const reportResponse: ApiResponse<any> = {\r\n          data: { report },\r\n          success: true,\r\n          message: 'Reporte de seguridad generado'\r\n        };\r\n        return NextResponse.json(reportResponse);\r\n\r\n      case 'export':\r\n        // Exportar eventos de seguridad\r\n        const exportStartStr = url.searchParams.get('startDate');\r\n        const exportEndStr = url.searchParams.get('endDate');\r\n        const format = url.searchParams.get('format') as 'json' | 'csv' || 'json';\r\n        \r\n        if (!exportStartStr || !exportEndStr) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'startDate y endDate son requeridos para exportar'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const exportStart = new Date(exportStartStr);\r\n        const exportEnd = new Date(exportEndStr);\r\n        \r\n        const exportData = await exportSecurityEvents(exportStart, exportEnd, format);\r\n        \r\n        // Retornar como archivo descargable\r\n        const headers = new Headers();\r\n        headers.set('Content-Type', format === 'json' ? 'application/json' : 'text/csv');\r\n        headers.set('Content-Disposition', `attachment; filename=\"security-events-${exportStartStr}-${exportEndStr}.${format}\"`);\r\n        \r\n        return new Response(exportData, { headers });\r\n\r\n        default:\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Acci\xF3n no v\xE1lida: ${action}`\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n      } catch (error) {\r\n        // Log del error de seguridad\r\n        securityLogger.logApiError(securityLogger.context, error as Error, {\r\n          endpoint: '/api/auth/security',\r\n          method: 'GET',\r\n          action: request.url\r\n        });\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Error interno del servidor'\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// =====================================================\r\n// POST /api/auth/security\r\n// Acciones sobre alertas y mantenimiento\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  // Aplicar rate limiting para APIs de autenticaci\xF3n (acciones administrativas)\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.admin,\r\n    async () => {\r\n      // Crear logger de seguridad\r\n      const securityLogger = createSecurityLogger(request);\r\n\r\n      try {\r\n        // Log del acceso al API de seguridad (POST)\r\n        securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'write');\r\n\r\n        const body = await withTimeout(\r\n          () => request.json(),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Lectura del body de la request'\r\n        );\r\n\r\n        const { action, alertId, status, notes, assignedTo } = body;\r\n\r\n        if (!action) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Acci\xF3n es requerida'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        // Verificar autenticaci\xF3n y permisos de admin\r\n        const authResult = await withTimeout(\r\n          () => getAuthenticatedUser(request),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Verificaci\xF3n de autenticaci\xF3n'\r\n        );\r\n\r\n        if (!authResult.userId || !authResult.isAdmin) {\r\n          // Log del intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'write');\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Permisos de administrador requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 403 });\r\n        }\r\n\r\n    switch (action) {\r\n      case 'update_alert':\r\n        // Actualizar estado de alerta\r\n        if (!alertId) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId es requerido'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const updateResult = await updateSecurityAlert(alertId, {\r\n          status,\r\n          assigned_to: assignedTo,\r\n          resolution_notes: notes\r\n        });\r\n\r\n        const updateResponse: ApiResponse<any> = {\r\n          data: { success: updateResult },\r\n          success: updateResult,\r\n          message: updateResult ? 'Alerta actualizada' : 'Error actualizando alerta'\r\n        };\r\n        return NextResponse.json(updateResponse, { \r\n          status: updateResult ? 200 : 500 \r\n        });\r\n\r\n      case 'resolve_alert':\r\n        // Resolver alerta\r\n        if (!alertId || !notes) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId y notes son requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const resolveResult = await resolveSecurityAlert(\r\n          alertId, \r\n          notes, \r\n          authResult.userId\r\n        );\r\n\r\n        const resolveResponse: ApiResponse<any> = {\r\n          data: { success: resolveResult },\r\n          success: resolveResult,\r\n          message: resolveResult ? 'Alerta resuelta' : 'Error resolviendo alerta'\r\n        };\r\n        return NextResponse.json(resolveResponse, { \r\n          status: resolveResult ? 200 : 500 \r\n        });\r\n\r\n      case 'false_positive':\r\n        // Marcar como falso positivo\r\n        if (!alertId || !notes) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId y notes son requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const fpResult = await markAlertAsFalsePositive(\r\n          alertId, \r\n          notes, \r\n          authResult.userId\r\n        );\r\n\r\n        const fpResponse: ApiResponse<any> = {\r\n          data: { success: fpResult },\r\n          success: fpResult,\r\n          message: fpResult ? 'Alerta marcada como falso positivo' : 'Error marcando alerta'\r\n        };\r\n        return NextResponse.json(fpResponse, { \r\n          status: fpResult ? 200 : 500 \r\n        });\r\n\r\n      case 'cleanup':\r\n        // Limpiar eventos antiguos\r\n        const daysToKeep = body.daysToKeep || 90;\r\n        const cleanupCount = await cleanupOldSecurityEvents(daysToKeep);\r\n\r\n        const cleanupResponse: ApiResponse<any> = {\r\n          data: { deletedCount: cleanupCount },\r\n          success: true,\r\n          message: `Limpieza completada: ${cleanupCount} eventos eliminados`\r\n        };\r\n        return NextResponse.json(cleanupResponse);\r\n\r\n      case 'force_analysis':\r\n        // Forzar an\xE1lisis de seguridad\r\n        const forceUserId = body.userId;\r\n        const forceTimeWindow = body.timeWindow || 24;\r\n        \r\n        const forceAlerts = await analyzeSecurityPatterns(forceUserId, forceTimeWindow);\r\n        \r\n        const forceResponse: ApiResponse<any> = {\r\n          data: { alerts: forceAlerts, count: forceAlerts.length },\r\n          success: true,\r\n          message: `An\xE1lisis forzado completado: ${forceAlerts.length} alertas generadas`\r\n        };\r\n        return NextResponse.json(forceResponse);\r\n\r\n        default:\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Acci\xF3n no v\xE1lida: ${action}`\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n      } catch (error) {\r\n        // Log del error de seguridad\r\n        securityLogger.logApiError(securityLogger.context, error as Error, {\r\n          endpoint: '/api/auth/security',\r\n          method: 'POST',\r\n          action: request.url\r\n        });\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Error interno del servidor'\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "rateLimitResult", "withRateLimit", "RATE_LIMIT_CONFIGS", "auth", "securityLogger", "createSecurityLogger", "logApiAccess", "context", "url", "URL", "action", "searchParams", "get", "userId", "severity", "enterpriseResult", "withTimeout", "requireAdminAuth", "ENDPOINT_TIMEOUTS", "success", "logPermissionDenied", "errorResponse", "data", "error", "enterprise", "code", "NextResponse", "json", "status", "legacyResult", "getAuthenticatedUser", "console", "log", "legacy", "isAdmin", "agree", "metrics", "withCache", "getSecurityMetrics", "metricsResponse", "cache", "getCacheStats", "user", "role", "permissions", "message", "alerts", "getActiveSecurityAlerts", "undefined", "alertsResponse", "count", "length", "filtered_by_user", "filtered_by_severity", "requester", "timeWindow", "parseInt", "analysisAlerts", "analyzeSecurityPatterns", "analysisResponse", "healthCheck", "runSecurityHealthCheck", "healthResponse", "startDateStr", "endDateStr", "startDate", "Date", "endDate", "isNaN", "getTime", "report", "generateSecurityReport", "reportResponse", "exportStartStr", "exportEndStr", "format", "exportStart", "exportEnd", "exportData", "exportSecurityEvents", "headers", "Headers", "set", "Response", "logApiError", "endpoint", "method", "admin", "body", "alertId", "notes", "assignedTo", "authResult", "updateResult", "updateSecurityAlert", "assigned_to", "resolution_notes", "updateResponse", "resolveResult", "resolveSecurityAlert", "resolveResponse", "fpResult", "markAlertAsFalsePositive", "fpResponse", "daysToKeep", "cleanupCount", "cleanupOldSecurityEvents", "cleanupResponse", "deletedCount", "forceUserId", "forceTimeWindow", "forceAlerts", "forceResponse"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5264e7c708509355b15bc9739f9349b9025f7be7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2iztof0djv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2iztof0djv();
cov_2iztof0djv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2iztof0djv().f[0]++;
  cov_2iztof0djv().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2iztof0djv().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2iztof0djv().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2iztof0djv().f[1]++;
    cov_2iztof0djv().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2iztof0djv().f[2]++;
    cov_2iztof0djv().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2iztof0djv().f[3]++;
    cov_2iztof0djv().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2iztof0djv().s[7]++, require("next/server"));
const _adminauth =
/* istanbul ignore next */
(cov_2iztof0djv().s[8]++, require("../../../../lib/auth/admin-auth"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_2iztof0djv().s[9]++, require("../../../../lib/auth/enterprise-auth-utils"));
const _enterprisecache =
/* istanbul ignore next */
(cov_2iztof0djv().s[10]++, require("../../../../lib/auth/enterprise-cache"));
const _securityauditenhanced =
/* istanbul ignore next */
(cov_2iztof0djv().s[11]++, require("../../../../lib/auth/security-audit-enhanced"));
const _ratelimiter =
/* istanbul ignore next */
(cov_2iztof0djv().s[12]++, require("../../../../lib/rate-limiting/rate-limiter"));
const _securitylogger =
/* istanbul ignore next */
(cov_2iztof0djv().s[13]++, require("../../../../lib/logging/security-logger"));
const _apitimeouts =
/* istanbul ignore next */
(cov_2iztof0djv().s[14]++, require("../../../../lib/config/api-timeouts"));
const runtime =
/* istanbul ignore next */
(cov_2iztof0djv().s[15]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_2iztof0djv().f[4]++;
  // Aplicar rate limiting para APIs de autenticaciÃ³n
  const rateLimitResult =
  /* istanbul ignore next */
  (cov_2iztof0djv().s[16]++, await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.auth, async () => {
    /* istanbul ignore next */
    cov_2iztof0djv().f[5]++;
    // Crear logger de seguridad
    const securityLogger =
    /* istanbul ignore next */
    (cov_2iztof0djv().s[17]++, (0, _securitylogger.createSecurityLogger)(request));
    /* istanbul ignore next */
    cov_2iztof0djv().s[18]++;
    try {
      /* istanbul ignore next */
      cov_2iztof0djv().s[19]++;
      // Log del acceso al API de seguridad
      securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'read');
      const url =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[20]++, new URL(request.url));
      const action =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[21]++,
      /* istanbul ignore next */
      (cov_2iztof0djv().b[0][0]++, url.searchParams.get('action')) ||
      /* istanbul ignore next */
      (cov_2iztof0djv().b[0][1]++, 'metrics'));
      const userId =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[22]++, url.searchParams.get('userId'));
      const severity =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[23]++, url.searchParams.get('severity'));
      // ENTERPRISE: AutenticaciÃ³n enterprise con permisos especÃ­ficos de seguridad
      const enterpriseResult =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[24]++, await (0, _apitimeouts.withTimeout)(() => {
        /* istanbul ignore next */
        cov_2iztof0djv().f[6]++;
        cov_2iztof0djv().s[25]++;
        return (0, _enterpriseauthutils.requireAdminAuth)(request, ['security_read', 'admin_access']);
      },
      /* istanbul ignore next */
      (cov_2iztof0djv().b[1][0]++, _apitimeouts.ENDPOINT_TIMEOUTS['/api/auth']?.request) ||
      /* istanbul ignore next */
      (cov_2iztof0djv().b[1][1]++, 15000), 'AutenticaciÃ³n enterprise'));
      /* istanbul ignore next */
      cov_2iztof0djv().s[26]++;
      if (!enterpriseResult.success) {
        /* istanbul ignore next */
        cov_2iztof0djv().b[2][0]++;
        cov_2iztof0djv().s[27]++;
        // Log del intento de acceso no autorizado
        securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'read');
        const errorResponse =
        /* istanbul ignore next */
        (cov_2iztof0djv().s[28]++, {
          data: null,
          success: false,
          error:
          /* istanbul ignore next */
          (cov_2iztof0djv().b[3][0]++, enterpriseResult.error) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[3][1]++, 'Permisos de administrador requeridos'),
          enterprise: true,
          code: enterpriseResult.code
        });
        /* istanbul ignore next */
        cov_2iztof0djv().s[29]++;
        return _server.NextResponse.json(errorResponse, {
          status:
          /* istanbul ignore next */
          (cov_2iztof0djv().b[4][0]++, enterpriseResult.status) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[4][1]++, 403)
        });
      } else
      /* istanbul ignore next */
      {
        cov_2iztof0djv().b[2][1]++;
      }
      const context =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[30]++, enterpriseResult.context);
      // LEGACY: Mantener compatibilidad con mÃ©todo anterior
      const legacyResult =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[31]++, await (0, _adminauth.getAuthenticatedUser)(request));
      /* istanbul ignore next */
      cov_2iztof0djv().s[32]++;
      console.log('ğ Security API: Enterprise vs Legacy auth comparison:', {
        enterprise: enterpriseResult.success,
        legacy: legacyResult.isAdmin,
        agree: enterpriseResult.success === legacyResult.isAdmin
      });
      /* istanbul ignore next */
      cov_2iztof0djv().s[33]++;
      switch (action) {
        case 'metrics':
          /* istanbul ignore next */
          cov_2iztof0djv().b[5][0]++;
          // ENTERPRISE: Obtener mÃ©tricas de seguridad con cache
          const metrics =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[34]++, await (0, _enterprisecache.withCache)(`security_metrics_${context.userId}`, () => {
            /* istanbul ignore next */
            cov_2iztof0djv().f[7]++;
            cov_2iztof0djv().s[35]++;
            return (0, _securityauditenhanced.getSecurityMetrics)();
          }, 2 * 60 * 1000 // 2 minutos de cache
          ));
          const metricsResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[36]++, {
            data: {
              metrics,
              cache: (0, _enterprisecache.getCacheStats)(),
              enterprise: {
                user: context.userId,
                role: context.role,
                permissions: context.permissions
              }
            },
            success: true,
            message: 'MÃ©tricas de seguridad obtenidas (enterprise)',
            enterprise: true
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[37]++;
          return _server.NextResponse.json(metricsResponse);
        case 'alerts':
          /* istanbul ignore next */
          cov_2iztof0djv().b[5][1]++;
          // ENTERPRISE: Obtener alertas activas con cache
          const alerts =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[38]++, await (0, _enterprisecache.withCache)(`security_alerts_${
          /* istanbul ignore next */
          (cov_2iztof0djv().b[6][0]++, userId) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[6][1]++, 'all')}_${
          /* istanbul ignore next */
          (cov_2iztof0djv().b[7][0]++, severity) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[7][1]++, 'all')}`, () => {
            /* istanbul ignore next */
            cov_2iztof0djv().f[8]++;
            cov_2iztof0djv().s[39]++;
            return (0, _securityauditenhanced.getActiveSecurityAlerts)(
            /* istanbul ignore next */
            (cov_2iztof0djv().b[8][0]++, userId) ||
            /* istanbul ignore next */
            (cov_2iztof0djv().b[8][1]++, undefined), severity);
          }, 1 * 60 * 1000 // 1 minuto de cache
          ));
          const alertsResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[40]++, {
            data: {
              alerts,
              count: alerts.length,
              cache: (0, _enterprisecache.getCacheStats)(),
              enterprise: {
                filtered_by_user: userId,
                filtered_by_severity: severity,
                requester: context.userId
              }
            },
            success: true,
            message: 'Alertas de seguridad obtenidas'
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[41]++;
          return _server.NextResponse.json(alertsResponse);
        case 'analyze':
          /* istanbul ignore next */
          cov_2iztof0djv().b[5][2]++;
          // Ejecutar anÃ¡lisis de patrones
          const timeWindow =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[42]++, parseInt(
          /* istanbul ignore next */
          (cov_2iztof0djv().b[9][0]++, url.searchParams.get('timeWindow')) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[9][1]++, '24')));
          const analysisAlerts =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[43]++, await (0, _securityauditenhanced.analyzeSecurityPatterns)(
          /* istanbul ignore next */
          (cov_2iztof0djv().b[10][0]++, userId) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[10][1]++, undefined), timeWindow));
          const analysisResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[44]++, {
            data: {
              alerts: analysisAlerts,
              count: analysisAlerts.length
            },
            success: true,
            message: `AnÃ¡lisis completado: ${analysisAlerts.length} alertas generadas`
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[45]++;
          return _server.NextResponse.json(analysisResponse);
        case 'health':
          /* istanbul ignore next */
          cov_2iztof0djv().b[5][3]++;
          // Ejecutar verificaciÃ³n de salud de seguridad
          const healthCheck =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[46]++, await (0, _securityauditenhanced.runSecurityHealthCheck)());
          const healthResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[47]++, {
            data: healthCheck,
            success: true,
            message: `Estado de seguridad: ${healthCheck.status}`
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[48]++;
          return _server.NextResponse.json(healthResponse);
        case 'report':
          /* istanbul ignore next */
          cov_2iztof0djv().b[5][4]++;
          // Generar reporte de seguridad
          const startDateStr =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[49]++, url.searchParams.get('startDate'));
          const endDateStr =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[50]++, url.searchParams.get('endDate'));
          /* istanbul ignore next */
          cov_2iztof0djv().s[51]++;
          if (
          /* istanbul ignore next */
          (cov_2iztof0djv().b[12][0]++, !startDateStr) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[12][1]++, !endDateStr)) {
            /* istanbul ignore next */
            cov_2iztof0djv().b[11][0]++;
            const errorResponse =
            /* istanbul ignore next */
            (cov_2iztof0djv().s[52]++, {
              data: null,
              success: false,
              error: 'startDate y endDate son requeridos para generar reporte'
            });
            /* istanbul ignore next */
            cov_2iztof0djv().s[53]++;
            return _server.NextResponse.json(errorResponse, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_2iztof0djv().b[11][1]++;
          }
          const startDate =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[54]++, new Date(startDateStr));
          const endDate =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[55]++, new Date(endDateStr));
          /* istanbul ignore next */
          cov_2iztof0djv().s[56]++;
          if (
          /* istanbul ignore next */
          (cov_2iztof0djv().b[14][0]++, isNaN(startDate.getTime())) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[14][1]++, isNaN(endDate.getTime()))) {
            /* istanbul ignore next */
            cov_2iztof0djv().b[13][0]++;
            const errorResponse =
            /* istanbul ignore next */
            (cov_2iztof0djv().s[57]++, {
              data: null,
              success: false,
              error: 'Fechas invÃ¡lidas'
            });
            /* istanbul ignore next */
            cov_2iztof0djv().s[58]++;
            return _server.NextResponse.json(errorResponse, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_2iztof0djv().b[13][1]++;
          }
          const report =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[59]++, await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate));
          const reportResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[60]++, {
            data: {
              report
            },
            success: true,
            message: 'Reporte de seguridad generado'
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[61]++;
          return _server.NextResponse.json(reportResponse);
        case 'export':
          /* istanbul ignore next */
          cov_2iztof0djv().b[5][5]++;
          // Exportar eventos de seguridad
          const exportStartStr =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[62]++, url.searchParams.get('startDate'));
          const exportEndStr =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[63]++, url.searchParams.get('endDate'));
          const format =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[64]++,
          /* istanbul ignore next */
          (cov_2iztof0djv().b[15][0]++, url.searchParams.get('format')) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[15][1]++, 'json'));
          /* istanbul ignore next */
          cov_2iztof0djv().s[65]++;
          if (
          /* istanbul ignore next */
          (cov_2iztof0djv().b[17][0]++, !exportStartStr) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[17][1]++, !exportEndStr)) {
            /* istanbul ignore next */
            cov_2iztof0djv().b[16][0]++;
            const errorResponse =
            /* istanbul ignore next */
            (cov_2iztof0djv().s[66]++, {
              data: null,
              success: false,
              error: 'startDate y endDate son requeridos para exportar'
            });
            /* istanbul ignore next */
            cov_2iztof0djv().s[67]++;
            return _server.NextResponse.json(errorResponse, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_2iztof0djv().b[16][1]++;
          }
          const exportStart =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[68]++, new Date(exportStartStr));
          const exportEnd =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[69]++, new Date(exportEndStr));
          const exportData =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[70]++, await (0, _securityauditenhanced.exportSecurityEvents)(exportStart, exportEnd, format));
          // Retornar como archivo descargable
          const headers =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[71]++, new Headers());
          /* istanbul ignore next */
          cov_2iztof0djv().s[72]++;
          headers.set('Content-Type', format === 'json' ?
          /* istanbul ignore next */
          (cov_2iztof0djv().b[18][0]++, 'application/json') :
          /* istanbul ignore next */
          (cov_2iztof0djv().b[18][1]++, 'text/csv'));
          /* istanbul ignore next */
          cov_2iztof0djv().s[73]++;
          headers.set('Content-Disposition', `attachment; filename="security-events-${exportStartStr}-${exportEndStr}.${format}"`);
          /* istanbul ignore next */
          cov_2iztof0djv().s[74]++;
          return new Response(exportData, {
            headers
          });
        default:
          /* istanbul ignore next */
          cov_2iztof0djv().b[5][6]++;
          const errorResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[75]++, {
            data: null,
            success: false,
            error: `AcciÃ³n no vÃ¡lida: ${action}`
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[76]++;
          return _server.NextResponse.json(errorResponse, {
            status: 400
          });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2iztof0djv().s[77]++;
      // Log del error de seguridad
      securityLogger.logApiError(securityLogger.context, error, {
        endpoint: '/api/auth/security',
        method: 'GET',
        action: request.url
      });
      const errorResponse =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[78]++, {
        data: null,
        success: false,
        error: 'Error interno del servidor'
      });
      /* istanbul ignore next */
      cov_2iztof0djv().s[79]++;
      return _server.NextResponse.json(errorResponse, {
        status: 500
      });
    }
  }));
  /* istanbul ignore next */
  cov_2iztof0djv().s[80]++;
  return rateLimitResult;
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2iztof0djv().f[9]++;
  // Aplicar rate limiting para APIs de autenticaciÃ³n (acciones administrativas)
  const rateLimitResult =
  /* istanbul ignore next */
  (cov_2iztof0djv().s[81]++, await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.admin, async () => {
    /* istanbul ignore next */
    cov_2iztof0djv().f[10]++;
    // Crear logger de seguridad
    const securityLogger =
    /* istanbul ignore next */
    (cov_2iztof0djv().s[82]++, (0, _securitylogger.createSecurityLogger)(request));
    /* istanbul ignore next */
    cov_2iztof0djv().s[83]++;
    try {
      /* istanbul ignore next */
      cov_2iztof0djv().s[84]++;
      // Log del acceso al API de seguridad (POST)
      securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'write');
      const body =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[85]++, await (0, _apitimeouts.withTimeout)(() => {
        /* istanbul ignore next */
        cov_2iztof0djv().f[11]++;
        cov_2iztof0djv().s[86]++;
        return request.json();
      },
      /* istanbul ignore next */
      (cov_2iztof0djv().b[19][0]++, _apitimeouts.ENDPOINT_TIMEOUTS['/api/auth']?.request) ||
      /* istanbul ignore next */
      (cov_2iztof0djv().b[19][1]++, 15000), 'Lectura del body de la request'));
      const {
        action,
        alertId,
        status,
        notes,
        assignedTo
      } =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[87]++, body);
      /* istanbul ignore next */
      cov_2iztof0djv().s[88]++;
      if (!action) {
        /* istanbul ignore next */
        cov_2iztof0djv().b[20][0]++;
        const errorResponse =
        /* istanbul ignore next */
        (cov_2iztof0djv().s[89]++, {
          data: null,
          success: false,
          error: 'AcciÃ³n es requerida'
        });
        /* istanbul ignore next */
        cov_2iztof0djv().s[90]++;
        return _server.NextResponse.json(errorResponse, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2iztof0djv().b[20][1]++;
      }
      // Verificar autenticaciÃ³n y permisos de admin
      const authResult =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[91]++, await (0, _apitimeouts.withTimeout)(() => {
        /* istanbul ignore next */
        cov_2iztof0djv().f[12]++;
        cov_2iztof0djv().s[92]++;
        return (0, _adminauth.getAuthenticatedUser)(request);
      },
      /* istanbul ignore next */
      (cov_2iztof0djv().b[21][0]++, _apitimeouts.ENDPOINT_TIMEOUTS['/api/auth']?.request) ||
      /* istanbul ignore next */
      (cov_2iztof0djv().b[21][1]++, 15000), 'VerificaciÃ³n de autenticaciÃ³n'));
      /* istanbul ignore next */
      cov_2iztof0djv().s[93]++;
      if (
      /* istanbul ignore next */
      (cov_2iztof0djv().b[23][0]++, !authResult.userId) ||
      /* istanbul ignore next */
      (cov_2iztof0djv().b[23][1]++, !authResult.isAdmin)) {
        /* istanbul ignore next */
        cov_2iztof0djv().b[22][0]++;
        cov_2iztof0djv().s[94]++;
        // Log del intento de acceso no autorizado
        securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'write');
        const errorResponse =
        /* istanbul ignore next */
        (cov_2iztof0djv().s[95]++, {
          data: null,
          success: false,
          error: 'Permisos de administrador requeridos'
        });
        /* istanbul ignore next */
        cov_2iztof0djv().s[96]++;
        return _server.NextResponse.json(errorResponse, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_2iztof0djv().b[22][1]++;
      }
      cov_2iztof0djv().s[97]++;
      switch (action) {
        case 'update_alert':
          /* istanbul ignore next */
          cov_2iztof0djv().b[24][0]++;
          cov_2iztof0djv().s[98]++;
          // Actualizar estado de alerta
          if (!alertId) {
            /* istanbul ignore next */
            cov_2iztof0djv().b[25][0]++;
            const errorResponse =
            /* istanbul ignore next */
            (cov_2iztof0djv().s[99]++, {
              data: null,
              success: false,
              error: 'alertId es requerido'
            });
            /* istanbul ignore next */
            cov_2iztof0djv().s[100]++;
            return _server.NextResponse.json(errorResponse, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_2iztof0djv().b[25][1]++;
          }
          const updateResult =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[101]++, await (0, _securityauditenhanced.updateSecurityAlert)(alertId, {
            status,
            assigned_to: assignedTo,
            resolution_notes: notes
          }));
          const updateResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[102]++, {
            data: {
              success: updateResult
            },
            success: updateResult,
            message: updateResult ?
            /* istanbul ignore next */
            (cov_2iztof0djv().b[26][0]++, 'Alerta actualizada') :
            /* istanbul ignore next */
            (cov_2iztof0djv().b[26][1]++, 'Error actualizando alerta')
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[103]++;
          return _server.NextResponse.json(updateResponse, {
            status: updateResult ?
            /* istanbul ignore next */
            (cov_2iztof0djv().b[27][0]++, 200) :
            /* istanbul ignore next */
            (cov_2iztof0djv().b[27][1]++, 500)
          });
        case 'resolve_alert':
          /* istanbul ignore next */
          cov_2iztof0djv().b[24][1]++;
          cov_2iztof0djv().s[104]++;
          // Resolver alerta
          if (
          /* istanbul ignore next */
          (cov_2iztof0djv().b[29][0]++, !alertId) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[29][1]++, !notes)) {
            /* istanbul ignore next */
            cov_2iztof0djv().b[28][0]++;
            const errorResponse =
            /* istanbul ignore next */
            (cov_2iztof0djv().s[105]++, {
              data: null,
              success: false,
              error: 'alertId y notes son requeridos'
            });
            /* istanbul ignore next */
            cov_2iztof0djv().s[106]++;
            return _server.NextResponse.json(errorResponse, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_2iztof0djv().b[28][1]++;
          }
          const resolveResult =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[107]++, await (0, _securityauditenhanced.resolveSecurityAlert)(alertId, notes, authResult.userId));
          const resolveResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[108]++, {
            data: {
              success: resolveResult
            },
            success: resolveResult,
            message: resolveResult ?
            /* istanbul ignore next */
            (cov_2iztof0djv().b[30][0]++, 'Alerta resuelta') :
            /* istanbul ignore next */
            (cov_2iztof0djv().b[30][1]++, 'Error resolviendo alerta')
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[109]++;
          return _server.NextResponse.json(resolveResponse, {
            status: resolveResult ?
            /* istanbul ignore next */
            (cov_2iztof0djv().b[31][0]++, 200) :
            /* istanbul ignore next */
            (cov_2iztof0djv().b[31][1]++, 500)
          });
        case 'false_positive':
          /* istanbul ignore next */
          cov_2iztof0djv().b[24][2]++;
          cov_2iztof0djv().s[110]++;
          // Marcar como falso positivo
          if (
          /* istanbul ignore next */
          (cov_2iztof0djv().b[33][0]++, !alertId) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[33][1]++, !notes)) {
            /* istanbul ignore next */
            cov_2iztof0djv().b[32][0]++;
            const errorResponse =
            /* istanbul ignore next */
            (cov_2iztof0djv().s[111]++, {
              data: null,
              success: false,
              error: 'alertId y notes son requeridos'
            });
            /* istanbul ignore next */
            cov_2iztof0djv().s[112]++;
            return _server.NextResponse.json(errorResponse, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_2iztof0djv().b[32][1]++;
          }
          const fpResult =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[113]++, await (0, _securityauditenhanced.markAlertAsFalsePositive)(alertId, notes, authResult.userId));
          const fpResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[114]++, {
            data: {
              success: fpResult
            },
            success: fpResult,
            message: fpResult ?
            /* istanbul ignore next */
            (cov_2iztof0djv().b[34][0]++, 'Alerta marcada como falso positivo') :
            /* istanbul ignore next */
            (cov_2iztof0djv().b[34][1]++, 'Error marcando alerta')
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[115]++;
          return _server.NextResponse.json(fpResponse, {
            status: fpResult ?
            /* istanbul ignore next */
            (cov_2iztof0djv().b[35][0]++, 200) :
            /* istanbul ignore next */
            (cov_2iztof0djv().b[35][1]++, 500)
          });
        case 'cleanup':
          /* istanbul ignore next */
          cov_2iztof0djv().b[24][3]++;
          // Limpiar eventos antiguos
          const daysToKeep =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[116]++,
          /* istanbul ignore next */
          (cov_2iztof0djv().b[36][0]++, body.daysToKeep) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[36][1]++, 90));
          const cleanupCount =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[117]++, await (0, _securityauditenhanced.cleanupOldSecurityEvents)(daysToKeep));
          const cleanupResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[118]++, {
            data: {
              deletedCount: cleanupCount
            },
            success: true,
            message: `Limpieza completada: ${cleanupCount} eventos eliminados`
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[119]++;
          return _server.NextResponse.json(cleanupResponse);
        case 'force_analysis':
          /* istanbul ignore next */
          cov_2iztof0djv().b[24][4]++;
          // Forzar anÃ¡lisis de seguridad
          const forceUserId =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[120]++, body.userId);
          const forceTimeWindow =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[121]++,
          /* istanbul ignore next */
          (cov_2iztof0djv().b[37][0]++, body.timeWindow) ||
          /* istanbul ignore next */
          (cov_2iztof0djv().b[37][1]++, 24));
          const forceAlerts =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[122]++, await (0, _securityauditenhanced.analyzeSecurityPatterns)(forceUserId, forceTimeWindow));
          const forceResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[123]++, {
            data: {
              alerts: forceAlerts,
              count: forceAlerts.length
            },
            success: true,
            message: `AnÃ¡lisis forzado completado: ${forceAlerts.length} alertas generadas`
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[124]++;
          return _server.NextResponse.json(forceResponse);
        default:
          /* istanbul ignore next */
          cov_2iztof0djv().b[24][5]++;
          const errorResponse =
          /* istanbul ignore next */
          (cov_2iztof0djv().s[125]++, {
            data: null,
            success: false,
            error: `AcciÃ³n no vÃ¡lida: ${action}`
          });
          /* istanbul ignore next */
          cov_2iztof0djv().s[126]++;
          return _server.NextResponse.json(errorResponse, {
            status: 400
          });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2iztof0djv().s[127]++;
      // Log del error de seguridad
      securityLogger.logApiError(securityLogger.context, error, {
        endpoint: '/api/auth/security',
        method: 'POST',
        action: request.url
      });
      const errorResponse =
      /* istanbul ignore next */
      (cov_2iztof0djv().s[128]++, {
        data: null,
        success: false,
        error: 'Error interno del servidor'
      });
      /* istanbul ignore next */
      cov_2iztof0djv().s[129]++;
      return _server.NextResponse.json(errorResponse, {
        status: 500
      });
    }
  }));
  /* istanbul ignore next */
  cov_2iztof0djv().s[130]++;
  return rateLimitResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,