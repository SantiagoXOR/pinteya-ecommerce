{"version":3,"names":["cov_invfiu2rl","actualCoverage","s","DELETE","f","GET","OPTIONS","POST","PUT","runtime","request","searchParams","URL","url","get","b","_server","NextResponse","json","success","data","message","description","usage","metrics","LCP","FID","CLS","FCP","TTFB","INP","thresholds","good","needsImprovement","poor","analysis","_seooptimizationtools","enhancedSEOOptimizationTools","analyzeCoreWebVitals","_logger","logger","info","LogLevel","INFO","overallScore","LogCategory","SEO","error","ERROR","details","Error","status","body","urls","options","Array","isArray","length","example","includeOptimizations","priorityOnly","results","errors","result","optimizations","filter","opt","priority","resultWithoutOptimizations","push","totalUrls","successfulAnalyses","summary","successful","failed","averageScore","Math","round","reduce","sum","r","lcp","fid","cls","fcp","ttfb","inp","requiredMetrics","metric","threshold","configure","coreWebVitalsThresholds","updatedMetrics","Object","keys","updatedThresholds","timestamp","Date","toISOString","defaultThresholds","origin","headers","corsHeaders","_corsconfig","generateCorsHeaders"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\seo\\core-web-vitals\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - CORE WEB VITALS API\r\n// API específica para análisis y optimización de Core Web Vitals\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { enhancedSEOOptimizationTools } from '@/lib/seo/seo-optimization-tools';\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\nimport { generateCorsHeaders } from '@/lib/security/cors-config';\r\n\r\n// ===================================\r\n// GET - Obtener información de Core Web Vitals\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const url = searchParams.get('url');\r\n\r\n    if (!url) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          message: 'Core Web Vitals Analysis API',\r\n          description: 'Analyze and optimize Core Web Vitals metrics',\r\n          usage: {\r\n            'GET ?url=https://example.com': 'Analyze Core Web Vitals for specific URL',\r\n            'POST': 'Batch analyze multiple URLs',\r\n            'PUT': 'Update Core Web Vitals thresholds'\r\n          },\r\n          metrics: {\r\n            LCP: 'Largest Contentful Paint - measures loading performance',\r\n            FID: 'First Input Delay - measures interactivity',\r\n            CLS: 'Cumulative Layout Shift - measures visual stability',\r\n            FCP: 'First Contentful Paint - measures perceived loading speed',\r\n            TTFB: 'Time to First Byte - measures server response time',\r\n            INP: 'Interaction to Next Paint - measures responsiveness'\r\n          },\r\n          thresholds: {\r\n            good: 'Green zone - optimal performance',\r\n            needsImprovement: 'Yellow zone - needs optimization',\r\n            poor: 'Red zone - critical issues'\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Analizar Core Web Vitals para la URL específica\r\n    const analysis = await enhancedSEOOptimizationTools.analyzeCoreWebVitals(url);\r\n\r\n    logger.info(LogLevel.INFO, 'Core Web Vitals analysis completed', {\r\n      url,\r\n      overallScore: analysis.overallScore\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: analysis\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Core Web Vitals API GET error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to analyze Core Web Vitals',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Análisis batch de múltiples URLs\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { urls, options } = body;\r\n\r\n    // Validar parámetros\r\n    if (!urls || !Array.isArray(urls) || urls.length === 0) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'urls array is required and must not be empty',\r\n        example: {\r\n          urls: [\r\n            'https://pinteya.com',\r\n            'https://pinteya.com/products/pintura-interior',\r\n            'https://pinteya.com/categories/pinturas'\r\n          ],\r\n          options: {\r\n            includeOptimizations: true,\r\n            priorityOnly: false\r\n          }\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Limitar número de URLs para evitar sobrecarga\r\n    if (urls.length > 10) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Maximum 10 URLs allowed per batch request'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    const results = [];\r\n    const errors = [];\r\n\r\n    // Analizar cada URL\r\n    for (const url of urls) {\r\n      try {\r\n        const analysis = await enhancedSEOOptimizationTools.analyzeCoreWebVitals(url);\r\n        \r\n        // Filtrar resultados según opciones\r\n        let result = analysis;\r\n        if (options?.priorityOnly) {\r\n          result = {\r\n            ...analysis,\r\n            optimizations: analysis.optimizations.filter(opt => \r\n              opt.priority === 'critical' || opt.priority === 'high'\r\n            )\r\n          };\r\n        }\r\n\r\n        if (!options?.includeOptimizations) {\r\n          const { optimizations, ...resultWithoutOptimizations } = result;\r\n          result = resultWithoutOptimizations;\r\n        }\r\n\r\n        results.push(result);\r\n\r\n      } catch (error) {\r\n        errors.push({\r\n          url,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, 'Batch Core Web Vitals analysis completed', {\r\n      totalUrls: urls.length,\r\n      successfulAnalyses: results.length,\r\n      errors: errors.length\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        results,\r\n        errors,\r\n        summary: {\r\n          totalUrls: urls.length,\r\n          successful: results.length,\r\n          failed: errors.length,\r\n          averageScore: results.length > 0 \r\n            ? Math.round(results.reduce((sum, r) => sum + r.overallScore, 0) / results.length)\r\n            : 0\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Core Web Vitals API POST error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to perform batch analysis',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar umbrales de Core Web Vitals\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { thresholds } = body;\r\n\r\n    if (!thresholds || typeof thresholds !== 'object') {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'thresholds object is required',\r\n        example: {\r\n          thresholds: {\r\n            lcp: { good: 2.5, needsImprovement: 4.0 },\r\n            fid: { good: 100, needsImprovement: 300 },\r\n            cls: { good: 0.1, needsImprovement: 0.25 },\r\n            fcp: { good: 1.8, needsImprovement: 3.0 },\r\n            ttfb: { good: 600, needsImprovement: 1500 },\r\n            inp: { good: 200, needsImprovement: 500 }\r\n          }\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Validar estructura de umbrales\r\n    const requiredMetrics = ['lcp', 'fid', 'cls', 'fcp', 'ttfb', 'inp'];\r\n    for (const metric of requiredMetrics) {\r\n      if (thresholds[metric]) {\r\n        const threshold = thresholds[metric];\r\n        if (!threshold.good || !threshold.needsImprovement) {\r\n          return NextResponse.json({\r\n            success: false,\r\n            error: `Threshold for ${metric} must have 'good' and 'needsImprovement' values`\r\n          }, { status: 400 });\r\n        }\r\n        \r\n        if (threshold.good >= threshold.needsImprovement) {\r\n          return NextResponse.json({\r\n            success: false,\r\n            error: `For ${metric}, 'good' threshold must be less than 'needsImprovement' threshold`\r\n          }, { status: 400 });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Actualizar configuración\r\n    enhancedSEOOptimizationTools.configure({\r\n      coreWebVitalsThresholds: thresholds\r\n    });\r\n\r\n    logger.info(LogLevel.INFO, 'Core Web Vitals thresholds updated', {\r\n      updatedMetrics: Object.keys(thresholds)\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        message: 'Core Web Vitals thresholds updated successfully',\r\n        updatedThresholds: thresholds,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Core Web Vitals API PUT error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to update thresholds',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Resetear umbrales a valores por defecto\r\n// ===================================\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Resetear a configuración por defecto\r\n    enhancedSEOOptimizationTools.configure({\r\n      coreWebVitalsThresholds: {\r\n        lcp: { good: 2.5, needsImprovement: 4.0 },\r\n        fid: { good: 100, needsImprovement: 300 },\r\n        cls: { good: 0.1, needsImprovement: 0.25 },\r\n        fcp: { good: 1.8, needsImprovement: 3.0 },\r\n        ttfb: { good: 600, needsImprovement: 1500 },\r\n        inp: { good: 200, needsImprovement: 500 }\r\n      }\r\n    });\r\n\r\n    logger.info(LogLevel.INFO, 'Core Web Vitals thresholds reset to defaults', {}, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        message: 'Core Web Vitals thresholds reset to default values',\r\n        defaultThresholds: {\r\n          lcp: { good: 2.5, needsImprovement: 4.0 },\r\n          fid: { good: 100, needsImprovement: 300 },\r\n          cls: { good: 0.1, needsImprovement: 0.25 },\r\n          fcp: { good: 1.8, needsImprovement: 3.0 },\r\n          ttfb: { good: 600, needsImprovement: 1500 },\r\n          inp: { good: 200, needsImprovement: 500 }\r\n        },\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Core Web Vitals API DELETE error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to reset thresholds',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// OPCIONES CORS\r\n// ===================================\r\nexport async function OPTIONS(request: NextRequest) {\r\n  const origin = request.headers.get('origin');\r\n  const corsHeaders = generateCorsHeaders(origin, 'public');\r\n  \r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: corsHeaders,\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}