{"version":3,"names":["cov_1ycahayvh4","actualCoverage","s","GET","f","runtime","ReportFiltersSchema","_zod","z","object","report_type","enum","date_range","start","string","datetime","end","granularity","default","filters","category_ids","array","uuid","optional","product_ids","user_roles","order_status","payment_status","min_amount","number","min","max_amount","validateAdminAuth","b","process","env","NODE_ENV","BYPASS_AUTH","user","id","email","name","userId","session","_config","auth","error","status","isAdmin","_logger","logger","log","LogLevel","ERROR","LogCategory","AUTH","generateSalesReport","ordersQuery","_supabase","supabaseAdmin","from","select","gte","lte","in","data","orders","completedOrders","filter","o","total_revenue","reduce","sum","order","total","total_orders","length","average_order_value","conversion_rate","periodLength","Date","getTime","previousStart","toISOString","previousEnd","previousOrders","eq","lt","previousRevenue","growth_rate","timeline","generateTimeline","productSales","Map","forEach","order_items","item","productId","product_id","has","set","products","revenue","units_sold","product","get","price","quantity","top_products","Array","values","sort","a","slice","map","p","growth","paymentMethods","method","payment_method","count","pm","payment_methods","percentage","summary","generateProductsReport","productsQuery","total_products","active_products","is_active","out_of_stock","stock_quantity","low_stock","min_stock_level","total_inventory_value","performance","completedSales","created_at","sales","views","stock_level","categoryStats","categoryId","category_id","categoryName","categories","product_count","category","cat","inventory_alerts","current_stock","min_stock","generateUsersReport","users","dateStart","dateEnd","total_users","active_users","u","new_users","generateUserTimeline","segments","segment","avg_order_value","top_customers","total_spent","lastOrder","last_order","retention_rate","churn_rate","generatePerformanceReport","page_views","unique_visitors","bounce_rate","avg_session_duration","traffic_sources","popular_pages","device_breakdown","dateRange","current","nextPeriod","setHours","getHours","setDate","getDate","setMonth","getMonth","periodOrders","orderDate","uniqueCustomers","Set","user_id","size","push","date","customers","request","startTime","now","rateLimitResult","_ratelimiting","checkRateLimit","windowMs","_ratelimiter","RATE_LIMIT_CONFIGS","admin","maxRequests","message","success","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","searchParams","URL","url","reportParams","split","Boolean","parseFloat","undefined","validationResult","safeParse","reportData","_metrics","metricsCollector","recordApiCall","endpoint","statusCode","responseTime","INFO","ADMIN","adminUserId","reportType","generated_at","nextResponse","API","Error"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\reports\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN REPORTS API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst ReportFiltersSchema = z.object({\r\n  report_type: z.enum(['sales', 'products', 'users', 'inventory', 'performance']),\r\n  date_range: z.object({\r\n    start: z.string().datetime(),\r\n    end: z.string().datetime()\r\n  }),\r\n  granularity: z.enum(['hour', 'day', 'week', 'month']).default('day'),\r\n  filters: z.object({\r\n    category_ids: z.array(z.string().uuid()).optional(),\r\n    product_ids: z.array(z.string().uuid()).optional(),\r\n    user_roles: z.array(z.enum(['user', 'admin', 'moderator'])).optional(),\r\n    order_status: z.array(z.enum(['pending', 'processing', 'shipped', 'delivered', 'cancelled'])).optional(),\r\n    payment_status: z.array(z.enum(['pending', 'completed', 'failed', 'refunded'])).optional(),\r\n    min_amount: z.number().min(0).optional(),\r\n    max_amount: z.number().min(0).optional()\r\n  }).optional()\r\n});\r\n\r\n// ===================================\r\n// TIPOS DE DATOS\r\n// ===================================\r\n\r\ninterface SalesReport {\r\n  summary: {\r\n    total_revenue: number;\r\n    total_orders: number;\r\n    average_order_value: number;\r\n    conversion_rate: number;\r\n    growth_rate: number;\r\n  };\r\n  timeline: Array<{\r\n    date: string;\r\n    revenue: number;\r\n    orders: number;\r\n    customers: number;\r\n  }>;\r\n  top_products: Array<{\r\n    id: string;\r\n    name: string;\r\n    revenue: number;\r\n    units_sold: number;\r\n    growth: number;\r\n  }>;\r\n  payment_methods: Array<{\r\n    method: string;\r\n    count: number;\r\n    revenue: number;\r\n    percentage: number;\r\n  }>;\r\n}\r\n\r\ninterface ProductsReport {\r\n  summary: {\r\n    total_products: number;\r\n    active_products: number;\r\n    out_of_stock: number;\r\n    low_stock: number;\r\n    total_inventory_value: number;\r\n  };\r\n  performance: Array<{\r\n    id: string;\r\n    name: string;\r\n    views: number;\r\n    sales: number;\r\n    conversion_rate: number;\r\n    revenue: number;\r\n    stock_level: number;\r\n  }>;\r\n  categories: Array<{\r\n    id: string;\r\n    name: string;\r\n    product_count: number;\r\n    revenue: number;\r\n    growth: number;\r\n  }>;\r\n  inventory_alerts: Array<{\r\n    id: string;\r\n    name: string;\r\n    current_stock: number;\r\n    min_stock: number;\r\n    status: 'out_of_stock' | 'low_stock';\r\n  }>;\r\n}\r\n\r\ninterface UsersReport {\r\n  summary: {\r\n    total_users: number;\r\n    active_users: number;\r\n    new_users: number;\r\n    retention_rate: number;\r\n    churn_rate: number;\r\n  };\r\n  timeline: Array<{\r\n    date: string;\r\n    new_users: number;\r\n    active_users: number;\r\n    orders: number;\r\n  }>;\r\n  segments: Array<{\r\n    segment: string;\r\n    count: number;\r\n    revenue: number;\r\n    avg_order_value: number;\r\n  }>;\r\n  top_customers: Array<{\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n    total_orders: number;\r\n    total_spent: number;\r\n    last_order: string;\r\n  }>;\r\n}\r\n\r\ninterface PerformanceReport {\r\n  summary: {\r\n    page_views: number;\r\n    unique_visitors: number;\r\n    bounce_rate: number;\r\n    avg_session_duration: number;\r\n    conversion_rate: number;\r\n  };\r\n  traffic_sources: Array<{\r\n    source: string;\r\n    visitors: number;\r\n    conversions: number;\r\n    revenue: number;\r\n  }>;\r\n  popular_pages: Array<{\r\n    path: string;\r\n    views: number;\r\n    unique_views: number;\r\n    avg_time: number;\r\n  }>;\r\n  device_breakdown: Array<{\r\n    device: string;\r\n    sessions: number;\r\n    percentage: number;\r\n  }>;\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    // BYPASS TEMPORAL PARA DESARROLLO\r\n    if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\r\n      return {\r\n        user: {\r\n          id: 'dev-admin',\r\n          email: 'santiago@xor.com.ar',\r\n          name: 'Dev Admin'\r\n        },\r\n        userId: 'dev-admin'\r\n      };\r\n    }\r\n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\r\n    return { error: 'Error de autenticación', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES DE GENERACIÓN DE REPORTES\r\n// ===================================\r\n\r\nasync function generateSalesReport(filters: any): Promise<SalesReport> {\r\n  const { date_range, granularity } = filters;\r\n  \r\n  // Consulta base para órdenes en el rango de fechas\r\n  let ordersQuery = supabaseAdmin\r\n    .from('orders')\r\n    .select(`\r\n      id,\r\n      total,\r\n      status,\r\n      payment_status,\r\n      payment_method,\r\n      created_at,\r\n      user_id,\r\n      order_items!inner(\r\n        quantity,\r\n        price,\r\n        product_id,\r\n        products!inner(\r\n          id,\r\n          name,\r\n          category_id\r\n        )\r\n      )\r\n    `)\r\n    .gte('created_at', date_range.start)\r\n    .lte('created_at', date_range.end);\r\n\r\n  // Aplicar filtros adicionales\r\n  if (filters.filters?.order_status) {\r\n    ordersQuery = ordersQuery.in('status', filters.filters.order_status);\r\n  }\r\n  if (filters.filters?.payment_status) {\r\n    ordersQuery = ordersQuery.in('payment_status', filters.filters.payment_status);\r\n  }\r\n  if (filters.filters?.min_amount) {\r\n    ordersQuery = ordersQuery.gte('total', filters.filters.min_amount);\r\n  }\r\n  if (filters.filters?.max_amount) {\r\n    ordersQuery = ordersQuery.lte('total', filters.filters.max_amount);\r\n  }\r\n\r\n  const { data: orders, error } = await ordersQuery;\r\n  if (error) {throw error;}\r\n\r\n  // Calcular métricas de resumen\r\n  const completedOrders = orders?.filter(o => o.status === 'completed') || [];\r\n  const total_revenue = completedOrders.reduce((sum, order) => sum + (order.total || 0), 0);\r\n  const total_orders = completedOrders.length;\r\n  const average_order_value = total_orders > 0 ? total_revenue / total_orders : 0;\r\n\r\n  // Calcular tasa de conversión (necesitaríamos datos de tráfico)\r\n  const conversion_rate = 0; // Placeholder\r\n\r\n  // Calcular tasa de crecimiento comparando con período anterior\r\n  const periodLength = new Date(date_range.end).getTime() - new Date(date_range.start).getTime();\r\n  const previousStart = new Date(new Date(date_range.start).getTime() - periodLength).toISOString();\r\n  const previousEnd = date_range.start;\r\n\r\n  const { data: previousOrders } = await supabaseAdmin\r\n    .from('orders')\r\n    .select('total')\r\n    .eq('status', 'completed')\r\n    .gte('created_at', previousStart)\r\n    .lt('created_at', previousEnd);\r\n\r\n  const previousRevenue = previousOrders?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;\r\n  const growth_rate = previousRevenue > 0 ? ((total_revenue - previousRevenue) / previousRevenue) * 100 : 0;\r\n\r\n  // Generar timeline según granularidad\r\n  const timeline = generateTimeline(completedOrders, date_range, granularity);\r\n\r\n  // Top productos\r\n  const productSales = new Map();\r\n  completedOrders.forEach(order => {\r\n    order.order_items?.forEach(item => {\r\n      const productId = item.product_id;\r\n      if (!productSales.has(productId)) {\r\n        productSales.set(productId, {\r\n          id: productId,\r\n          name: item.products?.name || 'Producto desconocido',\r\n          revenue: 0,\r\n          units_sold: 0\r\n        });\r\n      }\r\n      const product = productSales.get(productId);\r\n      product.revenue += (item.price || 0) * (item.quantity || 0);\r\n      product.units_sold += item.quantity || 0;\r\n    });\r\n  });\r\n\r\n  const top_products = Array.from(productSales.values())\r\n    .sort((a, b) => b.revenue - a.revenue)\r\n    .slice(0, 10)\r\n    .map(p => ({ ...p, growth: 0 })); // Placeholder para crecimiento\r\n\r\n  // Métodos de pago\r\n  const paymentMethods = new Map();\r\n  completedOrders.forEach(order => {\r\n    const method = order.payment_method || 'unknown';\r\n    if (!paymentMethods.has(method)) {\r\n      paymentMethods.set(method, { method, count: 0, revenue: 0 });\r\n    }\r\n    const pm = paymentMethods.get(method);\r\n    pm.count++;\r\n    pm.revenue += order.total || 0;\r\n  });\r\n\r\n  const payment_methods = Array.from(paymentMethods.values())\r\n    .map(pm => ({\r\n      ...pm,\r\n      percentage: total_revenue > 0 ? (pm.revenue / total_revenue) * 100 : 0\r\n    }));\r\n\r\n  return {\r\n    summary: {\r\n      total_revenue,\r\n      total_orders,\r\n      average_order_value,\r\n      conversion_rate,\r\n      growth_rate\r\n    },\r\n    timeline,\r\n    top_products,\r\n    payment_methods\r\n  };\r\n}\r\n\r\nasync function generateProductsReport(filters: any): Promise<ProductsReport> {\r\n  // Obtener todos los productos con sus estadísticas\r\n  let productsQuery = supabaseAdmin\r\n    .from('products')\r\n    .select(`\r\n      id,\r\n      name,\r\n      price,\r\n      stock_quantity,\r\n      min_stock_level,\r\n      is_active,\r\n      category_id,\r\n      categories(name),\r\n      order_items(\r\n        quantity,\r\n        price,\r\n        orders!inner(\r\n          status,\r\n          created_at\r\n        )\r\n      )\r\n    `);\r\n\r\n  if (filters.filters?.category_ids) {\r\n    productsQuery = productsQuery.in('category_id', filters.filters.category_ids);\r\n  }\r\n\r\n  const { data: products, error } = await productsQuery;\r\n  if (error) {throw error;}\r\n\r\n  // Calcular métricas de resumen\r\n  const total_products = products?.length || 0;\r\n  const active_products = products?.filter(p => p.is_active).length || 0;\r\n  const out_of_stock = products?.filter(p => (p.stock_quantity || 0) === 0).length || 0;\r\n  const low_stock = products?.filter(p => \r\n    (p.stock_quantity || 0) > 0 && \r\n    (p.stock_quantity || 0) <= (p.min_stock_level || 0)\r\n  ).length || 0;\r\n  const total_inventory_value = products?.reduce((sum, p) => \r\n    sum + ((p.price || 0) * (p.stock_quantity || 0)), 0\r\n  ) || 0;\r\n\r\n  // Performance de productos\r\n  const performance = products?.map(product => {\r\n    const completedSales = product.order_items?.filter(item => \r\n      item.orders?.status === 'completed' &&\r\n      new Date(item.orders.created_at) >= new Date(filters.date_range.start) &&\r\n      new Date(item.orders.created_at) <= new Date(filters.date_range.end)\r\n    ) || [];\r\n    \r\n    const sales = completedSales.reduce((sum, item) => sum + (item.quantity || 0), 0);\r\n    const revenue = completedSales.reduce((sum, item) => \r\n      sum + ((item.price || 0) * (item.quantity || 0)), 0\r\n    );\r\n    \r\n    return {\r\n      id: product.id,\r\n      name: product.name,\r\n      views: 0, // Placeholder - necesitaríamos analytics\r\n      sales,\r\n      conversion_rate: 0, // Placeholder\r\n      revenue,\r\n      stock_level: product.stock_quantity || 0\r\n    };\r\n  }).sort((a, b) => b.revenue - a.revenue).slice(0, 20) || [];\r\n\r\n  // Categorías\r\n  const categoryStats = new Map();\r\n  products?.forEach(product => {\r\n    const categoryId = product.category_id;\r\n    const categoryName = product.categories?.name || 'Sin categoría';\r\n    \r\n    if (!categoryStats.has(categoryId)) {\r\n      categoryStats.set(categoryId, {\r\n        id: categoryId,\r\n        name: categoryName,\r\n        product_count: 0,\r\n        revenue: 0\r\n      });\r\n    }\r\n    \r\n    const category = categoryStats.get(categoryId);\r\n    category.product_count++;\r\n    \r\n    const completedSales = product.order_items?.filter(item => \r\n      item.orders?.status === 'completed' &&\r\n      new Date(item.orders.created_at) >= new Date(filters.date_range.start) &&\r\n      new Date(item.orders.created_at) <= new Date(filters.date_range.end)\r\n    ) || [];\r\n    \r\n    category.revenue += completedSales.reduce((sum, item) => \r\n      sum + ((item.price || 0) * (item.quantity || 0)), 0\r\n    );\r\n  });\r\n\r\n  const categories = Array.from(categoryStats.values())\r\n    .map(cat => ({ ...cat, growth: 0 })) // Placeholder\r\n    .sort((a, b) => b.revenue - a.revenue);\r\n\r\n  // Alertas de inventario\r\n  const inventory_alerts = products?.filter(p => \r\n    (p.stock_quantity || 0) === 0 || \r\n    ((p.stock_quantity || 0) > 0 && (p.stock_quantity || 0) <= (p.min_stock_level || 0))\r\n  ).map(p => ({\r\n    id: p.id,\r\n    name: p.name,\r\n    current_stock: p.stock_quantity || 0,\r\n    min_stock: p.min_stock_level || 0,\r\n    status: (p.stock_quantity || 0) === 0 ? 'out_of_stock' as const : 'low_stock' as const\r\n  })) || [];\r\n\r\n  return {\r\n    summary: {\r\n      total_products,\r\n      active_products,\r\n      out_of_stock,\r\n      low_stock,\r\n      total_inventory_value\r\n    },\r\n    performance,\r\n    categories,\r\n    inventory_alerts\r\n  };\r\n}\r\n\r\nasync function generateUsersReport(filters: any): Promise<UsersReport> {\r\n  // Obtener usuarios con sus estadísticas\r\n  const { data: users, error } = await supabaseAdmin\r\n    .from('users')\r\n    .select(`\r\n      id,\r\n      name,\r\n      email,\r\n      created_at,\r\n      last_login,\r\n      is_active,\r\n      orders(\r\n        id,\r\n        total,\r\n        status,\r\n        created_at\r\n      )\r\n    `);\r\n\r\n  if (error) {throw error;}\r\n\r\n  const dateStart = new Date(filters.date_range.start);\r\n  const dateEnd = new Date(filters.date_range.end);\r\n\r\n  // Métricas de resumen\r\n  const total_users = users?.length || 0;\r\n  const active_users = users?.filter(u => u.is_active).length || 0;\r\n  const new_users = users?.filter(u => \r\n    new Date(u.created_at) >= dateStart && new Date(u.created_at) <= dateEnd\r\n  ).length || 0;\r\n\r\n  // Timeline de usuarios\r\n  const timeline = generateUserTimeline(users || [], filters.date_range, filters.granularity);\r\n\r\n  // Segmentos de usuarios\r\n  const segments = [\r\n    {\r\n      segment: 'Nuevos clientes',\r\n      count: 0,\r\n      revenue: 0,\r\n      avg_order_value: 0\r\n    },\r\n    {\r\n      segment: 'Clientes recurrentes',\r\n      count: 0,\r\n      revenue: 0,\r\n      avg_order_value: 0\r\n    },\r\n    {\r\n      segment: 'VIP',\r\n      count: 0,\r\n      revenue: 0,\r\n      avg_order_value: 0\r\n    }\r\n  ];\r\n\r\n  // Top clientes\r\n  const top_customers = users?.map(user => {\r\n    const completedOrders = user.orders?.filter(o => o.status === 'completed') || [];\r\n    const total_spent = completedOrders.reduce((sum, order) => sum + (order.total || 0), 0);\r\n    const lastOrder = completedOrders.sort((a, b) => \r\n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\r\n    )[0];\r\n    \r\n    return {\r\n      id: user.id,\r\n      name: user.name || 'Sin nombre',\r\n      email: user.email,\r\n      total_orders: completedOrders.length,\r\n      total_spent,\r\n      last_order: lastOrder?.created_at || ''\r\n    };\r\n  }).sort((a, b) => b.total_spent - a.total_spent).slice(0, 10) || [];\r\n\r\n  return {\r\n    summary: {\r\n      total_users,\r\n      active_users,\r\n      new_users,\r\n      retention_rate: 0, // Placeholder\r\n      churn_rate: 0 // Placeholder\r\n    },\r\n    timeline,\r\n    segments,\r\n    top_customers\r\n  };\r\n}\r\n\r\nasync function generatePerformanceReport(filters: any): Promise<PerformanceReport> {\r\n  // Este reporte requeriría integración con analytics (Google Analytics, etc.)\r\n  // Por ahora retornamos datos placeholder\r\n  return {\r\n    summary: {\r\n      page_views: 0,\r\n      unique_visitors: 0,\r\n      bounce_rate: 0,\r\n      avg_session_duration: 0,\r\n      conversion_rate: 0\r\n    },\r\n    traffic_sources: [],\r\n    popular_pages: [],\r\n    device_breakdown: []\r\n  };\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nfunction generateTimeline(orders: any[], dateRange: any, granularity: string) {\r\n  const timeline = [];\r\n  const start = new Date(dateRange.start);\r\n  const end = new Date(dateRange.end);\r\n  \r\n  let current = new Date(start);\r\n  \r\n  while (current <= end) {\r\n    const nextPeriod = new Date(current);\r\n    \r\n    switch (granularity) {\r\n      case 'hour':\r\n        nextPeriod.setHours(current.getHours() + 1);\r\n        break;\r\n      case 'day':\r\n        nextPeriod.setDate(current.getDate() + 1);\r\n        break;\r\n      case 'week':\r\n        nextPeriod.setDate(current.getDate() + 7);\r\n        break;\r\n      case 'month':\r\n        nextPeriod.setMonth(current.getMonth() + 1);\r\n        break;\r\n    }\r\n    \r\n    const periodOrders = orders.filter(order => {\r\n      const orderDate = new Date(order.created_at);\r\n      return orderDate >= current && orderDate < nextPeriod;\r\n    });\r\n    \r\n    const revenue = periodOrders.reduce((sum, order) => sum + (order.total || 0), 0);\r\n    const uniqueCustomers = new Set(periodOrders.map(o => o.user_id)).size;\r\n    \r\n    timeline.push({\r\n      date: current.toISOString(),\r\n      revenue,\r\n      orders: periodOrders.length,\r\n      customers: uniqueCustomers\r\n    });\r\n    \r\n    current = nextPeriod;\r\n  }\r\n  \r\n  return timeline;\r\n}\r\n\r\nfunction generateUserTimeline(users: any[], dateRange: any, granularity: string) {\r\n  // Similar a generateTimeline pero para usuarios\r\n  return [];\r\n}\r\n\r\n// ===================================\r\n// GET - Generar reportes\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-reports'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Parsear parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const reportParams = {\r\n      report_type: searchParams.get('report_type') as any,\r\n      date_range: {\r\n        start: searchParams.get('start') || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n        end: searchParams.get('end') || new Date().toISOString()\r\n      },\r\n      granularity: (searchParams.get('granularity') as any) || 'day',\r\n      filters: {\r\n        category_ids: searchParams.get('category_ids')?.split(',').filter(Boolean),\r\n        product_ids: searchParams.get('product_ids')?.split(',').filter(Boolean),\r\n        user_roles: searchParams.get('user_roles')?.split(',').filter(Boolean),\r\n        order_status: searchParams.get('order_status')?.split(',').filter(Boolean),\r\n        payment_status: searchParams.get('payment_status')?.split(',').filter(Boolean),\r\n        min_amount: searchParams.get('min_amount') ? parseFloat(searchParams.get('min_amount')!) : undefined,\r\n        max_amount: searchParams.get('max_amount') ? parseFloat(searchParams.get('max_amount')!) : undefined\r\n      }\r\n    };\r\n\r\n    // Validar parámetros\r\n    const validationResult = ReportFiltersSchema.safeParse(reportParams);\r\n    if (!validationResult.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Parámetros de reporte inválidos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const { report_type } = validationResult.data;\r\n    let reportData: any;\r\n\r\n    // Generar reporte según el tipo\r\n    switch (report_type) {\r\n      case 'sales':\r\n        reportData = await generateSalesReport(validationResult.data);\r\n        break;\r\n      case 'products':\r\n        reportData = await generateProductsReport(validationResult.data);\r\n        break;\r\n      case 'users':\r\n        reportData = await generateUsersReport(validationResult.data);\r\n        break;\r\n      case 'performance':\r\n        reportData = await generatePerformanceReport(validationResult.data);\r\n        break;\r\n      default:\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Tipo de reporte no soportado',\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/reports',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditoría\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Reporte generado', {\r\n      adminUserId: authResult.userId,\r\n      reportType: report_type,\r\n      dateRange: validationResult.data.date_range\r\n    });\r\n\r\n    const response: ApiResponse<any> = {\r\n      data: {\r\n        report_type,\r\n        generated_at: new Date().toISOString(),\r\n        ...reportData\r\n      },\r\n      success: true,\r\n      message: `Reporte ${report_type} generado exitosamente`\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/reports', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/reports',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}