{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\seo\\enhanced-seo-testing-suite.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENHANCED SEO TESTING SUITE TESTS\r\n// Tests comprehensivos para el sistema de tests automatizados SEO\r\n// ===================================\r\n\r\nimport { \r\n  EnhancedSEOTestingSuite,\r\n  enhancedSEOTestingSuite,\r\n  type SEOTestingConfig,\r\n  type SEOTestResult,\r\n  type SEOTestSuite\r\n} from '@/lib/seo/seo-testing-suite';\r\n\r\n// Mock dependencies\r\njest.mock('@/lib/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  },\r\n  LogLevel: {\r\n    INFO: 'info',\r\n    WARN: 'warn',\r\n    ERROR: 'error'\r\n  },\r\n  LogCategory: {\r\n    SEO: 'seo'\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/redis', () => ({\r\n  getRedisClient: jest.fn().mockResolvedValue({\r\n    get: jest.fn(),\r\n    setex: jest.fn(),\r\n    keys: jest.fn().mockResolvedValue([]),\r\n    del: jest.fn()\r\n  })\r\n}));\r\n\r\njest.mock('@/lib/supabase', () => ({\r\n  getSupabaseClient: jest.fn().mockResolvedValue({})\r\n}));\r\n\r\njest.mock('@/lib/seo/seo-analytics-manager', () => ({\r\n  enhancedSEOAnalyticsManager: {\r\n    trackSEOMetrics: jest.fn()\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/seo/dynamic-seo-manager', () => ({\r\n  dynamicSEOManager: {\r\n    generateSEOMetadata: jest.fn().mockResolvedValue({\r\n      title: 'Test Page Title',\r\n      description: 'Test page description for SEO testing',\r\n      keywords: ['test', 'seo', 'page'],\r\n      ogTitle: 'Test OG Title',\r\n      ogDescription: 'Test OG Description',\r\n      ogImage: '/test-image.jpg'\r\n    }),\r\n    analyzeSEO: jest.fn().mockResolvedValue({\r\n      score: 85,\r\n      issues: [],\r\n      recommendations: []\r\n    })\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/seo/advanced-schema-markup', () => ({\r\n  advancedSchemaMarkup: {\r\n    validateSchema: jest.fn().mockResolvedValue(true)\r\n  }\r\n}));\r\n\r\ndescribe('Enhanced SEO Testing Suite', () => {\r\n  let seoTestingSuite: EnhancedSEOTestingSuite;\r\n\r\n  beforeEach(() => {\r\n    // Crear nueva instancia para cada test\r\n    seoTestingSuite = EnhancedSEOTestingSuite.getInstance();\r\n    \r\n    // Resetear configuraciÃ³n a valores por defecto\r\n    seoTestingSuite.configure({\r\n      enableMetadataTests: true,\r\n      enableStructuredDataTests: true,\r\n      enableRobotsTxtTests: true,\r\n      enableInternalLinksTests: true,\r\n      enableComplianceTests: true,\r\n      enablePerformanceTests: true,\r\n      testTimeout: 30,\r\n      maxConcurrentTests: 5\r\n    });\r\n    \r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    test('should create singleton instance', () => {\r\n      const instance1 = EnhancedSEOTestingSuite.getInstance();\r\n      const instance2 = EnhancedSEOTestingSuite.getInstance();\r\n      \r\n      expect(instance1).toBe(instance2);\r\n      expect(instance1).toBeInstanceOf(EnhancedSEOTestingSuite);\r\n    });\r\n\r\n    test('should initialize with default configuration', () => {\r\n      const stats = seoTestingSuite.getTestingStats();\r\n      \r\n      expect(stats).toHaveProperty('totalTestsRun');\r\n      expect(stats).toHaveProperty('averageScore');\r\n      expect(stats).toHaveProperty('testsByType');\r\n      expect(stats).toHaveProperty('cacheHitRate');\r\n      expect(typeof stats.totalTestsRun).toBe('number');\r\n    });\r\n\r\n    test('should accept custom configuration', () => {\r\n      const customConfig: Partial<SEOTestingConfig> = {\r\n        enableMetadataTests: false,\r\n        testTimeout: 60,\r\n        maxConcurrentTests: 10\r\n      };\r\n\r\n      const customInstance = EnhancedSEOTestingSuite.getInstance(customConfig);\r\n      expect(customInstance).toBeInstanceOf(EnhancedSEOTestingSuite);\r\n    });\r\n  });\r\n\r\n  describe('Metadata Tests', () => {\r\n    test('should run metadata tests successfully', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('metadata', ['/test-page']);\r\n      \r\n      expect(Array.isArray(results)).toBe(true);\r\n      expect(results.length).toBeGreaterThan(0);\r\n      \r\n      // Verificar estructura de resultados\r\n      const result = results[0];\r\n      expect(result).toHaveProperty('testId');\r\n      expect(result).toHaveProperty('testName');\r\n      expect(result).toHaveProperty('testType', 'metadata');\r\n      expect(result).toHaveProperty('url');\r\n      expect(result).toHaveProperty('status');\r\n      expect(result).toHaveProperty('score');\r\n      expect(result).toHaveProperty('details');\r\n      expect(result).toHaveProperty('suggestions');\r\n      expect(result).toHaveProperty('executionTime');\r\n      expect(result).toHaveProperty('timestamp');\r\n      \r\n      expect(['passed', 'failed', 'warning', 'skipped']).toContain(result.status);\r\n      expect(result.score).toBeGreaterThanOrEqual(0);\r\n      expect(result.score).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    test('should validate title tags correctly', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('metadata', ['/test-page']);\r\n      const titleTest = results.find(r => r.testName.includes('Title'));\r\n      \r\n      expect(titleTest).toBeDefined();\r\n      expect(titleTest?.testType).toBe('metadata');\r\n      expect(titleTest?.details.category).toBe('metadata');\r\n      expect(Array.isArray(titleTest?.suggestions)).toBe(true);\r\n    });\r\n\r\n    test('should validate meta descriptions', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('metadata', ['/test-page']);\r\n      const descriptionTest = results.find(r => r.testName.includes('Description'));\r\n      \r\n      expect(descriptionTest).toBeDefined();\r\n      expect(descriptionTest?.testType).toBe('metadata');\r\n      expect(descriptionTest?.details.impact).toBe('high');\r\n    });\r\n\r\n    test('should validate Open Graph tags', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('metadata', ['/test-page']);\r\n      const ogTest = results.find(r => r.testName.includes('Open Graph'));\r\n      \r\n      expect(ogTest).toBeDefined();\r\n      expect(ogTest?.testType).toBe('metadata');\r\n      expect(Array.isArray(ogTest?.suggestions)).toBe(true);\r\n    });\r\n\r\n    test('should handle metadata test errors gracefully', async () => {\r\n      // Deshabilitar metadata tests\r\n      seoTestingSuite.configure({ enableMetadataTests: false });\r\n      \r\n      const results = await seoTestingSuite.runTestsByType('metadata', ['/test-page']);\r\n      expect(Array.isArray(results)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Structured Data Tests', () => {\r\n    test('should run structured data tests successfully', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('structured_data', ['/test-page']);\r\n      \r\n      expect(Array.isArray(results)).toBe(true);\r\n      expect(results.length).toBeGreaterThan(0);\r\n      \r\n      const result = results[0];\r\n      expect(result.testType).toBe('structured_data');\r\n      expect(result).toHaveProperty('score');\r\n      expect(result).toHaveProperty('suggestions');\r\n    });\r\n\r\n    test('should validate schema presence', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('structured_data', ['/test-page']);\r\n      const presenceTest = results.find(r => r.testName.includes('Presence'));\r\n      \r\n      expect(presenceTest).toBeDefined();\r\n      expect(presenceTest?.details.category).toBe('structured_data');\r\n    });\r\n\r\n    test('should validate product schema for product pages', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('structured_data', ['/products/test-product']);\r\n      const productTest = results.find(r => r.testName.includes('Product Schema'));\r\n      \r\n      expect(productTest).toBeDefined();\r\n      expect(productTest?.details.impact).toBe('critical');\r\n    });\r\n  });\r\n\r\n  describe('Robots.txt Tests', () => {\r\n    test('should run robots.txt tests successfully', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('robots_txt', ['/']);\r\n      \r\n      expect(Array.isArray(results)).toBe(true);\r\n      expect(results.length).toBeGreaterThan(0);\r\n      \r\n      const result = results[0];\r\n      expect(result.testType).toBe('robots_txt');\r\n      expect(result.url).toBe('/robots.txt');\r\n    });\r\n\r\n    test('should validate robots.txt existence', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('robots_txt', ['/']);\r\n      const existenceTest = results.find(r => r.testName.includes('Existence'));\r\n      \r\n      expect(existenceTest).toBeDefined();\r\n      expect(existenceTest?.details.impact).toBe('high');\r\n    });\r\n\r\n    test('should validate sitemap reference', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('robots_txt', ['/']);\r\n      const sitemapTest = results.find(r => r.testName.includes('Sitemap'));\r\n      \r\n      expect(sitemapTest).toBeDefined();\r\n      expect(['passed', 'warning']).toContain(sitemapTest?.status);\r\n    });\r\n  });\r\n\r\n  describe('Internal Links Tests', () => {\r\n    test('should run internal links tests successfully', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('internal_links', ['/test-page']);\r\n      \r\n      expect(Array.isArray(results)).toBe(true);\r\n      expect(results.length).toBeGreaterThan(0);\r\n      \r\n      const result = results[0];\r\n      expect(result.testType).toBe('internal_links');\r\n    });\r\n\r\n    test('should validate links count', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('internal_links', ['/test-page']);\r\n      const countTest = results.find(r => r.testName.includes('Count'));\r\n      \r\n      expect(countTest).toBeDefined();\r\n      expect(countTest?.details.category).toBe('internal_links');\r\n    });\r\n\r\n    test('should detect broken links', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('internal_links', ['/test-page']);\r\n      const brokenTest = results.find(r => r.testName.includes('Broken'));\r\n      \r\n      expect(brokenTest).toBeDefined();\r\n      expect(['passed', 'failed']).toContain(brokenTest?.status);\r\n    });\r\n  });\r\n\r\n  describe('Compliance Tests', () => {\r\n    test('should run compliance tests successfully', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('compliance', ['/test-page']);\r\n      \r\n      expect(Array.isArray(results)).toBe(true);\r\n      expect(results.length).toBeGreaterThan(0);\r\n      \r\n      const result = results[0];\r\n      expect(result.testType).toBe('compliance');\r\n    });\r\n\r\n    test('should validate HTTPS security', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('compliance', ['/test-page']);\r\n      const httpsTest = results.find(r => r.testName.includes('HTTPS'));\r\n      \r\n      expect(httpsTest).toBeDefined();\r\n      expect(httpsTest?.details.category).toBe('security');\r\n    });\r\n\r\n    test('should validate mobile friendliness', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('compliance', ['/test-page']);\r\n      const mobileTest = results.find(r => r.testName.includes('Mobile'));\r\n      \r\n      expect(mobileTest).toBeDefined();\r\n      expect(mobileTest?.details.category).toBe('mobile');\r\n    });\r\n  });\r\n\r\n  describe('Performance Tests', () => {\r\n    test('should run performance tests successfully', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('performance', ['/test-page']);\r\n      \r\n      expect(Array.isArray(results)).toBe(true);\r\n      expect(results.length).toBeGreaterThan(0);\r\n      \r\n      const result = results[0];\r\n      expect(result.testType).toBe('performance');\r\n    });\r\n\r\n    test('should validate Core Web Vitals', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('performance', ['/test-page']);\r\n      \r\n      const lcpTest = results.find(r => r.testName.includes('LCP'));\r\n      const fidTest = results.find(r => r.testName.includes('FID'));\r\n      const clsTest = results.find(r => r.testName.includes('CLS'));\r\n      \r\n      expect(lcpTest).toBeDefined();\r\n      expect(fidTest).toBeDefined();\r\n      expect(clsTest).toBeDefined();\r\n      \r\n      expect(lcpTest?.details.category).toBe('core_web_vitals');\r\n      expect(fidTest?.details.category).toBe('core_web_vitals');\r\n      expect(clsTest?.details.category).toBe('core_web_vitals');\r\n    });\r\n\r\n    test('should validate SEO score', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('performance', ['/test-page']);\r\n      const seoScoreTest = results.find(r => r.testName.includes('SEO Score'));\r\n      \r\n      expect(seoScoreTest).toBeDefined();\r\n      expect(seoScoreTest?.details.category).toBe('seo_performance');\r\n      expect(seoScoreTest?.score).toBeGreaterThanOrEqual(0);\r\n      expect(seoScoreTest?.score).toBeLessThanOrEqual(100);\r\n    });\r\n  });\r\n\r\n  describe('Full Test Suite', () => {\r\n    test('should run full test suite successfully', async () => {\r\n      const testSuite = await seoTestingSuite.runFullTestSuite(['/test-page']);\r\n      \r\n      expect(testSuite).toHaveProperty('suiteId');\r\n      expect(testSuite).toHaveProperty('suiteName');\r\n      expect(testSuite).toHaveProperty('tests');\r\n      expect(testSuite).toHaveProperty('summary');\r\n      expect(testSuite).toHaveProperty('coverage');\r\n      expect(testSuite).toHaveProperty('status', 'completed');\r\n      \r\n      expect(Array.isArray(testSuite.tests)).toBe(true);\r\n      expect(testSuite.tests.length).toBeGreaterThan(0);\r\n      \r\n      expect(testSuite.summary.totalTests).toBe(testSuite.tests.length);\r\n      expect(testSuite.summary.overallScore).toBeGreaterThanOrEqual(0);\r\n      expect(testSuite.summary.overallScore).toBeLessThanOrEqual(100);\r\n    });\r\n\r\n    test('should calculate summary correctly', async () => {\r\n      const testSuite = await seoTestingSuite.runFullTestSuite(['/test-page']);\r\n      const summary = testSuite.summary;\r\n      \r\n      expect(summary.totalTests).toBe(\r\n        summary.passed + summary.failed + summary.warnings + summary.skipped\r\n      );\r\n      expect(summary.executionTime).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    test('should calculate coverage correctly', async () => {\r\n      const testSuite = await seoTestingSuite.runFullTestSuite(['/test-page']);\r\n      const coverage = testSuite.coverage;\r\n      \r\n      expect(coverage.metadataTests).toBeGreaterThanOrEqual(0);\r\n      expect(coverage.structuredDataTests).toBeGreaterThanOrEqual(0);\r\n      expect(coverage.robotsTxtTests).toBeGreaterThanOrEqual(0);\r\n      expect(coverage.internalLinksTests).toBeGreaterThanOrEqual(0);\r\n      expect(coverage.complianceTests).toBeGreaterThanOrEqual(0);\r\n      expect(coverage.performanceTests).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  describe('Configuration and Management', () => {\r\n    test('should update configuration', () => {\r\n      const newConfig = {\r\n        enableMetadataTests: false,\r\n        testTimeout: 60\r\n      };\r\n      \r\n      expect(() => seoTestingSuite.configure(newConfig)).not.toThrow();\r\n    });\r\n\r\n    test('should get testing statistics', () => {\r\n      const stats = seoTestingSuite.getTestingStats();\r\n      \r\n      expect(stats).toHaveProperty('totalTestsRun');\r\n      expect(stats).toHaveProperty('averageScore');\r\n      expect(stats).toHaveProperty('testsByType');\r\n      expect(stats).toHaveProperty('cacheHitRate');\r\n      \r\n      expect(typeof stats.totalTestsRun).toBe('number');\r\n      expect(typeof stats.averageScore).toBe('number');\r\n      expect(typeof stats.testsByType).toBe('object');\r\n      expect(typeof stats.cacheHitRate).toBe('number');\r\n    });\r\n\r\n    test('should manage test history', async () => {\r\n      await seoTestingSuite.runFullTestSuite(['/test-page']);\r\n      \r\n      const history = seoTestingSuite.getTestHistory(5);\r\n      expect(Array.isArray(history)).toBe(true);\r\n      expect(history.length).toBeGreaterThan(0);\r\n      \r\n      const suite = history[0];\r\n      expect(suite).toHaveProperty('suiteId');\r\n      expect(suite).toHaveProperty('status');\r\n    });\r\n\r\n    test('should get active test suites', () => {\r\n      const activeSuites = seoTestingSuite.getActiveTestSuites();\r\n      expect(Array.isArray(activeSuites)).toBe(true);\r\n    });\r\n\r\n    test('should clear cache', async () => {\r\n      await expect(seoTestingSuite.clearCache()).resolves.not.toThrow();\r\n    });\r\n\r\n    test('should destroy instance properly', async () => {\r\n      await expect(seoTestingSuite.destroy()).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    test('should handle disabled test types', async () => {\r\n      seoTestingSuite.configure({ enableMetadataTests: false });\r\n      \r\n      const results = await seoTestingSuite.runTestsByType('metadata', ['/test-page']);\r\n      expect(Array.isArray(results)).toBe(true);\r\n    });\r\n\r\n    test('should handle invalid URLs gracefully', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('metadata', ['invalid-url']);\r\n      expect(Array.isArray(results)).toBe(true);\r\n    });\r\n\r\n    test('should handle empty URL arrays', async () => {\r\n      const results = await seoTestingSuite.runTestsByType('metadata', []);\r\n      expect(Array.isArray(results)).toBe(true);\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","logger","info","fn","warn","error","LogLevel","INFO","WARN","ERROR","LogCategory","SEO","getRedisClient","mockResolvedValue","get","setex","keys","del","getSupabaseClient","enhancedSEOAnalyticsManager","trackSEOMetrics","dynamicSEOManager","generateSEOMetadata","title","description","keywords","ogTitle","ogDescription","ogImage","analyzeSEO","score","issues","recommendations","advancedSchemaMarkup","validateSchema","describe","seoTestingSuite","beforeEach","EnhancedSEOTestingSuite","getInstance","configure","enableMetadataTests","enableStructuredDataTests","enableRobotsTxtTests","enableInternalLinksTests","enableComplianceTests","enablePerformanceTests","testTimeout","maxConcurrentTests","clearAllMocks","test","instance1","instance2","expect","toBe","toBeInstanceOf","stats","getTestingStats","toHaveProperty","totalTestsRun","customConfig","customInstance","results","runTestsByType","Array","isArray","length","toBeGreaterThan","result","toContain","status","toBeGreaterThanOrEqual","toBeLessThanOrEqual","titleTest","find","r","testName","includes","toBeDefined","testType","details","category","suggestions","descriptionTest","impact","ogTest","presenceTest","productTest","url","existenceTest","sitemapTest","countTest","brokenTest","httpsTest","mobileTest","lcpTest","fidTest","clsTest","seoScoreTest","testSuite","runFullTestSuite","tests","summary","totalTests","overallScore","passed","failed","warnings","skipped","executionTime","coverage","metadataTests","structuredDataTests","robotsTxtTests","internalLinksTests","complianceTests","performanceTests","newConfig","not","toThrow","averageScore","testsByType","cacheHitRate","history","getTestHistory","suite","activeSuites","getActiveTestSuites","clearCache","resolves","destroy"],"mappings":"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"}