6796168ac28aa1da00712bb1e13a4813
// ===================================
// PINTEYA E-COMMERCE - ADVANCED ALERTING ENGINE
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AdvancedAlertingEngine () {
        return AdvancedAlertingEngine;
    },
    get AdvancedAlertingUtils () {
        return AdvancedAlertingUtils;
    },
    get AlertChannel () {
        return AlertChannel;
    },
    get AlertSeverity () {
        return AlertSeverity;
    },
    get AlertStatus () {
        return AlertStatus;
    },
    get AlertType () {
        return AlertType;
    },
    get DEFAULT_CHANNEL_CONFIGS () {
        return DEFAULT_CHANNEL_CONFIGS;
    },
    get DEFAULT_ESCALATION_POLICY () {
        return DEFAULT_ESCALATION_POLICY;
    },
    get advancedAlertingEngine () {
        return advancedAlertingEngine;
    }
});
const _logger = require("../enterprise/logger");
const _redis = require("../integrations/redis");
var AlertChannel = /*#__PURE__*/ function(AlertChannel) {
    AlertChannel["EMAIL"] = "email";
    AlertChannel["SLACK"] = "slack";
    AlertChannel["WEBHOOK"] = "webhook";
    AlertChannel["SMS"] = "sms";
    AlertChannel["DISCORD"] = "discord";
    AlertChannel["TEAMS"] = "teams";
    AlertChannel["CONSOLE"] = "console";
    return AlertChannel;
}({});
var AlertType = /*#__PURE__*/ function(AlertType) {
    AlertType["PERFORMANCE"] = "performance";
    AlertType["ERROR"] = "error";
    AlertType["CAPACITY"] = "capacity";
    AlertType["AVAILABILITY"] = "availability";
    AlertType["SECURITY"] = "security";
    AlertType["BUSINESS"] = "business";
    return AlertType;
}({});
var AlertSeverity = /*#__PURE__*/ function(AlertSeverity) {
    AlertSeverity["LOW"] = "low";
    AlertSeverity["MEDIUM"] = "medium";
    AlertSeverity["HIGH"] = "high";
    AlertSeverity["CRITICAL"] = "critical";
    return AlertSeverity;
}({});
var AlertStatus = /*#__PURE__*/ function(AlertStatus) {
    AlertStatus["ACTIVE"] = "active";
    AlertStatus["ACKNOWLEDGED"] = "acknowledged";
    AlertStatus["RESOLVED"] = "resolved";
    AlertStatus["SUPPRESSED"] = "suppressed";
    return AlertStatus;
}({});
const DEFAULT_CHANNEL_CONFIGS = [
    {
        channel: "email",
        enabled: true,
        config: {
            recipients: [
                'admin@pinteya.com',
                'dev@pinteya.com'
            ]
        },
        filters: {
            severities: [
                "high",
                "critical"
            ]
        },
        rateLimiting: {
            maxAlertsPerHour: 10,
            cooldownMinutes: 5
        }
    },
    {
        channel: "slack",
        enabled: true,
        config: {
            webhookUrl: process.env.SLACK_WEBHOOK_URL,
            slackChannel: '#alerts'
        },
        filters: {
            severities: [
                "medium",
                "high",
                "critical"
            ]
        },
        rateLimiting: {
            maxAlertsPerHour: 20,
            cooldownMinutes: 2
        }
    },
    {
        channel: "console",
        enabled: true,
        config: {},
        rateLimiting: {
            maxAlertsPerHour: 100,
            cooldownMinutes: 0
        }
    }
];
const DEFAULT_ESCALATION_POLICY = {
    id: 'default',
    name: 'Política de Escalación por Defecto',
    enabled: true,
    rules: [
        {
            level: 1,
            delayMinutes: 0,
            channels: [
                "slack",
                "console"
            ],
            conditions: {
                severities: [
                    "medium",
                    "high",
                    "critical"
                ]
            }
        },
        {
            level: 2,
            delayMinutes: 15,
            channels: [
                "email"
            ],
            conditions: {
                severities: [
                    "high",
                    "critical"
                ],
                unacknowledgedOnly: true
            }
        },
        {
            level: 3,
            delayMinutes: 60,
            channels: [
                "sms"
            ],
            conditions: {
                severities: [
                    "critical"
                ],
                unacknowledgedOnly: true
            },
            recipients: {
                phones: [
                    '+5491123456789'
                ]
            }
        }
    ]
};
class AdvancedAlertingEngine {
    constructor(){
        this.redis = (0, _redis.getRedisClient)();
        this.alerts = new Map();
        this.channelConfigs = new Map();
        this.escalationPolicies = new Map();
        this.suppressionRules = new Map();
        this.escalationTimers = new Map();
        this.rateLimitCounters = new Map();
        this.initializeDefaultConfigs();
    }
    static getInstance() {
        if (!AdvancedAlertingEngine.instance) {
            AdvancedAlertingEngine.instance = new AdvancedAlertingEngine();
        }
        return AdvancedAlertingEngine.instance;
    }
    /**
   * Inicializa configuraciones por defecto
   */ initializeDefaultConfigs() {
        // Configurar canales por defecto
        DEFAULT_CHANNEL_CONFIGS.forEach((config)=>{
            this.channelConfigs.set(config.channel, config);
        });
        // Configurar política de escalación por defecto
        this.escalationPolicies.set(DEFAULT_ESCALATION_POLICY.id, DEFAULT_ESCALATION_POLICY);
        _logger.logger.info(_logger.LogCategory.MONITORING, 'Advanced Alerting Engine initialized');
    }
    /**
   * Crea y procesa una nueva alerta
   */ async createAlert(type, severity, title, message, details = {}, source = 'system', tags = []) {
        // Generar fingerprint para deduplicación
        const fingerprint = this.generateFingerprint(type, title, source);
        // Verificar si ya existe una alerta similar activa
        const existingAlert = this.findExistingAlert(fingerprint);
        if (existingAlert && existingAlert.status === "active") {
            // Actualizar alerta existente en lugar de crear nueva
            return this.updateExistingAlert(existingAlert.id, details);
        }
        // Verificar reglas de supresión
        if (await this.isAlertSuppressed(type, severity, source, title)) {
            _logger.logger.info(_logger.LogCategory.MONITORING, `Alert suppressed: ${title}`);
            return '';
        }
        const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const alert = {
            id: alertId,
            type,
            severity,
            status: "active",
            title,
            message,
            details,
            source,
            timestamp: Date.now(),
            escalationLevel: 0,
            tags,
            fingerprint,
            relatedAlerts: []
        };
        this.alerts.set(alertId, alert);
        // Persistir en Redis
        await this.persistAlert(alert);
        // Procesar alerta inmediatamente
        await this.processAlert(alert);
        // Programar escalación si es necesario
        this.scheduleEscalation(alert);
        _logger.logger.info(_logger.LogCategory.MONITORING, `Alert created: ${title}`, {
            id: alertId,
            type,
            severity,
            source
        });
        return alertId;
    }
    /**
   * Procesa una alerta enviándola a los canales apropiados
   */ async processAlert(alert) {
        const applicableChannels = this.getApplicableChannels(alert);
        const sendPromises = applicableChannels.map(async (channelConfig)=>{
            try {
                // Verificar rate limiting
                if (!this.checkRateLimit(channelConfig)) {
                    _logger.logger.warn(_logger.LogCategory.MONITORING, `Rate limit exceeded for channel ${channelConfig.channel}`);
                    return;
                }
                await this.sendToChannel(alert, channelConfig);
                this.updateRateLimit(channelConfig);
            } catch (error) {
                _logger.logger.error(_logger.LogCategory.MONITORING, `Error sending alert to ${channelConfig.channel}`, error);
            }
        });
        await Promise.allSettled(sendPromises);
    }
    /**
   * Envía alerta a un canal específico
   */ async sendToChannel(alert, channelConfig) {
        switch(channelConfig.channel){
            case "email":
                await this.sendEmailAlert(alert, channelConfig);
                break;
            case "slack":
                await this.sendSlackAlert(alert, channelConfig);
                break;
            case "webhook":
                await this.sendWebhookAlert(alert, channelConfig);
                break;
            case "sms":
                await this.sendSMSAlert(alert, channelConfig);
                break;
            case "discord":
                await this.sendDiscordAlert(alert, channelConfig);
                break;
            case "teams":
                await this.sendTeamsAlert(alert, channelConfig);
                break;
            case "console":
                this.sendConsoleAlert(alert);
                break;
        }
    }
    /**
   * Envía alerta por email
   */ async sendEmailAlert(alert, config) {
        // Implementación de envío de email
        // En implementación real, usar nodemailer o servicio de email
        _logger.logger.info(_logger.LogCategory.MONITORING, `Email alert sent: ${alert.title}`, {
            recipients: config.config.recipients
        });
    }
    /**
   * Envía alerta a Slack
   */ async sendSlackAlert(alert, config) {
        if (!config.config.webhookUrl) {
            return;
        }
        const payload = {
            text: `🚨 ${this.getSeverityEmoji(alert.severity)} ${alert.title}`,
            attachments: [
                {
                    color: this.getSeverityColor(alert.severity),
                    fields: [
                        {
                            title: 'Tipo',
                            value: alert.type,
                            short: true
                        },
                        {
                            title: 'Severidad',
                            value: alert.severity,
                            short: true
                        },
                        {
                            title: 'Fuente',
                            value: alert.source,
                            short: true
                        },
                        {
                            title: 'Timestamp',
                            value: new Date(alert.timestamp).toISOString(),
                            short: true
                        }
                    ],
                    text: alert.message,
                    footer: `Alert ID: ${alert.id}`
                }
            ]
        };
        try {
            const response = await fetch(config.config.webhookUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });
            if (!response.ok) {
                throw new Error(`Slack webhook failed: ${response.status}`);
            }
            _logger.logger.info(_logger.LogCategory.MONITORING, `Slack alert sent: ${alert.title}`);
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error sending Slack alert', error);
        }
    }
    /**
   * Envía alerta por webhook
   */ async sendWebhookAlert(alert, config) {
        if (!config.config.url) {
            return;
        }
        try {
            const response = await fetch(config.config.url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...config.config.headers
                },
                body: JSON.stringify({
                    alert,
                    timestamp: Date.now(),
                    source: 'pinteya-ecommerce'
                })
            });
            if (!response.ok) {
                throw new Error(`Webhook failed: ${response.status}`);
            }
            _logger.logger.info(_logger.LogCategory.MONITORING, `Webhook alert sent: ${alert.title}`);
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error sending webhook alert', error);
        }
    }
    /**
   * Envía alerta por SMS
   */ async sendSMSAlert(alert, config) {
        // Implementación de SMS (Twilio, AWS SNS, etc.)
        _logger.logger.info(_logger.LogCategory.MONITORING, `SMS alert sent: ${alert.title}`, {
            phones: config.config.phoneNumbers
        });
    }
    /**
   * Envía alerta a Discord
   */ async sendDiscordAlert(alert, config) {
        if (!config.config.discordWebhook) {
            return;
        }
        const embed = {
            title: `🚨 ${alert.title}`,
            description: alert.message,
            color: this.getSeverityColorHex(alert.severity),
            fields: [
                {
                    name: 'Tipo',
                    value: alert.type,
                    inline: true
                },
                {
                    name: 'Severidad',
                    value: alert.severity,
                    inline: true
                },
                {
                    name: 'Fuente',
                    value: alert.source,
                    inline: true
                }
            ],
            timestamp: new Date(alert.timestamp).toISOString(),
            footer: {
                text: `Alert ID: ${alert.id}`
            }
        };
        try {
            const response = await fetch(config.config.discordWebhook, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    embeds: [
                        embed
                    ]
                })
            });
            if (!response.ok) {
                throw new Error(`Discord webhook failed: ${response.status}`);
            }
            _logger.logger.info(_logger.LogCategory.MONITORING, `Discord alert sent: ${alert.title}`);
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error sending Discord alert', error);
        }
    }
    /**
   * Envía alerta a Teams
   */ async sendTeamsAlert(alert, config) {
        if (!config.config.teamsWebhook) {
            return;
        }
        const card = {
            '@type': 'MessageCard',
            '@context': 'http://schema.org/extensions',
            themeColor: this.getSeverityColorHex(alert.severity),
            summary: alert.title,
            sections: [
                {
                    activityTitle: `🚨 ${alert.title}`,
                    activitySubtitle: alert.message,
                    facts: [
                        {
                            name: 'Tipo',
                            value: alert.type
                        },
                        {
                            name: 'Severidad',
                            value: alert.severity
                        },
                        {
                            name: 'Fuente',
                            value: alert.source
                        },
                        {
                            name: 'Timestamp',
                            value: new Date(alert.timestamp).toISOString()
                        }
                    ]
                }
            ]
        };
        try {
            const response = await fetch(config.config.teamsWebhook, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(card)
            });
            if (!response.ok) {
                throw new Error(`Teams webhook failed: ${response.status}`);
            }
            _logger.logger.info(_logger.LogCategory.MONITORING, `Teams alert sent: ${alert.title}`);
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error sending Teams alert', error);
        }
    }
    /**
   * Envía alerta a consola
   */ sendConsoleAlert(alert) {
        const emoji = this.getSeverityEmoji(alert.severity);
        console.log(`${emoji} [${alert.severity.toUpperCase()}] ${alert.title}`);
        console.log(`   Message: ${alert.message}`);
        console.log(`   Source: ${alert.source} | Type: ${alert.type}`);
        console.log(`   ID: ${alert.id} | Time: ${new Date(alert.timestamp).toISOString()}`);
    }
    /**
   * Obtiene canales aplicables para una alerta
   */ getApplicableChannels(alert) {
        return Array.from(this.channelConfigs.values()).filter((config)=>{
            if (!config.enabled) {
                return false;
            }
            const { filters } = config;
            if (!filters) {
                return true;
            }
            // Filtrar por severidad
            if (filters.severities && !filters.severities.includes(alert.severity)) {
                return false;
            }
            // Filtrar por tipo
            if (filters.types && !filters.types.includes(alert.type)) {
                return false;
            }
            // Filtrar por keywords
            if (filters.keywords) {
                const text = `${alert.title} ${alert.message}`.toLowerCase();
                const hasKeyword = filters.keywords.some((keyword)=>text.includes(keyword.toLowerCase()));
                if (!hasKeyword) {
                    return false;
                }
            }
            return true;
        });
    }
    /**
   * Verifica rate limiting
   */ checkRateLimit(config) {
        if (!config.rateLimiting) {
            return true;
        }
        const key = `${config.channel}_rate_limit`;
        const now = Date.now();
        const counter = this.rateLimitCounters.get(key);
        if (!counter || now > counter.resetTime) {
            // Reset counter
            this.rateLimitCounters.set(key, {
                count: 0,
                resetTime: now + 60 * 60 * 1000
            });
            return true;
        }
        return counter.count < config.rateLimiting.maxAlertsPerHour;
    }
    /**
   * Actualiza contador de rate limiting
   */ updateRateLimit(config) {
        if (!config.rateLimiting) {
            return;
        }
        const key = `${config.channel}_rate_limit`;
        const counter = this.rateLimitCounters.get(key);
        if (counter) {
            counter.count++;
        }
    }
    /**
   * Programa escalación de alerta
   */ scheduleEscalation(alert) {
        const policy = this.escalationPolicies.get('default');
        if (!policy || !policy.enabled) {
            return;
        }
        const nextRule = policy.rules.find((rule)=>rule.level > alert.escalationLevel);
        if (!nextRule) {
            return;
        }
        const delay = nextRule.delayMinutes * 60 * 1000;
        const timer = setTimeout(async ()=>{
            await this.escalateAlert(alert.id, nextRule);
        }, delay);
        this.escalationTimers.set(alert.id, timer);
    }
    /**
   * Escala una alerta
   */ async escalateAlert(alertId, rule) {
        const alert = this.alerts.get(alertId);
        if (!alert || alert.status !== "active") {
            return;
        }
        // Verificar condiciones de escalación
        if (rule.conditions?.unacknowledgedOnly && alert.status === "acknowledged") {
            return;
        }
        if (rule.conditions?.severities && !rule.conditions.severities.includes(alert.severity)) {
            return;
        }
        if (rule.conditions?.types && !rule.conditions.types.includes(alert.type)) {
            return;
        }
        // Actualizar nivel de escalación
        alert.escalationLevel = rule.level;
        alert.escalatedAt = Date.now();
        // Enviar a canales de escalación
        const escalationChannels = rule.channels.map((channel)=>this.channelConfigs.get(channel)).filter(Boolean);
        for (const channelConfig of escalationChannels){
            await this.sendToChannel(alert, channelConfig);
        }
        // Programar siguiente escalación
        this.scheduleEscalation(alert);
        _logger.logger.warn(_logger.LogCategory.MONITORING, `Alert escalated to level ${rule.level}: ${alert.title}`, {
            alertId,
            level: rule.level
        });
    }
    /**
   * Reconoce una alerta
   */ acknowledgeAlert(alertId, acknowledgedBy) {
        const alert = this.alerts.get(alertId);
        if (!alert || alert.status !== "active") {
            return false;
        }
        alert.status = "acknowledged";
        alert.acknowledgedBy = acknowledgedBy;
        alert.acknowledgedAt = Date.now();
        // Cancelar escalación
        const timer = this.escalationTimers.get(alertId);
        if (timer) {
            clearTimeout(timer);
            this.escalationTimers.delete(alertId);
        }
        _logger.logger.info(_logger.LogCategory.MONITORING, `Alert acknowledged: ${alert.title}`, {
            alertId,
            acknowledgedBy
        });
        return true;
    }
    /**
   * Resuelve una alerta
   */ resolveAlert(alertId, resolvedBy) {
        const alert = this.alerts.get(alertId);
        if (!alert || alert.status === "resolved") {
            return false;
        }
        alert.status = "resolved";
        alert.resolvedBy = resolvedBy;
        alert.resolvedAt = Date.now();
        // Cancelar escalación
        const timer = this.escalationTimers.get(alertId);
        if (timer) {
            clearTimeout(timer);
            this.escalationTimers.delete(alertId);
        }
        _logger.logger.info(_logger.LogCategory.MONITORING, `Alert resolved: ${alert.title}`, {
            alertId,
            resolvedBy
        });
        return true;
    }
    /**
   * Suprime una alerta
   */ suppressAlert(alertId, durationMinutes, reason) {
        const alert = this.alerts.get(alertId);
        if (!alert) {
            return false;
        }
        alert.status = "suppressed";
        alert.suppressedUntil = Date.now() + durationMinutes * 60 * 1000;
        _logger.logger.info(_logger.LogCategory.MONITORING, `Alert suppressed: ${alert.title}`, {
            alertId,
            durationMinutes,
            reason
        });
        return true;
    }
    /**
   * Obtiene alertas activas
   */ getActiveAlerts() {
        return Array.from(this.alerts.values()).filter((alert)=>alert.status === "active" || alert.status === "acknowledged");
    }
    /**
   * Obtiene estadísticas de alertas
   */ getAlertStats() {
        const alerts = Array.from(this.alerts.values());
        const stats = {
            total: alerts.length,
            active: 0,
            acknowledged: 0,
            resolved: 0,
            suppressed: 0,
            bySeverity: {
                ["low"]: 0,
                ["medium"]: 0,
                ["high"]: 0,
                ["critical"]: 0
            },
            byType: {
                ["performance"]: 0,
                ["error"]: 0,
                ["capacity"]: 0,
                ["availability"]: 0,
                ["security"]: 0,
                ["business"]: 0
            }
        };
        alerts.forEach((alert)=>{
            switch(alert.status){
                case "active":
                    stats.active++;
                    break;
                case "acknowledged":
                    stats.acknowledged++;
                    break;
                case "resolved":
                    stats.resolved++;
                    break;
                case "suppressed":
                    stats.suppressed++;
                    break;
            }
            stats.bySeverity[alert.severity]++;
            stats.byType[alert.type]++;
        });
        return stats;
    }
    // ===================================
    // MÉTODOS AUXILIARES
    // ===================================
    generateFingerprint(type, title, source) {
        const content = `${type}:${title}:${source}`;
        return Buffer.from(content).toString('base64').slice(0, 16);
    }
    findExistingAlert(fingerprint) {
        return Array.from(this.alerts.values()).find((alert)=>alert.fingerprint === fingerprint && alert.status === "active");
    }
    async updateExistingAlert(alertId, newDetails) {
        const alert = this.alerts.get(alertId);
        if (alert) {
            alert.details = {
                ...alert.details,
                ...newDetails
            };
            alert.timestamp = Date.now(); // Actualizar timestamp
            await this.persistAlert(alert);
        }
        return alertId;
    }
    async isAlertSuppressed(type, severity, source, title) {
        // Verificar reglas de supresión
        for (const rule of this.suppressionRules.values()){
            if (!rule.enabled) {
                continue;
            }
            const { conditions } = rule;
            if (conditions.types && !conditions.types.includes(type)) {
                continue;
            }
            if (conditions.severities && !conditions.severities.includes(severity)) {
                continue;
            }
            if (conditions.sources && !conditions.sources.includes(source)) {
                continue;
            }
            if (conditions.keywords) {
                const text = title.toLowerCase();
                const hasKeyword = conditions.keywords.some((keyword)=>text.includes(keyword.toLowerCase()));
                if (!hasKeyword) {
                    continue;
                }
            }
            // Verificar ventanas de tiempo
            if (conditions.timeWindows) {
                const now = new Date();
                const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
                const currentDay = now.getDay();
                const inTimeWindow = conditions.timeWindows.some((window)=>{
                    return window.days.includes(currentDay) && currentTime >= window.start && currentTime <= window.end;
                });
                if (!inTimeWindow) {
                    continue;
                }
            }
            return true // Alerta suprimida
            ;
        }
        return false;
    }
    async persistAlert(alert) {
        try {
            await this.redis.setex(`alert:${alert.id}`, 86400 * 30, JSON.stringify(alert));
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error persisting alert', error);
        }
    }
    getSeverityEmoji(severity) {
        switch(severity){
            case "low":
                return '🟡';
            case "medium":
                return '🟠';
            case "high":
                return '🔴';
            case "critical":
                return '🚨';
            default:
                return '⚪';
        }
    }
    getSeverityColor(severity) {
        switch(severity){
            case "low":
                return '#ffeb3b';
            case "medium":
                return '#ff9800';
            case "high":
                return '#f44336';
            case "critical":
                return '#d32f2f';
            default:
                return '#9e9e9e';
        }
    }
    getSeverityColorHex(severity) {
        switch(severity){
            case "low":
                return 0xffeb3b;
            case "medium":
                return 0xff9800;
            case "high":
                return 0xf44336;
            case "critical":
                return 0xd32f2f;
            default:
                return 0x9e9e9e;
        }
    }
    /**
   * Configurar canales de alerta
   */ configureChannel(channel, config) {
        const existing = this.channelConfigs.get(channel) || {
            channel,
            enabled: false,
            config: {}
        };
        this.channelConfigs.set(channel, {
            ...existing,
            ...config
        });
        _logger.logger.info(_logger.LogCategory.MONITORING, `Alert channel configured: ${channel}`);
    }
    /**
   * Configurar política de escalación
   */ configureEscalationPolicy(policy) {
        this.escalationPolicies.set(policy.id, policy);
        _logger.logger.info(_logger.LogCategory.MONITORING, `Escalation policy configured: ${policy.name}`);
    }
    /**
   * Agregar regla de supresión
   */ addSuppressionRule(rule) {
        this.suppressionRules.set(rule.id, rule);
        _logger.logger.info(_logger.LogCategory.MONITORING, `Suppression rule added: ${rule.name}`);
    }
    /**
   * Destructor
   */ destroy() {
        this.escalationTimers.forEach((timer)=>clearTimeout(timer));
        this.escalationTimers.clear();
    }
}
const advancedAlertingEngine = AdvancedAlertingEngine.getInstance();
const AdvancedAlertingUtils = {
    /**
   * Crea alerta de performance
   */ async createPerformanceAlert (title, message, severity = "medium", details = {}) {
        return advancedAlertingEngine.createAlert("performance", severity, title, message, details, 'performance-monitor');
    },
    /**
   * Crea alerta de error
   */ async createErrorAlert (title, message, severity = "high", details = {}) {
        return advancedAlertingEngine.createAlert("error", severity, title, message, details, 'error-tracker');
    },
    /**
   * Crea alerta de capacidad
   */ async createCapacityAlert (title, message, severity = "medium", details = {}) {
        return advancedAlertingEngine.createAlert("capacity", severity, title, message, details, 'capacity-monitor');
    },
    /**
   * Obtiene resumen de alertas
   */ getAlertSummary () {
        const activeAlerts = advancedAlertingEngine.getActiveAlerts();
        const criticalAlerts = activeAlerts.filter((a)=>a.severity === "critical");
        const lastAlert = activeAlerts.sort((a, b)=>b.timestamp - a.timestamp)[0];
        return {
            activeCount: activeAlerts.length,
            criticalCount: criticalAlerts.length,
            lastAlert
        };
    }
};

//# sourceMappingURL=data:application/json;base64,