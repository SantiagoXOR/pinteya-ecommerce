{"version":3,"names":["GPSNavigationMap","currentLocation","destination","waypoints","isNavigating","driverId","cov_9npjab57n","b","orderId","onLocationUpdate","onRouteInfoUpdate","onRouteRecalculation","f","mapRef","s","_react","useRef","directionsRendererRef","directions","setDirections","useState","isLoading","setIsLoading","watchIdRef","modalState","_ModalContext","useModal","modalActions","useModalActions","routeInfo","setRouteInfo","totalDistance","totalDuration","remainingDistance","remainingDuration","averageSpeed","currentSpeed","elapsedTime","eta","trafficDelay","startTime","setStartTime","showTrafficLayer","setShowTrafficLayer","trafficLayer","setTrafficLayer","previousLocation","setPreviousLocation","speedHistory","setSpeedHistory","showTurnByTurn","setShowTurnByTurn","currentNavigationStep","setCurrentNavigationStep","needsRecalculation","setNeedsRecalculation","routeDeviation","setRouteDeviation","routeOptions","setRouteOptions","avoidTolls","avoidHighways","avoidFerries","travelMode","optimizeWaypoints","provideRouteAlternatives","alternativeRoutes","setAlternativeRoutes","selectedRouteIndex","setSelectedRouteIndex","showAdvancedControls","setShowAdvancedControls","mapOptions","zoom","center","lat","lng","mapTypeId","disableDefaultUI","zoomControl","gestureHandling","styles","featureType","elementType","stylers","visibility","useEffect","current","google","traffic","maps","TrafficLayer","setMap","navigator","Date","startLocationTracking","stopLocationTracking","calculateRoute","setCenter","calculateSpeed","useCallback","newLocation","distance","geometry","spherical","computeDistanceBetween","LatLng","timeElapsed","now","getTime","speed","Math","max","min","updateRouteInfo","route","routes","leg","legs","elapsedSeconds","avgSpeed","length","reduce","a","remainingDurationSeconds","duration","value","expectedDuration","durationInTraffic","duration_in_traffic","newRouteInfo","text","round","GeolocationTracker","HIGH_ACCURACY_OPTIONS","isGeolocationSupported","Promise","resolve","then","_interop_require_wildcard","require","console","error","tracker","position","prev","newHistory","slice","log","accuracy","timestamp","toISOString","code","message","type","retryable","originalError","warn","start","stop","geolocation","clearWatch","directionsService","DirectionsService","request","origin","coordinates","map","point","location","stopover","TravelMode","DRIVING","drivingOptions","departureTime","trafficModel","TrafficModel","BEST_GUESS","result","alternatives","index","routeIndex","summary","warnings","selectedRoute","initialRouteInfo","bounds","LatLngBounds","forEach","extend","start_location","end_location","fitBounds","padding","handleMapLoad","handleRouteRecalculation","handleRouteDeviation","deviation","handleRouteOptionsChange","newOptions","handleRouteSelect","handleEmergencyRecalculation","createMarkerIcon","url","width","height","anchorX","anchorY","Size","undefined","scaledSize","anchor","Point","CustomDirectionsRenderer","DirectionsRenderer","suppressMarkers","polylineOptions","strokeColor","strokeWeight","strokeOpacity","setRouteIndex","_jsxruntime","jsxs","className","jsx","_reactgooglemaps","APIProvider","apiKey","process","env","NEXT_PUBLIC_GOOGLE_MAPS_API_KEY","Map","onLoad","Marker","icon","title","waypoint","_FloatingActionButtons","FloatingActionButtons","hasActiveRoute","onRecalculateRoute","onEmergencyStop","_MobileModalOverlay","NavigationModalOverlay","showBackButton","_TurnByTurnNavigation","TurnByTurnNavigation","onStepComplete","stepIndex","_RouteInfoDashboard","RouteInfoDashboard","onToggleTrafficLayer","InfoModalOverlay","_RealTimeTracker","RealTimeTracker","plannedRoute","onRouteDeviation","onNeedRecalculation","FullscreenModalOverlay","_AdvancedNavigationControls","AdvancedNavigationControls","currentOptions","isCalculating","onOptionsChange","onRouteSelect","onEmergencyRecalculation","_GPSDebugInfo","default","showDetails","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","onClick","closeModal"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\GPSNavigationMap.tsx"],"sourcesContent":["/**\r\n * Componente de mapa GPS para navegación en tiempo real\r\n * Integra Google Maps con navegación turn-by-turn y tracking de ubicación\r\n * Incluye dashboard de métricas, información de ruta y controles avanzados\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { APIProvider, Map, Marker } from '@vis.gl/react-google-maps';\r\nimport { cn } from '@/lib/core/utils';\r\nimport { RouteInfoDashboard } from './RouteInfoDashboard';\r\nimport { TurnByTurnNavigation } from './TurnByTurnNavigation';\r\nimport { RealTimeTracker } from './RealTimeTracker';\r\nimport { AdvancedNavigationControls } from './AdvancedNavigationControls';\r\nimport { FloatingActionButtons } from './FloatingActionButtons';\r\nimport { NavigationModalOverlay, InfoModalOverlay, FullscreenModalOverlay } from './MobileModalOverlay';\r\nimport { useModal, useModalActions } from '@/contexts/ModalContext';\r\nimport GPSDebugInfo from './GPSDebugInfo';\r\n\r\ninterface RouteInfo {\r\n  totalDistance: string;\r\n  totalDuration: string;\r\n  remainingDistance: string;\r\n  remainingDuration: string;\r\n  averageSpeed: number;\r\n  currentSpeed: number;\r\n  elapsedTime: number;\r\n  eta: Date | null;\r\n  trafficDelay: number;\r\n}\r\n\r\ninterface RouteOptions {\r\n  avoidTolls: boolean;\r\n  avoidHighways: boolean;\r\n  avoidFerries: boolean;\r\n  travelMode: any; // Usar any en lugar de google.maps.TravelMode\r\n  optimizeWaypoints: boolean;\r\n  provideRouteAlternatives: boolean;\r\n}\r\n\r\ninterface AlternativeRoute {\r\n  routeIndex: number;\r\n  summary: string;\r\n  distance: string;\r\n  duration: string;\r\n  warnings: string[];\r\n}\r\n\r\ninterface GPSNavigationMapProps {\r\n  currentLocation: { lat: number; lng: number } | null;\r\n  destination: any;\r\n  waypoints: Array<{ lat: number; lng: number }>;\r\n  isNavigating: boolean;\r\n  driverId?: string;\r\n  orderId?: string;\r\n  onLocationUpdate: (location: { lat: number; lng: number }) => void;\r\n  onRouteInfoUpdate?: (routeInfo: RouteInfo) => void;\r\n  onRouteRecalculation?: () => void;\r\n}\r\n\r\nexport function GPSNavigationMap({\r\n  currentLocation,\r\n  destination,\r\n  waypoints,\r\n  isNavigating,\r\n  driverId = 'default-driver',\r\n  orderId = 'default-order',\r\n  onLocationUpdate,\r\n  onRouteInfoUpdate,\r\n  onRouteRecalculation\r\n}: GPSNavigationMapProps) {\r\n  const mapRef = useRef<any>(null);\r\n  const directionsRendererRef = useRef<any>(null);\r\n  const [directions, setDirections] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const watchIdRef = useRef<number | null>(null);\r\n\r\n  // Modal management\r\n  const { modalState } = useModal();\r\n  const modalActions = useModalActions();\r\n\r\n  // Estados para información de ruta y métricas\r\n  const [routeInfo, setRouteInfo] = useState<RouteInfo>({\r\n    totalDistance: '0 km',\r\n    totalDuration: '0 min',\r\n    remainingDistance: '0 km',\r\n    remainingDuration: '0 min',\r\n    averageSpeed: 0,\r\n    currentSpeed: 0,\r\n    elapsedTime: 0,\r\n    eta: null,\r\n    trafficDelay: 0\r\n  });\r\n  const [startTime, setStartTime] = useState<Date | null>(null);\r\n  const [showTrafficLayer, setShowTrafficLayer] = useState(true);\r\n  const [trafficLayer, setTrafficLayer] = useState<any>(null);\r\n  const [previousLocation, setPreviousLocation] = useState<{ lat: number; lng: number } | null>(null);\r\n  const [speedHistory, setSpeedHistory] = useState<number[]>([]);\r\n  const [showTurnByTurn, setShowTurnByTurn] = useState(true);\r\n  const [currentNavigationStep, setCurrentNavigationStep] = useState(0);\r\n  const [needsRecalculation, setNeedsRecalculation] = useState(false);\r\n  const [routeDeviation, setRouteDeviation] = useState(0);\r\n\r\n  // Estados para controles avanzados\r\n  const [routeOptions, setRouteOptions] = useState<RouteOptions>({\r\n    avoidTolls: false,\r\n    avoidHighways: false,\r\n    avoidFerries: false,\r\n    travelMode: 'DRIVING' as any, // Usar string en lugar de google.maps.TravelMode.DRIVING\r\n    optimizeWaypoints: true,\r\n    provideRouteAlternatives: false\r\n  });\r\n  const [alternativeRoutes, setAlternativeRoutes] = useState<AlternativeRoute[]>([]);\r\n  const [selectedRouteIndex, setSelectedRouteIndex] = useState(0);\r\n  const [showAdvancedControls, setShowAdvancedControls] = useState(false);\r\n\r\n  // Configuración del mapa optimizada para navegación\r\n  const mapOptions = {\r\n    zoom: 16,\r\n    center: currentLocation || { lat: -34.6037, lng: -58.3816 }, // Buenos Aires por defecto\r\n    mapTypeId: 'roadmap',\r\n    disableDefaultUI: true,\r\n    zoomControl: true,\r\n    gestureHandling: 'greedy',\r\n    styles: [\r\n      {\r\n        featureType: 'poi',\r\n        elementType: 'labels',\r\n        stylers: [{ visibility: 'off' }]\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Inicializar Traffic Layer\r\n  useEffect(() => {\r\n    if (mapRef.current && showTrafficLayer && !trafficLayer && typeof google !== 'undefined') {\r\n      const traffic = new google.maps.TrafficLayer();\r\n      traffic.setMap(mapRef.current);\r\n      setTrafficLayer(traffic);\r\n    } else if (trafficLayer && !showTrafficLayer) {\r\n      trafficLayer.setMap(null);\r\n      setTrafficLayer(null);\r\n    }\r\n  }, [mapRef.current, showTrafficLayer]);\r\n\r\n  // Iniciar tracking de ubicación cuando se activa la navegación\r\n  useEffect(() => {\r\n    if (isNavigating && 'geolocation' in navigator) {\r\n      setStartTime(new Date());\r\n      startLocationTracking();\r\n    } else {\r\n      stopLocationTracking();\r\n      setStartTime(null);\r\n    }\r\n\r\n    return () => stopLocationTracking();\r\n  }, [isNavigating]);\r\n\r\n  // Calcular ruta cuando cambia el destino o se necesita recálculo\r\n  useEffect(() => {\r\n    if (currentLocation && destination && (isNavigating || needsRecalculation)) {\r\n      calculateRoute();\r\n      setNeedsRecalculation(false);\r\n    }\r\n  }, [currentLocation, destination, isNavigating, needsRecalculation]);\r\n\r\n  // Centrar mapa en ubicación actual\r\n  useEffect(() => {\r\n    if (mapRef.current && currentLocation) {\r\n      mapRef.current.setCenter(currentLocation);\r\n    }\r\n  }, [currentLocation]);\r\n\r\n  // Calcular velocidad y actualizar métricas\r\n  const calculateSpeed = useCallback((newLocation: { lat: number; lng: number }) => {\r\n    if (!previousLocation || !startTime || typeof google === 'undefined') return 0;\r\n\r\n    const distance = google.maps.geometry.spherical.computeDistanceBetween(\r\n      new google.maps.LatLng(previousLocation.lat, previousLocation.lng),\r\n      new google.maps.LatLng(newLocation.lat, newLocation.lng)\r\n    );\r\n\r\n    const timeElapsed = (Date.now() - startTime.getTime()) / 1000; // segundos\r\n    const speed = (distance / 1000) / (timeElapsed / 3600); // km/h\r\n\r\n    return Math.max(0, Math.min(speed, 200)); // Limitar velocidad entre 0-200 km/h\r\n  }, [previousLocation, startTime]);\r\n\r\n  // Actualizar información de ruta\r\n  const updateRouteInfo = useCallback(() => {\r\n    if (!directions || !startTime) return;\r\n\r\n    const route = directions.routes[0];\r\n    const leg = route.legs[0];\r\n    const now = new Date();\r\n    const elapsedSeconds = (now.getTime() - startTime.getTime()) / 1000;\r\n\r\n    // Calcular velocidad promedio\r\n    const avgSpeed = speedHistory.length > 0\r\n      ? speedHistory.reduce((a, b) => a + b, 0) / speedHistory.length\r\n      : 0;\r\n\r\n    // Calcular ETA\r\n    const remainingDurationSeconds = leg.duration?.value || 0;\r\n    const eta = new Date(now.getTime() + remainingDurationSeconds * 1000);\r\n\r\n    // Detectar demoras por tráfico\r\n    const expectedDuration = leg.duration?.value || 0;\r\n    const durationInTraffic = leg.duration_in_traffic?.value || expectedDuration;\r\n    const trafficDelay = Math.max(0, durationInTraffic - expectedDuration);\r\n\r\n    const newRouteInfo: RouteInfo = {\r\n      totalDistance: leg.distance?.text || '0 km',\r\n      totalDuration: leg.duration?.text || '0 min',\r\n      remainingDistance: leg.distance?.text || '0 km',\r\n      remainingDuration: leg.duration?.text || '0 min',\r\n      averageSpeed: Math.round(avgSpeed),\r\n      currentSpeed: speedHistory[speedHistory.length - 1] || 0,\r\n      elapsedTime: Math.round(elapsedSeconds),\r\n      eta,\r\n      trafficDelay: Math.round(trafficDelay / 60) // minutos\r\n    };\r\n\r\n    setRouteInfo(newRouteInfo);\r\n    onRouteInfoUpdate?.(newRouteInfo);\r\n  }, [directions, startTime, speedHistory, onRouteInfoUpdate]);\r\n\r\n  const startLocationTracking = async () => {\r\n    if (watchIdRef.current) return;\r\n\r\n    try {\r\n      // Importar utilidades de geolocalización mejoradas\r\n      const { GeolocationTracker, HIGH_ACCURACY_OPTIONS, isGeolocationSupported } = await import('@/lib/utils/geolocation');\r\n\r\n      if (!isGeolocationSupported()) {\r\n        console.error('Geolocation is not supported by this browser');\r\n        return;\r\n      }\r\n\r\n      // Crear tracker con manejo mejorado de errores\r\n      const tracker = new GeolocationTracker(\r\n        HIGH_ACCURACY_OPTIONS,\r\n        (position) => {\r\n          const newLocation = {\r\n            lat: position.lat,\r\n            lng: position.lng\r\n          };\r\n\r\n          // Calcular velocidad actual\r\n          const currentSpeed = calculateSpeed(newLocation);\r\n\r\n          // Actualizar historial de velocidades (mantener últimas 10 mediciones)\r\n          setSpeedHistory(prev => {\r\n            const newHistory = [...prev, currentSpeed].slice(-10);\r\n            return newHistory;\r\n          });\r\n\r\n          setPreviousLocation(newLocation);\r\n          onLocationUpdate(newLocation);\r\n\r\n          // Actualizar métricas de ruta\r\n          updateRouteInfo();\r\n\r\n          console.log('GPS location updated:', {\r\n            lat: position.lat,\r\n            lng: position.lng,\r\n            accuracy: position.accuracy,\r\n            timestamp: new Date(position.timestamp).toISOString()\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error('GPS Navigation Error:', {\r\n            code: error.code,\r\n            message: error.message,\r\n            type: error.type,\r\n            retryable: error.retryable,\r\n            timestamp: new Date(error.timestamp).toISOString(),\r\n            originalError: error.originalError\r\n          });\r\n\r\n          // Mostrar notificación al usuario solo para errores no retryables\r\n          if (!error.retryable) {\r\n            console.warn('GPS Error (no retryable):', error.message);\r\n          }\r\n        }\r\n      );\r\n\r\n      // Guardar referencia del tracker\r\n      watchIdRef.current = tracker as any;\r\n\r\n      // Iniciar tracking\r\n      await tracker.start();\r\n\r\n    } catch (error) {\r\n      console.error('Error initializing enhanced location tracking:', error);\r\n    }\r\n  };\r\n\r\n  const stopLocationTracking = () => {\r\n    if (watchIdRef.current) {\r\n      // Si es el nuevo tracker, usar su método stop\r\n      if (typeof watchIdRef.current === 'object' && 'stop' in watchIdRef.current) {\r\n        (watchIdRef.current as any).stop();\r\n      } else {\r\n        // Fallback para el método anterior\r\n        navigator.geolocation.clearWatch(watchIdRef.current as number);\r\n      }\r\n      watchIdRef.current = null;\r\n    }\r\n  };\r\n\r\n  const calculateRoute = async () => {\r\n    if (!currentLocation || !destination || typeof google === 'undefined') return;\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const directionsService = new google.maps.DirectionsService();\r\n      \r\n      const request: google.maps.DirectionsRequest = {\r\n        origin: currentLocation,\r\n        destination: destination.coordinates || destination,\r\n        waypoints: waypoints.map(point => ({\r\n          location: point,\r\n          stopover: true\r\n        })),\r\n        travelMode: google.maps.TravelMode.DRIVING,\r\n        optimizeWaypoints: routeOptions.optimizeWaypoints,\r\n        avoidHighways: routeOptions.avoidHighways,\r\n        avoidTolls: routeOptions.avoidTolls,\r\n        avoidFerries: routeOptions.avoidFerries,\r\n        provideRouteAlternatives: routeOptions.provideRouteAlternatives,\r\n        drivingOptions: {\r\n          departureTime: new Date(),\r\n          trafficModel: google.maps.TrafficModel.BEST_GUESS\r\n        }\r\n      };\r\n\r\n      const result = await directionsService.route(request);\r\n      setDirections(result);\r\n\r\n      // Procesar rutas alternativas si están disponibles\r\n      if (result.routes.length > 1 && routeOptions.provideRouteAlternatives) {\r\n        const alternatives: AlternativeRoute[] = result.routes.slice(1).map((route, index) => ({\r\n          routeIndex: index + 1,\r\n          summary: route.summary || `Ruta ${index + 2}`,\r\n          distance: route.legs[0]?.distance?.text || '0 km',\r\n          duration: route.legs[0]?.duration?.text || '0 min',\r\n          warnings: route.warnings || []\r\n        }));\r\n        setAlternativeRoutes(alternatives);\r\n      } else {\r\n        setAlternativeRoutes([]);\r\n      }\r\n\r\n      // Inicializar información de ruta (usar ruta seleccionada)\r\n      const selectedRoute = result.routes[selectedRouteIndex] || result.routes[0];\r\n      if (selectedRoute) {\r\n        const leg = selectedRoute.legs[0];\r\n\r\n        const initialRouteInfo: RouteInfo = {\r\n          totalDistance: leg.distance?.text || '0 km',\r\n          totalDuration: leg.duration?.text || '0 min',\r\n          remainingDistance: leg.distance?.text || '0 km',\r\n          remainingDuration: leg.duration?.text || '0 min',\r\n          averageSpeed: 0,\r\n          currentSpeed: 0,\r\n          elapsedTime: 0,\r\n          eta: startTime ? new Date(startTime.getTime() + (leg.duration?.value || 0) * 1000) : null,\r\n          trafficDelay: leg.duration_in_traffic ?\r\n            Math.round((leg.duration_in_traffic.value - (leg.duration?.value || 0)) / 60) : 0\r\n        };\r\n\r\n        setRouteInfo(initialRouteInfo);\r\n        onRouteInfoUpdate?.(initialRouteInfo);\r\n      }\r\n\r\n      // Ajustar vista del mapa para mostrar toda la ruta\r\n      if (mapRef.current && result.routes[0] && typeof google !== 'undefined') {\r\n        const bounds = new google.maps.LatLngBounds();\r\n        result.routes[0].legs.forEach(leg => {\r\n          bounds.extend(leg.start_location);\r\n          bounds.extend(leg.end_location);\r\n        });\r\n        mapRef.current.fitBounds(bounds, { padding: 50 });\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error calculating route:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMapLoad = (map: any) => {\r\n    mapRef.current = map;\r\n  };\r\n\r\n  // Manejar solicitud de recálculo de ruta\r\n  const handleRouteRecalculation = useCallback(() => {\r\n    setNeedsRecalculation(true);\r\n    onRouteRecalculation?.();\r\n  }, [onRouteRecalculation]);\r\n\r\n  // Manejar desviación de ruta\r\n  const handleRouteDeviation = useCallback((deviation: number) => {\r\n    setRouteDeviation(deviation);\r\n  }, []);\r\n\r\n  // Manejar cambio de opciones de ruta\r\n  const handleRouteOptionsChange = useCallback((newOptions: RouteOptions) => {\r\n    setRouteOptions(newOptions);\r\n    setNeedsRecalculation(true);\r\n  }, []);\r\n\r\n  // Manejar selección de ruta alternativa\r\n  const handleRouteSelect = useCallback((routeIndex: number) => {\r\n    setSelectedRouteIndex(routeIndex);\r\n    setNeedsRecalculation(true);\r\n  }, []);\r\n\r\n  // Manejar recálculo de emergencia\r\n  const handleEmergencyRecalculation = useCallback(() => {\r\n    // Resetear opciones a valores seguros para emergencia\r\n    setRouteOptions(prev => ({\r\n      ...prev,\r\n      avoidTolls: false,\r\n      avoidHighways: false,\r\n      avoidFerries: false,\r\n      provideRouteAlternatives: true\r\n    }));\r\n    setNeedsRecalculation(true);\r\n  }, []);\r\n\r\n  // Helper para crear iconos de marcadores\r\n  const createMarkerIcon = (url: string, width: number, height: number, anchorX: number, anchorY: number) => {\r\n    if (typeof google === 'undefined' || !google.maps || !google.maps.Size) return undefined;\r\n    try {\r\n      return {\r\n        url,\r\n        scaledSize: new google.maps.Size(width, height),\r\n        anchor: new google.maps.Point(anchorX, anchorY)\r\n      };\r\n    } catch (error) {\r\n      console.warn('Error creating marker icon:', error);\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  // Componente personalizado para DirectionsRenderer\r\n  const CustomDirectionsRenderer = ({ directions }: { directions: any }) => {\r\n    useEffect(() => {\r\n      if (!mapRef.current || !directions || typeof google === 'undefined') return;\r\n\r\n      // Crear DirectionsRenderer si no existe\r\n      if (!directionsRendererRef.current) {\r\n        directionsRendererRef.current = new google.maps.DirectionsRenderer({\r\n          suppressMarkers: true,\r\n          polylineOptions: {\r\n            strokeColor: '#2563eb',\r\n            strokeWeight: 6,\r\n            strokeOpacity: 0.8\r\n          }\r\n        });\r\n        directionsRendererRef.current.setMap(mapRef.current);\r\n      }\r\n\r\n      // Actualizar direcciones\r\n      directionsRendererRef.current.setDirections(directions);\r\n      directionsRendererRef.current.setRouteIndex(selectedRouteIndex);\r\n\r\n      return () => {\r\n        if (directionsRendererRef.current) {\r\n          directionsRendererRef.current.setMap(null);\r\n        }\r\n      };\r\n    }, [directions, selectedRouteIndex]);\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative w-full h-full\">\r\n      <APIProvider apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!}>\r\n        <Map\r\n          {...mapOptions}\r\n          onLoad={handleMapLoad}\r\n          className=\"w-full h-full\"\r\n        >\r\n          {/* Marcador de ubicación actual */}\r\n          {currentLocation && (\r\n            <Marker\r\n              position={currentLocation}\r\n              icon={createMarkerIcon('/icons/driver-location.png', 40, 40, 20, 20)}\r\n              title=\"Mi ubicación\"\r\n            />\r\n          )}\r\n\r\n          {/* Marcador de destino */}\r\n          {destination && (\r\n            <Marker\r\n              position={destination.coordinates || destination}\r\n              icon={createMarkerIcon('/icons/delivery-destination.png', 35, 35, 17, 35)}\r\n              title=\"Destino de entrega\"\r\n            />\r\n          )}\r\n\r\n          {/* Marcadores de waypoints */}\r\n          {waypoints.map((waypoint, index) => (\r\n            <Marker\r\n              key={index}\r\n              position={waypoint}\r\n              icon={createMarkerIcon('/icons/waypoint.png', 25, 25, 12, 25)}\r\n              title={`Punto ${index + 1}`}\r\n            />\r\n          ))}\r\n\r\n          {/* Renderizar direcciones */}\r\n          <CustomDirectionsRenderer directions={directions} />\r\n        </Map>\r\n      </APIProvider>\r\n\r\n      {/* Indicador de carga */}\r\n      {isLoading && (\r\n        <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2 bg-white rounded-lg shadow-lg px-4 py-2\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\r\n            <span className=\"text-sm font-medium\">Calculando ruta...</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Indicador de navegación activa - Solo en desktop */}\r\n      {isNavigating && (\r\n        <div className=\"absolute top-4 left-4 bg-green-600 text-white rounded-lg px-3 py-1 hidden md:block\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></div>\r\n            <span className=\"text-sm font-medium\">GPS Activo</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Botones flotantes para activar modales */}\r\n      <FloatingActionButtons\r\n        isNavigating={isNavigating}\r\n        hasActiveRoute={!!directions}\r\n        onRecalculateRoute={() => setNeedsRecalculation(true)}\r\n        onEmergencyStop={handleEmergencyRecalculation}\r\n      />\r\n\r\n      {/* Modales Mobile-First */}\r\n\r\n      {/* Modal de Navegación Turn-by-Turn */}\r\n      <NavigationModalOverlay\r\n        type=\"navigation-instructions\"\r\n        title=\"Navegación GPS\"\r\n        showBackButton={false}\r\n      >\r\n        {isNavigating && directions && (\r\n          <TurnByTurnNavigation\r\n            directions={directions}\r\n            currentLocation={currentLocation}\r\n            isNavigating={isNavigating}\r\n            onStepComplete={(stepIndex) => setCurrentNavigationStep(stepIndex)}\r\n          />\r\n        )}\r\n      </NavigationModalOverlay>\r\n\r\n      {/* Modal de Información de Ruta */}\r\n      <NavigationModalOverlay\r\n        type=\"route-info\"\r\n        title=\"Información de Ruta\"\r\n      >\r\n        {isNavigating && directions && (\r\n          <RouteInfoDashboard\r\n            routeInfo={routeInfo}\r\n            isNavigating={isNavigating}\r\n            showTrafficLayer={showTrafficLayer}\r\n            onToggleTrafficLayer={() => setShowTrafficLayer(!showTrafficLayer)}\r\n          />\r\n        )}\r\n      </NavigationModalOverlay>\r\n\r\n      {/* Modal de Real-Time Tracker */}\r\n      <InfoModalOverlay\r\n        type=\"real-time-tracker\"\r\n        title=\"Tracking en Tiempo Real\"\r\n      >\r\n        {isNavigating && (\r\n          <RealTimeTracker\r\n            driverId={driverId}\r\n            orderId={orderId}\r\n            currentLocation={currentLocation}\r\n            plannedRoute={directions}\r\n            isNavigating={isNavigating}\r\n            onLocationUpdate={onLocationUpdate}\r\n            onRouteDeviation={handleRouteDeviation}\r\n            onNeedRecalculation={handleRouteRecalculation}\r\n          />\r\n        )}\r\n      </InfoModalOverlay>\r\n\r\n      {/* Modal de Controles Avanzados */}\r\n      <FullscreenModalOverlay\r\n        type=\"advanced-controls\"\r\n        title=\"Controles Avanzados\"\r\n      >\r\n        <AdvancedNavigationControls\r\n          currentOptions={routeOptions}\r\n          alternativeRoutes={alternativeRoutes}\r\n          isCalculating={isLoading}\r\n          onOptionsChange={handleRouteOptionsChange}\r\n          onRouteSelect={handleRouteSelect}\r\n          onRecalculateRoute={() => setNeedsRecalculation(true)}\r\n          onEmergencyRecalculation={handleEmergencyRecalculation}\r\n        />\r\n      </FullscreenModalOverlay>\r\n\r\n      {/* Modal de Debug GPS */}\r\n      <InfoModalOverlay\r\n        type=\"gps-debug\"\r\n        title=\"Debug GPS\"\r\n      >\r\n        <GPSDebugInfo showDetails={true} />\r\n      </InfoModalOverlay>\r\n\r\n      {/* Modal de Opciones de Emergencia */}\r\n      <InfoModalOverlay\r\n        type=\"emergency-options\"\r\n        title=\"Opciones de Emergencia\"\r\n      >\r\n        <div className=\"p-4 space-y-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n              <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n              </svg>\r\n            </div>\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Emergencia Detectada</h3>\r\n            <p className=\"text-gray-600 mb-6\">¿Necesitas recalcular la ruta o reportar un problema?</p>\r\n          </div>\r\n\r\n          <div className=\"space-y-3\">\r\n            <button\r\n              onClick={() => {\r\n                setNeedsRecalculation(true);\r\n                modalActions.closeModal();\r\n              }}\r\n              className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white font-medium py-3 px-4 rounded-lg transition-colors\"\r\n            >\r\n              Recalcular Ruta\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => {\r\n                handleEmergencyRecalculation();\r\n                modalActions.closeModal();\r\n              }}\r\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white font-medium py-3 px-4 rounded-lg transition-colors\"\r\n            >\r\n              Emergencia - Ruta Alternativa\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => modalActions.closeModal()}\r\n              className=\"w-full bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium py-3 px-4 rounded-lg transition-colors\"\r\n            >\r\n              Cancelar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </InfoModalOverlay>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsuDgB;;;;;;WAAAA,gBAAA;;;;;;;;wEArDgD;;;iCACvB;;;iCAEN;;;iCACE;;;iCACL;;;iCACW;;;kCACL;;;kCAC2C;;;kCACvC;;;wEACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2ClB,SAASA,iBAAiB;EAC/BC,eAAe;EACfC,WAAW;EACXC,SAAS;EACTC,YAAY;EACZC,QAAA;EAAA;EAAA,CAAAC,aAAA,GAAAC,CAAA,WAAW,gBAAgB;EAC3BC,OAAA;EAAA;EAAA,CAAAF,aAAA,GAAAC,CAAA,WAAU,eAAe;EACzBE,gBAAgB;EAChBC,iBAAiB;EACjBC;AAAoB,CACE;EAAA;EAAAL,aAAA,GAAAM,CAAA;EACtB,MAAMC,MAAA;EAAA;EAAA,CAAAP,aAAA,GAAAQ,CAAA,QAAS,IAAAC,MAAA,CAAAC,MAAM,EAAM;EAC3B,MAAMC,qBAAA;EAAA;EAAA,CAAAX,aAAA,GAAAQ,CAAA,QAAwB,IAAAC,MAAA,CAAAC,MAAM,EAAM;EAC1C,MAAM,CAACE,UAAA,EAAYC,aAAA,CAAc;EAAA;EAAA,CAAAb,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAM;EAClD,MAAM,CAACC,SAAA,EAAWC,YAAA,CAAa;EAAA;EAAA,CAAAhB,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EAC3C,MAAMG,UAAA;EAAA;EAAA,CAAAjB,aAAA,GAAAQ,CAAA,QAAa,IAAAC,MAAA,CAAAC,MAAM,EAAgB;EAEzC;EACA,MAAM;IAAEQ;EAAU,CAAE;EAAA;EAAA,CAAAlB,aAAA,GAAAQ,CAAA,QAAG,IAAAW,aAAA,CAAAC,QAAQ;EAC/B,MAAMC,YAAA;EAAA;EAAA,CAAArB,aAAA,GAAAQ,CAAA,QAAe,IAAAW,aAAA,CAAAG,eAAe;EAEpC;EACA,MAAM,CAACC,SAAA,EAAWC,YAAA,CAAa;EAAA;EAAA,CAAAxB,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAY;IACpDW,aAAA,EAAe;IACfC,aAAA,EAAe;IACfC,iBAAA,EAAmB;IACnBC,iBAAA,EAAmB;IACnBC,YAAA,EAAc;IACdC,YAAA,EAAc;IACdC,WAAA,EAAa;IACbC,GAAA,EAAK;IACLC,YAAA,EAAc;EAChB;EACA,MAAM,CAACC,SAAA,EAAWC,YAAA,CAAa;EAAA;EAAA,CAAAnC,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAc;EACxD,MAAM,CAACsB,gBAAA,EAAkBC,mBAAA,CAAoB;EAAA;EAAA,CAAArC,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EACzD,MAAM,CAACwB,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAAvC,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAM;EACtD,MAAM,CAAC0B,gBAAA,EAAkBC,mBAAA,CAAoB;EAAA;EAAA,CAAAzC,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAsC;EAC9F,MAAM,CAAC4B,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAA3C,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAW,EAAE;EAC7D,MAAM,CAAC8B,cAAA,EAAgBC,iBAAA,CAAkB;EAAA;EAAA,CAAA7C,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EACrD,MAAM,CAACgC,qBAAA,EAAuBC,wBAAA,CAAyB;EAAA;EAAA,CAAA/C,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EACnE,MAAM,CAACkC,kBAAA,EAAoBC,qBAAA,CAAsB;EAAA;EAAA,CAAAjD,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EAC7D,MAAM,CAACoC,cAAA,EAAgBC,iBAAA,CAAkB;EAAA;EAAA,CAAAnD,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EAErD;EACA,MAAM,CAACsC,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAArD,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAe;IAC7DwC,UAAA,EAAY;IACZC,aAAA,EAAe;IACfC,YAAA,EAAc;IACdC,UAAA,EAAY;IACZC,iBAAA,EAAmB;IACnBC,wBAAA,EAA0B;EAC5B;EACA,MAAM,CAACC,iBAAA,EAAmBC,oBAAA,CAAqB;EAAA;EAAA,CAAA7D,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAqB,EAAE;EACjF,MAAM,CAACgD,kBAAA,EAAoBC,qBAAA,CAAsB;EAAA;EAAA,CAAA/D,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EAC7D,MAAM,CAACkD,oBAAA,EAAsBC,uBAAA,CAAwB;EAAA;EAAA,CAAAjE,aAAA,GAAAQ,CAAA,QAAG,IAAAC,MAAA,CAAAK,QAAQ,EAAC;EAEjE;EACA,MAAMoD,UAAA;EAAA;EAAA,CAAAlE,aAAA,GAAAQ,CAAA,QAAa;IACjB2D,IAAA,EAAM;IACNC,MAAA;IAAQ;IAAA,CAAApE,aAAA,GAAAC,CAAA,WAAAN,eAAA;IAAA;IAAA,CAAAK,aAAA,GAAAC,CAAA,WAAmB;MAAEoE,GAAA,EAAK,CAAC;MAASC,GAAA,EAAK,CAAC;IAAQ;IAC1DC,SAAA,EAAW;IACXC,gBAAA,EAAkB;IAClBC,WAAA,EAAa;IACbC,eAAA,EAAiB;IACjBC,MAAA,EAAQ,CACN;MACEC,WAAA,EAAa;MACbC,WAAA,EAAa;MACbC,OAAA,EAAS,CAAC;QAAEC,UAAA,EAAY;MAAM;IAChC;EAEJ;EAEA;EAAA;EAAA/E,aAAA,GAAAQ,CAAA;EACA,IAAAC,MAAA,CAAAuE,SAAS,EAAC;IAAA;IAAAhF,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACR;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,WAAAM,MAAA,CAAO0E,OAAO;IAAA;IAAA,CAAAjF,aAAA,GAAAC,CAAA,WAAImC,gBAAA;IAAA;IAAA,CAAApC,aAAA,GAAAC,CAAA,WAAoB,CAACqC,YAAA;IAAA;IAAA,CAAAtC,aAAA,GAAAC,CAAA,WAAgB,OAAOiF,MAAA,KAAW,cAAa;MAAA;MAAAlF,aAAA,GAAAC,CAAA;MACxF,MAAMkF,OAAA;MAAA;MAAA,CAAAnF,aAAA,GAAAQ,CAAA,QAAU,IAAI0E,MAAA,CAAOE,IAAI,CAACC,YAAY;MAAA;MAAArF,aAAA,GAAAQ,CAAA;MAC5C2E,OAAA,CAAQG,MAAM,CAAC/E,MAAA,CAAO0E,OAAO;MAAA;MAAAjF,aAAA,GAAAQ,CAAA;MAC7B+B,eAAA,CAAgB4C,OAAA;IAClB,OAAO;MAAA;MAAAnF,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAAA;MAAI;MAAA,CAAAR,aAAA,GAAAC,CAAA,WAAAqC,YAAA;MAAA;MAAA,CAAAtC,aAAA,GAAAC,CAAA,WAAgB,CAACmC,gBAAA,GAAkB;QAAA;QAAApC,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAQ,CAAA;QAC5C8B,YAAA,CAAagD,MAAM,CAAC;QAAA;QAAAtF,aAAA,GAAAQ,CAAA;QACpB+B,eAAA,CAAgB;MAClB;MAAA;MAAA;QAAAvC,aAAA,GAAAC,CAAA;MAAA;IAAA;EACF,GAAG,CAACM,MAAA,CAAO0E,OAAO,EAAE7C,gBAAA,CAAiB;EAErC;EAAA;EAAApC,aAAA,GAAAQ,CAAA;EACA,IAAAC,MAAA,CAAAuE,SAAS,EAAC;IAAA;IAAAhF,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACR;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,WAAAH,YAAA;IAAA;IAAA,CAAAE,aAAA,GAAAC,CAAA,WAAgB,iBAAiBsF,SAAA,GAAW;MAAA;MAAAvF,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAC9C2B,YAAA,CAAa,IAAIqD,IAAA;MAAA;MAAAxF,aAAA,GAAAQ,CAAA;MACjBiF,qBAAA;IACF,OAAO;MAAA;MAAAzF,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MACLkF,oBAAA;MAAA;MAAA1F,aAAA,GAAAQ,CAAA;MACA2B,YAAA,CAAa;IACf;IAAA;IAAAnC,aAAA,GAAAQ,CAAA;IAEA,OAAO,MAAM;MAAA;MAAAR,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAQ,CAAA;MAAA,OAAAkF,oBAAA;IAAA;EACf,GAAG,CAAC5F,YAAA,CAAa;EAEjB;EAAA;EAAAE,aAAA,GAAAQ,CAAA;EACA,IAAAC,MAAA,CAAAuE,SAAS,EAAC;IAAA;IAAAhF,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACR;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,WAAAN,eAAA;IAAA;IAAA,CAAAK,aAAA,GAAAC,CAAA,WAAmBL,WAAA;IAAgB;IAAA,CAAAI,aAAA,GAAAC,CAAA,WAAAH,YAAA;IAAA;IAAA,CAAAE,aAAA,GAAAC,CAAA,WAAgB+C,kBAAiB,IAAI;MAAA;MAAAhD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAC1EmF,cAAA;MAAA;MAAA3F,aAAA,GAAAQ,CAAA;MACAyC,qBAAA,CAAsB;IACxB;IAAA;IAAA;MAAAjD,aAAA,GAAAC,CAAA;IAAA;EACF,GAAG,CAACN,eAAA,EAAiBC,WAAA,EAAaE,YAAA,EAAckD,kBAAA,CAAmB;EAEnE;EAAA;EAAAhD,aAAA,GAAAQ,CAAA;EACA,IAAAC,MAAA,CAAAuE,SAAS,EAAC;IAAA;IAAAhF,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACR;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,WAAAM,MAAA,CAAO0E,OAAO;IAAA;IAAA,CAAAjF,aAAA,GAAAC,CAAA,WAAIN,eAAA,GAAiB;MAAA;MAAAK,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MACrCD,MAAA,CAAO0E,OAAO,CAACW,SAAS,CAACjG,eAAA;IAC3B;IAAA;IAAA;MAAAK,aAAA,GAAAC,CAAA;IAAA;EACF,GAAG,CAACN,eAAA,CAAgB;EAEpB;EACA,MAAMkG,cAAA;EAAA;EAAA,CAAA7F,aAAA,GAAAQ,CAAA,QAAiB,IAAAC,MAAA,CAAAqF,WAAW,EAAEC,WAAA;IAAA;IAAA/F,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IAClC;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,YAACuC,gBAAA;IAAA;IAAA,CAAAxC,aAAA,GAAAC,CAAA,WAAoB,CAACiC,SAAA;IAAA;IAAA,CAAAlC,aAAA,GAAAC,CAAA,WAAa,OAAOiF,MAAA,KAAW,cAAa;MAAA;MAAAlF,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAAA,OAAO;IAAA;IAAA;IAAA;MAAAR,aAAA,GAAAC,CAAA;IAAA;IAE7E,MAAM+F,QAAA;IAAA;IAAA,CAAAhG,aAAA,GAAAQ,CAAA,QAAW0E,MAAA,CAAOE,IAAI,CAACa,QAAQ,CAACC,SAAS,CAACC,sBAAsB,CACpE,IAAIjB,MAAA,CAAOE,IAAI,CAACgB,MAAM,CAAC5D,gBAAA,CAAiB6B,GAAG,EAAE7B,gBAAA,CAAiB8B,GAAG,GACjE,IAAIY,MAAA,CAAOE,IAAI,CAACgB,MAAM,CAACL,WAAA,CAAY1B,GAAG,EAAE0B,WAAA,CAAYzB,GAAG;IAGzD,MAAM+B,WAAA;IAAA;IAAA,CAAArG,aAAA,GAAAQ,CAAA,QAAc,CAACgF,IAAA,CAAKc,GAAG,KAAKpE,SAAA,CAAUqE,OAAO,EAAC,IAAK,OAAM;IAC/D,MAAMC,KAAA;IAAA;IAAA,CAAAxG,aAAA,GAAAQ,CAAA,QAAQwF,QAAC,GAAW,QAASK,WAAA,GAAc,IAAG,IAAI;IAAA;IAAArG,aAAA,GAAAQ,CAAA;IAExD,OAAOiG,IAAA,CAAKC,GAAG,CAAC,GAAGD,IAAA,CAAKE,GAAG,CAACH,KAAA,EAAO,OAAO;EAC5C,GAAG,CAAChE,gBAAA,EAAkBN,SAAA,CAAU;EAEhC;EACA,MAAM0E,eAAA;EAAA;EAAA,CAAA5G,aAAA,GAAAQ,CAAA,QAAkB,IAAAC,MAAA,CAAAqF,WAAW,EAAC;IAAA;IAAA9F,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IAClC;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,YAACW,UAAA;IAAA;IAAA,CAAAZ,aAAA,GAAAC,CAAA,WAAc,CAACiC,SAAA,GAAW;MAAA;MAAAlC,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAR,aAAA,GAAAC,CAAA;IAAA;IAE/B,MAAM4G,KAAA;IAAA;IAAA,CAAA7G,aAAA,GAAAQ,CAAA,QAAQI,UAAA,CAAWkG,MAAM,CAAC,EAAE;IAClC,MAAMC,GAAA;IAAA;IAAA,CAAA/G,aAAA,GAAAQ,CAAA,QAAMqG,KAAA,CAAMG,IAAI,CAAC,EAAE;IACzB,MAAMV,GAAA;IAAA;IAAA,CAAAtG,aAAA,GAAAQ,CAAA,QAAM,IAAIgF,IAAA;IAChB,MAAMyB,cAAA;IAAA;IAAA,CAAAjH,aAAA,GAAAQ,CAAA,QAAiB,CAAC8F,GAAA,CAAIC,OAAO,KAAKrE,SAAA,CAAUqE,OAAO,EAAC,IAAK;IAE/D;IACA,MAAMW,QAAA;IAAA;IAAA,CAAAlH,aAAA,GAAAQ,CAAA,QAAWkC,YAAA,CAAayE,MAAM,GAAG;IAAA;IAAA,CAAAnH,aAAA,GAAAC,CAAA,WACnCyC,YAAA,CAAa0E,MAAM,CAAC,CAACC,CAAA,EAAGpH,CAAA,KAAM;MAAA;MAAAD,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAQ,CAAA;MAAA,OAAA6G,CAAA,GAAIpH,CAAA;IAAA,GAAG,KAAKyC,YAAA,CAAayE,MAAM;IAAA;IAAA,CAAAnH,aAAA,GAAAC,CAAA,WAC7D;IAEJ;IACA,MAAMqH,wBAAA;IAAA;IAAA,CAAAtH,aAAA,GAAAQ,CAAA;IAA2B;IAAA,CAAAR,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEC,KAAA;IAAA;IAAA,CAAAxH,aAAA,GAAAC,CAAA,WAAS;IACxD,MAAM+B,GAAA;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA,SAAM,IAAIgF,IAAA,CAAKc,GAAA,CAAIC,OAAO,KAAKe,wBAAA,GAA2B;IAEhE;IACA,MAAMG,gBAAA;IAAA;IAAA,CAAAzH,aAAA,GAAAQ,CAAA;IAAmB;IAAA,CAAAR,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEC,KAAA;IAAA;IAAA,CAAAxH,aAAA,GAAAC,CAAA,WAAS;IAChD,MAAMyH,iBAAA;IAAA;IAAA,CAAA1H,aAAA,GAAAQ,CAAA;IAAoB;IAAA,CAAAR,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIY,mBAAmB,EAAEH,KAAA;IAAA;IAAA,CAAAxH,aAAA,GAAAC,CAAA,WAASwH,gBAAA;IAC5D,MAAMxF,YAAA;IAAA;IAAA,CAAAjC,aAAA,GAAAQ,CAAA,SAAeiG,IAAA,CAAKC,GAAG,CAAC,GAAGgB,iBAAA,GAAoBD,gBAAA;IAErD,MAAMG,YAAA;IAAA;IAAA,CAAA5H,aAAA,GAAAQ,CAAA,SAA0B;MAC9BiB,aAAA;MAAe;MAAA,CAAAzB,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIf,QAAQ,EAAE6B,IAAA;MAAA;MAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;MACrCyB,aAAA;MAAe;MAAA,CAAA1B,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEM,IAAA;MAAA;MAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;MACrC0B,iBAAA;MAAmB;MAAA,CAAA3B,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIf,QAAQ,EAAE6B,IAAA;MAAA;MAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;MACzC2B,iBAAA;MAAmB;MAAA,CAAA5B,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEM,IAAA;MAAA;MAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;MACzC4B,YAAA,EAAc4E,IAAA,CAAKqB,KAAK,CAACZ,QAAA;MACzBpF,YAAA;MAAc;MAAA,CAAA9B,aAAA,GAAAC,CAAA,WAAAyC,YAAY,CAACA,YAAA,CAAayE,MAAM,GAAG,EAAE;MAAA;MAAA,CAAAnH,aAAA,GAAAC,CAAA,WAAI;MACvD8B,WAAA,EAAa0E,IAAA,CAAKqB,KAAK,CAACb,cAAA;MACxBjF,GAAA;MACAC,YAAA,EAAcwE,IAAA,CAAKqB,KAAK,CAAC7F,YAAA,GAAe,IAAI;IAC9C;IAAA;IAAAjC,aAAA,GAAAQ,CAAA;IAEAgB,YAAA,CAAaoG,YAAA;IAAA;IAAA5H,aAAA,GAAAQ,CAAA;IACbJ,iBAAA,GAAoBwH,YAAA;EACtB,GAAG,CAAChH,UAAA,EAAYsB,SAAA,EAAWQ,YAAA,EAActC,iBAAA,CAAkB;EAAA;EAAAJ,aAAA,GAAAQ,CAAA;EAE3D,MAAMiF,qBAAA,GAAwB,MAAAA,CAAA;IAAA;IAAAzF,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IAC5B,IAAIS,UAAA,CAAWgE,OAAO,EAAE;MAAA;MAAAjF,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAR,aAAA,GAAAC,CAAA;IAAA;IAAAD,aAAA,GAAAQ,CAAA;IAExB,IAAI;MACF;MACA,MAAM;QAAEuH,kBAAkB;QAAEC,qBAAqB;QAAEC;MAAsB,CAAE;MAAA;MAAA,CAAAjI,aAAA,GAAAQ,CAAA,SAAG,MAAM0H,OAAA,CAAAC,OAAA,GAAAC,IAAA;QAAA;QAAApI,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAQ,CAAA;QAAA,oBAAA6H,yBAAA,CAAAC,OAAA,CAAO;MAAA;MAAA;MAAAtI,aAAA,GAAAQ,CAAA;MAE3F,IAAI,CAACyH,sBAAA,IAA0B;QAAA;QAAAjI,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAQ,CAAA;QAC7B+H,OAAA,CAAQC,KAAK,CAAC;QAAA;QAAAxI,aAAA,GAAAQ,CAAA;QACd;MACF;MAAA;MAAA;QAAAR,aAAA,GAAAC,CAAA;MAAA;MAEA;MACA,MAAMwI,OAAA;MAAA;MAAA,CAAAzI,aAAA,GAAAQ,CAAA,SAAU,IAAIuH,kBAAA,CAClBC,qBAAA,EACCU,QAAA;QAAA;QAAA1I,aAAA,GAAAM,CAAA;QACC,MAAMyF,WAAA;QAAA;QAAA,CAAA/F,aAAA,GAAAQ,CAAA,SAAc;UAClB6D,GAAA,EAAKqE,QAAA,CAASrE,GAAG;UACjBC,GAAA,EAAKoE,QAAA,CAASpE;QAChB;QAEA;QACA,MAAMxC,YAAA;QAAA;QAAA,CAAA9B,aAAA,GAAAQ,CAAA,SAAeqF,cAAA,CAAeE,WAAA;QAEpC;QAAA;QAAA/F,aAAA,GAAAQ,CAAA;QACAmC,eAAA,CAAgBgG,IAAA;UAAA;UAAA3I,aAAA,GAAAM,CAAA;UACd,MAAMsI,UAAA;UAAA;UAAA,CAAA5I,aAAA,GAAAQ,CAAA,SAAa,C,GAAImI,IAAA,EAAM7G,YAAA,CAAa,CAAC+G,KAAK,CAAC,CAAC;UAAA;UAAA7I,aAAA,GAAAQ,CAAA;UAClD,OAAOoI,UAAA;QACT;QAAA;QAAA5I,aAAA,GAAAQ,CAAA;QAEAiC,mBAAA,CAAoBsD,WAAA;QAAA;QAAA/F,aAAA,GAAAQ,CAAA;QACpBL,gBAAA,CAAiB4F,WAAA;QAEjB;QAAA;QAAA/F,aAAA,GAAAQ,CAAA;QACAoG,eAAA;QAAA;QAAA5G,aAAA,GAAAQ,CAAA;QAEA+H,OAAA,CAAQO,GAAG,CAAC,yBAAyB;UACnCzE,GAAA,EAAKqE,QAAA,CAASrE,GAAG;UACjBC,GAAA,EAAKoE,QAAA,CAASpE,GAAG;UACjByE,QAAA,EAAUL,QAAA,CAASK,QAAQ;UAC3BC,SAAA,EAAW,IAAIxD,IAAA,CAAKkD,QAAA,CAASM,SAAS,EAAEC,WAAW;QACrD;MACF,GACCT,KAAA;QAAA;QAAAxI,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAQ,CAAA;QACC+H,OAAA,CAAQC,KAAK,CAAC,yBAAyB;UACrCU,IAAA,EAAMV,KAAA,CAAMU,IAAI;UAChBC,OAAA,EAASX,KAAA,CAAMW,OAAO;UACtBC,IAAA,EAAMZ,KAAA,CAAMY,IAAI;UAChBC,SAAA,EAAWb,KAAA,CAAMa,SAAS;UAC1BL,SAAA,EAAW,IAAIxD,IAAA,CAAKgD,KAAA,CAAMQ,SAAS,EAAEC,WAAW;UAChDK,aAAA,EAAed,KAAA,CAAMc;QACvB;QAEA;QAAA;QAAAtJ,aAAA,GAAAQ,CAAA;QACA,IAAI,CAACgI,KAAA,CAAMa,SAAS,EAAE;UAAA;UAAArJ,aAAA,GAAAC,CAAA;UAAAD,aAAA,GAAAQ,CAAA;UACpB+H,OAAA,CAAQgB,IAAI,CAAC,6BAA6Bf,KAAA,CAAMW,OAAO;QACzD;QAAA;QAAA;UAAAnJ,aAAA,GAAAC,CAAA;QAAA;MACF;MAGF;MAAA;MAAAD,aAAA,GAAAQ,CAAA;MACAS,UAAA,CAAWgE,OAAO,GAAGwD,OAAA;MAErB;MAAA;MAAAzI,aAAA,GAAAQ,CAAA;MACA,MAAMiI,OAAA,CAAQe,KAAK;IAErB,EAAE,OAAOhB,KAAA,EAAO;MAAA;MAAAxI,aAAA,GAAAQ,CAAA;MACd+H,OAAA,CAAQC,KAAK,CAAC,kDAAkDA,KAAA;IAClE;EACF;EAAA;EAAAxI,aAAA,GAAAQ,CAAA;EAEA,MAAMkF,oBAAA,GAAuBA,CAAA;IAAA;IAAA1F,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IAC3B,IAAIS,UAAA,CAAWgE,OAAO,EAAE;MAAA;MAAAjF,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MACtB;MACA;MAAI;MAAA,CAAAR,aAAA,GAAAC,CAAA,kBAAOgB,UAAA,CAAWgE,OAAO,KAAK;MAAA;MAAA,CAAAjF,aAAA,GAAAC,CAAA,WAAY,UAAUgB,UAAA,CAAWgE,OAAO,GAAE;QAAA;QAAAjF,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAQ,CAAA;QACzES,UAAA,CAAWgE,OAAO,CAASwE,IAAI;MAClC,OAAO;QAAA;QAAAzJ,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAQ,CAAA;QACL;QACA+E,SAAA,CAAUmE,WAAW,CAACC,UAAU,CAAC1I,UAAA,CAAWgE,OAAO;MACrD;MAAA;MAAAjF,aAAA,GAAAQ,CAAA;MACAS,UAAA,CAAWgE,OAAO,GAAG;IACvB;IAAA;IAAA;MAAAjF,aAAA,GAAAC,CAAA;IAAA;EACF;EAAA;EAAAD,aAAA,GAAAQ,CAAA;EAEA,MAAMmF,cAAA,GAAiB,MAAAA,CAAA;IAAA;IAAA3F,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACrB;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,YAACN,eAAA;IAAA;IAAA,CAAAK,aAAA,GAAAC,CAAA,WAAmB,CAACL,WAAA;IAAA;IAAA,CAAAI,aAAA,GAAAC,CAAA,WAAe,OAAOiF,MAAA,KAAW,cAAa;MAAA;MAAAlF,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAR,aAAA,GAAAC,CAAA;IAAA;IAAAD,aAAA,GAAAQ,CAAA;IAEvEQ,YAAA,CAAa;IAAA;IAAAhB,aAAA,GAAAQ,CAAA;IAEb,IAAI;MACF,MAAMoJ,iBAAA;MAAA;MAAA,CAAA5J,aAAA,GAAAQ,CAAA,SAAoB,IAAI0E,MAAA,CAAOE,IAAI,CAACyE,iBAAiB;MAE3D,MAAMC,OAAA;MAAA;MAAA,CAAA9J,aAAA,GAAAQ,CAAA,SAAyC;QAC7CuJ,MAAA,EAAQpK,eAAA;QACRC,WAAA;QAAa;QAAA,CAAAI,aAAA,GAAAC,CAAA,WAAAL,WAAA,CAAYoK,WAAW;QAAA;QAAA,CAAAhK,aAAA,GAAAC,CAAA,WAAIL,WAAA;QACxCC,SAAA,EAAWA,SAAA,CAAUoK,GAAG,CAACC,KAAA,IAAU;UAAA;UAAAlK,aAAA,GAAAM,CAAA;UAAAN,aAAA,GAAAQ,CAAA;UAAA;YACjC2J,QAAA,EAAUD,KAAA;YACVE,QAAA,EAAU;UACZ;QAAA;QACA3G,UAAA,EAAYyB,MAAA,CAAOE,IAAI,CAACiF,UAAU,CAACC,OAAO;QAC1C5G,iBAAA,EAAmBN,YAAA,CAAaM,iBAAiB;QACjDH,aAAA,EAAeH,YAAA,CAAaG,aAAa;QACzCD,UAAA,EAAYF,YAAA,CAAaE,UAAU;QACnCE,YAAA,EAAcJ,YAAA,CAAaI,YAAY;QACvCG,wBAAA,EAA0BP,YAAA,CAAaO,wBAAwB;QAC/D4G,cAAA,EAAgB;UACdC,aAAA,EAAe,IAAIhF,IAAA;UACnBiF,YAAA,EAAcvF,MAAA,CAAOE,IAAI,CAACsF,YAAY,CAACC;QACzC;MACF;MAEA,MAAMC,MAAA;MAAA;MAAA,CAAA5K,aAAA,GAAAQ,CAAA,SAAS,MAAMoJ,iBAAA,CAAkB/C,KAAK,CAACiD,OAAA;MAAA;MAAA9J,aAAA,GAAAQ,CAAA;MAC7CK,aAAA,CAAc+J,MAAA;MAEd;MAAA;MAAA5K,aAAA,GAAAQ,CAAA;MACA;MAAI;MAAA,CAAAR,aAAA,GAAAC,CAAA,WAAA2K,MAAA,CAAO9D,MAAM,CAACK,MAAM,GAAG;MAAA;MAAA,CAAAnH,aAAA,GAAAC,CAAA,WAAKmD,YAAA,CAAaO,wBAAwB,GAAE;QAAA;QAAA3D,aAAA,GAAAC,CAAA;QACrE,MAAM4K,YAAA;QAAA;QAAA,CAAA7K,aAAA,GAAAQ,CAAA,SAAmCoK,MAAA,CAAO9D,MAAM,CAAC+B,KAAK,CAAC,GAAGoB,GAAG,CAAC,CAACpD,KAAA,EAAOiE,KAAA,KAAW;UAAA;UAAA9K,aAAA,GAAAM,CAAA;UAAAN,aAAA,GAAAQ,CAAA;UAAA;YACrFuK,UAAA,EAAYD,KAAA,GAAQ;YACpBE,OAAA;YAAS;YAAA,CAAAhL,aAAA,GAAAC,CAAA,WAAA4G,KAAA,CAAMmE,OAAO;YAAA;YAAA,CAAAhL,aAAA,GAAAC,CAAA,WAAI,QAAQ6K,KAAA,GAAQ,GAAG;YAC7C9E,QAAA;YAAU;YAAA,CAAAhG,aAAA,GAAAC,CAAA,WAAA4G,KAAA,CAAMG,IAAI,CAAC,EAAE,EAAEhB,QAAA,EAAU6B,IAAA;YAAA;YAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;YAC3CsH,QAAA;YAAU;YAAA,CAAAvH,aAAA,GAAAC,CAAA,WAAA4G,KAAA,CAAMG,IAAI,CAAC,EAAE,EAAEO,QAAA,EAAUM,IAAA;YAAA;YAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;YAC3CgL,QAAA;YAAU;YAAA,CAAAjL,aAAA,GAAAC,CAAA,WAAA4G,KAAA,CAAMoE,QAAQ;YAAA;YAAA,CAAAjL,aAAA,GAAAC,CAAA,WAAI,EAAE;UAChC;QAAA;QAAA;QAAAD,aAAA,GAAAQ,CAAA;QACAqD,oBAAA,CAAqBgH,YAAA;MACvB,OAAO;QAAA;QAAA7K,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAQ,CAAA;QACLqD,oBAAA,CAAqB,EAAE;MACzB;MAEA;MACA,MAAMqH,aAAA;MAAA;MAAA,CAAAlL,aAAA,GAAAQ,CAAA;MAAgB;MAAA,CAAAR,aAAA,GAAAC,CAAA,WAAA2K,MAAA,CAAO9D,MAAM,CAAChD,kBAAA,CAAmB;MAAA;MAAA,CAAA9D,aAAA,GAAAC,CAAA,WAAI2K,MAAA,CAAO9D,MAAM,CAAC,EAAE;MAAA;MAAA9G,aAAA,GAAAQ,CAAA;MAC3E,IAAI0K,aAAA,EAAe;QAAA;QAAAlL,aAAA,GAAAC,CAAA;QACjB,MAAM8G,GAAA;QAAA;QAAA,CAAA/G,aAAA,GAAAQ,CAAA,SAAM0K,aAAA,CAAclE,IAAI,CAAC,EAAE;QAEjC,MAAMmE,gBAAA;QAAA;QAAA,CAAAnL,aAAA,GAAAQ,CAAA,SAA8B;UAClCiB,aAAA;UAAe;UAAA,CAAAzB,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIf,QAAQ,EAAE6B,IAAA;UAAA;UAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;UACrCyB,aAAA;UAAe;UAAA,CAAA1B,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEM,IAAA;UAAA;UAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;UACrC0B,iBAAA;UAAmB;UAAA,CAAA3B,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIf,QAAQ,EAAE6B,IAAA;UAAA;UAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;UACzC2B,iBAAA;UAAmB;UAAA,CAAA5B,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEM,IAAA;UAAA;UAAA,CAAA7H,aAAA,GAAAC,CAAA,WAAQ;UACzC4B,YAAA,EAAc;UACdC,YAAA,EAAc;UACdC,WAAA,EAAa;UACbC,GAAA,EAAKE,SAAA;UAAA;UAAA,CAAAlC,aAAA,GAAAC,CAAA,WAAY,IAAIuF,IAAA,CAAKtD,SAAA,CAAUqE,OAAO,KAAK;UAAC;UAAA,CAAAvG,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEC,KAAA;UAAA;UAAA,CAAAxH,aAAA,GAAAC,CAAA,WAAS,MAAK;UAAA;UAAA,CAAAD,aAAA,GAAAC,CAAA,WAAQ;UACrFgC,YAAA,EAAc8E,GAAA,CAAIY,mBAAmB;UAAA;UAAA,CAAA3H,aAAA,GAAAC,CAAA,WACnCwG,IAAA,CAAKqB,KAAK,CAAC,CAACf,GAAA,CAAIY,mBAAmB,CAACH,KAAK;UAAI;UAAA,CAAAxH,aAAA,GAAAC,CAAA,WAAA8G,GAAA,CAAIQ,QAAQ,EAAEC,KAAA;UAAA;UAAA,CAAAxH,aAAA,GAAAC,CAAA,WAAS,GAAC,IAAK;UAAA;UAAA,CAAAD,aAAA,GAAAC,CAAA,WAAM;QACpF;QAAA;QAAAD,aAAA,GAAAQ,CAAA;QAEAgB,YAAA,CAAa2J,gBAAA;QAAA;QAAAnL,aAAA,GAAAQ,CAAA;QACbJ,iBAAA,GAAoB+K,gBAAA;MACtB;MAAA;MAAA;QAAAnL,aAAA,GAAAC,CAAA;MAAA;MAEA;MAAAD,aAAA,GAAAQ,CAAA;MACA;MAAI;MAAA,CAAAR,aAAA,GAAAC,CAAA,WAAAM,MAAA,CAAO0E,OAAO;MAAA;MAAA,CAAAjF,aAAA,GAAAC,CAAA,WAAI2K,MAAA,CAAO9D,MAAM,CAAC,EAAE;MAAA;MAAA,CAAA9G,aAAA,GAAAC,CAAA,WAAI,OAAOiF,MAAA,KAAW,cAAa;QAAA;QAAAlF,aAAA,GAAAC,CAAA;QACvE,MAAMmL,MAAA;QAAA;QAAA,CAAApL,aAAA,GAAAQ,CAAA,SAAS,IAAI0E,MAAA,CAAOE,IAAI,CAACiG,YAAY;QAAA;QAAArL,aAAA,GAAAQ,CAAA;QAC3CoK,MAAA,CAAO9D,MAAM,CAAC,EAAE,CAACE,IAAI,CAACsE,OAAO,CAACvE,GAAA;UAAA;UAAA/G,aAAA,GAAAM,CAAA;UAAAN,aAAA,GAAAQ,CAAA;UAC5B4K,MAAA,CAAOG,MAAM,CAACxE,GAAA,CAAIyE,cAAc;UAAA;UAAAxL,aAAA,GAAAQ,CAAA;UAChC4K,MAAA,CAAOG,MAAM,CAACxE,GAAA,CAAI0E,YAAY;QAChC;QAAA;QAAAzL,aAAA,GAAAQ,CAAA;QACAD,MAAA,CAAO0E,OAAO,CAACyG,SAAS,CAACN,MAAA,EAAQ;UAAEO,OAAA,EAAS;QAAG;MACjD;MAAA;MAAA;QAAA3L,aAAA,GAAAC,CAAA;MAAA;IAEF,EAAE,OAAOuI,KAAA,EAAO;MAAA;MAAAxI,aAAA,GAAAQ,CAAA;MACd+H,OAAA,CAAQC,KAAK,CAAC,4BAA4BA,KAAA;IAC5C,UAAU;MAAA;MAAAxI,aAAA,GAAAQ,CAAA;MACRQ,YAAA,CAAa;IACf;EACF;EAAA;EAAAhB,aAAA,GAAAQ,CAAA;EAEA,MAAMoL,aAAA,GAAiB3B,GAAA;IAAA;IAAAjK,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACrBD,MAAA,CAAO0E,OAAO,GAAGgF,GAAA;EACnB;EAEA;EACA,MAAM4B,wBAAA;EAAA;EAAA,CAAA7L,aAAA,GAAAQ,CAAA,SAA2B,IAAAC,MAAA,CAAAqF,WAAW,EAAC;IAAA;IAAA9F,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IAC3CyC,qBAAA,CAAsB;IAAA;IAAAjD,aAAA,GAAAQ,CAAA;IACtBH,oBAAA;EACF,GAAG,CAACA,oBAAA,CAAqB;EAEzB;EACA,MAAMyL,oBAAA;EAAA;EAAA,CAAA9L,aAAA,GAAAQ,CAAA,SAAuB,IAAAC,MAAA,CAAAqF,WAAW,EAAEiG,SAAA;IAAA;IAAA/L,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACxC2C,iBAAA,CAAkB4I,SAAA;EACpB,GAAG,EAAE;EAEL;EACA,MAAMC,wBAAA;EAAA;EAAA,CAAAhM,aAAA,GAAAQ,CAAA,SAA2B,IAAAC,MAAA,CAAAqF,WAAW,EAAEmG,UAAA;IAAA;IAAAjM,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IAC5C6C,eAAA,CAAgB4I,UAAA;IAAA;IAAAjM,aAAA,GAAAQ,CAAA;IAChByC,qBAAA,CAAsB;EACxB,GAAG,EAAE;EAEL;EACA,MAAMiJ,iBAAA;EAAA;EAAA,CAAAlM,aAAA,GAAAQ,CAAA,SAAoB,IAAAC,MAAA,CAAAqF,WAAW,EAAEiF,UAAA;IAAA;IAAA/K,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACrCuD,qBAAA,CAAsBgH,UAAA;IAAA;IAAA/K,aAAA,GAAAQ,CAAA;IACtByC,qBAAA,CAAsB;EACxB,GAAG,EAAE;EAEL;EACA,MAAMkJ,4BAAA;EAAA;EAAA,CAAAnM,aAAA,GAAAQ,CAAA,SAA+B,IAAAC,MAAA,CAAAqF,WAAW,EAAC;IAAA;IAAA9F,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IAC/C;IACA6C,eAAA,CAAgBsF,IAAA,IAAS;MAAA;MAAA3I,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAQ,CAAA;MAAA;QACvB,GAAGmI,IAAI;QACPrF,UAAA,EAAY;QACZC,aAAA,EAAe;QACfC,YAAA,EAAc;QACdG,wBAAA,EAA0B;MAC5B;IAAA;IAAA;IAAA3D,aAAA,GAAAQ,CAAA;IACAyC,qBAAA,CAAsB;EACxB,GAAG,EAAE;EAEL;EAAA;EAAAjD,aAAA,GAAAQ,CAAA;EACA,MAAM4L,gBAAA,GAAmBA,CAACC,GAAA,EAAaC,KAAA,EAAeC,MAAA,EAAgBC,OAAA,EAAiBC,OAAA;IAAA;IAAAzM,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACrF;IAAI;IAAA,CAAAR,aAAA,GAAAC,CAAA,kBAAOiF,MAAA,KAAW;IAAA;IAAA,CAAAlF,aAAA,GAAAC,CAAA,WAAe,CAACiF,MAAA,CAAOE,IAAI;IAAA;IAAA,CAAApF,aAAA,GAAAC,CAAA,WAAI,CAACiF,MAAA,CAAOE,IAAI,CAACsH,IAAI,GAAE;MAAA;MAAA1M,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAQ,CAAA;MAAA,OAAOmM,SAAA;IAAA;IAAA;IAAA;MAAA3M,aAAA,GAAAC,CAAA;IAAA;IAAAD,aAAA,GAAAQ,CAAA;IAC/E,IAAI;MAAA;MAAAR,aAAA,GAAAQ,CAAA;MACF,OAAO;QACL6L,GAAA;QACAO,UAAA,EAAY,IAAI1H,MAAA,CAAOE,IAAI,CAACsH,IAAI,CAACJ,KAAA,EAAOC,MAAA;QACxCM,MAAA,EAAQ,IAAI3H,MAAA,CAAOE,IAAI,CAAC0H,KAAK,CAACN,OAAA,EAASC,OAAA;MACzC;IACF,EAAE,OAAOjE,KAAA,EAAO;MAAA;MAAAxI,aAAA,GAAAQ,CAAA;MACd+H,OAAA,CAAQgB,IAAI,CAAC,+BAA+Bf,KAAA;MAAA;MAAAxI,aAAA,GAAAQ,CAAA;MAC5C,OAAOmM,SAAA;IACT;EACF;EAEA;EAAA;EAAA3M,aAAA,GAAAQ,CAAA;EACA,MAAMuM,wBAAA,GAA2BA,CAAC;IAAEnM;EAAU,CAAuB;IAAA;IAAAZ,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAQ,CAAA;IACnE,IAAAC,MAAA,CAAAuE,SAAS,EAAC;MAAA;MAAAhF,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAQ,CAAA;MACR;MAAI;MAAA,CAAAR,aAAA,GAAAC,CAAA,YAACM,MAAA,CAAO0E,OAAO;MAAA;MAAA,CAAAjF,aAAA,GAAAC,CAAA,WAAI,CAACW,UAAA;MAAA;MAAA,CAAAZ,aAAA,GAAAC,CAAA,WAAc,OAAOiF,MAAA,KAAW,cAAa;QAAA;QAAAlF,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAQ,CAAA;QAAA;MAAA;MAAA;MAAA;QAAAR,aAAA,GAAAC,CAAA;MAAA;MAErE;MAAAD,aAAA,GAAAQ,CAAA;MACA,IAAI,CAACG,qBAAA,CAAsBsE,OAAO,EAAE;QAAA;QAAAjF,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAQ,CAAA;QAClCG,qBAAA,CAAsBsE,OAAO,GAAG,IAAIC,MAAA,CAAOE,IAAI,CAAC4H,kBAAkB,CAAC;UACjEC,eAAA,EAAiB;UACjBC,eAAA,EAAiB;YACfC,WAAA,EAAa;YACbC,YAAA,EAAc;YACdC,aAAA,EAAe;UACjB;QACF;QAAA;QAAArN,aAAA,GAAAQ,CAAA;QACAG,qBAAA,CAAsBsE,OAAO,CAACK,MAAM,CAAC/E,MAAA,CAAO0E,OAAO;MACrD;MAAA;MAAA;QAAAjF,aAAA,GAAAC,CAAA;MAAA;MAEA;MAAAD,aAAA,GAAAQ,CAAA;MACAG,qBAAA,CAAsBsE,OAAO,CAACpE,aAAa,CAACD,UAAA;MAAA;MAAAZ,aAAA,GAAAQ,CAAA;MAC5CG,qBAAA,CAAsBsE,OAAO,CAACqI,aAAa,CAACxJ,kBAAA;MAAA;MAAA9D,aAAA,GAAAQ,CAAA;MAE5C,OAAO;QAAA;QAAAR,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAQ,CAAA;QACL,IAAIG,qBAAA,CAAsBsE,OAAO,EAAE;UAAA;UAAAjF,aAAA,GAAAC,CAAA;UAAAD,aAAA,GAAAQ,CAAA;UACjCG,qBAAA,CAAsBsE,OAAO,CAACK,MAAM,CAAC;QACvC;QAAA;QAAA;UAAAtF,aAAA,GAAAC,CAAA;QAAA;MACF;IACF,GAAG,CAACW,UAAA,EAAYkD,kBAAA,CAAmB;IAAA;IAAA9D,aAAA,GAAAQ,CAAA;IAEnC,OAAO;EACT;EAAA;EAAAR,aAAA,GAAAQ,CAAA;EAEA,oBACE,IAAA+M,WAAA,CAAAC,IAAA,EAAC;IAAIC,SAAA,EAAU;4BACb,IAAAF,WAAA,CAAAG,GAAA,EAACC,gBAAA,CAAAC,WAAW;MAACC,MAAA,EAAQC,OAAA,CAAQC,GAAG,CAACC,+BAA+B;gBAC9D,iBAAAT,WAAA,CAAAC,IAAA,EAACG,gBAAA,CAAAM,GAAG;QACD,GAAG/J,UAAU;QACdgK,MAAA,EAAQtC,aAAA;QACR6B,SAAA,EAAU;;QAGT;QAAA,CAAAzN,aAAA,GAAAC,CAAA,WAAAN,eAAA;QAAA;QAAA,CAAAK,aAAA,GAAAC,CAAA,wBACC,IAAAsN,WAAA,CAAAG,GAAA,EAACC,gBAAA,CAAAQ,MAAM;UACLzF,QAAA,EAAU/I,eAAA;UACVyO,IAAA,EAAMhC,gBAAA,CAAiB,8BAA8B,IAAI,IAAI,IAAI;UACjEiC,KAAA,EAAM;;QAKT;QAAA,CAAArO,aAAA,GAAAC,CAAA,WAAAL,WAAA;QAAA;QAAA,CAAAI,aAAA,GAAAC,CAAA,wBACC,IAAAsN,WAAA,CAAAG,GAAA,EAACC,gBAAA,CAAAQ,MAAM;UACLzF,QAAA;UAAU;UAAA,CAAA1I,aAAA,GAAAC,CAAA,WAAAL,WAAA,CAAYoK,WAAW;UAAA;UAAA,CAAAhK,aAAA,GAAAC,CAAA,WAAIL,WAAA;UACrCwO,IAAA,EAAMhC,gBAAA,CAAiB,mCAAmC,IAAI,IAAI,IAAI;UACtEiC,KAAA,EAAM;aAKTxO,SAAA,CAAUoK,GAAG,CAAC,CAACqE,QAAA,EAAUxD,KAAA,KACxB;UAAA;UAAA9K,aAAA,GAAAM,CAAA;UAAAN,aAAA,GAAAQ,CAAA;UAAA,OADwB,aACxB,IAAA+M,WAAA,CAAAG,GAAA,EAACC,gBAAA,CAAAQ,MAAM;YAELzF,QAAA,EAAU4F,QAAA;YACVF,IAAA,EAAMhC,gBAAA,CAAiB,uBAAuB,IAAI,IAAI,IAAI;YAC1DiC,KAAA,EAAO,SAASvD,KAAA,GAAQ;aAHnBA,KAAA;QAAA,I,aAQT,IAAAyC,WAAA,CAAAG,GAAA,EAACX,wBAAA;UAAyBnM,UAAA,EAAYA;;;;IAKzC;IAAA,CAAAZ,aAAA,GAAAC,CAAA,WAAAc,SAAA;IAAA;IAAA,CAAAf,aAAA,GAAAC,CAAA,wBACC,IAAAsN,WAAA,CAAAG,GAAA,EAAC;MAAID,SAAA,EAAU;gBACb,iBAAAF,WAAA,CAAAC,IAAA,EAAC;QAAIC,SAAA,EAAU;gCACb,IAAAF,WAAA,CAAAG,GAAA,EAAC;UAAID,SAAA,EAAU;yBACf,IAAAF,WAAA,CAAAG,GAAA,EAAC;UAAKD,SAAA,EAAU;oBAAsB;;;;IAM3C;IAAA,CAAAzN,aAAA,GAAAC,CAAA,WAAAH,YAAA;IAAA;IAAA,CAAAE,aAAA,GAAAC,CAAA,wBACC,IAAAsN,WAAA,CAAAG,GAAA,EAAC;MAAID,SAAA,EAAU;gBACb,iBAAAF,WAAA,CAAAC,IAAA,EAAC;QAAIC,SAAA,EAAU;gCACb,IAAAF,WAAA,CAAAG,GAAA,EAAC;UAAID,SAAA,EAAU;yBACf,IAAAF,WAAA,CAAAG,GAAA,EAAC;UAAKD,SAAA,EAAU;oBAAsB;;;sBAM5C,IAAAF,WAAA,CAAAG,GAAA,EAACa,sBAAA,CAAAC,qBAAqB;MACpB1O,YAAA,EAAcA,YAAA;MACd2O,cAAA,EAAgB,CAAC,CAAC7N,UAAA;MAClB8N,kBAAA,EAAoBA,CAAA,KAAM;QAAA;QAAA1O,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAQ,CAAA;QAAA,OAAAyC,qBAAA,CAAsB;MAAA;MAChD0L,eAAA,EAAiBxC;qBAMnB,IAAAoB,WAAA,CAAAG,GAAA,EAACkB,mBAAA,CAAAC,sBAAsB;MACrBzF,IAAA,EAAK;MACLiF,KAAA,EAAM;MACNS,cAAA,EAAgB;;MAEf;MAAA,CAAA9O,aAAA,GAAAC,CAAA,WAAAH,YAAA;MAAA;MAAA,CAAAE,aAAA,GAAAC,CAAA,WAAgBW,UAAA;MAAA;MAAA,CAAAZ,aAAA,GAAAC,CAAA,wBACf,IAAAsN,WAAA,CAAAG,GAAA,EAACqB,qBAAA,CAAAC,oBAAoB;QACnBpO,UAAA,EAAYA,UAAA;QACZjB,eAAA,EAAiBA,eAAA;QACjBG,YAAA,EAAcA,YAAA;QACdmP,cAAA,EAAiBC,SAAA,IAAc;UAAA;UAAAlP,aAAA,GAAAM,CAAA;UAAAN,aAAA,GAAAQ,CAAA;UAAA,OAAAuC,wBAAA,CAAyBmM,SAAA;QAAA;;qBAM9D,IAAA3B,WAAA,CAAAG,GAAA,EAACkB,mBAAA,CAAAC,sBAAsB;MACrBzF,IAAA,EAAK;MACLiF,KAAA,EAAM;;MAEL;MAAA,CAAArO,aAAA,GAAAC,CAAA,WAAAH,YAAA;MAAA;MAAA,CAAAE,aAAA,GAAAC,CAAA,WAAgBW,UAAA;MAAA;MAAA,CAAAZ,aAAA,GAAAC,CAAA,wBACf,IAAAsN,WAAA,CAAAG,GAAA,EAACyB,mBAAA,CAAAC,kBAAkB;QACjB7N,SAAA,EAAWA,SAAA;QACXzB,YAAA,EAAcA,YAAA;QACdsC,gBAAA,EAAkBA,gBAAA;QAClBiN,oBAAA,EAAsBA,CAAA,KAAM;UAAA;UAAArP,aAAA,GAAAM,CAAA;UAAAN,aAAA,GAAAQ,CAAA;UAAA,OAAA6B,mBAAA,CAAoB,CAACD,gBAAA;QAAA;;qBAMvD,IAAAmL,WAAA,CAAAG,GAAA,EAACkB,mBAAA,CAAAU,gBAAgB;MACflG,IAAA,EAAK;MACLiF,KAAA,EAAM;;MAEL;MAAA,CAAArO,aAAA,GAAAC,CAAA,WAAAH,YAAA;MAAA;MAAA,CAAAE,aAAA,GAAAC,CAAA,wBACC,IAAAsN,WAAA,CAAAG,GAAA,EAAC6B,gBAAA,CAAAC,eAAe;QACdzP,QAAA,EAAUA,QAAA;QACVG,OAAA,EAASA,OAAA;QACTP,eAAA,EAAiBA,eAAA;QACjB8P,YAAA,EAAc7O,UAAA;QACdd,YAAA,EAAcA,YAAA;QACdK,gBAAA,EAAkBA,gBAAA;QAClBuP,gBAAA,EAAkB5D,oBAAA;QAClB6D,mBAAA,EAAqB9D;;qBAM3B,IAAA0B,WAAA,CAAAG,GAAA,EAACkB,mBAAA,CAAAgB,sBAAsB;MACrBxG,IAAA,EAAK;MACLiF,KAAA,EAAM;gBAEN,iBAAAd,WAAA,CAAAG,GAAA,EAACmC,2BAAA,CAAAC,0BAA0B;QACzBC,cAAA,EAAgB3M,YAAA;QAChBQ,iBAAA,EAAmBA,iBAAA;QACnBoM,aAAA,EAAejP,SAAA;QACfkP,eAAA,EAAiBjE,wBAAA;QACjBkE,aAAA,EAAehE,iBAAA;QACfwC,kBAAA,EAAoBA,CAAA,KAAM;UAAA;UAAA1O,aAAA,GAAAM,CAAA;UAAAN,aAAA,GAAAQ,CAAA;UAAA,OAAAyC,qBAAA,CAAsB;QAAA;QAChDkN,wBAAA,EAA0BhE;;qBAK9B,IAAAoB,WAAA,CAAAG,GAAA,EAACkB,mBAAA,CAAAU,gBAAgB;MACflG,IAAA,EAAK;MACLiF,KAAA,EAAM;gBAEN,iBAAAd,WAAA,CAAAG,GAAA,EAAC0C,aAAA,CAAAC,OAAY;QAACC,WAAA,EAAa;;qBAI7B,IAAA/C,WAAA,CAAAG,GAAA,EAACkB,mBAAA,CAAAU,gBAAgB;MACflG,IAAA,EAAK;MACLiF,KAAA,EAAM;gBAEN,iBAAAd,WAAA,CAAAC,IAAA,EAAC;QAAIC,SAAA,EAAU;gCACb,IAAAF,WAAA,CAAAC,IAAA,EAAC;UAAIC,SAAA,EAAU;kCACb,IAAAF,WAAA,CAAAG,GAAA,EAAC;YAAID,SAAA,EAAU;sBACb,iBAAAF,WAAA,CAAAG,GAAA,EAAC;cAAID,SAAA,EAAU;cAAuB8C,IAAA,EAAK;cAAOC,MAAA,EAAO;cAAeC,OAAA,EAAQ;wBAC9E,iBAAAlD,WAAA,CAAAG,GAAA,EAAC;gBAAKgD,aAAA,EAAc;gBAAQC,cAAA,EAAe;gBAAQC,WAAA,EAAa;gBAAGC,CAAA,EAAE;;;2BAGzE,IAAAtD,WAAA,CAAAG,GAAA,EAAC;YAAGD,SAAA,EAAU;sBAA2C;2BACzD,IAAAF,WAAA,CAAAG,GAAA,EAAC;YAAED,SAAA,EAAU;sBAAqB;;yBAGpC,IAAAF,WAAA,CAAAC,IAAA,EAAC;UAAIC,SAAA,EAAU;kCACb,IAAAF,WAAA,CAAAG,GAAA,EAAC;YACCoD,OAAA,EAASA,CAAA;cAAA;cAAA9Q,aAAA,GAAAM,CAAA;cAAAN,aAAA,GAAAQ,CAAA;cACPyC,qBAAA,CAAsB;cAAA;cAAAjD,aAAA,GAAAQ,CAAA;cACtBa,YAAA,CAAa0P,UAAU;YACzB;YACAtD,SAAA,EAAU;sBACX;2BAID,IAAAF,WAAA,CAAAG,GAAA,EAAC;YACCoD,OAAA,EAASA,CAAA;cAAA;cAAA9Q,aAAA,GAAAM,CAAA;cAAAN,aAAA,GAAAQ,CAAA;cACP2L,4BAAA;cAAA;cAAAnM,aAAA,GAAAQ,CAAA;cACAa,YAAA,CAAa0P,UAAU;YACzB;YACAtD,SAAA,EAAU;sBACX;2BAID,IAAAF,WAAA,CAAAG,GAAA,EAAC;YACCoD,OAAA,EAASA,CAAA,KAAM;cAAA;cAAA9Q,aAAA,GAAAM,CAAA;cAAAN,aAAA,GAAAQ,CAAA;cAAA,OAAAa,YAAA,CAAa0P,UAAU;YAAA;YACtCtD,SAAA,EAAU;sBACX;;;;;;AAQb","ignoreList":[]}