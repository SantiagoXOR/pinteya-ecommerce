b25dae5885ddcb185575b72a1d8a79f3
/**
 * Sistema Enterprise de Alertas y Notificaciones
 * Monitorea todos los sistemas y envía alertas automáticas
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ENTERPRISE_ALERT_RULES () {
        return ENTERPRISE_ALERT_RULES;
    },
    get EnterpriseAlertSystem () {
        return EnterpriseAlertSystem;
    },
    get EnterpriseAlertUtils () {
        return EnterpriseAlertUtils;
    },
    get enterpriseAlertSystem () {
        return enterpriseAlertSystem;
    }
});
const _enterpriseauditsystem = require("../security/enterprise-audit-system");
const _enterpriseratelimiter = require("../rate-limiting/enterprise-rate-limiter");
const _enterprisecachesystem = require("../optimization/enterprise-cache-system");
const ENTERPRISE_ALERT_RULES = [
    // Alertas de seguridad
    {
        id: 'security_high_blocked_requests',
        name: 'Alto número de requests bloqueados',
        description: 'Se detectó un número inusualmente alto de requests bloqueados por rate limiting',
        category: 'security',
        severity: 'high',
        enabled: true,
        conditions: [
            {
                metric: 'rate_limiting.blocked_requests_per_minute',
                operator: 'gt',
                threshold: 100,
                timeWindow: 5,
                evaluationInterval: 60
            }
        ],
        notificationChannels: [
            {
                type: 'email',
                config: {
                    recipients: [
                        'security@pinteya.com'
                    ]
                },
                enabled: true
            },
            {
                type: 'dashboard',
                config: {},
                enabled: true
            }
        ],
        cooldownMinutes: 15,
        escalationRules: [
            {
                afterMinutes: 30,
                severity: 'critical',
                additionalChannels: [
                    {
                        type: 'sms',
                        config: {
                            phone: '+5491123456789'
                        },
                        enabled: true
                    }
                ]
            }
        ],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: 'system'
    },
    {
        id: 'security_critical_events',
        name: 'Eventos críticos de seguridad',
        description: 'Se detectaron eventos críticos en el sistema de auditoría',
        category: 'security',
        severity: 'critical',
        enabled: true,
        conditions: [
            {
                metric: 'audit.critical_events_per_hour',
                operator: 'gt',
                threshold: 5,
                timeWindow: 60,
                evaluationInterval: 300
            }
        ],
        notificationChannels: [
            {
                type: 'email',
                config: {
                    recipients: [
                        'security@pinteya.com',
                        'admin@pinteya.com'
                    ]
                },
                enabled: true
            },
            {
                type: 'sms',
                config: {
                    phone: '+5491123456789'
                },
                enabled: true
            }
        ],
        cooldownMinutes: 5,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: 'system'
    },
    // Alertas de performance
    {
        id: 'performance_high_response_time',
        name: 'Tiempo de respuesta alto',
        description: 'El tiempo de respuesta P95 está por encima del umbral aceptable',
        category: 'performance',
        severity: 'medium',
        enabled: true,
        conditions: [
            {
                metric: 'api.response_time_p95',
                operator: 'gt',
                threshold: 1000,
                timeWindow: 10,
                evaluationInterval: 120
            }
        ],
        notificationChannels: [
            {
                type: 'email',
                config: {
                    recipients: [
                        'devops@pinteya.com'
                    ]
                },
                enabled: true
            }
        ],
        cooldownMinutes: 30,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: 'system'
    },
    {
        id: 'performance_low_cache_hit_rate',
        name: 'Baja tasa de hit de cache',
        description: 'La tasa de hit del cache está por debajo del umbral óptimo',
        category: 'performance',
        severity: 'medium',
        enabled: true,
        conditions: [
            {
                metric: 'cache.hit_rate',
                operator: 'lt',
                threshold: 0.8,
                timeWindow: 15,
                evaluationInterval: 300
            }
        ],
        notificationChannels: [
            {
                type: 'email',
                config: {
                    recipients: [
                        'devops@pinteya.com'
                    ]
                },
                enabled: true
            }
        ],
        cooldownMinutes: 60,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: 'system'
    },
    // Alertas de capacidad
    {
        id: 'capacity_high_memory_usage',
        name: 'Alto uso de memoria',
        description: 'El uso de memoria del sistema está por encima del 85%',
        category: 'capacity',
        severity: 'high',
        enabled: true,
        conditions: [
            {
                metric: 'system.memory_usage_percent',
                operator: 'gt',
                threshold: 85,
                timeWindow: 5,
                evaluationInterval: 60
            }
        ],
        notificationChannels: [
            {
                type: 'email',
                config: {
                    recipients: [
                        'devops@pinteya.com'
                    ]
                },
                enabled: true
            }
        ],
        cooldownMinutes: 15,
        escalationRules: [
            {
                afterMinutes: 15,
                severity: 'critical',
                additionalChannels: [
                    {
                        type: 'sms',
                        config: {
                            phone: '+5491123456789'
                        },
                        enabled: true
                    }
                ]
            }
        ],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: 'system'
    },
    // Alertas de errores
    {
        id: 'error_high_5xx_rate',
        name: 'Alta tasa de errores 5xx',
        description: 'La tasa de errores 5xx está por encima del umbral aceptable',
        category: 'error',
        severity: 'high',
        enabled: true,
        conditions: [
            {
                metric: 'api.error_rate_5xx',
                operator: 'gt',
                threshold: 0.05,
                timeWindow: 10,
                evaluationInterval: 120
            }
        ],
        notificationChannels: [
            {
                type: 'email',
                config: {
                    recipients: [
                        'devops@pinteya.com',
                        'backend@pinteya.com'
                    ]
                },
                enabled: true
            }
        ],
        cooldownMinutes: 10,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: 'system'
    }
];
class EnterpriseAlertSystem {
    constructor(){
        this.alerts = new Map();
        this.alertRules = new Map();
        this.evaluationTimers = new Map();
        this.isInitialized = false;
    }
    static getInstance() {
        if (!EnterpriseAlertSystem.instance) {
            EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();
        }
        return EnterpriseAlertSystem.instance;
    }
    /**
   * Inicializa el sistema de alertas
   */ async initialize() {
        if (this.isInitialized) {
            return;
        }
        try {
            // Cargar reglas predefinidas
            ENTERPRISE_ALERT_RULES.forEach((rule)=>{
                this.alertRules.set(rule.id, rule);
            });
            // Iniciar evaluación de reglas
            this.startRuleEvaluation();
            // Iniciar limpieza automática
            this.startCleanupScheduler();
            this.isInitialized = true;
            console.log('[ENTERPRISE_ALERTS] Sistema inicializado con', this.alertRules.size, 'reglas');
        } catch (error) {
            console.error('[ENTERPRISE_ALERTS] Error inicializando sistema:', error);
            throw error;
        }
    }
    /**
   * Evalúa todas las reglas de alerta activas
   */ async evaluateRules() {
        for (const [ruleId, rule] of this.alertRules.entries()){
            if (!rule.enabled) {
                continue;
            }
            try {
                await this.evaluateRule(rule);
            } catch (error) {
                console.error(`[ENTERPRISE_ALERTS] Error evaluating rule ${ruleId}:`, error);
            }
        }
    }
    /**
   * Evalúa una regla específica
   */ async evaluateRule(rule) {
        for (const condition of rule.conditions){
            const metricValue = await this.getMetricValue(condition.metric);
            if (this.evaluateCondition(condition, metricValue)) {
                // Verificar si ya existe un alert activo para esta regla
                const existingAlert = Array.from(this.alerts.values()).find((alert)=>alert.ruleId === rule.id && alert.status === 'active');
                if (!existingAlert) {
                    await this.triggerAlert(rule, condition, metricValue);
                }
            }
        }
    }
    /**
   * Evalúa una condición específica
   */ evaluateCondition(condition, value) {
        const { operator, threshold } = condition;
        switch(operator){
            case 'gt':
                return Number(value) > Number(threshold);
            case 'lt':
                return Number(value) < Number(threshold);
            case 'gte':
                return Number(value) >= Number(threshold);
            case 'lte':
                return Number(value) <= Number(threshold);
            case 'eq':
                return value === threshold;
            case 'contains':
                return String(value).includes(String(threshold));
            case 'not_contains':
                return !String(value).includes(String(threshold));
            default:
                return false;
        }
    }
    /**
   * Obtiene el valor de una métrica
   */ async getMetricValue(metric) {
        try {
            const [system, metricName] = metric.split('.');
            switch(system){
                case 'rate_limiting':
                    const rateLimitMetrics = _enterpriseratelimiter.metricsCollector.getMetrics();
                    switch(metricName){
                        case 'blocked_requests_per_minute':
                            return rateLimitMetrics.blockedRequests || 0;
                        case 'average_response_time':
                            return rateLimitMetrics.averageResponseTime || 0;
                        case 'error_rate':
                            const total = rateLimitMetrics.totalRequests || 1;
                            return (rateLimitMetrics.errors || 0) / total;
                        default:
                            return 0;
                    }
                case 'cache':
                    const cacheMetrics = _enterprisecachesystem.enterpriseCacheSystem.getMetrics();
                    const cacheKeys = Object.keys(cacheMetrics);
                    switch(metricName){
                        case 'hit_rate':
                            if (cacheKeys.length === 0) {
                                return 0;
                            }
                            const totalHits = cacheKeys.reduce((sum, key)=>sum + cacheMetrics[key].hits, 0);
                            const totalMisses = cacheKeys.reduce((sum, key)=>sum + cacheMetrics[key].misses, 0);
                            const totalRequests = totalHits + totalMisses;
                            return totalRequests > 0 ? totalHits / totalRequests : 0;
                        case 'average_response_time':
                            if (cacheKeys.length === 0) {
                                return 0;
                            }
                            return cacheKeys.reduce((sum, key)=>sum + cacheMetrics[key].avgResponseTime, 0) / cacheKeys.length;
                        default:
                            return 0;
                    }
                case 'system':
                    switch(metricName){
                        case 'memory_usage_percent':
                            const memoryUsage = process.memoryUsage();
                            return memoryUsage.heapUsed / memoryUsage.heapTotal * 100;
                        case 'cpu_usage_percent':
                            // Simulado - en producción usar librerías como 'os-utils'
                            return Math.random() * 40 + 30;
                        default:
                            return 0;
                    }
                case 'api':
                    // Métricas de API simuladas - en producción vendrían del sistema de métricas
                    switch(metricName){
                        case 'response_time_p95':
                            return Math.random() * 500 + 200;
                        case 'error_rate_5xx':
                            return Math.random() * 0.02;
                        default:
                            return 0;
                    }
                case 'audit':
                    switch(metricName){
                        case 'critical_events_per_hour':
                            // Simulado - en producción vendría del sistema de auditoría
                            return Math.floor(Math.random() * 3);
                        default:
                            return 0;
                    }
                default:
                    return 0;
            }
        } catch (error) {
            console.error(`[ENTERPRISE_ALERTS] Error getting metric ${metric}:`, error);
            return 0;
        }
    }
    /**
   * Dispara una nueva alerta
   */ async triggerAlert(rule, condition, triggerValue) {
        const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const alert = {
            id: alertId,
            ruleId: rule.id,
            ruleName: rule.name,
            category: rule.category,
            severity: rule.severity,
            status: 'active',
            title: rule.name,
            description: rule.description,
            message: `${rule.name}: ${condition.metric} is ${triggerValue} (threshold: ${condition.threshold})`,
            triggeredAt: new Date().toISOString(),
            triggeredBy: 'system',
            triggerValue,
            threshold: condition.threshold,
            metadata: {
                metric: condition.metric,
                operator: condition.operator,
                timeWindow: condition.timeWindow,
                evaluationInterval: condition.evaluationInterval
            },
            tags: [
                rule.category,
                rule.severity,
                'auto-generated'
            ]
        };
        // Guardar alerta
        this.alerts.set(alertId, alert);
        // Enviar notificaciones
        await this.sendNotifications(alert, rule.notificationChannels);
        // Registrar en auditoría
        await this.logAlertEvent(alert, 'TRIGGERED');
        // Programar escalamiento si está configurado
        if (rule.escalationRules && rule.escalationRules.length > 0) {
            this.scheduleEscalation(alert, rule.escalationRules);
        }
        console.log(`[ENTERPRISE_ALERTS] Alert triggered: ${alert.title}`);
    }
    /**
   * Envía notificaciones para una alerta
   */ async sendNotifications(alert, channels) {
        for (const channel of channels){
            if (!channel.enabled) {
                continue;
            }
            try {
                switch(channel.type){
                    case 'email':
                        await this.sendEmailNotification(alert, channel.config);
                        break;
                    case 'slack':
                        await this.sendSlackNotification(alert, channel.config);
                        break;
                    case 'webhook':
                        await this.sendWebhookNotification(alert, channel.config);
                        break;
                    case 'sms':
                        await this.sendSMSNotification(alert, channel.config);
                        break;
                    case 'dashboard':
                        break;
                    default:
                        console.warn(`[ENTERPRISE_ALERTS] Unknown notification channel: ${channel.type}`);
                }
            } catch (error) {
                console.error(`[ENTERPRISE_ALERTS] Error sending ${channel.type} notification:`, error);
            }
        }
    }
    /**
   * Envía notificación por email
   */ async sendEmailNotification(alert, config) {
        // Implementación de email - en producción usar servicios como SendGrid, SES, etc.
        console.log(`[ENTERPRISE_ALERTS] Email notification sent to ${config.to?.join(', ')}:`, alert.title);
    }
    /**
   * Envía notificación por Slack
   */ async sendSlackNotification(alert, config) {
        // Implementación de Slack webhook
        console.log(`[ENTERPRISE_ALERTS] Slack notification sent to ${config.channel}:`, alert.title);
    }
    /**
   * Envía notificación por webhook
   */ async sendWebhookNotification(alert, config) {
        // Implementación de webhook HTTP
        console.log(`[ENTERPRISE_ALERTS] Webhook notification sent to ${config.url}:`, alert.title);
    }
    /**
   * Envía notificación por SMS
   */ async sendSMSNotification(alert, config) {
        // Implementación de SMS - en producción usar servicios como Twilio, AWS SNS, etc.
        console.log(`[ENTERPRISE_ALERTS] SMS notification sent to ${config.phoneNumbers?.join(', ')}:`, alert.title);
    }
    /**
   * Programa escalamiento de alerta
   */ scheduleEscalation(alert, escalationRules) {
        escalationRules.forEach((rule)=>{
            setTimeout(async ()=>{
                const currentAlert = this.alerts.get(alert.id);
                if (currentAlert && currentAlert.status === 'active') {
                    // Escalar severidad
                    currentAlert.severity = rule.severity;
                    // Enviar notificaciones adicionales
                    await this.sendNotifications(currentAlert, rule.additionalChannels);
                    // Registrar escalamiento
                    await this.logAlertEvent(currentAlert, 'ESCALATED');
                    console.log(`[ENTERPRISE_ALERTS] Alert escalated: ${alert.title} -> ${rule.severity}`);
                }
            }, rule.afterMinutes * 60 * 1000);
        });
    }
    /**
   * Registra eventos de alerta en auditoría
   */ async logAlertEvent(alert, action) {
        try {
            await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
                user_id: 'system',
                event_type: 'ALERT_EVENT',
                event_category: 'monitoring',
                severity: alert.severity,
                description: `Alert ${action}: ${alert.title}`,
                metadata: {
                    alert_id: alert.id,
                    rule_id: alert.ruleId,
                    action,
                    category: alert.category,
                    severity: alert.severity,
                    trigger_value: alert.triggerValue,
                    threshold: alert.threshold
                },
                ip_address: '127.0.0.1',
                user_agent: 'EnterpriseAlertSystem/1.0'
            }, {
                userId: 'system',
                sessionId: 'alert_system',
                email: 'system@pinteya.com',
                role: 'system',
                permissions: [
                    'system_access'
                ],
                sessionValid: true,
                securityLevel: 'critical',
                ipAddress: '127.0.0.1',
                userAgent: 'EnterpriseAlertSystem/1.0',
                supabase: null,
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            });
        } catch (error) {
            console.error('[ENTERPRISE_ALERTS] Error logging alert event:', error);
        }
    }
    /**
   * Obtiene todas las alertas activas
   */ getActiveAlerts() {
        return Array.from(this.alerts.values()).filter((alert)=>alert.status === 'active');
    }
    /**
   * Obtiene métricas de alertas
   */ getAlertMetrics() {
        const allAlerts = Array.from(this.alerts.values());
        const activeAlerts = allAlerts.filter((alert)=>alert.status === 'active');
        const alertsByCategory = allAlerts.reduce((acc, alert)=>{
            acc[alert.category] = (acc[alert.category] || 0) + 1;
            return acc;
        }, {});
        const alertsBySeverity = allAlerts.reduce((acc, alert)=>{
            acc[alert.severity] = (acc[alert.severity] || 0) + 1;
            return acc;
        }, {});
        // Calcular tiempo promedio de resolución
        const resolvedAlerts = allAlerts.filter((alert)=>alert.resolvedAt);
        const averageResolutionTime = resolvedAlerts.length > 0 ? resolvedAlerts.reduce((sum, alert)=>{
            const triggered = new Date(alert.triggeredAt).getTime();
            const resolved = new Date(alert.resolvedAt).getTime();
            return sum + (resolved - triggered);
        }, 0) / resolvedAlerts.length / 1000 / 60 : 0; // en minutos
        return {
            totalAlerts: allAlerts.length,
            activeAlerts: activeAlerts.length,
            alertsByCategory,
            alertsBySeverity,
            averageResolutionTime,
            falsePositiveRate: 0.05 // Simulado
        };
    }
    /**
   * Reconoce una alerta
   */ async acknowledgeAlert(alertId, userId) {
        const alert = this.alerts.get(alertId);
        if (!alert || alert.status !== 'active') {
            return false;
        }
        alert.status = 'acknowledged';
        alert.acknowledgedAt = new Date().toISOString();
        alert.acknowledgedBy = userId;
        await this.logAlertEvent(alert, 'ACKNOWLEDGED');
        return true;
    }
    /**
   * Resuelve una alerta
   */ async resolveAlert(alertId, userId) {
        const alert = this.alerts.get(alertId);
        if (!alert || alert.status !== 'active' && alert.status !== 'acknowledged') {
            return false;
        }
        alert.status = 'resolved';
        alert.resolvedAt = new Date().toISOString();
        alert.resolvedBy = userId;
        await this.logAlertEvent(alert, 'RESOLVED');
        return true;
    }
    // =====================================================
    // MÉTODOS PRIVADOS
    // =====================================================
    startRuleEvaluation() {
        // Evaluar reglas cada 60 segundos
        setInterval(()=>{
            this.evaluateRules().catch((error)=>{
                console.error('[ENTERPRISE_ALERTS] Error in rule evaluation:', error);
            });
        }, 60 * 1000);
    }
    startCleanupScheduler() {
        // Limpiar alertas resueltas antiguas cada hora
        setInterval(()=>{
            const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;
            for (const [alertId, alert] of this.alerts.entries()){
                if (alert.status === 'resolved' && alert.resolvedAt) {
                    const resolvedTime = new Date(alert.resolvedAt).getTime();
                    if (resolvedTime < oneWeekAgo) {
                        this.alerts.delete(alertId);
                    }
                }
            }
        }, 60 * 60 * 1000); // 1 hora
    }
}
const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance();
const EnterpriseAlertUtils = {
    /**
   * Crea una alerta manual
   */ async createManualAlert (title, description, severity, category, userId) {
        const alertId = `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const alert = {
            id: alertId,
            ruleId: 'manual',
            ruleName: 'Manual Alert',
            category,
            severity,
            status: 'active',
            title,
            description,
            message: description,
            triggeredAt: new Date().toISOString(),
            triggeredBy: userId,
            triggerValue: 'manual',
            threshold: 'manual',
            metadata: {
                manual: true,
                created_by: userId
            },
            tags: [
                'manual',
                category,
                severity
            ]
        };
        enterpriseAlertSystem['alerts'].set(alertId, alert);
        await enterpriseAlertSystem['logAlertEvent'](alert, 'CREATED');
        return alertId;
    },
    /**
   * Obtiene alertas por categoría
   */ getAlertsByCategory (category) {
        return Array.from(enterpriseAlertSystem['alerts'].values()).filter((alert)=>alert.category === category);
    },
    /**
   * Obtiene alertas por severidad
   */ getAlertsBySeverity (severity) {
        return Array.from(enterpriseAlertSystem['alerts'].values()).filter((alert)=>alert.severity === severity);
    }
};

//# sourceMappingURL=data:application/json;base64,