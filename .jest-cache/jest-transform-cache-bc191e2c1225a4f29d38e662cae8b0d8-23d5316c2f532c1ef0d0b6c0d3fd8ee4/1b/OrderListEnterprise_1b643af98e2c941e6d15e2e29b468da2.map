{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\orders\\OrderListEnterprise.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ORDER LIST ENTERPRISE COMPONENT\r\n// ===================================\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useCallback, useRef, useMemo, memo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Select, \r\n  SelectContent, \r\n  SelectItem, \r\n  SelectTrigger, \r\n  SelectValue \r\n} from '@/components/ui/select';\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from '@/components/ui/table';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport {\r\n  Search,\r\n  Filter,\r\n  Download,\r\n  RefreshCw,\r\n  Eye,\r\n  Edit,\r\n  MoreHorizontal,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Package\r\n} from 'lucide-react';\r\nimport { \r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuSeparator\r\n} from '@/components/ui/dropdown-menu';\r\nimport { \r\n  OrderEnterprise, \r\n  OrderFilters, \r\n  OrderStatus,\r\n  PaymentStatus \r\n} from '@/types/orders-enterprise';\r\nimport { formatOrderStatus, formatPaymentStatus } from '@/lib/orders-enterprise';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useRenderMonitoring } from '@/hooks/monitoring/useRenderMonitoring';\r\nimport { useOrdersEnterpriseStrict } from '@/hooks/admin/useOrdersEnterpriseStrict';\r\n\r\n// ===================================\r\n// INTERFACES\r\n// ===================================\r\n\r\ninterface OrderListEnterpriseProps {\r\n  className?: string;\r\n  onOrderSelect?: (order: OrderEnterprise) => void;\r\n  onOrderEdit?: (order: OrderEnterprise) => void;\r\n  onBulkAction?: (action: string, orderIds: string[]) => void;\r\n  enableBulkActions?: boolean;\r\n  enableFilters?: boolean;\r\n  pageSize?: number;\r\n}\r\n\r\n// ===================================\r\n// COMPONENTES MEMOIZADOS\r\n// ===================================\r\n\r\ninterface OrderFiltersComponentProps {\r\n  filters: any;\r\n  onFilterChange: (key: string, value: any) => void;\r\n  enabled: boolean;\r\n}\r\n\r\nconst OrderFiltersComponent = memo<OrderFiltersComponentProps>(({ filters, onFilterChange, enabled }) => {\r\n  if (!enabled) {return null;}\r\n\r\n  return (\r\n    <Card className=\"mb-6\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Filter className=\"w-5 h-5\" />\r\n          Filtros\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {/* B√∫squeda */}\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n            <Input\r\n              placeholder=\"Buscar √≥rdenes...\"\r\n              value={filters.search || ''}\r\n              onChange={(e) => onFilterChange('search', e.target.value)}\r\n              className=\"pl-10\"\r\n            />\r\n          </div>\r\n\r\n          {/* Estado */}\r\n          <Select\r\n            value={filters.status || 'all'}\r\n            onValueChange={(value) => onFilterChange('status', value === 'all' ? undefined : value)}\r\n          >\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Estado\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">Todos los estados</SelectItem>\r\n              <SelectItem value=\"pending\">Pendiente</SelectItem>\r\n              <SelectItem value=\"confirmed\">Confirmada</SelectItem>\r\n              <SelectItem value=\"processing\">Procesando</SelectItem>\r\n              <SelectItem value=\"shipped\">Enviada</SelectItem>\r\n              <SelectItem value=\"delivered\">Entregada</SelectItem>\r\n              <SelectItem value=\"cancelled\">Cancelada</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          {/* Estado de Pago */}\r\n          <Select\r\n            value={filters.payment_status || 'all'}\r\n            onValueChange={(value) => onFilterChange('payment_status', value === 'all' ? undefined : value)}\r\n          >\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Estado de Pago\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">Todos los pagos</SelectItem>\r\n              <SelectItem value=\"pending\">Pendiente</SelectItem>\r\n              <SelectItem value=\"paid\">Pagado</SelectItem>\r\n              <SelectItem value=\"failed\">Fall√≥</SelectItem>\r\n              <SelectItem value=\"refunded\">Reembolsado</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          {/* Ordenamiento */}\r\n          <Select\r\n            value={`${filters.sort_by}_${filters.sort_order}`}\r\n            onValueChange={(value) => {\r\n              const [sortBy, sortOrder] = value.split('_');\r\n              onFilterChange('sort_by', sortBy);\r\n              onFilterChange('sort_order', sortOrder);\r\n            }}\r\n          >\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Ordenar por\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"created_at_desc\">M√°s recientes</SelectItem>\r\n              <SelectItem value=\"created_at_asc\">M√°s antiguos</SelectItem>\r\n              <SelectItem value=\"total_desc\">Mayor monto</SelectItem>\r\n              <SelectItem value=\"total_asc\">Menor monto</SelectItem>\r\n              <SelectItem value=\"order_number_asc\">N√∫mero de orden</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});\r\n\r\nOrderFiltersComponent.displayName = 'OrderFiltersComponent';\r\n\r\ninterface BulkActionsProps {\r\n  selectedCount: number;\r\n  onBulkAction: (action: string) => void;\r\n  enabled: boolean;\r\n}\r\n\r\nconst BulkActions = memo<BulkActionsProps>(({ selectedCount, onBulkAction, enabled }) => {\r\n  if (!enabled || selectedCount === 0) {return null;}\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-2 mb-4 p-3 bg-blue-50 rounded-lg\">\r\n      <span className=\"text-sm text-blue-700\">\r\n        {selectedCount} orden(es) seleccionada(s)\r\n      </span>\r\n      <div className=\"flex gap-2 ml-auto\">\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"outline\"\r\n          onClick={() => onBulkAction('export')}\r\n        >\r\n          <Download className=\"w-4 h-4 mr-1\" />\r\n          Exportar\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"outline\"\r\n          onClick={() => onBulkAction('update_status')}\r\n        >\r\n          Actualizar Estado\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"destructive\"\r\n          onClick={() => onBulkAction('delete')}\r\n        >\r\n          Eliminar\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nBulkActions.displayName = 'BulkActions';\r\n\r\n// Interfaces removidas - ahora se usan los tipos del hook estricto\r\n\r\n// ===================================\r\n// COMPONENTE PRINCIPAL\r\n// ===================================\r\n\r\nexport const OrderListEnterprise: React.FC<OrderListEnterpriseProps> = ({\r\n  className = '',\r\n  onOrderSelect,\r\n  onOrderEdit,\r\n  onBulkAction,\r\n  enableBulkActions = true,\r\n  enableFilters = true,\r\n  pageSize = 20,\r\n}) => {\r\n  console.log('üöÄ OrderListEnterprise - Componente renderiz√°ndose con props:', {\r\n    className,\r\n    enableBulkActions,\r\n    enableFilters,\r\n    pageSize\r\n  });\r\n  \r\n  const { toast } = useToast();\r\n  \r\n  // Monitoreo de renderizado\r\n  const { trackError, metrics } = useRenderMonitoring({\r\n    componentName: 'OrderListEnterprise',\r\n    enabled: process.env.NODE_ENV === 'development',\r\n    enableToasts: false, // Evitar spam de toasts\r\n    enableConsoleLogging: true,\r\n    sampleRate: 0.1 // Monitorear solo 10% de los renders para performance\r\n  });\r\n  \r\n  // Hook con validaci√≥n estricta de tipos\r\n  const {\r\n    orders,\r\n    pagination,\r\n    filters,\r\n    analytics,\r\n    isLoading,\r\n    error,\r\n    fetchOrders,\r\n    updateFilters,\r\n    refreshOrders,\r\n    clearError,\r\n    retryLastRequest\r\n  } = useOrdersEnterpriseStrict({\r\n    page: 1,\r\n    limit: pageSize,\r\n    sort_by: 'created_at',\r\n    sort_order: 'desc'\r\n  }, {\r\n    autoFetch: true, // ‚úÖ REACTIVADO: Con persistencia, el auto-fetch funciona correctamente\r\n    maxRetries: 3,\r\n    timeout: 10000,\r\n    enableCache: true\r\n  });\r\n\r\n  // DEBUG: Logs para verificar datos del hook\r\n  console.log('üîç OrderListEnterprise - Hook data:', {\r\n    orders: orders,\r\n    ordersLength: orders?.length,\r\n    pagination,\r\n    isLoading,\r\n    error,\r\n    filters\r\n  });\r\n\r\n  // Estado local para selecciones\r\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE MANEJO DE FILTROS\r\n  // ===================================\r\n\r\n  // ===================================\r\n  // MANEJADORES DE EVENTOS\r\n  // ===================================\r\n\r\n  // Usar useRef para evitar dependencias circulares\r\n  const filtersRef = useRef(filters);\r\n  filtersRef.current = filters;\r\n\r\n  const handleFilterChange = useCallback((key: keyof typeof filters, value: any) => {\r\n    try {\r\n      const currentFilters = filtersRef.current;\r\n      const updatedFilters = { ...currentFilters, [key]: value, page: 1 };\r\n      updateFilters(updatedFilters);\r\n      // REMOVIDO: fetchOrders duplicado que causaba refresco infinito\r\n      // El hook ya maneja el fetch autom√°ticamente\r\n    } catch (error) {\r\n      trackError(error as Error, { action: 'filter_change', key, value });\r\n      toast({\r\n        title: 'Error al aplicar filtros',\r\n        description: 'No se pudieron aplicar los filtros seleccionados.',\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  }, [updateFilters, trackError, toast]); // Removido 'filters' de dependencias\r\n\r\n  const handlePageChange = useCallback((newPage: number) => {\r\n    try {\r\n      const currentFilters = filtersRef.current;\r\n      const updatedFilters = { ...currentFilters, page: newPage };\r\n      updateFilters(updatedFilters);\r\n      // REMOVIDO: fetchOrders duplicado que causaba refresco infinito\r\n      // El hook ya maneja el fetch autom√°ticamente\r\n    } catch (error) {\r\n      trackError(error as Error, { action: 'page_change', page: newPage });\r\n      toast({\r\n        title: 'Error de paginaci√≥n',\r\n        description: 'No se pudo cambiar de p√°gina.',\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  }, [updateFilters, trackError, toast]); // Removido 'filters' de dependencias\r\n\r\n  const handleSelectOrder = useCallback((orderId: string | number, selected: boolean) => {\r\n    const orderIdStr = String(orderId);\r\n    setSelectedOrders(prev =>\r\n      selected\r\n        ? [...prev, orderIdStr]\r\n        : prev.filter(id => id !== orderIdStr)\r\n    );\r\n  }, []);\r\n\r\n  const handleSelectAll = useCallback((selected: boolean) => {\r\n    setSelectedOrders(selected ? orders.map(order => String(order.id)) : []);\r\n  }, [orders]);\r\n\r\n  const handleBulkAction = useCallback((action: string) => {\r\n    if (selectedOrders.length === 0) {\r\n      toast({\r\n        title: 'Advertencia',\r\n        description: 'Selecciona al menos una orden',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    onBulkAction?.(action, selectedOrders);\r\n  }, [selectedOrders, onBulkAction, toast]);\r\n\r\n  const handleRefresh = useCallback(() => {\r\n    refreshOrders();\r\n  }, [refreshOrders]);\r\n\r\n  // ===================================\r\n  // DATOS MEMOIZADOS\r\n  // ===================================\r\n\r\n  // Memoizar datos computados para evitar rec√°lculos innecesarios\r\n  const memoizedData = useMemo(() => {\r\n    const allSelected = orders.length > 0 && selectedOrders.length === orders.length;\r\n    const someSelected = selectedOrders.length > 0;\r\n    const hasOrders = orders.length > 0;\r\n    const hasNextPage = pagination?.hasNextPage || false;\r\n    const hasPreviousPage = pagination?.hasPreviousPage || false;\r\n    const currentPage = pagination?.page || 1;\r\n    const totalPages = pagination?.totalPages || 1;\r\n\r\n    return {\r\n      allSelected,\r\n      someSelected,\r\n      hasOrders,\r\n      hasNextPage,\r\n      hasPreviousPage,\r\n      currentPage,\r\n      totalPages\r\n    };\r\n  }, [orders, selectedOrders, pagination]);\r\n\r\n  // Memoizar handlers que dependen de datos computados\r\n  const memoizedHandlers = useMemo(() => ({\r\n    onFilterChange: handleFilterChange,\r\n    onPageChange: handlePageChange,\r\n    onSelectOrder: handleSelectOrder,\r\n    onSelectAll: handleSelectAll,\r\n    onBulkAction: handleBulkAction,\r\n    onRefresh: handleRefresh\r\n  }), [\r\n    handleFilterChange,\r\n    handlePageChange,\r\n    handleSelectOrder,\r\n    handleSelectAll,\r\n    handleBulkAction,\r\n    handleRefresh\r\n  ]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE RENDER ELIMINADAS - AHORA USAN COMPONENTES MEMOIZADOS\r\n  // ===================================\r\n\r\n  // Funci√≥n renderBulkActions eliminada - ahora usa componente BulkActions memoizado\r\n\r\n  // ===================================\r\n  // RENDER DE TABLA\r\n  // ===================================\r\n\r\n  const renderTable = () => {\r\n    if (isLoading) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <RefreshCw className=\"w-8 h-8 animate-spin text-gray-400\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (error) {\r\n      return (\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-red-600 mb-4\">{error instanceof Error ? error.message : error?.toString() || 'Error desconocido'}</p>\r\n          <Button onClick={handleRefresh} variant=\"outline\">\r\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n            Reintentar\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (orders.length === 0) {\r\n      return (\r\n        <div className=\"text-center py-12 text-gray-500\">\r\n          <div className=\"mb-4\">\r\n            <Package className=\"w-16 h-16 mx-auto text-gray-300 mb-4\" />\r\n            <p className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              {isLoading ? 'Cargando √≥rdenes...' : 'No hay √≥rdenes disponibles'}\r\n            </p>\r\n            <p className=\"text-sm text-gray-500 mb-6\">\r\n              {isLoading\r\n                ? 'Obteniendo datos desde la API...'\r\n                : 'No se encontraron √≥rdenes con los filtros aplicados'\r\n              }\r\n            </p>\r\n          </div>\r\n          {!isLoading && (\r\n            <Button\r\n              onClick={() => fetchOrders()}\r\n              className=\"bg-blaze-orange-600 hover:bg-blaze-orange-700 text-white\"\r\n              size=\"lg\"\r\n            >\r\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n              Recargar √ìrdenes\r\n            </Button>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            {enableBulkActions && (\r\n              <TableHead className=\"w-12\">\r\n                <Checkbox\r\n                  checked={selectedOrders.length === orders.length}\r\n                  onCheckedChange={handleSelectAll}\r\n                />\r\n              </TableHead>\r\n            )}\r\n            <TableHead>Orden</TableHead>\r\n            <TableHead>Cliente</TableHead>\r\n            <TableHead>Estado</TableHead>\r\n            <TableHead>Pago</TableHead>\r\n            <TableHead>Total</TableHead>\r\n            <TableHead>Fecha</TableHead>\r\n            <TableHead className=\"w-12\">Acciones</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {orders.map((order) => {\r\n            const statusInfo = formatOrderStatus(order.status);\r\n            const paymentInfo = formatPaymentStatus(order.payment_status);\r\n            \r\n            return (\r\n              <TableRow key={order.id}>\r\n                {enableBulkActions && (\r\n                  <TableCell>\r\n                    <Checkbox\r\n                      checked={selectedOrders.includes(String(order.id))}\r\n                      onCheckedChange={(checked) => handleSelectOrder(order.id, !!checked)}\r\n                    />\r\n                  </TableCell>\r\n                )}\r\n                <TableCell>\r\n                  <div>\r\n                    <div className=\"font-medium\">{order.order_number}</div>\r\n                    <div className=\"text-sm text-gray-500\">#{String(order.id).slice(0, 8)}</div>\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div>\r\n                    <div className=\"font-medium\">{order.user_profiles?.name || 'N/A'}</div>\r\n                    <div className=\"text-sm text-gray-500\">{order.user_profiles?.email}</div>\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className={\r\n                      statusInfo.color === 'green' ? 'bg-green-100 text-green-800' :\r\n                      statusInfo.color === 'blue' ? 'bg-blue-100 text-blue-800' :\r\n                      statusInfo.color === 'yellow' ? 'bg-yellow-100 text-yellow-800' :\r\n                      statusInfo.color === 'red' ? 'bg-red-100 text-red-800' :\r\n                      statusInfo.color === 'purple' ? 'bg-purple-100 text-purple-800' :\r\n                      statusInfo.color === 'orange' ? 'bg-orange-100 text-orange-800' :\r\n                      'bg-gray-100 text-gray-800'\r\n                    }\r\n                  >\r\n                    {statusInfo.label}\r\n                  </Badge>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className={\r\n                      paymentInfo.color === 'green' ? 'bg-green-100 text-green-800' :\r\n                      paymentInfo.color === 'yellow' ? 'bg-yellow-100 text-yellow-800' :\r\n                      paymentInfo.color === 'red' ? 'bg-red-100 text-red-800' :\r\n                      'bg-gray-100 text-gray-800'\r\n                    }\r\n                  >\r\n                    {paymentInfo.label}\r\n                  </Badge>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"font-medium\">\r\n                    ${(order.total || 0).toLocaleString()} {order.currency}\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"text-sm\">\r\n                    {new Date(order.created_at).toLocaleDateString()}\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        <MoreHorizontal className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent align=\"end\">\r\n                      <DropdownMenuItem onClick={() => onOrderSelect?.(order)}>\r\n                        <Eye className=\"w-4 h-4 mr-2\" />\r\n                        Ver Detalles\r\n                      </DropdownMenuItem>\r\n                      <DropdownMenuItem onClick={() => onOrderEdit?.(order)}>\r\n                        <Edit className=\"w-4 h-4 mr-2\" />\r\n                        Editar\r\n                      </DropdownMenuItem>\r\n                      <DropdownMenuSeparator />\r\n                      <DropdownMenuItem onClick={() => handleBulkAction('export', [String(order.id)])}>\r\n                        <Download className=\"w-4 h-4 mr-2\" />\r\n                        Exportar\r\n                      </DropdownMenuItem>\r\n                    </DropdownMenuContent>\r\n                  </DropdownMenu>\r\n                </TableCell>\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    );\r\n  };\r\n\r\n  // ===================================\r\n  // RENDER DE PAGINACI√ìN\r\n  // ===================================\r\n\r\n  const renderPagination = () => {\r\n    if (!pagination || pagination.totalPages <= 1) {return null;}\r\n\r\n    return (\r\n      <div className=\"flex items-center justify-between mt-6\">\r\n        <div className=\"text-sm text-gray-500\">\r\n          Mostrando {((pagination.page - 1) * pagination.limit) + 1} a{' '}\r\n          {Math.min(pagination.page * pagination.limit, pagination.total)} de{' '}\r\n          {pagination.total} √≥rdenes\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => handlePageChange(pagination.page - 1)}\r\n            disabled={!pagination.hasPreviousPage}\r\n          >\r\n            <ChevronLeft className=\"w-4 h-4\" />\r\n            Anterior\r\n          </Button>\r\n          <span className=\"text-sm\">\r\n            P√°gina {pagination.page} de {pagination.totalPages}\r\n          </span>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => handlePageChange(pagination.page + 1)}\r\n            disabled={!pagination.hasNextPage}\r\n          >\r\n            Siguiente\r\n            <ChevronRight className=\"w-4 h-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // ===================================\r\n  // RENDER PRINCIPAL\r\n  // ===================================\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">Gesti√≥n de √ìrdenes</h2>\r\n          <p className=\"text-gray-600\">\r\n            Administra y monitorea todas las √≥rdenes del sistema\r\n          </p>\r\n        </div>\r\n        <Button onClick={handleRefresh} variant=\"outline\">\r\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n          Actualizar\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Filtros */}\r\n      <OrderFiltersComponent\r\n        filters={filters}\r\n        onFilterChange={memoizedHandlers.onFilterChange}\r\n        enabled={enableFilters}\r\n      />\r\n\r\n      {/* Acciones masivas */}\r\n      <BulkActions\r\n        selectedCount={selectedOrders.length}\r\n        onBulkAction={memoizedHandlers.onBulkAction}\r\n        enabled={enableBulkActions}\r\n      />\r\n\r\n      {/* Tabla */}\r\n      <Card>\r\n        <CardContent className=\"p-0\">\r\n          {renderTable()}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Paginaci√≥n */}\r\n      {renderPagination()}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["OrderListEnterprise","OrderFiltersComponent","memo","filters","onFilterChange","enabled","Card","className","CardHeader","CardTitle","Filter","CardContent","div","Search","Input","placeholder","value","search","onChange","e","target","Select","status","onValueChange","undefined","SelectTrigger","SelectValue","SelectContent","SelectItem","payment_status","sort_by","sort_order","sortBy","sortOrder","split","displayName","BulkActions","selectedCount","onBulkAction","span","Button","size","variant","onClick","Download","onOrderSelect","onOrderEdit","enableBulkActions","enableFilters","pageSize","console","log","toast","useToast","trackError","metrics","useRenderMonitoring","componentName","process","env","NODE_ENV","enableToasts","enableConsoleLogging","sampleRate","orders","pagination","analytics","isLoading","error","fetchOrders","updateFilters","refreshOrders","clearError","retryLastRequest","useOrdersEnterpriseStrict","page","limit","autoFetch","maxRetries","timeout","enableCache","ordersLength","length","selectedOrders","setSelectedOrders","useState","filtersRef","useRef","current","handleFilterChange","useCallback","key","currentFilters","updatedFilters","action","title","description","handlePageChange","newPage","handleSelectOrder","orderId","selected","orderIdStr","String","prev","filter","id","handleSelectAll","map","order","handleBulkAction","handleRefresh","memoizedData","useMemo","allSelected","someSelected","hasOrders","hasNextPage","hasPreviousPage","currentPage","totalPages","memoizedHandlers","onPageChange","onSelectOrder","onSelectAll","onRefresh","renderTable","RefreshCw","p","Error","message","toString","Package","Table","TableHeader","TableRow","TableHead","Checkbox","checked","onCheckedChange","TableBody","statusInfo","formatOrderStatus","paymentInfo","formatPaymentStatus","TableCell","includes","order_number","slice","user_profiles","name","email","Badge","color","label","total","toLocaleString","currency","Date","created_at","toLocaleDateString","DropdownMenu","DropdownMenuTrigger","asChild","MoreHorizontal","DropdownMenuContent","align","DropdownMenuItem","Eye","Edit","DropdownMenuSeparator","renderPagination","Math","min","disabled","ChevronLeft","ChevronRight","h2"],"mappings":"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"}