{"version":3,"names":["cov_i46hn4sbr","actualCoverage","s","OPTIONS","f","POST","runtime","checkoutValidationSchema","_zod","z","object","customerInfo","firstName","string","min","lastName","email","phone","shippingAddress","streetAddress","apartment","optional","city","state","zipCode","country","default","observations","items","array","id","name","price","number","positive","quantity","int","stock","nonnegative","paymentMethod","enum","shippingMethod","totals","subtotal","shipping","discount","total","request","securityLogger","_securitylogger","createSecurityLogger","rateLimitResult","_ratelimiter","withRateLimit","RATE_LIMIT_CONFIGS","checkout","logEvent","endpoint","method","userAgent","headers","get","timestamp","Date","toISOString","body","json","validatedData","parse","validationResults","isValid","errors","warnings","suggestions","item","simulatedStock","Math","floor","random","b","push","calculatedSubtotal","reduce","sum","abs","expectedShipping","calculateShippingCost","expectedTotal","startsWith","obs","toLowerCase","includes","console","log","customer","length","response","success","data","validation","estimatedDelivery","calculateEstimatedDelivery","recommendedActions","generateRecommendations","message","errorsCount","warningsCount","_server","NextResponse","status","error","Error","ZodError","details","map","err","field","path","join","logRateLimitExceeded","context","baseCost","stateSurcharge","now","daysToAdd","estimatedDate","getTime","split","recommendations"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\checkout\\validate\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// Schema de validación para checkout\r\nconst checkoutValidationSchema = z.object({\r\n  customerInfo: z.object({\r\n    firstName: z.string().min(1, 'Nombre es requerido'),\r\n    lastName: z.string().min(1, 'Apellido es requerido'),\r\n    email: z.string().email('Email inválido'),\r\n    phone: z.string().min(8, 'Teléfono debe tener al menos 8 dígitos'),\r\n  }),\r\n  shippingAddress: z.object({\r\n    streetAddress: z.string().min(5, 'Dirección debe tener al menos 5 caracteres'),\r\n    apartment: z.string().optional(),\r\n    city: z.string().min(2, 'Ciudad es requerida'),\r\n    state: z.string().min(2, 'Provincia es requerida'),\r\n    zipCode: z.string().min(4, 'Código postal inválido'),\r\n    country: z.string().default('Argentina'),\r\n    observations: z.string().optional(),\r\n  }),\r\n  items: z.array(z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    price: z.number().positive('Precio debe ser positivo'),\r\n    quantity: z.number().int().positive('Cantidad debe ser positiva'),\r\n    stock: z.number().int().nonnegative().optional(),\r\n  })).min(1, 'Debe haber al menos un producto'),\r\n  paymentMethod: z.enum(['mercadopago', 'bank', 'cash']),\r\n  shippingMethod: z.enum(['free', 'express', 'pickup']),\r\n  totals: z.object({\r\n    subtotal: z.number().nonnegative(),\r\n    shipping: z.number().nonnegative(),\r\n    discount: z.number().nonnegative().default(0),\r\n    total: z.number().positive('Total debe ser mayor a 0'),\r\n  }),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de checkout\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.checkout,\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.logEvent('api_access', 'low', {\r\n        endpoint: '/api/checkout/validate',\r\n        method: 'POST',\r\n        userAgent: request.headers.get('user-agent'),\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      try {\r\n        const body = await request.json();\r\n    \r\n    // Validar estructura básica\r\n    const validatedData = checkoutValidationSchema.parse(body);\r\n    \r\n    const validationResults = {\r\n      isValid: true,\r\n      errors: [] as string[],\r\n      warnings: [] as string[],\r\n      suggestions: [] as string[],\r\n    };\r\n    \r\n    // Validaciones adicionales de negocio\r\n    \r\n    // 1. Validar stock de productos (simulado)\r\n    for (const item of validatedData.items) {\r\n      const simulatedStock = Math.floor(Math.random() * 100) + 10; // Stock simulado\r\n      if (item.quantity > simulatedStock) {\r\n        validationResults.errors.push(\r\n          `Producto \"${item.name}\": Stock insuficiente (disponible: ${simulatedStock}, solicitado: ${item.quantity})`\r\n        );\r\n        validationResults.isValid = false;\r\n      }\r\n    }\r\n    \r\n    // 2. Validar totales\r\n    const calculatedSubtotal = validatedData.items.reduce(\r\n      (sum, item) => sum + (item.price * item.quantity), 0\r\n    );\r\n    \r\n    if (Math.abs(calculatedSubtotal - validatedData.totals.subtotal) > 0.01) {\r\n      validationResults.errors.push(\r\n        `Subtotal incorrecto. Calculado: $${calculatedSubtotal}, Recibido: $${validatedData.totals.subtotal}`\r\n      );\r\n      validationResults.isValid = false;\r\n    }\r\n    \r\n    // 3. Validar costo de envío\r\n    const expectedShipping = calculateShippingCost(\r\n      validatedData.shippingMethod,\r\n      validatedData.totals.subtotal,\r\n      validatedData.shippingAddress.state\r\n    );\r\n    \r\n    if (Math.abs(expectedShipping - validatedData.totals.shipping) > 0.01) {\r\n      validationResults.errors.push(\r\n        `Costo de envío incorrecto. Esperado: $${expectedShipping}, Recibido: $${validatedData.totals.shipping}`\r\n      );\r\n      validationResults.isValid = false;\r\n    }\r\n    \r\n    // 4. Validar total final\r\n    const expectedTotal = calculatedSubtotal + expectedShipping - validatedData.totals.discount;\r\n    if (Math.abs(expectedTotal - validatedData.totals.total) > 0.01) {\r\n      validationResults.errors.push(\r\n        `Total incorrecto. Esperado: $${expectedTotal}, Recibido: $${validatedData.totals.total}`\r\n      );\r\n      validationResults.isValid = false;\r\n    }\r\n    \r\n    // 5. Validaciones de dirección\r\n    if (validatedData.shippingAddress.state === 'CABA' && !validatedData.shippingAddress.zipCode.startsWith('C')) {\r\n      validationResults.warnings.push(\r\n        'El código postal no parece corresponder a CABA'\r\n      );\r\n    }\r\n    \r\n    // 6. Sugerencias basadas en observaciones\r\n    if (validatedData.shippingAddress.observations) {\r\n      const obs = validatedData.shippingAddress.observations.toLowerCase();\r\n      if (obs.includes('barrio') || obs.includes('zona')) {\r\n        validationResults.suggestions.push(\r\n          'Excelente! Las observaciones sobre el barrio ayudarán al delivery'\r\n        );\r\n      }\r\n      if (obs.includes('horario') || obs.includes('hora')) {\r\n        validationResults.suggestions.push(\r\n          'Perfecto! Los horarios especificados facilitarán la entrega'\r\n        );\r\n      }\r\n    } else {\r\n      validationResults.suggestions.push(\r\n        'Considera agregar observaciones sobre el barrio o horarios preferidos para mejorar la entrega'\r\n      );\r\n    }\r\n    \r\n    // 7. Validar método de pago\r\n    if (validatedData.paymentMethod === 'bank' && validatedData.totals.total < 10000) {\r\n      validationResults.warnings.push(\r\n        'Para montos menores a $10.000, recomendamos MercadoPago para mayor comodidad'\r\n      );\r\n    }\r\n    \r\n    // Log de validación\r\n    console.log('✅ Validación de checkout:', {\r\n      customer: `${validatedData.customerInfo.firstName} ${validatedData.customerInfo.lastName}`,\r\n      items: validatedData.items.length,\r\n      total: validatedData.totals.total,\r\n      isValid: validationResults.isValid,\r\n      errors: validationResults.errors.length,\r\n      warnings: validationResults.warnings.length,\r\n      observations: validatedData.shippingAddress.observations ? 'Sí' : 'No'\r\n    });\r\n    \r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        validation: validationResults,\r\n        estimatedDelivery: calculateEstimatedDelivery(validatedData.shippingMethod),\r\n        recommendedActions: generateRecommendations(validatedData, validationResults)\r\n      },\r\n      message: validationResults.isValid ? 'Checkout válido' : 'Checkout con errores'\r\n    };\r\n    \r\n        // Log de validación exitosa\r\n        securityLogger.logEvent('checkout_validation', 'low', {\r\n          isValid: validationResults.isValid,\r\n          errorsCount: validationResults.errors.length,\r\n          warningsCount: validationResults.warnings.length,\r\n          total: validatedData.totals.total,\r\n          paymentMethod: validatedData.paymentMethod\r\n        });\r\n\r\n        return NextResponse.json(response, {\r\n          status: validationResults.isValid ? 200 : 400\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('❌ Error validando checkout:', error);\r\n\r\n        // Log de error de seguridad\r\n        securityLogger.logEvent('checkout_validation_error', 'medium', {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n          endpoint: '/api/checkout/validate'\r\n        });\r\n\r\n        if (error instanceof z.ZodError) {\r\n          return NextResponse.json({\r\n            success: false,\r\n            error: 'Datos de entrada inválidos',\r\n            details: error.errors.map(err => ({\r\n              field: err.path.join('.'),\r\n              message: err.message\r\n            }))\r\n          }, { status: 400 });\r\n        }\r\n\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Error interno del servidor'\r\n        }, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/checkout/validate', method: 'POST' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// Función auxiliar para calcular costo de envío\r\nfunction calculateShippingCost(method: string, subtotal: number, state: string): number {\r\n  if (method === 'pickup') {return 0;}\r\n  if (method === 'free' && subtotal >= 25000) {return 0;}\r\n  \r\n  const baseCost = method === 'express' ? 5000 : 2500;\r\n  \r\n  // Costo adicional por provincia\r\n  const stateSurcharge = state === 'CABA' ? 0 : 500;\r\n  \r\n  return baseCost + stateSurcharge;\r\n}\r\n\r\n// Función auxiliar para calcular fecha estimada de entrega\r\nfunction calculateEstimatedDelivery(shippingMethod: string): string {\r\n  const now = new Date();\r\n  let daysToAdd = 7;\r\n  \r\n  switch (shippingMethod) {\r\n    case 'express': daysToAdd = 2; break;\r\n    case 'free': daysToAdd = 7; break;\r\n    case 'pickup': daysToAdd = 1; break;\r\n  }\r\n  \r\n  const estimatedDate = new Date(now.getTime() + (daysToAdd * 24 * 60 * 60 * 1000));\r\n  return estimatedDate.toISOString().split('T')[0]; // Solo fecha\r\n}\r\n\r\n// Función auxiliar para generar recomendaciones\r\nfunction generateRecommendations(data: any, validation: any): string[] {\r\n  const recommendations = [];\r\n  \r\n  if (!validation.isValid) {\r\n    recommendations.push('Corrige los errores antes de continuar');\r\n  }\r\n  \r\n  if (data.totals.total > 50000) {\r\n    recommendations.push('Considera dividir la compra en múltiples órdenes para mayor seguridad');\r\n  }\r\n  \r\n  if (data.paymentMethod === 'cash' && data.totals.total > 30000) {\r\n    recommendations.push('Para montos altos, recomendamos pago digital por seguridad');\r\n  }\r\n  \r\n  if (!data.shippingAddress.observations) {\r\n    recommendations.push('Agrega observaciones para facilitar la entrega');\r\n  }\r\n  \r\n  return recommendations;\r\n}\r\n\r\n// Método OPTIONS para CORS\r\nexport async function OPTIONS() {\r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}