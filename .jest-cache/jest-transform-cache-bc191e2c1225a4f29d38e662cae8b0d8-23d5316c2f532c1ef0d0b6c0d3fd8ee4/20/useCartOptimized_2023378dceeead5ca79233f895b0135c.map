{"version":3,"names":["useCartOptimized","STORAGE_KEY","cov_kmmg4zt8k","s","MAX_QUANTITY_PER_ITEM","SAVE_DEBOUNCE_DEFAULT","options","b","f","enablePersistence","saveDebounceMs","enableUserSync","onCartChange","onItemAdded","onItemRemoved","dispatch","_store","useAppDispatch","user","isLoaded","_useAuth","useAuth","items","useAppSelector","_cartslice","selectCartItems","totalPrice","selectTotalPrice","totalQuantity","selectTotalQuantity","saveTimeoutRef","_react","useRef","lastSaveRef","summary","useMemo","totalItems","length","hasItems","isEmpty","averageItemPrice","addItem","useCallback","item","quantity","console","warn","cartItem","Math","min","addItemToCart","removeItem","itemId","removeItemFromCart","updateQuantity","updateItemQuantity","id","clearAllItems","clearCart","getItem","find","hasItem","some","getItemQuantity","saveToLocalStorage","cartItems","window","cartData","timestamp","Date","now","version","localStorage","setItem","JSON","stringify","error","loadFromLocalStorage","stored","parse","Array","isArray","saveCart","loadCart","hydrateCart","syncWithUser","temporaryItems","replaceCart","validateCart","every","name","price","getInvalidItems","filter","useEffect","currentCartString","current","clearTimeout","setTimeout","log","isLoading","isAuthenticated","userId"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\optimized\\useCartOptimized.ts"],"sourcesContent":["// ===================================\r\n// HOOK OPTIMIZADO: useCartOptimized\r\n// ===================================\r\n// Versión optimizada del hook de carrito con mejor performance,\r\n// type safety mejorado y gestión de estado más eficiente\r\n\r\nimport { useCallback, useMemo, useEffect, useRef } from 'react';\r\nimport { useAuth } from '@/hooks/useAuth';\r\nimport { useAppDispatch, useAppSelector } from '@/redux/store';\r\nimport { \r\n  selectCartItems, \r\n  selectTotalPrice,\r\n  selectTotalQuantity,\r\n  addItemToCart,\r\n  removeItemFromCart,\r\n  updateItemQuantity,\r\n  clearCart,\r\n  hydrateCart,\r\n  replaceCart,\r\n  CartItem\r\n} from '@/redux/features/cart-slice';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface CartItemWithMetadata extends CartItem {\r\n  addedAt: number;\r\n  lastModified: number;\r\n  isTemporary?: boolean;\r\n}\r\n\r\nexport interface CartSummary {\r\n  totalItems: number;\r\n  totalPrice: number;\r\n  totalQuantity: number;\r\n  hasItems: boolean;\r\n  isEmpty: boolean;\r\n  averageItemPrice: number;\r\n}\r\n\r\nexport interface UseCartOptimizedOptions {\r\n  /** Habilitar persistencia automática */\r\n  enablePersistence?: boolean;\r\n  /** Tiempo de debounce para guardado automático (ms) */\r\n  saveDebounceMs?: number;\r\n  /** Habilitar sincronización con usuario autenticado */\r\n  enableUserSync?: boolean;\r\n  /** Callback cuando el carrito cambia */\r\n  onCartChange?: (items: CartItem[], summary: CartSummary) => void;\r\n  /** Callback cuando se agrega un item */\r\n  onItemAdded?: (item: CartItem) => void;\r\n  /** Callback cuando se remueve un item */\r\n  onItemRemoved?: (itemId: string) => void;\r\n}\r\n\r\nexport interface UseCartOptimizedReturn {\r\n  // Estado del carrito\r\n  items: CartItem[];\r\n  summary: CartSummary;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  \r\n  // Estado de usuario\r\n  isAuthenticated: boolean;\r\n  userId: string | undefined;\r\n  \r\n  // Funciones de manipulación\r\n  addItem: (item: Omit<CartItem, 'quantity'>, quantity?: number) => void;\r\n  removeItem: (itemId: string) => void;\r\n  updateQuantity: (itemId: string, quantity: number) => void;\r\n  clearAllItems: () => void;\r\n  \r\n  // Funciones de utilidad\r\n  getItem: (itemId: string) => CartItem | undefined;\r\n  hasItem: (itemId: string) => boolean;\r\n  getItemQuantity: (itemId: string) => number;\r\n  \r\n  // Funciones de persistencia\r\n  saveCart: () => Promise<void>;\r\n  loadCart: () => Promise<void>;\r\n  syncWithUser: () => Promise<void>;\r\n  \r\n  // Funciones de validación\r\n  validateCart: () => boolean;\r\n  getInvalidItems: () => CartItem[];\r\n}\r\n\r\n// ===================================\r\n// CONSTANTES\r\n// ===================================\r\n\r\nconst STORAGE_KEY = 'pinteya_cart';\r\nconst MAX_QUANTITY_PER_ITEM = 99;\r\nconst SAVE_DEBOUNCE_DEFAULT = 1000;\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL OPTIMIZADO\r\n// ===================================\r\n\r\nexport function useCartOptimized(\r\n  options: UseCartOptimizedOptions = {}\r\n): UseCartOptimizedReturn {\r\n  \r\n  const {\r\n    enablePersistence = true,\r\n    saveDebounceMs = SAVE_DEBOUNCE_DEFAULT,\r\n    enableUserSync = true,\r\n    onCartChange,\r\n    onItemAdded,\r\n    onItemRemoved,\r\n  } = options;\r\n\r\n  // ===================================\r\n  // ESTADO Y SELECTORES OPTIMIZADOS\r\n  // ===================================\r\n\r\n  const dispatch = useAppDispatch();\r\n  const { user, isLoaded } = useAuth();\r\n  \r\n  // Selectores memoizados para mejor performance\r\n  const items = useAppSelector(selectCartItems);\r\n  const totalPrice = useAppSelector(selectTotalPrice);\r\n  const totalQuantity = useAppSelector(selectTotalQuantity);\r\n\r\n  // Referencias para optimización\r\n  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const lastSaveRef = useRef<string>('');\r\n\r\n  // ===================================\r\n  // RESUMEN DEL CARRITO MEMOIZADO\r\n  // ===================================\r\n\r\n  const summary = useMemo<CartSummary>(() => {\r\n    const totalItems = items.length;\r\n    const hasItems = totalItems > 0;\r\n    const isEmpty = !hasItems;\r\n    const averageItemPrice = hasItems ? totalPrice / totalQuantity : 0;\r\n\r\n    return {\r\n      totalItems,\r\n      totalPrice,\r\n      totalQuantity,\r\n      hasItems,\r\n      isEmpty,\r\n      averageItemPrice,\r\n    };\r\n  }, [items.length, totalPrice, totalQuantity]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE MANIPULACIÓN OPTIMIZADAS\r\n  // ===================================\r\n\r\n  const addItem = useCallback((\r\n    item: Omit<CartItem, 'quantity'>, \r\n    quantity: number = 1\r\n  ) => {\r\n    // Validaciones\r\n    if (quantity <= 0 || quantity > MAX_QUANTITY_PER_ITEM) {\r\n      console.warn(`Cantidad inválida: ${quantity}. Debe estar entre 1 y ${MAX_QUANTITY_PER_ITEM}`);\r\n      return;\r\n    }\r\n\r\n    const cartItem: CartItem = {\r\n      ...item,\r\n      quantity: Math.min(quantity, MAX_QUANTITY_PER_ITEM),\r\n    };\r\n\r\n    dispatch(addItemToCart(cartItem));\r\n    \r\n    // Callback optimizado\r\n    if (onItemAdded) {\r\n      onItemAdded(cartItem);\r\n    }\r\n  }, [dispatch, onItemAdded]);\r\n\r\n  const removeItem = useCallback((itemId: string) => {\r\n    dispatch(removeItemFromCart(itemId));\r\n    \r\n    // Callback optimizado\r\n    if (onItemRemoved) {\r\n      onItemRemoved(itemId);\r\n    }\r\n  }, [dispatch, onItemRemoved]);\r\n\r\n  const updateQuantity = useCallback((itemId: string, quantity: number) => {\r\n    // Validaciones\r\n    if (quantity <= 0) {\r\n      removeItem(itemId);\r\n      return;\r\n    }\r\n\r\n    if (quantity > MAX_QUANTITY_PER_ITEM) {\r\n      quantity = MAX_QUANTITY_PER_ITEM;\r\n    }\r\n\r\n    dispatch(updateItemQuantity({ id: itemId, quantity }));\r\n  }, [dispatch, removeItem]);\r\n\r\n  const clearAllItems = useCallback(() => {\r\n    dispatch(clearCart());\r\n  }, [dispatch]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE UTILIDAD OPTIMIZADAS\r\n  // ===================================\r\n\r\n  const getItem = useCallback((itemId: string): CartItem | undefined => {\r\n    return items.find(item => item.id === itemId);\r\n  }, [items]);\r\n\r\n  const hasItem = useCallback((itemId: string): boolean => {\r\n    return items.some(item => item.id === itemId);\r\n  }, [items]);\r\n\r\n  const getItemQuantity = useCallback((itemId: string): number => {\r\n    const item = getItem(itemId);\r\n    return item?.quantity || 0;\r\n  }, [getItem]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE PERSISTENCIA OPTIMIZADAS\r\n  // ===================================\r\n\r\n  const saveToLocalStorage = useCallback((cartItems: CartItem[]) => {\r\n    if (!enablePersistence || typeof window === 'undefined') {return;}\r\n    \r\n    try {\r\n      const cartData = {\r\n        items: cartItems,\r\n        timestamp: Date.now(),\r\n        version: '1.0',\r\n      };\r\n      \r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(cartData));\r\n    } catch (error) {\r\n      console.error('Error guardando carrito en localStorage:', error);\r\n    }\r\n  }, [enablePersistence]);\r\n\r\n  const loadFromLocalStorage = useCallback((): CartItem[] => {\r\n    if (!enablePersistence || typeof window === 'undefined') {return [];}\r\n    \r\n    try {\r\n      const stored = localStorage.getItem(STORAGE_KEY);\r\n      if (!stored) {return [];}\r\n      \r\n      const cartData = JSON.parse(stored);\r\n      \r\n      // Validar estructura de datos\r\n      if (cartData.items && Array.isArray(cartData.items)) {\r\n        return cartData.items;\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error cargando carrito desde localStorage:', error);\r\n      return [];\r\n    }\r\n  }, [enablePersistence]);\r\n\r\n  const saveCart = useCallback(async () => {\r\n    if (!enablePersistence) {return;}\r\n    \r\n    // Guardar en localStorage\r\n    saveToLocalStorage(items);\r\n    \r\n    // Si hay usuario autenticado, guardar en backend (implementación futura)\r\n    if (enableUserSync && user?.id) {\r\n      try {\r\n        // Aquí se implementaría la llamada al backend\r\n        // await saveUserCart(user.id, items);\r\n      } catch (error) {\r\n        console.error('Error guardando carrito del usuario:', error);\r\n      }\r\n    }\r\n  }, [items, enablePersistence, enableUserSync, user?.id, saveToLocalStorage]);\r\n\r\n  const loadCart = useCallback(async () => {\r\n    if (!enablePersistence) {return;}\r\n    \r\n    try {\r\n      let cartItems: CartItem[] = [];\r\n      \r\n      // Si hay usuario autenticado, cargar desde backend\r\n      if (enableUserSync && user?.id) {\r\n        try {\r\n          // Aquí se implementaría la llamada al backend\r\n          // cartItems = await loadUserCart(user.id);\r\n        } catch (error) {\r\n          console.error('Error cargando carrito del usuario:', error);\r\n        }\r\n      }\r\n      \r\n      // Si no hay items del usuario, cargar desde localStorage\r\n      if (cartItems.length === 0) {\r\n        cartItems = loadFromLocalStorage();\r\n      }\r\n      \r\n      if (cartItems.length > 0) {\r\n        dispatch(hydrateCart(cartItems));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cargando carrito:', error);\r\n    }\r\n  }, [enablePersistence, enableUserSync, user?.id, loadFromLocalStorage, dispatch]);\r\n\r\n  const syncWithUser = useCallback(async () => {\r\n    if (!enableUserSync || !user?.id) {return;}\r\n    \r\n    try {\r\n      // Migrar carrito temporal a usuario autenticado\r\n      const temporaryItems = loadFromLocalStorage();\r\n      \r\n      if (temporaryItems.length > 0) {\r\n        // Combinar con items existentes del usuario\r\n        // Aquí se implementaría la lógica de merge\r\n        dispatch(replaceCart(temporaryItems));\r\n        \r\n        // Limpiar localStorage después de migración\r\n        localStorage.removeItem(STORAGE_KEY);\r\n      }\r\n      \r\n      // Cargar carrito del usuario\r\n      await loadCart();\r\n    } catch (error) {\r\n      console.error('Error sincronizando carrito con usuario:', error);\r\n    }\r\n  }, [enableUserSync, user?.id, loadFromLocalStorage, dispatch, loadCart]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE VALIDACIÓN\r\n  // ===================================\r\n\r\n  const validateCart = useCallback((): boolean => {\r\n    return items.every(item => \r\n      item.id && \r\n      item.name && \r\n      item.price > 0 && \r\n      item.quantity > 0 && \r\n      item.quantity <= MAX_QUANTITY_PER_ITEM\r\n    );\r\n  }, [items]);\r\n\r\n  const getInvalidItems = useCallback((): CartItem[] => {\r\n    return items.filter(item => \r\n      !item.id || \r\n      !item.name || \r\n      item.price <= 0 || \r\n      item.quantity <= 0 || \r\n      item.quantity > MAX_QUANTITY_PER_ITEM\r\n    );\r\n  }, [items]);\r\n\r\n  // ===================================\r\n  // EFECTOS OPTIMIZADOS\r\n  // ===================================\r\n\r\n  // Efecto para guardado automático con debounce\r\n  useEffect(() => {\r\n    if (!enablePersistence) {return;}\r\n    \r\n    const currentCartString = JSON.stringify(items);\r\n    \r\n    // Evitar guardados innecesarios\r\n    if (currentCartString === lastSaveRef.current) {return;}\r\n    \r\n    lastSaveRef.current = currentCartString;\r\n    \r\n    // Limpiar timeout anterior\r\n    if (saveTimeoutRef.current) {\r\n      clearTimeout(saveTimeoutRef.current);\r\n    }\r\n    \r\n    // Programar guardado con debounce\r\n    saveTimeoutRef.current = setTimeout(() => {\r\n      saveCart();\r\n    }, saveDebounceMs);\r\n    \r\n    return () => {\r\n      if (saveTimeoutRef.current) {\r\n        clearTimeout(saveTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [items, enablePersistence, saveDebounceMs, saveCart]);\r\n\r\n  // Efecto para callback de cambios\r\n  useEffect(() => {\r\n    if (onCartChange) {\r\n      onCartChange(items, summary);\r\n    }\r\n  }, [items, summary, onCartChange]);\r\n\r\n  // Efecto para carga inicial\r\n  useEffect(() => {\r\n    if (isLoaded && !user) {\r\n      // Usuario no autenticado - cargar desde localStorage\r\n      loadCart();\r\n    }\r\n  }, [isLoaded, user, loadCart]);\r\n\r\n  // Efecto para sincronización con usuario\r\n  useEffect(() => {\r\n    console.log('[useCartOptimized] 🚫 SYNC WITH USER TEMPORALMENTE DESHABILITADO PARA EVITAR RECURSIÓN');\r\n    \r\n\r\n    // CÓDIGO COMENTADO TEMPORALMENTE\r\n    // if (isLoaded && user && enableUserSync) {\r\n    //   syncWithUser();\r\n    // }\r\n  }, [isLoaded, user, enableUserSync, syncWithUser]);\r\n\r\n  // ===================================\r\n  // RETURN OPTIMIZADO\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado del carrito\r\n    items,\r\n    summary,\r\n    isLoading: !isLoaded,\r\n    error: null,\r\n    \r\n    // Estado de usuario\r\n    isAuthenticated: !!user,\r\n    userId: user?.id,\r\n    \r\n    // Funciones de manipulación\r\n    addItem,\r\n    removeItem,\r\n    updateQuantity,\r\n    clearAllItems,\r\n    \r\n    // Funciones de utilidad\r\n    getItem,\r\n    hasItem,\r\n    getItemQuantity,\r\n    \r\n    // Funciones de persistencia\r\n    saveCart,\r\n    loadCart,\r\n    syncWithUser,\r\n    \r\n    // Funciones de validación\r\n    validateCart,\r\n    getInvalidItems,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAgGgB;;;;;;WAA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","ignoreList":[]}