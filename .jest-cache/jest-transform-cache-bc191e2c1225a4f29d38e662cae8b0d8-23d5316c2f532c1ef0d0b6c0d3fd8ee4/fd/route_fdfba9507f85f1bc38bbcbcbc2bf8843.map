{"version":3,"names":["cov_zjzdeo6qj","actualCoverage","s","DELETE","f","POST","runtime","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","supabaseStorage","_supabasejs","createClient","ALLOWED_TYPES","MAX_FILE_SIZE","AVATAR_BUCKET","request","session","_config","auth","user","b","_server","NextResponse","json","success","error","status","userId","id","formData","file","get","includes","type","size","fileExtension","name","split","pop","fileName","Date","now","filePath","arrayBuffer","buffer","Uint8Array","data","userData","_supabase","supabaseAdmin","from","select","eq","single","avatar_url","oldPath","slice","join","storage","remove","uploadData","uploadError","upload","contentType","upsert","console","urlData","getPublicUrl","avatarUrl","publicUrl","updatedUser","updateError","update","updated_at","toISOString","message","userError","avatarPath","deleteError"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\avatar\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE AVATAR DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Configuración de Supabase Storage\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\nconst supabaseStorage = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\n// Configuración de archivos\r\nconst ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\r\nconst AVATAR_BUCKET = 'avatars';\r\n\r\n// ===================================\r\n// POST - Subir avatar\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    // Obtener archivo del FormData\r\n    const formData = await request.formData();\r\n    const file = formData.get('avatar') as File;\r\n\r\n    if (!file) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No se proporcionó ningún archivo' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar tipo de archivo\r\n    if (!ALLOWED_TYPES.includes(file.type)) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Tipo de archivo no permitido. Solo se permiten imágenes JPG, PNG y WebP.' \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar tamaño\r\n    if (file.size > MAX_FILE_SIZE) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'El archivo es demasiado grande. El tamaño máximo es 5MB.' \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Generar nombre único para el archivo\r\n    const fileExtension = file.name.split('.').pop();\r\n    const fileName = `${userId}-${Date.now()}.${fileExtension}`;\r\n    const filePath = `avatars/${fileName}`;\r\n\r\n    // Convertir archivo a ArrayBuffer\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const buffer = new Uint8Array(arrayBuffer);\r\n\r\n    // Eliminar avatar anterior si existe\r\n    const { data: userData } = await supabaseAdmin\r\n      .from('users')\r\n      .select('avatar_url')\r\n      .eq('clerk_id', userId)\r\n      .single();\r\n\r\n    if (userData?.avatar_url) {\r\n      // Extraer el path del avatar anterior\r\n      const oldPath = userData.avatar_url.split('/').slice(-2).join('/');\r\n      await supabaseStorage.storage\r\n        .from(AVATAR_BUCKET)\r\n        .remove([oldPath]);\r\n    }\r\n\r\n    // Subir nuevo archivo a Supabase Storage\r\n    const { data: uploadData, error: uploadError } = await supabaseStorage.storage\r\n      .from(AVATAR_BUCKET)\r\n      .upload(filePath, buffer, {\r\n        contentType: file.type,\r\n        upsert: true,\r\n      });\r\n\r\n    if (uploadError) {\r\n      console.error('Error al subir archivo:', uploadError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al subir el archivo' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener URL pública del archivo\r\n    const { data: urlData } = supabaseStorage.storage\r\n      .from(AVATAR_BUCKET)\r\n      .getPublicUrl(filePath);\r\n\r\n    const avatarUrl = urlData.publicUrl;\r\n\r\n    // Actualizar URL del avatar en la base de datos\r\n    const { data: updatedUser, error: updateError } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        avatar_url: avatarUrl,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('clerk_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error al actualizar usuario:', updateError);\r\n      // Intentar eliminar el archivo subido si falla la actualización\r\n      await supabaseStorage.storage\r\n        .from(AVATAR_BUCKET)\r\n        .remove([filePath]);\r\n      \r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al actualizar el perfil' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      avatar_url: avatarUrl,\r\n      user: updatedUser,\r\n      message: 'Avatar subido correctamente',\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en POST /api/user/avatar:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Eliminar avatar\r\n// ===================================\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    // Obtener datos del usuario\r\n    const { data: userData, error: userError } = await supabaseAdmin\r\n      .from('users')\r\n      .select('avatar_url')\r\n      .eq('clerk_id', userId)\r\n      .single();\r\n\r\n    if (userError) {\r\n      console.error('Error al obtener usuario:', userError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al obtener datos del usuario' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (!userData?.avatar_url) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No hay avatar para eliminar' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Extraer el path del archivo del avatar\r\n    const avatarPath = userData.avatar_url.split('/').slice(-2).join('/');\r\n\r\n    // Eliminar archivo de Supabase Storage\r\n    const { error: deleteError } = await supabaseStorage.storage\r\n      .from(AVATAR_BUCKET)\r\n      .remove([avatarPath]);\r\n\r\n    if (deleteError) {\r\n      console.error('Error al eliminar archivo:', deleteError);\r\n      // Continuar con la actualización de la base de datos aunque falle la eliminación del archivo\r\n    }\r\n\r\n    // Actualizar base de datos para remover la URL del avatar\r\n    const { data: updatedUser, error: updateError } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        avatar_url: null,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('clerk_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error al actualizar usuario:', updateError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al actualizar el perfil' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: updatedUser,\r\n      message: 'Avatar eliminado correctamente',\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/user/avatar:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBsB;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAwIAC,OAAA;IAAA;IAAAH,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAC,MAAA;;MAxIAE,KAAA;IAAA;IAAAL,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAG,IAAA;;MAxBTC,QAAA;IAAA;IAAAN,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAI,OAAA;;;;;iCAM6B;;;iCACZ;;;iCACT;;;kCACQ;AATtB,MAAMA,OAAA;AAAA;AAAA,CAAAN,aAAA,GAAAE,CAAA,QAAU;AAWvB;AACA,MAAMK,WAAA;AAAA;AAAA,CAAAP,aAAA,GAAAE,CAAA,QAAcM,OAAA,CAAQC,GAAG,CAACC,wBAAwB;AACxD,MAAMC,kBAAA;AAAA;AAAA,CAAAX,aAAA,GAAAE,CAAA,QAAqBM,OAAA,CAAQC,GAAG,CAACG,yBAAyB;AAChE,MAAMC,eAAA;AAAA;AAAA,CAAAb,aAAA,GAAAE,CAAA,QAAkB,IAAAY,WAAA,CAAAC,YAAY,EAACR,WAAA,EAAaI,kBAAA;AAElD;AACA,MAAMK,aAAA;AAAA;AAAA,CAAAhB,aAAA,GAAAE,CAAA,QAAgB,CAAC,cAAc,aAAa,aAAa,aAAa;AAC5E,MAAMe,aAAA;AAAA;AAAA,CAAAjB,aAAA,GAAAE,CAAA,QAAgB,IAAI,OAAO,OAAM;AACvC,MAAMgB,aAAA;AAAA;AAAA,CAAAlB,aAAA,GAAAE,CAAA,QAAgB;AAKf,eAAeG,KAAKc,OAAoB;EAAA;EAAAnB,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC7C,IAAI;IACF;IACA,MAAMkB,OAAA;IAAA;IAAA,CAAApB,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAAmB,OAAA,CAAAC,IAAI;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACkB,OAAA,EAASG,IAAA,EAAM;MAAA;MAAAvB,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MAClB,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAyB,GAClD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAEA,MAAMO,MAAA;IAAA;IAAA,CAAA/B,aAAA,GAAAE,CAAA,QAASkB,OAAA,CAAQG,IAAI,CAACS,EAAE;IAE9B;IACA,MAAMC,QAAA;IAAA;IAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAW,MAAMiB,OAAA,CAAQc,QAAQ;IACvC,MAAMC,IAAA;IAAA;IAAA,CAAAlC,aAAA,GAAAE,CAAA,QAAO+B,QAAA,CAASE,GAAG,CAAC;IAAA;IAAAnC,aAAA,GAAAE,CAAA;IAE1B,IAAI,CAACgC,IAAA,EAAM;MAAA;MAAAlC,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACT,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAmC,GAC5D;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAEA;IAAAxB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACc,aAAA,CAAcoB,QAAQ,CAACF,IAAA,CAAKG,IAAI,GAAG;MAAA;MAAArC,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACtC,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,OAAA,EAAS;QACTC,KAAA,EAAO;MACT,GACA;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAEA;IAAAxB,aAAA,GAAAE,CAAA;IACA,IAAIgC,IAAA,CAAKI,IAAI,GAAGrB,aAAA,EAAe;MAAA;MAAAjB,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MAC7B,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,OAAA,EAAS;QACTC,KAAA,EAAO;MACT,GACA;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAEA;IACA,MAAMe,aAAA;IAAA;IAAA,CAAAvC,aAAA,GAAAE,CAAA,QAAgBgC,IAAA,CAAKM,IAAI,CAACC,KAAK,CAAC,KAAKC,GAAG;IAC9C,MAAMC,QAAA;IAAA;IAAA,CAAA3C,aAAA,GAAAE,CAAA,QAAW,GAAG6B,MAAA,IAAUa,IAAA,CAAKC,GAAG,MAAMN,aAAA,EAAe;IAC3D,MAAMO,QAAA;IAAA;IAAA,CAAA9C,aAAA,GAAAE,CAAA,QAAW,WAAWyC,QAAA,EAAU;IAEtC;IACA,MAAMI,WAAA;IAAA;IAAA,CAAA/C,aAAA,GAAAE,CAAA,QAAc,MAAMgC,IAAA,CAAKa,WAAW;IAC1C,MAAMC,MAAA;IAAA;IAAA,CAAAhD,aAAA,GAAAE,CAAA,QAAS,IAAI+C,UAAA,CAAWF,WAAA;IAE9B;IACA,MAAM;MAAEG,IAAA,EAAMC;IAAQ,CAAE;IAAA;IAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAG,MAAMkD,SAAA,CAAAC,aAAa,CAC3CC,IAAI,CAAC,SACLC,MAAM,CAAC,cACPC,EAAE,CAAC,YAAYzB,MAAA,EACf0B,MAAM;IAAA;IAAAzD,aAAA,GAAAE,CAAA;IAET,IAAIiD,QAAA,EAAUO,UAAA,EAAY;MAAA;MAAA1D,aAAA,GAAAwB,CAAA;MACxB;MACA,MAAMmC,OAAA;MAAA;MAAA,CAAA3D,aAAA,GAAAE,CAAA,QAAUiD,QAAA,CAASO,UAAU,CAACjB,KAAK,CAAC,KAAKmB,KAAK,CAAC,CAAC,GAAGC,IAAI,CAAC;MAAA;MAAA7D,aAAA,GAAAE,CAAA;MAC9D,MAAMW,eAAA,CAAgBiD,OAAO,CAC1BR,IAAI,CAACpC,aAAA,EACL6C,MAAM,CAAC,CAACJ,OAAA,CAAQ;IACrB;IAAA;IAAA;MAAA3D,aAAA,GAAAwB,CAAA;IAAA;IAEA;IACA,MAAM;MAAE0B,IAAA,EAAMc,UAAU;MAAEnC,KAAA,EAAOoC;IAAW,CAAE;IAAA;IAAA,CAAAjE,aAAA,GAAAE,CAAA,QAAG,MAAMW,eAAA,CAAgBiD,OAAO,CAC3ER,IAAI,CAACpC,aAAA,EACLgD,MAAM,CAACpB,QAAA,EAAUE,MAAA,EAAQ;MACxBmB,WAAA,EAAajC,IAAA,CAAKG,IAAI;MACtB+B,MAAA,EAAQ;IACV;IAAA;IAAApE,aAAA,GAAAE,CAAA;IAEF,IAAI+D,WAAA,EAAa;MAAA;MAAAjE,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACfmE,OAAA,CAAQxC,KAAK,CAAC,2BAA2BoC,WAAA;MAAA;MAAAjE,aAAA,GAAAE,CAAA;MACzC,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAA4B,GACrD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAEA;IACA,MAAM;MAAE0B,IAAA,EAAMoB;IAAO,CAAE;IAAA;IAAA,CAAAtE,aAAA,GAAAE,CAAA,QAAGW,eAAA,CAAgBiD,OAAO,CAC9CR,IAAI,CAACpC,aAAA,EACLqD,YAAY,CAACzB,QAAA;IAEhB,MAAM0B,SAAA;IAAA;IAAA,CAAAxE,aAAA,GAAAE,CAAA,QAAYoE,OAAA,CAAQG,SAAS;IAEnC;IACA,MAAM;MAAEvB,IAAA,EAAMwB,WAAW;MAAE7C,KAAA,EAAO8C;IAAW,CAAE;IAAA;IAAA,CAAA3E,aAAA,GAAAE,CAAA,QAAG,MAAMkD,SAAA,CAAAC,aAAa,CAClEC,IAAI,CAAC,SACLsB,MAAM,CAAC;MACNlB,UAAA,EAAYc,SAAA;MACZK,UAAA,EAAY,IAAIjC,IAAA,GAAOkC,WAAW;IACpC,GACCtB,EAAE,CAAC,YAAYzB,MAAA,EACfwB,MAAM,GACNE,MAAM;IAAA;IAAAzD,aAAA,GAAAE,CAAA;IAET,IAAIyE,WAAA,EAAa;MAAA;MAAA3E,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACfmE,OAAA,CAAQxC,KAAK,CAAC,gCAAgC8C,WAAA;MAC9C;MAAA;MAAA3E,aAAA,GAAAE,CAAA;MACA,MAAMW,eAAA,CAAgBiD,OAAO,CAC1BR,IAAI,CAACpC,aAAA,EACL6C,MAAM,CAAC,CAACjB,QAAA,CAAS;MAAA;MAAA9C,aAAA,GAAAE,CAAA;MAEpB,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAgC,GACzD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IAEA,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBC,OAAA,EAAS;MACT8B,UAAA,EAAYc,SAAA;MACZjD,IAAA,EAAMmD,WAAA;MACNK,OAAA,EAAS;IACX;EAEF,EAAE,OAAOlD,KAAA,EAAO;IAAA;IAAA7B,aAAA,GAAAE,CAAA;IACdmE,OAAA,CAAQxC,KAAK,CAAC,mCAAmCA,KAAA;IAAA;IAAA7B,aAAA,GAAAE,CAAA;IACjD,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,OAAA,EAAS;MAAOC,KAAA,EAAO;IAA6B,GACtD;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF;AAKO,eAAe3B,OAAOgB,OAAoB;EAAA;EAAAnB,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC/C,IAAI;IACF;IACA,MAAMkB,OAAA;IAAA;IAAA,CAAApB,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAAmB,OAAA,CAAAC,IAAI;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACkB,OAAA,EAASG,IAAA,EAAM;MAAA;MAAAvB,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MAClB,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAyB,GAClD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAEA,MAAMO,MAAA;IAAA;IAAA,CAAA/B,aAAA,GAAAE,CAAA,QAASkB,OAAA,CAAQG,IAAI,CAACS,EAAE;IAE9B;IACA,MAAM;MAAEkB,IAAA,EAAMC,QAAQ;MAAEtB,KAAA,EAAOmD;IAAS,CAAE;IAAA;IAAA,CAAAhF,aAAA,GAAAE,CAAA,QAAG,MAAMkD,SAAA,CAAAC,aAAa,CAC7DC,IAAI,CAAC,SACLC,MAAM,CAAC,cACPC,EAAE,CAAC,YAAYzB,MAAA,EACf0B,MAAM;IAAA;IAAAzD,aAAA,GAAAE,CAAA;IAET,IAAI8E,SAAA,EAAW;MAAA;MAAAhF,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACbmE,OAAA,CAAQxC,KAAK,CAAC,6BAA6BmD,SAAA;MAAA;MAAAhF,aAAA,GAAAE,CAAA;MAC3C,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAqC,GAC9D;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IAEA,IAAI,CAACiD,QAAA,EAAUO,UAAA,EAAY;MAAA;MAAA1D,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACzB,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAA8B,GACvD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAEA;IACA,MAAMyD,UAAA;IAAA;IAAA,CAAAjF,aAAA,GAAAE,CAAA,QAAaiD,QAAA,CAASO,UAAU,CAACjB,KAAK,CAAC,KAAKmB,KAAK,CAAC,CAAC,GAAGC,IAAI,CAAC;IAEjE;IACA,MAAM;MAAEhC,KAAA,EAAOqD;IAAW,CAAE;IAAA;IAAA,CAAAlF,aAAA,GAAAE,CAAA,QAAG,MAAMW,eAAA,CAAgBiD,OAAO,CACzDR,IAAI,CAACpC,aAAA,EACL6C,MAAM,CAAC,CAACkB,UAAA,CAAW;IAAA;IAAAjF,aAAA,GAAAE,CAAA;IAEtB,IAAIgF,WAAA,EAAa;MAAA;MAAAlF,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACfmE,OAAA,CAAQxC,KAAK,CAAC,8BAA8BqD,WAAA;MAC5C;IACF;IAAA;IAAA;MAAAlF,aAAA,GAAAwB,CAAA;IAAA;IAEA;IACA,MAAM;MAAE0B,IAAA,EAAMwB,WAAW;MAAE7C,KAAA,EAAO8C;IAAW,CAAE;IAAA;IAAA,CAAA3E,aAAA,GAAAE,CAAA,QAAG,MAAMkD,SAAA,CAAAC,aAAa,CAClEC,IAAI,CAAC,SACLsB,MAAM,CAAC;MACNlB,UAAA,EAAY;MACZmB,UAAA,EAAY,IAAIjC,IAAA,GAAOkC,WAAW;IACpC,GACCtB,EAAE,CAAC,YAAYzB,MAAA,EACfwB,MAAM,GACNE,MAAM;IAAA;IAAAzD,aAAA,GAAAE,CAAA;IAET,IAAIyE,WAAA,EAAa;MAAA;MAAA3E,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACfmE,OAAA,CAAQxC,KAAK,CAAC,gCAAgC8C,WAAA;MAAA;MAAA3E,aAAA,GAAAE,CAAA;MAC9C,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAgC,GACzD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA9B,aAAA,GAAAwB,CAAA;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IAEA,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBC,OAAA,EAAS;MACTL,IAAA,EAAMmD,WAAA;MACNK,OAAA,EAAS;IACX;EAEF,EAAE,OAAOlD,KAAA,EAAO;IAAA;IAAA7B,aAAA,GAAAE,CAAA;IACdmE,OAAA,CAAQxC,KAAK,CAAC,qCAAqCA,KAAA;IAAA;IAAA7B,aAAA,GAAAE,CAAA;IACnD,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,OAAA,EAAS;MAAOC,KAAA,EAAO;IAA6B,GACtD;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}