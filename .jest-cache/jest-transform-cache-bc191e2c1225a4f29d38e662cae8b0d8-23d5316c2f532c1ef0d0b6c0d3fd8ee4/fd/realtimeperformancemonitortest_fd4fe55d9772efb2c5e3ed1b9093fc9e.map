{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\monitoring\\real-time-performance-monitor.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS - REAL-TIME PERFORMANCE MONITOR\r\n// ===================================\r\n\r\nimport { \r\n  RealTimePerformanceMonitor,\r\n  realTimePerformanceMonitor,\r\n  RealTimeMonitoringUtils,\r\n  DEFAULT_THRESHOLDS\r\n} from '@/lib/monitoring/real-time-performance-monitor';\r\n\r\n// Mock Redis\r\njest.mock('@/lib/redis', () => ({\r\n  getRedisClient: () => ({\r\n    setex: jest.fn().mockResolvedValue('OK'),\r\n    get: jest.fn().mockResolvedValue(null),\r\n    del: jest.fn().mockResolvedValue(1)\r\n  })\r\n}));\r\n\r\n// Mock logger\r\njest.mock('@/lib/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  },\r\n  LogCategory: {\r\n    MONITORING: 'monitoring'\r\n  }\r\n}));\r\n\r\ndescribe('RealTimePerformanceMonitor', () => {\r\n  let monitor: RealTimePerformanceMonitor;\r\n\r\n  beforeEach(() => {\r\n    monitor = RealTimePerformanceMonitor.getInstance();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    monitor.destroy();\r\n  });\r\n\r\n  describe('Singleton Pattern', () => {\r\n    it('should return the same instance', () => {\r\n      const instance1 = RealTimePerformanceMonitor.getInstance();\r\n      const instance2 = RealTimePerformanceMonitor.getInstance();\r\n      \r\n      expect(instance1).toBe(instance2);\r\n    });\r\n  });\r\n\r\n  describe('Web Vitals Recording', () => {\r\n    it('should record web vitals correctly', () => {\r\n      const vitals = {\r\n        lcp: 2300,\r\n        fid: 85,\r\n        cls: 0.08,\r\n        fcp: 1600,\r\n        ttfb: 650,\r\n        inp: 120\r\n      };\r\n\r\n      monitor.recordWebVitals(vitals);\r\n\r\n      const metrics = monitor.getCurrentMetrics();\r\n      expect(metrics.webVitals).toHaveLength(1);\r\n      \r\n      const recordedVitals = metrics.webVitals[0];\r\n      expect(recordedVitals.lcp).toBe(2300);\r\n      expect(recordedVitals.fid).toBe(85);\r\n      expect(recordedVitals.cls).toBe(0.08);\r\n      expect(recordedVitals.timestamp).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should maintain buffer size limit for web vitals', () => {\r\n      // Agregar más de 50 métricas (límite del buffer)\r\n      for (let i = 0; i < 60; i++) {\r\n        monitor.recordWebVitals({\r\n          lcp: 2000 + i,\r\n          fid: 80 + i,\r\n          cls: 0.05 + (i * 0.001),\r\n          fcp: 1500 + i,\r\n          ttfb: 600 + i,\r\n          inp: 100 + i\r\n        });\r\n      }\r\n\r\n      const metrics = monitor.getCurrentMetrics();\r\n      expect(metrics.webVitals).toHaveLength(50); // Máximo 50\r\n      \r\n      // Debería mantener las más recientes\r\n      const latestVitals = metrics.webVitals[metrics.webVitals.length - 1];\r\n      expect(latestVitals.lcp).toBe(2059); // 2000 + 59\r\n    });\r\n\r\n    it('should check web vitals thresholds', () => {\r\n      // LCP pobre (>4000ms)\r\n      monitor.recordWebVitals({\r\n        lcp: 4500,\r\n        fid: 50,\r\n        cls: 0.05,\r\n        fcp: 1500,\r\n        ttfb: 600,\r\n        inp: 100\r\n      });\r\n\r\n      // Verificar que se llamó al logger para la alerta\r\n      expect(require('@/lib/logger').logger.warn).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('API Metrics Recording', () => {\r\n    it('should record API metrics correctly', () => {\r\n      const apiMetrics = {\r\n        endpoint: '/api/products',\r\n        method: 'GET',\r\n        responseTime: 450,\r\n        statusCode: 200,\r\n        requestSize: 1024,\r\n        responseSize: 8192,\r\n        userAgent: 'Mozilla/5.0...',\r\n        ip: '192.168.1.1'\r\n      };\r\n\r\n      monitor.recordAPIMetrics(apiMetrics);\r\n\r\n      const metrics = monitor.getCurrentMetrics();\r\n      expect(metrics.apiMetrics).toHaveLength(1);\r\n      \r\n      const recordedMetrics = metrics.apiMetrics[0];\r\n      expect(recordedMetrics.endpoint).toBe('/api/products');\r\n      expect(recordedMetrics.responseTime).toBe(450);\r\n      expect(recordedMetrics.statusCode).toBe(200);\r\n    });\r\n\r\n    it('should maintain buffer size limit for API metrics', () => {\r\n      // Agregar más de 200 métricas (límite del buffer)\r\n      for (let i = 0; i < 250; i++) {\r\n        monitor.recordAPIMetrics({\r\n          endpoint: `/api/test/${i}`,\r\n          method: 'GET',\r\n          responseTime: 400 + i,\r\n          statusCode: 200,\r\n          requestSize: 1024,\r\n          responseSize: 8192,\r\n          userAgent: 'Test Agent',\r\n          ip: '192.168.1.1'\r\n        });\r\n      }\r\n\r\n      const metrics = monitor.getCurrentMetrics();\r\n      expect(metrics.apiMetrics).toHaveLength(200); // Máximo 200\r\n    });\r\n\r\n    it('should check API thresholds', () => {\r\n      // Response time crítico\r\n      monitor.recordAPIMetrics({\r\n        endpoint: '/api/slow',\r\n        method: 'GET',\r\n        responseTime: 3500, // > 3000ms (crítico)\r\n        statusCode: 200,\r\n        requestSize: 1024,\r\n        responseSize: 8192,\r\n        userAgent: 'Test Agent',\r\n        ip: '192.168.1.1'\r\n      });\r\n\r\n      expect(require('@/lib/logger').logger.warn).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should check API error status codes', () => {\r\n      // Error 500\r\n      monitor.recordAPIMetrics({\r\n        endpoint: '/api/error',\r\n        method: 'POST',\r\n        responseTime: 200,\r\n        statusCode: 500,\r\n        requestSize: 1024,\r\n        responseSize: 512,\r\n        userAgent: 'Test Agent',\r\n        ip: '192.168.1.1'\r\n      });\r\n\r\n      expect(require('@/lib/logger').logger.warn).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Database Metrics Recording', () => {\r\n    it('should record database metrics correctly', () => {\r\n      const dbMetrics = {\r\n        queryTime: 150,\r\n        queryType: 'SELECT' as const,\r\n        tableName: 'products',\r\n        rowsAffected: 10,\r\n        connectionPoolSize: 20,\r\n        activeConnections: 5,\r\n        waitingConnections: 0\r\n      };\r\n\r\n      monitor.recordDatabaseMetrics(dbMetrics);\r\n\r\n      const metrics = monitor.getCurrentMetrics();\r\n      expect(metrics.dbMetrics).toHaveLength(1);\r\n      \r\n      const recordedMetrics = metrics.dbMetrics[0];\r\n      expect(recordedMetrics.queryTime).toBe(150);\r\n      expect(recordedMetrics.queryType).toBe('SELECT');\r\n      expect(recordedMetrics.tableName).toBe('products');\r\n    });\r\n\r\n    it('should check database thresholds', () => {\r\n      // Query lenta (>5000ms)\r\n      monitor.recordDatabaseMetrics({\r\n        queryTime: 6000,\r\n        queryType: 'SELECT',\r\n        tableName: 'large_table',\r\n        rowsAffected: 1000,\r\n        connectionPoolSize: 20,\r\n        activeConnections: 15,\r\n        waitingConnections: 5\r\n      });\r\n\r\n      expect(require('@/lib/logger').logger.warn).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should check connection pool issues', () => {\r\n      // Muchas conexiones esperando\r\n      monitor.recordDatabaseMetrics({\r\n        queryTime: 200,\r\n        queryType: 'INSERT',\r\n        tableName: 'orders',\r\n        rowsAffected: 1,\r\n        connectionPoolSize: 20,\r\n        activeConnections: 20,\r\n        waitingConnections: 15 // > 10 (umbral)\r\n      });\r\n\r\n      expect(require('@/lib/logger').logger.warn).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Threshold Management', () => {\r\n    it('should use default thresholds', () => {\r\n      expect(DEFAULT_THRESHOLDS.responseTime.warning).toBe(1000);\r\n      expect(DEFAULT_THRESHOLDS.responseTime.critical).toBe(3000);\r\n      expect(DEFAULT_THRESHOLDS.errorRate.warning).toBe(0.05);\r\n      expect(DEFAULT_THRESHOLDS.errorRate.critical).toBe(0.10);\r\n    });\r\n\r\n    it('should allow updating thresholds', () => {\r\n      const newThresholds = {\r\n        responseTime: {\r\n          warning: 500,\r\n          critical: 2000\r\n        }\r\n      };\r\n\r\n      monitor.updateThresholds(newThresholds);\r\n\r\n      // Verificar que se actualizaron\r\n      expect(require('@/lib/logger').logger.info).toHaveBeenCalledWith(\r\n        'monitoring',\r\n        'Performance thresholds updated'\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Alert Management', () => {\r\n    it('should resolve alerts', () => {\r\n      // Primero crear una alerta simulada\r\n      const alertId = 'test-alert-123';\r\n      \r\n      const resolved = monitor.resolveAlert(alertId);\r\n      \r\n      // Como no existe la alerta, debería retornar false\r\n      expect(resolved).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Subscription System', () => {\r\n    it('should allow subscribing to updates', () => {\r\n      const callback = jest.fn();\r\n      \r\n      const unsubscribe = monitor.subscribe(callback);\r\n      \r\n      // Registrar una métrica para disparar callback\r\n      monitor.recordWebVitals({\r\n        lcp: 2000,\r\n        fid: 80,\r\n        cls: 0.05,\r\n        fcp: 1500,\r\n        ttfb: 600,\r\n        inp: 100\r\n      });\r\n\r\n      // El callback debería haber sido llamado\r\n      expect(callback).toHaveBeenCalled();\r\n      \r\n      // Cleanup\r\n      unsubscribe();\r\n    });\r\n\r\n    it('should allow unsubscribing', () => {\r\n      const callback = jest.fn();\r\n      \r\n      const unsubscribe = monitor.subscribe(callback);\r\n      unsubscribe();\r\n      \r\n      // Registrar métrica después de unsubscribe\r\n      monitor.recordWebVitals({\r\n        lcp: 2000,\r\n        fid: 80,\r\n        cls: 0.05,\r\n        fcp: 1500,\r\n        ttfb: 600,\r\n        inp: 100\r\n      });\r\n\r\n      // El callback no debería ser llamado\r\n      expect(callback).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle subscription errors gracefully', () => {\r\n      const faultyCallback = jest.fn().mockImplementation(() => {\r\n        throw new Error('Callback error');\r\n      });\r\n      \r\n      monitor.subscribe(faultyCallback);\r\n      \r\n      // Esto no debería hacer que el sistema falle\r\n      expect(() => {\r\n        monitor.recordWebVitals({\r\n          lcp: 2000,\r\n          fid: 80,\r\n          cls: 0.05,\r\n          fcp: 1500,\r\n          ttfb: 600,\r\n          inp: 100\r\n        });\r\n      }).not.toThrow();\r\n      \r\n      expect(require('@/lib/logger').logger.error).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('getCurrentMetrics', () => {\r\n    it('should return current metrics structure', () => {\r\n      const metrics = monitor.getCurrentMetrics();\r\n      \r\n      expect(metrics).toHaveProperty('realTime');\r\n      expect(metrics).toHaveProperty('webVitals');\r\n      expect(metrics).toHaveProperty('apiMetrics');\r\n      expect(metrics).toHaveProperty('dbMetrics');\r\n      expect(metrics).toHaveProperty('alerts');\r\n      \r\n      expect(Array.isArray(metrics.realTime)).toBe(true);\r\n      expect(Array.isArray(metrics.webVitals)).toBe(true);\r\n      expect(Array.isArray(metrics.apiMetrics)).toBe(true);\r\n      expect(Array.isArray(metrics.dbMetrics)).toBe(true);\r\n      expect(Array.isArray(metrics.alerts)).toBe(true);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('RealTimeMonitoringUtils', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('recordWebVitals', () => {\r\n    it('should call monitor recordWebVitals', () => {\r\n      const vitals = {\r\n        lcp: 2000,\r\n        fid: 80,\r\n        cls: 0.05,\r\n        fcp: 1500,\r\n        ttfb: 600,\r\n        inp: 100\r\n      };\r\n\r\n      RealTimeMonitoringUtils.recordWebVitals(vitals);\r\n\r\n      // Verificar que se registraron las métricas\r\n      const metrics = realTimePerformanceMonitor.getCurrentMetrics();\r\n      expect(metrics.webVitals.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('recordAPICall', () => {\r\n    it('should call monitor recordAPIMetrics', () => {\r\n      const apiMetrics = {\r\n        endpoint: '/api/test',\r\n        method: 'GET',\r\n        responseTime: 300,\r\n        statusCode: 200,\r\n        requestSize: 1024,\r\n        responseSize: 2048,\r\n        userAgent: 'Test Agent',\r\n        ip: '192.168.1.1'\r\n      };\r\n\r\n      RealTimeMonitoringUtils.recordAPICall(apiMetrics);\r\n\r\n      const metrics = realTimePerformanceMonitor.getCurrentMetrics();\r\n      expect(metrics.apiMetrics.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('recordDatabaseQuery', () => {\r\n    it('should call monitor recordDatabaseMetrics', () => {\r\n      const dbMetrics = {\r\n        queryTime: 100,\r\n        queryType: 'SELECT' as const,\r\n        tableName: 'users',\r\n        rowsAffected: 5,\r\n        connectionPoolSize: 10,\r\n        activeConnections: 3,\r\n        waitingConnections: 0\r\n      };\r\n\r\n      RealTimeMonitoringUtils.recordDatabaseQuery(dbMetrics);\r\n\r\n      const metrics = realTimePerformanceMonitor.getCurrentMetrics();\r\n      expect(metrics.dbMetrics.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('getCurrentStatus', () => {\r\n    it('should return current status when no metrics', () => {\r\n      const status = RealTimeMonitoringUtils.getCurrentStatus();\r\n      \r\n      expect(status).toEqual({\r\n        healthy: false,\r\n        activeAlerts: 0,\r\n        avgResponseTime: 0,\r\n        errorRate: 0,\r\n        lastUpdate: 0\r\n      });\r\n    });\r\n\r\n    it('should return current status with metrics', () => {\r\n      // Agregar algunas métricas primero\r\n      RealTimeMonitoringUtils.recordAPICall({\r\n        endpoint: '/api/test',\r\n        method: 'GET',\r\n        responseTime: 200,\r\n        statusCode: 200,\r\n        requestSize: 1024,\r\n        responseSize: 2048,\r\n        userAgent: 'Test Agent',\r\n        ip: '192.168.1.1'\r\n      });\r\n\r\n      const status = RealTimeMonitoringUtils.getCurrentStatus();\r\n      \r\n      expect(status.healthy).toBe(true);\r\n      expect(status.activeAlerts).toBe(0);\r\n      expect(status.avgResponseTime).toBeGreaterThan(0);\r\n      expect(status.errorRate).toBe(0);\r\n      expect(status.lastUpdate).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should detect unhealthy status with high error rate', () => {\r\n      // Agregar métricas con errores\r\n      for (let i = 0; i < 10; i++) {\r\n        RealTimeMonitoringUtils.recordAPICall({\r\n          endpoint: '/api/error',\r\n          method: 'GET',\r\n          responseTime: 200,\r\n          statusCode: i < 6 ? 500 : 200, // 60% error rate\r\n          requestSize: 1024,\r\n          responseSize: 2048,\r\n          userAgent: 'Test Agent',\r\n          ip: '192.168.1.1'\r\n        });\r\n      }\r\n\r\n      const status = RealTimeMonitoringUtils.getCurrentStatus();\r\n      \r\n      expect(status.healthy).toBe(false); // Error rate > 5%\r\n      expect(status.errorRate).toBeGreaterThan(0.05);\r\n    });\r\n\r\n    it('should detect unhealthy status with slow response time', () => {\r\n      // Agregar métrica con response time lento\r\n      RealTimeMonitoringUtils.recordAPICall({\r\n        endpoint: '/api/slow',\r\n        method: 'GET',\r\n        responseTime: 3000, // > 2000ms threshold\r\n        statusCode: 200,\r\n        requestSize: 1024,\r\n        responseSize: 2048,\r\n        userAgent: 'Test Agent',\r\n        ip: '192.168.1.1'\r\n      });\r\n\r\n      const status = RealTimeMonitoringUtils.getCurrentStatus();\r\n      \r\n      expect(status.healthy).toBe(false);\r\n      expect(status.avgResponseTime).toBeGreaterThanOrEqual(2000);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Performance Monitor Integration', () => {\r\n  let monitor: RealTimePerformanceMonitor;\r\n\r\n  beforeEach(() => {\r\n    monitor = RealTimePerformanceMonitor.getInstance();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    monitor.destroy();\r\n  });\r\n\r\n  it('should handle high volume of metrics efficiently', () => {\r\n    const startTime = Date.now();\r\n\r\n    // Generar 1000 métricas de diferentes tipos\r\n    for (let i = 0; i < 1000; i++) {\r\n      monitor.recordWebVitals({\r\n        lcp: 2000 + (i % 1000),\r\n        fid: 80 + (i % 100),\r\n        cls: 0.05 + (i % 10) * 0.01,\r\n        fcp: 1500 + (i % 500),\r\n        ttfb: 600 + (i % 200),\r\n        inp: 100 + (i % 50)\r\n      });\r\n\r\n      monitor.recordAPIMetrics({\r\n        endpoint: `/api/endpoint${i % 10}`,\r\n        method: i % 2 === 0 ? 'GET' : 'POST',\r\n        responseTime: 200 + (i % 300),\r\n        statusCode: i % 20 === 0 ? 500 : 200,\r\n        requestSize: 1024,\r\n        responseSize: 2048 + (i % 1000),\r\n        userAgent: 'Load Test Agent',\r\n        ip: `192.168.1.${i % 255}`\r\n      });\r\n    }\r\n\r\n    const endTime = Date.now();\r\n    const duration = endTime - startTime;\r\n\r\n    // Debería procesar 2000 métricas en menos de 1 segundo\r\n    expect(duration).toBeLessThan(1000);\r\n\r\n    const metrics = monitor.getCurrentMetrics();\r\n    \r\n    // Verificar que los buffers respetan los límites\r\n    expect(metrics.webVitals.length).toBeLessThanOrEqual(50);\r\n    expect(metrics.apiMetrics.length).toBeLessThanOrEqual(200);\r\n  });\r\n\r\n  it('should maintain performance under concurrent access', async () => {\r\n    const promises = [];\r\n\r\n    // Simular acceso concurrente\r\n    for (let i = 0; i < 100; i++) {\r\n      promises.push(\r\n        Promise.resolve().then(() => {\r\n          monitor.recordWebVitals({\r\n            lcp: 2000 + i,\r\n            fid: 80 + i,\r\n            cls: 0.05,\r\n            fcp: 1500,\r\n            ttfb: 600,\r\n            inp: 100\r\n          });\r\n        })\r\n      );\r\n\r\n      promises.push(\r\n        Promise.resolve().then(() => {\r\n          monitor.recordAPIMetrics({\r\n            endpoint: `/api/concurrent${i}`,\r\n            method: 'GET',\r\n            responseTime: 200 + i,\r\n            statusCode: 200,\r\n            requestSize: 1024,\r\n            responseSize: 2048,\r\n            userAgent: 'Concurrent Test',\r\n            ip: '192.168.1.1'\r\n          });\r\n        })\r\n      );\r\n    }\r\n\r\n    await Promise.all(promises);\r\n\r\n    const metrics = monitor.getCurrentMetrics();\r\n    expect(metrics.webVitals.length).toBeGreaterThan(0);\r\n    expect(metrics.apiMetrics.length).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should handle memory cleanup properly', () => {\r\n    // Llenar buffers al máximo\r\n    for (let i = 0; i < 100; i++) {\r\n      monitor.recordWebVitals({\r\n        lcp: 2000,\r\n        fid: 80,\r\n        cls: 0.05,\r\n        fcp: 1500,\r\n        ttfb: 600,\r\n        inp: 100\r\n      });\r\n\r\n      monitor.recordAPIMetrics({\r\n        endpoint: '/api/test',\r\n        method: 'GET',\r\n        responseTime: 200,\r\n        statusCode: 200,\r\n        requestSize: 1024,\r\n        responseSize: 2048,\r\n        userAgent: 'Memory Test',\r\n        ip: '192.168.1.1'\r\n      });\r\n\r\n      monitor.recordDatabaseMetrics({\r\n        queryTime: 100,\r\n        queryType: 'SELECT',\r\n        tableName: 'test',\r\n        rowsAffected: 1,\r\n        connectionPoolSize: 10,\r\n        activeConnections: 5,\r\n        waitingConnections: 0\r\n      });\r\n    }\r\n\r\n    const metrics = monitor.getCurrentMetrics();\r\n    \r\n    // Los buffers deberían mantener sus límites\r\n    expect(metrics.webVitals.length).toBeLessThanOrEqual(50);\r\n    expect(metrics.apiMetrics.length).toBeLessThanOrEqual(200);\r\n    expect(metrics.dbMetrics.length).toBeLessThanOrEqual(100);\r\n  });\r\n});\r\n"],"names":["jest","mock","getRedisClient","setex","fn","mockResolvedValue","get","del","logger","info","warn","error","LogCategory","MONITORING","describe","monitor","beforeEach","RealTimePerformanceMonitor","getInstance","clearAllMocks","afterEach","destroy","it","instance1","instance2","expect","toBe","vitals","lcp","fid","cls","fcp","ttfb","inp","recordWebVitals","metrics","getCurrentMetrics","webVitals","toHaveLength","recordedVitals","timestamp","toBeGreaterThan","i","latestVitals","length","require","toHaveBeenCalled","apiMetrics","endpoint","method","responseTime","statusCode","requestSize","responseSize","userAgent","ip","recordAPIMetrics","recordedMetrics","dbMetrics","queryTime","queryType","tableName","rowsAffected","connectionPoolSize","activeConnections","waitingConnections","recordDatabaseMetrics","DEFAULT_THRESHOLDS","warning","critical","errorRate","newThresholds","updateThresholds","toHaveBeenCalledWith","alertId","resolved","resolveAlert","callback","unsubscribe","subscribe","not","faultyCallback","mockImplementation","Error","toThrow","toHaveProperty","Array","isArray","realTime","alerts","RealTimeMonitoringUtils","realTimePerformanceMonitor","recordAPICall","recordDatabaseQuery","status","getCurrentStatus","toEqual","healthy","activeAlerts","avgResponseTime","lastUpdate","toBeGreaterThanOrEqual","startTime","Date","now","endTime","duration","toBeLessThan","toBeLessThanOrEqual","promises","push","Promise","resolve","then","all"],"mappings":"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"}