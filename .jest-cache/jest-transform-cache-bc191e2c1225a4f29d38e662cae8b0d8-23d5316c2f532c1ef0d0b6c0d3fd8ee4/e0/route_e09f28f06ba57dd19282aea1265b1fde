649cbf46600b0048339818529cdbdc81
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1uhfcmk0k() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\profile\\route.ts";
  var hash = "4bf53e6fdfc4c7a375d6efef58c4d61195aa00c3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\profile\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 18
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 54
        }
      },
      "10": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 74
        }
      },
      "11": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 74
        }
      },
      "12": {
        start: {
          line: 28,
          column: 21
        },
        end: {
          line: 28,
          column: 67
        }
      },
      "13": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 74
        }
      },
      "14": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "15": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 77
        }
      },
      "16": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 138,
          column: 6
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "18": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "19": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "20": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 107
        }
      },
      "21": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 51,
          column: 19
        }
      },
      "22": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "23": {
        start: {
          line: 59,
          column: 28
        },
        end: {
          line: 59,
          column: 53
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "25": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 65,
          column: 19
        }
      },
      "26": {
        start: {
          line: 66,
          column: 38
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "27": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 73,
          column: 19
        }
      },
      "28": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 76,
          column: 42
        }
      },
      "29": {
        start: {
          line: 77,
          column: 42
        },
        end: {
          line: 77,
          column: 204
        }
      },
      "30": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "31": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 66
        }
      },
      "32": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 86,
          column: 19
        }
      },
      "33": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 91,
          column: 19
        }
      },
      "34": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "35": {
        start: {
          line: 95,
          column: 62
        },
        end: {
          line: 101,
          column: 36
        }
      },
      "36": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "37": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 79
        }
      },
      "38": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 108,
          column: 23
        }
      },
      "39": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "40": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "41": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "42": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 68
        }
      },
      "43": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "44": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "45": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "46": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "47": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 31
        }
      },
      "48": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 27
        }
      },
      "49": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "50": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "51": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 103
        }
      },
      "52": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 158,
          column: 15
        }
      },
      "53": {
        start: {
          line: 161,
          column: 24
        },
        end: {
          line: 161,
          column: 49
        }
      },
      "54": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "55": {
        start: {
          line: 163,
          column: 34
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "56": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "57": {
        start: {
          line: 172,
          column: 23
        },
        end: {
          line: 172,
          column: 38
        }
      },
      "58": {
        start: {
          line: 173,
          column: 21
        },
        end: {
          line: 173,
          column: 41
        }
      },
      "59": {
        start: {
          line: 175,
          column: 39
        },
        end: {
          line: 175,
          column: 43
        }
      },
      "60": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "61": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "62": {
        start: {
          line: 184,
          column: 45
        },
        end: {
          line: 189,
          column: 51
        }
      },
      "63": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "64": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 65
        }
      },
      "65": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "66": {
        start: {
          line: 199,
          column: 28
        },
        end: {
          line: 199,
          column: 72
        }
      },
      "67": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 205,
          column: 24
        }
      },
      "68": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 210,
          column: 11
        }
      },
      "69": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 64
        }
      },
      "70": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 217,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 18
          }
        },
        loc: {
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 31
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 113
          },
          end: {
            line: 35,
            column: 114
          }
        },
        loc: {
          start: {
            line: 35,
            column: 123
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 35
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 149,
            column: 15
          },
          end: {
            line: 149,
            column: 18
          }
        },
        loc: {
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 149
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 21
          }
        }, {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 50
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "5": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "6": {
        loc: {
          start: {
            line: 128,
            column: 23
          },
          end: {
            line: 128,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 48
          },
          end: {
            line: 128,
            column: 61
          }
        }, {
          start: {
            line: 128,
            column: 64
          },
          end: {
            line: 128,
            column: 79
          }
        }],
        line: 128
      },
      "7": {
        loc: {
          start: {
            line: 130,
            column: 23
          },
          end: {
            line: 130,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 48
          },
          end: {
            line: 130,
            column: 59
          }
        }, {
          start: {
            line: 130,
            column: 62
          },
          end: {
            line: 130,
            column: 71
          }
        }],
        line: 130
      },
      "8": {
        loc: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "9": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "10": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "11": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "12": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 27
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 27
          }
        }],
        line: 176
      },
      "13": {
        loc: {
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 187,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 187,
            column: 24
          }
        }, {
          start: {
            line: 187,
            column: 28
          },
          end: {
            line: 187,
            column: 32
          }
        }],
        line: 187
      },
      "14": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "15": {
        loc: {
          start: {
            line: 202,
            column: 27
          },
          end: {
            line: 202,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 55
          },
          end: {
            line: 202,
            column: 64
          }
        }, {
          start: {
            line: 202,
            column: 67
          },
          end: {
            line: 202,
            column: 78
          }
        }],
        line: 202
      },
      "16": {
        loc: {
          start: {
            line: 203,
            column: 28
          },
          end: {
            line: 203,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 58
          },
          end: {
            line: 203,
            column: 67
          }
        }, {
          start: {
            line: 203,
            column: 70
          },
          end: {
            line: 203,
            column: 81
          }
        }],
        line: 203
      },
      "17": {
        loc: {
          start: {
            line: 204,
            column: 28
          },
          end: {
            line: 204,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 58
          },
          end: {
            line: 204,
            column: 67
          }
        }, {
          start: {
            line: 204,
            column: 70
          },
          end: {
            line: 204,
            column: 81
          }
        }],
        line: 204
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\profile\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE PERFIL DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { logProfileActivity, getRequestInfo } from '@/lib/activity/activityLogger';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET - Obtener perfil de usuario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de usuario\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.auth,\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.logEvent('api_access', 'low', {\r\n        endpoint: '/api/user/profile',\r\n        method: 'GET',\r\n        userAgent: request.headers.get('user-agent'),\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      try {\r\n        // Verificar que el cliente administrativo est\xE9 disponible\r\n        if (!supabaseAdmin) {\r\n          console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile');\r\n\r\n          // Log de error de seguridad\r\n          securityLogger.logEvent('service_unavailable', 'high', {\r\n            service: 'supabase_admin',\r\n            endpoint: '/api/user/profile'\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Servicio de base de datos no disponible' },\r\n            { status: 503 }\r\n          );\r\n        }\r\n\r\n        // Autenticaci\xF3n con Clerk\r\n        const session = await auth();\r\n        if (!session?.user) {\r\n          // Log de intento de acceso no autorizado\r\n          securityLogger.logEvent('unauthorized_access', 'medium', {\r\n            endpoint: '/api/user/profile',\r\n            reason: 'no_session'\r\n          });\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Usuario no autenticado',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 401 });\r\n        }\r\n\r\n        // Buscar usuario en Supabase\r\n        const userId = session.user.id;\r\n        const { data: user, error } = await withDatabaseTimeout(\r\n          supabaseAdmin\r\n            .from('users')\r\n            .select('*')\r\n            .eq('clerk_id', userId)\r\n            .single(),\r\n          API_TIMEOUTS.database\r\n        );\r\n\r\n        if (error && error.code !== 'PGRST116') {\r\n          console.error('Error al obtener usuario:', error);\r\n\r\n          // Log de error de base de datos\r\n          securityLogger.logEvent('database_error', 'medium', {\r\n            error: error.message,\r\n            endpoint: '/api/user/profile',\r\n            operation: 'select_user',\r\n            userId: userId\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Error al obtener perfil de usuario' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        // Si no existe el usuario, crear uno demo\r\n        if (!user) {\r\n      const { data: newUser, error: createError } = await supabaseAdmin\r\n        .from('users')\r\n        .insert([\r\n          {\r\n            clerk_id: userId,\r\n            email: 'usuario@demo.com',\r\n            name: 'Usuario Demo',\r\n          },\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('Error al crear usuario demo:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear perfil de usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        user: newUser,\r\n      });\r\n    }\r\n\r\n        // Log de operaci\xF3n exitosa\r\n        securityLogger.logEvent('user_profile_retrieved', 'low', {\r\n          userId: userId,\r\n          hasUser: !!user\r\n        });\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          user,\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('Error en GET /api/user/profile:', error);\r\n\r\n        // Log de error de seguridad\r\n        securityLogger.logEvent('api_error', 'high', {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n          endpoint: '/api/user/profile',\r\n          stack: error instanceof Error ? error.stack : undefined\r\n        });\r\n\r\n        return NextResponse.json(\r\n          { error: 'Error interno del servidor' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/user/profile', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar perfil de usuario\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticaci\xF3n con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const userId = session.user.id;\r\n    const body = await request.json();\r\n\r\n    // Validar datos requeridos\r\n    const { name, email, phone } = body;\r\n    if (!name || !email) {\r\n      return NextResponse.json(\r\n        { error: 'Nombre y email son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar usuario en Supabase\r\n    const { data: updatedUser, error } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        name,\r\n        email,\r\n        phone: phone || null,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('clerk_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar usuario:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar perfil de usuario' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad de actualizaci\xF3n de perfil\r\n    const requestInfo = getRequestInfo(request);\r\n    await logProfileActivity(\r\n      updatedUser.id,\r\n      'update_profile',\r\n      {\r\n        fields_updated: Object.keys(body),\r\n        previous_name: updatedUser.name !== name ? 'changed' : 'unchanged',\r\n        previous_email: updatedUser.email !== email ? 'changed' : 'unchanged',\r\n        previous_phone: updatedUser.phone !== phone ? 'changed' : 'unchanged',\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: updatedUser,\r\n      message: 'Perfil actualizado correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/profile:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "PUT", "runtime", "request", "securityLogger", "createSecurityLogger", "rateLimitResult", "withRateLimit", "RATE_LIMIT_CONFIGS", "auth", "logEvent", "endpoint", "method", "userAgent", "headers", "get", "timestamp", "Date", "toISOString", "supabaseAdmin", "console", "error", "service", "NextResponse", "json", "status", "session", "user", "reason", "errorResponse", "data", "success", "userId", "id", "withDatabaseTimeout", "from", "select", "eq", "single", "API_TIMEOUTS", "database", "code", "message", "operation", "newUser", "createError", "insert", "clerk_id", "email", "name", "hasUser", "Error", "stack", "undefined", "logRateLimitExceeded", "context", "body", "phone", "updatedUser", "update", "updated_at", "requestInfo", "getRequestInfo", "logProfileActivity", "fields_updated", "Object", "keys", "previous_name", "previous_email", "previous_phone"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4bf53e6fdfc4c7a375d6efef58c4d61195aa00c3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1uhfcmk0k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1uhfcmk0k();
cov_1uhfcmk0k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1uhfcmk0k().f[0]++;
  cov_1uhfcmk0k().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1uhfcmk0k().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1uhfcmk0k().f[1]++;
    cov_1uhfcmk0k().s[4]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1uhfcmk0k().f[2]++;
    cov_1uhfcmk0k().s[5]++;
    return PUT;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1uhfcmk0k().f[3]++;
    cov_1uhfcmk0k().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[7]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[8]++, require("../../../../lib/integrations/supabase"));
const _config =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[9]++, require("../../../../lib/auth/config"));
const _activityLogger =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[10]++, require("../../../../lib/activity/activityLogger"));
const _ratelimiter =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[11]++, require("../../../../lib/rate-limiting/rate-limiter"));
const _apitimeouts =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[12]++, require("../../../../lib/config/api-timeouts"));
const _securitylogger =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[13]++, require("../../../../lib/logging/security-logger"));
const runtime =
/* istanbul ignore next */
(cov_1uhfcmk0k().s[14]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_1uhfcmk0k().f[4]++;
  // Crear logger de seguridad con contexto
  const securityLogger =
  /* istanbul ignore next */
  (cov_1uhfcmk0k().s[15]++, (0, _securitylogger.createSecurityLogger)(request));
  // Aplicar rate limiting para APIs de usuario
  const rateLimitResult =
  /* istanbul ignore next */
  (cov_1uhfcmk0k().s[16]++, await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.auth, async () => {
    /* istanbul ignore next */
    cov_1uhfcmk0k().f[5]++;
    cov_1uhfcmk0k().s[17]++;
    // Log de acceso a la API
    securityLogger.logEvent('api_access', 'low', {
      endpoint: '/api/user/profile',
      method: 'GET',
      userAgent: request.headers.get('user-agent'),
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[18]++;
    try {
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[19]++;
      // Verificar que el cliente administrativo estÃ© disponible
      if (!_supabase.supabaseAdmin) {
        /* istanbul ignore next */
        cov_1uhfcmk0k().b[0][0]++;
        cov_1uhfcmk0k().s[20]++;
        console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile');
        // Log de error de seguridad
        /* istanbul ignore next */
        cov_1uhfcmk0k().s[21]++;
        securityLogger.logEvent('service_unavailable', 'high', {
          service: 'supabase_admin',
          endpoint: '/api/user/profile'
        });
        /* istanbul ignore next */
        cov_1uhfcmk0k().s[22]++;
        return _server.NextResponse.json({
          error: 'Servicio de base de datos no disponible'
        }, {
          status: 503
        });
      } else
      /* istanbul ignore next */
      {
        cov_1uhfcmk0k().b[0][1]++;
      }
      // AutenticaciÃ³n con Clerk
      const session =
      /* istanbul ignore next */
      (cov_1uhfcmk0k().s[23]++, await (0, _config.auth)());
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[24]++;
      if (!session?.user) {
        /* istanbul ignore next */
        cov_1uhfcmk0k().b[1][0]++;
        cov_1uhfcmk0k().s[25]++;
        // Log de intento de acceso no autorizado
        securityLogger.logEvent('unauthorized_access', 'medium', {
          endpoint: '/api/user/profile',
          reason: 'no_session'
        });
        const errorResponse =
        /* istanbul ignore next */
        (cov_1uhfcmk0k().s[26]++, {
          data: null,
          success: false,
          error: 'Usuario no autenticado'
        });
        /* istanbul ignore next */
        cov_1uhfcmk0k().s[27]++;
        return _server.NextResponse.json(errorResponse, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_1uhfcmk0k().b[1][1]++;
      }
      // Buscar usuario en Supabase
      const userId =
      /* istanbul ignore next */
      (cov_1uhfcmk0k().s[28]++, session.user.id);
      const {
        data: user,
        error
      } =
      /* istanbul ignore next */
      (cov_1uhfcmk0k().s[29]++, await (0, _apitimeouts.withDatabaseTimeout)(_supabase.supabaseAdmin.from('users').select('*').eq('clerk_id', userId).single(), _apitimeouts.API_TIMEOUTS.database));
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[3][0]++, error) &&
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[3][1]++, error.code !== 'PGRST116')) {
        /* istanbul ignore next */
        cov_1uhfcmk0k().b[2][0]++;
        cov_1uhfcmk0k().s[31]++;
        console.error('Error al obtener usuario:', error);
        // Log de error de base de datos
        /* istanbul ignore next */
        cov_1uhfcmk0k().s[32]++;
        securityLogger.logEvent('database_error', 'medium', {
          error: error.message,
          endpoint: '/api/user/profile',
          operation: 'select_user',
          userId: userId
        });
        /* istanbul ignore next */
        cov_1uhfcmk0k().s[33]++;
        return _server.NextResponse.json({
          error: 'Error al obtener perfil de usuario'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_1uhfcmk0k().b[2][1]++;
      }
      // Si no existe el usuario, crear uno demo
      cov_1uhfcmk0k().s[34]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1uhfcmk0k().b[4][0]++;
        const {
          data: newUser,
          error: createError
        } =
        /* istanbul ignore next */
        (cov_1uhfcmk0k().s[35]++, await _supabase.supabaseAdmin.from('users').insert([{
          clerk_id: userId,
          email: 'usuario@demo.com',
          name: 'Usuario Demo'
        }]).select().single());
        /* istanbul ignore next */
        cov_1uhfcmk0k().s[36]++;
        if (createError) {
          /* istanbul ignore next */
          cov_1uhfcmk0k().b[5][0]++;
          cov_1uhfcmk0k().s[37]++;
          console.error('Error al crear usuario demo:', createError);
          /* istanbul ignore next */
          cov_1uhfcmk0k().s[38]++;
          return _server.NextResponse.json({
            error: 'Error al crear perfil de usuario'
          }, {
            status: 500
          });
        } else
        /* istanbul ignore next */
        {
          cov_1uhfcmk0k().b[5][1]++;
        }
        cov_1uhfcmk0k().s[39]++;
        return _server.NextResponse.json({
          success: true,
          user: newUser
        });
      } else
      /* istanbul ignore next */
      {
        cov_1uhfcmk0k().b[4][1]++;
      }
      // Log de operaciÃ³n exitosa
      cov_1uhfcmk0k().s[40]++;
      securityLogger.logEvent('user_profile_retrieved', 'low', {
        userId: userId,
        hasUser: !!user
      });
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[41]++;
      return _server.NextResponse.json({
        success: true,
        user
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[42]++;
      console.error('Error en GET /api/user/profile:', error);
      // Log de error de seguridad
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[43]++;
      securityLogger.logEvent('api_error', 'high', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1uhfcmk0k().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1uhfcmk0k().b[6][1]++, 'Unknown error'),
        endpoint: '/api/user/profile',
        stack: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1uhfcmk0k().b[7][0]++, error.stack) :
        /* istanbul ignore next */
        (cov_1uhfcmk0k().b[7][1]++, undefined)
      });
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[44]++;
      return _server.NextResponse.json({
        error: 'Error interno del servidor'
      }, {
        status: 500
      });
    }
  }));
  // Manejar rate limit excedido
  /* istanbul ignore next */
  cov_1uhfcmk0k().s[45]++;
  if (rateLimitResult instanceof _server.NextResponse) {
    /* istanbul ignore next */
    cov_1uhfcmk0k().b[8][0]++;
    cov_1uhfcmk0k().s[46]++;
    securityLogger.logRateLimitExceeded(securityLogger.context, {
      endpoint: '/api/user/profile',
      method: 'GET'
    });
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[47]++;
    return rateLimitResult;
  } else
  /* istanbul ignore next */
  {
    cov_1uhfcmk0k().b[8][1]++;
  }
  cov_1uhfcmk0k().s[48]++;
  return rateLimitResult;
}
async function PUT(request) {
  /* istanbul ignore next */
  cov_1uhfcmk0k().f[6]++;
  cov_1uhfcmk0k().s[49]++;
  try {
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[50]++;
    // Verificar que el cliente administrativo estÃ© disponible
    if (!_supabase.supabaseAdmin) {
      /* istanbul ignore next */
      cov_1uhfcmk0k().b[9][0]++;
      cov_1uhfcmk0k().s[51]++;
      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile');
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[52]++;
      return _server.NextResponse.json({
        error: 'Servicio de base de datos no disponible'
      }, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uhfcmk0k().b[9][1]++;
    }
    // AutenticaciÃ³n con Clerk
    const session =
    /* istanbul ignore next */
    (cov_1uhfcmk0k().s[53]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[54]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1uhfcmk0k().b[10][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_1uhfcmk0k().s[55]++, {
        data: null,
        success: false,
        error: 'Usuario no autenticado'
      });
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[56]++;
      return _server.NextResponse.json(errorResponse, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uhfcmk0k().b[10][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_1uhfcmk0k().s[57]++, session.user.id);
    const body =
    /* istanbul ignore next */
    (cov_1uhfcmk0k().s[58]++, await request.json());
    // Validar datos requeridos
    const {
      name,
      email,
      phone
    } =
    /* istanbul ignore next */
    (cov_1uhfcmk0k().s[59]++, body);
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[60]++;
    if (
    /* istanbul ignore next */
    (cov_1uhfcmk0k().b[12][0]++, !name) ||
    /* istanbul ignore next */
    (cov_1uhfcmk0k().b[12][1]++, !email)) {
      /* istanbul ignore next */
      cov_1uhfcmk0k().b[11][0]++;
      cov_1uhfcmk0k().s[61]++;
      return _server.NextResponse.json({
        error: 'Nombre y email son requeridos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uhfcmk0k().b[11][1]++;
    }
    // Actualizar usuario en Supabase
    const {
      data: updatedUser,
      error
    } =
    /* istanbul ignore next */
    (cov_1uhfcmk0k().s[62]++, await _supabase.supabaseAdmin.from('users').update({
      name,
      email,
      phone:
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[13][0]++, phone) ||
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[13][1]++, null),
      updated_at: new Date().toISOString()
    }).eq('clerk_id', userId).select().single());
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[63]++;
    if (error) {
      /* istanbul ignore next */
      cov_1uhfcmk0k().b[14][0]++;
      cov_1uhfcmk0k().s[64]++;
      console.error('Error al actualizar usuario:', error);
      /* istanbul ignore next */
      cov_1uhfcmk0k().s[65]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar perfil de usuario'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uhfcmk0k().b[14][1]++;
    }
    // Registrar actividad de actualizaciÃ³n de perfil
    const requestInfo =
    /* istanbul ignore next */
    (cov_1uhfcmk0k().s[66]++, (0, _activityLogger.getRequestInfo)(request));
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[67]++;
    await (0, _activityLogger.logProfileActivity)(updatedUser.id, 'update_profile', {
      fields_updated: Object.keys(body),
      previous_name: updatedUser.name !== name ?
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[15][0]++, 'changed') :
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[15][1]++, 'unchanged'),
      previous_email: updatedUser.email !== email ?
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[16][0]++, 'changed') :
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[16][1]++, 'unchanged'),
      previous_phone: updatedUser.phone !== phone ?
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[17][0]++, 'changed') :
      /* istanbul ignore next */
      (cov_1uhfcmk0k().b[17][1]++, 'unchanged')
    }, requestInfo);
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[68]++;
    return _server.NextResponse.json({
      success: true,
      user: updatedUser,
      message: 'Perfil actualizado correctamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[69]++;
    console.error('Error en PUT /api/user/profile:', error);
    /* istanbul ignore next */
    cov_1uhfcmk0k().s[70]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,