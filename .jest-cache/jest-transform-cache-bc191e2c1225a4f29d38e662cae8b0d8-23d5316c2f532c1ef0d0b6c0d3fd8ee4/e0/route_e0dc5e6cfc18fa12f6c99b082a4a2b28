294e01973ab70a997b6dc9f27c4cdd73
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1nu7i19u4d() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\rate-limiting\\metrics\\route.ts";
  var hash = "cc011d455513b10052eea04f8bf7e33702cbba2a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\rate-limiting\\metrics\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 27,
          column: 85
        }
      },
      "10": {
        start: {
          line: 28,
          column: 15
        },
        end: {
          line: 28,
          column: 63
        }
      },
      "11": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 98
        }
      },
      "12": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "13": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "14": {
        start: {
          line: 34,
          column: 27
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "17": {
        start: {
          line: 47,
          column: 24
        },
        end: {
          line: 47,
          column: 42
        }
      },
      "18": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "19": {
        start: {
          line: 50,
          column: 34
        },
        end: {
          line: 50,
          column: 75
        }
      },
      "20": {
        start: {
          line: 51,
          column: 35
        },
        end: {
          line: 51,
          column: 77
        }
      },
      "21": {
        start: {
          line: 52,
          column: 31
        },
        end: {
          line: 52,
          column: 74
        }
      },
      "22": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 66
        }
      },
      "23": {
        start: {
          line: 55,
          column: 31
        },
        end: {
          line: 55,
          column: 67
        }
      },
      "24": {
        start: {
          line: 57,
          column: 33
        },
        end: {
          line: 57,
          column: 113
        }
      },
      "25": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 59,
          column: 29
        }
      },
      "26": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "27": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 63
        }
      },
      "28": {
        start: {
          line: 64,
          column: 26
        },
        end: {
          line: 64,
          column: 30
        }
      },
      "29": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "30": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 72
        }
      },
      "31": {
        start: {
          line: 69,
          column: 28
        },
        end: {
          line: 69,
          column: 32
        }
      },
      "32": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "33": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 71,
          column: 72
        }
      },
      "34": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "35": {
        start: {
          line: 78,
          column: 31
        },
        end: {
          line: 83,
          column: 16
        }
      },
      "36": {
        start: {
          line: 85,
          column: 25
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "37": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 51
        }
      },
      "38": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 60
        }
      },
      "39": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "40": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 215,
          column: 5
        }
      },
      "41": {
        start: {
          line: 128,
          column: 27
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "42": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "43": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "44": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 142,
          column: 42
        }
      },
      "45": {
        start: {
          line: 143,
          column: 21
        },
        end: {
          line: 143,
          column: 41
        }
      },
      "46": {
        start: {
          line: 144,
          column: 109
        },
        end: {
          line: 144,
          column: 113
        }
      },
      "47": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "48": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "49": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 60
        }
      },
      "50": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "51": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "52": {
        start: {
          line: 161,
          column: 35
        },
        end: {
          line: 161,
          column: 71
        }
      },
      "53": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "54": {
        start: {
          line: 163,
          column: 36
        },
        end: {
          line: 163,
          column: 83
        }
      },
      "55": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 170,
          column: 19
        }
      },
      "56": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 176,
          column: 19
        }
      },
      "57": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 180,
          column: 83
        }
      },
      "58": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 110
        }
      },
      "59": {
        start: {
          line: 182,
          column: 25
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "60": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 51
        }
      },
      "61": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 64
        }
      },
      "62": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "63": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 296,
          column: 5
        }
      },
      "64": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 223,
          column: 10
        }
      },
      "65": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "66": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 231,
          column: 15
        }
      },
      "67": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 233,
          column: 42
        }
      },
      "68": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 234,
          column: 40
        }
      },
      "69": {
        start: {
          line: 235,
          column: 24
        },
        end: {
          line: 235,
          column: 73
        }
      },
      "70": {
        start: {
          line: 236,
          column: 22
        },
        end: {
          line: 236,
          column: 62
        }
      },
      "71": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "72": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 244,
          column: 15
        }
      },
      "73": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "74": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 56
        }
      },
      "75": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "76": {
        start: {
          line: 259,
          column: 31
        },
        end: {
          line: 259,
          column: 67
        }
      },
      "77": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "78": {
        start: {
          line: 261,
          column: 32
        },
        end: {
          line: 261,
          column: 79
        }
      },
      "79": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "80": {
        start: {
          line: 269,
          column: 25
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "81": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 51
        }
      },
      "82": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 59
        }
      },
      "83": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 295,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 18
          }
        },
        loc: {
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 31
      },
      "6": {
        name: "POST",
        decl: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 19
          }
        },
        loc: {
          start: {
            line: 125,
            column: 29
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 125
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 217,
            column: 15
          },
          end: {
            line: 217,
            column: 21
          }
        },
        loc: {
          start: {
            line: 217,
            column: 31
          },
          end: {
            line: 297,
            column: 1
          }
        },
        line: 217
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 41
          }
        }, {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 44,
            column: 48
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 33
          },
          end: {
            line: 57,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 54
          },
          end: {
            line: 57,
            column: 106
          }
        }, {
          start: {
            line: 57,
            column: 109
          },
          end: {
            line: 57,
            column: 113
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 26
          }
        }, {
          start: {
            line: 60,
            column: 30
          },
          end: {
            line: 60,
            column: 47
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 19
          }
        }, {
          start: {
            line: 70,
            column: 23
          },
          end: {
            line: 70,
            column: 37
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 31
          },
          end: {
            line: 83,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 50
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 16
          }
        }],
        line: 78
      },
      "9": {
        loc: {
          start: {
            line: 79,
            column: 25
          },
          end: {
            line: 79,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 62
          },
          end: {
            line: 79,
            column: 133
          }
        }, {
          start: {
            line: 79,
            column: 136
          },
          end: {
            line: 79,
            column: 139
          }
        }],
        line: 79
      },
      "10": {
        loc: {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 80,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 60
          },
          end: {
            line: 80,
            column: 131
          }
        }, {
          start: {
            line: 80,
            column: 134
          },
          end: {
            line: 80,
            column: 135
          }
        }],
        line: 80
      },
      "11": {
        loc: {
          start: {
            line: 81,
            column: 28
          },
          end: {
            line: 81,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 65
          },
          end: {
            line: 81,
            column: 130
          }
        }, {
          start: {
            line: 81,
            column: 133
          },
          end: {
            line: 81,
            column: 134
          }
        }],
        line: 81
      },
      "12": {
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 60
          },
          end: {
            line: 82,
            column: 122
          }
        }, {
          start: {
            line: 82,
            column: 125
          },
          end: {
            line: 82,
            column: 126
          }
        }],
        line: 82
      },
      "13": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "14": {
        loc: {
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 139,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 139,
            column: 41
          }
        }, {
          start: {
            line: 139,
            column: 45
          },
          end: {
            line: 139,
            column: 48
          }
        }],
        line: 139
      },
      "15": {
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 144,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 144,
            column: 25
          },
          end: {
            line: 144,
            column: 32
          }
        }],
        line: 144
      },
      "16": {
        loc: {
          start: {
            line: 144,
            column: 34
          },
          end: {
            line: 144,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 144,
            column: 51
          },
          end: {
            line: 144,
            column: 56
          }
        }],
        line: 144
      },
      "17": {
        loc: {
          start: {
            line: 144,
            column: 58
          },
          end: {
            line: 144,
            column: 78
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 144,
            column: 73
          },
          end: {
            line: 144,
            column: 78
          }
        }],
        line: 144
      },
      "18": {
        loc: {
          start: {
            line: 144,
            column: 80
          },
          end: {
            line: 144,
            column: 104
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 144,
            column: 90
          },
          end: {
            line: 144,
            column: 104
          }
        }],
        line: 144
      },
      "19": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "20": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 30
          }
        }, {
          start: {
            line: 151,
            column: 34
          },
          end: {
            line: 151,
            column: 48
          }
        }],
        line: 151
      },
      "21": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "22": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 32
          }
        }, {
          start: {
            line: 160,
            column: 36
          },
          end: {
            line: 160,
            column: 48
          }
        }],
        line: 160
      },
      "23": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 177,
            column: 13
          }
        }],
        line: 162
      },
      "24": {
        loc: {
          start: {
            line: 181,
            column: 27
          },
          end: {
            line: 181,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 66
          },
          end: {
            line: 181,
            column: 103
          }
        }, {
          start: {
            line: 181,
            column: 106
          },
          end: {
            line: 181,
            column: 110
          }
        }],
        line: 181
      },
      "25": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "26": {
        loc: {
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 230,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 230,
            column: 41
          }
        }, {
          start: {
            line: 230,
            column: 45
          },
          end: {
            line: 230,
            column: 48
          }
        }],
        line: 230
      },
      "27": {
        loc: {
          start: {
            line: 235,
            column: 24
          },
          end: {
            line: 235,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 24
          },
          end: {
            line: 235,
            column: 55
          }
        }, {
          start: {
            line: 235,
            column: 59
          },
          end: {
            line: 235,
            column: 73
          }
        }],
        line: 235
      },
      "28": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "29": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0],
      "17": [0],
      "18": [0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\rate-limiting\\metrics\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de M\xE9tricas de Rate Limiting Enterprise\r\n * Proporciona estad\xEDsticas detalladas del sistema de rate limiting\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { \r\n  getRateLimitStats, \r\n  cleanupRateLimitKeys,\r\n  isRedisAvailable \r\n} from '@/lib/integrations/redis';\r\nimport { \r\n  metricsCollector,\r\n  memoryStore \r\n} from '@/lib/rate-limiting/enterprise-rate-limiter';\r\n\r\n// =====================================================\r\n// GET /api/admin/rate-limiting/metrics\r\n// Obtiene m\xE9tricas completas de rate limiting\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'metrics_read']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener par\xE1metros de consulta\r\n    const url = new URL(request.url);\r\n    const includeRedisStats = url.searchParams.get('redis') !== 'false';\r\n    const includeMemoryStats = url.searchParams.get('memory') !== 'false';\r\n    const includeTopKeys = url.searchParams.get('topKeys') !== 'false';\r\n    const cleanup = url.searchParams.get('cleanup') === 'true';\r\n\r\n    // Verificar disponibilidad de Redis\r\n    const redisAvailable = await isRedisAvailable();\r\n\r\n    // Obtener m\xE9tricas del collector\r\n    const collectorMetrics = includeMemoryStats ? metricsCollector.getMetrics() : null;\r\n\r\n    // Obtener estad\xEDsticas de Redis si est\xE1 disponible\r\n    let redisStats = null;\r\n    if (redisAvailable && includeRedisStats) {\r\n      redisStats = await getRateLimitStats();\r\n    }\r\n\r\n    // Obtener estad\xEDsticas del store en memoria\r\n    let memoryStats = null;\r\n    if (includeMemoryStats) {\r\n      memoryStats = memoryStore.getStats();\r\n    }\r\n\r\n    // Limpiar claves expiradas si se solicita\r\n    let cleanupResult = null;\r\n    if (cleanup && redisAvailable) {\r\n      const cleanedKeys = await cleanupRateLimitKeys();\r\n      cleanupResult = {\r\n        cleanedKeys,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    // Calcular m\xE9tricas derivadas\r\n    const derivedMetrics = collectorMetrics ? {\r\n      successRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.allowedRequests / collectorMetrics.totalRequests) * 100 \r\n        : 100,\r\n      blockRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.blockedRequests / collectorMetrics.totalRequests) * 100 \r\n        : 0,\r\n      redisUsageRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.redisHits / collectorMetrics.totalRequests) * 100 \r\n        : 0,\r\n      errorRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.errors / collectorMetrics.totalRequests) * 100 \r\n        : 0\r\n    } : null;\r\n\r\n    // Construir respuesta\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        overview: {\r\n          redisAvailable,\r\n          timestamp: new Date().toISOString(),\r\n          requestedBy: context.userId\r\n        },\r\n        collector: collectorMetrics,\r\n        derived: derivedMetrics,\r\n        redis: redisStats,\r\n        memory: memoryStats,\r\n        cleanup: cleanupResult\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          validations: context.validations\r\n        }\r\n      },\r\n      message: 'M\xE9tricas de rate limiting obtenidas correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[RATE_LIMIT_METRICS] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener m\xE9tricas de rate limiting',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST /api/admin/rate-limiting/metrics\r\n// Resetea m\xE9tricas o ejecuta operaciones de mantenimiento\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin con permisos cr\xEDticos\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'metrics_write', 'system_maintenance']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    const {\r\n      action = 'reset',\r\n      resetCollector = false,\r\n      cleanupRedis = false,\r\n      pattern = 'rate_limit:*'\r\n    } = body;\r\n\r\n    const results: any = {\r\n      timestamp: new Date().toISOString(),\r\n      requestedBy: context.userId,\r\n      actions: []\r\n    };\r\n\r\n    // Resetear m\xE9tricas del collector\r\n    if (action === 'reset' || resetCollector) {\r\n      metricsCollector.reset();\r\n      results.actions.push({\r\n        action: 'reset_collector',\r\n        success: true,\r\n        message: 'M\xE9tricas del collector reseteadas'\r\n      });\r\n    }\r\n\r\n    // Limpiar claves de Redis\r\n    if (action === 'cleanup' || cleanupRedis) {\r\n      const redisAvailable = await isRedisAvailable();\r\n      \r\n      if (redisAvailable) {\r\n        const cleanedKeys = await cleanupRateLimitKeys(pattern);\r\n        results.actions.push({\r\n          action: 'cleanup_redis',\r\n          success: true,\r\n          cleanedKeys,\r\n          pattern,\r\n          message: `${cleanedKeys} claves limpiadas de Redis`\r\n        });\r\n      } else {\r\n        results.actions.push({\r\n          action: 'cleanup_redis',\r\n          success: false,\r\n          message: 'Redis no disponible para limpieza'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Obtener estad\xEDsticas actualizadas\r\n    const updatedMetrics = metricsCollector.getMetrics();\r\n    const redisStats = await isRedisAvailable() ? await getRateLimitStats() : null;\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        operations: results,\r\n        updatedMetrics: {\r\n          collector: updatedMetrics,\r\n          redis: redisStats\r\n        }\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true\r\n        }\r\n      },\r\n      message: 'Operaciones de mantenimiento completadas'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[RATE_LIMIT_MAINTENANCE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en operaciones de mantenimiento',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// DELETE /api/admin/rate-limiting/metrics\r\n// Elimina m\xE9tricas espec\xEDficas o todas\r\n// =====================================================\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin con permisos cr\xEDticos\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'system_maintenance']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const url = new URL(request.url);\r\n    const pattern = url.searchParams.get('pattern') || 'rate_limit:*';\r\n    const force = url.searchParams.get('force') === 'true';\r\n\r\n    if (!force) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Operaci\xF3n de eliminaci\xF3n requiere confirmaci\xF3n con force=true',\r\n          code: 'CONFIRMATION_REQUIRED',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const results: any = {\r\n      timestamp: new Date().toISOString(),\r\n      requestedBy: context.userId,\r\n      pattern,\r\n      actions: []\r\n    };\r\n\r\n    // Resetear collector\r\n    metricsCollector.reset();\r\n    results.actions.push({\r\n      action: 'reset_collector',\r\n      success: true\r\n    });\r\n\r\n    // Limpiar Redis si est\xE1 disponible\r\n    const redisAvailable = await isRedisAvailable();\r\n    if (redisAvailable) {\r\n      const cleanedKeys = await cleanupRateLimitKeys(pattern);\r\n      results.actions.push({\r\n        action: 'cleanup_redis',\r\n        success: true,\r\n        cleanedKeys,\r\n        pattern\r\n      });\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: results,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true,\r\n          destructive: true\r\n        }\r\n      },\r\n      message: 'M\xE9tricas eliminadas correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[RATE_LIMIT_DELETE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al eliminar m\xE9tricas',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "POST", "runtime", "request", "authResult", "requireAdminAuth", "success", "NextResponse", "json", "error", "code", "enterprise", "status", "context", "url", "URL", "includeRedisStats", "searchParams", "get", "includeMemoryStats", "includeTopKeys", "cleanup", "redisAvailable", "isRedisAvailable", "collectorMetrics", "metricsCollector", "getMetrics", "redisStats", "getRateLimitStats", "memoryStats", "memoryStore", "getStats", "cleanupResult", "cleanedKeys", "cleanupRateLimitKeys", "timestamp", "Date", "toISOString", "derivedMetrics", "successRate", "totalRequests", "allowedRequests", "blockRate", "blockedRequests", "redisUsageRate", "redisHits", "errorRate", "errors", "response", "data", "overview", "requestedBy", "userId", "collector", "derived", "redis", "memory", "requester", "role", "permissions", "security", "level", "securityLevel", "validations", "message", "console", "body", "action", "resetCollector", "cleanupRedis", "pattern", "results", "actions", "reset", "push", "updatedMetrics", "operations", "audit", "force", "destructive"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cc011d455513b10052eea04f8bf7e33702cbba2a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nu7i19u4d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nu7i19u4d();
cov_1nu7i19u4d().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1nu7i19u4d().f[0]++;
  cov_1nu7i19u4d().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1nu7i19u4d().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1nu7i19u4d().f[1]++;
    cov_1nu7i19u4d().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1nu7i19u4d().f[2]++;
    cov_1nu7i19u4d().s[5]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1nu7i19u4d().f[3]++;
    cov_1nu7i19u4d().s[6]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1nu7i19u4d().f[4]++;
    cov_1nu7i19u4d().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1nu7i19u4d().s[8]++, require("next/server"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_1nu7i19u4d().s[9]++, require("../../../../../lib/auth/enterprise-auth-utils"));
const _redis =
/* istanbul ignore next */
(cov_1nu7i19u4d().s[10]++, require("../../../../../lib/integrations/redis"));
const _enterpriseratelimiter =
/* istanbul ignore next */
(cov_1nu7i19u4d().s[11]++, require("../../../../../lib/rate-limiting/enterprise-rate-limiter"));
const runtime =
/* istanbul ignore next */
(cov_1nu7i19u4d().s[12]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_1nu7i19u4d().f[5]++;
  cov_1nu7i19u4d().s[13]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[14]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'metrics_read']));
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[15]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[0][0]++;
      cov_1nu7i19u4d().s[16]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1nu7i19u4d().b[1][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1nu7i19u4d().b[1][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[0][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[17]++, authResult.context);
    // Obtener parÃ¡metros de consulta
    const url =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[18]++, new URL(request.url));
    const includeRedisStats =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[19]++, url.searchParams.get('redis') !== 'false');
    const includeMemoryStats =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[20]++, url.searchParams.get('memory') !== 'false');
    const includeTopKeys =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[21]++, url.searchParams.get('topKeys') !== 'false');
    const cleanup =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[22]++, url.searchParams.get('cleanup') === 'true');
    // Verificar disponibilidad de Redis
    const redisAvailable =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[23]++, await (0, _redis.isRedisAvailable)());
    // Obtener mÃ©tricas del collector
    const collectorMetrics =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[24]++, includeMemoryStats ?
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[2][0]++, _enterpriseratelimiter.metricsCollector.getMetrics()) :
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[2][1]++, null));
    // Obtener estadÃ­sticas de Redis si estÃ¡ disponible
    let redisStats =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[25]++, null);
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[4][0]++, redisAvailable) &&
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[4][1]++, includeRedisStats)) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[3][0]++;
      cov_1nu7i19u4d().s[27]++;
      redisStats = await (0, _redis.getRateLimitStats)();
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[3][1]++;
    }
    // Obtener estadÃ­sticas del store en memoria
    let memoryStats =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[28]++, null);
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[29]++;
    if (includeMemoryStats) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[5][0]++;
      cov_1nu7i19u4d().s[30]++;
      memoryStats = _enterpriseratelimiter.memoryStore.getStats();
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[5][1]++;
    }
    // Limpiar claves expiradas si se solicita
    let cleanupResult =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[31]++, null);
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[7][0]++, cleanup) &&
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[7][1]++, redisAvailable)) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[6][0]++;
      const cleanedKeys =
      /* istanbul ignore next */
      (cov_1nu7i19u4d().s[33]++, await (0, _redis.cleanupRateLimitKeys)());
      /* istanbul ignore next */
      cov_1nu7i19u4d().s[34]++;
      cleanupResult = {
        cleanedKeys,
        timestamp: new Date().toISOString()
      };
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[6][1]++;
    }
    // Calcular mÃ©tricas derivadas
    const derivedMetrics =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[35]++, collectorMetrics ?
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[8][0]++, {
      successRate: collectorMetrics.totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[9][0]++, collectorMetrics.allowedRequests / collectorMetrics.totalRequests * 100) :
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[9][1]++, 100),
      blockRate: collectorMetrics.totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[10][0]++, collectorMetrics.blockedRequests / collectorMetrics.totalRequests * 100) :
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[10][1]++, 0),
      redisUsageRate: collectorMetrics.totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[11][0]++, collectorMetrics.redisHits / collectorMetrics.totalRequests * 100) :
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[11][1]++, 0),
      errorRate: collectorMetrics.totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[12][0]++, collectorMetrics.errors / collectorMetrics.totalRequests * 100) :
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[12][1]++, 0)
    }) :
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[8][1]++, null));
    // Construir respuesta
    const response =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[36]++, {
      success: true,
      data: {
        overview: {
          redisAvailable,
          timestamp: new Date().toISOString(),
          requestedBy: context.userId
        },
        collector: collectorMetrics,
        derived: derivedMetrics,
        redis: redisStats,
        memory: memoryStats,
        cleanup: cleanupResult
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        security: {
          level: context.securityLevel,
          validations: context.validations
        }
      },
      message: 'MÃ©tricas de rate limiting obtenidas correctamente'
    });
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[37]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[38]++;
    console.error('[RATE_LIMIT_METRICS] Error:', error);
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[39]++;
    return _server.NextResponse.json({
      error: 'Error interno al obtener mÃ©tricas de rate limiting',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1nu7i19u4d().f[6]++;
  cov_1nu7i19u4d().s[40]++;
  try {
    // Verificar autenticaciÃ³n admin con permisos crÃ­ticos
    const authResult =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[41]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'metrics_write', 'system_maintenance']));
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[42]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[13][0]++;
      cov_1nu7i19u4d().s[43]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1nu7i19u4d().b[14][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1nu7i19u4d().b[14][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[13][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[44]++, authResult.context);
    const body =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[45]++, await request.json());
    const {
      action =
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[15][0]++, 'reset'),
      resetCollector =
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[16][0]++, false),
      cleanupRedis =
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[17][0]++, false),
      pattern =
      /* istanbul ignore next */
      (cov_1nu7i19u4d().b[18][0]++, 'rate_limit:*')
    } =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[46]++, body);
    const results =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[47]++, {
      timestamp: new Date().toISOString(),
      requestedBy: context.userId,
      actions: []
    });
    // Resetear mÃ©tricas del collector
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[20][0]++, action === 'reset') ||
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[20][1]++, resetCollector)) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[19][0]++;
      cov_1nu7i19u4d().s[49]++;
      _enterpriseratelimiter.metricsCollector.reset();
      /* istanbul ignore next */
      cov_1nu7i19u4d().s[50]++;
      results.actions.push({
        action: 'reset_collector',
        success: true,
        message: 'MÃ©tricas del collector reseteadas'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[19][1]++;
    }
    // Limpiar claves de Redis
    cov_1nu7i19u4d().s[51]++;
    if (
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[22][0]++, action === 'cleanup') ||
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[22][1]++, cleanupRedis)) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[21][0]++;
      const redisAvailable =
      /* istanbul ignore next */
      (cov_1nu7i19u4d().s[52]++, await (0, _redis.isRedisAvailable)());
      /* istanbul ignore next */
      cov_1nu7i19u4d().s[53]++;
      if (redisAvailable) {
        /* istanbul ignore next */
        cov_1nu7i19u4d().b[23][0]++;
        const cleanedKeys =
        /* istanbul ignore next */
        (cov_1nu7i19u4d().s[54]++, await (0, _redis.cleanupRateLimitKeys)(pattern));
        /* istanbul ignore next */
        cov_1nu7i19u4d().s[55]++;
        results.actions.push({
          action: 'cleanup_redis',
          success: true,
          cleanedKeys,
          pattern,
          message: `${cleanedKeys} claves limpiadas de Redis`
        });
      } else {
        /* istanbul ignore next */
        cov_1nu7i19u4d().b[23][1]++;
        cov_1nu7i19u4d().s[56]++;
        results.actions.push({
          action: 'cleanup_redis',
          success: false,
          message: 'Redis no disponible para limpieza'
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[21][1]++;
    }
    // Obtener estadÃ­sticas actualizadas
    const updatedMetrics =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[57]++, _enterpriseratelimiter.metricsCollector.getMetrics());
    const redisStats =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[58]++, (await (0, _redis.isRedisAvailable)()) ?
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[24][0]++, await (0, _redis.getRateLimitStats)()) :
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[24][1]++, null));
    const response =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[59]++, {
      success: true,
      data: {
        operations: results,
        updatedMetrics: {
          collector: updatedMetrics,
          redis: redisStats
        }
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        security: {
          level: context.securityLevel,
          audit: true
        }
      },
      message: 'Operaciones de mantenimiento completadas'
    });
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[60]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[61]++;
    console.error('[RATE_LIMIT_MAINTENANCE] Error:', error);
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[62]++;
    return _server.NextResponse.json({
      error: 'Error interno en operaciones de mantenimiento',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1nu7i19u4d().f[7]++;
  cov_1nu7i19u4d().s[63]++;
  try {
    // Verificar autenticaciÃ³n admin con permisos crÃ­ticos
    const authResult =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[64]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'system_maintenance']));
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[65]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[25][0]++;
      cov_1nu7i19u4d().s[66]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1nu7i19u4d().b[26][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1nu7i19u4d().b[26][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[25][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[67]++, authResult.context);
    const url =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[68]++, new URL(request.url));
    const pattern =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[69]++,
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[27][0]++, url.searchParams.get('pattern')) ||
    /* istanbul ignore next */
    (cov_1nu7i19u4d().b[27][1]++, 'rate_limit:*'));
    const force =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[70]++, url.searchParams.get('force') === 'true');
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[71]++;
    if (!force) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[28][0]++;
      cov_1nu7i19u4d().s[72]++;
      return _server.NextResponse.json({
        error: 'OperaciÃ³n de eliminaciÃ³n requiere confirmaciÃ³n con force=true',
        code: 'CONFIRMATION_REQUIRED',
        enterprise: true
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[28][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[73]++, {
      timestamp: new Date().toISOString(),
      requestedBy: context.userId,
      pattern,
      actions: []
    });
    // Resetear collector
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[74]++;
    _enterpriseratelimiter.metricsCollector.reset();
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[75]++;
    results.actions.push({
      action: 'reset_collector',
      success: true
    });
    // Limpiar Redis si estÃ¡ disponible
    const redisAvailable =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[76]++, await (0, _redis.isRedisAvailable)());
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[77]++;
    if (redisAvailable) {
      /* istanbul ignore next */
      cov_1nu7i19u4d().b[29][0]++;
      const cleanedKeys =
      /* istanbul ignore next */
      (cov_1nu7i19u4d().s[78]++, await (0, _redis.cleanupRateLimitKeys)(pattern));
      /* istanbul ignore next */
      cov_1nu7i19u4d().s[79]++;
      results.actions.push({
        action: 'cleanup_redis',
        success: true,
        cleanedKeys,
        pattern
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nu7i19u4d().b[29][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_1nu7i19u4d().s[80]++, {
      success: true,
      data: results,
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role
        },
        security: {
          level: context.securityLevel,
          audit: true,
          destructive: true
        }
      },
      message: 'MÃ©tricas eliminadas correctamente'
    });
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[81]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[82]++;
    console.error('[RATE_LIMIT_DELETE] Error:', error);
    /* istanbul ignore next */
    cov_1nu7i19u4d().s[83]++;
    return _server.NextResponse.json({
      error: 'Error interno al eliminar mÃ©tricas',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,