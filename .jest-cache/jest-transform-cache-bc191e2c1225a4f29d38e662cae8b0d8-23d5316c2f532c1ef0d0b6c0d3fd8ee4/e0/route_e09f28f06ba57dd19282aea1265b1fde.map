{"version":3,"names":["cov_1uhfcmk0k","actualCoverage","s","GET","f","PUT","runtime","request","securityLogger","_securitylogger","createSecurityLogger","rateLimitResult","_ratelimiter","withRateLimit","RATE_LIMIT_CONFIGS","auth","logEvent","endpoint","method","userAgent","headers","get","timestamp","Date","toISOString","_supabase","supabaseAdmin","b","console","error","service","_server","NextResponse","json","status","session","_config","user","reason","errorResponse","data","success","userId","id","_apitimeouts","withDatabaseTimeout","from","select","eq","single","API_TIMEOUTS","database","code","message","operation","newUser","createError","insert","clerk_id","email","name","hasUser","Error","stack","undefined","logRateLimitExceeded","context","body","phone","updatedUser","update","updated_at","requestInfo","_activityLogger","getRequestInfo","logProfileActivity","fields_updated","Object","keys","previous_name","previous_email","previous_phone"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\profile\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE PERFIL DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { logProfileActivity, getRequestInfo } from '@/lib/activity/activityLogger';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET - Obtener perfil de usuario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de usuario\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.auth,\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.logEvent('api_access', 'low', {\r\n        endpoint: '/api/user/profile',\r\n        method: 'GET',\r\n        userAgent: request.headers.get('user-agent'),\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      try {\r\n        // Verificar que el cliente administrativo esté disponible\r\n        if (!supabaseAdmin) {\r\n          console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile');\r\n\r\n          // Log de error de seguridad\r\n          securityLogger.logEvent('service_unavailable', 'high', {\r\n            service: 'supabase_admin',\r\n            endpoint: '/api/user/profile'\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Servicio de base de datos no disponible' },\r\n            { status: 503 }\r\n          );\r\n        }\r\n\r\n        // Autenticación con Clerk\r\n        const session = await auth();\r\n        if (!session?.user) {\r\n          // Log de intento de acceso no autorizado\r\n          securityLogger.logEvent('unauthorized_access', 'medium', {\r\n            endpoint: '/api/user/profile',\r\n            reason: 'no_session'\r\n          });\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Usuario no autenticado',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 401 });\r\n        }\r\n\r\n        // Buscar usuario en Supabase\r\n        const userId = session.user.id;\r\n        const { data: user, error } = await withDatabaseTimeout(\r\n          supabaseAdmin\r\n            .from('users')\r\n            .select('*')\r\n            .eq('clerk_id', userId)\r\n            .single(),\r\n          API_TIMEOUTS.database\r\n        );\r\n\r\n        if (error && error.code !== 'PGRST116') {\r\n          console.error('Error al obtener usuario:', error);\r\n\r\n          // Log de error de base de datos\r\n          securityLogger.logEvent('database_error', 'medium', {\r\n            error: error.message,\r\n            endpoint: '/api/user/profile',\r\n            operation: 'select_user',\r\n            userId: userId\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Error al obtener perfil de usuario' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        // Si no existe el usuario, crear uno demo\r\n        if (!user) {\r\n      const { data: newUser, error: createError } = await supabaseAdmin\r\n        .from('users')\r\n        .insert([\r\n          {\r\n            clerk_id: userId,\r\n            email: 'usuario@demo.com',\r\n            name: 'Usuario Demo',\r\n          },\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('Error al crear usuario demo:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear perfil de usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        user: newUser,\r\n      });\r\n    }\r\n\r\n        // Log de operación exitosa\r\n        securityLogger.logEvent('user_profile_retrieved', 'low', {\r\n          userId: userId,\r\n          hasUser: !!user\r\n        });\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          user,\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('Error en GET /api/user/profile:', error);\r\n\r\n        // Log de error de seguridad\r\n        securityLogger.logEvent('api_error', 'high', {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n          endpoint: '/api/user/profile',\r\n          stack: error instanceof Error ? error.stack : undefined\r\n        });\r\n\r\n        return NextResponse.json(\r\n          { error: 'Error interno del servidor' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/user/profile', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar perfil de usuario\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticación con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const userId = session.user.id;\r\n    const body = await request.json();\r\n\r\n    // Validar datos requeridos\r\n    const { name, email, phone } = body;\r\n    if (!name || !email) {\r\n      return NextResponse.json(\r\n        { error: 'Nombre y email son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar usuario en Supabase\r\n    const { data: updatedUser, error } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        name,\r\n        email,\r\n        phone: phone || null,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('clerk_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar usuario:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar perfil de usuario' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad de actualización de perfil\r\n    const requestInfo = getRequestInfo(request);\r\n    await logProfileActivity(\r\n      updatedUser.id,\r\n      'update_profile',\r\n      {\r\n        fields_updated: Object.keys(body),\r\n        previous_name: updatedUser.name !== name ? 'changed' : 'unchanged',\r\n        previous_email: updatedUser.email !== email ? 'changed' : 'unchanged',\r\n        previous_phone: updatedUser.phone !== phone ? 'changed' : 'unchanged',\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: updatedUser,\r\n      message: 'Perfil actualizado correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/profile:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}