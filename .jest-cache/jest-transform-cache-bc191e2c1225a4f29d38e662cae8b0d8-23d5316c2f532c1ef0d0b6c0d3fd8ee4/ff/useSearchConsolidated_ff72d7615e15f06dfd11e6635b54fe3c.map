{"version":3,"names":["useSearchConsolidated","options","cov_1ffowdwd1d","b","f","debounceMs","_shop","SEARCH_CONSTANTS","DEBOUNCE_MS","maxSuggestions","MAX_SUGGESTIONS","searchLimit","SEARCH_LIMIT","saveRecentSearches","enablePrefetch","enableAnalytics","onSearch","onSuggestionSelect","s","query","setQuery","_react","useState","debouncedQuery","setDebouncedQuery","hasSearched","setHasSearched","recentSearches","setRecentSearches","queryClient","_reactquery","useQueryClient","router","_navigation","useRouter","abortControllerRef","useRef","lastQueryRef","updateDebouncedQuery","_usedebounce","useDebouncedCallback","value","trim","current","maxWait","leading","trailing","data","searchResults","isLoading","error","isFetching","isStale","dataUpdatedAt","useQuery","queryKey","_queryclient","searchQueryKeys","search","queryFn","signal","searchQuery","abort","AbortController","url","encodeURIComponent","response","fetch","method","headers","ok","Error","status","json","Array","isArray","products","name","enabled","length","searchQueryConfig","suggestions","useMemo","allSuggestions","productSuggestions","slice","map","product","id","text","type","category","productId","toString","push","recentSuggestions","filter","recent","toLowerCase","includes","searchWithDebounce","useCallback","prefetchUrl","prefetch","executeSearch","prev","newSearches","MAX_RECENT_SEARCHES","params","URLSearchParams","set","searchUrl","console","selectSuggestion","suggestion","productUrl","clearSearch","invalidateSearch","invalidateQueries","prefetchSearch","prefetchQuery","navigateToSearch","navigateToProduct","productSlug","useEffect","results","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\optimized\\useSearchConsolidated.ts"],"sourcesContent":["// ===================================\r\n// HOOK CONSOLIDADO Y OPTIMIZADO: useSearchConsolidated\r\n// ===================================\r\n// Versión optimizada que consolida useSearch y useSearchOptimized\r\n// eliminando duplicaciones y mejorando performance\r\n\r\nimport { useState, useCallback, useEffect, useRef, useMemo } from 'react';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { useRouter } from 'next/navigation';\r\nimport { ProductWithCategory } from '@/types/api';\r\nimport { searchQueryKeys, searchQueryConfig } from '@/lib/query-client';\r\nimport { SEARCH_CONSTANTS } from '@/constants/shop';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface SearchSuggestion {\r\n  id: string;\r\n  text: string;\r\n  type: 'product' | 'category' | 'brand' | 'recent' | 'trending';\r\n  category?: string;\r\n  productId?: string;\r\n  count?: number;\r\n}\r\n\r\nexport interface UseSearchConsolidatedOptions {\r\n  /** Tiempo de debounce en milisegundos */\r\n  debounceMs?: number;\r\n  /** Número máximo de sugerencias */\r\n  maxSuggestions?: number;\r\n  /** Límite de resultados de búsqueda */\r\n  searchLimit?: number;\r\n  /** Guardar búsquedas recientes */\r\n  saveRecentSearches?: boolean;\r\n  /** Habilitar prefetch de sugerencias */\r\n  enablePrefetch?: boolean;\r\n  /** Habilitar analytics tracking */\r\n  enableAnalytics?: boolean;\r\n  /** Callback cuando se realiza una búsqueda */\r\n  onSearch?: (query: string, results: ProductWithCategory[]) => void;\r\n  /** Callback cuando se selecciona una sugerencia */\r\n  onSuggestionSelect?: (suggestion: SearchSuggestion) => void;\r\n}\r\n\r\nexport interface UseSearchConsolidatedReturn {\r\n  // Estado de búsqueda\r\n  query: string;\r\n  results: ProductWithCategory[];\r\n  suggestions: SearchSuggestion[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  hasSearched: boolean;\r\n  \r\n  // Estados de TanStack Query\r\n  isFetching: boolean;\r\n  isStale: boolean;\r\n  dataUpdatedAt: number;\r\n  \r\n  // Funciones principales\r\n  searchWithDebounce: (query: string) => void;\r\n  executeSearch: (query: string, category?: string) => Promise<void>;\r\n  selectSuggestion: (suggestion: SearchSuggestion) => void;\r\n  clearSearch: () => void;\r\n  \r\n  // Utilidades de cache\r\n  invalidateSearch: (query: string) => void;\r\n  prefetchSearch: (query: string) => void;\r\n  \r\n  // Funciones de navegación\r\n  navigateToSearch: (query: string, category?: string) => void;\r\n  navigateToProduct: (productId: string, productSlug?: string) => void;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL CONSOLIDADO\r\n// ===================================\r\n\r\nexport function useSearchConsolidated(\r\n  options: UseSearchConsolidatedOptions = {}\r\n): UseSearchConsolidatedReturn {\r\n  \r\n  // Configuración con valores por defecto\r\n  const {\r\n    debounceMs = SEARCH_CONSTANTS.DEBOUNCE_MS,\r\n    maxSuggestions = SEARCH_CONSTANTS.MAX_SUGGESTIONS,\r\n    searchLimit = SEARCH_CONSTANTS.SEARCH_LIMIT,\r\n    saveRecentSearches = true,\r\n    enablePrefetch = true,\r\n    enableAnalytics = true,\r\n    onSearch,\r\n    onSuggestionSelect,\r\n  } = options;\r\n\r\n  // ===================================\r\n  // ESTADO LOCAL OPTIMIZADO\r\n  // ===================================\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [debouncedQuery, setDebouncedQuery] = useState('');\r\n  const [hasSearched, setHasSearched] = useState(false);\r\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\r\n\r\n  // Referencias para optimización\r\n  const queryClient = useQueryClient();\r\n  const router = useRouter();\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const lastQueryRef = useRef<string>('');\r\n\r\n  // ===================================\r\n  // DEBOUNCED QUERY UPDATE\r\n  // ===================================\r\n\r\n  const updateDebouncedQuery = useDebouncedCallback(\r\n    (value: string) => {\r\n      setDebouncedQuery(value);\r\n      \r\n      // Analytics tracking optimizado\r\n      if (enableAnalytics && value.trim()) {\r\n        // Solo track si es diferente a la última query\r\n        if (value !== lastQueryRef.current) {\r\n          lastQueryRef.current = value;\r\n          // Aquí se podría integrar con analytics\r\n        }\r\n      }\r\n    },\r\n    debounceMs,\r\n    {\r\n      maxWait: 2000,\r\n      leading: false,\r\n      trailing: true,\r\n    }\r\n  );\r\n\r\n  // ===================================\r\n  // TANSTACK QUERY OPTIMIZADA\r\n  // ===================================\r\n\r\n  const { \r\n    data: searchResults, \r\n    isLoading, \r\n    error, \r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt \r\n  } = useQuery({\r\n    queryKey: searchQueryKeys.search(debouncedQuery),\r\n    queryFn: async ({ queryKey, signal }) => {\r\n      const [, , searchQuery] = queryKey;\r\n      if (!searchQuery?.trim()) {return [];}\r\n\r\n      // Cancelar request anterior\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      try {\r\n        const url = `/api/search?q=${encodeURIComponent(searchQuery)}&limit=${maxSuggestions}`;\r\n        \r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          signal: signal || abortControllerRef.current.signal,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        \r\n        // Manejo inteligente de múltiples formatos de respuesta\r\n        if (Array.isArray(data)) {\r\n          return data;\r\n        } else if (data.products && Array.isArray(data.products)) {\r\n          return data.products;\r\n        } else if (data.data && Array.isArray(data.data)) {\r\n          return data.data;\r\n        }\r\n        \r\n        return [];\r\n      } catch (error) {\r\n        if (error instanceof Error && error.name === 'AbortError') {\r\n          return [];\r\n        }\r\n        throw error;\r\n      }\r\n    },\r\n    enabled: !!debouncedQuery?.trim() && debouncedQuery.length >= 2,\r\n    ...searchQueryConfig,\r\n  });\r\n\r\n  // ===================================\r\n  // SUGERENCIAS OPTIMIZADAS\r\n  // ===================================\r\n\r\n  const suggestions = useMemo<SearchSuggestion[]>(() => {\r\n    const allSuggestions: SearchSuggestion[] = [];\r\n\r\n    // Sugerencias de productos\r\n    if (searchResults && searchResults.length > 0) {\r\n      const productSuggestions = searchResults.slice(0, maxSuggestions).map(product => ({\r\n        id: `product-${product.id}`,\r\n        text: product.name,\r\n        type: 'product' as const,\r\n        category: product.category?.name,\r\n        productId: product.id.toString(),\r\n      }));\r\n      allSuggestions.push(...productSuggestions);\r\n    }\r\n\r\n    // Sugerencias de búsquedas recientes\r\n    if (query.trim() && recentSearches.length > 0) {\r\n      const recentSuggestions = recentSearches\r\n        .filter(recent => \r\n          recent.toLowerCase().includes(query.toLowerCase()) && \r\n          recent !== query\r\n        )\r\n        .slice(0, 3)\r\n        .map(recent => ({\r\n          id: `recent-${recent}`,\r\n          text: recent,\r\n          type: 'recent' as const,\r\n        }));\r\n      allSuggestions.push(...recentSuggestions);\r\n    }\r\n\r\n    return allSuggestions.slice(0, maxSuggestions);\r\n  }, [searchResults, query, recentSearches, maxSuggestions]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE BÚSQUEDA OPTIMIZADAS\r\n  // ===================================\r\n\r\n  const searchWithDebounce = useCallback((searchQuery: string) => {\r\n    setQuery(searchQuery);\r\n    updateDebouncedQuery(searchQuery);\r\n\r\n    // Prefetch optimizado\r\n    if (enablePrefetch && searchQuery.trim().length >= 1) {\r\n      const prefetchUrl = `/search?q=${encodeURIComponent(searchQuery.trim())}`;\r\n      router.prefetch(prefetchUrl);\r\n    }\r\n  }, [updateDebouncedQuery, enablePrefetch, router]);\r\n\r\n  const executeSearch = useCallback(async (searchQuery: string, category?: string) => {\r\n    if (!searchQuery.trim()) {return;}\r\n\r\n    try {\r\n      setHasSearched(true);\r\n      \r\n      // Guardar en búsquedas recientes\r\n      if (saveRecentSearches) {\r\n        setRecentSearches(prev => {\r\n          const newSearches = [searchQuery.trim(), ...prev.filter(s => s !== searchQuery.trim())];\r\n          return newSearches.slice(0, SEARCH_CONSTANTS.MAX_RECENT_SEARCHES);\r\n        });\r\n      }\r\n\r\n      // Construir URL de navegación\r\n      const params = new URLSearchParams();\r\n      params.set('q', searchQuery.trim());\r\n      if (category && category !== 'all') {\r\n        params.set('category', category);\r\n      }\r\n      \r\n      const searchUrl = `/search?${params.toString()}`;\r\n      router.push(searchUrl);\r\n\r\n      // Callback externo\r\n      if (onSearch && searchResults) {\r\n        onSearch(searchQuery, searchResults);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error en executeSearch:', error);\r\n    }\r\n  }, [saveRecentSearches, router, onSearch, searchResults]);\r\n\r\n  const selectSuggestion = useCallback((suggestion: SearchSuggestion) => {\r\n    if (suggestion.type === 'product' && suggestion.productId) {\r\n      const productUrl = `/products/${suggestion.productId}`;\r\n      router.push(productUrl);\r\n    } else {\r\n      executeSearch(suggestion.text);\r\n    }\r\n\r\n    if (onSuggestionSelect) {\r\n      onSuggestionSelect(suggestion);\r\n    }\r\n  }, [router, executeSearch, onSuggestionSelect]);\r\n\r\n  const clearSearch = useCallback(() => {\r\n    setQuery('');\r\n    setDebouncedQuery('');\r\n    setHasSearched(false);\r\n    \r\n    // Cancelar requests pendientes\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort();\r\n    }\r\n  }, []);\r\n\r\n  // ===================================\r\n  // UTILIDADES DE CACHE\r\n  // ===================================\r\n\r\n  const invalidateSearch = useCallback((searchQuery: string) => {\r\n    queryClient.invalidateQueries({ \r\n      queryKey: searchQueryKeys.search(searchQuery) \r\n    });\r\n  }, [queryClient]);\r\n\r\n  const prefetchSearch = useCallback((searchQuery: string) => {\r\n    if (!searchQuery.trim()) {return;}\r\n    \r\n    queryClient.prefetchQuery({\r\n      queryKey: searchQueryKeys.search(searchQuery),\r\n      queryFn: async () => {\r\n        const url = `/api/search?q=${encodeURIComponent(searchQuery)}&limit=${maxSuggestions}`;\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        return data.products || data.data || data || [];\r\n      },\r\n      ...searchQueryConfig,\r\n    });\r\n  }, [queryClient, maxSuggestions]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE NAVEGACIÓN\r\n  // ===================================\r\n\r\n  const navigateToSearch = useCallback((searchQuery: string, category?: string) => {\r\n    executeSearch(searchQuery, category);\r\n  }, [executeSearch]);\r\n\r\n  const navigateToProduct = useCallback((productId: string, productSlug?: string) => {\r\n    const productUrl = productSlug \r\n      ? `/products/${productSlug}` \r\n      : `/products/${productId}`;\r\n    router.push(productUrl);\r\n  }, [router]);\r\n\r\n  // ===================================\r\n  // CLEANUP\r\n  // ===================================\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // ===================================\r\n  // RETURN OPTIMIZADO\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado de búsqueda\r\n    query,\r\n    results: searchResults || [],\r\n    suggestions,\r\n    isLoading,\r\n    error: error?.message || null,\r\n    hasSearched,\r\n    \r\n    // Estados de TanStack Query\r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt: dataUpdatedAt || 0,\r\n    \r\n    // Funciones principales\r\n    searchWithDebounce,\r\n    executeSearch,\r\n    selectSuggestion,\r\n    clearSearch,\r\n    \r\n    // Utilidades de cache\r\n    invalidateSearch,\r\n    prefetchSearch,\r\n    \r\n    // Funciones de navegación\r\n    navigateToSearch,\r\n    navigateToProduct,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}