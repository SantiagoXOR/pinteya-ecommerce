{"version":3,"names":["CacheLayer","cov_1fa4bqrkps","f","s","LAYER_CONFIGS","MultiLayerCacheManager","MultiLayerCacheUtils","multiLayerCacheManager","enabled","priority","ttl","maxSize","maxEntries","compressionEnabled","encryptionEnabled","healthCheckInterval","fallbackLayer","MemoryCache","constructor","b","cache","Map","accessOrder","accessCounter","get","key","entry","Date","now","timestamp","delete","set","data","size","evictLRU","deleted","clear","oldestKey","oldestAccess","Infinity","access","getStats","JSON","stringify","values","length","entries","redis","_redis","getRedisClient","layerHealth","layerMetrics","healthCheckIntervals","memoryCache","initializeHealthChecks","getInstance","instance","layers","targetLayers","getEnabledLayersByPriority","layer","isLayerHealthy","startTime","result","getFromLayer","recordMetric","propagateToHigherPriorityLayers","error","_logger","logger","LogCategory","CACHE","markLayerUnhealthy","setPromises","map","layerTtl","setToLayer","debug","Promise","allSettled","deletePromises","deleteFromLayer","invalidatePattern","pattern","invalidatePromises","invalidatePatternInLayer","redisValue","parse","setex","del","keys","currentLayer","currentPriority","higherPriorityLayers","filter","Object","_","config","sort","a","__","health","healthy","latency","errorRate","lastCheck","errors","push","message","slice","type","metrics","hits","misses","hitRate","avgLatency","totalRequests","bytesStored","entriesCount","lastUpdated","forEach","interval","setInterval","performHealthCheck","testKey","testData","test","retrieved","getLayerHealth","getLayerMetrics","clearAll","clearPromises","flushdb","destroy","clearInterval","getWithFallback","fetcher","cached","undefined","setWithLayerTTLs","layerTTLs","getOverallStats","totalHits","totalMisses","healthyLayers","metric","h","overallHitRate","totalLayers"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\multi-layer-cache-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - MULTI-LAYER CACHE MANAGER\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\nimport { advancedCacheStrategyManager } from './advanced-cache-strategy-manager';\r\n\r\n/**\r\n * Capas de cache disponibles\r\n */\r\nexport enum CacheLayer {\r\n  MEMORY = 'memory',           // Cache en memoria (más rápido)\r\n  REDIS = 'redis',            // Cache Redis (persistente)\r\n  CDN = 'cdn',                // Cache CDN (distribuido)\r\n  BROWSER = 'browser',        // Cache del navegador\r\n  EDGE = 'edge'               // Cache en edge locations\r\n}\r\n\r\n/**\r\n * Configuración de capa de cache\r\n */\r\nexport interface CacheLayerConfig {\r\n  enabled: boolean;\r\n  priority: number;           // Prioridad (1 = más alta)\r\n  ttl: number;               // TTL por defecto\r\n  maxSize?: number;          // Tamaño máximo en bytes\r\n  maxEntries?: number;       // Número máximo de entradas\r\n  compressionEnabled?: boolean;\r\n  encryptionEnabled?: boolean;\r\n  fallbackLayer?: CacheLayer;\r\n  healthCheckInterval?: number;\r\n}\r\n\r\n/**\r\n * Estado de salud de una capa\r\n */\r\nexport interface LayerHealth {\r\n  layer: CacheLayer;\r\n  healthy: boolean;\r\n  latency: number;\r\n  errorRate: number;\r\n  lastCheck: number;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Métricas de capa de cache\r\n */\r\nexport interface LayerMetrics {\r\n  layer: CacheLayer;\r\n  hits: number;\r\n  misses: number;\r\n  hitRate: number;\r\n  avgLatency: number;\r\n  totalRequests: number;\r\n  bytesStored: number;\r\n  entriesCount: number;\r\n  lastUpdated: number;\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas por capa\r\n */\r\nexport const LAYER_CONFIGS: Record<CacheLayer, CacheLayerConfig> = {\r\n  [CacheLayer.MEMORY]: {\r\n    enabled: true,\r\n    priority: 1,\r\n    ttl: 300,                 // 5 minutos\r\n    maxSize: 50 * 1024 * 1024, // 50MB\r\n    maxEntries: 10000,\r\n    compressionEnabled: false,\r\n    encryptionEnabled: false,\r\n    healthCheckInterval: 30000 // 30 segundos\r\n  },\r\n  \r\n  [CacheLayer.REDIS]: {\r\n    enabled: true,\r\n    priority: 2,\r\n    ttl: 1800,                // 30 minutos\r\n    maxSize: 500 * 1024 * 1024, // 500MB\r\n    compressionEnabled: true,\r\n    encryptionEnabled: false,\r\n    fallbackLayer: CacheLayer.MEMORY,\r\n    healthCheckInterval: 60000 // 1 minuto\r\n  },\r\n  \r\n  [CacheLayer.CDN]: {\r\n    enabled: true,\r\n    priority: 3,\r\n    ttl: 3600,                // 1 hora\r\n    compressionEnabled: true,\r\n    encryptionEnabled: false,\r\n    fallbackLayer: CacheLayer.REDIS,\r\n    healthCheckInterval: 300000 // 5 minutos\r\n  },\r\n  \r\n  [CacheLayer.BROWSER]: {\r\n    enabled: true,\r\n    priority: 4,\r\n    ttl: 86400,               // 24 horas\r\n    compressionEnabled: false,\r\n    encryptionEnabled: false,\r\n    healthCheckInterval: 600000 // 10 minutos\r\n  },\r\n  \r\n  [CacheLayer.EDGE]: {\r\n    enabled: false,           // Deshabilitado por defecto\r\n    priority: 5,\r\n    ttl: 7200,                // 2 horas\r\n    compressionEnabled: true,\r\n    encryptionEnabled: false,\r\n    fallbackLayer: CacheLayer.CDN,\r\n    healthCheckInterval: 300000 // 5 minutos\r\n  }\r\n};\r\n\r\n/**\r\n * Cache en memoria con LRU\r\n */\r\nclass MemoryCache {\r\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\r\n  private accessOrder = new Map<string, number>();\r\n  private accessCounter = 0;\r\n  private maxSize: number;\r\n  private maxEntries: number;\r\n\r\n  constructor(maxSize: number = 50 * 1024 * 1024, maxEntries: number = 10000) {\r\n    this.maxSize = maxSize;\r\n    this.maxEntries = maxEntries;\r\n  }\r\n\r\n  get<T>(key: string): T | null {\r\n    const entry = this.cache.get(key);\r\n    if (!entry) {return null;}\r\n\r\n    // Verificar TTL\r\n    if (Date.now() - entry.timestamp > entry.ttl * 1000) {\r\n      this.cache.delete(key);\r\n      this.accessOrder.delete(key);\r\n      return null;\r\n    }\r\n\r\n    // Actualizar orden de acceso\r\n    this.accessOrder.set(key, ++this.accessCounter);\r\n    return entry.data;\r\n  }\r\n\r\n  set<T>(key: string, data: T, ttl: number): void {\r\n    // Verificar límites\r\n    if (this.cache.size >= this.maxEntries) {\r\n      this.evictLRU();\r\n    }\r\n\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n    this.accessOrder.set(key, ++this.accessCounter);\r\n  }\r\n\r\n  delete(key: string): boolean {\r\n    const deleted = this.cache.delete(key);\r\n    this.accessOrder.delete(key);\r\n    return deleted;\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.accessOrder.clear();\r\n    this.accessCounter = 0;\r\n  }\r\n\r\n  private evictLRU(): void {\r\n    let oldestKey = '';\r\n    let oldestAccess = Infinity;\r\n\r\n    for (const [key, access] of this.accessOrder) {\r\n      if (access < oldestAccess) {\r\n        oldestAccess = access;\r\n        oldestKey = key;\r\n      }\r\n    }\r\n\r\n    if (oldestKey) {\r\n      this.cache.delete(oldestKey);\r\n      this.accessOrder.delete(oldestKey);\r\n    }\r\n  }\r\n\r\n  getStats(): { size: number; entries: number } {\r\n    return {\r\n      size: JSON.stringify([...this.cache.values()]).length,\r\n      entries: this.cache.size\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Manager de cache multi-capa\r\n */\r\nexport class MultiLayerCacheManager {\r\n  private static instance: MultiLayerCacheManager;\r\n  private memoryCache: MemoryCache;\r\n  private redis = getRedisClient();\r\n  private layerHealth = new Map<CacheLayer, LayerHealth>();\r\n  private layerMetrics = new Map<CacheLayer, LayerMetrics>();\r\n  private healthCheckIntervals = new Map<CacheLayer, NodeJS.Timeout>();\r\n\r\n  private constructor() {\r\n    this.memoryCache = new MemoryCache(\r\n      LAYER_CONFIGS[CacheLayer.MEMORY].maxSize,\r\n      LAYER_CONFIGS[CacheLayer.MEMORY].maxEntries\r\n    );\r\n    this.initializeHealthChecks();\r\n  }\r\n\r\n  static getInstance(): MultiLayerCacheManager {\r\n    if (!MultiLayerCacheManager.instance) {\r\n      MultiLayerCacheManager.instance = new MultiLayerCacheManager();\r\n    }\r\n    return MultiLayerCacheManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos del cache multi-capa\r\n   */\r\n  async get<T>(key: string, layers?: CacheLayer[]): Promise<T | null> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    for (const layer of targetLayers) {\r\n      if (!this.isLayerHealthy(layer)) {continue;}\r\n\r\n      try {\r\n        const startTime = Date.now();\r\n        const result = await this.getFromLayer<T>(key, layer);\r\n        \r\n        if (result !== null) {\r\n          // Registrar hit\r\n          this.recordMetric(layer, 'hit', Date.now() - startTime);\r\n          \r\n          // Propagar a capas de mayor prioridad\r\n          await this.propagateToHigherPriorityLayers(key, result, layer);\r\n          \r\n          return result;\r\n        } else {\r\n          // Registrar miss\r\n          this.recordMetric(layer, 'miss', Date.now() - startTime);\r\n        }\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error en capa ${layer}:`, error as Error);\r\n        this.markLayerUnhealthy(layer, error as Error);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Guarda datos en el cache multi-capa\r\n   */\r\n  async set<T>(key: string, data: T, ttl?: number, layers?: CacheLayer[]): Promise<void> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    const setPromises = targetLayers.map(async (layer) => {\r\n      if (!this.isLayerHealthy(layer)) {return;}\r\n\r\n      try {\r\n        const layerTtl = ttl || LAYER_CONFIGS[layer].ttl;\r\n        await this.setToLayer(key, data, layerTtl, layer);\r\n        logger.debug(LogCategory.CACHE, `Datos guardados en capa ${layer}: ${key}`);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error guardando en capa ${layer}:`, error as Error);\r\n        this.markLayerUnhealthy(layer, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(setPromises);\r\n  }\r\n\r\n  /**\r\n   * Elimina datos del cache multi-capa\r\n   */\r\n  async delete(key: string, layers?: CacheLayer[]): Promise<void> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    const deletePromises = targetLayers.map(async (layer) => {\r\n      try {\r\n        await this.deleteFromLayer(key, layer);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error eliminando de capa ${layer}:`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(deletePromises);\r\n  }\r\n\r\n  /**\r\n   * Invalida cache por patrón\r\n   */\r\n  async invalidatePattern(pattern: string, layers?: CacheLayer[]): Promise<void> {\r\n    const targetLayers = layers || this.getEnabledLayersByPriority();\r\n    \r\n    const invalidatePromises = targetLayers.map(async (layer) => {\r\n      try {\r\n        await this.invalidatePatternInLayer(pattern, layer);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error invalidando patrón en capa ${layer}:`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(invalidatePromises);\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos de una capa específica\r\n   */\r\n  private async getFromLayer<T>(key: string, layer: CacheLayer): Promise<T | null> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        return this.memoryCache.get<T>(key);\r\n      \r\n      case CacheLayer.REDIS:\r\n        const redisValue = await this.redis.get(key);\r\n        return redisValue ? JSON.parse(redisValue) : null;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementación CDN (placeholder)\r\n        return null;\r\n      \r\n      case CacheLayer.BROWSER:\r\n        // Cache del navegador se maneja en el cliente\r\n        return null;\r\n      \r\n      case CacheLayer.EDGE:\r\n        // Implementación edge cache (placeholder)\r\n        return null;\r\n      \r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guarda datos en una capa específica\r\n   */\r\n  private async setToLayer<T>(key: string, data: T, ttl: number, layer: CacheLayer): Promise<void> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        this.memoryCache.set(key, data, ttl);\r\n        break;\r\n      \r\n      case CacheLayer.REDIS:\r\n        await this.redis.setex(key, ttl, JSON.stringify(data));\r\n        break;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementación CDN (placeholder)\r\n        break;\r\n      \r\n      case CacheLayer.BROWSER:\r\n        // Cache del navegador se maneja en el cliente\r\n        break;\r\n      \r\n      case CacheLayer.EDGE:\r\n        // Implementación edge cache (placeholder)\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina datos de una capa específica\r\n   */\r\n  private async deleteFromLayer(key: string, layer: CacheLayer): Promise<void> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        this.memoryCache.delete(key);\r\n        break;\r\n      \r\n      case CacheLayer.REDIS:\r\n        await this.redis.del(key);\r\n        break;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementación CDN (placeholder)\r\n        break;\r\n      \r\n      case CacheLayer.BROWSER:\r\n        // Cache del navegador se maneja en el cliente\r\n        break;\r\n      \r\n      case CacheLayer.EDGE:\r\n        // Implementación edge cache (placeholder)\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalida patrón en una capa específica\r\n   */\r\n  private async invalidatePatternInLayer(pattern: string, layer: CacheLayer): Promise<void> {\r\n    switch (layer) {\r\n      case CacheLayer.MEMORY:\r\n        // Implementar invalidación por patrón en memoria\r\n        break;\r\n      \r\n      case CacheLayer.REDIS:\r\n        const keys = await this.redis.keys(pattern);\r\n        if (keys.length > 0) {\r\n          await this.redis.del(...keys);\r\n        }\r\n        break;\r\n      \r\n      case CacheLayer.CDN:\r\n        // Implementación CDN (placeholder)\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Propaga datos a capas de mayor prioridad\r\n   */\r\n  private async propagateToHigherPriorityLayers<T>(\r\n    key: string,\r\n    data: T,\r\n    currentLayer: CacheLayer\r\n  ): Promise<void> {\r\n    const currentPriority = LAYER_CONFIGS[currentLayer].priority;\r\n    const higherPriorityLayers = this.getEnabledLayersByPriority()\r\n      .filter(layer => LAYER_CONFIGS[layer].priority < currentPriority);\r\n\r\n    for (const layer of higherPriorityLayers) {\r\n      try {\r\n        const ttl = LAYER_CONFIGS[layer].ttl;\r\n        await this.setToLayer(key, data, ttl, layer);\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error propagando a capa ${layer}:`, error as Error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene capas habilitadas ordenadas por prioridad\r\n   */\r\n  private getEnabledLayersByPriority(): CacheLayer[] {\r\n    return Object.entries(LAYER_CONFIGS)\r\n      .filter(([_, config]) => config.enabled)\r\n      .sort(([_, a], [__, b]) => a.priority - b.priority)\r\n      .map(([layer, _]) => layer as CacheLayer);\r\n  }\r\n\r\n  /**\r\n   * Verifica si una capa está saludable\r\n   */\r\n  private isLayerHealthy(layer: CacheLayer): boolean {\r\n    const health = this.layerHealth.get(layer);\r\n    return health ? health.healthy : true; // Asumir saludable si no hay datos\r\n  }\r\n\r\n  /**\r\n   * Marca una capa como no saludable\r\n   */\r\n  private markLayerUnhealthy(layer: CacheLayer, error: Error): void {\r\n    const health = this.layerHealth.get(layer) || {\r\n      layer,\r\n      healthy: true,\r\n      latency: 0,\r\n      errorRate: 0,\r\n      lastCheck: Date.now(),\r\n      errors: []\r\n    };\r\n\r\n    health.healthy = false;\r\n    health.errors.push(error.message);\r\n    health.lastCheck = Date.now();\r\n    \r\n    // Mantener solo los últimos 10 errores\r\n    if (health.errors.length > 10) {\r\n      health.errors = health.errors.slice(-10);\r\n    }\r\n\r\n    this.layerHealth.set(layer, health);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de una capa\r\n   */\r\n  private recordMetric(layer: CacheLayer, type: 'hit' | 'miss', latency: number): void {\r\n    const metrics = this.layerMetrics.get(layer) || {\r\n      layer,\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      avgLatency: 0,\r\n      totalRequests: 0,\r\n      bytesStored: 0,\r\n      entriesCount: 0,\r\n      lastUpdated: Date.now()\r\n    };\r\n\r\n    metrics.totalRequests++;\r\n    if (type === 'hit') {\r\n      metrics.hits++;\r\n    } else {\r\n      metrics.misses++;\r\n    }\r\n\r\n    metrics.hitRate = (metrics.hits / metrics.totalRequests) * 100;\r\n    metrics.avgLatency = ((metrics.avgLatency * (metrics.totalRequests - 1)) + latency) / metrics.totalRequests;\r\n    metrics.lastUpdated = Date.now();\r\n\r\n    this.layerMetrics.set(layer, metrics);\r\n  }\r\n\r\n  /**\r\n   * Inicializa health checks para todas las capas\r\n   */\r\n  private initializeHealthChecks(): void {\r\n    Object.entries(LAYER_CONFIGS).forEach(([layer, config]) => {\r\n      if (config.enabled && config.healthCheckInterval) {\r\n        const interval = setInterval(() => {\r\n          this.performHealthCheck(layer as CacheLayer);\r\n        }, config.healthCheckInterval);\r\n        \r\n        this.healthCheckIntervals.set(layer as CacheLayer, interval);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Realiza health check de una capa\r\n   */\r\n  private async performHealthCheck(layer: CacheLayer): Promise<void> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Test básico de la capa\r\n      const testKey = `health_check_${layer}_${Date.now()}`;\r\n      const testData = { test: true, timestamp: Date.now() };\r\n      \r\n      await this.setToLayer(testKey, testData, 60, layer);\r\n      const retrieved = await this.getFromLayer(testKey, layer);\r\n      await this.deleteFromLayer(testKey, layer);\r\n      \r\n      const latency = Date.now() - startTime;\r\n      \r\n      // Actualizar estado de salud\r\n      const health: LayerHealth = {\r\n        layer,\r\n        healthy: retrieved !== null,\r\n        latency,\r\n        errorRate: 0, // Calcular basado en métricas históricas\r\n        lastCheck: Date.now(),\r\n        errors: []\r\n      };\r\n      \r\n      this.layerHealth.set(layer, health);\r\n      \r\n    } catch (error) {\r\n      this.markLayerUnhealthy(layer, error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene estado de salud de todas las capas\r\n   */\r\n  getLayerHealth(): Record<CacheLayer, LayerHealth> {\r\n    const result: Record<CacheLayer, LayerHealth> = {} as any;\r\n    this.layerHealth.forEach((health, layer) => {\r\n      result[layer] = health;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas de todas las capas\r\n   */\r\n  getLayerMetrics(): Record<CacheLayer, LayerMetrics> {\r\n    const result: Record<CacheLayer, LayerMetrics> = {} as any;\r\n    this.layerMetrics.forEach((metrics, layer) => {\r\n      result[layer] = metrics;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Limpia todos los caches\r\n   */\r\n  async clearAll(): Promise<void> {\r\n    const clearPromises = this.getEnabledLayersByPriority().map(async (layer) => {\r\n      try {\r\n        switch (layer) {\r\n          case CacheLayer.MEMORY:\r\n            this.memoryCache.clear();\r\n            break;\r\n          case CacheLayer.REDIS:\r\n            await this.redis.flushdb();\r\n            break;\r\n        }\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error limpiando capa ${layer}:`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(clearPromises);\r\n  }\r\n\r\n  /**\r\n   * Destructor para limpiar recursos\r\n   */\r\n  destroy(): void {\r\n    this.healthCheckIntervals.forEach((interval) => {\r\n      clearInterval(interval);\r\n    });\r\n    this.healthCheckIntervals.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const multiLayerCacheManager = MultiLayerCacheManager.getInstance();\r\n\r\n/**\r\n * Utilidades para cache multi-capa\r\n */\r\nexport const MultiLayerCacheUtils = {\r\n  /**\r\n   * Cache con fallback automático\r\n   */\r\n  async getWithFallback<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    layers?: CacheLayer[]\r\n  ): Promise<T> {\r\n    // Intentar obtener del cache\r\n    const cached = await multiLayerCacheManager.get<T>(key, layers);\r\n    if (cached !== null) {return cached;}\r\n\r\n    // Si no está en cache, obtener de la fuente\r\n    const data = await fetcher();\r\n    await multiLayerCacheManager.set(key, data, undefined, layers);\r\n    return data;\r\n  },\r\n\r\n  /**\r\n   * Cache con TTL específico por capa\r\n   */\r\n  async setWithLayerTTLs<T>(\r\n    key: string,\r\n    data: T,\r\n    layerTTLs: Partial<Record<CacheLayer, number>>\r\n  ): Promise<void> {\r\n    const setPromises = Object.entries(layerTTLs).map(async ([layer, ttl]) => {\r\n      await multiLayerCacheManager.set(key, data, ttl, [layer as CacheLayer]);\r\n    });\r\n\r\n    await Promise.allSettled(setPromises);\r\n  },\r\n\r\n  /**\r\n   * Obtiene estadísticas generales del cache\r\n   */\r\n  getOverallStats(): {\r\n    totalHits: number;\r\n    totalMisses: number;\r\n    overallHitRate: number;\r\n    healthyLayers: number;\r\n    totalLayers: number;\r\n  } {\r\n    const metrics = multiLayerCacheManager.getLayerMetrics();\r\n    const health = multiLayerCacheManager.getLayerHealth();\r\n    \r\n    let totalHits = 0;\r\n    let totalMisses = 0;\r\n    let healthyLayers = 0;\r\n    \r\n    Object.values(metrics).forEach(metric => {\r\n      totalHits += metric.hits;\r\n      totalMisses += metric.misses;\r\n    });\r\n    \r\n    Object.values(health).forEach(h => {\r\n      if (h.healthy) {healthyLayers++;}\r\n    });\r\n    \r\n    const totalRequests = totalHits + totalMisses;\r\n    const overallHitRate = totalRequests > 0 ? (totalHits / totalRequests) * 100 : 0;\r\n    \r\n    return {\r\n      totalHits,\r\n      totalMisses,\r\n      overallHitRate,\r\n      healthyLayers,\r\n      totalLayers: Object.keys(LAYER_CONFIGS).length\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}