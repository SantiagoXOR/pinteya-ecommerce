{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\real-time-performance-monitor.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - REAL-TIME PERFORMANCE MONITOR\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\n\r\n/**\r\n * Métricas de performance en tiempo real\r\n */\r\nexport interface RealTimeMetrics {\r\n  timestamp: number;\r\n  responseTime: number;\r\n  throughput: number;\r\n  errorRate: number;\r\n  cpuUsage: number;\r\n  memoryUsage: number;\r\n  activeConnections: number;\r\n  queueSize: number;\r\n  cacheHitRate: number;\r\n  dbConnectionPool: number;\r\n}\r\n\r\n/**\r\n * Core Web Vitals en tiempo real\r\n */\r\nexport interface CoreWebVitals {\r\n  lcp: number;        // Largest Contentful Paint\r\n  fid: number;        // First Input Delay\r\n  cls: number;        // Cumulative Layout Shift\r\n  fcp: number;        // First Contentful Paint\r\n  ttfb: number;       // Time to First Byte\r\n  inp: number;        // Interaction to Next Paint\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Métricas de API en tiempo real\r\n */\r\nexport interface APIMetrics {\r\n  endpoint: string;\r\n  method: string;\r\n  responseTime: number;\r\n  statusCode: number;\r\n  requestSize: number;\r\n  responseSize: number;\r\n  userAgent: string;\r\n  ip: string;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Métricas de base de datos\r\n */\r\nexport interface DatabaseMetrics {\r\n  queryTime: number;\r\n  queryType: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE';\r\n  tableName: string;\r\n  rowsAffected: number;\r\n  connectionPoolSize: number;\r\n  activeConnections: number;\r\n  waitingConnections: number;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Alertas de performance\r\n */\r\nexport interface PerformanceAlert {\r\n  id: string;\r\n  type: 'performance' | 'error' | 'capacity' | 'availability';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  metric: string;\r\n  value: number;\r\n  threshold: number;\r\n  message: string;\r\n  timestamp: number;\r\n  resolved: boolean;\r\n  resolvedAt?: number;\r\n  escalated: boolean;\r\n  escalatedAt?: number;\r\n}\r\n\r\n/**\r\n * Configuración de umbrales\r\n */\r\nexport interface PerformanceThresholds {\r\n  responseTime: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  errorRate: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  cpuUsage: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  memoryUsage: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  coreWebVitals: {\r\n    lcp: { good: number; poor: number };\r\n    fid: { good: number; poor: number };\r\n    cls: { good: number; poor: number };\r\n    fcp: { good: number; poor: number };\r\n    ttfb: { good: number; poor: number };\r\n  };\r\n}\r\n\r\n/**\r\n * Configuración por defecto de umbrales\r\n */\r\nexport const DEFAULT_THRESHOLDS: PerformanceThresholds = {\r\n  responseTime: {\r\n    warning: 1000,    // 1 segundo\r\n    critical: 3000    // 3 segundos\r\n  },\r\n  errorRate: {\r\n    warning: 0.05,    // 5%\r\n    critical: 0.10    // 10%\r\n  },\r\n  cpuUsage: {\r\n    warning: 0.70,    // 70%\r\n    critical: 0.90    // 90%\r\n  },\r\n  memoryUsage: {\r\n    warning: 0.80,    // 80%\r\n    critical: 0.95    // 95%\r\n  },\r\n  coreWebVitals: {\r\n    lcp: { good: 2500, poor: 4000 },\r\n    fid: { good: 100, poor: 300 },\r\n    cls: { good: 0.1, poor: 0.25 },\r\n    fcp: { good: 1800, poor: 3000 },\r\n    ttfb: { good: 800, poor: 1800 }\r\n  }\r\n};\r\n\r\n/**\r\n * Monitor de performance en tiempo real\r\n */\r\nexport class RealTimePerformanceMonitor {\r\n  private static instance: RealTimePerformanceMonitor;\r\n  private redis = getRedisClient();\r\n  private thresholds: PerformanceThresholds = DEFAULT_THRESHOLDS;\r\n  private alerts: Map<string, PerformanceAlert> = new Map();\r\n  private metricsBuffer: RealTimeMetrics[] = [];\r\n  private webVitalsBuffer: CoreWebVitals[] = [];\r\n  private apiMetricsBuffer: APIMetrics[] = [];\r\n  private dbMetricsBuffer: DatabaseMetrics[] = [];\r\n  private subscribers: Set<(data: any) => void> = new Set();\r\n  private flushInterval?: NodeJS.Timeout;\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n\r\n  private constructor() {\r\n    this.startMonitoring();\r\n    this.startPeriodicFlush();\r\n  }\r\n\r\n  static getInstance(): RealTimePerformanceMonitor {\r\n    if (!RealTimePerformanceMonitor.instance) {\r\n      RealTimePerformanceMonitor.instance = new RealTimePerformanceMonitor();\r\n    }\r\n    return RealTimePerformanceMonitor.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicia el monitoreo en tiempo real\r\n   */\r\n  private startMonitoring(): void {\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.collectSystemMetrics();\r\n    }, 5000); // Cada 5 segundos\r\n\r\n    logger.info(LogCategory.MONITORING, 'Real-time performance monitoring started');\r\n  }\r\n\r\n  /**\r\n   * Inicia el flush periódico de métricas\r\n   */\r\n  private startPeriodicFlush(): void {\r\n    this.flushInterval = setInterval(() => {\r\n      this.flushMetricsToRedis();\r\n    }, 30000); // Cada 30 segundos\r\n  }\r\n\r\n  /**\r\n   * Recolecta métricas del sistema\r\n   */\r\n  private async collectSystemMetrics(): Promise<void> {\r\n    try {\r\n      const metrics: RealTimeMetrics = {\r\n        timestamp: Date.now(),\r\n        responseTime: await this.getAverageResponseTime(),\r\n        throughput: await this.getCurrentThroughput(),\r\n        errorRate: await this.getCurrentErrorRate(),\r\n        cpuUsage: await this.getCPUUsage(),\r\n        memoryUsage: await this.getMemoryUsage(),\r\n        activeConnections: await this.getActiveConnections(),\r\n        queueSize: await this.getQueueSize(),\r\n        cacheHitRate: await this.getCacheHitRate(),\r\n        dbConnectionPool: await this.getDBConnectionPoolSize()\r\n      };\r\n\r\n      this.metricsBuffer.push(metrics);\r\n      \r\n      // Mantener solo las últimas 100 métricas en buffer\r\n      if (this.metricsBuffer.length > 100) {\r\n        this.metricsBuffer = this.metricsBuffer.slice(-100);\r\n      }\r\n\r\n      // Verificar umbrales y generar alertas\r\n      await this.checkThresholds(metrics);\r\n\r\n      // Notificar a suscriptores\r\n      this.notifySubscribers('metrics', metrics);\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error collecting system metrics', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de Core Web Vitals\r\n   */\r\n  recordWebVitals(vitals: Omit<CoreWebVitals, 'timestamp'>): void {\r\n    const webVitals: CoreWebVitals = {\r\n      ...vitals,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.webVitalsBuffer.push(webVitals);\r\n    \r\n    // Mantener solo las últimas 50 métricas\r\n    if (this.webVitalsBuffer.length > 50) {\r\n      this.webVitalsBuffer = this.webVitalsBuffer.slice(-50);\r\n    }\r\n\r\n    // Verificar umbrales de Core Web Vitals\r\n    this.checkWebVitalsThresholds(webVitals);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('webVitals', webVitals);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de API\r\n   */\r\n  recordAPIMetrics(metrics: Omit<APIMetrics, 'timestamp'>): void {\r\n    const apiMetrics: APIMetrics = {\r\n      ...metrics,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.apiMetricsBuffer.push(apiMetrics);\r\n    \r\n    // Mantener solo las últimas 200 métricas\r\n    if (this.apiMetricsBuffer.length > 200) {\r\n      this.apiMetricsBuffer = this.apiMetricsBuffer.slice(-200);\r\n    }\r\n\r\n    // Verificar umbrales de API\r\n    this.checkAPIThresholds(apiMetrics);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('apiMetrics', apiMetrics);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de base de datos\r\n   */\r\n  recordDatabaseMetrics(metrics: Omit<DatabaseMetrics, 'timestamp'>): void {\r\n    const dbMetrics: DatabaseMetrics = {\r\n      ...metrics,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.dbMetricsBuffer.push(dbMetrics);\r\n    \r\n    // Mantener solo las últimas 100 métricas\r\n    if (this.dbMetricsBuffer.length > 100) {\r\n      this.dbMetricsBuffer = this.dbMetricsBuffer.slice(-100);\r\n    }\r\n\r\n    // Verificar umbrales de DB\r\n    this.checkDatabaseThresholds(dbMetrics);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('dbMetrics', dbMetrics);\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales y genera alertas\r\n   */\r\n  private async checkThresholds(metrics: RealTimeMetrics): Promise<void> {\r\n    // Verificar tiempo de respuesta\r\n    if (metrics.responseTime > this.thresholds.responseTime.critical) {\r\n      await this.createAlert('performance', 'critical', 'responseTime', metrics.responseTime, \r\n        this.thresholds.responseTime.critical, `Response time crítico: ${metrics.responseTime}ms`);\r\n    } else if (metrics.responseTime > this.thresholds.responseTime.warning) {\r\n      await this.createAlert('performance', 'medium', 'responseTime', metrics.responseTime, \r\n        this.thresholds.responseTime.warning, `Response time alto: ${metrics.responseTime}ms`);\r\n    }\r\n\r\n    // Verificar tasa de errores\r\n    if (metrics.errorRate > this.thresholds.errorRate.critical) {\r\n      await this.createAlert('error', 'critical', 'errorRate', metrics.errorRate, \r\n        this.thresholds.errorRate.critical, `Tasa de errores crítica: ${(metrics.errorRate * 100).toFixed(1)}%`);\r\n    } else if (metrics.errorRate > this.thresholds.errorRate.warning) {\r\n      await this.createAlert('error', 'medium', 'errorRate', metrics.errorRate, \r\n        this.thresholds.errorRate.warning, `Tasa de errores alta: ${(metrics.errorRate * 100).toFixed(1)}%`);\r\n    }\r\n\r\n    // Verificar uso de CPU\r\n    if (metrics.cpuUsage > this.thresholds.cpuUsage.critical) {\r\n      await this.createAlert('capacity', 'critical', 'cpuUsage', metrics.cpuUsage, \r\n        this.thresholds.cpuUsage.critical, `Uso de CPU crítico: ${(metrics.cpuUsage * 100).toFixed(1)}%`);\r\n    } else if (metrics.cpuUsage > this.thresholds.cpuUsage.warning) {\r\n      await this.createAlert('capacity', 'medium', 'cpuUsage', metrics.cpuUsage, \r\n        this.thresholds.cpuUsage.warning, `Uso de CPU alto: ${(metrics.cpuUsage * 100).toFixed(1)}%`);\r\n    }\r\n\r\n    // Verificar uso de memoria\r\n    if (metrics.memoryUsage > this.thresholds.memoryUsage.critical) {\r\n      await this.createAlert('capacity', 'critical', 'memoryUsage', metrics.memoryUsage, \r\n        this.thresholds.memoryUsage.critical, `Uso de memoria crítico: ${(metrics.memoryUsage * 100).toFixed(1)}%`);\r\n    } else if (metrics.memoryUsage > this.thresholds.memoryUsage.warning) {\r\n      await this.createAlert('capacity', 'medium', 'memoryUsage', metrics.memoryUsage, \r\n        this.thresholds.memoryUsage.warning, `Uso de memoria alto: ${(metrics.memoryUsage * 100).toFixed(1)}%`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de Core Web Vitals\r\n   */\r\n  private checkWebVitalsThresholds(vitals: CoreWebVitals): void {\r\n    const { coreWebVitals } = this.thresholds;\r\n\r\n    // Verificar LCP\r\n    if (vitals.lcp > coreWebVitals.lcp.poor) {\r\n      this.createAlert('performance', 'high', 'lcp', vitals.lcp, \r\n        coreWebVitals.lcp.poor, `LCP pobre: ${vitals.lcp}ms`);\r\n    } else if (vitals.lcp > coreWebVitals.lcp.good) {\r\n      this.createAlert('performance', 'medium', 'lcp', vitals.lcp, \r\n        coreWebVitals.lcp.good, `LCP necesita mejora: ${vitals.lcp}ms`);\r\n    }\r\n\r\n    // Verificar FID\r\n    if (vitals.fid > coreWebVitals.fid.poor) {\r\n      this.createAlert('performance', 'high', 'fid', vitals.fid, \r\n        coreWebVitals.fid.poor, `FID pobre: ${vitals.fid}ms`);\r\n    } else if (vitals.fid > coreWebVitals.fid.good) {\r\n      this.createAlert('performance', 'medium', 'fid', vitals.fid, \r\n        coreWebVitals.fid.good, `FID necesita mejora: ${vitals.fid}ms`);\r\n    }\r\n\r\n    // Verificar CLS\r\n    if (vitals.cls > coreWebVitals.cls.poor) {\r\n      this.createAlert('performance', 'high', 'cls', vitals.cls, \r\n        coreWebVitals.cls.poor, `CLS pobre: ${vitals.cls}`);\r\n    } else if (vitals.cls > coreWebVitals.cls.good) {\r\n      this.createAlert('performance', 'medium', 'cls', vitals.cls, \r\n        coreWebVitals.cls.good, `CLS necesita mejora: ${vitals.cls}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de API\r\n   */\r\n  private checkAPIThresholds(metrics: APIMetrics): void {\r\n    if (metrics.responseTime > this.thresholds.responseTime.critical) {\r\n      this.createAlert('performance', 'high', 'apiResponseTime', metrics.responseTime, \r\n        this.thresholds.responseTime.critical, \r\n        `API lenta: ${metrics.method} ${metrics.endpoint} - ${metrics.responseTime}ms`);\r\n    }\r\n\r\n    if (metrics.statusCode >= 500) {\r\n      this.createAlert('error', 'high', 'apiError', metrics.statusCode, \r\n        500, `Error de servidor: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`);\r\n    } else if (metrics.statusCode >= 400) {\r\n      this.createAlert('error', 'medium', 'apiClientError', metrics.statusCode, \r\n        400, `Error de cliente: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de base de datos\r\n   */\r\n  private checkDatabaseThresholds(metrics: DatabaseMetrics): void {\r\n    if (metrics.queryTime > 5000) { // 5 segundos\r\n      this.createAlert('performance', 'high', 'slowQuery', metrics.queryTime, \r\n        5000, `Query lenta: ${metrics.queryType} en ${metrics.tableName} - ${metrics.queryTime}ms`);\r\n    }\r\n\r\n    if (metrics.waitingConnections > 10) {\r\n      this.createAlert('capacity', 'medium', 'dbConnectionWait', metrics.waitingConnections, \r\n        10, `Conexiones esperando: ${metrics.waitingConnections}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crea una alerta\r\n   */\r\n  private async createAlert(\r\n    type: PerformanceAlert['type'],\r\n    severity: PerformanceAlert['severity'],\r\n    metric: string,\r\n    value: number,\r\n    threshold: number,\r\n    message: string\r\n  ): Promise<void> {\r\n    const alertId = `${type}_${metric}_${Date.now()}`;\r\n    \r\n    const alert: PerformanceAlert = {\r\n      id: alertId,\r\n      type,\r\n      severity,\r\n      metric,\r\n      value,\r\n      threshold,\r\n      message,\r\n      timestamp: Date.now(),\r\n      resolved: false,\r\n      escalated: false\r\n    };\r\n\r\n    this.alerts.set(alertId, alert);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('alert', alert);\r\n\r\n    // Log de la alerta\r\n    logger.warn(LogCategory.MONITORING, `Performance alert: ${message}`, {\r\n      type,\r\n      severity,\r\n      metric,\r\n      value,\r\n      threshold\r\n    });\r\n\r\n    // Persistir en Redis\r\n    await this.persistAlert(alert);\r\n  }\r\n\r\n  /**\r\n   * Suscribirse a actualizaciones en tiempo real\r\n   */\r\n  subscribe(callback: (data: any) => void): () => void {\r\n    this.subscribers.add(callback);\r\n    \r\n    return () => {\r\n      this.subscribers.delete(callback);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Notifica a todos los suscriptores\r\n   */\r\n  private notifySubscribers(type: string, data: any): void {\r\n    this.subscribers.forEach(callback => {\r\n      try {\r\n        callback({ type, data, timestamp: Date.now() });\r\n      } catch (error) {\r\n        logger.error(LogCategory.MONITORING, 'Error notifying subscriber', error as Error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas actuales\r\n   */\r\n  getCurrentMetrics(): {\r\n    realTime: RealTimeMetrics[];\r\n    webVitals: CoreWebVitals[];\r\n    apiMetrics: APIMetrics[];\r\n    dbMetrics: DatabaseMetrics[];\r\n    alerts: PerformanceAlert[];\r\n  } {\r\n    return {\r\n      realTime: [...this.metricsBuffer],\r\n      webVitals: [...this.webVitalsBuffer],\r\n      apiMetrics: [...this.apiMetricsBuffer],\r\n      dbMetrics: [...this.dbMetricsBuffer],\r\n      alerts: Array.from(this.alerts.values()).filter(a => !a.resolved)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Actualiza umbrales\r\n   */\r\n  updateThresholds(newThresholds: Partial<PerformanceThresholds>): void {\r\n    this.thresholds = { ...this.thresholds, ...newThresholds };\r\n    logger.info(LogCategory.MONITORING, 'Performance thresholds updated');\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  resolveAlert(alertId: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (alert && !alert.resolved) {\r\n      alert.resolved = true;\r\n      alert.resolvedAt = Date.now();\r\n      \r\n      this.notifySubscribers('alertResolved', alert);\r\n      logger.info(LogCategory.MONITORING, `Alert resolved: ${alertId}`);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Flush de métricas a Redis\r\n   */\r\n  private async flushMetricsToRedis(): Promise<void> {\r\n    try {\r\n      const timestamp = Date.now();\r\n      \r\n      // Guardar métricas en Redis con TTL de 24 horas\r\n      if (this.metricsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:realtime:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.metricsBuffer)\r\n        );\r\n      }\r\n\r\n      if (this.webVitalsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:webvitals:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.webVitalsBuffer)\r\n        );\r\n      }\r\n\r\n      if (this.apiMetricsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:api:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.apiMetricsBuffer)\r\n        );\r\n      }\r\n\r\n      if (this.dbMetricsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:database:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.dbMetricsBuffer)\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error flushing metrics to Redis', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Persiste alerta en Redis\r\n   */\r\n  private async persistAlert(alert: PerformanceAlert): Promise<void> {\r\n    try {\r\n      await this.redis.setex(\r\n        `alert:${alert.id}`,\r\n        86400 * 7, // 7 días\r\n        JSON.stringify(alert)\r\n      );\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error persisting alert', error as Error);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE RECOLECCIÓN DE MÉTRICAS\r\n  // ===================================\r\n\r\n  private async getAverageResponseTime(): Promise<number> {\r\n    // Calcular tiempo de respuesta promedio de las últimas métricas de API\r\n    const recentAPI = this.apiMetricsBuffer.slice(-10);\r\n    if (recentAPI.length === 0) {return 0;}\r\n    \r\n    const total = recentAPI.reduce((sum, metric) => sum + metric.responseTime, 0);\r\n    return total / recentAPI.length;\r\n  }\r\n\r\n  private async getCurrentThroughput(): Promise<number> {\r\n    // Calcular throughput basado en requests por segundo\r\n    const now = Date.now();\r\n    const oneMinuteAgo = now - 60000;\r\n    const recentRequests = this.apiMetricsBuffer.filter(m => m.timestamp > oneMinuteAgo);\r\n    return recentRequests.length / 60; // requests por segundo\r\n  }\r\n\r\n  private async getCurrentErrorRate(): Promise<number> {\r\n    const recentAPI = this.apiMetricsBuffer.slice(-100);\r\n    if (recentAPI.length === 0) {return 0;}\r\n    \r\n    const errors = recentAPI.filter(m => m.statusCode >= 400).length;\r\n    return errors / recentAPI.length;\r\n  }\r\n\r\n  private async getCPUUsage(): Promise<number> {\r\n    // Simulación de uso de CPU (en implementación real, usar librerías del sistema)\r\n    return Math.random() * 0.8; // 0-80%\r\n  }\r\n\r\n  private async getMemoryUsage(): Promise<number> {\r\n    // Obtener uso de memoria real\r\n    if (typeof process !== 'undefined') {\r\n      const memUsage = process.memoryUsage();\r\n      return memUsage.heapUsed / memUsage.heapTotal;\r\n    }\r\n    return Math.random() * 0.7; // Fallback\r\n  }\r\n\r\n  private async getActiveConnections(): Promise<number> {\r\n    // Simulación de conexiones activas\r\n    return Math.floor(Math.random() * 100) + 10;\r\n  }\r\n\r\n  private async getQueueSize(): Promise<number> {\r\n    // Simulación de tamaño de cola\r\n    return Math.floor(Math.random() * 20);\r\n  }\r\n\r\n  private async getCacheHitRate(): Promise<number> {\r\n    // Obtener hit rate del cache (integrar con cache manager)\r\n    return Math.random() * 0.3 + 0.7; // 70-100%\r\n  }\r\n\r\n  private async getDBConnectionPoolSize(): Promise<number> {\r\n    // Simulación de pool de conexiones DB\r\n    return Math.floor(Math.random() * 10) + 5;\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n    }\r\n    if (this.flushInterval) {\r\n      clearInterval(this.flushInterval);\r\n    }\r\n    this.subscribers.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const realTimePerformanceMonitor = RealTimePerformanceMonitor.getInstance();\r\n\r\n/**\r\n * Utilidades para monitoreo en tiempo real\r\n */\r\nexport const RealTimeMonitoringUtils = {\r\n  /**\r\n   * Registra métricas de Web Vitals desde el cliente\r\n   */\r\n  recordWebVitals(vitals: Omit<CoreWebVitals, 'timestamp'>): void {\r\n    realTimePerformanceMonitor.recordWebVitals(vitals);\r\n  },\r\n\r\n  /**\r\n   * Registra métricas de API\r\n   */\r\n  recordAPICall(metrics: Omit<APIMetrics, 'timestamp'>): void {\r\n    realTimePerformanceMonitor.recordAPIMetrics(metrics);\r\n  },\r\n\r\n  /**\r\n   * Registra métricas de base de datos\r\n   */\r\n  recordDatabaseQuery(metrics: Omit<DatabaseMetrics, 'timestamp'>): void {\r\n    realTimePerformanceMonitor.recordDatabaseMetrics(metrics);\r\n  },\r\n\r\n  /**\r\n   * Obtiene resumen de estado actual\r\n   */\r\n  getCurrentStatus(): {\r\n    healthy: boolean;\r\n    activeAlerts: number;\r\n    avgResponseTime: number;\r\n    errorRate: number;\r\n    lastUpdate: number;\r\n  } {\r\n    const current = realTimePerformanceMonitor.getCurrentMetrics();\r\n    const latestMetrics = current.realTime[current.realTime.length - 1];\r\n    \r\n    if (!latestMetrics) {\r\n      return {\r\n        healthy: false,\r\n        activeAlerts: 0,\r\n        avgResponseTime: 0,\r\n        errorRate: 0,\r\n        lastUpdate: 0\r\n      };\r\n    }\r\n\r\n    const activeAlerts = current.alerts.length;\r\n    const healthy = activeAlerts === 0 && \r\n                   latestMetrics.responseTime < 2000 && \r\n                   latestMetrics.errorRate < 0.05;\r\n\r\n    return {\r\n      healthy,\r\n      activeAlerts,\r\n      avgResponseTime: latestMetrics.responseTime,\r\n      errorRate: latestMetrics.errorRate,\r\n      lastUpdate: latestMetrics.timestamp\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["DEFAULT_THRESHOLDS","RealTimeMonitoringUtils","RealTimePerformanceMonitor","realTimePerformanceMonitor","responseTime","warning","critical","errorRate","cpuUsage","memoryUsage","coreWebVitals","lcp","good","poor","fid","cls","fcp","ttfb","redis","getRedisClient","thresholds","alerts","Map","metricsBuffer","webVitalsBuffer","apiMetricsBuffer","dbMetricsBuffer","subscribers","Set","startMonitoring","startPeriodicFlush","getInstance","instance","monitoringInterval","setInterval","collectSystemMetrics","logger","info","LogCategory","MONITORING","flushInterval","flushMetricsToRedis","metrics","timestamp","Date","now","getAverageResponseTime","throughput","getCurrentThroughput","getCurrentErrorRate","getCPUUsage","getMemoryUsage","activeConnections","getActiveConnections","queueSize","getQueueSize","cacheHitRate","getCacheHitRate","dbConnectionPool","getDBConnectionPoolSize","push","length","slice","checkThresholds","notifySubscribers","error","recordWebVitals","vitals","webVitals","checkWebVitalsThresholds","recordAPIMetrics","apiMetrics","checkAPIThresholds","recordDatabaseMetrics","dbMetrics","checkDatabaseThresholds","createAlert","toFixed","method","endpoint","statusCode","queryTime","queryType","tableName","waitingConnections","type","severity","metric","value","threshold","message","alertId","alert","id","resolved","escalated","set","warn","persistAlert","subscribe","callback","add","delete","data","forEach","getCurrentMetrics","realTime","Array","from","values","filter","a","updateThresholds","newThresholds","resolveAlert","get","resolvedAt","setex","JSON","stringify","recentAPI","total","reduce","sum","oneMinuteAgo","recentRequests","m","errors","Math","random","process","memUsage","heapUsed","heapTotal","floor","destroy","clearInterval","clear","recordAPICall","recordDatabaseQuery","getCurrentStatus","current","latestMetrics","healthy","activeAlerts","avgResponseTime","lastUpdate"],"mappings":"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"}