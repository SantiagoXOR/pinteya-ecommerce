{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\error-boundary\\error-boundary-manager.test.ts"],"sourcesContent":["/**\r\n * @jest-environment jsdom\r\n */\r\n\r\n// ===================================\r\n// ERROR BOUNDARY MANAGER TESTS\r\n// ===================================\r\n// Tests para el sistema centralizado de gestión de Error Boundaries\r\n\r\nimport { errorBoundaryManager } from '@/lib/error-boundary/error-boundary-manager';\r\nimport type { ErrorMetrics } from '@/lib/error-boundary/error-boundary-manager';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\n// Mock de fetch\r\nglobal.fetch = jest.fn();\r\n\r\n// Mock de console\r\nconst originalConsoleError = console.error;\r\nconst originalConsoleLog = console.log;\r\nconst originalConsoleWarn = console.warn;\r\n\r\nbeforeEach(() => {\r\n  console.error = jest.fn();\r\n  console.log = jest.fn();\r\n  console.warn = jest.fn();\r\n  jest.clearAllMocks();\r\n  (fetch as jest.Mock).mockClear();\r\n  \r\n  // Limpiar errores anteriores\r\n  errorBoundaryManager.clearOldErrors(0);\r\n});\r\n\r\nafterEach(() => {\r\n  console.error = originalConsoleError;\r\n  console.log = originalConsoleLog;\r\n  console.warn = originalConsoleWarn;\r\n});\r\n\r\n// ===================================\r\n// TESTS DE CONFIGURACIÓN\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Configuración', () => {\r\n  test('devuelve configuración por defecto para niveles conocidos', () => {\r\n    const pageConfig = errorBoundaryManager.getConfig('page');\r\n    expect(pageConfig).toEqual({\r\n      level: 'page',\r\n      enableRetry: true,\r\n      maxRetries: 2,\r\n      retryDelay: 2000,\r\n      enableAutoRecovery: true,\r\n      recoveryTimeout: 5000,\r\n      enableReporting: true\r\n    });\r\n\r\n    const sectionConfig = errorBoundaryManager.getConfig('section');\r\n    expect(sectionConfig).toEqual({\r\n      level: 'section',\r\n      enableRetry: true,\r\n      maxRetries: 3,\r\n      retryDelay: 1000,\r\n      enableAutoRecovery: true,\r\n      recoveryTimeout: 3000,\r\n      enableReporting: true\r\n    });\r\n\r\n    const componentConfig = errorBoundaryManager.getConfig('component');\r\n    expect(componentConfig).toEqual({\r\n      level: 'component',\r\n      enableRetry: true,\r\n      maxRetries: 5,\r\n      retryDelay: 500,\r\n      enableAutoRecovery: true,\r\n      recoveryTimeout: 2000,\r\n      enableReporting: false\r\n    });\r\n  });\r\n\r\n  test('devuelve configuración de componente para niveles desconocidos', () => {\r\n    const unknownConfig = errorBoundaryManager.getConfig('unknown');\r\n    expect(unknownConfig.level).toBe('component');\r\n  });\r\n\r\n  test('permite actualizar configuración', () => {\r\n    errorBoundaryManager.updateConfig('page', {\r\n      maxRetries: 5,\r\n      retryDelay: 3000\r\n    });\r\n\r\n    const updatedConfig = errorBoundaryManager.getConfig('page');\r\n    expect(updatedConfig.maxRetries).toBe(5);\r\n    expect(updatedConfig.retryDelay).toBe(3000);\r\n    expect(updatedConfig.level).toBe('page'); // Otros valores se mantienen\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE REPORTE DE ERRORES\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Reporte de Errores', () => {\r\n  test('reporta y almacena errores correctamente', () => {\r\n    const error = new Error('Test error');\r\n    const errorInfo = { componentStack: 'at TestComponent' };\r\n    const context = {\r\n      errorId: 'test-error-1',\r\n      level: 'component',\r\n      component: 'TestComponent',\r\n      retryCount: 0\r\n    };\r\n\r\n    errorBoundaryManager.reportError(error, errorInfo, context);\r\n\r\n    const metrics = errorBoundaryManager.getErrorMetrics();\r\n    expect(metrics.totalErrors).toBe(1);\r\n    expect(metrics.errorsByComponent['TestComponent']).toBe(1);\r\n    expect(metrics.errorsByType['UnknownError']).toBe(1);\r\n  });\r\n\r\n  test('clasifica errores correctamente', () => {\r\n    const chunkError = new Error('Loading chunk 123 failed');\r\n    const networkError = new Error('Network request failed');\r\n    const typeError = new TypeError('Cannot read property');\r\n    const reactError = new Error('Render error');\r\n    reactError.stack = 'at React.Component.render';\r\n\r\n    // Reportar diferentes tipos de errores\r\n    errorBoundaryManager.reportError(chunkError, { componentStack: '' }, {\r\n      errorId: 'chunk-1', level: 'page', component: 'App', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(networkError, { componentStack: '' }, {\r\n      errorId: 'network-1', level: 'section', component: 'DataLoader', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(typeError, { componentStack: '' }, {\r\n      errorId: 'type-1', level: 'component', component: 'UserProfile', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(reactError, { componentStack: '' }, {\r\n      errorId: 'react-1', level: 'component', component: 'ProductCard', retryCount: 0\r\n    });\r\n\r\n    const metrics = errorBoundaryManager.getErrorMetrics();\r\n    expect(metrics.errorsByType['ChunkLoadError']).toBe(1);\r\n    expect(metrics.errorsByType['NetworkError']).toBe(1);\r\n    expect(metrics.errorsByType['TypeError']).toBe(1);\r\n    expect(metrics.errorsByType['ReactError']).toBe(1);\r\n  });\r\n\r\n  test('evalúa impacto del usuario correctamente', () => {\r\n    const pageError = new Error('Page error');\r\n    const sectionError = new Error('Section error');\r\n    const componentError = new Error('Component error');\r\n    const chunkError = new Error('Loading chunk failed');\r\n\r\n    errorBoundaryManager.reportError(pageError, { componentStack: '' }, {\r\n      errorId: 'page-1', level: 'page', component: 'HomePage', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(sectionError, { componentStack: '' }, {\r\n      errorId: 'section-1', level: 'section', component: 'ProductList', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(componentError, { componentStack: '' }, {\r\n      errorId: 'component-1', level: 'component', component: 'Button', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(chunkError, { componentStack: '' }, {\r\n      errorId: 'chunk-1', level: 'component', component: 'LazyComponent', retryCount: 0\r\n    });\r\n\r\n    const metrics = errorBoundaryManager.getErrorMetrics();\r\n    expect(metrics.errorsByImpact['critical']).toBe(1); // page error\r\n    expect(metrics.errorsByImpact['high']).toBe(2); // section error + chunk error (high priority)\r\n    expect(metrics.errorsByImpact['medium']).toBeUndefined(); // no medium errors\r\n    expect(metrics.errorsByImpact['low']).toBe(1); // component error\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE DETECCIÓN DE PATRONES\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Detección de Patrones', () => {\r\n  test('detecta patrones de errores frecuentes', () => {\r\n    const error = new Error('Repeated error');\r\n    \r\n    // Reportar el mismo error múltiples veces\r\n    for (let i = 0; i < 5; i++) {\r\n      errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n        errorId: `repeat-${i}`,\r\n        level: 'component',\r\n        component: 'ProblematicComponent',\r\n        retryCount: 0\r\n      });\r\n    }\r\n\r\n    const metrics = errorBoundaryManager.getErrorMetrics();\r\n    expect(metrics.patterns.length).toBeGreaterThan(0);\r\n    \r\n    const pattern = metrics.patterns.find(p => \r\n      p.pattern.includes('Error:ProblematicComponent')\r\n    );\r\n    expect(pattern).toBeDefined();\r\n    expect(pattern?.frequency).toBe(5);\r\n    expect(pattern?.affectedComponents).toContain('ProblematicComponent');\r\n  });\r\n\r\n  test('proporciona sugerencias de corrección para patrones conocidos', () => {\r\n    const chunkError = new Error('Loading chunk failed');\r\n    const networkError = new Error('Network timeout');\r\n    const typeError = new TypeError('Cannot read property');\r\n\r\n    errorBoundaryManager.reportError(chunkError, { componentStack: '' }, {\r\n      errorId: 'chunk-1', level: 'component', component: 'LazyComponent', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(networkError, { componentStack: '' }, {\r\n      errorId: 'network-1', level: 'component', component: 'ApiClient', retryCount: 0\r\n    });\r\n\r\n    errorBoundaryManager.reportError(typeError, { componentStack: '' }, {\r\n      errorId: 'type-1', level: 'component', component: 'DataProcessor', retryCount: 0\r\n    });\r\n\r\n    const metrics = errorBoundaryManager.getErrorMetrics();\r\n    \r\n    const chunkPattern = metrics.patterns.find(p => p.pattern.includes('ChunkLoadError'));\r\n    expect(chunkPattern?.suggestedFix).toBeDefined();\r\n    expect(chunkPattern?.suggestedFix).toContain('chunk retry logic');\r\n\r\n    const networkPattern = metrics.patterns.find(p => p.pattern.includes('NetworkError'));\r\n    expect(networkPattern?.suggestedFix).toBeDefined();\r\n    expect(networkPattern?.suggestedFix).toContain('network retry');\r\n\r\n    const typePattern = metrics.patterns.find(p => p.pattern.includes('TypeError'));\r\n    expect(typePattern?.suggestedFix).toBeDefined();\r\n    expect(typePattern?.suggestedFix).toContain('null/undefined checks');\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE LISTENERS\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Listeners', () => {\r\n  test('notifica a listeners cuando se reportan errores', () => {\r\n    const listener = jest.fn();\r\n    errorBoundaryManager.addErrorListener(listener);\r\n\r\n    const error = new Error('Test error');\r\n    errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n      errorId: 'test-1',\r\n      level: 'component',\r\n      component: 'TestComponent',\r\n      retryCount: 0\r\n    });\r\n\r\n    expect(listener).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        errorId: 'test-1',\r\n        component: 'TestComponent',\r\n        level: 'component'\r\n      })\r\n    );\r\n\r\n    errorBoundaryManager.removeErrorListener(listener);\r\n  });\r\n\r\n  test('permite remover listeners', () => {\r\n    const listener = jest.fn();\r\n    errorBoundaryManager.addErrorListener(listener);\r\n    errorBoundaryManager.removeErrorListener(listener);\r\n\r\n    const error = new Error('Test error');\r\n    errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n      errorId: 'test-1',\r\n      level: 'component',\r\n      component: 'TestComponent',\r\n      retryCount: 0\r\n    });\r\n\r\n    expect(listener).not.toHaveBeenCalled();\r\n  });\r\n\r\n  test('maneja errores en listeners sin afectar el flujo principal', () => {\r\n    const faultyListener = jest.fn(() => {\r\n      throw new Error('Listener error');\r\n    });\r\n    const goodListener = jest.fn();\r\n\r\n    errorBoundaryManager.addErrorListener(faultyListener);\r\n    errorBoundaryManager.addErrorListener(goodListener);\r\n\r\n    const error = new Error('Test error');\r\n    errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n      errorId: 'test-1',\r\n      level: 'component',\r\n      component: 'TestComponent',\r\n      retryCount: 0\r\n    });\r\n\r\n    expect(faultyListener).toHaveBeenCalled();\r\n    expect(goodListener).toHaveBeenCalled();\r\n    expect(console.error).toHaveBeenCalledWith(\r\n      '❌ Error in error listener:',\r\n      expect.any(Error)\r\n    );\r\n\r\n    errorBoundaryManager.removeErrorListener(faultyListener);\r\n    errorBoundaryManager.removeErrorListener(goodListener);\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE MÉTRICAS Y REPORTES\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Métricas y Reportes', () => {\r\n  test('calcula métricas correctamente', () => {\r\n    // Reportar varios errores\r\n    const errors = [\r\n      { type: 'TypeError', component: 'ComponentA', level: 'component', impact: 'low' },\r\n      { type: 'NetworkError', component: 'ComponentB', level: 'section', impact: 'medium' },\r\n      { type: 'TypeError', component: 'ComponentA', level: 'component', impact: 'low' },\r\n      { type: 'ChunkLoadError', component: 'ComponentC', level: 'page', impact: 'critical' }\r\n    ];\r\n\r\n    errors.forEach((errorData, index) => {\r\n      const error = new Error(`${errorData.type} message`);\r\n      if (errorData.type === 'TypeError') error.name = 'TypeError';\r\n      if (errorData.type === 'NetworkError') error.message = 'Network failed';\r\n      if (errorData.type === 'ChunkLoadError') error.message = 'Loading chunk failed';\r\n\r\n      errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n        errorId: `error-${index}`,\r\n        level: errorData.level as 'page' | 'section' | 'component',\r\n        component: errorData.component,\r\n        retryCount: 0\r\n      });\r\n    });\r\n\r\n    const metrics = errorBoundaryManager.getErrorMetrics();\r\n    \r\n    expect(metrics.totalErrors).toBe(4);\r\n    expect(metrics.errorsByType['TypeError']).toBe(2);\r\n    expect(metrics.errorsByType['NetworkError']).toBe(1);\r\n    expect(metrics.errorsByType['ChunkLoadError']).toBe(1);\r\n    expect(metrics.errorsByComponent['ComponentA']).toBe(2);\r\n    expect(metrics.errorsByComponent['ComponentB']).toBe(1);\r\n    expect(metrics.errorsByComponent['ComponentC']).toBe(1);\r\n  });\r\n\r\n  test('proporciona errores recientes ordenados por timestamp', () => {\r\n    const now = Date.now();\r\n    \r\n    // Reportar errores con diferentes timestamps\r\n    for (let i = 0; i < 15; i++) {\r\n      const error = new Error(`Error ${i}`);\r\n      errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n        errorId: `error-${i}`,\r\n        level: 'component',\r\n        component: `Component${i}`,\r\n        retryCount: 0\r\n      });\r\n    }\r\n\r\n    const metrics = errorBoundaryManager.getErrorMetrics();\r\n    \r\n    // Debería devolver solo los 10 más recientes\r\n    expect(metrics.recentErrors.length).toBe(10);\r\n    \r\n    // Deberían estar ordenados por timestamp descendente\r\n    for (let i = 0; i < metrics.recentErrors.length - 1; i++) {\r\n      expect(metrics.recentErrors[i].timestamp).toBeGreaterThanOrEqual(\r\n        metrics.recentErrors[i + 1].timestamp\r\n      );\r\n    }\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE ESTADO DE SALUD\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Estado de Salud', () => {\r\n  test('reporta estado saludable cuando no hay errores', () => {\r\n    const healthStatus = errorBoundaryManager.getHealthStatus();\r\n    \r\n    expect(healthStatus.status).toBe('healthy');\r\n    expect(healthStatus.errorRate).toBe(0);\r\n    expect(healthStatus.criticalErrors).toBe(0);\r\n    expect(healthStatus.recommendations).toEqual([]);\r\n  });\r\n\r\n  test('reporta estado crítico cuando hay errores críticos', () => {\r\n    const criticalError = new Error('Critical page error');\r\n    errorBoundaryManager.reportError(criticalError, { componentStack: '' }, {\r\n      errorId: 'critical-1',\r\n      level: 'page',\r\n      component: 'HomePage',\r\n      retryCount: 0\r\n    });\r\n\r\n    const healthStatus = errorBoundaryManager.getHealthStatus();\r\n    \r\n    expect(healthStatus.status).toBe('critical');\r\n    expect(healthStatus.criticalErrors).toBe(1);\r\n    expect(healthStatus.recommendations).toContain('Resolver errores críticos inmediatamente');\r\n  });\r\n\r\n  test('reporta estado degradado con alta tasa de errores', () => {\r\n    // Simular muchos errores recientes\r\n    for (let i = 0; i < 10; i++) {\r\n      const error = new Error(`Error ${i}`);\r\n      errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n        errorId: `error-${i}`,\r\n        level: 'component',\r\n        component: `Component${i}`,\r\n        retryCount: 0\r\n      });\r\n    }\r\n\r\n    const healthStatus = errorBoundaryManager.getHealthStatus();\r\n    \r\n    expect(healthStatus.status).toBe('degraded');\r\n    expect(healthStatus.recommendations).toContain('Alta tasa de errores detectada');\r\n  });\r\n\r\n  test('detecta patrones frecuentes en recomendaciones', () => {\r\n    const error = new Error('Frequent error');\r\n    \r\n    // Reportar el mismo error múltiples veces\r\n    for (let i = 0; i < 5; i++) {\r\n      errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n        errorId: `frequent-${i}`,\r\n        level: 'component',\r\n        component: 'ProblematicComponent',\r\n        retryCount: 0\r\n      });\r\n    }\r\n\r\n    const healthStatus = errorBoundaryManager.getHealthStatus();\r\n    \r\n    expect(healthStatus.recommendations).toContain('Revisar patrones de errores frecuentes');\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE LIMPIEZA\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Limpieza', () => {\r\n  test('limpia errores antiguos correctamente', () => {\r\n    // Limpiar errores existentes primero\r\n    errorBoundaryManager.clearOldErrors(0);\r\n\r\n    // Mock Date.now para simular errores antiguos\r\n    const originalDateNow = Date.now;\r\n    const oldTimestamp = Date.now() - (25 * 60 * 60 * 1000); // 25 horas atrás\r\n    \r\n    // Simular error antiguo\r\n    Date.now = jest.fn(() => oldTimestamp);\r\n    const oldError = new Error('Old error');\r\n    errorBoundaryManager.reportError(oldError, { componentStack: '' }, {\r\n      errorId: 'old-1',\r\n      level: 'component',\r\n      component: 'OldComponent',\r\n      retryCount: 0\r\n    });\r\n\r\n    // Restaurar Date.now y reportar error reciente\r\n    Date.now = originalDateNow;\r\n    const recentError = new Error('Recent error');\r\n    errorBoundaryManager.reportError(recentError, { componentStack: '' }, {\r\n      errorId: 'recent-1',\r\n      level: 'component',\r\n      component: 'RecentComponent',\r\n      retryCount: 0\r\n    });\r\n\r\n    // Verificar que ambos errores están presentes\r\n    let metrics = errorBoundaryManager.getErrorMetrics();\r\n    expect(metrics.totalErrors).toBe(2);\r\n\r\n    // Limpiar errores antiguos (24 horas)\r\n    errorBoundaryManager.clearOldErrors(24 * 60 * 60 * 1000);\r\n\r\n    metrics = errorBoundaryManager.getErrorMetrics();\r\n\r\n    // Solo el error reciente debería permanecer\r\n    expect(metrics.totalErrors).toBe(1);\r\n    expect(metrics.recentErrors[0].errorId).toBe('recent-1');\r\n  });\r\n\r\n  test('marca errores como resueltos', () => {\r\n    const error = new Error('Test error');\r\n    errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n      errorId: 'resolvable-1',\r\n      level: 'component',\r\n      component: 'TestComponent',\r\n      retryCount: 0\r\n    });\r\n\r\n    const beforeResolve = errorBoundaryManager.getErrorMetrics();\r\n    expect(beforeResolve.recentErrors[0].resolved).toBe(false);\r\n\r\n    errorBoundaryManager.markErrorResolved('resolvable-1', 5000);\r\n\r\n    const afterResolve = errorBoundaryManager.getErrorMetrics();\r\n    expect(afterResolve.recentErrors[0].resolved).toBe(true);\r\n    expect(afterResolve.recentErrors[0].resolutionTime).toBe(5000);\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE SINGLETON\r\n// ===================================\r\n\r\ndescribe('ErrorBoundaryManager - Singleton', () => {\r\n  test('mantiene una sola instancia', () => {\r\n    const instance1 = errorBoundaryManager;\r\n    const instance2 = errorBoundaryManager;\r\n    \r\n    expect(instance1).toBe(instance2);\r\n  });\r\n\r\n  test('mantiene estado entre accesos', () => {\r\n    const error = new Error('Persistent error');\r\n    errorBoundaryManager.reportError(error, { componentStack: '' }, {\r\n      errorId: 'persistent-1',\r\n      level: 'component',\r\n      component: 'PersistentComponent',\r\n      retryCount: 0\r\n    });\r\n\r\n    const metrics1 = errorBoundaryManager.getErrorMetrics();\r\n    const metrics2 = errorBoundaryManager.getErrorMetrics();\r\n    \r\n    expect(metrics1.totalErrors).toBe(metrics2.totalErrors);\r\n    expect(metrics1.totalErrors).toBe(1);\r\n  });\r\n});\r\n"],"names":["global","fetch","jest","fn","originalConsoleError","console","error","originalConsoleLog","log","originalConsoleWarn","warn","beforeEach","clearAllMocks","mockClear","errorBoundaryManager","clearOldErrors","afterEach","describe","test","pageConfig","getConfig","expect","toEqual","level","enableRetry","maxRetries","retryDelay","enableAutoRecovery","recoveryTimeout","enableReporting","sectionConfig","componentConfig","unknownConfig","toBe","updateConfig","updatedConfig","Error","errorInfo","componentStack","context","errorId","component","retryCount","reportError","metrics","getErrorMetrics","totalErrors","errorsByComponent","errorsByType","chunkError","networkError","typeError","TypeError","reactError","stack","pageError","sectionError","componentError","errorsByImpact","toBeUndefined","i","patterns","length","toBeGreaterThan","pattern","find","p","includes","toBeDefined","frequency","affectedComponents","toContain","chunkPattern","suggestedFix","networkPattern","typePattern","listener","addErrorListener","toHaveBeenCalledWith","objectContaining","removeErrorListener","not","toHaveBeenCalled","faultyListener","goodListener","any","errors","type","impact","forEach","errorData","index","name","message","now","Date","recentErrors","timestamp","toBeGreaterThanOrEqual","healthStatus","getHealthStatus","status","errorRate","criticalErrors","recommendations","criticalError","originalDateNow","oldTimestamp","oldError","recentError","beforeResolve","resolved","markErrorResolved","afterResolve","resolutionTime","instance1","instance2","metrics1","metrics2"],"mappings":"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"}