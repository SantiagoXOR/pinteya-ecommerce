{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\testing\\automated-testing-manager.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS - AUTOMATED TESTING MANAGER\r\n// ===================================\r\n\r\nimport { automatedTestingManager } from '@/lib/testing/automated-testing-manager';\r\nimport type { RegressionTestConfig } from '@/lib/testing/automated-testing-manager';\r\n\r\n// Mock performance.now\r\nconst mockPerformanceNow = jest.fn();\r\nglobal.performance.now = mockPerformanceNow;\r\n\r\ndescribe('AutomatedTestingManager', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    automatedTestingManager.clearResults();\r\n    \r\n    // Mock performance.now to return predictable values\r\n    let callCount = 0;\r\n    mockPerformanceNow.mockImplementation(() => {\r\n      callCount++;\r\n      return callCount * 100; // 100ms increments\r\n    });\r\n  });\r\n\r\n  describe('Regression Testing', () => {\r\n    it('should run regression tests successfully', async () => {\r\n      const config: RegressionTestConfig = {\r\n        threshold: 0.1, // 10%\r\n        components: ['TestComponent'],\r\n        apis: ['/api/test']\r\n      };\r\n\r\n      const result = await automatedTestingManager.runRegressionTests(config);\r\n\r\n      expect(result.name).toBe('Regression Tests');\r\n      expect(result.totalTests).toBe(2); // 1 component + 1 api\r\n      expect(result.duration).toBeGreaterThan(0);\r\n      expect(result.tests).toHaveLength(2);\r\n    });\r\n\r\n    it('should detect performance regression', async () => {\r\n      const config: RegressionTestConfig = {\r\n        threshold: 0.05, // 5% threshold\r\n        components: ['SlowComponent'],\r\n        apis: []\r\n      };\r\n\r\n      // First run to set baseline\r\n      await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      // Mock slower performance for second run\r\n      jest.spyOn(automatedTestingManager as any, 'measureComponentPerformance')\r\n        .mockResolvedValueOnce({\r\n          loadTime: 100,\r\n          renderTime: 50, // Much slower than baseline\r\n          memoryUsage: 10,\r\n          bundleSize: 30\r\n        });\r\n\r\n      const result = await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      // Should detect regression\r\n      const componentTest = result.tests.find(t => t.name.includes('SlowComponent'));\r\n      expect(componentTest?.status).toBe('failed');\r\n      expect(componentTest?.error).toContain('Performance degraded');\r\n    });\r\n\r\n    it('should handle API timeout errors', async () => {\r\n      const config: RegressionTestConfig = {\r\n        threshold: 100, // 100ms threshold\r\n        components: [],\r\n        apis: ['/api/slow-endpoint']\r\n      };\r\n\r\n      // Mock slow API response\r\n      jest.spyOn(automatedTestingManager as any, 'testApiEndpoint')\r\n        .mockImplementation(() => {\r\n          return new Promise(resolve => {\r\n            setTimeout(() => resolve({ status: 200, responseTime: 150 }), 150);\r\n          });\r\n        });\r\n\r\n      const result = await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      const apiTest = result.tests.find(t => t.name.includes('/api/slow-endpoint'));\r\n      expect(apiTest?.status).toBe('failed');\r\n      expect(apiTest?.error).toContain('exceeds threshold');\r\n    });\r\n  });\r\n\r\n  describe('Performance Testing', () => {\r\n    it('should run performance tests for components', async () => {\r\n      const components = ['Component1', 'Component2'];\r\n      \r\n      const result = await automatedTestingManager.runPerformanceTests(components);\r\n\r\n      expect(result.name).toBe('Performance Tests');\r\n      expect(result.totalTests).toBe(4); // 2 components + bundle + memory tests\r\n      expect(result.tests).toHaveLength(4);\r\n    });\r\n\r\n    it('should fail tests when performance thresholds are exceeded', async () => {\r\n      // Mock poor performance metrics\r\n      jest.spyOn(automatedTestingManager as any, 'measureComponentPerformance')\r\n        .mockResolvedValue({\r\n          loadTime: 100,\r\n          renderTime: 25, // Exceeds 16ms threshold\r\n          memoryUsage: 60, // Exceeds 50MB threshold\r\n          bundleSize: 120 // Exceeds 100KB threshold\r\n        });\r\n\r\n      const result = await automatedTestingManager.runPerformanceTests(['SlowComponent']);\r\n      \r\n      const componentTest = result.tests.find(t => t.name.includes('SlowComponent - Performance'));\r\n      expect(componentTest?.status).toBe('failed');\r\n      expect(componentTest?.error).toContain('Render time > 16ms');\r\n      expect(componentTest?.error).toContain('Memory usage > 50MB');\r\n      expect(componentTest?.error).toContain('Bundle size > 100KB');\r\n    });\r\n\r\n    it('should test bundle size correctly', async () => {\r\n      const result = await automatedTestingManager.runPerformanceTests([]);\r\n      \r\n      const bundleTest = result.tests.find(t => t.name === 'Bundle Size Check');\r\n      expect(bundleTest).toBeDefined();\r\n      expect(bundleTest?.duration).toBeGreaterThan(0);\r\n      expect(bundleTest?.details).toHaveProperty('bundleSize');\r\n      expect(bundleTest?.details).toHaveProperty('threshold');\r\n    });\r\n\r\n    it('should test memory leaks', async () => {\r\n      const result = await automatedTestingManager.runPerformanceTests([]);\r\n      \r\n      const memoryTest = result.tests.find(t => t.name === 'Memory Leak Check');\r\n      expect(memoryTest).toBeDefined();\r\n      expect(memoryTest?.duration).toBeGreaterThan(0);\r\n      expect(memoryTest?.details).toHaveProperty('memoryGrowth');\r\n      expect(memoryTest?.details).toHaveProperty('threshold');\r\n    });\r\n  });\r\n\r\n  describe('Accessibility Testing', () => {\r\n    it('should run accessibility tests for pages', async () => {\r\n      const pages = ['/home', '/products'];\r\n      \r\n      const result = await automatedTestingManager.runAccessibilityTests(pages);\r\n\r\n      expect(result.name).toBe('Accessibility Tests');\r\n      expect(result.totalTests).toBe(2);\r\n      expect(result.tests).toHaveLength(2);\r\n    });\r\n\r\n    it('should fail tests when accessibility score is low', async () => {\r\n      // Mock poor accessibility score\r\n      jest.spyOn(automatedTestingManager as any, 'runAccessibilityAudit')\r\n        .mockResolvedValue({\r\n          violations: [\r\n            { id: 'color-contrast', impact: 'serious', description: 'Poor contrast', nodes: 3 },\r\n            { id: 'missing-alt', impact: 'critical', description: 'Missing alt text', nodes: 2 }\r\n          ],\r\n          passes: 10,\r\n          incomplete: 1,\r\n          score: 65 // Below 80% threshold\r\n        });\r\n\r\n      const result = await automatedTestingManager.runAccessibilityTests(['/poor-accessibility']);\r\n      \r\n      const accessibilityTest = result.tests[0];\r\n      expect(accessibilityTest.status).toBe('failed');\r\n      expect(accessibilityTest.error).toContain('Accessibility score 65% below 80%');\r\n      expect(accessibilityTest.details.violations).toHaveLength(2);\r\n    });\r\n\r\n    it('should pass tests when accessibility score is high', async () => {\r\n      // Mock good accessibility score\r\n      jest.spyOn(automatedTestingManager as any, 'runAccessibilityAudit')\r\n        .mockResolvedValue({\r\n          violations: [],\r\n          passes: 25,\r\n          incomplete: 0,\r\n          score: 95 // Above 80% threshold\r\n        });\r\n\r\n      const result = await automatedTestingManager.runAccessibilityTests(['/good-accessibility']);\r\n      \r\n      const accessibilityTest = result.tests[0];\r\n      expect(accessibilityTest.status).toBe('passed');\r\n      expect(accessibilityTest.error).toBeUndefined();\r\n      expect(accessibilityTest.details.score).toBe(95);\r\n    });\r\n  });\r\n\r\n  describe('Test Results Management', () => {\r\n    it('should store and retrieve test results', async () => {\r\n      const config: RegressionTestConfig = {\r\n        threshold: 0.1,\r\n        components: ['TestComponent'],\r\n        apis: []\r\n      };\r\n\r\n      await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      const results = automatedTestingManager.getTestResults();\r\n      expect(results.has('regression')).toBe(true);\r\n      \r\n      const regressionSuite = results.get('regression');\r\n      expect(regressionSuite?.name).toBe('Regression Tests');\r\n    });\r\n\r\n    it('should generate test summary correctly', async () => {\r\n      // Run multiple test suites\r\n      await automatedTestingManager.runRegressionTests({\r\n        threshold: 0.1,\r\n        components: ['Component1'],\r\n        apis: ['/api/test']\r\n      });\r\n      \r\n      await automatedTestingManager.runPerformanceTests(['Component1']);\r\n      \r\n      const summary = automatedTestingManager.getTestSummary();\r\n      \r\n      expect(summary.totalSuites).toBe(2);\r\n      expect(summary.totalTests).toBeGreaterThan(0);\r\n      expect(summary.passedTests).toBeGreaterThanOrEqual(0);\r\n      expect(summary.failedTests).toBeGreaterThanOrEqual(0);\r\n      expect(summary.successRate).toBeGreaterThanOrEqual(0);\r\n      expect(summary.successRate).toBeLessThanOrEqual(100);\r\n      expect(summary.totalDuration).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should clear results correctly', async () => {\r\n      // Add some test results\r\n      await automatedTestingManager.runRegressionTests({\r\n        threshold: 0.1,\r\n        components: ['TestComponent'],\r\n        apis: []\r\n      });\r\n      \r\n      expect(automatedTestingManager.getTestResults().size).toBe(1);\r\n      \r\n      automatedTestingManager.clearResults();\r\n      \r\n      expect(automatedTestingManager.getTestResults().size).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle component testing errors gracefully', async () => {\r\n      // Mock error in component measurement\r\n      jest.spyOn(automatedTestingManager as any, 'measureComponentPerformance')\r\n        .mockRejectedValue(new Error('Component measurement failed'));\r\n\r\n      const config: RegressionTestConfig = {\r\n        threshold: 0.1,\r\n        components: ['ErrorComponent'],\r\n        apis: []\r\n      };\r\n\r\n      const result = await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      const componentTest = result.tests[0];\r\n      expect(componentTest.status).toBe('failed');\r\n      expect(componentTest.error).toBe('Component measurement failed');\r\n    });\r\n\r\n    it('should handle API testing errors gracefully', async () => {\r\n      // Mock error in API testing\r\n      jest.spyOn(automatedTestingManager as any, 'testApiEndpoint')\r\n        .mockRejectedValue(new Error('Network error'));\r\n\r\n      const config: RegressionTestConfig = {\r\n        threshold: 0.1,\r\n        components: [],\r\n        apis: ['/api/error']\r\n      };\r\n\r\n      const result = await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      const apiTest = result.tests[0];\r\n      expect(apiTest.status).toBe('failed');\r\n      expect(apiTest.error).toBe('Network error');\r\n    });\r\n\r\n    it('should handle accessibility testing errors gracefully', async () => {\r\n      // Mock error in accessibility audit\r\n      jest.spyOn(automatedTestingManager as any, 'runAccessibilityAudit')\r\n        .mockRejectedValue(new Error('Accessibility audit failed'));\r\n\r\n      const result = await automatedTestingManager.runAccessibilityTests(['/error-page']);\r\n      \r\n      const accessibilityTest = result.tests[0];\r\n      expect(accessibilityTest.status).toBe('failed');\r\n      expect(accessibilityTest.error).toBe('Accessibility audit failed');\r\n    });\r\n  });\r\n\r\n  describe('Performance Baselines', () => {\r\n    it('should establish baselines for new components', async () => {\r\n      const config: RegressionTestConfig = {\r\n        threshold: 0.1,\r\n        components: ['NewComponent'],\r\n        apis: []\r\n      };\r\n\r\n      const result = await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      const componentTest = result.tests[0];\r\n      expect(componentTest.name).toContain('Baseline Set');\r\n      expect(componentTest.status).toBe('passed');\r\n      expect(componentTest.details).toBeDefined();\r\n    });\r\n\r\n    it('should compare against existing baselines', async () => {\r\n      const config: RegressionTestConfig = {\r\n        threshold: 0.1,\r\n        components: ['ExistingComponent'],\r\n        apis: []\r\n      };\r\n\r\n      // First run to establish baseline\r\n      await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      // Second run should compare against baseline\r\n      const result = await automatedTestingManager.runRegressionTests(config);\r\n      \r\n      const componentTest = result.tests[0];\r\n      expect(componentTest.name).toContain('Performance Check');\r\n      expect(componentTest.details).toHaveProperty('current');\r\n      expect(componentTest.details).toHaveProperty('baseline');\r\n    });\r\n  });\r\n});\r\n"],"names":["mockPerformanceNow","jest","fn","global","performance","now","describe","beforeEach","clearAllMocks","automatedTestingManager","clearResults","callCount","mockImplementation","it","config","threshold","components","apis","result","runRegressionTests","expect","name","toBe","totalTests","duration","toBeGreaterThan","tests","toHaveLength","spyOn","mockResolvedValueOnce","loadTime","renderTime","memoryUsage","bundleSize","componentTest","find","t","includes","status","error","toContain","Promise","resolve","setTimeout","responseTime","apiTest","runPerformanceTests","mockResolvedValue","bundleTest","toBeDefined","details","toHaveProperty","memoryTest","pages","runAccessibilityTests","violations","id","impact","description","nodes","passes","incomplete","score","accessibilityTest","toBeUndefined","results","getTestResults","has","regressionSuite","get","summary","getTestSummary","totalSuites","passedTests","toBeGreaterThanOrEqual","failedTests","successRate","toBeLessThanOrEqual","totalDuration","size","mockRejectedValue","Error"],"mappings":"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"}