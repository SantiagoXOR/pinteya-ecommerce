{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-alert-system.ts"],"sourcesContent":["/**\r\n * Sistema Enterprise de Alertas y Notificaciones\r\n * Monitorea todos los sistemas y envía alertas automáticas\r\n */\r\n\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\nimport { metricsCollector } from '@/lib/rate-limiting/enterprise-rate-limiter';\r\nimport { enterpriseCacheSystem } from '@/lib/optimization/enterprise-cache-system';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\nexport type AlertSeverity = 'low' | 'medium' | 'high' | 'critical';\r\nexport type AlertStatus = 'active' | 'acknowledged' | 'resolved' | 'suppressed';\r\nexport type AlertCategory = 'security' | 'performance' | 'availability' | 'capacity' | 'error';\r\n\r\nexport interface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  category: AlertCategory;\r\n  severity: AlertSeverity;\r\n  enabled: boolean;\r\n  \r\n  // Condiciones de activación\r\n  conditions: AlertCondition[];\r\n  \r\n  // Configuración de notificación\r\n  notificationChannels: NotificationChannel[];\r\n  cooldownMinutes: number;\r\n  \r\n  // Configuración de escalamiento\r\n  escalationRules?: EscalationRule[];\r\n  \r\n  // Metadatos\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  createdBy: string;\r\n}\r\n\r\nexport interface AlertCondition {\r\n  metric: string;\r\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte' | 'contains' | 'not_contains';\r\n  threshold: number | string;\r\n  timeWindow: number; // minutos\r\n  evaluationInterval: number; // segundos\r\n}\r\n\r\nexport interface NotificationChannel {\r\n  type: 'email' | 'slack' | 'webhook' | 'sms' | 'dashboard';\r\n  config: NotificationConfig;\r\n  enabled: boolean;\r\n}\r\n\r\n// Configuraciones específicas para cada tipo de notificación\r\nexport interface NotificationConfig {\r\n  // Email config\r\n  to?: string[];\r\n  from?: string;\r\n  subject?: string;\r\n  \r\n  // Slack config\r\n  webhook?: string;\r\n  channel?: string;\r\n  username?: string;\r\n  \r\n  // Webhook config\r\n  url?: string;\r\n  method?: 'POST' | 'PUT';\r\n  headers?: Record<string, string>;\r\n  \r\n  // SMS config\r\n  phoneNumbers?: string[];\r\n  provider?: string;\r\n  \r\n  // Dashboard config\r\n  displayDuration?: number;\r\n  priority?: number;\r\n}\r\n\r\nexport interface EscalationRule {\r\n  afterMinutes: number;\r\n  severity: AlertSeverity;\r\n  additionalChannels: NotificationChannel[];\r\n}\r\n\r\nexport interface Alert {\r\n  id: string;\r\n  ruleId: string;\r\n  ruleName: string;\r\n  category: AlertCategory;\r\n  severity: AlertSeverity;\r\n  status: AlertStatus;\r\n  \r\n  // Detalles del alert\r\n  title: string;\r\n  description: string;\r\n  message: string;\r\n  \r\n  // Datos del trigger\r\n  triggeredAt: string;\r\n  triggeredBy: string;\r\n  triggerValue: number | string;\r\n  threshold: number | string;\r\n  \r\n  // Gestión del alert\r\n  acknowledgedAt?: string;\r\n  acknowledgedBy?: string;\r\n  resolvedAt?: string;\r\n  resolvedBy?: string;\r\n  \r\n  // Metadatos\r\n  metadata: AlertMetadata;\r\n  tags: string[];\r\n}\r\n\r\n// Metadatos específicos para alertas\r\nexport interface AlertMetadata {\r\n  // Información del contexto\r\n  source?: string;\r\n  environment?: 'development' | 'staging' | 'production';\r\n  version?: string;\r\n  \r\n  // Información técnica\r\n  errorCode?: string;\r\n  stackTrace?: string;\r\n  requestId?: string;\r\n  userId?: string;\r\n  \r\n  // Métricas relacionadas\r\n  threshold?: number;\r\n  actualValue?: number;\r\n  previousValue?: number;\r\n  \r\n  // Información de recuperación\r\n  recoveryActions?: string[];\r\n  relatedAlerts?: string[];\r\n  \r\n  // Información adicional\r\n  customFields?: Record<string, string | number | boolean>;\r\n}\r\n\r\nexport interface AlertMetrics {\r\n  totalAlerts: number;\r\n  activeAlerts: number;\r\n  alertsByCategory: Record<AlertCategory, number>;\r\n  alertsBySeverity: Record<AlertSeverity, number>;\r\n  averageResolutionTime: number;\r\n  falsePositiveRate: number;\r\n}\r\n\r\n// =====================================================\r\n// REGLAS DE ALERTA PREDEFINIDAS\r\n// =====================================================\r\n\r\nexport const ENTERPRISE_ALERT_RULES: AlertRule[] = [\r\n  // Alertas de seguridad\r\n  {\r\n    id: 'security_high_blocked_requests',\r\n    name: 'Alto número de requests bloqueados',\r\n    description: 'Se detectó un número inusualmente alto de requests bloqueados por rate limiting',\r\n    category: 'security',\r\n    severity: 'high',\r\n    enabled: true,\r\n    conditions: [\r\n      {\r\n        metric: 'rate_limiting.blocked_requests_per_minute',\r\n        operator: 'gt',\r\n        threshold: 100,\r\n        timeWindow: 5,\r\n        evaluationInterval: 60\r\n      }\r\n    ],\r\n    notificationChannels: [\r\n      {\r\n        type: 'email',\r\n        config: { recipients: ['security@pinteya.com'] },\r\n        enabled: true\r\n      },\r\n      {\r\n        type: 'dashboard',\r\n        config: {},\r\n        enabled: true\r\n      }\r\n    ],\r\n    cooldownMinutes: 15,\r\n    escalationRules: [\r\n      {\r\n        afterMinutes: 30,\r\n        severity: 'critical',\r\n        additionalChannels: [\r\n          {\r\n            type: 'sms',\r\n            config: { phone: '+5491123456789' },\r\n            enabled: true\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    createdBy: 'system'\r\n  },\r\n\r\n  {\r\n    id: 'security_critical_events',\r\n    name: 'Eventos críticos de seguridad',\r\n    description: 'Se detectaron eventos críticos en el sistema de auditoría',\r\n    category: 'security',\r\n    severity: 'critical',\r\n    enabled: true,\r\n    conditions: [\r\n      {\r\n        metric: 'audit.critical_events_per_hour',\r\n        operator: 'gt',\r\n        threshold: 5,\r\n        timeWindow: 60,\r\n        evaluationInterval: 300\r\n      }\r\n    ],\r\n    notificationChannels: [\r\n      {\r\n        type: 'email',\r\n        config: { recipients: ['security@pinteya.com', 'admin@pinteya.com'] },\r\n        enabled: true\r\n      },\r\n      {\r\n        type: 'sms',\r\n        config: { phone: '+5491123456789' },\r\n        enabled: true\r\n      }\r\n    ],\r\n    cooldownMinutes: 5,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    createdBy: 'system'\r\n  },\r\n\r\n  // Alertas de performance\r\n  {\r\n    id: 'performance_high_response_time',\r\n    name: 'Tiempo de respuesta alto',\r\n    description: 'El tiempo de respuesta P95 está por encima del umbral aceptable',\r\n    category: 'performance',\r\n    severity: 'medium',\r\n    enabled: true,\r\n    conditions: [\r\n      {\r\n        metric: 'api.response_time_p95',\r\n        operator: 'gt',\r\n        threshold: 1000, // 1 segundo\r\n        timeWindow: 10,\r\n        evaluationInterval: 120\r\n      }\r\n    ],\r\n    notificationChannels: [\r\n      {\r\n        type: 'email',\r\n        config: { recipients: ['devops@pinteya.com'] },\r\n        enabled: true\r\n      }\r\n    ],\r\n    cooldownMinutes: 30,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    createdBy: 'system'\r\n  },\r\n\r\n  {\r\n    id: 'performance_low_cache_hit_rate',\r\n    name: 'Baja tasa de hit de cache',\r\n    description: 'La tasa de hit del cache está por debajo del umbral óptimo',\r\n    category: 'performance',\r\n    severity: 'medium',\r\n    enabled: true,\r\n    conditions: [\r\n      {\r\n        metric: 'cache.hit_rate',\r\n        operator: 'lt',\r\n        threshold: 0.8, // 80%\r\n        timeWindow: 15,\r\n        evaluationInterval: 300\r\n      }\r\n    ],\r\n    notificationChannels: [\r\n      {\r\n        type: 'email',\r\n        config: { recipients: ['devops@pinteya.com'] },\r\n        enabled: true\r\n      }\r\n    ],\r\n    cooldownMinutes: 60,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    createdBy: 'system'\r\n  },\r\n\r\n  // Alertas de capacidad\r\n  {\r\n    id: 'capacity_high_memory_usage',\r\n    name: 'Alto uso de memoria',\r\n    description: 'El uso de memoria del sistema está por encima del 85%',\r\n    category: 'capacity',\r\n    severity: 'high',\r\n    enabled: true,\r\n    conditions: [\r\n      {\r\n        metric: 'system.memory_usage_percent',\r\n        operator: 'gt',\r\n        threshold: 85,\r\n        timeWindow: 5,\r\n        evaluationInterval: 60\r\n      }\r\n    ],\r\n    notificationChannels: [\r\n      {\r\n        type: 'email',\r\n        config: { recipients: ['devops@pinteya.com'] },\r\n        enabled: true\r\n      }\r\n    ],\r\n    cooldownMinutes: 15,\r\n    escalationRules: [\r\n      {\r\n        afterMinutes: 15,\r\n        severity: 'critical',\r\n        additionalChannels: [\r\n          {\r\n            type: 'sms',\r\n            config: { phone: '+5491123456789' },\r\n            enabled: true\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    createdBy: 'system'\r\n  },\r\n\r\n  // Alertas de errores\r\n  {\r\n    id: 'error_high_5xx_rate',\r\n    name: 'Alta tasa de errores 5xx',\r\n    description: 'La tasa de errores 5xx está por encima del umbral aceptable',\r\n    category: 'error',\r\n    severity: 'high',\r\n    enabled: true,\r\n    conditions: [\r\n      {\r\n        metric: 'api.error_rate_5xx',\r\n        operator: 'gt',\r\n        threshold: 0.05, // 5%\r\n        timeWindow: 10,\r\n        evaluationInterval: 120\r\n      }\r\n    ],\r\n    notificationChannels: [\r\n      {\r\n        type: 'email',\r\n        config: { recipients: ['devops@pinteya.com', 'backend@pinteya.com'] },\r\n        enabled: true\r\n      }\r\n    ],\r\n    cooldownMinutes: 10,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    createdBy: 'system'\r\n  }\r\n];\r\n\r\n// =====================================================\r\n// SISTEMA ENTERPRISE DE ALERTAS\r\n// =====================================================\r\n\r\nexport class EnterpriseAlertSystem {\r\n  private static instance: EnterpriseAlertSystem;\r\n  private alerts: Map<string, Alert> = new Map();\r\n  private alertRules: Map<string, AlertRule> = new Map();\r\n  private evaluationTimers: Map<string, NodeJS.Timeout> = new Map();\r\n  private isInitialized = false;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): EnterpriseAlertSystem {\r\n    if (!EnterpriseAlertSystem.instance) {\r\n      EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();\r\n    }\r\n    return EnterpriseAlertSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa el sistema de alertas\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) {return;}\r\n\r\n    try {\r\n      // Cargar reglas predefinidas\r\n      ENTERPRISE_ALERT_RULES.forEach(rule => {\r\n        this.alertRules.set(rule.id, rule);\r\n      });\r\n\r\n      // Iniciar evaluación de reglas\r\n      this.startRuleEvaluation();\r\n\r\n      // Iniciar limpieza automática\r\n      this.startCleanupScheduler();\r\n\r\n      this.isInitialized = true;\r\n      console.log('[ENTERPRISE_ALERTS] Sistema inicializado con', this.alertRules.size, 'reglas');\r\n    } catch (error) {\r\n      console.error('[ENTERPRISE_ALERTS] Error inicializando sistema:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evalúa todas las reglas de alerta activas\r\n   */\r\n  async evaluateRules(): Promise<void> {\r\n    for (const [ruleId, rule] of this.alertRules.entries()) {\r\n      if (!rule.enabled) {continue;}\r\n\r\n      try {\r\n        await this.evaluateRule(rule);\r\n      } catch (error) {\r\n        console.error(`[ENTERPRISE_ALERTS] Error evaluating rule ${ruleId}:`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evalúa una regla específica\r\n   */\r\n  private async evaluateRule(rule: AlertRule): Promise<void> {\r\n    for (const condition of rule.conditions) {\r\n      const metricValue = await this.getMetricValue(condition.metric);\r\n      \r\n      if (this.evaluateCondition(condition, metricValue)) {\r\n        // Verificar si ya existe un alert activo para esta regla\r\n        const existingAlert = Array.from(this.alerts.values())\r\n          .find(alert => alert.ruleId === rule.id && alert.status === 'active');\r\n\r\n        if (!existingAlert) {\r\n          await this.triggerAlert(rule, condition, metricValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evalúa una condición específica\r\n   */\r\n  private evaluateCondition(condition: AlertCondition, value: number | string): boolean {\r\n    const { operator, threshold } = condition;\r\n\r\n    switch (operator) {\r\n      case 'gt':\r\n        return Number(value) > Number(threshold);\r\n      case 'lt':\r\n        return Number(value) < Number(threshold);\r\n      case 'gte':\r\n        return Number(value) >= Number(threshold);\r\n      case 'lte':\r\n        return Number(value) <= Number(threshold);\r\n      case 'eq':\r\n        return value === threshold;\r\n      case 'contains':\r\n        return String(value).includes(String(threshold));\r\n      case 'not_contains':\r\n        return !String(value).includes(String(threshold));\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene el valor de una métrica\r\n   */\r\n  private async getMetricValue(metric: string): Promise<number | string> {\r\n    try {\r\n      const [system, metricName] = metric.split('.');\r\n\r\n      switch (system) {\r\n        case 'rate_limiting':\r\n          const rateLimitMetrics = metricsCollector.getMetrics();\r\n          switch (metricName) {\r\n            case 'blocked_requests_per_minute':\r\n              return rateLimitMetrics.blockedRequests || 0;\r\n            case 'average_response_time':\r\n              return rateLimitMetrics.averageResponseTime || 0;\r\n            case 'error_rate':\r\n              const total = rateLimitMetrics.totalRequests || 1;\r\n              return (rateLimitMetrics.errors || 0) / total;\r\n            default:\r\n              return 0;\r\n          }\r\n\r\n        case 'cache':\r\n          const cacheMetrics = enterpriseCacheSystem.getMetrics();\r\n          const cacheKeys = Object.keys(cacheMetrics);\r\n          \r\n          switch (metricName) {\r\n            case 'hit_rate':\r\n              if (cacheKeys.length === 0) {return 0;}\r\n              const totalHits = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits, 0);\r\n              const totalMisses = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].misses, 0);\r\n              const totalRequests = totalHits + totalMisses;\r\n              return totalRequests > 0 ? totalHits / totalRequests : 0;\r\n            case 'average_response_time':\r\n              if (cacheKeys.length === 0) {return 0;}\r\n              return cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].avgResponseTime, 0) / cacheKeys.length;\r\n            default:\r\n              return 0;\r\n          }\r\n\r\n        case 'system':\r\n          switch (metricName) {\r\n            case 'memory_usage_percent':\r\n              const memoryUsage = process.memoryUsage();\r\n              return (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;\r\n            case 'cpu_usage_percent':\r\n              // Simulado - en producción usar librerías como 'os-utils'\r\n              return Math.random() * 40 + 30;\r\n            default:\r\n              return 0;\r\n          }\r\n\r\n        case 'api':\r\n          // Métricas de API simuladas - en producción vendrían del sistema de métricas\r\n          switch (metricName) {\r\n            case 'response_time_p95':\r\n              return Math.random() * 500 + 200;\r\n            case 'error_rate_5xx':\r\n              return Math.random() * 0.02;\r\n            default:\r\n              return 0;\r\n          }\r\n\r\n        case 'audit':\r\n          switch (metricName) {\r\n            case 'critical_events_per_hour':\r\n              // Simulado - en producción vendría del sistema de auditoría\r\n              return Math.floor(Math.random() * 3);\r\n            default:\r\n              return 0;\r\n          }\r\n\r\n        default:\r\n          return 0;\r\n      }\r\n    } catch (error) {\r\n      console.error(`[ENTERPRISE_ALERTS] Error getting metric ${metric}:`, error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispara una nueva alerta\r\n   */\r\n  private async triggerAlert(\r\n    rule: AlertRule, \r\n    condition: AlertCondition, \r\n    triggerValue: number | string\r\n  ): Promise<void> {\r\n    const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const alert: Alert = {\r\n      id: alertId,\r\n      ruleId: rule.id,\r\n      ruleName: rule.name,\r\n      category: rule.category,\r\n      severity: rule.severity,\r\n      status: 'active',\r\n      title: rule.name,\r\n      description: rule.description,\r\n      message: `${rule.name}: ${condition.metric} is ${triggerValue} (threshold: ${condition.threshold})`,\r\n      triggeredAt: new Date().toISOString(),\r\n      triggeredBy: 'system',\r\n      triggerValue,\r\n      threshold: condition.threshold,\r\n      metadata: {\r\n        metric: condition.metric,\r\n        operator: condition.operator,\r\n        timeWindow: condition.timeWindow,\r\n        evaluationInterval: condition.evaluationInterval\r\n      },\r\n      tags: [rule.category, rule.severity, 'auto-generated']\r\n    };\r\n\r\n    // Guardar alerta\r\n    this.alerts.set(alertId, alert);\r\n\r\n    // Enviar notificaciones\r\n    await this.sendNotifications(alert, rule.notificationChannels);\r\n\r\n    // Registrar en auditoría\r\n    await this.logAlertEvent(alert, 'TRIGGERED');\r\n\r\n    // Programar escalamiento si está configurado\r\n    if (rule.escalationRules && rule.escalationRules.length > 0) {\r\n      this.scheduleEscalation(alert, rule.escalationRules);\r\n    }\r\n\r\n    console.log(`[ENTERPRISE_ALERTS] Alert triggered: ${alert.title}`);\r\n  }\r\n\r\n  /**\r\n   * Envía notificaciones para una alerta\r\n   */\r\n  private async sendNotifications(alert: Alert, channels: NotificationChannel[]): Promise<void> {\r\n    for (const channel of channels) {\r\n      if (!channel.enabled) {continue;}\r\n\r\n      try {\r\n        switch (channel.type) {\r\n          case 'email':\r\n            await this.sendEmailNotification(alert, channel.config);\r\n            break;\r\n          case 'slack':\r\n            await this.sendSlackNotification(alert, channel.config);\r\n            break;\r\n          case 'webhook':\r\n            await this.sendWebhookNotification(alert, channel.config);\r\n            break;\r\n          case 'sms':\r\n            await this.sendSMSNotification(alert, channel.config);\r\n            break;\r\n          case 'dashboard':\r\n            // Las alertas del dashboard se muestran automáticamente\r\n            break;\r\n          default:\r\n            console.warn(`[ENTERPRISE_ALERTS] Unknown notification channel: ${channel.type}`);\r\n        }\r\n      } catch (error) {\r\n        console.error(`[ENTERPRISE_ALERTS] Error sending ${channel.type} notification:`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía notificación por email\r\n   */\r\n  private async sendEmailNotification(alert: Alert, config: NotificationConfig): Promise<void> {\r\n    // Implementación de email - en producción usar servicios como SendGrid, SES, etc.\r\n    console.log(`[ENTERPRISE_ALERTS] Email notification sent to ${config.to?.join(', ')}:`, alert.title);\r\n  }\r\n\r\n  /**\r\n   * Envía notificación por Slack\r\n   */\r\n  private async sendSlackNotification(alert: Alert, config: NotificationConfig): Promise<void> {\r\n    // Implementación de Slack webhook\r\n    console.log(`[ENTERPRISE_ALERTS] Slack notification sent to ${config.channel}:`, alert.title);\r\n  }\r\n\r\n  /**\r\n   * Envía notificación por webhook\r\n   */\r\n  private async sendWebhookNotification(alert: Alert, config: NotificationConfig): Promise<void> {\r\n    // Implementación de webhook HTTP\r\n    console.log(`[ENTERPRISE_ALERTS] Webhook notification sent to ${config.url}:`, alert.title);\r\n  }\r\n\r\n  /**\r\n   * Envía notificación por SMS\r\n   */\r\n  private async sendSMSNotification(alert: Alert, config: NotificationConfig): Promise<void> {\r\n    // Implementación de SMS - en producción usar servicios como Twilio, AWS SNS, etc.\r\n    console.log(`[ENTERPRISE_ALERTS] SMS notification sent to ${config.phoneNumbers?.join(', ')}:`, alert.title);\r\n  }\r\n\r\n  /**\r\n   * Programa escalamiento de alerta\r\n   */\r\n  private scheduleEscalation(alert: Alert, escalationRules: EscalationRule[]): void {\r\n    escalationRules.forEach(rule => {\r\n      setTimeout(async () => {\r\n        const currentAlert = this.alerts.get(alert.id);\r\n        if (currentAlert && currentAlert.status === 'active') {\r\n          // Escalar severidad\r\n          currentAlert.severity = rule.severity;\r\n          \r\n          // Enviar notificaciones adicionales\r\n          await this.sendNotifications(currentAlert, rule.additionalChannels);\r\n          \r\n          // Registrar escalamiento\r\n          await this.logAlertEvent(currentAlert, 'ESCALATED');\r\n          \r\n          console.log(`[ENTERPRISE_ALERTS] Alert escalated: ${alert.title} -> ${rule.severity}`);\r\n        }\r\n      }, rule.afterMinutes * 60 * 1000);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra eventos de alerta en auditoría\r\n   */\r\n  private async logAlertEvent(alert: Alert, action: string): Promise<void> {\r\n    try {\r\n      await enterpriseAuditSystem.logEnterpriseEvent({\r\n        user_id: 'system',\r\n        event_type: 'ALERT_EVENT' as 'ALERT_EVENT',\r\n        event_category: 'monitoring',\r\n        severity: alert.severity as 'low' | 'medium' | 'high' | 'critical',\r\n        description: `Alert ${action}: ${alert.title}`,\r\n        metadata: {\r\n          alert_id: alert.id,\r\n          rule_id: alert.ruleId,\r\n          action,\r\n          category: alert.category,\r\n          severity: alert.severity,\r\n          trigger_value: alert.triggerValue,\r\n          threshold: alert.threshold\r\n        },\r\n        ip_address: '127.0.0.1',\r\n        user_agent: 'EnterpriseAlertSystem/1.0'\r\n      }, {\r\n        userId: 'system',\r\n        sessionId: 'alert_system',\r\n        email: 'system@pinteya.com',\r\n        role: 'system',\r\n        permissions: ['system_access'],\r\n        sessionValid: true,\r\n        securityLevel: 'critical',\r\n        ipAddress: '127.0.0.1',\r\n        userAgent: 'EnterpriseAlertSystem/1.0',\r\n        supabase: null,\r\n        validations: {\r\n          jwtValid: true,\r\n          csrfValid: true,\r\n          rateLimitPassed: true,\r\n          originValid: true\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('[ENTERPRISE_ALERTS] Error logging alert event:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las alertas activas\r\n   */\r\n  getActiveAlerts(): Alert[] {\r\n    return Array.from(this.alerts.values()).filter(alert => alert.status === 'active');\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas de alertas\r\n   */\r\n  getAlertMetrics(): AlertMetrics {\r\n    const allAlerts = Array.from(this.alerts.values());\r\n    const activeAlerts = allAlerts.filter(alert => alert.status === 'active');\r\n    \r\n    const alertsByCategory = allAlerts.reduce((acc, alert) => {\r\n      acc[alert.category] = (acc[alert.category] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<AlertCategory, number>);\r\n\r\n    const alertsBySeverity = allAlerts.reduce((acc, alert) => {\r\n      acc[alert.severity] = (acc[alert.severity] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<AlertSeverity, number>);\r\n\r\n    // Calcular tiempo promedio de resolución\r\n    const resolvedAlerts = allAlerts.filter(alert => alert.resolvedAt);\r\n    const averageResolutionTime = resolvedAlerts.length > 0 ?\r\n      resolvedAlerts.reduce((sum, alert) => {\r\n        const triggered = new Date(alert.triggeredAt).getTime();\r\n        const resolved = new Date(alert.resolvedAt!).getTime();\r\n        return sum + (resolved - triggered);\r\n      }, 0) / resolvedAlerts.length / 1000 / 60 : 0; // en minutos\r\n\r\n    return {\r\n      totalAlerts: allAlerts.length,\r\n      activeAlerts: activeAlerts.length,\r\n      alertsByCategory,\r\n      alertsBySeverity,\r\n      averageResolutionTime,\r\n      falsePositiveRate: 0.05 // Simulado\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reconoce una alerta\r\n   */\r\n  async acknowledgeAlert(alertId: string, userId: string): Promise<boolean> {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || alert.status !== 'active') {\r\n      return false;\r\n    }\r\n\r\n    alert.status = 'acknowledged';\r\n    alert.acknowledgedAt = new Date().toISOString();\r\n    alert.acknowledgedBy = userId;\r\n\r\n    await this.logAlertEvent(alert, 'ACKNOWLEDGED');\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  async resolveAlert(alertId: string, userId: string): Promise<boolean> {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || (alert.status !== 'active' && alert.status !== 'acknowledged')) {\r\n      return false;\r\n    }\r\n\r\n    alert.status = 'resolved';\r\n    alert.resolvedAt = new Date().toISOString();\r\n    alert.resolvedBy = userId;\r\n\r\n    await this.logAlertEvent(alert, 'RESOLVED');\r\n    return true;\r\n  }\r\n\r\n  // =====================================================\r\n  // MÉTODOS PRIVADOS\r\n  // =====================================================\r\n\r\n  private startRuleEvaluation(): void {\r\n    // Evaluar reglas cada 60 segundos\r\n    setInterval(() => {\r\n      this.evaluateRules().catch(error => {\r\n        console.error('[ENTERPRISE_ALERTS] Error in rule evaluation:', error);\r\n      });\r\n    }, 60 * 1000);\r\n  }\r\n\r\n  private startCleanupScheduler(): void {\r\n    // Limpiar alertas resueltas antiguas cada hora\r\n    setInterval(() => {\r\n      const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n      \r\n      for (const [alertId, alert] of this.alerts.entries()) {\r\n        if (alert.status === 'resolved' && alert.resolvedAt) {\r\n          const resolvedTime = new Date(alert.resolvedAt).getTime();\r\n          if (resolvedTime < oneWeekAgo) {\r\n            this.alerts.delete(alertId);\r\n          }\r\n        }\r\n      }\r\n    }, 60 * 60 * 1000); // 1 hora\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// INSTANCIA SINGLETON\r\n// =====================================================\r\n\r\nexport const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance();\r\n\r\n/**\r\n * Funciones de utilidad para alertas\r\n */\r\nexport const EnterpriseAlertUtils = {\r\n  /**\r\n   * Crea una alerta manual\r\n   */\r\n  async createManualAlert(\r\n    title: string,\r\n    description: string,\r\n    severity: AlertSeverity,\r\n    category: AlertCategory,\r\n    userId: string\r\n  ): Promise<string> {\r\n    const alertId = `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n    const alert: Alert = {\r\n      id: alertId,\r\n      ruleId: 'manual',\r\n      ruleName: 'Manual Alert',\r\n      category,\r\n      severity,\r\n      status: 'active',\r\n      title,\r\n      description,\r\n      message: description,\r\n      triggeredAt: new Date().toISOString(),\r\n      triggeredBy: userId,\r\n      triggerValue: 'manual',\r\n      threshold: 'manual',\r\n      metadata: {\r\n        manual: true,\r\n        created_by: userId\r\n      },\r\n      tags: ['manual', category, severity]\r\n    };\r\n\r\n    enterpriseAlertSystem['alerts'].set(alertId, alert);\r\n    await enterpriseAlertSystem['logAlertEvent'](alert, 'CREATED');\r\n\r\n    return alertId;\r\n  },\r\n\r\n  /**\r\n   * Obtiene alertas por categoría\r\n   */\r\n  getAlertsByCategory(category: AlertCategory): Alert[] {\r\n    return Array.from(enterpriseAlertSystem['alerts'].values())\r\n      .filter(alert => alert.category === category);\r\n  },\r\n\r\n  /**\r\n   * Obtiene alertas por severidad\r\n   */\r\n  getAlertsBySeverity(severity: AlertSeverity): Alert[] {\r\n    return Array.from(enterpriseAlertSystem['alerts'].values())\r\n      .filter(alert => alert.severity === severity);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["ENTERPRISE_ALERT_RULES","EnterpriseAlertSystem","EnterpriseAlertUtils","enterpriseAlertSystem","id","name","description","category","severity","enabled","conditions","metric","operator","threshold","timeWindow","evaluationInterval","notificationChannels","type","config","recipients","cooldownMinutes","escalationRules","afterMinutes","additionalChannels","phone","createdAt","Date","toISOString","updatedAt","createdBy","alerts","Map","alertRules","evaluationTimers","isInitialized","getInstance","instance","initialize","forEach","rule","set","startRuleEvaluation","startCleanupScheduler","console","log","size","error","evaluateRules","ruleId","entries","evaluateRule","condition","metricValue","getMetricValue","evaluateCondition","existingAlert","Array","from","values","find","alert","status","triggerAlert","value","Number","String","includes","system","metricName","split","rateLimitMetrics","metricsCollector","getMetrics","blockedRequests","averageResponseTime","total","totalRequests","errors","cacheMetrics","enterpriseCacheSystem","cacheKeys","Object","keys","length","totalHits","reduce","sum","key","hits","totalMisses","misses","avgResponseTime","memoryUsage","process","heapUsed","heapTotal","Math","random","floor","triggerValue","alertId","now","toString","substr","ruleName","title","message","triggeredAt","triggeredBy","metadata","tags","sendNotifications","logAlertEvent","scheduleEscalation","channels","channel","sendEmailNotification","sendSlackNotification","sendWebhookNotification","sendSMSNotification","warn","to","join","url","phoneNumbers","setTimeout","currentAlert","get","action","enterpriseAuditSystem","logEnterpriseEvent","user_id","event_type","event_category","alert_id","rule_id","trigger_value","ip_address","user_agent","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","getActiveAlerts","filter","getAlertMetrics","allAlerts","activeAlerts","alertsByCategory","acc","alertsBySeverity","resolvedAlerts","resolvedAt","averageResolutionTime","triggered","getTime","resolved","totalAlerts","falsePositiveRate","acknowledgeAlert","acknowledgedAt","acknowledgedBy","resolveAlert","resolvedBy","setInterval","catch","oneWeekAgo","resolvedTime","delete","createManualAlert","manual","created_by","getAlertsByCategory","getAlertsBySeverity"],"mappings":"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"}