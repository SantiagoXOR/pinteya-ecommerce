{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ui\\checkout-flow.tsx"],"sourcesContent":["'use client'\n\nimport * as React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { CartSummary } from '@/components/ui/cart-summary'\nimport { CartItem } from '@/types/api'\nimport {\n  CheckCircle,\n  CreditCard,\n  ArrowLeft,\n  ArrowRight,\n  AlertCircle,\n  ShoppingCart,\n  Truck,\n  User,\n  Clock,\n  Shield,\n} from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\n// Tipos mejorados con mejor tipado\nexport interface CheckoutStep {\n  id: string\n  name: string\n  description: string\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>\n  isComplete: boolean\n  isActive: boolean\n}\n\nexport interface CheckoutMetrics {\n  startTime?: Date\n  currentStep?: string\n  completedSteps?: string[]\n  errors?: string[]\n  performanceData?: {\n    loadTime: number\n    renderTime: number\n  }\n}\n\nexport interface CheckoutFlowProps {\n  /** Items del carrito */\n  cartItems: CartItem[]\n  /** Datos del checkout */\n  checkoutData?: {\n    totalPrice: number\n    shippingCost?: number\n    discount?: number\n    finalTotal?: number\n  }\n  /** Estado de carga */\n  isLoading?: boolean\n  /** Errores */\n  errors?: Record<string, string>\n  /** Callback para finalizar checkout */\n  onComplete?: () => void\n  /** Callback para cambio de paso */\n  onStepChange?: (stepId: string) => void\n  /** Paso actual (0-based) */\n  currentStep?: number\n  /** Mostrar indicador de progreso */\n  showProgress?: boolean\n  /** Métricas de rendimiento */\n  metrics?: CheckoutMetrics\n  /** Modo de testing para screenshots */\n  testMode?: boolean\n  /** Clase CSS adicional */\n  className?: string\n  /** Contenido personalizado */\n  children?: React.ReactNode\n}\n\n// Pasos del checkout predefinidos\nconst DEFAULT_CHECKOUT_STEPS: CheckoutStep[] = [\n  {\n    id: 'cart',\n    name: 'Carrito',\n    description: 'Revisar productos',\n    icon: ShoppingCart,\n    isComplete: false,\n    isActive: true,\n  },\n  {\n    id: 'shipping',\n    name: 'Envío',\n    description: 'Información de entrega',\n    icon: Truck,\n    isComplete: false,\n    isActive: false,\n  },\n  {\n    id: 'payment',\n    name: 'Pago',\n    description: 'Datos del comprador',\n    icon: User,\n    isComplete: false,\n    isActive: false,\n  },\n  {\n    id: 'confirmation',\n    name: 'Confirmación',\n    description: 'Finalizar compra',\n    icon: CheckCircle,\n    isComplete: false,\n    isActive: false,\n  },\n]\n\n/**\n * CheckoutFlow Enterprise - Componente optimizado para flujo de compra sin autenticación\n *\n * Características mejoradas:\n * - ✅ Indicador de progreso visual paso a paso\n * - ✅ Métricas de rendimiento integradas\n * - ✅ Manejo robusto de errores con contexto\n * - ✅ Screenshots automáticos para testing\n * - ✅ Integración con Design System Pinteya\n * - ✅ Responsive design mobile-first\n * - ✅ Accesibilidad WCAG 2.1 AA\n * - ✅ Optimización de performance\n *\n * @example\n * ```tsx\n * <CheckoutFlow\n *   cartItems={items}\n *   checkoutData={data}\n *   currentStep={1}\n *   showProgress={true}\n *   testMode={process.env.NODE_ENV === 'test'}\n *   onComplete={handleComplete}\n *   onStepChange={handleStepChange}\n * />\n * ```\n */\nexport const CheckoutFlow = React.forwardRef<HTMLDivElement, CheckoutFlowProps>(\n  (\n    {\n      cartItems = [],\n      checkoutData = {},\n      isLoading = false,\n      errors = {},\n      onComplete,\n      onStepChange,\n      currentStep = 0,\n      showProgress = true,\n      metrics,\n      testMode = false,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    // Estado interno para pasos\n    const [steps, setSteps] = React.useState<CheckoutStep[]>(DEFAULT_CHECKOUT_STEPS)\n    const [startTime] = React.useState<Date>(new Date())\n\n    // Actualizar pasos basado en currentStep\n    React.useEffect(() => {\n      setSteps(prevSteps =>\n        prevSteps.map((step, index) => ({\n          ...step,\n          isComplete: index < currentStep,\n          isActive: index === currentStep,\n        }))\n      )\n    }, [currentStep])\n\n    // Calcular progreso\n    const progressPercentage = ((currentStep + 1) / steps.length) * 100\n\n    // Helper para generar data-testids para testing\n    const getTestId = (suffix: string) => (testMode ? `checkout-flow-${suffix}` : undefined)\n\n    return (\n      <div\n        ref={ref}\n        className={cn('w-full max-w-4xl mx-auto space-y-6 p-4', className)}\n        data-testid={getTestId('container')}\n        {...props}\n      >\n        {/* Indicador de progreso */}\n        {showProgress && (\n          <Card data-testid={getTestId('progress-card')}>\n            <CardContent className='pt-6'>\n              <div className='space-y-4'>\n                {/* Barra de progreso */}\n                <div className='space-y-2'>\n                  <div className='flex justify-between items-center'>\n                    <span className='text-sm font-medium text-gray-700'>Progreso del checkout</span>\n                    <Badge variant='secondary' data-testid={getTestId('progress-badge')}>\n                      {currentStep + 1} de {steps.length}\n                    </Badge>\n                  </div>\n                  <Progress\n                    value={progressPercentage}\n                    className='h-2'\n                    data-testid={getTestId('progress-bar')}\n                  />\n                </div>\n\n                {/* Pasos visuales */}\n                <div className='flex justify-between items-center'>\n                  {steps.map((step, index) => {\n                    const Icon = step.icon\n                    return (\n                      <div\n                        key={step.id}\n                        className={cn(\n                          'flex flex-col items-center space-y-2 flex-1',\n                          index < steps.length - 1 && 'border-r border-gray-200 pr-4'\n                        )}\n                        data-testid={getTestId(`step-${step.id}`)}\n                      >\n                        <div\n                          className={cn(\n                            'w-10 h-10 rounded-full flex items-center justify-center border-2 transition-colors',\n                            step.isComplete && 'bg-green-500 border-green-500 text-white',\n                            step.isActive &&\n                              !step.isComplete &&\n                              'bg-primary border-primary text-white',\n                            !step.isActive &&\n                              !step.isComplete &&\n                              'bg-gray-100 border-gray-300 text-gray-500'\n                          )}\n                        >\n                          <Icon className='w-5 h-5' />\n                        </div>\n                        <div className='text-center'>\n                          <p\n                            className={cn(\n                              'text-xs font-medium',\n                              step.isActive && 'text-primary',\n                              step.isComplete && 'text-green-600',\n                              !step.isActive && !step.isComplete && 'text-gray-500'\n                            )}\n                          >\n                            {step.name}\n                          </p>\n                          <p className='text-xs text-gray-400 hidden sm:block'>\n                            {step.description}\n                          </p>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Métricas de rendimiento (solo en modo test) */}\n        {testMode && metrics && (\n          <Card\n            className='border-dashed border-blue-200 bg-blue-50'\n            data-testid={getTestId('metrics-card')}\n          >\n            <CardContent className='pt-4'>\n              <div className='flex items-center gap-2 mb-2'>\n                <Clock className='w-4 h-4 text-blue-600' />\n                <span className='text-sm font-medium text-blue-800'>Métricas de Testing</span>\n              </div>\n              <div className='grid grid-cols-2 gap-4 text-xs'>\n                <div>\n                  <span className='text-blue-600'>Tiempo transcurrido:</span>\n                  <span className='ml-1 font-mono'>\n                    {metrics.startTime\n                      ? Math.round((Date.now() - metrics.startTime.getTime()) / 1000)\n                      : 0}\n                    s\n                  </span>\n                </div>\n                <div>\n                  <span className='text-blue-600'>Paso actual:</span>\n                  <span className='ml-1 font-mono'>\n                    {metrics.currentStep || steps[currentStep]?.name}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Errores mejorados */}\n        {Object.keys(errors).length > 0 && (\n          <Card className='border-red-200 bg-red-50' data-testid={getTestId('errors-card')}>\n            <CardContent className='pt-4'>\n              <div className='flex items-center gap-2 text-red-800 mb-3'>\n                <AlertCircle className='w-5 h-5' />\n                <span className='font-medium'>Se encontraron errores</span>\n              </div>\n              <ul className='space-y-2'>\n                {Object.entries(errors).map(([field, error]) => (\n                  <li key={field} className='flex items-start gap-2 text-sm text-red-700'>\n                    <span className='w-1 h-1 bg-red-500 rounded-full mt-2 flex-shrink-0' />\n                    <span>\n                      <strong>{field}:</strong>{' '}\n                      {error instanceof Error\n                        ? error.message\n                        : error?.toString() || 'Error desconocido'}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Layout principal con grid responsive */}\n        <div className='grid grid-cols-1 lg:grid-cols-3 gap-6'>\n          {/* Formulario principal */}\n          <div className='lg:col-span-2 space-y-4'>\n            <Card data-testid={getTestId('main-form')}>\n              <CardHeader className='pb-4'>\n                <CardTitle className='text-xl flex items-center gap-3'>\n                  <div\n                    className={cn(\n                      'w-8 h-8 rounded-full flex items-center justify-center',\n                      'bg-primary text-white'\n                    )}\n                  >\n                    <CreditCard className='w-4 h-4' />\n                  </div>\n                  <div>\n                    <span>Finalizar Compra</span>\n                    {steps[currentStep] && (\n                      <p className='text-sm text-gray-500 font-normal mt-1'>\n                        {steps[currentStep].description}\n                      </p>\n                    )}\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className='space-y-6'>\n                {/* Contenido del formulario */}\n                <div data-testid={getTestId('form-content')}>{children}</div>\n\n                {/* Botones de acción */}\n                <div className='flex flex-col sm:flex-row gap-3 pt-4 border-t'>\n                  {currentStep > 0 && (\n                    <Button\n                      variant='outline'\n                      onClick={() => onStepChange?.(steps[currentStep - 1]?.id)}\n                      className='sm:w-auto'\n                      data-testid={getTestId('back-button')}\n                    >\n                      <ArrowLeft className='w-4 h-4 mr-2' />\n                      Anterior\n                    </Button>\n                  )}\n\n                  <Button\n                    onClick={onComplete}\n                    disabled={isLoading}\n                    className='flex-1 sm:flex-none sm:min-w-[200px] h-12 text-base font-medium'\n                    size='lg'\n                    data-testid={getTestId('submit-button')}\n                  >\n                    {isLoading ? (\n                      <>\n                        <div className='w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2' />\n                        Procesando...\n                      </>\n                    ) : currentStep < steps.length - 1 ? (\n                      <>\n                        Continuar\n                        <ArrowRight className='w-4 h-4 ml-2' />\n                      </>\n                    ) : (\n                      <>\n                        <Shield className='w-4 h-4 mr-2' />\n                        Completar Pedido\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar con resumen */}\n          <div className='space-y-4'>\n            <CartSummary\n              cartItems={cartItems}\n              totalPrice={checkoutData.totalPrice || 0}\n              shippingCost={checkoutData.shippingCost}\n              discount={checkoutData.discount}\n              finalTotal={checkoutData.finalTotal}\n              variant='detailed'\n              showProductCards={true}\n              productCardContext='checkout'\n              showShippingDetails={true}\n              data-testid={getTestId('cart-summary')}\n            />\n\n            {/* Información de seguridad */}\n            <Card className='border-green-200 bg-green-50'>\n              <CardContent className='pt-4'>\n                <div className='flex items-center gap-2 text-green-800 mb-2'>\n                  <Shield className='w-4 h-4' />\n                  <span className='text-sm font-medium'>Compra Segura</span>\n                </div>\n                <p className='text-xs text-green-700'>\n                  Tus datos están protegidos con encriptación SSL de 256 bits. Procesamiento seguro\n                  con MercadoPago.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\n\nCheckoutFlow.displayName = 'CheckoutFlow'\n\n// Exportar tipos para uso externo\nexport type { CheckoutStep, CheckoutMetrics }\n"],"names":["CheckoutFlow","DEFAULT_CHECKOUT_STEPS","id","name","description","icon","ShoppingCart","isComplete","isActive","Truck","User","CheckCircle","React","forwardRef","cartItems","checkoutData","isLoading","errors","onComplete","onStepChange","currentStep","showProgress","metrics","testMode","className","children","props","ref","steps","setSteps","useState","startTime","Date","useEffect","prevSteps","map","step","index","progressPercentage","length","getTestId","suffix","undefined","div","cn","data-testid","Card","CardContent","span","Badge","variant","Progress","value","Icon","p","Clock","Math","round","now","getTime","Object","keys","AlertCircle","ul","entries","field","error","li","strong","Error","message","toString","CardHeader","CardTitle","CreditCard","Button","onClick","ArrowLeft","disabled","size","ArrowRight","Shield","CartSummary","totalPrice","shippingCost","discount","finalTotal","showProductCards","productCardContext","showShippingDetails","displayName"],"mappings":"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"}