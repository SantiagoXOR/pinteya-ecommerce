c4de13a7547e0df58be87afedf201585
// ===================================
// PINTEYA E-COMMERCE - ENDPOINT PARA MARCAR DIRECCIÓN COMO PREDETERMINADA
// ===================================
"use strict";

/* istanbul ignore next */
function cov_25is6muth0() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\[id]\\default\\route.ts";
  var hash = "3acdb010b737cd2bc7ae5d45e5f6066d0ed171c6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\[id]\\default\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 13,
          column: 3
        }
      },
      "2": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 20
        }
      },
      "3": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "4": {
        start: {
          line: 15,
          column: 18
        },
        end: {
          line: 15,
          column: 72
        }
      },
      "5": {
        start: {
          line: 16,
          column: 14
        },
        end: {
          line: 16,
          column: 47
        }
      },
      "6": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 88
        }
      },
      "8": {
        start: {
          line: 26,
          column: 43
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "10": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 74
        }
      },
      "11": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 19
        }
      },
      "12": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 33,
          column: 52
        }
      },
      "13": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 82
        }
      },
      "14": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "15": {
        start: {
          line: 37,
          column: 43
        },
        end: {
          line: 39,
          column: 23
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "17": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 107
        }
      },
      "18": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 44,
          column: 48
        }
      },
      "19": {
        start: {
          line: 46,
          column: 15
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "20": {
        start: {
          line: 48,
          column: 34
        },
        end: {
          line: 48,
          column: 56
        }
      },
      "21": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 78
        }
      },
      "22": {
        start: {
          line: 49,
          column: 70
        },
        end: {
          line: 49,
          column: 77
        }
      },
      "23": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 103
        }
      },
      "24": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 78
        }
      },
      "25": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 37
        }
      },
      "26": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 84
        }
      },
      "27": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "28": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "29": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 76
        }
      },
      "30": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "31": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 80
        }
      },
      "32": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "33": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 47
        }
      },
      "34": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "35": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 52
        }
      },
      "36": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "37": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 85,
          column: 43
        }
      },
      "38": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 35
        }
      },
      "39": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "40": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "41": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 75
        }
      },
      "42": {
        start: {
          line: 96,
          column: 31
        },
        end: {
          line: 96,
          column: 130
        }
      },
      "43": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "44": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 51
        }
      },
      "45": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "46": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "47": {
        start: {
          line: 109,
          column: 55
        },
        end: {
          line: 109,
          column: 190
        }
      },
      "48": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "49": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 94
        }
      },
      "50": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      },
      "51": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "52": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "53": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 63
        }
      },
      "54": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 130,
          column: 15
        }
      },
      "55": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 95
        }
      },
      "56": {
        start: {
          line: 134,
          column: 38
        },
        end: {
          line: 136,
          column: 56
        }
      },
      "57": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "58": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 91
        }
      },
      "59": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 143,
          column: 15
        }
      },
      "60": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 84
        }
      },
      "61": {
        start: {
          line: 147,
          column: 61
        },
        end: {
          line: 150,
          column: 71
        }
      },
      "62": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "63": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 91
        }
      },
      "64": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "65": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 103
        }
      },
      "66": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 47
        }
      },
      "67": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "68": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 82
        }
      },
      "69": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 173,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 10
          }
        },
        loc: {
          start: {
            line: 10,
            column: 20
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "ensureOneDefaultAddress",
        decl: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 22,
            column: 42
          }
        },
        loc: {
          start: {
            line: 22,
            column: 51
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 62
          },
          end: {
            line: 49,
            column: 63
          }
        },
        loc: {
          start: {
            line: 49,
            column: 70
          },
          end: {
            line: 49,
            column: 77
          }
        },
        line: 49
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 62,
            column: 15
          },
          end: {
            line: 62,
            column: 19
          }
        },
        loc: {
          start: {
            line: 62,
            column: 38
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 62
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 57,
            column: 9
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 28
          }
        }, {
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 55
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: 55,
            column: 15
          },
          end: {
            line: 57,
            column: 9
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "9": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 24
          }
        }, {
          start: {
            line: 110,
            column: 28
          },
          end: {
            line: 110,
            column: 36
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "13": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "14": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 23
          }
        }, {
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 42
          }
        }],
        line: 151
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\[id]\\default\\route.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ENDPOINT PARA MARCAR DIRECCI\xD3N COMO PREDETERMINADA\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\n\r\ntype RouteContext = {\r\n  params: {\r\n    id: string;\r\n  };\r\n};\r\n\r\n// ===================================\r\n// FUNCIONES HELPER PARA DIRECCIONES PREDETERMINADAS\r\n// ===================================\r\n\r\n/**\r\n * Asegura que el usuario tenga exactamente una direcci\xF3n predeterminada\r\n */\r\nasync function ensureOneDefaultAddress(userId: string) {\r\n  try {\r\n    console.log('\uD83D\uDD0D Verificando direcciones predeterminadas para usuario:', userId);\r\n    \r\n    // Obtener todas las direcciones predeterminadas del usuario\r\n    const { data: defaultAddresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, created_at')\r\n      .eq('user_id', userId)\r\n      .eq('is_default', true)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (!defaultAddresses) {\r\n      console.log('\u274C Error al obtener direcciones predeterminadas');\r\n      return;\r\n    }\r\n\r\n    const defaultCount = defaultAddresses.length;\r\n    console.log(`\uD83D\uDD0D Encontradas ${defaultCount} direcciones predeterminadas`);\r\n\r\n    if (defaultCount === 0) {\r\n      // No hay direcciones predeterminadas, marcar la m\xE1s reciente\r\n      const { data: allAddresses } = await supabaseAdmin\r\n        .from('user_addresses')\r\n        .select('id')\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (allAddresses && allAddresses.length > 0) {\r\n        console.log('\uD83D\uDD04 Marcando direcci\xF3n m\xE1s reciente como predeterminada:', allAddresses[0].id);\r\n        await supabaseAdmin\r\n          .from('user_addresses')\r\n          .update({ is_default: true })\r\n          .eq('id', allAddresses[0].id);\r\n      }\r\n    } else if (defaultCount > 1) {\r\n      // Hay m\xFAltiples direcciones predeterminadas, mantener solo la m\xE1s reciente\r\n      const keepDefaultId = defaultAddresses[0].id;\r\n      const idsToUpdate = defaultAddresses.slice(1).map(addr => addr.id);\r\n      \r\n      console.log(`\uD83D\uDD04 Desmarcando ${idsToUpdate.length} direcciones predeterminadas duplicadas`);\r\n      console.log('\uD83D\uDD04 Manteniendo como predeterminada:', keepDefaultId);\r\n      \r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .in('id', idsToUpdate);\r\n    } else {\r\n      console.log('\u2705 Usuario tiene exactamente una direcci\xF3n predeterminada');\r\n    }\r\n  } catch (error) {\r\n    console.error('\u274C Error en ensureOneDefaultAddress:', error);\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Marcar direcci\xF3n como predeterminada\r\n// ===================================\r\nexport async function POST(\r\n  request: NextRequest,\r\n  context: { params: Promise<RouteContext['params']> }\r\n) {\r\n  try {\r\n    console.log('\uD83D\uDD04 POST /api/user/addresses/[id]/default - Iniciando');\r\n\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('\u274C Cliente administrativo de Supabase no disponible');\r\n      return NextResponse.json(\r\n        { error: 'Error de configuraci\xF3n del servidor' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      console.log('\u274C Usuario no autenticado');\r\n      return NextResponse.json(\r\n        { error: 'No autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener par\xE1metros\r\n    const params = await context.params;\r\n    const addressId = params.id;\r\n\r\n    if (!addressId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de direcci\xF3n requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('\uD83D\uDD0D POST - Buscando usuario con id:', session.user.id);\r\n\r\n    // Obtener usuario\r\n    const { data: user } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    if (!user) {\r\n      console.log('\u274C Usuario no encontrado');\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    console.log('\uD83D\uDD0D POST - Usuario encontrado:', { id: user.id });\r\n\r\n    // Verificar que la direcci\xF3n existe y pertenece al usuario\r\n    const { data: address, error: addressError } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, name, is_default')\r\n      .eq('id', addressId)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (addressError || !address) {\r\n      console.log('\u274C Direcci\xF3n no encontrada o no pertenece al usuario:', addressError);\r\n      return NextResponse.json(\r\n        { error: 'Direcci\xF3n no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    console.log('\uD83D\uDD0D POST - Direcci\xF3n encontrada:', { id: address.id, name: address.name, is_default: address.is_default });\r\n\r\n    // Si ya es predeterminada, no hacer nada\r\n    if (address.is_default) {\r\n      console.log('\u2705 La direcci\xF3n ya es predeterminada');\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'La direcci\xF3n ya es predeterminada',\r\n        data: address\r\n      });\r\n    }\r\n\r\n    // Paso 1: Desmarcar todas las direcciones predeterminadas del usuario\r\n    console.log('\uD83D\uDD04 POST - Desmarcando todas las direcciones predeterminadas del usuario');\r\n    const { error: unsetError } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .update({ is_default: false })\r\n      .eq('user_id', user.id)\r\n      .eq('is_default', true);\r\n\r\n    if (unsetError) {\r\n      console.error('\u274C Error al desmarcar direcciones predeterminadas:', unsetError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar direcciones predeterminadas' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Paso 2: Marcar la direcci\xF3n seleccionada como predeterminada\r\n    console.log('\uD83D\uDD04 POST - Marcando direcci\xF3n como predeterminada:', addressId);\r\n    const { data: updatedAddress, error: updateError } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .update({ \r\n        is_default: true,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', addressId)\r\n      .eq('user_id', user.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError || !updatedAddress) {\r\n      console.error('\u274C Error al marcar direcci\xF3n como predeterminada:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar direcci\xF3n predeterminada' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    console.log('\u2705 POST - Direcci\xF3n marcada como predeterminada exitosamente:', updatedAddress.id);\r\n\r\n    // Paso 3: Asegurar que solo haya una direcci\xF3n predeterminada\r\n    await ensureOneDefaultAddress(user.id);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Direcci\xF3n predeterminada actualizada correctamente',\r\n      data: updatedAddress\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error en POST /api/user/addresses/[id]/default:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],
      names: ["POST", "ensureOneDefaultAddress", "userId", "console", "log", "data", "defaultAddresses", "supabaseAdmin", "from", "select", "eq", "order", "ascending", "defaultCount", "length", "allAddresses", "limit", "id", "update", "is_default", "keepDefaultId", "idsToUpdate", "slice", "map", "addr", "in", "error", "request", "context", "NextResponse", "json", "status", "session", "auth", "user", "params", "addressId", "single", "address", "addressError", "name", "success", "message", "unsetError", "updatedAddress", "updateError", "updated_at", "Date", "toISOString"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3acdb010b737cd2bc7ae5d45e5f6066d0ed171c6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25is6muth0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25is6muth0();
cov_25is6muth0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_25is6muth0().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_25is6muth0().f[0]++;
    cov_25is6muth0().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_25is6muth0().s[3]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_25is6muth0().s[4]++, require("../../../../../../lib/integrations/supabase"));
const _auth =
/* istanbul ignore next */
(cov_25is6muth0().s[5]++, require("../../../../../../auth"));
// ===================================
// FUNCIONES HELPER PARA DIRECCIONES PREDETERMINADAS
// ===================================
/**
 * Asegura que el usuario tenga exactamente una dirección predeterminada
 */
async function ensureOneDefaultAddress(userId) {
  /* istanbul ignore next */
  cov_25is6muth0().f[1]++;
  cov_25is6muth0().s[6]++;
  try {
    /* istanbul ignore next */
    cov_25is6muth0().s[7]++;
    console.log('🔍 Verificando direcciones predeterminadas para usuario:', userId);
    // Obtener todas las direcciones predeterminadas del usuario
    const {
      data: defaultAddresses
    } =
    /* istanbul ignore next */
    (cov_25is6muth0().s[8]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, created_at').eq('user_id', userId).eq('is_default', true).order('created_at', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_25is6muth0().s[9]++;
    if (!defaultAddresses) {
      /* istanbul ignore next */
      cov_25is6muth0().b[0][0]++;
      cov_25is6muth0().s[10]++;
      console.log('❌ Error al obtener direcciones predeterminadas');
      /* istanbul ignore next */
      cov_25is6muth0().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[0][1]++;
    }
    const defaultCount =
    /* istanbul ignore next */
    (cov_25is6muth0().s[12]++, defaultAddresses.length);
    /* istanbul ignore next */
    cov_25is6muth0().s[13]++;
    console.log(`🔍 Encontradas ${defaultCount} direcciones predeterminadas`);
    /* istanbul ignore next */
    cov_25is6muth0().s[14]++;
    if (defaultCount === 0) {
      /* istanbul ignore next */
      cov_25is6muth0().b[1][0]++;
      // No hay direcciones predeterminadas, marcar la más reciente
      const {
        data: allAddresses
      } =
      /* istanbul ignore next */
      (cov_25is6muth0().s[15]++, await _supabase.supabaseAdmin.from('user_addresses').select('id').eq('user_id', userId).order('created_at', {
        ascending: false
      }).limit(1));
      /* istanbul ignore next */
      cov_25is6muth0().s[16]++;
      if (
      /* istanbul ignore next */
      (cov_25is6muth0().b[3][0]++, allAddresses) &&
      /* istanbul ignore next */
      (cov_25is6muth0().b[3][1]++, allAddresses.length > 0)) {
        /* istanbul ignore next */
        cov_25is6muth0().b[2][0]++;
        cov_25is6muth0().s[17]++;
        console.log('🔄 Marcando dirección más reciente como predeterminada:', allAddresses[0].id);
        /* istanbul ignore next */
        cov_25is6muth0().s[18]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: true
        }).eq('id', allAddresses[0].id);
      } else
      /* istanbul ignore next */
      {
        cov_25is6muth0().b[2][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_25is6muth0().b[1][1]++;
      cov_25is6muth0().s[19]++;
      if (defaultCount > 1) {
        /* istanbul ignore next */
        cov_25is6muth0().b[4][0]++;
        // Hay múltiples direcciones predeterminadas, mantener solo la más reciente
        const keepDefaultId =
        /* istanbul ignore next */
        (cov_25is6muth0().s[20]++, defaultAddresses[0].id);
        const idsToUpdate =
        /* istanbul ignore next */
        (cov_25is6muth0().s[21]++, defaultAddresses.slice(1).map(addr => {
          /* istanbul ignore next */
          cov_25is6muth0().f[2]++;
          cov_25is6muth0().s[22]++;
          return addr.id;
        }));
        /* istanbul ignore next */
        cov_25is6muth0().s[23]++;
        console.log(`🔄 Desmarcando ${idsToUpdate.length} direcciones predeterminadas duplicadas`);
        /* istanbul ignore next */
        cov_25is6muth0().s[24]++;
        console.log('🔄 Manteniendo como predeterminada:', keepDefaultId);
        /* istanbul ignore next */
        cov_25is6muth0().s[25]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: false
        }).in('id', idsToUpdate);
      } else {
        /* istanbul ignore next */
        cov_25is6muth0().b[4][1]++;
        cov_25is6muth0().s[26]++;
        console.log('✅ Usuario tiene exactamente una dirección predeterminada');
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_25is6muth0().s[27]++;
    console.error('❌ Error en ensureOneDefaultAddress:', error);
  }
}
async function POST(request, context) {
  /* istanbul ignore next */
  cov_25is6muth0().f[3]++;
  cov_25is6muth0().s[28]++;
  try {
    /* istanbul ignore next */
    cov_25is6muth0().s[29]++;
    console.log('🔄 POST /api/user/addresses/[id]/default - Iniciando');
    // Verificar que el cliente administrativo esté disponible
    /* istanbul ignore next */
    cov_25is6muth0().s[30]++;
    if (!_supabase.supabaseAdmin) {
      /* istanbul ignore next */
      cov_25is6muth0().b[5][0]++;
      cov_25is6muth0().s[31]++;
      console.error('❌ Cliente administrativo de Supabase no disponible');
      /* istanbul ignore next */
      cov_25is6muth0().s[32]++;
      return _server.NextResponse.json({
        error: 'Error de configuración del servidor'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[5][1]++;
    }
    // Autenticación
    const session =
    /* istanbul ignore next */
    (cov_25is6muth0().s[33]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_25is6muth0().s[34]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_25is6muth0().b[6][0]++;
      cov_25is6muth0().s[35]++;
      console.log('❌ Usuario no autenticado');
      /* istanbul ignore next */
      cov_25is6muth0().s[36]++;
      return _server.NextResponse.json({
        error: 'No autenticado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[6][1]++;
    }
    // Obtener parámetros
    const params =
    /* istanbul ignore next */
    (cov_25is6muth0().s[37]++, await context.params);
    const addressId =
    /* istanbul ignore next */
    (cov_25is6muth0().s[38]++, params.id);
    /* istanbul ignore next */
    cov_25is6muth0().s[39]++;
    if (!addressId) {
      /* istanbul ignore next */
      cov_25is6muth0().b[7][0]++;
      cov_25is6muth0().s[40]++;
      return _server.NextResponse.json({
        error: 'ID de dirección requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[7][1]++;
    }
    cov_25is6muth0().s[41]++;
    console.log('🔍 POST - Buscando usuario con id:', session.user.id);
    // Obtener usuario
    const {
      data: user
    } =
    /* istanbul ignore next */
    (cov_25is6muth0().s[42]++, await _supabase.supabaseAdmin.from('user_profiles').select('id').eq('id', session.user.id).single());
    /* istanbul ignore next */
    cov_25is6muth0().s[43]++;
    if (!user) {
      /* istanbul ignore next */
      cov_25is6muth0().b[8][0]++;
      cov_25is6muth0().s[44]++;
      console.log('❌ Usuario no encontrado');
      /* istanbul ignore next */
      cov_25is6muth0().s[45]++;
      return _server.NextResponse.json({
        error: 'Usuario no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[8][1]++;
    }
    cov_25is6muth0().s[46]++;
    console.log('🔍 POST - Usuario encontrado:', {
      id: user.id
    });
    // Verificar que la dirección existe y pertenece al usuario
    const {
      data: address,
      error: addressError
    } =
    /* istanbul ignore next */
    (cov_25is6muth0().s[47]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, name, is_default').eq('id', addressId).eq('user_id', user.id).single());
    /* istanbul ignore next */
    cov_25is6muth0().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_25is6muth0().b[10][0]++, addressError) ||
    /* istanbul ignore next */
    (cov_25is6muth0().b[10][1]++, !address)) {
      /* istanbul ignore next */
      cov_25is6muth0().b[9][0]++;
      cov_25is6muth0().s[49]++;
      console.log('❌ Dirección no encontrada o no pertenece al usuario:', addressError);
      /* istanbul ignore next */
      cov_25is6muth0().s[50]++;
      return _server.NextResponse.json({
        error: 'Dirección no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[9][1]++;
    }
    cov_25is6muth0().s[51]++;
    console.log('🔍 POST - Dirección encontrada:', {
      id: address.id,
      name: address.name,
      is_default: address.is_default
    });
    // Si ya es predeterminada, no hacer nada
    /* istanbul ignore next */
    cov_25is6muth0().s[52]++;
    if (address.is_default) {
      /* istanbul ignore next */
      cov_25is6muth0().b[11][0]++;
      cov_25is6muth0().s[53]++;
      console.log('✅ La dirección ya es predeterminada');
      /* istanbul ignore next */
      cov_25is6muth0().s[54]++;
      return _server.NextResponse.json({
        success: true,
        message: 'La dirección ya es predeterminada',
        data: address
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[11][1]++;
    }
    // Paso 1: Desmarcar todas las direcciones predeterminadas del usuario
    cov_25is6muth0().s[55]++;
    console.log('🔄 POST - Desmarcando todas las direcciones predeterminadas del usuario');
    const {
      error: unsetError
    } =
    /* istanbul ignore next */
    (cov_25is6muth0().s[56]++, await _supabase.supabaseAdmin.from('user_addresses').update({
      is_default: false
    }).eq('user_id', user.id).eq('is_default', true));
    /* istanbul ignore next */
    cov_25is6muth0().s[57]++;
    if (unsetError) {
      /* istanbul ignore next */
      cov_25is6muth0().b[12][0]++;
      cov_25is6muth0().s[58]++;
      console.error('❌ Error al desmarcar direcciones predeterminadas:', unsetError);
      /* istanbul ignore next */
      cov_25is6muth0().s[59]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar direcciones predeterminadas'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[12][1]++;
    }
    // Paso 2: Marcar la dirección seleccionada como predeterminada
    cov_25is6muth0().s[60]++;
    console.log('🔄 POST - Marcando dirección como predeterminada:', addressId);
    const {
      data: updatedAddress,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_25is6muth0().s[61]++, await _supabase.supabaseAdmin.from('user_addresses').update({
      is_default: true,
      updated_at: new Date().toISOString()
    }).eq('id', addressId).eq('user_id', user.id).select().single());
    /* istanbul ignore next */
    cov_25is6muth0().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_25is6muth0().b[14][0]++, updateError) ||
    /* istanbul ignore next */
    (cov_25is6muth0().b[14][1]++, !updatedAddress)) {
      /* istanbul ignore next */
      cov_25is6muth0().b[13][0]++;
      cov_25is6muth0().s[63]++;
      console.error('❌ Error al marcar dirección como predeterminada:', updateError);
      /* istanbul ignore next */
      cov_25is6muth0().s[64]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar dirección predeterminada'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_25is6muth0().b[13][1]++;
    }
    cov_25is6muth0().s[65]++;
    console.log('✅ POST - Dirección marcada como predeterminada exitosamente:', updatedAddress.id);
    // Paso 3: Asegurar que solo haya una dirección predeterminada
    /* istanbul ignore next */
    cov_25is6muth0().s[66]++;
    await ensureOneDefaultAddress(user.id);
    /* istanbul ignore next */
    cov_25is6muth0().s[67]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Dirección predeterminada actualizada correctamente',
      data: updatedAddress
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_25is6muth0().s[68]++;
    console.error('❌ Error en POST /api/user/addresses/[id]/default:', error);
    /* istanbul ignore next */
    cov_25is6muth0().s[69]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,