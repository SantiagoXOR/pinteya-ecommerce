1ca338f17dedd1ce4c2d062c46ace2b0
'use client';
"use strict";

/* istanbul ignore next */
function cov_1ee8gn4axd() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\proactive-monitoring.ts";
  var hash = "9b099adedd04afbef3e011965fc634a420d7e8e8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\proactive-monitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 30
        }
      },
      "9": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 47
        }
      },
      "10": {
        start: {
          line: 30,
          column: 21
        },
        end: {
          line: 30,
          column: 46
        }
      },
      "11": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 31,
          column: 58
        }
      },
      "12": {
        start: {
          line: 32,
          column: 15
        },
        end: {
          line: 32,
          column: 48
        }
      },
      "13": {
        start: {
          line: 33,
          column: 15
        },
        end: {
          line: 33,
          column: 48
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 83
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 51
        }
      },
      "17": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 39
        }
      },
      "18": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 37
        }
      },
      "19": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "20": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 80
        }
      },
      "23": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 96
        }
      },
      "24": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 41
        }
      },
      "26": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "27": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 121,
          column: 11
        }
      },
      "28": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 56
        }
      },
      "29": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "30": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 19
        }
      },
      "31": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "32": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 123
        }
      },
      "33": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 19
        }
      },
      "34": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "35": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "36": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 45
        }
      },
      "37": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 38
        }
      },
      "38": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 39
        }
      },
      "39": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "40": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 51
        }
      },
      "41": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 43
        }
      },
      "42": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 119
        }
      },
      "43": {
        start: {
          line: 157,
          column: 29
        },
        end: {
          line: 157,
          column: 75
        }
      },
      "44": {
        start: {
          line: 158,
          column: 27
        },
        end: {
          line: 158,
          column: 75
        }
      },
      "45": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "46": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "47": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 165,
          column: 17
        }
      },
      "48": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 29
        }
      },
      "49": {
        start: {
          line: 166,
          column: 30
        },
        end: {
          line: 166,
          column: 116
        }
      },
      "50": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "51": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 93
        }
      },
      "52": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "53": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 176,
          column: 19
        }
      },
      "54": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 184,
          column: 39
        }
      },
      "55": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 30
        }
      },
      "56": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 98
        }
      },
      "57": {
        start: {
          line: 189,
          column: 25
        },
        end: {
          line: 189,
          column: 50
        }
      },
      "58": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "59": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 29
        }
      },
      "60": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 36
        }
      },
      "61": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "62": {
        start: {
          line: 200,
          column: 27
        },
        end: {
          line: 200,
          column: 52
        }
      },
      "63": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "64": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 80
        }
      },
      "65": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 41
        }
      },
      "66": {
        start: {
          line: 209,
          column: 22
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "67": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "68": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 45
        }
      },
      "69": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "70": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 45
        }
      },
      "71": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 119
        }
      },
      "72": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "73": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 245,
          column: 15
        }
      },
      "74": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 249,
          column: 43
        }
      },
      "75": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "76": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 259,
          column: 15
        }
      },
      "77": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 263,
          column: 43
        }
      },
      "78": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "79": {
        start: {
          line: 270,
          column: 27
        },
        end: {
          line: 270,
          column: 55
        }
      },
      "80": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "81": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 56
        }
      },
      "82": {
        start: {
          line: 274,
          column: 19
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "83": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 55
        }
      },
      "84": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "85": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 115
        }
      },
      "86": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 102
        }
      },
      "87": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 96
        }
      },
      "88": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 100
        }
      },
      "89": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 94
        }
      },
      "90": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 288,
          column: 43
        }
      },
      "91": {
        start: {
          line: 292,
          column: 23
        },
        end: {
          line: 292,
          column: 25
        }
      },
      "92": {
        start: {
          line: 293,
          column: 21
        },
        end: {
          line: 293,
          column: 30
        }
      },
      "93": {
        start: {
          line: 295,
          column: 29
        },
        end: {
          line: 295,
          column: 55
        }
      },
      "94": {
        start: {
          line: 297,
          column: 26
        },
        end: {
          line: 297,
          column: 43
        }
      },
      "95": {
        start: {
          line: 299,
          column: 28
        },
        end: {
          line: 299,
          column: 51
        }
      },
      "96": {
        start: {
          line: 301,
          column: 25
        },
        end: {
          line: 301,
          column: 48
        }
      },
      "97": {
        start: {
          line: 303,
          column: 34
        },
        end: {
          line: 303,
          column: 70
        }
      },
      "98": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "99": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 318,
          column: 15
        }
      },
      "100": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 31
        }
      },
      "101": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "102": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "103": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 32
        }
      },
      "104": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "105": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "106": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "107": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 35
        }
      },
      "108": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 365,
          column: 10
        }
      },
      "109": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 368,
          column: 23
        }
      },
      "110": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 384,
          column: 11
        }
      },
      "111": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 383,
          column: 13
        }
      },
      "112": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 32
        }
      },
      "113": {
        start: {
          line: 373,
          column: 20
        },
        end: {
          line: 373,
          column: 26
        }
      },
      "114": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 375,
          column: 32
        }
      },
      "115": {
        start: {
          line: 376,
          column: 20
        },
        end: {
          line: 376,
          column: 26
        }
      },
      "116": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 378,
          column: 32
        }
      },
      "117": {
        start: {
          line: 379,
          column: 20
        },
        end: {
          line: 379,
          column: 26
        }
      },
      "118": {
        start: {
          line: 381,
          column: 20
        },
        end: {
          line: 381,
          column: 31
        }
      },
      "119": {
        start: {
          line: 382,
          column: 20
        },
        end: {
          line: 382,
          column: 26
        }
      },
      "120": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 34
        }
      },
      "121": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 390,
          column: 39
        }
      },
      "122": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "123": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "124": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 51
        }
      },
      "125": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 406,
          column: 39
        }
      },
      "126": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 411,
          column: 39
        }
      },
      "127": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 421,
          column: 10
        }
      },
      "128": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "129": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 25
        }
      },
      "130": {
        start: {
          line: 424,
          column: 15
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "131": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 24
        }
      },
      "132": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 431,
          column: 10
        }
      },
      "133": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 52
        }
      },
      "134": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 439,
          column: 39
        }
      },
      "135": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 45
        }
      },
      "136": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 445,
          column: 39
        }
      },
      "137": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 55
        }
      },
      "138": {
        start: {
          line: 453,
          column: 28
        },
        end: {
          line: 453,
          column: 108
        }
      },
      "139": {
        start: {
          line: 453,
          column: 87
        },
        end: {
          line: 453,
          column: 104
        }
      },
      "140": {
        start: {
          line: 454,
          column: 31
        },
        end: {
          line: 454,
          column: 101
        }
      },
      "141": {
        start: {
          line: 454,
          column: 83
        },
        end: {
          line: 454,
          column: 93
        }
      },
      "142": {
        start: {
          line: 455,
          column: 29
        },
        end: {
          line: 455,
          column: 173
        }
      },
      "143": {
        start: {
          line: 455,
          column: 102
        },
        end: {
          line: 455,
          column: 161
        }
      },
      "144": {
        start: {
          line: 456,
          column: 29
        },
        end: {
          line: 456,
          column: 57
        }
      },
      "145": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 462,
          column: 10
        }
      },
      "146": {
        start: {
          line: 465,
          column: 28
        },
        end: {
          line: 465,
          column: 68
        }
      },
      "147": {
        start: {
          line: 466,
          column: 20
        },
        end: {
          line: 466,
          column: 85
        }
      },
      "148": {
        start: {
          line: 466,
          column: 38
        },
        end: {
          line: 466,
          column: 85
        }
      },
      "149": {
        start: {
          line: 467,
          column: 24
        },
        end: {
          line: 467,
          column: 55
        }
      },
      "150": {
        start: {
          line: 467,
          column: 28
        },
        end: {
          line: 467,
          column: 55
        }
      },
      "151": {
        start: {
          line: 468,
          column: 23
        },
        end: {
          line: 468,
          column: 53
        }
      },
      "152": {
        start: {
          line: 468,
          column: 27
        },
        end: {
          line: 468,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 38
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 27
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 35
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 41
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 32
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 66
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 119,
            column: 32
          },
          end: {
            line: 119,
            column: 33
          }
        },
        loc: {
          start: {
            line: 119,
            column: 43
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 119
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 125,
            column: 6
          },
          end: {
            line: 125,
            column: 7
          }
        },
        loc: {
          start: {
            line: 125,
            column: 14
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 125
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 137,
            column: 46
          },
          end: {
            line: 137,
            column: 47
          }
        },
        loc: {
          start: {
            line: 137,
            column: 50
          },
          end: {
            line: 139,
            column: 9
          }
        },
        line: 137
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 147,
            column: 6
          },
          end: {
            line: 147,
            column: 7
          }
        },
        loc: {
          start: {
            line: 147,
            column: 13
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 147
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 156,
            column: 6
          },
          end: {
            line: 156,
            column: 7
          }
        },
        loc: {
          start: {
            line: 156,
            column: 40
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 156
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 72
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 186
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 67
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 208
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 32
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 235
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 32
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 252
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 268,
            column: 6
          },
          end: {
            line: 268,
            column: 7
          }
        },
        loc: {
          start: {
            line: 268,
            column: 33
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 268
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 28
          },
          end: {
            line: 366,
            column: 5
          }
        },
        line: 291
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 33
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 367
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 369,
            column: 30
          },
          end: {
            line: 369,
            column: 31
          }
        },
        loc: {
          start: {
            line: 369,
            column: 39
          },
          end: {
            line: 384,
            column: 9
          }
        },
        line: 369
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        loc: {
          start: {
            line: 387,
            column: 39
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 387
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 38
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 403
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 38
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 408
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 417,
            column: 6
          },
          end: {
            line: 417,
            column: 7
          }
        },
        loc: {
          start: {
            line: 417,
            column: 30
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 417
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 16
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 428
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 435,
            column: 6
          },
          end: {
            line: 435,
            column: 7
          }
        },
        loc: {
          start: {
            line: 435,
            column: 31
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 435
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 441,
            column: 4
          },
          end: {
            line: 441,
            column: 5
          }
        },
        loc: {
          start: {
            line: 441,
            column: 34
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 441
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 23
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 447
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 452,
            column: 6
          },
          end: {
            line: 452,
            column: 7
          }
        },
        loc: {
          start: {
            line: 452,
            column: 33
          },
          end: {
            line: 463,
            column: 5
          }
        },
        line: 452
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 453,
            column: 73
          },
          end: {
            line: 453,
            column: 74
          }
        },
        loc: {
          start: {
            line: 453,
            column: 87
          },
          end: {
            line: 453,
            column: 104
          }
        },
        line: 453
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 454,
            column: 78
          },
          end: {
            line: 454,
            column: 79
          }
        },
        loc: {
          start: {
            line: 454,
            column: 83
          },
          end: {
            line: 454,
            column: 93
          }
        },
        line: 454
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 455,
            column: 93
          },
          end: {
            line: 455,
            column: 94
          }
        },
        loc: {
          start: {
            line: 455,
            column: 102
          },
          end: {
            line: 455,
            column: 161
          }
        },
        line: 455
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 466,
            column: 20
          },
          end: {
            line: 466,
            column: 21
          }
        },
        loc: {
          start: {
            line: 466,
            column: 38
          },
          end: {
            line: 466,
            column: 85
          }
        },
        line: 466
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 467,
            column: 24
          },
          end: {
            line: 467,
            column: 25
          }
        },
        loc: {
          start: {
            line: 467,
            column: 28
          },
          end: {
            line: 467,
            column: 55
          }
        },
        line: 467
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 468,
            column: 23
          },
          end: {
            line: 468,
            column: 24
          }
        },
        loc: {
          start: {
            line: 468,
            column: 27
          },
          end: {
            line: 468,
            column: 53
          }
        },
        line: 468
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "3": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "4": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "5": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "6": {
        loc: {
          start: {
            line: 157,
            column: 29
          },
          end: {
            line: 157,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 54
          },
          end: {
            line: 157,
            column: 67
          }
        }, {
          start: {
            line: 157,
            column: 70
          },
          end: {
            line: 157,
            column: 75
          }
        }],
        line: 157
      },
      "7": {
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 52
          },
          end: {
            line: 158,
            column: 63
          }
        }, {
          start: {
            line: 158,
            column: 66
          },
          end: {
            line: 158,
            column: 75
          }
        }],
        line: 158
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "10": {
        loc: {
          start: {
            line: 166,
            column: 30
          },
          end: {
            line: 166,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 66
          },
          end: {
            line: 166,
            column: 81
          }
        }, {
          start: {
            line: 166,
            column: 84
          },
          end: {
            line: 166,
            column: 116
          }
        }],
        line: 166
      },
      "11": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "12": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "13": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: 193,
            column: 15
          },
          end: {
            line: 199,
            column: 9
          }
        }],
        line: 190
      },
      "14": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "15": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 202,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 202,
            column: 49
          }
        }, {
          start: {
            line: 202,
            column: 53
          },
          end: {
            line: 202,
            column: 69
          }
        }],
        line: 202
      },
      "16": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "17": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "18": {
        loc: {
          start: {
            line: 244,
            column: 26
          },
          end: {
            line: 244,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 58
          },
          end: {
            line: 244,
            column: 64
          }
        }, {
          start: {
            line: 244,
            column: 67
          },
          end: {
            line: 244,
            column: 75
          }
        }],
        line: 244
      },
      "19": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 276,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 276,
            column: 13
          }
        }, {
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 276,
            column: 13
          }
        }],
        line: 272
      },
      "20": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 44
          }
        }, {
          start: {
            line: 272,
            column: 48
          },
          end: {
            line: 272,
            column: 72
          }
        }],
        line: 272
      },
      "21": {
        loc: {
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 276,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 276,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "22": {
        loc: {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "23": {
        loc: {
          start: {
            line: 287,
            column: 23
          },
          end: {
            line: 287,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 48
          },
          end: {
            line: 287,
            column: 61
          }
        }, {
          start: {
            line: 287,
            column: 64
          },
          end: {
            line: 287,
            column: 79
          }
        }],
        line: 287
      },
      "24": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "25": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "26": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "27": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "28": {
        loc: {
          start: {
            line: 357,
            column: 20
          },
          end: {
            line: 357,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 357,
            column: 71
          },
          end: {
            line: 357,
            column: 87
          }
        }, {
          start: {
            line: 357,
            column: 90
          },
          end: {
            line: 357,
            column: 107
          }
        }],
        line: 357
      },
      "29": {
        loc: {
          start: {
            line: 357,
            column: 20
          },
          end: {
            line: 357,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 20
          },
          end: {
            line: 357,
            column: 50
          }
        }, {
          start: {
            line: 357,
            column: 54
          },
          end: {
            line: 357,
            column: 68
          }
        }],
        line: 357
      },
      "30": {
        loc: {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 383,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 373,
            column: 26
          }
        }, {
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 376,
            column: 26
          }
        }, {
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 379,
            column: 26
          }
        }, {
          start: {
            line: 380,
            column: 16
          },
          end: {
            line: 382,
            column: 26
          }
        }],
        line: 370
      },
      "31": {
        loc: {
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "32": {
        loc: {
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: 424,
            column: 15
          },
          end: {
            line: 426,
            column: 9
          }
        }],
        line: 422
      },
      "33": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 31
          }
        }, {
          start: {
            line: 422,
            column: 35
          },
          end: {
            line: 422,
            column: 59
          }
        }],
        line: 422
      },
      "34": {
        loc: {
          start: {
            line: 424,
            column: 15
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 15
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "35": {
        loc: {
          start: {
            line: 424,
            column: 19
          },
          end: {
            line: 424,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 19
          },
          end: {
            line: 424,
            column: 39
          }
        }, {
          start: {
            line: 424,
            column: 43
          },
          end: {
            line: 424,
            column: 66
          }
        }],
        line: 424
      },
      "36": {
        loc: {
          start: {
            line: 455,
            column: 29
          },
          end: {
            line: 455,
            column: 173
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 48
          },
          end: {
            line: 455,
            column: 169
          }
        }, {
          start: {
            line: 455,
            column: 172
          },
          end: {
            line: 455,
            column: 173
          }
        }],
        line: 455
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\proactive-monitoring.ts"],
      sourcesContent: ["'use client'\r\n\r\nimport { logger, LogLevel, LogCategory } from '../enterprise/logger'\r\nimport { EnterpriseAlertSystem } from './alert-system'\r\nimport { EnterpriseMetricsCollector } from './enterprise-metrics'\r\nimport { emailService } from '../notifications/email'\r\nimport { slackService } from '../notifications/slack'\r\n\r\nexport interface ErrorPattern {\r\n  id: string\r\n  name: string\r\n  pattern: RegExp | string\r\n  severity: 'low' | 'medium' | 'high' | 'critical'\r\n  threshold: number // N\xFAmero de ocurrencias antes de alertar\r\n  timeWindow: number // Ventana de tiempo en minutos\r\n  description: string\r\n  isActive: boolean\r\n}\r\n\r\nexport interface SystemHealth {\r\n  status: 'healthy' | 'warning' | 'critical' | 'down'\r\n  uptime: number\r\n  responseTime: number\r\n  errorRate: number\r\n  memoryUsage: number\r\n  cpuUsage: number\r\n  activeConnections: number\r\n  lastCheck: Date\r\n  issues: HealthIssue[]\r\n}\r\n\r\nexport interface HealthIssue {\r\n  id: string\r\n  type: 'performance' | 'error' | 'resource' | 'security'\r\n  severity: 'low' | 'medium' | 'high' | 'critical'\r\n  message: string\r\n  details: Record<string, any>\r\n  firstDetected: Date\r\n  lastSeen: Date\r\n  count: number\r\n}\r\n\r\nexport interface MonitoringConfig {\r\n  enabled: boolean\r\n  checkInterval: number // en segundos\r\n  errorThreshold: number\r\n  responseTimeThreshold: number\r\n  memoryThreshold: number\r\n  cpuThreshold: number\r\n  enableAutoRecovery: boolean\r\n  notificationChannels: string[]\r\n}\r\n\r\nexport class ProactiveMonitoringService {\r\n  private static instance: ProactiveMonitoringService\r\n  private alertSystem: EnterpriseAlertSystem\r\n  private metricsCollector: EnterpriseMetricsCollector\r\n  private errorPatterns: Map<string, ErrorPattern> = new Map()\r\n  private errorCounts: Map<string, { count: number; firstSeen: Date; lastSeen: Date }> = new Map()\r\n  private healthChecks: Map<string, () => Promise<any>> = new Map()\r\n  private monitoringInterval: NodeJS.Timeout | null = null\r\n  private config: MonitoringConfig\r\n\r\n  static getInstance(): ProactiveMonitoringService {\r\n    if (!ProactiveMonitoringService.instance) {\r\n      ProactiveMonitoringService.instance = new ProactiveMonitoringService()\r\n    }\r\n    return ProactiveMonitoringService.instance\r\n  }\r\n\r\n  constructor() {\r\n    // Solo inicializar en el servidor\r\n    if (typeof window === 'undefined') {\r\n      this.alertSystem = EnterpriseAlertSystem.getInstance()\r\n      this.metricsCollector = EnterpriseMetricsCollector.getInstance()\r\n    }\r\n    this.config = {\r\n      enabled: true,\r\n      checkInterval: 30, // 30 segundos\r\n      errorThreshold: 5, // 5% error rate\r\n      responseTimeThreshold: 2000, // 2 segundos\r\n      memoryThreshold: 80, // 80% memoria\r\n      cpuThreshold: 70, // 70% CPU\r\n      enableAutoRecovery: true,\r\n      notificationChannels: ['email', 'slack']\r\n    }\r\n    this.initializeDefaultPatterns()\r\n  }\r\n\r\n  private initializeDefaultPatterns(): void {\r\n    const defaultPatterns: ErrorPattern[] = [\r\n      {\r\n        id: 'database_connection_error',\r\n        name: 'Database Connection Error',\r\n        pattern: /database.*connection.*failed|connection.*timeout|pool.*exhausted/i,\r\n        severity: 'critical',\r\n        threshold: 3,\r\n        timeWindow: 5,\r\n        description: 'Errores de conexi\xF3n a la base de datos',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'payment_processing_error',\r\n        name: 'Payment Processing Error',\r\n        pattern: /payment.*failed|transaction.*error|mercadopago.*error/i,\r\n        severity: 'high',\r\n        threshold: 5,\r\n        timeWindow: 10,\r\n        description: 'Errores en el procesamiento de pagos',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'authentication_error',\r\n        name: 'Authentication Error',\r\n        pattern: /auth.*failed|unauthorized|invalid.*token|session.*expired/i,\r\n        severity: 'medium',\r\n        threshold: 10,\r\n        timeWindow: 15,\r\n        description: 'Errores de autenticaci\xF3n',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'api_rate_limit',\r\n        name: 'API Rate Limit Exceeded',\r\n        pattern: /rate.*limit.*exceeded|too.*many.*requests|429/i,\r\n        severity: 'medium',\r\n        threshold: 20,\r\n        timeWindow: 5,\r\n        description: 'L\xEDmite de velocidad de API excedido',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'server_error',\r\n        name: 'Internal Server Error',\r\n        pattern: /internal.*server.*error|500.*error|unhandled.*exception/i,\r\n        severity: 'high',\r\n        threshold: 5,\r\n        timeWindow: 10,\r\n        description: 'Errores internos del servidor',\r\n        isActive: true\r\n      }\r\n    ]\r\n\r\n    defaultPatterns.forEach(pattern => {\r\n      this.errorPatterns.set(pattern.id, pattern)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Inicia el monitoreo proactivo\r\n   */\r\n  start(): void {\r\n    // Solo ejecutar en el servidor\r\n    if (typeof window !== 'undefined') {\r\n      return\r\n    }\r\n\r\n    if (!this.config.enabled) {\r\n      logger.info(LogLevel.INFO, 'Proactive monitoring is disabled', {}, LogCategory.SYSTEM)\r\n      return\r\n    }\r\n\r\n    if (this.monitoringInterval) {\r\n      this.stop()\r\n    }\r\n\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.performHealthCheck()\r\n    }, this.config.checkInterval * 1000)\r\n\r\n    logger.info(LogLevel.INFO, 'Proactive monitoring started', {\r\n      interval: this.config.checkInterval,\r\n      patterns: this.errorPatterns.size\r\n    }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  /**\r\n   * Detiene el monitoreo proactivo\r\n   */\r\n  stop(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval)\r\n      this.monitoringInterval = null\r\n      logger.info(LogLevel.INFO, 'Proactive monitoring stopped', {}, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra un error para an\xE1lisis\r\n   */\r\n  async reportError(error: Error | string, context?: Record<string, any>): Promise<void> {\r\n    const errorMessage = error instanceof Error ? error.message : error\r\n    const errorStack = error instanceof Error ? error.stack : undefined\r\n\r\n    // Solo procesar en el servidor\r\n    if (typeof window === 'undefined') {\r\n      // Analizar patrones de error\r\n      for (const [patternId, pattern] of this.errorPatterns) {\r\n        if (!pattern.isActive) {continue}\r\n\r\n        const regex = pattern.pattern instanceof RegExp ? pattern.pattern : new RegExp(pattern.pattern, 'i')\r\n        if (regex.test(errorMessage)) {\r\n          await this.handlePatternMatch(patternId, pattern, errorMessage, context)\r\n        }\r\n      }\r\n\r\n      // Registrar m\xE9tricas si est\xE1 disponible\r\n      if (this.metricsCollector) {\r\n        await this.metricsCollector.recordMetric('errors_total', 1, undefined, undefined, {\r\n          type: 'application_error',\r\n          ...context\r\n        })\r\n      }\r\n    }\r\n\r\n    // Log del error\r\n    logger.error(LogLevel.ERROR, 'Error reported to monitoring', {\r\n      error: errorMessage,\r\n      stack: errorStack,\r\n      context\r\n    }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  private async handlePatternMatch(\r\n    patternId: string,\r\n    pattern: ErrorPattern,\r\n    errorMessage: string,\r\n    context?: Record<string, any>\r\n  ): Promise<void> {\r\n    const now = new Date()\r\n    const key = `${patternId}_${Math.floor(now.getTime() / (pattern.timeWindow * 60 * 1000))}`\r\n    \r\n    const existing = this.errorCounts.get(key)\r\n    if (existing) {\r\n      existing.count++\r\n      existing.lastSeen = now\r\n    } else {\r\n      this.errorCounts.set(key, {\r\n        count: 1,\r\n        firstSeen: now,\r\n        lastSeen: now\r\n      })\r\n    }\r\n\r\n    const errorCount = this.errorCounts.get(key)!\r\n    \r\n    // Verificar si se alcanz\xF3 el umbral (solo en servidor)\r\n    if (errorCount.count >= pattern.threshold && this.alertSystem) {\r\n      await this.triggerAlert(pattern, errorCount, errorMessage, context)\r\n      \r\n      // Limpiar contador para evitar spam de alertas\r\n      this.errorCounts.delete(key)\r\n    }\r\n  }\r\n\r\n  private async triggerAlert(\r\n    pattern: ErrorPattern,\r\n    errorCount: { count: number; firstSeen: Date; lastSeen: Date },\r\n    errorMessage: string,\r\n    context?: Record<string, any>\r\n  ): Promise<void> {\r\n    const alert = {\r\n      id: `pattern_${pattern.id}_${Date.now()}`,\r\n      title: `Error Pattern Detected: ${pattern.name}`,\r\n      message: `Pattern \"${pattern.name}\" detected ${errorCount.count} times in ${pattern.timeWindow} minutes`,\r\n      severity: pattern.severity,\r\n      details: {\r\n        pattern: pattern.name,\r\n        description: pattern.description,\r\n        count: errorCount.count,\r\n        threshold: pattern.threshold,\r\n        timeWindow: pattern.timeWindow,\r\n        firstSeen: errorCount.firstSeen.toISOString(),\r\n        lastSeen: errorCount.lastSeen.toISOString(),\r\n        lastError: errorMessage,\r\n        context\r\n      }\r\n    }\r\n\r\n    // Enviar notificaciones\r\n    if (this.config.notificationChannels.includes('email')) {\r\n      await this.sendEmailAlert(alert)\r\n    }\r\n\r\n    if (this.config.notificationChannels.includes('slack')) {\r\n      await this.sendSlackAlert(alert)\r\n    }\r\n\r\n    logger.warn(LogLevel.WARN, 'Error pattern alert triggered', alert, LogCategory.SYSTEM)\r\n  }\r\n\r\n  private async sendEmailAlert(alert: any): Promise<void> {\r\n    try {\r\n      await emailService.sendNotification({\r\n        to: ['admin@example.com'], // Configurar emails de admin\r\n        subject: `\uD83D\uDEA8 ${alert.title}`,\r\n        template: 'error-pattern-alert',\r\n        data: alert,\r\n        priority: alert.severity === 'critical' ? 'high' : 'normal'\r\n      })\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to send email alert', { error }, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  private async sendSlackAlert(alert: any): Promise<void> {\r\n    try {\r\n      await slackService.sendErrorAlert({\r\n        error: alert.message,\r\n        context: alert.title,\r\n        timestamp: new Date(),\r\n        severity: alert.severity\r\n      })\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to send Slack alert', { error }, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza verificaci\xF3n de salud del sistema\r\n   */\r\n  private async performHealthCheck(): Promise<void> {\r\n    try {\r\n      const health = await this.getSystemHealth()\r\n      \r\n      // Verificar umbrales cr\xEDticos\r\n      if (health.status === 'critical' || health.status === 'down') {\r\n        await this.handleCriticalHealth(health)\r\n      } else if (health.status === 'warning') {\r\n        await this.handleWarningHealth(health)\r\n      }\r\n\r\n      // Actualizar m\xE9tricas si est\xE1 disponible\r\n      if (this.metricsCollector) {\r\n        await this.metricsCollector.recordMetric('system_health_score', this.calculateHealthScore(health))\r\n        await this.metricsCollector.recordMetric('system_response_time', health.responseTime)\r\n        await this.metricsCollector.recordMetric('system_error_rate', health.errorRate)\r\n        await this.metricsCollector.recordMetric('system_memory_usage', health.memoryUsage)\r\n        await this.metricsCollector.recordMetric('system_cpu_usage', health.cpuUsage)\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Health check failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  private async getSystemHealth(): Promise<SystemHealth> {\r\n    const issues: HealthIssue[] = []\r\n    let status: SystemHealth['status'] = 'healthy'\r\n\r\n    // Simular verificaciones de salud (en producci\xF3n, estas ser\xEDan verificaciones reales)\r\n    const responseTime = Math.random() * 1000 + 200 // 200-1200ms\r\n    const errorRate = Math.random() * 5 // 0-5%\r\n    const memoryUsage = Math.random() * 40 + 40 // 40-80%\r\n    const cpuUsage = Math.random() * 30 + 20 // 20-50%\r\n    const activeConnections = Math.floor(Math.random() * 100) + 50\r\n\r\n    // Verificar umbrales\r\n    if (responseTime > this.config.responseTimeThreshold) {\r\n      issues.push({\r\n        id: 'high_response_time',\r\n        type: 'performance',\r\n        severity: 'medium',\r\n        message: 'High response time detected',\r\n        details: { responseTime, threshold: this.config.responseTimeThreshold },\r\n        firstDetected: new Date(),\r\n        lastSeen: new Date(),\r\n        count: 1\r\n      })\r\n      status = 'warning'\r\n    }\r\n\r\n    if (errorRate > this.config.errorThreshold) {\r\n      issues.push({\r\n        id: 'high_error_rate',\r\n        type: 'error',\r\n        severity: 'high',\r\n        message: 'High error rate detected',\r\n        details: { errorRate, threshold: this.config.errorThreshold },\r\n        firstDetected: new Date(),\r\n        lastSeen: new Date(),\r\n        count: 1\r\n      })\r\n      status = 'critical'\r\n    }\r\n\r\n    if (memoryUsage > this.config.memoryThreshold) {\r\n      issues.push({\r\n        id: 'high_memory_usage',\r\n        type: 'resource',\r\n        severity: 'medium',\r\n        message: 'High memory usage detected',\r\n        details: { memoryUsage, threshold: this.config.memoryThreshold },\r\n        firstDetected: new Date(),\r\n        lastSeen: new Date(),\r\n        count: 1\r\n      })\r\n      if (status === 'healthy') {status = 'warning'}\r\n    }\r\n\r\n    return {\r\n      status,\r\n      uptime: typeof process !== 'undefined' && process.uptime ? process.uptime() : Date.now() / 1000,\r\n      responseTime,\r\n      errorRate,\r\n      memoryUsage,\r\n      cpuUsage,\r\n      activeConnections,\r\n      lastCheck: new Date(),\r\n      issues\r\n    }\r\n  }\r\n\r\n  private calculateHealthScore(health: SystemHealth): number {\r\n    let score = 100\r\n    \r\n    health.issues.forEach(issue => {\r\n      switch (issue.severity) {\r\n        case 'critical':\r\n          score -= 30\r\n          break\r\n        case 'high':\r\n          score -= 20\r\n          break\r\n        case 'medium':\r\n          score -= 10\r\n          break\r\n        case 'low':\r\n          score -= 5\r\n          break\r\n      }\r\n    })\r\n\r\n    return Math.max(0, score)\r\n  }\r\n\r\n  private async handleCriticalHealth(health: SystemHealth): Promise<void> {\r\n    logger.error(LogLevel.ERROR, 'Critical system health detected', { health }, LogCategory.SYSTEM)\r\n    \r\n    // Enviar alertas cr\xEDticas\r\n    await this.sendSlackAlert({\r\n      title: '\uD83D\uDEA8 CRITICAL: System Health Alert',\r\n      message: 'System health is critical - immediate attention required',\r\n      severity: 'critical',\r\n      details: health\r\n    })\r\n\r\n    // Auto-recovery si est\xE1 habilitado\r\n    if (this.config.enableAutoRecovery) {\r\n      await this.attemptAutoRecovery(health)\r\n    }\r\n  }\r\n\r\n  private async handleWarningHealth(health: SystemHealth): Promise<void> {\r\n    logger.warn(LogLevel.WARN, 'System health warning', { health }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  private async attemptAutoRecovery(health: SystemHealth): Promise<void> {\r\n    logger.info(LogLevel.INFO, 'Attempting auto-recovery', { health }, LogCategory.SYSTEM)\r\n    \r\n    // Implementar l\xF3gica de auto-recuperaci\xF3n\r\n    // Por ejemplo: reiniciar servicios, limpiar cache, etc.\r\n  }\r\n\r\n  /**\r\n   * Configuraci\xF3n del servicio\r\n   */\r\n  updateConfig(newConfig: Partial<MonitoringConfig>): void {\r\n    this.config = { ...this.config, ...newConfig }\r\n    \r\n    if (this.config.enabled && !this.monitoringInterval) {\r\n      this.start()\r\n    } else if (!this.config.enabled && this.monitoringInterval) {\r\n      this.stop()\r\n    }\r\n  }\r\n\r\n  getConfig(): MonitoringConfig {\r\n    return { ...this.config }\r\n  }\r\n\r\n  /**\r\n   * Gesti\xF3n de patrones de error\r\n   */\r\n  addErrorPattern(pattern: ErrorPattern): void {\r\n    this.errorPatterns.set(pattern.id, pattern)\r\n    logger.info(LogLevel.INFO, 'Error pattern added', { patternId: pattern.id }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  removeErrorPattern(patternId: string): void {\r\n    this.errorPatterns.delete(patternId)\r\n    logger.info(LogLevel.INFO, 'Error pattern removed', { patternId }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  getErrorPatterns(): ErrorPattern[] {\r\n    return Array.from(this.errorPatterns.values())\r\n  }\r\n\r\n  /**\r\n   * Obtener estad\xEDsticas de monitoreo\r\n   */\r\n  async getMonitoringStats(): Promise<{\r\n    totalErrors: number\r\n    activePatterns: number\r\n    recentAlerts: number\r\n    systemHealth: SystemHealth\r\n  }> {\r\n    const totalErrors = Array.from(this.errorCounts.values())\r\n      .reduce((sum, count) => sum + count.count, 0)\r\n    \r\n    const activePatterns = Array.from(this.errorPatterns.values())\r\n      .filter(p => p.isActive).length\r\n    \r\n    const recentAlerts = this.alertSystem ? \r\n      Array.from(this.errorCounts.values())\r\n        .filter(count => Date.now() - count.lastSeen.getTime() < 24 * 60 * 60 * 1000).length\r\n      : 0\r\n    \r\n    const systemHealth = await this.getSystemHealth()\r\n\r\n    return {\r\n      totalErrors,\r\n      activePatterns,\r\n      recentAlerts,\r\n      systemHealth\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const proactiveMonitoring = ProactiveMonitoringService.getInstance()\r\n\r\n// Funciones de conveniencia\r\nexport const reportError = (error: Error | string, context?: Record<string, any>) =>\r\n  proactiveMonitoring.reportError(error, context)\r\n\r\nexport const startMonitoring = () => proactiveMonitoring.start()\r\nexport const stopMonitoring = () => proactiveMonitoring.stop()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["ProactiveMonitoringService", "proactiveMonitoring", "reportError", "startMonitoring", "stopMonitoring", "getInstance", "instance", "errorPatterns", "Map", "errorCounts", "healthChecks", "monitoringInterval", "window", "alertSystem", "EnterpriseAlertSystem", "metricsCollector", "EnterpriseMetricsCollector", "config", "enabled", "checkInterval", "errorThreshold", "responseTimeThreshold", "memoryThreshold", "cpuThreshold", "enableAutoRecovery", "notificationChannels", "initializeDefaultPatterns", "defaultPatterns", "id", "name", "pattern", "severity", "threshold", "timeWindow", "description", "isActive", "forEach", "set", "start", "logger", "info", "LogLevel", "INFO", "LogCategory", "SYSTEM", "stop", "setInterval", "performHealthCheck", "interval", "patterns", "size", "clearInterval", "error", "context", "errorMessage", "Error", "message", "errorStack", "stack", "undefined", "patternId", "regex", "RegExp", "test", "handlePatternMatch", "recordMetric", "type", "ERROR", "now", "Date", "key", "Math", "floor", "getTime", "existing", "get", "count", "lastSeen", "firstSeen", "errorCount", "triggerAlert", "delete", "alert", "title", "details", "toISOString", "lastError", "includes", "sendEmailAlert", "sendSlackAlert", "warn", "WARN", "emailService", "sendNotification", "to", "subject", "template", "data", "priority", "slackService", "sendErrorAlert", "timestamp", "health", "getSystemHealth", "status", "handleCriticalHealth", "handleWarningHealth", "calculateHealthScore", "responseTime", "errorRate", "memoryUsage", "cpuUsage", "issues", "random", "activeConnections", "push", "firstDetected", "uptime", "process", "lastCheck", "score", "issue", "max", "attemptAutoRecovery", "updateConfig", "newConfig", "getConfig", "addErrorPattern", "removeErrorPattern", "getErrorPatterns", "Array", "from", "values", "getMonitoringStats", "totalErrors", "reduce", "sum", "activePatterns", "filter", "p", "length", "recentAlerts", "systemHealth"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9b099adedd04afbef3e011965fc634a420d7e8e8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ee8gn4axd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ee8gn4axd();
cov_1ee8gn4axd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1ee8gn4axd().f[0]++;
  cov_1ee8gn4axd().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1ee8gn4axd().s[3]++;
_export(exports, {
  get ProactiveMonitoringService() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[1]++;
    cov_1ee8gn4axd().s[4]++;
    return ProactiveMonitoringService;
  },
  get proactiveMonitoring() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[2]++;
    cov_1ee8gn4axd().s[5]++;
    return proactiveMonitoring;
  },
  get reportError() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[3]++;
    cov_1ee8gn4axd().s[6]++;
    return reportError;
  },
  get startMonitoring() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[4]++;
    cov_1ee8gn4axd().s[7]++;
    return startMonitoring;
  },
  get stopMonitoring() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[5]++;
    cov_1ee8gn4axd().s[8]++;
    return stopMonitoring;
  }
});
const _logger =
/* istanbul ignore next */
(cov_1ee8gn4axd().s[9]++, require("../enterprise/logger"));
const _alertsystem =
/* istanbul ignore next */
(cov_1ee8gn4axd().s[10]++, require("./alert-system"));
const _enterprisemetrics =
/* istanbul ignore next */
(cov_1ee8gn4axd().s[11]++, require("./enterprise-metrics"));
const _email =
/* istanbul ignore next */
(cov_1ee8gn4axd().s[12]++, require("../notifications/email"));
const _slack =
/* istanbul ignore next */
(cov_1ee8gn4axd().s[13]++, require("../notifications/slack"));
class ProactiveMonitoringService {
  static getInstance() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[6]++;
    cov_1ee8gn4axd().s[14]++;
    if (!ProactiveMonitoringService.instance) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[0][0]++;
      cov_1ee8gn4axd().s[15]++;
      ProactiveMonitoringService.instance = new ProactiveMonitoringService();
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[0][1]++;
    }
    cov_1ee8gn4axd().s[16]++;
    return ProactiveMonitoringService.instance;
  }
  constructor() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[7]++;
    cov_1ee8gn4axd().s[17]++;
    this.errorPatterns = new Map();
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[18]++;
    this.errorCounts = new Map();
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[19]++;
    this.healthChecks = new Map();
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[20]++;
    this.monitoringInterval = null;
    // Solo inicializar en el servidor
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[21]++;
    if (typeof window === 'undefined') {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[1][0]++;
      cov_1ee8gn4axd().s[22]++;
      this.alertSystem = _alertsystem.EnterpriseAlertSystem.getInstance();
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[23]++;
      this.metricsCollector = _enterprisemetrics.EnterpriseMetricsCollector.getInstance();
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[1][1]++;
    }
    cov_1ee8gn4axd().s[24]++;
    this.config = {
      enabled: true,
      checkInterval: 30,
      errorThreshold: 5,
      responseTimeThreshold: 2000,
      memoryThreshold: 80,
      cpuThreshold: 70,
      enableAutoRecovery: true,
      notificationChannels: ['email', 'slack']
    };
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[25]++;
    this.initializeDefaultPatterns();
  }
  initializeDefaultPatterns() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[8]++;
    const defaultPatterns =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[26]++, [{
      id: 'database_connection_error',
      name: 'Database Connection Error',
      pattern: /database.*connection.*failed|connection.*timeout|pool.*exhausted/i,
      severity: 'critical',
      threshold: 3,
      timeWindow: 5,
      description: 'Errores de conexión a la base de datos',
      isActive: true
    }, {
      id: 'payment_processing_error',
      name: 'Payment Processing Error',
      pattern: /payment.*failed|transaction.*error|mercadopago.*error/i,
      severity: 'high',
      threshold: 5,
      timeWindow: 10,
      description: 'Errores en el procesamiento de pagos',
      isActive: true
    }, {
      id: 'authentication_error',
      name: 'Authentication Error',
      pattern: /auth.*failed|unauthorized|invalid.*token|session.*expired/i,
      severity: 'medium',
      threshold: 10,
      timeWindow: 15,
      description: 'Errores de autenticación',
      isActive: true
    }, {
      id: 'api_rate_limit',
      name: 'API Rate Limit Exceeded',
      pattern: /rate.*limit.*exceeded|too.*many.*requests|429/i,
      severity: 'medium',
      threshold: 20,
      timeWindow: 5,
      description: 'Límite de velocidad de API excedido',
      isActive: true
    }, {
      id: 'server_error',
      name: 'Internal Server Error',
      pattern: /internal.*server.*error|500.*error|unhandled.*exception/i,
      severity: 'high',
      threshold: 5,
      timeWindow: 10,
      description: 'Errores internos del servidor',
      isActive: true
    }]);
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[27]++;
    defaultPatterns.forEach(pattern => {
      /* istanbul ignore next */
      cov_1ee8gn4axd().f[9]++;
      cov_1ee8gn4axd().s[28]++;
      this.errorPatterns.set(pattern.id, pattern);
    });
  }
  /**
  * Inicia el monitoreo proactivo
  */
  start() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[10]++;
    cov_1ee8gn4axd().s[29]++;
    // Solo ejecutar en el servidor
    if (typeof window !== 'undefined') {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[2][0]++;
      cov_1ee8gn4axd().s[30]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[2][1]++;
    }
    cov_1ee8gn4axd().s[31]++;
    if (!this.config.enabled) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[3][0]++;
      cov_1ee8gn4axd().s[32]++;
      _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring is disabled', {}, _logger.LogCategory.SYSTEM);
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[33]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[3][1]++;
    }
    cov_1ee8gn4axd().s[34]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[4][0]++;
      cov_1ee8gn4axd().s[35]++;
      this.stop();
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[4][1]++;
    }
    cov_1ee8gn4axd().s[36]++;
    this.monitoringInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1ee8gn4axd().f[11]++;
      cov_1ee8gn4axd().s[37]++;
      this.performHealthCheck();
    }, this.config.checkInterval * 1000);
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[38]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring started', {
      interval: this.config.checkInterval,
      patterns: this.errorPatterns.size
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Detiene el monitoreo proactivo
  */
  stop() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[12]++;
    cov_1ee8gn4axd().s[39]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[5][0]++;
      cov_1ee8gn4axd().s[40]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[41]++;
      this.monitoringInterval = null;
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[42]++;
      _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring stopped', {}, _logger.LogCategory.SYSTEM);
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[5][1]++;
    }
  }
  /**
  * Registra un error para análisis
  */
  async reportError(error, context) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[13]++;
    const errorMessage =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[43]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[6][0]++, error.message) :
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[6][1]++, error));
    const errorStack =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[44]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[7][0]++, error.stack) :
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[7][1]++, undefined));
    // Solo procesar en el servidor
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[45]++;
    if (typeof window === 'undefined') {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[8][0]++;
      cov_1ee8gn4axd().s[46]++;
      // Analizar patrones de error
      for (const [patternId, pattern] of this.errorPatterns) {
        /* istanbul ignore next */
        cov_1ee8gn4axd().s[47]++;
        if (!pattern.isActive) {
          /* istanbul ignore next */
          cov_1ee8gn4axd().b[9][0]++;
          cov_1ee8gn4axd().s[48]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1ee8gn4axd().b[9][1]++;
        }
        const regex =
        /* istanbul ignore next */
        (cov_1ee8gn4axd().s[49]++, pattern.pattern instanceof RegExp ?
        /* istanbul ignore next */
        (cov_1ee8gn4axd().b[10][0]++, pattern.pattern) :
        /* istanbul ignore next */
        (cov_1ee8gn4axd().b[10][1]++, new RegExp(pattern.pattern, 'i')));
        /* istanbul ignore next */
        cov_1ee8gn4axd().s[50]++;
        if (regex.test(errorMessage)) {
          /* istanbul ignore next */
          cov_1ee8gn4axd().b[11][0]++;
          cov_1ee8gn4axd().s[51]++;
          await this.handlePatternMatch(patternId, pattern, errorMessage, context);
        } else
        /* istanbul ignore next */
        {
          cov_1ee8gn4axd().b[11][1]++;
        }
      }
      // Registrar métricas si está disponible
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[52]++;
      if (this.metricsCollector) {
        /* istanbul ignore next */
        cov_1ee8gn4axd().b[12][0]++;
        cov_1ee8gn4axd().s[53]++;
        await this.metricsCollector.recordMetric('errors_total', 1, undefined, undefined, {
          type: 'application_error',
          ...context
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ee8gn4axd().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[8][1]++;
    }
    // Log del error
    cov_1ee8gn4axd().s[54]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'Error reported to monitoring', {
      error: errorMessage,
      stack: errorStack,
      context
    }, _logger.LogCategory.SYSTEM);
  }
  async handlePatternMatch(patternId, pattern, errorMessage, context) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[14]++;
    const now =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[55]++, new Date());
    const key =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[56]++, `${patternId}_${Math.floor(now.getTime() / (pattern.timeWindow * 60 * 1000))}`);
    const existing =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[57]++, this.errorCounts.get(key));
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[58]++;
    if (existing) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[13][0]++;
      cov_1ee8gn4axd().s[59]++;
      existing.count++;
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[60]++;
      existing.lastSeen = now;
    } else {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[13][1]++;
      cov_1ee8gn4axd().s[61]++;
      this.errorCounts.set(key, {
        count: 1,
        firstSeen: now,
        lastSeen: now
      });
    }
    const errorCount =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[62]++, this.errorCounts.get(key));
    // Verificar si se alcanzó el umbral (solo en servidor)
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[15][0]++, errorCount.count >= pattern.threshold) &&
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[15][1]++, this.alertSystem)) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[14][0]++;
      cov_1ee8gn4axd().s[64]++;
      await this.triggerAlert(pattern, errorCount, errorMessage, context);
      // Limpiar contador para evitar spam de alertas
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[65]++;
      this.errorCounts.delete(key);
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[14][1]++;
    }
  }
  async triggerAlert(pattern, errorCount, errorMessage, context) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[15]++;
    const alert =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[66]++, {
      id: `pattern_${pattern.id}_${Date.now()}`,
      title: `Error Pattern Detected: ${pattern.name}`,
      message: `Pattern "${pattern.name}" detected ${errorCount.count} times in ${pattern.timeWindow} minutes`,
      severity: pattern.severity,
      details: {
        pattern: pattern.name,
        description: pattern.description,
        count: errorCount.count,
        threshold: pattern.threshold,
        timeWindow: pattern.timeWindow,
        firstSeen: errorCount.firstSeen.toISOString(),
        lastSeen: errorCount.lastSeen.toISOString(),
        lastError: errorMessage,
        context
      }
    });
    // Enviar notificaciones
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[67]++;
    if (this.config.notificationChannels.includes('email')) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[16][0]++;
      cov_1ee8gn4axd().s[68]++;
      await this.sendEmailAlert(alert);
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[16][1]++;
    }
    cov_1ee8gn4axd().s[69]++;
    if (this.config.notificationChannels.includes('slack')) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[17][0]++;
      cov_1ee8gn4axd().s[70]++;
      await this.sendSlackAlert(alert);
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[17][1]++;
    }
    cov_1ee8gn4axd().s[71]++;
    _logger.logger.warn(_logger.LogLevel.WARN, 'Error pattern alert triggered', alert, _logger.LogCategory.SYSTEM);
  }
  async sendEmailAlert(alert) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[16]++;
    cov_1ee8gn4axd().s[72]++;
    try {
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[73]++;
      await _email.emailService.sendNotification({
        to: ['admin@example.com'],
        subject: `🚨 ${alert.title}`,
        template: 'error-pattern-alert',
        data: alert,
        priority: alert.severity === 'critical' ?
        /* istanbul ignore next */
        (cov_1ee8gn4axd().b[18][0]++, 'high') :
        /* istanbul ignore next */
        (cov_1ee8gn4axd().b[18][1]++, 'normal')
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[74]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to send email alert', {
        error
      }, _logger.LogCategory.SYSTEM);
    }
  }
  async sendSlackAlert(alert) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[17]++;
    cov_1ee8gn4axd().s[75]++;
    try {
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[76]++;
      await _slack.slackService.sendErrorAlert({
        error: alert.message,
        context: alert.title,
        timestamp: new Date(),
        severity: alert.severity
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[77]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to send Slack alert', {
        error
      }, _logger.LogCategory.SYSTEM);
    }
  }
  /**
  * Realiza verificación de salud del sistema
  */
  async performHealthCheck() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[18]++;
    cov_1ee8gn4axd().s[78]++;
    try {
      const health =
      /* istanbul ignore next */
      (cov_1ee8gn4axd().s[79]++, await this.getSystemHealth());
      // Verificar umbrales críticos
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[80]++;
      if (
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[20][0]++, health.status === 'critical') ||
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[20][1]++, health.status === 'down')) {
        /* istanbul ignore next */
        cov_1ee8gn4axd().b[19][0]++;
        cov_1ee8gn4axd().s[81]++;
        await this.handleCriticalHealth(health);
      } else {
        /* istanbul ignore next */
        cov_1ee8gn4axd().b[19][1]++;
        cov_1ee8gn4axd().s[82]++;
        if (health.status === 'warning') {
          /* istanbul ignore next */
          cov_1ee8gn4axd().b[21][0]++;
          cov_1ee8gn4axd().s[83]++;
          await this.handleWarningHealth(health);
        } else
        /* istanbul ignore next */
        {
          cov_1ee8gn4axd().b[21][1]++;
        }
      }
      // Actualizar métricas si está disponible
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[84]++;
      if (this.metricsCollector) {
        /* istanbul ignore next */
        cov_1ee8gn4axd().b[22][0]++;
        cov_1ee8gn4axd().s[85]++;
        await this.metricsCollector.recordMetric('system_health_score', this.calculateHealthScore(health));
        /* istanbul ignore next */
        cov_1ee8gn4axd().s[86]++;
        await this.metricsCollector.recordMetric('system_response_time', health.responseTime);
        /* istanbul ignore next */
        cov_1ee8gn4axd().s[87]++;
        await this.metricsCollector.recordMetric('system_error_rate', health.errorRate);
        /* istanbul ignore next */
        cov_1ee8gn4axd().s[88]++;
        await this.metricsCollector.recordMetric('system_memory_usage', health.memoryUsage);
        /* istanbul ignore next */
        cov_1ee8gn4axd().s[89]++;
        await this.metricsCollector.recordMetric('system_cpu_usage', health.cpuUsage);
      } else
      /* istanbul ignore next */
      {
        cov_1ee8gn4axd().b[22][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[90]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Health check failed', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ee8gn4axd().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ee8gn4axd().b[23][1]++, 'Unknown error')
      }, _logger.LogCategory.SYSTEM);
    }
  }
  async getSystemHealth() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[19]++;
    const issues =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[91]++, []);
    let status =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[92]++, 'healthy');
    // Simular verificaciones de salud (en producción, estas serían verificaciones reales)
    const responseTime =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[93]++, Math.random() * 1000 + 200) // 200-1200ms
    ;
    const errorRate =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[94]++, Math.random() * 5) // 0-5%
    ;
    const memoryUsage =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[95]++, Math.random() * 40 + 40) // 40-80%
    ;
    const cpuUsage =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[96]++, Math.random() * 30 + 20) // 20-50%
    ;
    const activeConnections =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[97]++, Math.floor(Math.random() * 100) + 50);
    // Verificar umbrales
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[98]++;
    if (responseTime > this.config.responseTimeThreshold) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[24][0]++;
      cov_1ee8gn4axd().s[99]++;
      issues.push({
        id: 'high_response_time',
        type: 'performance',
        severity: 'medium',
        message: 'High response time detected',
        details: {
          responseTime,
          threshold: this.config.responseTimeThreshold
        },
        firstDetected: new Date(),
        lastSeen: new Date(),
        count: 1
      });
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[100]++;
      status = 'warning';
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[24][1]++;
    }
    cov_1ee8gn4axd().s[101]++;
    if (errorRate > this.config.errorThreshold) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[25][0]++;
      cov_1ee8gn4axd().s[102]++;
      issues.push({
        id: 'high_error_rate',
        type: 'error',
        severity: 'high',
        message: 'High error rate detected',
        details: {
          errorRate,
          threshold: this.config.errorThreshold
        },
        firstDetected: new Date(),
        lastSeen: new Date(),
        count: 1
      });
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[103]++;
      status = 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[25][1]++;
    }
    cov_1ee8gn4axd().s[104]++;
    if (memoryUsage > this.config.memoryThreshold) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[26][0]++;
      cov_1ee8gn4axd().s[105]++;
      issues.push({
        id: 'high_memory_usage',
        type: 'resource',
        severity: 'medium',
        message: 'High memory usage detected',
        details: {
          memoryUsage,
          threshold: this.config.memoryThreshold
        },
        firstDetected: new Date(),
        lastSeen: new Date(),
        count: 1
      });
      /* istanbul ignore next */
      cov_1ee8gn4axd().s[106]++;
      if (status === 'healthy') {
        /* istanbul ignore next */
        cov_1ee8gn4axd().b[27][0]++;
        cov_1ee8gn4axd().s[107]++;
        status = 'warning';
      } else
      /* istanbul ignore next */
      {
        cov_1ee8gn4axd().b[27][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[26][1]++;
    }
    cov_1ee8gn4axd().s[108]++;
    return {
      status,
      uptime:
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[29][0]++, typeof process !== 'undefined') &&
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[29][1]++, process.uptime) ?
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[28][0]++, process.uptime()) :
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[28][1]++, Date.now() / 1000),
      responseTime,
      errorRate,
      memoryUsage,
      cpuUsage,
      activeConnections,
      lastCheck: new Date(),
      issues
    };
  }
  calculateHealthScore(health) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[20]++;
    let score =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[109]++, 100);
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[110]++;
    health.issues.forEach(issue => {
      /* istanbul ignore next */
      cov_1ee8gn4axd().f[21]++;
      cov_1ee8gn4axd().s[111]++;
      switch (issue.severity) {
        case 'critical':
          /* istanbul ignore next */
          cov_1ee8gn4axd().b[30][0]++;
          cov_1ee8gn4axd().s[112]++;
          score -= 30;
          /* istanbul ignore next */
          cov_1ee8gn4axd().s[113]++;
          break;
        case 'high':
          /* istanbul ignore next */
          cov_1ee8gn4axd().b[30][1]++;
          cov_1ee8gn4axd().s[114]++;
          score -= 20;
          /* istanbul ignore next */
          cov_1ee8gn4axd().s[115]++;
          break;
        case 'medium':
          /* istanbul ignore next */
          cov_1ee8gn4axd().b[30][2]++;
          cov_1ee8gn4axd().s[116]++;
          score -= 10;
          /* istanbul ignore next */
          cov_1ee8gn4axd().s[117]++;
          break;
        case 'low':
          /* istanbul ignore next */
          cov_1ee8gn4axd().b[30][3]++;
          cov_1ee8gn4axd().s[118]++;
          score -= 5;
          /* istanbul ignore next */
          cov_1ee8gn4axd().s[119]++;
          break;
      }
    });
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[120]++;
    return Math.max(0, score);
  }
  async handleCriticalHealth(health) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[22]++;
    cov_1ee8gn4axd().s[121]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'Critical system health detected', {
      health
    }, _logger.LogCategory.SYSTEM);
    // Enviar alertas críticas
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[122]++;
    await this.sendSlackAlert({
      title: '🚨 CRITICAL: System Health Alert',
      message: 'System health is critical - immediate attention required',
      severity: 'critical',
      details: health
    });
    // Auto-recovery si está habilitado
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[123]++;
    if (this.config.enableAutoRecovery) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[31][0]++;
      cov_1ee8gn4axd().s[124]++;
      await this.attemptAutoRecovery(health);
    } else
    /* istanbul ignore next */
    {
      cov_1ee8gn4axd().b[31][1]++;
    }
  }
  async handleWarningHealth(health) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[23]++;
    cov_1ee8gn4axd().s[125]++;
    _logger.logger.warn(_logger.LogLevel.WARN, 'System health warning', {
      health
    }, _logger.LogCategory.SYSTEM);
  }
  async attemptAutoRecovery(health) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[24]++;
    cov_1ee8gn4axd().s[126]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'Attempting auto-recovery', {
      health
    }, _logger.LogCategory.SYSTEM);
    // Implementar lógica de auto-recuperación
    // Por ejemplo: reiniciar servicios, limpiar cache, etc.
  }
  /**
  * Configuración del servicio
  */
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[25]++;
    cov_1ee8gn4axd().s[127]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[128]++;
    if (
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[33][0]++, this.config.enabled) &&
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[33][1]++, !this.monitoringInterval)) {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[32][0]++;
      cov_1ee8gn4axd().s[129]++;
      this.start();
    } else {
      /* istanbul ignore next */
      cov_1ee8gn4axd().b[32][1]++;
      cov_1ee8gn4axd().s[130]++;
      if (
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[35][0]++, !this.config.enabled) &&
      /* istanbul ignore next */
      (cov_1ee8gn4axd().b[35][1]++, this.monitoringInterval)) {
        /* istanbul ignore next */
        cov_1ee8gn4axd().b[34][0]++;
        cov_1ee8gn4axd().s[131]++;
        this.stop();
      } else
      /* istanbul ignore next */
      {
        cov_1ee8gn4axd().b[34][1]++;
      }
    }
  }
  getConfig() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[26]++;
    cov_1ee8gn4axd().s[132]++;
    return {
      ...this.config
    };
  }
  /**
  * Gestión de patrones de error
  */
  addErrorPattern(pattern) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[27]++;
    cov_1ee8gn4axd().s[133]++;
    this.errorPatterns.set(pattern.id, pattern);
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[134]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern added', {
      patternId: pattern.id
    }, _logger.LogCategory.SYSTEM);
  }
  removeErrorPattern(patternId) {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[28]++;
    cov_1ee8gn4axd().s[135]++;
    this.errorPatterns.delete(patternId);
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[136]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern removed', {
      patternId
    }, _logger.LogCategory.SYSTEM);
  }
  getErrorPatterns() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[29]++;
    cov_1ee8gn4axd().s[137]++;
    return Array.from(this.errorPatterns.values());
  }
  /**
  * Obtener estadísticas de monitoreo
  */
  async getMonitoringStats() {
    /* istanbul ignore next */
    cov_1ee8gn4axd().f[30]++;
    const totalErrors =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[138]++, Array.from(this.errorCounts.values()).reduce((sum, count) => {
      /* istanbul ignore next */
      cov_1ee8gn4axd().f[31]++;
      cov_1ee8gn4axd().s[139]++;
      return sum + count.count;
    }, 0));
    const activePatterns =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[140]++, Array.from(this.errorPatterns.values()).filter(p => {
      /* istanbul ignore next */
      cov_1ee8gn4axd().f[32]++;
      cov_1ee8gn4axd().s[141]++;
      return p.isActive;
    }).length);
    const recentAlerts =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[142]++, this.alertSystem ?
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[36][0]++, Array.from(this.errorCounts.values()).filter(count => {
      /* istanbul ignore next */
      cov_1ee8gn4axd().f[33]++;
      cov_1ee8gn4axd().s[143]++;
      return Date.now() - count.lastSeen.getTime() < 24 * 60 * 60 * 1000;
    }).length) :
    /* istanbul ignore next */
    (cov_1ee8gn4axd().b[36][1]++, 0));
    const systemHealth =
    /* istanbul ignore next */
    (cov_1ee8gn4axd().s[144]++, await this.getSystemHealth());
    /* istanbul ignore next */
    cov_1ee8gn4axd().s[145]++;
    return {
      totalErrors,
      activePatterns,
      recentAlerts,
      systemHealth
    };
  }
}
const proactiveMonitoring =
/* istanbul ignore next */
(cov_1ee8gn4axd().s[146]++, ProactiveMonitoringService.getInstance());
/* istanbul ignore next */
cov_1ee8gn4axd().s[147]++;
const reportError = (error, context) => {
  /* istanbul ignore next */
  cov_1ee8gn4axd().f[34]++;
  cov_1ee8gn4axd().s[148]++;
  return proactiveMonitoring.reportError(error, context);
};
/* istanbul ignore next */
cov_1ee8gn4axd().s[149]++;
const startMonitoring = () => {
  /* istanbul ignore next */
  cov_1ee8gn4axd().f[35]++;
  cov_1ee8gn4axd().s[150]++;
  return proactiveMonitoring.start();
};
/* istanbul ignore next */
cov_1ee8gn4axd().s[151]++;
const stopMonitoring = () => {
  /* istanbul ignore next */
  cov_1ee8gn4axd().f[36]++;
  cov_1ee8gn4axd().s[152]++;
  return proactiveMonitoring.stop();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,