{"version":3,"names":["cov_1ee8gn4axd","actualCoverage","s","ProactiveMonitoringService","f","proactiveMonitoring","reportError","startMonitoring","stopMonitoring","getInstance","instance","b","constructor","errorPatterns","Map","errorCounts","healthChecks","monitoringInterval","window","alertSystem","_alertsystem","EnterpriseAlertSystem","metricsCollector","_enterprisemetrics","EnterpriseMetricsCollector","config","enabled","checkInterval","errorThreshold","responseTimeThreshold","memoryThreshold","cpuThreshold","enableAutoRecovery","notificationChannels","initializeDefaultPatterns","defaultPatterns","id","name","pattern","severity","threshold","timeWindow","description","isActive","forEach","set","start","_logger","logger","info","LogLevel","INFO","LogCategory","SYSTEM","stop","setInterval","performHealthCheck","interval","patterns","size","clearInterval","error","context","errorMessage","Error","message","errorStack","stack","undefined","patternId","regex","RegExp","test","handlePatternMatch","recordMetric","type","ERROR","now","Date","key","Math","floor","getTime","existing","get","count","lastSeen","firstSeen","errorCount","triggerAlert","delete","alert","title","details","toISOString","lastError","includes","sendEmailAlert","sendSlackAlert","warn","WARN","_email","emailService","sendNotification","to","subject","template","data","priority","_slack","slackService","sendErrorAlert","timestamp","health","getSystemHealth","status","handleCriticalHealth","handleWarningHealth","calculateHealthScore","responseTime","errorRate","memoryUsage","cpuUsage","issues","random","activeConnections","push","firstDetected","uptime","process","lastCheck","score","issue","max","attemptAutoRecovery","updateConfig","newConfig","getConfig","addErrorPattern","removeErrorPattern","getErrorPatterns","Array","from","values","getMonitoringStats","totalErrors","reduce","sum","activePatterns","filter","p","length","recentAlerts","systemHealth"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\proactive-monitoring.ts"],"sourcesContent":["'use client'\r\n\r\nimport { logger, LogLevel, LogCategory } from '../enterprise/logger'\r\nimport { EnterpriseAlertSystem } from './alert-system'\r\nimport { EnterpriseMetricsCollector } from './enterprise-metrics'\r\nimport { emailService } from '../notifications/email'\r\nimport { slackService } from '../notifications/slack'\r\n\r\nexport interface ErrorPattern {\r\n  id: string\r\n  name: string\r\n  pattern: RegExp | string\r\n  severity: 'low' | 'medium' | 'high' | 'critical'\r\n  threshold: number // Número de ocurrencias antes de alertar\r\n  timeWindow: number // Ventana de tiempo en minutos\r\n  description: string\r\n  isActive: boolean\r\n}\r\n\r\nexport interface SystemHealth {\r\n  status: 'healthy' | 'warning' | 'critical' | 'down'\r\n  uptime: number\r\n  responseTime: number\r\n  errorRate: number\r\n  memoryUsage: number\r\n  cpuUsage: number\r\n  activeConnections: number\r\n  lastCheck: Date\r\n  issues: HealthIssue[]\r\n}\r\n\r\nexport interface HealthIssue {\r\n  id: string\r\n  type: 'performance' | 'error' | 'resource' | 'security'\r\n  severity: 'low' | 'medium' | 'high' | 'critical'\r\n  message: string\r\n  details: Record<string, any>\r\n  firstDetected: Date\r\n  lastSeen: Date\r\n  count: number\r\n}\r\n\r\nexport interface MonitoringConfig {\r\n  enabled: boolean\r\n  checkInterval: number // en segundos\r\n  errorThreshold: number\r\n  responseTimeThreshold: number\r\n  memoryThreshold: number\r\n  cpuThreshold: number\r\n  enableAutoRecovery: boolean\r\n  notificationChannels: string[]\r\n}\r\n\r\nexport class ProactiveMonitoringService {\r\n  private static instance: ProactiveMonitoringService\r\n  private alertSystem: EnterpriseAlertSystem\r\n  private metricsCollector: EnterpriseMetricsCollector\r\n  private errorPatterns: Map<string, ErrorPattern> = new Map()\r\n  private errorCounts: Map<string, { count: number; firstSeen: Date; lastSeen: Date }> = new Map()\r\n  private healthChecks: Map<string, () => Promise<any>> = new Map()\r\n  private monitoringInterval: NodeJS.Timeout | null = null\r\n  private config: MonitoringConfig\r\n\r\n  static getInstance(): ProactiveMonitoringService {\r\n    if (!ProactiveMonitoringService.instance) {\r\n      ProactiveMonitoringService.instance = new ProactiveMonitoringService()\r\n    }\r\n    return ProactiveMonitoringService.instance\r\n  }\r\n\r\n  constructor() {\r\n    // Solo inicializar en el servidor\r\n    if (typeof window === 'undefined') {\r\n      this.alertSystem = EnterpriseAlertSystem.getInstance()\r\n      this.metricsCollector = EnterpriseMetricsCollector.getInstance()\r\n    }\r\n    this.config = {\r\n      enabled: true,\r\n      checkInterval: 30, // 30 segundos\r\n      errorThreshold: 5, // 5% error rate\r\n      responseTimeThreshold: 2000, // 2 segundos\r\n      memoryThreshold: 80, // 80% memoria\r\n      cpuThreshold: 70, // 70% CPU\r\n      enableAutoRecovery: true,\r\n      notificationChannels: ['email', 'slack']\r\n    }\r\n    this.initializeDefaultPatterns()\r\n  }\r\n\r\n  private initializeDefaultPatterns(): void {\r\n    const defaultPatterns: ErrorPattern[] = [\r\n      {\r\n        id: 'database_connection_error',\r\n        name: 'Database Connection Error',\r\n        pattern: /database.*connection.*failed|connection.*timeout|pool.*exhausted/i,\r\n        severity: 'critical',\r\n        threshold: 3,\r\n        timeWindow: 5,\r\n        description: 'Errores de conexión a la base de datos',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'payment_processing_error',\r\n        name: 'Payment Processing Error',\r\n        pattern: /payment.*failed|transaction.*error|mercadopago.*error/i,\r\n        severity: 'high',\r\n        threshold: 5,\r\n        timeWindow: 10,\r\n        description: 'Errores en el procesamiento de pagos',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'authentication_error',\r\n        name: 'Authentication Error',\r\n        pattern: /auth.*failed|unauthorized|invalid.*token|session.*expired/i,\r\n        severity: 'medium',\r\n        threshold: 10,\r\n        timeWindow: 15,\r\n        description: 'Errores de autenticación',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'api_rate_limit',\r\n        name: 'API Rate Limit Exceeded',\r\n        pattern: /rate.*limit.*exceeded|too.*many.*requests|429/i,\r\n        severity: 'medium',\r\n        threshold: 20,\r\n        timeWindow: 5,\r\n        description: 'Límite de velocidad de API excedido',\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'server_error',\r\n        name: 'Internal Server Error',\r\n        pattern: /internal.*server.*error|500.*error|unhandled.*exception/i,\r\n        severity: 'high',\r\n        threshold: 5,\r\n        timeWindow: 10,\r\n        description: 'Errores internos del servidor',\r\n        isActive: true\r\n      }\r\n    ]\r\n\r\n    defaultPatterns.forEach(pattern => {\r\n      this.errorPatterns.set(pattern.id, pattern)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Inicia el monitoreo proactivo\r\n   */\r\n  start(): void {\r\n    // Solo ejecutar en el servidor\r\n    if (typeof window !== 'undefined') {\r\n      return\r\n    }\r\n\r\n    if (!this.config.enabled) {\r\n      logger.info(LogLevel.INFO, 'Proactive monitoring is disabled', {}, LogCategory.SYSTEM)\r\n      return\r\n    }\r\n\r\n    if (this.monitoringInterval) {\r\n      this.stop()\r\n    }\r\n\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.performHealthCheck()\r\n    }, this.config.checkInterval * 1000)\r\n\r\n    logger.info(LogLevel.INFO, 'Proactive monitoring started', {\r\n      interval: this.config.checkInterval,\r\n      patterns: this.errorPatterns.size\r\n    }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  /**\r\n   * Detiene el monitoreo proactivo\r\n   */\r\n  stop(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval)\r\n      this.monitoringInterval = null\r\n      logger.info(LogLevel.INFO, 'Proactive monitoring stopped', {}, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra un error para análisis\r\n   */\r\n  async reportError(error: Error | string, context?: Record<string, any>): Promise<void> {\r\n    const errorMessage = error instanceof Error ? error.message : error\r\n    const errorStack = error instanceof Error ? error.stack : undefined\r\n\r\n    // Solo procesar en el servidor\r\n    if (typeof window === 'undefined') {\r\n      // Analizar patrones de error\r\n      for (const [patternId, pattern] of this.errorPatterns) {\r\n        if (!pattern.isActive) {continue}\r\n\r\n        const regex = pattern.pattern instanceof RegExp ? pattern.pattern : new RegExp(pattern.pattern, 'i')\r\n        if (regex.test(errorMessage)) {\r\n          await this.handlePatternMatch(patternId, pattern, errorMessage, context)\r\n        }\r\n      }\r\n\r\n      // Registrar métricas si está disponible\r\n      if (this.metricsCollector) {\r\n        await this.metricsCollector.recordMetric('errors_total', 1, undefined, undefined, {\r\n          type: 'application_error',\r\n          ...context\r\n        })\r\n      }\r\n    }\r\n\r\n    // Log del error\r\n    logger.error(LogLevel.ERROR, 'Error reported to monitoring', {\r\n      error: errorMessage,\r\n      stack: errorStack,\r\n      context\r\n    }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  private async handlePatternMatch(\r\n    patternId: string,\r\n    pattern: ErrorPattern,\r\n    errorMessage: string,\r\n    context?: Record<string, any>\r\n  ): Promise<void> {\r\n    const now = new Date()\r\n    const key = `${patternId}_${Math.floor(now.getTime() / (pattern.timeWindow * 60 * 1000))}`\r\n    \r\n    const existing = this.errorCounts.get(key)\r\n    if (existing) {\r\n      existing.count++\r\n      existing.lastSeen = now\r\n    } else {\r\n      this.errorCounts.set(key, {\r\n        count: 1,\r\n        firstSeen: now,\r\n        lastSeen: now\r\n      })\r\n    }\r\n\r\n    const errorCount = this.errorCounts.get(key)!\r\n    \r\n    // Verificar si se alcanzó el umbral (solo en servidor)\r\n    if (errorCount.count >= pattern.threshold && this.alertSystem) {\r\n      await this.triggerAlert(pattern, errorCount, errorMessage, context)\r\n      \r\n      // Limpiar contador para evitar spam de alertas\r\n      this.errorCounts.delete(key)\r\n    }\r\n  }\r\n\r\n  private async triggerAlert(\r\n    pattern: ErrorPattern,\r\n    errorCount: { count: number; firstSeen: Date; lastSeen: Date },\r\n    errorMessage: string,\r\n    context?: Record<string, any>\r\n  ): Promise<void> {\r\n    const alert = {\r\n      id: `pattern_${pattern.id}_${Date.now()}`,\r\n      title: `Error Pattern Detected: ${pattern.name}`,\r\n      message: `Pattern \"${pattern.name}\" detected ${errorCount.count} times in ${pattern.timeWindow} minutes`,\r\n      severity: pattern.severity,\r\n      details: {\r\n        pattern: pattern.name,\r\n        description: pattern.description,\r\n        count: errorCount.count,\r\n        threshold: pattern.threshold,\r\n        timeWindow: pattern.timeWindow,\r\n        firstSeen: errorCount.firstSeen.toISOString(),\r\n        lastSeen: errorCount.lastSeen.toISOString(),\r\n        lastError: errorMessage,\r\n        context\r\n      }\r\n    }\r\n\r\n    // Enviar notificaciones\r\n    if (this.config.notificationChannels.includes('email')) {\r\n      await this.sendEmailAlert(alert)\r\n    }\r\n\r\n    if (this.config.notificationChannels.includes('slack')) {\r\n      await this.sendSlackAlert(alert)\r\n    }\r\n\r\n    logger.warn(LogLevel.WARN, 'Error pattern alert triggered', alert, LogCategory.SYSTEM)\r\n  }\r\n\r\n  private async sendEmailAlert(alert: any): Promise<void> {\r\n    try {\r\n      await emailService.sendNotification({\r\n        to: ['admin@example.com'], // Configurar emails de admin\r\n        subject: `🚨 ${alert.title}`,\r\n        template: 'error-pattern-alert',\r\n        data: alert,\r\n        priority: alert.severity === 'critical' ? 'high' : 'normal'\r\n      })\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to send email alert', { error }, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  private async sendSlackAlert(alert: any): Promise<void> {\r\n    try {\r\n      await slackService.sendErrorAlert({\r\n        error: alert.message,\r\n        context: alert.title,\r\n        timestamp: new Date(),\r\n        severity: alert.severity\r\n      })\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to send Slack alert', { error }, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza verificación de salud del sistema\r\n   */\r\n  private async performHealthCheck(): Promise<void> {\r\n    try {\r\n      const health = await this.getSystemHealth()\r\n      \r\n      // Verificar umbrales críticos\r\n      if (health.status === 'critical' || health.status === 'down') {\r\n        await this.handleCriticalHealth(health)\r\n      } else if (health.status === 'warning') {\r\n        await this.handleWarningHealth(health)\r\n      }\r\n\r\n      // Actualizar métricas si está disponible\r\n      if (this.metricsCollector) {\r\n        await this.metricsCollector.recordMetric('system_health_score', this.calculateHealthScore(health))\r\n        await this.metricsCollector.recordMetric('system_response_time', health.responseTime)\r\n        await this.metricsCollector.recordMetric('system_error_rate', health.errorRate)\r\n        await this.metricsCollector.recordMetric('system_memory_usage', health.memoryUsage)\r\n        await this.metricsCollector.recordMetric('system_cpu_usage', health.cpuUsage)\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Health check failed', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM)\r\n    }\r\n  }\r\n\r\n  private async getSystemHealth(): Promise<SystemHealth> {\r\n    const issues: HealthIssue[] = []\r\n    let status: SystemHealth['status'] = 'healthy'\r\n\r\n    // Simular verificaciones de salud (en producción, estas serían verificaciones reales)\r\n    const responseTime = Math.random() * 1000 + 200 // 200-1200ms\r\n    const errorRate = Math.random() * 5 // 0-5%\r\n    const memoryUsage = Math.random() * 40 + 40 // 40-80%\r\n    const cpuUsage = Math.random() * 30 + 20 // 20-50%\r\n    const activeConnections = Math.floor(Math.random() * 100) + 50\r\n\r\n    // Verificar umbrales\r\n    if (responseTime > this.config.responseTimeThreshold) {\r\n      issues.push({\r\n        id: 'high_response_time',\r\n        type: 'performance',\r\n        severity: 'medium',\r\n        message: 'High response time detected',\r\n        details: { responseTime, threshold: this.config.responseTimeThreshold },\r\n        firstDetected: new Date(),\r\n        lastSeen: new Date(),\r\n        count: 1\r\n      })\r\n      status = 'warning'\r\n    }\r\n\r\n    if (errorRate > this.config.errorThreshold) {\r\n      issues.push({\r\n        id: 'high_error_rate',\r\n        type: 'error',\r\n        severity: 'high',\r\n        message: 'High error rate detected',\r\n        details: { errorRate, threshold: this.config.errorThreshold },\r\n        firstDetected: new Date(),\r\n        lastSeen: new Date(),\r\n        count: 1\r\n      })\r\n      status = 'critical'\r\n    }\r\n\r\n    if (memoryUsage > this.config.memoryThreshold) {\r\n      issues.push({\r\n        id: 'high_memory_usage',\r\n        type: 'resource',\r\n        severity: 'medium',\r\n        message: 'High memory usage detected',\r\n        details: { memoryUsage, threshold: this.config.memoryThreshold },\r\n        firstDetected: new Date(),\r\n        lastSeen: new Date(),\r\n        count: 1\r\n      })\r\n      if (status === 'healthy') {status = 'warning'}\r\n    }\r\n\r\n    return {\r\n      status,\r\n      uptime: typeof process !== 'undefined' && process.uptime ? process.uptime() : Date.now() / 1000,\r\n      responseTime,\r\n      errorRate,\r\n      memoryUsage,\r\n      cpuUsage,\r\n      activeConnections,\r\n      lastCheck: new Date(),\r\n      issues\r\n    }\r\n  }\r\n\r\n  private calculateHealthScore(health: SystemHealth): number {\r\n    let score = 100\r\n    \r\n    health.issues.forEach(issue => {\r\n      switch (issue.severity) {\r\n        case 'critical':\r\n          score -= 30\r\n          break\r\n        case 'high':\r\n          score -= 20\r\n          break\r\n        case 'medium':\r\n          score -= 10\r\n          break\r\n        case 'low':\r\n          score -= 5\r\n          break\r\n      }\r\n    })\r\n\r\n    return Math.max(0, score)\r\n  }\r\n\r\n  private async handleCriticalHealth(health: SystemHealth): Promise<void> {\r\n    logger.error(LogLevel.ERROR, 'Critical system health detected', { health }, LogCategory.SYSTEM)\r\n    \r\n    // Enviar alertas críticas\r\n    await this.sendSlackAlert({\r\n      title: '🚨 CRITICAL: System Health Alert',\r\n      message: 'System health is critical - immediate attention required',\r\n      severity: 'critical',\r\n      details: health\r\n    })\r\n\r\n    // Auto-recovery si está habilitado\r\n    if (this.config.enableAutoRecovery) {\r\n      await this.attemptAutoRecovery(health)\r\n    }\r\n  }\r\n\r\n  private async handleWarningHealth(health: SystemHealth): Promise<void> {\r\n    logger.warn(LogLevel.WARN, 'System health warning', { health }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  private async attemptAutoRecovery(health: SystemHealth): Promise<void> {\r\n    logger.info(LogLevel.INFO, 'Attempting auto-recovery', { health }, LogCategory.SYSTEM)\r\n    \r\n    // Implementar lógica de auto-recuperación\r\n    // Por ejemplo: reiniciar servicios, limpiar cache, etc.\r\n  }\r\n\r\n  /**\r\n   * Configuración del servicio\r\n   */\r\n  updateConfig(newConfig: Partial<MonitoringConfig>): void {\r\n    this.config = { ...this.config, ...newConfig }\r\n    \r\n    if (this.config.enabled && !this.monitoringInterval) {\r\n      this.start()\r\n    } else if (!this.config.enabled && this.monitoringInterval) {\r\n      this.stop()\r\n    }\r\n  }\r\n\r\n  getConfig(): MonitoringConfig {\r\n    return { ...this.config }\r\n  }\r\n\r\n  /**\r\n   * Gestión de patrones de error\r\n   */\r\n  addErrorPattern(pattern: ErrorPattern): void {\r\n    this.errorPatterns.set(pattern.id, pattern)\r\n    logger.info(LogLevel.INFO, 'Error pattern added', { patternId: pattern.id }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  removeErrorPattern(patternId: string): void {\r\n    this.errorPatterns.delete(patternId)\r\n    logger.info(LogLevel.INFO, 'Error pattern removed', { patternId }, LogCategory.SYSTEM)\r\n  }\r\n\r\n  getErrorPatterns(): ErrorPattern[] {\r\n    return Array.from(this.errorPatterns.values())\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de monitoreo\r\n   */\r\n  async getMonitoringStats(): Promise<{\r\n    totalErrors: number\r\n    activePatterns: number\r\n    recentAlerts: number\r\n    systemHealth: SystemHealth\r\n  }> {\r\n    const totalErrors = Array.from(this.errorCounts.values())\r\n      .reduce((sum, count) => sum + count.count, 0)\r\n    \r\n    const activePatterns = Array.from(this.errorPatterns.values())\r\n      .filter(p => p.isActive).length\r\n    \r\n    const recentAlerts = this.alertSystem ? \r\n      Array.from(this.errorCounts.values())\r\n        .filter(count => Date.now() - count.lastSeen.getTime() < 24 * 60 * 60 * 1000).length\r\n      : 0\r\n    \r\n    const systemHealth = await this.getSystemHealth()\r\n\r\n    return {\r\n      totalErrors,\r\n      activePatterns,\r\n      recentAlerts,\r\n      systemHealth\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const proactiveMonitoring = ProactiveMonitoringService.getInstance()\r\n\r\n// Funciones de conveniencia\r\nexport const reportError = (error: Error | string, context?: Record<string, any>) =>\r\n  proactiveMonitoring.reportError(error, context)\r\n\r\nexport const startMonitoring = () => proactiveMonitoring.start()\r\nexport const stopMonitoring = () => proactiveMonitoring.stop()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}