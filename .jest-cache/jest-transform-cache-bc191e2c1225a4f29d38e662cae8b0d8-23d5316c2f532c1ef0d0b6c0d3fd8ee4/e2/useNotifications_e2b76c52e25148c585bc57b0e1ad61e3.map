{"version":3,"names":["cov_zr5ikw6jn","actualCoverage","s","useNotifications","f","sendEmailNotification","_react","useCallback","data","response","fetch","method","headers","body","JSON","stringify","ok","b","Error","result","json","success","error","console","showToast","message","type","duration","toastOptions","undefined","_sonner","toast","info","warning","notifyProfileChange","emailData","options","shouldShowToast","sendEmail","toastType","toastDuration","emailSent","log","warn","notifyAvatarChange","notifyAddressChange","notifySecurityAlert"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useNotifications.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { EmailNotificationType } from '@/app/api/user/notifications/email/route';\r\n\r\ninterface NotificationOptions {\r\n  showToast?: boolean;\r\n  sendEmail?: boolean;\r\n  toastType?: 'success' | 'error' | 'info' | 'warning';\r\n  toastDuration?: number;\r\n}\r\n\r\ninterface EmailNotificationData {\r\n  type: EmailNotificationType;\r\n  oldValue?: string;\r\n  newValue?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface UseNotificationsReturn {\r\n  notifyProfileChange: (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  notifyAvatarChange: (\r\n    message: string,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  notifyAddressChange: (\r\n    message: string,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  notifySecurityAlert: (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  sendEmailNotification: (data: EmailNotificationData) => Promise<boolean>;\r\n}\r\n\r\nexport function useNotifications(): UseNotificationsReturn {\r\n  \r\n  // Función para enviar notificación por email\r\n  const sendEmailNotification = useCallback(async (data: EmailNotificationData): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch('/api/user/notifications/email', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al enviar notificación por email');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.success;\r\n    } catch (error) {\r\n      console.error('Error al enviar notificación por email:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Función para mostrar toast notification\r\n  const showToast = useCallback((\r\n    message: string,\r\n    type: 'success' | 'error' | 'info' | 'warning' = 'success',\r\n    duration?: number\r\n  ) => {\r\n    const toastOptions = duration ? { duration } : undefined;\r\n    \r\n    switch (type) {\r\n      case 'success':\r\n        toast.success(message, toastOptions);\r\n        break;\r\n      case 'error':\r\n        toast.error(message, toastOptions);\r\n        break;\r\n      case 'info':\r\n        toast.info(message, toastOptions);\r\n        break;\r\n      case 'warning':\r\n        toast.warning(message, toastOptions);\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  // Notificar cambios de perfil\r\n  const notifyProfileChange = useCallback(async (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      sendEmail = false,\r\n      toastType = 'success',\r\n      toastDuration,\r\n    } = options;\r\n\r\n    // Mostrar toast notification\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n\r\n    // Enviar notificación por email si es necesario\r\n    if (sendEmail && emailData) {\r\n      try {\r\n        const emailSent = await sendEmailNotification(emailData);\r\n        if (emailSent) {\r\n          console.log('✅ Email notification sent for profile change');\r\n        } else {\r\n          console.warn('⚠️ Failed to send email notification for profile change');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error sending email notification:', error);\r\n      }\r\n    }\r\n  }, [showToast, sendEmailNotification]);\r\n\r\n  // Notificar cambios de avatar\r\n  const notifyAvatarChange = useCallback(async (\r\n    message: string,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      toastType = 'success',\r\n      toastDuration,\r\n    } = options;\r\n\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n  }, [showToast]);\r\n\r\n  // Notificar cambios de direcciones\r\n  const notifyAddressChange = useCallback(async (\r\n    message: string,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      toastType = 'success',\r\n      toastDuration,\r\n    } = options;\r\n\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n  }, [showToast]);\r\n\r\n  // Notificar alertas de seguridad\r\n  const notifySecurityAlert = useCallback(async (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      sendEmail = true, // Por defecto enviar email para alertas de seguridad\r\n      toastType = 'warning',\r\n      toastDuration = 8000, // Duración más larga para alertas\r\n    } = options;\r\n\r\n    // Mostrar toast notification\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n\r\n    // Enviar notificación por email\r\n    if (sendEmail && emailData) {\r\n      try {\r\n        const emailSent = await sendEmailNotification(emailData);\r\n        if (emailSent) {\r\n          console.log('✅ Security alert email sent');\r\n        } else {\r\n          console.warn('⚠️ Failed to send security alert email');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error sending security alert email:', error);\r\n      }\r\n    }\r\n  }, [showToast, sendEmailNotification]);\r\n\r\n  return {\r\n    notifyProfileChange,\r\n    notifyAvatarChange,\r\n    notifyAddressChange,\r\n    notifySecurityAlert,\r\n    sendEmailNotification,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}