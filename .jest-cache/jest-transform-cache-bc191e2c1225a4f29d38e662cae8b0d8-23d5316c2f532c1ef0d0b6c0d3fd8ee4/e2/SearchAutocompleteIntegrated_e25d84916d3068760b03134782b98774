985b416a39ba88dc0b56517dc720800d
// ===================================
// COMPONENTE: SearchAutocompleteIntegrated - Integraci칩n completa con useSearch
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get SearchAutocompleteIntegrated () {
        return SearchAutocompleteIntegrated;
    },
    get default () {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _searchautocomplete = require("./search-autocomplete");
const _useSearchOptimized = require("../../hooks/useSearchOptimized");
const _useTrendingSearches = require("../../hooks/useTrendingSearches");
const _useRecentSearches = require("../../hooks/useRecentSearches");
const _shop = require("../../constants/shop");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const SearchAutocompleteIntegrated = /*#__PURE__*/ _react.default.memo(/*#__PURE__*/ _react.default.forwardRef(({ debounceMs = 100, maxSuggestions = 6, searchLimit = 12, saveRecentSearches = true, showTrendingSearches = true, showRecentSearches = true, onSearchExecuted, onSuggestionSelected, onSearch, onSuggestionSelect, ...props }, ref)=>{
    // Estado de hidrataci칩n del cliente y contexto
    const [isClient, setIsClient] = (0, _react.useState)(false);
    const [isContextReady, setIsContextReady] = (0, _react.useState)(false);
    // Hook de b칰squeda optimizado con TanStack Query - SIEMPRE llamado
    const searchHookResult = (0, _useSearchOptimized.useSearchOptimized)({
        debounceMs,
        maxSuggestions,
        searchLimit,
        saveRecentSearches,
        onSearch: (query, results)=>{
            onSearchExecuted?.(query, results);
            onSearch?.(query);
        },
        onSuggestionSelect: (suggestion)=>{
            onSuggestionSelected?.(suggestion);
            onSuggestionSelect?.(suggestion);
        }
    });
    // Verificar que estamos en el cliente y el contexto est치 listo
    (0, _react.useEffect)(()=>{
        setIsClient(true);
        // Peque침o delay para asegurar que el contexto de React Query est칠 completamente inicializado
        const timer = setTimeout(()=>{
            setIsContextReady(true);
        }, 100);
        return ()=>clearTimeout(timer);
    }, []);
    // Hooks adicionales para trending y recent searches - SIEMPRE llamados
    const trendingHookResult = (0, _useTrendingSearches.useTrendingSearches)({
        limit: 4,
        enabled: showTrendingSearches && isClient && isContextReady
    });
    const recentHookResult = (0, _useRecentSearches.useRecentSearches)({
        maxSearches: _shop.SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,
        enablePersistence: showRecentSearches && isClient && isContextReady,
        expirationDays: _shop.SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS
    });
    // Valores por defecto para SSR
    const defaultValues = {
        query: '',
        results: [],
        suggestions: [],
        isLoading: false,
        error: null,
        searchWithDebounce: ()=>{},
        executeSearch: ()=>{},
        selectSuggestion: ()=>{},
        clearSearch: ()=>{},
        trendingSearches: [],
        recentSearches: [],
        getRecentSearches: ()=>[]
    };
    // Usar valores del hook solo si estamos en el cliente
    const { query, results, suggestions: searchSuggestions, isLoading, error, searchWithDebounce, executeSearch, selectSuggestion, clearSearch } = isClient ? searchHookResult : defaultValues;
    const { trendingSearches } = isClient ? trendingHookResult : {
        trendingSearches: []
    };
    const { recentSearches, getRecentSearches } = isClient ? recentHookResult : {
        recentSearches: [],
        getRecentSearches: ()=>[]
    };
    // Generar sugerencias combinadas
    const suggestions = _react.default.useMemo(()=>{
        if (!isClient) return [];
        console.log('游댌 SearchAutocompleteIntegrated - Generando sugerencias:', {
            query: query?.trim(),
            hasQuery: !!query?.trim(),
            searchSuggestions: searchSuggestions && Array.isArray(searchSuggestions) ? searchSuggestions.length : 0,
            trendingSearches: trendingSearches && Array.isArray(trendingSearches) ? trendingSearches.length : 0,
            recentSearches: recentSearches && Array.isArray(recentSearches) ? recentSearches.length : 0,
            showTrendingSearches,
            showRecentSearches
        });
        // Si hay query, usar las sugerencias del hook optimizado
        if (query?.trim()) {
            console.log('游댌 Usando searchSuggestions porque hay query:', searchSuggestions);
            return searchSuggestions || [];
        }
        // Si no hay query, mostrar trending y recent searches como el componente original
        const defaultSuggestions = [];
        console.log('游댌 Generando sugerencias por defecto (sin query)');
        // Agregar b칰squedas recientes
        if (showRecentSearches && recentSearches && Array.isArray(recentSearches) && recentSearches.length > 0) {
            const recentSuggestions = getRecentSearches(3).map((search, index)=>({
                    id: `recent-${index}`,
                    type: 'recent',
                    title: search,
                    href: `/search?q=${encodeURIComponent(search)}`
                }));
            console.log('游댌 Agregando b칰squedas recientes:', recentSuggestions);
            defaultSuggestions.push(...recentSuggestions);
        }
        // Agregar b칰squedas trending reales
        if (showTrendingSearches && trendingSearches && Array.isArray(trendingSearches) && trendingSearches.length > 0) {
            const trendingSuggestions = trendingSearches.map((trending)=>({
                    id: trending.id,
                    type: 'trending',
                    title: trending.query,
                    href: trending.href,
                    badge: trending.count ? `${trending.count}` : undefined
                }));
            console.log('游댌 Agregando b칰squedas trending:', trendingSuggestions);
            defaultSuggestions.push(...trendingSuggestions.slice(0, 4));
        }
        const finalSuggestions = defaultSuggestions.slice(0, maxSuggestions);
        console.log('游댌 Sugerencias finales generadas:', finalSuggestions);
        return finalSuggestions;
    }, [
        isClient,
        query,
        searchSuggestions,
        showRecentSearches,
        showTrendingSearches,
        recentSearches,
        trendingSearches,
        getRecentSearches,
        maxSuggestions
    ]);
    // Debugging del estado del hook
    if (isClient && process.env.NODE_ENV === 'development') {
        console.log('游댌 SearchAutocompleteIntegrated: Hook state:', {
            query,
            suggestions: suggestions?.length || 0,
            suggestionsDetailed: suggestions?.map((s)=>({
                    type: s.type,
                    title: s.title
                })) || [],
            isLoading,
            error,
            results: results?.length || 0,
            trendingSearches: trendingSearches?.length || 0,
            recentSearches: recentSearches?.length || 0
        });
    }
    // Manejar env칤o de b칰squeda
    const handleSearch = (query)=>{
        if (isClient) {
            executeSearch(query);
        }
    };
    // Manejar selecci칩n de sugerencia
    const handleSuggestionSelect = (suggestion)=>{
        if (isClient) {
            selectSuggestion(suggestion);
        }
    };
    // Manejar limpieza
    const handleClear = ()=>{
        if (isClient) {
            clearSearch();
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
        ref: ref,
        ...props,
        // Estado del hook optimizado
        query: query,
        suggestions: suggestions,
        isLoading: isLoading,
        error: error,
        showTrendingSearches: showTrendingSearches,
        showRecentSearches: showRecentSearches,
        // Callbacks integrados
        onSearch: handleSearch,
        onSuggestionSelect: handleSuggestionSelect,
        searchWithDebounce: searchWithDebounce,
        onClear: handleClear
    });
}));
SearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated';
const _default = SearchAutocompleteIntegrated;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcdWlcXFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDT01QT05FTlRFOiBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkIC0gSW50ZWdyYWNpw7NuIGNvbXBsZXRhIGNvbiB1c2VTZWFyY2hcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtcbiAgU2VhcmNoQXV0b2NvbXBsZXRlLFxuICBTZWFyY2hBdXRvY29tcGxldGVQcm9wcyxcbiAgU2VhcmNoU3VnZ2VzdGlvbixcbn0gZnJvbSAnLi9zZWFyY2gtYXV0b2NvbXBsZXRlJ1xuaW1wb3J0IHsgdXNlU2VhcmNoT3B0aW1pemVkIH0gZnJvbSAnQC9ob29rcy91c2VTZWFyY2hPcHRpbWl6ZWQnXG5pbXBvcnQgeyB1c2VUcmVuZGluZ1NlYXJjaGVzIH0gZnJvbSAnQC9ob29rcy91c2VUcmVuZGluZ1NlYXJjaGVzJ1xuaW1wb3J0IHsgdXNlUmVjZW50U2VhcmNoZXMgfSBmcm9tICdAL2hvb2tzL3VzZVJlY2VudFNlYXJjaGVzJ1xuaW1wb3J0IHsgU0VBUkNIX0NPTlNUQU5UUyB9IGZyb20gJ0AvY29uc3RhbnRzL3Nob3AnXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZFByb3BzXG4gIGV4dGVuZHMgT21pdDxcbiAgICBTZWFyY2hBdXRvY29tcGxldGVQcm9wcyxcbiAgICAncXVlcnknIHwgJ3N1Z2dlc3Rpb25zJyB8ICdpc0xvYWRpbmcnIHwgJ2Vycm9yJyB8ICdzZWFyY2hXaXRoRGVib3VuY2UnIHwgJ29uQ2xlYXInXG4gID4ge1xuICAvLyBDb25maWd1cmFjacOzbiBkZWwgaG9vayB1c2VTZWFyY2hcbiAgZGVib3VuY2VNcz86IG51bWJlclxuICBtYXhTdWdnZXN0aW9ucz86IG51bWJlclxuICBzZWFyY2hMaW1pdD86IG51bWJlclxuICBzYXZlUmVjZW50U2VhcmNoZXM/OiBib29sZWFuXG5cbiAgLy8gQ2FsbGJhY2tzIGFkaWNpb25hbGVzXG4gIG9uU2VhcmNoRXhlY3V0ZWQ/OiAocXVlcnk6IHN0cmluZywgcmVzdWx0czogYW55W10pID0+IHZvaWRcbiAgb25TdWdnZXN0aW9uU2VsZWN0ZWQ/OiAoc3VnZ2VzdGlvbjogU2VhcmNoU3VnZ2VzdGlvbikgPT4gdm9pZFxufVxuXG4vKipcbiAqIFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQgLSBDb21wb25lbnRlIHF1ZSBpbnRlZ3JhIFNlYXJjaEF1dG9jb21wbGV0ZSBjb24gdXNlU2VhcmNoXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIHByb3BvcmNpb25hIHVuYSBleHBlcmllbmNpYSBkZSBiw7pzcXVlZGEgY29tcGxldGEgc2luIG5lY2VzaWRhZFxuICogZGUgbWFuZWphciBtYW51YWxtZW50ZSBlbCBlc3RhZG8gZGVsIGhvb2sgdXNlU2VhcmNoLlxuICovXG5leHBvcnQgY29uc3QgU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZCA9IFJlYWN0Lm1lbW8oXG4gIFJlYWN0LmZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZFByb3BzPihcbiAgICAoXG4gICAgICB7XG4gICAgICAgIGRlYm91bmNlTXMgPSAxMDAsXG4gICAgICAgIG1heFN1Z2dlc3Rpb25zID0gNixcbiAgICAgICAgc2VhcmNoTGltaXQgPSAxMixcbiAgICAgICAgc2F2ZVJlY2VudFNlYXJjaGVzID0gdHJ1ZSxcbiAgICAgICAgc2hvd1RyZW5kaW5nU2VhcmNoZXMgPSB0cnVlLFxuICAgICAgICBzaG93UmVjZW50U2VhcmNoZXMgPSB0cnVlLFxuICAgICAgICBvblNlYXJjaEV4ZWN1dGVkLFxuICAgICAgICBvblN1Z2dlc3Rpb25TZWxlY3RlZCxcbiAgICAgICAgb25TZWFyY2gsXG4gICAgICAgIG9uU3VnZ2VzdGlvblNlbGVjdCxcbiAgICAgICAgLi4ucHJvcHNcbiAgICAgIH0sXG4gICAgICByZWZcbiAgICApID0+IHtcbiAgICAgIC8vIEVzdGFkbyBkZSBoaWRyYXRhY2nDs24gZGVsIGNsaWVudGUgeSBjb250ZXh0b1xuICAgICAgY29uc3QgW2lzQ2xpZW50LCBzZXRJc0NsaWVudF0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgICAgIGNvbnN0IFtpc0NvbnRleHRSZWFkeSwgc2V0SXNDb250ZXh0UmVhZHldID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgICAgIC8vIEhvb2sgZGUgYsO6c3F1ZWRhIG9wdGltaXphZG8gY29uIFRhblN0YWNrIFF1ZXJ5IC0gU0lFTVBSRSBsbGFtYWRvXG4gICAgICBjb25zdCBzZWFyY2hIb29rUmVzdWx0ID0gdXNlU2VhcmNoT3B0aW1pemVkKHtcbiAgICAgICAgZGVib3VuY2VNcyxcbiAgICAgICAgbWF4U3VnZ2VzdGlvbnMsXG4gICAgICAgIHNlYXJjaExpbWl0LFxuICAgICAgICBzYXZlUmVjZW50U2VhcmNoZXMsXG4gICAgICAgIG9uU2VhcmNoOiAocXVlcnksIHJlc3VsdHMpID0+IHtcbiAgICAgICAgICBvblNlYXJjaEV4ZWN1dGVkPy4ocXVlcnksIHJlc3VsdHMpXG4gICAgICAgICAgb25TZWFyY2g/LihxdWVyeSlcbiAgICAgICAgfSxcbiAgICAgICAgb25TdWdnZXN0aW9uU2VsZWN0OiBzdWdnZXN0aW9uID0+IHtcbiAgICAgICAgICBvblN1Z2dlc3Rpb25TZWxlY3RlZD8uKHN1Z2dlc3Rpb24pXG4gICAgICAgICAgb25TdWdnZXN0aW9uU2VsZWN0Py4oc3VnZ2VzdGlvbilcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgZXN0YW1vcyBlbiBlbCBjbGllbnRlIHkgZWwgY29udGV4dG8gZXN0w6EgbGlzdG9cbiAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldElzQ2xpZW50KHRydWUpXG4gICAgICAgIC8vIFBlcXVlw7FvIGRlbGF5IHBhcmEgYXNlZ3VyYXIgcXVlIGVsIGNvbnRleHRvIGRlIFJlYWN0IFF1ZXJ5IGVzdMOpIGNvbXBsZXRhbWVudGUgaW5pY2lhbGl6YWRvXG4gICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc2V0SXNDb250ZXh0UmVhZHkodHJ1ZSlcbiAgICAgICAgfSwgMTAwKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICB9LCBbXSlcblxuICAgICAgLy8gSG9va3MgYWRpY2lvbmFsZXMgcGFyYSB0cmVuZGluZyB5IHJlY2VudCBzZWFyY2hlcyAtIFNJRU1QUkUgbGxhbWFkb3NcbiAgICAgIGNvbnN0IHRyZW5kaW5nSG9va1Jlc3VsdCA9IHVzZVRyZW5kaW5nU2VhcmNoZXMoe1xuICAgICAgICBsaW1pdDogNCxcbiAgICAgICAgZW5hYmxlZDogc2hvd1RyZW5kaW5nU2VhcmNoZXMgJiYgaXNDbGllbnQgJiYgaXNDb250ZXh0UmVhZHksXG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZWNlbnRIb29rUmVzdWx0ID0gdXNlUmVjZW50U2VhcmNoZXMoe1xuICAgICAgICBtYXhTZWFyY2hlczogU0VBUkNIX0NPTlNUQU5UUy5NQVhfUkVDRU5UX1NFQVJDSEVTLFxuICAgICAgICBlbmFibGVQZXJzaXN0ZW5jZTogc2hvd1JlY2VudFNlYXJjaGVzICYmIGlzQ2xpZW50ICYmIGlzQ29udGV4dFJlYWR5LFxuICAgICAgICBleHBpcmF0aW9uRGF5czogU0VBUkNIX0NPTlNUQU5UUy5SRUNFTlRfU0VBUkNIRVNfRVhQSVJBVElPTl9EQVlTLFxuICAgICAgfSlcblxuICAgICAgLy8gVmFsb3JlcyBwb3IgZGVmZWN0byBwYXJhIFNTUlxuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlcyA9IHtcbiAgICAgICAgcXVlcnk6ICcnLFxuICAgICAgICByZXN1bHRzOiBbXSxcbiAgICAgICAgc3VnZ2VzdGlvbnM6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgc2VhcmNoV2l0aERlYm91bmNlOiAoKSA9PiB7fSxcbiAgICAgICAgZXhlY3V0ZVNlYXJjaDogKCkgPT4ge30sXG4gICAgICAgIHNlbGVjdFN1Z2dlc3Rpb246ICgpID0+IHt9LFxuICAgICAgICBjbGVhclNlYXJjaDogKCkgPT4ge30sXG4gICAgICAgIHRyZW5kaW5nU2VhcmNoZXM6IFtdLFxuICAgICAgICByZWNlbnRTZWFyY2hlczogW10sXG4gICAgICAgIGdldFJlY2VudFNlYXJjaGVzOiAoKSA9PiBbXSxcbiAgICAgIH1cblxuICAgICAgLy8gVXNhciB2YWxvcmVzIGRlbCBob29rIHNvbG8gc2kgZXN0YW1vcyBlbiBlbCBjbGllbnRlXG4gICAgICBjb25zdCB7XG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICByZXN1bHRzLFxuICAgICAgICBzdWdnZXN0aW9uczogc2VhcmNoU3VnZ2VzdGlvbnMsXG4gICAgICAgIGlzTG9hZGluZyxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIHNlYXJjaFdpdGhEZWJvdW5jZSxcbiAgICAgICAgZXhlY3V0ZVNlYXJjaCxcbiAgICAgICAgc2VsZWN0U3VnZ2VzdGlvbixcbiAgICAgICAgY2xlYXJTZWFyY2gsXG4gICAgICB9ID0gaXNDbGllbnQgPyBzZWFyY2hIb29rUmVzdWx0IDogZGVmYXVsdFZhbHVlc1xuXG4gICAgICBjb25zdCB7IHRyZW5kaW5nU2VhcmNoZXMgfSA9IGlzQ2xpZW50ID8gdHJlbmRpbmdIb29rUmVzdWx0IDogeyB0cmVuZGluZ1NlYXJjaGVzOiBbXSB9XG5cbiAgICAgIGNvbnN0IHsgcmVjZW50U2VhcmNoZXMsIGdldFJlY2VudFNlYXJjaGVzIH0gPSBpc0NsaWVudFxuICAgICAgICA/IHJlY2VudEhvb2tSZXN1bHRcbiAgICAgICAgOiB7IHJlY2VudFNlYXJjaGVzOiBbXSwgZ2V0UmVjZW50U2VhcmNoZXM6ICgpID0+IFtdIH1cblxuICAgICAgLy8gR2VuZXJhciBzdWdlcmVuY2lhcyBjb21iaW5hZGFzXG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoIWlzQ2xpZW50KSByZXR1cm4gW11cblxuICAgICAgICBjb25zb2xlLmxvZygn8J+UjSBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkIC0gR2VuZXJhbmRvIHN1Z2VyZW5jaWFzOicsIHtcbiAgICAgICAgICBxdWVyeTogcXVlcnk/LnRyaW0oKSxcbiAgICAgICAgICBoYXNRdWVyeTogISFxdWVyeT8udHJpbSgpLFxuICAgICAgICAgIHNlYXJjaFN1Z2dlc3Rpb25zOlxuICAgICAgICAgICAgc2VhcmNoU3VnZ2VzdGlvbnMgJiYgQXJyYXkuaXNBcnJheShzZWFyY2hTdWdnZXN0aW9ucykgPyBzZWFyY2hTdWdnZXN0aW9ucy5sZW5ndGggOiAwLFxuICAgICAgICAgIHRyZW5kaW5nU2VhcmNoZXM6XG4gICAgICAgICAgICB0cmVuZGluZ1NlYXJjaGVzICYmIEFycmF5LmlzQXJyYXkodHJlbmRpbmdTZWFyY2hlcykgPyB0cmVuZGluZ1NlYXJjaGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVjZW50U2VhcmNoZXM6XG4gICAgICAgICAgICByZWNlbnRTZWFyY2hlcyAmJiBBcnJheS5pc0FycmF5KHJlY2VudFNlYXJjaGVzKSA/IHJlY2VudFNlYXJjaGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgc2hvd1RyZW5kaW5nU2VhcmNoZXMsXG4gICAgICAgICAgc2hvd1JlY2VudFNlYXJjaGVzLFxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIFNpIGhheSBxdWVyeSwgdXNhciBsYXMgc3VnZXJlbmNpYXMgZGVsIGhvb2sgb3B0aW1pemFkb1xuICAgICAgICBpZiAocXVlcnk/LnRyaW0oKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFVzYW5kbyBzZWFyY2hTdWdnZXN0aW9ucyBwb3JxdWUgaGF5IHF1ZXJ5OicsIHNlYXJjaFN1Z2dlc3Rpb25zKVxuICAgICAgICAgIHJldHVybiBzZWFyY2hTdWdnZXN0aW9ucyB8fCBbXVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2kgbm8gaGF5IHF1ZXJ5LCBtb3N0cmFyIHRyZW5kaW5nIHkgcmVjZW50IHNlYXJjaGVzIGNvbW8gZWwgY29tcG9uZW50ZSBvcmlnaW5hbFxuICAgICAgICBjb25zdCBkZWZhdWx0U3VnZ2VzdGlvbnM6IFNlYXJjaFN1Z2dlc3Rpb25bXSA9IFtdXG5cbiAgICAgICAgY29uc29sZS5sb2coJ/CflI0gR2VuZXJhbmRvIHN1Z2VyZW5jaWFzIHBvciBkZWZlY3RvIChzaW4gcXVlcnkpJylcblxuICAgICAgICAvLyBBZ3JlZ2FyIGLDunNxdWVkYXMgcmVjaWVudGVzXG4gICAgICAgIGlmIChcbiAgICAgICAgICBzaG93UmVjZW50U2VhcmNoZXMgJiZcbiAgICAgICAgICByZWNlbnRTZWFyY2hlcyAmJlxuICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVjZW50U2VhcmNoZXMpICYmXG4gICAgICAgICAgcmVjZW50U2VhcmNoZXMubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCByZWNlbnRTdWdnZXN0aW9ucyA9IGdldFJlY2VudFNlYXJjaGVzKDMpLm1hcCgoc2VhcmNoLCBpbmRleCkgPT4gKHtcbiAgICAgICAgICAgIGlkOiBgcmVjZW50LSR7aW5kZXh9YCxcbiAgICAgICAgICAgIHR5cGU6ICdyZWNlbnQnIGFzIGNvbnN0LFxuICAgICAgICAgICAgdGl0bGU6IHNlYXJjaCxcbiAgICAgICAgICAgIGhyZWY6IGAvc2VhcmNoP3E9JHtlbmNvZGVVUklDb21wb25lbnQoc2VhcmNoKX1gLFxuICAgICAgICAgIH0pKVxuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIEFncmVnYW5kbyBiw7pzcXVlZGFzIHJlY2llbnRlczonLCByZWNlbnRTdWdnZXN0aW9ucylcbiAgICAgICAgICBkZWZhdWx0U3VnZ2VzdGlvbnMucHVzaCguLi5yZWNlbnRTdWdnZXN0aW9ucylcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFncmVnYXIgYsO6c3F1ZWRhcyB0cmVuZGluZyByZWFsZXNcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNob3dUcmVuZGluZ1NlYXJjaGVzICYmXG4gICAgICAgICAgdHJlbmRpbmdTZWFyY2hlcyAmJlxuICAgICAgICAgIEFycmF5LmlzQXJyYXkodHJlbmRpbmdTZWFyY2hlcykgJiZcbiAgICAgICAgICB0cmVuZGluZ1NlYXJjaGVzLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgdHJlbmRpbmdTdWdnZXN0aW9ucyA9IHRyZW5kaW5nU2VhcmNoZXMubWFwKHRyZW5kaW5nID0+ICh7XG4gICAgICAgICAgICBpZDogdHJlbmRpbmcuaWQsXG4gICAgICAgICAgICB0eXBlOiAndHJlbmRpbmcnIGFzIGNvbnN0LFxuICAgICAgICAgICAgdGl0bGU6IHRyZW5kaW5nLnF1ZXJ5LFxuICAgICAgICAgICAgaHJlZjogdHJlbmRpbmcuaHJlZixcbiAgICAgICAgICAgIGJhZGdlOiB0cmVuZGluZy5jb3VudCA/IGAke3RyZW5kaW5nLmNvdW50fWAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgfSkpXG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflI0gQWdyZWdhbmRvIGLDunNxdWVkYXMgdHJlbmRpbmc6JywgdHJlbmRpbmdTdWdnZXN0aW9ucylcbiAgICAgICAgICBkZWZhdWx0U3VnZ2VzdGlvbnMucHVzaCguLi50cmVuZGluZ1N1Z2dlc3Rpb25zLnNsaWNlKDAsIDQpKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmluYWxTdWdnZXN0aW9ucyA9IGRlZmF1bHRTdWdnZXN0aW9ucy5zbGljZSgwLCBtYXhTdWdnZXN0aW9ucylcbiAgICAgICAgY29uc29sZS5sb2coJ/CflI0gU3VnZXJlbmNpYXMgZmluYWxlcyBnZW5lcmFkYXM6JywgZmluYWxTdWdnZXN0aW9ucylcblxuICAgICAgICByZXR1cm4gZmluYWxTdWdnZXN0aW9uc1xuICAgICAgfSwgW1xuICAgICAgICBpc0NsaWVudCxcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHNlYXJjaFN1Z2dlc3Rpb25zLFxuICAgICAgICBzaG93UmVjZW50U2VhcmNoZXMsXG4gICAgICAgIHNob3dUcmVuZGluZ1NlYXJjaGVzLFxuICAgICAgICByZWNlbnRTZWFyY2hlcyxcbiAgICAgICAgdHJlbmRpbmdTZWFyY2hlcyxcbiAgICAgICAgZ2V0UmVjZW50U2VhcmNoZXMsXG4gICAgICAgIG1heFN1Z2dlc3Rpb25zLFxuICAgICAgXSlcblxuICAgICAgLy8gRGVidWdnaW5nIGRlbCBlc3RhZG8gZGVsIGhvb2tcbiAgICAgIGlmIChpc0NsaWVudCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb25zb2xlLmxvZygn8J+UjSBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkOiBIb29rIHN0YXRlOicsIHtcbiAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICBzdWdnZXN0aW9uczogc3VnZ2VzdGlvbnM/Lmxlbmd0aCB8fCAwLFxuICAgICAgICAgIHN1Z2dlc3Rpb25zRGV0YWlsZWQ6IHN1Z2dlc3Rpb25zPy5tYXAocyA9PiAoeyB0eXBlOiBzLnR5cGUsIHRpdGxlOiBzLnRpdGxlIH0pKSB8fCBbXSxcbiAgICAgICAgICBpc0xvYWRpbmcsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgcmVzdWx0czogcmVzdWx0cz8ubGVuZ3RoIHx8IDAsXG4gICAgICAgICAgdHJlbmRpbmdTZWFyY2hlczogdHJlbmRpbmdTZWFyY2hlcz8ubGVuZ3RoIHx8IDAsXG4gICAgICAgICAgcmVjZW50U2VhcmNoZXM6IHJlY2VudFNlYXJjaGVzPy5sZW5ndGggfHwgMCxcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgLy8gTWFuZWphciBlbnbDrW8gZGUgYsO6c3F1ZWRhXG4gICAgICBjb25zdCBoYW5kbGVTZWFyY2ggPSAocXVlcnk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoaXNDbGllbnQpIHtcbiAgICAgICAgICBleGVjdXRlU2VhcmNoKHF1ZXJ5KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE1hbmVqYXIgc2VsZWNjacOzbiBkZSBzdWdlcmVuY2lhXG4gICAgICBjb25zdCBoYW5kbGVTdWdnZXN0aW9uU2VsZWN0ID0gKHN1Z2dlc3Rpb246IFNlYXJjaFN1Z2dlc3Rpb24pID0+IHtcbiAgICAgICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICAgICAgc2VsZWN0U3VnZ2VzdGlvbihzdWdnZXN0aW9uKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE1hbmVqYXIgbGltcGllemFcbiAgICAgIGNvbnN0IGhhbmRsZUNsZWFyID0gKCkgPT4ge1xuICAgICAgICBpZiAoaXNDbGllbnQpIHtcbiAgICAgICAgICBjbGVhclNlYXJjaCgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFNlYXJjaEF1dG9jb21wbGV0ZVxuICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAvLyBFc3RhZG8gZGVsIGhvb2sgb3B0aW1pemFkb1xuICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICBzdWdnZXN0aW9ucz17c3VnZ2VzdGlvbnN9XG4gICAgICAgICAgaXNMb2FkaW5nPXtpc0xvYWRpbmd9XG4gICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgIHNob3dUcmVuZGluZ1NlYXJjaGVzPXtzaG93VHJlbmRpbmdTZWFyY2hlc31cbiAgICAgICAgICBzaG93UmVjZW50U2VhcmNoZXM9e3Nob3dSZWNlbnRTZWFyY2hlc31cbiAgICAgICAgICAvLyBDYWxsYmFja3MgaW50ZWdyYWRvc1xuICAgICAgICAgIG9uU2VhcmNoPXtoYW5kbGVTZWFyY2h9XG4gICAgICAgICAgb25TdWdnZXN0aW9uU2VsZWN0PXtoYW5kbGVTdWdnZXN0aW9uU2VsZWN0fVxuICAgICAgICAgIHNlYXJjaFdpdGhEZWJvdW5jZT17c2VhcmNoV2l0aERlYm91bmNlfVxuICAgICAgICAgIG9uQ2xlYXI9e2hhbmRsZUNsZWFyfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgIH1cbiAgKVxuKVxuXG5TZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkLmRpc3BsYXlOYW1lID0gJ1NlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQnXG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWRcbiJdLCJuYW1lcyI6WyJTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkIiwiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImRlYm91bmNlTXMiLCJtYXhTdWdnZXN0aW9ucyIsInNlYXJjaExpbWl0Iiwic2F2ZVJlY2VudFNlYXJjaGVzIiwic2hvd1RyZW5kaW5nU2VhcmNoZXMiLCJzaG93UmVjZW50U2VhcmNoZXMiLCJvblNlYXJjaEV4ZWN1dGVkIiwib25TdWdnZXN0aW9uU2VsZWN0ZWQiLCJvblNlYXJjaCIsIm9uU3VnZ2VzdGlvblNlbGVjdCIsInByb3BzIiwicmVmIiwiaXNDbGllbnQiLCJzZXRJc0NsaWVudCIsInVzZVN0YXRlIiwiaXNDb250ZXh0UmVhZHkiLCJzZXRJc0NvbnRleHRSZWFkeSIsInNlYXJjaEhvb2tSZXN1bHQiLCJ1c2VTZWFyY2hPcHRpbWl6ZWQiLCJxdWVyeSIsInJlc3VsdHMiLCJzdWdnZXN0aW9uIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwidHJlbmRpbmdIb29rUmVzdWx0IiwidXNlVHJlbmRpbmdTZWFyY2hlcyIsImxpbWl0IiwiZW5hYmxlZCIsInJlY2VudEhvb2tSZXN1bHQiLCJ1c2VSZWNlbnRTZWFyY2hlcyIsIm1heFNlYXJjaGVzIiwiU0VBUkNIX0NPTlNUQU5UUyIsIk1BWF9SRUNFTlRfU0VBUkNIRVMiLCJlbmFibGVQZXJzaXN0ZW5jZSIsImV4cGlyYXRpb25EYXlzIiwiUkVDRU5UX1NFQVJDSEVTX0VYUElSQVRJT05fREFZUyIsImRlZmF1bHRWYWx1ZXMiLCJzdWdnZXN0aW9ucyIsImlzTG9hZGluZyIsImVycm9yIiwic2VhcmNoV2l0aERlYm91bmNlIiwiZXhlY3V0ZVNlYXJjaCIsInNlbGVjdFN1Z2dlc3Rpb24iLCJjbGVhclNlYXJjaCIsInRyZW5kaW5nU2VhcmNoZXMiLCJyZWNlbnRTZWFyY2hlcyIsImdldFJlY2VudFNlYXJjaGVzIiwic2VhcmNoU3VnZ2VzdGlvbnMiLCJ1c2VNZW1vIiwiY29uc29sZSIsImxvZyIsInRyaW0iLCJoYXNRdWVyeSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImRlZmF1bHRTdWdnZXN0aW9ucyIsInJlY2VudFN1Z2dlc3Rpb25zIiwibWFwIiwic2VhcmNoIiwiaW5kZXgiLCJpZCIsInR5cGUiLCJ0aXRsZSIsImhyZWYiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwdXNoIiwidHJlbmRpbmdTdWdnZXN0aW9ucyIsInRyZW5kaW5nIiwiYmFkZ2UiLCJjb3VudCIsInVuZGVmaW5lZCIsInNsaWNlIiwiZmluYWxTdWdnZXN0aW9ucyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInN1Z2dlc3Rpb25zRGV0YWlsZWQiLCJzIiwiaGFuZGxlU2VhcmNoIiwiaGFuZGxlU3VnZ2VzdGlvblNlbGVjdCIsImhhbmRsZUNsZWFyIiwiU2VhcmNoQXV0b2NvbXBsZXRlIiwib25DbGVhciIsImRpc3BsYXlOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMsZ0ZBQWdGO0FBQ2hGLHNDQUFzQzs7Ozs7Ozs7Ozs7O1FBbUN6QkE7ZUFBQUE7O1FBME9iO2VBQUE7Ozs7K0RBM1F3RDtv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