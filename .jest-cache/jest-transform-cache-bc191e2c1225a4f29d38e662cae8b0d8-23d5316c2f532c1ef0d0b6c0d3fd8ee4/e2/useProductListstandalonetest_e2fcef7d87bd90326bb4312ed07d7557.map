{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\__tests__\\useProductList.standalone.test.ts"],"sourcesContent":["/**\n * Test independiente para useProductList sin dependencias de configuración global\n * Ejecutar con: npx jest src/hooks/admin/__tests__/useProductList.standalone.test.ts --no-cache --no-coverage\n */\n\n// Mock React hooks\nconst mockUseState = jest.fn()\nconst mockUseEffect = jest.fn()\n\njest.mock('react', () => ({\n  useState: mockUseState,\n  useEffect: mockUseEffect,\n}))\n\n// Mock fetch\nglobal.fetch = jest.fn()\n\ndescribe('useProductList Hook - Standalone Tests', () => {\n  let mockSetProducts: jest.Mock\n  let mockSetIsLoading: jest.Mock\n  let mockSetError: jest.Mock\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n\n    // Mock useState calls\n    mockSetProducts = jest.fn()\n    mockSetIsLoading = jest.fn()\n    mockSetError = jest.fn()\n\n    mockUseState\n      .mockReturnValueOnce([[], mockSetProducts]) // products state\n      .mockReturnValueOnce([true, mockSetIsLoading]) // isLoading state\n      .mockReturnValueOnce([null, mockSetError]) // error state\n\n    // Mock useEffect to immediately call the effect\n    mockUseEffect.mockImplementation(effect => {\n      effect()\n    })\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  it('should initialize with correct default state', async () => {\n    // Mock successful API response\n    ;(global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        success: true,\n        data: {\n          products: [],\n          total: 0,\n        },\n      }),\n    })\n\n    // Import and execute the hook\n    const { useProductList } = await import('../useProductList')\n    const result = useProductList()\n\n    // Verify initial state setup\n    expect(mockUseState).toHaveBeenCalledTimes(3)\n    expect(mockUseState).toHaveBeenNthCalledWith(1, []) // products\n    expect(mockUseState).toHaveBeenNthCalledWith(2, true) // isLoading\n    expect(mockUseState).toHaveBeenNthCalledWith(3, null) // error\n\n    // Verify return value structure\n    expect(result).toEqual({\n      products: [],\n      isLoading: true,\n      error: null,\n    })\n  })\n\n  it('should call fetch with correct URL', async () => {\n    ;(global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        success: true,\n        data: {\n          products: [],\n          total: 0,\n        },\n      }),\n    })\n\n    const { useProductList } = await import('../useProductList')\n    useProductList()\n\n    expect(global.fetch).toHaveBeenCalledWith('/api/admin/products-direct?limit=25')\n  })\n\n  it('should handle successful API response', async () => {\n    const mockProducts = [\n      {\n        id: 1,\n        name: 'Test Product',\n        description: 'Test Description',\n        price: 1000,\n        stock: 50,\n        category_id: 1,\n        images: { main: '/test.jpg', gallery: [], previews: [], thumbnails: [] },\n        created_at: '2025-01-01T00:00:00Z',\n        updated_at: '2025-01-01T00:00:00Z',\n        category_name: 'Test Category',\n      },\n    ]\n\n    ;(global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        success: true,\n        data: {\n          products: mockProducts,\n          total: 1,\n        },\n      }),\n    })\n\n    const { useProductList } = await import('../useProductList')\n    useProductList()\n\n    // Wait for async operations\n    await new Promise(resolve => setTimeout(resolve, 0))\n\n    expect(mockSetIsLoading).toHaveBeenCalledWith(true)\n    expect(mockSetError).toHaveBeenCalledWith(null)\n    expect(mockSetProducts).toHaveBeenCalledWith(mockProducts)\n    expect(mockSetIsLoading).toHaveBeenCalledWith(false)\n  })\n\n  it('should handle API errors', async () => {\n    ;(global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: false,\n      status: 500,\n      statusText: 'Internal Server Error',\n    })\n\n    const { useProductList } = await import('../useProductList')\n    useProductList()\n\n    // Wait for async operations\n    await new Promise(resolve => setTimeout(resolve, 0))\n\n    expect(mockSetError).toHaveBeenCalledWith('Error 500: Internal Server Error')\n    expect(mockSetProducts).toHaveBeenCalledWith([])\n    expect(mockSetIsLoading).toHaveBeenCalledWith(false)\n  })\n\n  it('should handle network errors', async () => {\n    ;(global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'))\n\n    const { useProductList } = await import('../useProductList')\n    useProductList()\n\n    // Wait for async operations\n    await new Promise(resolve => setTimeout(resolve, 0))\n\n    expect(mockSetError).toHaveBeenCalledWith('Network error')\n    expect(mockSetProducts).toHaveBeenCalledWith([])\n    expect(mockSetIsLoading).toHaveBeenCalledWith(false)\n  })\n\n  it('should handle invalid response structure', async () => {\n    ;(global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        success: false,\n        error: 'Invalid request',\n      }),\n    })\n\n    const { useProductList } = await import('../useProductList')\n    useProductList()\n\n    // Wait for async operations\n    await new Promise(resolve => setTimeout(resolve, 0))\n\n    expect(mockSetError).toHaveBeenCalledWith('Estructura de respuesta inválida')\n    expect(mockSetProducts).toHaveBeenCalledWith([])\n    expect(mockSetIsLoading).toHaveBeenCalledWith(false)\n  })\n\n  it('should export correct TypeScript types', async () => {\n    const module = await import('../useProductList')\n\n    expect(typeof module.useProductList).toBe('function')\n    expect(module.Product).toBeDefined\n    expect(module.ProductListResponse).toBeDefined\n  })\n\n  it('should follow React Hooks best practices', async () => {\n    const { useProductList } = await import('../useProductList')\n\n    // Hook should be a function\n    expect(typeof useProductList).toBe('function')\n\n    // Hook name should start with 'use'\n    expect(useProductList.name).toBe('useProductList')\n\n    // Hook follows React best practices\n    expect(useProductList.name).toMatch(/^use/)\n  })\n})\n"],"names":["jest","mock","useState","mockUseState","useEffect","mockUseEffect","fn","global","fetch","describe","mockSetProducts","mockSetIsLoading","mockSetError","beforeEach","clearAllMocks","mockReturnValueOnce","mockImplementation","effect","afterEach","restoreAllMocks","it","mockResolvedValueOnce","ok","json","success","data","products","total","useProductList","result","expect","toHaveBeenCalledTimes","toHaveBeenNthCalledWith","toEqual","isLoading","error","toHaveBeenCalledWith","mockProducts","id","name","description","price","stock","category_id","images","main","gallery","previews","thumbnails","created_at","updated_at","category_name","Promise","resolve","setTimeout","status","statusText","mockRejectedValueOnce","Error","module","toBe","Product","toBeDefined","ProductListResponse","toMatch"],"mappings":"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"}