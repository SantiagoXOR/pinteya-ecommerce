{"version":3,"names":["cov_1wii5bpas7","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","ARIA_LABELS","DEFAULT_CATEGORIES_CONFIG","KEYBOARD_KEYS","defaultVariant","defaultSize","maxCategories","enableAnalytics","enableKeyboardNavigation","animationDuration","urlUpdateDelay","ENTER","SPACE","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","TAB","ESCAPE","CATEGORY_FILTER","CATEGORY_SELECTED","CATEGORY_NOT_SELECTED","CLEAR_FILTERS","FILTER_GROUP"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\types\\categories.ts"],"sourcesContent":["/**\r\n * Types and interfaces for Categories Filter System\r\n * Pinteya E-commerce - Enterprise-ready TypeScript definitions\r\n */\r\n\r\n// ===================================\r\n// CORE CATEGORY TYPES\r\n// ===================================\r\n\r\n/**\r\n * Base category interface\r\n */\r\nexport interface Category {\r\n  /** Unique identifier for the category */\r\n  id: string;\r\n  /** Display name of the category */\r\n  name: string;\r\n  /** Icon path or URL for the category */\r\n  icon: string;\r\n  /** URL-friendly slug for the category */\r\n  slug?: string;\r\n  /** Number of products in this category */\r\n  count?: number;\r\n  /** Category description for accessibility */\r\n  description?: string;\r\n  /** Whether the category is currently available */\r\n  isAvailable?: boolean;\r\n}\r\n\r\n/**\r\n * Extended category with metadata\r\n */\r\nexport interface CategoryWithMetadata extends Category {\r\n  /** Last updated timestamp */\r\n  updatedAt?: Date;\r\n  /** Category priority for sorting */\r\n  priority?: number;\r\n  /** Parent category ID for nested categories */\r\n  parentId?: string;\r\n  /** Child categories */\r\n  children?: Category[];\r\n}\r\n\r\n// ===================================\r\n// COMPONENT PROPS INTERFACES\r\n// ===================================\r\n\r\n/**\r\n * Props for the main Categories component\r\n */\r\nexport interface CategoriesProps {\r\n  /** Array of categories to display */\r\n  categories?: Category[];\r\n  /** Currently selected category IDs */\r\n  selectedCategories?: string[];\r\n  /** Callback when category selection changes */\r\n  onCategoryChange?: (event: CategoryChangeEvent) => void;\r\n  /** Visual variant of the component */\r\n  variant?: 'default' | 'compact' | 'minimal';\r\n  /** Size of the category pills */\r\n  size?: 'sm' | 'md' | 'lg';\r\n  /** Maximum number of categories to display */\r\n  maxCategories?: number;\r\n  /** Whether to show category counts */\r\n  showCounts?: boolean;\r\n  /** Whether the component is disabled */\r\n  disabled?: boolean;\r\n  /** Loading state */\r\n  loading?: boolean;\r\n  /** Error state */\r\n  error?: string | null;\r\n  /** Custom CSS classes */\r\n  className?: string;\r\n  /** Test ID for testing */\r\n  testId?: string;\r\n}\r\n\r\n/**\r\n * Props for individual CategoryPill component\r\n */\r\nexport interface CategoryPillProps {\r\n  /** Category data */\r\n  category: Category;\r\n  /** Whether this category is selected */\r\n  isSelected: boolean;\r\n  /** Click handler */\r\n  onClick: (categoryId: string) => void;\r\n  /** Key handler for accessibility */\r\n  onKeyDown?: (event: React.KeyboardEvent, categoryId: string) => void;\r\n  /** Size variant */\r\n  size?: 'sm' | 'md' | 'lg';\r\n  /** Whether the pill is disabled */\r\n  disabled?: boolean;\r\n  /** Custom CSS classes */\r\n  className?: string;\r\n  /** Test ID for testing */\r\n  testId?: string;\r\n}\r\n\r\n// ===================================\r\n// HOOK INTERFACES\r\n// ===================================\r\n\r\n/**\r\n * Return type for useCategoryFilter hook\r\n */\r\nexport interface UseCategoryFilterReturn {\r\n  /** Currently selected categories */\r\n  selectedCategories: string[];\r\n  /** Toggle a category selection */\r\n  toggleCategory: (categoryId: string) => void;\r\n  /** Clear all selections */\r\n  clearAll: () => void;\r\n  /** Select all categories */\r\n  selectAll: (categoryIds: string[]) => void;\r\n  /** Check if a category is selected */\r\n  isSelected: (categoryId: string) => boolean;\r\n  /** Get count of selected categories */\r\n  selectedCount: number;\r\n}\r\n\r\n/**\r\n * Return type for useCategoryNavigation hook\r\n */\r\nexport interface UseCategoryNavigationReturn {\r\n  /** Navigate to filtered view */\r\n  navigateToFiltered: (categories: string[]) => void;\r\n  /** Navigate to home (clear filters) */\r\n  navigateToHome: () => void;\r\n  /** Get current URL with categories */\r\n  getCurrentUrl: () => string;\r\n  /** Check if navigation is in progress */\r\n  isNavigating: boolean;\r\n}\r\n\r\n/**\r\n * Return type for useCategoryData hook\r\n */\r\nexport interface UseCategoryDataReturn {\r\n  /** Categories data */\r\n  categories: Category[];\r\n  /** Loading state */\r\n  loading: boolean;\r\n  /** Error state */\r\n  error: string | null;\r\n  /** Refresh categories */\r\n  refresh: () => Promise<void>;\r\n  /** Get category by ID */\r\n  getCategoryById: (id: string) => Category | undefined;\r\n}\r\n\r\n// ===================================\r\n// EVENT INTERFACES\r\n// ===================================\r\n\r\n/**\r\n * Category change event data\r\n */\r\nexport interface CategoryChangeEvent {\r\n  /** Type of change */\r\n  type: 'select' | 'deselect' | 'clear' | 'selectAll';\r\n  /** Category ID that changed */\r\n  categoryId?: string;\r\n  /** All selected categories after change */\r\n  selectedCategories: string[];\r\n  /** Previous selected categories */\r\n  previousCategories: string[];\r\n  /** Timestamp of the event */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Category interaction event for analytics\r\n */\r\nexport interface CategoryInteractionEvent {\r\n  /** Type of interaction */\r\n  action: 'click' | 'keydown' | 'focus' | 'blur';\r\n  /** Category that was interacted with */\r\n  categoryId: string;\r\n  /** Method of interaction */\r\n  method: 'mouse' | 'keyboard' | 'touch';\r\n  /** Additional metadata */\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURATION INTERFACES\r\n// ===================================\r\n\r\n/**\r\n * Configuration for Categories component\r\n */\r\nexport interface CategoriesConfig {\r\n  /** Default variant */\r\n  defaultVariant: CategoriesProps['variant'];\r\n  /** Default size */\r\n  defaultSize: CategoriesProps['size'];\r\n  /** Maximum categories to show */\r\n  maxCategories: number;\r\n  /** Whether to enable analytics */\r\n  enableAnalytics: boolean;\r\n  /** Whether to enable keyboard navigation */\r\n  enableKeyboardNavigation: boolean;\r\n  /** Animation duration in ms */\r\n  animationDuration: number;\r\n  /** Debounce delay for URL updates */\r\n  urlUpdateDelay: number;\r\n}\r\n\r\n// ===================================\r\n// UTILITY TYPES\r\n// ===================================\r\n\r\n/**\r\n * Category ID type for type safety\r\n */\r\nexport type CategoryId = string;\r\n\r\n/**\r\n * Category selection state\r\n */\r\nexport type CategorySelectionState = Record<CategoryId, boolean>;\r\n\r\n/**\r\n * Category filter state for URL\r\n */\r\nexport type CategoryFilterState = {\r\n  categories: CategoryId[];\r\n  timestamp: number;\r\n};\r\n\r\n// ===================================\r\n// CONSTANTS\r\n// ===================================\r\n\r\n/**\r\n * Default categories configuration\r\n */\r\nexport const DEFAULT_CATEGORIES_CONFIG: CategoriesConfig = {\r\n  defaultVariant: 'default',\r\n  defaultSize: 'md',\r\n  maxCategories: 20,\r\n  enableAnalytics: true,\r\n  enableKeyboardNavigation: true,\r\n  animationDuration: 200,\r\n  urlUpdateDelay: 300,\r\n};\r\n\r\n/**\r\n * Keyboard navigation keys\r\n */\r\nexport const KEYBOARD_KEYS = {\r\n  ENTER: 'Enter',\r\n  SPACE: ' ',\r\n  ARROW_LEFT: 'ArrowLeft',\r\n  ARROW_RIGHT: 'ArrowRight',\r\n  ARROW_UP: 'ArrowUp',\r\n  ARROW_DOWN: 'ArrowDown',\r\n  TAB: 'Tab',\r\n  ESCAPE: 'Escape',\r\n} as const;\r\n\r\n/**\r\n * ARIA labels and descriptions\r\n */\r\nexport const ARIA_LABELS = {\r\n  CATEGORY_FILTER: 'Filtrar por categoría',\r\n  CATEGORY_SELECTED: 'Categoría seleccionada',\r\n  CATEGORY_NOT_SELECTED: 'Categoría no seleccionada',\r\n  CLEAR_FILTERS: 'Limpiar todos los filtros',\r\n  FILTER_GROUP: 'Grupo de filtros de categorías',\r\n} as const;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}