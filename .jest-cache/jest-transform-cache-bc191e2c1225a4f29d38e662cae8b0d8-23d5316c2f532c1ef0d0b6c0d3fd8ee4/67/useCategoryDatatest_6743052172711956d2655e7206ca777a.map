{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useCategoryData.test.ts"],"sourcesContent":["/**\r\n * useCategoryData Hook Tests\r\n * Enterprise-ready test suite for category data management\r\n * Pinteya E-commerce\r\n */\r\n\r\nimport { renderHook, act, waitFor } from '@testing-library/react';\r\nimport { useCategoryData, clearCategoryCache } from '@/hooks/useCategoryData';\r\nimport type { Category } from '@/types/categories';\r\n\r\n// Mock fetch\r\nglobal.fetch = jest.fn();\r\n\r\n// Mock analytics\r\nconst mockGtag = jest.fn();\r\nObject.defineProperty(window, 'gtag', {\r\n  value: mockGtag,\r\n  writable: true,\r\n});\r\n\r\n// Test data\r\nconst mockCategories: Category[] = [\r\n  {\r\n    id: 'test-1',\r\n    name: 'Test Category 1',\r\n    icon: '/test-1.png',\r\n    description: 'Test description 1',\r\n    isAvailable: true,\r\n  },\r\n  {\r\n    id: 'test-2',\r\n    name: 'Test Category 2',\r\n    icon: '/test-2.png',\r\n    description: 'Test description 2',\r\n    isAvailable: true,\r\n  },\r\n];\r\n\r\n// Helper function to create flexible category expectations\r\nconst expectCategoriesToMatch = (categories: Category[]) =>\r\n  expect.arrayContaining(\r\n    categories.map(cat =>\r\n      expect.objectContaining({\r\n        id: cat.id,\r\n        name: cat.name,\r\n        icon: cat.icon,\r\n        description: cat.description,\r\n        isAvailable: cat.isAvailable\r\n      })\r\n    )\r\n  );\r\n\r\ndescribe('useCategoryData Hook', () => {\r\n  const mockFetch = fetch as jest.MockedFunction<typeof fetch>;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    clearCategoryCache();\r\n    mockGtag.mockClear();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllTimers();\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('initializes with fallback categories when autoFetch is false', () => {\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ \r\n          autoFetch: false,\r\n          fallbackCategories: mockCategories \r\n        })\r\n      );\r\n\r\n      expect(result.current.categories).toEqual(expectCategoriesToMatch(mockCategories));\r\n      expect(result.current.loading).toBe(false);\r\n      expect(result.current.error).toBe(null);\r\n    });\r\n\r\n    it('starts loading when autoFetch is true', () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: true })\r\n      );\r\n\r\n      expect(result.current.loading).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Data Fetching', () => {\r\n    it('fetches categories successfully', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: true })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result.current.categories).toEqual(\r\n        expect.arrayContaining([\r\n          expect.objectContaining({\r\n            id: 'test-1',\r\n            name: 'Test Category 1',\r\n            icon: '/test-1.png',\r\n            description: 'Test description 1',\r\n            isAvailable: true\r\n          }),\r\n          expect.objectContaining({\r\n            id: 'test-2',\r\n            name: 'Test Category 2',\r\n            icon: '/test-2.png',\r\n            description: 'Test description 2',\r\n            isAvailable: true\r\n          })\r\n        ])\r\n      );\r\n      expect(result.current.error).toBe(null);\r\n      expect(mockFetch).toHaveBeenCalledWith('/api/categories');\r\n    });\r\n\r\n    it('handles different API response formats', async () => {\r\n      // Test with data wrapper\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => ({ data: mockCategories }),\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: true })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result.current.categories).toEqual(\r\n        expect.arrayContaining([\r\n          expect.objectContaining({\r\n            id: 'test-1',\r\n            name: 'Test Category 1',\r\n            icon: '/test-1.png',\r\n            description: 'Test description 1',\r\n            isAvailable: true\r\n          }),\r\n          expect.objectContaining({\r\n            id: 'test-2',\r\n            name: 'Test Category 2',\r\n            icon: '/test-2.png',\r\n            description: 'Test description 2',\r\n            isAvailable: true\r\n          })\r\n        ])\r\n      );\r\n    });\r\n\r\n    it('handles categories wrapper format', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => ({ categories: mockCategories }),\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: true })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result.current.categories).toEqual(\r\n        expect.arrayContaining([\r\n          expect.objectContaining({\r\n            id: 'test-1',\r\n            name: 'Test Category 1',\r\n            icon: '/test-1.png',\r\n            description: 'Test description 1',\r\n            isAvailable: true\r\n          }),\r\n          expect.objectContaining({\r\n            id: 'test-2',\r\n            name: 'Test Category 2',\r\n            icon: '/test-2.png',\r\n            description: 'Test description 2',\r\n            isAvailable: true\r\n          })\r\n        ])\r\n      );\r\n    });\r\n\r\n    it('handles fetch errors gracefully', async () => {\r\n      const errorMessage = 'Network error';\r\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\r\n\r\n      const fallbackCategories = [mockCategories[0]];\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ \r\n          autoFetch: true,\r\n          fallbackCategories \r\n        })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result.current.error).toContain(errorMessage);\r\n      expect(result.current.categories).toEqual(fallbackCategories);\r\n    });\r\n\r\n    it('handles HTTP errors', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        status: 404,\r\n        statusText: 'Not Found',\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: true })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result.current.error).toContain('HTTP 404');\r\n    });\r\n\r\n    it('validates and filters invalid categories', async () => {\r\n      const invalidData = [\r\n        mockCategories[0],\r\n        { id: 'invalid' }, // Missing name\r\n        null,\r\n        { name: 'No ID' }, // Missing id\r\n        mockCategories[1],\r\n      ];\r\n\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => invalidData,\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: true })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result.current.categories).toEqual(expectCategoriesToMatch(mockCategories));\r\n    });\r\n\r\n    it('respects maxCategories limit', async () => {\r\n      const manyCategories = Array.from({ length: 10 }, (_, i) => ({\r\n        id: `cat-${i}`,\r\n        name: `Category ${i}`,\r\n        icon: `/cat-${i}.png`,\r\n      }));\r\n\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => manyCategories,\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ \r\n          autoFetch: true,\r\n          maxCategories: 5 \r\n        })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result.current.categories).toHaveLength(5);\r\n    });\r\n  });\r\n\r\n  describe('Caching', () => {\r\n    it('uses cached data when available', async () => {\r\n      // First call\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      const { result: result1 } = renderHook(() =>\r\n        useCategoryData({\r\n          autoFetch: true,\r\n          fallbackCategories: mockCategories\r\n        })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result1.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(result1.current.categories).toEqual(expectCategoriesToMatch(mockCategories));\r\n      // Cache functionality is tested at the manager level\r\n      expect(mockFetch).toHaveBeenCalledWith('/api/categories');\r\n    });\r\n\r\n    it('respects cache duration', async () => {\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      // First call\r\n      const { result } = renderHook(() =>\r\n        useCategoryData({\r\n          autoFetch: true,\r\n          cacheDuration: 1000, // 1 second\r\n          fallbackCategories: mockCategories\r\n        })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      // Wait for cache to expire (simulate time passing)\r\n      await new Promise(resolve => setTimeout(resolve, 1100));\r\n\r\n      // Refresh should fetch again\r\n      await act(async () => {\r\n        await result.current.refresh();\r\n      });\r\n\r\n      expect(mockFetch).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('Manual Refresh', () => {\r\n    it('refreshes data manually', async () => {\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: false })\r\n      );\r\n\r\n      await act(async () => {\r\n        await result.current.refresh();\r\n      });\r\n\r\n      expect(result.current.categories).toEqual(expectCategoriesToMatch(mockCategories));\r\n      expect(mockFetch).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('handles refresh errors', async () => {\r\n      mockFetch.mockRejectedValueOnce(new Error('Refresh failed'));\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: false })\r\n      );\r\n\r\n      await act(async () => {\r\n        await result.current.refresh();\r\n      });\r\n\r\n      expect(result.current.error).toContain('Refresh failed');\r\n    });\r\n  });\r\n\r\n  describe('Utility Functions', () => {\r\n    it('finds category by ID', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() => \r\n        useCategoryData({ autoFetch: true })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      const category = result.current.getCategoryById('test-1');\r\n      expect(category).toEqual(expect.objectContaining({\r\n        id: 'test-1',\r\n        name: 'Test Category 1',\r\n        icon: '/test-1.png',\r\n        description: 'Test description 1',\r\n        isAvailable: true\r\n      }));\r\n\r\n      const notFound = result.current.getCategoryById('not-found');\r\n      expect(notFound).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('Analytics', () => {\r\n    it('tracks successful fetch', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      renderHook(() => \r\n        useCategoryData({ \r\n          autoFetch: true,\r\n          enableAnalytics: true \r\n        })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(mockGtag).toHaveBeenCalledWith(\r\n          'event',\r\n          'category_data',\r\n          expect.objectContaining({\r\n            event_category: 'data',\r\n            event_label: 'fetch_success',\r\n          })\r\n        );\r\n      });\r\n    });\r\n\r\n    it('tracks fetch errors', async () => {\r\n      mockFetch.mockRejectedValueOnce(new Error('Test error'));\r\n\r\n      renderHook(() => \r\n        useCategoryData({ \r\n          autoFetch: true,\r\n          enableAnalytics: true \r\n        })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(mockGtag).toHaveBeenCalledWith(\r\n          'event',\r\n          'category_data',\r\n          expect.objectContaining({\r\n            event_category: 'data',\r\n            event_label: 'fetch_error',\r\n          })\r\n        );\r\n      });\r\n    });\r\n\r\n    it('does not track when analytics disabled', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockCategories,\r\n      } as Response);\r\n\r\n      const { result } = renderHook(() =>\r\n        useCategoryData({\r\n          autoFetch: true,\r\n          enableAnalytics: false,\r\n          fallbackCategories: mockCategories\r\n        })\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      expect(mockGtag).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Background Refresh', () => {\r\n    it('sets up background refresh interval', () => {\r\n      jest.useFakeTimers();\r\n      const setIntervalSpy = jest.spyOn(global, 'setInterval');\r\n\r\n      renderHook(() => \r\n        useCategoryData({ \r\n          autoFetch: false,\r\n          enableBackgroundRefresh: true,\r\n          refreshInterval: 5000 \r\n        })\r\n      );\r\n\r\n      expect(setIntervalSpy).toHaveBeenCalledWith(\r\n        expect.any(Function),\r\n        5000\r\n      );\r\n\r\n      jest.useRealTimers();\r\n    });\r\n\r\n    it('cleans up interval on unmount', () => {\r\n      jest.useFakeTimers();\r\n      const clearIntervalSpy = jest.spyOn(global, 'clearInterval');\r\n\r\n      const { unmount } = renderHook(() => \r\n        useCategoryData({ \r\n          enableBackgroundRefresh: true,\r\n          refreshInterval: 5000 \r\n        })\r\n      );\r\n\r\n      unmount();\r\n\r\n      expect(clearIntervalSpy).toHaveBeenCalled();\r\n\r\n      jest.useRealTimers();\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["global","fetch","jest","fn","mockGtag","Object","defineProperty","window","value","writable","mockCategories","id","name","icon","description","isAvailable","expectCategoriesToMatch","categories","expect","arrayContaining","map","cat","objectContaining","describe","mockFetch","beforeEach","clearAllMocks","clearCategoryCache","mockClear","afterEach","clearAllTimers","it","result","renderHook","useCategoryData","autoFetch","fallbackCategories","current","toEqual","loading","toBe","error","mockResolvedValueOnce","ok","json","waitFor","toHaveBeenCalledWith","data","errorMessage","mockRejectedValueOnce","Error","toContain","status","statusText","invalidData","manyCategories","Array","from","length","_","i","maxCategories","toHaveLength","result1","mockResolvedValue","cacheDuration","Promise","resolve","setTimeout","act","refresh","toHaveBeenCalledTimes","category","getCategoryById","notFound","toBeUndefined","enableAnalytics","event_category","event_label","not","toHaveBeenCalled","useFakeTimers","setIntervalSpy","spyOn","enableBackgroundRefresh","refreshInterval","any","Function","useRealTimers","clearIntervalSpy","unmount"],"mappings":"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"}