6e99c0c45741bd4244b98ace85b16278
/**
 * Header Integration Test Ultra-Simplificado
 * Sin dependencias externas - Solo integración básica
 */ "use strict";
// Mock completo para evitar dependencias
jest.mock('../index', ()=>{
    return function MockHeaderIntegration() {
        const [searchValue, setSearchValue] = _react.default.useState('');
        const [searchResults, setSearchResults] = _react.default.useState([]);
        const [isLoading, setIsLoading] = _react.default.useState(false);
        const [cartItems, setCartItems] = _react.default.useState(0);
        const handleSearch = async (value)=>{
            if (!value.trim()) {
                setSearchResults([]);
                return;
            }
            setIsLoading(true);
            // Simular búsqueda
            setTimeout(()=>{
                const mockResults = [
                    `Resultado 1 para "${value}"`,
                    `Resultado 2 para "${value}"`,
                    `Resultado 3 para "${value}"`
                ];
                setSearchResults(mockResults);
                setIsLoading(false);
            }, 100);
        };
        const addToCart = ()=>{
            setCartItems((prev)=>prev + 1);
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("header", {
            role: "banner",
            "data-testid": "header-integration",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "logo-section",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                        alt: "Pinteya",
                        src: "/logo.svg"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "search-integration",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            role: "searchbox",
                            "aria-label": "Buscar productos",
                            value: searchValue,
                            onChange: (e)=>{
                                setSearchValue(e.target.value);
                                handleSearch(e.target.value);
                            },
                            placeholder: "Buscar productos..."
                        }),
                        isLoading && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "search-loading",
                            children: "Buscando..."
                        }),
                        searchResults.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "search-results",
                            children: searchResults.map((result, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    "data-testid": `search-result-${index}`,
                                    children: [
                                        result,
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                            onClick: addToCart,
                                            children: "Agregar al carrito"
                                        })
                                    ]
                                }, index))
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "cart-integration",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                        "data-testid": "cart-button",
                        children: [
                            "Carrito (",
                            cartItems,
                            ")"
                        ]
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "auth-integration",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        children: "Iniciar Sesi\xf3n"
                    })
                })
            ]
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _index = /*#__PURE__*/ _interop_require_default(require("../index"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Header Integration - Ultra-Simplified Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Integración Básica', ()=>{
        it('debe renderizar todos los componentes integrados', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByTestId('header-integration')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('logo-section')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('search-integration')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('cart-integration')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('auth-integration')).toBeInTheDocument();
        });
        it('debe tener estructura semántica integrada', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const header = _react1.screen.getByRole('banner');
            const searchInput = _react1.screen.getByRole('searchbox');
            const buttons = _react1.screen.getAllByRole('button');
            expect(header).toBeInTheDocument();
            expect(searchInput).toBeInTheDocument();
            expect(buttons.length).toBeGreaterThanOrEqual(2);
        });
    });
    describe('Integración Búsqueda-Carrito', ()=>{
        it('debe buscar productos y permitir agregar al carrito', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Buscar productos
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'pintura'
                }
            });
            // Verificar loading
            expect(_react1.screen.getByTestId('search-loading')).toBeInTheDocument();
            // Esperar resultados
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Verificar resultados
            expect(_react1.screen.getByTestId('search-result-0')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('search-result-1')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('search-result-2')).toBeInTheDocument();
            // Verificar carrito inicial
            const cartButton = _react1.screen.getByTestId('cart-button');
            expect(cartButton).toHaveTextContent('Carrito (0)');
            // Agregar producto al carrito
            const addButtons = _react1.screen.getAllByText('Agregar al carrito');
            _react1.fireEvent.click(addButtons[0]);
            // Verificar carrito actualizado
            expect(cartButton).toHaveTextContent('Carrito (1)');
        });
        it('debe manejar búsqueda vacía', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Buscar algo primero
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'test'
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Limpiar búsqueda
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: ''
                }
            });
            // Resultados deben desaparecer
            expect(_react1.screen.queryByTestId('search-results')).not.toBeInTheDocument();
            expect(_react1.screen.queryByTestId('search-loading')).not.toBeInTheDocument();
        });
        it('debe agregar múltiples productos al carrito', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            const cartButton = _react1.screen.getByTestId('cart-button');
            // Buscar productos
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'latex'
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Agregar múltiples productos
            const addButtons = _react1.screen.getAllByText('Agregar al carrito');
            _react1.fireEvent.click(addButtons[0]);
            _react1.fireEvent.click(addButtons[1]);
            _react1.fireEvent.click(addButtons[2]);
            // Verificar contador del carrito
            expect(cartButton).toHaveTextContent('Carrito (3)');
        });
    });
    describe('Flujo de Usuario Completo', ()=>{
        it('debe manejar flujo completo: buscar → agregar → verificar carrito', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            const cartButton = _react1.screen.getByTestId('cart-button');
            // 1. Estado inicial
            expect(cartButton).toHaveTextContent('Carrito (0)');
            // 2. Buscar productos
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'rodillo'
                }
            });
            // 3. Esperar resultados
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // 4. Verificar resultados contienen el término buscado
            const results = _react1.screen.getAllByTestId(/search-result-/);
            results.forEach((result)=>{
                expect(result).toHaveTextContent('rodillo');
            });
            // 5. Agregar producto al carrito
            const addButton = _react1.screen.getAllByText('Agregar al carrito')[0];
            _react1.fireEvent.click(addButton);
            // 6. Verificar carrito actualizado
            expect(cartButton).toHaveTextContent('Carrito (1)');
            // 7. Buscar otro producto
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'pincel'
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // 8. Agregar otro producto
            const newAddButton = _react1.screen.getAllByText('Agregar al carrito')[0];
            _react1.fireEvent.click(newAddButton);
            // 9. Verificar carrito final
            expect(cartButton).toHaveTextContent('Carrito (2)');
        });
        it('debe mantener estado del carrito durante navegación', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            const cartButton = _react1.screen.getByTestId('cart-button');
            // Agregar productos
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'test'
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            const addButton = _react1.screen.getAllByText('Agregar al carrito')[0];
            _react1.fireEvent.click(addButton);
            expect(cartButton).toHaveTextContent('Carrito (1)');
            // Cambiar búsqueda - carrito debe mantener estado
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'otro producto'
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Carrito debe mantener el producto anterior
            expect(cartButton).toHaveTextContent('Carrito (1)');
        });
    });
    describe('Estados de Carga', ()=>{
        it('debe mostrar estado de carga durante búsqueda', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Iniciar búsqueda
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'cargando'
                }
            });
            // Verificar estado de carga
            expect(_react1.screen.getByTestId('search-loading')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('search-loading')).toHaveTextContent('Buscando...');
        });
        it('debe ocultar estado de carga cuando termina búsqueda', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'terminado'
                }
            });
            // Loading debe estar presente inicialmente
            expect(_react1.screen.getByTestId('search-loading')).toBeInTheDocument();
            // Esperar a que termine la búsqueda
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Loading debe desaparecer
            expect(_react1.screen.queryByTestId('search-loading')).not.toBeInTheDocument();
        });
    });
    describe('Accesibilidad Integrada', ()=>{
        it('debe mantener accesibilidad en flujo completo', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Verificar aria-label
            expect(searchInput).toHaveAttribute('aria-label', 'Buscar productos');
            // Verificar navegación por teclado
            searchInput.focus();
            expect(document.activeElement).toBe(searchInput);
            // Buscar y verificar resultados accesibles
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'accesible'
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Verificar botones son accesibles
            const addButtons = _react1.screen.getAllByText('Agregar al carrito');
            addButtons.forEach((button)=>{
                expect(button).toBeInTheDocument();
                button.focus();
                expect(document.activeElement).toBe(button);
            });
        });
    });
    describe('Performance Integrada', ()=>{
        it('debe manejar múltiples interacciones sin degradación', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Múltiples búsquedas rápidas
            for(let i = 0; i < 5; i++){
                _react1.fireEvent.change(searchInput, {
                    target: {
                        value: `búsqueda ${i}`
                    }
                });
            }
            // Esperar última búsqueda
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Verificar que funciona correctamente (el resultado contiene el último término)
            expect(_react1.screen.getByTestId('search-result-0')).toHaveTextContent('búsqueda');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,