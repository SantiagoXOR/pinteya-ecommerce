{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\enterprise-rls-utils.test.ts"],"sourcesContent":["/**\n * Tests para las Utilidades RLS Enterprise\n * Verifica que Row Level Security funciona correctamente con las utilidades enterprise\n */\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n        })),\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(),\n        })),\n      })),\n    })),\n  },\n}))\n\n// Mock de createClient de Supabase\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => ({\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n        })),\n      })),\n    })),\n  })),\n}))\n\nimport {\n  validateRLSContext,\n  createUserSupabaseClient,\n  executeWithRLS,\n  checkRLSPermission,\n  createRLSFilters,\n  withRLS,\n} from '@/lib/auth/enterprise-rls-utils'\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils'\nimport { supabaseAdmin } from '@/lib/integrations/supabase'\nimport { createClient } from '@supabase/supabase-js'\n\ndescribe('Utilidades RLS Enterprise', () => {\n  let mockEnterpriseContext: EnterpriseAuthContext\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n\n    // Mock enterprise context\n    mockEnterpriseContext = {\n      userId: 'user_123',\n      sessionId: 'sess_123',\n      email: 'admin@test.com',\n      role: 'admin',\n      permissions: ['admin_access', 'products_create', 'products_read'],\n      sessionValid: true,\n      securityLevel: 'critical',\n      ipAddress: '127.0.0.1',\n      userAgent: 'test-agent',\n      supabase: supabaseAdmin,\n      validations: {\n        jwtValid: true,\n        csrfValid: true,\n        rateLimitPassed: true,\n        originValid: true,\n      },\n    }\n\n    // Mock Supabase admin response\n    ;(supabaseAdmin.from as jest.Mock).mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({\n            data: {\n              id: 'profile_123',\n              supabase_user_id: 'supabase_123',\n              clerk_user_id: 'user_123',\n              role_id: 1,\n              permissions: ['admin_access', 'products_create'],\n              is_active: true,\n              user_roles: { role_name: 'admin' },\n            },\n            error: null,\n          }),\n        }),\n      }),\n    })\n  })\n\n  describe('validateRLSContext', () => {\n    it('debe validar contexto RLS para usuario admin', async () => {\n      const result = await validateRLSContext(mockEnterpriseContext)\n\n      expect(result.valid).toBe(true)\n      expect(result.context).toBeDefined()\n      expect(result.context?.userId).toBe('user_123')\n      expect(result.context?.role).toBe('admin')\n      expect(result.context?.permissions).toContain('admin_access')\n      expect(result.context?.isActive).toBe(true)\n    })\n\n    it('debe fallar si usuario está inactivo', async () => {\n      ;(supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'profile_123',\n                is_active: false,\n                user_roles: { role_name: 'user' },\n              },\n              error: null,\n            }),\n          }),\n        }),\n      })\n\n      const result = await validateRLSContext(mockEnterpriseContext)\n\n      expect(result.valid).toBe(false)\n      expect(result.error).toBe('Usuario inactivo o no encontrado')\n      expect(result.code).toBe('USER_INACTIVE')\n    })\n\n    it('debe fallar si hay error en Supabase', async () => {\n      ;(supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: null,\n              error: { message: 'Database error' },\n            }),\n          }),\n        }),\n      })\n\n      const result = await validateRLSContext(mockEnterpriseContext)\n\n      expect(result.valid).toBe(false)\n      expect(result.error).toBe('Error obteniendo perfil de usuario')\n      expect(result.code).toBe('PROFILE_ERROR')\n    })\n  })\n\n  describe('createUserSupabaseClient', () => {\n    it('debe crear cliente Supabase con contexto de usuario', () => {\n      // Mock environment variables\n      process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co'\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key'\n\n      const client = createUserSupabaseClient('supabase_123', 'access-token')\n\n      expect(client).toBeDefined()\n      expect(createClient).toHaveBeenCalledWith(\n        'https://test.supabase.co',\n        'test-anon-key',\n        expect.objectContaining({\n          auth: {\n            autoRefreshToken: false,\n            persistSession: false,\n          },\n          global: {\n            headers: {\n              'X-User-ID': 'supabase_123',\n              Authorization: 'Bearer access-token',\n            },\n          },\n        })\n      )\n    })\n\n    it('debe retornar null si configuración no está disponible', () => {\n      delete process.env.NEXT_PUBLIC_SUPABASE_URL\n      delete process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n      const client = createUserSupabaseClient('supabase_123')\n\n      expect(client).toBeNull()\n    })\n  })\n\n  describe('executeWithRLS', () => {\n    it('debe ejecutar consulta con RLS habilitado', async () => {\n      // Mock environment variables para createUserSupabaseClient\n      process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co'\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key'\n\n      const mockQueryFunction = jest.fn().mockResolvedValue({\n        products: [{ id: 1, name: 'Test Product' }],\n        total: 1,\n      })\n\n      const result = await executeWithRLS(mockEnterpriseContext, mockQueryFunction, {\n        enforceRLS: true,\n        auditLog: true,\n      })\n\n      expect(result.success).toBe(true)\n      expect(result.data).toBeDefined()\n      expect(mockQueryFunction).toHaveBeenCalled()\n    })\n\n    it('debe usar cliente admin para bypass RLS si es admin', async () => {\n      const mockQueryFunction = jest.fn().mockResolvedValue({ data: 'test' })\n\n      const result = await executeWithRLS(mockEnterpriseContext, mockQueryFunction, {\n        bypassRLS: true,\n      })\n\n      expect(result.success).toBe(true)\n      expect(mockQueryFunction).toHaveBeenCalledWith(\n        supabaseAdmin,\n        expect.objectContaining({ role: 'admin' })\n      )\n    })\n\n    it('debe fallar si validación RLS falla', async () => {\n      ;(supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: null,\n              error: { message: 'User not found' },\n            }),\n          }),\n        }),\n      })\n\n      const mockQueryFunction = jest.fn()\n\n      const result = await executeWithRLS(mockEnterpriseContext, mockQueryFunction)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('Error obteniendo perfil de usuario')\n      expect(mockQueryFunction).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('checkRLSPermission', () => {\n    it('debe permitir acceso a admin siempre', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'admin' as const,\n        permissions: [],\n        isActive: true,\n      }\n\n      const hasPermission = checkRLSPermission(rlsContext, 'any_permission')\n\n      expect(hasPermission).toBe(true)\n    })\n\n    it('debe permitir acceso si usuario tiene permiso específico', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'user' as const,\n        permissions: ['products_read'],\n        isActive: true,\n      }\n\n      const hasPermission = checkRLSPermission(rlsContext, 'products_read')\n\n      expect(hasPermission).toBe(true)\n    })\n\n    it('debe permitir acceso si usuario es propietario del recurso', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'user' as const,\n        permissions: [],\n        isActive: true,\n      }\n\n      const hasPermission = checkRLSPermission(rlsContext, 'edit_profile', 'user_123')\n\n      expect(hasPermission).toBe(true)\n    })\n\n    it('debe denegar acceso si no tiene permisos', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'user' as const,\n        permissions: ['basic_access'],\n        isActive: true,\n      }\n\n      const hasPermission = checkRLSPermission(rlsContext, 'admin_access')\n\n      expect(hasPermission).toBe(false)\n    })\n  })\n\n  describe('createRLSFilters', () => {\n    it('debe crear filtros para user_profiles para usuario normal', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'user' as const,\n        permissions: [],\n        isActive: true,\n      }\n\n      const filters = createRLSFilters(rlsContext, 'user_profiles')\n\n      expect(filters).toEqual({\n        clerk_user_id: 'user_123',\n      })\n    })\n\n    it('debe crear filtros para products para usuario normal', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'user' as const,\n        permissions: [],\n        isActive: true,\n      }\n\n      const filters = createRLSFilters(rlsContext, 'products')\n\n      expect(filters).toEqual({\n        is_active: true,\n      })\n    })\n\n    it('no debe crear filtros para admin', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'admin' as const,\n        permissions: ['admin_access'],\n        isActive: true,\n      }\n\n      const filters = createRLSFilters(rlsContext, 'products')\n\n      expect(filters).toEqual({})\n    })\n\n    it('debe crear filtros para orders para usuario normal', () => {\n      const rlsContext = {\n        userId: 'user_123',\n        role: 'user' as const,\n        permissions: [],\n        isActive: true,\n      }\n\n      const filters = createRLSFilters(rlsContext, 'orders')\n\n      expect(filters).toEqual({\n        user_id: 'user_123',\n      })\n    })\n  })\n\n  describe('withRLS middleware', () => {\n    it('debe ejecutar handler si contexto enterprise está disponible', async () => {\n      const mockRequest = {\n        enterpriseAuth: mockEnterpriseContext,\n      } as any\n      const mockResponse = { status: jest.fn(), json: jest.fn() }\n      const mockHandler = jest.fn().mockResolvedValue({ success: true })\n\n      const middleware = withRLS()\n      const wrappedHandler = middleware(mockHandler)\n\n      const result = await wrappedHandler(mockRequest, mockResponse)\n\n      expect(mockHandler).toHaveBeenCalledWith(mockRequest, mockResponse)\n      expect(mockRequest.rlsContext).toBeDefined()\n    })\n\n    it('debe retornar error si contexto enterprise no está disponible', async () => {\n      const mockRequest = {} as any\n      const mockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      }\n      const mockHandler = jest.fn()\n\n      const middleware = withRLS()\n      const wrappedHandler = middleware(mockHandler)\n\n      const result = await wrappedHandler(mockRequest, mockResponse)\n\n      expect(mockHandler).not.toHaveBeenCalled()\n\n      // Para App Router, verifica que retorna Response\n      if (result && typeof result === 'object' && 'status' in result) {\n        expect(result.status).toBe(401)\n      } else {\n        // Para Pages Router, verifica que llama a response methods\n        expect(mockResponse.status).toHaveBeenCalledWith(401)\n        expect(mockResponse.json).toHaveBeenCalledWith(\n          expect.objectContaining({\n            success: false,\n            error: 'Contexto enterprise no disponible',\n            code: 'NO_ENTERPRISE_CONTEXT',\n          })\n        )\n      }\n    })\n  })\n})\n"],"names":["jest","mock","supabaseAdmin","from","fn","select","eq","single","insert","createClient","describe","mockEnterpriseContext","beforeEach","clearAllMocks","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","mockReturnValue","mockResolvedValue","data","id","supabase_user_id","clerk_user_id","role_id","is_active","user_roles","role_name","error","it","result","validateRLSContext","expect","valid","toBe","context","toBeDefined","toContain","isActive","code","message","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","client","createUserSupabaseClient","toHaveBeenCalledWith","objectContaining","auth","autoRefreshToken","persistSession","global","headers","Authorization","toBeNull","mockQueryFunction","products","name","total","executeWithRLS","enforceRLS","auditLog","success","toHaveBeenCalled","bypassRLS","not","rlsContext","hasPermission","checkRLSPermission","filters","createRLSFilters","toEqual","user_id","mockRequest","enterpriseAuth","mockResponse","status","json","mockHandler","middleware","withRLS","wrappedHandler","mockReturnThis"],"mappings":"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"}