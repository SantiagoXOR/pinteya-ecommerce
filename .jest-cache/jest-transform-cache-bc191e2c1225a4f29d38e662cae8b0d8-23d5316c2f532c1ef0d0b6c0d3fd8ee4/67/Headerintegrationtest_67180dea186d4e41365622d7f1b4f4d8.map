{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Header\\__tests__\\Header.integration.test.tsx"],"sourcesContent":["/**\r\n * Header Integration Test Ultra-Simplificado\r\n * Sin dependencias externas - Solo integración básica\r\n */\r\n\r\nimport React from 'react'\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\n\r\n// Mock completo para evitar dependencias\r\njest.mock('../index', () => {\r\n  return function MockHeaderIntegration() {\r\n    const [searchValue, setSearchValue] = React.useState('')\r\n    const [searchResults, setSearchResults] = React.useState<string[]>([])\r\n    const [isLoading, setIsLoading] = React.useState(false)\r\n    const [cartItems, setCartItems] = React.useState(0)\r\n    \r\n    const handleSearch = async (value: string) => {\r\n      if (!value.trim()) {\r\n        setSearchResults([])\r\n        return\r\n      }\r\n      \r\n      setIsLoading(true)\r\n      \r\n      // Simular búsqueda\r\n      setTimeout(() => {\r\n        const mockResults = [\r\n          `Resultado 1 para \"${value}\"`,\r\n          `Resultado 2 para \"${value}\"`,\r\n          `Resultado 3 para \"${value}\"`\r\n        ]\r\n        setSearchResults(mockResults)\r\n        setIsLoading(false)\r\n      }, 100)\r\n    }\r\n    \r\n    const addToCart = () => {\r\n      setCartItems(prev => prev + 1)\r\n    }\r\n    \r\n    return (\r\n      <header role=\"banner\" data-testid=\"header-integration\">\r\n        <div data-testid=\"logo-section\">\r\n          <img alt=\"Pinteya\" src=\"/logo.svg\" />\r\n        </div>\r\n        \r\n        <div data-testid=\"search-integration\">\r\n          <input \r\n            role=\"searchbox\"\r\n            aria-label=\"Buscar productos\"\r\n            value={searchValue}\r\n            onChange={(e) => {\r\n              setSearchValue(e.target.value)\r\n              handleSearch(e.target.value)\r\n            }}\r\n            placeholder=\"Buscar productos...\"\r\n          />\r\n          \r\n          {isLoading && <div data-testid=\"search-loading\">Buscando...</div>}\r\n          \r\n          {searchResults.length > 0 && (\r\n            <div data-testid=\"search-results\">\r\n              {searchResults.map((result, index) => (\r\n                <div key={index} data-testid={`search-result-${index}`}>\r\n                  {result}\r\n                  <button onClick={addToCart}>Agregar al carrito</button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div data-testid=\"cart-integration\">\r\n          <button data-testid=\"cart-button\">\r\n            Carrito ({cartItems})\r\n          </button>\r\n        </div>\r\n        \r\n        <div data-testid=\"auth-integration\">\r\n          <button>Iniciar Sesión</button>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n})\r\n\r\nimport Header from '../index'\r\n\r\ndescribe('Header Integration - Ultra-Simplified Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('Integración Básica', () => {\r\n    it('debe renderizar todos los componentes integrados', () => {\r\n      render(<Header />)\r\n      \r\n      expect(screen.getByTestId('header-integration')).toBeInTheDocument()\r\n      expect(screen.getByTestId('logo-section')).toBeInTheDocument()\r\n      expect(screen.getByTestId('search-integration')).toBeInTheDocument()\r\n      expect(screen.getByTestId('cart-integration')).toBeInTheDocument()\r\n      expect(screen.getByTestId('auth-integration')).toBeInTheDocument()\r\n    })\r\n\r\n    it('debe tener estructura semántica integrada', () => {\r\n      render(<Header />)\r\n      \r\n      const header = screen.getByRole('banner')\r\n      const searchInput = screen.getByRole('searchbox')\r\n      const buttons = screen.getAllByRole('button')\r\n      \r\n      expect(header).toBeInTheDocument()\r\n      expect(searchInput).toBeInTheDocument()\r\n      expect(buttons.length).toBeGreaterThanOrEqual(2)\r\n    })\r\n  })\r\n\r\n  describe('Integración Búsqueda-Carrito', () => {\r\n    it('debe buscar productos y permitir agregar al carrito', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      \r\n      // Buscar productos\r\n      fireEvent.change(searchInput, { target: { value: 'pintura' } })\r\n      \r\n      // Verificar loading\r\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\r\n      \r\n      // Esperar resultados\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Verificar resultados\r\n      expect(screen.getByTestId('search-result-0')).toBeInTheDocument()\r\n      expect(screen.getByTestId('search-result-1')).toBeInTheDocument()\r\n      expect(screen.getByTestId('search-result-2')).toBeInTheDocument()\r\n      \r\n      // Verificar carrito inicial\r\n      const cartButton = screen.getByTestId('cart-button')\r\n      expect(cartButton).toHaveTextContent('Carrito (0)')\r\n      \r\n      // Agregar producto al carrito\r\n      const addButtons = screen.getAllByText('Agregar al carrito')\r\n      fireEvent.click(addButtons[0])\r\n      \r\n      // Verificar carrito actualizado\r\n      expect(cartButton).toHaveTextContent('Carrito (1)')\r\n    })\r\n\r\n    it('debe manejar búsqueda vacía', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      \r\n      // Buscar algo primero\r\n      fireEvent.change(searchInput, { target: { value: 'test' } })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Limpiar búsqueda\r\n      fireEvent.change(searchInput, { target: { value: '' } })\r\n      \r\n      // Resultados deben desaparecer\r\n      expect(screen.queryByTestId('search-results')).not.toBeInTheDocument()\r\n      expect(screen.queryByTestId('search-loading')).not.toBeInTheDocument()\r\n    })\r\n\r\n    it('debe agregar múltiples productos al carrito', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      const cartButton = screen.getByTestId('cart-button')\r\n      \r\n      // Buscar productos\r\n      fireEvent.change(searchInput, { target: { value: 'latex' } })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Agregar múltiples productos\r\n      const addButtons = screen.getAllByText('Agregar al carrito')\r\n      fireEvent.click(addButtons[0])\r\n      fireEvent.click(addButtons[1])\r\n      fireEvent.click(addButtons[2])\r\n      \r\n      // Verificar contador del carrito\r\n      expect(cartButton).toHaveTextContent('Carrito (3)')\r\n    })\r\n  })\r\n\r\n  describe('Flujo de Usuario Completo', () => {\r\n    it('debe manejar flujo completo: buscar → agregar → verificar carrito', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      const cartButton = screen.getByTestId('cart-button')\r\n      \r\n      // 1. Estado inicial\r\n      expect(cartButton).toHaveTextContent('Carrito (0)')\r\n      \r\n      // 2. Buscar productos\r\n      fireEvent.change(searchInput, { target: { value: 'rodillo' } })\r\n      \r\n      // 3. Esperar resultados\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // 4. Verificar resultados contienen el término buscado\r\n      const results = screen.getAllByTestId(/search-result-/)\r\n      results.forEach(result => {\r\n        expect(result).toHaveTextContent('rodillo')\r\n      })\r\n      \r\n      // 5. Agregar producto al carrito\r\n      const addButton = screen.getAllByText('Agregar al carrito')[0]\r\n      fireEvent.click(addButton)\r\n      \r\n      // 6. Verificar carrito actualizado\r\n      expect(cartButton).toHaveTextContent('Carrito (1)')\r\n      \r\n      // 7. Buscar otro producto\r\n      fireEvent.change(searchInput, { target: { value: 'pincel' } })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // 8. Agregar otro producto\r\n      const newAddButton = screen.getAllByText('Agregar al carrito')[0]\r\n      fireEvent.click(newAddButton)\r\n      \r\n      // 9. Verificar carrito final\r\n      expect(cartButton).toHaveTextContent('Carrito (2)')\r\n    })\r\n\r\n    it('debe mantener estado del carrito durante navegación', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      const cartButton = screen.getByTestId('cart-button')\r\n      \r\n      // Agregar productos\r\n      fireEvent.change(searchInput, { target: { value: 'test' } })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      const addButton = screen.getAllByText('Agregar al carrito')[0]\r\n      fireEvent.click(addButton)\r\n      \r\n      expect(cartButton).toHaveTextContent('Carrito (1)')\r\n      \r\n      // Cambiar búsqueda - carrito debe mantener estado\r\n      fireEvent.change(searchInput, { target: { value: 'otro producto' } })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Carrito debe mantener el producto anterior\r\n      expect(cartButton).toHaveTextContent('Carrito (1)')\r\n    })\r\n  })\r\n\r\n  describe('Estados de Carga', () => {\r\n    it('debe mostrar estado de carga durante búsqueda', () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      \r\n      // Iniciar búsqueda\r\n      fireEvent.change(searchInput, { target: { value: 'cargando' } })\r\n      \r\n      // Verificar estado de carga\r\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\r\n      expect(screen.getByTestId('search-loading')).toHaveTextContent('Buscando...')\r\n    })\r\n\r\n    it('debe ocultar estado de carga cuando termina búsqueda', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'terminado' } })\r\n      \r\n      // Loading debe estar presente inicialmente\r\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\r\n      \r\n      // Esperar a que termine la búsqueda\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Loading debe desaparecer\r\n      expect(screen.queryByTestId('search-loading')).not.toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Accesibilidad Integrada', () => {\r\n    it('debe mantener accesibilidad en flujo completo', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      // Verificar aria-label\r\n      expect(searchInput).toHaveAttribute('aria-label', 'Buscar productos')\r\n      \r\n      // Verificar navegación por teclado\r\n      searchInput.focus()\r\n      expect(document.activeElement).toBe(searchInput)\r\n      \r\n      // Buscar y verificar resultados accesibles\r\n      fireEvent.change(searchInput, { target: { value: 'accesible' } })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Verificar botones son accesibles\r\n      const addButtons = screen.getAllByText('Agregar al carrito')\r\n      addButtons.forEach(button => {\r\n        expect(button).toBeInTheDocument()\r\n        button.focus()\r\n        expect(document.activeElement).toBe(button)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Performance Integrada', () => {\r\n    it('debe manejar múltiples interacciones sin degradación', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      \r\n      // Múltiples búsquedas rápidas\r\n      for (let i = 0; i < 5; i++) {\r\n        fireEvent.change(searchInput, { target: { value: `búsqueda ${i}` } })\r\n      }\r\n\r\n      // Esperar última búsqueda\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n\r\n      // Verificar que funciona correctamente (el resultado contiene el último término)\r\n      expect(screen.getByTestId('search-result-0')).toHaveTextContent('búsqueda')\r\n    })\r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","MockHeaderIntegration","searchValue","setSearchValue","React","useState","searchResults","setSearchResults","isLoading","setIsLoading","cartItems","setCartItems","handleSearch","value","trim","setTimeout","mockResults","addToCart","prev","header","role","data-testid","div","img","alt","src","input","aria-label","onChange","e","target","placeholder","length","map","result","index","button","onClick","describe","beforeEach","clearAllMocks","it","render","Header","expect","screen","getByTestId","toBeInTheDocument","getByRole","searchInput","buttons","getAllByRole","toBeGreaterThanOrEqual","fireEvent","change","waitFor","cartButton","toHaveTextContent","addButtons","getAllByText","click","queryByTestId","not","results","getAllByTestId","forEach","addButton","newAddButton","toHaveAttribute","focus","document","activeElement","toBe","i"],"mappings":"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"}