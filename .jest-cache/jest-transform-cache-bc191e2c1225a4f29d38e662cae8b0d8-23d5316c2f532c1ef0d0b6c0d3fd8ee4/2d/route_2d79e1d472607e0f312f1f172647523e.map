{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\route.ts"],"sourcesContent":["\r\n// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE PRODUCTOS\r\n// ===================================\r\n// API optimizada con rate limiting, timeouts centralizados y logging estructurado\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\r\nimport { validateData, safeValidateData, ProductFiltersSchema, ProductSchema } from '@/lib/validations';\r\nimport { ApiResponse, PaginatedResponse, ProductWithCategory } from '@/types/api';\r\nimport {\r\n  executeWithRLS,\r\n  withRLS,\r\n  createRLSFilters\r\n} from '@/lib/auth/enterprise-rls-utils';\r\n\r\n// ===================================\r\n// NUEVAS IMPORTACIONES - MEJORAS DE ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET /api/products - Obtener productos con filtros\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.products,\r\n    async () => {\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer parámetros de query\r\n    const queryParams = {\r\n      category: searchParams.get('category') || undefined,\r\n      categories: searchParams.get('categories')?.split(',').filter(Boolean) || undefined,\r\n      brand: searchParams.get('brand') || undefined,\r\n      brands: searchParams.get('brands')?.split(',').filter(Boolean) || undefined,\r\n      paintType: searchParams.get('paintType') || undefined,\r\n      paintTypes: searchParams.get('paintTypes')?.split(',').filter(Boolean) || undefined,\r\n      priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,\r\n      priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,\r\n      search: searchParams.get('search') || undefined,\r\n      page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,\r\n      limit: searchParams.get('limit') ? Number(searchParams.get('limit')) : 12,\r\n      sortBy: searchParams.get('sortBy') as 'price' | 'name' | 'created_at' | 'brand' || 'created_at',\r\n      sortOrder: searchParams.get('sortOrder') as 'asc' | 'desc' || 'desc',\r\n    };\r\n\r\n        // Validar parámetros de manera segura\r\n        const validationResult = safeValidateData(ProductFiltersSchema, queryParams);\r\n\r\n        if (!validationResult.success) {\r\n          // Log de error de validación con contexto de seguridad\r\n          securityLogger.log({\r\n            type: 'validation_error',\r\n            severity: 'medium',\r\n            message: 'Invalid parameters in products API',\r\n            context: securityLogger.context,\r\n            metadata: {\r\n              validationError: validationResult.error,\r\n              queryParams,\r\n            },\r\n          });\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Parámetros inválidos: ${validationResult.error}`,\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const filters = validationResult.data!;\r\n\r\n        // Log de acceso a datos con contexto\r\n        securityLogger.log({\r\n          type: 'data_access',\r\n          severity: 'low',\r\n          message: 'Products API accessed',\r\n          context: securityLogger.context,\r\n          metadata: {\r\n            filters: filters,\r\n            hasSearch: !!filters.search,\r\n            hasFilters: !!(filters.category || filters.brand || filters.paintType),\r\n          },\r\n        });\r\n\r\n        const supabase = getSupabaseClient();\r\n\r\n        // Verificar que el cliente de Supabase esté disponible\r\n        if (!supabase) {\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error('Supabase client not available'),\r\n            { service: 'supabase' }\r\n          );\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Servicio de base de datos no disponible',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 503 });\r\n        }\r\n\r\n        // Construir query base optimizada (solo campos necesarios)\r\n        // Usar timeout centralizado para operaciones de base de datos\r\n        const result = await withDatabaseTimeout(async (signal) => {\r\n          let query = supabase\r\n            .from('products')\r\n            .select(`\r\n              id, name, slug, price, discounted_price, brand, stock, images,\r\n              category:categories(id, name, slug)\r\n            `, { count: 'exact' });\r\n\r\n          // Aplicar filtros\r\n          if (filters.category) {\r\n            // Primero obtener el ID de la categoría por su slug\r\n            const { data: categoryData } = await supabase\r\n              .from('categories')\r\n              .select('id')\r\n              .eq('slug', filters.category)\r\n              .single();\r\n\r\n            if (categoryData) {\r\n              query = query.eq('category_id', categoryData.id);\r\n            }\r\n          }\r\n\r\n          // Filtro por múltiples categorías (nuevo)\r\n          if (filters.categories && filters.categories.length > 0) {\r\n            const { data: categoriesData } = await supabase\r\n              .from('categories')\r\n              .select('id')\r\n              .in('slug', filters.categories);\r\n\r\n            if (categoriesData && categoriesData.length > 0) {\r\n              const categoryIds = categoriesData.map(cat => cat.id);\r\n              query = query.in('category_id', categoryIds);\r\n            }\r\n          }\r\n\r\n          if (filters.brand) {\r\n            query = query.eq('brand', filters.brand);\r\n          }\r\n\r\n          // Filtro por múltiples marcas (nuevo)\r\n          if (filters.brands && filters.brands.length > 0) {\r\n            query = query.in('brand', filters.brands);\r\n          }\r\n\r\n          // Filtro por tipo de pintura (nuevo)\r\n          if (filters.paintType) {\r\n            query = query.eq('paint_type', filters.paintType);\r\n          }\r\n\r\n          // Filtro por múltiples tipos de pintura (nuevo)\r\n          if (filters.paintTypes && filters.paintTypes.length > 0) {\r\n            query = query.in('paint_type', filters.paintTypes);\r\n          }\r\n\r\n          if (filters.priceMin) {\r\n            query = query.gte('price', filters.priceMin);\r\n          }\r\n\r\n          if (filters.priceMax) {\r\n            query = query.lte('price', filters.priceMax);\r\n          }\r\n\r\n          if (filters.search) {\r\n            query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,brand.ilike.%${filters.search}%`);\r\n          }\r\n\r\n          // Filtro por productos con descuento real (discounted_price < price)\r\n          if (filters.hasDiscount) {\r\n            query = query.not('discounted_price', 'is', null).lt('discounted_price', 'price');\r\n          }\r\n\r\n          // Solo productos con stock (temporalmente comentado para testing)\r\n          // query = query.gt('stock', 0);\r\n\r\n          // Ordenamiento\r\n          const orderColumn = filters.sortBy === 'created_at' ? 'created_at' :\r\n                             filters.sortBy === 'brand' ? 'brand' :\r\n                             (filters.sortBy || 'created_at');\r\n          query = query.order(orderColumn, { ascending: filters.sortOrder === 'asc' });\r\n\r\n          // Paginación\r\n          const page = filters.page || 1;\r\n          const limit = filters.limit || 10;\r\n          const from = (page - 1) * limit;\r\n          const to = from + limit - 1;\r\n          query = query.range(from, to);\r\n\r\n          // Ejecutar query con timeout\r\n          return await query;\r\n        }, API_TIMEOUTS.database);\r\n\r\n        const { data: products, error, count } = result;\r\n\r\n        if (error) {\r\n          // Log de error de base de datos con contexto de seguridad\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error(`Supabase error: ${error.message}`),\r\n            {\r\n              supabaseError: error,\r\n              filters: filters,\r\n              operation: 'products_query'\r\n            }\r\n          );\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: error.message || 'Error obteniendo productos de la base de datos',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 500 });\r\n        }\r\n\r\n        // Calcular información de paginación\r\n        const page = filters.page || 1;\r\n        const limit = filters.limit || 10;\r\n        const totalPages = Math.ceil((count || 0) / limit);\r\n\r\n        // Log de operación exitosa\r\n        securityLogger.log({\r\n          type: 'data_access',\r\n          severity: 'low',\r\n          message: 'Products retrieved successfully',\r\n          context: securityLogger.context,\r\n          metadata: {\r\n            productsCount: products?.length || 0,\r\n            totalCount: count || 0,\r\n            page,\r\n            limit,\r\n            filters: filters,\r\n          },\r\n        });\r\n\r\n        const response: PaginatedResponse<ProductWithCategory> = {\r\n          data: products || [],\r\n          pagination: {\r\n            page,\r\n            limit,\r\n            total: count || 0,\r\n            totalPages,\r\n          },\r\n          success: true,\r\n          message: `${products?.length || 0} productos encontrados`,\r\n        };\r\n\r\n        // Agregar headers de cache para mejorar performance\r\n        return NextResponse.json(response, {\r\n          headers: {\r\n            'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n      } catch (error: any) {\r\n        // Log de error general con contexto de seguridad\r\n        securityLogger.logApiError(\r\n          securityLogger.context,\r\n          error,\r\n          {\r\n            operation: 'products_get',\r\n            stage: 'database_operation'\r\n          }\r\n        );\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: error.message || 'Error interno del servidor',\r\n        };\r\n\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    // Log de rate limit excedido\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      {\r\n        endpoint: '/api/products',\r\n        method: 'GET'\r\n      }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// POST /api/products - Crear producto (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para operaciones de creación\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.creation,\r\n    async () => {\r\n      try {\r\n        // ENTERPRISE: Usar nueva autenticación enterprise para admin\r\n        const { requireAdminAuth } = await import('@/lib/auth/enterprise-auth-utils');\r\n\r\n        const authResult = await requireAdminAuth(request, ['products_create']);\r\n\r\n        if (!authResult.success) {\r\n          // Log de intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(\r\n            securityLogger.context,\r\n            'products',\r\n            'create'\r\n          );\r\n\r\n          return NextResponse.json(\r\n            {\r\n              error: authResult.error,\r\n              code: authResult.code,\r\n              enterprise: true,\r\n              timestamp: new Date().toISOString()\r\n            },\r\n            { status: authResult.status || 401 }\r\n          );\r\n        }\r\n\r\n        const context = authResult.context!;\r\n\r\n        // Actualizar contexto del logger con información del usuario\r\n        securityLogger.context.userId = context.userId;\r\n\r\n        const body = await request.json();\r\n\r\n        // Log de acción administrativa\r\n        securityLogger.logAdminAction(\r\n          securityLogger.context,\r\n          'create_product',\r\n          {\r\n            productName: body.name,\r\n            category: body.category_id\r\n          }\r\n        );\r\n\r\n        // Validar datos del producto\r\n        const productData = validateData(ProductSchema, body);\r\n\r\n        const supabase = getSupabaseClient(true); // Usar cliente admin\r\n\r\n        // Verificar que el cliente administrativo esté disponible\r\n        if (!supabase) {\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error('Admin Supabase client not available'),\r\n            { service: 'supabase_admin' }\r\n          );\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Servicio administrativo no disponible',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 503 });\r\n        }\r\n\r\n        // Crear slug si no se proporciona\r\n        if (!productData.slug) {\r\n          productData.slug = productData.name\r\n            .toLowerCase()\r\n            .replace(/[^a-z0-9]+/g, '-')\r\n            .replace(/(^-|-$)/g, '');\r\n        }\r\n\r\n        // Insertar producto con timeout\r\n        const result = await withDatabaseTimeout(async (signal) => {\r\n          return await supabase\r\n            .from('products')\r\n            .insert(productData)\r\n            .select(`\r\n              *,\r\n              category:categories(id, name, slug)\r\n            `)\r\n            .single();\r\n        }, API_TIMEOUTS.admin);\r\n\r\n        const { data: product, error } = result;\r\n\r\n        if (error) {\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error(`Product creation failed: ${error.message}`),\r\n            {\r\n              supabaseError: error,\r\n              productData: { ...productData, images: '[REDACTED]' } // No loggear imágenes por seguridad\r\n            }\r\n          );\r\n          handleSupabaseError(error, 'POST /api/products');\r\n        }\r\n\r\n        // Log de creación exitosa\r\n        securityLogger.logAdminAction(\r\n          securityLogger.context,\r\n          'product_created_successfully',\r\n          {\r\n            productId: product?.id,\r\n            productName: product?.name,\r\n            category: product?.category?.name\r\n          }\r\n        );\r\n\r\n        const response: ApiResponse<ProductWithCategory> = {\r\n          data: product,\r\n          success: true,\r\n          message: 'Producto creado exitosamente',\r\n        };\r\n\r\n        return NextResponse.json(response, { status: 201 });\r\n\r\n      } catch (error: any) {\r\n        // Log de error general en creación de producto\r\n        securityLogger.logApiError(\r\n          securityLogger.context,\r\n          error,\r\n          {\r\n            operation: 'product_creation',\r\n            stage: 'general_error'\r\n          }\r\n        );\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: error.message || 'Error interno del servidor',\r\n        };\r\n\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    // Log de rate limit excedido para creación\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      {\r\n        endpoint: '/api/products',\r\n        method: 'POST',\r\n        operation: 'product_creation'\r\n      }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","POST","runtime","request","securityLogger","createSecurityLogger","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","products","searchParams","URL","url","queryParams","category","get","undefined","categories","split","filter","Boolean","brand","brands","paintType","paintTypes","priceMin","Number","priceMax","search","page","limit","sortBy","sortOrder","validationResult","safeValidateData","ProductFiltersSchema","success","log","type","severity","message","context","metadata","validationError","error","errorResponse","data","NextResponse","json","status","filters","hasSearch","hasFilters","supabase","getSupabaseClient","logApiError","Error","service","result","withDatabaseTimeout","signal","query","from","select","count","categoryData","eq","single","id","length","categoriesData","in","categoryIds","map","cat","gte","lte","or","hasDiscount","not","lt","orderColumn","order","ascending","to","range","API_TIMEOUTS","database","supabaseError","operation","totalPages","Math","ceil","productsCount","totalCount","response","pagination","total","headers","stage","logRateLimitExceeded","endpoint","method","creation","requireAdminAuth","authResult","logPermissionDenied","code","enterprise","timestamp","Date","toISOString","userId","body","logAdminAction","productName","name","category_id","productData","validateData","ProductSchema","slug","toLowerCase","replace","insert","admin","product","images","handleSupabaseError","productId"],"mappings":"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"}