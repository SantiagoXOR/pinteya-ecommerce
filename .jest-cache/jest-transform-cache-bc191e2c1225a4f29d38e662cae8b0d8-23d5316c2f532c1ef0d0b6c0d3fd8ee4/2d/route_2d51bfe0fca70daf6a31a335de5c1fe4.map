{"version":3,"names":["cov_1agt1x6ihh","actualCoverage","s","POST","f","runtime","request","session","_config","auth","user","email","b","_server","NextResponse","json","error","status","body","stops","startLocation","preferences","length","defaultStart","lat","lng","process","env","GOOGLE_MAPS_API_KEY","console","warn","optimizedStops","sort","a","priority","orderId","success","data","optimizedRoute","map","stop","index","sequence","estimatedArrival","Date","now","toISOString","estimatedDuration","distanceFromPrevious","durationFromPrevious","summary","totalDistance","totalDuration","totalStops","estimatedStartTime","estimatedEndTime","optimizationMethod","waypoints","address","join","origin","destination","directionsUrl","URL","searchParams","set","avoidTolls","avoidHighways","response","fetch","toString","directionsData","route","routes","waypointOrder","waypoint_order","leg","legs","duration","value","Math","ceil","distance","coordinates","end_location","reduce","sum","round","polyline","overview_polyline","points","googleMapsData"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\optimize-route\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para optimizar rutas de entrega usando Google Maps\r\n * POST /api/driver/optimize-route\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\ninterface DeliveryStop {\r\n  orderId: number;\r\n  address: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  priority?: number;\r\n  estimatedDuration?: number;\r\n}\r\n\r\ninterface OptimizeRouteRequest {\r\n  stops: DeliveryStop[];\r\n  startLocation?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  preferences?: {\r\n    optimizeFor: 'time' | 'distance' | 'fuel';\r\n    avoidTolls: boolean;\r\n    avoidHighways: boolean;\r\n  };\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body: OptimizeRouteRequest = await request.json();\r\n    const { stops, startLocation, preferences } = body;\r\n\r\n    if (!stops || stops.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Se requieren paradas para optimizar la ruta' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Configuración por defecto para Córdoba, Argentina\r\n    const defaultStart = startLocation || {\r\n      lat: -31.4201,\r\n      lng: -64.1888\r\n    };\r\n\r\n    // Si no tenemos Google Maps API key, usar algoritmo simple\r\n    if (!process.env.GOOGLE_MAPS_API_KEY) {\r\n      console.warn('Google Maps API key not configured, using simple optimization');\r\n      \r\n      // Algoritmo simple: ordenar por prioridad y luego por orden de creación\r\n      const optimizedStops = [...stops].sort((a, b) => {\r\n        if (a.priority !== b.priority) {\r\n          return (a.priority || 0) - (b.priority || 0);\r\n        }\r\n        return a.orderId - b.orderId;\r\n      });\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          optimizedRoute: optimizedStops.map((stop, index) => ({\r\n            ...stop,\r\n            sequence: index + 1,\r\n            estimatedArrival: new Date(Date.now() + (index + 1) * 30 * 60 * 1000).toISOString(),\r\n            estimatedDuration: 30,\r\n            distanceFromPrevious: 5.0,\r\n            durationFromPrevious: 15\r\n          })),\r\n          summary: {\r\n            totalDistance: stops.length * 5.0,\r\n            totalDuration: stops.length * 30,\r\n            totalStops: stops.length,\r\n            estimatedStartTime: new Date().toISOString(),\r\n            estimatedEndTime: new Date(Date.now() + stops.length * 30 * 60 * 1000).toISOString(),\r\n            optimizationMethod: 'simple'\r\n          },\r\n          startLocation: defaultStart\r\n        }\r\n      });\r\n    }\r\n\r\n    // Usar Google Maps Directions API para optimización avanzada\r\n    const waypoints = stops.map(stop => stop.address).join('|');\r\n    const origin = `${defaultStart.lat},${defaultStart.lng}`;\r\n    const destination = stops[stops.length - 1]?.address || origin;\r\n\r\n    const directionsUrl = new URL('https://maps.googleapis.com/maps/api/directions/json');\r\n    directionsUrl.searchParams.set('origin', origin);\r\n    directionsUrl.searchParams.set('destination', destination);\r\n    directionsUrl.searchParams.set('waypoints', `optimize:true|${waypoints}`);\r\n    directionsUrl.searchParams.set('key', process.env.GOOGLE_MAPS_API_KEY!);\r\n    directionsUrl.searchParams.set('language', 'es');\r\n    directionsUrl.searchParams.set('region', 'AR');\r\n    \r\n    if (preferences?.avoidTolls) {\r\n      directionsUrl.searchParams.set('avoid', 'tolls');\r\n    }\r\n    if (preferences?.avoidHighways) {\r\n      directionsUrl.searchParams.set('avoid', 'highways');\r\n    }\r\n\r\n    const response = await fetch(directionsUrl.toString());\r\n    const directionsData = await response.json();\r\n\r\n    if (directionsData.status !== 'OK') {\r\n      console.warn('Google Directions API error:', directionsData);\r\n      console.warn('Falling back to simple optimization algorithm');\r\n\r\n      // Fallback al algoritmo simple si Google Maps falla\r\n      const optimizedStops = [...stops].sort((a, b) => {\r\n        if (a.priority !== b.priority) {\r\n          return (a.priority || 0) - (b.priority || 0);\r\n        }\r\n        return a.orderId - b.orderId;\r\n      });\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          optimizedRoute: optimizedStops.map((stop, index) => ({\r\n            ...stop,\r\n            sequence: index + 1,\r\n            estimatedArrival: new Date(Date.now() + (index + 1) * 30 * 60 * 1000).toISOString(),\r\n            estimatedDuration: 30,\r\n            distanceFromPrevious: 5.0,\r\n            durationFromPrevious: 15\r\n          })),\r\n          summary: {\r\n            totalDistance: stops.length * 5.0,\r\n            totalDuration: stops.length * 30,\r\n            totalStops: stops.length,\r\n            estimatedStartTime: new Date().toISOString(),\r\n            estimatedEndTime: new Date(Date.now() + stops.length * 30 * 60 * 1000).toISOString(),\r\n            optimizationMethod: 'simple_fallback'\r\n          },\r\n          startLocation: defaultStart\r\n        }\r\n      });\r\n    }\r\n\r\n    // Procesar respuesta de Google Maps\r\n    const route = directionsData.routes[0];\r\n    const waypointOrder = directionsData.routes[0]?.waypoint_order || [];\r\n    \r\n    // Reordenar paradas según la optimización de Google\r\n    const optimizedStops = waypointOrder.map((index: number, sequence: number) => {\r\n      const stop = stops[index];\r\n      const leg = route.legs[sequence];\r\n      \r\n      return {\r\n        ...stop,\r\n        sequence: sequence + 1,\r\n        estimatedArrival: new Date(Date.now() + leg.duration.value * 1000).toISOString(),\r\n        estimatedDuration: Math.ceil(leg.duration.value / 60),\r\n        distanceFromPrevious: leg.distance.value / 1000,\r\n        durationFromPrevious: Math.ceil(leg.duration.value / 60),\r\n        coordinates: {\r\n          lat: leg.end_location.lat,\r\n          lng: leg.end_location.lng\r\n        }\r\n      };\r\n    });\r\n\r\n    // Calcular resumen de la ruta\r\n    const totalDistance = route.legs.reduce((sum: number, leg: any) => sum + leg.distance.value, 0) / 1000;\r\n    const totalDuration = route.legs.reduce((sum: number, leg: any) => sum + leg.duration.value, 0) / 60;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        optimizedRoute: optimizedStops,\r\n        summary: {\r\n          totalDistance: Math.round(totalDistance * 100) / 100,\r\n          totalDuration: Math.ceil(totalDuration),\r\n          totalStops: stops.length,\r\n          estimatedStartTime: new Date().toISOString(),\r\n          estimatedEndTime: new Date(Date.now() + totalDuration * 60 * 1000).toISOString(),\r\n          optimizationMethod: 'google_maps',\r\n          polyline: route.overview_polyline?.points\r\n        },\r\n        startLocation: defaultStart,\r\n        googleMapsData: {\r\n          route,\r\n          waypointOrder\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in optimize-route API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}