{"version":3,"names":["createSecurityLogger","cov_20bcbv3fi5","f","s","default","_default","extractSecurityContext","securityLog","request","additionalContext","b","url","URL","forwarded","headers","get","ip","split","trim","requestId","Date","now","Math","random","toString","substr","userAgent","endpoint","pathname","method","timestamp","toISOString","SecurityLoggerImpl","formatLogEntry","event","logEntry","context","level","mapSeverityToLevel","severity","type","event_type","message","metadata","error","name","stack","undefined","JSON","stringify","process","env","NODE_ENV","shouldLog","logLevel","SECURITY_LOG_LEVEL","levels","low","medium","high","critical","currentLevel","eventLevel","log","colors","reset","color","console","toUpperCase","logAuthAttempt","success","userId","logRateLimitExceeded","logPermissionDenied","resource","action","logSuspiciousActivity","reason","logAdminAction","adminUserId","logApiError","globalSecurityLogger","bind","ctx","info","warn"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\logging\\security-logger.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - LOGGING ESTRUCTURADO DE SEGURIDAD\r\n// ===================================\r\n// Sistema de logging estructurado para eventos de seguridad\r\n// con contexto enriquecido y formato consistente\r\n\r\nimport { NextRequest } from 'next/server';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface SecurityLogContext {\r\n  userId?: string;\r\n  sessionId?: string;\r\n  ip?: string;\r\n  userAgent?: string;\r\n  endpoint: string;\r\n  method: string;\r\n  timestamp: string;\r\n  requestId?: string;\r\n}\r\n\r\nexport interface SecurityEvent {\r\n  type: SecurityEventType;\r\n  severity: SecuritySeverity;\r\n  message: string;\r\n  context: SecurityLogContext;\r\n  metadata?: Record<string, any>;\r\n  error?: Error;\r\n}\r\n\r\nexport type SecurityEventType = \r\n  | 'auth_attempt'\r\n  | 'auth_success'\r\n  | 'auth_failure'\r\n  | 'rate_limit_exceeded'\r\n  | 'permission_denied'\r\n  | 'suspicious_activity'\r\n  | 'data_access'\r\n  | 'admin_action'\r\n  | 'api_error'\r\n  | 'validation_error'\r\n  | 'security_scan'\r\n  | 'unauthorized_access';\r\n\r\nexport type SecuritySeverity = 'low' | 'medium' | 'high' | 'critical';\r\n\r\nexport interface SecurityLogger {\r\n  log(event: SecurityEvent): void;\r\n  logAuthAttempt(context: SecurityLogContext, success: boolean, metadata?: Record<string, any>): void;\r\n  logRateLimitExceeded(context: SecurityLogContext, metadata?: Record<string, any>): void;\r\n  logPermissionDenied(context: SecurityLogContext, resource: string, action: string): void;\r\n  logSuspiciousActivity(context: SecurityLogContext, reason: string, metadata?: Record<string, any>): void;\r\n  logAdminAction(context: SecurityLogContext, action: string, metadata?: Record<string, any>): void;\r\n  logApiError(context: SecurityLogContext, error: Error, metadata?: Record<string, any>): void;\r\n}\r\n\r\n// ===================================\r\n// EXTRACTOR DE CONTEXTO DE REQUEST\r\n// ===================================\r\n\r\nexport function extractSecurityContext(\r\n  request: NextRequest,\r\n  additionalContext: Partial<SecurityLogContext> = {}\r\n): SecurityLogContext {\r\n  const url = new URL(request.url);\r\n  \r\n  // Extraer IP de headers\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const ip = forwarded \r\n    ? forwarded.split(',')[0].trim() \r\n    : request.headers.get('x-real-ip') || 'unknown';\r\n  \r\n  // Generar request ID único\r\n  const requestId = request.headers.get('x-request-id') || \r\n    `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  \r\n  return {\r\n    ip,\r\n    userAgent: request.headers.get('user-agent') || 'unknown',\r\n    endpoint: url.pathname,\r\n    method: request.method,\r\n    timestamp: new Date().toISOString(),\r\n    requestId,\r\n    ...additionalContext,\r\n  };\r\n}\r\n\r\n// ===================================\r\n// IMPLEMENTACIÓN DEL LOGGER\r\n// ===================================\r\n\r\nclass SecurityLoggerImpl implements SecurityLogger {\r\n  private formatLogEntry(event: SecurityEvent): string {\r\n    const logEntry = {\r\n      timestamp: event.context.timestamp,\r\n      level: this.mapSeverityToLevel(event.severity),\r\n      type: 'SECURITY',\r\n      event_type: event.type,\r\n      severity: event.severity,\r\n      message: event.message,\r\n      context: event.context,\r\n      metadata: event.metadata,\r\n      error: event.error ? {\r\n        name: event.error.name,\r\n        message: event.error.message,\r\n        stack: event.error.stack,\r\n      } : undefined,\r\n    };\r\n    \r\n    return JSON.stringify(logEntry, null, process.env.NODE_ENV === 'development' ? 2 : 0);\r\n  }\r\n  \r\n  private mapSeverityToLevel(severity: SecuritySeverity): string {\r\n    switch (severity) {\r\n      case 'low': return 'info';\r\n      case 'medium': return 'warn';\r\n      case 'high': return 'error';\r\n      case 'critical': return 'error';\r\n      default: return 'info';\r\n    }\r\n  }\r\n  \r\n  private shouldLog(severity: SecuritySeverity): boolean {\r\n    const logLevel = process.env.SECURITY_LOG_LEVEL || 'medium';\r\n    \r\n    const levels = { low: 1, medium: 2, high: 3, critical: 4 };\r\n    const currentLevel = levels[logLevel as SecuritySeverity] || 2;\r\n    const eventLevel = levels[severity];\r\n    \r\n    return eventLevel >= currentLevel;\r\n  }\r\n  \r\n  log(event: SecurityEvent): void {\r\n    if (!this.shouldLog(event.severity)) {\r\n      return;\r\n    }\r\n    \r\n    const logEntry = this.formatLogEntry(event);\r\n    \r\n    // En desarrollo, usar console con colores\r\n    if (process.env.NODE_ENV === 'development') {\r\n      const colors = {\r\n        low: '\\x1b[36m',      // cyan\r\n        medium: '\\x1b[33m',   // yellow\r\n        high: '\\x1b[31m',     // red\r\n        critical: '\\x1b[35m', // magenta\r\n      };\r\n      \r\n      const reset = '\\x1b[0m';\r\n      const color = colors[event.severity];\r\n      \r\n      console.log(`${color}[SECURITY:${event.type.toUpperCase()}]${reset}`, logEntry);\r\n    } else {\r\n      // En producción, usar console.log estándar para integración con sistemas de logging\r\n      console.log(logEntry);\r\n    }\r\n    \r\n    // TODO: Integrar con servicio de logging externo (DataDog, LogRocket, etc.)\r\n    // await this.sendToExternalLogger(logEntry);\r\n  }\r\n  \r\n  logAuthAttempt(\r\n    context: SecurityLogContext, \r\n    success: boolean, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: success ? 'auth_success' : 'auth_failure',\r\n      severity: success ? 'low' : 'medium',\r\n      message: success \r\n        ? `Authentication successful for ${context.userId || 'unknown user'}` \r\n        : `Authentication failed for ${context.userId || 'unknown user'}`,\r\n      context,\r\n      metadata: {\r\n        success,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logRateLimitExceeded(\r\n    context: SecurityLogContext, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'rate_limit_exceeded',\r\n      severity: 'medium',\r\n      message: `Rate limit exceeded for ${context.endpoint}`,\r\n      context,\r\n      metadata: {\r\n        endpoint: context.endpoint,\r\n        ip: context.ip,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logPermissionDenied(\r\n    context: SecurityLogContext, \r\n    resource: string, \r\n    action: string\r\n  ): void {\r\n    this.log({\r\n      type: 'permission_denied',\r\n      severity: 'high',\r\n      message: `Permission denied: ${action} on ${resource}`,\r\n      context,\r\n      metadata: {\r\n        resource,\r\n        action,\r\n        userId: context.userId,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logSuspiciousActivity(\r\n    context: SecurityLogContext, \r\n    reason: string, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'suspicious_activity',\r\n      severity: 'high',\r\n      message: `Suspicious activity detected: ${reason}`,\r\n      context,\r\n      metadata: {\r\n        reason,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logAdminAction(\r\n    context: SecurityLogContext, \r\n    action: string, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'admin_action',\r\n      severity: 'medium',\r\n      message: `Admin action performed: ${action}`,\r\n      context,\r\n      metadata: {\r\n        action,\r\n        adminUserId: context.userId,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logApiError(\r\n    context: SecurityLogContext, \r\n    error: Error, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'api_error',\r\n      severity: 'medium',\r\n      message: `API error in ${context.endpoint}: ${error.message}`,\r\n      context,\r\n      error,\r\n      metadata,\r\n    });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// INSTANCIA GLOBAL Y FACTORY\r\n// ===================================\r\n\r\nconst globalSecurityLogger = new SecurityLoggerImpl();\r\n\r\n/**\r\n * Crea un logger de seguridad con contexto pre-configurado\r\n */\r\nexport function createSecurityLogger(\r\n  request?: NextRequest,\r\n  additionalContext?: Partial<SecurityLogContext>\r\n): SecurityLogger & { context: SecurityLogContext } {\r\n  const context = request \r\n    ? extractSecurityContext(request, additionalContext)\r\n    : {\r\n        endpoint: 'unknown',\r\n        method: 'unknown',\r\n        timestamp: new Date().toISOString(),\r\n        ...additionalContext,\r\n      } as SecurityLogContext;\r\n  \r\n  return {\r\n    context,\r\n    log: globalSecurityLogger.log.bind(globalSecurityLogger),\r\n    logAuthAttempt: (ctx, success, metadata) => \r\n      globalSecurityLogger.logAuthAttempt({ ...context, ...ctx }, success, metadata),\r\n    logRateLimitExceeded: (ctx, metadata) => \r\n      globalSecurityLogger.logRateLimitExceeded({ ...context, ...ctx }, metadata),\r\n    logPermissionDenied: (ctx, resource, action) => \r\n      globalSecurityLogger.logPermissionDenied({ ...context, ...ctx }, resource, action),\r\n    logSuspiciousActivity: (ctx, reason, metadata) => \r\n      globalSecurityLogger.logSuspiciousActivity({ ...context, ...ctx }, reason, metadata),\r\n    logAdminAction: (ctx, action, metadata) => \r\n      globalSecurityLogger.logAdminAction({ ...context, ...ctx }, action, metadata),\r\n    logApiError: (ctx, error, metadata) => \r\n      globalSecurityLogger.logApiError({ ...context, ...ctx }, error, metadata),\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HELPERS Y UTILIDADES\r\n// ===================================\r\n\r\n/**\r\n * Helper para logging rápido de eventos de seguridad\r\n */\r\nexport const securityLog = {\r\n  info: (message: string, context: Partial<SecurityLogContext> = {}) => {\r\n    globalSecurityLogger.log({\r\n      type: 'security_scan',\r\n      severity: 'low',\r\n      message,\r\n      context: {\r\n        endpoint: 'system',\r\n        method: 'SYSTEM',\r\n        timestamp: new Date().toISOString(),\r\n        ...context,\r\n      },\r\n    });\r\n  },\r\n  \r\n  warn: (message: string, context: Partial<SecurityLogContext> = {}) => {\r\n    globalSecurityLogger.log({\r\n      type: 'suspicious_activity',\r\n      severity: 'medium',\r\n      message,\r\n      context: {\r\n        endpoint: 'system',\r\n        method: 'SYSTEM',\r\n        timestamp: new Date().toISOString(),\r\n        ...context,\r\n      },\r\n    });\r\n  },\r\n  \r\n  error: (message: string, error?: Error, context: Partial<SecurityLogContext> = {}) => {\r\n    globalSecurityLogger.log({\r\n      type: 'api_error',\r\n      severity: 'high',\r\n      message,\r\n      error,\r\n      context: {\r\n        endpoint: 'system',\r\n        method: 'SYSTEM',\r\n        timestamp: new Date().toISOString(),\r\n        ...context,\r\n      },\r\n    });\r\n  },\r\n};\r\n\r\nexport default globalSecurityLogger;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}