{"version":3,"names":["cov_2rm5l7d1nt","actualCoverage","s","useErrorReporting","f","useProactiveMonitoring","useSystemHealth","isMonitoring","setIsMonitoring","_react","useState","stats","setStats","config","setConfig","_proactivemonitoring","proactiveMonitoring","getConfig","errorPatterns","setErrorPatterns","loading","setLoading","error","setError","useEffect","loadInitialData","b","interval","setInterval","refreshStats","clearInterval","currentConfig","enabled","patterns","getErrorPatterns","err","errorMessage","Error","message","_logger","logger","LogLevel","ERROR","LogCategory","SYSTEM","startMonitoring","useCallback","start","info","INFO","stopMonitoring","stop","handleReportError","context","reportError","updateConfig","newConfig","updatedConfig","addErrorPattern","pattern","updatedPatterns","patternId","id","removeErrorPattern","newStats","getMonitoringStats","getHealthStatus","systemHealth","status","getHealthColor","getHealthIcon","reportErrorCallback","health","setHealth","loadHealth"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useProactiveMonitoring.ts"],"sourcesContent":["'use client'\r\n\r\nimport { useState, useEffect, useCallback } from 'react'\r\nimport {\r\n  proactiveMonitoring,\r\n  reportError,\r\n  SystemHealth,\r\n  ErrorPattern,\r\n  MonitoringConfig\r\n} from '../lib/monitoring/proactive-monitoring'\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger'\r\n\r\nexport interface MonitoringStats {\r\n  totalErrors: number\r\n  activePatterns: number\r\n  recentAlerts: number\r\n  systemHealth: SystemHealth\r\n}\r\n\r\nexport interface UseProactiveMonitoringReturn {\r\n  // Estado\r\n  isMonitoring: boolean\r\n  stats: MonitoringStats | null\r\n  config: MonitoringConfig\r\n  errorPatterns: ErrorPattern[]\r\n  loading: boolean\r\n  error: string | null\r\n\r\n  // Acciones\r\n  startMonitoring: () => void\r\n  stopMonitoring: () => void\r\n  reportError: (error: Error | string, context?: Record<string, any>) => Promise<void>\r\n  updateConfig: (newConfig: Partial<MonitoringConfig>) => void\r\n  addErrorPattern: (pattern: ErrorPattern) => void\r\n  removeErrorPattern: (patternId: string) => void\r\n  refreshStats: () => Promise<void>\r\n  \r\n  // Utilidades\r\n  getHealthStatus: () => 'healthy' | 'warning' | 'critical' | 'down' | 'unknown'\r\n  getHealthColor: () => string\r\n  getHealthIcon: () => string\r\n}\r\n\r\n/**\r\n * Hook para gestionar el sistema de monitoreo proactivo\r\n */\r\nexport function useProactiveMonitoring(): UseProactiveMonitoringReturn {\r\n  const [isMonitoring, setIsMonitoring] = useState(false)\r\n  const [stats, setStats] = useState<MonitoringStats | null>(null)\r\n  const [config, setConfig] = useState<MonitoringConfig>(proactiveMonitoring.getConfig())\r\n  const [errorPatterns, setErrorPatterns] = useState<ErrorPattern[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  // Cargar datos iniciales\r\n  useEffect(() => {\r\n    loadInitialData()\r\n  }, [])\r\n\r\n  // Actualizar estad√≠sticas peri√≥dicamente\r\n  useEffect(() => {\r\n    if (!isMonitoring) {return}\r\n\r\n    const interval = setInterval(() => {\r\n      refreshStats()\r\n    }, 30000) // Cada 30 segundos\r\n\r\n    return () => clearInterval(interval)\r\n  }, [isMonitoring])\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      // Cargar configuraci√≥n\r\n      const currentConfig = proactiveMonitoring.getConfig()\r\n      setConfig(currentConfig)\r\n      setIsMonitoring(currentConfig.enabled)\r\n\r\n      // Cargar patrones de error\r\n      const patterns = proactiveMonitoring.getErrorPatterns()\r\n      setErrorPatterns(patterns)\r\n\r\n      // Cargar estad√≠sticas\r\n      await refreshStats()\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error loading monitoring data'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to load monitoring data', { error: err }, LogCategory.SYSTEM)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const startMonitoring = useCallback(() => {\r\n    try {\r\n      proactiveMonitoring.start()\r\n      setIsMonitoring(true)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Monitoring started via hook', {}, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to start monitoring'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to start monitoring', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    try {\r\n      proactiveMonitoring.stop()\r\n      setIsMonitoring(false)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Monitoring stopped via hook', {}, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to stop monitoring'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to stop monitoring', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const handleReportError = useCallback(async (error: Error | string, context?: Record<string, any>) => {\r\n    try {\r\n      await reportError(error, context)\r\n      // Actualizar estad√≠sticas despu√©s de reportar error\r\n      await refreshStats()\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to report error'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to report error', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const updateConfig = useCallback((newConfig: Partial<MonitoringConfig>) => {\r\n    try {\r\n      proactiveMonitoring.updateConfig(newConfig)\r\n      const updatedConfig = proactiveMonitoring.getConfig()\r\n      setConfig(updatedConfig)\r\n      setIsMonitoring(updatedConfig.enabled)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Monitoring config updated', { newConfig }, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update config'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to update config', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const addErrorPattern = useCallback((pattern: ErrorPattern) => {\r\n    try {\r\n      proactiveMonitoring.addErrorPattern(pattern)\r\n      const updatedPatterns = proactiveMonitoring.getErrorPatterns()\r\n      setErrorPatterns(updatedPatterns)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Error pattern added', { patternId: pattern.id }, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to add error pattern'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to add error pattern', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const removeErrorPattern = useCallback((patternId: string) => {\r\n    try {\r\n      proactiveMonitoring.removeErrorPattern(patternId)\r\n      const updatedPatterns = proactiveMonitoring.getErrorPatterns()\r\n      setErrorPatterns(updatedPatterns)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Error pattern removed', { patternId }, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to remove error pattern'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to remove error pattern', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const refreshStats = useCallback(async () => {\r\n    try {\r\n      const newStats = await proactiveMonitoring.getMonitoringStats()\r\n      setStats(newStats)\r\n      setError(null)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to refresh stats'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to refresh stats', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const getHealthStatus = useCallback((): 'healthy' | 'warning' | 'critical' | 'down' | 'unknown' => {\r\n    if (!stats?.systemHealth) {return 'unknown'}\r\n    return stats.systemHealth.status\r\n  }, [stats])\r\n\r\n  const getHealthColor = useCallback((): string => {\r\n    const status = getHealthStatus()\r\n    switch (status) {\r\n      case 'healthy':\r\n        return 'text-green-500'\r\n      case 'warning':\r\n        return 'text-yellow-500'\r\n      case 'critical':\r\n        return 'text-red-500'\r\n      case 'down':\r\n        return 'text-red-700'\r\n      default:\r\n        return 'text-gray-500'\r\n    }\r\n  }, [getHealthStatus])\r\n\r\n  const getHealthIcon = useCallback((): string => {\r\n    const status = getHealthStatus()\r\n    switch (status) {\r\n      case 'healthy':\r\n        return '‚úÖ'\r\n      case 'warning':\r\n        return '‚ö†Ô∏è'\r\n      case 'critical':\r\n        return 'üö®'\r\n      case 'down':\r\n        return '‚ùå'\r\n      default:\r\n        return '‚ùì'\r\n    }\r\n  }, [getHealthStatus])\r\n\r\n  return {\r\n    // Estado\r\n    isMonitoring,\r\n    stats,\r\n    config,\r\n    errorPatterns,\r\n    loading,\r\n    error,\r\n\r\n    // Acciones\r\n    startMonitoring,\r\n    stopMonitoring,\r\n    reportError: handleReportError,\r\n    updateConfig,\r\n    addErrorPattern,\r\n    removeErrorPattern,\r\n    refreshStats,\r\n\r\n    // Utilidades\r\n    getHealthStatus,\r\n    getHealthColor,\r\n    getHealthIcon\r\n  }\r\n}\r\n\r\n/**\r\n * Hook simplificado para solo reportar errores\r\n */\r\nexport function useErrorReporting() {\r\n  const reportErrorCallback = useCallback(async (error: Error | string, context?: Record<string, any>) => {\r\n    try {\r\n      await reportError(error, context)\r\n    } catch (err) {\r\n      logger.error(LogLevel.ERROR, 'Failed to report error', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  return { reportError: reportErrorCallback }\r\n}\r\n\r\n/**\r\n * Hook para monitorear la salud del sistema en tiempo real\r\n */\r\nexport function useSystemHealth() {\r\n  const [health, setHealth] = useState<SystemHealth | null>(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const loadHealth = async () => {\r\n      try {\r\n        const stats = await proactiveMonitoring.getMonitoringStats()\r\n        setHealth(stats.systemHealth)\r\n      } catch (err) {\r\n        logger.error(LogLevel.ERROR, 'Failed to load system health', { error: err }, LogCategory.SYSTEM)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    loadHealth()\r\n\r\n    // Actualizar cada minuto\r\n    const interval = setInterval(loadHealth, 60000)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return { health, loading }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}