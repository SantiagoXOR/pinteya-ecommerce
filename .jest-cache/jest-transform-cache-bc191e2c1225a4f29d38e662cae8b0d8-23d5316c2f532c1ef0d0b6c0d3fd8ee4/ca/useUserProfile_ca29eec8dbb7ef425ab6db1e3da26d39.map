{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useUserProfile.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - HOOK PARA PERFIL DE USUARIO\n// ===================================\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { useAuth } from './useAuth'\nimport { toast } from 'sonner'\nimport { useNotifications } from './useNotifications'\n\nexport interface UserProfile {\n  id: string\n  clerk_id: string\n  name: string\n  email: string\n  phone?: string\n  avatar_url?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface UpdateProfileData {\n  name: string\n  email: string\n  phone?: string\n}\n\nexport interface UseUserProfileReturn {\n  profile: UserProfile | null\n  loading: boolean\n  error: string | null\n  updateProfile: (data: UpdateProfileData) => Promise<boolean>\n  refreshProfile: () => Promise<void>\n  uploadAvatar: (file: File) => Promise<boolean>\n  deleteAvatar: () => Promise<boolean>\n}\n\nexport function useUserProfile(): UseUserProfileReturn {\n  const { isSignedIn, isLoaded } = useAuth()\n  const { notifyProfileChange, notifySecurityAlert } = useNotifications()\n  const [profile, setProfile] = useState<UserProfile | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchProfile = useCallback(async () => {\n    if (!isSignedIn || !isLoaded) {\n      setLoading(false)\n      return\n    }\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await fetch('/api/user/profile', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n\n      if (!response.ok) {\n        throw new Error('Error al obtener el perfil')\n      }\n\n      const data = await response.json()\n\n      if (data.success && data.user) {\n        setProfile(data.user)\n      } else {\n        throw new Error(data.error || 'Error al cargar el perfil')\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido'\n      setError(errorMessage)\n      console.error('Error al obtener perfil:', err)\n    } finally {\n      setLoading(false)\n    }\n  }, [isSignedIn, isLoaded])\n\n  const updateProfile = useCallback(\n    async (data: UpdateProfileData): Promise<boolean> => {\n      if (!isSignedIn) {\n        toast.error('Debes estar autenticado para actualizar tu perfil')\n        return false\n      }\n\n      try {\n        setLoading(true)\n        setError(null)\n\n        // Guardar valores anteriores para notificaciones\n        const oldEmail = profile?.email\n        const oldPhone = profile?.phone\n\n        const response = await fetch('/api/user/profile', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        })\n\n        if (!response.ok) {\n          throw new Error('Error al actualizar el perfil')\n        }\n\n        const result = await response.json()\n\n        if (result.success && result.user) {\n          setProfile(result.user)\n\n          // Notificaciones básicas\n          await notifyProfileChange('Perfil actualizado correctamente')\n\n          // Notificaciones por email para cambios críticos\n          if (data.email && data.email !== oldEmail) {\n            await notifySecurityAlert(\n              'Tu email ha sido actualizado. Revisa tu bandeja de entrada.',\n              {\n                type: 'profile_email_changed',\n                oldValue: oldEmail,\n                newValue: data.email,\n              },\n              { toastType: 'info', toastDuration: 6000 }\n            )\n          }\n\n          if (data.phone && data.phone !== oldPhone) {\n            await notifySecurityAlert(\n              'Tu teléfono ha sido actualizado.',\n              {\n                type: 'profile_phone_changed',\n                oldValue: oldPhone,\n                newValue: data.phone,\n              },\n              { toastType: 'info', toastDuration: 4000 }\n            )\n          }\n\n          return true\n        } else {\n          throw new Error(result.error || 'Error al actualizar el perfil')\n        }\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Error desconocido'\n        setError(errorMessage)\n        toast.error(errorMessage)\n        console.error('Error al actualizar perfil:', err)\n        return false\n      } finally {\n        setLoading(false)\n      }\n    },\n    [isSignedIn, profile, notifyProfileChange, notifySecurityAlert]\n  )\n\n  const uploadAvatar = useCallback(\n    async (file: File): Promise<boolean> => {\n      if (!isSignedIn) {\n        toast.error('Debes estar autenticado para subir un avatar')\n        return false\n      }\n\n      try {\n        setLoading(true)\n        setError(null)\n\n        const formData = new FormData()\n        formData.append('avatar', file)\n\n        const response = await fetch('/api/user/avatar', {\n          method: 'POST',\n          body: formData,\n        })\n\n        if (!response.ok) {\n          throw new Error('Error al subir el avatar')\n        }\n\n        const result = await response.json()\n\n        if (result.success) {\n          if (profile) {\n            setProfile({\n              ...profile,\n              avatar_url: result.avatar_url,\n              updated_at: new Date().toISOString(),\n            })\n          }\n          toast.success('Avatar actualizado correctamente')\n          return true\n        } else {\n          throw new Error(result.error || 'Error al subir el avatar')\n        }\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Error desconocido'\n        setError(errorMessage)\n        toast.error(errorMessage)\n        console.error('Error al subir avatar:', err)\n        return false\n      } finally {\n        setLoading(false)\n      }\n    },\n    [isSignedIn, profile]\n  )\n\n  const deleteAvatar = useCallback(async (): Promise<boolean> => {\n    if (!isSignedIn) {\n      toast.error('Debes estar autenticado para eliminar tu avatar')\n      return false\n    }\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await fetch('/api/user/avatar', {\n        method: 'DELETE',\n      })\n\n      if (!response.ok) {\n        throw new Error('Error al eliminar el avatar')\n      }\n\n      const result = await response.json()\n\n      if (result.success) {\n        if (profile) {\n          setProfile({\n            ...profile,\n            avatar_url: undefined,\n            updated_at: new Date().toISOString(),\n          })\n        }\n        toast.success('Avatar eliminado correctamente')\n        return true\n      } else {\n        throw new Error(result.error || 'Error al eliminar el avatar')\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido'\n      setError(errorMessage)\n      toast.error(errorMessage)\n      console.error('Error al eliminar avatar:', err)\n      return false\n    } finally {\n      setLoading(false)\n    }\n  }, [isSignedIn, profile])\n\n  const refreshProfile = useCallback(async () => {\n    await fetchProfile()\n  }, [fetchProfile])\n\n  useEffect(() => {\n    fetchProfile()\n  }, [fetchProfile])\n\n  return {\n    profile,\n    loading,\n    error,\n    updateProfile,\n    refreshProfile,\n    uploadAvatar,\n    deleteAvatar,\n  }\n}\n"],"names":["useUserProfile","isSignedIn","isLoaded","useAuth","notifyProfileChange","notifySecurityAlert","useNotifications","profile","setProfile","useState","loading","setLoading","error","setError","fetchProfile","useCallback","response","fetch","method","headers","ok","Error","data","json","success","user","err","errorMessage","message","console","updateProfile","toast","oldEmail","email","oldPhone","phone","body","JSON","stringify","result","type","oldValue","newValue","toastType","toastDuration","uploadAvatar","file","formData","FormData","append","avatar_url","updated_at","Date","toISOString","deleteAvatar","undefined","refreshProfile","useEffect"],"mappings":"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"}