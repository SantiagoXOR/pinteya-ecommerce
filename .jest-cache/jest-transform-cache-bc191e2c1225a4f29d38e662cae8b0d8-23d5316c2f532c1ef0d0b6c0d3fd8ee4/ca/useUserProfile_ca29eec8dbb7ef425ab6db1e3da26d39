98eae0bb4f86fcdb45411627aedfc881
// ===================================
// PINTEYA E-COMMERCE - HOOK PARA PERFIL DE USUARIO
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useUserProfile", {
    enumerable: true,
    get: function() {
        return useUserProfile;
    }
});
const _react = require("react");
const _useAuth = require("./useAuth");
const _sonner = require("sonner");
const _useNotifications = require("./useNotifications");
function useUserProfile() {
    const { isSignedIn, isLoaded } = (0, _useAuth.useAuth)();
    const { notifyProfileChange, notifySecurityAlert } = (0, _useNotifications.useNotifications)();
    const [profile, setProfile] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const fetchProfile = (0, _react.useCallback)(async ()=>{
        if (!isSignedIn || !isLoaded) {
            setLoading(false);
            return;
        }
        try {
            setLoading(true);
            setError(null);
            const response = await fetch('/api/user/profile', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            if (!response.ok) {
                throw new Error('Error al obtener el perfil');
            }
            const data = await response.json();
            if (data.success && data.user) {
                setProfile(data.user);
            } else {
                throw new Error(data.error || 'Error al cargar el perfil');
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
            setError(errorMessage);
            console.error('Error al obtener perfil:', err);
        } finally{
            setLoading(false);
        }
    }, [
        isSignedIn,
        isLoaded
    ]);
    const updateProfile = (0, _react.useCallback)(async (data)=>{
        if (!isSignedIn) {
            _sonner.toast.error('Debes estar autenticado para actualizar tu perfil');
            return false;
        }
        try {
            setLoading(true);
            setError(null);
            // Guardar valores anteriores para notificaciones
            const oldEmail = profile?.email;
            const oldPhone = profile?.phone;
            const response = await fetch('/api/user/profile', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            if (!response.ok) {
                throw new Error('Error al actualizar el perfil');
            }
            const result = await response.json();
            if (result.success && result.user) {
                setProfile(result.user);
                // Notificaciones básicas
                await notifyProfileChange('Perfil actualizado correctamente');
                // Notificaciones por email para cambios críticos
                if (data.email && data.email !== oldEmail) {
                    await notifySecurityAlert('Tu email ha sido actualizado. Revisa tu bandeja de entrada.', {
                        type: 'profile_email_changed',
                        oldValue: oldEmail,
                        newValue: data.email
                    }, {
                        toastType: 'info',
                        toastDuration: 6000
                    });
                }
                if (data.phone && data.phone !== oldPhone) {
                    await notifySecurityAlert('Tu teléfono ha sido actualizado.', {
                        type: 'profile_phone_changed',
                        oldValue: oldPhone,
                        newValue: data.phone
                    }, {
                        toastType: 'info',
                        toastDuration: 4000
                    });
                }
                return true;
            } else {
                throw new Error(result.error || 'Error al actualizar el perfil');
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
            setError(errorMessage);
            _sonner.toast.error(errorMessage);
            console.error('Error al actualizar perfil:', err);
            return false;
        } finally{
            setLoading(false);
        }
    }, [
        isSignedIn,
        profile,
        notifyProfileChange,
        notifySecurityAlert
    ]);
    const uploadAvatar = (0, _react.useCallback)(async (file)=>{
        if (!isSignedIn) {
            _sonner.toast.error('Debes estar autenticado para subir un avatar');
            return false;
        }
        try {
            setLoading(true);
            setError(null);
            const formData = new FormData();
            formData.append('avatar', file);
            const response = await fetch('/api/user/avatar', {
                method: 'POST',
                body: formData
            });
            if (!response.ok) {
                throw new Error('Error al subir el avatar');
            }
            const result = await response.json();
            if (result.success) {
                if (profile) {
                    setProfile({
                        ...profile,
                        avatar_url: result.avatar_url,
                        updated_at: new Date().toISOString()
                    });
                }
                _sonner.toast.success('Avatar actualizado correctamente');
                return true;
            } else {
                throw new Error(result.error || 'Error al subir el avatar');
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
            setError(errorMessage);
            _sonner.toast.error(errorMessage);
            console.error('Error al subir avatar:', err);
            return false;
        } finally{
            setLoading(false);
        }
    }, [
        isSignedIn,
        profile
    ]);
    const deleteAvatar = (0, _react.useCallback)(async ()=>{
        if (!isSignedIn) {
            _sonner.toast.error('Debes estar autenticado para eliminar tu avatar');
            return false;
        }
        try {
            setLoading(true);
            setError(null);
            const response = await fetch('/api/user/avatar', {
                method: 'DELETE'
            });
            if (!response.ok) {
                throw new Error('Error al eliminar el avatar');
            }
            const result = await response.json();
            if (result.success) {
                if (profile) {
                    setProfile({
                        ...profile,
                        avatar_url: undefined,
                        updated_at: new Date().toISOString()
                    });
                }
                _sonner.toast.success('Avatar eliminado correctamente');
                return true;
            } else {
                throw new Error(result.error || 'Error al eliminar el avatar');
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
            setError(errorMessage);
            _sonner.toast.error(errorMessage);
            console.error('Error al eliminar avatar:', err);
            return false;
        } finally{
            setLoading(false);
        }
    }, [
        isSignedIn,
        profile
    ]);
    const refreshProfile = (0, _react.useCallback)(async ()=>{
        await fetchProfile();
    }, [
        fetchProfile
    ]);
    (0, _react.useEffect)(()=>{
        fetchProfile();
    }, [
        fetchProfile
    ]);
    return {
        profile,
        loading,
        error,
        updateProfile,
        refreshProfile,
        uploadAvatar,
        deleteAvatar
    };
}

//# sourceMappingURL=data:application/json;base64,