{"version":3,"names":["useBulkTrackingEvents","cov_1jg2gi6udf","f","s","useCreateTrackingEvent","useRealTimeTracking","useTrackingAnalytics","useTrackingEvents","useTrackingTimeline","TRACKING_QUERY_KEY","REAL_TIME_REFETCH_INTERVAL","fetchTrackingEvents","shipmentId","response","fetch","method","headers","ok","b","errorData","json","catch","Error","error","status","statusText","result","data","createTrackingEvent","body","JSON","stringify","bulkCreateTrackingEvents","events","options","queryClient","_reactquery","useQueryClient","queryKey","isLoading","refetch","useQuery","queryFn","enabled","refetchInterval","realTime","staleTime","retry","retryDelay","attemptIndex","Math","min","tracking_events","shipment","useMutation","mutationFn","onSuccess","newEvent","setQueryData","oldData","invalidateQueries","_sonner","toast","success","description","onError","message","newEvents","length","timelineEvents","map","event","isCompleted","isCurrent","isPending","sort","a","Date","occurred_at","getTime","currentStatus","lastEvent","expectedStates","label","timelineStates","state","hasEvent","some","find","progress","completed","filter","total","percentage","isRealTimeEnabled","setIsRealTimeEnabled","_react","useState","lastUpdate","setLastUpdate","useEffect","enableRealTime","useCallback","info","disableRealTime","forceRefresh","totalEvents","uniqueLocations","Set","e","location","Boolean","eventTimes","averageTimeBetweenEvents","slice","reduce","acc","time","index","firstEvent","totalTransitTime","eventsWithLocation","latitude","longitude","averageSpeed","round","locationCoverage"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useTrackingEvents.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: TRACKING EVENTS ENTERPRISE\r\n// Descripción: Hook para gestión de eventos de tracking tiempo real\r\n// Basado en: Patrones TanStack Query + WebSocket simulation\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { \r\n  TrackingEvent,\r\n  CreateTrackingEventRequest,\r\n  Shipment,\r\n  UseTrackingEventsReturn \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN DE QUERIES\r\n// =====================================================\r\n\r\nconst TRACKING_QUERY_KEY = ['admin', 'logistics', 'tracking'];\r\nconst REAL_TIME_REFETCH_INTERVAL = 30000; // 30 segundos\r\n\r\n// =====================================================\r\n// FUNCIONES DE API\r\n// =====================================================\r\n\r\nasync function fetchTrackingEvents(shipmentId: number): Promise<{\r\n  shipment: Shipment;\r\n  tracking_events: TrackingEvent[];\r\n}> {\r\n  const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    }\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\nasync function createTrackingEvent(\r\n  shipmentId: number, \r\n  data: Omit<CreateTrackingEventRequest, 'shipment_id'>\r\n): Promise<TrackingEvent> {\r\n  const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\nasync function bulkCreateTrackingEvents(\r\n  shipmentId: number,\r\n  events: Omit<CreateTrackingEventRequest, 'shipment_id'>[]\r\n): Promise<TrackingEvent[]> {\r\n  const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ events })\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL: useTrackingEvents\r\n// =====================================================\r\n\r\nexport function useTrackingEvents(\r\n  shipmentId: number,\r\n  options?: {\r\n    enabled?: boolean;\r\n    refetchInterval?: number;\r\n    realTime?: boolean;\r\n  }\r\n): UseTrackingEventsReturn {\r\n  const queryClient = useQueryClient();\r\n  \r\n  const queryKey = [...TRACKING_QUERY_KEY, shipmentId];\r\n  \r\n  const {\r\n    data,\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey,\r\n    queryFn: () => fetchTrackingEvents(shipmentId),\r\n    enabled: options?.enabled ?? true,\r\n    refetchInterval: options?.realTime \r\n      ? (options?.refetchInterval ?? REAL_TIME_REFETCH_INTERVAL)\r\n      : false,\r\n    staleTime: options?.realTime ? 10000 : 60000,\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000)\r\n  });\r\n  \r\n  return {\r\n    data: data?.tracking_events,\r\n    shipment: data?.shipment,\r\n    isLoading,\r\n    error: error as Error | null,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useCreateTrackingEvent\r\n// =====================================================\r\n\r\nexport function useCreateTrackingEvent(shipmentId: number) {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: (data: Omit<CreateTrackingEventRequest, 'shipment_id'>) => \r\n      createTrackingEvent(shipmentId, data),\r\n    onSuccess: (newEvent) => {\r\n      // Actualizar cache de tracking events\r\n      const queryKey = [...TRACKING_QUERY_KEY, shipmentId];\r\n      \r\n      queryClient.setQueryData(queryKey, (oldData: any) => {\r\n        if (!oldData) {return oldData;}\r\n        \r\n        return {\r\n          ...oldData,\r\n          tracking_events: [newEvent, ...oldData.tracking_events]\r\n        };\r\n      });\r\n      \r\n      // Invalidar cache relacionado\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'shipments'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success('Evento de tracking agregado', {\r\n        description: newEvent.description\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al agregar evento', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useBulkTrackingEvents\r\n// =====================================================\r\n\r\nexport function useBulkTrackingEvents(shipmentId: number) {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: (events: Omit<CreateTrackingEventRequest, 'shipment_id'>[]) => \r\n      bulkCreateTrackingEvents(shipmentId, events),\r\n    onSuccess: (newEvents) => {\r\n      // Actualizar cache\r\n      const queryKey = [...TRACKING_QUERY_KEY, shipmentId];\r\n      \r\n      queryClient.setQueryData(queryKey, (oldData: any) => {\r\n        if (!oldData) {return oldData;}\r\n        \r\n        return {\r\n          ...oldData,\r\n          tracking_events: [...newEvents, ...oldData.tracking_events]\r\n        };\r\n      });\r\n      \r\n      // Invalidar cache relacionado\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'shipments'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success(`${newEvents.length} eventos agregados exitosamente`);\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al agregar eventos', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useTrackingTimeline\r\n// =====================================================\r\n\r\nexport function useTrackingTimeline(shipmentId: number) {\r\n  const { data: events, shipment, isLoading, error } = useTrackingEvents(shipmentId, {\r\n    realTime: true\r\n  });\r\n  \r\n  // Procesar eventos para timeline\r\n  const timelineEvents = events?.map(event => ({\r\n    ...event,\r\n    isCompleted: true,\r\n    isCurrent: false,\r\n    isPending: false\r\n  })).sort((a, b) => \r\n    new Date(a.occurred_at).getTime() - new Date(b.occurred_at).getTime()\r\n  ) || [];\r\n  \r\n  // Determinar estado actual\r\n  const currentStatus = shipment?.status;\r\n  const lastEvent = timelineEvents[timelineEvents.length - 1];\r\n  \r\n  // Estados esperados del timeline\r\n  const expectedStates = [\r\n    { status: 'pending', label: 'Pendiente', description: 'Envío creado' },\r\n    { status: 'confirmed', label: 'Confirmado', description: 'Envío confirmado' },\r\n    { status: 'picked_up', label: 'Recolectado', description: 'Recolectado por courier' },\r\n    { status: 'in_transit', label: 'En tránsito', description: 'En camino' },\r\n    { status: 'out_for_delivery', label: 'En reparto', description: 'Salió para entrega' },\r\n    { status: 'delivered', label: 'Entregado', description: 'Entregado exitosamente' }\r\n  ];\r\n  \r\n  const timelineStates = expectedStates.map(state => {\r\n    const hasEvent = timelineEvents.some(event => event.status === state.status);\r\n    const isCurrent = currentStatus === state.status;\r\n    const isCompleted = hasEvent && !isCurrent;\r\n    const isPending = !hasEvent && !isCurrent;\r\n    \r\n    return {\r\n      ...state,\r\n      hasEvent,\r\n      isCurrent,\r\n      isCompleted,\r\n      isPending,\r\n      event: timelineEvents.find(event => event.status === state.status)\r\n    };\r\n  });\r\n  \r\n  return {\r\n    events: timelineEvents,\r\n    timelineStates,\r\n    shipment,\r\n    currentStatus,\r\n    lastEvent,\r\n    isLoading,\r\n    error,\r\n    progress: {\r\n      completed: timelineStates.filter(state => state.isCompleted).length,\r\n      total: timelineStates.length,\r\n      percentage: (timelineStates.filter(state => state.isCompleted).length / timelineStates.length) * 100\r\n    }\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useRealTimeTracking\r\n// =====================================================\r\n\r\nexport function useRealTimeTracking(shipmentId: number) {\r\n  const [isRealTimeEnabled, setIsRealTimeEnabled] = useState(false);\r\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\r\n  \r\n  const { data: events, refetch } = useTrackingEvents(shipmentId, {\r\n    realTime: isRealTimeEnabled,\r\n    refetchInterval: 15000 // 15 segundos para tiempo real\r\n  });\r\n  \r\n  // Simular notificaciones de nuevos eventos\r\n  useEffect(() => {\r\n    if (events && events.length > 0) {\r\n      setLastUpdate(new Date());\r\n    }\r\n  }, [events]);\r\n  \r\n  const enableRealTime = useCallback(() => {\r\n    setIsRealTimeEnabled(true);\r\n    toast.info('Tracking en tiempo real activado');\r\n  }, []);\r\n  \r\n  const disableRealTime = useCallback(() => {\r\n    setIsRealTimeEnabled(false);\r\n    toast.info('Tracking en tiempo real desactivado');\r\n  }, []);\r\n  \r\n  const forceRefresh = useCallback(async () => {\r\n    await refetch();\r\n    setLastUpdate(new Date());\r\n    toast.success('Tracking actualizado');\r\n  }, [refetch]);\r\n  \r\n  return {\r\n    events,\r\n    isRealTimeEnabled,\r\n    lastUpdate,\r\n    enableRealTime,\r\n    disableRealTime,\r\n    forceRefresh\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useTrackingAnalytics\r\n// =====================================================\r\n\r\nexport function useTrackingAnalytics(shipmentId: number) {\r\n  const { data: events, shipment } = useTrackingEvents(shipmentId);\r\n  \r\n  if (!events || !shipment) {\r\n    return null;\r\n  }\r\n  \r\n  // Calcular métricas\r\n  const totalEvents = events.length;\r\n  const uniqueLocations = [...new Set(events.map(e => e.location).filter(Boolean))].length;\r\n  \r\n  // Tiempo entre eventos\r\n  const eventTimes = events\r\n    .map(e => new Date(e.occurred_at).getTime())\r\n    .sort((a, b) => a - b);\r\n  \r\n  const averageTimeBetweenEvents = eventTimes.length > 1\r\n    ? eventTimes.slice(1).reduce((acc, time, index) => {\r\n        return acc + (time - eventTimes[index]);\r\n      }, 0) / (eventTimes.length - 1)\r\n    : 0;\r\n  \r\n  // Tiempo total de tránsito\r\n  const firstEvent = events[events.length - 1]; // Más antiguo\r\n  const lastEvent = events[0]; // Más reciente\r\n  \r\n  const totalTransitTime = firstEvent && lastEvent\r\n    ? new Date(lastEvent.occurred_at).getTime() - new Date(firstEvent.occurred_at).getTime()\r\n    : 0;\r\n  \r\n  // Velocidad promedio (si hay ubicaciones)\r\n  const eventsWithLocation = events.filter(e => e.latitude && e.longitude);\r\n  let averageSpeed = 0;\r\n  \r\n  if (eventsWithLocation.length > 1) {\r\n    // Calcular distancia total aproximada entre puntos\r\n    // (implementación simplificada)\r\n    averageSpeed = uniqueLocations / (totalTransitTime / (1000 * 60 * 60)); // km/h aproximado\r\n  }\r\n  \r\n  return {\r\n    totalEvents,\r\n    uniqueLocations,\r\n    averageTimeBetweenEvents: averageTimeBetweenEvents / (1000 * 60), // minutos\r\n    totalTransitTime: totalTransitTime / (1000 * 60 * 60), // horas\r\n    averageSpeed: Math.round(averageSpeed * 10) / 10,\r\n    eventsWithLocation: eventsWithLocation.length,\r\n    locationCoverage: eventsWithLocation.length / totalEvents * 100\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// TIPOS EXTENDIDOS\r\n// =====================================================\r\n\r\nexport interface UseTrackingEventsExtendedReturn extends UseTrackingEventsReturn {\r\n  shipment?: Shipment;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}