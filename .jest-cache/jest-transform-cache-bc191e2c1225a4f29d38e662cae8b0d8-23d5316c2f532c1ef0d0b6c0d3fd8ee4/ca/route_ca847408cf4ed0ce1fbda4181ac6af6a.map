{"version":3,"names":["GET","cov_2aa1cit2mh","f","s","POST","PUT","CreateTrackingEventSchema","_zod","z","object","status","string","min","description","location","optional","latitude","number","max","longitude","occurred_at","datetime","external_event_id","raw_data","record","any","validateAdminAuth","request","session","_auth","auth","user","b","_server","NextResponse","json","error","role","validateShipmentExists","supabase","shipmentId","data","from","select","eq","single","updateShipmentStatus","statusTimestampMap","updateData","Date","toISOString","update","params","authError","parseInt","id","isNaN","_server1","createClient","shipment","trackingEvents","order","ascending","tracking_events","console","details","Error","message","body","validatedData","parse","trackingEvent","trackingError","insert","shipment_id","statusesToUpdate","includes","actual_delivery_date","split","ZodError","errors","reduce","acc","err","path","join","events","Array","isArray","length","validatedEvents","map","event","eventsToInsert","insertedEvents","insertError","lastValidStatus","filter","sort","a","getTime"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\tracking\\[id]\\route.ts"],"sourcesContent":["// =====================================================\r\n// API: TRACKING DE ENVÍOS ENTERPRISE\r\n// Endpoints: GET/POST /api/admin/logistics/tracking/[id]\r\n// Descripción: Sistema de tracking tiempo real\r\n// Basado en: Patrones WooCommerce + Spree Commerce\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\nimport { Database } from '@/types/database';\r\nimport { z } from 'zod';\r\nimport { \r\n  TrackingEvent,\r\n  CreateTrackingEventRequest,\r\n  Shipment \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// SCHEMAS DE VALIDACIÓN ZOD\r\n// =====================================================\r\n\r\nconst CreateTrackingEventSchema = z.object({\r\n  status: z.string().min(1, 'Status es requerido'),\r\n  description: z.string().min(1, 'Descripción es requerida'),\r\n  location: z.string().optional(),\r\n  latitude: z.number().min(-90).max(90).optional(),\r\n  longitude: z.number().min(-180).max(180).optional(),\r\n  occurred_at: z.string().datetime('Fecha debe ser válida'),\r\n  external_event_id: z.string().optional(),\r\n  raw_data: z.record(z.any()).optional()\r\n});\r\n\r\n// =====================================================\r\n// MIDDLEWARE DE AUTENTICACIÓN\r\n// =====================================================\r\nasync function validateAdminAuth(request: NextRequest) {\r\n  const session = await auth();\r\n  \r\n  if (!session?.user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  if (session.user.role !== 'admin' && session.user.role !== 'manager') {\r\n    return NextResponse.json(\r\n      { error: 'Insufficient permissions' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nasync function validateShipmentExists(supabase: ReturnType<typeof createClient<Database>>, shipmentId: number): Promise<Shipment | null> {\r\n  const { data, error } = await supabase\r\n    .from('shipments')\r\n    .select(`\r\n      *,\r\n      carrier:couriers(id, name, code, logo_url),\r\n      items:shipment_items(\r\n        id, quantity, weight_kg,\r\n        product:products(id, name, sku, image_url)\r\n      )\r\n    `)\r\n    .eq('id', shipmentId)\r\n    .single();\r\n  \r\n  if (error || !data) {return null;}\r\n  return data;\r\n}\r\n\r\nasync function updateShipmentStatus(\r\n  supabase: ReturnType<typeof createClient<Database>>, \r\n  shipmentId: number, \r\n  status: string\r\n): Promise<void> {\r\n  const statusTimestampMap: Record<string, string> = {\r\n    'confirmed': 'confirmed_at',\r\n    'picked_up': 'picked_up_at',\r\n    'shipped': 'shipped_at',\r\n    'delivered': 'delivered_at',\r\n    'cancelled': 'cancelled_at'\r\n  };\r\n  \r\n  const updateData: any = { status };\r\n  \r\n  // Actualizar timestamp correspondiente si aplica\r\n  if (statusTimestampMap[status]) {\r\n    updateData[statusTimestampMap[status]] = new Date().toISOString();\r\n  }\r\n  \r\n  const { error } = await supabase\r\n    .from('shipments')\r\n    .update(updateData)\r\n    .eq('id', shipmentId);\r\n  \r\n  if (error) {throw error;}\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER EVENTOS DE TRACKING\r\n// =====================================================\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Validar ID del envío\r\n    const shipmentId = parseInt(params.id);\r\n    if (isNaN(shipmentId)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid shipment ID' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = createClient();\r\n    \r\n    // Validar que el envío existe\r\n    const shipment = await validateShipmentExists(supabase, shipmentId);\r\n    if (!shipment) {\r\n      return NextResponse.json(\r\n        { error: 'Shipment not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Obtener eventos de tracking\r\n    const { data: trackingEvents, error } = await supabase\r\n      .from('tracking_events')\r\n      .select('*')\r\n      .eq('shipment_id', shipmentId)\r\n      .order('occurred_at', { ascending: false });\r\n    \r\n    if (error) {throw error;}\r\n    \r\n    return NextResponse.json({\r\n      data: {\r\n        shipment,\r\n        tracking_events: trackingEvents || []\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error in GET tracking API:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: CREAR EVENTO DE TRACKING\r\n// =====================================================\r\n\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Validar ID del envío\r\n    const shipmentId = parseInt(params.id);\r\n    if (isNaN(shipmentId)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid shipment ID' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Parsear y validar body\r\n    const body = await request.json();\r\n    const validatedData = CreateTrackingEventSchema.parse(body);\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = createClient();\r\n    \r\n    // Validar que el envío existe\r\n    const shipment = await validateShipmentExists(supabase, shipmentId);\r\n    if (!shipment) {\r\n      return NextResponse.json(\r\n        { error: 'Shipment not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Crear evento de tracking\r\n    const { data: trackingEvent, error: trackingError } = await supabase\r\n      .from('tracking_events')\r\n      .insert({\r\n        shipment_id: shipmentId,\r\n        status: validatedData.status,\r\n        description: validatedData.description,\r\n        location: validatedData.location,\r\n        latitude: validatedData.latitude,\r\n        longitude: validatedData.longitude,\r\n        occurred_at: validatedData.occurred_at,\r\n        external_event_id: validatedData.external_event_id,\r\n        raw_data: validatedData.raw_data\r\n      })\r\n      .select('*')\r\n      .single();\r\n    \r\n    if (trackingError) {throw trackingError;}\r\n    \r\n    // Actualizar estado del envío si es necesario\r\n    const statusesToUpdate = [\r\n      'confirmed', 'picked_up', 'in_transit', 'out_for_delivery', \r\n      'delivered', 'exception', 'cancelled', 'returned'\r\n    ];\r\n    \r\n    if (statusesToUpdate.includes(validatedData.status)) {\r\n      await updateShipmentStatus(supabase, shipmentId, validatedData.status);\r\n    }\r\n    \r\n    // Si el envío fue entregado, actualizar fecha de entrega real\r\n    if (validatedData.status === 'delivered') {\r\n      await supabase\r\n        .from('shipments')\r\n        .update({ \r\n          actual_delivery_date: validatedData.occurred_at.split('T')[0]\r\n        })\r\n        .eq('id', shipmentId);\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        data: trackingEvent,\r\n        message: 'Tracking event created successfully'\r\n      },\r\n      { status: 201 }\r\n    );\r\n    \r\n  } catch (error) {\r\n    console.error('Error in POST tracking API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PUT: ACTUALIZAR MÚLTIPLES EVENTOS (BULK UPDATE)\r\n// =====================================================\r\n\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Validar ID del envío\r\n    const shipmentId = parseInt(params.id);\r\n    if (isNaN(shipmentId)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid shipment ID' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Parsear body para bulk update\r\n    const body = await request.json();\r\n    const { events } = body;\r\n    \r\n    if (!Array.isArray(events) || events.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Events array is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Validar cada evento\r\n    const validatedEvents = events.map(event => \r\n      CreateTrackingEventSchema.parse(event)\r\n    );\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = createClient();\r\n    \r\n    // Validar que el envío existe\r\n    const shipment = await validateShipmentExists(supabase, shipmentId);\r\n    if (!shipment) {\r\n      return NextResponse.json(\r\n        { error: 'Shipment not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Insertar eventos en lote\r\n    const eventsToInsert = validatedEvents.map(event => ({\r\n      shipment_id: shipmentId,\r\n      ...event\r\n    }));\r\n    \r\n    const { data: insertedEvents, error: insertError } = await supabase\r\n      .from('tracking_events')\r\n      .insert(eventsToInsert)\r\n      .select('*');\r\n    \r\n    if (insertError) {throw insertError;}\r\n    \r\n    // Actualizar estado del envío al último estado válido\r\n    const lastValidStatus = validatedEvents\r\n      .filter(event => [\r\n        'confirmed', 'picked_up', 'in_transit', 'out_for_delivery', \r\n        'delivered', 'exception', 'cancelled', 'returned'\r\n      ].includes(event.status))\r\n      .sort((a, b) => new Date(b.occurred_at).getTime() - new Date(a.occurred_at).getTime())[0];\r\n    \r\n    if (lastValidStatus) {\r\n      await updateShipmentStatus(supabase, shipmentId, lastValidStatus.status);\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        data: insertedEvents,\r\n        message: `${insertedEvents?.length || 0} tracking events created successfully`\r\n      },\r\n      { status: 201 }\r\n    );\r\n    \r\n  } catch (error) {\r\n    console.error('Error in PUT tracking API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}