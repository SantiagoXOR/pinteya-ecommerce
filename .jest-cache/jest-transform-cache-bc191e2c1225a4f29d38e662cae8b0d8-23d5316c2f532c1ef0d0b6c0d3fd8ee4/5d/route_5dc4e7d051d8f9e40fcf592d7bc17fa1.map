{"version":3,"names":["cov_1160av427q","actualCoverage","s","GET","f","POST","runtime","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","supabaseAdmin","_supabasejs","createClient","auth","autoRefreshToken","persistSession","DebugRequestSchema","_zod","z","object","module","enum","default","user_id","string","optional","detailed","boolean","include_sensitive","debugAuth","request","b","results","timestamp","Date","toISOString","status","authResult","_adminauth","getAuthenticatedUser","directAuthResult","_config","directAuthError","error","message","deprecatedHeaders","getAuthFromHeaders","cookies","sessionCookie","get","clerkSessionCookie","authData","migrated_method","userId","sessionId","isAdmin","direct_method","deprecated_headers","hasSession","hasClerkSession","sessionValue","value","clerkValue","data","debugClerk","sessionClaims","possibleRoles","publicMetadata","role","metadata","public_metadata","user_metadata","clerkData","hasSessionClaims","sessionClaimsKeys","Object","keys","possibleRoleLocations","detectedRole","values","find","fullStructure","debugAdmin","diagnostics","environment","nodeEnv","NODE_ENV","hasSupabaseUrl","hasSupabaseServiceKey","hasClerkSecretKey","CLERK_SECRET_KEY","hasClerkPublishableKey","NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY","supabase","connection","productsTable","categoriesTable","products","productsError","from","select","limit","categories","categoriesError","hasAllEnvVars","debugProducts","productData","permissions","simple","enterprise","secure","queries","direct","withAuth","comparison","simpleResult","checkCRUDPermissions","success","enterpriseResult","_enterpriseauthutils","requireAdminAuth","secureResult","_supabaseauthutils","checkPermission","allowed","directProducts","directError","length","successCount","filter","p","debugAll","summary","total_modules","success_count","partial_count","failed_count","clerkResult","adminResult","productsResult","Promise","all","undefined","allResults","clerk","admin","forEach","result","url","URL","rawParams","fromEntries","searchParams","entries","params","parse","console","log","sanitized","JSON","stringify","_server","NextResponse","json","meta","api_version","unified","parameters","details","body","test_data"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\debug\\unified\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API UNIFICADA DE DEBUG\r\n// Consolida todas las funcionalidades de debug dispersas\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { getAuthenticatedUser, getAuthFromHeaders } from '@/lib/auth/admin-auth';\r\nimport { checkCRUDPermissions } from '@/lib/auth/admin-auth';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { checkPermission } from '@/lib/auth/supabase-auth-utils';\r\n\r\n// Configuración de Supabase\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\n\r\nconst supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {\r\n  auth: {\r\n    autoRefreshToken: false,\r\n    persistSession: false\r\n  }\r\n});\r\n\r\n// Schema de validación para debug\r\nconst DebugRequestSchema = z.object({\r\n  module: z.enum([\r\n    'auth',           // Autenticación general\r\n    'clerk',          // Clerk específico\r\n    'admin',          // Panel administrativo\r\n    'products',       // Productos y permisos\r\n    'user-profile',   // Perfiles de usuario\r\n    'user-status',    // Estado de usuario\r\n    'permissions',    // Sistema de permisos\r\n    'supabase',       // Conexión Supabase\r\n    'environment',    // Variables de entorno\r\n    'all'            // Diagnóstico completo\r\n  ]).default('all'),\r\n  user_id: z.string().optional(),\r\n  detailed: z.boolean().default(false),\r\n  include_sensitive: z.boolean().default(false)\r\n});\r\n\r\n/**\r\n * Diagnóstico de autenticación unificado\r\n */\r\nasync function debugAuth(request: NextRequest, detailed: boolean = false) {\r\n  const results = {\r\n    timestamp: new Date().toISOString(),\r\n    module: 'auth',\r\n    status: 'unknown' as 'success' | 'partial' | 'failed' | 'unknown'\r\n  };\r\n\r\n  try {\r\n    // Método 1: getAuthenticatedUser (migrado)\r\n    const authResult = await getAuthenticatedUser(request);\r\n    \r\n    // Método 2: auth() directo\r\n    let directAuthResult;\r\n    try {\r\n      directAuthResult = await auth();\r\n    } catch (directAuthError: any) {\r\n      directAuthResult = { error: directAuthError.message };\r\n    }\r\n    \r\n    // Método 3: Headers (deprecado)\r\n    const deprecatedHeaders = await getAuthFromHeaders(request);\r\n    \r\n    // Cookies para análisis\r\n    const cookies = request.cookies;\r\n    const sessionCookie = cookies.get('__session');\r\n    const clerkSessionCookie = cookies.get('__clerk_session');\r\n    \r\n    const authData = {\r\n      migrated_method: {\r\n        userId: authResult.userId,\r\n        sessionId: authResult.sessionId,\r\n        isAdmin: authResult.isAdmin,\r\n        error: authResult.error\r\n      },\r\n      direct_method: {\r\n        userId: directAuthResult?.userId,\r\n        sessionId: directAuthResult?.sessionId,\r\n        error: directAuthResult?.error\r\n      },\r\n      deprecated_headers: detailed ? {\r\n        userId: deprecatedHeaders.userId,\r\n        sessionId: deprecatedHeaders.sessionId,\r\n        error: deprecatedHeaders.error\r\n      } : { status: 'hidden' },\r\n      cookies: {\r\n        hasSession: !!sessionCookie,\r\n        hasClerkSession: !!clerkSessionCookie,\r\n        sessionValue: detailed ? sessionCookie?.value : 'hidden',\r\n        clerkValue: detailed ? clerkSessionCookie?.value : 'hidden'\r\n      }\r\n    };\r\n    \r\n    // Determinar estado general\r\n    if (authResult.userId && directAuthResult?.userId) {\r\n      results.status = 'success';\r\n    } else if (authResult.userId || directAuthResult?.userId) {\r\n      results.status = 'partial';\r\n    } else {\r\n      results.status = 'failed';\r\n    }\r\n    \r\n    return { ...results, data: authData };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      ...results,\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Diagnóstico específico de Clerk\r\n */\r\nasync function debugClerk(detailed: boolean = false) {\r\n  const results = {\r\n    timestamp: new Date().toISOString(),\r\n    module: 'clerk',\r\n    status: 'unknown' as 'success' | 'partial' | 'failed' | 'unknown'\r\n  };\r\n\r\n  try {\r\n    const { userId, sessionClaims } = auth();\r\n    \r\n    // Verificar todas las posibles ubicaciones del rol\r\n    const possibleRoles = {\r\n      'sessionClaims.publicMetadata.role': sessionClaims?.publicMetadata?.role,\r\n      'sessionClaims.metadata.role': sessionClaims?.metadata?.role,\r\n      'sessionClaims.role': sessionClaims?.role,\r\n      'sessionClaims.public_metadata.role': sessionClaims?.public_metadata?.role,\r\n      'sessionClaims.user_metadata.role': sessionClaims?.user_metadata?.role\r\n    };\r\n    \r\n    const clerkData = {\r\n      userId,\r\n      hasSessionClaims: !!sessionClaims,\r\n      sessionClaimsKeys: sessionClaims ? Object.keys(sessionClaims) : [],\r\n      publicMetadata: sessionClaims?.publicMetadata,\r\n      metadata: detailed ? sessionClaims?.metadata : { status: 'hidden' },\r\n      possibleRoleLocations: possibleRoles,\r\n      detectedRole: Object.values(possibleRoles).find(role => role === 'admin') || 'none',\r\n      fullStructure: detailed ? sessionClaims : { status: 'hidden' }\r\n    };\r\n    \r\n    results.status = userId ? 'success' : 'failed';\r\n    return { ...results, data: clerkData };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      ...results,\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Diagnóstico del panel administrativo\r\n */\r\nasync function debugAdmin(detailed: boolean = false) {\r\n  const results = {\r\n    timestamp: new Date().toISOString(),\r\n    module: 'admin',\r\n    status: 'unknown' as 'success' | 'partial' | 'failed' | 'unknown'\r\n  };\r\n\r\n  try {\r\n    const diagnostics = {\r\n      environment: {\r\n        nodeEnv: process.env.NODE_ENV,\r\n        hasSupabaseUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n        hasSupabaseServiceKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n        hasClerkSecretKey: !!process.env.CLERK_SECRET_KEY,\r\n        hasClerkPublishableKey: !!process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\r\n      },\r\n      supabase: {\r\n        connection: 'unknown',\r\n        productsTable: 'unknown',\r\n        categoriesTable: 'unknown',\r\n        error: null\r\n      }\r\n    };\r\n\r\n    // Test Supabase connection\r\n    if (!supabaseUrl || !supabaseServiceKey) {\r\n      diagnostics.supabase.connection = 'missing_credentials';\r\n      diagnostics.supabase.error = 'Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY';\r\n    } else {\r\n      // Test products table\r\n      const { data: products, error: productsError } = await supabaseAdmin\r\n        .from('products')\r\n        .select('id')\r\n        .limit(1);\r\n\r\n      if (productsError) {\r\n        diagnostics.supabase.productsTable = 'error';\r\n        diagnostics.supabase.error = productsError.message;\r\n      } else {\r\n        diagnostics.supabase.productsTable = 'accessible';\r\n        diagnostics.supabase.connection = 'success';\r\n      }\r\n\r\n      // Test categories table\r\n      const { data: categories, error: categoriesError } = await supabaseAdmin\r\n        .from('categories')\r\n        .select('id')\r\n        .limit(1);\r\n\r\n      diagnostics.supabase.categoriesTable = categoriesError ? 'error' : 'accessible';\r\n    }\r\n\r\n    // Determinar estado general\r\n    const hasAllEnvVars = diagnostics.environment.hasSupabaseUrl && \r\n                         diagnostics.environment.hasSupabaseServiceKey &&\r\n                         diagnostics.environment.hasClerkSecretKey;\r\n    \r\n    if (hasAllEnvVars && diagnostics.supabase.connection === 'success') {\r\n      results.status = 'success';\r\n    } else if (hasAllEnvVars || diagnostics.supabase.connection === 'success') {\r\n      results.status = 'partial';\r\n    } else {\r\n      results.status = 'failed';\r\n    }\r\n\r\n    return { ...results, data: diagnostics };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      ...results,\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Diagnóstico de productos y permisos\r\n */\r\nasync function debugProducts(request: NextRequest, userId?: string, detailed: boolean = false) {\r\n  const results = {\r\n    timestamp: new Date().toISOString(),\r\n    module: 'products',\r\n    status: 'unknown' as 'success' | 'partial' | 'failed' | 'unknown'\r\n  };\r\n\r\n  try {\r\n    const productData = {\r\n      permissions: {\r\n        simple: 'unknown',\r\n        enterprise: 'unknown',\r\n        secure: 'unknown'\r\n      },\r\n      queries: {\r\n        direct: 'unknown',\r\n        withAuth: 'unknown'\r\n      },\r\n      comparison: null as any\r\n    };\r\n\r\n    // Test 1: Simple permissions\r\n    try {\r\n      const simpleResult = await checkCRUDPermissions('read', 'products');\r\n      productData.permissions.simple = simpleResult.success ? 'allowed' : 'denied';\r\n    } catch (error: any) {\r\n      productData.permissions.simple = `error: ${error.message}`;\r\n    }\r\n\r\n    // Test 2: Enterprise permissions\r\n    try {\r\n      const enterpriseResult = await requireAdminAuth(request, ['products_read']);\r\n      productData.permissions.enterprise = enterpriseResult.success ? 'allowed' : 'denied';\r\n    } catch (error: any) {\r\n      productData.permissions.enterprise = `error: ${error.message}`;\r\n    }\r\n\r\n    // Test 3: Secure permissions\r\n    try {\r\n      const secureResult = await checkPermission(request, 'products', 'read');\r\n      productData.permissions.secure = secureResult.allowed ? 'allowed' : 'denied';\r\n    } catch (error: any) {\r\n      productData.permissions.secure = `error: ${error.message}`;\r\n    }\r\n\r\n    // Test 4: Direct query\r\n    try {\r\n      const { data: directProducts, error: directError } = await supabaseAdmin\r\n        .from('products')\r\n        .select('id, name, price')\r\n        .limit(3);\r\n      \r\n      productData.queries.direct = directError ? `error: ${directError.message}` : `success: ${directProducts?.length} products`;\r\n    } catch (error: any) {\r\n      productData.queries.direct = `error: ${error.message}`;\r\n    }\r\n\r\n    // Determinar estado general\r\n    const successCount = Object.values(productData.permissions).filter(p => p === 'allowed').length;\r\n    if (successCount >= 2) {\r\n      results.status = 'success';\r\n    } else if (successCount >= 1) {\r\n      results.status = 'partial';\r\n    } else {\r\n      results.status = 'failed';\r\n    }\r\n\r\n    return { ...results, data: productData };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      ...results,\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Diagnóstico completo del sistema\r\n */\r\nasync function debugAll(request: NextRequest, detailed: boolean = false) {\r\n  const results = {\r\n    timestamp: new Date().toISOString(),\r\n    module: 'all',\r\n    status: 'unknown' as 'success' | 'partial' | 'failed' | 'unknown',\r\n    summary: {\r\n      total_modules: 4,\r\n      success_count: 0,\r\n      partial_count: 0,\r\n      failed_count: 0\r\n    }\r\n  };\r\n\r\n  try {\r\n    // Ejecutar todos los diagnósticos\r\n    const [authResult, clerkResult, adminResult, productsResult] = await Promise.all([\r\n      debugAuth(request, detailed),\r\n      debugClerk(detailed),\r\n      debugAdmin(detailed),\r\n      debugProducts(request, undefined, detailed)\r\n    ]);\r\n\r\n    const allResults = {\r\n      auth: authResult,\r\n      clerk: clerkResult,\r\n      admin: adminResult,\r\n      products: productsResult\r\n    };\r\n\r\n    // Calcular resumen\r\n    Object.values(allResults).forEach(result => {\r\n      if (result.status === 'success') {results.summary.success_count++;}\r\n      else if (result.status === 'partial') {results.summary.partial_count++;}\r\n      else {results.summary.failed_count++;}\r\n    });\r\n\r\n    // Determinar estado general\r\n    if (results.summary.success_count >= 3) {\r\n      results.status = 'success';\r\n    } else if (results.summary.success_count + results.summary.partial_count >= 2) {\r\n      results.status = 'partial';\r\n    } else {\r\n      results.status = 'failed';\r\n    }\r\n\r\n    return { ...results, data: allResults };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      ...results,\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/debug/unified\r\n * API unificada de debug con múltiples módulos\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const url = new URL(request.url);\r\n    const rawParams = Object.fromEntries(url.searchParams.entries());\r\n    \r\n    // Validar parámetros\r\n    const params = DebugRequestSchema.parse(rawParams);\r\n    const { module, user_id, detailed, include_sensitive } = params;\r\n    \r\n    console.log(`🔍 Unified Debug API: Module ${module}, Detailed: ${detailed}`);\r\n    \r\n    let result;\r\n    \r\n    // Ejecutar diagnóstico según el módulo solicitado\r\n    switch (module) {\r\n      case 'auth':\r\n        result = await debugAuth(request, detailed);\r\n        break;\r\n      case 'clerk':\r\n        result = await debugClerk(detailed);\r\n        break;\r\n      case 'admin':\r\n        result = await debugAdmin(detailed);\r\n        break;\r\n      case 'products':\r\n        result = await debugProducts(request, user_id, detailed);\r\n        break;\r\n      case 'all':\r\n      default:\r\n        result = await debugAll(request, detailed);\r\n        break;\r\n    }\r\n    \r\n    // Filtrar información sensible si no está autorizada\r\n    if (!include_sensitive && result.data) {\r\n      // Remover información sensible de la respuesta\r\n      if (typeof result.data === 'object') {\r\n        const sanitized = JSON.parse(JSON.stringify(result.data));\r\n        // Aquí se pueden agregar más filtros de seguridad\r\n        result.data = sanitized;\r\n      }\r\n    }\r\n    \r\n    console.log(`✅ Unified Debug: Module ${module} completed with status ${result.status}`);\r\n    \r\n    return NextResponse.json({\r\n      ...result,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        parameters: {\r\n          module,\r\n          detailed,\r\n          include_sensitive\r\n        }\r\n      }\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Unified Debug API error:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor de debug',\r\n        details: error.message,\r\n        module: 'unified',\r\n        status: 'failed'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/debug/unified\r\n * Ejecutar diagnósticos específicos con datos de entrada\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { module, user_id, test_data, detailed = false } = body;\r\n    \r\n    console.log(`🔧 Unified Debug POST: Module ${module} with test data`);\r\n    \r\n    // Aquí se pueden agregar diagnósticos específicos que requieren datos de entrada\r\n    // Por ejemplo, probar autenticación con credenciales específicas\r\n    \r\n    return NextResponse.json({\r\n      message: 'Diagnóstico POST completado',\r\n      module,\r\n      test_data: detailed ? test_data : 'hidden',\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Unified Debug POST error:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error en diagnóstico POST',\r\n        details: error.message\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}