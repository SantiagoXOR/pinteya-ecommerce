bd0d9fe4f9bd347b32e158c398bcd92f
// ===================================
// PINTEYA E-COMMERCE - CACHE MANAGER
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CACHE_CONFIGS () {
        return CACHE_CONFIGS;
    },
    get CacheManager () {
        return CacheManager;
    },
    get CacheUtils () {
        return CacheUtils;
    },
    get cacheManager () {
        return cacheManager;
    },
    get cached () {
        return cached;
    }
});
const _redis = require("./integrations/redis");
const _logger = require("./enterprise/logger");
const CACHE_CONFIGS = {
    // Para respuestas de MercadoPago (corta duración)
    MERCADOPAGO_RESPONSE: {
        ttl: 300,
        prefix: 'mp_response',
        compress: true,
        serialize: true
    },
    // Para información de pagos (duración media)
    PAYMENT_INFO: {
        ttl: 1800,
        prefix: 'payment_info',
        compress: false,
        serialize: true
    },
    // Para configuraciones del sistema (larga duración)
    SYSTEM_CONFIG: {
        ttl: 3600,
        prefix: 'sys_config',
        compress: false,
        serialize: true
    },
    // Para datos de productos (duración media)
    PRODUCT_DATA: {
        ttl: 900,
        prefix: 'product',
        compress: true,
        serialize: true
    },
    // Para sesiones de usuario (corta duración)
    USER_SESSION: {
        ttl: 600,
        prefix: 'user_session',
        compress: false,
        serialize: true
    }
};
class CacheManager {
    constructor(){}
    static getInstance() {
        if (!CacheManager.instance) {
            CacheManager.instance = new CacheManager();
        }
        return CacheManager.instance;
    }
    /**
   * Genera clave de cache
   */ generateKey(config, key) {
        return `cache:${config.prefix}:${key}`;
    }
    /**
   * Serializa datos para almacenamiento
   */ serialize(data, config) {
        try {
            let serialized = config.serialize ? JSON.stringify(data) : data.toString();
            if (config.compress && serialized.length > 1000) {
                // Implementación básica de compresión (en producción usar zlib)
                serialized = this.simpleCompress(serialized);
            }
            return serialized;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Serialization error', error);
            throw error;
        }
    }
    /**
   * Deserializa datos del cache
   */ deserialize(data, config) {
        try {
            let deserialized = data;
            if (config.compress && data.startsWith('COMPRESSED:')) {
                deserialized = this.simpleDecompress(data);
            }
            return config.serialize ? JSON.parse(deserialized) : deserialized;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Deserialization error', error);
            throw error;
        }
    }
    /**
   * Compresión simple (placeholder para implementación real)
   */ simpleCompress(data) {
        // En producción, usar zlib o similar
        return `COMPRESSED:${data}`;
    }
    /**
   * Descompresión simple (placeholder para implementación real)
   */ simpleDecompress(data) {
        return data.replace('COMPRESSED:', '');
    }
    /**
   * Obtiene un valor del cache
   */ async get(key, config) {
        const startTime = Date.now();
        const cacheKey = this.generateKey(config, key);
        try {
            const cached = await _redis.redisCache.get(cacheKey);
            if (cached === null) {
                _logger.logger.info(_logger.LogCategory.API, 'Cache miss');
                return null;
            }
            const result = this.deserialize(cached, config);
            _logger.logger.info(_logger.LogCategory.API, 'Cache hit');
            return result;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache get error', error);
            return null // Fallar silenciosamente para no afectar la aplicación
            ;
        }
    }
    /**
   * Establece un valor en el cache
   */ async set(key, value, config) {
        const startTime = Date.now();
        const cacheKey = this.generateKey(config, key);
        try {
            const serialized = this.serialize(value, config);
            const success = await _redis.redisCache.set(cacheKey, serialized, config.ttl);
            _logger.logger.info(_logger.LogCategory.API, 'Cache set');
            return success;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache set error', error);
            return false;
        }
    }
    /**
   * Elimina un valor del cache
   */ async delete(key, config) {
        const cacheKey = this.generateKey(config, key);
        try {
            const success = await _redis.redisCache.del(cacheKey);
            _logger.logger.info(_logger.LogCategory.API, 'Cache delete');
            return success;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache delete error', error);
            return false;
        }
    }
    /**
   * Obtiene o establece un valor (patrón cache-aside)
   */ async getOrSet(key, fetcher, config) {
        // Intentar obtener del cache primero
        const cached = await this.get(key, config);
        if (cached !== null) {
            return cached;
        }
        // Si no está en cache, obtener del origen
        const startTime = Date.now();
        try {
            const value = await fetcher();
            // Almacenar en cache de forma asíncrona
            this.set(key, value, config).catch((error)=>{
                _logger.logger.warn(_logger.LogCategory.API, 'Background cache set failed');
            });
            _logger.logger.info(_logger.LogCategory.API, 'Cache miss - fetched from source');
            return value;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Fetcher error in getOrSet', error);
            throw error;
        }
    }
    /**
   * Invalida cache por patrón
   */ async invalidatePattern(pattern, config) {
        const fullPattern = this.generateKey(config, pattern);
        try {
            // En Redis real, usaríamos SCAN + DEL para patrones
            // Por simplicidad, aquí solo registramos la operación
            _logger.logger.info(_logger.LogCategory.API, 'Cache invalidation requested');
            // TODO: Implementar invalidación real por patrón
            return 0;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache invalidation error', error);
            return 0;
        }
    }
    /**
   * Obtiene estadísticas del cache
   */ async getStats() {
        try {
            // En implementación real, obtendríamos estas métricas de Redis
            return {
                hits: 0,
                misses: 0,
                hitRate: 0,
                totalKeys: 0
            };
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache stats error', error);
            return {
                hits: 0,
                misses: 0,
                hitRate: 0,
                totalKeys: 0
            };
        }
    }
    /**
   * Limpia todo el cache de un prefijo
   */ async clear(config) {
        try {
            _logger.logger.info(_logger.LogCategory.API, 'Cache clear requested');
            // TODO: Implementar limpieza real por prefijo
            return true;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache clear error', error);
            return false;
        }
    }
}
const cacheManager = CacheManager.getInstance();
function cached(config, keyGenerator) {
    return function(target, propertyName, descriptor) {
        const method = descriptor.value;
        descriptor.value = async function(...args) {
            const key = keyGenerator ? keyGenerator(...args) : `${propertyName}:${JSON.stringify(args)}`;
            return cacheManager.getOrSet(key, ()=>method.apply(this, args), config);
        };
        return descriptor;
    };
}
const CacheUtils = {
    /**
   * Cache para respuestas de MercadoPago
   */ async cacheMercadoPagoResponse (key, fetcher) {
        return cacheManager.getOrSet(key, fetcher, CACHE_CONFIGS.MERCADOPAGO_RESPONSE);
    },
    /**
   * Cache para información de pagos
   */ async cachePaymentInfo (paymentId, fetcher) {
        return cacheManager.getOrSet(`payment:${paymentId}`, fetcher, CACHE_CONFIGS.PAYMENT_INFO);
    },
    /**
   * Cache para datos de productos
   */ async cacheProductData (productId, fetcher) {
        return cacheManager.getOrSet(`product:${productId}`, fetcher, CACHE_CONFIGS.PRODUCT_DATA);
    },
    /**
   * Invalida cache de un pago específico
   */ async invalidatePayment (paymentId) {
        return cacheManager.delete(`payment:${paymentId}`, CACHE_CONFIGS.PAYMENT_INFO);
    },
    /**
   * Invalida cache de un producto específico
   */ async invalidateProduct (productId) {
        return cacheManager.delete(`product:${productId}`, CACHE_CONFIGS.PRODUCT_DATA);
    }
};

//# sourceMappingURL=data:application/json;base64,