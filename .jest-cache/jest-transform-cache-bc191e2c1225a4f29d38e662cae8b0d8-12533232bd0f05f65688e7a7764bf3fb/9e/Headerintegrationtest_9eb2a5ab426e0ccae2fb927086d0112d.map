{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Header\\__tests__\\Header.integration.test.tsx"],"sourcesContent":["/**\n * Header Integration Test Ultra-Simplificado\n * Sin dependencias externas - Solo integración básica\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\n\n// Mock completo para evitar dependencias\njest.mock('../index', () => {\n  return function MockHeaderIntegration() {\n    const [searchValue, setSearchValue] = React.useState('')\n    const [searchResults, setSearchResults] = React.useState<string[]>([])\n    const [isLoading, setIsLoading] = React.useState(false)\n    const [cartItems, setCartItems] = React.useState(0)\n\n    const handleSearch = async (value: string) => {\n      if (!value.trim()) {\n        setSearchResults([])\n        return\n      }\n\n      setIsLoading(true)\n\n      // Simular búsqueda\n      setTimeout(() => {\n        const mockResults = [\n          `Resultado 1 para \"${value}\"`,\n          `Resultado 2 para \"${value}\"`,\n          `Resultado 3 para \"${value}\"`,\n        ]\n        setSearchResults(mockResults)\n        setIsLoading(false)\n      }, 100)\n    }\n\n    const addToCart = () => {\n      setCartItems(prev => prev + 1)\n    }\n\n    return (\n      <header role='banner' data-testid='header-integration'>\n        <div data-testid='logo-section'>\n          <img alt='Pinteya' src='/logo.svg' />\n        </div>\n\n        <div data-testid='search-integration'>\n          <input\n            role='searchbox'\n            aria-label='Buscar productos'\n            value={searchValue}\n            onChange={e => {\n              setSearchValue(e.target.value)\n              handleSearch(e.target.value)\n            }}\n            placeholder='Buscar productos...'\n          />\n\n          {isLoading && <div data-testid='search-loading'>Buscando...</div>}\n\n          {searchResults.length > 0 && (\n            <div data-testid='search-results'>\n              {searchResults.map((result, index) => (\n                <div key={index} data-testid={`search-result-${index}`}>\n                  {result}\n                  <button onClick={addToCart}>Agregar al carrito</button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div data-testid='cart-integration'>\n          <button data-testid='cart-button'>Carrito ({cartItems})</button>\n        </div>\n\n        <div data-testid='auth-integration'>\n          <button>Iniciar Sesión</button>\n        </div>\n      </header>\n    )\n  }\n})\n\nimport Header from '../index'\n\ndescribe('Header Integration - Ultra-Simplified Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Integración Básica', () => {\n    it('debe renderizar todos los componentes integrados', () => {\n      render(<Header />)\n\n      expect(screen.getByTestId('header-integration')).toBeInTheDocument()\n      expect(screen.getByTestId('logo-section')).toBeInTheDocument()\n      expect(screen.getByTestId('search-integration')).toBeInTheDocument()\n      expect(screen.getByTestId('cart-integration')).toBeInTheDocument()\n      expect(screen.getByTestId('auth-integration')).toBeInTheDocument()\n    })\n\n    it('debe tener estructura semántica integrada', () => {\n      render(<Header />)\n\n      const header = screen.getByRole('banner')\n      const searchInput = screen.getByRole('searchbox')\n      const buttons = screen.getAllByRole('button')\n\n      expect(header).toBeInTheDocument()\n      expect(searchInput).toBeInTheDocument()\n      expect(buttons.length).toBeGreaterThanOrEqual(2)\n    })\n  })\n\n  describe('Integración Búsqueda-Carrito', () => {\n    it('debe buscar productos y permitir agregar al carrito', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n\n      // Buscar productos\n      fireEvent.change(searchInput, { target: { value: 'pintura' } })\n\n      // Verificar loading\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\n\n      // Esperar resultados\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // Verificar resultados\n      expect(screen.getByTestId('search-result-0')).toBeInTheDocument()\n      expect(screen.getByTestId('search-result-1')).toBeInTheDocument()\n      expect(screen.getByTestId('search-result-2')).toBeInTheDocument()\n\n      // Verificar carrito inicial\n      const cartButton = screen.getByTestId('cart-button')\n      expect(cartButton).toHaveTextContent('Carrito (0)')\n\n      // Agregar producto al carrito\n      const addButtons = screen.getAllByText('Agregar al carrito')\n      fireEvent.click(addButtons[0])\n\n      // Verificar carrito actualizado\n      expect(cartButton).toHaveTextContent('Carrito (1)')\n    })\n\n    it('debe manejar búsqueda vacía', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n\n      // Buscar algo primero\n      fireEvent.change(searchInput, { target: { value: 'test' } })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // Limpiar búsqueda\n      fireEvent.change(searchInput, { target: { value: '' } })\n\n      // Resultados deben desaparecer\n      expect(screen.queryByTestId('search-results')).not.toBeInTheDocument()\n      expect(screen.queryByTestId('search-loading')).not.toBeInTheDocument()\n    })\n\n    it('debe agregar múltiples productos al carrito', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n      const cartButton = screen.getByTestId('cart-button')\n\n      // Buscar productos\n      fireEvent.change(searchInput, { target: { value: 'latex' } })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // Agregar múltiples productos\n      const addButtons = screen.getAllByText('Agregar al carrito')\n      fireEvent.click(addButtons[0])\n      fireEvent.click(addButtons[1])\n      fireEvent.click(addButtons[2])\n\n      // Verificar contador del carrito\n      expect(cartButton).toHaveTextContent('Carrito (3)')\n    })\n  })\n\n  describe('Flujo de Usuario Completo', () => {\n    it('debe manejar flujo completo: buscar → agregar → verificar carrito', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n      const cartButton = screen.getByTestId('cart-button')\n\n      // 1. Estado inicial\n      expect(cartButton).toHaveTextContent('Carrito (0)')\n\n      // 2. Buscar productos\n      fireEvent.change(searchInput, { target: { value: 'rodillo' } })\n\n      // 3. Esperar resultados\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // 4. Verificar resultados contienen el término buscado\n      const results = screen.getAllByTestId(/search-result-/)\n      results.forEach(result => {\n        expect(result).toHaveTextContent('rodillo')\n      })\n\n      // 5. Agregar producto al carrito\n      const addButton = screen.getAllByText('Agregar al carrito')[0]\n      fireEvent.click(addButton)\n\n      // 6. Verificar carrito actualizado\n      expect(cartButton).toHaveTextContent('Carrito (1)')\n\n      // 7. Buscar otro producto\n      fireEvent.change(searchInput, { target: { value: 'pincel' } })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // 8. Agregar otro producto\n      const newAddButton = screen.getAllByText('Agregar al carrito')[0]\n      fireEvent.click(newAddButton)\n\n      // 9. Verificar carrito final\n      expect(cartButton).toHaveTextContent('Carrito (2)')\n    })\n\n    it('debe mantener estado del carrito durante navegación', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n      const cartButton = screen.getByTestId('cart-button')\n\n      // Agregar productos\n      fireEvent.change(searchInput, { target: { value: 'test' } })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      const addButton = screen.getAllByText('Agregar al carrito')[0]\n      fireEvent.click(addButton)\n\n      expect(cartButton).toHaveTextContent('Carrito (1)')\n\n      // Cambiar búsqueda - carrito debe mantener estado\n      fireEvent.change(searchInput, { target: { value: 'otro producto' } })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // Carrito debe mantener el producto anterior\n      expect(cartButton).toHaveTextContent('Carrito (1)')\n    })\n  })\n\n  describe('Estados de Carga', () => {\n    it('debe mostrar estado de carga durante búsqueda', () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n\n      // Iniciar búsqueda\n      fireEvent.change(searchInput, { target: { value: 'cargando' } })\n\n      // Verificar estado de carga\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\n      expect(screen.getByTestId('search-loading')).toHaveTextContent('Buscando...')\n    })\n\n    it('debe ocultar estado de carga cuando termina búsqueda', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n\n      fireEvent.change(searchInput, { target: { value: 'terminado' } })\n\n      // Loading debe estar presente inicialmente\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\n\n      // Esperar a que termine la búsqueda\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // Loading debe desaparecer\n      expect(screen.queryByTestId('search-loading')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('Accesibilidad Integrada', () => {\n    it('debe mantener accesibilidad en flujo completo', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox')\n\n      // Verificar aria-label\n      expect(searchInput).toHaveAttribute('aria-label', 'Buscar productos')\n\n      // Verificar navegación por teclado\n      searchInput.focus()\n      expect(document.activeElement).toBe(searchInput)\n\n      // Buscar y verificar resultados accesibles\n      fireEvent.change(searchInput, { target: { value: 'accesible' } })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // Verificar botones son accesibles\n      const addButtons = screen.getAllByText('Agregar al carrito')\n      addButtons.forEach(button => {\n        expect(button).toBeInTheDocument()\n        button.focus()\n        expect(document.activeElement).toBe(button)\n      })\n    })\n  })\n\n  describe('Performance Integrada', () => {\n    it('debe manejar múltiples interacciones sin degradación', async () => {\n      render(<Header />)\n\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\n\n      // Múltiples búsquedas rápidas\n      for (let i = 0; i < 5; i++) {\n        fireEvent.change(searchInput, { target: { value: `búsqueda ${i}` } })\n      }\n\n      // Esperar última búsqueda\n      await waitFor(() => {\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\n      })\n\n      // Verificar que funciona correctamente (el resultado contiene el último término)\n      expect(screen.getByTestId('search-result-0')).toHaveTextContent('búsqueda')\n    })\n  })\n})\n"],"names":["jest","mock","MockHeaderIntegration","searchValue","setSearchValue","React","useState","searchResults","setSearchResults","isLoading","setIsLoading","cartItems","setCartItems","handleSearch","value","trim","setTimeout","mockResults","addToCart","prev","header","role","data-testid","div","img","alt","src","input","aria-label","onChange","e","target","placeholder","length","map","result","index","button","onClick","describe","beforeEach","clearAllMocks","it","render","Header","expect","screen","getByTestId","toBeInTheDocument","getByRole","searchInput","buttons","getAllByRole","toBeGreaterThanOrEqual","fireEvent","change","waitFor","cartButton","toHaveTextContent","addButtons","getAllByText","click","queryByTestId","not","results","getAllByTestId","forEach","addButton","newAddButton","toHaveAttribute","focus","document","activeElement","toBe","i"],"mappings":"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"}