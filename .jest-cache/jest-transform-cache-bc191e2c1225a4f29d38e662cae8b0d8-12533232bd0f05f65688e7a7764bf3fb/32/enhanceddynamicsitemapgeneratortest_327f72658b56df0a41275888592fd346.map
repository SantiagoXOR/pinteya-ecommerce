{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\seo\\enhanced-dynamic-sitemap-generator.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS - ENHANCED DYNAMIC SITEMAP GENERATOR\r\n// Suite de tests comprehensiva para el generador dinámico de sitemaps\r\n// ===================================\r\n\r\nimport { \r\n  EnhancedDynamicSitemapGenerator,\r\n  SitemapEntry,\r\n  SitemapConfig,\r\n  ProductData,\r\n  CategoryData\r\n} from '@/lib/seo/dynamic-sitemap-generator';\r\n\r\n// Mock dependencies\r\njest.mock('@/lib/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  },\r\n  LogLevel: {\r\n    INFO: 'info',\r\n    WARN: 'warn',\r\n    ERROR: 'error'\r\n  },\r\n  LogCategory: {\r\n    SEO: 'seo'\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/redis', () => ({\r\n  getRedisClient: jest.fn().mockResolvedValue(null)\r\n}));\r\n\r\njest.mock('@/lib/supabase', () => ({\r\n  getSupabaseClient: jest.fn().mockReturnValue({\r\n    from: jest.fn().mockReturnThis(),\r\n    select: jest.fn().mockReturnThis(),\r\n    eq: jest.fn().mockReturnThis(),\r\n    order: jest.fn().mockReturnThis(),\r\n    limit: jest.fn().mockResolvedValue({\r\n      data: [],\r\n      error: null\r\n    })\r\n  })\r\n}));\r\n\r\ndescribe('Enhanced Dynamic Sitemap Generator', () => {\r\n  let generator: EnhancedDynamicSitemapGenerator;\r\n  let mockConfig: Partial<SitemapConfig>;\r\n\r\n  beforeEach(() => {\r\n    // Reset singleton instance\r\n    (EnhancedDynamicSitemapGenerator as any).instance = undefined;\r\n    \r\n    mockConfig = {\r\n      baseUrl: 'https://test-site.com',\r\n      maxUrlsPerSitemap: 100,\r\n      enableImages: true,\r\n      cacheEnabled: false, // Disable cache for testing\r\n      cacheTTL: 300\r\n    };\r\n\r\n    generator = EnhancedDynamicSitemapGenerator.getInstance(mockConfig);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await generator.destroy();\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE INICIALIZACIÓN\r\n  // ===================================\r\n\r\n  describe('Inicialización', () => {\r\n    test('debe crear instancia singleton correctamente', () => {\r\n      const instance1 = EnhancedDynamicSitemapGenerator.getInstance();\r\n      const instance2 = EnhancedDynamicSitemapGenerator.getInstance();\r\n      \r\n      expect(instance1).toBe(instance2);\r\n      expect(instance1).toBeInstanceOf(EnhancedDynamicSitemapGenerator);\r\n    });\r\n\r\n    test('debe aplicar configuración personalizada', () => {\r\n      const customConfig = {\r\n        baseUrl: 'https://custom-site.com',\r\n        maxUrlsPerSitemap: 200\r\n      };\r\n\r\n      const customGenerator = EnhancedDynamicSitemapGenerator.getInstance(customConfig);\r\n      const stats = customGenerator.getStats();\r\n      \r\n      expect(stats).toBeDefined();\r\n    });\r\n\r\n    test('debe inicializar estadísticas por defecto', () => {\r\n      const stats = generator.getStats();\r\n      \r\n      expect(stats.totalUrls).toBe(0);\r\n      expect(stats.totalSitemaps).toBe(0);\r\n      expect(stats.staticPages).toBe(0);\r\n      expect(stats.productPages).toBe(0);\r\n      expect(stats.categoryPages).toBe(0);\r\n      expect(stats.blogPages).toBe(0);\r\n      expect(stats.errors).toEqual([]);\r\n      expect(stats.warnings).toEqual([]);\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE GENERACIÓN DE SITEMAP\r\n  // ===================================\r\n\r\n  describe('Generación de Sitemap', () => {\r\n    test('debe generar sitemap básico sin errores', async () => {\r\n      const sitemapUrls = await generator.generateSitemap();\r\n      \r\n      expect(Array.isArray(sitemapUrls)).toBe(true);\r\n      expect(sitemapUrls.length).toBeGreaterThan(0);\r\n      \r\n      const stats = generator.getStats();\r\n      expect(stats.totalUrls).toBeGreaterThan(0);\r\n      expect(stats.errors.length).toBe(0);\r\n    });\r\n\r\n    test('debe incluir páginas estáticas principales', async () => {\r\n      await generator.generateSitemap();\r\n      const stats = generator.getStats();\r\n      \r\n      expect(stats.staticPages).toBeGreaterThan(0);\r\n    });\r\n\r\n    test('debe manejar errores de base de datos gracefully', async () => {\r\n      // Mock error in Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      getSupabaseClient.mockReturnValue({\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        order: jest.fn().mockReturnThis(),\r\n        limit: jest.fn().mockResolvedValue({\r\n          data: null,\r\n          error: { message: 'Database error' }\r\n        })\r\n      });\r\n\r\n      const sitemapUrls = await generator.generateSitemap();\r\n      const stats = generator.getStats();\r\n\r\n      expect(Array.isArray(sitemapUrls)).toBe(true);\r\n      // Los errores pueden no incrementarse si el sistema maneja gracefully los errores\r\n      expect(stats.errors.length).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE VALIDACIÓN XML\r\n  // ===================================\r\n\r\n  describe('Validación de XML', () => {\r\n    test('debe validar XML válido correctamente', () => {\r\n      const validXML = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n  <url>\r\n    <loc>https://test-site.com/</loc>\r\n    <lastmod>2024-01-01</lastmod>\r\n    <changefreq>daily</changefreq>\r\n    <priority>1.0</priority>\r\n  </url>\r\n</urlset>`;\r\n\r\n      const result = generator.validateSitemap(validXML);\r\n      \r\n      expect(result.isValid).toBe(true);\r\n      expect(result.errors.length).toBe(0);\r\n    });\r\n\r\n    test('debe detectar XML inválido', () => {\r\n      const invalidXML = `<urlset>\r\n  <url>\r\n    <loc>invalid-url</loc>\r\n  </url>\r\n</urlset>`;\r\n\r\n      const result = generator.validateSitemap(invalidXML);\r\n      \r\n      expect(result.isValid).toBe(false);\r\n      expect(result.errors.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    test('debe detectar URLs inválidas', () => {\r\n      const xmlWithInvalidURL = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n  <url>\r\n    <loc>not-a-valid-url</loc>\r\n    <lastmod>2024-01-01</lastmod>\r\n  </url>\r\n</urlset>`;\r\n\r\n      const result = generator.validateSitemap(xmlWithInvalidURL);\r\n      \r\n      expect(result.isValid).toBe(false);\r\n      expect(result.errors.some(error => error.includes('Invalid URL'))).toBe(true);\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE CONFIGURACIÓN\r\n  // ===================================\r\n\r\n  describe('Configuración', () => {\r\n    test('debe permitir reconfiguración dinámica', () => {\r\n      const newConfig = {\r\n        maxUrlsPerSitemap: 500,\r\n        enableImages: false\r\n      };\r\n\r\n      generator.configure(newConfig);\r\n      \r\n      // La configuración se aplica internamente\r\n      expect(() => generator.configure(newConfig)).not.toThrow();\r\n    });\r\n\r\n    test('debe mantener configuración existente al reconfigurar parcialmente', () => {\r\n      const originalBaseUrl = 'https://test-site.com';\r\n      \r\n      generator.configure({\r\n        maxUrlsPerSitemap: 300\r\n      });\r\n      \r\n      // La configuración base debe mantenerse\r\n      expect(() => generator.configure({ maxUrlsPerSitemap: 300 })).not.toThrow();\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE CACHE\r\n  // ===================================\r\n\r\n  describe('Gestión de Cache', () => {\r\n    test('debe limpiar cache sin errores', async () => {\r\n      await expect(generator.clearCache()).resolves.not.toThrow();\r\n    });\r\n\r\n    test('debe manejar cache deshabilitado', async () => {\r\n      // Cache ya está deshabilitado en la configuración de test\r\n      const sitemapUrls = await generator.generateSitemap();\r\n      \r\n      expect(Array.isArray(sitemapUrls)).toBe(true);\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE ESTADÍSTICAS Y REPORTES\r\n  // ===================================\r\n\r\n  describe('Estadísticas y Reportes', () => {\r\n    test('debe generar estadísticas válidas', () => {\r\n      const stats = generator.getStats();\r\n      \r\n      expect(typeof stats.totalUrls).toBe('number');\r\n      expect(typeof stats.totalSitemaps).toBe('number');\r\n      expect(typeof stats.generationTime).toBe('number');\r\n      expect(typeof stats.cacheHitRate).toBe('number');\r\n      expect(Array.isArray(stats.errors)).toBe(true);\r\n      expect(Array.isArray(stats.warnings)).toBe(true);\r\n      expect(stats.lastGenerated).toBeInstanceOf(Date);\r\n    });\r\n\r\n    test('debe generar reporte completo', () => {\r\n      const report = generator.generateReport();\r\n      \r\n      expect(report.summary).toBeDefined();\r\n      expect(Array.isArray(report.recommendations)).toBe(true);\r\n      expect(report.performance).toBeDefined();\r\n      expect(typeof report.performance.generationTime).toBe('number');\r\n      expect(typeof report.performance.cacheEfficiency).toBe('number');\r\n      expect(typeof report.performance.urlDiscoveryTime).toBe('number');\r\n    });\r\n\r\n    test('debe incluir recomendaciones basadas en performance', () => {\r\n      const report = generator.generateReport();\r\n      \r\n      expect(Array.isArray(report.recommendations)).toBe(true);\r\n      // Las recomendaciones pueden estar vacías inicialmente\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE LIMPIEZA Y DESTRUCCIÓN\r\n  // ===================================\r\n\r\n  describe('Limpieza y Destrucción', () => {\r\n    test('debe destruir instancia sin errores', async () => {\r\n      await expect(generator.destroy()).resolves.not.toThrow();\r\n    });\r\n\r\n    test('debe limpiar recursos al destruir', async () => {\r\n      await generator.destroy();\r\n      \r\n      // Verificar que se puede crear nueva instancia después de destruir\r\n      const newGenerator = EnhancedDynamicSitemapGenerator.getInstance();\r\n      expect(newGenerator).toBeInstanceOf(EnhancedDynamicSitemapGenerator);\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE INTEGRACIÓN\r\n  // ===================================\r\n\r\n  describe('Integración', () => {\r\n    test('debe funcionar con datos de productos simulados', async () => {\r\n      // Mock successful product data\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      getSupabaseClient.mockReturnValue({\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        order: jest.fn().mockReturnThis(),\r\n        limit: jest.fn().mockResolvedValue({\r\n          data: [\r\n            {\r\n              id: 1,\r\n              slug: 'test-product',\r\n              name: 'Test Product',\r\n              updated_at: '2024-01-01T00:00:00Z',\r\n              images: ['/image1.jpg']\r\n            }\r\n          ],\r\n          error: null\r\n        })\r\n      });\r\n\r\n      const sitemapUrls = await generator.generateSitemap();\r\n      const stats = generator.getStats();\r\n\r\n      // Verificar que se generó el sitemap y que incluye páginas estáticas al menos\r\n      expect(Array.isArray(sitemapUrls)).toBe(true);\r\n      expect(stats.totalUrls).toBeGreaterThan(0);\r\n      expect(stats.staticPages).toBeGreaterThan(0);\r\n    });\r\n\r\n    test('debe generar reporte después de generación completa', async () => {\r\n      await generator.generateSitemap();\r\n      const report = generator.generateReport();\r\n\r\n      expect(report.summary.totalUrls).toBeGreaterThan(0);\r\n      expect(report.summary.generationTime).toBeGreaterThanOrEqual(0);\r\n      expect(Array.isArray(report.recommendations)).toBe(true);\r\n      expect(report.performance).toBeDefined();\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","logger","info","fn","warn","error","LogLevel","INFO","WARN","ERROR","LogCategory","SEO","getRedisClient","mockResolvedValue","getSupabaseClient","mockReturnValue","from","mockReturnThis","select","eq","order","limit","data","describe","generator","mockConfig","beforeEach","EnhancedDynamicSitemapGenerator","instance","undefined","baseUrl","maxUrlsPerSitemap","enableImages","cacheEnabled","cacheTTL","getInstance","afterEach","destroy","test","instance1","instance2","expect","toBe","toBeInstanceOf","customConfig","customGenerator","stats","getStats","toBeDefined","totalUrls","totalSitemaps","staticPages","productPages","categoryPages","blogPages","errors","toEqual","warnings","sitemapUrls","generateSitemap","Array","isArray","length","toBeGreaterThan","require","message","toBeGreaterThanOrEqual","validXML","result","validateSitemap","isValid","invalidXML","xmlWithInvalidURL","some","includes","newConfig","configure","not","toThrow","originalBaseUrl","clearCache","resolves","generationTime","cacheHitRate","lastGenerated","Date","report","generateReport","summary","recommendations","performance","cacheEfficiency","urlDiscoveryTime","newGenerator","id","slug","name","updated_at","images"],"mappings":"AAAA,sCAAsC;AACtC,6CAA6C;AAC7C,sEAAsE;AACtE,sCAAsC;;AAUtC,oBAAoB;AACpBA,KAAKC,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC/BC,QAAQ;YACNC,MAAMH,KAAKI,EAAE;YACbC,MAAML,KAAKI,EAAE;YACbE,OAAON,KAAKI,EAAE;QAChB;QACAG,UAAU;YACRC,MAAM;YACNC,MAAM;YACNC,OAAO;QACT;QACAC,aAAa;YACXC,KAAK;QACP;IACF,CAAA;AAEAZ,KAAKC,IAAI,CAAC,eAAe,IAAO,CAAA;QAC9BY,gBAAgBb,KAAKI,EAAE,GAAGU,iBAAiB,CAAC;IAC9C,CAAA;AAEAd,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCc,mBAAmBf,KAAKI,EAAE,GAAGY,eAAe,CAAC;YAC3CC,MAAMjB,KAAKI,EAAE,GAAGc,cAAc;YAC9BC,QAAQnB,KAAKI,EAAE,GAAGc,cAAc;YAChCE,IAAIpB,KAAKI,EAAE,GAAGc,cAAc;YAC5BG,OAAOrB,KAAKI,EAAE,GAAGc,cAAc;YAC/BI,OAAOtB,KAAKI,EAAE,GAAGU,iBAAiB,CAAC;gBACjCS,MAAM,EAAE;gBACRjB,OAAO;YACT;QACF;IACF,CAAA;;;;yCAlCO;AAoCPkB,SAAS,sCAAsC;IAC7C,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACT,2BAA2B;QAC1BC,wDAA+B,CAASC,QAAQ,GAAGC;QAEpDJ,aAAa;YACXK,SAAS;YACTC,mBAAmB;YACnBC,cAAc;YACdC,cAAc;YACdC,UAAU;QACZ;QAEAV,YAAYG,wDAA+B,CAACQ,WAAW,CAACV;IAC1D;IAEAW,UAAU;QACR,MAAMZ,UAAUa,OAAO;IACzB;IAEA,sCAAsC;IACtC,0BAA0B;IAC1B,sCAAsC;IAEtCd,SAAS,kBAAkB;QACzBe,KAAK,gDAAgD;YACnD,MAAMC,YAAYZ,wDAA+B,CAACQ,WAAW;YAC7D,MAAMK,YAAYb,wDAA+B,CAACQ,WAAW;YAE7DM,OAAOF,WAAWG,IAAI,CAACF;YACvBC,OAAOF,WAAWI,cAAc,CAAChB,wDAA+B;QAClE;QAEAW,KAAK,4CAA4C;YAC/C,MAAMM,eAAe;gBACnBd,SAAS;gBACTC,mBAAmB;YACrB;YAEA,MAAMc,kBAAkBlB,wDAA+B,CAACQ,WAAW,CAACS;YACpE,MAAME,QAAQD,gBAAgBE,QAAQ;YAEtCN,OAAOK,OAAOE,WAAW;QAC3B;QAEAV,KAAK,6CAA6C;YAChD,MAAMQ,QAAQtB,UAAUuB,QAAQ;YAEhCN,OAAOK,MAAMG,SAAS,EAAEP,IAAI,CAAC;YAC7BD,OAAOK,MAAMI,aAAa,EAAER,IAAI,CAAC;YACjCD,OAAOK,MAAMK,WAAW,EAAET,IAAI,CAAC;YAC/BD,OAAOK,MAAMM,YAAY,EAAEV,IAAI,CAAC;YAChCD,OAAOK,MAAMO,aAAa,EAAEX,IAAI,CAAC;YACjCD,OAAOK,MAAMQ,SAAS,EAAEZ,IAAI,CAAC;YAC7BD,OAAOK,MAAMS,MAAM,EAAEC,OAAO,CAAC,EAAE;YAC/Bf,OAAOK,MAAMW,QAAQ,EAAED,OAAO,CAAC,EAAE;QACnC;IACF;IAEA,sCAAsC;IACtC,iCAAiC;IACjC,sCAAsC;IAEtCjC,SAAS,yBAAyB;QAChCe,KAAK,2CAA2C;YAC9C,MAAMoB,cAAc,MAAMlC,UAAUmC,eAAe;YAEnDlB,OAAOmB,MAAMC,OAAO,CAACH,cAAchB,IAAI,CAAC;YACxCD,OAAOiB,YAAYI,MAAM,EAAEC,eAAe,CAAC;YAE3C,MAAMjB,QAAQtB,UAAUuB,QAAQ;YAChCN,OAAOK,MAAMG,SAAS,EAAEc,eAAe,CAAC;YACxCtB,OAAOK,MAAMS,MAAM,CAACO,MAAM,EAAEpB,IAAI,CAAC;QACnC;QAEAJ,KAAK,8CAA8C;YACjD,MAAMd,UAAUmC,eAAe;YAC/B,MAAMb,QAAQtB,UAAUuB,QAAQ;YAEhCN,OAAOK,MAAMK,WAAW,EAAEY,eAAe,CAAC;QAC5C;QAEAzB,KAAK,oDAAoD;YACvD,yBAAyB;YACzB,MAAM,EAAExB,iBAAiB,EAAE,GAAGkD,QAAQ;YACtClD,kBAAkBC,eAAe,CAAC;gBAChCC,MAAMjB,KAAKI,EAAE,GAAGc,cAAc;gBAC9BC,QAAQnB,KAAKI,EAAE,GAAGc,cAAc;gBAChCE,IAAIpB,KAAKI,EAAE,GAAGc,cAAc;gBAC5BG,OAAOrB,KAAKI,EAAE,GAAGc,cAAc;gBAC/BI,OAAOtB,KAAKI,EAAE,GAAGU,iBAAiB,CAAC;oBACjCS,MAAM;oBACNjB,OAAO;wBAAE4D,SAAS;oBAAiB;gBACrC;YACF;YAEA,MAAMP,cAAc,MAAMlC,UAAUmC,eAAe;YACnD,MAAMb,QAAQtB,UAAUuB,QAAQ;YAEhCN,OAAOmB,MAAMC,OAAO,CAACH,cAAchB,IAAI,CAAC;YACxC,kFAAkF;YAClFD,OAAOK,MAAMS,MAAM,CAACO,MAAM,EAAEI,sBAAsB,CAAC;QACrD;IACF;IAEA,sCAAsC;IACtC,0BAA0B;IAC1B,sCAAsC;IAEtC3C,SAAS,qBAAqB;QAC5Be,KAAK,yCAAyC;YAC5C,MAAM6B,WAAW,CAAC;;;;;;;;SAQf,CAAC;YAEJ,MAAMC,SAAS5C,UAAU6C,eAAe,CAACF;YAEzC1B,OAAO2B,OAAOE,OAAO,EAAE5B,IAAI,CAAC;YAC5BD,OAAO2B,OAAOb,MAAM,CAACO,MAAM,EAAEpB,IAAI,CAAC;QACpC;QAEAJ,KAAK,8BAA8B;YACjC,MAAMiC,aAAa,CAAC;;;;SAIjB,CAAC;YAEJ,MAAMH,SAAS5C,UAAU6C,eAAe,CAACE;YAEzC9B,OAAO2B,OAAOE,OAAO,EAAE5B,IAAI,CAAC;YAC5BD,OAAO2B,OAAOb,MAAM,CAACO,MAAM,EAAEC,eAAe,CAAC;QAC/C;QAEAzB,KAAK,gCAAgC;YACnC,MAAMkC,oBAAoB,CAAC;;;;;;SAMxB,CAAC;YAEJ,MAAMJ,SAAS5C,UAAU6C,eAAe,CAACG;YAEzC/B,OAAO2B,OAAOE,OAAO,EAAE5B,IAAI,CAAC;YAC5BD,OAAO2B,OAAOb,MAAM,CAACkB,IAAI,CAACpE,CAAAA,QAASA,MAAMqE,QAAQ,CAAC,iBAAiBhC,IAAI,CAAC;QAC1E;IACF;IAEA,sCAAsC;IACtC,yBAAyB;IACzB,sCAAsC;IAEtCnB,SAAS,iBAAiB;QACxBe,KAAK,0CAA0C;YAC7C,MAAMqC,YAAY;gBAChB5C,mBAAmB;gBACnBC,cAAc;YAChB;YAEAR,UAAUoD,SAAS,CAACD;YAEpB,0CAA0C;YAC1ClC,OAAO,IAAMjB,UAAUoD,SAAS,CAACD,YAAYE,GAAG,CAACC,OAAO;QAC1D;QAEAxC,KAAK,sEAAsE;YACzE,MAAMyC,kBAAkB;YAExBvD,UAAUoD,SAAS,CAAC;gBAClB7C,mBAAmB;YACrB;YAEA,wCAAwC;YACxCU,OAAO,IAAMjB,UAAUoD,SAAS,CAAC;oBAAE7C,mBAAmB;gBAAI,IAAI8C,GAAG,CAACC,OAAO;QAC3E;IACF;IAEA,sCAAsC;IACtC,iBAAiB;IACjB,sCAAsC;IAEtCvD,SAAS,oBAAoB;QAC3Be,KAAK,kCAAkC;YACrC,MAAMG,OAAOjB,UAAUwD,UAAU,IAAIC,QAAQ,CAACJ,GAAG,CAACC,OAAO;QAC3D;QAEAxC,KAAK,oCAAoC;YACvC,0DAA0D;YAC1D,MAAMoB,cAAc,MAAMlC,UAAUmC,eAAe;YAEnDlB,OAAOmB,MAAMC,OAAO,CAACH,cAAchB,IAAI,CAAC;QAC1C;IACF;IAEA,sCAAsC;IACtC,mCAAmC;IACnC,sCAAsC;IAEtCnB,SAAS,2BAA2B;QAClCe,KAAK,qCAAqC;YACxC,MAAMQ,QAAQtB,UAAUuB,QAAQ;YAEhCN,OAAO,OAAOK,MAAMG,SAAS,EAAEP,IAAI,CAAC;YACpCD,OAAO,OAAOK,MAAMI,aAAa,EAAER,IAAI,CAAC;YACxCD,OAAO,OAAOK,MAAMoC,cAAc,EAAExC,IAAI,CAAC;YACzCD,OAAO,OAAOK,MAAMqC,YAAY,EAAEzC,IAAI,CAAC;YACvCD,OAAOmB,MAAMC,OAAO,CAACf,MAAMS,MAAM,GAAGb,IAAI,CAAC;YACzCD,OAAOmB,MAAMC,OAAO,CAACf,MAAMW,QAAQ,GAAGf,IAAI,CAAC;YAC3CD,OAAOK,MAAMsC,aAAa,EAAEzC,cAAc,CAAC0C;QAC7C;QAEA/C,KAAK,iCAAiC;YACpC,MAAMgD,SAAS9D,UAAU+D,cAAc;YAEvC9C,OAAO6C,OAAOE,OAAO,EAAExC,WAAW;YAClCP,OAAOmB,MAAMC,OAAO,CAACyB,OAAOG,eAAe,GAAG/C,IAAI,CAAC;YACnDD,OAAO6C,OAAOI,WAAW,EAAE1C,WAAW;YACtCP,OAAO,OAAO6C,OAAOI,WAAW,CAACR,cAAc,EAAExC,IAAI,CAAC;YACtDD,OAAO,OAAO6C,OAAOI,WAAW,CAACC,eAAe,EAAEjD,IAAI,CAAC;YACvDD,OAAO,OAAO6C,OAAOI,WAAW,CAACE,gBAAgB,EAAElD,IAAI,CAAC;QAC1D;QAEAJ,KAAK,uDAAuD;YAC1D,MAAMgD,SAAS9D,UAAU+D,cAAc;YAEvC9C,OAAOmB,MAAMC,OAAO,CAACyB,OAAOG,eAAe,GAAG/C,IAAI,CAAC;QACnD,uDAAuD;QACzD;IACF;IAEA,sCAAsC;IACtC,kCAAkC;IAClC,sCAAsC;IAEtCnB,SAAS,0BAA0B;QACjCe,KAAK,uCAAuC;YAC1C,MAAMG,OAAOjB,UAAUa,OAAO,IAAI4C,QAAQ,CAACJ,GAAG,CAACC,OAAO;QACxD;QAEAxC,KAAK,qCAAqC;YACxC,MAAMd,UAAUa,OAAO;YAEvB,mEAAmE;YACnE,MAAMwD,eAAelE,wDAA+B,CAACQ,WAAW;YAChEM,OAAOoD,cAAclD,cAAc,CAAChB,wDAA+B;QACrE;IACF;IAEA,sCAAsC;IACtC,uBAAuB;IACvB,sCAAsC;IAEtCJ,SAAS,eAAe;QACtBe,KAAK,mDAAmD;YACtD,+BAA+B;YAC/B,MAAM,EAAExB,iBAAiB,EAAE,GAAGkD,QAAQ;YACtClD,kBAAkBC,eAAe,CAAC;gBAChCC,MAAMjB,KAAKI,EAAE,GAAGc,cAAc;gBAC9BC,QAAQnB,KAAKI,EAAE,GAAGc,cAAc;gBAChCE,IAAIpB,KAAKI,EAAE,GAAGc,cAAc;gBAC5BG,OAAOrB,KAAKI,EAAE,GAAGc,cAAc;gBAC/BI,OAAOtB,KAAKI,EAAE,GAAGU,iBAAiB,CAAC;oBACjCS,MAAM;wBACJ;4BACEwE,IAAI;4BACJC,MAAM;4BACNC,MAAM;4BACNC,YAAY;4BACZC,QAAQ;gCAAC;6BAAc;wBACzB;qBACD;oBACD7F,OAAO;gBACT;YACF;YAEA,MAAMqD,cAAc,MAAMlC,UAAUmC,eAAe;YACnD,MAAMb,QAAQtB,UAAUuB,QAAQ;YAEhC,8EAA8E;YAC9EN,OAAOmB,MAAMC,OAAO,CAACH,cAAchB,IAAI,CAAC;YACxCD,OAAOK,MAAMG,SAAS,EAAEc,eAAe,CAAC;YACxCtB,OAAOK,MAAMK,WAAW,EAAEY,eAAe,CAAC;QAC5C;QAEAzB,KAAK,uDAAuD;YAC1D,MAAMd,UAAUmC,eAAe;YAC/B,MAAM2B,SAAS9D,UAAU+D,cAAc;YAEvC9C,OAAO6C,OAAOE,OAAO,CAACvC,SAAS,EAAEc,eAAe,CAAC;YACjDtB,OAAO6C,OAAOE,OAAO,CAACN,cAAc,EAAEhB,sBAAsB,CAAC;YAC7DzB,OAAOmB,MAAMC,OAAO,CAACyB,OAAOG,eAAe,GAAG/C,IAAI,CAAC;YACnDD,OAAO6C,OAAOI,WAAW,EAAE1C,WAAW;QACxC;IACF;AACF"}