{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\driver\\driver-e2e.test.ts"],"sourcesContent":["/**\r\n * Tests end-to-end para el sistema de navegación GPS de drivers\r\n * Verifica el flujo completo desde login hasta navegación\r\n */\r\n\r\nimport { test, expect, Page } from '@playwright/test';\r\n\r\n// Configuración de pruebas E2E\r\ntest.describe('Driver GPS Navigation System E2E Tests', () => {\r\n  let page: Page;\r\n\r\n  const DRIVER_CREDENTIALS = {\r\n    email: 'carlos@pinteya.com',\r\n    name: 'Carlos Rodríguez'\r\n  };\r\n\r\n  test.beforeEach(async ({ page: testPage }) => {\r\n    page = testPage;\r\n    \r\n    // Configurar geolocalización mock\r\n    await page.context().grantPermissions(['geolocation']);\r\n    await page.context().setGeolocation({ latitude: -34.6037, longitude: -58.3816 });\r\n    \r\n    // Navegar a la página de login de drivers\r\n    await page.goto('/driver/login');\r\n  });\r\n\r\n  test.describe('Authentication Flow', () => {\r\n    test('should login successfully with valid driver credentials', async () => {\r\n      // Llenar formulario de login\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n\r\n      // Verificar redirección al dashboard\r\n      await expect(page).toHaveURL('/driver/dashboard');\r\n      \r\n      // Verificar que se muestra el nombre del driver\r\n      await expect(page.locator('text=' + DRIVER_CREDENTIALS.name)).toBeVisible();\r\n    });\r\n\r\n    test('should show error for invalid credentials', async () => {\r\n      // Intentar login con credenciales inválidas\r\n      await page.fill('input[type=\"email\"]', 'invalid@example.com');\r\n      await page.click('button[type=\"submit\"]');\r\n\r\n      // Verificar mensaje de error\r\n      await expect(page.locator('text=Error de autenticación')).toBeVisible();\r\n    });\r\n\r\n    test('should redirect unauthenticated users to login', async () => {\r\n      // Intentar acceder al dashboard sin autenticación\r\n      await page.goto('/driver/dashboard');\r\n      \r\n      // Verificar redirección al login\r\n      await expect(page).toHaveURL('/driver/login');\r\n    });\r\n  });\r\n\r\n  test.describe('Dashboard Functionality', () => {\r\n    test.beforeEach(async () => {\r\n      // Login como driver\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n    });\r\n\r\n    test('should display driver status and controls', async () => {\r\n      // Verificar elementos del dashboard\r\n      await expect(page.locator('text=Estado del Driver')).toBeVisible();\r\n      await expect(page.locator('text=Van - ABC123')).toBeVisible();\r\n      \r\n      // Verificar controles de estado\r\n      await expect(page.locator('button:has-text(\"Conectarse\")')).toBeVisible();\r\n      await expect(page.locator('button:has-text(\"Desconectar\")')).toBeVisible();\r\n    });\r\n\r\n    test('should toggle online/offline status', async () => {\r\n      // Conectarse\r\n      await page.click('button:has-text(\"Conectarse\")');\r\n      await expect(page.locator('text=En Línea')).toBeVisible();\r\n      \r\n      // Desconectarse\r\n      await page.click('button:has-text(\"Desconectar\")');\r\n      await expect(page.locator('text=Desconectado')).toBeVisible();\r\n    });\r\n\r\n    test('should show current location when GPS is active', async () => {\r\n      // Conectarse para activar GPS\r\n      await page.click('button:has-text(\"Conectarse\")');\r\n      \r\n      // Verificar que se muestra la ubicación\r\n      await expect(page.locator('text=Ubicación:')).toBeVisible();\r\n      await expect(page.locator('text=GPS Activo')).toBeVisible();\r\n    });\r\n\r\n    test('should display today statistics', async () => {\r\n      // Verificar estadísticas del día\r\n      await expect(page.locator('text=Estadísticas de Hoy')).toBeVisible();\r\n      await expect(page.locator('text=Entregas')).toBeVisible();\r\n      await expect(page.locator('text=Distancia')).toBeVisible();\r\n      await expect(page.locator('text=Tiempo Activo')).toBeVisible();\r\n      await expect(page.locator('text=Eficiencia')).toBeVisible();\r\n    });\r\n  });\r\n\r\n  test.describe('Navigation Between Pages', () => {\r\n    test.beforeEach(async () => {\r\n      // Login como driver\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n    });\r\n\r\n    test('should navigate to routes page', async () => {\r\n      await page.click('text=Rutas');\r\n      await expect(page).toHaveURL('/driver/routes');\r\n      await expect(page.locator('text=Mis Rutas')).toBeVisible();\r\n    });\r\n\r\n    test('should navigate to deliveries page', async () => {\r\n      await page.click('text=Entregas');\r\n      await expect(page).toHaveURL('/driver/deliveries');\r\n      await expect(page.locator('text=Mis Entregas')).toBeVisible();\r\n    });\r\n\r\n    test('should navigate to profile page', async () => {\r\n      await page.click('text=Perfil');\r\n      await expect(page).toHaveURL('/driver/profile');\r\n      await expect(page.locator('text=Mi Perfil')).toBeVisible();\r\n    });\r\n\r\n    test('should return to dashboard from any page', async () => {\r\n      // Ir a rutas\r\n      await page.click('text=Rutas');\r\n      await expect(page).toHaveURL('/driver/routes');\r\n      \r\n      // Volver al dashboard\r\n      await page.click('text=Inicio');\r\n      await expect(page).toHaveURL('/driver/dashboard');\r\n    });\r\n  });\r\n\r\n  test.describe('Routes Management', () => {\r\n    test.beforeEach(async () => {\r\n      // Login y navegar a rutas\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n      await page.click('text=Rutas');\r\n    });\r\n\r\n    test('should display assigned routes', async () => {\r\n      await expect(page.locator('text=Mis Rutas')).toBeVisible();\r\n      await expect(page.locator('text=Planificadas')).toBeVisible();\r\n      await expect(page.locator('text=Activa')).toBeVisible();\r\n      await expect(page.locator('text=Completadas')).toBeVisible();\r\n    });\r\n\r\n    test('should filter routes by date', async () => {\r\n      // Cambiar fecha\r\n      const today = new Date().toISOString().split('T')[0];\r\n      await page.fill('input[type=\"date\"]', today);\r\n      \r\n      // Verificar que se actualiza la vista\r\n      await expect(page.locator('input[type=\"date\"]')).toHaveValue(today);\r\n    });\r\n\r\n    test('should start a route when online', async () => {\r\n      // Primero conectarse\r\n      await page.click('text=Inicio');\r\n      await page.click('button:has-text(\"Conectarse\")');\r\n      \r\n      // Volver a rutas\r\n      await page.click('text=Rutas');\r\n      \r\n      // Buscar botón de iniciar ruta (si hay rutas disponibles)\r\n      const startButton = page.locator('button:has-text(\"Iniciar\")').first();\r\n      if (await startButton.isVisible()) {\r\n        await startButton.click();\r\n        \r\n        // Verificar que se inicia la ruta\r\n        await expect(page.locator('text=Ruta Activa')).toBeVisible();\r\n      }\r\n    });\r\n  });\r\n\r\n  test.describe('GPS Navigation', () => {\r\n    test.beforeEach(async () => {\r\n      // Login y setup para navegación\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n    });\r\n\r\n    test('should access GPS navigation for active route', async () => {\r\n      // Si hay una ruta activa, probar navegación\r\n      const navButton = page.locator('button:has-text(\"Continuar Navegación\")');\r\n      if (await navButton.isVisible()) {\r\n        await navButton.click();\r\n        \r\n        // Verificar que se carga la página de navegación\r\n        await expect(page.url()).toContain('/driver/route/');\r\n        \r\n        // Verificar elementos de navegación\r\n        await expect(page.locator('[data-testid=\"google-map\"]')).toBeVisible();\r\n      }\r\n    });\r\n\r\n    test('should show navigation instructions when available', async () => {\r\n      // Navegar a una ruta específica (mock)\r\n      await page.goto('/driver/route/test-route-id');\r\n      \r\n      // Verificar elementos de navegación\r\n      await expect(page.locator('text=Navegando')).toBeVisible();\r\n      await expect(page.locator('button:has-text(\"Navegar\")')).toBeVisible();\r\n    });\r\n  });\r\n\r\n  test.describe('Delivery Management', () => {\r\n    test.beforeEach(async () => {\r\n      // Login y navegar a entregas\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n      await page.click('text=Entregas');\r\n    });\r\n\r\n    test('should display delivery history', async () => {\r\n      await expect(page.locator('text=Mis Entregas')).toBeVisible();\r\n      await expect(page.locator('text=Historial y gestión de entregas')).toBeVisible();\r\n    });\r\n\r\n    test('should filter deliveries by status', async () => {\r\n      // Cambiar filtro de estado\r\n      await page.selectOption('select', 'delivered');\r\n      \r\n      // Verificar que se aplica el filtro\r\n      await expect(page.locator('select')).toHaveValue('delivered');\r\n    });\r\n\r\n    test('should search deliveries', async () => {\r\n      // Buscar por término\r\n      await page.fill('input[placeholder*=\"Buscar\"]', 'Cliente Test');\r\n      \r\n      // Verificar que se actualiza la búsqueda\r\n      await expect(page.locator('input[placeholder*=\"Buscar\"]')).toHaveValue('Cliente Test');\r\n    });\r\n  });\r\n\r\n  test.describe('Profile Management', () => {\r\n    test.beforeEach(async () => {\r\n      // Login y navegar a perfil\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n      await page.click('text=Perfil');\r\n    });\r\n\r\n    test('should display driver profile information', async () => {\r\n      await expect(page.locator('text=Mi Perfil')).toBeVisible();\r\n      await expect(page.locator('text=' + DRIVER_CREDENTIALS.name)).toBeVisible();\r\n      await expect(page.locator('text=' + DRIVER_CREDENTIALS.email)).toBeVisible();\r\n    });\r\n\r\n    test('should show driver statistics', async () => {\r\n      await expect(page.locator('text=Estadísticas')).toBeVisible();\r\n      await expect(page.locator('text=Entregas Totales')).toBeVisible();\r\n      await expect(page.locator('text=Rutas Completadas')).toBeVisible();\r\n      await expect(page.locator('text=Calificación')).toBeVisible();\r\n      await expect(page.locator('text=Eficiencia')).toBeVisible();\r\n    });\r\n\r\n    test('should logout successfully', async () => {\r\n      await page.click('button:has-text(\"Cerrar Sesión\")');\r\n      \r\n      // Verificar redirección al login\r\n      await expect(page).toHaveURL('/driver/login');\r\n    });\r\n  });\r\n\r\n  test.describe('Responsive Design', () => {\r\n    test('should work correctly on mobile viewport', async () => {\r\n      // Cambiar a viewport móvil\r\n      await page.setViewportSize({ width: 375, height: 667 });\r\n      \r\n      // Login\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n      \r\n      // Verificar que la navegación móvil funciona\r\n      await expect(page.locator('nav')).toBeVisible();\r\n      await expect(page.locator('text=Inicio')).toBeVisible();\r\n      await expect(page.locator('text=Rutas')).toBeVisible();\r\n      await expect(page.locator('text=Entregas')).toBeVisible();\r\n      await expect(page.locator('text=Perfil')).toBeVisible();\r\n    });\r\n\r\n    test('should maintain functionality on tablet viewport', async () => {\r\n      // Cambiar a viewport tablet\r\n      await page.setViewportSize({ width: 768, height: 1024 });\r\n      \r\n      // Login y verificar funcionalidad\r\n      await page.fill('input[type=\"email\"]', DRIVER_CREDENTIALS.email);\r\n      await page.click('button[type=\"submit\"]');\r\n      await page.waitForURL('/driver/dashboard');\r\n      \r\n      // Verificar que todos los elementos son visibles y funcionales\r\n      await expect(page.locator('text=Estado del Driver')).toBeVisible();\r\n      await expect(page.locator('text=Estadísticas de Hoy')).toBeVisible();\r\n    });\r\n  });\r\n});\r\n"],"names":["test","describe","page","DRIVER_CREDENTIALS","email","name","beforeEach","testPage","context","grantPermissions","setGeolocation","latitude","longitude","goto","fill","click","expect","toHaveURL","locator","toBeVisible","waitForURL","today","Date","toISOString","split","toHaveValue","startButton","first","isVisible","navButton","url","toContain","selectOption","setViewportSize","width","height"],"mappings":"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"}