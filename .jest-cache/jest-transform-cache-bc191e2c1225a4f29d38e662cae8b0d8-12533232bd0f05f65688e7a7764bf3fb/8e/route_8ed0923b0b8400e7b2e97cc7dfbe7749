bd13590d91f2fac37024814953ae0c44
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _supabase = require("../../../lib/integrations/supabase");
const runtime = 'nodejs';
async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        // Extraer parámetros de query
        const filters = {
            search: searchParams.get('search') || undefined,
            minProducts: searchParams.get('minProducts') ? Number(searchParams.get('minProducts')) : 1
        };
        const supabase = (0, _supabase.getSupabaseClient)();
        // Verificar que el cliente de Supabase esté disponible
        if (!supabase) {
            console.error('Cliente de Supabase no disponible en GET /api/brands');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio de base de datos no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Construir query para obtener marcas con conteo de productos
        let query = supabase.from('products').select('brand').not('brand', 'is', null).gt('stock', 0) // Solo productos con stock
        ;
        // Aplicar filtro de búsqueda si existe
        if (filters.search) {
            query = query.ilike('brand', `%${filters.search}%`);
        }
        // Ejecutar query
        const { data: products, error } = await query;
        if (error) {
            (0, _supabase.handleSupabaseError)(error, 'GET /api/brands');
        }
        // Procesar datos para obtener marcas únicas con conteo
        const brandCounts = {};
        products?.forEach((product)=>{
            if (product.brand) {
                brandCounts[product.brand] = (brandCounts[product.brand] || 0) + 1;
            }
        });
        // Convertir a array y filtrar por mínimo de productos
        const brands = Object.entries(brandCounts).filter(([_, count])=>count >= (filters.minProducts || 1)).map(([name, products_count])=>({
                name,
                products_count
            })).sort((a, b)=>{
            // Ordenar por número de productos (descendente) y luego por nombre
            if (a.products_count !== b.products_count) {
                return b.products_count - a.products_count;
            }
            return a.name.localeCompare(b.name);
        });
        const response = {
            data: brands,
            success: true,
            message: `${brands.length} marcas encontradas`
        };
        return _server.NextResponse.json(response);
    } catch (error) {
        console.error('Error en GET /api/brands:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        const supabase = (0, _supabase.getSupabaseClient)();
        if (!supabase) {
            console.error('Cliente de Supabase no disponible en POST /api/brands');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio de base de datos no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Obtener estadísticas detalladas de marcas
        const { data: products, error } = await supabase.from('products').select('brand, price, discounted_price, stock, category_id').not('brand', 'is', null);
        if (error) {
            (0, _supabase.handleSupabaseError)(error, 'POST /api/brands (stats)');
        }
        // Calcular estadísticas por marca
        const brandStats = {};
        products?.forEach((product)=>{
            if (product.brand) {
                if (!brandStats[product.brand]) {
                    brandStats[product.brand] = {
                        name: product.brand,
                        products_count: 0,
                        total_stock: 0,
                        avg_price: 0,
                        min_price: Infinity,
                        max_price: 0,
                        discounted_products: 0
                    };
                }
                const stats = brandStats[product.brand];
                const currentPrice = product.discounted_price || product.price;
                stats.products_count++;
                stats.total_stock += product.stock || 0;
                stats.min_price = Math.min(stats.min_price, currentPrice);
                stats.max_price = Math.max(stats.max_price, currentPrice);
                if (product.discounted_price && product.discounted_price < product.price) {
                    stats.discounted_products++;
                }
            }
        });
        // Calcular precio promedio y finalizar estadísticas
        const finalStats = Object.values(brandStats).map((stats)=>{
            const brandProducts = products?.filter((p)=>p.brand === stats.name) || [];
            const totalPrice = brandProducts.reduce((sum, p)=>sum + (p.discounted_price || p.price), 0);
            return {
                ...stats,
                avg_price: Math.round(totalPrice / stats.products_count),
                min_price: stats.min_price === Infinity ? 0 : stats.min_price
            };
        }).sort((a, b)=>b.products_count - a.products_count);
        const response = {
            data: finalStats,
            success: true,
            message: `Estadísticas de ${finalStats.length} marcas calculadas`
        };
        return _server.NextResponse.json(response);
    } catch (error) {
        console.error('Error en POST /api/brands (stats):', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,