a01188879ce11e87725680dd90ed383f
// ===================================
// PINTEYA E-COMMERCE - ALERT SYSTEM TESTS
// ===================================
"use strict";
// Mock logger
jest.mock('@/lib/enterprise/logger', ()=>({
        logger: {
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            log: jest.fn()
        },
        LogLevel: {
            INFO: 'info',
            WARN: 'warn',
            ERROR: 'error'
        },
        LogCategory: {
            SYSTEM: 'system'
        }
    }));
jest.mock('@/lib/supabase', ()=>({
        getSupabaseClient: jest.fn(()=>({
                from: mockSupabaseFrom
            }))
    }));
// Mock cache
jest.mock('@/lib/cache-manager', ()=>({
        CacheUtils: {
            get: jest.fn(),
            set: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _alertsystem = require("../../lib/monitoring/alert-system");
// Mock Supabase
const mockSupabaseInsert = jest.fn();
const mockSupabaseUpdate = jest.fn();
const mockSupabaseFrom = jest.fn(()=>({
        insert: mockSupabaseInsert,
        update: mockSupabaseUpdate
    }));
// Mock fetch global
const mockFetch = jest.fn();
global.fetch = mockFetch;
describe('Enterprise Alert System', ()=>{
    let alertSystem;
    beforeEach(()=>{
        jest.clearAllMocks();
        jest.useFakeTimers();
        alertSystem = new _alertsystem.EnterpriseAlertSystem();
        // Mock successful database operations
        mockSupabaseInsert.mockResolvedValue({
            error: null
        });
        mockSupabaseUpdate.mockResolvedValue({
            error: null
        });
        mockFetch.mockResolvedValue({
            ok: true,
            status: 200,
            statusText: 'OK'
        });
    });
    afterEach(()=>{
        jest.useRealTimers();
        alertSystem.destroy();
    });
    describe('Configuración de canales', ()=>{
        test('debe configurar canal de notificación', ()=>{
            const channel = {
                id: 'test_email',
                type: _alertsystem.NotificationType.EMAIL,
                name: 'Test Email Channel',
                config: {
                    to: 'admin@pinteya.com'
                },
                enabled: true,
                levels: [
                    _alertsystem.AlertLevel.CRITICAL,
                    _alertsystem.AlertLevel.EMERGENCY
                ]
            };
            alertSystem.setNotificationChannel(channel);
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
        test('debe configurar regla de escalamiento', ()=>{
            const rule = {
                id: 'test_escalation',
                name: 'Test Escalation',
                enabled: true,
                conditions: {
                    level: _alertsystem.AlertLevel.CRITICAL,
                    duration: 10
                },
                actions: {
                    escalateToLevel: _alertsystem.AlertLevel.EMERGENCY,
                    notifyChannels: [
                        'test_email'
                    ]
                }
            };
            alertSystem.setEscalationRule(rule);
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
        test('debe configurar regla de alerta', ()=>{
            const rule = {
                id: 'test_alert',
                name: 'Test Alert',
                description: 'Test alert rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {
                    environment: 'test'
                }
            };
            alertSystem.setAlertRule(rule);
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
    });
    describe('Disparar alertas', ()=>{
        beforeEach(()=>{
            // Configurar regla de alerta para tests
            alertSystem.setAlertRule({
                id: 'test_rule',
                name: 'Test Rule',
                description: 'Test alert rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {}
            });
        });
        test('debe disparar alerta cuando se cumple condición', async ()=>{
            const alert = await alertSystem.triggerAlert('test_rule', 'test.metric', 150, 'Test alert message');
            expect(alert).toBeTruthy();
            expect(alert?.level).toBe(_alertsystem.AlertLevel.WARNING);
            expect(alert?.value).toBe(150);
            expect(alert?.threshold).toBe(100);
            expect(alert?.status).toBe(_alertsystem.AlertStatus.ACTIVE);
        });
        test('no debe disparar alerta si la regla está deshabilitada', async ()=>{
            // Deshabilitar regla
            alertSystem.setAlertRule({
                id: 'disabled_rule',
                name: 'Disabled Rule',
                description: 'Disabled rule',
                enabled: false,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('disabled_rule', 'test.metric', 150);
            expect(alert).toBeNull();
        });
        test('no debe disparar alerta si está en cooldown', async ()=>{
            // Disparar primera alerta
            const alert1 = await alertSystem.triggerAlert('test_rule', 'test.metric', 150);
            expect(alert1).toBeTruthy();
            // Intentar disparar segunda alerta inmediatamente
            const alert2 = await alertSystem.triggerAlert('test_rule', 'test.metric', 160);
            expect(alert2).toBeNull();
        });
    });
    describe('Gestión de alertas', ()=>{
        let testAlert;
        beforeEach(async ()=>{
            // Configurar y disparar alerta para tests
            alertSystem.setAlertRule({
                id: 'test_rule',
                name: 'Test Rule',
                description: 'Test rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {}
            });
            testAlert = await alertSystem.triggerAlert('test_rule', 'test.metric', 150);
        });
        test('debe reconocer alerta', async ()=>{
            const success = await alertSystem.acknowledgeAlert(testAlert.id, 'admin-user');
            expect(success).toBe(true);
        });
        test('debe resolver alerta', async ()=>{
            const success = await alertSystem.resolveAlert(testAlert.id, 'admin-user');
            expect(success).toBe(true);
        });
        test('no debe reconocer alerta inexistente', async ()=>{
            const success = await alertSystem.acknowledgeAlert('nonexistent', 'admin-user');
            expect(success).toBe(false);
        });
        test('no debe resolver alerta inexistente', async ()=>{
            const success = await alertSystem.resolveAlert('nonexistent', 'admin-user');
            expect(success).toBe(false);
        });
    });
    describe('Notificaciones', ()=>{
        test('debe enviar notificación por log', async ()=>{
            // Configurar canal de log
            alertSystem.setNotificationChannel({
                id: 'test_log',
                type: _alertsystem.NotificationType.LOG,
                name: 'Test Log',
                config: {},
                enabled: true,
                levels: [
                    _alertsystem.AlertLevel.WARNING
                ]
            });
            // Configurar regla con canal de log
            alertSystem.setAlertRule({
                id: 'log_rule',
                name: 'Log Rule',
                description: 'Log rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'test_log'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('log_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(alert?.notificationsSent.length).toBeGreaterThan(0);
        });
        test('debe enviar notificación por webhook', async ()=>{
            // Configurar canal de webhook
            alertSystem.setNotificationChannel({
                id: 'test_webhook',
                type: _alertsystem.NotificationType.WEBHOOK,
                name: 'Test Webhook',
                config: {
                    url: 'https://example.com/webhook'
                },
                enabled: true,
                levels: [
                    _alertsystem.AlertLevel.CRITICAL
                ]
            });
            // Configurar regla con canal de webhook
            alertSystem.setAlertRule({
                id: 'webhook_rule',
                name: 'Webhook Rule',
                description: 'Webhook rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.CRITICAL,
                cooldownMinutes: 5,
                channels: [
                    'test_webhook'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('webhook_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(mockFetch).toHaveBeenCalledWith('https://example.com/webhook', expect.objectContaining({
                method: 'POST',
                headers: expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                body: expect.stringContaining('"source":"pinteya-ecommerce"')
            }));
        });
        test('no debe enviar notificación si el canal está deshabilitado', async ()=>{
            // Configurar canal deshabilitado
            alertSystem.setNotificationChannel({
                id: 'disabled_channel',
                type: _alertsystem.NotificationType.EMAIL,
                name: 'Disabled Channel',
                config: {
                    to: 'test@example.com'
                },
                enabled: false,
                levels: [
                    _alertsystem.AlertLevel.WARNING
                ]
            });
            // Configurar regla con canal deshabilitado
            alertSystem.setAlertRule({
                id: 'disabled_rule',
                name: 'Disabled Rule',
                description: 'Rule with disabled channel',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'disabled_channel'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('disabled_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(alert?.notificationsSent.length).toBe(0);
        });
    });
    describe('Escalamiento', ()=>{
        test('debe escalar alerta después del tiempo configurado', async ()=>{
            // Configurar regla de escalamiento
            alertSystem.setEscalationRule({
                id: 'test_escalation',
                name: 'Test Escalation',
                enabled: true,
                conditions: {
                    level: _alertsystem.AlertLevel.WARNING,
                    duration: 1
                },
                actions: {
                    escalateToLevel: _alertsystem.AlertLevel.CRITICAL,
                    notifyChannels: [
                        'default_log'
                    ]
                }
            });
            // Configurar regla de alerta con escalamiento
            alertSystem.setAlertRule({
                id: 'escalation_rule',
                name: 'Escalation Rule',
                description: 'Rule with escalation',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [
                    'test_escalation'
                ],
                tags: {}
            });
            // Disparar alerta
            const alert = await alertSystem.triggerAlert('escalation_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(alert?.level).toBe(_alertsystem.AlertLevel.WARNING);
            // Avanzar tiempo para activar escalamiento
            jest.advanceTimersByTime(2 * 60 * 1000); // 2 minutos
            // El escalamiento se verifica automáticamente
            expect(true).toBe(true);
        });
    });
    describe('Instancia singleton', ()=>{
        test('debe retornar la misma instancia', ()=>{
            const instance1 = _alertsystem.EnterpriseAlertSystem.getInstance();
            const instance2 = _alertsystem.EnterpriseAlertSystem.getInstance();
            expect(instance1).toBe(instance2);
        });
        test('debe usar la instancia global', ()=>{
            expect(_alertsystem.enterpriseAlertSystem).toBeInstanceOf(_alertsystem.EnterpriseAlertSystem);
        });
    });
    describe('Limpieza de recursos', ()=>{
        test('debe limpiar recursos correctamente', ()=>{
            const system = new _alertsystem.EnterpriseAlertSystem();
            expect(()=>system.destroy()).not.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,