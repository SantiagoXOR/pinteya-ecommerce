a8eb1a66f73b968f85d2f7401f449f6b
// ===================================
// PINTEYA E-COMMERCE - UNIT TESTS
// Pruebas unitarias para useRenderMonitoring
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useRenderMonitoring = require("../../hooks/monitoring/useRenderMonitoring");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ===================================
// MOCKS
// ===================================
// Mock de performance.now()
const mockPerformanceNow = _globals.jest.fn();
Object.defineProperty(global, 'performance', {
    value: {
        now: mockPerformanceNow,
        memory: {
            usedJSHeapSize: 50 * 1024 * 1024
        }
    },
    writable: true
});
// Mock de console
const mockConsoleLog = _globals.jest.spyOn(console, 'log').mockImplementation(()=>{});
const mockConsoleWarn = _globals.jest.spyOn(console, 'warn').mockImplementation(()=>{});
const mockConsoleError = _globals.jest.spyOn(console, 'error').mockImplementation(()=>{});
// Mock de localStorage
const mockLocalStorage = {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn()
};
Object.defineProperty(global, 'localStorage', {
    value: mockLocalStorage,
    writable: true
});
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockPerformanceNow.mockReturnValue(1000);
    mockLocalStorage.getItem.mockReturnValue(null);
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS PRINCIPALES
// ===================================
(0, _globals.describe)('useRenderMonitoring', ()=>{
    (0, _globals.describe)('Inicialización', ()=>{
        (0, _globals.it)('debe inicializar con configuración por defecto', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent'
                }));
            (0, _globals.expect)(result.current.isEnabled).toBe(true);
            (0, _globals.expect)(result.current.metrics).toBeDefined();
            (0, _globals.expect)(result.current.alerts).toEqual([]);
            (0, _globals.expect)(typeof result.current.trackError).toBe('function');
        });
        (0, _globals.it)('debe respetar la configuración personalizada', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    enabled: false,
                    enableConsoleLogging: false,
                    enableToasts: false
                }));
            (0, _globals.expect)(result.current.isEnabled).toBe(false);
        });
        (0, _globals.it)('debe aplicar thresholds personalizados', ()=>{
            const customThresholds = {
                slowRenderThreshold: 20,
                maxRenderCount: 50,
                memoryThreshold: 100,
                errorThreshold: 5
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: customThresholds
                }));
            (0, _globals.expect)(result.current.isEnabled).toBe(true);
        });
    });
    (0, _globals.describe)('Tracking de renders', ()=>{
        (0, _globals.it)('debe trackear renders correctamente', ()=>{
            let renderCount = 0;
            mockPerformanceNow.mockReturnValueOnce(1000) // Inicio del render
            .mockReturnValueOnce(1010); // Fin del render (10ms)
            const { result, rerender } = (0, _react.renderHook)(()=>{
                renderCount++;
                return (0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    enableConsoleLogging: true
                });
            });
            // Forzar re-render
            rerender();
            (0, _globals.expect)(result.current.metrics?.renderCount).toBeGreaterThan(0);
        });
        (0, _globals.it)('debe detectar renders lentos', ()=>{
            mockPerformanceNow.mockReturnValueOnce(1000) // Inicio
            .mockReturnValueOnce(1100); // Fin (100ms - lento)
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: {
                        slowRenderThreshold: 50
                    }
                }));
            rerender();
            (0, _globals.expect)(result.current.metrics?.slowRenders).toBeGreaterThan(0);
        });
        (0, _globals.it)('debe calcular tiempo promedio de render', ()=>{
            // Simular múltiples renders con diferentes tiempos
            mockPerformanceNow.mockReturnValueOnce(1000).mockReturnValueOnce(1010) // 10ms
            .mockReturnValueOnce(2000).mockReturnValueOnce(2020) // 20ms
            .mockReturnValueOnce(3000).mockReturnValueOnce(3030); // 30ms
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent'
                }));
            rerender();
            rerender();
            rerender();
            // Promedio debería ser (10 + 20 + 30) / 3 = 20ms
            (0, _globals.expect)(result.current.metrics?.averageRenderTime).toBeCloseTo(20, 1);
        });
    });
    (0, _globals.describe)('Tracking de errores', ()=>{
        (0, _globals.it)('debe trackear errores correctamente', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent'
                }));
            const testError = new Error('Test error');
            (0, _react.act)(()=>{
                result.current.trackError(testError, {
                    action: 'test_action',
                    context: 'test_context'
                });
            });
            (0, _globals.expect)(result.current.metrics?.errorCount).toBe(1);
        });
        (0, _globals.it)('debe generar alertas por errores frecuentes', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: {
                        errorThreshold: 2
                    }
                }));
            const testError = new Error('Test error');
            (0, _react.act)(()=>{
                // Generar múltiples errores
                result.current.trackError(testError);
                result.current.trackError(testError);
                result.current.trackError(testError);
            });
            (0, _globals.expect)(result.current.alerts.length).toBeGreaterThan(0);
            (0, _globals.expect)(result.current.alerts[0].type).toBe('high_error_rate');
        });
    });
    (0, _globals.describe)('Monitoreo de memoria', ()=>{
        (0, _globals.it)('debe trackear uso de memoria', ()=>{
            // Mock de performance.memory con alto uso
            Object.defineProperty(global.performance, 'memory', {
                value: {
                    usedJSHeapSize: 150 * 1024 * 1024
                },
                configurable: true
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: {
                        memoryThreshold: 100
                    }
                }));
            (0, _globals.expect)(result.current.metrics?.memoryUsage).toBeGreaterThan(100);
        });
        (0, _globals.it)('debe generar alertas por alto uso de memoria', ()=>{
            Object.defineProperty(global.performance, 'memory', {
                value: {
                    usedJSHeapSize: 200 * 1024 * 1024
                },
                configurable: true
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: {
                        memoryThreshold: 100
                    }
                }));
            (0, _globals.expect)(result.current.alerts.some((alert)=>alert.type === 'high_memory_usage')).toBe(true);
        });
    });
    (0, _globals.describe)('Sistema de alertas', ()=>{
        (0, _globals.it)('debe generar alertas con severidad correcta', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: {
                        errorThreshold: 1
                    }
                }));
            (0, _react.act)(()=>{
                result.current.trackError(new Error('Critical error'));
            });
            const alert = result.current.alerts[0];
            (0, _globals.expect)(alert).toBeDefined();
            (0, _globals.expect)([
                'low',
                'medium',
                'high',
                'critical'
            ]).toContain(alert.severity);
        });
        (0, _globals.it)('debe limpiar alertas resueltas', ()=>{
            _globals.jest.useFakeTimers();
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: {
                        errorThreshold: 1
                    }
                }));
            (0, _react.act)(()=>{
                result.current.trackError(new Error('Test error'));
            });
            (0, _globals.expect)(result.current.alerts.length).toBeGreaterThan(0);
            // Avanzar tiempo para que las alertas se resuelvan automáticamente
            (0, _react.act)(()=>{
                _globals.jest.advanceTimersByTime(5 * 60 * 1000); // 5 minutos
            });
            // Las alertas deberían estar marcadas como resueltas o eliminadas
            const unresolvedAlerts = result.current.alerts.filter((a)=>!a.resolved);
            (0, _globals.expect)(unresolvedAlerts.length).toBeLessThanOrEqual(result.current.alerts.length);
            _globals.jest.useRealTimers();
        });
    });
    (0, _globals.describe)('Persistencia de datos', ()=>{
        (0, _globals.it)('debe guardar métricas en localStorage', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    enablePersistence: true
                }));
            (0, _react.act)(()=>{
                result.current.trackError(new Error('Test error'));
            });
            (0, _globals.expect)(mockLocalStorage.setItem).toHaveBeenCalled();
        });
        (0, _globals.it)('debe cargar métricas desde localStorage', ()=>{
            const savedMetrics = {
                renderCount: 10,
                errorCount: 2,
                slowRenders: 1,
                averageRenderTime: 15.5,
                memoryUsage: 75.2
            };
            mockLocalStorage.getItem.mockReturnValue(JSON.stringify(savedMetrics));
            const { result } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    enablePersistence: true
                }));
            (0, _globals.expect)(result.current.metrics?.renderCount).toBe(10);
            (0, _globals.expect)(result.current.metrics?.errorCount).toBe(2);
        });
    });
    (0, _globals.describe)('Configuración dinámica', ()=>{
        (0, _globals.it)('debe permitir habilitar/deshabilitar monitoreo', ()=>{
            const { result, rerender } = (0, _react.renderHook)(({ enabled })=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    enabled
                }), {
                initialProps: {
                    enabled: true
                }
            });
            (0, _globals.expect)(result.current.isEnabled).toBe(true);
            rerender({
                enabled: false
            });
            (0, _globals.expect)(result.current.isEnabled).toBe(false);
        });
        (0, _globals.it)('debe actualizar thresholds dinámicamente', ()=>{
            const { result, rerender } = (0, _react.renderHook)(({ threshold })=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    thresholds: {
                        slowRenderThreshold: threshold
                    }
                }), {
                initialProps: {
                    threshold: 16
                }
            });
            // Cambiar threshold
            rerender({
                threshold: 50
            });
            // El hook debería usar el nuevo threshold
            (0, _globals.expect)(result.current.isEnabled).toBe(true);
        });
    });
    (0, _globals.describe)('Logging y debugging', ()=>{
        (0, _globals.it)('debe loggear información cuando está habilitado', ()=>{
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    enableConsoleLogging: true
                }));
            rerender(); // Forzar re-render
            (0, _globals.expect)(mockConsoleLog).toHaveBeenCalled();
        });
        (0, _globals.it)('no debe loggear cuando está deshabilitado', ()=>{
            mockConsoleLog.mockClear();
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useRenderMonitoring.useRenderMonitoring)({
                    componentName: 'TestComponent',
                    enableConsoleLogging: false
                }));
            rerender();
            (0, _globals.expect)(mockConsoleLog).not.toHaveBeenCalled();
        });
    });
});
// ===================================
// TESTS PARA HOC
// ===================================
(0, _globals.describe)('withRenderMonitoring HOC', ()=>{
    (0, _globals.it)('debe envolver componente correctamente', ()=>{
        const TestComponent = ({ title })=>{
            return _react1.default.createElement('div', null, title);
        };
        const WrappedComponent = (0, _useRenderMonitoring.withRenderMonitoring)(TestComponent, {
            enabled: true,
            enableConsoleLogging: true
        });
        (0, _globals.expect)(WrappedComponent).toBeDefined();
        (0, _globals.expect)(typeof WrappedComponent).toBe('function');
    });
    (0, _globals.it)('debe pasar props correctamente al componente envuelto', ()=>{
        const TestComponent = ({ title, count })=>{
            return _react1.default.createElement('div', null, `${title}: ${count}`);
        };
        const WrappedComponent = (0, _useRenderMonitoring.withRenderMonitoring)(TestComponent, {
            enabled: true
        });
        const { container } = render(_react1.default.createElement(WrappedComponent, {
            title: 'Test',
            count: 42
        }));
        (0, _globals.expect)(container.textContent).toBe('Test: 42');
    });
});
// Helper para render (simplificado para el test)
function render(element) {
    const container = document.createElement('div');
    // Simulación básica de render para el test
    return {
        container
    };
}

//# sourceMappingURL=data:application/json;base64,