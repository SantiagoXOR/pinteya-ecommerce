5e3f8f4276794e78e03c05d53d988b7c
// ===================================
// PINTEYA E-COMMERCE - REDIS CONFIGURATION
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RedisCache () {
        return RedisCache;
    },
    get cleanupRateLimitKeys () {
        return cleanupRateLimitKeys;
    },
    get closeRedisConnection () {
        return closeRedisConnection;
    },
    get enterpriseRateLimit () {
        return enterpriseRateLimit;
    },
    get getRateLimitInfo () {
        return getRateLimitInfo;
    },
    get getRateLimitStats () {
        return getRateLimitStats;
    },
    get getRedisClient () {
        return getRedisClient;
    },
    get incrementRateLimit () {
        return incrementRateLimit;
    },
    get isRedisAvailable () {
        return isRedisAvailable;
    },
    get redis () {
        return redis;
    },
    get redisCache () {
        return redisCache;
    },
    get slidingWindowRateLimit () {
        return slidingWindowRateLimit;
    }
});
const _ioredis = /*#__PURE__*/ _interop_require_default(require("ioredis"));
const _logger = require("../../enterprise/logger");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Configuración de Redis
const REDIS_CONFIG = {
    host: process.env.REDIS_HOST || 'localhost',
    port: parseInt(process.env.REDIS_PORT || '6379'),
    password: process.env.REDIS_PASSWORD,
    db: parseInt(process.env.REDIS_DB || '0'),
    retryDelayOnFailover: 100,
    maxRetriesPerRequest: 3,
    lazyConnect: true,
    keepAlive: 30000,
    connectTimeout: 10000,
    commandTimeout: 5000
};
// Mock Redis para desarrollo cuando Redis no está disponible
class MockRedis {
    async get(key) {
        return this.storage.get(key) || null;
    }
    async set(key, value, ...args) {
        this.storage.set(key, value);
        return 'OK';
    }
    async del(key) {
        const existed = this.storage.has(key);
        this.storage.delete(key);
        return existed ? 1 : 0;
    }
    async exists(key) {
        return this.storage.has(key) ? 1 : 0;
    }
    async incr(key) {
        const current = parseInt(this.storage.get(key) || '0');
        const newValue = current + 1;
        this.storage.set(key, newValue.toString());
        return newValue;
    }
    async expire(key, seconds) {
        // Mock: no implementamos expiración real
        return 1;
    }
    async keys(pattern) {
        const regex = new RegExp(pattern.replace(/\*/g, '.*'));
        return Array.from(this.storage.keys()).filter((key)=>regex.test(key));
    }
    async flushall() {
        this.storage.clear();
        return 'OK';
    }
    // Métodos de listas para métricas
    async lpush(key, ...values) {
        const list = this.storage.get(key) || [];
        list.unshift(...values);
        this.storage.set(key, list);
        return list.length;
    }
    async ltrim(key, start, stop) {
        const list = this.storage.get(key) || [];
        const trimmed = list.slice(start, stop + 1);
        this.storage.set(key, trimmed);
        return 'OK';
    }
    async lrange(key, start, stop) {
        const list = this.storage.get(key) || [];
        if (stop === -1) {
            return list.slice(start);
        }
        return list.slice(start, stop + 1);
    }
    async ttl(key) {
        // Mock: retornar -1 (sin expiración) o un valor fijo
        return this.storage.has(key) ? 3600 : -2;
    }
    // Pipeline mock para operaciones batch
    pipeline() {
        return new MockPipeline(this);
    }
    // Métodos de conexión mock
    async connect() {
        console.log('[REDIS MOCK] Conectado (simulado)');
    }
    disconnect() {
        console.log('[REDIS MOCK] Desconectado (simulado)');
    }
    on(event, callback) {
        return this;
    }
    async quit() {
        console.log('[REDIS MOCK] Desconectado (quit simulado)');
        return 'OK';
    }
    constructor(){
        this.storage = new Map();
    }
}
// Mock Pipeline para operaciones batch
class MockPipeline {
    constructor(redis){
        this.commands = [];
        this.redis = redis;
    }
    get(key) {
        this.commands.push({
            method: 'get',
            args: [
                key
            ]
        });
        return this;
    }
    ttl(key) {
        this.commands.push({
            method: 'ttl',
            args: [
                key
            ]
        });
        return this;
    }
    incr(key) {
        this.commands.push({
            method: 'incr',
            args: [
                key
            ]
        });
        return this;
    }
    expire(key, seconds) {
        this.commands.push({
            method: 'expire',
            args: [
                key,
                seconds
            ]
        });
        return this;
    }
    async exec() {
        const results = [];
        for (const command of this.commands){
            try {
                const result = await this.redis[command.method](...command.args);
                results.push([
                    null,
                    result
                ]);
            } catch (error) {
                results.push([
                    error,
                    null
                ]);
            }
        }
        this.commands = []; // Limpiar comandos después de ejecutar
        return results;
    }
}
// Cliente Redis singleton
let redisClient = null;
let isUsingMock = false;
function getRedisClient() {
    if (!redisClient) {
        // Verificar si Redis está deshabilitado
        if (process.env.DISABLE_REDIS === 'true') {
            console.log('[REDIS] Redis deshabilitado por configuración, usando mock');
            redisClient = new MockRedis();
            isUsingMock = true;
            return redisClient;
        }
        try {
            redisClient = new _ioredis.default(REDIS_CONFIG);
            // Event listeners para logging
            redisClient.on('connect', ()=>{
                _logger.logger.info(_logger.LogCategory.API, 'Redis connected successfully');
                isUsingMock = false;
            });
            redisClient.on('error', (error)=>{
                _logger.logger.error(_logger.LogCategory.API, 'Redis connection error', error);
                // Si hay error de conexión, usar mock
                if (!isUsingMock) {
                    console.log('[REDIS] Cambiando a modo mock debido a error de conexión');
                    redisClient = new MockRedis();
                    isUsingMock = true;
                }
            });
            redisClient.on('close', ()=>{
                _logger.logger.warn(_logger.LogCategory.API, 'Redis connection closed');
            });
            redisClient.on('reconnecting', ()=>{
                _logger.logger.info(_logger.LogCategory.API, 'Redis reconnecting...');
            });
        } catch (error) {
            console.log('[REDIS] Error inicializando Redis, usando mock:', error.message);
            redisClient = new MockRedis();
            isUsingMock = true;
        }
    }
    return redisClient;
}
async function isRedisAvailable() {
    try {
        if (isUsingMock) {
            return false // Mock no es Redis real
            ;
        }
        const client = getRedisClient();
        if (client instanceof MockRedis) {
            return false;
        }
        await client.ping();
        return true;
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Redis health check failed', error);
        return false;
    }
}
async function closeRedisConnection() {
    if (redisClient) {
        await redisClient.quit();
        redisClient = null;
        _logger.logger.info(_logger.LogCategory.API, 'Redis connection closed gracefully');
    }
}
class RedisCache {
    constructor(){
        this.client = getRedisClient();
    }
    /**
   * Obtiene un valor del cache
   */ async get(key) {
        try {
            const value = await this.client.get(key);
            _logger.logger.info(_logger.LogCategory.API, 'Cache get operation');
            return value;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache get operation failed', error);
            return null;
        }
    }
    /**
   * Establece un valor en el cache
   */ async set(key, value, ttlSeconds) {
        try {
            if (ttlSeconds) {
                await this.client.setex(key, ttlSeconds, value);
            } else {
                await this.client.set(key, value);
            }
            _logger.logger.info(_logger.LogCategory.API, 'Cache set operation');
            return true;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache set operation failed', error);
            return false;
        }
    }
    /**
   * Elimina un valor del cache
   */ async del(key) {
        try {
            const result = await this.client.del(key);
            _logger.logger.info(_logger.LogCategory.API, 'Cache delete operation');
            return result > 0;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache delete operation failed', error);
            return false;
        }
    }
    /**
   * Incrementa un contador atómicamente
   */ async incr(key) {
        try {
            const result = await this.client.incr(key);
            _logger.logger.info(_logger.LogCategory.API, 'Cache increment operation');
            return result;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache increment operation failed', error);
            return null;
        }
    }
    /**
   * Establece TTL para una clave existente
   */ async expire(key, ttlSeconds) {
        try {
            const result = await this.client.expire(key, ttlSeconds);
            _logger.logger.info(_logger.LogCategory.API, 'Cache expire operation');
            return result === 1;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache expire operation failed', error);
            return false;
        }
    }
    /**
   * Obtiene TTL restante de una clave
   */ async ttl(key) {
        try {
            const result = await this.client.ttl(key);
            _logger.logger.info(_logger.LogCategory.API, 'Cache TTL check');
            return result;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Cache TTL check failed', error);
            return null;
        }
    }
}
const redisCache = new RedisCache();
async function getRateLimitInfo(key) {
    try {
        const client = getRedisClient();
        const pipeline = client.pipeline();
        pipeline.get(key);
        pipeline.ttl(key);
        const results = await pipeline.exec();
        if (!results || results.length !== 2) {
            return null;
        }
        const [countResult, ttlResult] = results;
        const count = parseInt(countResult[1]) || 0;
        const ttl = ttlResult[1];
        return {
            count,
            ttl
        };
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Rate limit info retrieval failed', error);
        return null;
    }
}
async function incrementRateLimit(key, windowSeconds) {
    try {
        const client = getRedisClient();
        const pipeline = client.pipeline();
        // Incrementar contador
        pipeline.incr(key);
        // Establecer TTL solo si es la primera vez
        pipeline.expire(key, windowSeconds);
        // Obtener TTL actual
        pipeline.ttl(key);
        const results = await pipeline.exec();
        if (!results || results.length !== 3) {
            return null;
        }
        const count = results[0][1];
        const ttl = results[2][1];
        const isNewWindow = count === 1;
        return {
            count,
            ttl,
            isNewWindow
        };
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Rate limit increment failed', error);
        return null;
    }
}
async function enterpriseRateLimit(key, windowMs, maxRequests) {
    try {
        const client = getRedisClient();
        const now = Date.now();
        const window = Math.floor(now / windowMs);
        const redisKey = `rate_limit:${key}:${window}`;
        // Usar pipeline para operaciones atómicas
        const pipeline = client.pipeline();
        pipeline.incr(redisKey);
        pipeline.expire(redisKey, Math.ceil(windowMs / 1000));
        const results = await pipeline.exec();
        if (!results || results.length !== 2) {
            return null;
        }
        const count = results[0][1];
        const remaining = Math.max(0, maxRequests - count);
        const resetTime = (window + 1) * windowMs;
        const allowed = count <= maxRequests;
        const result = {
            allowed,
            count,
            remaining,
            resetTime,
            retryAfter: allowed ? undefined : Math.ceil((resetTime - now) / 1000)
        };
        _logger.logger.debug(_logger.LogCategory.API, 'Enterprise rate limit check', {
            key: redisKey,
            count,
            maxRequests,
            allowed,
            remaining
        });
        return result;
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Enterprise rate limit failed', error);
        return null;
    }
}
async function slidingWindowRateLimit(key, windowMs, maxRequests, precision = 10) {
    try {
        const client = getRedisClient();
        const now = Date.now();
        const windowSize = Math.floor(windowMs / precision);
        const currentWindow = Math.floor(now / windowSize);
        // Limpiar ventanas antiguas y contar requests en ventana actual
        const pipeline = client.pipeline();
        // Eliminar ventanas más antiguas que el período de rate limiting
        for(let i = 1; i <= precision; i++){
            const oldWindow = currentWindow - precision - i;
            pipeline.del(`${key}:${oldWindow}`);
        }
        // Incrementar contador para ventana actual
        const currentKey = `${key}:${currentWindow}`;
        pipeline.incr(currentKey);
        pipeline.expire(currentKey, Math.ceil(windowMs / 1000));
        // Obtener contadores de todas las ventanas en el período
        for(let i = 0; i < precision; i++){
            const windowKey = `${key}:${currentWindow - i}`;
            pipeline.get(windowKey);
        }
        const results = await pipeline.exec();
        if (!results) {
            return null;
        }
        // Calcular total de requests en la ventana deslizante
        let totalCount = 0;
        const countResults = results.slice(precision + 2) // Saltar operaciones de limpieza e incremento
        ;
        for (const result of countResults){
            if (result[1]) {
                totalCount += parseInt(result[1]);
            }
        }
        const remaining = Math.max(0, maxRequests - totalCount);
        const allowed = totalCount <= maxRequests;
        const resetTime = (currentWindow + 1) * windowSize;
        return {
            allowed,
            count: totalCount,
            remaining,
            resetTime
        };
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Sliding window rate limit failed', error);
        return null;
    }
}
async function getRateLimitStats(pattern = 'rate_limit:*') {
    try {
        const client = getRedisClient();
        const keys = await client.keys(pattern);
        if (keys.length === 0) {
            return {
                totalKeys: 0,
                activeWindows: 0,
                topKeys: []
            };
        }
        // Obtener información de las claves más activas
        const pipeline = client.pipeline();
        keys.forEach((key)=>{
            pipeline.get(key);
            pipeline.ttl(key);
        });
        const results = await pipeline.exec();
        if (!results) {
            return null;
        }
        const keyStats = [];
        for(let i = 0; i < keys.length; i++){
            const countResult = results[i * 2];
            const ttlResult = results[i * 2 + 1];
            if (countResult[1] && ttlResult[1]) {
                keyStats.push({
                    key: keys[i],
                    count: parseInt(countResult[1]),
                    ttl: ttlResult[1]
                });
            }
        }
        // Ordenar por count descendente
        keyStats.sort((a, b)=>b.count - a.count);
        return {
            totalKeys: keys.length,
            activeWindows: keyStats.filter((stat)=>stat.ttl > 0).length,
            topKeys: keyStats.slice(0, 10)
        };
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Rate limit stats failed', error);
        return null;
    }
}
async function cleanupRateLimitKeys(pattern = 'rate_limit:*') {
    try {
        const client = getRedisClient();
        const keys = await client.keys(pattern);
        if (keys.length === 0) {
            return 0;
        }
        // Verificar TTL de cada clave y eliminar las expiradas
        const pipeline = client.pipeline();
        keys.forEach((key)=>{
            pipeline.ttl(key);
        });
        const ttlResults = await pipeline.exec();
        if (!ttlResults) {
            return 0;
        }
        const expiredKeys = [];
        for(let i = 0; i < keys.length; i++){
            const ttlResult = ttlResults[i];
            if (ttlResult[1] === -2) {
                // Clave expirada
                expiredKeys.push(keys[i]);
            }
        }
        if (expiredKeys.length > 0) {
            await client.del(...expiredKeys);
            _logger.logger.info(_logger.LogCategory.API, `Cleaned up ${expiredKeys.length} expired rate limit keys`);
        }
        return expiredKeys.length;
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Rate limit cleanup failed', error);
        return 0;
    }
}
const redis = getRedisClient();

//# sourceMappingURL=data:application/json;base64,