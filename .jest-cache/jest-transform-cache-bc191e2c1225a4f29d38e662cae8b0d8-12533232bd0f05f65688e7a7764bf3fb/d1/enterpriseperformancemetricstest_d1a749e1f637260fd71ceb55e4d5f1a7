d7f6ea116be0d032fa20d9b1a9c31cd8
/**
 * Tests de Performance y Métricas Enterprise
 * Valida el rendimiento y métricas del sistema enterprise implementado
 */ // Mock de utilidades enterprise
"use strict";
jest.mock('@/lib/auth/enterprise-auth-utils', ()=>({
        getEnterpriseAuthContext: jest.fn(),
        requireAdminAuth: jest.fn()
    }));
jest.mock('@/lib/auth/enterprise-cache', ()=>({
        getCacheStats: jest.fn(),
        withCache: jest.fn(),
        clearCache: jest.fn()
    }));
jest.mock('@/lib/auth/enterprise-rls-utils', ()=>({
        executeWithRLS: jest.fn(),
        validateRLSContext: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _enterpriseauthutils = require("../../lib/auth/enterprise-auth-utils");
const _enterprisecache = require("../../lib/auth/enterprise-cache");
const _enterpriserlsutils = require("../../lib/auth/enterprise-rls-utils");
describe('Performance y Métricas Enterprise', ()=>{
    let mockGetEnterpriseAuthContext;
    let mockRequireAdminAuth;
    let mockGetCacheStats;
    let mockWithCache;
    let mockExecuteWithRLS;
    beforeEach(()=>{
        mockGetEnterpriseAuthContext = _enterpriseauthutils.getEnterpriseAuthContext;
        mockRequireAdminAuth = _enterpriseauthutils.requireAdminAuth;
        mockGetCacheStats = _enterprisecache.getCacheStats;
        mockWithCache = _enterprisecache.withCache;
        mockExecuteWithRLS = _enterpriserlsutils.executeWithRLS;
        jest.clearAllMocks();
        // Setup mocks con métricas realistas
        mockGetCacheStats.mockReturnValue({
            hits: 150,
            misses: 25,
            entries: 45,
            hitRate: 85.71,
            memoryUsage: 2048
        });
        mockGetEnterpriseAuthContext.mockResolvedValue({
            success: true,
            context: {
                userId: 'user_123',
                role: 'admin',
                permissions: [
                    'admin_access'
                ],
                sessionValid: true,
                securityLevel: 'critical',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            }
        });
        mockRequireAdminAuth.mockResolvedValue({
            success: true,
            context: {
                userId: 'user_123',
                role: 'admin',
                permissions: [
                    'admin_access'
                ],
                sessionValid: true,
                securityLevel: 'critical',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            }
        });
        mockExecuteWithRLS.mockResolvedValue({
            success: true,
            data: {
                test: 'data'
            }
        });
    });
    describe('Métricas de Performance de Autenticación', ()=>{
        it('debe completar autenticación enterprise en menos de 100ms', async ()=>{
            const startTime = Date.now();
            const mockRequest = {
                query: {},
                headers: {}
            };
            const result = await mockGetEnterpriseAuthContext(mockRequest, {
                securityLevel: 'critical'
            });
            const duration = Date.now() - startTime;
            expect(result.success).toBe(true);
            expect(duration).toBeLessThan(100);
        });
        it('debe manejar múltiples autenticaciones concurrentes', async ()=>{
            const concurrentRequests = 10;
            const mockRequest = {
                query: {},
                headers: {}
            };
            const startTime = Date.now();
            const promises = Array(concurrentRequests).fill(null).map(()=>mockGetEnterpriseAuthContext(mockRequest, {
                    securityLevel: 'medium'
                }));
            const results = await Promise.all(promises);
            const duration = Date.now() - startTime;
            // Todas las requests deben ser exitosas
            expect(results.every((r)=>r.success)).toBe(true);
            // Tiempo total debe ser razonable para 10 requests concurrentes
            expect(duration).toBeLessThan(500);
            // Verificar que se llamó la función correcta cantidad de veces
            expect(mockGetEnterpriseAuthContext).toHaveBeenCalledTimes(concurrentRequests);
        });
        it('debe mantener performance consistente con cache', async ()=>{
            const iterations = 5;
            const durations = [];
            for(let i = 0; i < iterations; i++){
                const startTime = Date.now();
                await mockWithCache(`test_key_${i}`, async ()=>({
                        data: `test_${i}`
                    }), 60000);
                durations.push(Date.now() - startTime);
            }
            // Verificar que todas las operaciones fueron rápidas
            durations.forEach((duration)=>{
                expect(duration).toBeLessThan(50);
            });
            // Verificar que se usó cache
            expect(mockWithCache).toHaveBeenCalledTimes(iterations);
        });
    });
    describe('Métricas de Cache Enterprise', ()=>{
        it('debe mantener hit rate superior al 80%', ()=>{
            const stats = mockGetCacheStats();
            expect(stats.hitRate).toBeGreaterThan(80);
            expect(stats.hits).toBeGreaterThan(stats.misses);
        });
        it('debe reportar uso de memoria razonable', ()=>{
            const stats = mockGetCacheStats();
            // Memoria debe ser menor a 10MB (10,485,760 bytes)
            expect(stats.memoryUsage).toBeLessThan(10485760);
            // Debe tener entradas en cache
            expect(stats.entries).toBeGreaterThan(0);
        });
        it('debe calcular métricas correctamente', ()=>{
            const stats = mockGetCacheStats();
            const expectedHitRate = stats.hits / (stats.hits + stats.misses) * 100;
            expect(Math.abs(stats.hitRate - expectedHitRate)).toBeLessThan(0.01);
        });
        it('debe manejar operaciones de cache eficientemente', async ()=>{
            const cacheOperations = 20;
            const startTime = Date.now();
            // Simular múltiples operaciones de cache
            const promises = Array(cacheOperations).fill(null).map((_, index)=>mockWithCache(`performance_test_${index}`, async ()=>({
                        id: index,
                        data: `test_data_${index}`
                    }), 30000));
            const results = await Promise.all(promises);
            const duration = Date.now() - startTime;
            // Todas las operaciones deben completarse
            expect(results).toHaveLength(cacheOperations);
            // Tiempo total debe ser eficiente
            expect(duration).toBeLessThan(200);
        });
    });
    describe('Métricas de RLS Performance', ()=>{
        it('debe ejecutar consultas RLS en tiempo óptimo', async ()=>{
            const mockContext = {
                userId: 'user_123',
                role: 'admin',
                permissions: [
                    'admin_access'
                ],
                sessionValid: true,
                securityLevel: 'high',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            };
            const startTime = Date.now();
            const result = await mockExecuteWithRLS(mockContext, async ()=>({
                    data: 'test'
                }), {
                enforceRLS: true,
                auditLog: true
            });
            const duration = Date.now() - startTime;
            expect(result.success).toBe(true);
            expect(duration).toBeLessThan(50);
        });
        it('debe manejar múltiples consultas RLS concurrentes', async ()=>{
            const mockContext = {
                userId: 'user_123',
                role: 'admin',
                permissions: [
                    'admin_access'
                ],
                sessionValid: true,
                securityLevel: 'high',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            };
            const concurrentQueries = 8;
            const startTime = Date.now();
            const promises = Array(concurrentQueries).fill(null).map((_, index)=>mockExecuteWithRLS(mockContext, async ()=>({
                        id: index,
                        data: `query_${index}`
                    }), {
                    enforceRLS: true
                }));
            const results = await Promise.all(promises);
            const duration = Date.now() - startTime;
            // Todas las consultas deben ser exitosas
            expect(results.every((r)=>r.success)).toBe(true);
            // Tiempo total debe ser eficiente para consultas concurrentes
            expect(duration).toBeLessThan(300);
        });
    });
    describe('Métricas de Sistema Enterprise', ()=>{
        it('debe mantener métricas de sistema saludables', ()=>{
            const systemMetrics = {
                authenticationLatency: 45,
                cacheHitRate: 85.71,
                rlsQueryTime: 25,
                memoryUsage: 2048,
                activeConnections: 12
            };
            // Validar métricas dentro de rangos aceptables
            expect(systemMetrics.authenticationLatency).toBeLessThan(100);
            expect(systemMetrics.cacheHitRate).toBeGreaterThan(80);
            expect(systemMetrics.rlsQueryTime).toBeLessThan(50);
            expect(systemMetrics.memoryUsage).toBeLessThan(10485760); // 10MB
            expect(systemMetrics.activeConnections).toBeGreaterThan(0);
        });
        it('debe reportar estadísticas de uso enterprise', ()=>{
            const usageStats = {
                totalAuthRequests: 1250,
                successfulAuths: 1198,
                failedAuths: 52,
                cacheOperations: 3420,
                rlsQueries: 890,
                averageResponseTime: 67
            };
            // Calcular métricas derivadas
            const successRate = usageStats.successfulAuths / usageStats.totalAuthRequests * 100;
            const failureRate = usageStats.failedAuths / usageStats.totalAuthRequests * 100;
            expect(successRate).toBeGreaterThan(95); // 95%+ success rate
            expect(failureRate).toBeLessThan(5); // <5% failure rate
            expect(usageStats.averageResponseTime).toBeLessThan(100);
        });
        it('debe validar límites de recursos enterprise', ()=>{
            const resourceLimits = {
                maxConcurrentUsers: 100,
                maxCacheSize: 50,
                maxQueryTime: 1000,
                maxMemoryPerUser: 1024
            };
            const currentUsage = {
                concurrentUsers: 45,
                cacheSize: 12,
                averageQueryTime: 67,
                memoryPerUser: 512
            };
            // Validar que el uso actual está dentro de los límites
            expect(currentUsage.concurrentUsers).toBeLessThan(resourceLimits.maxConcurrentUsers);
            expect(currentUsage.cacheSize).toBeLessThan(resourceLimits.maxCacheSize);
            expect(currentUsage.averageQueryTime).toBeLessThan(resourceLimits.maxQueryTime);
            expect(currentUsage.memoryPerUser).toBeLessThan(resourceLimits.maxMemoryPerUser);
        });
    });
    describe('Benchmarks de Performance', ()=>{
        it('debe superar benchmarks de autenticación enterprise', async ()=>{
            const benchmarks = {
                authTime: 100,
                cacheHitRate: 80,
                rlsQueryTime: 50,
                concurrentUsers: 50
            };
            // Test de autenticación
            const authStartTime = Date.now();
            await mockRequireAdminAuth({}, [
                'admin_access'
            ]);
            const authDuration = Date.now() - authStartTime;
            // Test de cache
            const cacheStats = mockGetCacheStats();
            // Test de RLS
            const rlsStartTime = Date.now();
            await mockExecuteWithRLS({}, async ()=>({
                    data: 'benchmark'
                }), {
                enforceRLS: true
            });
            const rlsDuration = Date.now() - rlsStartTime;
            // Validar que superamos los benchmarks
            expect(authDuration).toBeLessThan(benchmarks.authTime);
            expect(cacheStats.hitRate).toBeGreaterThan(benchmarks.cacheHitRate);
            expect(rlsDuration).toBeLessThan(benchmarks.rlsQueryTime);
        });
        it('debe mantener performance bajo carga', async ()=>{
            const loadTestParams = {
                concurrentRequests: 25,
                iterations: 3,
                maxResponseTime: 200
            };
            for(let iteration = 0; iteration < loadTestParams.iterations; iteration++){
                const startTime = Date.now();
                const promises = Array(loadTestParams.concurrentRequests).fill(null).map(()=>mockRequireAdminAuth({}, [
                        'admin_access'
                    ]));
                const results = await Promise.all(promises);
                const duration = Date.now() - startTime;
                // Todas las requests deben ser exitosas
                expect(results.every((r)=>r.success)).toBe(true);
                // Tiempo debe estar dentro del límite
                expect(duration).toBeLessThan(loadTestParams.maxResponseTime);
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,