{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\admin\\AdminDashboard.test.tsx"],"sourcesContent":["// ===================================\n// TESTS DE COMPONENTES - ADMIN DASHBOARD\n// Tests para el panel de administración\n// ===================================\n\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { AdminDashboard } from '@/components/admin/AdminDashboard'\nimport { AuthProvider } from '@/contexts/AuthContext'\nimport { supabase } from '@/lib/integrations/supabase'\nimport { toast } from 'sonner'\nimport React from 'react'\n\n// Mocks\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    auth: {\n      getUser: jest.fn(),\n    },\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          gte: jest.fn(() => ({\n            lte: jest.fn(() => ({\n              order: jest.fn(() => ({\n                limit: jest.fn(),\n              })),\n            })),\n          })),\n        })),\n        count: jest.fn(),\n        single: jest.fn(),\n      })),\n    })),\n  },\n}))\n\njest.mock('sonner', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn(),\n    loading: jest.fn(),\n  },\n}))\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    refresh: jest.fn(),\n  }),\n}))\n\n// Mock de Chart.js\njest.mock('react-chartjs-2', () => ({\n  Line: ({ data, options }: any) => (\n    <div data-testid='line-chart' data-chart-data={JSON.stringify(data)}>\n      Chart: {data.datasets[0].label}\n    </div>\n  ),\n  Bar: ({ data, options }: any) => (\n    <div data-testid='bar-chart' data-chart-data={JSON.stringify(data)}>\n      Chart: {data.datasets[0].label}\n    </div>\n  ),\n  Doughnut: ({ data, options }: any) => (\n    <div data-testid='doughnut-chart' data-chart-data={JSON.stringify(data)}>\n      Chart: {data.datasets[0].label}\n    </div>\n  ),\n}))\n\n// Datos de prueba\nconst mockAdminUser = {\n  id: 'admin-123',\n  email: 'admin@example.com',\n  user_metadata: {\n    full_name: 'Admin User',\n    role: 'admin',\n  },\n}\n\nconst mockDashboardData = {\n  stats: {\n    totalOrders: 150,\n    totalRevenue: 45000,\n    totalProducts: 89,\n    totalUsers: 1250,\n    pendingOrders: 12,\n    lowStockProducts: 5,\n  },\n  recentOrders: [\n    {\n      id: 'order-1',\n      user_email: 'user1@example.com',\n      total: 299.99,\n      status: 'pending',\n      created_at: '2024-01-15T10:30:00Z',\n      items: [{ product_name: 'Laptop Gaming', quantity: 1, price: 299.99 }],\n    },\n    {\n      id: 'order-2',\n      user_email: 'user2@example.com',\n      total: 149.5,\n      status: 'completed',\n      created_at: '2024-01-15T09:15:00Z',\n      items: [{ product_name: 'Mouse Inalámbrico', quantity: 2, price: 74.75 }],\n    },\n  ],\n  salesData: {\n    daily: [\n      { date: '2024-01-10', sales: 1200 },\n      { date: '2024-01-11', sales: 1500 },\n      { date: '2024-01-12', sales: 1800 },\n      { date: '2024-01-13', sales: 1300 },\n      { date: '2024-01-14', sales: 2100 },\n      { date: '2024-01-15', sales: 1900 },\n    ],\n    monthly: [\n      { month: 'Dic 2023', sales: 35000 },\n      { month: 'Ene 2024', sales: 45000 },\n    ],\n  },\n  topProducts: [\n    { id: 1, name: 'Laptop Gaming', sales: 25, revenue: 7499.75 },\n    { id: 2, name: 'Mouse Inalámbrico', sales: 45, revenue: 3367.5 },\n    { id: 3, name: 'Teclado Mecánico', sales: 32, revenue: 4800.0 },\n  ],\n  lowStockProducts: [\n    { id: 1, name: 'Laptop Gaming', stock: 2, min_stock: 5 },\n    { id: 2, name: 'Monitor 4K', stock: 1, min_stock: 3 },\n  ],\n}\n\n// Wrapper de providers\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  })\n\n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>{children}</AuthProvider>\n    </QueryClientProvider>\n  )\n}\n\ndescribe('AdminDashboard Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n\n    // Mock usuario admin autenticado\n    ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n      data: { user: mockAdminUser },\n      error: null,\n    })\n  })\n\n  describe('Renderizado Inicial', () => {\n    it('debe renderizar el dashboard correctamente', async () => {\n      // Mock de datos del dashboard\n      ;(supabase.from as jest.Mock).mockImplementation(table => {\n        const mockQueries = {\n          orders: {\n            select: jest.fn(() => ({\n              count: jest.fn().mockResolvedValue({ count: mockDashboardData.stats.totalOrders }),\n            })),\n          },\n          products: {\n            select: jest.fn(() => ({\n              count: jest.fn().mockResolvedValue({ count: mockDashboardData.stats.totalProducts }),\n            })),\n          },\n          users: {\n            select: jest.fn(() => ({\n              count: jest.fn().mockResolvedValue({ count: mockDashboardData.stats.totalUsers }),\n            })),\n          },\n        }\n\n        return (\n          mockQueries[table as keyof typeof mockQueries] || {\n            select: jest.fn(() => ({\n              eq: jest.fn(() => ({\n                order: jest.fn(() => ({\n                  limit: jest.fn().mockResolvedValue({ data: [] }),\n                })),\n              })),\n            })),\n          }\n        )\n      })\n\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      // Verificar título principal\n      expect(screen.getByText('Panel de Administración')).toBeInTheDocument()\n\n      // Verificar que se muestran las secciones principales\n      expect(screen.getByText('Estadísticas Generales')).toBeInTheDocument()\n      expect(screen.getByText('Órdenes Recientes')).toBeInTheDocument()\n      expect(screen.getByText('Análisis de Ventas')).toBeInTheDocument()\n    })\n\n    it('debe mostrar loading state inicialmente', () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      expect(screen.getByTestId('dashboard-loading')).toBeInTheDocument()\n      expect(screen.getByText('Cargando dashboard...')).toBeInTheDocument()\n    })\n\n    it('debe manejar errores de carga', async () => {\n      ;(supabase.from as jest.Mock).mockImplementation(() => ({\n        select: jest.fn(() => ({\n          count: jest.fn().mockRejectedValue(new Error('Database error')),\n        })),\n      }))\n\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByText('Error al cargar el dashboard')).toBeInTheDocument()\n        expect(screen.getByText('Reintentar')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Estadísticas Generales', () => {\n    beforeEach(() => {\n      // Mock exitoso de estadísticas\n      ;(supabase.from as jest.Mock).mockImplementation(table => {\n        const responses = {\n          orders: {\n            select: jest.fn(() => ({\n              count: jest.fn().mockResolvedValue({ count: mockDashboardData.stats.totalOrders }),\n              eq: jest.fn(() => ({\n                count: jest\n                  .fn()\n                  .mockResolvedValue({ count: mockDashboardData.stats.pendingOrders }),\n              })),\n            })),\n          },\n          products: {\n            select: jest.fn(() => ({\n              count: jest.fn().mockResolvedValue({ count: mockDashboardData.stats.totalProducts }),\n              lt: jest.fn(() => ({\n                count: jest\n                  .fn()\n                  .mockResolvedValue({ count: mockDashboardData.stats.lowStockProducts }),\n              })),\n            })),\n          },\n          users: {\n            select: jest.fn(() => ({\n              count: jest.fn().mockResolvedValue({ count: mockDashboardData.stats.totalUsers }),\n            })),\n          },\n        }\n\n        return responses[table as keyof typeof responses]\n      })\n    })\n\n    it('debe mostrar las estadísticas correctamente', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByText('150')).toBeInTheDocument() // Total órdenes\n        expect(screen.getByText('89')).toBeInTheDocument() // Total productos\n        expect(screen.getByText('1,250')).toBeInTheDocument() // Total usuarios\n        expect(screen.getByText('12')).toBeInTheDocument() // Órdenes pendientes\n      })\n\n      // Verificar etiquetas\n      expect(screen.getByText('Total Órdenes')).toBeInTheDocument()\n      expect(screen.getByText('Total Productos')).toBeInTheDocument()\n      expect(screen.getByText('Total Usuarios')).toBeInTheDocument()\n      expect(screen.getByText('Órdenes Pendientes')).toBeInTheDocument()\n    })\n\n    it('debe mostrar alertas para productos con bajo stock', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        const lowStockAlert = screen.getByTestId('low-stock-alert')\n        expect(lowStockAlert).toBeInTheDocument()\n        expect(within(lowStockAlert).getByText('5 productos con bajo stock')).toBeInTheDocument()\n      })\n    })\n\n    it('debe permitir navegar a secciones específicas', async () => {\n      const user = userEvent.setup()\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByText('Ver todas las órdenes')).toBeInTheDocument()\n      })\n\n      // Click en \"Ver todas las órdenes\"\n      await user.click(screen.getByText('Ver todas las órdenes'))\n\n      // Verificar navegación (esto dependería de la implementación real)\n      // En un test real, verificaríamos que se llama al router\n    })\n  })\n\n  describe('Órdenes Recientes', () => {\n    beforeEach(() => {\n      ;(supabase.from as jest.Mock).mockImplementation(table => {\n        if (table === 'orders') {\n          return {\n            select: jest.fn(() => ({\n              order: jest.fn(() => ({\n                limit: jest.fn().mockResolvedValue({\n                  data: mockDashboardData.recentOrders,\n                }),\n              })),\n            })),\n          }\n        }\n        return {\n          select: jest.fn(() => ({\n            count: jest.fn().mockResolvedValue({ count: 0 }),\n          })),\n        }\n      })\n    })\n\n    it('debe mostrar las órdenes recientes', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByText('user1@example.com')).toBeInTheDocument()\n        expect(screen.getByText('user2@example.com')).toBeInTheDocument()\n        expect(screen.getByText('$299.99')).toBeInTheDocument()\n        expect(screen.getByText('$149.50')).toBeInTheDocument()\n      })\n    })\n\n    it('debe mostrar el estado de las órdenes con colores apropiados', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        const pendingStatus = screen.getByText('pending')\n        const completedStatus = screen.getByText('completed')\n\n        expect(pendingStatus).toHaveClass('status-pending')\n        expect(completedStatus).toHaveClass('status-completed')\n      })\n    })\n\n    it('debe permitir ver detalles de una orden', async () => {\n      const user = userEvent.setup()\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByText('Ver detalles')).toBeInTheDocument()\n      })\n\n      await user.click(screen.getAllByText('Ver detalles')[0])\n\n      // Verificar que se abre el modal o navega a la página de detalles\n      await waitFor(() => {\n        expect(screen.getByText('Detalles de la Orden')).toBeInTheDocument()\n      })\n    })\n\n    it('debe permitir cambiar el estado de una orden', async () => {\n      const user = userEvent.setup()\n\n      // Mock para actualización de orden\n      ;(supabase.from as jest.Mock).mockImplementation(table => {\n        if (table === 'orders') {\n          return {\n            select: jest.fn(() => ({\n              order: jest.fn(() => ({\n                limit: jest.fn().mockResolvedValue({\n                  data: mockDashboardData.recentOrders,\n                }),\n              })),\n            })),\n            update: jest.fn(() => ({\n              eq: jest.fn().mockResolvedValue({\n                data: [{ ...mockDashboardData.recentOrders[0], status: 'processing' }],\n                error: null,\n              }),\n            })),\n          }\n        }\n        return { select: jest.fn(() => ({ count: jest.fn().mockResolvedValue({ count: 0 }) })) }\n      })\n\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getAllByText('Cambiar Estado')[0]).toBeInTheDocument()\n      })\n\n      await user.click(screen.getAllByText('Cambiar Estado')[0])\n\n      // Seleccionar nuevo estado\n      const statusSelect = screen.getByTestId('status-select')\n      await user.selectOptions(statusSelect, 'processing')\n\n      await user.click(screen.getByText('Actualizar'))\n\n      await waitFor(() => {\n        expect(toast.success).toHaveBeenCalledWith('Estado de orden actualizado')\n      })\n    })\n  })\n\n  describe('Gráficos y Análisis', () => {\n    beforeEach(() => {\n      // Mock de datos de ventas\n      ;(supabase.from as jest.Mock).mockImplementation(table => {\n        if (table === 'orders') {\n          return {\n            select: jest.fn(() => ({\n              gte: jest.fn(() => ({\n                lte: jest.fn(() => ({\n                  order: jest.fn().mockResolvedValue({\n                    data: mockDashboardData.salesData.daily,\n                  }),\n                })),\n              })),\n            })),\n          }\n        }\n        return { select: jest.fn(() => ({ count: jest.fn().mockResolvedValue({ count: 0 }) })) }\n      })\n    })\n\n    it('debe mostrar gráfico de ventas diarias', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('line-chart')).toBeInTheDocument()\n      })\n\n      const chart = screen.getByTestId('line-chart')\n      const chartData = JSON.parse(chart.getAttribute('data-chart-data') || '{}')\n\n      expect(chartData.datasets[0].label).toBe('Ventas Diarias')\n      expect(chartData.labels).toContain('2024-01-15')\n    })\n\n    it('debe mostrar gráfico de productos más vendidos', async () => {\n      // Mock para productos más vendidos\n      ;(supabase.from as jest.Mock).mockImplementation(table => {\n        if (table === 'order_items') {\n          return {\n            select: jest.fn(() => ({\n              order: jest.fn(() => ({\n                limit: jest.fn().mockResolvedValue({\n                  data: mockDashboardData.topProducts,\n                }),\n              })),\n            })),\n          }\n        }\n        return { select: jest.fn(() => ({ count: jest.fn().mockResolvedValue({ count: 0 }) })) }\n      })\n\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('bar-chart')).toBeInTheDocument()\n      })\n\n      const chart = screen.getByTestId('bar-chart')\n      const chartData = JSON.parse(chart.getAttribute('data-chart-data') || '{}')\n\n      expect(chartData.datasets[0].label).toBe('Productos Más Vendidos')\n    })\n\n    it('debe permitir cambiar el período de análisis', async () => {\n      const user = userEvent.setup()\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('period-selector')).toBeInTheDocument()\n      })\n\n      // Cambiar a vista mensual\n      await user.selectOptions(screen.getByTestId('period-selector'), 'monthly')\n\n      await waitFor(() => {\n        // Verificar que se actualiza el gráfico\n        expect(screen.getByText('Ventas Mensuales')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Funcionalidades de Administración', () => {\n    it('debe mostrar acciones rápidas', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByText('Acciones Rápidas')).toBeInTheDocument()\n        expect(screen.getByText('Agregar Producto')).toBeInTheDocument()\n        expect(screen.getByText('Ver Inventario')).toBeInTheDocument()\n        expect(screen.getByText('Gestionar Usuarios')).toBeInTheDocument()\n      })\n    })\n\n    it('debe permitir exportar datos', async () => {\n      const user = userEvent.setup()\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByText('Exportar Datos')).toBeInTheDocument()\n      })\n\n      await user.click(screen.getByText('Exportar Datos'))\n\n      // Verificar opciones de exportación\n      expect(screen.getByText('Exportar Órdenes')).toBeInTheDocument()\n      expect(screen.getByText('Exportar Productos')).toBeInTheDocument()\n      expect(screen.getByText('Exportar Usuarios')).toBeInTheDocument()\n    })\n\n    it('debe mostrar notificaciones importantes', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('notifications-panel')).toBeInTheDocument()\n      })\n\n      // Verificar notificaciones de stock bajo\n      expect(screen.getByText('Productos con stock bajo')).toBeInTheDocument()\n\n      // Verificar notificaciones de órdenes pendientes\n      expect(screen.getByText('Órdenes pendientes de procesamiento')).toBeInTheDocument()\n    })\n\n    it('debe actualizar datos en tiempo real', async () => {\n      const { rerender } = render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      // Simular actualización de datos\n      const updatedStats = {\n        ...mockDashboardData.stats,\n        totalOrders: 155, // 5 órdenes más\n        pendingOrders: 15, // 3 órdenes pendientes más\n      }\n\n      ;(supabase.from as jest.Mock).mockImplementation(table => {\n        if (table === 'orders') {\n          return {\n            select: jest.fn(() => ({\n              count: jest.fn().mockResolvedValue({ count: updatedStats.totalOrders }),\n              eq: jest.fn(() => ({\n                count: jest.fn().mockResolvedValue({ count: updatedStats.pendingOrders }),\n              })),\n            })),\n          }\n        }\n        return { select: jest.fn(() => ({ count: jest.fn().mockResolvedValue({ count: 0 }) })) }\n      })\n\n      rerender(<AdminDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('155')).toBeInTheDocument()\n        expect(screen.getByText('15')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Responsive Design', () => {\n    it('debe adaptarse a pantallas móviles', () => {\n      // Simular viewport móvil\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      // Verificar que se muestra la versión móvil\n      expect(screen.getByTestId('mobile-dashboard')).toBeInTheDocument()\n\n      // Verificar que las estadísticas se muestran en formato de tarjetas apiladas\n      expect(screen.getByTestId('mobile-stats-grid')).toBeInTheDocument()\n    })\n\n    it('debe mostrar menú hamburguesa en móvil', async () => {\n      const user = userEvent.setup()\n\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      const hamburgerMenu = screen.getByTestId('mobile-menu-toggle')\n      expect(hamburgerMenu).toBeInTheDocument()\n\n      await user.click(hamburgerMenu)\n\n      expect(screen.getByTestId('mobile-navigation-menu')).toBeVisible()\n    })\n  })\n\n  describe('Accesibilidad', () => {\n    it('debe tener etiquetas ARIA apropiadas', () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      expect(screen.getByRole('main')).toHaveAttribute('aria-label', 'Panel de administración')\n      expect(screen.getByRole('region', { name: 'Estadísticas generales' })).toBeInTheDocument()\n      expect(screen.getByRole('region', { name: 'Órdenes recientes' })).toBeInTheDocument()\n    })\n\n    it('debe ser navegable por teclado', async () => {\n      const user = userEvent.setup()\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      // Verificar que los elementos interactivos son focusables\n      await user.tab()\n      expect(screen.getByText('Ver todas las órdenes')).toHaveFocus()\n\n      await user.tab()\n      expect(screen.getByText('Agregar Producto')).toHaveFocus()\n    })\n\n    it('debe anunciar cambios importantes a lectores de pantalla', async () => {\n      render(<AdminDashboard />, { wrapper: createWrapper() })\n\n      // Verificar región de anuncios\n      expect(screen.getByRole('status')).toBeInTheDocument()\n\n      // Simular actualización de datos\n      await waitFor(() => {\n        expect(screen.getByRole('status')).toHaveTextContent(\n          'Dashboard actualizado con nuevos datos'\n        )\n      })\n    })\n  })\n})\n\n\n\n\n\n\n\n\n\n"],"names":["jest","mock","supabase","auth","getUser","fn","from","select","eq","gte","lte","order","limit","count","single","toast","success","error","loading","useRouter","push","replace","refresh","Line","data","options","div","data-testid","data-chart-data","JSON","stringify","datasets","label","Bar","Doughnut","mockAdminUser","id","email","user_metadata","full_name","role","mockDashboardData","stats","totalOrders","totalRevenue","totalProducts","totalUsers","pendingOrders","lowStockProducts","recentOrders","user_email","total","status","created_at","items","product_name","quantity","price","salesData","daily","date","sales","monthly","month","topProducts","name","revenue","stock","min_stock","createWrapper","queryClient","QueryClient","defaultOptions","queries","retry","mutations","children","QueryClientProvider","client","AuthProvider","describe","beforeEach","clearAllMocks","mockResolvedValue","user","it","mockImplementation","table","mockQueries","orders","products","users","render","AdminDashboard","wrapper","expect","screen","getByText","toBeInTheDocument","getByTestId","mockRejectedValue","Error","waitFor","responses","lt","lowStockAlert","within","userEvent","setup","click","pendingStatus","completedStatus","toHaveClass","getAllByText","update","statusSelect","selectOptions","toHaveBeenCalledWith","chart","chartData","parse","getAttribute","toBe","labels","toContain","rerender","updatedStats","Object","defineProperty","window","writable","configurable","value","hamburgerMenu","toBeVisible","getByRole","toHaveAttribute","tab","toHaveFocus","toHaveTextContent"],"mappings":"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"}