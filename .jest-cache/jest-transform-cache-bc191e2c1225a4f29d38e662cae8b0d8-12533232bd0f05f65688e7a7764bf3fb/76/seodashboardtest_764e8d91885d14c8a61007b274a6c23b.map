{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\admin\\seo\\seo-dashboard.test.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - SEO DASHBOARD TESTS\r\n// Tests completos para el dashboard administrativo SEO\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { jest } from '@jest/globals';\r\nimport '@testing-library/jest-dom';\r\n\r\n// Interfaces para tipado\r\ninterface UIComponentProps {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  onClick?: () => void;\r\n  disabled?: boolean;\r\n  value?: number | string;\r\n  title?: string;\r\n  actions?: React.ReactNode;\r\n}\r\n\r\ninterface MockFetchData {\r\n  success: boolean;\r\n  data: unknown;\r\n}\r\n\r\n// Mock de Next.js\r\njest.mock('next/navigation', () => ({\r\n  useRouter: () => ({\r\n    push: jest.fn(),\r\n    back: jest.fn(),\r\n    forward: jest.fn(),\r\n    refresh: jest.fn(),\r\n  }),\r\n  useSearchParams: () => new URLSearchParams(),\r\n  usePathname: () => '/admin/seo',\r\n}));\r\n\r\n// Mock de Clerk\r\njest.mock('@clerk/nextjs', () => ({\r\n  useAuth: () => ({\r\n    isLoaded: true,\r\n    userId: 'test-user-id',\r\n    sessionId: 'test-session-id',\r\n    getToken: jest.fn().mockResolvedValue('test-token'),\r\n  }),\r\n  useUser: () => ({\r\n    isLoaded: true,\r\n    user: {\r\n      id: 'test-user-id',\r\n      emailAddresses: [{ emailAddress: 'admin@pinteya.com' }],\r\n    },\r\n  }),\r\n}));\r\n\r\n// Mock de componentes UI\r\njest.mock('@/components/ui/card', () => ({\r\n  Card: ({ children, className }: UIComponentProps) => <div className={className}>{children}</div>,\r\n  CardContent: ({ children }: UIComponentProps) => <div>{children}</div>,\r\n  CardDescription: ({ children }: UIComponentProps) => <div>{children}</div>,\r\n  CardHeader: ({ children }: UIComponentProps) => <div>{children}</div>,\r\n  CardTitle: ({ children }: UIComponentProps) => <h3>{children}</h3>,\r\n}));\r\n\r\njest.mock('@/components/ui/button', () => ({\r\n  Button: ({ children, onClick, disabled, ...props }: UIComponentProps) => (\r\n    <button onClick={onClick} disabled={disabled} {...props}>\r\n      {children}\r\n    </button>\r\n  ),\r\n}));\r\n\r\njest.mock('@/components/ui/badge', () => ({\r\n  Badge: ({ children, className }: UIComponentProps) => <span className={className}>{children}</span>,\r\n}));\r\n\r\njest.mock('@/components/ui/progress', () => ({\r\n  Progress: ({ value }: UIComponentProps) => <div data-testid=\"progress\" data-value={value}></div>,\r\n}));\r\n\r\njest.mock('@/components/ui/alert', () => ({\r\n  Alert: ({ children }: UIComponentProps) => <div role=\"alert\">{children}</div>,\r\n  AlertDescription: ({ children }: UIComponentProps) => <div>{children}</div>,\r\n}));\r\n\r\njest.mock('@/components/admin/layout/AdminLayout', () => ({\r\n  AdminLayout: ({ children, title, actions }: UIComponentProps) => (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      {actions && <div data-testid=\"actions\">{actions}</div>}\r\n      <main>{children}</main>\r\n    </div>\r\n  ),\r\n}));\r\n\r\n// Mock de APIs\r\nglobal.fetch = jest.fn();\r\n\r\n// Importar componente después de los mocks\r\nimport SEOAdminDashboard from '@/app/admin/seo/page';\r\n\r\n// ===================================\r\n// DATOS DE PRUEBA\r\n// ===================================\r\n\r\nconst mockOverviewData = {\r\n  overallScore: 85,\r\n  totalPages: 1247,\r\n  indexedPages: 1180,\r\n  organicTraffic: 8920,\r\n  avgPosition: 3.2,\r\n  ctr: 2.56,\r\n  coreWebVitals: {\r\n    lcp: 2.1,\r\n    fid: 85,\r\n    cls: 0.08,\r\n    fcp: 1.8,\r\n    ttfb: 420,\r\n    inp: 180\r\n  },\r\n  recentTests: {\r\n    total: 24,\r\n    passed: 18,\r\n    failed: 3,\r\n    warnings: 3\r\n  },\r\n  sitemapStatus: {\r\n    totalUrls: 1247,\r\n    lastGenerated: new Date().toISOString(),\r\n    errors: 2\r\n  },\r\n  optimizationStatus: {\r\n    activeTools: 4,\r\n    improvements: 12,\r\n    issues: 5\r\n  }\r\n};\r\n\r\nconst mockAlerts = [\r\n  {\r\n    id: 'alert_1',\r\n    type: 'warning',\r\n    title: 'Meta Description Faltante',\r\n    message: 'Se detectaron 5 páginas sin meta description',\r\n    timestamp: new Date().toISOString(),\r\n    url: '/products/pintura-interior',\r\n    action: {\r\n      label: 'Revisar',\r\n      href: '/admin/seo/testing'\r\n    }\r\n  },\r\n  {\r\n    id: 'alert_2',\r\n    type: 'error',\r\n    title: 'Error en Sitemap',\r\n    message: 'El sitemap contiene URLs inválidas',\r\n    timestamp: new Date().toISOString(),\r\n    action: {\r\n      label: 'Corregir',\r\n      href: '/admin/seo/sitemap'\r\n    }\r\n  }\r\n];\r\n\r\n// ===================================\r\n// SETUP Y HELPERS\r\n// ===================================\r\n\r\nconst mockFetch = (data: unknown, status = 200) => {\r\n  (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n    ok: status >= 200 && status < 300,\r\n    status,\r\n    json: async (): Promise<MockFetchData> => ({ success: true, data }),\r\n  });\r\n};\r\n\r\nconst renderDashboard = () => {\r\n  return render(<SEOAdminDashboard />);\r\n};\r\n\r\n// ===================================\r\n// TESTS PRINCIPALES\r\n// ===================================\r\n\r\ndescribe('SEO Admin Dashboard', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Mock inicial para cargar datos\r\n    mockFetch(mockOverviewData);\r\n    mockFetch(mockAlerts);\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE RENDERIZADO\r\n  // ===================================\r\n\r\n  describe('Renderizado Inicial', () => {\r\n    test('debe renderizar el título del dashboard', async () => {\r\n      renderDashboard();\r\n      \r\n      expect(screen.getByText('SEO Dashboard')).toBeInTheDocument();\r\n    });\r\n\r\n    test('debe mostrar estado de carga inicial', () => {\r\n      renderDashboard();\r\n      \r\n      // Verificar que se muestran skeletons de carga\r\n      const loadingCards = screen.getAllByText('Cargando...');\r\n      expect(loadingCards.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    test('debe cargar y mostrar métricas principales', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('85')).toBeInTheDocument(); // Overall Score\r\n        expect(screen.getByText('8,920')).toBeInTheDocument(); // Organic Traffic\r\n        expect(screen.getByText('3.2')).toBeInTheDocument(); // Avg Position\r\n      });\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE MÉTRICAS\r\n  // ===================================\r\n\r\n  describe('Métricas del Dashboard', () => {\r\n    test('debe mostrar todas las métricas principales', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        // Verificar métricas clave\r\n        expect(screen.getByText('SEO Score General')).toBeInTheDocument();\r\n        expect(screen.getByText('Tráfico Orgánico')).toBeInTheDocument();\r\n        expect(screen.getByText('Posición Promedio')).toBeInTheDocument();\r\n        expect(screen.getByText('CTR Promedio')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe mostrar Core Web Vitals correctamente', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('Core Web Vitals')).toBeInTheDocument();\r\n        expect(screen.getByText('2.1s')).toBeInTheDocument(); // LCP\r\n        expect(screen.getByText('85ms')).toBeInTheDocument(); // FID\r\n        expect(screen.getByText('0.08')).toBeInTheDocument(); // CLS\r\n      });\r\n    });\r\n\r\n    test('debe mostrar progreso con barras de progreso', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        const progressBars = screen.getAllByTestId('progress');\r\n        expect(progressBars.length).toBeGreaterThan(0);\r\n        \r\n        // Verificar que tienen valores\r\n        progressBars.forEach(bar => {\r\n          expect(bar).toHaveAttribute('data-value');\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE ALERTAS\r\n  // ===================================\r\n\r\n  describe('Sistema de Alertas', () => {\r\n    test('debe mostrar alertas activas', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('Meta Description Faltante')).toBeInTheDocument();\r\n        expect(screen.getByText('Error en Sitemap')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe mostrar diferentes tipos de alertas', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        // Verificar que se muestran alertas de warning y error\r\n        expect(screen.getByText('Se detectaron 5 páginas sin meta description')).toBeInTheDocument();\r\n        expect(screen.getByText('El sitemap contiene URLs inválidas')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe permitir descartar alertas', async () => {\r\n      mockFetch({ success: true }); // Mock para dismiss alert\r\n      \r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        const dismissButtons = screen.getAllByText('×');\r\n        expect(dismissButtons.length).toBeGreaterThan(0);\r\n      });\r\n      \r\n      // Simular click en descartar\r\n      const dismissButton = screen.getAllByText('×')[0];\r\n      fireEvent.click(dismissButton);\r\n      \r\n      await waitFor(() => {\r\n        expect(global.fetch).toHaveBeenCalledWith(\r\n          expect.stringContaining('/api/admin/seo/dashboard'),\r\n          expect.objectContaining({\r\n            method: 'POST',\r\n            body: expect.stringContaining('dismiss-alert')\r\n          })\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE ACCIONES RÁPIDAS\r\n  // ===================================\r\n\r\n  describe('Acciones Rápidas', () => {\r\n    test('debe mostrar botones de acciones rápidas', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('Ejecutar Auditoría')).toBeInTheDocument();\r\n        expect(screen.getByText('Generar Reporte')).toBeInTheDocument();\r\n        expect(screen.getByText('Optimizar Contenido')).toBeInTheDocument();\r\n        expect(screen.getByText('Actualizar Sitemap')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe ejecutar auditoría rápida', async () => {\r\n      mockFetch({ success: true, data: { score: 88 } }); // Mock para quick audit\r\n      \r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        const auditButton = screen.getByText('Ejecutar Auditoría');\r\n        fireEvent.click(auditButton);\r\n      });\r\n      \r\n      await waitFor(() => {\r\n        expect(global.fetch).toHaveBeenCalledWith(\r\n          expect.stringContaining('/api/admin/seo/dashboard'),\r\n          expect.objectContaining({\r\n            method: 'POST',\r\n            body: expect.stringContaining('run-quick-audit')\r\n          })\r\n        );\r\n      });\r\n    });\r\n\r\n    test('debe actualizar datos del dashboard', async () => {\r\n      mockFetch({ success: true }); // Mock para refresh\r\n      \r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        const refreshButton = screen.getByText('Actualizar');\r\n        fireEvent.click(refreshButton);\r\n      });\r\n      \r\n      await waitFor(() => {\r\n        expect(global.fetch).toHaveBeenCalledWith(\r\n          expect.stringContaining('/api/admin/seo/dashboard?type=overview')\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE NAVEGACIÓN\r\n  // ===================================\r\n\r\n  describe('Navegación', () => {\r\n    test('debe mostrar enlaces a secciones especializadas', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('Ver Analytics Detallado')).toBeInTheDocument();\r\n        expect(screen.getByText('Gestionar Tests')).toBeInTheDocument();\r\n        expect(screen.getByText('Herramientas de Optimización')).toBeInTheDocument();\r\n        expect(screen.getByText('Gestionar Sitemap')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe tener breadcrumbs correctos', () => {\r\n      renderDashboard();\r\n      \r\n      // Verificar que AdminLayout recibe breadcrumbs\r\n      expect(screen.getByText('SEO Dashboard')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE ESTADO DE SISTEMAS\r\n  // ===================================\r\n\r\n  describe('Estado de Sistemas', () => {\r\n    test('debe mostrar estado de testing', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('Tests Recientes')).toBeInTheDocument();\r\n        expect(screen.getByText('18 passed')).toBeInTheDocument();\r\n        expect(screen.getByText('3 failed')).toBeInTheDocument();\r\n        expect(screen.getByText('3 warnings')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe mostrar estado del sitemap', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('Estado del Sitemap')).toBeInTheDocument();\r\n        expect(screen.getByText('1,247 URLs')).toBeInTheDocument();\r\n        expect(screen.getByText('2 errores')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe mostrar estado de optimización', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('Herramientas de Optimización')).toBeInTheDocument();\r\n        expect(screen.getByText('4 activas')).toBeInTheDocument();\r\n        expect(screen.getByText('12 mejoras')).toBeInTheDocument();\r\n        expect(screen.getByText('5 issues')).toBeInTheDocument();\r\n      });\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE MANEJO DE ERRORES\r\n  // ===================================\r\n\r\n  describe('Manejo de Errores', () => {\r\n    test('debe manejar errores de API gracefully', async () => {\r\n      (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('API Error'));\r\n      \r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText(/Error cargando datos/)).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe mostrar mensaje cuando no hay datos', async () => {\r\n      mockFetch(null);\r\n      \r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText(/No hay datos disponibles/)).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    test('debe deshabilitar botones durante carga', async () => {\r\n      renderDashboard();\r\n      \r\n      // Los botones deben estar deshabilitados durante la carga inicial\r\n      const buttons = screen.getAllByRole('button');\r\n      buttons.forEach(button => {\r\n        if (button.textContent?.includes('Ejecutar') || button.textContent?.includes('Generar')) {\r\n          expect(button).toBeDisabled();\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE PERFORMANCE\r\n  // ===================================\r\n\r\n  describe('Performance', () => {\r\n    test('debe cargar datos de forma eficiente', async () => {\r\n      const startTime = Date.now();\r\n      \r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('85')).toBeInTheDocument();\r\n      });\r\n      \r\n      const loadTime = Date.now() - startTime;\r\n      expect(loadTime).toBeLessThan(5000); // Debe cargar en menos de 5 segundos\r\n    });\r\n\r\n    test('debe usar caché para evitar llamadas redundantes', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByText('85')).toBeInTheDocument();\r\n      });\r\n      \r\n      // Verificar que no se hacen llamadas adicionales innecesarias\r\n      const fetchCalls = (global.fetch as jest.Mock).mock.calls.length;\r\n      expect(fetchCalls).toBeLessThanOrEqual(3); // Overview + Alerts + posible refresh\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS DE ACCESIBILIDAD\r\n  // ===================================\r\n\r\n  describe('Accesibilidad', () => {\r\n    test('debe tener estructura semántica correcta', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        // Verificar headings\r\n        expect(screen.getByRole('heading', { level: 1 })).toBeInTheDocument();\r\n        \r\n        // Verificar que las alertas tienen role=\"alert\"\r\n        const alerts = screen.getAllByRole('alert');\r\n        expect(alerts.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    test('debe ser navegable por teclado', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        const buttons = screen.getAllByRole('button');\r\n        buttons.forEach(button => {\r\n          expect(button).toHaveAttribute('tabIndex');\r\n        });\r\n      });\r\n    });\r\n\r\n    test('debe tener textos alternativos para elementos visuales', async () => {\r\n      renderDashboard();\r\n      \r\n      await waitFor(() => {\r\n        // Verificar que los iconos tienen labels apropiados\r\n        const progressBars = screen.getAllByTestId('progress');\r\n        progressBars.forEach(bar => {\r\n          expect(bar).toHaveAttribute('data-value');\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE INTEGRACIÓN\r\n// ===================================\r\n\r\ndescribe('Integración SEO Dashboard', () => {\r\n  test('debe integrar correctamente con todos los managers SEO', async () => {\r\n    renderDashboard();\r\n    \r\n    await waitFor(() => {\r\n      // Verificar que se muestran datos de todos los sistemas\r\n      expect(screen.getByText('SEO Score General')).toBeInTheDocument();\r\n      expect(screen.getByText('Tests Recientes')).toBeInTheDocument();\r\n      expect(screen.getByText('Estado del Sitemap')).toBeInTheDocument();\r\n      expect(screen.getByText('Herramientas de Optimización')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  test('debe actualizar datos en tiempo real', async () => {\r\n    renderDashboard();\r\n    \r\n    // Simular actualización de datos\r\n    mockFetch({\r\n      ...mockOverviewData,\r\n      overallScore: 90 // Score actualizado\r\n    });\r\n    \r\n    const refreshButton = screen.getByText('Actualizar');\r\n    fireEvent.click(refreshButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('90')).toBeInTheDocument();\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","useRouter","push","fn","back","forward","refresh","useSearchParams","URLSearchParams","usePathname","useAuth","isLoaded","userId","sessionId","getToken","mockResolvedValue","useUser","user","id","emailAddresses","emailAddress","Card","children","className","div","CardContent","CardDescription","CardHeader","CardTitle","h3","Button","onClick","disabled","props","button","Badge","span","Progress","value","data-testid","data-value","Alert","role","AlertDescription","AdminLayout","title","actions","h1","main","global","fetch","mockOverviewData","overallScore","totalPages","indexedPages","organicTraffic","avgPosition","ctr","coreWebVitals","lcp","fid","cls","fcp","ttfb","inp","recentTests","total","passed","failed","warnings","sitemapStatus","totalUrls","lastGenerated","Date","toISOString","errors","optimizationStatus","activeTools","improvements","issues","mockAlerts","type","message","timestamp","url","action","label","href","mockFetch","data","status","mockResolvedValueOnce","ok","json","success","renderDashboard","render","SEOAdminDashboard","describe","beforeEach","clearAllMocks","test","expect","screen","getByText","toBeInTheDocument","loadingCards","getAllByText","length","toBeGreaterThan","waitFor","progressBars","getAllByTestId","forEach","bar","toHaveAttribute","dismissButtons","dismissButton","fireEvent","click","toHaveBeenCalledWith","stringContaining","objectContaining","method","body","score","auditButton","refreshButton","mockRejectedValueOnce","Error","buttons","getAllByRole","textContent","includes","toBeDisabled","startTime","now","loadTime","toBeLessThan","fetchCalls","calls","toBeLessThanOrEqual","getByRole","level","alerts"],"mappings":"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"}