84aca6351ce2ef9be48da85bd7a77a7f
// ===================================
// BUNDLE OPTIMIZATION MANAGER
// ===================================
// Sistema avanzado de optimización de bundles para Pinteya E-commerce
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BundleOptimizationManager", {
    enumerable: true,
    get: function() {
        return BundleOptimizationManager;
    }
});
const _fs = require("fs");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class BundleOptimizationManager {
    constructor(){
        this.analysisCache = new Map();
        this.config = this.getDefaultConfig();
    }
    static getInstance() {
        if (!BundleOptimizationManager.instance) {
            BundleOptimizationManager.instance = new BundleOptimizationManager();
        }
        return BundleOptimizationManager.instance;
    }
    // ===================================
    // CONFIGURACIÓN
    // ===================================
    getDefaultConfig() {
        return {
            maxChunkSize: 250 * 1024,
            maxFirstLoadSize: 128 * 1024,
            enableTreeShaking: true,
            enableCodeSplitting: true,
            enableCompression: true,
            enableLazyLoading: true,
            performanceBudgets: {
                maxBundleSize: 500 * 1024,
                maxFirstLoadJS: 128 * 1024,
                maxCSS: 50 * 1024,
                maxImages: 200 * 1024,
                warningThreshold: 0.8,
                errorThreshold: 1.0
            }
        };
    }
    updateConfig(newConfig) {
        this.config = {
            ...this.config,
            ...newConfig
        };
    }
    // ===================================
    // ANÁLISIS DE BUNDLES
    // ===================================
    async analyzeBundles(buildPath = '.next') {
        const cacheKey = `${buildPath}-${Date.now()}`;
        if (this.analysisCache.has(cacheKey)) {
            return this.analysisCache.get(cacheKey);
        }
        try {
            const analysis = await this.performBundleAnalysis(buildPath);
            this.analysisCache.set(cacheKey, analysis);
            // Limpiar cache antiguo
            if (this.analysisCache.size > 5) {
                const firstKey = this.analysisCache.keys().next().value;
                this.analysisCache.delete(firstKey);
            }
            return analysis;
        } catch (error) {
            console.error('Error analyzing bundles:', error);
            throw new Error(`Bundle analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
    async performBundleAnalysis(buildPath) {
        const staticPath = _path.default.join(buildPath, 'static');
        const chunks = await this.analyzeChunks(staticPath);
        const dependencies = await this.analyzeDependencies();
        const performance = this.calculatePerformanceMetrics(chunks);
        const recommendations = this.generateRecommendations(chunks, dependencies, performance);
        const totalSize = chunks.reduce((sum, chunk)=>sum + chunk.size, 0);
        const gzippedSize = chunks.reduce((sum, chunk)=>sum + chunk.gzippedSize, 0);
        return {
            totalSize,
            gzippedSize,
            chunks,
            dependencies,
            recommendations,
            performance
        };
    }
    async analyzeChunks(staticPath) {
        const chunks = [];
        try {
            // Simular análisis de chunks (en implementación real usaríamos webpack-bundle-analyzer)
            const mockChunks = [
                {
                    name: 'main',
                    size: 85 * 1024,
                    gzippedSize: 28 * 1024,
                    type: 'app',
                    loadPriority: 'critical'
                },
                {
                    name: 'vendors',
                    size: 180 * 1024,
                    gzippedSize: 65 * 1024,
                    type: 'vendor',
                    loadPriority: 'critical'
                },
                {
                    name: 'admin',
                    size: 120 * 1024,
                    gzippedSize: 42 * 1024,
                    type: 'dynamic',
                    loadPriority: 'medium'
                }
            ];
            for (const mockChunk of mockChunks){
                chunks.push({
                    ...mockChunk,
                    modules: await this.analyzeChunkModules(mockChunk.name)
                });
            }
        } catch (error) {
            console.warn('Could not analyze chunks from filesystem, using mock data');
        }
        return chunks;
    }
    async analyzeChunkModules(chunkName) {
        // Simular análisis de módulos
        return [
            {
                name: `${chunkName}-module-1`,
                size: 15 * 1024,
                path: `src/components/${chunkName}`,
                imports: [
                    'react',
                    'next'
                ],
                exports: [
                    'default'
                ],
                isTreeShakeable: true
            }
        ];
    }
    async analyzeDependencies() {
        try {
            const packageJsonPath = _path.default.join(process.cwd(), 'package.json');
            const packageJson = JSON.parse(await _fs.promises.readFile(packageJsonPath, 'utf-8'));
            const dependencies = {
                ...packageJson.dependencies,
                ...packageJson.devDependencies
            };
            return Object.entries(dependencies).map(([name, version])=>({
                    name,
                    version: version,
                    size: this.estimateDependencySize(name),
                    usage: this.analyzeDependencyUsage(name),
                    alternatives: this.suggestAlternatives(name),
                    optimizationPotential: this.calculateOptimizationPotential(name)
                }));
        } catch (error) {
            console.warn('Could not analyze dependencies:', error);
            return [];
        }
    }
    estimateDependencySize(name) {
        // Estimaciones basadas en dependencias comunes
        const sizeMap = {
            react: 45 * 1024,
            'react-dom': 130 * 1024,
            next: 200 * 1024,
            'framer-motion': 180 * 1024,
            recharts: 250 * 1024,
            'maplibre-gl': 400 * 1024,
            'lodash-es': 70 * 1024,
            '@radix-ui/react-dialog': 25 * 1024
        };
        return sizeMap[name] || 20 * 1024 // Default 20KB
        ;
    }
    analyzeDependencyUsage(name) {
        const criticalDeps = [
            'react',
            'react-dom',
            'next'
        ];
        const importantDeps = [
            '@supabase/supabase-js',
            'zod',
            'next-auth'
        ];
        if (criticalDeps.includes(name)) {
            return 'critical';
        }
        if (importantDeps.includes(name)) {
            return 'important';
        }
        return 'optional';
    }
    suggestAlternatives(name) {
        const alternatives = {
            'lodash-es': [
                'ramda',
                'native-methods'
            ],
            moment: [
                'date-fns',
                'dayjs'
            ],
            recharts: [
                'chart.js',
                'victory'
            ],
            'framer-motion': [
                'react-spring',
                'lottie-react'
            ]
        };
        return alternatives[name] || [];
    }
    calculateOptimizationPotential(name) {
        // Porcentaje de optimización potencial
        const optimizationMap = {
            'lodash-es': 60,
            'framer-motion': 40,
            recharts: 50,
            'maplibre-gl': 30
        };
        return optimizationMap[name] || 10;
    }
    calculatePerformanceMetrics(chunks) {
        const firstLoadJS = chunks.filter((chunk)=>chunk.loadPriority === 'critical').reduce((sum, chunk)=>sum + chunk.size, 0);
        const totalJS = chunks.reduce((sum, chunk)=>sum + chunk.size, 0);
        // Calcular score basado en performance budgets
        const score = this.calculatePerformanceScore(firstLoadJS, totalJS);
        const grade = this.getPerformanceGrade(score);
        return {
            firstLoadJS,
            totalJS,
            css: 25 * 1024,
            images: 150 * 1024,
            fonts: 30 * 1024,
            other: 20 * 1024,
            score,
            grade
        };
    }
    calculatePerformanceScore(firstLoadJS, totalJS) {
        const { performanceBudgets } = this.config;
        const firstLoadRatio = firstLoadJS / performanceBudgets.maxFirstLoadJS;
        const totalRatio = totalJS / performanceBudgets.maxBundleSize;
        const penalty = Math.max(firstLoadRatio - 1, 0) + Math.max(totalRatio - 1, 0);
        return Math.max(100 - penalty * 50, 0);
    }
    getPerformanceGrade(score) {
        if (score >= 90) {
            return 'A';
        }
        if (score >= 80) {
            return 'B';
        }
        if (score >= 70) {
            return 'C';
        }
        if (score >= 60) {
            return 'D';
        }
        return 'F';
    }
    generateRecommendations(chunks, dependencies, performance) {
        const recommendations = [];
        // Recomendaciones basadas en tamaño de chunks
        const largeChunks = chunks.filter((chunk)=>chunk.size > this.config.maxChunkSize);
        for (const chunk of largeChunks){
            recommendations.push({
                type: 'code-splitting',
                priority: 'high',
                description: `Chunk '${chunk.name}' es demasiado grande (${Math.round(chunk.size / 1024)}KB)`,
                estimatedSavings: chunk.size * 0.3,
                implementation: `Dividir ${chunk.name} en chunks más pequeños usando dynamic imports`,
                effort: 'medium'
            });
        }
        // Recomendaciones basadas en dependencias
        const heavyDeps = dependencies.filter((dep)=>dep.size > 100 * 1024 && dep.optimizationPotential > 30);
        for (const dep of heavyDeps){
            recommendations.push({
                type: 'dependency-replacement',
                priority: 'medium',
                description: `Dependencia '${dep.name}' es pesada y tiene potencial de optimización`,
                estimatedSavings: dep.size * (dep.optimizationPotential / 100),
                implementation: `Considerar alternativas: ${dep.alternatives?.join(', ') || 'tree shaking'}`,
                effort: 'high'
            });
        }
        // Recomendaciones basadas en performance
        if (performance.firstLoadJS > this.config.performanceBudgets.maxFirstLoadJS) {
            recommendations.push({
                type: 'lazy-loading',
                priority: 'critical',
                description: 'First Load JS excede el presupuesto de performance',
                estimatedSavings: performance.firstLoadJS - this.config.performanceBudgets.maxFirstLoadJS,
                implementation: 'Implementar lazy loading para componentes no críticos',
                effort: 'low'
            });
        }
        return recommendations.sort((a, b)=>{
            const priorityOrder = {
                critical: 4,
                high: 3,
                medium: 2,
                low: 1
            };
            return priorityOrder[b.priority] - priorityOrder[a.priority];
        });
    }
    // ===================================
    // OPTIMIZACIONES AUTOMÁTICAS
    // ===================================
    async applyOptimizations(recommendations) {
        for (const recommendation of recommendations){
            if (recommendation.effort === 'low') {
                await this.applyLowEffortOptimization(recommendation);
            }
        }
    }
    async applyLowEffortOptimization(recommendation) {
        switch(recommendation.type){
            case 'lazy-loading':
                await this.implementLazyLoading();
                break;
            case 'compression':
                await this.enableCompression();
                break;
            default:
                console.log(`Optimization ${recommendation.type} requires manual implementation`);
        }
    }
    async implementLazyLoading() {
        // Implementar lazy loading automático para componentes pesados
        console.log('Implementing automatic lazy loading...');
    }
    async enableCompression() {
        // Habilitar compresión automática
        console.log('Enabling compression...');
    }
    // ===================================
    // REPORTES Y MÉTRICAS
    // ===================================
    generateOptimizationReport(analysis) {
        const report = `
# Bundle Optimization Report

## Performance Metrics
- **Score**: ${analysis.performance.score}/100 (Grade: ${analysis.performance.grade})
- **First Load JS**: ${Math.round(analysis.performance.firstLoadJS / 1024)}KB
- **Total JS**: ${Math.round(analysis.performance.totalJS / 1024)}KB
- **Total Bundle Size**: ${Math.round(analysis.totalSize / 1024)}KB
- **Gzipped Size**: ${Math.round(analysis.gzippedSize / 1024)}KB

## Chunks Analysis
${analysis.chunks.map((chunk)=>`
- **${chunk.name}**: ${Math.round(chunk.size / 1024)}KB (${chunk.type}, ${chunk.loadPriority} priority)
`).join('')}

## Top Recommendations
${analysis.recommendations.slice(0, 5).map((rec, i)=>`
${i + 1}. **${rec.type}** (${rec.priority} priority)
   - ${rec.description}
   - Estimated savings: ${Math.round(rec.estimatedSavings / 1024)}KB
   - Implementation: ${rec.implementation}
`).join('')}

## Dependencies Analysis
- **Total Dependencies**: ${analysis.dependencies.length}
- **Heavy Dependencies**: ${analysis.dependencies.filter((d)=>d.size > 100 * 1024).length}
- **Optimization Potential**: ${Math.round(analysis.dependencies.reduce((sum, d)=>sum + d.optimizationPotential, 0) / analysis.dependencies.length)}%
`;
        return report;
    }
}

//# sourceMappingURL=data:application/json;base64,