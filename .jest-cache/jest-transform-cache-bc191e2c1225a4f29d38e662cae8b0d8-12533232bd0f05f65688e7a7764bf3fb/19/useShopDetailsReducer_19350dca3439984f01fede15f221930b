2157b5191febd2204161cbd286441012
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useShopDetailsReducer () {
        return useShopDetailsReducer;
    },
    get useShopDetailsWithPersistence () {
        return useShopDetailsWithPersistence;
    }
});
const _react = require("react");
// Estado inicial
const initialState = {
    activeColor: 'blanco-puro',
    previewImg: 0,
    storage: 'gb128',
    type: 'active',
    sim: 'dual',
    quantity: 1,
    activeTab: 'tabOne',
    isLoading: false,
    error: null
};
// Reducer function
function shopDetailsReducer(state, action) {
    switch(action.type){
        case 'SET_ACTIVE_COLOR':
            return {
                ...state,
                activeColor: action.payload
            };
        case 'SET_PREVIEW_IMG':
            return {
                ...state,
                previewImg: action.payload
            };
        case 'SET_STORAGE':
            return {
                ...state,
                storage: action.payload
            };
        case 'SET_TYPE':
            return {
                ...state,
                type: action.payload
            };
        case 'SET_SIM':
            return {
                ...state,
                sim: action.payload
            };
        case 'SET_QUANTITY':
            return {
                ...state,
                quantity: Math.max(1, Math.min(99, action.payload))
            };
        case 'SET_ACTIVE_TAB':
            return {
                ...state,
                activeTab: action.payload
            };
        case 'SET_LOADING':
            return {
                ...state,
                isLoading: action.payload
            };
        case 'SET_ERROR':
            return {
                ...state,
                error: action.payload
            };
        case 'INCREMENT_QUANTITY':
            return {
                ...state,
                quantity: Math.min(99, state.quantity + 1)
            };
        case 'DECREMENT_QUANTITY':
            return {
                ...state,
                quantity: Math.max(1, state.quantity - 1)
            };
        case 'RESET_STATE':
            return initialState;
        default:
            return state;
    }
}
function useShopDetailsReducer() {
    const [state, dispatch] = (0, _react.useReducer)(shopDetailsReducer, initialState);
    // Acciones memoizadas
    const actions = (0, _react.useMemo)(()=>({
            setActiveColor: (color)=>dispatch({
                    type: 'SET_ACTIVE_COLOR',
                    payload: color
                }),
            setPreviewImg: (index)=>dispatch({
                    type: 'SET_PREVIEW_IMG',
                    payload: index
                }),
            setStorage: (storage)=>dispatch({
                    type: 'SET_STORAGE',
                    payload: storage
                }),
            setType: (type)=>dispatch({
                    type: 'SET_TYPE',
                    payload: type
                }),
            setSim: (sim)=>dispatch({
                    type: 'SET_SIM',
                    payload: sim
                }),
            setQuantity: (quantity)=>dispatch({
                    type: 'SET_QUANTITY',
                    payload: quantity
                }),
            setActiveTab: (tab)=>dispatch({
                    type: 'SET_ACTIVE_TAB',
                    payload: tab
                }),
            setLoading: (loading)=>dispatch({
                    type: 'SET_LOADING',
                    payload: loading
                }),
            setError: (error)=>dispatch({
                    type: 'SET_ERROR',
                    payload: error
                }),
            incrementQuantity: ()=>dispatch({
                    type: 'INCREMENT_QUANTITY'
                }),
            decrementQuantity: ()=>dispatch({
                    type: 'DECREMENT_QUANTITY'
                }),
            resetState: ()=>dispatch({
                    type: 'RESET_STATE'
                })
        }), []);
    // Selectores memoizados para valores derivados
    const selectors = (0, _react.useMemo)(()=>({
            // Verificar si hay errores
            hasError: Boolean(state.error),
            // Verificar si está en estado de carga
            isLoading: state.isLoading,
            // Obtener configuración actual del producto
            currentConfig: {
                color: state.activeColor,
                storage: state.storage,
                type: state.type,
                sim: state.sim,
                quantity: state.quantity
            },
            // Verificar si la cantidad está en el límite
            isMaxQuantity: state.quantity >= 99,
            isMinQuantity: state.quantity <= 1,
            // Obtener precio total basado en cantidad
            getTotalPrice: (unitPrice)=>unitPrice * state.quantity
        }), [
        state
    ]);
    return {
        state,
        actions,
        selectors
    };
}
function useShopDetailsWithPersistence(productId) {
    const { state, actions, selectors } = useShopDetailsReducer();
    // Callbacks memoizados para persistencia
    const persistenceActions = (0, _react.useMemo)(()=>({
            saveToStorage: (0, _react.useCallback)(()=>{
                if (productId) {
                    const key = `shop-details-${productId}`;
                    localStorage.setItem(key, JSON.stringify(state));
                }
            }, [
                state,
                productId
            ]),
            loadFromStorage: (0, _react.useCallback)(()=>{
                if (productId) {
                    const key = `shop-details-${productId}`;
                    const saved = localStorage.getItem(key);
                    if (saved) {
                        try {
                            const parsedState = JSON.parse(saved);
                            // Restaurar estado desde localStorage
                            Object.entries(parsedState).forEach(([key, value])=>{
                                switch(key){
                                    case 'activeColor':
                                        actions.setActiveColor(value);
                                        break;
                                    case 'storage':
                                        actions.setStorage(value);
                                        break;
                                    case 'type':
                                        actions.setType(value);
                                        break;
                                    case 'sim':
                                        actions.setSim(value);
                                        break;
                                    case 'quantity':
                                        actions.setQuantity(value);
                                        break;
                                }
                            });
                        } catch (error) {
                            console.warn('Error loading shop details from storage:', error);
                        }
                    }
                }
            }, [
                productId,
                actions
            ])
        }), [
        state,
        productId,
        actions
    ]);
    return {
        state,
        actions,
        selectors,
        persistenceActions
    };
}

//# sourceMappingURL=data:application/json;base64,