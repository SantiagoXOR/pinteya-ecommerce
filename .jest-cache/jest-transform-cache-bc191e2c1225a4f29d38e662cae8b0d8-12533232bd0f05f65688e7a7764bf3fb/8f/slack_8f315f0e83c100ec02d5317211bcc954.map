{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\notifications\\slack.ts"],"sourcesContent":["'use client'\n\nimport { toast } from '@/components/ui/use-toast'\n\nexport interface SlackNotificationConfig {\n  channel: string\n  message: string\n  username?: string\n  iconEmoji?: string\n  attachments?: SlackAttachment[]\n  blocks?: SlackBlock[]\n  threadTs?: string\n  priority?: 'low' | 'normal' | 'high' | 'critical'\n}\n\nexport interface SlackAttachment {\n  color?: 'good' | 'warning' | 'danger' | string\n  title?: string\n  titleLink?: string\n  text?: string\n  fields?: Array<{\n    title: string\n    value: string\n    short?: boolean\n  }>\n  footer?: string\n  ts?: number\n}\n\nexport interface SlackBlock {\n  type: string\n  text?: {\n    type: string\n    text: string\n  }\n  elements?: any[]\n  accessory?: any\n}\n\nexport class SlackNotificationService {\n  private static instance: SlackNotificationService\n  private webhookUrl: string | null = null\n  private botToken: string | null = null\n  private apiEndpoint = '/api/notifications/slack'\n\n  static getInstance(): SlackNotificationService {\n    if (!SlackNotificationService.instance) {\n      SlackNotificationService.instance = new SlackNotificationService()\n    }\n    return SlackNotificationService.instance\n  }\n\n  configure(config: { webhookUrl?: string; botToken?: string }) {\n    this.webhookUrl = config.webhookUrl || null\n    this.botToken = config.botToken || null\n  }\n\n  async sendNotification(config: SlackNotificationConfig): Promise<boolean> {\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(config),\n      })\n\n      if (!response.ok) {\n        throw new Error('Error al enviar notificaci√≥n a Slack')\n      }\n\n      const result = await response.json()\n      return result.success\n    } catch (error) {\n      console.error('Error sending Slack notification:', error)\n      toast({\n        title: 'Error',\n        description: 'No se pudo enviar la notificaci√≥n a Slack',\n        variant: 'destructive',\n      })\n      return false\n    }\n  }\n\n  async sendOrderAlert(orderData: {\n    orderId: string\n    customerName: string\n    total: number\n    items: Array<{ name: string; quantity: number }>\n    status: string\n  }): Promise<boolean> {\n    const attachment: SlackAttachment = {\n      color: 'good',\n      title: `Nueva orden #${orderData.orderId}`,\n      fields: [\n        {\n          title: 'Cliente',\n          value: orderData.customerName,\n          short: true,\n        },\n        {\n          title: 'Total',\n          value: `$${orderData.total.toFixed(2)}`,\n          short: true,\n        },\n        {\n          title: 'Estado',\n          value: orderData.status,\n          short: true,\n        },\n        {\n          title: 'Productos',\n          value: orderData.items.map(item => `${item.name} (x${item.quantity})`).join('\\n'),\n          short: false,\n        },\n      ],\n      footer: 'Sistema E-commerce',\n      ts: Math.floor(Date.now() / 1000),\n    }\n\n    return this.sendNotification({\n      channel: '#orders',\n      message: `Nueva orden recibida: #${orderData.orderId}`,\n      attachments: [attachment],\n      priority: 'normal',\n    })\n  }\n\n  async sendLowStockAlert(productData: {\n    productName: string\n    currentStock: number\n    minimumStock: number\n    productId: string\n  }): Promise<boolean> {\n    const attachment: SlackAttachment = {\n      color: 'warning',\n      title: '‚ö†Ô∏è Alerta de Stock Bajo',\n      fields: [\n        {\n          title: 'Producto',\n          value: productData.productName,\n          short: true,\n        },\n        {\n          title: 'Stock Actual',\n          value: productData.currentStock.toString(),\n          short: true,\n        },\n        {\n          title: 'Stock M√≠nimo',\n          value: productData.minimumStock.toString(),\n          short: true,\n        },\n        {\n          title: 'ID Producto',\n          value: productData.productId,\n          short: true,\n        },\n      ],\n      footer: 'Sistema de Inventario',\n      ts: Math.floor(Date.now() / 1000),\n    }\n\n    return this.sendNotification({\n      channel: '#inventory',\n      message: `üö® Stock bajo detectado para: ${productData.productName}`,\n      attachments: [attachment],\n      priority: 'high',\n    })\n  }\n\n  async sendErrorAlert(errorData: {\n    error: string\n    context: string\n    userId?: string\n    timestamp: Date\n    severity: 'low' | 'medium' | 'high' | 'critical'\n  }): Promise<boolean> {\n    const colorMap = {\n      low: 'good',\n      medium: 'warning',\n      high: 'danger',\n      critical: 'danger',\n    }\n\n    const attachment: SlackAttachment = {\n      color: colorMap[errorData.severity],\n      title: `üö® Error ${errorData.severity.toUpperCase()}`,\n      fields: [\n        {\n          title: 'Error',\n          value: errorData.error,\n          short: false,\n        },\n        {\n          title: 'Contexto',\n          value: errorData.context,\n          short: false,\n        },\n        {\n          title: 'Usuario',\n          value: errorData.userId || 'N/A',\n          short: true,\n        },\n        {\n          title: 'Severidad',\n          value: errorData.severity.toUpperCase(),\n          short: true,\n        },\n      ],\n      footer: 'Sistema de Monitoreo',\n      ts: Math.floor(errorData.timestamp.getTime() / 1000),\n    }\n\n    return this.sendNotification({\n      channel: '#errors',\n      message: `Error detectado en el sistema`,\n      attachments: [attachment],\n      priority: errorData.severity === 'critical' ? 'critical' : 'high',\n    })\n  }\n\n  async sendSalesReport(reportData: {\n    period: string\n    totalSales: number\n    totalOrders: number\n    averageOrderValue: number\n    topProducts: Array<{ name: string; sales: number }>\n  }): Promise<boolean> {\n    const attachment: SlackAttachment = {\n      color: 'good',\n      title: `üìä Reporte de Ventas - ${reportData.period}`,\n      fields: [\n        {\n          title: 'Ventas Totales',\n          value: `$${reportData.totalSales.toFixed(2)}`,\n          short: true,\n        },\n        {\n          title: '√ìrdenes Totales',\n          value: reportData.totalOrders.toString(),\n          short: true,\n        },\n        {\n          title: 'Valor Promedio por Orden',\n          value: `$${reportData.averageOrderValue.toFixed(2)}`,\n          short: true,\n        },\n        {\n          title: 'Top Productos',\n          value: reportData.topProducts.map(p => `${p.name}: ${p.sales} ventas`).join('\\n'),\n          short: false,\n        },\n      ],\n      footer: 'Reporte Autom√°tico',\n      ts: Math.floor(Date.now() / 1000),\n    }\n\n    return this.sendNotification({\n      channel: '#sales',\n      message: `Reporte de ventas generado para ${reportData.period}`,\n      attachments: [attachment],\n      priority: 'low',\n    })\n  }\n\n  async sendSystemAlert(alertData: {\n    title: string\n    message: string\n    severity: 'info' | 'warning' | 'error'\n    details?: Record<string, any>\n  }): Promise<boolean> {\n    const colorMap = {\n      info: 'good',\n      warning: 'warning',\n      error: 'danger',\n    }\n\n    const emojiMap = {\n      info: '‚ÑπÔ∏è',\n      warning: '‚ö†Ô∏è',\n      error: 'üö®',\n    }\n\n    const attachment: SlackAttachment = {\n      color: colorMap[alertData.severity],\n      title: `${emojiMap[alertData.severity]} ${alertData.title}`,\n      text: alertData.message,\n      fields: alertData.details\n        ? Object.entries(alertData.details).map(([key, value]) => ({\n            title: key,\n            value: String(value),\n            short: true,\n          }))\n        : undefined,\n      footer: 'Sistema de Alertas',\n      ts: Math.floor(Date.now() / 1000),\n    }\n\n    return this.sendNotification({\n      channel: '#system',\n      message: alertData.message,\n      attachments: [attachment],\n      priority: alertData.severity === 'error' ? 'high' : 'normal',\n    })\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await fetch('/api/notifications/slack/test', {\n        method: 'POST',\n      })\n      return response.ok\n    } catch (error) {\n      console.error('Error testing Slack connection:', error)\n      return false\n    }\n  }\n}\n\n// Instancia singleton para uso global\nexport const slackService = SlackNotificationService.getInstance()\n\n// Funciones de conveniencia\nexport const sendOrderAlert = (\n  orderData: Parameters<SlackNotificationService['sendOrderAlert']>[0]\n) => slackService.sendOrderAlert(orderData)\n\nexport const sendLowStockAlert = (\n  productData: Parameters<SlackNotificationService['sendLowStockAlert']>[0]\n) => slackService.sendLowStockAlert(productData)\n\nexport const sendErrorAlert = (\n  errorData: Parameters<SlackNotificationService['sendErrorAlert']>[0]\n) => slackService.sendErrorAlert(errorData)\n\nexport const sendSalesReport = (\n  reportData: Parameters<SlackNotificationService['sendSalesReport']>[0]\n) => slackService.sendSalesReport(reportData)\n\nexport const sendSystemAlert = (\n  alertData: Parameters<SlackNotificationService['sendSystemAlert']>[0]\n) => slackService.sendSystemAlert(alertData)\n"],"names":["SlackNotificationService","sendErrorAlert","sendLowStockAlert","sendOrderAlert","sendSalesReport","sendSystemAlert","slackService","getInstance","instance","configure","config","webhookUrl","botToken","sendNotification","response","fetch","apiEndpoint","method","headers","body","JSON","stringify","ok","Error","result","json","success","error","console","toast","title","description","variant","orderData","attachment","color","orderId","fields","value","customerName","short","total","toFixed","status","items","map","item","name","quantity","join","footer","ts","Math","floor","Date","now","channel","message","attachments","priority","productData","productName","currentStock","toString","minimumStock","productId","errorData","colorMap","low","medium","high","critical","severity","toUpperCase","context","userId","timestamp","getTime","reportData","period","totalSales","totalOrders","averageOrderValue","topProducts","p","sales","alertData","info","warning","emojiMap","text","details","Object","entries","key","String","undefined","testConnection"],"mappings":"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"}