5976c12ed5ae897f973cdf4c5dd9503c
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PriceDisplay () {
        return PriceDisplay;
    },
    get priceDisplayVariants () {
        return priceDisplayVariants;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const priceDisplayVariants = (0, _classvarianceauthority.cva)('flex flex-col gap-0.5 w-full max-w-full', {
    variants: {
        variant: {
            default: 'text-left',
            center: 'text-center items-center',
            compact: 'flex-col gap-0.5'
        },
        size: {
            sm: 'text-sm',
            md: 'text-base',
            lg: 'text-lg',
            xl: 'text-xl'
        }
    },
    defaultVariants: {
        variant: 'default',
        size: 'md'
    }
});
const priceVariants = (0, _classvarianceauthority.cva)('font-bold leading-tight', {
    variants: {
        size: {
            sm: 'text-lg',
            md: 'text-xl',
            lg: 'text-2xl',
            xl: 'text-3xl'
        }
    },
    defaultVariants: {
        size: 'md'
    }
});
const originalPriceVariants = (0, _classvarianceauthority.cva)('line-through text-muted-foreground font-medium', {
    variants: {
        size: {
            sm: 'text-xs',
            md: 'text-sm',
            lg: 'text-base',
            xl: 'text-lg'
        }
    },
    defaultVariants: {
        size: 'md'
    }
});
/**
 * Formatea un número como precio en pesos argentinos
 */ const formatPrice = (amount, currency = 'ARS', currencySymbol)=>{
    const price = amount / 100;
    if (currencySymbol) {
        return `${currencySymbol}${price.toLocaleString('es-AR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        })}`;
    }
    return price.toLocaleString('es-AR', {
        style: 'currency',
        currency: currency,
        minimumFractionDigits: 2
    });
};
/**
 * Calcula el porcentaje de descuento
 */ const calculateDiscountPercentage = (original, current)=>{
    return Math.round((original - current) / original * 100);
};
const PriceDisplay = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, amount, originalAmount, currency = 'ARS', currencySymbol, installments, showDiscountPercentage = true, installmentsText = 'sin interés', showFreeShipping = false, priceColor, ...props }, ref)=>{
    const hasDiscount = originalAmount && originalAmount > amount;
    const discountPercentage = hasDiscount ? calculateDiscountPercentage(originalAmount, amount) : 0;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        className: (0, _utils.cn)(priceDisplayVariants({
            variant,
            size,
            className
        })),
        ...props,
        children: [
            hasDiscount && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center gap-2",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        className: (0, _utils.cn)(originalPriceVariants({
                            size
                        })),
                        children: formatPrice(originalAmount, currency, currencySymbol)
                    }),
                    showDiscountPercentage && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                        className: "bg-red-500 text-white text-xs font-bold px-2 py-1 rounded",
                        children: [
                            "-",
                            discountPercentage,
                            "%"
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: (0, _utils.cn)(priceVariants({
                    size
                }), priceColor ? `text-[${priceColor}]` : 'text-[#712F00]'),
                children: formatPrice(amount, currency, currencySymbol)
            }),
            installments && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "text-xs text-muted-foreground max-w-full overflow-hidden",
                children: variant === 'compact' ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                    className: "text-fun-green-500 font-medium truncate block text-xs leading-tight",
                    children: [
                        installments.quantity,
                        "x de",
                        ' ',
                        formatPrice(installments.amount, currency, currencySymbol),
                        installments.interestFree && ` ${installmentsText}`
                    ]
                }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            className: "text-fun-green-500 font-medium truncate block text-xs leading-tight",
                            children: [
                                installments.quantity,
                                "x de",
                                ' ',
                                formatPrice(installments.amount, currency, currencySymbol)
                            ]
                        }),
                        installments.interestFree && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "ml-1 text-green-600 truncate block",
                            children: installmentsText
                        })
                    ]
                })
            }),
            showFreeShipping && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex items-center gap-1 text-sm max-w-full mt-1",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                    src: "/images/icons/icon-envio.svg",
                    alt: "Env\xedo gratis",
                    className: "h-6 w-auto"
                })
            })
        ]
    });
});
PriceDisplay.displayName = 'PriceDisplay';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcdWlcXHByaWNlLWRpc3BsYXkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGN2YSwgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tICdjbGFzcy12YXJpYW5jZS1hdXRob3JpdHknXG5pbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJ1xuXG5jb25zdCBwcmljZURpc3BsYXlWYXJpYW50cyA9IGN2YSgnZmxleCBmbGV4LWNvbCBnYXAtMC41IHctZnVsbCBtYXgtdy1mdWxsJywge1xuICB2YXJpYW50czoge1xuICAgIHZhcmlhbnQ6IHtcbiAgICAgIGRlZmF1bHQ6ICd0ZXh0LWxlZnQnLFxuICAgICAgY2VudGVyOiAndGV4dC1jZW50ZXIgaXRlbXMtY2VudGVyJyxcbiAgICAgIGNvbXBhY3Q6ICdmbGV4LWNvbCBnYXAtMC41JyxcbiAgICB9LFxuICAgIHNpemU6IHtcbiAgICAgIHNtOiAndGV4dC1zbScsXG4gICAgICBtZDogJ3RleHQtYmFzZScsXG4gICAgICBsZzogJ3RleHQtbGcnLFxuICAgICAgeGw6ICd0ZXh0LXhsJyxcbiAgICB9LFxuICB9LFxuICBkZWZhdWx0VmFyaWFudHM6IHtcbiAgICB2YXJpYW50OiAnZGVmYXVsdCcsXG4gICAgc2l6ZTogJ21kJyxcbiAgfSxcbn0pXG5cbmNvbnN0IHByaWNlVmFyaWFudHMgPSBjdmEoJ2ZvbnQtYm9sZCBsZWFkaW5nLXRpZ2h0Jywge1xuICB2YXJpYW50czoge1xuICAgIHNpemU6IHtcbiAgICAgIHNtOiAndGV4dC1sZycsXG4gICAgICBtZDogJ3RleHQteGwnLFxuICAgICAgbGc6ICd0ZXh0LTJ4bCcsXG4gICAgICB4bDogJ3RleHQtM3hsJyxcbiAgICB9LFxuICB9LFxuICBkZWZhdWx0VmFyaWFudHM6IHtcbiAgICBzaXplOiAnbWQnLFxuICB9LFxufSlcblxuY29uc3Qgb3JpZ2luYWxQcmljZVZhcmlhbnRzID0gY3ZhKCdsaW5lLXRocm91Z2ggdGV4dC1tdXRlZC1mb3JlZ3JvdW5kIGZvbnQtbWVkaXVtJywge1xuICB2YXJpYW50czoge1xuICAgIHNpemU6IHtcbiAgICAgIHNtOiAndGV4dC14cycsXG4gICAgICBtZDogJ3RleHQtc20nLFxuICAgICAgbGc6ICd0ZXh0LWJhc2UnLFxuICAgICAgeGw6ICd0ZXh0LWxnJyxcbiAgICB9LFxuICB9LFxuICBkZWZhdWx0VmFyaWFudHM6IHtcbiAgICBzaXplOiAnbWQnLFxuICB9LFxufSlcblxuZXhwb3J0IGludGVyZmFjZSBQcmljZURpc3BsYXlQcm9wc1xuICBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PixcbiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIHByaWNlRGlzcGxheVZhcmlhbnRzPiB7XG4gIC8qKiBQcmVjaW8gYWN0dWFsIGVuIGNlbnRhdm9zIChlajogMTU1MCA9ICQxNS41MCkgKi9cbiAgYW1vdW50OiBudW1iZXJcbiAgLyoqIFByZWNpbyBvcmlnaW5hbCBhbnRlcyBkZWwgZGVzY3VlbnRvIGVuIGNlbnRhdm9zICovXG4gIG9yaWdpbmFsQW1vdW50PzogbnVtYmVyXG4gIC8qKiBDw7NkaWdvIGRlIG1vbmVkYSAoZGVmYXVsdDogQVJTKSAqL1xuICBjdXJyZW5jeT86IHN0cmluZ1xuICAvKiogU8OtbWJvbG8gZGUgbW9uZWRhIHBlcnNvbmFsaXphZG8gKi9cbiAgY3VycmVuY3lTeW1ib2w/OiBzdHJpbmdcbiAgLyoqIE1vc3RyYXIgaW5mb3JtYWNpw7NuIGRlIGN1b3RhcyAqL1xuICBpbnN0YWxsbWVudHM/OiB7XG4gICAgcXVhbnRpdHk6IG51bWJlclxuICAgIGFtb3VudDogbnVtYmVyXG4gICAgaW50ZXJlc3RGcmVlPzogYm9vbGVhblxuICB9XG4gIC8qKiBNb3N0cmFyIGRlc2N1ZW50byBjb21vIHBvcmNlbnRhamUgKi9cbiAgc2hvd0Rpc2NvdW50UGVyY2VudGFnZT86IGJvb2xlYW5cbiAgLyoqIFRleHRvIHBlcnNvbmFsaXphZG8gcGFyYSBjdW90YXMgKi9cbiAgaW5zdGFsbG1lbnRzVGV4dD86IHN0cmluZ1xuICAvKiogTW9zdHJhciBlbnbDrW8gZ3JhdGlzICovXG4gIHNob3dGcmVlU2hpcHBpbmc/OiBib29sZWFuXG4gIC8qKiBDb2xvciBkZWwgcHJlY2lvIHByaW5jaXBhbCAqL1xuICBwcmljZUNvbG9yPzogc3RyaW5nXG59XG5cbi8qKlxuICogRm9ybWF0ZWEgdW4gbsO6bWVybyBjb21vIHByZWNpbyBlbiBwZXNvcyBhcmdlbnRpbm9zXG4gKi9cbmNvbnN0IGZvcm1hdFByaWNlID0gKGFtb3VudDogbnVtYmVyLCBjdXJyZW5jeTogc3RyaW5nID0gJ0FSUycsIGN1cnJlbmN5U3ltYm9sPzogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgcHJpY2UgPSBhbW91bnQgLyAxMDBcblxuICBpZiAoY3VycmVuY3lTeW1ib2wpIHtcbiAgICByZXR1cm4gYCR7Y3VycmVuY3lTeW1ib2x9JHtwcmljZS50b0xvY2FsZVN0cmluZygnZXMtQVInLCB7XG4gICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDIsXG4gICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDIsXG4gICAgfSl9YFxuICB9XG5cbiAgcmV0dXJuIHByaWNlLnRvTG9jYWxlU3RyaW5nKCdlcy1BUicsIHtcbiAgICBzdHlsZTogJ2N1cnJlbmN5JyxcbiAgICBjdXJyZW5jeTogY3VycmVuY3ksXG4gICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyLFxuICB9KVxufVxuXG4vKipcbiAqIENhbGN1bGEgZWwgcG9yY2VudGFqZSBkZSBkZXNjdWVudG9cbiAqL1xuY29uc3QgY2FsY3VsYXRlRGlzY291bnRQZXJjZW50YWdlID0gKG9yaWdpbmFsOiBudW1iZXIsIGN1cnJlbnQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBNYXRoLnJvdW5kKCgob3JpZ2luYWwgLSBjdXJyZW50KSAvIG9yaWdpbmFsKSAqIDEwMClcbn1cblxuY29uc3QgUHJpY2VEaXNwbGF5ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgUHJpY2VEaXNwbGF5UHJvcHM+KFxuICAoXG4gICAge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgdmFyaWFudCxcbiAgICAgIHNpemUsXG4gICAgICBhbW91bnQsXG4gICAgICBvcmlnaW5hbEFtb3VudCxcbiAgICAgIGN1cnJlbmN5ID0gJ0FSUycsXG4gICAgICBjdXJyZW5jeVN5bWJvbCxcbiAgICAgIGluc3RhbGxtZW50cyxcbiAgICAgIHNob3dEaXNjb3VudFBlcmNlbnRhZ2UgPSB0cnVlLFxuICAgICAgaW5zdGFsbG1lbnRzVGV4dCA9ICdzaW4gaW50ZXLDqXMnLFxuICAgICAgc2hvd0ZyZWVTaGlwcGluZyA9IGZhbHNlLFxuICAgICAgcHJpY2VDb2xvcixcbiAgICAgIC4uLnByb3BzXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgaGFzRGlzY291bnQgPSBvcmlnaW5hbEFtb3VudCAmJiBvcmlnaW5hbEFtb3VudCA+IGFtb3VudFxuICAgIGNvbnN0IGRpc2NvdW50UGVyY2VudGFnZSA9IGhhc0Rpc2NvdW50ID8gY2FsY3VsYXRlRGlzY291bnRQZXJjZW50YWdlKG9yaWdpbmFsQW1vdW50LCBhbW91bnQpIDogMFxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgcmVmPXtyZWZ9IGNsYXNzTmFtZT17Y24ocHJpY2VEaXNwbGF5VmFyaWFudHMoeyB2YXJpYW50LCBzaXplLCBjbGFzc05hbWUgfSkpfSB7Li4ucHJvcHN9PlxuICAgICAgICB7LyogUHJlY2lvIE9yaWdpbmFsIChzaSBoYXkgZGVzY3VlbnRvKSAqL31cbiAgICAgICAge2hhc0Rpc2NvdW50ICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTInPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbihvcmlnaW5hbFByaWNlVmFyaWFudHMoeyBzaXplIH0pKX0+XG4gICAgICAgICAgICAgIHtmb3JtYXRQcmljZShvcmlnaW5hbEFtb3VudCwgY3VycmVuY3ksIGN1cnJlbmN5U3ltYm9sKX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIHtzaG93RGlzY291bnRQZXJjZW50YWdlICYmIChcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdiZy1yZWQtNTAwIHRleHQtd2hpdGUgdGV4dC14cyBmb250LWJvbGQgcHgtMiBweS0xIHJvdW5kZWQnPlxuICAgICAgICAgICAgICAgIC17ZGlzY291bnRQZXJjZW50YWdlfSVcbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cblxuICAgICAgICB7LyogUHJlY2lvIFByaW5jaXBhbCAqL31cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgICBwcmljZVZhcmlhbnRzKHsgc2l6ZSB9KSxcbiAgICAgICAgICAgIHByaWNlQ29sb3IgPyBgdGV4dC1bJHtwcmljZUNvbG9yfV1gIDogJ3RleHQtWyM3MTJGMDBdJ1xuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICB7Zm9ybWF0UHJpY2UoYW1vdW50LCBjdXJyZW5jeSwgY3VycmVuY3lTeW1ib2wpfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogSW5mb3JtYWNpw7NuIGRlIEN1b3RhcyAqL31cbiAgICAgICAge2luc3RhbGxtZW50cyAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RleHQteHMgdGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG1heC13LWZ1bGwgb3ZlcmZsb3ctaGlkZGVuJz5cbiAgICAgICAgICAgIHt2YXJpYW50ID09PSAnY29tcGFjdCcgPyAoXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ndGV4dC1mdW4tZ3JlZW4tNTAwIGZvbnQtbWVkaXVtIHRydW5jYXRlIGJsb2NrIHRleHQteHMgbGVhZGluZy10aWdodCc+XG4gICAgICAgICAgICAgICAge2luc3RhbGxtZW50cy5xdWFudGl0eX14IGRleycgJ31cbiAgICAgICAgICAgICAgICB7Zm9ybWF0UHJpY2UoaW5zdGFsbG1lbnRzLmFtb3VudCwgY3VycmVuY3ksIGN1cnJlbmN5U3ltYm9sKX1cbiAgICAgICAgICAgICAgICB7aW5zdGFsbG1lbnRzLmludGVyZXN0RnJlZSAmJiBgICR7aW5zdGFsbG1lbnRzVGV4dH1gfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ndGV4dC1mdW4tZ3JlZW4tNTAwIGZvbnQtbWVkaXVtIHRydW5jYXRlIGJsb2NrIHRleHQteHMgbGVhZGluZy10aWdodCc+XG4gICAgICAgICAgICAgICAgICB7aW5zdGFsbG1lbnRzLnF1YW50aXR5fXggZGV7JyAnfVxuICAgICAgICAgICAgICAgICAge2Zvcm1hdFByaWNlKGluc3RhbGxtZW50cy5hbW91bnQsIGN1cnJlbmN5LCBjdXJyZW5jeVN5bWJvbCl9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIHtpbnN0YWxsbWVudHMuaW50ZXJlc3RGcmVlICYmIChcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbWwtMSB0ZXh0LWdyZWVuLTYwMCB0cnVuY2F0ZSBibG9jayc+e2luc3RhbGxtZW50c1RleHR9PC9zcGFuPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cblxuICAgICAgICB7LyogRW52w61vIEdyYXRpcyAqL31cbiAgICAgICAge3Nob3dGcmVlU2hpcHBpbmcgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSB0ZXh0LXNtIG1heC13LWZ1bGwgbXQtMSc+XG4gICAgICAgICAgICA8aW1nIHNyYz0nL2ltYWdlcy9pY29ucy9pY29uLWVudmlvLnN2ZycgYWx0PSdFbnbDrW8gZ3JhdGlzJyBjbGFzc05hbWU9J2gtNiB3LWF1dG8nIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbilcblxuUHJpY2VEaXNwbGF5LmRpc3BsYXlOYW1lID0gJ1ByaWNlRGlzcGxheSdcblxuZXhwb3J0IHsgUHJpY2VEaXNwbGF5LCBwcmljZURpc3BsYXlWYXJpYW50cyB9XG4iXSwibmFtZXMiOlsiUHJpY2VEaXNwbGF5IiwicHJpY2VEaXNwbGF5VmFyaWFudHMiLCJjdmEiLCJ2YXJpYW50cyIsInZhcmlhbnQiLCJkZWZhdWx0IiwiY2VudGVyIiwiY29tcGFjdCIsInNpemUiLCJzbSIsIm1kIiwibGciLCJ4bCIsImRlZmF1bHRWYXJpYW50cyIsInByaWNlVmFyaWFudHMiLCJvcmlnaW5hbFByaWNlVmFyaWFudHMiLCJmb3JtYXRQcmljZSIsImFtb3VudCIsImN1cnJlbmN5IiwiY3VycmVuY3lTeW1ib2wiLCJwcmljZSIsInRvTG9jYWxlU3RyaW5nIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwic3R5bGUiLCJjYWxjdWxhdGVEaXNjb3VudFBlcmNlbnRhZ2UiLCJvcmlnaW5hbCIsImN1cnJlbnQiLCJNYXRoIiwicm91bmQiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJjbGFzc05hbWUiLCJvcmlnaW5hbEFtb3VudCIsImluc3RhbGxtZW50cyIsInNob3dEaXNjb3VudFBlcmNlbnRhZ2UiLCJpbnN0YWxsbWVudHNUZXh0Iiwic2hvd0ZyZWVTaGlwcGluZyIsInByaWNlQ29sb3IiLCJwcm9wcyIsInJlZiIsImhhc0Rpc2NvdW50IiwiZGlzY291bnRQZXJjZW50YWdlIiwiZGl2IiwiY24iLCJzcGFuIiwicXVhbnRpdHkiLCJpbnRlcmVzdEZyZWUiLCJpbWciLCJzcmMiLCJhbHQiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztRQWdNU0E7ZUFBQUE7O1FBQWNDO2VBQUFBOzs7OytEQTlMQTt3Q0FDZ0I7dUJBQ3BCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFbkIsTUFBTUEsdUJBQXVCQyxJQUFBQSwyQkFBRyxFQUFDLDJDQUEyQztJQUMxRUMsVUFBVTtRQUNSQyxTQUFTO1lBQ1BDLFNBQVM7WUFDVEMsUUFBUTtZQUNSQyxTQUFTO1FBQ1g7UUFDQUMsTUFBTTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1FBQ047SUFDRjtJQUNBQyxpQkFBaUI7UUFDZlQsU0FBUztRQUNUSSxNQUFNO0lBQ1I7QUFDRjtBQUVBLE1BQU1NLGdCQUFnQlosSUFBQUEsMkJBQUcsRUFBQywyQkFBMkI7SUFDbkRDLFVBQVU7UUFDUkssTUFBTTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1FBQ047SUFDRjtJQUNBQyxpQkFBaUI7UUFDZkwsTUFBTTtJQUNSO0FBQ0Y7QUFFQSxNQUFNTyx3QkFBd0JiLElBQUFBLDJCQUFHLEVBQUMsa0RBQWtEO0lBQ2xGQyxVQUFVO1FBQ1JLLE1BQU07WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7WUFDSkMsSUFBSTtRQUNOO0lBQ0Y7SUFDQUMsaUJBQWlCO1FBQ2ZMLE1BQU07SUFDUjtBQUNGO0FBNkJBOztDQUVDLEdBQ0QsTUFBTVEsY0FBYyxDQUFDQyxRQUFnQkMsV0FBbUIsS0FBSyxFQUFFQztJQUM3RCxNQUFNQyxRQUFRSCxTQUFTO0lBRXZCLElBQUlFLGdCQUFnQjtRQUNsQixPQUFPLEdBQUdBLGlCQUFpQkMsTUFBTUMsY0FBYyxDQUFDLFNBQVM7WUFDdkRDLHVCQUF1QjtZQUN2QkMsdUJBQXVCO1FBQ3pCLElBQUk7SUFDTjtJQUVBLE9BQU9ILE1BQU1DLGNBQWMsQ0FBQyxTQUFTO1FBQ25DRyxPQUFPO1FBQ1BOLFVBQVVBO1FBQ1ZJLHVCQUF1QjtJQUN6QjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxNQUFNRyw4QkFBOEIsQ0FBQ0MsVUFBa0JDO0lBQ3JELE9BQU9DLEtBQUtDLEtBQUssQ0FBQyxBQUFFSCxDQUFBQSxXQUFXQyxPQUFNLElBQUtELFdBQVk7QUFDeEQ7QUFFQSxNQUFNMUIsNkJBQWU4QixPQUFNQyxVQUFVLENBQ25DLENBQ0UsRUFDRUMsU0FBUyxFQUNUNUIsT0FBTyxFQUNQSSxJQUFJLEVBQ0pTLE1BQU0sRUFDTmdCLGNBQWMsRUFDZGYsV0FBVyxLQUFLLEVBQ2hCQyxjQUFjLEVBQ2RlLFlBQVksRUFDWkMseUJBQXlCLElBQUksRUFDN0JDLG1CQUFtQixhQUFhLEVBQ2hDQyxtQkFBbUIsS0FBSyxFQUN4QkMsVUFBVSxFQUNWLEdBQUdDLE9BQ0osRUFDREM7SUFFQSxNQUFNQyxjQUFjUixrQkFBa0JBLGlCQUFpQmhCO0lBQ3ZELE1BQU15QixxQkFBcUJELGNBQWNoQiw0QkFBNEJRLGdCQUFnQmhCLFVBQVU7SUFFL0YscUJBQ0Usc0JBQUMwQjtRQUFJSCxLQUFLQTtRQUFLUixXQUFXWSxJQUFBQSxTQUFFLEVBQUMzQyxxQkFBcUI7WUFBRUc7WUFBU0k7WUFBTXdCO1FBQVU7UUFBTSxHQUFHTyxLQUFLOztZQUV4RkUsNkJBQ0Msc0JBQUNFO2dCQUFJWCxXQUFVOztrQ0FDYixxQkFBQ2E7d0JBQUtiLFdBQVdZLElBQUFBLFNBQUUsRUFBQzdCLHNCQUFzQjs0QkFBRVA7d0JBQUs7a0NBQzlDUSxZQUFZaUIsZ0JBQWdCZixVQUFVQzs7b0JBRXhDZ0Isd0NBQ0Msc0JBQUNVO3dCQUFLYixXQUFVOzs0QkFBNEQ7NEJBQ3hFVTs0QkFBbUI7Ozs7OzBCQU83QixxQkFBQ0M7Z0JBQ0NYLFdBQVdZLElBQUFBLFNBQUUsRUFDWDlCLGNBQWM7b0JBQUVOO2dCQUFLLElBQ3JCOEIsYUFBYSxDQUFDLE1BQU0sRUFBRUEsV0FBVyxDQUFDLENBQUMsR0FBRzswQkFHdkN0QixZQUFZQyxRQUFRQyxVQUFVQzs7WUFJaENlLDhCQUNDLHFCQUFDUztnQkFBSVgsV0FBVTswQkFDWjVCLFlBQVksMEJBQ1gsc0JBQUN5QztvQkFBS2IsV0FBVTs7d0JBQ2JFLGFBQWFZLFFBQVE7d0JBQUM7d0JBQUs7d0JBQzNCOUIsWUFBWWtCLGFBQWFqQixNQUFNLEVBQUVDLFVBQVVDO3dCQUMzQ2UsYUFBYWEsWUFBWSxJQUFJLENBQUMsQ0FBQyxFQUFFWCxrQkFBa0I7O21DQUd0RDs7c0NBQ0Usc0JBQUNTOzRCQUFLYixXQUFVOztnQ0FDYkUsYUFBYVksUUFBUTtnQ0FBQztnQ0FBSztnQ0FDM0I5QixZQUFZa0IsYUFBYWpCLE1BQU0sRUFBRUMsVUFBVUM7Ozt3QkFFN0NlLGFBQWFhLFlBQVksa0JBQ3hCLHFCQUFDRjs0QkFBS2IsV0FBVTtzQ0FBc0NJOzs7OztZQVEvREMsa0NBQ0MscUJBQUNNO2dCQUFJWCxXQUFVOzBCQUNiLGNBQUEscUJBQUNnQjtvQkFBSUMsS0FBSTtvQkFBK0JDLEtBQUk7b0JBQWVsQixXQUFVOzs7OztBQUsvRTtBQUdGaEMsYUFBYW1ELFdBQVcsR0FBRyJ9