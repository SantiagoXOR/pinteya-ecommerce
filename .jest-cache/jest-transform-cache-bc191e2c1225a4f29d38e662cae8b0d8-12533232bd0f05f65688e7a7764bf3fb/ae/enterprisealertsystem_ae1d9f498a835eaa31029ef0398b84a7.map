{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-alert-system.ts"],"sourcesContent":["/**\n * Sistema Enterprise de Alertas y Notificaciones\n * Monitorea todos los sistemas y envía alertas automáticas\n */\n\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system'\nimport { metricsCollector } from '@/lib/rate-limiting/enterprise-rate-limiter'\nimport { enterpriseCacheSystem } from '@/lib/optimization/enterprise-cache-system'\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils'\n\n// =====================================================\n// TIPOS E INTERFACES\n// =====================================================\n\nexport type AlertSeverity = 'low' | 'medium' | 'high' | 'critical'\nexport type AlertStatus = 'active' | 'acknowledged' | 'resolved' | 'suppressed'\nexport type AlertCategory = 'security' | 'performance' | 'availability' | 'capacity' | 'error'\n\nexport interface AlertRule {\n  id: string\n  name: string\n  description: string\n  category: AlertCategory\n  severity: AlertSeverity\n  enabled: boolean\n\n  // Condiciones de activación\n  conditions: AlertCondition[]\n\n  // Configuración de notificación\n  notificationChannels: NotificationChannel[]\n  cooldownMinutes: number\n\n  // Configuración de escalamiento\n  escalationRules?: EscalationRule[]\n\n  // Metadatos\n  createdAt: string\n  updatedAt: string\n  createdBy: string\n}\n\nexport interface AlertCondition {\n  metric: string\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte' | 'contains' | 'not_contains'\n  threshold: number | string\n  timeWindow: number // minutos\n  evaluationInterval: number // segundos\n}\n\nexport interface NotificationChannel {\n  type: 'email' | 'slack' | 'webhook' | 'sms' | 'dashboard'\n  config: NotificationConfig\n  enabled: boolean\n}\n\n// Configuraciones específicas para cada tipo de notificación\nexport interface NotificationConfig {\n  // Email config\n  to?: string[]\n  from?: string\n  subject?: string\n\n  // Slack config\n  webhook?: string\n  channel?: string\n  username?: string\n\n  // Webhook config\n  url?: string\n  method?: 'POST' | 'PUT'\n  headers?: Record<string, string>\n\n  // SMS config\n  phoneNumbers?: string[]\n  provider?: string\n\n  // Dashboard config\n  displayDuration?: number\n  priority?: number\n}\n\nexport interface EscalationRule {\n  afterMinutes: number\n  severity: AlertSeverity\n  additionalChannels: NotificationChannel[]\n}\n\nexport interface Alert {\n  id: string\n  ruleId: string\n  ruleName: string\n  category: AlertCategory\n  severity: AlertSeverity\n  status: AlertStatus\n\n  // Detalles del alert\n  title: string\n  description: string\n  message: string\n\n  // Datos del trigger\n  triggeredAt: string\n  triggeredBy: string\n  triggerValue: number | string\n  threshold: number | string\n\n  // Gestión del alert\n  acknowledgedAt?: string\n  acknowledgedBy?: string\n  resolvedAt?: string\n  resolvedBy?: string\n\n  // Metadatos\n  metadata: AlertMetadata\n  tags: string[]\n}\n\n// Metadatos específicos para alertas\nexport interface AlertMetadata {\n  // Información del contexto\n  source?: string\n  environment?: 'development' | 'staging' | 'production'\n  version?: string\n\n  // Información técnica\n  errorCode?: string\n  stackTrace?: string\n  requestId?: string\n  userId?: string\n\n  // Métricas relacionadas\n  threshold?: number\n  actualValue?: number\n  previousValue?: number\n\n  // Información de recuperación\n  recoveryActions?: string[]\n  relatedAlerts?: string[]\n\n  // Información adicional\n  customFields?: Record<string, string | number | boolean>\n}\n\nexport interface AlertMetrics {\n  totalAlerts: number\n  activeAlerts: number\n  alertsByCategory: Record<AlertCategory, number>\n  alertsBySeverity: Record<AlertSeverity, number>\n  averageResolutionTime: number\n  falsePositiveRate: number\n}\n\n// =====================================================\n// REGLAS DE ALERTA PREDEFINIDAS\n// =====================================================\n\nexport const ENTERPRISE_ALERT_RULES: AlertRule[] = [\n  // Alertas de seguridad\n  {\n    id: 'security_high_blocked_requests',\n    name: 'Alto número de requests bloqueados',\n    description: 'Se detectó un número inusualmente alto de requests bloqueados por rate limiting',\n    category: 'security',\n    severity: 'high',\n    enabled: true,\n    conditions: [\n      {\n        metric: 'rate_limiting.blocked_requests_per_minute',\n        operator: 'gt',\n        threshold: 100,\n        timeWindow: 5,\n        evaluationInterval: 60,\n      },\n    ],\n    notificationChannels: [\n      {\n        type: 'email',\n        config: { recipients: ['security@pinteya.com'] },\n        enabled: true,\n      },\n      {\n        type: 'dashboard',\n        config: {},\n        enabled: true,\n      },\n    ],\n    cooldownMinutes: 15,\n    escalationRules: [\n      {\n        afterMinutes: 30,\n        severity: 'critical',\n        additionalChannels: [\n          {\n            type: 'sms',\n            config: { phone: '+5491123456789' },\n            enabled: true,\n          },\n        ],\n      },\n    ],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    createdBy: 'system',\n  },\n\n  {\n    id: 'security_critical_events',\n    name: 'Eventos críticos de seguridad',\n    description: 'Se detectaron eventos críticos en el sistema de auditoría',\n    category: 'security',\n    severity: 'critical',\n    enabled: true,\n    conditions: [\n      {\n        metric: 'audit.critical_events_per_hour',\n        operator: 'gt',\n        threshold: 5,\n        timeWindow: 60,\n        evaluationInterval: 300,\n      },\n    ],\n    notificationChannels: [\n      {\n        type: 'email',\n        config: { recipients: ['security@pinteya.com', 'admin@pinteya.com'] },\n        enabled: true,\n      },\n      {\n        type: 'sms',\n        config: { phone: '+5491123456789' },\n        enabled: true,\n      },\n    ],\n    cooldownMinutes: 5,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    createdBy: 'system',\n  },\n\n  // Alertas de performance\n  {\n    id: 'performance_high_response_time',\n    name: 'Tiempo de respuesta alto',\n    description: 'El tiempo de respuesta P95 está por encima del umbral aceptable',\n    category: 'performance',\n    severity: 'medium',\n    enabled: true,\n    conditions: [\n      {\n        metric: 'api.response_time_p95',\n        operator: 'gt',\n        threshold: 1000, // 1 segundo\n        timeWindow: 10,\n        evaluationInterval: 120,\n      },\n    ],\n    notificationChannels: [\n      {\n        type: 'email',\n        config: { recipients: ['devops@pinteya.com'] },\n        enabled: true,\n      },\n    ],\n    cooldownMinutes: 30,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    createdBy: 'system',\n  },\n\n  {\n    id: 'performance_low_cache_hit_rate',\n    name: 'Baja tasa de hit de cache',\n    description: 'La tasa de hit del cache está por debajo del umbral óptimo',\n    category: 'performance',\n    severity: 'medium',\n    enabled: true,\n    conditions: [\n      {\n        metric: 'cache.hit_rate',\n        operator: 'lt',\n        threshold: 0.8, // 80%\n        timeWindow: 15,\n        evaluationInterval: 300,\n      },\n    ],\n    notificationChannels: [\n      {\n        type: 'email',\n        config: { recipients: ['devops@pinteya.com'] },\n        enabled: true,\n      },\n    ],\n    cooldownMinutes: 60,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    createdBy: 'system',\n  },\n\n  // Alertas de capacidad\n  {\n    id: 'capacity_high_memory_usage',\n    name: 'Alto uso de memoria',\n    description: 'El uso de memoria del sistema está por encima del 85%',\n    category: 'capacity',\n    severity: 'high',\n    enabled: true,\n    conditions: [\n      {\n        metric: 'system.memory_usage_percent',\n        operator: 'gt',\n        threshold: 85,\n        timeWindow: 5,\n        evaluationInterval: 60,\n      },\n    ],\n    notificationChannels: [\n      {\n        type: 'email',\n        config: { recipients: ['devops@pinteya.com'] },\n        enabled: true,\n      },\n    ],\n    cooldownMinutes: 15,\n    escalationRules: [\n      {\n        afterMinutes: 15,\n        severity: 'critical',\n        additionalChannels: [\n          {\n            type: 'sms',\n            config: { phone: '+5491123456789' },\n            enabled: true,\n          },\n        ],\n      },\n    ],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    createdBy: 'system',\n  },\n\n  // Alertas de errores\n  {\n    id: 'error_high_5xx_rate',\n    name: 'Alta tasa de errores 5xx',\n    description: 'La tasa de errores 5xx está por encima del umbral aceptable',\n    category: 'error',\n    severity: 'high',\n    enabled: true,\n    conditions: [\n      {\n        metric: 'api.error_rate_5xx',\n        operator: 'gt',\n        threshold: 0.05, // 5%\n        timeWindow: 10,\n        evaluationInterval: 120,\n      },\n    ],\n    notificationChannels: [\n      {\n        type: 'email',\n        config: { recipients: ['devops@pinteya.com', 'backend@pinteya.com'] },\n        enabled: true,\n      },\n    ],\n    cooldownMinutes: 10,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    createdBy: 'system',\n  },\n]\n\n// =====================================================\n// SISTEMA ENTERPRISE DE ALERTAS\n// =====================================================\n\nexport class EnterpriseAlertSystem {\n  private static instance: EnterpriseAlertSystem\n  private alerts: Map<string, Alert> = new Map()\n  private alertRules: Map<string, AlertRule> = new Map()\n  private evaluationTimers: Map<string, NodeJS.Timeout> = new Map()\n  private isInitialized = false\n\n  private constructor() {}\n\n  public static getInstance(): EnterpriseAlertSystem {\n    if (!EnterpriseAlertSystem.instance) {\n      EnterpriseAlertSystem.instance = new EnterpriseAlertSystem()\n    }\n    return EnterpriseAlertSystem.instance\n  }\n\n  /**\n   * Inicializa el sistema de alertas\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return\n    }\n\n    try {\n      // Cargar reglas predefinidas\n      ENTERPRISE_ALERT_RULES.forEach(rule => {\n        this.alertRules.set(rule.id, rule)\n      })\n\n      // Iniciar evaluación de reglas\n      this.startRuleEvaluation()\n\n      // Iniciar limpieza automática\n      this.startCleanupScheduler()\n\n      this.isInitialized = true\n      console.log('[ENTERPRISE_ALERTS] Sistema inicializado con', this.alertRules.size, 'reglas')\n    } catch (error) {\n      console.error('[ENTERPRISE_ALERTS] Error inicializando sistema:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Evalúa todas las reglas de alerta activas\n   */\n  async evaluateRules(): Promise<void> {\n    for (const [ruleId, rule] of this.alertRules.entries()) {\n      if (!rule.enabled) {\n        continue\n      }\n\n      try {\n        await this.evaluateRule(rule)\n      } catch (error) {\n        console.error(`[ENTERPRISE_ALERTS] Error evaluating rule ${ruleId}:`, error)\n      }\n    }\n  }\n\n  /**\n   * Evalúa una regla específica\n   */\n  private async evaluateRule(rule: AlertRule): Promise<void> {\n    for (const condition of rule.conditions) {\n      const metricValue = await this.getMetricValue(condition.metric)\n\n      if (this.evaluateCondition(condition, metricValue)) {\n        // Verificar si ya existe un alert activo para esta regla\n        const existingAlert = Array.from(this.alerts.values()).find(\n          alert => alert.ruleId === rule.id && alert.status === 'active'\n        )\n\n        if (!existingAlert) {\n          await this.triggerAlert(rule, condition, metricValue)\n        }\n      }\n    }\n  }\n\n  /**\n   * Evalúa una condición específica\n   */\n  private evaluateCondition(condition: AlertCondition, value: number | string): boolean {\n    const { operator, threshold } = condition\n\n    switch (operator) {\n      case 'gt':\n        return Number(value) > Number(threshold)\n      case 'lt':\n        return Number(value) < Number(threshold)\n      case 'gte':\n        return Number(value) >= Number(threshold)\n      case 'lte':\n        return Number(value) <= Number(threshold)\n      case 'eq':\n        return value === threshold\n      case 'contains':\n        return String(value).includes(String(threshold))\n      case 'not_contains':\n        return !String(value).includes(String(threshold))\n      default:\n        return false\n    }\n  }\n\n  /**\n   * Obtiene el valor de una métrica\n   */\n  private async getMetricValue(metric: string): Promise<number | string> {\n    try {\n      const [system, metricName] = metric.split('.')\n\n      switch (system) {\n        case 'rate_limiting':\n          const rateLimitMetrics = metricsCollector.getMetrics()\n          switch (metricName) {\n            case 'blocked_requests_per_minute':\n              return rateLimitMetrics.blockedRequests || 0\n            case 'average_response_time':\n              return rateLimitMetrics.averageResponseTime || 0\n            case 'error_rate':\n              const total = rateLimitMetrics.totalRequests || 1\n              return (rateLimitMetrics.errors || 0) / total\n            default:\n              return 0\n          }\n\n        case 'cache':\n          const cacheMetrics = enterpriseCacheSystem.getMetrics()\n          const cacheKeys = Object.keys(cacheMetrics)\n\n          switch (metricName) {\n            case 'hit_rate':\n              if (cacheKeys.length === 0) {\n                return 0\n              }\n              const totalHits = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits, 0)\n              const totalMisses = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].misses, 0)\n              const totalRequests = totalHits + totalMisses\n              return totalRequests > 0 ? totalHits / totalRequests : 0\n            case 'average_response_time':\n              if (cacheKeys.length === 0) {\n                return 0\n              }\n              return (\n                cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].avgResponseTime, 0) /\n                cacheKeys.length\n              )\n            default:\n              return 0\n          }\n\n        case 'system':\n          switch (metricName) {\n            case 'memory_usage_percent':\n              const memoryUsage = process.memoryUsage()\n              return (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100\n            case 'cpu_usage_percent':\n              // Simulado - en producción usar librerías como 'os-utils'\n              return Math.random() * 40 + 30\n            default:\n              return 0\n          }\n\n        case 'api':\n          // Métricas de API simuladas - en producción vendrían del sistema de métricas\n          switch (metricName) {\n            case 'response_time_p95':\n              return Math.random() * 500 + 200\n            case 'error_rate_5xx':\n              return Math.random() * 0.02\n            default:\n              return 0\n          }\n\n        case 'audit':\n          switch (metricName) {\n            case 'critical_events_per_hour':\n              // Simulado - en producción vendría del sistema de auditoría\n              return Math.floor(Math.random() * 3)\n            default:\n              return 0\n          }\n\n        default:\n          return 0\n      }\n    } catch (error) {\n      console.error(`[ENTERPRISE_ALERTS] Error getting metric ${metric}:`, error)\n      return 0\n    }\n  }\n\n  /**\n   * Dispara una nueva alerta\n   */\n  private async triggerAlert(\n    rule: AlertRule,\n    condition: AlertCondition,\n    triggerValue: number | string\n  ): Promise<void> {\n    const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    const alert: Alert = {\n      id: alertId,\n      ruleId: rule.id,\n      ruleName: rule.name,\n      category: rule.category,\n      severity: rule.severity,\n      status: 'active',\n      title: rule.name,\n      description: rule.description,\n      message: `${rule.name}: ${condition.metric} is ${triggerValue} (threshold: ${condition.threshold})`,\n      triggeredAt: new Date().toISOString(),\n      triggeredBy: 'system',\n      triggerValue,\n      threshold: condition.threshold,\n      metadata: {\n        metric: condition.metric,\n        operator: condition.operator,\n        timeWindow: condition.timeWindow,\n        evaluationInterval: condition.evaluationInterval,\n      },\n      tags: [rule.category, rule.severity, 'auto-generated'],\n    }\n\n    // Guardar alerta\n    this.alerts.set(alertId, alert)\n\n    // Enviar notificaciones\n    await this.sendNotifications(alert, rule.notificationChannels)\n\n    // Registrar en auditoría\n    await this.logAlertEvent(alert, 'TRIGGERED')\n\n    // Programar escalamiento si está configurado\n    if (rule.escalationRules && rule.escalationRules.length > 0) {\n      this.scheduleEscalation(alert, rule.escalationRules)\n    }\n\n    console.log(`[ENTERPRISE_ALERTS] Alert triggered: ${alert.title}`)\n  }\n\n  /**\n   * Envía notificaciones para una alerta\n   */\n  private async sendNotifications(alert: Alert, channels: NotificationChannel[]): Promise<void> {\n    for (const channel of channels) {\n      if (!channel.enabled) {\n        continue\n      }\n\n      try {\n        switch (channel.type) {\n          case 'email':\n            await this.sendEmailNotification(alert, channel.config)\n            break\n          case 'slack':\n            await this.sendSlackNotification(alert, channel.config)\n            break\n          case 'webhook':\n            await this.sendWebhookNotification(alert, channel.config)\n            break\n          case 'sms':\n            await this.sendSMSNotification(alert, channel.config)\n            break\n          case 'dashboard':\n            // Las alertas del dashboard se muestran automáticamente\n            break\n          default:\n            console.warn(`[ENTERPRISE_ALERTS] Unknown notification channel: ${channel.type}`)\n        }\n      } catch (error) {\n        console.error(`[ENTERPRISE_ALERTS] Error sending ${channel.type} notification:`, error)\n      }\n    }\n  }\n\n  /**\n   * Envía notificación por email\n   */\n  private async sendEmailNotification(alert: Alert, config: NotificationConfig): Promise<void> {\n    // Implementación de email - en producción usar servicios como SendGrid, SES, etc.\n    console.log(\n      `[ENTERPRISE_ALERTS] Email notification sent to ${config.to?.join(', ')}:`,\n      alert.title\n    )\n  }\n\n  /**\n   * Envía notificación por Slack\n   */\n  private async sendSlackNotification(alert: Alert, config: NotificationConfig): Promise<void> {\n    // Implementación de Slack webhook\n    console.log(`[ENTERPRISE_ALERTS] Slack notification sent to ${config.channel}:`, alert.title)\n  }\n\n  /**\n   * Envía notificación por webhook\n   */\n  private async sendWebhookNotification(alert: Alert, config: NotificationConfig): Promise<void> {\n    // Implementación de webhook HTTP\n    console.log(`[ENTERPRISE_ALERTS] Webhook notification sent to ${config.url}:`, alert.title)\n  }\n\n  /**\n   * Envía notificación por SMS\n   */\n  private async sendSMSNotification(alert: Alert, config: NotificationConfig): Promise<void> {\n    // Implementación de SMS - en producción usar servicios como Twilio, AWS SNS, etc.\n    console.log(\n      `[ENTERPRISE_ALERTS] SMS notification sent to ${config.phoneNumbers?.join(', ')}:`,\n      alert.title\n    )\n  }\n\n  /**\n   * Programa escalamiento de alerta\n   */\n  private scheduleEscalation(alert: Alert, escalationRules: EscalationRule[]): void {\n    escalationRules.forEach(rule => {\n      setTimeout(\n        async () => {\n          const currentAlert = this.alerts.get(alert.id)\n          if (currentAlert && currentAlert.status === 'active') {\n            // Escalar severidad\n            currentAlert.severity = rule.severity\n\n            // Enviar notificaciones adicionales\n            await this.sendNotifications(currentAlert, rule.additionalChannels)\n\n            // Registrar escalamiento\n            await this.logAlertEvent(currentAlert, 'ESCALATED')\n\n            console.log(`[ENTERPRISE_ALERTS] Alert escalated: ${alert.title} -> ${rule.severity}`)\n          }\n        },\n        rule.afterMinutes * 60 * 1000\n      )\n    })\n  }\n\n  /**\n   * Registra eventos de alerta en auditoría\n   */\n  private async logAlertEvent(alert: Alert, action: string): Promise<void> {\n    try {\n      await enterpriseAuditSystem.logEnterpriseEvent(\n        {\n          user_id: 'system',\n          event_type: 'ALERT_EVENT' as 'ALERT_EVENT',\n          event_category: 'monitoring',\n          severity: alert.severity as 'low' | 'medium' | 'high' | 'critical',\n          description: `Alert ${action}: ${alert.title}`,\n          metadata: {\n            alert_id: alert.id,\n            rule_id: alert.ruleId,\n            action,\n            category: alert.category,\n            severity: alert.severity,\n            trigger_value: alert.triggerValue,\n            threshold: alert.threshold,\n          },\n          ip_address: '127.0.0.1',\n          user_agent: 'EnterpriseAlertSystem/1.0',\n        },\n        {\n          userId: 'system',\n          sessionId: 'alert_system',\n          email: 'system@pinteya.com',\n          role: 'system',\n          permissions: ['system_access'],\n          sessionValid: true,\n          securityLevel: 'critical',\n          ipAddress: '127.0.0.1',\n          userAgent: 'EnterpriseAlertSystem/1.0',\n          supabase: null,\n          validations: {\n            jwtValid: true,\n            csrfValid: true,\n            rateLimitPassed: true,\n            originValid: true,\n          },\n        }\n      )\n    } catch (error) {\n      console.error('[ENTERPRISE_ALERTS] Error logging alert event:', error)\n    }\n  }\n\n  /**\n   * Obtiene todas las alertas activas\n   */\n  getActiveAlerts(): Alert[] {\n    return Array.from(this.alerts.values()).filter(alert => alert.status === 'active')\n  }\n\n  /**\n   * Obtiene métricas de alertas\n   */\n  getAlertMetrics(): AlertMetrics {\n    const allAlerts = Array.from(this.alerts.values())\n    const activeAlerts = allAlerts.filter(alert => alert.status === 'active')\n\n    const alertsByCategory = allAlerts.reduce(\n      (acc, alert) => {\n        acc[alert.category] = (acc[alert.category] || 0) + 1\n        return acc\n      },\n      {} as Record<AlertCategory, number>\n    )\n\n    const alertsBySeverity = allAlerts.reduce(\n      (acc, alert) => {\n        acc[alert.severity] = (acc[alert.severity] || 0) + 1\n        return acc\n      },\n      {} as Record<AlertSeverity, number>\n    )\n\n    // Calcular tiempo promedio de resolución\n    const resolvedAlerts = allAlerts.filter(alert => alert.resolvedAt)\n    const averageResolutionTime =\n      resolvedAlerts.length > 0\n        ? resolvedAlerts.reduce((sum, alert) => {\n            const triggered = new Date(alert.triggeredAt).getTime()\n            const resolved = new Date(alert.resolvedAt!).getTime()\n            return sum + (resolved - triggered)\n          }, 0) /\n          resolvedAlerts.length /\n          1000 /\n          60\n        : 0 // en minutos\n\n    return {\n      totalAlerts: allAlerts.length,\n      activeAlerts: activeAlerts.length,\n      alertsByCategory,\n      alertsBySeverity,\n      averageResolutionTime,\n      falsePositiveRate: 0.05, // Simulado\n    }\n  }\n\n  /**\n   * Reconoce una alerta\n   */\n  async acknowledgeAlert(alertId: string, userId: string): Promise<boolean> {\n    const alert = this.alerts.get(alertId)\n    if (!alert || alert.status !== 'active') {\n      return false\n    }\n\n    alert.status = 'acknowledged'\n    alert.acknowledgedAt = new Date().toISOString()\n    alert.acknowledgedBy = userId\n\n    await this.logAlertEvent(alert, 'ACKNOWLEDGED')\n    return true\n  }\n\n  /**\n   * Resuelve una alerta\n   */\n  async resolveAlert(alertId: string, userId: string): Promise<boolean> {\n    const alert = this.alerts.get(alertId)\n    if (!alert || (alert.status !== 'active' && alert.status !== 'acknowledged')) {\n      return false\n    }\n\n    alert.status = 'resolved'\n    alert.resolvedAt = new Date().toISOString()\n    alert.resolvedBy = userId\n\n    await this.logAlertEvent(alert, 'RESOLVED')\n    return true\n  }\n\n  // =====================================================\n  // MÉTODOS PRIVADOS\n  // =====================================================\n\n  private startRuleEvaluation(): void {\n    // Evaluar reglas cada 60 segundos\n    setInterval(() => {\n      this.evaluateRules().catch(error => {\n        console.error('[ENTERPRISE_ALERTS] Error in rule evaluation:', error)\n      })\n    }, 60 * 1000)\n  }\n\n  private startCleanupScheduler(): void {\n    // Limpiar alertas resueltas antiguas cada hora\n    setInterval(\n      () => {\n        const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000\n\n        for (const [alertId, alert] of this.alerts.entries()) {\n          if (alert.status === 'resolved' && alert.resolvedAt) {\n            const resolvedTime = new Date(alert.resolvedAt).getTime()\n            if (resolvedTime < oneWeekAgo) {\n              this.alerts.delete(alertId)\n            }\n          }\n        }\n      },\n      60 * 60 * 1000\n    ) // 1 hora\n  }\n}\n\n// =====================================================\n// INSTANCIA SINGLETON\n// =====================================================\n\nexport const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance()\n\n/**\n * Funciones de utilidad para alertas\n */\nexport const EnterpriseAlertUtils = {\n  /**\n   * Crea una alerta manual\n   */\n  async createManualAlert(\n    title: string,\n    description: string,\n    severity: AlertSeverity,\n    category: AlertCategory,\n    userId: string\n  ): Promise<string> {\n    const alertId = `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    const alert: Alert = {\n      id: alertId,\n      ruleId: 'manual',\n      ruleName: 'Manual Alert',\n      category,\n      severity,\n      status: 'active',\n      title,\n      description,\n      message: description,\n      triggeredAt: new Date().toISOString(),\n      triggeredBy: userId,\n      triggerValue: 'manual',\n      threshold: 'manual',\n      metadata: {\n        manual: true,\n        created_by: userId,\n      },\n      tags: ['manual', category, severity],\n    }\n\n    enterpriseAlertSystem['alerts'].set(alertId, alert)\n    await enterpriseAlertSystem['logAlertEvent'](alert, 'CREATED')\n\n    return alertId\n  },\n\n  /**\n   * Obtiene alertas por categoría\n   */\n  getAlertsByCategory(category: AlertCategory): Alert[] {\n    return Array.from(enterpriseAlertSystem['alerts'].values()).filter(\n      alert => alert.category === category\n    )\n  },\n\n  /**\n   * Obtiene alertas por severidad\n   */\n  getAlertsBySeverity(severity: AlertSeverity): Alert[] {\n    return Array.from(enterpriseAlertSystem['alerts'].values()).filter(\n      alert => alert.severity === severity\n    )\n  },\n}\n"],"names":["ENTERPRISE_ALERT_RULES","EnterpriseAlertSystem","EnterpriseAlertUtils","enterpriseAlertSystem","id","name","description","category","severity","enabled","conditions","metric","operator","threshold","timeWindow","evaluationInterval","notificationChannels","type","config","recipients","cooldownMinutes","escalationRules","afterMinutes","additionalChannels","phone","createdAt","Date","toISOString","updatedAt","createdBy","alerts","Map","alertRules","evaluationTimers","isInitialized","getInstance","instance","initialize","forEach","rule","set","startRuleEvaluation","startCleanupScheduler","console","log","size","error","evaluateRules","ruleId","entries","evaluateRule","condition","metricValue","getMetricValue","evaluateCondition","existingAlert","Array","from","values","find","alert","status","triggerAlert","value","Number","String","includes","system","metricName","split","rateLimitMetrics","metricsCollector","getMetrics","blockedRequests","averageResponseTime","total","totalRequests","errors","cacheMetrics","enterpriseCacheSystem","cacheKeys","Object","keys","length","totalHits","reduce","sum","key","hits","totalMisses","misses","avgResponseTime","memoryUsage","process","heapUsed","heapTotal","Math","random","floor","triggerValue","alertId","now","toString","substr","ruleName","title","message","triggeredAt","triggeredBy","metadata","tags","sendNotifications","logAlertEvent","scheduleEscalation","channels","channel","sendEmailNotification","sendSlackNotification","sendWebhookNotification","sendSMSNotification","warn","to","join","url","phoneNumbers","setTimeout","currentAlert","get","action","enterpriseAuditSystem","logEnterpriseEvent","user_id","event_type","event_category","alert_id","rule_id","trigger_value","ip_address","user_agent","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","getActiveAlerts","filter","getAlertMetrics","allAlerts","activeAlerts","alertsByCategory","acc","alertsBySeverity","resolvedAlerts","resolvedAt","averageResolutionTime","triggered","getTime","resolved","totalAlerts","falsePositiveRate","acknowledgeAlert","acknowledgedAt","acknowledgedBy","resolveAlert","resolvedBy","setInterval","catch","oneWeekAgo","resolvedTime","delete","createManualAlert","manual","created_by","getAlertsByCategory","getAlertsBySeverity"],"mappings":"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"}