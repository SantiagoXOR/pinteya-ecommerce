24b8e5795f4be5f887787c9fb6c119d0
// ===================================
// PINTEYA E-COMMERCE - USEORDERSAPI TESTS
// Tests completos para el hook de API de órdenes
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useOrdersApi = require("../../../hooks/admin/useOrdersApi");
// ===================================
// MOCKS Y SETUP
// ===================================
// Mock de fetch global
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
// Mock de AbortController
const mockAbort = _globals.jest.fn();
const mockAbortController = {
    abort: mockAbort,
    signal: {
        aborted: false
    }
};
global.AbortController = _globals.jest.fn(()=>mockAbortController);
// Datos de prueba
const mockOrdersResponse = {
    orders: [
        {
            id: '1',
            order_number: 'ORD-001',
            status: 'pending',
            total: 100
        },
        {
            id: '2',
            order_number: 'ORD-002',
            status: 'confirmed',
            total: 200
        }
    ],
    pagination: {
        page: 1,
        totalPages: 5,
        hasNextPage: true
    },
    analytics: {
        totalOrders: 2,
        totalRevenue: 300
    }
};
const mockFilters = {
    page: 1,
    limit: 20,
    status: 'pending',
    search: 'test'
};
const mockOptions = {
    timeout: 10000,
    maxRetries: 3
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockAbort.mockClear();
    mockAbortController.signal.aborted = false;
    // Mock de respuesta exitosa por defecto
    mockFetch.mockResolvedValue({
        ok: true,
        status: 200,
        json: _globals.jest.fn().mockResolvedValue(mockOrdersResponse),
        headers: new Headers(),
        statusText: 'OK'
    });
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS PRINCIPALES
// ===================================
(0, _globals.describe)('useOrdersApi', ()=>{
    (0, _globals.it)('debe inicializarse correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        (0, _globals.expect)(result.current.fetchOrdersInternal).toBeDefined();
        (0, _globals.expect)(result.current.abortCurrentRequest).toBeDefined();
        (0, _globals.expect)(result.current.isRequestInProgress).toBeDefined();
        (0, _globals.expect)(typeof result.current.fetchOrdersInternal).toBe('function');
        (0, _globals.expect)(typeof result.current.abortCurrentRequest).toBe('function');
        (0, _globals.expect)(typeof result.current.isRequestInProgress).toBe('function');
    });
    (0, _globals.it)('debe realizar fetch exitoso de órdenes', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        let response;
        await (0, _react.act)(async ()=>{
            response = await result.current.fetchOrdersInternal(mockFilters);
        });
        (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/admin/orders?page=1&limit=20&status=pending&search=test', _globals.expect.objectContaining({
            method: 'GET',
            headers: _globals.expect.objectContaining({
                'Content-Type': 'application/json'
            }),
            signal: _globals.expect.any(Object)
        }));
        (0, _globals.expect)(response).toEqual(mockOrdersResponse);
    });
    (0, _globals.it)('debe construir URL correctamente con diferentes filtros', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        const filtersWithNulls = {
            page: 2,
            limit: 10,
            status: undefined,
            search: null,
            sort_by: 'created_at',
            sort_order: 'desc'
        };
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrdersInternal(filtersWithNulls);
        });
        (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/admin/orders?page=2&limit=10&sort_by=created_at&sort_order=desc', _globals.expect.any(Object));
    });
    (0, _globals.it)('debe manejar errores de red correctamente', async ()=>{
        mockFetch.mockRejectedValue(new Error('Network error'));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        await (0, _react.act)(async ()=>{
            await (0, _globals.expect)(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow('Network error');
        });
    });
    (0, _globals.it)('debe manejar respuestas HTTP de error', async ()=>{
        mockFetch.mockResolvedValue({
            ok: false,
            status: 500,
            statusText: 'Internal Server Error',
            json: _globals.jest.fn().mockResolvedValue({
                error: 'Server error'
            })
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        await (0, _react.act)(async ()=>{
            await (0, _globals.expect)(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow('HTTP error! status: 500');
        });
    });
    (0, _globals.it)('debe implementar retry logic correctamente', async ()=>{
        // Fallar las primeras 2 llamadas, exitosa en la 3ra
        mockFetch.mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
            ok: true,
            status: 200,
            json: _globals.jest.fn().mockResolvedValue(mockOrdersResponse)
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        let response;
        await (0, _react.act)(async ()=>{
            response = await result.current.fetchOrdersInternal(mockFilters);
        });
        (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(3);
        (0, _globals.expect)(response).toEqual(mockOrdersResponse);
    });
    (0, _globals.it)('debe fallar después de agotar todos los reintentos', async ()=>{
        mockFetch.mockRejectedValue(new Error('Persistent network error'));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        await (0, _react.act)(async ()=>{
            await (0, _globals.expect)(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow('Persistent network error');
        });
        (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(4); // 1 intento inicial + 3 reintentos
    });
    (0, _globals.it)('debe implementar timeout correctamente', async ()=>{
        _globals.jest.useFakeTimers();
        // Mock de fetch que nunca se resuelve
        mockFetch.mockImplementation(()=>new Promise(()=>{}));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)({
                ...mockOptions,
                timeout: 5000
            }));
        const fetchPromise = (0, _react.act)(async ()=>{
            return result.current.fetchOrdersInternal(mockFilters);
        });
        // Avanzar el tiempo más allá del timeout
        (0, _react.act)(()=>{
            _globals.jest.advanceTimersByTime(6000);
        });
        await (0, _globals.expect)(fetchPromise).rejects.toThrow();
        _globals.jest.useRealTimers();
    });
    (0, _globals.it)('debe abortar requests correctamente', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        // Iniciar un request
        const fetchPromise = (0, _react.act)(async ()=>{
            return result.current.fetchOrdersInternal(mockFilters);
        });
        // Abortar el request
        (0, _react.act)(()=>{
            result.current.abortCurrentRequest();
        });
        (0, _globals.expect)(mockAbort).toHaveBeenCalled();
    });
    (0, _globals.it)('debe detectar requests en progreso', async ()=>{
        _globals.jest.useFakeTimers();
        // Mock de fetch que tarda en resolverse
        mockFetch.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        ok: true,
                        status: 200,
                        json: _globals.jest.fn().mockResolvedValue(mockOrdersResponse)
                    }), 1000)));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        // Iniciar request
        const fetchPromise = (0, _react.act)(async ()=>{
            return result.current.fetchOrdersInternal(mockFilters);
        });
        // Verificar que está en progreso
        (0, _globals.expect)(result.current.isRequestInProgress()).toBe(true);
        // Completar el request
        (0, _react.act)(()=>{
            _globals.jest.advanceTimersByTime(1000);
        });
        await fetchPromise;
        // Verificar que ya no está en progreso
        (0, _globals.expect)(result.current.isRequestInProgress()).toBe(false);
        _globals.jest.useRealTimers();
    });
    (0, _globals.it)('debe validar respuesta JSON correctamente', async ()=>{
        mockFetch.mockResolvedValue({
            ok: true,
            status: 200,
            json: _globals.jest.fn().mockResolvedValue({
                invalid: 'response'
            })
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        await (0, _react.act)(async ()=>{
            await (0, _globals.expect)(result.current.fetchOrdersInternal(mockFilters)).rejects.toThrow('Invalid response format');
        });
    });
    (0, _globals.it)('debe manejar respuestas vacías correctamente', async ()=>{
        mockFetch.mockResolvedValue({
            ok: true,
            status: 200,
            json: _globals.jest.fn().mockResolvedValue({
                orders: [],
                pagination: {
                    page: 1,
                    totalPages: 0,
                    hasNextPage: false
                },
                analytics: {
                    totalOrders: 0,
                    totalRevenue: 0
                }
            })
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        let response;
        await (0, _react.act)(async ()=>{
            response = await result.current.fetchOrdersInternal(mockFilters);
        });
        (0, _globals.expect)(response.orders).toEqual([]);
        (0, _globals.expect)(response.analytics.totalOrders).toBe(0);
    });
    (0, _globals.it)('debe usar headers de autenticación cuando están disponibles', async ()=>{
        // Mock de session con token
        const mockSession = {
            accessToken: 'test-token'
        };
        _globals.jest.doMock('next-auth/react', ()=>({
                useSession: ()=>({
                        data: mockSession
                    })
            }));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrdersInternal(mockFilters);
        });
        (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
            headers: _globals.expect.objectContaining({
                'Content-Type': 'application/json'
            })
        }));
    });
    (0, _globals.it)('debe limpiar recursos al desmontar', ()=>{
        const { result, unmount } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        // Iniciar un request
        (0, _react.act)(()=>{
            result.current.fetchOrdersInternal(mockFilters);
        });
        // Desmontar el hook
        unmount();
        // Debe haber abortado el request
        (0, _globals.expect)(mockAbort).toHaveBeenCalled();
    });
    (0, _globals.it)('debe manejar múltiples requests concurrentes', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersApi.useOrdersApi)(mockOptions));
        // Iniciar múltiples requests
        const promises = [
            result.current.fetchOrdersInternal(mockFilters),
            result.current.fetchOrdersInternal({
                ...mockFilters,
                page: 2
            }),
            result.current.fetchOrdersInternal({
                ...mockFilters,
                page: 3
            })
        ];
        await (0, _react.act)(async ()=>{
            await Promise.all(promises);
        });
        (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(3);
    });
});

//# sourceMappingURL=data:application/json;base64,