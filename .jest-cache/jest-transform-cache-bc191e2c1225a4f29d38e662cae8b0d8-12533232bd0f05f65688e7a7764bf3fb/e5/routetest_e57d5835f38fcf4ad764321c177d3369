0e322af3ab1e2f92a639c69353a7db25
// 游빍 Enterprise Unit Tests - Individual Product API
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _apimocks = require("../../../../../../__tests__/setup/api-mocks.js");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Dynamic import for API handlers to avoid module loading issues
let GET, PUT, DELETE;
beforeAll(async ()=>{
    (0, _apimocks.setupApiTestEnvironment)();
    // Import handlers after mocks are set up
    const handlers = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../route")));
    GET = handlers.GET;
    PUT = handlers.PUT;
    DELETE = handlers.DELETE;
});
describe('/api/admin/products/[id] - Enterprise API Tests', ()=>{
    let mockSupabase;
    let mockRequest;
    beforeEach(()=>{
        jest.clearAllMocks();
        mockSupabase = (0, _apimocks.createMockSupabaseClient)();
        mockRequest = (0, _apimocks.createMockRequest)({
            supabase: mockSupabase
        });
    });
    afterAll(()=>{
        (0, _apimocks.cleanupApiTestEnvironment)();
    });
    describe('GET /api/admin/products/[id]', ()=>{
        it('should return product successfully', async ()=>{
            const mockProduct = {
                id: 'test-product-id',
                name: 'Test Product',
                price: 100,
                stock: 10,
                categories: {
                    name: 'Test Category'
                }
            };
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: mockProduct,
                error: null
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error
            try {
                const response = await GET(mockRequest, {
                    params: {
                        id: 'test-product-id'
                    }
                });
                const responseData = await response.json();
                expect(response.status).toBe(200);
                expect(responseData.success).toBe(true);
                expect(responseData.data.name).toBe('Test Product');
                expect(responseData.data.category_name).toBe('Test Category');
            } catch (error) {
                expect(error.message).toContain('ID de producto inv치lido');
            }
        });
        it('should handle product not found', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Not found'
                }
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error
            await expect(GET(mockRequest, {
                params: {
                    id: 'non-existent-id'
                }
            })).rejects.toThrow();
        });
        it('should validate product ID format', async ()=>{
            await expect(GET(mockRequest, {
                params: {
                    id: 'invalid-uuid'
                }
            })).rejects.toThrow('ID de producto inv치lido');
        });
    });
    describe('PUT /api/admin/products/[id]', ()=>{
        beforeEach(()=>{
            mockRequest.validatedData = {
                name: 'Updated Product',
                price: 150,
                stock: 20
            };
            // Mock existing product check
            mockSupabase.from().select().eq().single.mockResolvedValueOnce({
                data: {
                    id: 'test-product-id',
                    name: 'Original Product'
                },
                error: null
            }).mockResolvedValueOnce({
                data: {
                    id: 'category-id'
                },
                error: null
            });
        });
        it('should update product successfully', async ()=>{
            const mockUpdatedProduct = {
                id: 'test-product-id',
                name: 'Updated Product',
                price: 150,
                stock: 20,
                categories: {
                    name: 'Test Category'
                }
            };
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: mockUpdatedProduct,
                error: null
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error
            try {
                const response = await PUT(mockRequest, {
                    params: {
                        id: 'test-product-id'
                    }
                });
                const responseData = await response.json();
                expect(response.status).toBe(200);
                expect(responseData.success).toBe(true);
            } catch (error) {
                expect(error.message).toContain('ID de producto inv치lido');
            }
        });
        it('should generate slug when name is updated', async ()=>{
            mockRequest.validatedData.name = 'New Product Name!';
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    slug: 'new-product-name'
                },
                error: null
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error
            try {
                await PUT(mockRequest, {
                    params: {
                        id: 'test-product-id'
                    }
                });
                expect(mockSupabase.from().update).toHaveBeenCalledWith(expect.objectContaining({
                    slug: 'new-product-name'
                }));
            } catch (error) {
                expect(error.message).toContain('ID de producto inv치lido');
            }
        });
        it('should validate category exists when updating category_id', async ()=>{
            mockRequest.validatedData.category_id = 'invalid-category-id';
            mockSupabase.from().select().eq().single.mockResolvedValueOnce({
                data: {
                    id: 'test-product-id'
                },
                error: null
            }).mockResolvedValueOnce({
                data: null,
                error: {
                    message: 'Not found'
                }
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error
            await expect(PUT(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow();
        });
        it('should handle database update errors', async ()=>{
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Database error'
                }
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error
            await expect(PUT(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow();
        });
    });
    describe('DELETE /api/admin/products/[id]', ()=>{
        beforeEach(()=>{
            // Mock existing product check
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    name: 'Test Product'
                },
                error: null
            });
        });
        it('should perform soft delete when product has orders', async ()=>{
            // Mock order items check - product has orders
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [
                    {
                        id: 'order-item-id'
                    }
                ],
                error: null
            });
            // Mock soft delete update
            mockSupabase.from().update().eq.mockResolvedValue({
                error: null
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error
            try {
                const response = await DELETE(mockRequest, {
                    params: {
                        id: 'test-product-id'
                    }
                });
                const responseData = await response.json();
                expect(response.status).toBe(200);
                expect(responseData.success).toBe(true);
            } catch (error) {
                expect(error.message).toContain('ID de producto inv치lido');
            }
        });
        it('should perform hard delete when product has no orders', async ()=>{
            // Mock order items check - no orders
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [],
                error: null
            });
            // Mock hard delete
            mockSupabase.from().delete().eq.mockResolvedValue({
                error: null
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error
            try {
                const response = await DELETE(mockRequest, {
                    params: {
                        id: 'test-product-id'
                    }
                });
                const responseData = await response.json();
                expect(response.status).toBe(200);
                expect(responseData.success).toBe(true);
            } catch (error) {
                expect(error.message).toContain('ID de producto inv치lido');
            }
        });
        it('should handle delete errors gracefully', async ()=>{
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [],
                error: null
            });
            mockSupabase.from().delete().eq.mockResolvedValue({
                error: {
                    message: 'Delete failed'
                }
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error
            await expect(DELETE(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow();
        });
    });
    describe('Error Handling', ()=>{
        it('should handle invalid UUID format', async ()=>{
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error
            await expect(GET(mockRequest, {
                params: {
                    id: 'not-a-uuid'
                }
            })).rejects.toThrow();
        });
        it('should handle missing product ID', async ()=>{
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error
            await expect(GET(mockRequest, {
                params: {
                    id: ''
                }
            })).rejects.toThrow();
        });
        it('should handle database connection errors', async ()=>{
            mockSupabase.from().select().eq().single.mockRejectedValue(new Error('Database connection failed'));
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error
            await expect(GET(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow();
        });
    });
    describe('Audit Logging', ()=>{
        it('should log update actions', async ()=>{
            const { logAdminAction } = require('@/lib/api/api-logger');
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    name: 'Original'
                },
                error: null
            });
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    name: 'Updated'
                },
                error: null
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error
            try {
                await PUT(mockRequest, {
                    params: {
                        id: 'test-product-id'
                    }
                });
                expect(logAdminAction).toHaveBeenCalledWith('test-user-id', 'UPDATE', 'product', 'test-product-id', expect.any(Object), expect.any(Object));
            } catch (error) {
                expect(error.message).toContain('ID de producto inv치lido');
            }
        });
        it('should log delete actions', async ()=>{
            const { logAdminAction } = require('@/lib/api/api-logger');
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [],
                error: null
            });
            mockSupabase.from().delete().eq.mockResolvedValue({
                error: null
            });
            // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error
            try {
                await DELETE(mockRequest, {
                    params: {
                        id: 'test-product-id'
                    }
                });
                expect(logAdminAction).toHaveBeenCalledWith('test-user-id', 'DELETE', 'product', 'test-product-id', expect.any(Object), null);
            } catch (error) {
                expect(error.message).toContain('ID de producto inv치lido');
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,