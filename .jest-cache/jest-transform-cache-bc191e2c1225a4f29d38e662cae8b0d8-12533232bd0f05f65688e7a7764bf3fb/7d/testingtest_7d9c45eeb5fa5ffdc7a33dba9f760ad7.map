{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\api\\seo\\testing.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - SEO TESTING API TESTS\r\n// Tests para las APIs de testing automatizado SEO\r\n// ===================================\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { GET, POST, PUT, DELETE } from '@/app/api/seo/testing/route';\r\n\r\n// Mock dependencies\r\njest.mock('@/lib/seo/seo-testing-suite', () => ({\r\n  enhancedSEOTestingSuite: {\r\n    getTestingStats: jest.fn().mockReturnValue({\r\n      totalTestsRun: 150,\r\n      averageScore: 85,\r\n      testsByType: {\r\n        metadata: 50,\r\n        structured_data: 30,\r\n        robots_txt: 10,\r\n        internal_links: 25,\r\n        compliance: 20,\r\n        performance: 15\r\n      },\r\n      cacheHitRate: 0.85,\r\n      mostCommonIssues: ['Missing meta description', 'Title too long']\r\n    }),\r\n    getTestHistory: jest.fn().mockReturnValue([\r\n      {\r\n        suiteId: 'suite_123',\r\n        suiteName: 'Test Suite',\r\n        status: 'completed',\r\n        summary: { totalTests: 10, passed: 8, failed: 1, warnings: 1 }\r\n      }\r\n    ]),\r\n    getActiveTestSuites: jest.fn().mockReturnValue([]),\r\n    runTestsByType: jest.fn().mockResolvedValue([\r\n      {\r\n        testId: 'test_123',\r\n        testName: 'Title Tag Validation',\r\n        testType: 'metadata',\r\n        url: '/test-page',\r\n        status: 'passed',\r\n        score: 90,\r\n        details: {\r\n          description: 'Test description',\r\n          expectedValue: '30-60 characters',\r\n          actualValue: '45 characters',\r\n          impact: 'high',\r\n          category: 'metadata'\r\n        },\r\n        suggestions: ['Title looks good'],\r\n        executionTime: 100,\r\n        timestamp: new Date()\r\n      }\r\n    ]),\r\n    runFullTestSuite: jest.fn().mockResolvedValue({\r\n      suiteId: 'suite_456',\r\n      suiteName: 'Full SEO Test Suite',\r\n      tests: [],\r\n      summary: {\r\n        totalTests: 20,\r\n        passed: 15,\r\n        failed: 2,\r\n        warnings: 3,\r\n        skipped: 0,\r\n        overallScore: 82,\r\n        executionTime: 5000\r\n      },\r\n      coverage: {\r\n        metadataTests: 5,\r\n        structuredDataTests: 3,\r\n        robotsTxtTests: 2,\r\n        internalLinksTests: 4,\r\n        complianceTests: 3,\r\n        performanceTests: 3\r\n      },\r\n      status: 'completed'\r\n    }),\r\n    configure: jest.fn(),\r\n    clearCache: jest.fn().mockResolvedValue(undefined)\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  },\r\n  LogLevel: {\r\n    INFO: 'info',\r\n    WARN: 'warn',\r\n    ERROR: 'error'\r\n  },\r\n  LogCategory: {\r\n    SEO: 'seo'\r\n  }\r\n}));\r\n\r\ndescribe('SEO Testing API', () => {\r\n  describe('GET /api/seo/testing', () => {\r\n    test('should return API information by default', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('message');\r\n      expect(data.data).toHaveProperty('endpoints');\r\n      expect(data.data).toHaveProperty('testTypes');\r\n      expect(Array.isArray(data.data.testTypes)).toBe(true);\r\n    });\r\n\r\n    test('should return testing statistics', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing?action=stats');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('totalTestsRun', 150);\r\n      expect(data.data).toHaveProperty('averageScore', 85);\r\n      expect(data.data).toHaveProperty('testsByType');\r\n      expect(data.data).toHaveProperty('cacheHitRate', 0.85);\r\n    });\r\n\r\n    test('should return test history', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing?action=history&limit=5');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(Array.isArray(data.data)).toBe(true);\r\n      expect(data.data.length).toBeGreaterThan(0);\r\n      expect(data.data[0]).toHaveProperty('suiteId');\r\n      expect(data.data[0]).toHaveProperty('status');\r\n    });\r\n\r\n    test('should return active test suites', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing?action=active');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(Array.isArray(data.data)).toBe(true);\r\n    });\r\n\r\n    test('should run tests by type', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing?action=run-by-type&testType=metadata&urls=/test-page');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('testType', 'metadata');\r\n      expect(data.data).toHaveProperty('results');\r\n      expect(data.data).toHaveProperty('summary');\r\n      expect(Array.isArray(data.data.results)).toBe(true);\r\n    });\r\n\r\n    test('should return error for invalid test type', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing?action=run-by-type&testType=invalid');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toContain('testType parameter is required');\r\n      expect(data).toHaveProperty('availableTypes');\r\n    });\r\n\r\n    test('should return error for missing test type', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing?action=run-by-type');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data).toHaveProperty('availableTypes');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/seo/testing', () => {\r\n    test('should run full test suite', async () => {\r\n      const requestBody = {\r\n        action: 'run-full-suite',\r\n        urls: ['/test-page', '/another-page']\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('suiteId');\r\n      expect(data.data).toHaveProperty('summary');\r\n      expect(data.data).toHaveProperty('coverage');\r\n      expect(data.data.status).toBe('completed');\r\n    });\r\n\r\n    test('should run specific test types', async () => {\r\n      const requestBody = {\r\n        action: 'run-specific-tests',\r\n        testTypes: ['metadata', 'structured_data'],\r\n        urls: ['/test-page']\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('testTypes');\r\n      expect(data.data).toHaveProperty('results');\r\n      expect(data.data).toHaveProperty('summary');\r\n      expect(Array.isArray(data.data.testTypes)).toBe(true);\r\n    });\r\n\r\n    test('should validate metadata', async () => {\r\n      const requestBody = {\r\n        action: 'validate-metadata',\r\n        urls: ['/test-page']\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('testType', 'metadata');\r\n      expect(data.data).toHaveProperty('results');\r\n    });\r\n\r\n    test('should return error for invalid action', async () => {\r\n      const requestBody = {\r\n        action: 'invalid-action'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Invalid action');\r\n      expect(data).toHaveProperty('availableActions');\r\n    });\r\n\r\n    test('should return error for missing testTypes in run-specific-tests', async () => {\r\n      const requestBody = {\r\n        action: 'run-specific-tests',\r\n        urls: ['/test-page']\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toContain('testTypes array is required');\r\n      expect(data).toHaveProperty('availableTypes');\r\n    });\r\n  });\r\n\r\n  describe('PUT /api/seo/testing', () => {\r\n    test('should update configuration', async () => {\r\n      const requestBody = {\r\n        config: {\r\n          enableMetadataTests: true,\r\n          testTimeout: 60,\r\n          thresholds: {\r\n            titleMinLength: 30,\r\n            titleMaxLength: 60\r\n          }\r\n        }\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('message');\r\n      expect(data.data).toHaveProperty('updatedKeys');\r\n      expect(Array.isArray(data.data.updatedKeys)).toBe(true);\r\n    });\r\n\r\n    test('should return error for missing config', async () => {\r\n      const requestBody = {};\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toContain('config object is required');\r\n      expect(data).toHaveProperty('example');\r\n    });\r\n\r\n    test('should return error for invalid config', async () => {\r\n      const requestBody = {\r\n        config: 'invalid-config'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toContain('config object is required');\r\n    });\r\n  });\r\n\r\n  describe('DELETE /api/seo/testing', () => {\r\n    test('should clear cache', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      const response = await DELETE(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveProperty('message');\r\n      expect(data.data.message).toContain('Cache cleared successfully');\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    test('should handle GET errors gracefully', async () => {\r\n      // Mock error\r\n      const { enhancedSEOTestingSuite } = require('@/lib/seo/seo-testing-suite');\r\n      enhancedSEOTestingSuite.getTestingStats.mockImplementationOnce(() => {\r\n        throw new Error('Test error');\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing?action=stats');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Failed to process request');\r\n      expect(data.details).toBe('Test error');\r\n    });\r\n\r\n    test('should handle POST errors gracefully', async () => {\r\n      // Mock error\r\n      const { enhancedSEOTestingSuite } = require('@/lib/seo/seo-testing-suite');\r\n      enhancedSEOTestingSuite.runFullTestSuite.mockImplementationOnce(() => {\r\n        throw new Error('Test error');\r\n      });\r\n\r\n      const requestBody = {\r\n        action: 'run-full-suite',\r\n        urls: ['/test-page']\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Failed to run SEO tests');\r\n      expect(data.details).toBe('Test error');\r\n    });\r\n\r\n    test('should handle PUT errors gracefully', async () => {\r\n      // Mock error\r\n      const { enhancedSEOTestingSuite } = require('@/lib/seo/seo-testing-suite');\r\n      enhancedSEOTestingSuite.configure.mockImplementationOnce(() => {\r\n        throw new Error('Test error');\r\n      });\r\n\r\n      const requestBody = {\r\n        config: { enableMetadataTests: true }\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Failed to update configuration');\r\n      expect(data.details).toBe('Test error');\r\n    });\r\n\r\n    test('should handle DELETE errors gracefully', async () => {\r\n      // Mock error\r\n      const { enhancedSEOTestingSuite } = require('@/lib/seo/seo-testing-suite');\r\n      enhancedSEOTestingSuite.clearCache.mockImplementationOnce(() => {\r\n        throw new Error('Test error');\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/seo/testing', {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      const response = await DELETE(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Failed to clear cache');\r\n      expect(data.details).toBe('Test error');\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","enhancedSEOTestingSuite","getTestingStats","fn","mockReturnValue","totalTestsRun","averageScore","testsByType","metadata","structured_data","robots_txt","internal_links","compliance","performance","cacheHitRate","mostCommonIssues","getTestHistory","suiteId","suiteName","status","summary","totalTests","passed","failed","warnings","getActiveTestSuites","runTestsByType","mockResolvedValue","testId","testName","testType","url","score","details","description","expectedValue","actualValue","impact","category","suggestions","executionTime","timestamp","Date","runFullTestSuite","tests","skipped","overallScore","coverage","metadataTests","structuredDataTests","robotsTxtTests","internalLinksTests","complianceTests","performanceTests","configure","clearCache","undefined","logger","info","warn","error","LogLevel","INFO","WARN","ERROR","LogCategory","SEO","describe","test","request","NextRequest","response","GET","data","json","expect","toBe","success","toHaveProperty","Array","isArray","testTypes","length","toBeGreaterThan","results","toContain","requestBody","action","urls","method","body","JSON","stringify","headers","POST","config","enableMetadataTests","testTimeout","thresholds","titleMinLength","titleMaxLength","PUT","updatedKeys","DELETE","message","require","mockImplementationOnce","Error"],"mappings":"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"}