9810ebc0e85780bcbb4c9d1326690522
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EmailNotificationService () {
        return EmailNotificationService;
    },
    get emailService () {
        return emailService;
    },
    get sendLowStockAlert () {
        return sendLowStockAlert;
    },
    get sendOrderConfirmation () {
        return sendOrderConfirmation;
    },
    get sendPasswordReset () {
        return sendPasswordReset;
    },
    get sendShippingNotification () {
        return sendShippingNotification;
    },
    get sendWelcomeEmail () {
        return sendWelcomeEmail;
    }
});
const _usetoast = require("../../components/ui/use-toast");
class EmailNotificationService {
    static getInstance() {
        if (!EmailNotificationService.instance) {
            EmailNotificationService.instance = new EmailNotificationService();
        }
        return EmailNotificationService.instance;
    }
    async sendNotification(config) {
        try {
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });
            if (!response.ok) {
                throw new Error('Error al enviar notificación por email');
            }
            const result = await response.json();
            return result.success;
        } catch (error) {
            console.error('Error sending email notification:', error);
            (0, _usetoast.toast)({
                title: 'Error',
                description: 'No se pudo enviar la notificación por email',
                variant: 'destructive'
            });
            return false;
        }
    }
    async sendOrderConfirmation(orderData) {
        return this.sendNotification({
            to: orderData.customerEmail,
            subject: `Confirmación de pedido #${orderData.orderId}`,
            template: 'order-confirmation',
            data: orderData,
            priority: 'high'
        });
    }
    async sendShippingNotification(shippingData) {
        return this.sendNotification({
            to: shippingData.customerEmail,
            subject: `Tu pedido #${shippingData.orderId} está en camino`,
            template: 'shipping-notification',
            data: shippingData,
            priority: 'normal'
        });
    }
    async sendPasswordReset(userData) {
        return this.sendNotification({
            to: userData.email,
            subject: 'Restablecer contraseña',
            template: 'password-reset',
            data: userData,
            priority: 'high'
        });
    }
    async sendWelcomeEmail(userData) {
        return this.sendNotification({
            to: userData.email,
            subject: '¡Bienvenido a nuestra tienda!',
            template: 'welcome',
            data: userData,
            priority: 'normal'
        });
    }
    async sendLowStockAlert(productData) {
        return this.sendNotification({
            to: productData.adminEmails,
            subject: `Alerta: Stock bajo - ${productData.productName}`,
            template: 'low-stock-alert',
            data: productData,
            priority: 'high'
        });
    }
    async sendOrderStatusUpdate(statusData) {
        return this.sendNotification({
            to: statusData.customerEmail,
            subject: `Actualización de pedido #${statusData.orderId}`,
            template: 'order-status-update',
            data: statusData,
            priority: 'normal'
        });
    }
    async sendPromotionalEmail(promoData) {
        return this.sendNotification({
            to: promoData.recipients,
            subject: promoData.subject,
            template: 'promotional',
            data: promoData,
            priority: 'low'
        });
    }
    async getEmailTemplates() {
        try {
            const response = await fetch('/api/notifications/email/templates');
            if (!response.ok) {
                throw new Error('Error al obtener plantillas');
            }
            return await response.json();
        } catch (error) {
            console.error('Error fetching email templates:', error);
            return [];
        }
    }
    async scheduleEmail(config) {
        if (!config.scheduledAt) {
            throw new Error('scheduledAt is required for scheduled emails');
        }
        try {
            const response = await fetch('/api/notifications/email/schedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });
            if (!response.ok) {
                throw new Error('Error al programar email');
            }
            return true;
        } catch (error) {
            console.error('Error scheduling email:', error);
            return false;
        }
    }
    constructor(){
        this.apiEndpoint = '/api/notifications/email';
    }
}
const emailService = EmailNotificationService.getInstance();
const sendOrderConfirmation = (orderData)=>emailService.sendOrderConfirmation(orderData);
const sendShippingNotification = (shippingData)=>emailService.sendShippingNotification(shippingData);
const sendPasswordReset = (userData)=>emailService.sendPasswordReset(userData);
const sendWelcomeEmail = (userData)=>emailService.sendWelcomeEmail(userData);
const sendLowStockAlert = (productData)=>emailService.sendLowStockAlert(productData);

//# sourceMappingURL=data:application/json;base64,