{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\reports\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n// ===================================\n// PINTEYA E-COMMERCE - MERCADOPAGO REPORTS API\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/lib/auth/config'\nimport { getSupabaseClient } from '@/lib/integrations/supabase'\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger'\nimport {\n  checkRateLimit,\n  addRateLimitHeaders,\n  RATE_LIMIT_CONFIGS,\n} from '@/lib/enterprise/rate-limiter'\nimport { metricsCollector } from '@/lib/enterprise/metrics'\nimport { MercadoPagoReport, ReportMetrics } from '@/types/api'\n\n/**\n * GET /api/payments/reports\n * Obtiene reportes de MercadoPago según documentación oficial\n */\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now()\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown'\n  const userAgent = request.headers.get('user-agent') || 'unknown'\n\n  try {\n    // Verificar autenticación\n    const session = await auth()\n    if (!session?.user) {\n      return NextResponse.json({ success: false, error: 'No autorizado' }, { status: 401 })\n    }\n\n    // Rate limiting\n    const rateLimitResult = await checkRateLimit(request, RATE_LIMIT_CONFIGS.QUERY_API)\n\n    if (!rateLimitResult.success) {\n      logger.warn(LogCategory.API, 'Rate limit exceeded for reports', {\n        clientIP,\n        userId,\n      })\n\n      const response = NextResponse.json(\n        { success: false, error: 'Demasiadas solicitudes' },\n        { status: 429 }\n      )\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API)\n      return response\n    }\n\n    // Obtener parámetros de consulta\n    const url = new URL(request.url)\n    const reportType = url.searchParams.get('type') || 'account_money'\n    const dateFrom = url.searchParams.get('date_from')\n    const dateTo = url.searchParams.get('date_to')\n    const includeMetrics = url.searchParams.get('include_metrics') === 'true'\n\n    // Validar parámetros\n    if (!['released_money', 'account_money', 'sales_report'].includes(reportType)) {\n      return NextResponse.json(\n        { success: false, error: 'Tipo de reporte inválido' },\n        { status: 400 }\n      )\n    }\n\n    logger.info(LogCategory.API, 'Reports request started', {\n      userId,\n      reportType,\n      dateFrom,\n      dateTo,\n      includeMetrics,\n      clientIP,\n    })\n\n    // Generar reporte\n    const reportData = await generateReport(reportType, dateFrom, dateTo, includeMetrics)\n\n    // Registrar métricas\n    await metricsCollector.recordRequest(\n      '/api/payments/reports',\n      'GET',\n      200,\n      Date.now() - startTime,\n      { userId, reportType }\n    )\n\n    logger.info(LogCategory.API, 'Reports request completed', {\n      userId,\n      reportType,\n      recordsCount: reportData.records?.length || 0,\n      processingTime: Date.now() - startTime,\n    })\n\n    const response = NextResponse.json({\n      success: true,\n      data: reportData,\n      timestamp: Date.now(),\n      processing_time: Date.now() - startTime,\n    })\n\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API)\n    return response\n  } catch (error) {\n    const processingTime = Date.now() - startTime\n\n    logger.performance(\n      LogLevel.ERROR,\n      'Reports request failed',\n      {\n        operation: 'reports-api',\n        duration: processingTime,\n        statusCode: 500,\n      },\n      {\n        clientIP,\n        userAgent,\n      }\n    )\n\n    await metricsCollector.recordRequest('/api/payments/reports', 'GET', 500, processingTime, {\n      error: (error as Error).message,\n    })\n\n    return NextResponse.json(\n      { success: false, error: 'Error interno del servidor' },\n      { status: 500 }\n    )\n  }\n}\n\n/**\n * POST /api/payments/reports\n * Crea un nuevo reporte según documentación oficial de MercadoPago\n */\nexport async function POST(request: NextRequest) {\n  const startTime = Date.now()\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown'\n\n  try {\n    // Verificar autenticación\n    const session = await auth()\n    if (!session?.user) {\n      return NextResponse.json({ success: false, error: 'No autorizado' }, { status: 401 })\n    }\n\n    // Rate limiting\n    const rateLimitResult = await checkRateLimit(request, RATE_LIMIT_CONFIGS.PAYMENT_API)\n\n    if (!rateLimitResult.success) {\n      const response = NextResponse.json(\n        { success: false, error: 'Demasiadas solicitudes' },\n        { status: 429 }\n      )\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API)\n      return response\n    }\n\n    const body = await request.json()\n    const { type, date_from, date_to, columns } = body\n\n    // Validar datos requeridos\n    if (!type || !date_from || !date_to) {\n      return NextResponse.json(\n        { success: false, error: 'Faltan parámetros requeridos' },\n        { status: 400 }\n      )\n    }\n\n    logger.info(LogCategory.API, 'Report creation started', {\n      userId,\n      type,\n      date_from,\n      date_to,\n      clientIP,\n    })\n\n    // Crear reporte\n    const report = await createMercadoPagoReport(type, date_from, date_to, columns)\n\n    // Registrar métricas\n    await metricsCollector.recordRequest(\n      '/api/payments/reports',\n      'POST',\n      201,\n      Date.now() - startTime,\n      { userId, reportType: type }\n    )\n\n    logger.info(LogCategory.API, 'Report creation completed', {\n      userId,\n      reportId: report.id,\n      type,\n      processingTime: Date.now() - startTime,\n    })\n\n    const response = NextResponse.json(\n      {\n        success: true,\n        data: report,\n        timestamp: Date.now(),\n        processing_time: Date.now() - startTime,\n      },\n      { status: 201 }\n    )\n\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API)\n    return response\n  } catch (error) {\n    const processingTime = Date.now() - startTime\n\n    logger.performance(\n      LogLevel.ERROR,\n      'Report creation failed',\n      {\n        operation: 'report-creation-api',\n        duration: processingTime,\n        statusCode: 500,\n      },\n      {\n        clientIP,\n      }\n    )\n\n    await metricsCollector.recordRequest('/api/payments/reports', 'POST', 500, processingTime, {\n      error: (error as Error).message,\n    })\n\n    return NextResponse.json(\n      { success: false, error: 'Error interno del servidor' },\n      { status: 500 }\n    )\n  }\n}\n\n/**\n * Genera reporte basado en datos de Supabase (simulando API de MercadoPago)\n */\nasync function generateReport(\n  type: string,\n  dateFrom?: string | null,\n  dateTo?: string | null,\n  includeMetrics: boolean = false\n) {\n  const supabase = getSupabaseClient()\n  if (!supabase) {\n    throw new Error('Error de configuración de base de datos')\n  }\n\n  // Configurar fechas por defecto (últimos 30 días)\n  const endDate = dateTo ? new Date(dateTo) : new Date()\n  const startDate = dateFrom ? new Date(dateFrom) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n\n  let query = supabase\n    .from('orders')\n    .select(\n      `\n      id,\n      total_amount,\n      status,\n      payment_status,\n      created_at,\n      updated_at,\n      order_items (\n        quantity,\n        unit_price,\n        products (\n          name,\n          category_id\n        )\n      )\n    `\n    )\n    .gte('created_at', startDate.toISOString())\n    .lte('created_at', endDate.toISOString())\n\n  // Filtrar según tipo de reporte\n  switch (type) {\n    case 'released_money':\n      query = query.eq('payment_status', 'approved')\n      break\n    case 'account_money':\n      // Incluir todos los estados\n      break\n    case 'sales_report':\n      query = query.in('status', ['completed', 'processing'])\n      break\n  }\n\n  const { data: orders, error } = await query\n\n  if (error) {\n    throw new Error(`Error al obtener datos: ${error.message}`)\n  }\n\n  // Procesar datos según tipo de reporte\n  const processedData = processReportData(orders || [], type)\n\n  // Calcular métricas si se solicitan\n  const metrics = includeMetrics ? calculateReportMetrics(orders || []) : undefined\n\n  return {\n    type,\n    date_from: startDate.toISOString(),\n    date_to: endDate.toISOString(),\n    records: processedData,\n    metrics,\n    total_records: processedData.length,\n    generated_at: new Date().toISOString(),\n  }\n}\n\n/**\n * Procesa los datos según el tipo de reporte\n */\nfunction processReportData(\n  orders: Array<{\n    id: string\n    total_amount: number\n    payment_status?: string\n    status: string\n    created_at: string\n    updated_at: string\n    external_reference?: string\n    order_items?: Array<{\n      id: string\n      quantity: number\n      price: number\n      product: {\n        id: string\n        name: string\n      }\n    }>\n  }>,\n  type: string\n) {\n  return orders.map(order => {\n    const baseData = {\n      order_id: order.id,\n      amount: order.total_amount,\n      status: order.payment_status || order.status,\n      created_at: order.created_at,\n      updated_at: order.updated_at,\n    }\n\n    switch (type) {\n      case 'released_money':\n        return {\n          ...baseData,\n          release_date: order.updated_at,\n          net_amount: order.total_amount * 0.96, // Simular comisión MP\n          fee_amount: order.total_amount * 0.04,\n        }\n\n      case 'account_money':\n        return {\n          ...baseData,\n          transaction_type: 'payment',\n          balance_impact: order.payment_status === 'approved' ? order.total_amount : 0,\n        }\n\n      case 'sales_report':\n        return {\n          ...baseData,\n          items:\n            order.order_items?.map(\n              (item: {\n                id: string\n                quantity: number\n                price: number\n                unit_price?: number\n                products?: {\n                  name: string\n                  category_id?: string\n                }\n                product: {\n                  id: string\n                  name: string\n                }\n              }) => ({\n                name: item.products?.name,\n                quantity: item.quantity,\n                unit_price: item.unit_price,\n                category: item.products?.category_id,\n              })\n            ) || [],\n          items_count: order.order_items?.length || 0,\n        }\n\n      default:\n        return baseData\n    }\n  })\n}\n\n/**\n * Calcula métricas del reporte\n */\nfunction calculateReportMetrics(\n  orders: Array<{\n    payment_status?: string\n    total_amount?: number\n  }>\n): ReportMetrics {\n  const totalTransactions = orders.length\n  const successfulPayments = orders.filter(o => o.payment_status === 'approved').length\n  const failedPayments = orders.filter(o => o.payment_status === 'rejected').length\n  const totalAmount = orders.reduce((sum, o) => sum + (o.total_amount || 0), 0)\n\n  return {\n    total_transactions: totalTransactions,\n    total_amount: totalAmount,\n    successful_payments: successfulPayments,\n    failed_payments: failedPayments,\n    refunds: 0, // TODO: Implementar cuando se agregue tabla de refunds\n    chargebacks: 0, // TODO: Implementar cuando se agregue tabla de chargebacks\n    average_ticket: totalTransactions > 0 ? totalAmount / totalTransactions : 0,\n    conversion_rate: totalTransactions > 0 ? (successfulPayments / totalTransactions) * 100 : 0,\n  }\n}\n\n/**\n * Crea un reporte en MercadoPago (simulado)\n */\nasync function createMercadoPagoReport(\n  type: string,\n  dateFrom: string,\n  dateTo: string,\n  columns?: string[]\n): Promise<MercadoPagoReport> {\n  // En una implementación real, aquí se haría la llamada a la API de MercadoPago\n  // Por ahora simulamos la creación del reporte\n\n  const reportId = `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n  return {\n    id: reportId,\n    type: type as any,\n    date_from: dateFrom,\n    date_to: dateTo,\n    status: 'pending',\n    created_at: new Date().toISOString(),\n  }\n}\n"],"names":["GET","POST","runtime","request","startTime","Date","now","clientIP","headers","get","userAgent","session","auth","user","NextResponse","json","success","error","status","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","QUERY_API","logger","warn","LogCategory","API","userId","response","addRateLimitHeaders","url","URL","reportType","searchParams","dateFrom","dateTo","includeMetrics","includes","info","reportData","generateReport","metricsCollector","recordRequest","recordsCount","records","length","processingTime","data","timestamp","processing_time","performance","LogLevel","ERROR","operation","duration","statusCode","message","PAYMENT_API","body","type","date_from","date_to","columns","report","createMercadoPagoReport","reportId","id","supabase","getSupabaseClient","Error","endDate","startDate","query","from","select","gte","toISOString","lte","eq","in","orders","processedData","processReportData","metrics","calculateReportMetrics","undefined","total_records","generated_at","map","order","baseData","order_id","amount","total_amount","payment_status","created_at","updated_at","release_date","net_amount","fee_amount","transaction_type","balance_impact","items","order_items","item","name","products","quantity","unit_price","category","category_id","items_count","totalTransactions","successfulPayments","filter","o","failedPayments","totalAmount","reduce","sum","total_transactions","successful_payments","failed_payments","refunds","chargebacks","average_ticket","conversion_rate","Math","random","toString","substr"],"mappings":"AAAA,qCAAqC;;;;;;;;;;;;QAuBfA;eAAAA;;QAiHAC;eAAAA;;QAvITC;eAAAA;;;wBAM6B;wBACrB;0BACa;wBACY;6BAKvC;yBAC0B;AAf1B,MAAMA,UAAU;AAsBhB,eAAeF,IAAIG,OAAoB;IAC5C,MAAMC,YAAYC,KAAKC,GAAG;IAC1B,MAAMC,WAAWJ,QAAQK,OAAO,CAACC,GAAG,CAAC,sBAAsB;IAC3D,MAAMC,YAAYP,QAAQK,OAAO,CAACC,GAAG,CAAC,iBAAiB;IAEvD,IAAI;QACF,0BAA0B;QAC1B,MAAME,UAAU,MAAMC,IAAAA,YAAI;QAC1B,IAAI,CAACD,SAASE,MAAM;YAClB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,SAAS;gBAAOC,OAAO;YAAgB,GAAG;gBAAEC,QAAQ;YAAI;QACrF;QAEA,gBAAgB;QAChB,MAAMC,kBAAkB,MAAMC,IAAAA,2BAAc,EAACjB,SAASkB,+BAAkB,CAACC,SAAS;QAElF,IAAI,CAACH,gBAAgBH,OAAO,EAAE;YAC5BO,cAAM,CAACC,IAAI,CAACC,mBAAW,CAACC,GAAG,EAAE,mCAAmC;gBAC9DnB;gBACAoB;YACF;YAEA,MAAMC,WAAWd,oBAAY,CAACC,IAAI,CAChC;gBAAEC,SAAS;gBAAOC,OAAO;YAAyB,GAClD;gBAAEC,QAAQ;YAAI;YAEhBW,IAAAA,gCAAmB,EAACD,UAAUT,iBAAiBE,+BAAkB,CAACC,SAAS;YAC3E,OAAOM;QACT;QAEA,iCAAiC;QACjC,MAAME,MAAM,IAAIC,IAAI5B,QAAQ2B,GAAG;QAC/B,MAAME,aAAaF,IAAIG,YAAY,CAACxB,GAAG,CAAC,WAAW;QACnD,MAAMyB,WAAWJ,IAAIG,YAAY,CAACxB,GAAG,CAAC;QACtC,MAAM0B,SAASL,IAAIG,YAAY,CAACxB,GAAG,CAAC;QACpC,MAAM2B,iBAAiBN,IAAIG,YAAY,CAACxB,GAAG,CAAC,uBAAuB;QAEnE,qBAAqB;QACrB,IAAI,CAAC;YAAC;YAAkB;YAAiB;SAAe,CAAC4B,QAAQ,CAACL,aAAa;YAC7E,OAAOlB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,SAAS;gBAAOC,OAAO;YAA2B,GACpD;gBAAEC,QAAQ;YAAI;QAElB;QAEAK,cAAM,CAACe,IAAI,CAACb,mBAAW,CAACC,GAAG,EAAE,2BAA2B;YACtDC;YACAK;YACAE;YACAC;YACAC;YACA7B;QACF;QAEA,kBAAkB;QAClB,MAAMgC,aAAa,MAAMC,eAAeR,YAAYE,UAAUC,QAAQC;QAEtE,qBAAqB;QACrB,MAAMK,yBAAgB,CAACC,aAAa,CAClC,yBACA,OACA,KACArC,KAAKC,GAAG,KAAKF,WACb;YAAEuB;YAAQK;QAAW;QAGvBT,cAAM,CAACe,IAAI,CAACb,mBAAW,CAACC,GAAG,EAAE,6BAA6B;YACxDC;YACAK;YACAW,cAAcJ,WAAWK,OAAO,EAAEC,UAAU;YAC5CC,gBAAgBzC,KAAKC,GAAG,KAAKF;QAC/B;QAEA,MAAMwB,WAAWd,oBAAY,CAACC,IAAI,CAAC;YACjCC,SAAS;YACT+B,MAAMR;YACNS,WAAW3C,KAAKC,GAAG;YACnB2C,iBAAiB5C,KAAKC,GAAG,KAAKF;QAChC;QAEAyB,IAAAA,gCAAmB,EAACD,UAAUT,iBAAiBE,+BAAkB,CAACC,SAAS;QAC3E,OAAOM;IACT,EAAE,OAAOX,OAAO;QACd,MAAM6B,iBAAiBzC,KAAKC,GAAG,KAAKF;QAEpCmB,cAAM,CAAC2B,WAAW,CAChBC,gBAAQ,CAACC,KAAK,EACd,0BACA;YACEC,WAAW;YACXC,UAAUR;YACVS,YAAY;QACd,GACA;YACEhD;YACAG;QACF;QAGF,MAAM+B,yBAAgB,CAACC,aAAa,CAAC,yBAAyB,OAAO,KAAKI,gBAAgB;YACxF7B,OAAO,AAACA,MAAgBuC,OAAO;QACjC;QAEA,OAAO1C,oBAAY,CAACC,IAAI,CACtB;YAAEC,SAAS;YAAOC,OAAO;QAA6B,GACtD;YAAEC,QAAQ;QAAI;IAElB;AACF;AAMO,eAAejB,KAAKE,OAAoB;IAC7C,MAAMC,YAAYC,KAAKC,GAAG;IAC1B,MAAMC,WAAWJ,QAAQK,OAAO,CAACC,GAAG,CAAC,sBAAsB;IAE3D,IAAI;QACF,0BAA0B;QAC1B,MAAME,UAAU,MAAMC,IAAAA,YAAI;QAC1B,IAAI,CAACD,SAASE,MAAM;YAClB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,SAAS;gBAAOC,OAAO;YAAgB,GAAG;gBAAEC,QAAQ;YAAI;QACrF;QAEA,gBAAgB;QAChB,MAAMC,kBAAkB,MAAMC,IAAAA,2BAAc,EAACjB,SAASkB,+BAAkB,CAACoC,WAAW;QAEpF,IAAI,CAACtC,gBAAgBH,OAAO,EAAE;YAC5B,MAAMY,WAAWd,oBAAY,CAACC,IAAI,CAChC;gBAAEC,SAAS;gBAAOC,OAAO;YAAyB,GAClD;gBAAEC,QAAQ;YAAI;YAEhBW,IAAAA,gCAAmB,EAACD,UAAUT,iBAAiBE,+BAAkB,CAACoC,WAAW;YAC7E,OAAO7B;QACT;QAEA,MAAM8B,OAAO,MAAMvD,QAAQY,IAAI;QAC/B,MAAM,EAAE4C,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAAGJ;QAE9C,2BAA2B;QAC3B,IAAI,CAACC,QAAQ,CAACC,aAAa,CAACC,SAAS;YACnC,OAAO/C,oBAAY,CAACC,IAAI,CACtB;gBAAEC,SAAS;gBAAOC,OAAO;YAA+B,GACxD;gBAAEC,QAAQ;YAAI;QAElB;QAEAK,cAAM,CAACe,IAAI,CAACb,mBAAW,CAACC,GAAG,EAAE,2BAA2B;YACtDC;YACAgC;YACAC;YACAC;YACAtD;QACF;QAEA,gBAAgB;QAChB,MAAMwD,SAAS,MAAMC,wBAAwBL,MAAMC,WAAWC,SAASC;QAEvE,qBAAqB;QACrB,MAAMrB,yBAAgB,CAACC,aAAa,CAClC,yBACA,QACA,KACArC,KAAKC,GAAG,KAAKF,WACb;YAAEuB;YAAQK,YAAY2B;QAAK;QAG7BpC,cAAM,CAACe,IAAI,CAACb,mBAAW,CAACC,GAAG,EAAE,6BAA6B;YACxDC;YACAsC,UAAUF,OAAOG,EAAE;YACnBP;YACAb,gBAAgBzC,KAAKC,GAAG,KAAKF;QAC/B;QAEA,MAAMwB,WAAWd,oBAAY,CAACC,IAAI,CAChC;YACEC,SAAS;YACT+B,MAAMgB;YACNf,WAAW3C,KAAKC,GAAG;YACnB2C,iBAAiB5C,KAAKC,GAAG,KAAKF;QAChC,GACA;YAAEc,QAAQ;QAAI;QAGhBW,IAAAA,gCAAmB,EAACD,UAAUT,iBAAiBE,+BAAkB,CAACoC,WAAW;QAC7E,OAAO7B;IACT,EAAE,OAAOX,OAAO;QACd,MAAM6B,iBAAiBzC,KAAKC,GAAG,KAAKF;QAEpCmB,cAAM,CAAC2B,WAAW,CAChBC,gBAAQ,CAACC,KAAK,EACd,0BACA;YACEC,WAAW;YACXC,UAAUR;YACVS,YAAY;QACd,GACA;YACEhD;QACF;QAGF,MAAMkC,yBAAgB,CAACC,aAAa,CAAC,yBAAyB,QAAQ,KAAKI,gBAAgB;YACzF7B,OAAO,AAACA,MAAgBuC,OAAO;QACjC;QAEA,OAAO1C,oBAAY,CAACC,IAAI,CACtB;YAAEC,SAAS;YAAOC,OAAO;QAA6B,GACtD;YAAEC,QAAQ;QAAI;IAElB;AACF;AAEA;;CAEC,GACD,eAAesB,eACbmB,IAAY,EACZzB,QAAwB,EACxBC,MAAsB,EACtBC,iBAA0B,KAAK;IAE/B,MAAM+B,WAAWC,IAAAA,2BAAiB;IAClC,IAAI,CAACD,UAAU;QACb,MAAM,IAAIE,MAAM;IAClB;IAEA,kDAAkD;IAClD,MAAMC,UAAUnC,SAAS,IAAI9B,KAAK8B,UAAU,IAAI9B;IAChD,MAAMkE,YAAYrC,WAAW,IAAI7B,KAAK6B,YAAY,IAAI7B,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK;IAE5F,IAAIkE,QAAQL,SACTM,IAAI,CAAC,UACLC,MAAM,CACL,CAAC;;;;;;;;;;;;;;;IAeH,CAAC,EAEAC,GAAG,CAAC,cAAcJ,UAAUK,WAAW,IACvCC,GAAG,CAAC,cAAcP,QAAQM,WAAW;IAExC,gCAAgC;IAChC,OAAQjB;QACN,KAAK;YACHa,QAAQA,MAAMM,EAAE,CAAC,kBAAkB;YACnC;QACF,KAAK;YAEH;QACF,KAAK;YACHN,QAAQA,MAAMO,EAAE,CAAC,UAAU;gBAAC;gBAAa;aAAa;YACtD;IACJ;IAEA,MAAM,EAAEhC,MAAMiC,MAAM,EAAE/D,KAAK,EAAE,GAAG,MAAMuD;IAEtC,IAAIvD,OAAO;QACT,MAAM,IAAIoD,MAAM,CAAC,wBAAwB,EAAEpD,MAAMuC,OAAO,EAAE;IAC5D;IAEA,uCAAuC;IACvC,MAAMyB,gBAAgBC,kBAAkBF,UAAU,EAAE,EAAErB;IAEtD,oCAAoC;IACpC,MAAMwB,UAAU/C,iBAAiBgD,uBAAuBJ,UAAU,EAAE,IAAIK;IAExE,OAAO;QACL1B;QACAC,WAAWW,UAAUK,WAAW;QAChCf,SAASS,QAAQM,WAAW;QAC5BhC,SAASqC;QACTE;QACAG,eAAeL,cAAcpC,MAAM;QACnC0C,cAAc,IAAIlF,OAAOuE,WAAW;IACtC;AACF;AAEA;;CAEC,GACD,SAASM,kBACPF,MAiBE,EACFrB,IAAY;IAEZ,OAAOqB,OAAOQ,GAAG,CAACC,CAAAA;QAChB,MAAMC,WAAW;YACfC,UAAUF,MAAMvB,EAAE;YAClB0B,QAAQH,MAAMI,YAAY;YAC1B3E,QAAQuE,MAAMK,cAAc,IAAIL,MAAMvE,MAAM;YAC5C6E,YAAYN,MAAMM,UAAU;YAC5BC,YAAYP,MAAMO,UAAU;QAC9B;QAEA,OAAQrC;YACN,KAAK;gBACH,OAAO;oBACL,GAAG+B,QAAQ;oBACXO,cAAcR,MAAMO,UAAU;oBAC9BE,YAAYT,MAAMI,YAAY,GAAG;oBACjCM,YAAYV,MAAMI,YAAY,GAAG;gBACnC;YAEF,KAAK;gBACH,OAAO;oBACL,GAAGH,QAAQ;oBACXU,kBAAkB;oBAClBC,gBAAgBZ,MAAMK,cAAc,KAAK,aAAaL,MAAMI,YAAY,GAAG;gBAC7E;YAEF,KAAK;gBACH,OAAO;oBACL,GAAGH,QAAQ;oBACXY,OACEb,MAAMc,WAAW,EAAEf,IACjB,CAACgB,OAaM,CAAA;4BACLC,MAAMD,KAAKE,QAAQ,EAAED;4BACrBE,UAAUH,KAAKG,QAAQ;4BACvBC,YAAYJ,KAAKI,UAAU;4BAC3BC,UAAUL,KAAKE,QAAQ,EAAEI;wBAC3B,CAAA,MACG,EAAE;oBACTC,aAAatB,MAAMc,WAAW,EAAE1D,UAAU;gBAC5C;YAEF;gBACE,OAAO6C;QACX;IACF;AACF;AAEA;;CAEC,GACD,SAASN,uBACPJ,MAGE;IAEF,MAAMgC,oBAAoBhC,OAAOnC,MAAM;IACvC,MAAMoE,qBAAqBjC,OAAOkC,MAAM,CAACC,CAAAA,IAAKA,EAAErB,cAAc,KAAK,YAAYjD,MAAM;IACrF,MAAMuE,iBAAiBpC,OAAOkC,MAAM,CAACC,CAAAA,IAAKA,EAAErB,cAAc,KAAK,YAAYjD,MAAM;IACjF,MAAMwE,cAAcrC,OAAOsC,MAAM,CAAC,CAACC,KAAKJ,IAAMI,MAAOJ,CAAAA,EAAEtB,YAAY,IAAI,CAAA,GAAI;IAE3E,OAAO;QACL2B,oBAAoBR;QACpBnB,cAAcwB;QACdI,qBAAqBR;QACrBS,iBAAiBN;QACjBO,SAAS;QACTC,aAAa;QACbC,gBAAgBb,oBAAoB,IAAIK,cAAcL,oBAAoB;QAC1Ec,iBAAiBd,oBAAoB,IAAI,AAACC,qBAAqBD,oBAAqB,MAAM;IAC5F;AACF;AAEA;;CAEC,GACD,eAAehD,wBACbL,IAAY,EACZzB,QAAgB,EAChBC,MAAc,EACd2B,OAAkB;IAElB,+EAA+E;IAC/E,8CAA8C;IAE9C,MAAMG,WAAW,CAAC,OAAO,EAAE5D,KAAKC,GAAG,GAAG,CAAC,EAAEyH,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;IAElF,OAAO;QACLhE,IAAID;QACJN,MAAMA;QACNC,WAAW1B;QACX2B,SAAS1B;QACTjB,QAAQ;QACR6E,YAAY,IAAI1F,OAAOuE,WAAW;IACpC;AACF"}