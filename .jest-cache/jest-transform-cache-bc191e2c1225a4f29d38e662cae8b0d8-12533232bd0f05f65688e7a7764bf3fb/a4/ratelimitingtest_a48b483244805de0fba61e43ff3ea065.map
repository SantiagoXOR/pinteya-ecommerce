{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\lib\\rate-limiting.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS: Rate Limiting Middleware\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { \r\n  createRateLimiter, \r\n  withRateLimit, \r\n  RATE_LIMIT_CONFIGS,\r\n  RateLimitConfig \r\n} from '@/lib/rate-limiting/rate-limiter';\r\n\r\ninterface MockNextRequest {\r\n  ip: string;\r\n  method: string;\r\n  headers: Map<string, string>;\r\n  url: string;\r\n}\r\n\r\n// Mock de NextRequest\r\nfunction createMockRequest(ip: string = '127.0.0.1', method: string = 'GET'): NextRequest {\r\n  return {\r\n    ip,\r\n    method,\r\n    headers: new Map([\r\n      ['x-forwarded-for', ip],\r\n      ['user-agent', 'test-agent']\r\n    ]),\r\n    url: 'http://localhost:3000/api/test',\r\n  } as MockNextRequest as NextRequest;\r\n}\r\n\r\ndescribe('Rate Limiting Middleware', () => {\r\n  beforeEach(() => {\r\n    // Limpiar el store de memoria antes de cada test\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('createRateLimiter', () => {\r\n    it('should create a rate limiter with correct configuration', () => {\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 10,\r\n        message: 'Rate limit exceeded'\r\n      };\r\n\r\n      const limiter = createRateLimiter(config);\r\n      expect(limiter).toBeDefined();\r\n      expect(typeof limiter).toBe('function');\r\n    });\r\n\r\n    it('should use default configuration when not provided', () => {\r\n      const limiter = createRateLimiter();\r\n      expect(limiter).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('withRateLimit', () => {\r\n    it('should allow requests within rate limit', async () => {\r\n      const request = createMockRequest();\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 5,\r\n        message: 'Too many requests'\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      const result = await withRateLimit(request, config, mockHandler);\r\n\r\n      expect(mockHandler).toHaveBeenCalled();\r\n      expect(result).toBe('success');\r\n    });\r\n\r\n    it('should block requests exceeding rate limit', async () => {\r\n      const request = createMockRequest('192.168.1.1');\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 1,\r\n        message: 'Rate limit exceeded'\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      // Primera request - debería pasar\r\n      const result1 = await withRateLimit(request, config, mockHandler);\r\n      expect(result1).toBe('success');\r\n\r\n      // Segunda request - debería ser bloqueada\r\n      const result2 = await withRateLimit(request, config, mockHandler);\r\n      expect(result2).toBeInstanceOf(NextResponse);\r\n      \r\n      if (result2 instanceof NextResponse) {\r\n        expect(result2.status).toBe(429);\r\n      }\r\n    });\r\n\r\n    it('should handle different IPs independently', async () => {\r\n      const request1 = createMockRequest('192.168.1.1');\r\n      const request2 = createMockRequest('192.168.1.2');\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 1,\r\n        message: 'Rate limit exceeded',\r\n        keyGenerator: (req) => {\r\n          const forwarded = req.headers.get('x-forwarded-for');\r\n          const ip = forwarded ? forwarded.split(',')[0] : req.headers.get('x-real-ip') || 'unknown';\r\n          return `ip:${ip}`;\r\n        }\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      // Ambas requests deberían pasar ya que son de IPs diferentes\r\n      const result1 = await withRateLimit(request1, config, mockHandler);\r\n      const result2 = await withRateLimit(request2, config, mockHandler);\r\n\r\n      expect(result1).toBe('success');\r\n      expect(result2).toBe('success');\r\n      expect(mockHandler).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it('should reset rate limit after window expires', async () => {\r\n      const request = createMockRequest('192.168.1.3');\r\n      const config: RateLimitConfig = {\r\n        windowMs: 100, // 100ms window\r\n        maxRequests: 1,\r\n        message: 'Rate limit exceeded'\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      // Primera request\r\n      const result1 = await withRateLimit(request, config, mockHandler);\r\n      expect(result1).toBe('success');\r\n\r\n      // Segunda request inmediata - debería ser bloqueada\r\n      const result2 = await withRateLimit(request, config, mockHandler);\r\n      expect(result2).toBeInstanceOf(NextResponse);\r\n\r\n      // Esperar que expire la ventana\r\n      await new Promise(resolve => setTimeout(resolve, 150));\r\n\r\n      // Tercera request después de expirar - debería pasar\r\n      const result3 = await withRateLimit(request, config, mockHandler);\r\n      expect(result3).toBe('success');\r\n    });\r\n\r\n    it('should handle errors in handler gracefully', async () => {\r\n      const request = createMockRequest();\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 5,\r\n        message: 'Too many requests'\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockRejectedValue(new Error('Handler error'));\r\n\r\n      await expect(withRateLimit(request, config, mockHandler)).rejects.toThrow('Handler error');\r\n    });\r\n  });\r\n\r\n  describe('RATE_LIMIT_CONFIGS', () => {\r\n    it('should have all required configurations', () => {\r\n      expect(RATE_LIMIT_CONFIGS.products).toBeDefined();\r\n      expect(RATE_LIMIT_CONFIGS.auth).toBeDefined();\r\n      expect(RATE_LIMIT_CONFIGS.admin).toBeDefined();\r\n      expect(RATE_LIMIT_CONFIGS.creation).toBeDefined();\r\n      expect(RATE_LIMIT_CONFIGS.payment).toBeDefined();\r\n      expect(RATE_LIMIT_CONFIGS.webhook).toBeDefined();\r\n    });\r\n\r\n    it('should have valid configuration values', () => {\r\n      Object.values(RATE_LIMIT_CONFIGS).forEach(config => {\r\n        expect(config.windowMs).toBeGreaterThan(0);\r\n        expect(config.maxRequests).toBeGreaterThan(0);\r\n        expect(typeof config.message).toBe('string');\r\n        expect(config.message.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('should have appropriate limits for different endpoints', () => {\r\n      // Products API debería tener límites más altos (lectura)\r\n      expect(RATE_LIMIT_CONFIGS.products.maxRequests).toBeGreaterThan(\r\n        RATE_LIMIT_CONFIGS.creation.maxRequests\r\n      );\r\n\r\n      // Auth debería tener límites más estrictos\r\n      expect(RATE_LIMIT_CONFIGS.auth.maxRequests).toBeLessThan(\r\n        RATE_LIMIT_CONFIGS.products.maxRequests\r\n      );\r\n\r\n      // Webhooks deberían tener ventanas más cortas\r\n      expect(RATE_LIMIT_CONFIGS.webhook.windowMs).toBeLessThan(\r\n        RATE_LIMIT_CONFIGS.products.windowMs\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('IP extraction', () => {\r\n    it('should extract IP from x-forwarded-for header', async () => {\r\n      const request = {\r\n        method: 'GET',\r\n        headers: new Map([\r\n          ['x-forwarded-for', '203.0.113.1, 198.51.100.1'],\r\n          ['user-agent', 'test-agent']\r\n        ]),\r\n        url: 'http://localhost:3000/api/test',\r\n      } as MockNextRequest as NextRequest;\r\n\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 1,\r\n        message: 'Rate limit exceeded'\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      // Primera request\r\n      await withRateLimit(request, config, mockHandler);\r\n      \r\n      // Segunda request con la misma IP debería ser bloqueada\r\n      const result = await withRateLimit(request, config, mockHandler);\r\n      expect(result).toBeInstanceOf(NextResponse);\r\n    });\r\n\r\n    it('should fallback to x-real-ip header', async () => {\r\n      const request = {\r\n        method: 'GET',\r\n        headers: new Map([\r\n          ['x-real-ip', '203.0.113.2'],\r\n          ['user-agent', 'test-agent']\r\n        ]),\r\n        url: 'http://localhost:3000/api/test',\r\n      } as MockNextRequest as NextRequest;\r\n\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 1,\r\n        message: 'Rate limit exceeded'\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      // Primera request\r\n      await withRateLimit(request, config, mockHandler);\r\n      \r\n      // Segunda request con la misma IP debería ser bloqueada\r\n      const result = await withRateLimit(request, config, mockHandler);\r\n      expect(result).toBeInstanceOf(NextResponse);\r\n    });\r\n\r\n    it('should use unknown IP when headers are missing', async () => {\r\n      const request = {\r\n        method: 'GET',\r\n        headers: new Map([\r\n          ['user-agent', 'test-agent']\r\n        ]),\r\n        url: 'http://localhost:3000/api/test',\r\n      } as MockNextRequest as NextRequest;\r\n\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 1,\r\n        message: 'Rate limit exceeded'\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      const result = await withRateLimit(request, config, mockHandler);\r\n      expect(result).toBe('success');\r\n    });\r\n  });\r\n\r\n  describe('Rate limit response format', () => {\r\n    it('should return proper JSON response when rate limited', async () => {\r\n      const request = createMockRequest('192.168.1.4');\r\n      const config: RateLimitConfig = {\r\n        windowMs: 60000,\r\n        maxRequests: 1,\r\n        message: 'Custom rate limit message',\r\n        headers: true,\r\n        legacyHeaders: true,\r\n        standardHeaders: true\r\n      };\r\n\r\n      const mockHandler = jest.fn().mockResolvedValue('success');\r\n\r\n      // Primera request\r\n      await withRateLimit(request, config, mockHandler);\r\n      \r\n      // Segunda request - debería ser bloqueada\r\n      const result = await withRateLimit(request, config, mockHandler);\r\n      \r\n      if (result instanceof NextResponse) {\r\n        expect(result.status).toBe(429);\r\n\r\n        // Verificar que es una respuesta de rate limit\r\n        const body = await result.text();\r\n        const parsedBody = JSON.parse(body);\r\n        expect(parsedBody.error).toBe('Rate limit exceeded');\r\n        expect(parsedBody.message).toBe('Custom rate limit message');\r\n      }\r\n    });\r\n  });\r\n});\r\n"],"names":["createMockRequest","ip","method","headers","Map","url","describe","beforeEach","jest","clearAllMocks","it","config","windowMs","maxRequests","message","limiter","createRateLimiter","expect","toBeDefined","toBe","request","mockHandler","fn","mockResolvedValue","result","withRateLimit","toHaveBeenCalled","result1","result2","toBeInstanceOf","NextResponse","status","request1","request2","keyGenerator","req","forwarded","get","split","toHaveBeenCalledTimes","Promise","resolve","setTimeout","result3","mockRejectedValue","Error","rejects","toThrow","RATE_LIMIT_CONFIGS","products","auth","admin","creation","payment","webhook","Object","values","forEach","toBeGreaterThan","length","toBeLessThan","legacyHeaders","standardHeaders","body","text","parsedBody","JSON","parse","error"],"mappings":"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"}