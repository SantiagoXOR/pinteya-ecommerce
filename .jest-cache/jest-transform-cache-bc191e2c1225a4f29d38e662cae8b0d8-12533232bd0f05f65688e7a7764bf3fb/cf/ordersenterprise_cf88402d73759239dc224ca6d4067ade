53334f076442940dbe34b0deebb60a18
// ===================================
// PINTEYA E-COMMERCE - ORDERS ENTERPRISE UTILITIES
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get calculateAverageStateTime () {
        return calculateAverageStateTime;
    },
    get calculateOrderMetrics () {
        return calculateOrderMetrics;
    },
    get filterOrders () {
        return filterOrders;
    },
    get formatOrderStatus () {
        return formatOrderStatus;
    },
    get formatPaymentStatus () {
        return formatPaymentStatus;
    },
    get generateStatusChangeMessage () {
        return generateStatusChangeMessage;
    },
    get getAvailableTransitions () {
        return getAvailableTransitions;
    },
    get ordersToCSV () {
        return ordersToCSV;
    },
    get shouldNotifyCustomer () {
        return shouldNotifyCustomer;
    },
    get sortOrders () {
        return sortOrders;
    },
    get statusRequiresAdditionalInfo () {
        return statusRequiresAdditionalInfo;
    },
    get validateOrderData () {
        return validateOrderData;
    },
    get validateStateTransition () {
        return validateStateTransition;
    }
});
const _ordersenterprise = require("../types/orders-enterprise");
function validateStateTransition(currentStatus, newStatus) {
    if (currentStatus === newStatus) {
        return {
            valid: false,
            message: 'El estado ya es el mismo',
            allowedTransitions: _ordersenterprise.ORDER_STATE_TRANSITIONS[currentStatus] || []
        };
    }
    const allowedTransitions = _ordersenterprise.ORDER_STATE_TRANSITIONS[currentStatus];
    if (!allowedTransitions || !allowedTransitions.includes(newStatus)) {
        return {
            valid: false,
            message: `Transición no permitida: ${_ordersenterprise.ORDER_STATUS_DESCRIPTIONS[currentStatus]} → ${_ordersenterprise.ORDER_STATUS_DESCRIPTIONS[newStatus]}`,
            allowedTransitions: allowedTransitions || []
        };
    }
    return {
        valid: true,
        allowedTransitions: allowedTransitions || []
    };
}
function getAvailableTransitions(currentStatus) {
    const transitions = _ordersenterprise.ORDER_STATE_TRANSITIONS[currentStatus] || [];
    return transitions.map((status)=>({
            status,
            description: _ordersenterprise.ORDER_STATUS_DESCRIPTIONS[status],
            requiresReason: [
                'cancelled',
                'refunded',
                'returned'
            ].includes(status)
        }));
}
function statusRequiresAdditionalInfo(status) {
    return {
        requiresTracking: [
            'shipped'
        ].includes(status),
        requiresCarrier: [
            'shipped'
        ].includes(status),
        requiresReason: [
            'cancelled',
            'refunded',
            'returned'
        ].includes(status),
        requiresEstimatedDelivery: [
            'shipped'
        ].includes(status)
    };
}
function formatOrderStatus(status) {
    const statusMap = {
        pending: {
            label: 'Pendiente',
            color: 'yellow',
            description: 'Esperando confirmación',
            icon: 'clock'
        },
        confirmed: {
            label: 'Confirmada',
            color: 'blue',
            description: 'Confirmada, preparando pedido',
            icon: 'check-circle'
        },
        processing: {
            label: 'Procesando',
            color: 'orange',
            description: 'En proceso de preparación',
            icon: 'cog'
        },
        shipped: {
            label: 'Enviada',
            color: 'purple',
            description: 'Producto en camino',
            icon: 'truck'
        },
        delivered: {
            label: 'Entregada',
            color: 'green',
            description: 'Producto entregado exitosamente',
            icon: 'check'
        },
        cancelled: {
            label: 'Cancelada',
            color: 'red',
            description: 'Orden cancelada',
            icon: 'x-circle'
        },
        refunded: {
            label: 'Reembolsada',
            color: 'gray',
            description: 'Dinero reembolsado',
            icon: 'arrow-left'
        },
        returned: {
            label: 'Devuelta',
            color: 'amber',
            description: 'Producto devuelto',
            icon: 'arrow-up'
        }
    };
    return statusMap[status] || statusMap.pending;
}
function formatPaymentStatus(status) {
    const statusMap = {
        pending: {
            label: 'Pendiente',
            color: 'yellow',
            description: 'Esperando pago'
        },
        paid: {
            label: 'Pagado',
            color: 'green',
            description: 'Pago confirmado'
        },
        failed: {
            label: 'Falló',
            color: 'red',
            description: 'Error en el pago'
        },
        refunded: {
            label: 'Reembolsado',
            color: 'gray',
            description: 'Dinero devuelto'
        }
    };
    return statusMap[status] || statusMap.pending;
}
function calculateAverageStateTime(statusHistory) {
    const stateTimes = {};
    for(let i = 0; i < statusHistory.length - 1; i++){
        const current = statusHistory[i];
        const next = statusHistory[i + 1];
        const timeInState = new Date(next.created_at).getTime() - new Date(current.created_at).getTime();
        const stateKey = `${current.new_status}_to_${next.new_status}`;
        if (!stateTimes[stateKey]) {
            stateTimes[stateKey] = [];
        }
        stateTimes[stateKey].push(timeInState);
    }
    const averages = {};
    for (const [key, times] of Object.entries(stateTimes)){
        averages[key] = times.reduce((sum, time)=>sum + time, 0) / times.length;
    }
    return averages;
}
function calculateOrderMetrics(order) {
    const totalItems = order.order_items?.reduce((sum, item)=>sum + item.quantity, 0) || 0;
    const averageItemPrice = totalItems > 0 ? order.total / totalItems : 0;
    let processingTime;
    let deliveryTime;
    if (order.status_history && order.status_history.length > 0) {
        const confirmedTime = order.status_history.find((h)=>h.new_status === 'confirmed')?.created_at;
        const shippedTime = order.status_history.find((h)=>h.new_status === 'shipped')?.created_at;
        const deliveredTime = order.status_history.find((h)=>h.new_status === 'delivered')?.created_at;
        if (confirmedTime && shippedTime) {
            processingTime = new Date(shippedTime).getTime() - new Date(confirmedTime).getTime();
        }
        if (shippedTime && deliveredTime) {
            deliveryTime = new Date(deliveredTime).getTime() - new Date(shippedTime).getTime();
        }
    }
    return {
        totalItems,
        averageItemPrice,
        processingTime,
        deliveryTime
    };
}
function filterOrders(orders, filters) {
    return orders.filter((order)=>{
        // Filtro por estado
        if (filters.status && order.status !== filters.status) {
            return false;
        }
        // Filtro por estado de pago
        if (filters.paymentStatus && order.payment_status !== filters.paymentStatus) {
            return false;
        }
        // Filtro por fecha desde
        if (filters.dateFrom && new Date(order.created_at) < new Date(filters.dateFrom)) {
            return false;
        }
        // Filtro por fecha hasta
        if (filters.dateTo && new Date(order.created_at) > new Date(filters.dateTo)) {
            return false;
        }
        // Filtro por monto mínimo
        if (filters.minAmount && order.total < filters.minAmount) {
            return false;
        }
        // Filtro por monto máximo
        if (filters.maxAmount && order.total > filters.maxAmount) {
            return false;
        }
        // Filtro por búsqueda de texto
        if (filters.search) {
            const searchLower = filters.search.toLowerCase();
            const searchableText = [
                order.order_number,
                order.user_profiles?.name,
                order.user_profiles?.email,
                order.notes,
                order.admin_notes
            ].filter(Boolean).join(' ').toLowerCase();
            if (!searchableText.includes(searchLower)) {
                return false;
            }
        }
        return true;
    });
}
function sortOrders(orders, sortBy, sortOrder = 'desc') {
    return [
        ...orders
    ].sort((a, b)=>{
        let comparison = 0;
        switch(sortBy){
            case 'created_at':
                comparison = new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
                break;
            case 'total':
                comparison = a.total - b.total;
                break;
            case 'order_number':
                comparison = a.order_number.localeCompare(b.order_number);
                break;
            case 'status':
                comparison = a.status.localeCompare(b.status);
                break;
        }
        return sortOrder === 'asc' ? comparison : -comparison;
    });
}
function generateStatusChangeMessage(orderNumber, previousStatus, newStatus, trackingNumber) {
    const statusInfo = formatOrderStatus(newStatus);
    let message = `Tu orden ${orderNumber} ha cambiado a: ${statusInfo.label}`;
    if (newStatus === 'shipped' && trackingNumber) {
        message += `. Número de seguimiento: ${trackingNumber}`;
    }
    return message;
}
function shouldNotifyCustomer(previousStatus, newStatus) {
    // Notificar en cambios importantes para el cliente
    const notifiableTransitions = [
        'confirmed',
        'shipped',
        'delivered',
        'cancelled'
    ];
    return notifiableTransitions.includes(newStatus);
}
function validateOrderData(orderData) {
    const errors = [];
    if (orderData.total !== undefined && orderData.total <= 0) {
        errors.push('El monto total debe ser mayor a 0');
    }
    if (orderData.order_number && !/^ORD-\d+-[A-Z0-9]+$/.test(orderData.order_number)) {
        errors.push('Formato de número de orden inválido');
    }
    if (orderData.tracking_number && orderData.tracking_number.length < 3) {
        errors.push('Número de seguimiento muy corto');
    }
    return {
        valid: errors.length === 0,
        errors
    };
}
function ordersToCSV(orders) {
    const headers = [
        'Número de Orden',
        'Cliente',
        'Email',
        'Estado',
        'Estado de Pago',
        'Total',
        'Fecha de Creación',
        'Última Actualización'
    ];
    const rows = orders.map((order)=>[
            order.order_number,
            order.user_profiles?.name || '',
            order.user_profiles?.email || '',
            formatOrderStatus(order.status).label,
            formatPaymentStatus(order.payment_status).label,
            order.total.toString(),
            new Date(order.created_at).toLocaleDateString(),
            new Date(order.updated_at).toLocaleDateString()
        ]);
    return [
        headers,
        ...rows
    ].map((row)=>row.map((cell)=>`"${cell}"`).join(',')).join('\n');
}

//# sourceMappingURL=data:application/json;base64,