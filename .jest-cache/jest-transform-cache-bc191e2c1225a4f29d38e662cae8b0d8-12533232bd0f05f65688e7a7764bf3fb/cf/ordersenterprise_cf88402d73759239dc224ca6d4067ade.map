{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\orders-enterprise.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ORDERS ENTERPRISE UTILITIES\n// ===================================\n\nimport {\n  OrderStatus,\n  PaymentStatus,\n  ORDER_STATE_TRANSITIONS,\n  ORDER_STATUS_DESCRIPTIONS,\n  StateTransitionValidation,\n  OrderEnterprise,\n  OrderStatusHistory,\n  OrderNote,\n} from '@/types/orders-enterprise'\n\n// ===================================\n// VALIDACIONES DE ESTADO\n// ===================================\n\n/**\n * Valida si una transición de estado es permitida\n */\nexport function validateStateTransition(\n  currentStatus: OrderStatus,\n  newStatus: OrderStatus\n): StateTransitionValidation {\n  if (currentStatus === newStatus) {\n    return {\n      valid: false,\n      message: 'El estado ya es el mismo',\n      allowedTransitions: ORDER_STATE_TRANSITIONS[currentStatus] || [],\n    }\n  }\n\n  const allowedTransitions = ORDER_STATE_TRANSITIONS[currentStatus]\n  if (!allowedTransitions || !allowedTransitions.includes(newStatus)) {\n    return {\n      valid: false,\n      message: `Transición no permitida: ${ORDER_STATUS_DESCRIPTIONS[currentStatus]} → ${ORDER_STATUS_DESCRIPTIONS[newStatus]}`,\n      allowedTransitions: allowedTransitions || [],\n    }\n  }\n\n  return {\n    valid: true,\n    allowedTransitions: allowedTransitions || [],\n  }\n}\n\n/**\n * Obtiene las transiciones disponibles para un estado\n */\nexport function getAvailableTransitions(currentStatus: OrderStatus): {\n  status: OrderStatus\n  description: string\n  requiresReason: boolean\n}[] {\n  const transitions = ORDER_STATE_TRANSITIONS[currentStatus] || []\n\n  return transitions.map(status => ({\n    status,\n    description: ORDER_STATUS_DESCRIPTIONS[status],\n    requiresReason: ['cancelled', 'refunded', 'returned'].includes(status),\n  }))\n}\n\n/**\n * Verifica si un estado requiere información adicional\n */\nexport function statusRequiresAdditionalInfo(status: OrderStatus): {\n  requiresTracking: boolean\n  requiresCarrier: boolean\n  requiresReason: boolean\n  requiresEstimatedDelivery: boolean\n} {\n  return {\n    requiresTracking: ['shipped'].includes(status),\n    requiresCarrier: ['shipped'].includes(status),\n    requiresReason: ['cancelled', 'refunded', 'returned'].includes(status),\n    requiresEstimatedDelivery: ['shipped'].includes(status),\n  }\n}\n\n// ===================================\n// FORMATEO Y DISPLAY\n// ===================================\n\n/**\n * Formatea el estado de una orden para mostrar al usuario\n */\nexport function formatOrderStatus(status: OrderStatus): {\n  label: string\n  color: string\n  description: string\n  icon: string\n} {\n  const statusMap: Record<\n    OrderStatus,\n    { label: string; color: string; description: string; icon: string }\n  > = {\n    pending: {\n      label: 'Pendiente',\n      color: 'yellow',\n      description: 'Esperando confirmación',\n      icon: 'clock',\n    },\n    confirmed: {\n      label: 'Confirmada',\n      color: 'blue',\n      description: 'Confirmada, preparando pedido',\n      icon: 'check-circle',\n    },\n    processing: {\n      label: 'Procesando',\n      color: 'orange',\n      description: 'En proceso de preparación',\n      icon: 'cog',\n    },\n    shipped: {\n      label: 'Enviada',\n      color: 'purple',\n      description: 'Producto en camino',\n      icon: 'truck',\n    },\n    delivered: {\n      label: 'Entregada',\n      color: 'green',\n      description: 'Producto entregado exitosamente',\n      icon: 'check',\n    },\n    cancelled: {\n      label: 'Cancelada',\n      color: 'red',\n      description: 'Orden cancelada',\n      icon: 'x-circle',\n    },\n    refunded: {\n      label: 'Reembolsada',\n      color: 'gray',\n      description: 'Dinero reembolsado',\n      icon: 'arrow-left',\n    },\n    returned: {\n      label: 'Devuelta',\n      color: 'amber',\n      description: 'Producto devuelto',\n      icon: 'arrow-up',\n    },\n  }\n\n  return statusMap[status] || statusMap.pending\n}\n\n/**\n * Formatea el estado de pago\n */\nexport function formatPaymentStatus(status: PaymentStatus): {\n  label: string\n  color: string\n  description: string\n} {\n  const statusMap: Record<PaymentStatus, { label: string; color: string; description: string }> = {\n    pending: {\n      label: 'Pendiente',\n      color: 'yellow',\n      description: 'Esperando pago',\n    },\n    paid: {\n      label: 'Pagado',\n      color: 'green',\n      description: 'Pago confirmado',\n    },\n    failed: {\n      label: 'Falló',\n      color: 'red',\n      description: 'Error en el pago',\n    },\n    refunded: {\n      label: 'Reembolsado',\n      color: 'gray',\n      description: 'Dinero devuelto',\n    },\n  }\n\n  return statusMap[status] || statusMap.pending\n}\n\n// ===================================\n// CÁLCULOS Y MÉTRICAS\n// ===================================\n\n/**\n * Calcula el tiempo promedio entre estados\n */\nexport function calculateAverageStateTime(\n  statusHistory: OrderStatusHistory[]\n): Record<string, number> {\n  const stateTimes: Record<string, number[]> = {}\n\n  for (let i = 0; i < statusHistory.length - 1; i++) {\n    const current = statusHistory[i]\n    const next = statusHistory[i + 1]\n\n    const timeInState = new Date(next.created_at).getTime() - new Date(current.created_at).getTime()\n    const stateKey = `${current.new_status}_to_${next.new_status}`\n\n    if (!stateTimes[stateKey]) {\n      stateTimes[stateKey] = []\n    }\n    stateTimes[stateKey].push(timeInState)\n  }\n\n  const averages: Record<string, number> = {}\n  for (const [key, times] of Object.entries(stateTimes)) {\n    averages[key] = times.reduce((sum, time) => sum + time, 0) / times.length\n  }\n\n  return averages\n}\n\n/**\n * Calcula métricas de una orden\n */\nexport function calculateOrderMetrics(order: OrderEnterprise): {\n  totalItems: number\n  averageItemPrice: number\n  processingTime?: number\n  deliveryTime?: number\n} {\n  const totalItems = order.order_items?.reduce((sum, item) => sum + item.quantity, 0) || 0\n  const averageItemPrice = totalItems > 0 ? order.total / totalItems : 0\n\n  let processingTime: number | undefined\n  let deliveryTime: number | undefined\n\n  if (order.status_history && order.status_history.length > 0) {\n    const confirmedTime = order.status_history.find(h => h.new_status === 'confirmed')?.created_at\n    const shippedTime = order.status_history.find(h => h.new_status === 'shipped')?.created_at\n    const deliveredTime = order.status_history.find(h => h.new_status === 'delivered')?.created_at\n\n    if (confirmedTime && shippedTime) {\n      processingTime = new Date(shippedTime).getTime() - new Date(confirmedTime).getTime()\n    }\n\n    if (shippedTime && deliveredTime) {\n      deliveryTime = new Date(deliveredTime).getTime() - new Date(shippedTime).getTime()\n    }\n  }\n\n  return {\n    totalItems,\n    averageItemPrice,\n    processingTime,\n    deliveryTime,\n  }\n}\n\n// ===================================\n// FILTROS Y BÚSQUEDA\n// ===================================\n\n/**\n * Filtra órdenes por criterios múltiples\n */\nexport function filterOrders(\n  orders: OrderEnterprise[],\n  filters: {\n    status?: OrderStatus\n    paymentStatus?: PaymentStatus\n    dateFrom?: string\n    dateTo?: string\n    search?: string\n    minAmount?: number\n    maxAmount?: number\n  }\n): OrderEnterprise[] {\n  return orders.filter(order => {\n    // Filtro por estado\n    if (filters.status && order.status !== filters.status) {\n      return false\n    }\n\n    // Filtro por estado de pago\n    if (filters.paymentStatus && order.payment_status !== filters.paymentStatus) {\n      return false\n    }\n\n    // Filtro por fecha desde\n    if (filters.dateFrom && new Date(order.created_at) < new Date(filters.dateFrom)) {\n      return false\n    }\n\n    // Filtro por fecha hasta\n    if (filters.dateTo && new Date(order.created_at) > new Date(filters.dateTo)) {\n      return false\n    }\n\n    // Filtro por monto mínimo\n    if (filters.minAmount && order.total < filters.minAmount) {\n      return false\n    }\n\n    // Filtro por monto máximo\n    if (filters.maxAmount && order.total > filters.maxAmount) {\n      return false\n    }\n\n    // Filtro por búsqueda de texto\n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase()\n      const searchableText = [\n        order.order_number,\n        order.user_profiles?.name,\n        order.user_profiles?.email,\n        order.notes,\n        order.admin_notes,\n      ]\n        .filter(Boolean)\n        .join(' ')\n        .toLowerCase()\n\n      if (!searchableText.includes(searchLower)) {\n        return false\n      }\n    }\n\n    return true\n  })\n}\n\n/**\n * Ordena órdenes por criterio específico\n */\nexport function sortOrders(\n  orders: OrderEnterprise[],\n  sortBy: 'created_at' | 'total' | 'order_number' | 'status',\n  sortOrder: 'asc' | 'desc' = 'desc'\n): OrderEnterprise[] {\n  return [...orders].sort((a, b) => {\n    let comparison = 0\n\n    switch (sortBy) {\n      case 'created_at':\n        comparison = new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n        break\n      case 'total':\n        comparison = a.total - b.total\n        break\n      case 'order_number':\n        comparison = a.order_number.localeCompare(b.order_number)\n        break\n      case 'status':\n        comparison = a.status.localeCompare(b.status)\n        break\n    }\n\n    return sortOrder === 'asc' ? comparison : -comparison\n  })\n}\n\n// ===================================\n// UTILIDADES DE NOTIFICACIÓN\n// ===================================\n\n/**\n * Genera mensaje de notificación para cambio de estado\n */\nexport function generateStatusChangeMessage(\n  orderNumber: string,\n  previousStatus: OrderStatus,\n  newStatus: OrderStatus,\n  trackingNumber?: string\n): string {\n  const statusInfo = formatOrderStatus(newStatus)\n\n  let message = `Tu orden ${orderNumber} ha cambiado a: ${statusInfo.label}`\n\n  if (newStatus === 'shipped' && trackingNumber) {\n    message += `. Número de seguimiento: ${trackingNumber}`\n  }\n\n  return message\n}\n\n/**\n * Determina si se debe enviar notificación al cliente\n */\nexport function shouldNotifyCustomer(previousStatus: OrderStatus, newStatus: OrderStatus): boolean {\n  // Notificar en cambios importantes para el cliente\n  const notifiableTransitions = ['confirmed', 'shipped', 'delivered', 'cancelled']\n\n  return notifiableTransitions.includes(newStatus)\n}\n\n// ===================================\n// VALIDACIONES DE DATOS\n// ===================================\n\n/**\n * Valida datos de orden antes de crear/actualizar\n */\nexport function validateOrderData(orderData: Partial<OrderEnterprise>): {\n  valid: boolean\n  errors: string[]\n} {\n  const errors: string[] = []\n\n  if (orderData.total !== undefined && orderData.total <= 0) {\n    errors.push('El monto total debe ser mayor a 0')\n  }\n\n  if (orderData.order_number && !/^ORD-\\d+-[A-Z0-9]+$/.test(orderData.order_number)) {\n    errors.push('Formato de número de orden inválido')\n  }\n\n  if (orderData.tracking_number && orderData.tracking_number.length < 3) {\n    errors.push('Número de seguimiento muy corto')\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  }\n}\n\n// ===================================\n// EXPORTACIÓN DE DATOS\n// ===================================\n\n/**\n * Convierte órdenes a formato CSV\n */\nexport function ordersToCSV(orders: OrderEnterprise[]): string {\n  const headers = [\n    'Número de Orden',\n    'Cliente',\n    'Email',\n    'Estado',\n    'Estado de Pago',\n    'Total',\n    'Fecha de Creación',\n    'Última Actualización',\n  ]\n\n  const rows = orders.map(order => [\n    order.order_number,\n    order.user_profiles?.name || '',\n    order.user_profiles?.email || '',\n    formatOrderStatus(order.status).label,\n    formatPaymentStatus(order.payment_status).label,\n    order.total.toString(),\n    new Date(order.created_at).toLocaleDateString(),\n    new Date(order.updated_at).toLocaleDateString(),\n  ])\n\n  return [headers, ...rows].map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n')\n}\n"],"names":["calculateAverageStateTime","calculateOrderMetrics","filterOrders","formatOrderStatus","formatPaymentStatus","generateStatusChangeMessage","getAvailableTransitions","ordersToCSV","shouldNotifyCustomer","sortOrders","statusRequiresAdditionalInfo","validateOrderData","validateStateTransition","currentStatus","newStatus","valid","message","allowedTransitions","ORDER_STATE_TRANSITIONS","includes","ORDER_STATUS_DESCRIPTIONS","transitions","map","status","description","requiresReason","requiresTracking","requiresCarrier","requiresEstimatedDelivery","statusMap","pending","label","color","icon","confirmed","processing","shipped","delivered","cancelled","refunded","returned","paid","failed","statusHistory","stateTimes","i","length","current","next","timeInState","Date","created_at","getTime","stateKey","new_status","push","averages","key","times","Object","entries","reduce","sum","time","order","totalItems","order_items","item","quantity","averageItemPrice","total","processingTime","deliveryTime","status_history","confirmedTime","find","h","shippedTime","deliveredTime","orders","filters","filter","paymentStatus","payment_status","dateFrom","dateTo","minAmount","maxAmount","search","searchLower","toLowerCase","searchableText","order_number","user_profiles","name","email","notes","admin_notes","Boolean","join","sortBy","sortOrder","sort","a","b","comparison","localeCompare","orderNumber","previousStatus","trackingNumber","statusInfo","notifiableTransitions","orderData","errors","undefined","test","tracking_number","headers","rows","toString","toLocaleDateString","updated_at","row","cell"],"mappings":"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"}