{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-metrics.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ENTERPRISE METRICS SYSTEM\n// ===================================\n\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\nimport { getSupabaseClient } from '@/lib/supabase';\nimport { enterpriseAlertSystem, AlertLevel as AlertSystemLevel } from './alert-system';\n\n// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente\nlet CacheUtils: any = null;\nif (typeof window === 'undefined') {\n  // Solo en servidor\n  try {\n    CacheUtils = require('@/lib/cache-manager').CacheUtils;\n  } catch (error) {\n    console.warn('[EnterpriseMetrics] CacheUtils not available:', error);\n  }\n}\n\n// Tipos de métricas enterprise\nexport enum MetricType {\n  COUNTER = 'counter',           // Contador incremental\n  GAUGE = 'gauge',              // Valor actual\n  HISTOGRAM = 'histogram',       // Distribución de valores\n  TIMER = 'timer',              // Medición de tiempo\n  RATE = 'rate'                 // Tasa por unidad de tiempo\n}\n\n// Categorías de métricas de negocio\nexport enum BusinessMetricCategory {\n  PERFORMANCE = 'performance',\n  SECURITY = 'security',\n  BUSINESS = 'business',\n  INFRASTRUCTURE = 'infrastructure',\n  USER_EXPERIENCE = 'user_experience'\n}\n\n// Niveles de alerta\nexport enum AlertLevel {\n  INFO = 'info',\n  WARNING = 'warning',\n  CRITICAL = 'critical',\n  EMERGENCY = 'emergency'\n}\n\n// Métrica enterprise\nexport interface EnterpriseMetric {\n  id: string;\n  name: string;\n  type: MetricType;\n  category: BusinessMetricCategory;\n  value: number;\n  timestamp: string;\n  tags: Record<string, string>;\n  metadata?: Record<string, any>;\n  aggregationPeriod?: string; // '1m', '5m', '1h', '1d'\n}\n\n// Configuración de alerta\nexport interface AlertRule {\n  id: string;\n  metricName: string;\n  condition: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\n  threshold: number;\n  level: AlertLevel;\n  enabled: boolean;\n  cooldownMinutes: number;\n  description: string;\n  actions: AlertAction[];\n}\n\n// Acción de alerta\nexport interface AlertAction {\n  type: 'email' | 'webhook' | 'log' | 'slack';\n  config: Record<string, any>;\n}\n\n// Alerta activa\nexport interface ActiveAlert {\n  id: string;\n  ruleId: string;\n  metricName: string;\n  level: AlertLevel;\n  message: string;\n  value: number;\n  threshold: number;\n  triggeredAt: string;\n  resolvedAt?: string;\n  metadata?: Record<string, any>;\n}\n\n// Agregación temporal\nexport interface MetricAggregation {\n  period: string;\n  startTime: string;\n  endTime: string;\n  count: number;\n  sum: number;\n  avg: number;\n  min: number;\n  max: number;\n  p50: number;\n  p95: number;\n  p99: number;\n}\n\n/**\n * Sistema de Métricas Enterprise con agregación temporal y alertas\n */\nexport class EnterpriseMetricsCollector {\n  private static instance: EnterpriseMetricsCollector;\n  private alertRules: Map<string, AlertRule> = new Map();\n  private activeAlerts: Map<string, ActiveAlert> = new Map();\n  private metricsBuffer: EnterpriseMetric[] = [];\n  private flushInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.initializeDefaultAlerts();\n    this.startMetricsFlush();\n  }\n\n  static getInstance(): EnterpriseMetricsCollector {\n    if (!EnterpriseMetricsCollector.instance) {\n      EnterpriseMetricsCollector.instance = new EnterpriseMetricsCollector();\n    }\n    return EnterpriseMetricsCollector.instance;\n  }\n\n  /**\n   * Registra una métrica enterprise\n   */\n  async recordMetric(\n    name: string,\n    value: number,\n    type: MetricType = MetricType.GAUGE,\n    category: BusinessMetricCategory = BusinessMetricCategory.PERFORMANCE,\n    tags: Record<string, string> = {},\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    try {\n      const metric: EnterpriseMetric = {\n        id: this.generateMetricId(),\n        name,\n        type,\n        category,\n        value,\n        timestamp: new Date().toISOString(),\n        tags,\n        metadata\n      };\n\n      // Agregar a buffer para flush batch\n      this.metricsBuffer.push(metric);\n\n      // Verificar alertas\n      await this.checkAlerts(metric);\n\n      // Log para debugging\n      logger.debug(LogLevel.DEBUG, `Metric recorded: ${name}`, {\n        value,\n        type,\n        category,\n        tags\n      }, LogCategory.SYSTEM);\n\n    } catch (error) {\n      logger.error(LogLevel.ERROR, `Failed to record metric: ${name}`, {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        value,\n        type\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Métricas de performance específicas\n   */\n  async recordPerformanceMetric(\n    operation: string,\n    duration: number,\n    success: boolean,\n    tags: Record<string, string> = {}\n  ): Promise<void> {\n    await this.recordMetric(\n      `performance.${operation}.duration`,\n      duration,\n      MetricType.TIMER,\n      BusinessMetricCategory.PERFORMANCE,\n      { ...tags, success: success.toString() }\n    );\n\n    await this.recordMetric(\n      `performance.${operation}.count`,\n      1,\n      MetricType.COUNTER,\n      BusinessMetricCategory.PERFORMANCE,\n      { ...tags, success: success.toString() }\n    );\n  }\n\n  /**\n   * Métricas de negocio específicas\n   */\n  async recordBusinessMetric(\n    event: string,\n    value: number = 1,\n    tags: Record<string, string> = {}\n  ): Promise<void> {\n    await this.recordMetric(\n      `business.${event}`,\n      value,\n      MetricType.COUNTER,\n      BusinessMetricCategory.BUSINESS,\n      tags\n    );\n  }\n\n  /**\n   * Métricas de seguridad específicas\n   */\n  async recordSecurityMetric(\n    event: string,\n    severity: 'low' | 'medium' | 'high' | 'critical',\n    tags: Record<string, string> = {}\n  ): Promise<void> {\n    await this.recordMetric(\n      `security.${event}`,\n      1,\n      MetricType.COUNTER,\n      BusinessMetricCategory.SECURITY,\n      { ...tags, severity }\n    );\n  }\n\n  /**\n   * Métricas de experiencia de usuario\n   */\n  async recordUserExperienceMetric(\n    metric: string,\n    value: number,\n    userId?: string,\n    tags: Record<string, string> = {}\n  ): Promise<void> {\n    await this.recordMetric(\n      `ux.${metric}`,\n      value,\n      MetricType.GAUGE,\n      BusinessMetricCategory.USER_EXPERIENCE,\n      { ...tags, userId: userId || 'anonymous' }\n    );\n  }\n\n  /**\n   * Configura una regla de alerta\n   */\n  setAlertRule(rule: AlertRule): void {\n    this.alertRules.set(rule.id, rule);\n    logger.info(LogLevel.INFO, `Alert rule configured: ${rule.id}`, {\n      metricName: rule.metricName,\n      threshold: rule.threshold,\n      level: rule.level\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Verifica alertas para una métrica\n   */\n  private async checkAlerts(metric: EnterpriseMetric): Promise<void> {\n    for (const rule of this.alertRules.values()) {\n      if (!rule.enabled || rule.metricName !== metric.name) {\n        continue;\n      }\n\n      // Verificar si ya hay una alerta activa en cooldown\n      const existingAlert = Array.from(this.activeAlerts.values())\n        .find(alert => alert.ruleId === rule.id && !alert.resolvedAt);\n\n      if (existingAlert) {\n        const cooldownEnd = new Date(existingAlert.triggeredAt);\n        cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);\n        \n        if (new Date() < cooldownEnd) {\n          continue; // Aún en cooldown\n        }\n      }\n\n      // Evaluar condición\n      const triggered = this.evaluateCondition(metric.value, rule.condition, rule.threshold);\n\n      if (triggered) {\n        await this.triggerAlert(rule, metric);\n      }\n    }\n  }\n\n  /**\n   * Evalúa condición de alerta\n   */\n  private evaluateCondition(value: number, condition: string, threshold: number): boolean {\n    switch (condition) {\n      case 'gt': return value > threshold;\n      case 'gte': return value >= threshold;\n      case 'lt': return value < threshold;\n      case 'lte': return value <= threshold;\n      case 'eq': return value === threshold;\n      default: return false;\n    }\n  }\n\n  /**\n   * Dispara una alerta usando el sistema enterprise\n   */\n  private async triggerAlert(rule: AlertRule, metric: EnterpriseMetric): Promise<void> {\n    // Convertir nivel de alerta al sistema enterprise\n    const alertLevel = this.convertToAlertSystemLevel(rule.level);\n\n    // Usar el sistema de alertas enterprise\n    const alert = await enterpriseAlertSystem.triggerAlert(\n      rule.id,\n      rule.metricName,\n      metric.value,\n      `${rule.description} - Value: ${metric.value}, Threshold: ${rule.threshold}`\n    );\n\n    if (alert) {\n      // Mantener referencia local para compatibilidad\n      const localAlert: ActiveAlert = {\n        id: alert.id,\n        ruleId: alert.ruleId,\n        metricName: alert.metricName,\n        level: rule.level,\n        message: alert.message,\n        value: alert.value,\n        threshold: alert.threshold,\n        triggeredAt: alert.triggeredAt,\n        metadata: {\n          metric: metric,\n          rule: rule\n        }\n      };\n\n      this.activeAlerts.set(alert.id, localAlert);\n\n      // Log alerta\n      logger.warn(LogLevel.WARN, `Alert triggered via enterprise system: ${rule.id}`, {\n        alertId: alert.id,\n        level: alert.level,\n        metricName: alert.metricName,\n        value: alert.value,\n        threshold: alert.threshold\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Ejecuta acción de alerta\n   */\n  private async executeAlertAction(action: AlertAction, alert: ActiveAlert): Promise<void> {\n    try {\n      switch (action.type) {\n        case 'log':\n          logger.error(LogLevel.ERROR, `ALERT: ${alert.message}`, {\n            alertId: alert.id,\n            level: alert.level\n          }, LogCategory.SYSTEM);\n          break;\n\n        case 'webhook':\n          if (action.config.url) {\n            await fetch(action.config.url, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(alert)\n            });\n          }\n          break;\n\n        case 'email':\n          // TODO: Implementar envío de email\n          logger.info(LogLevel.INFO, `Email alert would be sent to: ${action.config.to}`, {\n            alertId: alert.id\n          }, LogCategory.SYSTEM);\n          break;\n\n        case 'slack':\n          // TODO: Implementar notificación Slack\n          logger.info(LogLevel.INFO, `Slack alert would be sent to: ${action.config.channel}`, {\n            alertId: alert.id\n          }, LogCategory.SYSTEM);\n          break;\n      }\n    } catch (error) {\n      logger.error(LogLevel.ERROR, `Failed to execute alert action: ${action.type}`, {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        alertId: alert.id\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Obtiene métricas agregadas\n   */\n  async getAggregatedMetrics(\n    metricName: string,\n    period: '1m' | '5m' | '1h' | '1d' | '7d',\n    startTime: string,\n    endTime: string\n  ): Promise<MetricAggregation[]> {\n    const cacheKey = `metrics:aggregated:${metricName}:${period}:${startTime}:${endTime}`;\n    \n    // ✅ CACHE CONDICIONAL: Solo usar cache en servidor\n    const fetchData = async () => {\n      const supabase = getSupabaseClient(true);\n\n      if (!supabase) {\n        throw new Error('Supabase client not available');\n      }\n\n      // Query con agregación SQL\n      const { data, error } = await supabase.rpc('aggregate_metrics', {\n        metric_name: metricName,\n        period_interval: period,\n        start_time: startTime,\n        end_time: endTime\n      });\n\n      if (error) {\n        throw new Error(`Failed to aggregate metrics: ${error.message}`);\n      }\n\n      return data || [];\n    };\n\n    // Usar cache solo si está disponible (servidor)\n    if (CacheUtils && typeof window === 'undefined') {\n      return CacheUtils.cacheMetricsAggregation(cacheKey, fetchData);\n    } else {\n      return fetchData();\n    }\n  }\n\n  /**\n   * Flush métricas a base de datos\n   */\n  private async flushMetrics(): Promise<void> {\n    if (this.metricsBuffer.length === 0) {\n      return;\n    }\n\n    try {\n      const metrics = [...this.metricsBuffer];\n      this.metricsBuffer = [];\n\n      const supabase = getSupabaseClient(true);\n      if (!supabase) {\n        logger.error(LogLevel.ERROR, 'Supabase client not available for metrics flush', {}, LogCategory.SYSTEM);\n        return;\n      }\n\n      const { error } = await supabase\n        .from('enterprise_metrics')\n        .insert(metrics.map(metric => ({\n          id: metric.id,\n          name: metric.name,\n          type: metric.type,\n          category: metric.category,\n          value: metric.value,\n          timestamp: metric.timestamp,\n          tags: metric.tags,\n          metadata: metric.metadata\n        })));\n\n      if (error) {\n        logger.error(LogLevel.ERROR, 'Failed to flush metrics to database', {\n          error: error.message,\n          metricsCount: metrics.length\n        }, LogCategory.SYSTEM);\n      } else {\n        logger.debug(LogLevel.DEBUG, `Flushed ${metrics.length} metrics to database`, {}, LogCategory.SYSTEM);\n      }\n\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Error during metrics flush', {\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Inicializa alertas por defecto\n   */\n  private initializeDefaultAlerts(): void {\n    // Alerta de response time alto\n    this.setAlertRule({\n      id: 'high_response_time',\n      metricName: 'performance.api.duration',\n      condition: 'gt',\n      threshold: 5000, // 5 segundos\n      level: AlertLevel.WARNING,\n      enabled: true,\n      cooldownMinutes: 5,\n      description: 'API response time is too high',\n      actions: [{ type: 'log', config: {} }]\n    });\n\n    // Alerta de error rate alto\n    this.setAlertRule({\n      id: 'high_error_rate',\n      metricName: 'performance.api.error_rate',\n      condition: 'gt',\n      threshold: 0.05, // 5%\n      level: AlertLevel.CRITICAL,\n      enabled: true,\n      cooldownMinutes: 2,\n      description: 'API error rate is too high',\n      actions: [{ type: 'log', config: {} }]\n    });\n\n    // Alerta de violaciones de seguridad\n    this.setAlertRule({\n      id: 'security_violations',\n      metricName: 'security.violation',\n      condition: 'gte',\n      threshold: 1,\n      level: AlertLevel.EMERGENCY,\n      enabled: true,\n      cooldownMinutes: 1,\n      description: 'Security violation detected',\n      actions: [{ type: 'log', config: {} }]\n    });\n  }\n\n  /**\n   * Inicia flush automático de métricas\n   */\n  private startMetricsFlush(): void {\n    this.flushInterval = setInterval(() => {\n      this.flushMetrics();\n    }, 30000); // Flush cada 30 segundos\n  }\n\n  /**\n   * Almacena alerta en base de datos\n   */\n  private async storeAlert(alert: ActiveAlert): Promise<void> {\n    try {\n      const supabase = getSupabaseClient(true);\n      if (!supabase) return;\n\n      await supabase.from('enterprise_alerts').insert({\n        id: alert.id,\n        rule_id: alert.ruleId,\n        metric_name: alert.metricName,\n        level: alert.level,\n        message: alert.message,\n        value: alert.value,\n        threshold: alert.threshold,\n        triggered_at: alert.triggeredAt,\n        resolved_at: alert.resolvedAt,\n        metadata: alert.metadata\n      });\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to store alert', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        alertId: alert.id\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Genera ID único para métrica\n   */\n  private generateMetricId(): string {\n    return `metric_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Convierte nivel de alerta al sistema enterprise\n   */\n  private convertToAlertSystemLevel(level: AlertLevel): AlertSystemLevel {\n    switch (level) {\n      case AlertLevel.INFO:\n        return AlertSystemLevel.INFO;\n      case AlertLevel.WARNING:\n        return AlertSystemLevel.WARNING;\n      case AlertLevel.CRITICAL:\n        return AlertSystemLevel.CRITICAL;\n      case AlertLevel.EMERGENCY:\n        return AlertSystemLevel.EMERGENCY;\n      default:\n        return AlertSystemLevel.INFO;\n    }\n  }\n\n  /**\n   * Genera ID único para alerta\n   */\n  private generateAlertId(): string {\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Limpia recursos\n   */\n  destroy(): void {\n    if (this.flushInterval) {\n      clearInterval(this.flushInterval);\n      this.flushInterval = null;\n    }\n    this.flushMetrics(); // Flush final\n  }\n}\n\n// Instancia singleton\nexport const enterpriseMetrics = EnterpriseMetricsCollector.getInstance();\n\n// Funciones de conveniencia\nexport const recordPerformanceMetric = enterpriseMetrics.recordPerformanceMetric.bind(enterpriseMetrics);\nexport const recordBusinessMetric = enterpriseMetrics.recordBusinessMetric.bind(enterpriseMetrics);\nexport const recordSecurityMetric = enterpriseMetrics.recordSecurityMetric.bind(enterpriseMetrics);\nexport const recordUserExperienceMetric = enterpriseMetrics.recordUserExperienceMetric.bind(enterpriseMetrics);\n"],"names":["AlertLevel","BusinessMetricCategory","EnterpriseMetricsCollector","MetricType","enterpriseMetrics","recordBusinessMetric","recordPerformanceMetric","recordSecurityMetric","recordUserExperienceMetric","CacheUtils","window","require","error","console","warn","alertRules","Map","activeAlerts","metricsBuffer","flushInterval","initializeDefaultAlerts","startMetricsFlush","getInstance","instance","recordMetric","name","value","type","category","tags","metadata","metric","id","generateMetricId","timestamp","Date","toISOString","push","checkAlerts","logger","debug","LogLevel","DEBUG","LogCategory","SYSTEM","ERROR","Error","message","operation","duration","success","toString","event","severity","userId","setAlertRule","rule","set","info","INFO","metricName","threshold","level","values","enabled","existingAlert","Array","from","find","alert","ruleId","resolvedAt","cooldownEnd","triggeredAt","setMinutes","getMinutes","cooldownMinutes","triggered","evaluateCondition","condition","triggerAlert","alertLevel","convertToAlertSystemLevel","enterpriseAlertSystem","description","localAlert","WARN","alertId","executeAlertAction","action","config","url","fetch","method","headers","body","JSON","stringify","to","channel","getAggregatedMetrics","period","startTime","endTime","cacheKey","fetchData","supabase","getSupabaseClient","data","rpc","metric_name","period_interval","start_time","end_time","cacheMetricsAggregation","flushMetrics","length","metrics","insert","map","metricsCount","actions","setInterval","storeAlert","rule_id","triggered_at","resolved_at","now","Math","random","substr","AlertSystemLevel","WARNING","CRITICAL","EMERGENCY","generateAlertId","destroy","clearInterval","bind"],"mappings":"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"}