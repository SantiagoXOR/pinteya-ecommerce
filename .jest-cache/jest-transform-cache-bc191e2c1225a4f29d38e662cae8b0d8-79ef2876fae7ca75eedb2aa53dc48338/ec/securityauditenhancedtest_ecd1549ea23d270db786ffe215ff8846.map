{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security-audit-enhanced.test.ts"],"sourcesContent":["/**\n * Tests para el sistema de auditoría de seguridad mejorado\n */\n\n// Mocks básicos\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          gte: jest.fn(() => ({\n            lte: jest.fn(() => ({\n              order: jest.fn(() => Promise.resolve({ data: [], error: null }))\n            }))\n          })),\n          order: jest.fn(() => Promise.resolve({ data: [], error: null }))\n        })),\n        gte: jest.fn(() => ({\n          order: jest.fn(() => Promise.resolve({ data: [], error: null }))\n        })),\n        order: jest.fn(() => Promise.resolve({ data: [], error: null }))\n      })),\n      insert: jest.fn(() => Promise.resolve({ error: null })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => Promise.resolve({ error: null }))\n      })),\n      delete: jest.fn(() => ({\n        lt: jest.fn(() => Promise.resolve({ data: [], error: null }))\n      }))\n    }))\n  }\n}));\n\njest.mock('@/lib/cache-manager', () => ({\n  CacheManager: {\n    getInstance: jest.fn(() => ({\n      get: jest.fn().mockResolvedValue(null),\n      set: jest.fn().mockResolvedValue(true),\n      delete: jest.fn().mockResolvedValue(true)\n    }))\n  },\n  CACHE_CONFIGS: {\n    USER_SESSION: { ttl: 600 }\n  }\n}));\n\njest.mock('./security-audit', () => ({\n  logSecurityEvent: jest.fn().mockResolvedValue(true)\n}));\n\nimport {\n  analyzeSecurityPatterns,\n  getSecurityMetrics,\n  generateSecurityReport,\n  getActiveSecurityAlerts,\n  updateSecurityAlert,\n  resolveSecurityAlert,\n  markAlertAsFalsePositive,\n  runSecurityHealthCheck,\n  cleanupOldSecurityEvents,\n  exportSecurityEvents,\n  DEFAULT_SECURITY_PATTERNS\n} from '@/lib/auth/security-audit-enhanced';\n\nimport { SecurityDashboard, getSecurityDashboard } from '@/lib/auth/security-dashboard';\n\ndescribe('Sistema de Auditoría de Seguridad Mejorado', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Funciones principales', () => {\n    it('debe tener todas las funciones definidas', () => {\n      expect(typeof analyzeSecurityPatterns).toBe('function');\n      expect(typeof getSecurityMetrics).toBe('function');\n      expect(typeof generateSecurityReport).toBe('function');\n      expect(typeof getActiveSecurityAlerts).toBe('function');\n      expect(typeof updateSecurityAlert).toBe('function');\n      expect(typeof resolveSecurityAlert).toBe('function');\n      expect(typeof markAlertAsFalsePositive).toBe('function');\n      expect(typeof runSecurityHealthCheck).toBe('function');\n      expect(typeof cleanupOldSecurityEvents).toBe('function');\n      expect(typeof exportSecurityEvents).toBe('function');\n    });\n\n    it('debe tener patrones de seguridad predefinidos', () => {\n      expect(Array.isArray(DEFAULT_SECURITY_PATTERNS)).toBe(true);\n      expect(DEFAULT_SECURITY_PATTERNS.length).toBeGreaterThan(0);\n      \n      DEFAULT_SECURITY_PATTERNS.forEach(pattern => {\n        expect(pattern).toHaveProperty('id');\n        expect(pattern).toHaveProperty('name');\n        expect(pattern).toHaveProperty('description');\n        expect(pattern).toHaveProperty('severity');\n        expect(pattern).toHaveProperty('conditions');\n        expect(pattern).toHaveProperty('timeWindow');\n        expect(pattern).toHaveProperty('threshold');\n        expect(pattern).toHaveProperty('enabled');\n        expect(pattern).toHaveProperty('actions');\n      });\n    });\n  });\n\n  describe('Análisis de patrones', () => {\n    it('debe ejecutar análisis sin errores', async () => {\n      const alerts = await analyzeSecurityPatterns();\n      \n      expect(Array.isArray(alerts)).toBe(true);\n    });\n\n    it('debe analizar patrones para usuario específico', async () => {\n      const alerts = await analyzeSecurityPatterns('user_123', 24);\n      \n      expect(Array.isArray(alerts)).toBe(true);\n    });\n\n    it('debe manejar errores gracefully', async () => {\n      // Test que verifica que no se lanzan excepciones no manejadas\n      await expect(analyzeSecurityPatterns('invalid_user')).resolves.toBeDefined();\n    });\n  });\n\n  describe('Métricas de seguridad', () => {\n    it('debe obtener métricas de seguridad', async () => {\n      const metrics = await getSecurityMetrics();\n      \n      expect(metrics).toBeDefined();\n      expect(typeof metrics.total_events_24h).toBe('number');\n      expect(typeof metrics.critical_events_24h).toBe('number');\n      expect(typeof metrics.unique_users_24h).toBe('number');\n      expect(typeof metrics.auth_failures_24h).toBe('number');\n      expect(typeof metrics.suspicious_activities_24h).toBe('number');\n      expect(typeof metrics.blocked_users).toBe('number');\n      expect(typeof metrics.active_alerts).toBe('number');\n      expect(typeof metrics.avg_response_time).toBe('number');\n      expect(typeof metrics.security_score).toBe('number');\n    });\n\n    it('debe retornar métricas válidas', async () => {\n      const metrics = await getSecurityMetrics();\n      \n      expect(metrics.security_score).toBeGreaterThanOrEqual(0);\n      expect(metrics.security_score).toBeLessThanOrEqual(100);\n      expect(metrics.total_events_24h).toBeGreaterThanOrEqual(0);\n      expect(metrics.critical_events_24h).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Reportes de seguridad', () => {\n    it('debe generar reporte de seguridad', async () => {\n      const startDate = new Date('2024-01-01');\n      const endDate = new Date('2024-01-02');\n      \n      const report = await generateSecurityReport(startDate, endDate);\n      \n      expect(report).toBeDefined();\n      expect(report).toHaveProperty('id');\n      expect(report).toHaveProperty('period_start');\n      expect(report).toHaveProperty('period_end');\n      expect(report).toHaveProperty('total_events');\n      expect(report).toHaveProperty('events_by_severity');\n      expect(report).toHaveProperty('events_by_category');\n      expect(report).toHaveProperty('top_users');\n      expect(report).toHaveProperty('top_ips');\n      expect(report).toHaveProperty('patterns_detected');\n      expect(report).toHaveProperty('recommendations');\n      expect(report).toHaveProperty('generated_at');\n    });\n\n    it('debe validar fechas del reporte', async () => {\n      const startDate = new Date('2024-01-01');\n      const endDate = new Date('2024-01-02');\n      \n      const report = await generateSecurityReport(startDate, endDate);\n      \n      expect(report.period_start).toBe(startDate.toISOString());\n      expect(report.period_end).toBe(endDate.toISOString());\n      expect(Array.isArray(report.recommendations)).toBe(true);\n    });\n  });\n\n  describe('Gestión de alertas', () => {\n    it('debe obtener alertas activas', async () => {\n      const alerts = await getActiveSecurityAlerts();\n      \n      expect(Array.isArray(alerts)).toBe(true);\n    });\n\n    it('debe filtrar alertas por usuario', async () => {\n      const alerts = await getActiveSecurityAlerts('user_123');\n      \n      expect(Array.isArray(alerts)).toBe(true);\n    });\n\n    it('debe filtrar alertas por severidad', async () => {\n      const alerts = await getActiveSecurityAlerts(undefined, 'high');\n      \n      expect(Array.isArray(alerts)).toBe(true);\n    });\n\n    it('debe actualizar estado de alerta', async () => {\n      const result = await updateSecurityAlert('alert_123', {\n        status: 'investigating'\n      });\n      \n      expect(typeof result).toBe('boolean');\n    });\n\n    it('debe resolver alerta', async () => {\n      const result = await resolveSecurityAlert(\n        'alert_123',\n        'Problema resuelto',\n        'admin_user'\n      );\n      \n      expect(typeof result).toBe('boolean');\n    });\n\n    it('debe marcar como falso positivo', async () => {\n      const result = await markAlertAsFalsePositive(\n        'alert_123',\n        'Falso positivo confirmado',\n        'admin_user'\n      );\n      \n      expect(typeof result).toBe('boolean');\n    });\n  });\n\n  describe('Verificación de salud', () => {\n    it('debe ejecutar verificación de salud', async () => {\n      const healthCheck = await runSecurityHealthCheck();\n      \n      expect(healthCheck).toBeDefined();\n      expect(healthCheck).toHaveProperty('status');\n      expect(healthCheck).toHaveProperty('issues');\n      expect(healthCheck).toHaveProperty('recommendations');\n      expect(healthCheck).toHaveProperty('metrics');\n      \n      expect(['healthy', 'warning', 'critical']).toContain(healthCheck.status);\n      expect(Array.isArray(healthCheck.issues)).toBe(true);\n      expect(Array.isArray(healthCheck.recommendations)).toBe(true);\n    });\n  });\n\n  describe('Utilidades', () => {\n    it('debe limpiar eventos antiguos', async () => {\n      const deletedCount = await cleanupOldSecurityEvents(90);\n      \n      expect(typeof deletedCount).toBe('number');\n      expect(deletedCount).toBeGreaterThanOrEqual(0);\n    });\n\n    it('debe exportar eventos en JSON', async () => {\n      const startDate = new Date('2024-01-01');\n      const endDate = new Date('2024-01-02');\n      \n      const exportData = await exportSecurityEvents(startDate, endDate, 'json');\n      \n      expect(typeof exportData).toBe('string');\n    });\n\n    it('debe exportar eventos en CSV', async () => {\n      const startDate = new Date('2024-01-01');\n      const endDate = new Date('2024-01-02');\n      \n      const exportData = await exportSecurityEvents(startDate, endDate, 'csv');\n      \n      expect(typeof exportData).toBe('string');\n    });\n  });\n\n  describe('Dashboard de Seguridad', () => {\n    it('debe crear instancia de dashboard', () => {\n      const dashboard = new SecurityDashboard();\n      \n      expect(dashboard).toBeDefined();\n      expect(typeof dashboard.start).toBe('function');\n      expect(typeof dashboard.stop).toBe('function');\n      expect(typeof dashboard.refreshData).toBe('function');\n      expect(typeof dashboard.getData).toBe('function');\n    });\n\n    it('debe obtener instancia singleton', () => {\n      const dashboard1 = getSecurityDashboard();\n      const dashboard2 = getSecurityDashboard();\n      \n      expect(dashboard1).toBe(dashboard2);\n    });\n\n    it('debe obtener estado del dashboard', () => {\n      const dashboard = new SecurityDashboard();\n      const status = dashboard.getStatus();\n      \n      expect(status).toBeDefined();\n      expect(status).toHaveProperty('isRunning');\n      expect(status).toHaveProperty('lastUpdate');\n      expect(status).toHaveProperty('config');\n      expect(status).toHaveProperty('uptime');\n      \n      expect(typeof status.isRunning).toBe('boolean');\n      expect(status.lastUpdate instanceof Date).toBe(true);\n      expect(typeof status.config).toBe('object');\n      expect(typeof status.uptime).toBe('number');\n    });\n\n    it('debe actualizar configuración', () => {\n      const dashboard = new SecurityDashboard();\n      const newConfig = { refreshInterval: 60 };\n      \n      dashboard.updateConfig(newConfig);\n      const status = dashboard.getStatus();\n      \n      expect(status.config.refreshInterval).toBe(60);\n    });\n  });\n\n  describe('Manejo de errores', () => {\n    it('debe manejar errores sin lanzar excepciones', async () => {\n      // Test que verifica que las funciones no lanzan errores no manejados\n      const promises = [\n        analyzeSecurityPatterns('invalid_user'),\n        getSecurityMetrics(),\n        generateSecurityReport(new Date(), new Date()),\n        getActiveSecurityAlerts(),\n        updateSecurityAlert('invalid_id', {}),\n        runSecurityHealthCheck(),\n        cleanupOldSecurityEvents(90),\n        exportSecurityEvents(new Date(), new Date())\n      ];\n\n      const results = await Promise.allSettled(promises);\n      \n      results.forEach((result, index) => {\n        expect(result.status).toBe('fulfilled');\n        expect(result.value).toBeDefined();\n      });\n    });\n  });\n});\n"],"names":["jest","mock","supabaseAdmin","from","fn","select","eq","gte","lte","order","Promise","resolve","data","error","insert","update","delete","lt","CacheManager","getInstance","get","mockResolvedValue","set","CACHE_CONFIGS","USER_SESSION","ttl","logSecurityEvent","describe","beforeEach","clearAllMocks","it","expect","analyzeSecurityPatterns","toBe","getSecurityMetrics","generateSecurityReport","getActiveSecurityAlerts","updateSecurityAlert","resolveSecurityAlert","markAlertAsFalsePositive","runSecurityHealthCheck","cleanupOldSecurityEvents","exportSecurityEvents","Array","isArray","DEFAULT_SECURITY_PATTERNS","length","toBeGreaterThan","forEach","pattern","toHaveProperty","alerts","resolves","toBeDefined","metrics","total_events_24h","critical_events_24h","unique_users_24h","auth_failures_24h","suspicious_activities_24h","blocked_users","active_alerts","avg_response_time","security_score","toBeGreaterThanOrEqual","toBeLessThanOrEqual","startDate","Date","endDate","report","period_start","toISOString","period_end","recommendations","undefined","result","status","healthCheck","toContain","issues","deletedCount","exportData","dashboard","SecurityDashboard","start","stop","refreshData","getData","dashboard1","getSecurityDashboard","dashboard2","getStatus","isRunning","lastUpdate","config","uptime","newConfig","refreshInterval","updateConfig","promises","results","allSettled","index","value"],"mappings":"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"}