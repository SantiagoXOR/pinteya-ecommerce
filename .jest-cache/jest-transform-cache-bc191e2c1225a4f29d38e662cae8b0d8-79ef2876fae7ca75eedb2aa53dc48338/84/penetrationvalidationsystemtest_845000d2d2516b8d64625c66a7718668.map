{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security\\penetration-validation-system.test.ts"],"sourcesContent":["/**\n * Tests de Penetración para Sistema de Validación Enterprise\n * Valida la robustez contra ataques de inyección, XSS, y bypass de validación\n */\n\n// Mock de dependencias\njest.mock('@/lib/security/enterprise-audit-system', () => ({\n  enterpriseAuditSystem: {\n    logEnterpriseEvent: jest.fn()\n  }\n}));\n\njest.mock('isomorphic-dompurify', () => ({\n  __esModule: true,\n  default: {\n    sanitize: jest.fn((input, options) => {\n      // Simular DOMPurify real\n      let cleaned = input;\n      if (options?.ALLOWED_TAGS?.length === 0) {\n        cleaned = cleaned.replace(/<[^>]*>/g, '');\n      }\n      cleaned = cleaned.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n      return cleaned;\n    })\n  }\n}));\n\njest.mock('validator', () => ({\n  __esModule: true,\n  default: {\n    escape: jest.fn((input) => \n      input.replace(/[<>&\"']/g, (char) => {\n        const entities: Record<string, string> = {\n          '<': '&lt;',\n          '>': '&gt;',\n          '&': '&amp;',\n          '\"': '&quot;',\n          \"'\": '&#x27;'\n        };\n        return entities[char] || char;\n      })\n    )\n  }\n}));\n\nimport { z } from 'zod';\nimport {\n  EnterpriseValidator,\n  EnterpriseSanitizer,\n  ENTERPRISE_VALIDATION_CONFIGS,\n  criticalValidator,\n  highValidator\n} from '@/lib/validation/enterprise-validation-system';\nimport {\n  EnterpriseEmailSchema,\n  EnterprisePasswordSchema,\n  EnterpriseProductSchema\n} from '@/lib/validation/enterprise-schemas';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\ndescribe('Tests de Penetración - Sistema de Validación Enterprise', () => {\n  let mockContext: EnterpriseAuthContext;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockContext = {\n      userId: 'test_user_123',\n      sessionId: 'test_session_123',\n      email: 'test@example.com',\n      role: 'admin',\n      permissions: ['admin_access'],\n      sessionValid: true,\n      securityLevel: 'critical',\n      ipAddress: '192.168.1.1',\n      userAgent: 'test-agent',\n      supabase: {} as any,\n      validations: {\n        jwtValid: true,\n        csrfValid: true,\n        rateLimitPassed: true,\n        originValid: true\n      }\n    };\n  });\n\n  describe('Ataques de Inyección SQL', () => {\n    it('debe detectar y bloquear inyecciones SQL básicas', async () => {\n      const sqlInjectionPayloads = [\n        \"'; DROP TABLE users; --\",\n        \"' OR '1'='1\",\n        \"' UNION SELECT * FROM admin_users --\",\n        \"'; INSERT INTO users (role) VALUES ('admin'); --\",\n        \"' AND 1=1 --\",\n        \"' OR 1=1 #\",\n        \"'; EXEC xp_cmdshell('dir'); --\",\n        \"' UNION ALL SELECT password FROM users WHERE '1'='1\",\n        \"'; UPDATE users SET role='admin' WHERE id=1; --\",\n        \"' OR EXISTS(SELECT * FROM users WHERE role='admin') --\"\n      ];\n\n      const schema = z.object({\n        search: z.string(),\n        filter: z.string()\n      });\n\n      let blockedCount = 0;\n      let allowedCount = 0;\n\n      for (const payload of sqlInjectionPayloads) {\n        const testData = {\n          search: payload,\n          filter: `category = '${payload}'`\n        };\n\n        const result = await criticalValidator.validateAndSanitize(\n          schema,\n          testData,\n          mockContext\n        );\n\n        if (!result.success) {\n          const hasSQLError = result.errors?.some(e => \n            e.code === 'SQL_INJECTION_DETECTED' || \n            e.message.includes('SQL') ||\n            e.message.includes('injection')\n          );\n          \n          if (hasSQLError) {\n            blockedCount++;\n          } else {\n            allowedCount++;\n          }\n        } else {\n          // Verificar que fue sanitizado\n          const sanitizedSearch = result.sanitized?.search || '';\n          const sanitizedFilter = result.sanitized?.filter || '';\n          \n          const containsSQLKeywords = \n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|EXEC)\\b/i.test(sanitizedSearch) ||\n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|EXEC)\\b/i.test(sanitizedFilter);\n          \n          if (containsSQLKeywords) {\n            allowedCount++; // Payload pasó sin sanitización adecuada\n          } else {\n            blockedCount++; // Payload fue sanitizado correctamente\n          }\n        }\n      }\n\n      // Verificar que la mayoría de inyecciones fueron bloqueadas/sanitizadas\n      expect(blockedCount).toBeGreaterThan(allowedCount);\n      expect(blockedCount).toBeGreaterThan(7); // Al menos 70% bloqueadas\n    });\n\n    it('debe detectar inyecciones SQL avanzadas y ofuscadas', async () => {\n      const advancedSQLPayloads = [\n        // Ofuscación con comentarios\n        \"'; /*comment*/ DROP /*comment*/ TABLE users; --\",\n        \n        // Codificación hexadecimal\n        \"'; SELECT 0x41646d696e; --\", // 'Admin' en hex\n        \n        // Bypass con espacios y tabs\n        \"';\\t\\nSELECT\\t*\\nFROM\\tusers\\tWHERE\\t'1'='1\",\n        \n        // Inyección con funciones\n        \"'; SELECT CHAR(65,68,77,73,78); --\", // 'ADMIN'\n        \n        // Bypass con concatenación\n        \"'; SELECT 'ad'+'min' FROM users; --\",\n        \n        // Inyección con subconsultas\n        \"' AND (SELECT COUNT(*) FROM users WHERE role='admin') > 0 --\",\n        \n        // Bypass con CASE statements\n        \"'; SELECT CASE WHEN (1=1) THEN 'admin' ELSE 'user' END; --\",\n        \n        // Time-based blind injection\n        \"'; WAITFOR DELAY '00:00:05'; --\",\n        \n        // Boolean-based blind injection\n        \"' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE id=1)='a\",\n        \n        // Error-based injection\n        \"' AND EXTRACTVALUE(1, CONCAT(0x7e, (SELECT password FROM users LIMIT 1), 0x7e)); --\"\n      ];\n\n      const schema = z.object({\n        query: z.string(),\n        params: z.string()\n      });\n\n      let detectedCount = 0;\n\n      for (const payload of advancedSQLPayloads) {\n        const testData = {\n          query: payload,\n          params: `param=${payload}`\n        };\n\n        const result = await criticalValidator.validateAndSanitize(\n          schema,\n          testData,\n          mockContext\n        );\n\n        // Verificar detección o sanitización\n        if (!result.success) {\n          const hasSQLDetection = result.errors?.some(e => \n            e.code === 'SQL_INJECTION_DETECTED' ||\n            e.severity === 'critical'\n          );\n          \n          if (hasSQLDetection) {\n            detectedCount++;\n          }\n        } else {\n          // Verificar sanitización efectiva\n          const sanitizedQuery = result.sanitized?.query || '';\n          const sanitizedParams = result.sanitized?.params || '';\n          \n          const stillContainsSQLPatterns = \n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|WAITFOR|EXTRACTVALUE)\\b/i.test(sanitizedQuery) ||\n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|WAITFOR|EXTRACTVALUE)\\b/i.test(sanitizedParams);\n          \n          if (!stillContainsSQLPatterns) {\n            detectedCount++; // Sanitización efectiva\n          }\n        }\n      }\n\n      // Verificar detección de inyecciones avanzadas\n      expect(detectedCount).toBeGreaterThan(7); // Al menos 70% detectadas\n    });\n  });\n\n  describe('Ataques XSS (Cross-Site Scripting)', () => {\n    it('debe detectar y bloquear XSS básicos', async () => {\n      const xssPayloads = [\n        '<script>alert(\"XSS\")</script>',\n        '<img src=\"x\" onerror=\"alert(1)\">',\n        '<svg onload=\"alert(1)\">',\n        '<iframe src=\"javascript:alert(1)\"></iframe>',\n        '<body onload=\"alert(1)\">',\n        '<div onclick=\"alert(1)\">Click me</div>',\n        '<a href=\"javascript:alert(1)\">Link</a>',\n        '<input type=\"text\" onfocus=\"alert(1)\" autofocus>',\n        '<marquee onstart=\"alert(1)\">',\n        '<video><source onerror=\"alert(1)\">'\n      ];\n\n      const schema = z.object({\n        content: z.string(),\n        description: z.string()\n      });\n\n      let blockedCount = 0;\n\n      for (const payload of xssPayloads) {\n        const testData = {\n          content: payload,\n          description: `User content: ${payload}`\n        };\n\n        const result = await criticalValidator.validateAndSanitize(\n          schema,\n          testData,\n          mockContext\n        );\n\n        if (!result.success) {\n          const hasXSSError = result.errors?.some(e => \n            e.code === 'XSS_DETECTED' ||\n            e.message.includes('XSS') ||\n            e.message.includes('script')\n          );\n          \n          if (hasXSSError) {\n            blockedCount++;\n          }\n        } else {\n          // Verificar sanitización\n          const sanitizedContent = result.sanitized?.content || '';\n          const sanitizedDescription = result.sanitized?.description || '';\n          \n          const containsXSSPatterns = \n            /<script/i.test(sanitizedContent) ||\n            /javascript:/i.test(sanitizedContent) ||\n            /on\\w+\\s*=/i.test(sanitizedContent) ||\n            /<script/i.test(sanitizedDescription) ||\n            /javascript:/i.test(sanitizedDescription) ||\n            /on\\w+\\s*=/i.test(sanitizedDescription);\n          \n          if (!containsXSSPatterns) {\n            blockedCount++; // Sanitización efectiva\n          }\n        }\n      }\n\n      // Verificar que la mayoría de XSS fueron bloqueados/sanitizados\n      expect(blockedCount).toBeGreaterThan(7); // Al menos 70% bloqueados\n    });\n\n    it('debe detectar XSS avanzados y ofuscados', async () => {\n      const advancedXSSPayloads = [\n        // Ofuscación con encoding\n        '%3Cscript%3Ealert(1)%3C/script%3E',\n        \n        // Bypass con mayúsculas/minúsculas\n        '<ScRiPt>alert(1)</ScRiPt>',\n        \n        // Bypass con espacios y tabs\n        '<script\\t>alert(1)</script>',\n        \n        // Bypass con comentarios HTML\n        '<script><!--alert(1)--></script>',\n        \n        // Bypass con caracteres nulos\n        '<script\\x00>alert(1)</script>',\n        \n        // Bypass con entidades HTML\n        '&lt;script&gt;alert(1)&lt;/script&gt;',\n        \n        // Bypass con atributos fragmentados\n        '<img src=\"x\" onerror=\"eval(String.fromCharCode(97,108,101,114,116,40,49,41))\">',\n        \n        // Bypass con eventos menos comunes\n        '<details open ontoggle=\"alert(1)\">',\n        \n        // Bypass con CSS\n        '<style>@import\"javascript:alert(1)\";</style>',\n        \n        // Bypass con SVG\n        '<svg><script>alert(1)</script></svg>'\n      ];\n\n      const schema = z.object({\n        userInput: z.string(),\n        htmlContent: z.string()\n      });\n\n      let detectedCount = 0;\n\n      for (const payload of advancedXSSPayloads) {\n        const testData = {\n          userInput: payload,\n          htmlContent: `<div>${payload}</div>`\n        };\n\n        const result = await criticalValidator.validateAndSanitize(\n          schema,\n          testData,\n          mockContext\n        );\n\n        if (!result.success) {\n          const hasXSSDetection = result.errors?.some(e => \n            e.code === 'XSS_DETECTED' ||\n            e.severity === 'critical'\n          );\n          \n          if (hasXSSDetection) {\n            detectedCount++;\n          }\n        } else {\n          // Verificar sanitización efectiva\n          const sanitizedInput = result.sanitized?.userInput || '';\n          const sanitizedHTML = result.sanitized?.htmlContent || '';\n          \n          const stillContainsXSS = \n            /<script/i.test(sanitizedInput) ||\n            /javascript:/i.test(sanitizedInput) ||\n            /on\\w+\\s*=/i.test(sanitizedInput) ||\n            /<script/i.test(sanitizedHTML) ||\n            /javascript:/i.test(sanitizedHTML) ||\n            /on\\w+\\s*=/i.test(sanitizedHTML);\n          \n          if (!stillContainsXSS) {\n            detectedCount++; // Sanitización efectiva\n          }\n        }\n      }\n\n      // Verificar detección de XSS avanzados\n      expect(detectedCount).toBeGreaterThan(7); // Al menos 70% detectados\n    });\n  });\n\n  describe('Ataques de Bypass de Validación', () => {\n    it('debe resistir intentos de bypass con datos malformados', async () => {\n      const bypassAttempts = [\n        // Null bytes\n        { email: 'test@example.com\\x00admin@evil.com', password: 'password\\x00' },\n        \n        // Unicode normalization attacks\n        { email: 'test@еxample.com', password: 'pаssword123!' }, // Cyrillic characters\n        \n        // Overlong UTF-8 sequences\n        { email: 'test@example.com', password: '\\xC0\\xAFpassword' },\n        \n        // Control characters\n        { email: 'test\\r\\n@example.com', password: 'pass\\tword' },\n        \n        // Homograph attacks\n        { email: 'admin@gооgle.com', password: 'password123!' }, // Cyrillic 'o'\n        \n        // Length manipulation\n        { email: 'a'.repeat(1000) + '@example.com', password: 'x'.repeat(10000) },\n        \n        // Type confusion\n        { email: ['test@example.com'], password: { value: 'password' } },\n        \n        // Prototype pollution attempt\n        { \n          email: 'test@example.com',\n          password: 'password',\n          '__proto__': { isAdmin: true },\n          'constructor': { prototype: { role: 'admin' } }\n        }\n      ];\n\n      let blockedCount = 0;\n      let allowedCount = 0;\n\n      for (const attempt of bypassAttempts) {\n        try {\n          const result = await criticalValidator.validateAndSanitize(\n            z.object({\n              email: EnterpriseEmailSchema,\n              password: EnterprisePasswordSchema\n            }),\n            attempt,\n            mockContext\n          );\n\n          if (!result.success) {\n            blockedCount++;\n          } else {\n            // Verificar que los datos fueron sanitizados apropiadamente\n            const sanitizedEmail = result.sanitized?.email || '';\n            const sanitizedPassword = result.sanitized?.password || '';\n            \n            const containsMaliciousPatterns = \n              /[\\x00-\\x1F\\x7F-\\x9F]/.test(sanitizedEmail) ||\n              /[\\x00-\\x1F\\x7F-\\x9F]/.test(sanitizedPassword) ||\n              sanitizedEmail.length > 254 ||\n              sanitizedPassword.length > 128;\n            \n            if (containsMaliciousPatterns) {\n              allowedCount++; // Bypass exitoso\n            } else {\n              blockedCount++; // Sanitización efectiva\n            }\n          }\n        } catch (error) {\n          blockedCount++; // Error = bypass fallido\n        }\n      }\n\n      // Verificar que la mayoría de bypasses fueron bloqueados\n      expect(blockedCount).toBeGreaterThan(allowedCount);\n      expect(blockedCount).toBeGreaterThan(6); // Al menos 75% bloqueados\n    });\n\n    it('debe detectar ataques de schema poisoning', async () => {\n      const schemaPoisoningAttempts = [\n        // Intentar inyectar propiedades adicionales\n        {\n          name: 'Product Name',\n          price: 100,\n          isAdmin: true,\n          role: 'admin',\n          permissions: ['all'],\n          __proto__: { constructor: 'evil' }\n        },\n        \n        // Intentar bypass con nested objects\n        {\n          name: 'Product Name',\n          price: 100,\n          metadata: {\n            admin: true,\n            execute: 'rm -rf /',\n            eval: 'process.exit(1)'\n          }\n        },\n        \n        // Intentar bypass con arrays maliciosos\n        {\n          name: 'Product Name',\n          price: 100,\n          tags: [\n            'normal',\n            { __proto__: { isAdmin: true } },\n            'another_normal'\n          ]\n        },\n        \n        // Intentar bypass con funciones\n        {\n          name: 'Product Name',\n          price: 100,\n          callback: 'function() { return true; }',\n          toString: 'function() { return \"admin\"; }'\n        }\n      ];\n\n      let detectedCount = 0;\n\n      for (const attempt of schemaPoisoningAttempts) {\n        const result = await criticalValidator.validateAndSanitize(\n          EnterpriseProductSchema,\n          attempt,\n          mockContext\n        );\n\n        if (!result.success) {\n          detectedCount++;\n        } else {\n          // Verificar que propiedades maliciosas fueron removidas\n          const sanitizedData = result.sanitized || {};\n          \n          const hasMaliciousProps = \n            'isAdmin' in sanitizedData ||\n            'role' in sanitizedData ||\n            'permissions' in sanitizedData ||\n            '__proto__' in sanitizedData ||\n            'constructor' in sanitizedData ||\n            'callback' in sanitizedData ||\n            'toString' in sanitizedData;\n          \n          if (!hasMaliciousProps) {\n            detectedCount++; // Sanitización efectiva\n          }\n        }\n      }\n\n      // Verificar detección de schema poisoning\n      expect(detectedCount).toBe(schemaPoisoningAttempts.length);\n    });\n  });\n\n  describe('Ataques de Agotamiento de Recursos', () => {\n    it('debe manejar payloads extremadamente grandes', async () => {\n      const largeSanitizer = new EnterpriseSanitizer(ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);\n      \n      const resourceExhaustionPayloads = [\n        // String extremadamente largo\n        'x'.repeat(10000000), // 10MB\n        \n        // Objeto con muchas propiedades\n        Object.fromEntries(\n          Array.from({ length: 100000 }, (_, i) => [`prop_${i}`, `value_${i}`])\n        ),\n        \n        // Array extremadamente largo\n        Array.from({ length: 1000000 }, (_, i) => `item_${i}`),\n        \n        // Objeto profundamente anidado\n        Array.from({ length: 1000 }, () => ({})).reduce((acc, curr) => ({ nested: acc }), {})\n      ];\n\n      let handledCount = 0;\n      const startTime = Date.now();\n\n      for (const payload of resourceExhaustionPayloads) {\n        try {\n          const startMemory = process.memoryUsage().heapUsed;\n          \n          // Intentar sanitizar payload masivo\n          const result = largeSanitizer.sanitizeObject(payload);\n          \n          const endMemory = process.memoryUsage().heapUsed;\n          const memoryIncrease = endMemory - startMemory;\n          \n          // Verificar que no se agotó la memoria (< 100MB por payload)\n          if (memoryIncrease < 100 * 1024 * 1024) {\n            handledCount++;\n          }\n        } catch (error) {\n          // Error esperado para payloads que exceden límites\n          if (error.message.includes('máxima') || error.message.includes('excede')) {\n            handledCount++; // Límite aplicado correctamente\n          }\n        }\n      }\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      // Verificar que el sistema manejó los payloads sin crashear\n      expect(handledCount).toBe(resourceExhaustionPayloads.length);\n      \n      // Verificar que el tiempo de procesamiento fue razonable (< 30 segundos)\n      expect(totalTime).toBeLessThan(30000);\n    });\n\n    it('debe resistir ataques de regex DoS (ReDoS)', async () => {\n      const redosPayloads = [\n        // Payload que causa backtracking exponencial\n        'a'.repeat(1000) + 'X',\n        \n        // Nested quantifiers\n        '(' + 'a'.repeat(100) + ')*' + 'b'.repeat(100),\n        \n        // Alternation with overlapping patterns\n        'a'.repeat(50) + '|' + 'a'.repeat(49) + 'b',\n        \n        // Catastrophic backtracking pattern\n        'a'.repeat(30) + 'a?'.repeat(30) + 'a'.repeat(30)\n      ];\n\n      const emailSchema = z.object({\n        email: EnterpriseEmailSchema,\n        description: z.string().max(1000)\n      });\n\n      let processedCount = 0;\n      const maxTimePerPayload = 5000; // 5 segundos máximo\n\n      for (const payload of redosPayloads) {\n        const startTime = Date.now();\n        \n        try {\n          const testData = {\n            email: `test${payload}@example.com`,\n            description: payload\n          };\n\n          const result = await Promise.race([\n            criticalValidator.validateAndSanitize(emailSchema, testData, mockContext),\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error('Timeout')), maxTimePerPayload)\n            )\n          ]);\n\n          const endTime = Date.now();\n          const processingTime = endTime - startTime;\n\n          // Verificar que no hubo timeout\n          if (processingTime < maxTimePerPayload) {\n            processedCount++;\n          }\n        } catch (error) {\n          const endTime = Date.now();\n          const processingTime = endTime - startTime;\n\n          // Si fue timeout, es un problema; si fue validación fallida, está bien\n          if (error.message !== 'Timeout' && processingTime < maxTimePerPayload) {\n            processedCount++;\n          }\n        }\n      }\n\n      // Verificar que todos los payloads fueron procesados sin timeout\n      expect(processedCount).toBe(redosPayloads.length);\n    });\n  });\n\n  describe('Validación de Integridad del Sistema', () => {\n    it('debe mantener consistencia durante ataques masivos', async () => {\n      const massiveAttack = Array.from({ length: 1000 }, (_, i) => ({\n        email: `attacker${i}@evil.com`,\n        password: `<script>alert(${i})</script>`,\n        name: `'; DROP TABLE users; -- ${i}`,\n        description: 'x'.repeat(10000) + i\n      }));\n\n      let validatedCount = 0;\n      let blockedCount = 0;\n      const startTime = Date.now();\n\n      const schema = z.object({\n        email: EnterpriseEmailSchema,\n        password: EnterprisePasswordSchema,\n        name: z.string().min(1).max(100),\n        description: z.string().max(1000)\n      });\n\n      for (const attackData of massiveAttack) {\n        try {\n          const result = await criticalValidator.validateAndSanitize(\n            schema,\n            attackData,\n            mockContext\n          );\n\n          if (result.success) {\n            validatedCount++;\n          } else {\n            blockedCount++;\n          }\n        } catch (error) {\n          blockedCount++;\n        }\n      }\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n      const avgTimePerValidation = totalTime / 1000;\n\n      // Verificar que el sistema procesó todos los ataques\n      expect(validatedCount + blockedCount).toBe(1000);\n      \n      // Verificar que la mayoría fueron bloqueados\n      expect(blockedCount).toBeGreaterThan(validatedCount);\n      \n      // Verificar performance razonable (< 10ms por validación)\n      expect(avgTimePerValidation).toBeLessThan(10);\n    });\n  });\n});\n"],"names":["jest","mock","enterpriseAuditSystem","logEnterpriseEvent","fn","__esModule","default","sanitize","input","options","cleaned","ALLOWED_TAGS","length","replace","escape","char","entities","describe","mockContext","beforeEach","clearAllMocks","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","it","sqlInjectionPayloads","schema","z","object","search","string","filter","blockedCount","allowedCount","payload","testData","result","criticalValidator","validateAndSanitize","success","hasSQLError","errors","some","e","code","message","includes","sanitizedSearch","sanitized","sanitizedFilter","containsSQLKeywords","test","expect","toBeGreaterThan","advancedSQLPayloads","query","params","detectedCount","hasSQLDetection","severity","sanitizedQuery","sanitizedParams","stillContainsSQLPatterns","xssPayloads","content","description","hasXSSError","sanitizedContent","sanitizedDescription","containsXSSPatterns","advancedXSSPayloads","userInput","htmlContent","hasXSSDetection","sanitizedInput","sanitizedHTML","stillContainsXSS","bypassAttempts","password","repeat","value","isAdmin","prototype","attempt","EnterpriseEmailSchema","EnterprisePasswordSchema","sanitizedEmail","sanitizedPassword","containsMaliciousPatterns","error","schemaPoisoningAttempts","name","price","__proto__","constructor","metadata","admin","execute","eval","tags","callback","toString","EnterpriseProductSchema","sanitizedData","hasMaliciousProps","toBe","largeSanitizer","EnterpriseSanitizer","ENTERPRISE_VALIDATION_CONFIGS","CRITICAL_ADMIN","resourceExhaustionPayloads","Object","fromEntries","Array","from","_","i","reduce","acc","curr","nested","handledCount","startTime","Date","now","startMemory","process","memoryUsage","heapUsed","sanitizeObject","endMemory","memoryIncrease","endTime","totalTime","toBeLessThan","redosPayloads","emailSchema","max","processedCount","maxTimePerPayload","Promise","race","reject","setTimeout","Error","processingTime","massiveAttack","validatedCount","min","attackData","avgTimePerValidation"],"mappings":"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"}