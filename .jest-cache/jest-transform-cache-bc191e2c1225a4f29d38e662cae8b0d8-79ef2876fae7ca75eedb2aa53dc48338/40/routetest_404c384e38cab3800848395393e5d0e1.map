{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\__tests__\\route.test.ts"],"sourcesContent":["// ðŸ§ª Enterprise Unit Tests - Product Images API\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST } from '../route';\n\n// Mock Supabase Storage\nconst mockStorageUpload = jest.fn();\nconst mockStorageGetPublicUrl = jest.fn();\nconst mockStorageRemove = jest.fn();\n\n// Global mock for createClient - will be configured per test\nlet mockSupabaseGlobal: any;\n\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => mockSupabaseGlobal || {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          order: jest.fn(() => ({\n            order: jest.fn(),\n          })),\n        })),\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(),\n        })),\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          neq: jest.fn(),\n        })),\n      })),\n    })),\n    storage: {\n      from: jest.fn(() => ({\n        upload: mockStorageUpload,\n        getPublicUrl: mockStorageGetPublicUrl,\n        remove: mockStorageRemove,\n      })),\n    },\n  }),\n}));\n\n// Mock middleware\njest.mock('@/lib/api/middleware-composer', () => ({\n  composeMiddlewares: jest.fn((...middlewares) => (handler) => handler),\n}));\n\njest.mock('@/lib/api/error-handler', () => ({\n  withErrorHandler: jest.fn((handler) => handler),\n  ApiError: class ApiError extends Error {\n    constructor(message: string, public statusCode: number = 500) {\n      super(message);\n    }\n  },\n  ValidationError: class ValidationError extends Error {\n    constructor(message: string, public details?: any) {\n      super(message);\n      this.name = 'ValidationError';\n      this.details = details;\n    }\n  },\n  NotFoundError: class NotFoundError extends Error {\n    constructor(resource: string) {\n      super(`${resource} no encontrado`);\n      this.name = 'NotFoundError';\n    }\n  },\n}));\n\njest.mock('@/lib/api/api-logger', () => ({\n  withApiLogging: jest.fn((handler) => handler),\n  logAdminAction: jest.fn(),\n}));\n\njest.mock('@/lib/auth/api-auth-middleware', () => ({\n  withAdminAuth: jest.fn(() => (handler) => handler),\n}));\n\ndescribe('/api/admin/products/[id]/images - Enterprise API Tests', () => {\n  // UUIDs vÃ¡lidos para testing\n  const TEST_PRODUCT_ID = '550e8400-e29b-41d4-a716-446655440000';\n  const TEST_IMAGE_ID = '550e8400-e29b-41d4-a716-446655440001';\n\n  let mockSupabase: any;\n  let mockRequest: any;\n\n  // Helper function to create consistent mock chains\n  const createMockChain = (finalResult: any) => ({\n    select: jest.fn().mockReturnValue({\n      eq: jest.fn().mockReturnValue({\n        order: jest.fn().mockReturnValue({\n          order: jest.fn().mockResolvedValue(finalResult)\n        }),\n        single: jest.fn().mockResolvedValue(finalResult)\n      })\n    }),\n    insert: jest.fn().mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        single: jest.fn().mockResolvedValue(finalResult)\n      })\n    }),\n    update: jest.fn().mockReturnValue({\n      eq: jest.fn().mockReturnValue({\n        neq: jest.fn().mockResolvedValue(finalResult)\n      })\n    })\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Create a simple mock that will be configured per test\n    mockSupabase = {\n      from: jest.fn(),\n      storage: {\n        from: jest.fn(() => ({\n          upload: mockStorageUpload,\n          getPublicUrl: mockStorageGetPublicUrl,\n          remove: mockStorageRemove,\n        })),\n      },\n    };\n\n    // Set the global mock to use our local mock\n    mockSupabaseGlobal = mockSupabase;\n\n    mockRequest = {\n      supabase: mockSupabase,\n      user: { id: 'test-user-id' },\n    } as any;\n\n    // Reset storage mocks\n    mockStorageUpload.mockReset();\n    mockStorageGetPublicUrl.mockReset();\n    mockStorageRemove.mockReset();\n\n    // Configure default storage mock responses\n    mockStorageRemove.mockResolvedValue({ data: null, error: null });\n\n    // Debug: Log what the mock is returning\n    console.log('Mock storage remove configured:', mockStorageRemove.getMockImplementation());\n    mockStorageRemove.mockReset();\n  });\n\n  describe('GET /api/admin/products/[id]/images', () => {\n    it('should return product images successfully', async () => {\n      const mockImages = [\n        {\n          id: 'image-1',\n          url: 'https://example.com/image1.jpg',\n          alt_text: 'Image 1',\n          is_primary: true,\n          display_order: 0,\n        },\n        {\n          id: 'image-2',\n          url: 'https://example.com/image2.jpg',\n          alt_text: 'Image 2',\n          is_primary: false,\n          display_order: 1,\n        },\n      ];\n\n      // Configure the mock to return data directly\n      mockSupabase.from.mockReturnValue(createMockChain({\n        data: mockImages,\n        error: null,\n      }));\n\n      const response = await GET(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n      const responseData = await response.json();\n\n      // Debug logs removed - test working correctly\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data).toHaveLength(2);\n      expect(responseData.data[0].is_primary).toBe(true);\n    });\n\n    it('should handle empty images list', async () => {\n      mockSupabase.from.mockReturnValue(createMockChain({\n        data: [],\n        error: null,\n      }));\n\n      const response = await GET(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data).toHaveLength(0);\n    });\n\n    it('should validate product ID format', async () => {\n      await expect(\n        GET(mockRequest, { params: { id: 'invalid-uuid' } })\n      ).rejects.toThrow('ID de producto invÃ¡lido');\n    });\n\n    it('should handle database errors', async () => {\n      mockSupabase.from.mockReturnValue(createMockChain({\n        data: null,\n        error: { message: 'Database error' },\n      }));\n\n      await expect(\n        GET(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('Error al obtener imÃ¡genes');\n    });\n  });\n\n  describe('POST /api/admin/products/[id]/images', () => {\n    let mockFile: File;\n    let mockFormData: FormData;\n\n    beforeEach(() => {\n      // Create mock file\n      mockFile = new File(['test content'], 'test-image.jpg', {\n        type: 'image/jpeg',\n      });\n\n      // Create mock FormData\n      mockFormData = new FormData();\n      mockFormData.append('file', mockFile);\n      mockFormData.append('alt_text', 'Test image');\n      mockFormData.append('is_primary', 'true');\n\n      // Mock request.formData()\n      mockRequest.formData = jest.fn().mockResolvedValue(mockFormData);\n\n      // Mock product exists check using new methodology\n      mockSupabase.from.mockReturnValue(createMockChain({\n        data: { id: TEST_PRODUCT_ID, name: 'Test Product' },\n        error: null,\n      }));\n    });\n\n    it('should upload image successfully', async () => {\n      // Mock storage upload\n      mockStorageUpload.mockResolvedValue({\n        data: { path: `products/${TEST_PRODUCT_ID}/123_test-image.jpg` },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://storage.example.com/test-image.jpg' },\n      });\n\n      // Mock database insert\n      const mockImageRecord = {\n        id: 'new-image-id',\n        product_id: TEST_PRODUCT_ID,\n        url: 'https://storage.example.com/test-image.jpg',\n        alt_text: 'Test image',\n        is_primary: true,\n      };\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: mockImageRecord,\n        error: null,\n      });\n\n      // Mock update other images to not primary\n      mockSupabase.from().update().eq().neq.mockResolvedValue({\n        error: null,\n      });\n\n      const response = await POST(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data.url).toBe('https://storage.example.com/test-image.jpg');\n      expect(responseData.message).toBe('Imagen subida exitosamente');\n\n      // Verify storage upload was called\n      expect(mockStorageUpload).toHaveBeenCalledWith(\n        expect.stringContaining(`products/${TEST_PRODUCT_ID}/`),\n        mockFile,\n        expect.objectContaining({\n          cacheControl: '3600',\n          upsert: false,\n        })\n      );\n    });\n\n    it('should validate file type', async () => {\n      const invalidFile = new File(['test'], 'test.txt', { type: 'text/plain' });\n      mockFormData.set('file', invalidFile);\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('Tipo de archivo no permitido');\n    });\n\n    it('should validate file size', async () => {\n      // Create a large file (6MB)\n      const largeContent = new Array(6 * 1024 * 1024).fill('a').join('');\n      const largeFile = new File([largeContent], 'large.jpg', { type: 'image/jpeg' });\n      mockFormData.set('file', largeFile);\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('El archivo es demasiado grande');\n    });\n\n    it('should handle missing file', async () => {\n      mockFormData.delete('file');\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('No se proporcionÃ³ archivo');\n    });\n\n    it('should handle product not found', async () => {\n      // Use valid UUID but configure mock to return product not found\n      mockSupabase.from.mockReturnValue(createMockChain({\n        data: null,\n        error: { message: 'Product not found' },\n      }));\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('Producto no encontrado');\n    });\n\n    it('should handle storage upload errors', async () => {\n      mockStorageUpload.mockResolvedValue({\n        data: null,\n        error: { message: 'Storage error' },\n      });\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('Error al subir imagen');\n    });\n\n    it('should cleanup storage on database insert failure', async () => {\n      // Mock successful storage upload\n      mockStorageUpload.mockResolvedValue({\n        data: { path: `products/${TEST_PRODUCT_ID}/test-image.jpg` },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://storage.example.com/test-image.jpg' },\n      });\n\n      // Mock product exists check (success) and database insert failure\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: { id: TEST_PRODUCT_ID, name: 'Test Product' },\n              error: null,\n            })\n          })\n        }),\n        insert: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: null,\n              error: { message: 'Database error' },\n            })\n          })\n        })\n      });\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('Error al guardar imagen en base de datos');\n\n      // Verify cleanup was attempted\n      expect(mockStorageRemove).toHaveBeenCalledWith([`products/${TEST_PRODUCT_ID}/test-image.jpg`]);\n    });\n\n    it('should update other images when setting as primary', async () => {\n      mockStorageUpload.mockResolvedValue({\n        data: { path: 'test-path' },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://example.com/image.jpg' },\n      });\n\n      const mockImageRecord = {\n        id: 'new-image-id',\n        is_primary: true,\n      };\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: mockImageRecord,\n        error: null,\n      });\n\n      await POST(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n\n      // Verify other images were updated to not primary\n      expect(mockSupabase.from().update).toHaveBeenCalledWith({ is_primary: false });\n    });\n\n    it('should generate unique filename', async () => {\n      mockStorageUpload.mockResolvedValue({\n        data: { path: 'test-path' },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://example.com/image.jpg' },\n      });\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: { id: 'test-id' },\n        error: null,\n      });\n\n      await POST(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n\n      // Verify filename includes product ID and timestamp\n      const uploadCall = mockStorageUpload.mock.calls[0];\n      const filename = uploadCall[0];\n      \n      expect(filename).toContain(`products/${TEST_PRODUCT_ID}/`);\n      expect(filename).toContain('test-image.jpg');\n    });\n  });\n\n  describe('File Validation', () => {\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    const invalidTypes = ['text/plain', 'application/pdf', 'video/mp4'];\n\n    validTypes.forEach(type => {\n      it(`should accept ${type} files`, async () => {\n        const file = new File(['content'], 'test.jpg', { type });\n        const formData = new FormData();\n        formData.append('file', file);\n        \n        mockRequest.formData = jest.fn().mockResolvedValue(formData);\n\n        mockSupabase.from.mockReturnValue(createMockChain({\n          data: { id: TEST_PRODUCT_ID },\n          error: null,\n        }));\n\n        mockStorageUpload.mockResolvedValue({\n          data: { path: 'test-path' },\n          error: null,\n        });\n\n        mockStorageGetPublicUrl.mockReturnValue({\n          data: { publicUrl: 'https://example.com/image.jpg' },\n        });\n\n        mockSupabase.from().insert().select().single.mockResolvedValue({\n          data: { id: 'test-id' },\n          error: null,\n        });\n\n        const response = await POST(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n        expect(response.status).toBe(201);\n      });\n    });\n\n    invalidTypes.forEach(type => {\n      it(`should reject ${type} files`, async () => {\n        const file = new File(['content'], 'test.txt', { type });\n        const formData = new FormData();\n        formData.append('file', file);\n        \n        mockRequest.formData = jest.fn().mockResolvedValue(formData);\n\n        mockSupabase.from.mockReturnValue(createMockChain({\n          data: { id: TEST_PRODUCT_ID },\n          error: null,\n        }));\n\n        await expect(\n          POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n        ).rejects.toThrow('Tipo de archivo no permitido');\n      });\n    });\n  });\n});\n"],"names":["jest","mock","createClient","fn","mockSupabaseGlobal","from","select","eq","single","order","insert","update","neq","storage","upload","mockStorageUpload","getPublicUrl","mockStorageGetPublicUrl","remove","mockStorageRemove","composeMiddlewares","middlewares","handler","withErrorHandler","ApiError","Error","message","statusCode","ValidationError","details","name","NotFoundError","resource","withApiLogging","logAdminAction","withAdminAuth","describe","TEST_PRODUCT_ID","TEST_IMAGE_ID","mockSupabase","mockRequest","createMockChain","finalResult","mockReturnValue","mockResolvedValue","beforeEach","clearAllMocks","supabase","user","id","mockReset","data","error","console","log","getMockImplementation","it","mockImages","url","alt_text","is_primary","display_order","response","GET","params","responseData","json","expect","status","toBe","success","toHaveLength","rejects","toThrow","mockFile","mockFormData","File","type","FormData","append","formData","path","publicUrl","mockImageRecord","product_id","POST","toHaveBeenCalledWith","stringContaining","objectContaining","cacheControl","upsert","invalidFile","set","largeContent","Array","fill","join","largeFile","delete","uploadCall","calls","filename","toContain","validTypes","invalidTypes","forEach","file"],"mappings":"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"}