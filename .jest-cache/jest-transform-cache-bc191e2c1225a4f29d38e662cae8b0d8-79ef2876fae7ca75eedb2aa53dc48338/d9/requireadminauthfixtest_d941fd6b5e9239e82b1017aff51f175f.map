{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\auth\\require-admin-auth-fix.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TEST PARA VERIFICAR CORRECCIÓN requireAdminAuth\n// ===================================\n\nimport { NextRequest } from 'next/server';\nimport { requireAdminAuth } from '@/lib/auth/supabase-auth-utils';\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\n\n// Mock de getAuthenticatedAdmin\njest.mock('@/lib/auth/admin-auth', () => ({\n  getAuthenticatedAdmin: jest.fn(),\n}));\n\nconst mockGetAuthenticatedAdmin = getAuthenticatedAdmin as jest.MockedFunction<typeof getAuthenticatedAdmin>;\n\ndescribe('requireAdminAuth - Corrección Error 401', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    console.log = jest.fn(); // Silenciar logs en tests\n    console.warn = jest.fn();\n  });\n\n  it('debe usar getAuthenticatedAdmin corregida y autorizar admin correctamente', async () => {\n    // Mock de usuario admin válido\n    mockGetAuthenticatedAdmin.mockResolvedValue({\n      userId: 'user_admin123',\n      sessionId: 'sess_123',\n      isAdmin: true,\n      user: {\n        id: 'user_admin123',\n        email: 'santiago@xor.com.ar'\n      }\n    });\n\n    const mockRequest = new NextRequest('https://example.com/api/admin/monitoring');\n    const result = await requireAdminAuth(mockRequest);\n\n    expect(result).toEqual({\n      success: true,\n      user: {\n        id: 'user_admin123',\n        email: 'santiago@xor.com.ar',\n        role: 'admin',\n        permissions: {}\n      },\n      supabase: undefined,\n      isAdmin: true\n    });\n\n    expect(mockGetAuthenticatedAdmin).toHaveBeenCalledWith(mockRequest);\n  });\n\n  it('debe rechazar usuario no autenticado', async () => {\n    // Mock de usuario no autenticado\n    mockGetAuthenticatedAdmin.mockResolvedValue({\n      userId: null,\n      isAdmin: false,\n      error: 'Usuario no autenticado',\n      status: 401\n    });\n\n    const mockRequest = new NextRequest('https://example.com/api/admin/monitoring');\n    const result = await requireAdminAuth(mockRequest);\n\n    expect(result).toEqual({\n      success: false,\n      error: 'Usuario no autenticado',\n      status: 401\n    });\n  });\n\n  it('debe rechazar usuario autenticado pero no admin', async () => {\n    // Mock de usuario regular (no admin)\n    mockGetAuthenticatedAdmin.mockResolvedValue({\n      userId: 'user_regular123',\n      isAdmin: false,\n      user: {\n        id: 'user_regular123',\n        email: 'user@example.com'\n      }\n    });\n\n    const mockRequest = new NextRequest('https://example.com/api/admin/monitoring');\n    const result = await requireAdminAuth(mockRequest);\n\n    expect(result).toEqual({\n      success: false,\n      error: 'Acceso denegado: se requiere rol de administrador',\n      status: 403\n    });\n  });\n\n  it('debe manejar errores de getAuthenticatedAdmin', async () => {\n    // Mock de error en getAuthenticatedAdmin\n    mockGetAuthenticatedAdmin.mockRejectedValue(new Error('Clerk API error'));\n\n    const mockRequest = new NextRequest('https://example.com/api/admin/monitoring');\n    const result = await requireAdminAuth(mockRequest);\n\n    expect(result).toEqual({\n      success: false,\n      error: 'Error interno del servidor',\n      status: 500\n    });\n  });\n\n  it('debe manejar usuario admin sin objeto user completo', async () => {\n    // Mock de admin con datos mínimos\n    mockGetAuthenticatedAdmin.mockResolvedValue({\n      userId: 'user_admin123',\n      isAdmin: true,\n      user: undefined // Sin objeto user completo\n    });\n\n    const mockRequest = new NextRequest('https://example.com/api/admin/monitoring');\n    const result = await requireAdminAuth(mockRequest);\n\n    expect(result).toEqual({\n      success: true,\n      user: {\n        id: 'user_admin123',\n        email: 'unknown',\n        role: 'admin',\n        permissions: {}\n      },\n      supabase: undefined,\n      isAdmin: true\n    });\n  });\n});\n\ndescribe('requireAdminAuth - Integración con APIs de Monitoreo', () => {\n  it('debe funcionar correctamente para /api/admin/monitoring', async () => {\n    mockGetAuthenticatedAdmin.mockResolvedValue({\n      userId: 'user_admin123',\n      isAdmin: true,\n      user: {\n        id: 'user_admin123',\n        email: 'santiago@xor.com.ar'\n      }\n    });\n\n    const mockRequest = new NextRequest('https://pinteya.com/api/admin/monitoring');\n    const result = await requireAdminAuth(mockRequest);\n\n    expect(result.success).toBe(true);\n    expect(result.user?.role).toBe('admin');\n  });\n\n  it('debe funcionar correctamente para /api/admin/monitoring/enterprise-metrics', async () => {\n    mockGetAuthenticatedAdmin.mockResolvedValue({\n      userId: 'user_admin123',\n      isAdmin: true,\n      user: {\n        id: 'user_admin123',\n        email: 'santiago@xor.com.ar'\n      }\n    });\n\n    const mockRequest = new NextRequest('https://pinteya.com/api/admin/monitoring/enterprise-metrics');\n    const result = await requireAdminAuth(mockRequest, ['admin_access', 'monitoring_access']);\n\n    expect(result.success).toBe(true);\n    expect(result.isAdmin).toBe(true);\n  });\n});\n\ndescribe('requireAdminAuth - Verificación de Regresión', () => {\n  it('NO debe usar la función getAuthenticatedUser antigua (que esperaba Bearer token)', async () => {\n    // Este test verifica que ya no se use la función que esperaba Bearer tokens\n    mockGetAuthenticatedAdmin.mockResolvedValue({\n      userId: 'user_admin123',\n      isAdmin: true,\n      user: {\n        id: 'user_admin123',\n        email: 'santiago@xor.com.ar'\n      }\n    });\n\n    const mockRequest = new NextRequest('https://pinteya.com/api/admin/monitoring');\n    // NO agregar header Authorization - debe funcionar con cookies de sesión\n    \n    const result = await requireAdminAuth(mockRequest);\n\n    expect(result.success).toBe(true);\n    expect(mockGetAuthenticatedAdmin).toHaveBeenCalledWith(mockRequest);\n  });\n});\n"],"names":["jest","mock","getAuthenticatedAdmin","fn","mockGetAuthenticatedAdmin","describe","beforeEach","clearAllMocks","console","log","warn","it","mockResolvedValue","userId","sessionId","isAdmin","user","id","email","mockRequest","NextRequest","result","requireAdminAuth","expect","toEqual","success","role","permissions","supabase","undefined","toHaveBeenCalledWith","error","status","mockRejectedValue","Error","toBe"],"mappings":"AAAA,sCAAsC;AACtC,uEAAuE;AACvE,sCAAsC;;AAMtC,gCAAgC;AAChCA,KAAKC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxCC,uBAAuBF,KAAKG,EAAE;IAChC,CAAA;;;;wBAP4B;mCACK;2BACK;AAOtC,MAAMC,4BAA4BF,gCAAqB;AAEvDG,SAAS,2CAA2C;IAClDC,WAAW;QACTN,KAAKO,aAAa;QAClBC,QAAQC,GAAG,GAAGT,KAAKG,EAAE,IAAI,0BAA0B;QACnDK,QAAQE,IAAI,GAAGV,KAAKG,EAAE;IACxB;IAEAQ,GAAG,6EAA6E;QAC9E,+BAA+B;QAC/BP,0BAA0BQ,iBAAiB,CAAC;YAC1CC,QAAQ;YACRC,WAAW;YACXC,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;YACT;QACF;QAEA,MAAMC,cAAc,IAAIC,mBAAW,CAAC;QACpC,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH;QAEtCI,OAAOF,QAAQG,OAAO,CAAC;YACrBC,SAAS;YACTT,MAAM;gBACJC,IAAI;gBACJC,OAAO;gBACPQ,MAAM;gBACNC,aAAa,CAAC;YAChB;YACAC,UAAUC;YACVd,SAAS;QACX;QAEAQ,OAAOnB,2BAA2B0B,oBAAoB,CAACX;IACzD;IAEAR,GAAG,wCAAwC;QACzC,iCAAiC;QACjCP,0BAA0BQ,iBAAiB,CAAC;YAC1CC,QAAQ;YACRE,SAAS;YACTgB,OAAO;YACPC,QAAQ;QACV;QAEA,MAAMb,cAAc,IAAIC,mBAAW,CAAC;QACpC,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH;QAEtCI,OAAOF,QAAQG,OAAO,CAAC;YACrBC,SAAS;YACTM,OAAO;YACPC,QAAQ;QACV;IACF;IAEArB,GAAG,mDAAmD;QACpD,qCAAqC;QACrCP,0BAA0BQ,iBAAiB,CAAC;YAC1CC,QAAQ;YACRE,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;YACT;QACF;QAEA,MAAMC,cAAc,IAAIC,mBAAW,CAAC;QACpC,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH;QAEtCI,OAAOF,QAAQG,OAAO,CAAC;YACrBC,SAAS;YACTM,OAAO;YACPC,QAAQ;QACV;IACF;IAEArB,GAAG,iDAAiD;QAClD,yCAAyC;QACzCP,0BAA0B6B,iBAAiB,CAAC,IAAIC,MAAM;QAEtD,MAAMf,cAAc,IAAIC,mBAAW,CAAC;QACpC,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH;QAEtCI,OAAOF,QAAQG,OAAO,CAAC;YACrBC,SAAS;YACTM,OAAO;YACPC,QAAQ;QACV;IACF;IAEArB,GAAG,uDAAuD;QACxD,kCAAkC;QAClCP,0BAA0BQ,iBAAiB,CAAC;YAC1CC,QAAQ;YACRE,SAAS;YACTC,MAAMa,UAAU,2BAA2B;QAC7C;QAEA,MAAMV,cAAc,IAAIC,mBAAW,CAAC;QACpC,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH;QAEtCI,OAAOF,QAAQG,OAAO,CAAC;YACrBC,SAAS;YACTT,MAAM;gBACJC,IAAI;gBACJC,OAAO;gBACPQ,MAAM;gBACNC,aAAa,CAAC;YAChB;YACAC,UAAUC;YACVd,SAAS;QACX;IACF;AACF;AAEAV,SAAS,wDAAwD;IAC/DM,GAAG,2DAA2D;QAC5DP,0BAA0BQ,iBAAiB,CAAC;YAC1CC,QAAQ;YACRE,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;YACT;QACF;QAEA,MAAMC,cAAc,IAAIC,mBAAW,CAAC;QACpC,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH;QAEtCI,OAAOF,OAAOI,OAAO,EAAEU,IAAI,CAAC;QAC5BZ,OAAOF,OAAOL,IAAI,EAAEU,MAAMS,IAAI,CAAC;IACjC;IAEAxB,GAAG,8EAA8E;QAC/EP,0BAA0BQ,iBAAiB,CAAC;YAC1CC,QAAQ;YACRE,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;YACT;QACF;QAEA,MAAMC,cAAc,IAAIC,mBAAW,CAAC;QACpC,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH,aAAa;YAAC;YAAgB;SAAoB;QAExFI,OAAOF,OAAOI,OAAO,EAAEU,IAAI,CAAC;QAC5BZ,OAAOF,OAAON,OAAO,EAAEoB,IAAI,CAAC;IAC9B;AACF;AAEA9B,SAAS,gDAAgD;IACvDM,GAAG,oFAAoF;QACrF,4EAA4E;QAC5EP,0BAA0BQ,iBAAiB,CAAC;YAC1CC,QAAQ;YACRE,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;YACT;QACF;QAEA,MAAMC,cAAc,IAAIC,mBAAW,CAAC;QACpC,yEAAyE;QAEzE,MAAMC,SAAS,MAAMC,IAAAA,mCAAgB,EAACH;QAEtCI,OAAOF,OAAOI,OAAO,EAAEU,IAAI,CAAC;QAC5BZ,OAAOnB,2BAA2B0B,oBAAoB,CAACX;IACzD;AACF"}