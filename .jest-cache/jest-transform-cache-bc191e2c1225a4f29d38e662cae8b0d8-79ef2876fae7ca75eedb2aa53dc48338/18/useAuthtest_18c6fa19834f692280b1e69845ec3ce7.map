{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useAuth.test.tsx"],"sourcesContent":["// ===================================\n// TESTS PARA HOOK DE AUTENTICACIÓN\n// Tests unitarios e integración para useAuth\n// ===================================\n\nimport { renderHook, act, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { supabase } from '@/lib/supabase';\nimport { toast } from 'sonner';\nimport { useRouter } from 'next/navigation';\nimport React from 'react';\n\n// Mocks\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    auth: {\n      signUp: jest.fn(),\n      signInWithPassword: jest.fn(),\n      signOut: jest.fn(),\n      getUser: jest.fn(),\n      onAuthStateChange: jest.fn(),\n      getSession: jest.fn()\n    },\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      }))\n    }))\n  }\n}));\n\njest.mock('sonner', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn(),\n    loading: jest.fn()\n  }\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn()\n}));\n\nconst mockRouter = {\n  push: jest.fn(),\n  replace: jest.fn(),\n  refresh: jest.fn()\n};\n\n// Wrapper para React Query\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n  \n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n};\n\ndescribe('useAuth Hook', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (useRouter as jest.Mock).mockReturnValue(mockRouter);\n  });\n\n  describe('Registro de Usuario', () => {\n    it('debe registrar un usuario exitosamente', async () => {\n      const mockUser = {\n        id: 'user-123',\n        email: 'test@example.com',\n        user_metadata: { full_name: 'Test User' }\n      };\n\n      (supabase.auth.signUp as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signUp({\n          email: 'test@example.com',\n          password: 'Password123!',\n          full_name: 'Test User'\n        });\n      });\n\n      expect(supabase.auth.signUp).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'Password123!',\n        options: {\n          data: {\n            full_name: 'Test User'\n          }\n        }\n      });\n\n      expect(toast.success).toHaveBeenCalledWith(\n        'Registro exitoso. Revisa tu email para confirmar tu cuenta.'\n      );\n    });\n\n    it('debe manejar errores de registro', async () => {\n      (supabase.auth.signUp as jest.Mock).mockResolvedValue({\n        data: null,\n        error: { message: 'Email already registered' }\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signUp({\n          email: 'existing@example.com',\n          password: 'Password123!',\n          full_name: 'Test User'\n        });\n      });\n\n      expect(toast.error).toHaveBeenCalledWith('Email already registered');\n    });\n\n    it('debe validar datos de entrada antes del registro', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signUp({\n          email: 'invalid-email',\n          password: '123',\n          full_name: ''\n        });\n      });\n\n      expect(supabase.auth.signUp).not.toHaveBeenCalled();\n      expect(toast.error).toHaveBeenCalledWith(\n        expect.stringContaining('datos válidos')\n      );\n    });\n  });\n\n  describe('Inicio de Sesión', () => {\n    it('debe iniciar sesión exitosamente', async () => {\n      const mockUser = {\n        id: 'user-123',\n        email: 'test@example.com'\n      };\n\n      (supabase.auth.signInWithPassword as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signIn({\n          email: 'test@example.com',\n          password: 'Password123!'\n        });\n      });\n\n      expect(supabase.auth.signInWithPassword).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'Password123!'\n      });\n\n      expect(toast.success).toHaveBeenCalledWith('¡Bienvenido de vuelta!');\n      expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');\n    });\n\n    it('debe manejar credenciales inválidas', async () => {\n      (supabase.auth.signInWithPassword as jest.Mock).mockResolvedValue({\n        data: null,\n        error: { message: 'Invalid login credentials' }\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signIn({\n          email: 'test@example.com',\n          password: 'wrongpassword'\n        });\n      });\n\n      expect(toast.error).toHaveBeenCalledWith('Credenciales inválidas');\n      expect(mockRouter.push).not.toHaveBeenCalled();\n    });\n\n    it('debe validar email y contraseña antes del login', async () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signIn({\n          email: '',\n          password: ''\n        });\n      });\n\n      expect(supabase.auth.signInWithPassword).not.toHaveBeenCalled();\n      expect(toast.error).toHaveBeenCalledWith(\n        'Por favor ingresa email y contraseña'\n      );\n    });\n  });\n\n  describe('Cierre de Sesión', () => {\n    it('debe cerrar sesión exitosamente', async () => {\n      (supabase.auth.signOut as jest.Mock).mockResolvedValue({\n        error: null\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signOut();\n      });\n\n      expect(supabase.auth.signOut).toHaveBeenCalled();\n      expect(toast.success).toHaveBeenCalledWith('Sesión cerrada exitosamente');\n      expect(mockRouter.push).toHaveBeenCalledWith('/');\n    });\n\n    it('debe manejar errores al cerrar sesión', async () => {\n      (supabase.auth.signOut as jest.Mock).mockResolvedValue({\n        error: { message: 'Sign out failed' }\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signOut();\n      });\n\n      expect(toast.error).toHaveBeenCalledWith('Error al cerrar sesión');\n    });\n  });\n\n  describe('Estado de Autenticación', () => {\n    it('debe obtener el usuario actual', async () => {\n      const mockUser = {\n        id: 'user-123',\n        email: 'test@example.com'\n      };\n\n      (supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.user).toEqual(mockUser);\n        expect(result.current.isAuthenticated).toBe(true);\n      });\n    });\n\n    it('debe manejar usuario no autenticado', async () => {\n      (supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: null },\n        error: null\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.user).toBeNull();\n        expect(result.current.isAuthenticated).toBe(false);\n      });\n    });\n\n    it('debe mostrar estado de carga inicial', () => {\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      expect(result.current.isLoading).toBe(true);\n    });\n  });\n\n  describe('Perfil de Usuario', () => {\n    it('debe obtener el perfil del usuario', async () => {\n      const mockUser = {\n        id: 'user-123',\n        email: 'test@example.com'\n      };\n\n      const mockProfile = {\n        id: 'user-123',\n        full_name: 'Test User',\n        avatar_url: 'https://example.com/avatar.jpg',\n        phone: '+1234567890'\n      };\n\n      (supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null\n      });\n\n      (supabase.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: mockProfile,\n              error: null\n            })\n          })\n        })\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.profile).toEqual(mockProfile);\n      });\n    });\n\n    it('debe manejar errores al obtener el perfil', async () => {\n      const mockUser = {\n        id: 'user-123',\n        email: 'test@example.com'\n      };\n\n      (supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null\n      });\n\n      (supabase.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: null,\n              error: { message: 'Profile not found' }\n            })\n          })\n        })\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.profile).toBeNull();\n      });\n    });\n  });\n\n  describe('Cambios de Estado de Autenticación', () => {\n    it('debe escuchar cambios de estado de autenticación', () => {\n      const mockCallback = jest.fn();\n      (supabase.auth.onAuthStateChange as jest.Mock).mockReturnValue({\n        data: { subscription: { unsubscribe: jest.fn() } }\n      });\n\n      renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      expect(supabase.auth.onAuthStateChange).toHaveBeenCalled();\n    });\n\n    it('debe limpiar la suscripción al desmontar', () => {\n      const mockUnsubscribe = jest.fn();\n      (supabase.auth.onAuthStateChange as jest.Mock).mockReturnValue({\n        data: { subscription: { unsubscribe: mockUnsubscribe } }\n      });\n\n      const { unmount } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      unmount();\n\n      expect(mockUnsubscribe).toHaveBeenCalled();\n    });\n  });\n\n  describe('Casos Edge', () => {\n    it('debe manejar errores de red', async () => {\n      (supabase.auth.signInWithPassword as jest.Mock).mockRejectedValue(\n        new Error('Network error')\n      );\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signIn({\n          email: 'test@example.com',\n          password: 'Password123!'\n        });\n      });\n\n      expect(toast.error).toHaveBeenCalledWith(\n        'Error de conexión. Verifica tu internet.'\n      );\n    });\n\n    it('debe manejar respuestas inesperadas del servidor', async () => {\n      (supabase.auth.signUp as jest.Mock).mockResolvedValue(null);\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signUp({\n          email: 'test@example.com',\n          password: 'Password123!',\n          full_name: 'Test User'\n        });\n      });\n\n      expect(toast.error).toHaveBeenCalledWith(\n        'Error inesperado. Intenta nuevamente.'\n      );\n    });\n\n    it('debe prevenir múltiples llamadas simultáneas', async () => {\n      let resolveSignIn: (value: any) => void;\n      const signInPromise = new Promise(resolve => {\n        resolveSignIn = resolve;\n      });\n\n      (supabase.auth.signInWithPassword as jest.Mock).mockReturnValue(signInPromise);\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      // Iniciar dos llamadas simultáneas\n      const promise1 = act(async () => {\n        await result.current.signIn({\n          email: 'test@example.com',\n          password: 'Password123!'\n        });\n      });\n\n      const promise2 = act(async () => {\n        await result.current.signIn({\n          email: 'test@example.com',\n          password: 'Password123!'\n        });\n      });\n\n      // Resolver la primera llamada\n      resolveSignIn!({\n        data: { user: { id: 'user-123' } },\n        error: null\n      });\n\n      await Promise.all([promise1, promise2]);\n\n      // Solo debe haberse llamado una vez\n      expect(supabase.auth.signInWithPassword).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Integración con Router', () => {\n    it('debe redirigir después del login exitoso', async () => {\n      (supabase.auth.signInWithPassword as jest.Mock).mockResolvedValue({\n        data: { user: { id: 'user-123' } },\n        error: null\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signIn({\n          email: 'test@example.com',\n          password: 'Password123!'\n        });\n      });\n\n      expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');\n    });\n\n    it('debe redirigir a home después del logout', async () => {\n      (supabase.auth.signOut as jest.Mock).mockResolvedValue({\n        error: null\n      });\n\n      const { result } = renderHook(() => useAuth(), {\n        wrapper: createWrapper()\n      });\n\n      await act(async () => {\n        await result.current.signOut();\n      });\n\n      expect(mockRouter.push).toHaveBeenCalledWith('/');\n    });\n  });\n});"],"names":["jest","mock","supabase","auth","signUp","fn","signInWithPassword","signOut","getUser","onAuthStateChange","getSession","from","select","eq","single","toast","success","error","loading","useRouter","mockRouter","push","replace","refresh","createWrapper","queryClient","QueryClient","defaultOptions","queries","retry","children","QueryClientProvider","client","describe","beforeEach","clearAllMocks","mockReturnValue","it","mockUser","id","email","user_metadata","full_name","mockResolvedValue","data","user","result","renderHook","useAuth","wrapper","act","current","password","expect","toHaveBeenCalledWith","options","message","not","toHaveBeenCalled","stringContaining","signIn","waitFor","toEqual","isAuthenticated","toBe","toBeNull","isLoading","mockProfile","avatar_url","phone","profile","mockCallback","subscription","unsubscribe","mockUnsubscribe","unmount","mockRejectedValue","Error","resolveSignIn","signInPromise","Promise","resolve","promise1","promise2","all","toHaveBeenCalledTimes"],"mappings":"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"}