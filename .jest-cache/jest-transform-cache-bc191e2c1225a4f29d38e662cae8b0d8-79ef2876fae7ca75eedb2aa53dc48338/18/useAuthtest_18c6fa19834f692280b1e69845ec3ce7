8e1814d1fee281e4058310ea36b08667
// ===================================
// TESTS PARA HOOK DE AUTENTICACIÓN
// Tests unitarios e integración para useAuth
// ===================================
"use strict";
// Mocks
jest.mock('@/lib/supabase', ()=>({
        supabase: {
            auth: {
                signUp: jest.fn(),
                signInWithPassword: jest.fn(),
                signOut: jest.fn(),
                getUser: jest.fn(),
                onAuthStateChange: jest.fn(),
                getSession: jest.fn()
            },
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        }))
                }))
        }
    }));
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            loading: jest.fn()
        }
    }));
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _useAuth = require("../../hooks/useAuth");
const _supabase = require("../../lib/supabase");
const _sonner = require("sonner");
const _navigation = require("next/navigation");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockRouter = {
    push: jest.fn(),
    replace: jest.fn(),
    refresh: jest.fn()
};
// Wrapper para React Query
const createWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
};
describe('useAuth Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        _navigation.useRouter.mockReturnValue(mockRouter);
    });
    describe('Registro de Usuario', ()=>{
        it('debe registrar un usuario exitosamente', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                user_metadata: {
                    full_name: 'Test User'
                }
            };
            _supabase.supabase.auth.signUp.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signUp({
                    email: 'test@example.com',
                    password: 'Password123!',
                    full_name: 'Test User'
                });
            });
            expect(_supabase.supabase.auth.signUp).toHaveBeenCalledWith({
                email: 'test@example.com',
                password: 'Password123!',
                options: {
                    data: {
                        full_name: 'Test User'
                    }
                }
            });
            expect(_sonner.toast.success).toHaveBeenCalledWith('Registro exitoso. Revisa tu email para confirmar tu cuenta.');
        });
        it('debe manejar errores de registro', async ()=>{
            _supabase.supabase.auth.signUp.mockResolvedValue({
                data: null,
                error: {
                    message: 'Email already registered'
                }
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signUp({
                    email: 'existing@example.com',
                    password: 'Password123!',
                    full_name: 'Test User'
                });
            });
            expect(_sonner.toast.error).toHaveBeenCalledWith('Email already registered');
        });
        it('debe validar datos de entrada antes del registro', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signUp({
                    email: 'invalid-email',
                    password: '123',
                    full_name: ''
                });
            });
            expect(_supabase.supabase.auth.signUp).not.toHaveBeenCalled();
            expect(_sonner.toast.error).toHaveBeenCalledWith(expect.stringContaining('datos válidos'));
        });
    });
    describe('Inicio de Sesión', ()=>{
        it('debe iniciar sesión exitosamente', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com'
            };
            _supabase.supabase.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn({
                    email: 'test@example.com',
                    password: 'Password123!'
                });
            });
            expect(_supabase.supabase.auth.signInWithPassword).toHaveBeenCalledWith({
                email: 'test@example.com',
                password: 'Password123!'
            });
            expect(_sonner.toast.success).toHaveBeenCalledWith('¡Bienvenido de vuelta!');
            expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');
        });
        it('debe manejar credenciales inválidas', async ()=>{
            _supabase.supabase.auth.signInWithPassword.mockResolvedValue({
                data: null,
                error: {
                    message: 'Invalid login credentials'
                }
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn({
                    email: 'test@example.com',
                    password: 'wrongpassword'
                });
            });
            expect(_sonner.toast.error).toHaveBeenCalledWith('Credenciales inválidas');
            expect(mockRouter.push).not.toHaveBeenCalled();
        });
        it('debe validar email y contraseña antes del login', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn({
                    email: '',
                    password: ''
                });
            });
            expect(_supabase.supabase.auth.signInWithPassword).not.toHaveBeenCalled();
            expect(_sonner.toast.error).toHaveBeenCalledWith('Por favor ingresa email y contraseña');
        });
    });
    describe('Cierre de Sesión', ()=>{
        it('debe cerrar sesión exitosamente', async ()=>{
            _supabase.supabase.auth.signOut.mockResolvedValue({
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signOut();
            });
            expect(_supabase.supabase.auth.signOut).toHaveBeenCalled();
            expect(_sonner.toast.success).toHaveBeenCalledWith('Sesión cerrada exitosamente');
            expect(mockRouter.push).toHaveBeenCalledWith('/');
        });
        it('debe manejar errores al cerrar sesión', async ()=>{
            _supabase.supabase.auth.signOut.mockResolvedValue({
                error: {
                    message: 'Sign out failed'
                }
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signOut();
            });
            expect(_sonner.toast.error).toHaveBeenCalledWith('Error al cerrar sesión');
        });
    });
    describe('Estado de Autenticación', ()=>{
        it('debe obtener el usuario actual', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com'
            };
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.user).toEqual(mockUser);
                expect(result.current.isAuthenticated).toBe(true);
            });
        });
        it('debe manejar usuario no autenticado', async ()=>{
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.user).toBeNull();
                expect(result.current.isAuthenticated).toBe(false);
            });
        });
        it('debe mostrar estado de carga inicial', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isLoading).toBe(true);
        });
    });
    describe('Perfil de Usuario', ()=>{
        it('debe obtener el perfil del usuario', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com'
            };
            const mockProfile = {
                id: 'user-123',
                full_name: 'Test User',
                avatar_url: 'https://example.com/avatar.jpg',
                phone: '+1234567890'
            };
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            _supabase.supabase.from.mockReturnValue({
                select: jest.fn().mockReturnValue({
                    eq: jest.fn().mockReturnValue({
                        single: jest.fn().mockResolvedValue({
                            data: mockProfile,
                            error: null
                        })
                    })
                })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.profile).toEqual(mockProfile);
            });
        });
        it('debe manejar errores al obtener el perfil', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com'
            };
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            _supabase.supabase.from.mockReturnValue({
                select: jest.fn().mockReturnValue({
                    eq: jest.fn().mockReturnValue({
                        single: jest.fn().mockResolvedValue({
                            data: null,
                            error: {
                                message: 'Profile not found'
                            }
                        })
                    })
                })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.profile).toBeNull();
            });
        });
    });
    describe('Cambios de Estado de Autenticación', ()=>{
        it('debe escuchar cambios de estado de autenticación', ()=>{
            const mockCallback = jest.fn();
            _supabase.supabase.auth.onAuthStateChange.mockReturnValue({
                data: {
                    subscription: {
                        unsubscribe: jest.fn()
                    }
                }
            });
            (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(_supabase.supabase.auth.onAuthStateChange).toHaveBeenCalled();
        });
        it('debe limpiar la suscripción al desmontar', ()=>{
            const mockUnsubscribe = jest.fn();
            _supabase.supabase.auth.onAuthStateChange.mockReturnValue({
                data: {
                    subscription: {
                        unsubscribe: mockUnsubscribe
                    }
                }
            });
            const { unmount } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            unmount();
            expect(mockUnsubscribe).toHaveBeenCalled();
        });
    });
    describe('Casos Edge', ()=>{
        it('debe manejar errores de red', async ()=>{
            _supabase.supabase.auth.signInWithPassword.mockRejectedValue(new Error('Network error'));
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn({
                    email: 'test@example.com',
                    password: 'Password123!'
                });
            });
            expect(_sonner.toast.error).toHaveBeenCalledWith('Error de conexión. Verifica tu internet.');
        });
        it('debe manejar respuestas inesperadas del servidor', async ()=>{
            _supabase.supabase.auth.signUp.mockResolvedValue(null);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signUp({
                    email: 'test@example.com',
                    password: 'Password123!',
                    full_name: 'Test User'
                });
            });
            expect(_sonner.toast.error).toHaveBeenCalledWith('Error inesperado. Intenta nuevamente.');
        });
        it('debe prevenir múltiples llamadas simultáneas', async ()=>{
            let resolveSignIn;
            const signInPromise = new Promise((resolve)=>{
                resolveSignIn = resolve;
            });
            _supabase.supabase.auth.signInWithPassword.mockReturnValue(signInPromise);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            // Iniciar dos llamadas simultáneas
            const promise1 = (0, _react.act)(async ()=>{
                await result.current.signIn({
                    email: 'test@example.com',
                    password: 'Password123!'
                });
            });
            const promise2 = (0, _react.act)(async ()=>{
                await result.current.signIn({
                    email: 'test@example.com',
                    password: 'Password123!'
                });
            });
            // Resolver la primera llamada
            resolveSignIn({
                data: {
                    user: {
                        id: 'user-123'
                    }
                },
                error: null
            });
            await Promise.all([
                promise1,
                promise2
            ]);
            // Solo debe haberse llamado una vez
            expect(_supabase.supabase.auth.signInWithPassword).toHaveBeenCalledTimes(1);
        });
    });
    describe('Integración con Router', ()=>{
        it('debe redirigir después del login exitoso', async ()=>{
            _supabase.supabase.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: {
                        id: 'user-123'
                    }
                },
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn({
                    email: 'test@example.com',
                    password: 'Password123!'
                });
            });
            expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');
        });
        it('debe redirigir a home después del logout', async ()=>{
            _supabase.supabase.auth.signOut.mockResolvedValue({
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signOut();
            });
            expect(mockRouter.push).toHaveBeenCalledWith('/');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,