b8fc4026312714cfae6937f46ffd5fd0
// =====================================================
// UTILIDADES: FORMATEO DE DATOS
// Descripción: Funciones para formatear fechas, números, monedas, etc.
// Basado en: Intl API + date-fns + patrones enterprise
// =====================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get capitalizeFirst () {
        return capitalizeFirst;
    },
    get formatAddress () {
        return formatAddress;
    },
    get formatCoordinates () {
        return formatCoordinates;
    },
    get formatCurrency () {
        return formatCurrency;
    },
    get formatDate () {
        return formatDate;
    },
    get formatDateTime () {
        return formatDateTime;
    },
    get formatDuration () {
        return formatDuration;
    },
    get formatFileSize () {
        return formatFileSize;
    },
    get formatNumber () {
        return formatNumber;
    },
    get formatOrderStatus () {
        return formatOrderStatus;
    },
    get formatPercentage () {
        return formatPercentage;
    },
    get formatPhoneNumber () {
        return formatPhoneNumber;
    },
    get formatRelativeTime () {
        return formatRelativeTime;
    },
    get formatShipmentStatus () {
        return formatShipmentStatus;
    },
    get formatSlug () {
        return formatSlug;
    },
    get formatTimeAgo () {
        return formatTimeAgo;
    },
    get truncateText () {
        return truncateText;
    }
});
const _datefns = require("date-fns");
const _locale = require("date-fns/locale");
function formatDate(date, pattern = 'dd/MM/yyyy') {
    try {
        const dateObj = typeof date === 'string' ? (0, _datefns.parseISO)(date) : date;
        if (!(0, _datefns.isValid)(dateObj)) {
            return 'Fecha inválida';
        }
        return (0, _datefns.format)(dateObj, pattern, {
            locale: _locale.es
        });
    } catch (error) {
        console.error('Error formatting date:', error);
        return 'Fecha inválida';
    }
}
function formatDateTime(date) {
    return formatDate(date, 'dd/MM/yyyy HH:mm');
}
function formatTimeAgo(date) {
    try {
        const dateObj = typeof date === 'string' ? (0, _datefns.parseISO)(date) : date;
        if (!(0, _datefns.isValid)(dateObj)) {
            return 'Fecha inválida';
        }
        return (0, _datefns.formatDistanceToNow)(dateObj, {
            addSuffix: true,
            locale: _locale.es
        });
    } catch (error) {
        console.error('Error formatting time ago:', error);
        return 'Fecha inválida';
    }
}
function formatRelativeTime(date) {
    return formatTimeAgo(date);
}
function formatCurrency(amount, currency = 'ARS', locale = 'es-AR') {
    try {
        return new Intl.NumberFormat(locale, {
            style: 'currency',
            currency: currency,
            minimumFractionDigits: 0,
            maximumFractionDigits: 2
        }).format(amount);
    } catch (error) {
        console.error('Error formatting currency:', error);
        return `$${amount.toFixed(2)}`;
    }
}
function formatNumber(number, locale = 'es-AR', options) {
    try {
        return new Intl.NumberFormat(locale, options).format(number);
    } catch (error) {
        console.error('Error formatting number:', error);
        return number.toString();
    }
}
function formatPercentage(value, decimals = 1, locale = 'es-AR') {
    try {
        return new Intl.NumberFormat(locale, {
            style: 'percent',
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(value / 100);
    } catch (error) {
        console.error('Error formatting percentage:', error);
        return `${value.toFixed(decimals)}%`;
    }
}
function formatPhoneNumber(phone) {
    // Formato argentino: +54 9 351 123 4567
    const cleaned = phone.replace(/\D/g, '');
    if (cleaned.length === 10) {
        // Formato local: 351 123 4567
        return cleaned.replace(/(\d{3})(\d{3})(\d{4})/, '$1 $2 $3');
    } else if (cleaned.length === 13 && cleaned.startsWith('549')) {
        // Formato internacional: +54 9 351 123 4567
        return cleaned.replace(/(\d{2})(\d{1})(\d{3})(\d{3})(\d{4})/, '+$1 $2 $3 $4 $5');
    }
    return phone;
}
function formatAddress(address) {
    const parts = [
        `${address.street} ${address.number}`,
        address.apartment ? `Depto ${address.apartment}` : '',
        address.neighborhood,
        address.city,
        address.state,
        `CP ${address.postal_code}`
    ].filter(Boolean);
    return parts.join(', ');
}
function truncateText(text, maxLength = 50) {
    if (text.length <= maxLength) {
        return text;
    }
    return text.substring(0, maxLength - 3) + '...';
}
function capitalizeFirst(text) {
    if (!text) return '';
    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();
}
function formatSlug(text) {
    return text.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '') // Remover acentos
    .replace(/[^a-z0-9\s-]/g, '') // Remover caracteres especiales
    .replace(/\s+/g, '-') // Reemplazar espacios con guiones
    .replace(/-+/g, '-') // Remover guiones múltiples
    .trim();
}
function formatShipmentStatus(status) {
    const statusMap = {
        pending: {
            label: 'Pendiente',
            color: 'secondary'
        },
        confirmed: {
            label: 'Confirmado',
            color: 'default'
        },
        picked_up: {
            label: 'Retirado',
            color: 'default'
        },
        in_transit: {
            label: 'En Tránsito',
            color: 'default'
        },
        out_for_delivery: {
            label: 'En Reparto',
            color: 'default'
        },
        delivered: {
            label: 'Entregado',
            color: 'default'
        },
        exception: {
            label: 'Excepción',
            color: 'destructive'
        },
        cancelled: {
            label: 'Cancelado',
            color: 'destructive'
        },
        returned: {
            label: 'Devuelto',
            color: 'outline'
        }
    };
    return statusMap[status] || {
        label: status,
        color: 'outline'
    };
}
function formatOrderStatus(status) {
    const statusMap = {
        pending: {
            label: 'Pendiente',
            color: 'secondary'
        },
        confirmed: {
            label: 'Confirmado',
            color: 'default'
        },
        processing: {
            label: 'Procesando',
            color: 'default'
        },
        shipped: {
            label: 'Enviado',
            color: 'default'
        },
        delivered: {
            label: 'Entregado',
            color: 'default'
        },
        cancelled: {
            label: 'Cancelado',
            color: 'destructive'
        },
        refunded: {
            label: 'Reembolsado',
            color: 'outline'
        },
        returned: {
            label: 'Devuelto',
            color: 'outline'
        }
    };
    return statusMap[status] || {
        label: status,
        color: 'outline'
    };
}
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = [
        'Bytes',
        'KB',
        'MB',
        'GB',
        'TB'
    ];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
function formatCoordinates(lat, lng) {
    const latDir = lat >= 0 ? 'N' : 'S';
    const lngDir = lng >= 0 ? 'E' : 'O';
    return `${Math.abs(lat).toFixed(6)}°${latDir}, ${Math.abs(lng).toFixed(6)}°${lngDir}`;
}
function formatDuration(minutes) {
    if (minutes < 60) {
        return `${minutes} min`;
    }
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    if (remainingMinutes === 0) {
        return `${hours}h`;
    }
    return `${hours}h ${remainingMinutes}min`;
}

//# sourceMappingURL=data:application/json;base64,