5466ac6fe3c18714cf041691ec1b05cc
/**
 * Sistema de Rate Limiting para APIs
 * Implementa límites de velocidad para prevenir ataques de fuerza bruta
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RATE_LIMIT_CONFIGS: function() {
        return RATE_LIMIT_CONFIGS;
    },
    checkRateLimit: function() {
        return checkRateLimit;
    },
    clearRateLimit: function() {
        return clearRateLimit;
    },
    getRateLimitStats: function() {
        return getRateLimitStats;
    },
    withAdminRateLimit: function() {
        return withAdminRateLimit;
    },
    withAuthRateLimit: function() {
        return withAuthRateLimit;
    },
    withPaymentRateLimit: function() {
        return withPaymentRateLimit;
    },
    withProductRateLimit: function() {
        return withProductRateLimit;
    },
    withRateLimit: function() {
        return withRateLimit;
    }
});
const RATE_LIMIT_CONFIGS = {
    // APIs de autenticación - muy restrictivo
    auth: {
        windowMs: 15 * 60 * 1000,
        maxRequests: 5,
        message: 'Demasiados intentos de autenticación. Intenta de nuevo en 15 minutos.'
    },
    // APIs admin - restrictivo
    admin: {
        windowMs: 5 * 60 * 1000,
        maxRequests: 30,
        message: 'Demasiadas requests administrativas. Intenta de nuevo en 5 minutos.'
    },
    // APIs de productos - moderado
    products: {
        windowMs: 1 * 60 * 1000,
        maxRequests: 60,
        message: 'Demasiadas requests de productos. Intenta de nuevo en 1 minuto.'
    },
    // APIs de pagos - muy restrictivo
    payments: {
        windowMs: 10 * 60 * 1000,
        maxRequests: 10,
        message: 'Demasiadas requests de pagos. Intenta de nuevo en 10 minutos.'
    },
    // APIs generales - permisivo
    general: {
        windowMs: 1 * 60 * 1000,
        maxRequests: 100,
        message: 'Demasiadas requests. Intenta de nuevo en 1 minuto.'
    }
};
// =====================================================
// ALMACENAMIENTO EN MEMORIA (Para desarrollo)
// =====================================================
const rateLimitStore = new Map();
// Limpiar entradas expiradas cada 5 minutos
setInterval(()=>{
    const now = Date.now();
    for (const [key, entry] of rateLimitStore.entries()){
        if (entry.resetTime < now) {
            rateLimitStore.delete(key);
        }
    }
}, 5 * 60 * 1000);
// =====================================================
// FUNCIONES DE RATE LIMITING
// =====================================================
/**
 * Genera una clave única para el rate limiting
 */ function generateRateLimitKey(request, prefix = 'default') {
    // Obtener IP del cliente
    let clientIP = 'unknown';
    if ('ip' in request && request.ip) {
        clientIP = request.ip;
    } else if ('headers' in request) {
        // Intentar obtener IP de headers
        const forwarded = getHeader(request, 'x-forwarded-for');
        const realIP = getHeader(request, 'x-real-ip');
        const cfIP = getHeader(request, 'cf-connecting-ip');
        clientIP = forwarded?.split(',')[0] || realIP || cfIP || 'unknown';
    }
    // Obtener User-Agent para mayor especificidad
    const userAgent = getHeader(request, 'user-agent') || 'unknown';
    const userAgentHash = hashString(userAgent);
    return `${prefix}:${clientIP}:${userAgentHash}`;
}
/**
 * Obtiene un header de manera compatible
 */ function getHeader(request, headerName) {
    if ('headers' in request && typeof request.headers.get === 'function') {
        return request.headers.get(headerName);
    } else if ('headers' in request) {
        const header = request.headers[headerName];
        return Array.isArray(header) ? header[0] : header || null;
    }
    return null;
}
/**
 * Hash simple para User-Agent
 */ function hashString(str) {
    let hash = 0;
    for(let i = 0; i < str.length; i++){
        const char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convertir a 32-bit integer
    }
    return Math.abs(hash).toString(36);
}
async function checkRateLimit(request, config, keyPrefix = 'api') {
    try {
        const now = Date.now();
        const key = config.keyGenerator ? config.keyGenerator(request) : generateRateLimitKey(request, keyPrefix);
        // Obtener entrada actual o crear nueva
        let entry = rateLimitStore.get(key);
        if (!entry || entry.resetTime < now) {
            // Crear nueva entrada
            entry = {
                count: 1,
                resetTime: now + config.windowMs,
                firstRequest: now
            };
            rateLimitStore.set(key, entry);
            return {
                allowed: true,
                limit: config.maxRequests,
                remaining: config.maxRequests - 1,
                resetTime: entry.resetTime
            };
        }
        // Incrementar contador
        entry.count++;
        rateLimitStore.set(key, entry);
        // Verificar si excede el límite
        if (entry.count > config.maxRequests) {
            const retryAfter = Math.ceil((entry.resetTime - now) / 1000);
            return {
                allowed: false,
                limit: config.maxRequests,
                remaining: 0,
                resetTime: entry.resetTime,
                retryAfter,
                error: config.message || 'Rate limit exceeded',
                code: 'RATE_LIMIT_EXCEEDED'
            };
        }
        return {
            allowed: true,
            limit: config.maxRequests,
            remaining: config.maxRequests - entry.count,
            resetTime: entry.resetTime
        };
    } catch (error) {
        console.error('[RATE_LIMIT] Error en verificación:', error);
        // En caso de error, permitir la request pero loggear
        return {
            allowed: true,
            limit: config.maxRequests,
            remaining: config.maxRequests,
            resetTime: Date.now() + config.windowMs,
            error: 'Error interno en rate limiting'
        };
    }
}
function withRateLimit(configName, customConfig) {
    const baseConfig = RATE_LIMIT_CONFIGS[configName];
    const config = {
        ...baseConfig,
        ...customConfig
    };
    return function(handler) {
        return async (request, ...args)=>{
            try {
                const rateLimitResult = await checkRateLimit(request, config, configName);
                // Añadir headers de rate limiting
                const headers = {
                    'X-RateLimit-Limit': rateLimitResult.limit.toString(),
                    'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),
                    'X-RateLimit-Reset': Math.ceil(rateLimitResult.resetTime / 1000).toString()
                };
                if (rateLimitResult.retryAfter) {
                    headers['Retry-After'] = rateLimitResult.retryAfter.toString();
                }
                if (!rateLimitResult.allowed) {
                    const errorResponse = {
                        success: false,
                        error: rateLimitResult.error,
                        code: rateLimitResult.code,
                        rateLimit: {
                            limit: rateLimitResult.limit,
                            remaining: rateLimitResult.remaining,
                            resetTime: rateLimitResult.resetTime,
                            retryAfter: rateLimitResult.retryAfter
                        }
                    };
                    if ('query' in request) {
                        // Pages Router
                        const res = args[0];
                        Object.entries(headers).forEach(([key, value])=>{
                            res.setHeader(key, value);
                        });
                        return res.status(429).json(errorResponse);
                    } else {
                        // App Router
                        return new Response(JSON.stringify(errorResponse), {
                            status: 429,
                            headers: {
                                'Content-Type': 'application/json',
                                ...headers
                            }
                        });
                    }
                }
                // Añadir información de rate limiting al request
                request.rateLimit = rateLimitResult;
                // Ejecutar handler original
                const response = await handler(request, ...args);
                // Añadir headers a la respuesta si es posible
                if (response && typeof response.headers?.set === 'function') {
                    Object.entries(headers).forEach(([key, value])=>{
                        response.headers.set(key, value);
                    });
                }
                return response;
            } catch (error) {
                console.error('[RATE_LIMIT] Error en middleware:', error);
                return handler(request, ...args);
            }
        };
    };
}
function withAuthRateLimit() {
    return withRateLimit('auth');
}
function withAdminRateLimit() {
    return withRateLimit('admin');
}
function withProductRateLimit() {
    return withRateLimit('products');
}
function withPaymentRateLimit() {
    return withRateLimit('payments');
}
function clearRateLimit(key) {
    return rateLimitStore.delete(key);
}
function getRateLimitStats() {
    const now = Date.now();
    const entries = Array.from(rateLimitStore.values());
    const activeEntries = entries.filter((entry)=>entry.resetTime > now);
    return {
        totalKeys: rateLimitStore.size,
        activeEntries: activeEntries.length,
        oldestEntry: entries.length > 0 ? Math.min(...entries.map((e)=>e.firstRequest)) : null,
        newestEntry: entries.length > 0 ? Math.max(...entries.map((e)=>e.firstRequest)) : null
    };
}

//# sourceMappingURL=data:application/json;base64,