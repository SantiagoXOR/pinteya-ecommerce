7916ced6434ad7a99c331dd35caa17d6
// ===================================
// PINTEYA E-COMMERCE - HOOK DE CARRITO CON BACKEND
// ===================================
// Hook optimizado que conecta el carrito frontend con las APIs del backend
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useCartWithBackend () {
        return useCartWithBackend;
    }
});
const _react = require("react");
const _react1 = require("next-auth/react");
const _sonner = require("sonner");
const useCartWithBackend = ()=>{
    const { data: session, status } = (0, _react1.useSession)();
    const [cartState, setCartState] = (0, _react.useState)({
        items: [],
        totalItems: 0,
        totalAmount: 0,
        itemCount: 0,
        loading: false,
        error: null
    });
    // Función para hacer requests a la API
    const apiRequest = (0, _react.useCallback)(async (url, options = {})=>{
        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.error || `HTTP ${response.status}`);
            }
            return data;
        } catch (error) {
            console.error(`API Error (${url}):`, error);
            throw error;
        }
    }, []);
    // Cargar carrito desde el backend
    const loadCart = (0, _react.useCallback)(async ()=>{
        if (status === 'loading') return;
        if (!session?.user) {
            // Usuario no autenticado - carrito vacío
            setCartState((prev)=>({
                    ...prev,
                    items: [],
                    totalItems: 0,
                    totalAmount: 0,
                    itemCount: 0,
                    loading: false,
                    error: null
                }));
            return;
        }
        setCartState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const data = await apiRequest('/api/cart');
            setCartState((prev)=>({
                    ...prev,
                    items: data.items || [],
                    totalItems: data.totalItems || 0,
                    totalAmount: data.totalAmount || 0,
                    itemCount: data.itemCount || 0,
                    loading: false,
                    error: null
                }));
            console.log('✅ Carrito cargado:', data.itemCount, 'productos únicos');
        } catch (error) {
            console.error('❌ Error cargando carrito:', error);
            setCartState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message || 'Error cargando carrito'
                }));
        }
    }, [
        session,
        status,
        apiRequest
    ]);
    // Agregar item al carrito
    const addItem = (0, _react.useCallback)(async (productId, quantity = 1)=>{
        if (!session?.user) {
            _sonner.toast.error('Debes iniciar sesión para agregar productos al carrito');
            return false;
        }
        setCartState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const data = await apiRequest('/api/cart/add', {
                method: 'POST',
                body: JSON.stringify({
                    productId,
                    quantity
                })
            });
            if (data.success) {
                // Recargar carrito para obtener estado actualizado
                await loadCart();
                _sonner.toast.success(data.message || 'Producto agregado al carrito');
                console.log('✅ Producto agregado:', data.item?.productName);
                return true;
            } else {
                throw new Error(data.error || 'Error agregando producto');
            }
        } catch (error) {
            console.error('❌ Error agregando al carrito:', error);
            setCartState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message
                }));
            if (error.message.includes('Stock insuficiente')) {
                _sonner.toast.error(error.message);
            } else if (error.message.includes('autenticado')) {
                _sonner.toast.error('Debes iniciar sesión para agregar productos');
            } else {
                _sonner.toast.error('Error agregando producto al carrito');
            }
            return false;
        }
    }, [
        session,
        apiRequest,
        loadCart
    ]);
    // Remover item del carrito
    const removeItem = (0, _react.useCallback)(async (productId, quantity)=>{
        if (!session?.user) {
            _sonner.toast.error('Debes iniciar sesión');
            return false;
        }
        setCartState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const data = await apiRequest('/api/cart/remove', {
                method: 'DELETE',
                body: JSON.stringify({
                    productId,
                    quantity
                })
            });
            if (data.success) {
                await loadCart();
                _sonner.toast.success(data.message || 'Producto removido del carrito');
                console.log('✅ Producto removido:', data.item?.productName);
                return true;
            } else {
                throw new Error(data.error || 'Error removiendo producto');
            }
        } catch (error) {
            console.error('❌ Error removiendo del carrito:', error);
            setCartState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message
                }));
            _sonner.toast.error('Error removiendo producto del carrito');
            return false;
        }
    }, [
        session,
        apiRequest,
        loadCart
    ]);
    // Actualizar cantidad de un item
    const updateQuantity = (0, _react.useCallback)(async (productId, quantity)=>{
        if (!session?.user) {
            _sonner.toast.error('Debes iniciar sesión');
            return false;
        }
        setCartState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const data = await apiRequest('/api/cart/update', {
                method: 'PUT',
                body: JSON.stringify({
                    productId,
                    quantity
                })
            });
            if (data.success) {
                await loadCart();
                _sonner.toast.success(data.message || 'Cantidad actualizada');
                console.log('✅ Cantidad actualizada:', data.item?.productName);
                return true;
            } else {
                throw new Error(data.error || 'Error actualizando cantidad');
            }
        } catch (error) {
            console.error('❌ Error actualizando cantidad:', error);
            setCartState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message
                }));
            _sonner.toast.error('Error actualizando cantidad');
            return false;
        }
    }, [
        session,
        apiRequest,
        loadCart
    ]);
    // Limpiar carrito completo
    const clearCart = (0, _react.useCallback)(async ()=>{
        if (!session?.user) {
            _sonner.toast.error('Debes iniciar sesión');
            return false;
        }
        setCartState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const data = await apiRequest('/api/cart', {
                method: 'DELETE'
            });
            if (data.success) {
                await loadCart();
                _sonner.toast.success('Carrito limpiado');
                console.log('✅ Carrito limpiado');
                return true;
            } else {
                throw new Error(data.error || 'Error limpiando carrito');
            }
        } catch (error) {
            console.error('❌ Error limpiando carrito:', error);
            setCartState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message
                }));
            _sonner.toast.error('Error limpiando carrito');
            return false;
        }
    }, [
        session,
        apiRequest,
        loadCart
    ]);
    // Obtener cantidad de un producto específico en el carrito
    const getItemQuantity = (0, _react.useCallback)((productId)=>{
        const item = cartState.items.find((item)=>item.product_id === productId);
        return item?.quantity || 0;
    }, [
        cartState.items
    ]);
    // Verificar si un producto está en el carrito
    const isInCart = (0, _react.useCallback)((productId)=>{
        return cartState.items.some((item)=>item.product_id === productId);
    }, [
        cartState.items
    ]);
    // Refrescar carrito (alias para loadCart)
    const refreshCart = (0, _react.useCallback)(async ()=>{
        await loadCart();
    }, [
        loadCart
    ]);
    // Cargar carrito al montar el componente o cuando cambie la sesión
    (0, _react.useEffect)(()=>{
        loadCart();
    }, [
        loadCart
    ]);
    return {
        ...cartState,
        addItem,
        removeItem,
        updateQuantity,
        clearCart,
        loadCart,
        getItemQuantity,
        isInCart,
        refreshCart
    };
};
const _default = useCartWithBackend;

//# sourceMappingURL=data:application/json;base64,