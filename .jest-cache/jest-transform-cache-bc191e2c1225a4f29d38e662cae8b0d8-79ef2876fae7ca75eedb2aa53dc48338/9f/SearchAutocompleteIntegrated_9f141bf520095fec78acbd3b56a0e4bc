92645202e7eb50a72452248a67769814
// ===================================
// COMPONENTE: SearchAutocompleteIntegrated - Integración completa con useSearch
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SearchAutocompleteIntegrated: function() {
        return SearchAutocompleteIntegrated;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _searchautocomplete = require("./search-autocomplete");
const _useSearchOptimized = require("../../hooks/useSearchOptimized");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const SearchAutocompleteIntegrated = /*#__PURE__*/ _react.default.forwardRef(({ debounceMs = 100, maxSuggestions = 6, searchLimit = 12, saveRecentSearches = true, onSearchExecuted, onSuggestionSelected, onSearch, onSuggestionSelect, ...props }, ref)=>{
    // Hook de búsqueda optimizado con TanStack Query
    const { query, results, suggestions, isLoading, error, searchWithDebounce, executeSearch, selectSuggestion, clearSearch } = (0, _useSearchOptimized.useSearchOptimized)({
        debounceMs,
        maxSuggestions,
        searchLimit,
        saveRecentSearches,
        onSearch: (query, results)=>{
            onSearchExecuted?.(query, results);
            onSearch?.(query);
        },
        onSuggestionSelect: (suggestion)=>{
            onSuggestionSelected?.(suggestion);
            onSuggestionSelect?.(suggestion);
        }
    });
    // Debugging del estado del hook
    console.log('🔍 SearchAutocompleteIntegrated: Hook state:', {
        query,
        suggestions: suggestions?.length || 0,
        suggestionsDetailed: suggestions?.map((s)=>({
                type: s.type,
                title: s.title
            })) || [],
        isLoading,
        error,
        results: results?.length || 0
    });
    // Manejar envío de búsqueda
    const handleSearch = (query)=>{
        executeSearch(query);
    };
    // Manejar selección de sugerencia
    const handleSuggestionSelect = (suggestion)=>{
        selectSuggestion(suggestion);
    };
    // Manejar limpieza
    const handleClear = ()=>{
        clearSearch();
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
        ref: ref,
        ...props,
        // Estado del hook optimizado
        query: query,
        suggestions: suggestions,
        isLoading: isLoading,
        error: error,
        // Callbacks integrados
        onSearch: handleSearch,
        onSuggestionSelect: handleSuggestionSelect,
        searchWithDebounce: searchWithDebounce,
        onClear: handleClear
    });
});
SearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated';
const _default = SearchAutocompleteIntegrated;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcdWlcXFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIENPTVBPTkVOVEU6IFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQgLSBJbnRlZ3JhY2nDs24gY29tcGxldGEgY29uIHVzZVNlYXJjaFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2VhcmNoQXV0b2NvbXBsZXRlLCBTZWFyY2hBdXRvY29tcGxldGVQcm9wcyB9IGZyb20gJy4vc2VhcmNoLWF1dG9jb21wbGV0ZSc7XHJcbmltcG9ydCB7IHVzZVNlYXJjaE9wdGltaXplZCB9IGZyb20gJ0AvaG9va3MvdXNlU2VhcmNoT3B0aW1pemVkJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZFByb3BzIFxyXG4gIGV4dGVuZHMgT21pdDxTZWFyY2hBdXRvY29tcGxldGVQcm9wcywgJ3F1ZXJ5JyB8ICdzdWdnZXN0aW9ucycgfCAnaXNMb2FkaW5nJyB8ICdlcnJvcicgfCAnc2VhcmNoV2l0aERlYm91bmNlJyB8ICdvbkNsZWFyJz4ge1xyXG4gIC8vIENvbmZpZ3VyYWNpw7NuIGRlbCBob29rIHVzZVNlYXJjaFxyXG4gIGRlYm91bmNlTXM/OiBudW1iZXI7XHJcbiAgbWF4U3VnZ2VzdGlvbnM/OiBudW1iZXI7XHJcbiAgc2VhcmNoTGltaXQ/OiBudW1iZXI7XHJcbiAgc2F2ZVJlY2VudFNlYXJjaGVzPzogYm9vbGVhbjtcclxuICBcclxuICAvLyBDYWxsYmFja3MgYWRpY2lvbmFsZXNcclxuICBvblNlYXJjaEV4ZWN1dGVkPzogKHF1ZXJ5OiBzdHJpbmcsIHJlc3VsdHM6IGFueVtdKSA9PiB2b2lkO1xyXG4gIG9uU3VnZ2VzdGlvblNlbGVjdGVkPzogKHN1Z2dlc3Rpb246IGFueSkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQgLSBDb21wb25lbnRlIHF1ZSBpbnRlZ3JhIFNlYXJjaEF1dG9jb21wbGV0ZSBjb24gdXNlU2VhcmNoXHJcbiAqIFxyXG4gKiBFc3RlIGNvbXBvbmVudGUgcHJvcG9yY2lvbmEgdW5hIGV4cGVyaWVuY2lhIGRlIGLDunNxdWVkYSBjb21wbGV0YSBzaW4gbmVjZXNpZGFkXHJcbiAqIGRlIG1hbmVqYXIgbWFudWFsbWVudGUgZWwgZXN0YWRvIGRlbCBob29rIHVzZVNlYXJjaC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MSW5wdXRFbGVtZW50LCBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkUHJvcHM+KFxyXG4gICh7XHJcbiAgICBkZWJvdW5jZU1zID0gMTAwLFxyXG4gICAgbWF4U3VnZ2VzdGlvbnMgPSA2LFxyXG4gICAgc2VhcmNoTGltaXQgPSAxMixcclxuICAgIHNhdmVSZWNlbnRTZWFyY2hlcyA9IHRydWUsXHJcbiAgICBvblNlYXJjaEV4ZWN1dGVkLFxyXG4gICAgb25TdWdnZXN0aW9uU2VsZWN0ZWQsXHJcbiAgICBvblNlYXJjaCxcclxuICAgIG9uU3VnZ2VzdGlvblNlbGVjdCxcclxuICAgIC4uLnByb3BzXHJcbiAgfSwgcmVmKSA9PiB7XHJcbiAgICBcclxuICAgIC8vIEhvb2sgZGUgYsO6c3F1ZWRhIG9wdGltaXphZG8gY29uIFRhblN0YWNrIFF1ZXJ5XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHF1ZXJ5LFxyXG4gICAgICByZXN1bHRzLFxyXG4gICAgICBzdWdnZXN0aW9ucyxcclxuICAgICAgaXNMb2FkaW5nLFxyXG4gICAgICBlcnJvcixcclxuICAgICAgc2VhcmNoV2l0aERlYm91bmNlLFxyXG4gICAgICBleGVjdXRlU2VhcmNoLFxyXG4gICAgICBzZWxlY3RTdWdnZXN0aW9uLFxyXG4gICAgICBjbGVhclNlYXJjaCxcclxuICAgIH0gPSB1c2VTZWFyY2hPcHRpbWl6ZWQoe1xyXG4gICAgICBkZWJvdW5jZU1zLFxyXG4gICAgICBtYXhTdWdnZXN0aW9ucyxcclxuICAgICAgc2VhcmNoTGltaXQsXHJcbiAgICAgIHNhdmVSZWNlbnRTZWFyY2hlcyxcclxuICAgICAgb25TZWFyY2g6IChxdWVyeSwgcmVzdWx0cykgPT4ge1xyXG4gICAgICAgIG9uU2VhcmNoRXhlY3V0ZWQ/LihxdWVyeSwgcmVzdWx0cyk7XHJcbiAgICAgICAgb25TZWFyY2g/LihxdWVyeSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIG9uU3VnZ2VzdGlvblNlbGVjdDogKHN1Z2dlc3Rpb24pID0+IHtcclxuICAgICAgICBvblN1Z2dlc3Rpb25TZWxlY3RlZD8uKHN1Z2dlc3Rpb24pO1xyXG4gICAgICAgIG9uU3VnZ2VzdGlvblNlbGVjdD8uKHN1Z2dlc3Rpb24pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBEZWJ1Z2dpbmcgZGVsIGVzdGFkbyBkZWwgaG9va1xyXG4gICAgY29uc29sZS5sb2coJ/CflI0gU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZDogSG9vayBzdGF0ZTonLCB7XHJcbiAgICAgIHF1ZXJ5LFxyXG4gICAgICBzdWdnZXN0aW9uczogc3VnZ2VzdGlvbnM/Lmxlbmd0aCB8fCAwLFxyXG4gICAgICBzdWdnZXN0aW9uc0RldGFpbGVkOiBzdWdnZXN0aW9ucz8ubWFwKHMgPT4gKHsgdHlwZTogcy50eXBlLCB0aXRsZTogcy50aXRsZSB9KSkgfHwgW10sXHJcbiAgICAgIGlzTG9hZGluZyxcclxuICAgICAgZXJyb3IsXHJcbiAgICAgIHJlc3VsdHM6IHJlc3VsdHM/Lmxlbmd0aCB8fCAwXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBNYW5lamFyIGVudsOtbyBkZSBiw7pzcXVlZGFcclxuICAgIGNvbnN0IGhhbmRsZVNlYXJjaCA9IChxdWVyeTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGV4ZWN1dGVTZWFyY2gocXVlcnkpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNYW5lamFyIHNlbGVjY2nDs24gZGUgc3VnZXJlbmNpYVxyXG4gICAgY29uc3QgaGFuZGxlU3VnZ2VzdGlvblNlbGVjdCA9IChzdWdnZXN0aW9uOiBhbnkpID0+IHtcclxuICAgICAgc2VsZWN0U3VnZ2VzdGlvbihzdWdnZXN0aW9uKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gTWFuZWphciBsaW1waWV6YVxyXG4gICAgY29uc3QgaGFuZGxlQ2xlYXIgPSAoKSA9PiB7XHJcbiAgICAgIGNsZWFyU2VhcmNoKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxTZWFyY2hBdXRvY29tcGxldGVcclxuICAgICAgICByZWY9e3JlZn1cclxuICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgLy8gRXN0YWRvIGRlbCBob29rIG9wdGltaXphZG9cclxuICAgICAgICBxdWVyeT17cXVlcnl9XHJcbiAgICAgICAgc3VnZ2VzdGlvbnM9e3N1Z2dlc3Rpb25zfVxyXG4gICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxyXG4gICAgICAgIGVycm9yPXtlcnJvcn1cclxuICAgICAgICAvLyBDYWxsYmFja3MgaW50ZWdyYWRvc1xyXG4gICAgICAgIG9uU2VhcmNoPXtoYW5kbGVTZWFyY2h9XHJcbiAgICAgICAgb25TdWdnZXN0aW9uU2VsZWN0PXtoYW5kbGVTdWdnZXN0aW9uU2VsZWN0fVxyXG4gICAgICAgIHNlYXJjaFdpdGhEZWJvdW5jZT17c2VhcmNoV2l0aERlYm91bmNlfVxyXG4gICAgICAgIG9uQ2xlYXI9e2hhbmRsZUNsZWFyfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcblxyXG5TZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkLmRpc3BsYXlOYW1lID0gJ1NlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZDtcclxuIl0sIm5hbWVzIjpbIlNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJkZWJvdW5jZU1zIiwibWF4U3VnZ2VzdGlvbnMiLCJzZWFyY2hMaW1pdCIsInNhdmVSZWNlbnRTZWFyY2hlcyIsIm9uU2VhcmNoRXhlY3V0ZWQiLCJvblN1Z2dlc3Rpb25TZWxlY3RlZCIsIm9uU2VhcmNoIiwib25TdWdnZXN0aW9uU2VsZWN0IiwicHJvcHMiLCJyZWYiLCJxdWVyeSIsInJlc3VsdHMiLCJzdWdnZXN0aW9ucyIsImlzTG9hZGluZyIsImVycm9yIiwic2VhcmNoV2l0aERlYm91bmNlIiwiZXhlY3V0ZVNlYXJjaCIsInNlbGVjdFN1Z2dlc3Rpb24iLCJjbGVhclNlYXJjaCIsInVzZVNlYXJjaE9wdGltaXplZCIsInN1Z2dlc3Rpb24iLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwic3VnZ2VzdGlvbnNEZXRhaWxlZCIsIm1hcCIsInMiLCJ0eXBlIiwidGl0bGUiLCJoYW5kbGVTZWFyY2giLCJoYW5kbGVTdWdnZXN0aW9uU2VsZWN0IiwiaGFuZGxlQ2xlYXIiLCJTZWFyY2hBdXRvY29tcGxldGUiLCJvbkNsZWFyIiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0QyxnRkFBZ0Y7QUFDaEYsc0NBQXNDOzs7Ozs7Ozs7Ozs7SUF5QnpCQSw0QkFBNEI7ZUFBNUJBOztJQXFGYixPQUE0QztlQUE1Qzs7Ozs4REE1R2tCO29DQUMwQztvQ0FDekI7Ozs7OztBQXFCNUIsTUFBTUEsNkNBQStCQyxjQUFLLENBQUNDLFVBQVUsQ0FDMUQsQ0FBQyxFQUNDQyxhQUFhLEdBQUcsRUFDaEJDLGlCQUFpQixDQUFDLEVBQ2xCQyxjQUFjLEVBQUUsRUFDaEJDLHFCQUFxQixJQUFJLEVBQ3pCQyxnQkFBZ0IsRUFDaEJDLG9CQUFvQixFQUNwQkMsUUFBUSxFQUNSQyxrQkFBa0IsRUFDbEIsR0FBR0MsT0FDSixFQUFFQztJQUVELGlEQUFpRDtJQUNqRCxNQUFNLEVBQ0pDLEtBQUssRUFDTEMsT0FBTyxFQUNQQyxXQUFXLEVBQ1hDLFNBQVMsRUFDVEMsS0FBSyxFQUNMQyxrQkFBa0IsRUFDbEJDLGFBQWEsRUFDYkMsZ0JBQWdCLEVBQ2hCQyxXQUFXLEVBQ1osR0FBR0MsSUFBQUEsc0NBQWtCLEVBQUM7UUFDckJuQjtRQUNBQztRQUNBQztRQUNBQztRQUNBRyxVQUFVLENBQUNJLE9BQU9DO1lBQ2hCUCxtQkFBbUJNLE9BQU9DO1lBQzFCTCxXQUFXSTtRQUNiO1FBQ0FILG9CQUFvQixDQUFDYTtZQUNuQmYsdUJBQXVCZTtZQUN2QmIscUJBQXFCYTtRQUN2QjtJQUNGO0lBRUEsZ0NBQWdDO0lBQ2hDQyxRQUFRQyxHQUFHLENBQUMsZ0RBQWdEO1FBQzFEWjtRQUNBRSxhQUFhQSxhQUFhVyxVQUFVO1FBQ3BDQyxxQkFBcUJaLGFBQWFhLElBQUlDLENBQUFBLElBQU0sQ0FBQTtnQkFBRUMsTUFBTUQsRUFBRUMsSUFBSTtnQkFBRUMsT0FBT0YsRUFBRUUsS0FBSztZQUFDLENBQUEsTUFBTyxFQUFFO1FBQ3BGZjtRQUNBQztRQUNBSCxTQUFTQSxTQUFTWSxVQUFVO0lBQzlCO0lBRUEsNEJBQTRCO0lBQzVCLE1BQU1NLGVBQWUsQ0FBQ25CO1FBQ3BCTSxjQUFjTjtJQUNoQjtJQUVBLGtDQUFrQztJQUNsQyxNQUFNb0IseUJBQXlCLENBQUNWO1FBQzlCSCxpQkFBaUJHO0lBQ25CO0lBRUEsbUJBQW1CO0lBQ25CLE1BQU1XLGNBQWM7UUFDbEJiO0lBQ0Y7SUFFQSxxQkFDRSxxQkFBQ2Msc0NBQWtCO1FBQ2pCdkIsS0FBS0E7UUFDSixHQUFHRCxLQUFLO1FBQ1QsNkJBQTZCO1FBQzdCRSxPQUFPQTtRQUNQRSxhQUFhQTtRQUNiQyxXQUFXQTtRQUNYQyxPQUFPQTtRQUNQLHVCQUF1QjtRQUN2QlIsVUFBVXVCO1FBQ1Z0QixvQkFBb0J1QjtRQUNwQmYsb0JBQW9CQTtRQUNwQmtCLFNBQVNGOztBQUdmO0FBR0ZsQyw2QkFBNkJxQyxXQUFXLEdBQUc7TUFFM0MsV0FBZXJDIn0=