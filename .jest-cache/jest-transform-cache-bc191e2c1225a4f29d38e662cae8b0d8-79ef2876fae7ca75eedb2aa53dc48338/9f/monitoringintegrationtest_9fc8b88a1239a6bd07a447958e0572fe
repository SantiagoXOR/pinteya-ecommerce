2808dd7fe2e6269fec4e93ac5b043b5d
// ===================================
// PINTEYA E-COMMERCE - MONITORING INTEGRATION TESTS
// ===================================
"use strict";
// Mock dependencies
jest.mock('@/lib/auth/admin-auth', ()=>({
        getAuthenticatedAdmin: jest.fn(()=>({
                isAdmin: true,
                userId: 'admin-user-123'
            }))
    }));
jest.mock('@/lib/supabase', ()=>({
        getSupabaseClient: jest.fn(()=>({
                from: jest.fn(()=>({
                        select: jest.fn(()=>({
                                eq: jest.fn(()=>({
                                        single: jest.fn(()=>({
                                                data: null,
                                                error: null
                                            })),
                                        order: jest.fn(()=>({
                                                limit: jest.fn(()=>({
                                                        data: [],
                                                        error: null
                                                    })),
                                                range: jest.fn(()=>({
                                                        data: [],
                                                        error: null
                                                    }))
                                            })),
                                        gte: jest.fn(()=>({
                                                lte: jest.fn(()=>({
                                                        order: jest.fn(()=>({
                                                                data: [],
                                                                error: null
                                                            }))
                                                    }))
                                            })),
                                        in: jest.fn(()=>({
                                                gte: jest.fn(()=>({
                                                        lte: jest.fn(()=>({
                                                                order: jest.fn(()=>({
                                                                        data: [],
                                                                        error: null
                                                                    }))
                                                            }))
                                                    }))
                                            })),
                                        is: jest.fn(()=>({
                                                order: jest.fn(()=>({
                                                        limit: jest.fn(()=>({
                                                                data: [],
                                                                error: null
                                                            }))
                                                    }))
                                            }))
                                    })),
                                insert: jest.fn(()=>({
                                        error: null
                                    })),
                                update: jest.fn(()=>({
                                        error: null
                                    })),
                                delete: jest.fn(()=>({
                                        error: null
                                    }))
                            })),
                        rpc: jest.fn(()=>({
                                data: [],
                                error: null
                            }))
                    }))
            }))
    }));
jest.mock('@/lib/cache-manager', ()=>({
        CacheUtils: {
            get: jest.fn(),
            set: jest.fn(),
            cacheMetricsAggregation: jest.fn((key, fn)=>fn())
        }
    }));
jest.mock('@/lib/logger', ()=>({
        logger: {
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            debug: jest.fn()
        },
        LogLevel: {
            INFO: 'info',
            WARN: 'warn',
            ERROR: 'error',
            DEBUG: 'debug'
        },
        LogCategory: {
            SYSTEM: 'system'
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _enterprisemetrics = require("../../lib/monitoring/enterprise-metrics");
const _alertsystem = require("../../lib/monitoring/alert-system");
const _healthchecks = require("../../lib/monitoring/health-checks");
const _circuitbreaker = require("../../lib/mercadopago/circuit-breaker");
// Helper para crear requests
function createRequest(url, options = {}) {
    return new _server.NextRequest(url, {
        method: options.method || 'GET',
        body: options.body ? JSON.stringify(options.body) : undefined,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
}
describe('Monitoring Integration Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.useRealTimers();
    });
    describe('Flujo Completo de Métricas', ()=>{
        test('debe registrar métrica, disparar alerta y ejecutar health check', async ()=>{
            // 1. Registrar métrica que supera umbral
            await _enterprisemetrics.enterpriseMetrics.recordMetric('test.critical.metric', 150, 'gauge', 'performance', {
                environment: 'test'
            });
            // 2. Configurar regla de alerta
            _alertsystem.enterpriseAlertSystem.setAlertRule({
                id: 'test_critical_alert',
                name: 'Test Critical Alert',
                description: 'Test alert for integration',
                enabled: true,
                metricName: 'test.critical.metric',
                condition: 'gt',
                threshold: 100,
                level: 'critical',
                cooldownMinutes: 1,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {
                    test: 'integration'
                }
            });
            // 3. Disparar alerta
            const alert = await _alertsystem.enterpriseAlertSystem.triggerAlert('test_critical_alert', 'test.critical.metric', 150, 'Integration test alert');
            expect(alert).toBeTruthy();
            expect(alert?.level).toBe('critical');
            // 4. Ejecutar health check
            const healthResult = await _healthchecks.enterpriseHealthSystem.runHealthCheck('database');
            expect(healthResult.service).toBe('database');
            expect(healthResult.status).toBeDefined();
            // Verificar que todo el flujo funciona sin errores
            expect(true).toBe(true);
        });
        test('debe manejar escalamiento de alertas automáticamente', async ()=>{
            // Configurar regla de escalamiento
            _alertsystem.enterpriseAlertSystem.setEscalationRule({
                id: 'test_escalation',
                name: 'Test Escalation',
                enabled: true,
                conditions: {
                    level: 'warning',
                    duration: 1 // 1 minuto
                },
                actions: {
                    escalateToLevel: 'critical',
                    notifyChannels: [
                        'default_log'
                    ]
                }
            });
            // Configurar alerta con escalamiento
            _alertsystem.enterpriseAlertSystem.setAlertRule({
                id: 'escalation_test',
                name: 'Escalation Test',
                description: 'Test escalation',
                enabled: true,
                metricName: 'test.escalation.metric',
                condition: 'gt',
                threshold: 50,
                level: 'warning',
                cooldownMinutes: 1,
                channels: [
                    'default_log'
                ],
                escalationRules: [
                    'test_escalation'
                ],
                tags: {}
            });
            // Disparar alerta inicial
            const alert = await _alertsystem.enterpriseAlertSystem.triggerAlert('escalation_test', 'test.escalation.metric', 75);
            expect(alert).toBeTruthy();
            expect(alert?.level).toBe('warning');
            // Simular paso del tiempo para escalamiento
            jest.advanceTimersByTime(2 * 60 * 1000); // 2 minutos
            // El escalamiento se maneja automáticamente en el sistema
            expect(true).toBe(true);
        });
    });
    describe('Integración Circuit Breaker + Health Checks', ()=>{
        test('debe detectar circuit breaker abierto en health check', async ()=>{
            // Simular circuit breaker abierto
            jest.spyOn(_circuitbreaker.mercadoPagoCriticalBreaker, 'getState').mockReturnValue('open');
            // Ejecutar health check
            const result = await _healthchecks.enterpriseHealthSystem.runHealthCheck('circuit_breakers');
            expect(result.status).toBe('unhealthy');
            expect(result.message).toContain('circuit breaker(s) open');
            expect(result.details.mercadopago_critical).toBe('open');
        });
        test('debe ejecutar recuperación automática para circuit breakers', async ()=>{
            const resetSpy = jest.spyOn(_circuitbreaker.mercadoPagoCriticalBreaker, 'reset');
            // Ejecutar acción de recuperación
            const success = await _healthchecks.enterpriseHealthSystem.executeRecoveryAction('reset_circuit_breakers');
            expect(success).toBe(true);
            expect(resetSpy).toHaveBeenCalled();
        });
    });
    describe('Integración Métricas + Alertas', ()=>{
        test('debe disparar alerta automáticamente cuando métrica supera umbral', async ()=>{
            // Configurar alerta para response time alto
            _alertsystem.enterpriseAlertSystem.setAlertRule({
                id: 'high_response_time',
                name: 'High Response Time',
                description: 'Response time too high',
                enabled: true,
                metricName: 'performance.api.duration',
                condition: 'gt',
                threshold: 1000,
                level: 'warning',
                cooldownMinutes: 1,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {}
            });
            // Registrar métrica que supera umbral
            await _enterprisemetrics.enterpriseMetrics.recordMetric('performance.api.duration', 1500, 'timer', 'performance');
            // La alerta se dispara automáticamente en el sistema real
            // En el test verificamos que no hay errores
            expect(true).toBe(true);
        });
        test('debe agregar métricas correctamente', async ()=>{
            // Registrar múltiples métricas
            const metrics = [
                {
                    name: 'test.metric.1',
                    value: 100
                },
                {
                    name: 'test.metric.1',
                    value: 150
                },
                {
                    name: 'test.metric.1',
                    value: 200
                }
            ];
            for (const metric of metrics){
                await _enterprisemetrics.enterpriseMetrics.recordMetric(metric.name, metric.value, 'gauge', 'performance');
            }
            // Obtener agregación
            const aggregated = await _enterprisemetrics.enterpriseMetrics.getAggregatedMetrics('test.metric.1', '1h', new Date(Date.now() - 60 * 60 * 1000).toISOString(), new Date().toISOString());
            // En el mock, esto retorna un array vacío, pero verificamos que no hay errores
            expect(aggregated).toBeInstanceOf(Array);
        });
    });
    describe('Integración Health Checks + Métricas', ()=>{
        test('debe registrar métricas de health check automáticamente', async ()=>{
            // Ejecutar health check
            await _healthchecks.enterpriseHealthSystem.runHealthCheck('database');
            // Las métricas se registran automáticamente
            // Verificamos que no hay errores en el proceso
            expect(true).toBe(true);
        });
        test('debe registrar métricas de seguridad para fallos críticos', async ()=>{
            // Mock error en base de datos
            const { getSupabaseClient } = require('@/lib/supabase');
            getSupabaseClient.mockReturnValueOnce(null);
            // Ejecutar health check que fallará
            const result = await _healthchecks.enterpriseHealthSystem.runHealthCheck('database');
            expect(result.status).toBe('unhealthy');
            expect(result.severity).toBe('critical');
            // Las métricas de seguridad se registran automáticamente
            expect(true).toBe(true);
        });
    });
    describe('Flujo Completo de Monitoreo', ()=>{
        test('debe ejecutar ciclo completo de monitoreo', async ()=>{
            // 1. Ejecutar todos los health checks
            const healthResults = await _healthchecks.enterpriseHealthSystem.runAllHealthChecks();
            expect(healthResults).toBeInstanceOf(Array);
            // 2. Obtener estado del sistema
            const systemHealth = _healthchecks.enterpriseHealthSystem.getSystemHealth();
            expect(systemHealth.overall).toBeDefined();
            expect(systemHealth.services).toBeInstanceOf(Array);
            // 3. Registrar métricas de performance
            await _enterprisemetrics.enterpriseMetrics.recordMetric('system.health.score', systemHealth.summary.healthy / systemHealth.services.length * 100, 'gauge', 'performance');
            // 4. Verificar alertas activas (simulado)
            // En un sistema real, esto consultaría la base de datos
            expect(true).toBe(true);
        });
        test('debe manejar errores en cascada correctamente', async ()=>{
            // Simular múltiples fallos
            const { getSupabaseClient } = require('@/lib/supabase');
            getSupabaseClient.mockReturnValue(null);
            const { CacheUtils } = require('@/lib/cache-manager');
            CacheUtils.get.mockRejectedValue(new Error('Cache error'));
            // Ejecutar health checks con errores
            const results = await _healthchecks.enterpriseHealthSystem.runAllHealthChecks();
            // Verificar que el sistema maneja los errores sin fallar completamente
            expect(results).toBeInstanceOf(Array);
            // Algunos servicios deberían estar unhealthy
            const unhealthyServices = results.filter((r)=>r.status === 'unhealthy');
            expect(unhealthyServices.length).toBeGreaterThan(0);
        });
    });
    describe('Performance y Escalabilidad', ()=>{
        test('debe manejar múltiples métricas concurrentemente', async ()=>{
            const promises = [];
            // Registrar 100 métricas concurrentemente
            for(let i = 0; i < 100; i++){
                promises.push(_enterprisemetrics.enterpriseMetrics.recordMetric(`concurrent.metric.${i}`, Math.random() * 1000, 'gauge', 'performance'));
            }
            // Esperar que todas se completen sin errores
            await expect(Promise.all(promises)).resolves.not.toThrow();
        });
        test('debe manejar múltiples health checks concurrentemente', async ()=>{
            const services = [
                'database',
                'cache',
                'mercadopago',
                'circuit_breakers'
            ];
            const promises = services.map((service)=>_healthchecks.enterpriseHealthSystem.runHealthCheck(service));
            const results = await Promise.all(promises);
            expect(results).toHaveLength(services.length);
            results.forEach((result)=>{
                expect(result.service).toBeDefined();
                expect(result.status).toBeDefined();
            });
        });
    });
    describe('Casos Edge y Recuperación', ()=>{
        test('debe recuperarse de errores temporales', async ()=>{
            const { getSupabaseClient } = require('@/lib/supabase');
            // Primer intento falla
            getSupabaseClient.mockReturnValueOnce(null);
            const result1 = await _healthchecks.enterpriseHealthSystem.runHealthCheck('database');
            expect(result1.status).toBe('unhealthy');
            // Segundo intento exitoso
            getSupabaseClient.mockReturnValueOnce({
                from: jest.fn(()=>({
                        select: jest.fn(()=>({
                                limit: jest.fn(()=>({
                                        data: [
                                            {
                                                id: 1
                                            }
                                        ],
                                        error: null
                                    }))
                            }))
                    }))
            });
            const result2 = await _healthchecks.enterpriseHealthSystem.runHealthCheck('database');
            expect(result2.status).toBe('healthy');
        });
        test('debe manejar timeouts correctamente', async ()=>{
            // Simular timeout en health check
            const { CacheUtils } = require('@/lib/cache-manager');
            CacheUtils.set.mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 10000)));
            // El health check debería completarse rápidamente
            const startTime = Date.now();
            const result = await _healthchecks.enterpriseHealthSystem.runHealthCheck('cache');
            const duration = Date.now() - startTime;
            expect(duration).toBeLessThan(5000); // Menos de 5 segundos
            expect(result.service).toBe('cache');
        });
    });
    describe('Compliance y Auditoría', ()=>{
        test('debe mantener audit trail de todas las operaciones', async ()=>{
            // Ejecutar operaciones que deberían generar audit trail
            await _enterprisemetrics.enterpriseMetrics.recordMetric('audit.test', 1, 'counter', 'security');
            await _healthchecks.enterpriseHealthSystem.runHealthCheck('database');
            const alert = await _alertsystem.enterpriseAlertSystem.triggerAlert('test_audit_alert', 'audit.test', 1);
            // En un sistema real, verificaríamos que se crearon entradas de auditoría
            // Por ahora verificamos que no hay errores
            expect(true).toBe(true);
        });
        test('debe cumplir con retención de datos', async ()=>{
            // Verificar que las políticas de retención están configuradas
            // En un sistema real, esto verificaría la configuración de la base de datos
            expect(true).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,