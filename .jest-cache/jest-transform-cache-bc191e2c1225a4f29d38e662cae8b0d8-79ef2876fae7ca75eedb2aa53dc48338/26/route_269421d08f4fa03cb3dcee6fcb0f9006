9511f0ea972c9c22a2c503ff14d73efe
// ===================================
// PINTEYA E-COMMERCE - HEALTH CHECKS API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    HealthStatus: function() {
        return HealthStatus;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _adminauth = require("../../../../../lib/auth/admin-auth");
const _healthchecks = require("../../../../../lib/monitoring/health-checks");
const _logger = require("../../../../../lib/logger");
var HealthStatus = /*#__PURE__*/ function(HealthStatus) {
    HealthStatus["HEALTHY"] = "healthy";
    HealthStatus["DEGRADED"] = "degraded";
    HealthStatus["UNHEALTHY"] = "unhealthy";
    HealthStatus["UNKNOWN"] = "unknown";
    return HealthStatus;
}({});
async function GET(request) {
    try {
        // Para health checks, permitir acceso sin autenticación completa para monitoreo externo
        const searchParams = request.nextUrl.searchParams;
        const detailed = searchParams.get('detailed') === 'true';
        const services = searchParams.get('services')?.split(',') || [];
        // Si se solicita información detallada, verificar autenticación
        if (detailed) {
            const authResult = await (0, _adminauth.getAuthenticatedAdmin)(request);
            if (!authResult.isAdmin) {
                return _server.NextResponse.json({
                    success: false,
                    error: 'Acceso no autorizado para información detallada'
                }, {
                    status: 401
                });
            }
        }
        // Usar el sistema enterprise de health checks
        let serviceResults;
        if (services.length > 0) {
            // Ejecutar health checks específicos
            serviceResults = await Promise.all(services.map(async (service)=>{
                try {
                    return await _healthchecks.enterpriseHealthSystem.runHealthCheck(service);
                } catch (error) {
                    return {
                        service,
                        status: "unhealthy",
                        severity: 'critical',
                        responseTime: 0,
                        message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
                        details: {},
                        lastChecked: new Date().toISOString()
                    };
                }
            }));
        } else {
            // Ejecutar todos los health checks
            serviceResults = await _healthchecks.enterpriseHealthSystem.runAllHealthChecks();
        }
        // Obtener resumen del sistema
        const systemHealth = _healthchecks.enterpriseHealthSystem.getSystemHealth();
        const summary = systemHealth.summary;
        const overall = systemHealth.overall;
        const systemHealth = {
            overall,
            services: serviceResults,
            summary,
            uptime: process.uptime(),
            version: process.env.npm_package_version || '3.0.0',
            timestamp: new Date().toISOString()
        };
        // Log health check
        _logger.logger.info(_logger.LogLevel.INFO, 'Health check performed', {
            overall,
            servicesChecked: serviceResults.length,
            healthy: summary.healthy,
            degraded: summary.degraded,
            unhealthy: summary.unhealthy
        }, _logger.LogCategory.SYSTEM);
        // Retornar respuesta con código de estado apropiado
        const statusCode = overall === "healthy" ? 200 : overall === "degraded" ? 200 : 503;
        return _server.NextResponse.json({
            success: overall !== "unhealthy",
            data: systemHealth
        }, {
            status: statusCode
        });
    } catch (error) {
        _logger.logger.error(_logger.LogLevel.ERROR, 'Health check failed', {
            error: error instanceof Error ? error.message : 'Unknown error'
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: false,
            data: {
                overall: "unhealthy",
                services: [],
                summary: {
                    healthy: 0,
                    degraded: 0,
                    unhealthy: 1,
                    total: 1
                },
                uptime: process.uptime(),
                version: '3.0.0',
                timestamp: new Date().toISOString()
            }
        }, {
            status: 503
        });
    }
}
async function POST(request) {
    try {
        // Verificar autenticación de admin
        const authResult = await (0, _adminauth.getAuthenticatedAdmin)(request);
        if (!authResult.isAdmin || !authResult.userId) {
            return _server.NextResponse.json({
                success: false,
                error: 'Acceso no autorizado'
            }, {
                status: 401
            });
        }
        const body = await request.json();
        const { action, service, config } = body;
        if (!action) {
            return _server.NextResponse.json({
                success: false,
                error: 'Falta parámetro: action'
            }, {
                status: 400
            });
        }
        let result = {};
        switch(action){
            case 'check':
                if (!service) {
                    return _server.NextResponse.json({
                        success: false,
                        error: 'Service requerido para check'
                    }, {
                        status: 400
                    });
                }
                result = await _healthchecks.enterpriseHealthSystem.runHealthCheck(service);
                break;
            case 'recover':
                if (!service) {
                    return _server.NextResponse.json({
                        success: false,
                        error: 'Service requerido para recover'
                    }, {
                        status: 400
                    });
                }
                const recoveryActionId = getRecoveryActionId(service);
                if (recoveryActionId) {
                    const success = await _healthchecks.enterpriseHealthSystem.executeRecoveryAction(recoveryActionId, config);
                    result = {
                        success,
                        service,
                        action: 'recover'
                    };
                } else {
                    result = {
                        success: false,
                        service,
                        error: 'No recovery action available'
                    };
                }
                break;
            case 'reset':
                if (service === 'circuit_breakers' || !service) {
                    const success = await _healthchecks.enterpriseHealthSystem.executeRecoveryAction('reset_circuit_breakers');
                    result = {
                        success,
                        service: service || 'circuit_breakers',
                        action: 'reset'
                    };
                } else {
                    result = {
                        success: false,
                        service,
                        error: 'Reset not supported for this service'
                    };
                }
                break;
            default:
                return _server.NextResponse.json({
                    success: false,
                    error: 'Acción no válida'
                }, {
                    status: 400
                });
        }
        _logger.logger.info(_logger.LogLevel.INFO, `Health action performed: ${action}`, {
            userId: authResult.userId,
            action,
            service,
            success: result.success
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: true,
            data: result
        });
    } catch (error) {
        _logger.logger.error(_logger.LogLevel.ERROR, 'Health action failed', {
            error: error instanceof Error ? error.message : 'Unknown error'
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
/**
 * Obtiene el ID de acción de recuperación para un servicio
 */ function getRecoveryActionId(service) {
    switch(service){
        case 'circuit_breakers':
            return 'reset_circuit_breakers';
        case 'cache':
            return 'clear_cache';
        default:
            return null;
    }
}

//# sourceMappingURL=data:application/json;base64,