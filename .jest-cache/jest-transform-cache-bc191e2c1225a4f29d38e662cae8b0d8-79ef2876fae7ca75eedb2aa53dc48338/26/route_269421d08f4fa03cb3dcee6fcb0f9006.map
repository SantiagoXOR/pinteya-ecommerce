{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\health\\route.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - HEALTH CHECKS API\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\nimport { enterpriseHealthSystem, HealthStatus } from '@/lib/monitoring/health-checks';\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\n\n// Estados de salud\nexport enum HealthStatus {\n  HEALTHY = 'healthy',\n  DEGRADED = 'degraded',\n  UNHEALTHY = 'unhealthy',\n  UNKNOWN = 'unknown'\n}\n\n// Resultado de health check\ninterface HealthCheckResult {\n  service: string;\n  status: HealthStatus;\n  responseTime: number;\n  message?: string;\n  details?: Record<string, any>;\n  lastChecked: string;\n}\n\n// Resumen de salud del sistema\ninterface SystemHealth {\n  overall: HealthStatus;\n  services: HealthCheckResult[];\n  summary: {\n    healthy: number;\n    degraded: number;\n    unhealthy: number;\n    total: number;\n  };\n  uptime: number;\n  version: string;\n  timestamp: string;\n}\n\n/**\n * GET /api/admin/monitoring/health\n * Obtiene el estado de salud de todos los servicios\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Para health checks, permitir acceso sin autenticación completa para monitoreo externo\n    const searchParams = request.nextUrl.searchParams;\n    const detailed = searchParams.get('detailed') === 'true';\n    const services = searchParams.get('services')?.split(',') || [];\n\n    // Si se solicita información detallada, verificar autenticación\n    if (detailed) {\n      const authResult = await getAuthenticatedAdmin(request);\n      if (!authResult.isAdmin) {\n        return NextResponse.json({\n          success: false,\n          error: 'Acceso no autorizado para información detallada'\n        }, { status: 401 });\n      }\n    }\n\n    // Usar el sistema enterprise de health checks\n    let serviceResults;\n\n    if (services.length > 0) {\n      // Ejecutar health checks específicos\n      serviceResults = await Promise.all(\n        services.map(async (service) => {\n          try {\n            return await enterpriseHealthSystem.runHealthCheck(service);\n          } catch (error) {\n            return {\n              service,\n              status: HealthStatus.UNHEALTHY,\n              severity: 'critical' as const,\n              responseTime: 0,\n              message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n              details: {},\n              lastChecked: new Date().toISOString()\n            };\n          }\n        })\n      );\n    } else {\n      // Ejecutar todos los health checks\n      serviceResults = await enterpriseHealthSystem.runAllHealthChecks();\n    }\n\n    // Obtener resumen del sistema\n    const systemHealth = enterpriseHealthSystem.getSystemHealth();\n    const summary = systemHealth.summary;\n    const overall = systemHealth.overall;\n\n    const systemHealth: SystemHealth = {\n      overall,\n      services: serviceResults,\n      summary,\n      uptime: process.uptime(),\n      version: process.env.npm_package_version || '3.0.0',\n      timestamp: new Date().toISOString()\n    };\n\n    // Log health check\n    logger.info(LogLevel.INFO, 'Health check performed', {\n      overall,\n      servicesChecked: serviceResults.length,\n      healthy: summary.healthy,\n      degraded: summary.degraded,\n      unhealthy: summary.unhealthy\n    }, LogCategory.SYSTEM);\n\n    // Retornar respuesta con código de estado apropiado\n    const statusCode = overall === HealthStatus.HEALTHY ? 200 :\n                      overall === HealthStatus.DEGRADED ? 200 :\n                      503;\n\n    return NextResponse.json({\n      success: overall !== HealthStatus.UNHEALTHY,\n      data: systemHealth\n    }, { status: statusCode });\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Health check failed', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      data: {\n        overall: HealthStatus.UNHEALTHY,\n        services: [],\n        summary: { healthy: 0, degraded: 0, unhealthy: 1, total: 1 },\n        uptime: process.uptime(),\n        version: '3.0.0',\n        timestamp: new Date().toISOString()\n      }\n    }, { status: 503 });\n  }\n}\n\n/**\n * POST /api/admin/monitoring/health\n * Ejecuta health checks específicos o acciones de recuperación\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticación de admin\n    const authResult = await getAuthenticatedAdmin(request);\n    \n    if (!authResult.isAdmin || !authResult.userId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Acceso no autorizado'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { action, service, config } = body;\n\n    if (!action) {\n      return NextResponse.json({\n        success: false,\n        error: 'Falta parámetro: action'\n      }, { status: 400 });\n    }\n\n    let result: any = {};\n\n    switch (action) {\n      case 'check':\n        if (!service) {\n          return NextResponse.json({\n            success: false,\n            error: 'Service requerido para check'\n          }, { status: 400 });\n        }\n        result = await enterpriseHealthSystem.runHealthCheck(service);\n        break;\n      case 'recover':\n        if (!service) {\n          return NextResponse.json({\n            success: false,\n            error: 'Service requerido para recover'\n          }, { status: 400 });\n        }\n        const recoveryActionId = getRecoveryActionId(service);\n        if (recoveryActionId) {\n          const success = await enterpriseHealthSystem.executeRecoveryAction(recoveryActionId, config);\n          result = { success, service, action: 'recover' };\n        } else {\n          result = { success: false, service, error: 'No recovery action available' };\n        }\n        break;\n      case 'reset':\n        if (service === 'circuit_breakers' || !service) {\n          const success = await enterpriseHealthSystem.executeRecoveryAction('reset_circuit_breakers');\n          result = { success, service: service || 'circuit_breakers', action: 'reset' };\n        } else {\n          result = { success: false, service, error: 'Reset not supported for this service' };\n        }\n        break;\n      default:\n        return NextResponse.json({\n          success: false,\n          error: 'Acción no válida'\n        }, { status: 400 });\n    }\n\n    logger.info(LogLevel.INFO, `Health action performed: ${action}`, {\n      userId: authResult.userId,\n      action,\n      service,\n      success: result.success\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Health action failed', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error interno del servidor'\n    }, { status: 500 });\n  }\n}\n\n/**\n * Obtiene el ID de acción de recuperación para un servicio\n */\nfunction getRecoveryActionId(service: string): string | null {\n  switch (service) {\n    case 'circuit_breakers':\n      return 'reset_circuit_breakers';\n    case 'cache':\n      return 'clear_cache';\n    default:\n      return null;\n  }\n}\n\n\n"],"names":["GET","HealthStatus","POST","request","searchParams","nextUrl","detailed","get","services","split","authResult","getAuthenticatedAdmin","isAdmin","NextResponse","json","success","error","status","serviceResults","length","Promise","all","map","service","enterpriseHealthSystem","runHealthCheck","severity","responseTime","message","Error","details","lastChecked","Date","toISOString","runAllHealthChecks","systemHealth","getSystemHealth","summary","overall","uptime","process","version","env","npm_package_version","timestamp","logger","info","LogLevel","INFO","servicesChecked","healthy","degraded","unhealthy","LogCategory","SYSTEM","statusCode","data","ERROR","total","userId","body","action","config","result","recoveryActionId","getRecoveryActionId","executeRecoveryAction"],"mappings":"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"}