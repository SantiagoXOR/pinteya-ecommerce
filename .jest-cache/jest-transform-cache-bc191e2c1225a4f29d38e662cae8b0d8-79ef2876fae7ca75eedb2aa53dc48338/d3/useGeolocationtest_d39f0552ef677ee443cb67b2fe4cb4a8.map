{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\__tests__\\useGeolocation.test.ts"],"sourcesContent":["/**\n * Tests para el hook useGeolocation\n * Verifica la funcionalidad de geolocalización automática y detección de zonas\n */\n\nimport { renderHook, act, waitFor } from '@testing-library/react';\nimport { useGeolocation } from '../useGeolocation';\n\n// Mock del navigator.geolocation\nconst mockGeolocation = {\n  getCurrentPosition: jest.fn(),\n  watchPosition: jest.fn(),\n  clearWatch: jest.fn(),\n};\n\n// Mock del navigator.permissions\nconst mockPermissions = {\n  query: jest.fn().mockResolvedValue({ state: 'prompt' }),\n};\n\n// Setup global mocks\nObject.defineProperty(global.navigator, 'geolocation', {\n  value: mockGeolocation,\n  writable: true,\n});\n\nObject.defineProperty(global.navigator, 'permissions', {\n  value: mockPermissions,\n  writable: true,\n});\n\n// Mock console.log para evitar spam en tests\nconst originalConsoleLog = console.log;\nbeforeAll(() => {\n  console.log = jest.fn();\n});\n\nafterAll(() => {\n  console.log = originalConsoleLog;\n});\n\ndescribe('useGeolocation Hook', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Estado inicial', () => {\n    it('debe inicializar con valores por defecto', () => {\n      const { result } = renderHook(() => useGeolocation());\n\n      expect(result.current.location).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n      expect(result.current.permissionStatus).toBe('unknown');\n      expect(result.current.detectedZone).toBeNull();\n    });\n\n    it('debe tener las funciones necesarias', () => {\n      const { result } = renderHook(() => useGeolocation());\n\n      expect(typeof result.current.requestLocation).toBe('function');\n      expect(typeof result.current.getAvailableZones).toBe('function');\n      expect(typeof result.current.selectZone).toBe('function');\n      expect(Array.isArray(result.current.deliveryZones)).toBe(true);\n    });\n  });\n\n  describe('Verificación de permisos', () => {\n    it('debe verificar permisos al montar el componente', async () => {\n      const mockPermissionResult = {\n        state: 'prompt',\n      };\n\n      mockPermissions.query.mockResolvedValue(mockPermissionResult);\n\n      renderHook(() => useGeolocation());\n\n      await waitFor(() => {\n        expect(mockPermissions.query).toHaveBeenCalledWith({ name: 'geolocation' });\n      });\n    });\n\n    it('debe solicitar ubicación automáticamente si ya tiene permisos', async () => {\n      const mockPermissionResult = {\n        state: 'granted',\n      };\n\n      const mockPosition = {\n        coords: {\n          latitude: -31.4201,\n          longitude: -64.1888,\n        },\n      };\n\n      mockPermissions.query.mockResolvedValue(mockPermissionResult);\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success(mockPosition);\n      });\n\n      const { result } = renderHook(() => useGeolocation());\n\n      await waitFor(() => {\n        expect(result.current.permissionStatus).toBe('granted');\n      });\n\n      // Verificar que el hook está funcionando correctamente con permisos granted\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('Solicitud de ubicación', () => {\n    it('debe manejar ubicación exitosa', async () => {\n      const mockPosition = {\n        coords: {\n          latitude: -31.4201,\n          longitude: -64.1888,\n        },\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success(mockPosition);\n      });\n\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.requestLocation();\n      });\n\n      await waitFor(() => {\n        expect(result.current.location).toEqual({\n          lat: -31.4201,\n          lng: -64.1888,\n        });\n        expect(result.current.isLoading).toBe(false);\n        expect(result.current.permissionStatus).toBe('granted');\n        expect(result.current.detectedZone?.name).toBe('Córdoba Capital');\n      });\n    });\n\n    it('debe manejar error de permisos denegados', async () => {\n      const mockError = {\n        code: 1, // PERMISSION_DENIED\n        message: 'Permission denied',\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success, error) => {\n        error(mockError);\n      });\n\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.requestLocation();\n      });\n\n      await waitFor(() => {\n        expect(result.current.error).toBe('Error al obtener ubicación');\n        expect(result.current.isLoading).toBe(false);\n        expect(result.current.permissionStatus).toBe('unknown');\n      });\n    });\n\n    it('debe manejar timeout de geolocalización', async () => {\n      const mockError = {\n        code: 3, // TIMEOUT\n        message: 'Timeout',\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success, error) => {\n        error(mockError);\n      });\n\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.requestLocation();\n      });\n\n      await waitFor(() => {\n        expect(result.current.error).toBe('Error al obtener ubicación');\n        expect(result.current.isLoading).toBe(false);\n      });\n    });\n  });\n\n  describe('Detección de zonas', () => {\n    it('debe detectar Córdoba Capital para coordenadas locales', async () => {\n      const mockPosition = {\n        coords: {\n          latitude: -31.4201,\n          longitude: -64.1888,\n        },\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success(mockPosition);\n      });\n\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.requestLocation();\n      });\n\n      await waitFor(() => {\n        expect(result.current.detectedZone?.name).toBe('Córdoba Capital');\n        expect(result.current.detectedZone?.available).toBe(true);\n      });\n    });\n\n    it('debe usar Interior de Córdoba como fallback', async () => {\n      const mockPosition = {\n        coords: {\n          latitude: -32.0000, // Fuera del radio de Córdoba Capital\n          longitude: -65.0000,\n        },\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success(mockPosition);\n      });\n\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.requestLocation();\n      });\n\n      await waitFor(() => {\n        expect(result.current.detectedZone?.name).toBe('Interior de Córdoba');\n      });\n    });\n  });\n\n  describe('Selección manual de zona', () => {\n    it('debe permitir seleccionar zona manualmente', () => {\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.selectZone('buenos-aires');\n      });\n\n      expect(result.current.detectedZone?.name).toBe('Buenos Aires');\n    });\n\n    it('debe ignorar IDs de zona inválidos', () => {\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.selectZone('zona-inexistente');\n      });\n\n      expect(result.current.detectedZone).toBeNull();\n    });\n  });\n\n  describe('Zonas disponibles', () => {\n    it('debe retornar todas las zonas de entrega', () => {\n      const { result } = renderHook(() => useGeolocation());\n\n      const zones = result.current.getAvailableZones();\n\n      expect(zones).toHaveLength(4);\n      expect(zones.map(z => z.name)).toContain('Córdoba Capital');\n      expect(zones.map(z => z.name)).toContain('Interior de Córdoba');\n      expect(zones.map(z => z.name)).toContain('Buenos Aires');\n      expect(zones.map(z => z.name)).toContain('Rosario');\n    });\n  });\n\n  describe('Navegador sin soporte', () => {\n    it('debe manejar navegador sin geolocalización', () => {\n      // Temporalmente remover geolocation\n      const originalGeolocation = global.navigator.geolocation;\n      Object.defineProperty(global.navigator, 'geolocation', {\n        value: undefined,\n        writable: true,\n      });\n\n      const { result } = renderHook(() => useGeolocation());\n\n      act(() => {\n        result.current.requestLocation();\n      });\n\n      expect(result.current.error).toBe('Geolocalización no soportada por este navegador');\n      expect(result.current.permissionStatus).toBe('denied');\n\n      // Restaurar geolocation\n      Object.defineProperty(global.navigator, 'geolocation', {\n        value: originalGeolocation,\n        writable: true,\n      });\n    });\n  });\n});\n"],"names":["mockGeolocation","getCurrentPosition","jest","fn","watchPosition","clearWatch","mockPermissions","query","mockResolvedValue","state","Object","defineProperty","global","navigator","value","writable","originalConsoleLog","console","log","beforeAll","afterAll","describe","beforeEach","clearAllMocks","it","result","renderHook","useGeolocation","expect","current","location","toBeNull","isLoading","toBe","error","permissionStatus","detectedZone","requestLocation","getAvailableZones","selectZone","Array","isArray","deliveryZones","mockPermissionResult","waitFor","toHaveBeenCalledWith","name","mockPosition","coords","latitude","longitude","mockImplementation","success","act","toEqual","lat","lng","mockError","code","message","available","zones","toHaveLength","map","z","toContain","originalGeolocation","geolocation","undefined"],"mappings":"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"}