80b8f3c611e5ae4af3ba88d832609a35
// ===================================
// PINTEYA E-COMMERCE - API DE CATEGORÍAS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _supabase = require("../../../lib/supabase");
const _validations = require("../../../lib/validations");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        // Extraer parámetros de query
        const queryParams = {
            search: searchParams.get('search') || undefined
        };
        // Validar parámetros (simplificado para la estructura actual)
        const filters = {
            search: queryParams.search
        };
        const supabase = (0, _supabase.getSupabaseClient)();
        // Verificar que el cliente de Supabase esté disponible
        if (!supabase) {
            console.error('Cliente de Supabase no disponible en GET /api/categories');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio de base de datos no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Construir query base - simplificado para la estructura actual
        let query = supabase.from('categories').select(`
        *,
        products_count:products(count)
      `).order('name');
        // Aplicar filtros
        if (filters.search) {
            query = query.ilike('name', `%${filters.search}%`);
        }
        // Ejecutar query
        const { data: categories, error } = await query;
        if (error) {
            console.error('Error en GET /api/categories:', error);
            const errorResponse = {
                data: null,
                success: false,
                error: error.message || 'Error obteniendo categorías'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
        // Procesar datos para incluir conteo de productos
        const processedCategories = categories?.map((category)=>({
                ...category,
                products_count: category.products_count?.[0]?.count || 0
            })) || [];
        const response = {
            data: processedCategories,
            success: true,
            message: `${processedCategories.length} categorías encontradas`
        };
        return _server.NextResponse.json(response);
    } catch (error) {
        console.error('Error en GET /api/categories:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        // ENTERPRISE: Usar nueva autenticación enterprise para admin
        const { requireAdminAuth } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../lib/auth/enterprise-auth-utils")));
        const authResult = await requireAdminAuth(request, [
            'categories_create'
        ]);
        if (!authResult.success) {
            return _server.NextResponse.json({
                error: authResult.error,
                code: authResult.code,
                enterprise: true,
                timestamp: new Date().toISOString()
            }, {
                status: authResult.status || 401
            });
        }
        const context = authResult.context;
        const body = await request.json();
        // Validar datos de la categoría
        const categoryData = (0, _validations.validateData)(_validations.CategorySchema, body);
        const supabase = (0, _supabase.getSupabaseClient)(true); // Usar cliente admin
        // Verificar que el cliente administrativo esté disponible
        if (!supabase) {
            console.error('Cliente administrativo de Supabase no disponible en POST /api/categories');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio administrativo no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Crear slug si no se proporciona
        if (!categoryData.slug) {
            categoryData.slug = categoryData.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
        }
        // Insertar categoría
        const { data: category, error } = await supabase.from('categories').insert(categoryData).select().single();
        if (error) {
            (0, _supabase.handleSupabaseError)(error, 'POST /api/categories');
        }
        const response = {
            data: category,
            success: true,
            message: 'Categoría creada exitosamente'
        };
        return _server.NextResponse.json(response, {
            status: 201
        });
    } catch (error) {
        console.error('Error en POST /api/categories:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,