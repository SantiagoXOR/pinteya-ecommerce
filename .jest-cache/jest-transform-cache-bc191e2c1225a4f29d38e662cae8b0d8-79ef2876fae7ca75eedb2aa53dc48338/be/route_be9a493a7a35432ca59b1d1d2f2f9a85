0bdebc5713a1b20122517a2ca6ee1ff4
// ===================================
// PINTEYA E-COMMERCE - MONITORING REPORTS API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "GET", {
    enumerable: true,
    get: function() {
        return GET;
    }
});
const _server = require("next/server");
const _adminauth = require("../../../../../lib/auth/admin-auth");
const _supabase = require("../../../../../lib/supabase");
const _logger = require("../../../../../lib/logger");
async function GET(request) {
    try {
        // Verificar autenticación de admin
        const authResult = await (0, _adminauth.getAuthenticatedAdmin)(request);
        if (!authResult.isAdmin || !authResult.userId) {
            return _server.NextResponse.json({
                success: false,
                error: 'Acceso no autorizado'
            }, {
                status: 401
            });
        }
        const searchParams = request.nextUrl.searchParams;
        const reportType = searchParams.get('type') || 'performance';
        const startDate = searchParams.get('startDate') || new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();
        const endDate = searchParams.get('endDate') || new Date().toISOString();
        const format = searchParams.get('format') || 'json';
        const filter = {
            startDate,
            endDate,
            services: searchParams.get('services')?.split(','),
            levels: searchParams.get('levels')?.split(','),
            categories: searchParams.get('categories')?.split(','),
            limit: parseInt(searchParams.get('limit') || '1000')
        };
        let reportData;
        switch(reportType){
            case 'performance':
                reportData = await generatePerformanceReport(filter);
                break;
            case 'security':
                reportData = await generateSecurityReport(filter);
                break;
            case 'business':
                reportData = await generateBusinessReport(filter);
                break;
            case 'compliance':
                reportData = await generateComplianceReport(filter);
                break;
            case 'summary':
                reportData = await generateSummaryReport(filter);
                break;
            default:
                return _server.NextResponse.json({
                    success: false,
                    error: 'Tipo de reporte no válido'
                }, {
                    status: 400
                });
        }
        _logger.logger.info(_logger.LogLevel.INFO, `Monitoring report generated: ${reportType}`, {
            userId: authResult.userId,
            reportType,
            period: `${startDate} to ${endDate}`,
            format
        }, _logger.LogCategory.SYSTEM);
        // Retornar en formato solicitado
        if (format === 'csv') {
            return generateCSVResponse(reportData, reportType);
        }
        return _server.NextResponse.json({
            success: true,
            data: {
                reportType,
                period: {
                    startDate,
                    endDate
                },
                generatedAt: new Date().toISOString(),
                report: reportData
            }
        });
    } catch (error) {
        _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to generate monitoring report', {
            error: error instanceof Error ? error.message : 'Unknown error'
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
/**
 * Genera reporte de performance
 */ async function generatePerformanceReport(filter) {
    const supabase = (0, _supabase.getSupabaseClient)(true);
    if (!supabase) {
        throw new Error('Supabase client not available');
    }
    // Obtener métricas de performance
    const { data: metrics } = await supabase.from('enterprise_metrics').select('*').in('name', [
        'performance.api.duration',
        'performance.api.error_rate',
        'performance.api.throughput',
        'performance.system.uptime'
    ]).gte('timestamp', filter.startDate).lte('timestamp', filter.endDate).order('timestamp', {
        ascending: true
    });
    if (!metrics) {
        throw new Error('Failed to fetch performance metrics');
    }
    // Calcular métricas agregadas
    const responseTimeMetrics = metrics.filter((m)=>m.name === 'performance.api.duration');
    const errorRateMetrics = metrics.filter((m)=>m.name === 'performance.api.error_rate');
    const throughputMetrics = metrics.filter((m)=>m.name === 'performance.api.throughput');
    const uptimeMetrics = metrics.filter((m)=>m.name === 'performance.system.uptime');
    const avgResponseTime = responseTimeMetrics.length > 0 ? responseTimeMetrics.reduce((sum, m)=>sum + m.value, 0) / responseTimeMetrics.length : 0;
    const maxResponseTime = responseTimeMetrics.length > 0 ? Math.max(...responseTimeMetrics.map((m)=>m.value)) : 0;
    const minResponseTime = responseTimeMetrics.length > 0 ? Math.min(...responseTimeMetrics.map((m)=>m.value)) : 0;
    const avgErrorRate = errorRateMetrics.length > 0 ? errorRateMetrics.reduce((sum, m)=>sum + m.value, 0) / errorRateMetrics.length : 0;
    const avgThroughput = throughputMetrics.length > 0 ? throughputMetrics.reduce((sum, m)=>sum + m.value, 0) / throughputMetrics.length : 0;
    const avgUptime = uptimeMetrics.length > 0 ? uptimeMetrics.reduce((sum, m)=>sum + m.value, 0) / uptimeMetrics.length : 0.99;
    // Generar tendencias (agrupadas por hora)
    const trends = generateHourlyTrends(metrics);
    // Obtener top errores (simulado)
    const topErrors = [
        {
            error: 'Database timeout',
            count: 5,
            percentage: 45.5
        },
        {
            error: 'MercadoPago API error',
            count: 3,
            percentage: 27.3
        },
        {
            error: 'Cache miss',
            count: 2,
            percentage: 18.2
        },
        {
            error: 'Rate limit exceeded',
            count: 1,
            percentage: 9.1
        }
    ];
    return {
        period: `${filter.startDate} to ${filter.endDate}`,
        metrics: {
            avgResponseTime,
            maxResponseTime,
            minResponseTime,
            errorRate: avgErrorRate,
            throughput: avgThroughput,
            uptime: avgUptime
        },
        trends,
        topErrors
    };
}
/**
 * Genera reporte de seguridad
 */ async function generateSecurityReport(filter) {
    const supabase = (0, _supabase.getSupabaseClient)(true);
    if (!supabase) {
        throw new Error('Supabase client not available');
    }
    // Obtener eventos de auditoría de seguridad
    const { data: auditEvents } = await supabase.from('audit_events').select('*').gte('timestamp', filter.startDate).lte('timestamp', filter.endDate).order('timestamp', {
        ascending: false
    });
    if (!auditEvents) {
        throw new Error('Failed to fetch audit events');
    }
    // Filtrar eventos de seguridad
    const securityEvents = auditEvents.filter((event)=>event.category === 'security_violation' || event.category === 'authentication' || event.severity === 'critical');
    const criticalEvents = securityEvents.filter((event)=>event.severity === 'critical');
    const blockedRequests = securityEvents.filter((event)=>event.result === 'blocked');
    const authFailures = securityEvents.filter((event)=>event.category === 'authentication' && event.result === 'failure');
    // Agrupar por categoría
    const eventsByCategory = {};
    securityEvents.forEach((event)=>{
        eventsByCategory[event.category] = (eventsByCategory[event.category] || 0) + 1;
    });
    // Agrupar por nivel
    const eventsByLevel = {};
    securityEvents.forEach((event)=>{
        eventsByLevel[event.severity] = (eventsByLevel[event.severity] || 0) + 1;
    });
    // Determinar nivel de riesgo
    let riskLevel = 'low';
    if (criticalEvents.length > 10) riskLevel = 'critical';
    else if (criticalEvents.length > 5) riskLevel = 'high';
    else if (criticalEvents.length > 2) riskLevel = 'medium';
    // Top amenazas (simulado basado en eventos reales)
    const topThreats = [
        {
            type: 'Invalid signature',
            count: blockedRequests.length,
            lastSeen: new Date().toISOString()
        },
        {
            type: 'Authentication failure',
            count: authFailures.length,
            lastSeen: new Date().toISOString()
        },
        {
            type: 'Rate limit violation',
            count: 2,
            lastSeen: new Date().toISOString()
        }
    ].filter((threat)=>threat.count > 0);
    return {
        period: `${filter.startDate} to ${filter.endDate}`,
        summary: {
            totalEvents: securityEvents.length,
            criticalEvents: criticalEvents.length,
            blockedRequests: blockedRequests.length,
            authFailures: authFailures.length,
            riskLevel
        },
        eventsByCategory,
        eventsByLevel,
        topThreats,
        complianceStatus: {
            auditCoverage: 100,
            retentionCompliance: 100,
            encryptionStatus: 'HMAC-SHA256'
        }
    };
}
/**
 * Genera reporte de negocio
 */ async function generateBusinessReport(filter) {
    const supabase = (0, _supabase.getSupabaseClient)(true);
    if (!supabase) {
        throw new Error('Supabase client not available');
    }
    // Obtener órdenes del período
    const { data: orders } = await supabase.from('orders').select('*').gte('created_at', filter.startDate).lte('created_at', filter.endDate);
    if (!orders) {
        throw new Error('Failed to fetch orders');
    }
    const completedOrders = orders.filter((order)=>order.status === 'completed');
    const totalRevenue = completedOrders.reduce((sum, order)=>sum + (order.total_amount || 0), 0);
    const avgOrderValue = completedOrders.length > 0 ? totalRevenue / completedOrders.length : 0;
    // Métricas simuladas (en producción vendrían de analytics reales)
    const conversionRate = 0.034; // 3.4%
    const paymentSuccessRate = 0.978; // 97.8%
    // Tendencias diarias
    const trends = generateDailyBusinessTrends(completedOrders, filter);
    // Métodos de pago
    const paymentMethods = {
        mercadopago: {
            count: completedOrders.length,
            revenue: totalRevenue,
            successRate: paymentSuccessRate
        }
    };
    return {
        period: `${filter.startDate} to ${filter.endDate}`,
        metrics: {
            totalRevenue,
            totalOrders: completedOrders.length,
            avgOrderValue,
            conversionRate,
            paymentSuccessRate
        },
        trends,
        paymentMethods
    };
}
/**
 * Genera reporte de compliance
 */ async function generateComplianceReport(filter) {
    return {
        period: `${filter.startDate} to ${filter.endDate}`,
        standards: {
            'ISO/IEC 27001:2013': {
                status: 'compliant',
                coverage: 100,
                lastAudit: new Date().toISOString()
            },
            'GDPR': {
                status: 'compliant',
                coverage: 100,
                dataRetention: 'configured'
            }
        },
        auditTrail: {
            eventsLogged: 1000,
            integrityChecks: 'passed',
            encryption: 'HMAC-SHA256'
        },
        retentionPolicies: {
            authentication: '365 days',
            paymentProcessing: '2555 days',
            securityViolation: '2555 days',
            dataAccess: '1095 days'
        }
    };
}
/**
 * Genera reporte resumen
 */ async function generateSummaryReport(filter) {
    const [performance, security, business] = await Promise.all([
        generatePerformanceReport(filter),
        generateSecurityReport(filter),
        generateBusinessReport(filter)
    ]);
    return {
        period: `${filter.startDate} to ${filter.endDate}`,
        overview: {
            systemHealth: 'healthy',
            securityRisk: security.summary.riskLevel,
            businessPerformance: 'good'
        },
        keyMetrics: {
            avgResponseTime: performance.metrics.avgResponseTime,
            errorRate: performance.metrics.errorRate,
            securityEvents: security.summary.totalEvents,
            totalRevenue: business.metrics.totalRevenue,
            totalOrders: business.metrics.totalOrders
        },
        alerts: {
            active: 2,
            resolved: 15,
            escalated: 0
        }
    };
}
/**
 * Funciones auxiliares
 */ function generateHourlyTrends(metrics) {
    // Agrupar métricas por hora y calcular promedios
    const hourlyData = {};
    metrics.forEach((metric)=>{
        const hour = new Date(metric.timestamp).toISOString().substring(0, 13) + ':00:00.000Z';
        if (!hourlyData[hour]) {
            hourlyData[hour] = {
                responseTime: [],
                errorRate: [],
                throughput: []
            };
        }
        if (metric.name === 'performance.api.duration') {
            hourlyData[hour].responseTime.push(metric.value);
        } else if (metric.name === 'performance.api.error_rate') {
            hourlyData[hour].errorRate.push(metric.value);
        } else if (metric.name === 'performance.api.throughput') {
            hourlyData[hour].throughput.push(metric.value);
        }
    });
    return Object.entries(hourlyData).map(([timestamp, data])=>({
            timestamp,
            responseTime: data.responseTime.length > 0 ? data.responseTime.reduce((a, b)=>a + b, 0) / data.responseTime.length : 0,
            errorRate: data.errorRate.length > 0 ? data.errorRate.reduce((a, b)=>a + b, 0) / data.errorRate.length : 0,
            throughput: data.throughput.length > 0 ? data.throughput.reduce((a, b)=>a + b, 0) / data.throughput.length : 0
        }));
}
function generateDailyBusinessTrends(orders, filter) {
    const dailyData = {};
    orders.forEach((order)=>{
        const date = new Date(order.created_at).toISOString().substring(0, 10);
        if (!dailyData[date]) {
            dailyData[date] = {
                revenue: 0,
                orders: 0
            };
        }
        dailyData[date].revenue += order.total_amount || 0;
        dailyData[date].orders += 1;
    });
    return Object.entries(dailyData).map(([date, data])=>({
            date,
            revenue: data.revenue,
            orders: data.orders,
            conversionRate: 0.034 // Simulado
        }));
}
function generateCSVResponse(data, reportType) {
    // Implementación básica de CSV
    const csv = `Report Type,${reportType}\nGenerated At,${new Date().toISOString()}\n\n${JSON.stringify(data)}`;
    return new _server.NextResponse(csv, {
        headers: {
            'Content-Type': 'text/csv',
            'Content-Disposition': `attachment; filename="${reportType}_report_${new Date().toISOString().substring(0, 10)}.csv"`
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXGFkbWluXFxtb25pdG9yaW5nXFxyZXBvcnRzXFxyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gUElOVEVZQSBFLUNPTU1FUkNFIC0gTU9OSVRPUklORyBSRVBPUlRTIEFQSVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGdldEF1dGhlbnRpY2F0ZWRBZG1pbiB9IGZyb20gJ0AvbGliL2F1dGgvYWRtaW4tYXV0aCc7XG5pbXBvcnQgeyBnZXRTdXBhYmFzZUNsaWVudCB9IGZyb20gJ0AvbGliL3N1cGFiYXNlJztcbmltcG9ydCB7IGxvZ2dlciwgTG9nTGV2ZWwsIExvZ0NhdGVnb3J5IH0gZnJvbSAnQC9saWIvbG9nZ2VyJztcblxuaW50ZXJmYWNlIFJlcG9ydEZpbHRlciB7XG4gIHN0YXJ0RGF0ZTogc3RyaW5nO1xuICBlbmREYXRlOiBzdHJpbmc7XG4gIHNlcnZpY2VzPzogc3RyaW5nW107XG4gIGxldmVscz86IHN0cmluZ1tdO1xuICBjYXRlZ29yaWVzPzogc3RyaW5nW107XG4gIGxpbWl0PzogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgUGVyZm9ybWFuY2VSZXBvcnQge1xuICBwZXJpb2Q6IHN0cmluZztcbiAgbWV0cmljczoge1xuICAgIGF2Z1Jlc3BvbnNlVGltZTogbnVtYmVyO1xuICAgIG1heFJlc3BvbnNlVGltZTogbnVtYmVyO1xuICAgIG1pblJlc3BvbnNlVGltZTogbnVtYmVyO1xuICAgIGVycm9yUmF0ZTogbnVtYmVyO1xuICAgIHRocm91Z2hwdXQ6IG51bWJlcjtcbiAgICB1cHRpbWU6IG51bWJlcjtcbiAgfTtcbiAgdHJlbmRzOiBBcnJheTx7XG4gICAgdGltZXN0YW1wOiBzdHJpbmc7XG4gICAgcmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gICAgZXJyb3JSYXRlOiBudW1iZXI7XG4gICAgdGhyb3VnaHB1dDogbnVtYmVyO1xuICB9PjtcbiAgdG9wRXJyb3JzOiBBcnJheTx7XG4gICAgZXJyb3I6IHN0cmluZztcbiAgICBjb3VudDogbnVtYmVyO1xuICAgIHBlcmNlbnRhZ2U6IG51bWJlcjtcbiAgfT47XG59XG5cbmludGVyZmFjZSBTZWN1cml0eVJlcG9ydCB7XG4gIHBlcmlvZDogc3RyaW5nO1xuICBzdW1tYXJ5OiB7XG4gICAgdG90YWxFdmVudHM6IG51bWJlcjtcbiAgICBjcml0aWNhbEV2ZW50czogbnVtYmVyO1xuICAgIGJsb2NrZWRSZXF1ZXN0czogbnVtYmVyO1xuICAgIGF1dGhGYWlsdXJlczogbnVtYmVyO1xuICAgIHJpc2tMZXZlbDogc3RyaW5nO1xuICB9O1xuICBldmVudHNCeUNhdGVnb3J5OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICBldmVudHNCeUxldmVsOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICB0b3BUaHJlYXRzOiBBcnJheTx7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGNvdW50OiBudW1iZXI7XG4gICAgbGFzdFNlZW46IHN0cmluZztcbiAgfT47XG4gIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICBhdWRpdENvdmVyYWdlOiBudW1iZXI7XG4gICAgcmV0ZW50aW9uQ29tcGxpYW5jZTogbnVtYmVyO1xuICAgIGVuY3J5cHRpb25TdGF0dXM6IHN0cmluZztcbiAgfTtcbn1cblxuaW50ZXJmYWNlIEJ1c2luZXNzUmVwb3J0IHtcbiAgcGVyaW9kOiBzdHJpbmc7XG4gIG1ldHJpY3M6IHtcbiAgICB0b3RhbFJldmVudWU6IG51bWJlcjtcbiAgICB0b3RhbE9yZGVyczogbnVtYmVyO1xuICAgIGF2Z09yZGVyVmFsdWU6IG51bWJlcjtcbiAgICBjb252ZXJzaW9uUmF0ZTogbnVtYmVyO1xuICAgIHBheW1lbnRTdWNjZXNzUmF0ZTogbnVtYmVyO1xuICB9O1xuICB0cmVuZHM6IEFycmF5PHtcbiAgICBkYXRlOiBzdHJpbmc7XG4gICAgcmV2ZW51ZTogbnVtYmVyO1xuICAgIG9yZGVyczogbnVtYmVyO1xuICAgIGNvbnZlcnNpb25SYXRlOiBudW1iZXI7XG4gIH0+O1xuICBwYXltZW50TWV0aG9kczogUmVjb3JkPHN0cmluZywge1xuICAgIGNvdW50OiBudW1iZXI7XG4gICAgcmV2ZW51ZTogbnVtYmVyO1xuICAgIHN1Y2Nlc3NSYXRlOiBudW1iZXI7XG4gIH0+O1xufVxuXG4vKipcbiAqIEdFVCAvYXBpL2FkbWluL21vbml0b3JpbmcvcmVwb3J0c1xuICogR2VuZXJhIHJlcG9ydGVzIGRlIG1vbml0b3JlbyBzZWfDum4gZWwgdGlwbyBzb2xpY2l0YWRvXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICAvLyBWZXJpZmljYXIgYXV0ZW50aWNhY2nDs24gZGUgYWRtaW5cbiAgICBjb25zdCBhdXRoUmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZEFkbWluKHJlcXVlc3QpO1xuICAgIFxuICAgIGlmICghYXV0aFJlc3VsdC5pc0FkbWluIHx8ICFhdXRoUmVzdWx0LnVzZXJJZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiAnQWNjZXNvIG5vIGF1dG9yaXphZG8nXG4gICAgICB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IHJlcXVlc3QubmV4dFVybC5zZWFyY2hQYXJhbXM7XG4gICAgY29uc3QgcmVwb3J0VHlwZSA9IHNlYXJjaFBhcmFtcy5nZXQoJ3R5cGUnKSB8fCAncGVyZm9ybWFuY2UnO1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IHNlYXJjaFBhcmFtcy5nZXQoJ3N0YXJ0RGF0ZScpIHx8IG5ldyBEYXRlKERhdGUubm93KCkgLSA3ICogMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zdCBlbmREYXRlID0gc2VhcmNoUGFyYW1zLmdldCgnZW5kRGF0ZScpIHx8IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zdCBmb3JtYXQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdmb3JtYXQnKSB8fCAnanNvbic7XG5cbiAgICBjb25zdCBmaWx0ZXI6IFJlcG9ydEZpbHRlciA9IHtcbiAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGUsXG4gICAgICBzZXJ2aWNlczogc2VhcmNoUGFyYW1zLmdldCgnc2VydmljZXMnKT8uc3BsaXQoJywnKSxcbiAgICAgIGxldmVsczogc2VhcmNoUGFyYW1zLmdldCgnbGV2ZWxzJyk/LnNwbGl0KCcsJyksXG4gICAgICBjYXRlZ29yaWVzOiBzZWFyY2hQYXJhbXMuZ2V0KCdjYXRlZ29yaWVzJyk/LnNwbGl0KCcsJyksXG4gICAgICBsaW1pdDogcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnbGltaXQnKSB8fCAnMTAwMCcpXG4gICAgfTtcblxuICAgIGxldCByZXBvcnREYXRhOiBhbnk7XG5cbiAgICBzd2l0Y2ggKHJlcG9ydFR5cGUpIHtcbiAgICAgIGNhc2UgJ3BlcmZvcm1hbmNlJzpcbiAgICAgICAgcmVwb3J0RGF0YSA9IGF3YWl0IGdlbmVyYXRlUGVyZm9ybWFuY2VSZXBvcnQoZmlsdGVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWN1cml0eSc6XG4gICAgICAgIHJlcG9ydERhdGEgPSBhd2FpdCBnZW5lcmF0ZVNlY3VyaXR5UmVwb3J0KGZpbHRlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYnVzaW5lc3MnOlxuICAgICAgICByZXBvcnREYXRhID0gYXdhaXQgZ2VuZXJhdGVCdXNpbmVzc1JlcG9ydChmaWx0ZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NvbXBsaWFuY2UnOlxuICAgICAgICByZXBvcnREYXRhID0gYXdhaXQgZ2VuZXJhdGVDb21wbGlhbmNlUmVwb3J0KGZpbHRlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3VtbWFyeSc6XG4gICAgICAgIHJlcG9ydERhdGEgPSBhd2FpdCBnZW5lcmF0ZVN1bW1hcnlSZXBvcnQoZmlsdGVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiAnVGlwbyBkZSByZXBvcnRlIG5vIHbDoWxpZG8nXG4gICAgICAgIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgbG9nZ2VyLmluZm8oTG9nTGV2ZWwuSU5GTywgYE1vbml0b3JpbmcgcmVwb3J0IGdlbmVyYXRlZDogJHtyZXBvcnRUeXBlfWAsIHtcbiAgICAgIHVzZXJJZDogYXV0aFJlc3VsdC51c2VySWQsXG4gICAgICByZXBvcnRUeXBlLFxuICAgICAgcGVyaW9kOiBgJHtzdGFydERhdGV9IHRvICR7ZW5kRGF0ZX1gLFxuICAgICAgZm9ybWF0XG4gICAgfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKTtcblxuICAgIC8vIFJldG9ybmFyIGVuIGZvcm1hdG8gc29saWNpdGFkb1xuICAgIGlmIChmb3JtYXQgPT09ICdjc3YnKSB7XG4gICAgICByZXR1cm4gZ2VuZXJhdGVDU1ZSZXNwb25zZShyZXBvcnREYXRhLCByZXBvcnRUeXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgcmVwb3J0VHlwZSxcbiAgICAgICAgcGVyaW9kOiB7XG4gICAgICAgICAgc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZ2VuZXJhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgcmVwb3J0OiByZXBvcnREYXRhXG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIuZXJyb3IoTG9nTGV2ZWwuRVJST1IsICdGYWlsZWQgdG8gZ2VuZXJhdGUgbW9uaXRvcmluZyByZXBvcnQnLCB7XG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICB9LCBMb2dDYXRlZ29yeS5TWVNURU0pO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdFcnJvciBpbnRlcm5vIGRlbCBzZXJ2aWRvcidcbiAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG5cbi8qKlxuICogR2VuZXJhIHJlcG9ydGUgZGUgcGVyZm9ybWFuY2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVQZXJmb3JtYW5jZVJlcG9ydChmaWx0ZXI6IFJlcG9ydEZpbHRlcik6IFByb21pc2U8UGVyZm9ybWFuY2VSZXBvcnQ+IHtcbiAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUNsaWVudCh0cnVlKTtcbiAgXG4gIGlmICghc3VwYWJhc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIGNsaWVudCBub3QgYXZhaWxhYmxlJyk7XG4gIH1cblxuICAvLyBPYnRlbmVyIG3DqXRyaWNhcyBkZSBwZXJmb3JtYW5jZVxuICBjb25zdCB7IGRhdGE6IG1ldHJpY3MgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ2VudGVycHJpc2VfbWV0cmljcycpXG4gICAgLnNlbGVjdCgnKicpXG4gICAgLmluKCduYW1lJywgW1xuICAgICAgJ3BlcmZvcm1hbmNlLmFwaS5kdXJhdGlvbicsXG4gICAgICAncGVyZm9ybWFuY2UuYXBpLmVycm9yX3JhdGUnLFxuICAgICAgJ3BlcmZvcm1hbmNlLmFwaS50aHJvdWdocHV0JyxcbiAgICAgICdwZXJmb3JtYW5jZS5zeXN0ZW0udXB0aW1lJ1xuICAgIF0pXG4gICAgLmd0ZSgndGltZXN0YW1wJywgZmlsdGVyLnN0YXJ0RGF0ZSlcbiAgICAubHRlKCd0aW1lc3RhbXAnLCBmaWx0ZXIuZW5kRGF0ZSlcbiAgICAub3JkZXIoJ3RpbWVzdGFtcCcsIHsgYXNjZW5kaW5nOiB0cnVlIH0pO1xuXG4gIGlmICghbWV0cmljcykge1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIHBlcmZvcm1hbmNlIG1ldHJpY3MnKTtcbiAgfVxuXG4gIC8vIENhbGN1bGFyIG3DqXRyaWNhcyBhZ3JlZ2FkYXNcbiAgY29uc3QgcmVzcG9uc2VUaW1lTWV0cmljcyA9IG1ldHJpY3MuZmlsdGVyKG0gPT4gbS5uYW1lID09PSAncGVyZm9ybWFuY2UuYXBpLmR1cmF0aW9uJyk7XG4gIGNvbnN0IGVycm9yUmF0ZU1ldHJpY3MgPSBtZXRyaWNzLmZpbHRlcihtID0+IG0ubmFtZSA9PT0gJ3BlcmZvcm1hbmNlLmFwaS5lcnJvcl9yYXRlJyk7XG4gIGNvbnN0IHRocm91Z2hwdXRNZXRyaWNzID0gbWV0cmljcy5maWx0ZXIobSA9PiBtLm5hbWUgPT09ICdwZXJmb3JtYW5jZS5hcGkudGhyb3VnaHB1dCcpO1xuICBjb25zdCB1cHRpbWVNZXRyaWNzID0gbWV0cmljcy5maWx0ZXIobSA9PiBtLm5hbWUgPT09ICdwZXJmb3JtYW5jZS5zeXN0ZW0udXB0aW1lJyk7XG5cbiAgY29uc3QgYXZnUmVzcG9uc2VUaW1lID0gcmVzcG9uc2VUaW1lTWV0cmljcy5sZW5ndGggPiAwIFxuICAgID8gcmVzcG9uc2VUaW1lTWV0cmljcy5yZWR1Y2UoKHN1bSwgbSkgPT4gc3VtICsgbS52YWx1ZSwgMCkgLyByZXNwb25zZVRpbWVNZXRyaWNzLmxlbmd0aCBcbiAgICA6IDA7XG5cbiAgY29uc3QgbWF4UmVzcG9uc2VUaW1lID0gcmVzcG9uc2VUaW1lTWV0cmljcy5sZW5ndGggPiAwIFxuICAgID8gTWF0aC5tYXgoLi4ucmVzcG9uc2VUaW1lTWV0cmljcy5tYXAobSA9PiBtLnZhbHVlKSkgXG4gICAgOiAwO1xuXG4gIGNvbnN0IG1pblJlc3BvbnNlVGltZSA9IHJlc3BvbnNlVGltZU1ldHJpY3MubGVuZ3RoID4gMCBcbiAgICA/IE1hdGgubWluKC4uLnJlc3BvbnNlVGltZU1ldHJpY3MubWFwKG0gPT4gbS52YWx1ZSkpIFxuICAgIDogMDtcblxuICBjb25zdCBhdmdFcnJvclJhdGUgPSBlcnJvclJhdGVNZXRyaWNzLmxlbmd0aCA+IDAgXG4gICAgPyBlcnJvclJhdGVNZXRyaWNzLnJlZHVjZSgoc3VtLCBtKSA9PiBzdW0gKyBtLnZhbHVlLCAwKSAvIGVycm9yUmF0ZU1ldHJpY3MubGVuZ3RoIFxuICAgIDogMDtcblxuICBjb25zdCBhdmdUaHJvdWdocHV0ID0gdGhyb3VnaHB1dE1ldHJpY3MubGVuZ3RoID4gMCBcbiAgICA/IHRocm91Z2hwdXRNZXRyaWNzLnJlZHVjZSgoc3VtLCBtKSA9PiBzdW0gKyBtLnZhbHVlLCAwKSAvIHRocm91Z2hwdXRNZXRyaWNzLmxlbmd0aCBcbiAgICA6IDA7XG5cbiAgY29uc3QgYXZnVXB0aW1lID0gdXB0aW1lTWV0cmljcy5sZW5ndGggPiAwIFxuICAgID8gdXB0aW1lTWV0cmljcy5yZWR1Y2UoKHN1bSwgbSkgPT4gc3VtICsgbS52YWx1ZSwgMCkgLyB1cHRpbWVNZXRyaWNzLmxlbmd0aCBcbiAgICA6IDAuOTk7XG5cbiAgLy8gR2VuZXJhciB0ZW5kZW5jaWFzIChhZ3J1cGFkYXMgcG9yIGhvcmEpXG4gIGNvbnN0IHRyZW5kcyA9IGdlbmVyYXRlSG91cmx5VHJlbmRzKG1ldHJpY3MpO1xuXG4gIC8vIE9idGVuZXIgdG9wIGVycm9yZXMgKHNpbXVsYWRvKVxuICBjb25zdCB0b3BFcnJvcnMgPSBbXG4gICAgeyBlcnJvcjogJ0RhdGFiYXNlIHRpbWVvdXQnLCBjb3VudDogNSwgcGVyY2VudGFnZTogNDUuNSB9LFxuICAgIHsgZXJyb3I6ICdNZXJjYWRvUGFnbyBBUEkgZXJyb3InLCBjb3VudDogMywgcGVyY2VudGFnZTogMjcuMyB9LFxuICAgIHsgZXJyb3I6ICdDYWNoZSBtaXNzJywgY291bnQ6IDIsIHBlcmNlbnRhZ2U6IDE4LjIgfSxcbiAgICB7IGVycm9yOiAnUmF0ZSBsaW1pdCBleGNlZWRlZCcsIGNvdW50OiAxLCBwZXJjZW50YWdlOiA5LjEgfVxuICBdO1xuXG4gIHJldHVybiB7XG4gICAgcGVyaW9kOiBgJHtmaWx0ZXIuc3RhcnREYXRlfSB0byAke2ZpbHRlci5lbmREYXRlfWAsXG4gICAgbWV0cmljczoge1xuICAgICAgYXZnUmVzcG9uc2VUaW1lLFxuICAgICAgbWF4UmVzcG9uc2VUaW1lLFxuICAgICAgbWluUmVzcG9uc2VUaW1lLFxuICAgICAgZXJyb3JSYXRlOiBhdmdFcnJvclJhdGUsXG4gICAgICB0aHJvdWdocHV0OiBhdmdUaHJvdWdocHV0LFxuICAgICAgdXB0aW1lOiBhdmdVcHRpbWVcbiAgICB9LFxuICAgIHRyZW5kcyxcbiAgICB0b3BFcnJvcnNcbiAgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmEgcmVwb3J0ZSBkZSBzZWd1cmlkYWRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTZWN1cml0eVJlcG9ydChmaWx0ZXI6IFJlcG9ydEZpbHRlcik6IFByb21pc2U8U2VjdXJpdHlSZXBvcnQ+IHtcbiAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUNsaWVudCh0cnVlKTtcbiAgXG4gIGlmICghc3VwYWJhc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIGNsaWVudCBub3QgYXZhaWxhYmxlJyk7XG4gIH1cblxuICAvLyBPYnRlbmVyIGV2ZW50b3MgZGUgYXVkaXRvcsOtYSBkZSBzZWd1cmlkYWRcbiAgY29uc3QgeyBkYXRhOiBhdWRpdEV2ZW50cyB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnYXVkaXRfZXZlbnRzJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuZ3RlKCd0aW1lc3RhbXAnLCBmaWx0ZXIuc3RhcnREYXRlKVxuICAgIC5sdGUoJ3RpbWVzdGFtcCcsIGZpbHRlci5lbmREYXRlKVxuICAgIC5vcmRlcigndGltZXN0YW1wJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gIGlmICghYXVkaXRFdmVudHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBhdWRpdCBldmVudHMnKTtcbiAgfVxuXG4gIC8vIEZpbHRyYXIgZXZlbnRvcyBkZSBzZWd1cmlkYWRcbiAgY29uc3Qgc2VjdXJpdHlFdmVudHMgPSBhdWRpdEV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gXG4gICAgZXZlbnQuY2F0ZWdvcnkgPT09ICdzZWN1cml0eV92aW9sYXRpb24nIHx8IFxuICAgIGV2ZW50LmNhdGVnb3J5ID09PSAnYXV0aGVudGljYXRpb24nIHx8XG4gICAgZXZlbnQuc2V2ZXJpdHkgPT09ICdjcml0aWNhbCdcbiAgKTtcblxuICBjb25zdCBjcml0aWNhbEV2ZW50cyA9IHNlY3VyaXR5RXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5zZXZlcml0eSA9PT0gJ2NyaXRpY2FsJyk7XG4gIGNvbnN0IGJsb2NrZWRSZXF1ZXN0cyA9IHNlY3VyaXR5RXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5yZXN1bHQgPT09ICdibG9ja2VkJyk7XG4gIGNvbnN0IGF1dGhGYWlsdXJlcyA9IHNlY3VyaXR5RXZlbnRzLmZpbHRlcihldmVudCA9PiBcbiAgICBldmVudC5jYXRlZ29yeSA9PT0gJ2F1dGhlbnRpY2F0aW9uJyAmJiBldmVudC5yZXN1bHQgPT09ICdmYWlsdXJlJ1xuICApO1xuXG4gIC8vIEFncnVwYXIgcG9yIGNhdGVnb3LDrWFcbiAgY29uc3QgZXZlbnRzQnlDYXRlZ29yeTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuICBzZWN1cml0eUV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICBldmVudHNCeUNhdGVnb3J5W2V2ZW50LmNhdGVnb3J5XSA9IChldmVudHNCeUNhdGVnb3J5W2V2ZW50LmNhdGVnb3J5XSB8fCAwKSArIDE7XG4gIH0pO1xuXG4gIC8vIEFncnVwYXIgcG9yIG5pdmVsXG4gIGNvbnN0IGV2ZW50c0J5TGV2ZWw6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgc2VjdXJpdHlFdmVudHMuZm9yRWFjaChldmVudCA9PiB7XG4gICAgZXZlbnRzQnlMZXZlbFtldmVudC5zZXZlcml0eV0gPSAoZXZlbnRzQnlMZXZlbFtldmVudC5zZXZlcml0eV0gfHwgMCkgKyAxO1xuICB9KTtcblxuICAvLyBEZXRlcm1pbmFyIG5pdmVsIGRlIHJpZXNnb1xuICBsZXQgcmlza0xldmVsID0gJ2xvdyc7XG4gIGlmIChjcml0aWNhbEV2ZW50cy5sZW5ndGggPiAxMCkgcmlza0xldmVsID0gJ2NyaXRpY2FsJztcbiAgZWxzZSBpZiAoY3JpdGljYWxFdmVudHMubGVuZ3RoID4gNSkgcmlza0xldmVsID0gJ2hpZ2gnO1xuICBlbHNlIGlmIChjcml0aWNhbEV2ZW50cy5sZW5ndGggPiAyKSByaXNrTGV2ZWwgPSAnbWVkaXVtJztcblxuICAvLyBUb3AgYW1lbmF6YXMgKHNpbXVsYWRvIGJhc2FkbyBlbiBldmVudG9zIHJlYWxlcylcbiAgY29uc3QgdG9wVGhyZWF0cyA9IFtcbiAgICB7IHR5cGU6ICdJbnZhbGlkIHNpZ25hdHVyZScsIGNvdW50OiBibG9ja2VkUmVxdWVzdHMubGVuZ3RoLCBsYXN0U2VlbjogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0sXG4gICAgeyB0eXBlOiAnQXV0aGVudGljYXRpb24gZmFpbHVyZScsIGNvdW50OiBhdXRoRmFpbHVyZXMubGVuZ3RoLCBsYXN0U2VlbjogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0sXG4gICAgeyB0eXBlOiAnUmF0ZSBsaW1pdCB2aW9sYXRpb24nLCBjb3VudDogMiwgbGFzdFNlZW46IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9XG4gIF0uZmlsdGVyKHRocmVhdCA9PiB0aHJlYXQuY291bnQgPiAwKTtcblxuICByZXR1cm4ge1xuICAgIHBlcmlvZDogYCR7ZmlsdGVyLnN0YXJ0RGF0ZX0gdG8gJHtmaWx0ZXIuZW5kRGF0ZX1gLFxuICAgIHN1bW1hcnk6IHtcbiAgICAgIHRvdGFsRXZlbnRzOiBzZWN1cml0eUV2ZW50cy5sZW5ndGgsXG4gICAgICBjcml0aWNhbEV2ZW50czogY3JpdGljYWxFdmVudHMubGVuZ3RoLFxuICAgICAgYmxvY2tlZFJlcXVlc3RzOiBibG9ja2VkUmVxdWVzdHMubGVuZ3RoLFxuICAgICAgYXV0aEZhaWx1cmVzOiBhdXRoRmFpbHVyZXMubGVuZ3RoLFxuICAgICAgcmlza0xldmVsXG4gICAgfSxcbiAgICBldmVudHNCeUNhdGVnb3J5LFxuICAgIGV2ZW50c0J5TGV2ZWwsXG4gICAgdG9wVGhyZWF0cyxcbiAgICBjb21wbGlhbmNlU3RhdHVzOiB7XG4gICAgICBhdWRpdENvdmVyYWdlOiAxMDAsXG4gICAgICByZXRlbnRpb25Db21wbGlhbmNlOiAxMDAsXG4gICAgICBlbmNyeXB0aW9uU3RhdHVzOiAnSE1BQy1TSEEyNTYnXG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEdlbmVyYSByZXBvcnRlIGRlIG5lZ29jaW9cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVCdXNpbmVzc1JlcG9ydChmaWx0ZXI6IFJlcG9ydEZpbHRlcik6IFByb21pc2U8QnVzaW5lc3NSZXBvcnQ+IHtcbiAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUNsaWVudCh0cnVlKTtcbiAgXG4gIGlmICghc3VwYWJhc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIGNsaWVudCBub3QgYXZhaWxhYmxlJyk7XG4gIH1cblxuICAvLyBPYnRlbmVyIMOzcmRlbmVzIGRlbCBwZXLDrW9kb1xuICBjb25zdCB7IGRhdGE6IG9yZGVycyB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnb3JkZXJzJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuZ3RlKCdjcmVhdGVkX2F0JywgZmlsdGVyLnN0YXJ0RGF0ZSlcbiAgICAubHRlKCdjcmVhdGVkX2F0JywgZmlsdGVyLmVuZERhdGUpO1xuXG4gIGlmICghb3JkZXJzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggb3JkZXJzJyk7XG4gIH1cblxuICBjb25zdCBjb21wbGV0ZWRPcmRlcnMgPSBvcmRlcnMuZmlsdGVyKG9yZGVyID0+IG9yZGVyLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpO1xuICBjb25zdCB0b3RhbFJldmVudWUgPSBjb21wbGV0ZWRPcmRlcnMucmVkdWNlKChzdW0sIG9yZGVyKSA9PiBzdW0gKyAob3JkZXIudG90YWxfYW1vdW50IHx8IDApLCAwKTtcbiAgY29uc3QgYXZnT3JkZXJWYWx1ZSA9IGNvbXBsZXRlZE9yZGVycy5sZW5ndGggPiAwID8gdG90YWxSZXZlbnVlIC8gY29tcGxldGVkT3JkZXJzLmxlbmd0aCA6IDA7XG5cbiAgLy8gTcOpdHJpY2FzIHNpbXVsYWRhcyAoZW4gcHJvZHVjY2nDs24gdmVuZHLDrWFuIGRlIGFuYWx5dGljcyByZWFsZXMpXG4gIGNvbnN0IGNvbnZlcnNpb25SYXRlID0gMC4wMzQ7IC8vIDMuNCVcbiAgY29uc3QgcGF5bWVudFN1Y2Nlc3NSYXRlID0gMC45Nzg7IC8vIDk3LjglXG5cbiAgLy8gVGVuZGVuY2lhcyBkaWFyaWFzXG4gIGNvbnN0IHRyZW5kcyA9IGdlbmVyYXRlRGFpbHlCdXNpbmVzc1RyZW5kcyhjb21wbGV0ZWRPcmRlcnMsIGZpbHRlcik7XG5cbiAgLy8gTcOpdG9kb3MgZGUgcGFnb1xuICBjb25zdCBwYXltZW50TWV0aG9kcyA9IHtcbiAgICBtZXJjYWRvcGFnbzoge1xuICAgICAgY291bnQ6IGNvbXBsZXRlZE9yZGVycy5sZW5ndGgsXG4gICAgICByZXZlbnVlOiB0b3RhbFJldmVudWUsXG4gICAgICBzdWNjZXNzUmF0ZTogcGF5bWVudFN1Y2Nlc3NSYXRlXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGVyaW9kOiBgJHtmaWx0ZXIuc3RhcnREYXRlfSB0byAke2ZpbHRlci5lbmREYXRlfWAsXG4gICAgbWV0cmljczoge1xuICAgICAgdG90YWxSZXZlbnVlLFxuICAgICAgdG90YWxPcmRlcnM6IGNvbXBsZXRlZE9yZGVycy5sZW5ndGgsXG4gICAgICBhdmdPcmRlclZhbHVlLFxuICAgICAgY29udmVyc2lvblJhdGUsXG4gICAgICBwYXltZW50U3VjY2Vzc1JhdGVcbiAgICB9LFxuICAgIHRyZW5kcyxcbiAgICBwYXltZW50TWV0aG9kc1xuICB9O1xufVxuXG4vKipcbiAqIEdlbmVyYSByZXBvcnRlIGRlIGNvbXBsaWFuY2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVDb21wbGlhbmNlUmVwb3J0KGZpbHRlcjogUmVwb3J0RmlsdGVyKSB7XG4gIHJldHVybiB7XG4gICAgcGVyaW9kOiBgJHtmaWx0ZXIuc3RhcnREYXRlfSB0byAke2ZpbHRlci5lbmREYXRlfWAsXG4gICAgc3RhbmRhcmRzOiB7XG4gICAgICAnSVNPL0lFQyAyNzAwMToyMDEzJzoge1xuICAgICAgICBzdGF0dXM6ICdjb21wbGlhbnQnLFxuICAgICAgICBjb3ZlcmFnZTogMTAwLFxuICAgICAgICBsYXN0QXVkaXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSxcbiAgICAgICdHRFBSJzoge1xuICAgICAgICBzdGF0dXM6ICdjb21wbGlhbnQnLFxuICAgICAgICBjb3ZlcmFnZTogMTAwLFxuICAgICAgICBkYXRhUmV0ZW50aW9uOiAnY29uZmlndXJlZCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGF1ZGl0VHJhaWw6IHtcbiAgICAgIGV2ZW50c0xvZ2dlZDogMTAwMCxcbiAgICAgIGludGVncml0eUNoZWNrczogJ3Bhc3NlZCcsXG4gICAgICBlbmNyeXB0aW9uOiAnSE1BQy1TSEEyNTYnXG4gICAgfSxcbiAgICByZXRlbnRpb25Qb2xpY2llczoge1xuICAgICAgYXV0aGVudGljYXRpb246ICczNjUgZGF5cycsXG4gICAgICBwYXltZW50UHJvY2Vzc2luZzogJzI1NTUgZGF5cycsXG4gICAgICBzZWN1cml0eVZpb2xhdGlvbjogJzI1NTUgZGF5cycsXG4gICAgICBkYXRhQWNjZXNzOiAnMTA5NSBkYXlzJ1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmEgcmVwb3J0ZSByZXN1bWVuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlU3VtbWFyeVJlcG9ydChmaWx0ZXI6IFJlcG9ydEZpbHRlcikge1xuICBjb25zdCBbcGVyZm9ybWFuY2UsIHNlY3VyaXR5LCBidXNpbmVzc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgZ2VuZXJhdGVQZXJmb3JtYW5jZVJlcG9ydChmaWx0ZXIpLFxuICAgIGdlbmVyYXRlU2VjdXJpdHlSZXBvcnQoZmlsdGVyKSxcbiAgICBnZW5lcmF0ZUJ1c2luZXNzUmVwb3J0KGZpbHRlcilcbiAgXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwZXJpb2Q6IGAke2ZpbHRlci5zdGFydERhdGV9IHRvICR7ZmlsdGVyLmVuZERhdGV9YCxcbiAgICBvdmVydmlldzoge1xuICAgICAgc3lzdGVtSGVhbHRoOiAnaGVhbHRoeScsXG4gICAgICBzZWN1cml0eVJpc2s6IHNlY3VyaXR5LnN1bW1hcnkucmlza0xldmVsLFxuICAgICAgYnVzaW5lc3NQZXJmb3JtYW5jZTogJ2dvb2QnXG4gICAgfSxcbiAgICBrZXlNZXRyaWNzOiB7XG4gICAgICBhdmdSZXNwb25zZVRpbWU6IHBlcmZvcm1hbmNlLm1ldHJpY3MuYXZnUmVzcG9uc2VUaW1lLFxuICAgICAgZXJyb3JSYXRlOiBwZXJmb3JtYW5jZS5tZXRyaWNzLmVycm9yUmF0ZSxcbiAgICAgIHNlY3VyaXR5RXZlbnRzOiBzZWN1cml0eS5zdW1tYXJ5LnRvdGFsRXZlbnRzLFxuICAgICAgdG90YWxSZXZlbnVlOiBidXNpbmVzcy5tZXRyaWNzLnRvdGFsUmV2ZW51ZSxcbiAgICAgIHRvdGFsT3JkZXJzOiBidXNpbmVzcy5tZXRyaWNzLnRvdGFsT3JkZXJzXG4gICAgfSxcbiAgICBhbGVydHM6IHtcbiAgICAgIGFjdGl2ZTogMixcbiAgICAgIHJlc29sdmVkOiAxNSxcbiAgICAgIGVzY2FsYXRlZDogMFxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBGdW5jaW9uZXMgYXV4aWxpYXJlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUhvdXJseVRyZW5kcyhtZXRyaWNzOiBhbnlbXSkge1xuICAvLyBBZ3J1cGFyIG3DqXRyaWNhcyBwb3IgaG9yYSB5IGNhbGN1bGFyIHByb21lZGlvc1xuICBjb25zdCBob3VybHlEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIFxuICBtZXRyaWNzLmZvckVhY2gobWV0cmljID0+IHtcbiAgICBjb25zdCBob3VyID0gbmV3IERhdGUobWV0cmljLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTMpICsgJzowMDowMC4wMDBaJztcbiAgICBpZiAoIWhvdXJseURhdGFbaG91cl0pIHtcbiAgICAgIGhvdXJseURhdGFbaG91cl0gPSB7IHJlc3BvbnNlVGltZTogW10sIGVycm9yUmF0ZTogW10sIHRocm91Z2hwdXQ6IFtdIH07XG4gICAgfVxuICAgIFxuICAgIGlmIChtZXRyaWMubmFtZSA9PT0gJ3BlcmZvcm1hbmNlLmFwaS5kdXJhdGlvbicpIHtcbiAgICAgIGhvdXJseURhdGFbaG91cl0ucmVzcG9uc2VUaW1lLnB1c2gobWV0cmljLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG1ldHJpYy5uYW1lID09PSAncGVyZm9ybWFuY2UuYXBpLmVycm9yX3JhdGUnKSB7XG4gICAgICBob3VybHlEYXRhW2hvdXJdLmVycm9yUmF0ZS5wdXNoKG1ldHJpYy52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChtZXRyaWMubmFtZSA9PT0gJ3BlcmZvcm1hbmNlLmFwaS50aHJvdWdocHV0Jykge1xuICAgICAgaG91cmx5RGF0YVtob3VyXS50aHJvdWdocHV0LnB1c2gobWV0cmljLnZhbHVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBPYmplY3QuZW50cmllcyhob3VybHlEYXRhKS5tYXAoKFt0aW1lc3RhbXAsIGRhdGFdKSA9PiAoe1xuICAgIHRpbWVzdGFtcCxcbiAgICByZXNwb25zZVRpbWU6IGRhdGEucmVzcG9uc2VUaW1lLmxlbmd0aCA+IDAgPyBkYXRhLnJlc3BvbnNlVGltZS5yZWR1Y2UoKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiBhICsgYiwgMCkgLyBkYXRhLnJlc3BvbnNlVGltZS5sZW5ndGggOiAwLFxuICAgIGVycm9yUmF0ZTogZGF0YS5lcnJvclJhdGUubGVuZ3RoID4gMCA/IGRhdGEuZXJyb3JSYXRlLnJlZHVjZSgoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IGEgKyBiLCAwKSAvIGRhdGEuZXJyb3JSYXRlLmxlbmd0aCA6IDAsXG4gICAgdGhyb3VnaHB1dDogZGF0YS50aHJvdWdocHV0Lmxlbmd0aCA+IDAgPyBkYXRhLnRocm91Z2hwdXQucmVkdWNlKChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gYSArIGIsIDApIC8gZGF0YS50aHJvdWdocHV0Lmxlbmd0aCA6IDBcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURhaWx5QnVzaW5lc3NUcmVuZHMob3JkZXJzOiBhbnlbXSwgZmlsdGVyOiBSZXBvcnRGaWx0ZXIpIHtcbiAgY29uc3QgZGFpbHlEYXRhOiBSZWNvcmQ8c3RyaW5nLCB7IHJldmVudWU6IG51bWJlcjsgb3JkZXJzOiBudW1iZXIgfT4gPSB7fTtcbiAgXG4gIG9yZGVycy5mb3JFYWNoKG9yZGVyID0+IHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUob3JkZXIuY3JlYXRlZF9hdCkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xuICAgIGlmICghZGFpbHlEYXRhW2RhdGVdKSB7XG4gICAgICBkYWlseURhdGFbZGF0ZV0gPSB7IHJldmVudWU6IDAsIG9yZGVyczogMCB9O1xuICAgIH1cbiAgICBkYWlseURhdGFbZGF0ZV0ucmV2ZW51ZSArPSBvcmRlci50b3RhbF9hbW91bnQgfHwgMDtcbiAgICBkYWlseURhdGFbZGF0ZV0ub3JkZXJzICs9IDE7XG4gIH0pO1xuXG4gIHJldHVybiBPYmplY3QuZW50cmllcyhkYWlseURhdGEpLm1hcCgoW2RhdGUsIGRhdGFdKSA9PiAoe1xuICAgIGRhdGUsXG4gICAgcmV2ZW51ZTogZGF0YS5yZXZlbnVlLFxuICAgIG9yZGVyczogZGF0YS5vcmRlcnMsXG4gICAgY29udmVyc2lvblJhdGU6IDAuMDM0IC8vIFNpbXVsYWRvXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVDU1ZSZXNwb25zZShkYXRhOiBhbnksIHJlcG9ydFR5cGU6IHN0cmluZykge1xuICAvLyBJbXBsZW1lbnRhY2nDs24gYsOhc2ljYSBkZSBDU1ZcbiAgY29uc3QgY3N2ID0gYFJlcG9ydCBUeXBlLCR7cmVwb3J0VHlwZX1cXG5HZW5lcmF0ZWQgQXQsJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XFxuXFxuJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gO1xuICBcbiAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoY3N2LCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2NzdicsXG4gICAgICAnQ29udGVudC1EaXNwb3NpdGlvbic6IGBhdHRhY2htZW50OyBmaWxlbmFtZT1cIiR7cmVwb3J0VHlwZX1fcmVwb3J0XyR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCl9LmNzdlwiYFxuICAgIH1cbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiR0VUIiwicmVxdWVzdCIsImF1dGhSZXN1bHQiLCJnZXRBdXRoZW50aWNhdGVkQWRtaW4iLCJpc0FkbWluIiwidXNlcklkIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInN1Y2Nlc3MiLCJlcnJvciIsInN0YXR1cyIsInNlYXJjaFBhcmFtcyIsIm5leHRVcmwiLCJyZXBvcnRUeXBlIiwiZ2V0Iiwic3RhcnREYXRlIiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwiZW5kRGF0ZSIsImZvcm1hdCIsImZpbHRlciIsInNlcnZpY2VzIiwic3BsaXQiLCJsZXZlbHMiLCJjYXRlZ29yaWVzIiwibGltaXQiLCJwYXJzZUludCIsInJlcG9ydERhdGEiLCJnZW5lcmF0ZVBlcmZvcm1hbmNlUmVwb3J0IiwiZ2VuZXJhdGVTZWN1cml0eVJlcG9ydCIsImdlbmVyYXRlQnVzaW5lc3NSZXBvcnQiLCJnZW5lcmF0ZUNvbXBsaWFuY2VSZXBvcnQiLCJnZW5lcmF0ZVN1bW1hcnlSZXBvcnQiLCJsb2dnZXIiLCJpbmZvIiwiTG9nTGV2ZWwiLCJJTkZPIiwicGVyaW9kIiwiTG9nQ2F0ZWdvcnkiLCJTWVNURU0iLCJnZW5lcmF0ZUNTVlJlc3BvbnNlIiwiZGF0YSIsImdlbmVyYXRlZEF0IiwicmVwb3J0IiwiRVJST1IiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdXBhYmFzZSIsImdldFN1cGFiYXNlQ2xpZW50IiwibWV0cmljcyIsImZyb20iLCJzZWxlY3QiLCJpbiIsImd0ZSIsImx0ZSIsIm9yZGVyIiwiYXNjZW5kaW5nIiwicmVzcG9uc2VUaW1lTWV0cmljcyIsIm0iLCJuYW1lIiwiZXJyb3JSYXRlTWV0cmljcyIsInRocm91Z2hwdXRNZXRyaWNzIiwidXB0aW1lTWV0cmljcyIsImF2Z1Jlc3BvbnNlVGltZSIsImxlbmd0aCIsInJlZHVjZSIsInN1bSIsInZhbHVlIiwibWF4UmVzcG9uc2VUaW1lIiwiTWF0aCIsIm1heCIsIm1hcCIsIm1pblJlc3BvbnNlVGltZSIsIm1pbiIsImF2Z0Vycm9yUmF0ZSIsImF2Z1Rocm91Z2hwdXQiLCJhdmdVcHRpbWUiLCJ0cmVuZHMiLCJnZW5lcmF0ZUhvdXJseVRyZW5kcyIsInRvcEVycm9ycyIsImNvdW50IiwicGVyY2VudGFnZSIsImVycm9yUmF0ZSIsInRocm91Z2hwdXQiLCJ1cHRpbWUiLCJhdWRpdEV2ZW50cyIsInNlY3VyaXR5RXZlbnRzIiwiZXZlbnQiLCJjYXRlZ29yeSIsInNldmVyaXR5IiwiY3JpdGljYWxFdmVudHMiLCJibG9ja2VkUmVxdWVzdHMiLCJyZXN1bHQiLCJhdXRoRmFpbHVyZXMiLCJldmVudHNCeUNhdGVnb3J5IiwiZm9yRWFjaCIsImV2ZW50c0J5TGV2ZWwiLCJyaXNrTGV2ZWwiLCJ0b3BUaHJlYXRzIiwidHlwZSIsImxhc3RTZWVuIiwidGhyZWF0Iiwic3VtbWFyeSIsInRvdGFsRXZlbnRzIiwiY29tcGxpYW5jZVN0YXR1cyIsImF1ZGl0Q292ZXJhZ2UiLCJyZXRlbnRpb25Db21wbGlhbmNlIiwiZW5jcnlwdGlvblN0YXR1cyIsIm9yZGVycyIsImNvbXBsZXRlZE9yZGVycyIsInRvdGFsUmV2ZW51ZSIsInRvdGFsX2Ftb3VudCIsImF2Z09yZGVyVmFsdWUiLCJjb252ZXJzaW9uUmF0ZSIsInBheW1lbnRTdWNjZXNzUmF0ZSIsImdlbmVyYXRlRGFpbHlCdXNpbmVzc1RyZW5kcyIsInBheW1lbnRNZXRob2RzIiwibWVyY2Fkb3BhZ28iLCJyZXZlbnVlIiwic3VjY2Vzc1JhdGUiLCJ0b3RhbE9yZGVycyIsInN0YW5kYXJkcyIsImNvdmVyYWdlIiwibGFzdEF1ZGl0IiwiZGF0YVJldGVudGlvbiIsImF1ZGl0VHJhaWwiLCJldmVudHNMb2dnZWQiLCJpbnRlZ3JpdHlDaGVja3MiLCJlbmNyeXB0aW9uIiwicmV0ZW50aW9uUG9saWNpZXMiLCJhdXRoZW50aWNhdGlvbiIsInBheW1lbnRQcm9jZXNzaW5nIiwic2VjdXJpdHlWaW9sYXRpb24iLCJkYXRhQWNjZXNzIiwicGVyZm9ybWFuY2UiLCJzZWN1cml0eSIsImJ1c2luZXNzIiwiUHJvbWlzZSIsImFsbCIsIm92ZXJ2aWV3Iiwic3lzdGVtSGVhbHRoIiwic2VjdXJpdHlSaXNrIiwiYnVzaW5lc3NQZXJmb3JtYW5jZSIsImtleU1ldHJpY3MiLCJhbGVydHMiLCJhY3RpdmUiLCJyZXNvbHZlZCIsImVzY2FsYXRlZCIsImhvdXJseURhdGEiLCJtZXRyaWMiLCJob3VyIiwidGltZXN0YW1wIiwic3Vic3RyaW5nIiwicmVzcG9uc2VUaW1lIiwicHVzaCIsIk9iamVjdCIsImVudHJpZXMiLCJhIiwiYiIsImRhaWx5RGF0YSIsImRhdGUiLCJjcmVhdGVkX2F0IiwiY3N2IiwiSlNPTiIsInN0cmluZ2lmeSIsImhlYWRlcnMiXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0Qyw4Q0FBOEM7QUFDOUMsc0NBQXNDOzs7OzsrQkF3RmhCQTs7O2VBQUFBOzs7d0JBdEZvQjsyQkFDSjswQkFDSjt3QkFDWTtBQW1GdkMsZUFBZUEsSUFBSUMsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLG1DQUFtQztRQUNuQyxNQUFNQyxhQUFhLE1BQU1DLElBQUFBLGdDQUFxQixFQUFDRjtRQUUvQyxJQUFJLENBQUNDLFdBQVdFLE9BQU8sSUFBSSxDQUFDRixXQUFXRyxNQUFNLEVBQUU7WUFDN0MsT0FBT0Msb0JBQVksQ0FBQ0MsSUFBSSxDQUFDO2dCQUN2QkMsU0FBUztnQkFDVEMsT0FBTztZQUNULEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUNuQjtRQUVBLE1BQU1DLGVBQWVWLFFBQVFXLE9BQU8sQ0FBQ0QsWUFBWTtRQUNqRCxNQUFNRSxhQUFhRixhQUFhRyxHQUFHLENBQUMsV0FBVztRQUMvQyxNQUFNQyxZQUFZSixhQUFhRyxHQUFHLENBQUMsZ0JBQWdCLElBQUlFLEtBQUtBLEtBQUtDLEdBQUcsS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLE1BQU1DLFdBQVc7UUFDN0csTUFBTUMsVUFBVVIsYUFBYUcsR0FBRyxDQUFDLGNBQWMsSUFBSUUsT0FBT0UsV0FBVztRQUNyRSxNQUFNRSxTQUFTVCxhQUFhRyxHQUFHLENBQUMsYUFBYTtRQUU3QyxNQUFNTyxTQUF1QjtZQUMzQk47WUFDQUk7WUFDQUcsVUFBVVgsYUFBYUcsR0FBRyxDQUFDLGFBQWFTLE1BQU07WUFDOUNDLFFBQVFiLGFBQWFHLEdBQUcsQ0FBQyxXQUFXUyxNQUFNO1lBQzFDRSxZQUFZZCxhQUFhRyxHQUFHLENBQUMsZUFBZVMsTUFBTTtZQUNsREcsT0FBT0MsU0FBU2hCLGFBQWFHLEdBQUcsQ0FB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