f904537cd67d8b765e712aedd860145f
/**
 * Utilidades de Autenticación Enterprise
 * Sistema centralizado que combina Clerk + Supabase con patrones enterprise
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getEnterpriseAuthContext () {
        return getEnterpriseAuthContext;
    },
    get requireAdminAuth () {
        return requireAdminAuth;
    },
    get requireBasicAuth () {
        return requireBasicAuth;
    },
    get requireCriticalAuth () {
        return requireCriticalAuth;
    },
    get requireHighAuth () {
        return requireHighAuth;
    },
    get requireMediumAuth () {
        return requireMediumAuth;
    },
    get requirePaymentAuth () {
        return requirePaymentAuth;
    },
    get withAdminAuth () {
        return withAdminAuth;
    },
    get withBasicAuth () {
        return withBasicAuth;
    },
    get withCriticalAuth () {
        return withCriticalAuth;
    },
    get withEnterpriseAuth () {
        return withEnterpriseAuth;
    },
    get withHighAuth () {
        return withHighAuth;
    },
    get withMediumAuth () {
        return withMediumAuth;
    },
    get withPaymentAuth () {
        return withPaymentAuth;
    }
});
const _auth = require("../../auth");
const _supabase = require("../supabase");
const _jwtvalidation = require("./jwt-validation");
const _csrfprotection = require("./csrf-protection");
const _ratelimiting = require("./rate-limiting");
const _securityaudit = require("./security-audit");
// =====================================================
// CONFIGURACIONES ENTERPRISE
// =====================================================
const ENTERPRISE_CONFIGS = {
    // Configuración para operaciones críticas (admin, pagos)
    critical: {
        requiredRole: 'admin',
        securityLevel: 'critical',
        enableRateLimit: true,
        enableCSRFProtection: true,
        enableJWTValidation: true,
        rateLimitType: 'admin',
        requiredPermissions: [
            'admin_access'
        ]
    },
    // Configuración para operaciones de alto nivel (gestión de contenido)
    high: {
        requiredRole: 'admin',
        securityLevel: 'high',
        enableRateLimit: true,
        enableCSRFProtection: true,
        enableJWTValidation: true,
        rateLimitType: 'admin'
    },
    // Configuración para operaciones moderadas (APIs de productos)
    medium: {
        securityLevel: 'medium',
        enableRateLimit: true,
        enableCSRFProtection: false,
        enableJWTValidation: false,
        rateLimitType: 'products'
    },
    // Configuración para operaciones básicas (consultas públicas)
    low: {
        securityLevel: 'low',
        enableRateLimit: true,
        enableCSRFProtection: false,
        enableJWTValidation: false,
        rateLimitType: 'general'
    }
};
async function getEnterpriseAuthContext(request, options = {}) {
    try {
        const startTime = Date.now();
        // Aplicar configuración predefinida si se especifica nivel de seguridad
        const config = options.securityLevel ? {
            ...ENTERPRISE_CONFIGS[options.securityLevel],
            ...options
        } : options;
        // 1. VALIDACIÓN DE RATE LIMITING
        if (config.enableRateLimit && config.rateLimitType) {
            const rateLimitResult = await (0, _ratelimiting.checkRateLimit)(request, _ratelimiting.RATE_LIMIT_CONFIGS[config.rateLimitType], `enterprise_${config.rateLimitType}`);
            if (!rateLimitResult.allowed) {
                await (0, _securityaudit.logAuthFailure)('unknown', `Rate limit exceeded: ${rateLimitResult.error}`, request);
                return {
                    success: false,
                    error: rateLimitResult.error || 'Rate limit exceeded',
                    code: 'RATE_LIMIT_EXCEEDED',
                    status: 429,
                    retryAfter: rateLimitResult.retryAfter
                };
            }
        }
        // 2. VALIDACIÓN CSRF
        let csrfValid = true;
        if (config.enableCSRFProtection) {
            const csrfResult = await (0, _csrfprotection.validateRequestOrigin)(request);
            csrfValid = csrfResult.valid;
            if (!csrfValid) {
                await (0, _securityaudit.logAuthFailure)('unknown', `CSRF validation failed: ${csrfResult.error}`, request);
                return {
                    success: false,
                    error: csrfResult.error || 'Invalid request origin',
                    code: 'CSRF_VALIDATION_FAILED',
                    status: 403
                };
            }
        }
        // 3. AUTENTICACIÓN BÁSICA CON CLERK
        let userId;
        let sessionId;
        let userEmail;
        if (request && 'query' in request) {
            // Pages Router - NextAuth.js
            // TODO: Implementar autenticación para Pages Router con NextAuth.js
            return {
                success: false,
                error: 'Pages Router no soportado con NextAuth.js',
                code: 'NOT_SUPPORTED',
                status: 401
            };
        } else {
            // App Router - NextAuth.js
            const session = await (0, _auth.auth)();
            if (!session?.user?.id) {
                return {
                    success: false,
                    error: 'Usuario no autenticado',
                    code: 'NOT_AUTHENTICATED',
                    status: 401
                };
            }
            userId = session.user.id;
            sessionId = session.user.id; // NextAuth.js no tiene sessionId separado
            userEmail = session.user.email;
        }
        // 4. VALIDACIÓN JWT
        let jwtValid = true;
        if (config.enableJWTValidation) {
            const jwtResult = await (0, _jwtvalidation.validateJWTIntegrity)(request);
            jwtValid = jwtResult.valid;
            if (!jwtValid) {
                await (0, _securityaudit.logAuthFailure)(userId, `JWT validation failed: ${jwtResult.error}`, request);
                return {
                    success: false,
                    error: jwtResult.error || 'Invalid JWT token',
                    code: 'JWT_VALIDATION_FAILED',
                    status: 401
                };
            }
            // Validar permisos específicos si se requieren
            if (config.requiredRole || config.requiredPermissions) {
                const permissionResult = await (0, _jwtvalidation.validateJWTPermissions)(config.requiredRole || '', config.requiredPermissions || [], request);
                if (!permissionResult.valid) {
                    await (0, _securityaudit.logPermissionDenied)(userId, `Permission validation failed: ${permissionResult.error}`, request);
                    return {
                        success: false,
                        error: permissionResult.error || 'Insufficient permissions',
                        code: 'INSUFFICIENT_PERMISSIONS',
                        status: 403
                    };
                }
            }
        }
        // 5. OBTENER INFORMACIÓN DEL USUARIO DESDE SUPABASE
        const { data: userProfile, error: userError } = await _supabase.supabaseAdmin.from('user_profiles').select('*').eq('clerk_user_id', userId).single();
        if (userError && userError.code !== 'PGRST116') {
            console.error('[ENTERPRISE_AUTH] Error obteniendo perfil de usuario:', userError);
        }
        // 6. DETERMINAR ROL Y PERMISOS
        const userRole = userProfile?.role || 'user';
        const userPermissions = userProfile?.permissions || [];
        // Validar rol requerido
        if (config.requiredRole && userRole !== config.requiredRole) {
            await (0, _securityaudit.logPermissionDenied)(userId, `Role validation failed: required ${config.requiredRole}, got ${userRole}`, request);
            return {
                success: false,
                error: `Rol requerido: ${config.requiredRole}`,
                code: 'INSUFFICIENT_ROLE',
                status: 403
            };
        }
        // Validar permisos requeridos
        if (config.requiredPermissions && config.requiredPermissions.length > 0) {
            const hasAllPermissions = config.requiredPermissions.every((permission)=>userPermissions.includes(permission));
            if (!hasAllPermissions) {
                await (0, _securityaudit.logPermissionDenied)(userId, `Permission validation failed: missing ${config.requiredPermissions.join(', ')}`, request);
                return {
                    success: false,
                    error: `Permisos insuficientes: ${config.requiredPermissions.join(', ')}`,
                    code: 'INSUFFICIENT_PERMISSIONS',
                    status: 403
                };
            }
        }
        // 7. OBTENER INFORMACIÓN ADICIONAL
        const ipAddress = getClientIP(request);
        const userAgent = getHeader(request, 'user-agent') || 'unknown';
        // 8. CREAR CONTEXTO ENTERPRISE
        const context = {
            userId,
            sessionId,
            email: userProfile?.email || userEmail,
            role: userRole,
            permissions: userPermissions,
            sessionValid: !!sessionId,
            sessionMetadata: userProfile?.metadata,
            securityLevel: config.securityLevel || 'medium',
            ipAddress,
            userAgent,
            supabase: _supabase.supabaseAdmin,
            validations: {
                jwtValid,
                csrfValid,
                rateLimitPassed: true,
                originValid: csrfValid
            }
        };
        // 9. LOG DE ÉXITO
        await (0, _securityaudit.logAuthSuccess)(userId, {
            ip_address: ipAddress,
            user_agent: userAgent,
            session_id: sessionId,
            security_level: config.securityLevel || 'medium',
            permissions: userPermissions,
            role: userRole
        }, request);
        const duration = Date.now() - startTime;
        console.log(`[ENTERPRISE_AUTH] Autenticación exitosa para ${userId} en ${duration}ms`);
        return {
            success: true,
            context
        };
    } catch (error) {
        console.error('[ENTERPRISE_AUTH] Error en autenticación enterprise:', error);
        await (0, _securityaudit.logAuthFailure)('unknown', `Enterprise auth error: ${error.message}`, request);
        return {
            success: false,
            error: 'Error interno de autenticación',
            code: 'INTERNAL_AUTH_ERROR',
            status: 500
        };
    }
}
// =====================================================
// FUNCIONES AUXILIARES
// =====================================================
/**
 * Obtiene la IP del cliente
 */ function getClientIP(request) {
    if ('ip' in request && request.ip) {
        return request.ip;
    }
    const forwarded = getHeader(request, 'x-forwarded-for');
    const realIP = getHeader(request, 'x-real-ip');
    const cfIP = getHeader(request, 'cf-connecting-ip');
    return forwarded?.split(',')[0] || realIP || cfIP || 'unknown';
}
/**
 * Obtiene un header de manera compatible
 */ function getHeader(request, headerName) {
    if ('headers' in request && typeof request.headers.get === 'function') {
        return request.headers.get(headerName);
    } else if ('headers' in request) {
        const header = request.headers[headerName];
        return Array.isArray(header) ? header[0] : header || null;
    }
    return null;
}
async function requireCriticalAuth(request) {
    return getEnterpriseAuthContext(request, {
        securityLevel: 'critical'
    });
}
async function requireHighAuth(request, requiredPermissions) {
    return getEnterpriseAuthContext(request, {
        securityLevel: 'high',
        requiredPermissions
    });
}
async function requireMediumAuth(request) {
    return getEnterpriseAuthContext(request, {
        securityLevel: 'medium'
    });
}
async function requireBasicAuth(request) {
    return getEnterpriseAuthContext(request, {
        securityLevel: 'low'
    });
}
async function requireAdminAuth(request, requiredPermissions = [
    'admin_access'
]) {
    return getEnterpriseAuthContext(request, {
        requiredRole: 'admin',
        requiredPermissions,
        securityLevel: 'critical',
        enableRateLimit: true,
        enableCSRFProtection: true,
        enableJWTValidation: true,
        rateLimitType: 'admin'
    });
}
async function requirePaymentAuth(request) {
    return getEnterpriseAuthContext(request, {
        securityLevel: 'critical',
        enableRateLimit: true,
        enableCSRFProtection: true,
        enableJWTValidation: true,
        rateLimitType: 'payments',
        requiredPermissions: [
            'payment_access'
        ]
    });
}
function withEnterpriseAuth(authFunction) {
    return function(handler) {
        return async (request, ...args)=>{
            try {
                const authResult = await authFunction(request);
                if (!authResult.success) {
                    const errorResponse = {
                        success: false,
                        error: authResult.error,
                        code: authResult.code,
                        timestamp: new Date().toISOString(),
                        enterprise: true
                    };
                    const headers = {
                        'Content-Type': 'application/json'
                    };
                    if (authResult.retryAfter) {
                        headers['Retry-After'] = authResult.retryAfter.toString();
                    }
                    if ('query' in request) {
                        // Pages Router
                        const res = args[0];
                        Object.entries(headers).forEach(([key, value])=>{
                            res.setHeader(key, value);
                        });
                        return res.status(authResult.status || 401).json(errorResponse);
                    } else {
                        // App Router
                        return new Response(JSON.stringify(errorResponse), {
                            status: authResult.status || 401,
                            headers
                        });
                    }
                }
                // Añadir contexto enterprise al request
                request.enterpriseAuth = authResult.context;
                return handler(request, ...args);
            } catch (error) {
                console.error('[ENTERPRISE_AUTH] Error en middleware:', error);
                const errorResponse = {
                    success: false,
                    error: 'Error interno de autenticación enterprise',
                    code: 'ENTERPRISE_AUTH_ERROR',
                    timestamp: new Date().toISOString()
                };
                if ('query' in request) {
                    // Pages Router
                    const res = args[0];
                    return res.status(500).json(errorResponse);
                } else {
                    // App Router
                    return new Response(JSON.stringify(errorResponse), {
                        status: 500,
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }
            }
        };
    };
}
const withCriticalAuth = ()=>withEnterpriseAuth(requireCriticalAuth);
const withHighAuth = (requiredPermissions)=>withEnterpriseAuth((req)=>requireHighAuth(req, requiredPermissions));
const withMediumAuth = ()=>withEnterpriseAuth(requireMediumAuth);
const withBasicAuth = ()=>withEnterpriseAuth(requireBasicAuth);
const withAdminAuth = (requiredPermissions)=>withEnterpriseAuth((req)=>requireAdminAuth(req, requiredPermissions));
const withPaymentAuth = ()=>withEnterpriseAuth(requirePaymentAuth);

//# sourceMappingURL=data:application/json;base64,