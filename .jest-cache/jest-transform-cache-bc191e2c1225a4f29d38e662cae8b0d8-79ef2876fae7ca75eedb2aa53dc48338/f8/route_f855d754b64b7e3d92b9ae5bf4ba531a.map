{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\reports\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO REPORTS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { getSupabaseClient } from '@/lib/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiter';\r\nimport { metricsCollector } from '@/lib/metrics';\r\nimport { MercadoPagoReport, ReportMetrics } from '@/types/api';\r\n\r\n/**\r\n * GET /api/payments/reports\r\n * Obtiene reportes de MercadoPago según documentación oficial\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.QUERY_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      logger.warn(LogCategory.API, 'Rate limit exceeded for reports', {\r\n        clientIP,\r\n        userId,\r\n      });\r\n\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n      return response;\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const reportType = url.searchParams.get('type') || 'account_money';\r\n    const dateFrom = url.searchParams.get('date_from');\r\n    const dateTo = url.searchParams.get('date_to');\r\n    const includeMetrics = url.searchParams.get('include_metrics') === 'true';\r\n\r\n    // Validar parámetros\r\n    if (!['released_money', 'account_money', 'sales_report'].includes(reportType)) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Tipo de reporte inválido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Reports request started', {\r\n      userId,\r\n      reportType,\r\n      dateFrom,\r\n      dateTo,\r\n      includeMetrics,\r\n      clientIP,\r\n    });\r\n\r\n    // Generar reporte\r\n    const reportData = await generateReport(reportType, dateFrom, dateTo, includeMetrics);\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'GET',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, reportType }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Reports request completed', {\r\n      userId,\r\n      reportType,\r\n      recordsCount: reportData.records?.length || 0,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: reportData,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Reports request failed', {\r\n      operation: 'reports-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'GET',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/payments/reports\r\n * Crea un nuevo reporte según documentación oficial de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.PAYMENT_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n      return response;\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { type, date_from, date_to, columns } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!type || !date_from || !date_to) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Faltan parámetros requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Report creation started', {\r\n      userId,\r\n      type,\r\n      date_from,\r\n      date_to,\r\n      clientIP,\r\n    });\r\n\r\n    // Crear reporte\r\n    const report = await createMercadoPagoReport(type, date_from, date_to, columns);\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'POST',\r\n      201,\r\n      Date.now() - startTime,\r\n      { userId, reportType: type }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Report creation completed', {\r\n      userId,\r\n      reportId: report.id,\r\n      type,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: report,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    }, { status: 201 });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Report creation failed', {\r\n      operation: 'report-creation-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'POST',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Genera reporte basado en datos de Supabase (simulando API de MercadoPago)\r\n */\r\nasync function generateReport(\r\n  type: string,\r\n  dateFrom?: string | null,\r\n  dateTo?: string | null,\r\n  includeMetrics: boolean = false\r\n) {\r\n  const supabase = getSupabaseClient();\r\n  if (!supabase) {\r\n    throw new Error('Error de configuración de base de datos');\r\n  }\r\n\r\n  // Configurar fechas por defecto (últimos 30 días)\r\n  const endDate = dateTo ? new Date(dateTo) : new Date();\r\n  const startDate = dateFrom ? new Date(dateFrom) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\r\n\r\n  let query = supabase\r\n    .from('orders')\r\n    .select(`\r\n      id,\r\n      total_amount,\r\n      status,\r\n      payment_status,\r\n      created_at,\r\n      updated_at,\r\n      order_items (\r\n        quantity,\r\n        unit_price,\r\n        products (\r\n          name,\r\n          category_id\r\n        )\r\n      )\r\n    `)\r\n    .gte('created_at', startDate.toISOString())\r\n    .lte('created_at', endDate.toISOString());\r\n\r\n  // Filtrar según tipo de reporte\r\n  switch (type) {\r\n    case 'released_money':\r\n      query = query.eq('payment_status', 'approved');\r\n      break;\r\n    case 'account_money':\r\n      // Incluir todos los estados\r\n      break;\r\n    case 'sales_report':\r\n      query = query.in('status', ['completed', 'processing']);\r\n      break;\r\n  }\r\n\r\n  const { data: orders, error } = await query;\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener datos: ${error.message}`);\r\n  }\r\n\r\n  // Procesar datos según tipo de reporte\r\n  const processedData = processReportData(orders || [], type);\r\n  \r\n  // Calcular métricas si se solicitan\r\n  const metrics = includeMetrics ? calculateReportMetrics(orders || []) : undefined;\r\n\r\n  return {\r\n    type,\r\n    date_from: startDate.toISOString(),\r\n    date_to: endDate.toISOString(),\r\n    records: processedData,\r\n    metrics,\r\n    total_records: processedData.length,\r\n    generated_at: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n/**\r\n * Procesa los datos según el tipo de reporte\r\n */\r\nfunction processReportData(orders: any[], type: string) {\r\n  return orders.map(order => {\r\n    const baseData = {\r\n      order_id: order.id,\r\n      amount: order.total_amount,\r\n      status: order.payment_status || order.status,\r\n      created_at: order.created_at,\r\n      updated_at: order.updated_at,\r\n    };\r\n\r\n    switch (type) {\r\n      case 'released_money':\r\n        return {\r\n          ...baseData,\r\n          release_date: order.updated_at,\r\n          net_amount: order.total_amount * 0.96, // Simular comisión MP\r\n          fee_amount: order.total_amount * 0.04,\r\n        };\r\n      \r\n      case 'account_money':\r\n        return {\r\n          ...baseData,\r\n          transaction_type: 'payment',\r\n          balance_impact: order.payment_status === 'approved' ? order.total_amount : 0,\r\n        };\r\n      \r\n      case 'sales_report':\r\n        return {\r\n          ...baseData,\r\n          items: order.order_items?.map((item: any) => ({\r\n            name: item.products?.name,\r\n            quantity: item.quantity,\r\n            unit_price: item.unit_price,\r\n            category: item.products?.category_id,\r\n          })) || [],\r\n          items_count: order.order_items?.length || 0,\r\n        };\r\n      \r\n      default:\r\n        return baseData;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Calcula métricas del reporte\r\n */\r\nfunction calculateReportMetrics(orders: any[]): ReportMetrics {\r\n  const totalTransactions = orders.length;\r\n  const successfulPayments = orders.filter(o => o.payment_status === 'approved').length;\r\n  const failedPayments = orders.filter(o => o.payment_status === 'rejected').length;\r\n  const totalAmount = orders.reduce((sum, o) => sum + (o.total_amount || 0), 0);\r\n  \r\n  return {\r\n    total_transactions: totalTransactions,\r\n    total_amount: totalAmount,\r\n    successful_payments: successfulPayments,\r\n    failed_payments: failedPayments,\r\n    refunds: 0, // TODO: Implementar cuando se agregue tabla de refunds\r\n    chargebacks: 0, // TODO: Implementar cuando se agregue tabla de chargebacks\r\n    average_ticket: totalTransactions > 0 ? totalAmount / totalTransactions : 0,\r\n    conversion_rate: totalTransactions > 0 ? (successfulPayments / totalTransactions) * 100 : 0,\r\n  };\r\n}\r\n\r\n/**\r\n * Crea un reporte en MercadoPago (simulado)\r\n */\r\nasync function createMercadoPagoReport(\r\n  type: string,\r\n  dateFrom: string,\r\n  dateTo: string,\r\n  columns?: string[]\r\n): Promise<MercadoPagoReport> {\r\n  // En una implementación real, aquí se haría la llamada a la API de MercadoPago\r\n  // Por ahora simulamos la creación del reporte\r\n  \r\n  const reportId = `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  \r\n  return {\r\n    id: reportId,\r\n    type: type as any,\r\n    date_from: dateFrom,\r\n    date_to: dateTo,\r\n    status: 'pending',\r\n    created_at: new Date().toISOString(),\r\n  };\r\n}\r\n"],"names":["GET","POST","request","startTime","Date","now","clientIP","headers","get","userAgent","userId","auth","NextResponse","json","success","error","status","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","QUERY_API","logger","warn","LogCategory","API","response","addRateLimitHeaders","url","URL","reportType","searchParams","dateFrom","dateTo","includeMetrics","includes","info","reportData","generateReport","metricsCollector","recordRequest","recordsCount","records","length","processingTime","data","timestamp","processing_time","performance","LogLevel","ERROR","operation","duration","statusCode","message","PAYMENT_API","body","type","date_from","date_to","columns","report","createMercadoPagoReport","reportId","id","supabase","getSupabaseClient","Error","endDate","startDate","query","from","select","gte","toISOString","lte","eq","in","orders","processedData","processReportData","metrics","calculateReportMetrics","undefined","total_records","generated_at","map","order","baseData","order_id","amount","total_amount","payment_status","created_at","updated_at","release_date","net_amount","fee_amount","transaction_type","balance_impact","items","order_items","item","name","products","quantity","unit_price","category","category_id","items_count","totalTransactions","successfulPayments","filter","o","failedPayments","totalAmount","reduce","sum","total_transactions","successful_payments","failed_payments","refunds","chargebacks","average_ticket","conversion_rate","Math","random","toString","substr"],"mappings":"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"}