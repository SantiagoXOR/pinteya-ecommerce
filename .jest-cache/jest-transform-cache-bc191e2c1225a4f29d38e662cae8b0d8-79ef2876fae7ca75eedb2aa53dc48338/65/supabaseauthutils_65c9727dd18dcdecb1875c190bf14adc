ead1acc4df7b538b61d084dcb6a9a6b8
/**
 * Utilidades de autenticaci√≥n usando Supabase Auth directamente
 * Reemplazo para enterprise-auth-utils.ts que evita conflictos con Clerk
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkPermission: function() {
        return checkPermission;
    },
    getSecurityMetrics: function() {
        return getSecurityMetrics;
    },
    logAdminAction: function() {
        return logAdminAction;
    },
    requireAdminAuth: function() {
        return requireAdminAuth;
    },
    validateInput: function() {
        return validateInput;
    },
    withAdminAuth: function() {
        return withAdminAuth;
    }
});
const _supabasejs = require("@supabase/supabase-js");
const _backend = require("@clerk/backend");
const _adminauth = require("./admin-auth");
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
// Cliente admin para operaciones del servidor
const supabaseAdmin = (0, _supabasejs.createClient)(supabaseUrl, supabaseServiceKey);
// Rate limiting simple en memoria (para producci√≥n usar Redis)
const rateLimitMap = new Map();
/**
 * Verificar rate limiting
 */ function checkRateLimit(identifier, maxRequests = 100, windowMs = 60000) {
    const now = Date.now();
    const key = identifier;
    const current = rateLimitMap.get(key);
    if (!current || now > current.resetTime) {
        rateLimitMap.set(key, {
            count: 1,
            resetTime: now + windowMs
        });
        return true;
    }
    if (current.count >= maxRequests) {
        return false;
    }
    current.count++;
    return true;
}
/**
 * Obtener usuario autenticado desde JWT token (Clerk o Supabase)
 */ async function getAuthenticatedUser(request) {
    try {
        // Obtener token del header Authorization
        const authHeader = request.headers.get('authorization');
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return {
                success: false,
                error: 'Token de autorizaci√≥n requerido',
                status: 401
            };
        }
        const token = authHeader.substring(7); // Remover "Bearer "
        // Intentar verificar con Clerk primero
        try {
            const clerkPayload = await (0, _backend.verifyToken)(token, {
                secretKey: process.env.CLERK_SECRET_KEY
            });
            if (clerkPayload && clerkPayload.sub) {
                // Token de Clerk v√°lido, buscar usuario en Supabase
                const supabase = (0, _supabasejs.createClient)(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY);
                const { data: profile, error: profileError } = await supabase.from('user_profiles').select(`
            id,
            email,
            supabase_user_id,
            user_roles (
              role_name
            )
          `).eq('clerk_user_id', clerkPayload.sub).single();
                if (profileError || !profile) {
                    console.error('‚ùå Error obteniendo perfil de usuario:', {
                        clerkUserId: clerkPayload.sub,
                        profileError: profileError?.message,
                        profile
                    });
                    return {
                        success: false,
                        error: 'Usuario no encontrado en el sistema',
                        status: 401
                    };
                }
                console.log('‚úÖ Usuario encontrado:', {
                    email: profile.email,
                    role: profile.user_roles?.role_name,
                    clerkId: clerkPayload.sub
                });
                // Crear objeto user compatible
                const user = {
                    id: profile.supabase_user_id,
                    email: profile.email,
                    clerk_id: clerkPayload.sub
                };
                const isAdmin = profile.user_roles?.role_name === 'admin';
                console.log('üîê Verificaci√≥n de admin:', {
                    isAdmin,
                    roleName: profile.user_roles?.role_name
                });
                return {
                    success: true,
                    user,
                    supabase,
                    isAdmin
                };
            }
        } catch (clerkError) {
            console.log('Token no es de Clerk, intentando con Supabase...');
        }
        // Si no es token de Clerk, intentar con Supabase
        const supabase = (0, _supabasejs.createClient)(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
        // Verificar el token JWT de Supabase
        const { data: { user }, error: authError } = await supabase.auth.getUser(token);
        if (authError || !user) {
            return {
                success: false,
                error: 'Token inv√°lido o expirado',
                status: 401
            };
        }
        // Obtener perfil y rol del usuario usando service role key
        const supabaseAdmin = (0, _supabasejs.createClient)(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY);
        const { data: profile, error: profileError } = await supabaseAdmin.from('user_profiles').select(`
        id,
        email,
        role_id,
        is_active,
        user_roles (
          role_name,
          permissions
        )
      `).eq('supabase_user_id', user.id).eq('is_active', true).single();
        if (profileError || !profile) {
            return {
                success: false,
                error: 'Perfil de usuario no encontrado',
                status: 403
            };
        }
        return {
            success: true,
            user: {
                id: user.id,
                email: profile.email,
                role: profile.user_roles?.role_name || 'customer',
                permissions: profile.user_roles?.permissions || {}
            },
            supabase: supabaseAdmin
        };
    } catch (error) {
        console.error('Error en autenticaci√≥n:', error);
        return {
            success: false,
            error: 'Error interno de autenticaci√≥n',
            status: 500
        };
    }
}
async function requireAdminAuth(request, permissions) {
    try {
        // Rate limiting
        const clientIP = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';
        if (!checkRateLimit(`admin_${clientIP}`, 50, 60000)) {
            return {
                success: false,
                error: 'Demasiadas solicitudes',
                status: 429
            };
        }
        // ‚úÖ CORREGIDO: Usar getAuthenticatedAdmin que tiene la verificaci√≥n de roles corregida
        const authResult = await (0, _adminauth.getAuthenticatedAdmin)(request);
        if (!authResult.userId || !authResult.isAdmin) {
            console.warn('‚ùå Acceso denegado en requireAdminAuth:', {
                userId: authResult.userId,
                isAdmin: authResult.isAdmin,
                error: authResult.error
            });
            return {
                success: false,
                error: authResult.error || 'Acceso denegado: se requiere rol de administrador',
                status: authResult.status || 403
            };
        }
        console.log('‚úÖ Acceso de admin autorizado via requireAdminAuth:', authResult.user?.email || authResult.userId);
        // Convertir resultado a formato AuthResult compatible
        return {
            success: true,
            user: authResult.user ? {
                id: authResult.user.id || authResult.userId,
                email: authResult.user.email || 'unknown',
                role: 'admin',
                permissions: {}
            } : {
                id: authResult.userId,
                email: 'unknown',
                role: 'admin',
                permissions: {}
            },
            supabase: authResult.supabase,
            isAdmin: true
        };
    } catch (error) {
        console.error('Error en requireAdminAuth:', error);
        return {
            success: false,
            error: 'Error interno del servidor',
            status: 500
        };
    }
}
async function checkPermission(request, resource, action) {
    try {
        const authResult = await requireAdminAuth(request);
        if (!authResult.success) {
            return authResult;
        }
        const permissions = authResult.user?.permissions;
        if (!permissions || !permissions[resource] || !permissions[resource][action]) {
            return {
                success: false,
                error: `Permiso denegado: ${resource}.${action}`,
                status: 403
            };
        }
        return authResult;
    } catch (error) {
        console.error('Error en checkPermission:', error);
        return {
            success: false,
            error: 'Error interno del servidor',
            status: 500
        };
    }
}
async function logAdminAction(userId, action, resource, resourceId, oldData, newData) {
    try {
        await supabaseAdmin.from('admin_audit_log').insert({
            user_id: userId,
            action,
            resource,
            resource_id: resourceId,
            old_data: oldData,
            new_data: newData,
            timestamp: new Date().toISOString(),
            ip_address: 'server',
            user_agent: 'admin-api'
        });
    } catch (error) {
        console.error('Error logging admin action:', error);
    }
}
function validateInput(data, allowedFields) {
    if (!data || typeof data !== 'object') {
        throw new Error('Datos inv√°lidos');
    }
    const sanitized = {};
    for (const field of allowedFields){
        if (data[field] !== undefined) {
            sanitized[field] = data[field];
        }
    }
    return sanitized;
}
function withAdminAuth(handler) {
    return async (request)=>{
        const authResult = await requireAdminAuth(request);
        if (!authResult.success) {
            return new Response(JSON.stringify({
                error: authResult.error,
                timestamp: new Date().toISOString()
            }), {
                status: authResult.status || 401,
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }
        return handler(request, authResult);
    };
}
async function getSecurityMetrics() {
    try {
        const now = Date.now();
        const oneHourAgo = now - 60 * 60 * 1000;
        // Contar solicitudes por IP en la √∫ltima hora
        const rateLimitStats = Array.from(rateLimitMap.entries()).filter(([_, data])=>data.resetTime > oneHourAgo).reduce((acc, [ip, data])=>{
            acc.totalRequests += data.count;
            acc.uniqueIPs++;
            return acc;
        }, {
            totalRequests: 0,
            uniqueIPs: 0
        });
        return {
            rateLimiting: rateLimitStats,
            timestamp: new Date().toISOString()
        };
    } catch (error) {
        console.error('Error obteniendo m√©tricas de seguridad:', error);
        return null;
    }
}

//# sourceMappingURL=data:application/json;base64,