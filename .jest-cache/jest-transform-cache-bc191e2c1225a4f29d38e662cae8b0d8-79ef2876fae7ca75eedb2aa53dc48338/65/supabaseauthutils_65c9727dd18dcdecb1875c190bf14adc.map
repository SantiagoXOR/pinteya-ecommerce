{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\supabase-auth-utils.ts"],"sourcesContent":["/**\n * Utilidades de autenticaci√≥n usando Supabase Auth directamente\n * Reemplazo para enterprise-auth-utils.ts que evita conflictos con Clerk\n */\n\nimport { NextRequest } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport { verifyToken } from '@clerk/backend';\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\n\n// Cliente admin para operaciones del servidor\nconst supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);\n\n// Tipos para autenticaci√≥n\nexport interface AuthResult {\n  success: boolean;\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n    permissions: Record<string, any>;\n  };\n  supabase?: any;\n  error?: string;\n  status?: number;\n}\n\n// Rate limiting simple en memoria (para producci√≥n usar Redis)\nconst rateLimitMap = new Map<string, { count: number; resetTime: number }>();\n\n/**\n * Verificar rate limiting\n */\nfunction checkRateLimit(identifier: string, maxRequests = 100, windowMs = 60000): boolean {\n  const now = Date.now();\n  const key = identifier;\n  \n  const current = rateLimitMap.get(key);\n  \n  if (!current || now > current.resetTime) {\n    rateLimitMap.set(key, { count: 1, resetTime: now + windowMs });\n    return true;\n  }\n  \n  if (current.count >= maxRequests) {\n    return false;\n  }\n  \n  current.count++;\n  return true;\n}\n\n/**\n * Obtener usuario autenticado desde JWT token (Clerk o Supabase)\n */\nasync function getAuthenticatedUser(request: NextRequest): Promise<AuthResult> {\n  try {\n    // Obtener token del header Authorization\n    const authHeader = request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return {\n        success: false,\n        error: 'Token de autorizaci√≥n requerido',\n        status: 401\n      };\n    }\n\n    const token = authHeader.substring(7); // Remover \"Bearer \"\n\n    // Intentar verificar con Clerk primero\n    try {\n      const clerkPayload = await verifyToken(token, {\n        secretKey: process.env.CLERK_SECRET_KEY!\n      });\n\n      if (clerkPayload && clerkPayload.sub) {\n        // Token de Clerk v√°lido, buscar usuario en Supabase\n        const supabase = createClient(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY!);\n\n        const { data: profile, error: profileError } = await supabase\n          .from('user_profiles')\n          .select(`\n            id,\n            email,\n            supabase_user_id,\n            user_roles (\n              role_name\n            )\n          `)\n          .eq('clerk_user_id', clerkPayload.sub)\n          .single();\n\n        if (profileError || !profile) {\n          console.error('‚ùå Error obteniendo perfil de usuario:', {\n            clerkUserId: clerkPayload.sub,\n            profileError: profileError?.message,\n            profile\n          });\n          return {\n            success: false,\n            error: 'Usuario no encontrado en el sistema',\n            status: 401\n          };\n        }\n\n        console.log('‚úÖ Usuario encontrado:', {\n          email: profile.email,\n          role: profile.user_roles?.role_name,\n          clerkId: clerkPayload.sub\n        });\n\n        // Crear objeto user compatible\n        const user = {\n          id: profile.supabase_user_id,\n          email: profile.email,\n          clerk_id: clerkPayload.sub\n        };\n\n        const isAdmin = profile.user_roles?.role_name === 'admin';\n\n        console.log('üîê Verificaci√≥n de admin:', {\n          isAdmin,\n          roleName: profile.user_roles?.role_name\n        });\n\n        return {\n          success: true,\n          user,\n          supabase,\n          isAdmin\n        };\n      }\n    } catch (clerkError) {\n      console.log('Token no es de Clerk, intentando con Supabase...');\n    }\n\n    // Si no es token de Clerk, intentar con Supabase\n    const supabase = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);\n\n    // Verificar el token JWT de Supabase\n    const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return {\n        success: false,\n        error: 'Token inv√°lido o expirado',\n        status: 401\n      };\n    }\n\n    // Obtener perfil y rol del usuario usando service role key\n    const supabaseAdmin = createClient(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY!);\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('user_profiles')\n      .select(`\n        id,\n        email,\n        role_id,\n        is_active,\n        user_roles (\n          role_name,\n          permissions\n        )\n      `)\n      .eq('supabase_user_id', user.id)\n      .eq('is_active', true)\n      .single();\n\n    if (profileError || !profile) {\n      return {\n        success: false,\n        error: 'Perfil de usuario no encontrado',\n        status: 403\n      };\n    }\n\n    return {\n      success: true,\n      user: {\n        id: user.id,\n        email: profile.email,\n        role: profile.user_roles?.role_name || 'customer',\n        permissions: profile.user_roles?.permissions || {}\n      },\n      supabase: supabaseAdmin\n    };\n\n  } catch (error) {\n    console.error('Error en autenticaci√≥n:', error);\n    return {\n      success: false,\n      error: 'Error interno de autenticaci√≥n',\n      status: 500\n    };\n  }\n}\n\n/**\n * Verificar si el usuario tiene rol de administrador\n */\nexport async function requireAdminAuth(request: NextRequest, permissions?: string[]): Promise<AuthResult> {\n  try {\n    // Rate limiting\n    const clientIP = request.headers.get('x-forwarded-for') ||\n                    request.headers.get('x-real-ip') ||\n                    'unknown';\n\n    if (!checkRateLimit(`admin_${clientIP}`, 50, 60000)) {\n      return {\n        success: false,\n        error: 'Demasiadas solicitudes',\n        status: 429\n      };\n    }\n\n    // ‚úÖ CORREGIDO: Usar getAuthenticatedAdmin que tiene la verificaci√≥n de roles corregida\n    const authResult = await getAuthenticatedAdmin(request);\n\n    if (!authResult.userId || !authResult.isAdmin) {\n      console.warn('‚ùå Acceso denegado en requireAdminAuth:', {\n        userId: authResult.userId,\n        isAdmin: authResult.isAdmin,\n        error: authResult.error\n      });\n\n      return {\n        success: false,\n        error: authResult.error || 'Acceso denegado: se requiere rol de administrador',\n        status: authResult.status || 403\n      };\n    }\n\n    console.log('‚úÖ Acceso de admin autorizado via requireAdminAuth:', authResult.user?.email || authResult.userId);\n\n    // Convertir resultado a formato AuthResult compatible\n    return {\n      success: true,\n      user: authResult.user ? {\n        id: authResult.user.id || authResult.userId,\n        email: authResult.user.email || 'unknown',\n        role: 'admin',\n        permissions: {}\n      } : {\n        id: authResult.userId,\n        email: 'unknown',\n        role: 'admin',\n        permissions: {}\n      },\n      supabase: authResult.supabase,\n      isAdmin: true\n    };\n\n  } catch (error) {\n    console.error('Error en requireAdminAuth:', error);\n    return {\n      success: false,\n      error: 'Error interno del servidor',\n      status: 500\n    };\n  }\n}\n\n/**\n * Verificar permisos espec√≠ficos\n */\nexport async function checkPermission(\n  request: NextRequest, \n  resource: string, \n  action: string\n): Promise<AuthResult> {\n  try {\n    const authResult = await requireAdminAuth(request);\n    \n    if (!authResult.success) {\n      return authResult;\n    }\n\n    const permissions = authResult.user?.permissions;\n    \n    if (!permissions || !permissions[resource] || !permissions[resource][action]) {\n      return {\n        success: false,\n        error: `Permiso denegado: ${resource}.${action}`,\n        status: 403\n      };\n    }\n\n    return authResult;\n\n  } catch (error) {\n    console.error('Error en checkPermission:', error);\n    return {\n      success: false,\n      error: 'Error interno del servidor',\n      status: 500\n    };\n  }\n}\n\n/**\n * Logging de acciones administrativas\n */\nexport async function logAdminAction(\n  userId: string,\n  action: string,\n  resource: string,\n  resourceId?: string,\n  oldData?: any,\n  newData?: any\n): Promise<void> {\n  try {\n    await supabaseAdmin\n      .from('admin_audit_log')\n      .insert({\n        user_id: userId,\n        action,\n        resource,\n        resource_id: resourceId,\n        old_data: oldData,\n        new_data: newData,\n        timestamp: new Date().toISOString(),\n        ip_address: 'server',\n        user_agent: 'admin-api'\n      });\n  } catch (error) {\n    console.error('Error logging admin action:', error);\n  }\n}\n\n/**\n * Validar y sanitizar input\n */\nexport function validateInput(data: any, allowedFields: string[]): any {\n  if (!data || typeof data !== 'object') {\n    throw new Error('Datos inv√°lidos');\n  }\n\n  const sanitized: any = {};\n  \n  for (const field of allowedFields) {\n    if (data[field] !== undefined) {\n      sanitized[field] = data[field];\n    }\n  }\n\n  return sanitized;\n}\n\n/**\n * Middleware wrapper para APIs admin\n */\nexport function withAdminAuth(handler: (request: NextRequest, authResult: AuthResult) => Promise<Response>) {\n  return async (request: NextRequest) => {\n    const authResult = await requireAdminAuth(request);\n    \n    if (!authResult.success) {\n      return new Response(\n        JSON.stringify({\n          error: authResult.error,\n          timestamp: new Date().toISOString()\n        }),\n        {\n          status: authResult.status || 401,\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    return handler(request, authResult);\n  };\n}\n\n/**\n * Obtener m√©tricas de seguridad\n */\nexport async function getSecurityMetrics(): Promise<any> {\n  try {\n    const now = Date.now();\n    const oneHourAgo = now - (60 * 60 * 1000);\n    \n    // Contar solicitudes por IP en la √∫ltima hora\n    const rateLimitStats = Array.from(rateLimitMap.entries())\n      .filter(([_, data]) => data.resetTime > oneHourAgo)\n      .reduce((acc, [ip, data]) => {\n        acc.totalRequests += data.count;\n        acc.uniqueIPs++;\n        return acc;\n      }, { totalRequests: 0, uniqueIPs: 0 });\n\n    return {\n      rateLimiting: rateLimitStats,\n      timestamp: new Date().toISOString()\n    };\n\n  } catch (error) {\n    console.error('Error obteniendo m√©tricas de seguridad:', error);\n    return null;\n  }\n}\n"],"names":["checkPermission","getSecurityMetrics","logAdminAction","requireAdminAuth","validateInput","withAdminAuth","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","supabaseAdmin","createClient","rateLimitMap","Map","checkRateLimit","identifier","maxRequests","windowMs","now","Date","key","current","get","resetTime","set","count","getAuthenticatedUser","request","authHeader","headers","startsWith","success","error","status","token","substring","clerkPayload","verifyToken","secretKey","CLERK_SECRET_KEY","sub","supabase","data","profile","profileError","from","select","eq","single","console","clerkUserId","message","log","email","role","user_roles","role_name","clerkId","user","id","supabase_user_id","clerk_id","isAdmin","roleName","clerkError","NEXT_PUBLIC_SUPABASE_ANON_KEY","authError","auth","getUser","permissions","clientIP","authResult","getAuthenticatedAdmin","userId","warn","resource","action","resourceId","oldData","newData","insert","user_id","resource_id","old_data","new_data","timestamp","toISOString","ip_address","user_agent","allowedFields","Error","sanitized","field","undefined","handler","Response","JSON","stringify","oneHourAgo","rateLimitStats","Array","entries","filter","_","reduce","acc","ip","totalRequests","uniqueIPs","rateLimiting"],"mappings":"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"}