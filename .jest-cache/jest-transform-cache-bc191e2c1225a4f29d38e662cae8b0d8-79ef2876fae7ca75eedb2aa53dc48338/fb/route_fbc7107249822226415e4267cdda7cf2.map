{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\debug\\check-admin-access\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { checkAdminAccess, getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\nimport {\n  requireAdminAuth,\n  getEnterpriseAuthContext\n} from '@/lib/auth/enterprise-auth-utils';\nimport {\n  validateRLSContext\n} from '@/lib/auth/enterprise-rls-utils';\nimport {\n  getCacheStats\n} from '@/lib/auth/enterprise-cache';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // ENTERPRISE: Usar nueva autenticaci√≥n enterprise para comparaci√≥n\n    const enterpriseResult = await requireAdminAuth(request, ['admin_access']);\n\n    // LEGACY: Mantener m√©todo anterior para comparaci√≥n\n    const adminResult = await getAuthenticatedAdmin(request);\n\n    if (!adminResult.userId && !enterpriseResult.success) {\n      return NextResponse.json({\n        success: false,\n        error: 'Usuario no autenticado en ning√∫n m√©todo',\n        enterprise: {\n          error: enterpriseResult.error,\n          code: enterpriseResult.code\n        },\n        legacy: {\n          error: adminResult.error\n        },\n        migration: {\n          status: 'ENTERPRISE_MIGRATED',\n          comparison: 'Both methods failed - user not authenticated'\n        }\n      }, { status: 401 });\n    }\n\n    // ENTERPRISE: Obtener contexto completo y validaci√≥n RLS\n    let enterpriseContext = null;\n    let rlsValidation = null;\n\n    if (enterpriseResult.success) {\n      enterpriseContext = enterpriseResult.context;\n      rlsValidation = await validateRLSContext(enterpriseContext!);\n    }\n\n    // LEGACY: Comparar con m√©todo legacy para verificar migraci√≥n\n    const clerkUserId = adminResult.userId || (enterpriseResult.success ? enterpriseResult.context!.userId : null);\n\n    console.log('üîç Debug Enterprise vs Legacy: Testing with user:', clerkUserId);\n\n    const legacyResult = clerkUserId ? await checkAdminAccess(clerkUserId) : { success: false, error: 'No user ID' };\n\n    // ENTERPRISE: Obtener estad√≠sticas de cache\n    const cacheStats = getCacheStats();\n\n    return NextResponse.json({\n      success: enterpriseResult.success || adminResult.isAdmin,\n      enterprise: {\n        status: enterpriseResult.success ? 'SUCCESS' : 'FAILED',\n        context: enterpriseResult.success ? {\n          userId: enterpriseContext?.userId,\n          role: enterpriseContext?.role,\n          permissions: enterpriseContext?.permissions,\n          securityLevel: enterpriseContext?.securityLevel,\n          validations: enterpriseContext?.validations\n        } : null,\n        rls: rlsValidation ? {\n          valid: rlsValidation.valid,\n          error: rlsValidation.error\n        } : null,\n        cache: cacheStats,\n        error: enterpriseResult.error,\n        code: enterpriseResult.code\n      },\n      legacy: {\n        status: adminResult.isAdmin ? 'SUCCESS' : 'FAILED',\n        userId: adminResult.userId,\n        sessionId: adminResult.sessionId,\n        isAdmin: adminResult.isAdmin,\n        error: adminResult.error,\n        checkAdminAccess: {\n          success: legacyResult.success,\n          error: legacyResult.error\n        }\n      },\n      migration: {\n        status: 'ENTERPRISE_COMPLETED',\n        comparison: {\n          enterprise_success: enterpriseResult.success,\n          legacy_success: adminResult.isAdmin,\n          methods_agree: enterpriseResult.success === adminResult.isAdmin,\n          recommended: 'enterprise'\n        },\n        improvements: [\n          '‚úÖ ENTERPRISE: Autenticaci√≥n con m√∫ltiples validaciones de seguridad',\n          '‚úÖ ENTERPRISE: Row Level Security (RLS) integrado',\n          '‚úÖ ENTERPRISE: Cache inteligente con estad√≠sticas',\n          '‚úÖ ENTERPRISE: Contexto completo de seguridad',\n          '‚úÖ ENTERPRISE: Permisos granulares',\n          '‚ö†Ô∏è LEGACY: M√©todo anterior a√∫n funcional para compatibilidad'\n        ]\n      },\n      debug: {\n        clerkUserId,\n        timestamp: new Date().toISOString(),\n        request_info: {\n          method: request.method,\n          url: request.url,\n          user_agent: request.headers.get('user-agent')?.substring(0, 100)\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('üîç Debug checkAdminAccess: Error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Unexpected error',\n      debug: {\n        errorMessage: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }, { status: 500 });\n  }\n}\n"],"names":["GET","request","enterpriseResult","requireAdminAuth","adminResult","getAuthenticatedAdmin","userId","success","NextResponse","json","error","enterprise","code","legacy","migration","status","comparison","enterpriseContext","rlsValidation","context","validateRLSContext","clerkUserId","console","log","legacyResult","checkAdminAccess","cacheStats","getCacheStats","isAdmin","role","permissions","securityLevel","validations","rls","valid","cache","sessionId","enterprise_success","legacy_success","methods_agree","recommended","improvements","debug","timestamp","Date","toISOString","request_info","method","url","user_agent","headers","get","substring","errorMessage","Error","message"],"mappings":"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"}