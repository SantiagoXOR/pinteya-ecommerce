6ded5ec536b0b2ffe8438f3289b5971e
/**
 * Setup específico para autenticación en tests
 * Resuelve problemas de importación de NextAuth y Google Provider
 */ // Mock NextAuth antes de cualquier importación
"use strict";
jest.mock('next-auth', ()=>{
    const mockAuth = jest.fn(()=>Promise.resolve(null));
    const mockSignIn = jest.fn();
    const mockSignOut = jest.fn();
    const mockHandlers = {
        GET: jest.fn(),
        POST: jest.fn()
    };
    const mockNextAuth = jest.fn(()=>({
            handlers: mockHandlers,
            auth: mockAuth,
            signIn: mockSignIn,
            signOut: mockSignOut
        }));
    return {
        __esModule: true,
        default: mockNextAuth,
        auth: mockAuth,
        signIn: mockSignIn,
        signOut: mockSignOut,
        handlers: mockHandlers
    };
});
// Mock Google Provider antes de cualquier importación
jest.mock('next-auth/providers/google', ()=>{
    const mockGoogleProvider = jest.fn((config)=>({
            id: 'google',
            name: 'Google',
            type: 'oauth',
            clientId: config?.clientId || 'mock-google-client-id',
            clientSecret: config?.clientSecret || 'mock-google-client-secret',
            authorization: {
                url: 'https://accounts.google.com/oauth/authorize',
                params: {
                    scope: 'openid email profile',
                    response_type: 'code'
                }
            },
            token: 'https://oauth2.googleapis.com/token',
            userinfo: 'https://www.googleapis.com/oauth2/v2/userinfo',
            profile: jest.fn((profile)=>({
                    id: profile.id,
                    name: profile.name,
                    email: profile.email,
                    image: profile.picture
                }))
        }));
    return {
        __esModule: true,
        default: mockGoogleProvider
    };
});
// Mock del archivo auth.ts completo
jest.mock('@/auth', ()=>{
    const mockAuth = jest.fn(()=>Promise.resolve(null));
    const mockSignIn = jest.fn();
    const mockSignOut = jest.fn();
    const mockHandlers = {
        GET: jest.fn(),
        POST: jest.fn()
    };
    return {
        __esModule: true,
        auth: mockAuth,
        signIn: mockSignIn,
        signOut: mockSignOut,
        handlers: mockHandlers,
        default: {
            auth: mockAuth,
            signIn: mockSignIn,
            signOut: mockSignOut,
            handlers: mockHandlers
        }
    };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXF9fdGVzdHNfX1xcc2V0dXBcXGF1dGgtc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZXR1cCBlc3BlY8OtZmljbyBwYXJhIGF1dGVudGljYWNpw7NuIGVuIHRlc3RzXG4gKiBSZXN1ZWx2ZSBwcm9ibGVtYXMgZGUgaW1wb3J0YWNpw7NuIGRlIE5leHRBdXRoIHkgR29vZ2xlIFByb3ZpZGVyXG4gKi9cblxuLy8gTW9jayBOZXh0QXV0aCBhbnRlcyBkZSBjdWFscXVpZXIgaW1wb3J0YWNpw7NuXG5qZXN0Lm1vY2soJ25leHQtYXV0aCcsICgpID0+IHtcbiAgY29uc3QgbW9ja0F1dGggPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSk7XG4gIGNvbnN0IG1vY2tTaWduSW4gPSBqZXN0LmZuKCk7XG4gIGNvbnN0IG1vY2tTaWduT3V0ID0gamVzdC5mbigpO1xuICBjb25zdCBtb2NrSGFuZGxlcnMgPSB7XG4gICAgR0VUOiBqZXN0LmZuKCksXG4gICAgUE9TVDogamVzdC5mbigpLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tOZXh0QXV0aCA9IGplc3QuZm4oKCkgPT4gKHtcbiAgICBoYW5kbGVyczogbW9ja0hhbmRsZXJzLFxuICAgIGF1dGg6IG1vY2tBdXRoLFxuICAgIHNpZ25JbjogbW9ja1NpZ25JbixcbiAgICBzaWduT3V0OiBtb2NrU2lnbk91dCxcbiAgfSkpO1xuXG4gIHJldHVybiB7XG4gICAgX19lc01vZHVsZTogdHJ1ZSxcbiAgICBkZWZhdWx0OiBtb2NrTmV4dEF1dGgsXG4gICAgYXV0aDogbW9ja0F1dGgsXG4gICAgc2lnbkluOiBtb2NrU2lnbkluLFxuICAgIHNpZ25PdXQ6IG1vY2tTaWduT3V0LFxuICAgIGhhbmRsZXJzOiBtb2NrSGFuZGxlcnMsXG4gIH07XG59KTtcblxuLy8gTW9jayBHb29nbGUgUHJvdmlkZXIgYW50ZXMgZGUgY3VhbHF1aWVyIGltcG9ydGFjacOzblxuamVzdC5tb2NrKCduZXh0LWF1dGgvcHJvdmlkZXJzL2dvb2dsZScsICgpID0+IHtcbiAgY29uc3QgbW9ja0dvb2dsZVByb3ZpZGVyID0gamVzdC5mbigoY29uZmlnKSA9PiAoe1xuICAgIGlkOiAnZ29vZ2xlJyxcbiAgICBuYW1lOiAnR29vZ2xlJyxcbiAgICB0eXBlOiAnb2F1dGgnLFxuICAgIGNsaWVudElkOiBjb25maWc/LmNsaWVudElkIHx8ICdtb2NrLWdvb2dsZS1jbGllbnQtaWQnLFxuICAgIGNsaWVudFNlY3JldDogY29uZmlnPy5jbGllbnRTZWNyZXQgfHwgJ21vY2stZ29vZ2xlLWNsaWVudC1zZWNyZXQnLFxuICAgIGF1dGhvcml6YXRpb246IHtcbiAgICAgIHVybDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vYXV0aC9hdXRob3JpemUnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHNjb3BlOiAnb3BlbmlkIGVtYWlsIHByb2ZpbGUnLFxuICAgICAgICByZXNwb25zZV90eXBlOiAnY29kZScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdG9rZW46ICdodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbicsXG4gICAgdXNlcmluZm86ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjIvdXNlcmluZm8nLFxuICAgIHByb2ZpbGU6IGplc3QuZm4oKHByb2ZpbGUpID0+ICh7XG4gICAgICBpZDogcHJvZmlsZS5pZCxcbiAgICAgIG5hbWU6IHByb2ZpbGUubmFtZSxcbiAgICAgIGVtYWlsOiBwcm9maWxlLmVtYWlsLFxuICAgICAgaW1hZ2U6IHByb2ZpbGUucGljdHVyZSxcbiAgICB9KSksXG4gIH0pKTtcblxuICByZXR1cm4ge1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgZGVmYXVsdDogbW9ja0dvb2dsZVByb3ZpZGVyLFxuICB9O1xufSk7XG5cbi8vIE1vY2sgZGVsIGFyY2hpdm8gYXV0aC50cyBjb21wbGV0b1xuamVzdC5tb2NrKCdAL2F1dGgnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tBdXRoID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobnVsbCkpO1xuICBjb25zdCBtb2NrU2lnbkluID0gamVzdC5mbigpO1xuICBjb25zdCBtb2NrU2lnbk91dCA9IGplc3QuZm4oKTtcbiAgY29uc3QgbW9ja0hhbmRsZXJzID0ge1xuICAgIEdFVDogamVzdC5mbigpLFxuICAgIFBPU1Q6IGplc3QuZm4oKSxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgYXV0aDogbW9ja0F1dGgsXG4gICAgc2lnbkluOiBtb2NrU2lnbkluLFxuICAgIHNpZ25PdXQ6IG1vY2tTaWduT3V0LFxuICAgIGhhbmRsZXJzOiBtb2NrSGFuZGxlcnMsXG4gICAgZGVmYXVsdDoge1xuICAgICAgYXV0aDogbW9ja0F1dGgsXG4gICAgICBzaWduSW46IG1vY2tTaWduSW4sXG4gICAgICBzaWduT3V0OiBtb2NrU2lnbk91dCxcbiAgICAgIGhhbmRsZXJzOiBtb2NrSGFuZGxlcnMsXG4gICAgfSxcbiAgfTtcbn0pO1xuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwibW9ja0F1dGgiLCJmbiIsIlByb21pc2UiLCJyZXNvbHZlIiwibW9ja1NpZ25JbiIsIm1vY2tTaWduT3V0IiwibW9ja0hhbmRsZXJzIiwiR0VUIiwiUE9TVCIsIm1vY2tOZXh0QXV0aCIsImhhbmRsZXJzIiwiYXV0aCIsInNpZ25JbiIsInNpZ25PdXQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm1vY2tHb29nbGVQcm92aWRlciIsImNvbmZpZyIsImlkIiwibmFtZSIsInR5cGUiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsImF1dGhvcml6YXRpb24iLCJ1cmwiLCJwYXJhbXMiLCJzY29wZSIsInJlc3BvbnNlX3R5cGUiLCJ0b2tlbiIsInVzZXJpbmZvIiwicHJvZmlsZSIsImVtYWlsIiwiaW1hZ2UiLCJwaWN0dXJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0MsR0FFRCwrQ0FBK0M7O0FBQy9DQSxLQUFLQyxJQUFJLENBQUMsYUFBYTtJQUNyQixNQUFNQyxXQUFXRixLQUFLRyxFQUFFLENBQUMsSUFBTUMsUUFBUUMsT0FBTyxDQUFDO0lBQy9DLE1BQU1DLGFBQWFOLEtBQUtHLEVBQUU7SUFDMUIsTUFBTUksY0FBY1AsS0FBS0csRUFBRTtJQUMzQixNQUFNSyxlQUFlO1FBQ25CQyxLQUFLVCxLQUFLRyxFQUFFO1FBQ1pPLE1BQU1WLEtBQUtHLEVBQUU7SUFDZjtJQUVBLE1BQU1RLGVBQWVYLEtBQUtHLEVBQUUsQ0FBQyxJQUFPLENBQUE7WUFDbENTLFVBQVVKO1lBQ1ZLLE1BQU1YO1lBQ05ZLFFBQVFSO1lBQ1JTLFNBQVNSO1FBQ1gsQ0FBQTtJQUVBLE9BQU87UUFDTFMsWUFBWTtRQUNaQyxTQUFTTjtRQUNURSxNQUFNWDtRQUNOWSxRQUFRUjtRQUNSUyxTQUFTUjtRQUNUSyxVQUFVSjtJQUNaO0FBQ0Y7QUFFQSxzREFBc0Q7QUFDdERSLEtBQUtDLElBQUksQ0FBQyw4QkFBOEI7SUFDdEMsTUFBTWlCLHFCQUFxQmxCLEtBQUtHLEVBQUUsQ0FBQyxDQUFDZ0IsU0FBWSxDQUFBO1lBQzlDQyxJQUFJO1lBQ0pDLE1BQU07WUFDTkMsTUFBTTtZQUNOQyxVQUFVSixRQUFRSSxZQUFZO1lBQzlCQyxjQUFjTCxRQUFRSyxnQkFBZ0I7WUFDdENDLGVBQWU7Z0JBQ2JDLEtBQUs7Z0JBQ0xDLFFBQVE7b0JBQ05DLE9BQU87b0JBQ1BDLGVBQWU7Z0JBQ2pCO1lBQ0Y7WUFDQUMsT0FBTztZQUNQQyxVQUFVO1lBQ1ZDLFNBQVNoQyxLQUFLRyxFQUFFLENBQUMsQ0FBQzZCLFVBQWEsQ0FBQTtvQkFDN0JaLElBQUlZLFFBQVFaLEVBQUU7b0JBQ2RDLE1BQU1XLFFBQVFYLElBQUk7b0JBQ2xCWSxPQUFPRCxRQUFRQyxLQUFLO29CQUNwQkMsT0FBT0YsUUFBUUcsT0FBTztnQkFDeEIsQ0FBQTtRQUNGLENBQUE7SUFFQSxPQUFPO1FBQ0xuQixZQUFZO1FBQ1pDLFNBQVNDO0lBQ1g7QUFDRjtBQUVBLG9DQUFvQztBQUNwQ2xCLEtBQUtDLElBQUksQ0FBQyxVQUFVO0lBQ2xCLE1BQU1DLFdBQVdGLEtBQUtHLEVBQUUsQ0FBQyxJQUFNQyxRQUFRQyxPQUFPLENBQUM7SUFDL0MsTUFBTUMsYUFBYU4sS0FBS0csRUFBRTtJQUMxQixNQUFNSSxjQUFjUCxLQUFLRyxFQUFFO0lBQzNCLE1BQU1LLGVBQWU7UUFDbkJDLEtBQUtULEtBQUtHLEVBQUU7UUFDWk8sTUFBTVYsS0FBS0csRUFBRTtJQUNmO0lBRUEsT0FBTztRQUNMYSxZQUFZO1FBQ1pILE1BQU1YO1FBQ05ZLFFBQVFSO1FBQ1JTLFNBQVNSO1FBQ1RLLFVBQVVKO1FBQ1ZTLFNBQVM7WUFDUEosTUFBTVg7WUFDTlksUUFBUVI7WUFDUlMsU0FBU1I7WUFDVEssVUFBVUo7UUFDWjtJQUNGO0FBQ0YifQ==