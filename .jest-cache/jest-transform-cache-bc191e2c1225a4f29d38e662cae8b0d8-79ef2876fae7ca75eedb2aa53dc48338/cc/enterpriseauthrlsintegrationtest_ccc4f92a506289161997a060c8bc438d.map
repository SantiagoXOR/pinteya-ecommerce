{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\integration\\enterprise-auth-rls-integration.test.ts"],"sourcesContent":["/**\r\n * Tests de Integración Enterprise Auth + RLS\r\n * Valida la integración completa entre utilidades enterprise, RLS y APIs\r\n */\r\n\r\n// NextAuth se mockea automáticamente\r\njest.mock('@/auth', () => ({ auth: jest.fn() }));\r\n\r\n// Mock de Supabase\r\njest.mock('@/lib/supabase', () => ({\r\n  supabaseAdmin: {\r\n    auth: {\r\n      admin: {\r\n        listUsers: jest.fn(),\r\n        createUser: jest.fn()\r\n      }\r\n    },\r\n    from: jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          single: jest.fn(),\r\n          range: jest.fn(() => ({\r\n            order: jest.fn(() => ({\r\n              then: jest.fn()\r\n            }))\r\n          }))\r\n        })),\r\n        or: jest.fn(() => ({\r\n          eq: jest.fn(() => ({\r\n            range: jest.fn(() => ({\r\n              order: jest.fn()\r\n            }))\r\n          }))\r\n        }))\r\n      })),\r\n      insert: jest.fn(() => ({\r\n        select: jest.fn(() => ({\r\n          single: jest.fn()\r\n        }))\r\n      })),\r\n      update: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          select: jest.fn(() => ({\r\n            single: jest.fn()\r\n          }))\r\n        }))\r\n      }))\r\n    }))\r\n  }\r\n}));\r\n\r\n// Mock de createClient de Supabase\r\njest.mock('@supabase/supabase-js', () => ({\r\n  createClient: jest.fn(() => ({\r\n    from: jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          single: jest.fn()\r\n        }))\r\n      }))\r\n    }))\r\n  }))\r\n}));\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Importar utilidades enterprise\r\nimport {\r\n  getEnterpriseAuthContext,\r\n  requireAdminAuth,\r\n  requireCriticalAuth\r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  validateRLSContext,\r\n  executeWithRLS,\r\n  createRLSFilters\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  searchEnterpriseUsers,\r\n  getEnterpriseUser\r\n} from '@/lib/auth/enterprise-user-management';\r\nimport {\r\n  withCache,\r\n  getCacheStats\r\n} from '@/lib/auth/enterprise-cache';\r\n\r\ndescribe('Integración Enterprise Auth + RLS', () => {\r\n  let mockAuth: jest.MockedFunction<typeof auth>;\r\n\r\n  beforeEach(() => {\r\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\r\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\r\n    \r\n    jest.clearAllMocks();\r\n\r\n    // Setup environment variables\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';\r\n\r\n    // Mock NextAuth auth responses\r\n    mockAuth.mockReturnValue({\r\n      userId: 'user_123',\r\n      sessionId: 'sess_123'\r\n    });\r\n\r\n    mockAuth.mockResolvedValue({\r\n      userId: 'user_123',\r\n      sessionId: 'sess_123'\r\n    });\r\n\r\n    // Mock Supabase responses\r\n    (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n      select: jest.fn().mockReturnValue({\r\n        eq: jest.fn().mockReturnValue({\r\n          single: jest.fn().mockResolvedValue({\r\n            data: {\r\n              id: 'profile_123',\r\n              supabase_user_id: 'supabase_123',\r\n              clerk_user_id: 'user_123',\r\n              email: 'admin@test.com',\r\n              role_id: 1,\r\n              permissions: ['admin_access', 'user_management', 'products_read'],\r\n              is_active: true,\r\n              user_roles: { role_name: 'admin' }\r\n            },\r\n            error: null\r\n          })\r\n        })\r\n      })\r\n    });\r\n  });\r\n\r\n  describe('Flujo Completo de Autenticación Enterprise', () => {\r\n    it('debe completar flujo enterprise completo: Auth → RLS → Cache → API', async () => {\r\n      const mockRequest = {\r\n        query: {},\r\n        headers: {},\r\n        url: 'http://localhost:3000/api/test',\r\n        method: 'GET'\r\n      } as any;\r\n\r\n      // 1. PASO: Autenticación Enterprise\r\n      const authResult = await getEnterpriseAuthContext(mockRequest, {\r\n        securityLevel: 'critical',\r\n        enableJWTValidation: false, // Simplificar para test\r\n        enableCSRFProtection: false,\r\n        enableRateLimit: false\r\n      });\r\n\r\n      expect(authResult.success).toBe(true);\r\n      expect(authResult.context).toBeDefined();\r\n      expect(authResult.context?.userId).toBe('user_123');\r\n      expect(authResult.context?.role).toBe('admin');\r\n\r\n      // 2. PASO: Validación RLS\r\n      const rlsValidation = await validateRLSContext(authResult.context!);\r\n      \r\n      expect(rlsValidation.valid).toBe(true);\r\n      expect(rlsValidation.context?.role).toBe('admin');\r\n      expect(rlsValidation.context?.permissions).toContain('admin_access');\r\n\r\n      // 3. PASO: Filtros RLS\r\n      const rlsFilters = createRLSFilters(rlsValidation.context!, 'products');\r\n      \r\n      // Admin no debe tener filtros restrictivos\r\n      expect(rlsFilters).toEqual({});\r\n\r\n      // 4. PASO: Cache Enterprise\r\n      const cacheStats = getCacheStats();\r\n      \r\n      expect(cacheStats).toBeDefined();\r\n      expect(typeof cacheStats.hits).toBe('number');\r\n      expect(typeof cacheStats.misses).toBe('number');\r\n\r\n      // 5. PASO: Integración completa\r\n      expect(authResult.success && rlsValidation.valid).toBe(true);\r\n    });\r\n\r\n    it('debe manejar usuario normal con filtros RLS restrictivos', async () => {\r\n      // Mock usuario normal\r\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          eq: jest.fn().mockReturnValue({\r\n            single: jest.fn().mockResolvedValue({\r\n              data: {\r\n                id: 'profile_456',\r\n                clerk_user_id: 'user_456',\r\n                email: 'user@test.com',\r\n                role_id: 2,\r\n                permissions: ['basic_access'],\r\n                is_active: true,\r\n                user_roles: { role_name: 'user' }\r\n              },\r\n              error: null\r\n            })\r\n          })\r\n        })\r\n      });\r\n\r\n      mockAuth.mockReturnValue({\r\n        userId: 'user_456',\r\n        sessionId: 'sess_456'\r\n      });\r\n\r\n      const mockRequest = {\r\n        query: {},\r\n        headers: {}\r\n      } as any;\r\n\r\n      // 1. Autenticación\r\n      const authResult = await getEnterpriseAuthContext(mockRequest, {\r\n        securityLevel: 'medium',\r\n        enableJWTValidation: false,\r\n        enableCSRFProtection: false,\r\n        enableRateLimit: false\r\n      });\r\n\r\n      expect(authResult.success).toBe(true);\r\n      expect(authResult.context?.role).toBe('user');\r\n\r\n      // 2. RLS para usuario normal\r\n      const rlsValidation = await validateRLSContext(authResult.context!);\r\n      expect(rlsValidation.valid).toBe(true);\r\n\r\n      // 3. Filtros RLS restrictivos para usuario normal\r\n      const productFilters = createRLSFilters(rlsValidation.context!, 'products');\r\n      const userProfileFilters = createRLSFilters(rlsValidation.context!, 'user_profiles');\r\n      const orderFilters = createRLSFilters(rlsValidation.context!, 'orders');\r\n\r\n      // Usuario normal debe tener filtros restrictivos\r\n      expect(productFilters).toEqual({ is_active: true });\r\n      expect(userProfileFilters).toEqual({ clerk_user_id: 'user_456' });\r\n      expect(orderFilters).toEqual({ user_id: 'user_456' });\r\n    });\r\n  });\r\n\r\n  describe('Integración con APIs Enterprise', () => {\r\n    it('debe integrar correctamente con requireAdminAuth', async () => {\r\n      const mockRequest = { query: {}, headers: {} } as any;\r\n\r\n      const result = await requireAdminAuth(mockRequest, ['user_management']);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.context?.permissions).toContain('user_management');\r\n    });\r\n\r\n    it('debe integrar correctamente con requireCriticalAuth', async () => {\r\n      const mockRequest = { query: {}, headers: {} } as any;\r\n\r\n      const result = await requireCriticalAuth(mockRequest);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.context?.securityLevel).toBe('critical');\r\n    });\r\n\r\n    it('debe ejecutar consultas con RLS correctamente', async () => {\r\n      const mockRequest = { query: {}, headers: {} } as any;\r\n      \r\n      const authResult = await getEnterpriseAuthContext(mockRequest, {\r\n        securityLevel: 'high',\r\n        enableJWTValidation: false,\r\n        enableCSRFProtection: false,\r\n        enableRateLimit: false\r\n      });\r\n\r\n      expect(authResult.success).toBe(true);\r\n\r\n      const queryResult = await executeWithRLS(\r\n        authResult.context!,\r\n        async (client, rlsContext) => {\r\n          expect(client).toBeDefined();\r\n          expect(rlsContext.role).toBe('admin');\r\n          return { data: 'test' };\r\n        },\r\n        { enforceRLS: true, auditLog: false }\r\n      );\r\n\r\n      expect(queryResult.success).toBe(true);\r\n      expect(queryResult.data).toEqual({ data: 'test' });\r\n    });\r\n  });\r\n\r\n  describe('Gestión de Usuarios Enterprise', () => {\r\n    it('debe obtener usuario enterprise correctamente', async () => {\r\n      const result = await getEnterpriseUser('user_123');\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.user?.clerkId).toBe('user_123');\r\n      expect(result.user?.role).toBe('admin');\r\n    });\r\n\r\n    it('debe buscar usuarios enterprise con contexto', async () => {\r\n      const mockContext = {\r\n        userId: 'user_123',\r\n        role: 'admin' as const,\r\n        permissions: ['user_management'],\r\n        sessionValid: true,\r\n        securityLevel: 'high' as const,\r\n        supabase: supabaseAdmin,\r\n        validations: {\r\n          jwtValid: true,\r\n          csrfValid: true,\r\n          rateLimitPassed: true,\r\n          originValid: true\r\n        }\r\n      };\r\n\r\n      // Mock search response\r\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          or: jest.fn().mockReturnValue({\r\n            eq: jest.fn().mockReturnValue({\r\n              order: jest.fn().mockReturnValue({\r\n                limit: jest.fn().mockReturnValue({\r\n                  range: jest.fn().mockResolvedValue({\r\n                    data: [\r\n                      {\r\n                        id: 'profile_123',\r\n                        clerk_user_id: 'user_123',\r\n                        email: 'admin@test.com',\r\n                        role: 'admin',\r\n                        permissions: ['admin_access'],\r\n                        is_active: true\r\n                      }\r\n                    ],\r\n                    error: null,\r\n                    count: 1\r\n                  })\r\n                })\r\n              })\r\n            })\r\n          })\r\n        })\r\n      });\r\n\r\n      const result = await searchEnterpriseUsers({\r\n        query: 'admin',\r\n        limit: 10,\r\n        offset: 0\r\n      }, mockContext);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.users).toBeDefined();\r\n      expect(result.total).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('Cache Enterprise Integration', () => {\r\n    it('debe usar cache correctamente en operaciones enterprise', async () => {\r\n      const cacheKey = 'test_cache_key';\r\n      const testData = { test: 'data' };\r\n\r\n      const result = await withCache(\r\n        cacheKey,\r\n        async () => testData,\r\n        60000 // 1 minuto\r\n      );\r\n\r\n      expect(result).toEqual(testData);\r\n    });\r\n\r\n    it('debe proporcionar estadísticas de cache', () => {\r\n      const stats = getCacheStats();\r\n\r\n      expect(stats).toHaveProperty('hits');\r\n      expect(stats).toHaveProperty('misses');\r\n      expect(stats).toHaveProperty('entries');\r\n      expect(stats).toHaveProperty('hitRate');\r\n      expect(stats).toHaveProperty('memoryUsage');\r\n    });\r\n  });\r\n\r\n  describe('Escenarios de Error', () => {\r\n    it('debe manejar usuario no autenticado', async () => {\r\n      mockAuth.mockReturnValue({\r\n        userId: null,\r\n        sessionId: null\r\n      });\r\n\r\n      const mockRequest = { query: {}, headers: {} } as any;\r\n\r\n      const result = await getEnterpriseAuthContext(mockRequest);\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toBe('Usuario no autenticado');\r\n      expect(result.code).toBe('NOT_AUTHENTICATED');\r\n    });\r\n\r\n    it('debe manejar usuario inactivo en RLS', async () => {\r\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          eq: jest.fn().mockReturnValue({\r\n            single: jest.fn().mockResolvedValue({\r\n              data: {\r\n                id: 'profile_123',\r\n                is_active: false,\r\n                user_roles: { role_name: 'user' }\r\n              },\r\n              error: null\r\n            })\r\n          })\r\n        })\r\n      });\r\n\r\n      const mockContext = {\r\n        userId: 'user_123',\r\n        role: 'user' as const,\r\n        permissions: [],\r\n        sessionValid: true,\r\n        securityLevel: 'medium' as const,\r\n        supabase: supabaseAdmin,\r\n        validations: {\r\n          jwtValid: true,\r\n          csrfValid: true,\r\n          rateLimitPassed: true,\r\n          originValid: true\r\n        }\r\n      };\r\n\r\n      const result = await validateRLSContext(mockContext);\r\n\r\n      expect(result.valid).toBe(false);\r\n      expect(result.error).toBe('Usuario inactivo o no encontrado');\r\n    });\r\n\r\n    it('debe manejar permisos insuficientes', async () => {\r\n      const mockRequest = { query: {}, headers: {} } as any;\r\n\r\n      // Mock usuario sin permisos admin\r\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          eq: jest.fn().mockReturnValue({\r\n            single: jest.fn().mockResolvedValue({\r\n              data: {\r\n                id: 'profile_123',\r\n                role_id: 2,\r\n                permissions: ['basic_access'],\r\n                is_active: true,\r\n                user_roles: { role_name: 'user' }\r\n              },\r\n              error: null\r\n            })\r\n          })\r\n        })\r\n      });\r\n\r\n      const result = await requireAdminAuth(mockRequest, ['admin_access']);\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.code).toBe('INSUFFICIENT_ROLE');\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","auth","fn","supabaseAdmin","admin","listUsers","createUser","from","select","eq","single","range","order","then","or","insert","update","createClient","describe","mockAuth","beforeEach","clearAllMocks","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","mockReturnValue","userId","sessionId","mockResolvedValue","data","id","supabase_user_id","clerk_user_id","email","role_id","permissions","is_active","user_roles","role_name","error","it","mockRequest","query","headers","url","method","authResult","getEnterpriseAuthContext","securityLevel","enableJWTValidation","enableCSRFProtection","enableRateLimit","expect","success","toBe","context","toBeDefined","role","rlsValidation","validateRLSContext","valid","toContain","rlsFilters","createRLSFilters","toEqual","cacheStats","getCacheStats","hits","misses","productFilters","userProfileFilters","orderFilters","user_id","result","requireAdminAuth","requireCriticalAuth","queryResult","executeWithRLS","client","rlsContext","enforceRLS","auditLog","getEnterpriseUser","user","clerkId","mockContext","sessionValid","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","limit","count","searchEnterpriseUsers","offset","users","total","cacheKey","testData","test","withCache","stats","toHaveProperty","code"],"mappings":"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"}