a49154b7c1e9ebaf8b1fad0f8cef3976
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ContactForm: function() {
        return ContactForm;
    },
    Form: function() {
        return Form;
    },
    FormActions: function() {
        return FormActions;
    },
    FormField: function() {
        return FormField;
    },
    FormMessage: function() {
        return FormMessage;
    },
    FormRow: function() {
        return FormRow;
    },
    FormSection: function() {
        return FormSection;
    },
    useForm: function() {
        return useForm;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Form = /*#__PURE__*/ _react.forwardRef(({ className, children, ...props }, ref)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
        ref: ref,
        className: (0, _utils.cn)("space-y-6", className),
        ...props,
        children: children
    });
});
Form.displayName = "Form";
const FormSection = /*#__PURE__*/ _react.forwardRef(({ className, title, description, children, ...props }, ref)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        className: (0, _utils.cn)("space-y-4", className),
        ...props,
        children: [
            (title || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-1",
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                        className: "text-lg font-medium text-gray-900",
                        children: title
                    }),
                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-sm text-gray-600",
                        children: description
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "space-y-4",
                children: children
            })
        ]
    });
});
FormSection.displayName = "FormSection";
const FormRow = /*#__PURE__*/ _react.forwardRef(({ className, children, columns = 2, gap = "md", ...props }, ref)=>{
    const gapClasses = {
        sm: "gap-2",
        md: "gap-4",
        lg: "gap-6"
    };
    const columnClasses = {
        1: "grid-cols-1",
        2: "grid-cols-1 md:grid-cols-2",
        3: "grid-cols-1 md:grid-cols-3",
        4: "grid-cols-1 md:grid-cols-2 lg:grid-cols-4"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: ref,
        className: (0, _utils.cn)("grid", columnClasses[columns], gapClasses[gap], className),
        ...props,
        children: children
    });
});
FormRow.displayName = "FormRow";
const FormField = /*#__PURE__*/ _react.forwardRef(({ className, children, error, required, ...props }, ref)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: ref,
        className: (0, _utils.cn)("space-y-2", className),
        ...props,
        children: children
    });
});
FormField.displayName = "FormField";
const FormActions = /*#__PURE__*/ _react.forwardRef(({ className, children, align = "right", orientation = "horizontal", ...props }, ref)=>{
    const alignClasses = {
        left: "justify-start",
        center: "justify-center",
        right: "justify-end",
        between: "justify-between"
    };
    const orientationClasses = {
        horizontal: "flex flex-row gap-3",
        vertical: "flex flex-col gap-2"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: ref,
        className: (0, _utils.cn)(orientationClasses[orientation], alignClasses[align], "pt-4", className),
        ...props,
        children: children
    });
});
FormActions.displayName = "FormActions";
const FormMessage = /*#__PURE__*/ _react.forwardRef(({ className, children, variant = "info", ...props }, ref)=>{
    const variantClasses = {
        info: "bg-blue-50 border-blue-200 text-blue-800",
        success: "bg-green-50 border-green-200 text-green-800",
        warning: "bg-yellow-50 border-yellow-200 text-yellow-800",
        error: "bg-red-50 border-red-200 text-red-800"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: ref,
        className: (0, _utils.cn)("rounded-md border p-4 text-sm", variantClasses[variant], className),
        ...props,
        children: children
    });
});
FormMessage.displayName = "FormMessage";
function useForm({ defaultValues = {}, onSubmit, validate } = {}) {
    const [values, setValues] = _react.useState(defaultValues);
    const [errors, setErrors] = _react.useState({});
    const [isSubmitting, setIsSubmitting] = _react.useState(false);
    const [submitCount, setSubmitCount] = _react.useState(0);
    const setValue = _react.useCallback((name, value)=>{
        setValues((prev)=>({
                ...prev,
                [name]: value
            }));
        // Clear error when user starts typing
        if (errors[name]) {
            setErrors((prev)=>{
                const newErrors = {
                    ...prev
                };
                delete newErrors[name];
                return newErrors;
            });
        }
    }, [
        errors
    ]);
    const setError = _react.useCallback((name, error)=>{
        setErrors((prev)=>({
                ...prev,
                [name]: error
            }));
    }, []);
    const clearErrors = _react.useCallback(()=>{
        setErrors({});
    }, []);
    const reset = _react.useCallback((newValues = defaultValues)=>{
        setValues(newValues);
        setErrors({});
        setSubmitCount(0);
    }, [
        defaultValues
    ]);
    const handleSubmit = _react.useCallback(async (e)=>{
        e?.preventDefault();
        setIsSubmitting(true);
        setSubmitCount((prev)=>prev + 1);
        try {
            // Validate if validator is provided
            if (validate) {
                const validationErrors = validate(values);
                if (validationErrors) {
                    setErrors(validationErrors);
                    return;
                }
            }
            // Clear errors and submit
            setErrors({});
            await onSubmit?.(values);
        } catch (error) {
            console.error('Form submission error:', error);
        } finally{
            setIsSubmitting(false);
        }
    }, [
        values,
        validate,
        onSubmit
    ]);
    return {
        values,
        errors,
        isSubmitting,
        submitCount,
        setValue,
        setError,
        clearErrors,
        reset,
        handleSubmit,
        register: (name)=>({
                value: values[name] || '',
                onChange: (e)=>{
                    setValue(name, e.target.value);
                },
                error: errors[name]
            })
    };
}
function ContactForm({ onSubmit, className }) {
    const { values, errors, isSubmitting, handleSubmit, register } = useForm({
        defaultValues: {
            name: '',
            email: '',
            subject: '',
            message: '',
            acceptTerms: false
        },
        onSubmit,
        validate: (data)=>{
            const errors = {};
            if (!data.name?.trim()) errors.name = 'El nombre es requerido';
            if (!data.email?.trim()) errors.email = 'El email es requerido';
            else if (!/\S+@\S+\.\S+/.test(data.email)) errors.email = 'Email inválido';
            if (!data.subject?.trim()) errors.subject = 'El asunto es requerido';
            if (!data.message?.trim()) errors.message = 'El mensaje es requerido';
            if (!data.acceptTerms) errors.acceptTerms = 'Debes aceptar los términos';
            return Object.keys(errors).length > 0 ? errors : null;
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Form, {
        onSubmit: handleSubmit,
        className: className,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(FormSection, {
            title: "Formulario de Contacto",
            description: "Completa el formulario y nos pondremos en contacto contigo",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(FormRow, {
                    columns: 2,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(FormField, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-sm text-gray-600",
                            children: "Componentes Input, Select, Textarea, etc. se integrar\xedan aqu\xed"
                        })
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(FormActions, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            type: "button",
                            className: "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50",
                            children: "Cancelar"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            type: "submit",
                            disabled: isSubmitting,
                            className: "px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-primary-hover disabled:opacity-50",
                            children: isSubmitting ? 'Enviando...' : 'Enviar'
                        })
                    ]
                })
            ]
        })
    });
}

//# sourceMappingURL=data:application/json;base64,