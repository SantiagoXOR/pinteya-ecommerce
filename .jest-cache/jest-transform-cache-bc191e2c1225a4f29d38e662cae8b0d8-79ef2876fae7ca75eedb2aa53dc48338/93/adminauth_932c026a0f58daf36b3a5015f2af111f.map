{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\admin-auth.ts"],"sourcesContent":["/**\n * Sistema de Autenticación y Autorización para Panel Administrativo\n * Implementa verificación de roles y permisos granulares\n */\n\nimport { auth, currentUser, getAuth } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  validateSecurityContext,\n  getSecurityContext,\n  type SecurityValidationResult,\n  type SecurityContext\n} from './security-validations';\nimport {\n  logAuthSuccess,\n  logAuthFailure,\n  logPermissionDenied,\n  runSecurityDetection\n} from './security-audit';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface UserProfile {\n  id: string;\n  supabase_user_id: string | null;\n  clerk_user_id: string | null;\n  email: string;\n  first_name: string | null;\n  last_name: string | null;\n  role_id: number;\n  is_active: boolean;\n  is_verified: boolean;\n  user_roles: {\n    id: number;\n    role_name: string;\n    display_name: string;\n    permissions: Record<string, any>;\n    is_active: boolean;\n  };\n}\n\nexport interface AdminAuthResult {\n  success: boolean;\n  user?: UserProfile;\n  error?: string;\n  status?: number;\n}\n\nexport interface PermissionCheck {\n  resource: string;\n  action: string;\n  userId?: string;\n}\n\n// =====================================================\n// FUNCIONES DE VERIFICACIÓN DE AUTENTICACIÓN\n// =====================================================\n\n/**\n * Obtiene el usuario autenticado usando métodos oficiales de Clerk\n * Mantiene compatibilidad con implementación anterior como fallback\n */\nexport async function getAuthenticatedUser(\n  request?: NextRequest | NextApiRequest\n): Promise<{ userId: string | null; sessionId?: string; error?: string }> {\n  try {\n    // Método 1: Usar getAuth oficial de Clerk para API Routes (PREFERIDO)\n    if (request && 'query' in request) {\n      // Es NextApiRequest (Pages Router)\n      const { userId, sessionId } = getAuth(request as NextApiRequest);\n      if (userId) {\n        console.log(`[AUTH] Usuario autenticado via getAuth: ${userId}`);\n        return { userId, sessionId };\n      }\n    }\n\n    // Método 2: Usar auth() para App Router Route Handlers\n    if (!request || !('query' in request)) {\n      try {\n        const { userId, sessionId } = await auth();\n        if (userId) {\n          console.log(`[AUTH] Usuario autenticado via auth(): ${userId}`);\n          return { userId, sessionId };\n        }\n      } catch (authError) {\n        console.warn('[AUTH] Error usando auth():', authError);\n        // Continuar con métodos fallback\n      }\n    }\n\n    // Método 3: Fallback a headers (compatibilidad con implementación anterior)\n    if (request && 'headers' in request) {\n      const clerkUserId = request.headers.get?.('x-clerk-user-id') ||\n                         (request.headers as any)['x-clerk-user-id'];\n      if (clerkUserId) {\n        console.warn('[AUTH] Usando header fallback para userId - considera migrar a getAuth()');\n        return { userId: clerkUserId };\n      }\n    }\n\n    // Método 4: Fallback a JWT en cookies (último recurso)\n    if (request && 'cookies' in request) {\n      try {\n        const sessionToken = request.cookies.get?.('__session')?.value ||\n                            (request.cookies as any)['__session'];\n        if (sessionToken) {\n          // Decodificar el JWT para obtener el userId\n          const payload = JSON.parse(atob(sessionToken.split('.')[1]));\n          if (payload.sub) {\n            console.warn('[AUTH] Usando JWT fallback para userId');\n            return { userId: payload.sub };\n          }\n        }\n      } catch (jwtError) {\n        console.warn('[AUTH] Error decoding JWT:', jwtError);\n      }\n    }\n\n    return { userId: null, error: 'No autorizado' };\n  } catch (error) {\n    console.error('[AUTH] Error getting authenticated user:', error);\n    return { userId: null, error: 'Error de autenticación' };\n  }\n}\n\n/**\n * Nueva función específica para Pages Router API Routes\n * Usa getAuth(req) oficial de Clerk\n */\nexport function getAuthFromApiRoute(req: NextApiRequest, res: NextApiResponse) {\n  const { userId, sessionId, getToken } = getAuth(req);\n\n  if (!userId) {\n    throw new Error('Usuario no autenticado');\n  }\n\n  console.log(`[AUTH] API Route autenticada: ${userId}`);\n  return { userId, sessionId, getToken };\n}\n\n/**\n * Nueva función específica para App Router Route Handlers\n * Usa auth() oficial de Clerk\n */\nexport async function getAuthFromRouteHandler() {\n  const { userId, sessionId, getToken } = await auth();\n\n  if (!userId) {\n    throw new Error('Usuario no autenticado');\n  }\n\n  console.log(`[AUTH] Route Handler autenticado: ${userId}`);\n  return { userId, sessionId, getToken };\n}\n\n/**\n * Función unificada que detecta automáticamente el tipo de ruta\n * Con manejo robusto de errores y fallbacks\n */\nexport async function getUnifiedAuth(request?: NextRequest | NextApiRequest) {\n  try {\n    // Detectar si es API Route (Pages Router)\n    if (request && 'query' in request) {\n      try {\n        return getAuthFromApiRoute(request as NextApiRequest, {} as NextApiResponse);\n      } catch (apiError) {\n        console.warn('[AUTH] Error en API Route, usando fallback:', apiError);\n        // Fallback a función original\n        return await getAuthenticatedUser(request);\n      }\n    }\n\n    // Detectar si es Route Handler (App Router) o sin request\n    if (!request || !('query' in request)) {\n      try {\n        return await getAuthFromRouteHandler();\n      } catch (routeError) {\n        console.warn('[AUTH] Error en Route Handler, usando fallback:', routeError);\n        // Fallback a función original\n        return await getAuthenticatedUser(request);\n      }\n    }\n\n    // Fallback a función original\n    return await getAuthenticatedUser(request);\n  } catch (error) {\n    console.error('[AUTH] Error en getUnifiedAuth:', error);\n    // En lugar de lanzar error, retornar resultado de fallback\n    return await getAuthenticatedUser(request);\n  }\n}\n\n/**\n * Obtiene el perfil completo del usuario desde Supabase\n */\nexport async function getUserProfile(clerkUserId: string): Promise<UserProfile | null> {\n  try {\n    if (!supabaseAdmin) {\n      throw new Error('Supabase admin client not available');\n    }\n\n    // Primero obtener el perfil del usuario\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('user_profiles')\n      .select('*')\n      .eq('clerk_user_id', clerkUserId)\n      .eq('is_active', true)\n      .single();\n\n    if (profileError) {\n      console.error('Error fetching user profile:', profileError);\n      return null;\n    }\n\n    if (!profile) {\n      return null;\n    }\n\n    // Luego obtener el rol del usuario\n    const { data: role, error: roleError } = await supabaseAdmin\n      .from('user_roles')\n      .select('*')\n      .eq('id', profile.role_id)\n      .single();\n\n    if (roleError) {\n      console.error('Error fetching user role:', roleError);\n      return null;\n    }\n\n    // Combinar los datos\n    const userProfile: UserProfile = {\n      ...profile,\n      user_roles: role\n    };\n\n    return userProfile;\n  } catch (error) {\n    console.error('Error in getUserProfile:', error);\n    return null;\n  }\n}\n\n/**\n * Verifica si un usuario tiene acceso al panel administrativo\n */\nexport async function checkAdminAccess(clerkUserId: string): Promise<AdminAuthResult> {\n  try {\n    const profile = await getUserProfile(clerkUserId);\n    \n    if (!profile) {\n      return {\n        success: false,\n        error: 'Perfil de usuario no encontrado',\n        status: 404\n      };\n    }\n\n    if (!profile.user_roles || !profile.is_active) {\n      return {\n        success: false,\n        error: 'Rol de usuario no válido',\n        status: 403\n      };\n    }\n\n    // Verificar si tiene acceso al panel admin\n    const hasAdminAccess = hasPermission(profile, ['admin_panel', 'access']);\n    \n    if (!hasAdminAccess) {\n      return {\n        success: false,\n        error: 'Acceso denegado al panel administrativo',\n        status: 403\n      };\n    }\n\n    return {\n      success: true,\n      user: profile\n    };\n  } catch (error) {\n    console.error('Error in checkAdminAccess:', error);\n    return {\n      success: false,\n      error: 'Error interno del servidor',\n      status: 500\n    };\n  }\n}\n\n// =====================================================\n// FUNCIONES DE VERIFICACIÓN DE PERMISOS\n// =====================================================\n\n/**\n * Verifica si un usuario tiene un permiso específico\n */\nexport function hasPermission(\n  userProfile: UserProfile,\n  permissionPath: string[]\n): boolean {\n  try {\n    if (!userProfile.user_roles || !userProfile.user_roles.permissions) {\n      return false;\n    }\n\n    let current: any = userProfile.user_roles.permissions;\n    \n    for (const path of permissionPath) {\n      if (current[path] === undefined) {\n        return false;\n      }\n      current = current[path];\n    }\n\n    // Manejar diferentes tipos de valores de permisos\n    if (typeof current === 'boolean') {\n      return current;\n    }\n    \n    if (typeof current === 'string') {\n      // Para permisos como \"own\", \"own_limited\", etc.\n      return current !== 'false';\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error checking permission:', error);\n    return false;\n  }\n}\n\n/**\n * Verifica múltiples permisos\n */\nexport function hasAnyPermission(\n  userProfile: UserProfile,\n  permissions: string[][]\n): boolean {\n  return permissions.some(permission => hasPermission(userProfile, permission));\n}\n\n/**\n * Verifica todos los permisos\n */\nexport function hasAllPermissions(\n  userProfile: UserProfile,\n  permissions: string[][]\n): boolean {\n  return permissions.every(permission => hasPermission(userProfile, permission));\n}\n\n/**\n * Verifica si el usuario es administrador\n */\nexport function isAdmin(userProfile: UserProfile): boolean {\n  return userProfile.user_roles?.role_name === 'admin';\n}\n\n/**\n * Verifica si el usuario es moderador o administrador\n */\nexport function isModeratorOrAdmin(userProfile: UserProfile): boolean {\n  const role = userProfile.user_roles?.role_name;\n  return role === 'admin' || role === 'moderator';\n}\n\n// =====================================================\n// MIDDLEWARE DE AUTORIZACIÓN\n// =====================================================\n\n/**\n * Middleware principal para verificar permisos administrativos\n * Actualizado con validaciones de seguridad avanzadas\n */\nexport async function checkAdminPermissions(\n  requiredPermissions?: string[][],\n  request?: NextRequest | NextApiRequest\n): Promise<AdminAuthResult & { supabase?: typeof supabaseAdmin; securityContext?: SecurityContext }> {\n  try {\n    // 1. Verificar autenticación con Clerk usando métodos oficiales\n    let userId: string;\n    let sessionId: string | undefined;\n\n    try {\n      const authResult = await getUnifiedAuth(request);\n      userId = authResult.userId;\n      sessionId = authResult.sessionId;\n\n      // Log autenticación exitosa\n      const securityContext = await getSecurityContext(userId, request);\n      if (securityContext) {\n        await logAuthSuccess(userId, securityContext, request);\n      }\n    } catch (authError) {\n      console.warn('[AUTH] Error en autenticación unificada, intentando fallback');\n      await logAuthFailure(null, `Error de autenticación: ${authError.message}`, request);\n\n      const fallbackResult = await getAuthenticatedUser(request);\n      if (!fallbackResult.userId) {\n        await logAuthFailure(null, fallbackResult.error || 'No autorizado', request);\n        return {\n          success: false,\n          error: fallbackResult.error || 'No autorizado',\n          status: 401\n        };\n      }\n      userId = fallbackResult.userId;\n      sessionId = fallbackResult.sessionId;\n    }\n\n    // 2. Ejecutar detección de seguridad\n    await runSecurityDetection(userId);\n\n    // 3. Obtener contexto de seguridad completo\n    const securityContext = await getSecurityContext(userId, request);\n    if (!securityContext) {\n      await logAuthFailure(userId, 'No se pudo obtener contexto de seguridad', request);\n      return {\n        success: false,\n        error: 'Error obteniendo contexto de seguridad',\n        status: 500\n      };\n    }\n\n    // 4. Verificar disponibilidad de Supabase\n    if (!supabaseAdmin) {\n      return {\n        success: false,\n        error: 'Servicio administrativo no disponible',\n        status: 503\n      };\n    }\n\n    // 5. Verificar acceso administrativo básico\n    const adminCheck = await checkAdminAccess(userId);\n\n    if (!adminCheck.success) {\n      await logPermissionDenied(userId, 'ADMIN_ACCESS', ['admin_panel'], securityContext);\n      return adminCheck;\n    }\n\n    const userProfile = adminCheck.user!;\n\n    // 6. Verificar permisos específicos con validaciones de seguridad\n    if (requiredPermissions && requiredPermissions.length > 0) {\n      const hasRequiredPermissions = hasAnyPermission(userProfile, requiredPermissions);\n\n      if (!hasRequiredPermissions) {\n        await logPermissionDenied(\n          userId,\n          'SPECIFIC_PERMISSIONS',\n          requiredPermissions.flat(),\n          securityContext\n        );\n        return {\n          success: false,\n          error: 'Permisos insuficientes para esta operación',\n          status: 403\n        };\n      }\n    }\n\n    // 7. Registrar acceso en audit log\n    await logAdminAccess(userProfile.id, 'API_ACCESS');\n\n    return {\n      success: true,\n      user: userProfile,\n      supabase: supabaseAdmin,\n      securityContext\n    };\n  } catch (error) {\n    console.error('Error in checkAdminPermissions:', error);\n    return {\n      success: false,\n      error: 'Error interno del servidor',\n      status: 500\n    };\n  }\n}\n\n/**\n * Middleware específico para operaciones CRUD con validaciones de seguridad\n * Actualizado para soportar tanto NextRequest como NextApiRequest\n */\nexport async function checkCRUDPermissions(\n  resource: string,\n  action: 'create' | 'read' | 'update' | 'delete',\n  request?: NextRequest | NextApiRequest\n): Promise<AdminAuthResult & { supabase?: typeof supabaseAdmin; securityContext?: SecurityContext }> {\n  const requiredPermissions = [[resource, action]];\n  return checkAdminPermissions(requiredPermissions, request);\n}\n\n/**\n * Nueva función de validación de seguridad avanzada\n * Integra todas las validaciones de seguridad en una sola función\n */\nexport async function checkAdvancedSecurity(\n  userId: string,\n  operation: string,\n  requiredPermissions: string[],\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityValidationResult & { userProfile?: UserProfile; supabase?: typeof supabaseAdmin }> {\n  try {\n    // 1. Ejecutar detección de seguridad\n    await runSecurityDetection(userId);\n\n    // 2. Validar contexto de seguridad\n    const securityValidation = await validateSecurityContext(\n      userId,\n      operation,\n      requiredPermissions as any,\n      request\n    );\n\n    if (!securityValidation.valid) {\n      return securityValidation;\n    }\n\n    // 3. Obtener perfil de usuario desde Supabase\n    const userProfile = await getUserProfile(userId);\n    if (!userProfile) {\n      return {\n        valid: false,\n        error: 'Perfil de usuario no encontrado',\n        code: 'USER_PROFILE_NOT_FOUND',\n        severity: 'high'\n      };\n    }\n\n    // 4. Verificar disponibilidad de Supabase\n    if (!supabaseAdmin) {\n      return {\n        valid: false,\n        error: 'Servicio administrativo no disponible',\n        code: 'SERVICE_UNAVAILABLE',\n        severity: 'critical'\n      };\n    }\n\n    return {\n      valid: true,\n      context: securityValidation.context,\n      userProfile,\n      supabase: supabaseAdmin\n    };\n  } catch (error) {\n    console.error('[SECURITY] Error en checkAdvancedSecurity:', error);\n    return {\n      valid: false,\n      error: 'Error interno en validación de seguridad',\n      code: 'SECURITY_VALIDATION_ERROR',\n      severity: 'critical'\n    };\n  }\n}\n\n// =====================================================\n// FUNCIONES DE LOGGING Y AUDITORÍA\n// =====================================================\n\n/**\n * Registra acceso administrativo en el audit log\n */\nexport async function logAdminAccess(\n  userProfileId: string,\n  action: string,\n  resourceType?: string,\n  resourceId?: string,\n  additionalData?: Record<string, any>\n): Promise<void> {\n  try {\n    if (!supabaseAdmin) return;\n\n    await supabaseAdmin\n      .from('admin_audit_log')\n      .insert({\n        user_id: userProfileId,\n        action,\n        resource_type: resourceType || 'system',\n        resource_id: resourceId,\n        new_values: additionalData ? JSON.stringify(additionalData) : null\n      });\n  } catch (error) {\n    console.error('Error logging admin access:', error);\n    // No lanzar error para no interrumpir el flujo principal\n  }\n}\n\n/**\n * Registra cambios en recursos administrativos\n */\nexport async function logAdminAction(\n  userProfileId: string,\n  action: string,\n  resourceType: string,\n  resourceId: string,\n  oldValues?: any,\n  newValues?: any\n): Promise<void> {\n  try {\n    if (!supabaseAdmin) return;\n\n    await supabaseAdmin\n      .from('admin_audit_log')\n      .insert({\n        user_id: userProfileId,\n        action,\n        resource_type: resourceType,\n        resource_id: resourceId,\n        old_values: oldValues ? JSON.stringify(oldValues) : null,\n        new_values: newValues ? JSON.stringify(newValues) : null\n      });\n  } catch (error) {\n    console.error('Error logging admin action:', error);\n  }\n}\n\n// =====================================================\n// UTILIDADES PARA NEXT.JS API ROUTES\n// =====================================================\n\n/**\n * Wrapper para API routes que requieren autenticación admin (App Router)\n */\nexport function withAdminAuth(\n  handler: (\n    request: NextRequest,\n    context: { user: UserProfile; supabase: typeof supabaseAdmin }\n  ) => Promise<Response>,\n  requiredPermissions?: string[][]\n) {\n  return async (request: NextRequest): Promise<Response> => {\n    const authResult = await checkAdminPermissions(requiredPermissions, request);\n\n    if (!authResult.success) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: authResult.error\n        }),\n        {\n          status: authResult.status || 500,\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    return handler(request, {\n      user: authResult.user!,\n      supabase: authResult.supabase!\n    });\n  };\n}\n\n/**\n * Wrapper para Pages Router API Routes que requieren autenticación admin\n */\nexport function withAdminAuthPages(\n  handler: (\n    req: NextApiRequest,\n    res: NextApiResponse,\n    context: { user: UserProfile; supabase: typeof supabaseAdmin }\n  ) => Promise<void>,\n  requiredPermissions?: string[][]\n) {\n  return async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n    const authResult = await checkAdminPermissions(requiredPermissions, req);\n\n    if (!authResult.success) {\n      return res.status(authResult.status || 500).json({\n        success: false,\n        error: authResult.error\n      });\n    }\n\n    return handler(req, res, {\n      user: authResult.user!,\n      supabase: authResult.supabase!\n    });\n  };\n}\n\n/**\n * Extrae información de la request para logging\n * Soporta tanto NextRequest como NextApiRequest\n */\nexport function getRequestInfo(request: NextRequest | NextApiRequest) {\n  if ('query' in request) {\n    // NextApiRequest (Pages Router)\n    const req = request as NextApiRequest;\n    return {\n      method: req.method || 'GET',\n      url: req.url || 'unknown',\n      userAgent: req.headers['user-agent'] || 'unknown',\n      ip: req.headers['x-forwarded-for'] ||\n          req.headers['x-real-ip'] ||\n          req.connection?.remoteAddress ||\n          'unknown'\n    };\n  } else {\n    // NextRequest (App Router)\n    const req = request as NextRequest;\n    return {\n      method: req.method,\n      url: req.url,\n      userAgent: req.headers.get('user-agent') || 'unknown',\n      ip: req.headers.get('x-forwarded-for') ||\n          req.headers.get('x-real-ip') ||\n          'unknown'\n    };\n  }\n}\n"],"names":["checkAdminAccess","checkAdminPermissions","checkAdvancedSecurity","checkCRUDPermissions","getAuthFromApiRoute","getAuthFromRouteHandler","getAuthenticatedUser","getRequestInfo","getUnifiedAuth","getUserProfile","hasAllPermissions","hasAnyPermission","hasPermission","isAdmin","isModeratorOrAdmin","logAdminAccess","logAdminAction","withAdminAuth","withAdminAuthPages","request","userId","sessionId","getAuth","console","log","auth","authError","warn","clerkUserId","headers","get","sessionToken","cookies","value","payload","JSON","parse","atob","split","sub","jwtError","error","req","res","getToken","Error","apiError","routeError","supabaseAdmin","data","profile","profileError","from","select","eq","single","role","roleError","role_id","userProfile","user_roles","success","status","is_active","hasAdminAccess","user","permissionPath","permissions","current","path","undefined","some","permission","every","role_name","requiredPermissions","authResult","securityContext","getSecurityContext","logAuthSuccess","logAuthFailure","message","fallbackResult","runSecurityDetection","adminCheck","logPermissionDenied","length","hasRequiredPermissions","flat","id","supabase","resource","action","operation","securityValidation","validateSecurityContext","valid","code","severity","context","userProfileId","resourceType","resourceId","additionalData","insert","user_id","resource_type","resource_id","new_values","stringify","oldValues","newValues","old_values","handler","Response","json","method","url","userAgent","ip","connection","remoteAddress"],"mappings":"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"}