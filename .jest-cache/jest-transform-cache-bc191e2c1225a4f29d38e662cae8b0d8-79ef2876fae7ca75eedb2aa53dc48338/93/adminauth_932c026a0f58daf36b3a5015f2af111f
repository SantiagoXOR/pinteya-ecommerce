3f72c3835710dec16adef90093226d17
/**
 * Sistema de Autenticación y Autorización para Panel Administrativo
 * Implementa verificación de roles y permisos granulares
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkAdminAccess: function() {
        return checkAdminAccess;
    },
    checkAdminPermissions: function() {
        return checkAdminPermissions;
    },
    checkAdvancedSecurity: function() {
        return checkAdvancedSecurity;
    },
    checkCRUDPermissions: function() {
        return checkCRUDPermissions;
    },
    getAuthFromApiRoute: function() {
        return getAuthFromApiRoute;
    },
    getAuthFromRouteHandler: function() {
        return getAuthFromRouteHandler;
    },
    getAuthenticatedUser: function() {
        return getAuthenticatedUser;
    },
    getRequestInfo: function() {
        return getRequestInfo;
    },
    getUnifiedAuth: function() {
        return getUnifiedAuth;
    },
    getUserProfile: function() {
        return getUserProfile;
    },
    hasAllPermissions: function() {
        return hasAllPermissions;
    },
    hasAnyPermission: function() {
        return hasAnyPermission;
    },
    hasPermission: function() {
        return hasPermission;
    },
    isAdmin: function() {
        return isAdmin;
    },
    isModeratorOrAdmin: function() {
        return isModeratorOrAdmin;
    },
    logAdminAccess: function() {
        return logAdminAccess;
    },
    logAdminAction: function() {
        return logAdminAction;
    },
    withAdminAuth: function() {
        return withAdminAuth;
    },
    withAdminAuthPages: function() {
        return withAdminAuthPages;
    }
});
const _server = require("@clerk/nextjs/server");
const _supabase = require("../supabase");
const _securityvalidations = require("./security-validations");
const _securityaudit = require("./security-audit");
async function getAuthenticatedUser(request) {
    try {
        // Método 1: Usar getAuth oficial de Clerk para API Routes (PREFERIDO)
        if (request && 'query' in request) {
            // Es NextApiRequest (Pages Router)
            const { userId, sessionId } = (0, _server.getAuth)(request);
            if (userId) {
                console.log(`[AUTH] Usuario autenticado via getAuth: ${userId}`);
                return {
                    userId,
                    sessionId
                };
            }
        }
        // Método 2: Usar auth() para App Router Route Handlers
        if (!request || !('query' in request)) {
            try {
                const { userId, sessionId } = await (0, _server.auth)();
                if (userId) {
                    console.log(`[AUTH] Usuario autenticado via auth(): ${userId}`);
                    return {
                        userId,
                        sessionId
                    };
                }
            } catch (authError) {
                console.warn('[AUTH] Error usando auth():', authError);
            // Continuar con métodos fallback
            }
        }
        // Método 3: Fallback a headers (compatibilidad con implementación anterior)
        if (request && 'headers' in request) {
            const clerkUserId = request.headers.get?.('x-clerk-user-id') || request.headers['x-clerk-user-id'];
            if (clerkUserId) {
                console.warn('[AUTH] Usando header fallback para userId - considera migrar a getAuth()');
                return {
                    userId: clerkUserId
                };
            }
        }
        // Método 4: Fallback a JWT en cookies (último recurso)
        if (request && 'cookies' in request) {
            try {
                const sessionToken = request.cookies.get?.('__session')?.value || request.cookies['__session'];
                if (sessionToken) {
                    // Decodificar el JWT para obtener el userId
                    const payload = JSON.parse(atob(sessionToken.split('.')[1]));
                    if (payload.sub) {
                        console.warn('[AUTH] Usando JWT fallback para userId');
                        return {
                            userId: payload.sub
                        };
                    }
                }
            } catch (jwtError) {
                console.warn('[AUTH] Error decoding JWT:', jwtError);
            }
        }
        return {
            userId: null,
            error: 'No autorizado'
        };
    } catch (error) {
        console.error('[AUTH] Error getting authenticated user:', error);
        return {
            userId: null,
            error: 'Error de autenticación'
        };
    }
}
function getAuthFromApiRoute(req, res) {
    const { userId, sessionId, getToken } = (0, _server.getAuth)(req);
    if (!userId) {
        throw new Error('Usuario no autenticado');
    }
    console.log(`[AUTH] API Route autenticada: ${userId}`);
    return {
        userId,
        sessionId,
        getToken
    };
}
async function getAuthFromRouteHandler() {
    const { userId, sessionId, getToken } = await (0, _server.auth)();
    if (!userId) {
        throw new Error('Usuario no autenticado');
    }
    console.log(`[AUTH] Route Handler autenticado: ${userId}`);
    return {
        userId,
        sessionId,
        getToken
    };
}
async function getUnifiedAuth(request) {
    try {
        // Detectar si es API Route (Pages Router)
        if (request && 'query' in request) {
            try {
                return getAuthFromApiRoute(request, {});
            } catch (apiError) {
                console.warn('[AUTH] Error en API Route, usando fallback:', apiError);
                // Fallback a función original
                return await getAuthenticatedUser(request);
            }
        }
        // Detectar si es Route Handler (App Router) o sin request
        if (!request || !('query' in request)) {
            try {
                return await getAuthFromRouteHandler();
            } catch (routeError) {
                console.warn('[AUTH] Error en Route Handler, usando fallback:', routeError);
                // Fallback a función original
                return await getAuthenticatedUser(request);
            }
        }
        // Fallback a función original
        return await getAuthenticatedUser(request);
    } catch (error) {
        console.error('[AUTH] Error en getUnifiedAuth:', error);
        // En lugar de lanzar error, retornar resultado de fallback
        return await getAuthenticatedUser(request);
    }
}
async function getUserProfile(clerkUserId) {
    try {
        if (!_supabase.supabaseAdmin) {
            throw new Error('Supabase admin client not available');
        }
        // Primero obtener el perfil del usuario
        const { data: profile, error: profileError } = await _supabase.supabaseAdmin.from('user_profiles').select('*').eq('clerk_user_id', clerkUserId).eq('is_active', true).single();
        if (profileError) {
            console.error('Error fetching user profile:', profileError);
            return null;
        }
        if (!profile) {
            return null;
        }
        // Luego obtener el rol del usuario
        const { data: role, error: roleError } = await _supabase.supabaseAdmin.from('user_roles').select('*').eq('id', profile.role_id).single();
        if (roleError) {
            console.error('Error fetching user role:', roleError);
            return null;
        }
        // Combinar los datos
        const userProfile = {
            ...profile,
            user_roles: role
        };
        return userProfile;
    } catch (error) {
        console.error('Error in getUserProfile:', error);
        return null;
    }
}
async function checkAdminAccess(clerkUserId) {
    try {
        const profile = await getUserProfile(clerkUserId);
        if (!profile) {
            return {
                success: false,
                error: 'Perfil de usuario no encontrado',
                status: 404
            };
        }
        if (!profile.user_roles || !profile.is_active) {
            return {
                success: false,
                error: 'Rol de usuario no válido',
                status: 403
            };
        }
        // Verificar si tiene acceso al panel admin
        const hasAdminAccess = hasPermission(profile, [
            'admin_panel',
            'access'
        ]);
        if (!hasAdminAccess) {
            return {
                success: false,
                error: 'Acceso denegado al panel administrativo',
                status: 403
            };
        }
        return {
            success: true,
            user: profile
        };
    } catch (error) {
        console.error('Error in checkAdminAccess:', error);
        return {
            success: false,
            error: 'Error interno del servidor',
            status: 500
        };
    }
}
function hasPermission(userProfile, permissionPath) {
    try {
        if (!userProfile.user_roles || !userProfile.user_roles.permissions) {
            return false;
        }
        let current = userProfile.user_roles.permissions;
        for (const path of permissionPath){
            if (current[path] === undefined) {
                return false;
            }
            current = current[path];
        }
        // Manejar diferentes tipos de valores de permisos
        if (typeof current === 'boolean') {
            return current;
        }
        if (typeof current === 'string') {
            // Para permisos como "own", "own_limited", etc.
            return current !== 'false';
        }
        return false;
    } catch (error) {
        console.error('Error checking permission:', error);
        return false;
    }
}
function hasAnyPermission(userProfile, permissions) {
    return permissions.some((permission)=>hasPermission(userProfile, permission));
}
function hasAllPermissions(userProfile, permissions) {
    return permissions.every((permission)=>hasPermission(userProfile, permission));
}
function isAdmin(userProfile) {
    return userProfile.user_roles?.role_name === 'admin';
}
function isModeratorOrAdmin(userProfile) {
    const role = userProfile.user_roles?.role_name;
    return role === 'admin' || role === 'moderator';
}
async function checkAdminPermissions(requiredPermissions, request) {
    try {
        // 1. Verificar autenticación con Clerk usando métodos oficiales
        let userId;
        let sessionId;
        try {
            const authResult = await getUnifiedAuth(request);
            userId = authResult.userId;
            sessionId = authResult.sessionId;
            // Log autenticación exitosa
            const securityContext = await (0, _securityvalidations.getSecurityContext)(userId, request);
            if (securityContext) {
                await (0, _securityaudit.logAuthSuccess)(userId, securityContext, request);
            }
        } catch (authError) {
            console.warn('[AUTH] Error en autenticación unificada, intentando fallback');
            await (0, _securityaudit.logAuthFailure)(null, `Error de autenticación: ${authError.message}`, request);
            const fallbackResult = await getAuthenticatedUser(request);
            if (!fallbackResult.userId) {
                await (0, _securityaudit.logAuthFailure)(null, fallbackResult.error || 'No autorizado', request);
                return {
                    success: false,
                    error: fallbackResult.error || 'No autorizado',
                    status: 401
                };
            }
            userId = fallbackResult.userId;
            sessionId = fallbackResult.sessionId;
        }
        // 2. Ejecutar detección de seguridad
        await (0, _securityaudit.runSecurityDetection)(userId);
        // 3. Obtener contexto de seguridad completo
        const securityContext = await (0, _securityvalidations.getSecurityContext)(userId, request);
        if (!securityContext) {
            await (0, _securityaudit.logAuthFailure)(userId, 'No se pudo obtener contexto de seguridad', request);
            return {
                success: false,
                error: 'Error obteniendo contexto de seguridad',
                status: 500
            };
        }
        // 4. Verificar disponibilidad de Supabase
        if (!_supabase.supabaseAdmin) {
            return {
                success: false,
                error: 'Servicio administrativo no disponible',
                status: 503
            };
        }
        // 5. Verificar acceso administrativo básico
        const adminCheck = await checkAdminAccess(userId);
        if (!adminCheck.success) {
            await (0, _securityaudit.logPermissionDenied)(userId, 'ADMIN_ACCESS', [
                'admin_panel'
            ], securityContext);
            return adminCheck;
        }
        const userProfile = adminCheck.user;
        // 6. Verificar permisos específicos con validaciones de seguridad
        if (requiredPermissions && requiredPermissions.length > 0) {
            const hasRequiredPermissions = hasAnyPermission(userProfile, requiredPermissions);
            if (!hasRequiredPermissions) {
                await (0, _securityaudit.logPermissionDenied)(userId, 'SPECIFIC_PERMISSIONS', requiredPermissions.flat(), securityContext);
                return {
                    success: false,
                    error: 'Permisos insuficientes para esta operación',
                    status: 403
                };
            }
        }
        // 7. Registrar acceso en audit log
        await logAdminAccess(userProfile.id, 'API_ACCESS');
        return {
            success: true,
            user: userProfile,
            supabase: _supabase.supabaseAdmin,
            securityContext
        };
    } catch (error) {
        console.error('Error in checkAdminPermissions:', error);
        return {
            success: false,
            error: 'Error interno del servidor',
            status: 500
        };
    }
}
async function checkCRUDPermissions(resource, action, request) {
    const requiredPermissions = [
        [
            resource,
            action
        ]
    ];
    return checkAdminPermissions(requiredPermissions, request);
}
async function checkAdvancedSecurity(userId, operation, requiredPermissions, request) {
    try {
        // 1. Ejecutar detección de seguridad
        await (0, _securityaudit.runSecurityDetection)(userId);
        // 2. Validar contexto de seguridad
        const securityValidation = await (0, _securityvalidations.validateSecurityContext)(userId, operation, requiredPermissions, request);
        if (!securityValidation.valid) {
            return securityValidation;
        }
        // 3. Obtener perfil de usuario desde Supabase
        const userProfile = await getUserProfile(userId);
        if (!userProfile) {
            return {
                valid: false,
                error: 'Perfil de usuario no encontrado',
                code: 'USER_PROFILE_NOT_FOUND',
                severity: 'high'
            };
        }
        // 4. Verificar disponibilidad de Supabase
        if (!_supabase.supabaseAdmin) {
            return {
                valid: false,
                error: 'Servicio administrativo no disponible',
                code: 'SERVICE_UNAVAILABLE',
                severity: 'critical'
            };
        }
        return {
            valid: true,
            context: securityValidation.context,
            userProfile,
            supabase: _supabase.supabaseAdmin
        };
    } catch (error) {
        console.error('[SECURITY] Error en checkAdvancedSecurity:', error);
        return {
            valid: false,
            error: 'Error interno en validación de seguridad',
            code: 'SECURITY_VALIDATION_ERROR',
            severity: 'critical'
        };
    }
}
async function logAdminAccess(userProfileId, action, resourceType, resourceId, additionalData) {
    try {
        if (!_supabase.supabaseAdmin) return;
        await _supabase.supabaseAdmin.from('admin_audit_log').insert({
            user_id: userProfileId,
            action,
            resource_type: resourceType || 'system',
            resource_id: resourceId,
            new_values: additionalData ? JSON.stringify(additionalData) : null
        });
    } catch (error) {
        console.error('Error logging admin access:', error);
    // No lanzar error para no interrumpir el flujo principal
    }
}
async function logAdminAction(userProfileId, action, resourceType, resourceId, oldValues, newValues) {
    try {
        if (!_supabase.supabaseAdmin) return;
        await _supabase.supabaseAdmin.from('admin_audit_log').insert({
            user_id: userProfileId,
            action,
            resource_type: resourceType,
            resource_id: resourceId,
            old_values: oldValues ? JSON.stringify(oldValues) : null,
            new_values: newValues ? JSON.stringify(newValues) : null
        });
    } catch (error) {
        console.error('Error logging admin action:', error);
    }
}
function withAdminAuth(handler, requiredPermissions) {
    return async (request)=>{
        const authResult = await checkAdminPermissions(requiredPermissions, request);
        if (!authResult.success) {
            return new Response(JSON.stringify({
                success: false,
                error: authResult.error
            }), {
                status: authResult.status || 500,
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }
        return handler(request, {
            user: authResult.user,
            supabase: authResult.supabase
        });
    };
}
function withAdminAuthPages(handler, requiredPermissions) {
    return async (req, res)=>{
        const authResult = await checkAdminPermissions(requiredPermissions, req);
        if (!authResult.success) {
            return res.status(authResult.status || 500).json({
                success: false,
                error: authResult.error
            });
        }
        return handler(req, res, {
            user: authResult.user,
            supabase: authResult.supabase
        });
    };
}
function getRequestInfo(request) {
    if ('query' in request) {
        // NextApiRequest (Pages Router)
        const req = request;
        return {
            method: req.method || 'GET',
            url: req.url || 'unknown',
            userAgent: req.headers['user-agent'] || 'unknown',
            ip: req.headers['x-forwarded-for'] || req.headers['x-real-ip'] || req.connection?.remoteAddress || 'unknown'
        };
    } else {
        // NextRequest (App Router)
        const req = request;
        return {
            method: req.method,
            url: req.url,
            userAgent: req.headers.get('user-agent') || 'unknown',
            ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown'
        };
    }
}

//# sourceMappingURL=data:application/json;base64,