{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useSidebar.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TESTS PARA HOOK SIDEBAR\n// ===================================\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useSidebar } from '@/hooks/useSidebar';\n\n// Mock para eventos del DOM\nconst mockAddEventListener = jest.fn();\nconst mockRemoveEventListener = jest.fn();\n\nbeforeEach(() => {\n  // Reset mocks\n  mockAddEventListener.mockClear();\n  mockRemoveEventListener.mockClear();\n  \n  // Mock document.addEventListener\n  Object.defineProperty(document, 'addEventListener', {\n    value: mockAddEventListener,\n    writable: true,\n  });\n  \n  Object.defineProperty(document, 'removeEventListener', {\n    value: mockRemoveEventListener,\n    writable: true,\n  });\n});\n\ndescribe('useSidebar', () => {\n  it('should initialize with closed state', () => {\n    const { result } = renderHook(() => useSidebar());\n    \n    expect(result.current.isOpen).toBe(false);\n  });\n\n  it('should toggle sidebar state', () => {\n    const { result } = renderHook(() => useSidebar());\n    \n    act(() => {\n      result.current.toggle();\n    });\n    \n    expect(result.current.isOpen).toBe(true);\n    \n    act(() => {\n      result.current.toggle();\n    });\n    \n    expect(result.current.isOpen).toBe(false);\n  });\n\n  it('should open sidebar', () => {\n    const { result } = renderHook(() => useSidebar());\n    \n    act(() => {\n      result.current.open();\n    });\n    \n    expect(result.current.isOpen).toBe(true);\n  });\n\n  it('should close sidebar', () => {\n    const { result } = renderHook(() => useSidebar());\n    \n    // First open it\n    act(() => {\n      result.current.open();\n    });\n    \n    expect(result.current.isOpen).toBe(true);\n    \n    // Then close it\n    act(() => {\n      result.current.close();\n    });\n    \n    expect(result.current.isOpen).toBe(false);\n  });\n\n  it('should add event listeners when sidebar is open', () => {\n    const { result } = renderHook(() => useSidebar());\n    \n    act(() => {\n      result.current.open();\n    });\n    \n    expect(mockAddEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function));\n    expect(mockAddEventListener).toHaveBeenCalledWith('keydown', expect.any(Function));\n  });\n\n  it('should remove event listeners when sidebar is closed', () => {\n    const { result } = renderHook(() => useSidebar());\n    \n    // Open sidebar first\n    act(() => {\n      result.current.open();\n    });\n    \n    // Then close it\n    act(() => {\n      result.current.close();\n    });\n    \n    expect(mockRemoveEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function));\n    expect(mockRemoveEventListener).toHaveBeenCalledWith('keydown', expect.any(Function));\n  });\n\n  it('should provide stable function references', () => {\n    const { result, rerender } = renderHook(() => useSidebar());\n    \n    const initialToggle = result.current.toggle;\n    const initialOpen = result.current.open;\n    const initialClose = result.current.close;\n    \n    rerender();\n    \n    expect(result.current.toggle).toBe(initialToggle);\n    expect(result.current.open).toBe(initialOpen);\n    expect(result.current.close).toBe(initialClose);\n  });\n});\n"],"names":["mockAddEventListener","jest","fn","mockRemoveEventListener","beforeEach","mockClear","Object","defineProperty","document","value","writable","describe","it","result","renderHook","useSidebar","expect","current","isOpen","toBe","act","toggle","open","close","toHaveBeenCalledWith","any","Function","rerender","initialToggle","initialOpen","initialClose"],"mappings":"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"}