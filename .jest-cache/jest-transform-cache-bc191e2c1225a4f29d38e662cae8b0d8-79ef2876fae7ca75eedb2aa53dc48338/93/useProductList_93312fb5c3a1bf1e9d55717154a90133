23ac7cc9fb5ec3a9241b6a59436ecdf2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProductList", {
    enumerable: true,
    get: function() {
        return useProductList;
    }
});
const _react = require("react");
function useProductList() {
    console.log('üîß useProductList: Hook iniciado');
    const [products, setProducts] = (0, _react.useState)([]);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        const fetchProducts = async ()=>{
            try {
                console.log('üîß useProductList: Iniciando fetch...');
                setIsLoading(true);
                setError(null);
                const response = await fetch('/api/admin/products?limit=25', {
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                console.log('üîß useProductList: Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                console.log('üîß useProductList: Respuesta completa:', data);
                console.log('üîß useProductList: data.data:', data.data);
                if (Array.isArray(data.data)) {
                    setProducts(data.data);
                    console.log('üîß useProductList: ‚úÖ Productos cargados:', data.data.length);
                } else {
                    throw new Error('Estructura de respuesta inv√°lida - data no es un array');
                }
            } catch (err) {
                console.error('üîß useProductList: ‚ùå Error:', err);
                setError(err instanceof Error ? err.message : 'Error desconocido');
                setProducts([]);
            } finally{
                setIsLoading(false);
            }
        };
        fetchProducts();
    }, []);
    return {
        products,
        isLoading,
        error
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXGFkbWluXFx1c2VQcm9kdWN0TGlzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuaW50ZXJmYWNlIFByb2R1Y3Qge1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgcHJpY2U6IG51bWJlcjtcclxuICBzdG9jazogbnVtYmVyO1xyXG4gIGNhdGVnb3J5X2lkOiBudW1iZXI7XHJcbiAgaW1hZ2VzOiB7XHJcbiAgICBtYWluOiBzdHJpbmc7XHJcbiAgICBnYWxsZXJ5OiBzdHJpbmdbXTtcclxuICAgIHByZXZpZXdzOiBzdHJpbmdbXTtcclxuICAgIHRodW1ibmFpbHM6IHN0cmluZ1tdO1xyXG4gIH07XHJcbiAgY3JlYXRlZF9hdDogc3RyaW5nO1xyXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZztcclxuICBjYXRlZ29yeV9uYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBQcm9kdWN0TGlzdFJlc3BvbnNlIHtcclxuICBkYXRhOiBQcm9kdWN0W107XHJcbiAgdG90YWw6IG51bWJlcjtcclxuICBwYWdlOiBudW1iZXI7XHJcbiAgcGFnZVNpemU6IG51bWJlcjtcclxuICB0b3RhbFBhZ2VzOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIb29rIGVzdMOhbmRhciBwYXJhIGdlc3Rpw7NuIGRlIHByb2R1Y3RvcyBlbiBlbCBwYW5lbCBhZG1pbmlzdHJhdGl2b1xyXG4gKlxyXG4gKiBGdW5jaW9uYWxpZGFkZXM6XHJcbiAqIC0gQ29uc3VsdGEgcmVhbCBhIGxhIEFQSSAvYXBpL2FkbWluL3Byb2R1Y3RzXHJcbiAqIC0gQ2FyZ2EgZGUgMjUgcHJvZHVjdG9zIHJlYWxlcyBkZSBTdXBhYmFzZSBwb3IgcMOhZ2luYVxyXG4gKiAtIEluZm9ybWFjacOzbiBkZSBwYWdpbmFjacOzbiBjb21wbGV0YVxyXG4gKiAtIERhdG9zIGNvbXBsZXRvcyAobm9tYnJlcywgcHJlY2lvcywgc3RvY2ssIGNhdGVnb3LDrWFzLCBpbcOhZ2VuZXMpXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEVzdGFkbyBkZWwgaG9vayBjb24gcHJvZHVjdG9zLCBsb2FkaW5nIHkgZXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VQcm9kdWN0TGlzdCgpIHtcclxuICBjb25zb2xlLmxvZygn8J+UpyB1c2VQcm9kdWN0TGlzdDogSG9vayBpbmljaWFkbycpO1xyXG4gIGNvbnN0IFtwcm9kdWN0cywgc2V0UHJvZHVjdHNdID0gdXNlU3RhdGU8UHJvZHVjdFtdPihbXSk7XHJcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBmZXRjaFByb2R1Y3RzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIHVzZVByb2R1Y3RMaXN0OiBJbmljaWFuZG8gZmV0Y2guLi4nKTtcclxuICAgICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XHJcbiAgICAgICAgc2V0RXJyb3IobnVsbCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvYWRtaW4vcHJvZHVjdHM/bGltaXQ9MjUnLCB7XHJcbiAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zb2xlLmxvZygn8J+UpyB1c2VQcm9kdWN0TGlzdDogUmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7XHJcblxyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkYXRhOiBQcm9kdWN0TGlzdFJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIHVzZVByb2R1Y3RMaXN0OiBSZXNwdWVzdGEgY29tcGxldGE6JywgZGF0YSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ/CflKcgdXNlUHJvZHVjdExpc3Q6IGRhdGEuZGF0YTonLCBkYXRhLmRhdGEpO1xyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhLmRhdGEpKSB7XHJcbiAgICAgICAgICBzZXRQcm9kdWN0cyhkYXRhLmRhdGEpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflKcgdXNlUHJvZHVjdExpc3Q6IOKchSBQcm9kdWN0b3MgY2FyZ2Fkb3M6JywgZGF0YS5kYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXN0cnVjdHVyYSBkZSByZXNwdWVzdGEgaW52w6FsaWRhIC0gZGF0YSBubyBlcyB1biBhcnJheScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign8J+UpyB1c2VQcm9kdWN0TGlzdDog4p2MIEVycm9yOicsIGVycik7XHJcbiAgICAgICAgc2V0RXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdFcnJvciBkZXNjb25vY2lkbycpO1xyXG4gICAgICAgIHNldFByb2R1Y3RzKFtdKTtcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZldGNoUHJvZHVjdHMoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwcm9kdWN0cyxcclxuICAgIGlzTG9hZGluZyxcclxuICAgIGVycm9yXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgeyBQcm9kdWN0LCBQcm9kdWN0TGlzdFJlc3BvbnNlIH07XHJcbiJdLCJuYW1lcyI6WyJ1c2VQcm9kdWN0TGlzdCIsImNvbnNvbGUiLCJsb2ciLCJwcm9kdWN0cyIsInNldFByb2R1Y3RzIiwidXNlU3RhdGUiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJlcnJvciIsInNldEVycm9yIiwidXNlRWZmZWN0IiwiZmV0Y2hQcm9kdWN0cyIsInJlc3BvbnNlIiwiZmV0Y2giLCJjcmVkZW50aWFscyIsImhlYWRlcnMiLCJzdGF0dXMiLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZXJyIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF1Q2dCQTs7O2VBQUFBOzs7dUJBdkNvQjtBQXVDN0IsU0FBU0E7SUFDZEMsUUFBUUMsR0FBRyxDQUFDO0lBQ1osTUFBTSxDQUFDQyxVQUFVQyxZQUFZLEdBQUdDLElBQUFBLGVBQVEsRUFBWSxFQUFFO0lBQ3RELE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHRixJQUFBQSxlQUFRLEVBQUM7SUFDM0MsTUFBTSxDQUFDRyxPQUFPQyxTQUFTLEdBQUdKLElBQUFBLGVBQVEsRUFBZ0I7SUFFbERLLElBQUFBLGdCQUFTLEVBQUM7UUFDUixNQUFNQyxnQkFBZ0I7WUFDcEIsSUFBSTtnQkFDRlYsUUFBUUMsR0FBRyxDQUFDO2dCQUNaSyxhQUFhO2dCQUNiRSxTQUFTO2dCQUVULE1BQU1HLFdBQVcsTUFBTUMsTUFBTSxnQ0FBZ0M7b0JBQzNEQyxhQUFhO29CQUNiQyxTQUFTO3dCQUNQLGdCQUFnQjtvQkFDbEI7Z0JBQ0Y7Z0JBQ0FkLFFBQVFDLEdBQUcsQ0FBQyx1Q0FBdUNVLFNBQVNJLE1BQU07Z0JBRWxFLElBQUksQ0FBQ0osU0FBU0ssRUFBRSxFQUFFO29CQUNoQixNQUFNLElBQUlDLE1BQU0sQ0FBQyxNQUFNLEVBQUVOLFNBQVNJLE1BQU0sQ0FBQyxFQUFFLEVBQUVKLFNBQVNPLFVBQVUsRUFBRTtnQkFDcEU7Z0JBRUEsTUFBTUMsT0FBNEIsTUFBTVIsU0FBU1MsSUFBSTtnQkFDckRwQixRQUFRQyxHQUFHLENBQUMsMENBQTBDa0I7Z0JBQ3REbkIsUUFBUUMsR0FBRyxDQUFDLGlDQUFpQ2tCLEtBQUtBLElBQUk7Z0JBRXRELElBQUlFLE1BQU1DLE9BQU8sQ0FBQ0gsS0FBS0EsSUFBSSxHQUFHO29CQUM1QmhCLFlBQVlnQixLQUFLQSxJQUFJO29CQUNyQm5CLFFBQVFDLEdBQUcsQ0FBQyw0Q0FBNENrQixLQUFLQSxJQUFJLENBQUNJLE1BQU07Z0JBQzFFLE9BQU87b0JBQ0wsTUFBTSxJQUFJTixNQUFNO2dCQUNsQjtZQUNGLEVBQUUsT0FBT08sS0FBSztnQkFDWnhCLFFBQVFPLEtBQUssQ0FBQywrQkFBK0JpQjtnQkFDN0NoQixTQUFTZ0IsZUFBZVAsUUFBUU8sSUFBSUMsT0FBTyxHQUFHO2dCQUM5Q3RCLFlBQVksRUFBRTtZQUNoQixTQUFVO2dCQUNSRyxhQUFhO1lBQ2Y7UUFDRjtRQUVBSTtJQUNGLEdBQUcsRUFBRTtJQUVMLE9BQU87UUFDTFI7UUFDQUc7UUFDQUU7SUFDRjtBQUNGIn0=