3c19941650c77ae9383ae933d38fdeb6
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Checkbox: function() {
        return Checkbox;
    },
    CheckboxGroup: function() {
        return CheckboxGroup;
    },
    SwitchCheckbox: function() {
        return SwitchCheckbox;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactcheckbox = /*#__PURE__*/ _interop_require_wildcard(require("@radix-ui/react-checkbox"));
const _lucidereact = require("lucide-react");
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const checkboxVariants = (0, _classvarianceauthority.cva)("peer h-4 w-4 shrink-0 rounded-sm border border-gray-300 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200", {
    variants: {
        variant: {
            default: "data-[state=checked]:bg-primary data-[state=checked]:text-white data-[state=checked]:border-primary",
            destructive: "data-[state=checked]:bg-red-600 data-[state=checked]:text-white data-[state=checked]:border-red-600",
            success: "data-[state=checked]:bg-green-600 data-[state=checked]:text-white data-[state=checked]:border-green-600",
            warning: "data-[state=checked]:bg-yellow-600 data-[state=checked]:text-white data-[state=checked]:border-yellow-600"
        },
        size: {
            sm: "h-3 w-3",
            md: "h-4 w-4",
            lg: "h-5 w-5"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "md"
    }
});
const Checkbox = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, label, description, error, indeterminate, id, ...props }, ref)=>{
    const generatedId = _react.useId();
    const checkboxId = id || generatedId;
    const hasError = !!error;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-2",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-start space-x-2",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Root, {
                        ref: ref,
                        id: checkboxId,
                        className: (0, _utils.cn)(checkboxVariants({
                            variant: hasError ? "destructive" : variant,
                            size
                        }), hasError && "border-red-500", className),
                        ...props,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Indicator, {
                            className: (0, _utils.cn)("flex items-center justify-center text-current"),
                            children: indeterminate ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Minus, {
                                className: "h-3 w-3"
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Check, {
                                className: "h-3 w-3"
                            })
                        })
                    }),
                    (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "grid gap-1.5 leading-none",
                        children: [
                            label && /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                                htmlFor: checkboxId,
                                className: (0, _utils.cn)("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer", hasError && "text-red-600"),
                                children: [
                                    label,
                                    props.required && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-red-500 ml-1",
                                        children: "*"
                                    })
                                ]
                            }),
                            description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: (0, _utils.cn)("text-xs text-gray-600", hasError && "text-red-500"),
                                children: description
                            })
                        ]
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: "text-xs text-red-600 mt-1",
                children: error
            })
        ]
    });
});
Checkbox.displayName = _reactcheckbox.Root.displayName;
function CheckboxGroup({ children, label, description, error, orientation = "vertical", className }) {
    const hasError = !!error;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: (0, _utils.cn)("space-y-3", className),
        children: [
            (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-1",
                children: [
                    label && /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        className: (0, _utils.cn)("text-sm font-medium text-gray-900", hasError && "text-red-600"),
                        children: label
                    }),
                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: (0, _utils.cn)("text-xs text-gray-600", hasError && "text-red-500"),
                        children: description
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: (0, _utils.cn)("space-y-2", orientation === "horizontal" && "flex flex-wrap gap-4 space-y-0"),
                children: children
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: "text-xs text-red-600",
                children: error
            })
        ]
    });
}
const SwitchCheckbox = /*#__PURE__*/ _react.forwardRef(({ className, switchStyle = true, size = "md", ...props }, ref)=>{
    if (!switchStyle) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Checkbox, {
            ref: ref,
            className: className,
            size: size,
            ...props
        });
    }
    const sizeClasses = {
        sm: "h-4 w-7",
        md: "h-5 w-9",
        lg: "h-6 w-11"
    };
    const thumbSizeClasses = {
        sm: "h-3 w-3 data-[state=checked]:translate-x-3",
        md: "h-4 w-4 data-[state=checked]:translate-x-4",
        lg: "h-5 w-5 data-[state=checked]:translate-x-5"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Root, {
        ref: ref,
        className: (0, _utils.cn)("peer inline-flex shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-gray-200", sizeClasses[size || "md"], className),
        ...props,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactcheckbox.Indicator, {
            className: (0, _utils.cn)("pointer-events-none block rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=unchecked]:translate-x-0", thumbSizeClasses[size || "md"])
        })
    });
});
SwitchCheckbox.displayName = "SwitchCheckbox";

//# sourceMappingURL=data:application/json;base64,