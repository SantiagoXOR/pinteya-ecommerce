{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useProducts.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TEST useProducts HOOK\n// ===================================\n\nimport { renderHook, waitFor, act } from '@testing-library/react'\nimport { useProducts } from '@/hooks/useProducts'\n\n// Mock data\nconst mockProductsResponse = {\n  success: true,\n  data: [\n    {\n      id: 1,\n      name: 'Test Product 1',\n      slug: 'test-product-1',\n      description: 'Test description',\n      price: 1000,\n      discounted_price: 900,\n      stock: 10,\n      category_id: 1,\n      images: { previews: ['/test1.jpg'] },\n      category: { id: 1, name: 'Test Category', slug: 'test-category' },\n    },\n    {\n      id: 2,\n      name: 'Test Product 2',\n      slug: 'test-product-2',\n      description: 'Test description 2',\n      price: 2000,\n      discounted_price: null,\n      stock: 5,\n      category_id: 2,\n      images: { previews: ['/test2.jpg'] },\n      category: { id: 2, name: 'Test Category 2', slug: 'test-category-2' },\n    },\n  ],\n  pagination: {\n    page: 1,\n    limit: 12,\n    total: 2,\n    totalPages: 1,\n  },\n}\n\nconst mockCategoriesResponse = {\n  success: true,\n  data: [\n    { id: 1, name: 'Test Category', slug: 'test-category' },\n    { id: 2, name: 'Test Category 2', slug: 'test-category-2' },\n  ],\n}\n\n// Mock fetch\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\ndescribe('useProducts Hook', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => mockProductsResponse,\n    })\n  })\n\n  it('fetches products on mount', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    // Initially loading should be true\n    expect(result.current.loading).toBe(true)\n    expect(result.current.products).toEqual([])\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Should have fetched products - the hook may not include default parameters\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringContaining('/api/products'),\n      expect.objectContaining({\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    )\n    expect(result.current.products).toHaveLength(2)\n    // Products are adapted, so we check the adapted structure\n    expect(result.current.products[0]).toBeDefined()\n  })\n\n  it('fetches products successfully', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Should have fetched products\n    expect(mockFetch).toHaveBeenCalled()\n    expect(result.current.products).toHaveLength(2)\n    expect(result.current.hasError).toBe(false)\n  })\n\n  it('handles search functionality', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Clear previous calls\n    mockFetch.mockClear()\n\n    // Mock search response\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        ...mockProductsResponse,\n        data: [mockProductsResponse.data[0]], // Only first product\n      }),\n    })\n\n    // Perform search\n    await act(async () => {\n      await result.current.searchProducts('Test Product 1')\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringContaining('/api/products'),\n      expect.objectContaining({\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    )\n  })\n\n  it('handles category filtering', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Clear previous calls\n    mockFetch.mockClear()\n\n    // Mock category filter response\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        ...mockProductsResponse,\n        data: [mockProductsResponse.data[0]], // Only first product\n      }),\n    })\n\n    // Filter by category\n    await act(async () => {\n      await result.current.filterByCategory('1')\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringMatching(/\\/api\\/products\\?.*category=1/),\n      expect.objectContaining({\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    )\n  })\n\n  it('handles pagination', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Clear previous calls\n    mockFetch.mockClear()\n\n    // Mock page 2 response\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        ...mockProductsResponse,\n        pagination: { ...mockProductsResponse.pagination, page: 2 },\n      }),\n    })\n\n    // Go to page 2\n    await act(async () => {\n      await result.current.fetchProducts({ page: 2 })\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringMatching(/\\/api\\/products\\?.*page=2/),\n      expect.objectContaining({\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    )\n    expect(result.current.pagination.page).toBe(2)\n  })\n\n  it('handles price range filtering', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Clear previous calls\n    mockFetch.mockClear()\n\n    // Mock price filter response\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockProductsResponse,\n    })\n\n    // Filter by price range\n    await act(async () => {\n      await result.current.fetchProducts({ priceMin: 500, priceMax: 1500 })\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringMatching(/\\/api\\/products\\?.*priceMin=500.*priceMax=1500/),\n      expect.objectContaining({\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    )\n  })\n\n  it('handles sorting', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Clear previous calls\n    mockFetch.mockClear()\n\n    // Mock sort response\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockProductsResponse,\n    })\n\n    // Sort by price ascending\n    await act(async () => {\n      await result.current.fetchProducts({ sortBy: 'price', sortOrder: 'asc' })\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringMatching(/\\/api\\/products\\?.*sortBy=price.*sortOrder=asc/),\n      expect.objectContaining({\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    )\n  })\n\n  it('handles API errors gracefully', async () => {\n    mockFetch.mockRejectedValueOnce(new Error('API Error'))\n\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    expect(result.current.error).toBe('API Error')\n    expect(result.current.products).toEqual([])\n  })\n\n  it('handles HTTP error responses', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 500,\n      statusText: 'Internal Server Error',\n      json: async () => ({ error: 'Server Error' }),\n    })\n\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    expect(result.current.error).toContain('Error 500')\n    expect(result.current.products).toEqual([])\n  })\n\n  it('clears filters correctly', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Apply some filters first\n    await act(async () => {\n      await result.current.searchProducts('test')\n    })\n\n    await act(async () => {\n      await result.current.filterByCategory('1')\n    })\n\n    // Clear previous calls\n    mockFetch.mockClear()\n\n    // Mock reset response\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockProductsResponse,\n    })\n\n    // Clear filters\n    await act(async () => {\n      await result.current.clearFilters()\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringMatching(/\\/api\\/products\\?.*page=1/),\n      expect.objectContaining({\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    )\n  })\n\n  it('maintains loading state during requests', async () => {\n    const { result } = renderHook(() => useProducts())\n\n    // Initial loading\n    expect(result.current.loading).toBe(true)\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Mock slow response\n    let resolvePromise: (value: any) => void\n    const slowPromise = new Promise(resolve => {\n      resolvePromise = resolve\n    })\n\n    mockFetch.mockReturnValueOnce(slowPromise)\n\n    // Start new request\n    act(() => {\n      result.current.searchProducts('test')\n    })\n\n    // Should be loading again\n    await waitFor(() => {\n      expect(result.current.loading).toBe(true)\n    })\n\n    // Resolve the promise\n    resolvePromise!({\n      ok: true,\n      json: async () => mockProductsResponse,\n    })\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n  })\n})\n"],"names":["mockProductsResponse","success","data","id","name","slug","description","price","discounted_price","stock","category_id","images","previews","category","pagination","page","limit","total","totalPages","mockCategoriesResponse","mockFetch","jest","fn","global","fetch","describe","beforeEach","clearAllMocks","mockResolvedValue","ok","json","it","result","renderHook","useProducts","expect","current","loading","toBe","products","toEqual","waitFor","toHaveBeenCalledWith","stringContaining","objectContaining","method","headers","toHaveLength","toBeDefined","toHaveBeenCalled","hasError","mockClear","mockResolvedValueOnce","act","searchProducts","filterByCategory","stringMatching","fetchProducts","priceMin","priceMax","sortBy","sortOrder","mockRejectedValueOnce","Error","error","status","statusText","toContain","clearFilters","resolvePromise","slowPromise","Promise","resolve","mockReturnValueOnce"],"mappings":"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"}