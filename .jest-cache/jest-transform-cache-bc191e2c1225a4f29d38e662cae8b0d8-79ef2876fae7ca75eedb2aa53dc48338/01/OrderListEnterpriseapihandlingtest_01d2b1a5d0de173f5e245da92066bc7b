314972802a53ce306769638ec65eb555
// ===================================
// PRUEBAS UNITARIAS PARA MANEJO DE API - ORDER LIST ENTERPRISE
// ===================================
"use strict";
jest.mock('../../../../hooks/use-toast', ()=>({
        useToast: ()=>({
                toast: mockToast
            })
    }));
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn()
            }),
        useSearchParams: ()=>new URLSearchParams(),
        usePathname: ()=>'/admin/orders'
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _OrderListEnterprise = require("../../../../components/admin/orders/OrderListEnterprise");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ===================================
// MOCKS Y SETUP
// ===================================
const mockToast = jest.fn();
// ===================================
// DATOS DE PRUEBA
// ===================================
const mockValidApiResponse = {
    success: true,
    data: {
        orders: [
            {
                id: '1',
                order_number: 'ORD-001',
                status: 'pending',
                total_amount: 100.00,
                created_at: '2024-01-01T00:00:00Z',
                user_profiles: {
                    name: 'Test User',
                    email: 'test@example.com'
                }
            }
        ],
        pagination: {
            page: 1,
            limit: 20,
            total: 1,
            totalPages: 1,
            hasNextPage: false,
            hasPreviousPage: false
        },
        filters: {
            search: '',
            status: 'all',
            payment_status: 'all'
        }
    }
};
const mockEmptyApiResponse = {
    success: true,
    data: {
        orders: [],
        pagination: {
            page: 1,
            limit: 20,
            total: 0,
            totalPages: 0,
            hasNextPage: false,
            hasPreviousPage: false
        },
        filters: {
            search: '',
            status: 'all',
            payment_status: 'all'
        }
    }
};
// ===================================
// HELPER FUNCTIONS
// ===================================
const renderComponent = (props = {})=>{
    const defaultProps = {
        onOrderSelect: jest.fn(),
        onOrderEdit: jest.fn(),
        onBulkAction: jest.fn(),
        enableBulkActions: true,
        enableFilters: true,
        pageSize: 20,
        ...props
    };
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {
        ...defaultProps
    }));
};
const createMockFetch = (response, shouldReject = false)=>{
    return jest.fn().mockImplementation(()=>{
        if (shouldReject) {
            return Promise.reject(new Error('Network error'));
        }
        return Promise.resolve({
            ok: response.success !== false,
            status: response.success !== false ? 200 : 500,
            json: ()=>Promise.resolve(response)
        });
    });
};
// ===================================
// TESTS DE MANEJO DE API
// ===================================
describe('OrderListEnterprise - API Response Handling', ()=>{
    let originalFetch;
    beforeEach(()=>{
        originalFetch = global.fetch;
        mockToast.mockClear();
    });
    afterEach(()=>{
        global.fetch = originalFetch;
        jest.clearAllMocks();
    });
    describe('Respuestas Válidas de API', ()=>{
        test('debe manejar respuesta válida con órdenes', async ()=>{
            // Arrange
            global.fetch = createMockFetch(mockValidApiResponse);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('ORD-001')).toBeInTheDocument();
                expect(_react1.screen.getByText('Test User')).toBeInTheDocument();
            });
            expect(mockToast).not.toHaveBeenCalled();
        });
        test('debe manejar respuesta válida sin órdenes', async ()=>{
            // Arrange
            global.fetch = createMockFetch(mockEmptyApiResponse);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/No se encontraron órdenes/i)).toBeInTheDocument();
            });
            expect(mockToast).not.toHaveBeenCalled();
        });
        test('debe manejar respuesta con estructura de datos incompleta', async ()=>{
            // Arrange - Respuesta sin campo orders
            const incompleteResponse = {
                success: true,
                data: {
                    pagination: mockValidApiResponse.data.pagination,
                    filters: mockValidApiResponse.data.filters
                }
            };
            global.fetch = createMockFetch(incompleteResponse);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert - Debe manejar gracefully la ausencia de orders
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/No se encontraron órdenes/i)).toBeInTheDocument();
            });
            expect(mockToast).not.toHaveBeenCalled();
        });
        test('debe manejar respuesta con paginación nula', async ()=>{
            // Arrange
            const responseWithNullPagination = {
                success: true,
                data: {
                    orders: mockValidApiResponse.data.orders,
                    pagination: null,
                    filters: mockValidApiResponse.data.filters
                }
            };
            global.fetch = createMockFetch(responseWithNullPagination);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert - Debe mostrar órdenes sin paginación
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('ORD-001')).toBeInTheDocument();
            });
            expect(mockToast).not.toHaveBeenCalled();
        });
    });
    describe('Manejo de Errores de API', ()=>{
        test('debe manejar error de red', async ()=>{
            // Arrange
            global.fetch = createMockFetch(null, true);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: 'Error',
                    description: expect.stringContaining('Error al cargar las órdenes'),
                    variant: 'destructive'
                });
            });
        });
        test('debe manejar respuesta HTTP 500', async ()=>{
            // Arrange
            const errorResponse = {
                success: false,
                error: 'Internal server error',
                message: 'Error interno del servidor'
            };
            global.fetch = createMockFetch(errorResponse);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: 'Error',
                    description: expect.stringContaining('Error al cargar las órdenes'),
                    variant: 'destructive'
                });
            });
        });
        test('debe manejar respuesta JSON malformada', async ()=>{
            // Arrange
            global.fetch = jest.fn().mockResolvedValue({
                ok: true,
                status: 200,
                json: ()=>Promise.reject(new Error('Invalid JSON'))
            });
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: 'Error',
                    description: expect.stringContaining('Error al cargar las órdenes'),
                    variant: 'destructive'
                });
            });
        });
        test('debe manejar timeout de API', async ()=>{
            // Arrange
            global.fetch = jest.fn().mockImplementation(()=>{
                return new Promise((_, reject)=>{
                    setTimeout(()=>reject(new Error('Request timeout')), 100);
                });
            });
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: 'Error',
                    description: expect.stringContaining('Error al cargar las órdenes'),
                    variant: 'destructive'
                });
            }, {
                timeout: 3000
            });
        });
    });
    describe('Casos Edge de Estructura de Datos', ()=>{
        test('debe manejar órdenes con campos faltantes', async ()=>{
            // Arrange
            const responseWithIncompleteOrders = {
                success: true,
                data: {
                    orders: [
                        {
                            id: '1',
                            order_number: 'ORD-001'
                        }
                    ],
                    pagination: mockValidApiResponse.data.pagination,
                    filters: mockValidApiResponse.data.filters
                }
            };
            global.fetch = createMockFetch(responseWithIncompleteOrders);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert - Debe renderizar sin errores
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('ORD-001')).toBeInTheDocument();
            });
            expect(mockToast).not.toHaveBeenCalled();
        });
        test('debe manejar user_profiles nulo', async ()=>{
            // Arrange
            const responseWithNullUserProfiles = {
                success: true,
                data: {
                    orders: [
                        {
                            id: '1',
                            order_number: 'ORD-001',
                            status: 'pending',
                            total_amount: 100.00,
                            created_at: '2024-01-01T00:00:00Z',
                            user_profiles: null
                        }
                    ],
                    pagination: mockValidApiResponse.data.pagination,
                    filters: mockValidApiResponse.data.filters
                }
            };
            global.fetch = createMockFetch(responseWithNullUserProfiles);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert - Debe renderizar sin errores
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('ORD-001')).toBeInTheDocument();
            });
            expect(mockToast).not.toHaveBeenCalled();
        });
        test('debe manejar fechas inválidas', async ()=>{
            // Arrange
            const responseWithInvalidDates = {
                success: true,
                data: {
                    orders: [
                        {
                            id: '1',
                            order_number: 'ORD-001',
                            status: 'pending',
                            total_amount: 100.00,
                            created_at: 'invalid-date',
                            user_profiles: {
                                name: 'Test User',
                                email: 'test@example.com'
                            }
                        }
                    ],
                    pagination: mockValidApiResponse.data.pagination,
                    filters: mockValidApiResponse.data.filters
                }
            };
            global.fetch = createMockFetch(responseWithInvalidDates);
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert - Debe renderizar sin errores
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('ORD-001')).toBeInTheDocument();
            });
            expect(mockToast).not.toHaveBeenCalled();
        });
    });
    describe('Reintentos y Recuperación', ()=>{
        test('debe reintentar automáticamente en caso de fallo temporal', async ()=>{
            // Arrange - Primer intento falla, segundo intento exitoso
            let callCount = 0;
            global.fetch = jest.fn().mockImplementation(()=>{
                callCount++;
                if (callCount === 1) {
                    return Promise.reject(new Error('Temporary network error'));
                }
                return Promise.resolve({
                    ok: true,
                    status: 200,
                    json: ()=>Promise.resolve(mockValidApiResponse)
                });
            });
            // Act
            await (0, _react1.act)(async ()=>{
                renderComponent();
            });
            // Assert - Debe eventualmente mostrar los datos
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('ORD-001')).toBeInTheDocument();
            }, {
                timeout: 5000
            });
            // Verificar que se hicieron múltiples intentos
            expect(global.fetch).toHaveBeenCalledTimes(2);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,