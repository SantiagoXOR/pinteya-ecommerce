{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security\\penetration-audit-system.test.ts"],"sourcesContent":["/**\n * Tests de Penetración para Sistema de Auditoría Enterprise\n * Valida la robustez del sistema de auditoría contra ataques sofisticados\n */\n\n// Mock de dependencias con eventos simulados\nconst mockEvents: any[] = [];\n\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn((table: string) => {\n      if (table === 'enterprise_audit_events') {\n        return {\n          select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n              single: jest.fn().mockResolvedValue({ data: null, error: null }),\n              range: jest.fn(() => ({\n                order: jest.fn().mockResolvedValue({ data: mockEvents, error: null })\n              }))\n            })),\n            insert: jest.fn((event: any) => {\n              // Simular inserción de evento con timestamp\n              const eventWithTimestamp = {\n                ...event,\n                id: `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n                created_at: new Date().toISOString()\n              };\n              mockEvents.push(eventWithTimestamp);\n              return {\n                select: jest.fn(() => ({\n                  single: jest.fn().mockResolvedValue({ data: { id: 'test_id' }, error: null })\n                }))\n              };\n            }),\n            order: jest.fn(() => ({\n              range: jest.fn().mockResolvedValue({ data: mockEvents, error: null })\n            })),\n            gte: jest.fn(() => ({\n              lte: jest.fn(() => ({\n                order: jest.fn().mockResolvedValue({ data: mockEvents, error: null })\n              })),\n              order: jest.fn().mockResolvedValue({ data: mockEvents, error: null })\n            }))\n          }))\n        };\n      }\n      // Para otras tablas, retornar mock básico\n      return {\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn().mockResolvedValue({ data: null, error: null })\n          }))\n        }))\n      };\n    })\n  }\n}));\n\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn().mockResolvedValue(true)\n}));\n\njest.mock('@/lib/rate-limiting/enterprise-rate-limiter', () => ({\n  metricsCollector: {\n    getMetrics: jest.fn().mockReturnValue({\n      totalRequests: 1000,\n      allowedRequests: 950,\n      blockedRequests: 50,\n      redisHits: 900,\n      memoryFallbacks: 100,\n      errors: 5,\n      averageResponseTime: 45,\n      topBlockedIPs: [\n        { ip: '192.168.1.100', count: 25 },\n        { ip: '10.0.0.50', count: 15 }\n      ],\n      topEndpoints: [\n        { endpoint: '/api/admin', count: 30 },\n        { endpoint: '/api/payments', count: 20 }\n      ]\n    })\n  }\n}));\n\nimport { NextRequest } from 'next/server';\nimport {\n  enterpriseAuditSystem,\n  type EnterpriseSecurityEvent,\n  type SecurityAnomalyDetection,\n  ENTERPRISE_AUDIT_CONFIG\n} from '@/lib/security/enterprise-audit-system';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\ndescribe('Tests de Penetración - Sistema de Auditoría Enterprise', () => {\n  let mockContext: EnterpriseAuthContext;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Limpiar eventos mock\n    mockEvents.length = 0;\n\n    mockContext = {\n      userId: 'test_user_123',\n      sessionId: 'test_session_123',\n      email: 'test@example.com',\n      role: 'admin',\n      permissions: ['admin_access'],\n      sessionValid: true,\n      securityLevel: 'high',\n      ipAddress: '192.168.1.1',\n      userAgent: 'test-agent',\n      supabase: {} as any,\n      validations: {\n        jwtValid: true,\n        csrfValid: true,\n        rateLimitPassed: true,\n        originValid: true\n      }\n    };\n  });\n\n  describe('Ataques de Evasión de Auditoría', () => {\n    it('debe detectar intentos de bypass del sistema de logging', async () => {\n      const evasionAttempts = [\n        // Intento 1: Event type manipulation\n        {\n          user_id: 'attacker_123',\n          event_type: 'AUTH_SUCCESS' as any, // Falso éxito\n          event_category: 'authentication',\n          severity: 'low' as any,\n          description: 'Legitimate login', // Descripción engañosa\n          metadata: { \n            actual_event: 'UNAUTHORIZED_ACCESS',\n            bypass_attempt: true \n          },\n          ip_address: '192.168.1.100',\n          user_agent: 'LegitimateBot/1.0'\n        },\n        \n        // Intento 2: Severity downgrade\n        {\n          user_id: 'attacker_123',\n          event_type: 'SECURITY_VIOLATION' as any,\n          event_category: 'suspicious_behavior',\n          severity: 'low' as any, // Debería ser critical\n          description: 'Minor security issue',\n          metadata: { \n            real_severity: 'critical',\n            admin_access_attempt: true \n          },\n          ip_address: '192.168.1.100',\n          user_agent: 'AttackBot/2.0'\n        },\n\n        // Intento 3: Metadata pollution\n        {\n          user_id: 'attacker_123',\n          event_type: 'DATA_ACCESS' as any,\n          event_category: 'data_access',\n          severity: 'medium' as any,\n          description: 'Normal data access',\n          metadata: {\n            // Intentar contaminar con datos masivos\n            pollution: 'x'.repeat(10000),\n            nested: {\n              deep: {\n                very: {\n                  deep: {\n                    data: 'x'.repeat(5000)\n                  }\n                }\n              }\n            }\n          },\n          ip_address: '192.168.1.100',\n          user_agent: 'DataPollutionBot/1.0'\n        }\n      ];\n\n      const results = [];\n      for (const attempt of evasionAttempts) {\n        try {\n          const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\n            attempt,\n            mockContext\n          );\n          results.push({ success: true, correlationId });\n        } catch (error) {\n          results.push({ success: false, error: error.message });\n        }\n      }\n\n      // Verificar que todos los eventos fueron registrados (no evasión exitosa)\n      expect(results.every(r => r.success)).toBe(true);\n      \n      // Verificar que se generaron correlation IDs únicos\n      const correlationIds = results.map(r => r.correlationId);\n      expect(new Set(correlationIds).size).toBe(correlationIds.length);\n    });\n\n    it('debe resistir ataques de flooding de eventos', async () => {\n      const floodingAttack = Array.from({ length: 1000 }, (_, i) => ({\n        user_id: 'flooder_123',\n        event_type: 'SPAM_EVENT' as any,\n        event_category: 'attack',\n        severity: 'low' as any,\n        description: `Flooding event ${i}`,\n        metadata: { \n          flood_index: i,\n          timestamp: Date.now() + i \n        },\n        ip_address: '10.0.0.100',\n        user_agent: 'FloodBot/1.0'\n      }));\n\n      const startTime = Date.now();\n      const results = [];\n\n      // Intentar flooding masivo\n      for (const event of floodingAttack) {\n        try {\n          const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\n            event,\n            mockContext\n          );\n          results.push({ success: true, correlationId });\n        } catch (error) {\n          results.push({ success: false, error: error.message });\n        }\n      }\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n      const avgTimePerEvent = totalTime / 1000;\n\n      // Verificar que el sistema mantuvo performance\n      expect(avgTimePerEvent).toBeLessThan(10); // < 10ms por evento\n\n      // Verificar que se procesaron todos los eventos\n      expect(results.length).toBe(1000);\n      \n      // Verificar que el sistema no se crasheó\n      const successCount = results.filter(r => r.success).length;\n      expect(successCount).toBeGreaterThan(900); // Al menos 90% exitosos\n    });\n\n    it('debe detectar intentos de manipulación de timestamps', async () => {\n      const timestampManipulationAttempts = [\n        // Futuro lejano\n        {\n          user_id: 'time_attacker_123',\n          event_type: 'AUTH_SUCCESS' as any,\n          event_category: 'authentication',\n          severity: 'low' as any,\n          description: 'Future login attempt',\n          metadata: { \n            manipulated_timestamp: new Date('2030-01-01').toISOString(),\n            real_time: new Date().toISOString()\n          },\n          ip_address: '172.16.0.100',\n          user_agent: 'TimeTravelBot/1.0'\n        },\n        \n        // Pasado lejano\n        {\n          user_id: 'time_attacker_123',\n          event_type: 'DATA_DELETION' as any,\n          event_category: 'data_access',\n          severity: 'critical' as any,\n          description: 'Historical data deletion',\n          metadata: { \n            manipulated_timestamp: new Date('1990-01-01').toISOString(),\n            backdated: true\n          },\n          ip_address: '172.16.0.100',\n          user_agent: 'BackdateBot/1.0'\n        }\n      ];\n\n      const results = [];\n      for (const attempt of timestampManipulationAttempts) {\n        const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\n          attempt,\n          mockContext\n        );\n        results.push(correlationId);\n      }\n\n      // Verificar que se generaron correlation IDs (eventos registrados)\n      expect(results.every(id => id && id.startsWith('corr_'))).toBe(true);\n      \n      // El sistema debería usar sus propios timestamps, no los manipulados\n      expect(results.length).toBe(2);\n    });\n  });\n\n  describe('Ataques de Detección de Anomalías', () => {\n    it('debe detectar patrones de ataque sofisticados', async () => {\n      // Simular patrón de ataque APT (Advanced Persistent Threat)\n      const aptAttackPattern = [\n        // Fase 1: Reconocimiento\n        {\n          user_id: 'apt_actor_123',\n          event_type: 'DATA_ACCESS' as any,\n          event_category: 'data_access',\n          severity: 'low' as any,\n          description: 'User list access',\n          metadata: { phase: 'reconnaissance' },\n          ip_address: '203.0.113.100',\n          user_agent: 'Mozilla/5.0 (legitimate looking)'\n        },\n        \n        // Fase 2: Escalación de privilegios\n        {\n          user_id: 'apt_actor_123',\n          event_type: 'PERMISSION_ESCALATION' as any,\n          event_category: 'authorization',\n          severity: 'medium' as any,\n          description: 'Role change request',\n          metadata: { \n            phase: 'privilege_escalation',\n            target_role: 'admin' \n          },\n          ip_address: '203.0.113.100',\n          user_agent: 'Mozilla/5.0 (legitimate looking)'\n        },\n        \n        // Fase 3: Acceso a datos sensibles\n        {\n          user_id: 'apt_actor_123',\n          event_type: 'SENSITIVE_DATA_ACCESS' as any,\n          event_category: 'data_access',\n          severity: 'high' as any,\n          description: 'Payment data access',\n          metadata: { \n            phase: 'data_exfiltration',\n            data_type: 'payment_info' \n          },\n          ip_address: '203.0.113.100',\n          user_agent: 'Mozilla/5.0 (legitimate looking)'\n        }\n      ];\n\n      // Registrar patrón de ataque con intervalos realistas\n      for (const [index, event] of aptAttackPattern.entries()) {\n        await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\n        \n        // Esperar entre eventos para simular comportamiento real\n        if (index < aptAttackPattern.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n\n      // Ejecutar detección de anomalías\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('apt_actor_123');\n\n      // Verificar que se detectó el patrón APT\n      expect(anomalies.length).toBeGreaterThan(0);\n      \n      // Verificar que se detectaron anomalías de alta confianza\n      const highConfidenceAnomalies = anomalies.filter(a => a.confidence_score > 0.8);\n      expect(highConfidenceAnomalies.length).toBeGreaterThan(0);\n    });\n\n    it('debe detectar ataques de lateral movement', async () => {\n      const lateralMovementPattern = [\n        // Usuario comprometido accede a múltiples sistemas\n        {\n          user_id: 'compromised_user_456',\n          event_type: 'SYSTEM_ACCESS' as any,\n          event_category: 'system_access',\n          severity: 'medium' as any,\n          description: 'Database access',\n          metadata: { \n            system: 'database',\n            unusual_access: true \n          },\n          ip_address: '192.168.1.150',\n          user_agent: 'InternalTool/1.0'\n        },\n        \n        {\n          user_id: 'compromised_user_456',\n          event_type: 'SYSTEM_ACCESS' as any,\n          event_category: 'system_access',\n          severity: 'medium' as any,\n          description: 'File server access',\n          metadata: { \n            system: 'file_server',\n            unusual_time: true \n          },\n          ip_address: '192.168.1.150',\n          user_agent: 'InternalTool/1.0'\n        },\n        \n        {\n          user_id: 'compromised_user_456',\n          event_type: 'SYSTEM_ACCESS' as any,\n          event_category: 'system_access',\n          severity: 'medium' as any,\n          description: 'Admin panel access',\n          metadata: { \n            system: 'admin_panel',\n            privilege_escalation: true \n          },\n          ip_address: '192.168.1.150',\n          user_agent: 'InternalTool/1.0'\n        }\n      ];\n\n      // Registrar patrón de lateral movement\n      for (const event of lateralMovementPattern) {\n        await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\n      }\n\n      // Detectar anomalías\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('compromised_user_456');\n\n      // Verificar detección de lateral movement\n      expect(anomalies.length).toBeGreaterThan(0);\n      \n      // Verificar que se identificó el patrón de acceso múltiple\n      const systemAccessAnomalies = anomalies.filter(a => \n        a.description.includes('system') || a.description.includes('access')\n      );\n      expect(systemAccessAnomalies.length).toBeGreaterThan(0);\n    });\n\n    it('debe detectar ataques de data exfiltration', async () => {\n      const dataExfiltrationPattern = [\n        // Acceso masivo a datos\n        {\n          user_id: 'data_thief_789',\n          event_type: 'BULK_DATA_ACCESS' as any,\n          event_category: 'data_access',\n          severity: 'high' as any,\n          description: 'Large dataset download',\n          metadata: { \n            records_accessed: 10000,\n            data_size_mb: 500,\n            suspicious: true \n          },\n          ip_address: '198.51.100.200',\n          user_agent: 'DataExtractor/2.0'\n        },\n        \n        // Múltiples exportaciones\n        {\n          user_id: 'data_thief_789',\n          event_type: 'DATA_EXPORT' as any,\n          event_category: 'data_access',\n          severity: 'high' as any,\n          description: 'Customer data export',\n          metadata: { \n            export_format: 'csv',\n            records_count: 5000,\n            contains_pii: true \n          },\n          ip_address: '198.51.100.200',\n          user_agent: 'DataExtractor/2.0'\n        },\n        \n        // Acceso fuera de horario\n        {\n          user_id: 'data_thief_789',\n          event_type: 'AFTER_HOURS_ACCESS' as any,\n          event_category: 'suspicious_behavior',\n          severity: 'medium' as any,\n          description: 'Database access at 3 AM',\n          metadata: { \n            access_time: '03:00:00',\n            unusual_hour: true,\n            weekend_access: true \n          },\n          ip_address: '198.51.100.200',\n          user_agent: 'DataExtractor/2.0'\n        }\n      ];\n\n      // Registrar patrón de exfiltración\n      for (const event of dataExfiltrationPattern) {\n        await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\n      }\n\n      // Detectar anomalías\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('data_thief_789');\n\n      // Verificar detección de exfiltración\n      expect(anomalies.length).toBeGreaterThan(0);\n      \n      // Verificar alta confianza en detección\n      const criticalAnomalies = anomalies.filter(a => a.confidence_score > 0.9);\n      expect(criticalAnomalies.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Ataques de Negación de Servicio al Sistema de Auditoría', () => {\n    it('debe resistir ataques de log bombing', async () => {\n      const logBombingAttack = Array.from({ length: 10000 }, (_, i) => ({\n        user_id: `bomber_${i % 100}`, // 100 usuarios diferentes\n        event_type: 'LOG_BOMB' as any,\n        event_category: 'attack',\n        severity: 'low' as any,\n        description: `Log bomb event ${i}`,\n        metadata: { \n          bomb_index: i,\n          payload: 'x'.repeat(1000) // 1KB por evento\n        },\n        ip_address: `10.0.${Math.floor(i/255)}.${i%255}`,\n        user_agent: 'LogBomber/1.0'\n      }));\n\n      const startTime = Date.now();\n      let successCount = 0;\n      let errorCount = 0;\n\n      // Ejecutar log bombing en lotes para simular concurrencia\n      const batchSize = 100;\n      for (let i = 0; i < logBombingAttack.length; i += batchSize) {\n        const batch = logBombingAttack.slice(i, i + batchSize);\n        \n        const batchPromises = batch.map(async (event) => {\n          try {\n            await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext);\n            successCount++;\n          } catch (error) {\n            errorCount++;\n          }\n        });\n\n        await Promise.all(batchPromises);\n      }\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n      const avgTimePerEvent = totalTime / 10000;\n\n      // Verificar que el sistema mantuvo performance razonable\n      expect(avgTimePerEvent).toBeLessThan(50); // < 50ms por evento\n\n      // Verificar que el sistema no se crasheó completamente\n      expect(successCount + errorCount).toBe(10000);\n      \n      // Permitir algunos errores bajo carga extrema, pero no todos\n      expect(successCount).toBeGreaterThan(5000); // Al menos 50% exitosos\n    });\n\n    it('debe manejar ataques de memory exhaustion', async () => {\n      const memoryExhaustionEvents = Array.from({ length: 100 }, (_, i) => ({\n        user_id: 'memory_attacker_999',\n        event_type: 'MEMORY_ATTACK' as any,\n        event_category: 'attack',\n        severity: 'high' as any,\n        description: 'Memory exhaustion attempt',\n        metadata: {\n          // Intentar agotar memoria con objetos grandes\n          large_object: {\n            data: 'x'.repeat(100000), // 100KB\n            nested_arrays: Array.from({ length: 1000 }, (_, j) => ({\n              index: j,\n              payload: 'y'.repeat(1000)\n            }))\n          },\n          attack_vector: 'memory_exhaustion',\n          attempt_number: i\n        },\n        ip_address: '172.16.255.100',\n        user_agent: 'MemoryExhaustionBot/1.0'\n      }));\n\n      const results = [];\n      const startMemory = process.memoryUsage();\n\n      for (const event of memoryExhaustionEvents) {\n        try {\n          const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(\n            event,\n            mockContext\n          );\n          results.push({ success: true, correlationId });\n        } catch (error) {\n          results.push({ success: false, error: error.message });\n        }\n      }\n\n      const endMemory = process.memoryUsage();\n      const memoryIncrease = endMemory.heapUsed - startMemory.heapUsed;\n\n      // Verificar que el aumento de memoria es razonable (< 100MB)\n      expect(memoryIncrease).toBeLessThan(100 * 1024 * 1024);\n      \n      // Verificar que se procesaron los eventos\n      expect(results.length).toBe(100);\n      \n      // Verificar que el sistema mantuvo funcionalidad\n      const successCount = results.filter(r => r.success).length;\n      expect(successCount).toBeGreaterThan(50); // Al menos 50% exitosos\n    });\n  });\n\n  describe('Validación de Integridad del Sistema', () => {\n    it('debe mantener consistencia durante ataques concurrentes', async () => {\n      const concurrentAttacks = [\n        // Ataque 1: Flooding\n        Array.from({ length: 100 }, (_, i) => \n          enterpriseAuditSystem.logEnterpriseEvent({\n            user_id: 'flood_attacker_1',\n            event_type: 'FLOOD_ATTACK' as any,\n            event_category: 'attack',\n            severity: 'low' as any,\n            description: `Flood ${i}`,\n            metadata: { attack_type: 'flood', index: i },\n            ip_address: '10.1.1.100',\n            user_agent: 'FloodBot/1.0'\n          }, mockContext)\n        ),\n        \n        // Ataque 2: Anomaly generation\n        Array.from({ length: 50 }, (_, i) => \n          enterpriseAuditSystem.logEnterpriseEvent({\n            user_id: 'anomaly_attacker_2',\n            event_type: 'ANOMALY_ATTACK' as any,\n            event_category: 'suspicious_behavior',\n            severity: 'high' as any,\n            description: `Anomaly ${i}`,\n            metadata: { attack_type: 'anomaly', index: i },\n            ip_address: '10.2.2.100',\n            user_agent: 'AnomalyBot/1.0'\n          }, mockContext)\n        ),\n        \n        // Ataque 3: Detection evasion\n        Array.from({ length: 25 }, (_, i) => \n          enterpriseAuditSystem.detectAnomalies(`evasion_target_${i}`)\n        )\n      ];\n\n      // Ejecutar todos los ataques concurrentemente\n      const allPromises = concurrentAttacks.flat();\n      const results = await Promise.allSettled(allPromises);\n\n      // Verificar que el sistema mantuvo consistencia\n      const successfulResults = results.filter(r => r.status === 'fulfilled');\n      const failedResults = results.filter(r => r.status === 'rejected');\n\n      // Permitir algunos fallos bajo carga extrema\n      expect(successfulResults.length).toBeGreaterThan(100); // Al menos 60% exitosos\n      \n      // Verificar que no hubo crashes catastróficos\n      expect(failedResults.length).toBeLessThan(75); // Menos del 40% de fallos\n    });\n\n    it('debe preservar datos críticos durante ataques', async () => {\n      // Registrar evento crítico antes del ataque\n      const criticalEvent = {\n        user_id: 'critical_user_999',\n        event_type: 'CRITICAL_SECURITY_EVENT' as any,\n        event_category: 'security_incident',\n        severity: 'critical' as any,\n        description: 'Critical security breach detected',\n        metadata: { \n          incident_id: 'INC-2025-001',\n          severity_level: 'critical',\n          requires_immediate_attention: true\n        },\n        ip_address: '192.168.1.200',\n        user_agent: 'SecuritySystem/1.0'\n      };\n\n      const criticalCorrelationId = await enterpriseAuditSystem.logEnterpriseEvent(\n        criticalEvent,\n        mockContext\n      );\n\n      // Ejecutar ataque masivo\n      const massiveAttack = Array.from({ length: 1000 }, (_, i) => \n        enterpriseAuditSystem.logEnterpriseEvent({\n          user_id: `attacker_${i}`,\n          event_type: 'ATTACK_EVENT' as any,\n          event_category: 'attack',\n          severity: 'low' as any,\n          description: `Attack event ${i}`,\n          metadata: { attack_index: i },\n          ip_address: `192.168.${Math.floor(i/255)}.${i%255}`,\n          user_agent: 'MassAttackBot/1.0'\n        }, mockContext)\n      );\n\n      await Promise.allSettled(massiveAttack);\n\n      // Verificar que el evento crítico se preservó\n      expect(criticalCorrelationId).toBeDefined();\n      expect(criticalCorrelationId).toMatch(/^corr_\\d+_[a-z0-9]+$/);\n      \n      // Verificar que el sistema sigue funcionando\n      const postAttackEvent = {\n        user_id: 'post_attack_user',\n        event_type: 'POST_ATTACK_TEST' as any,\n        event_category: 'test',\n        severity: 'low' as any,\n        description: 'Post attack functionality test',\n        metadata: { test: true },\n        ip_address: '192.168.1.201',\n        user_agent: 'TestBot/1.0'\n      };\n\n      const postAttackCorrelationId = await enterpriseAuditSystem.logEnterpriseEvent(\n        postAttackEvent,\n        mockContext\n      );\n\n      expect(postAttackCorrelationId).toBeDefined();\n    });\n  });\n});\n"],"names":["jest","mock","supabaseAdmin","from","fn","table","select","eq","single","mockResolvedValue","data","error","range","order","mockEvents","insert","event","eventWithTimestamp","id","Date","now","Math","random","toString","substr","created_at","toISOString","push","gte","lte","logSecurityEvent","metricsCollector","getMetrics","mockReturnValue","totalRequests","allowedRequests","blockedRequests","redisHits","memoryFallbacks","errors","averageResponseTime","topBlockedIPs","ip","count","topEndpoints","endpoint","describe","mockContext","beforeEach","clearAllMocks","length","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","it","evasionAttempts","user_id","event_type","event_category","severity","description","metadata","actual_event","bypass_attempt","ip_address","user_agent","real_severity","admin_access_attempt","pollution","repeat","nested","deep","very","results","attempt","correlationId","enterpriseAuditSystem","logEnterpriseEvent","success","message","expect","every","r","toBe","correlationIds","map","Set","size","floodingAttack","Array","_","i","flood_index","timestamp","startTime","endTime","totalTime","avgTimePerEvent","toBeLessThan","successCount","filter","toBeGreaterThan","timestampManipulationAttempts","manipulated_timestamp","real_time","backdated","startsWith","aptAttackPattern","phase","target_role","data_type","index","entries","Promise","resolve","setTimeout","anomalies","detectAnomalies","highConfidenceAnomalies","a","confidence_score","lateralMovementPattern","system","unusual_access","unusual_time","privilege_escalation","systemAccessAnomalies","includes","dataExfiltrationPattern","records_accessed","data_size_mb","suspicious","export_format","records_count","contains_pii","access_time","unusual_hour","weekend_access","criticalAnomalies","logBombingAttack","bomb_index","payload","floor","errorCount","batchSize","batch","slice","batchPromises","all","memoryExhaustionEvents","large_object","nested_arrays","j","attack_vector","attempt_number","startMemory","process","memoryUsage","endMemory","memoryIncrease","heapUsed","concurrentAttacks","attack_type","allPromises","flat","allSettled","successfulResults","status","failedResults","criticalEvent","incident_id","severity_level","requires_immediate_attention","criticalCorrelationId","massiveAttack","attack_index","toBeDefined","toMatch","postAttackEvent","test","postAttackCorrelationId"],"mappings":"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"}