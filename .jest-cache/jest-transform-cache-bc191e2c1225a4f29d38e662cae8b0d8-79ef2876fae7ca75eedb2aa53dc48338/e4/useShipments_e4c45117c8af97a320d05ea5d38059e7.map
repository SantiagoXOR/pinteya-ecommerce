{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useShipments.ts"],"sourcesContent":["// =====================================================\n// HOOK: SHIPMENTS MANAGEMENT ENTERPRISE\n// Descripción: Hook para gestión completa de envíos\n// Basado en: Patrones TanStack Query + React Hook Form\n// =====================================================\n\n'use client';\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useState, useCallback } from 'react';\nimport { toast } from 'sonner';\nimport { \n  Shipment,\n  CreateShipmentRequest,\n  UpdateShipmentRequest,\n  GetShipmentsRequest,\n  PaginatedResponse,\n  UseShipmentsReturn,\n  ShipmentStatus \n} from '@/types/logistics';\n\n// =====================================================\n// CONFIGURACIÓN DE QUERIES\n// =====================================================\n\nconst SHIPMENTS_QUERY_KEY = ['admin', 'logistics', 'shipments'];\nconst STALE_TIME = 30000; // 30 segundos\n\n// =====================================================\n// FUNCIONES DE API\n// =====================================================\n\nasync function fetchShipments(params: GetShipmentsRequest): Promise<PaginatedResponse<Shipment>> {\n  const searchParams = new URLSearchParams();\n  \n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      searchParams.append(key, value.toString());\n    }\n  });\n  \n  const response = await fetch(`/api/admin/logistics/shipments?${searchParams}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\nasync function createShipment(data: CreateShipmentRequest): Promise<Shipment> {\n  const response = await fetch('/api/admin/logistics/shipments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data)\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n  }\n  \n  const result = await response.json();\n  return result.data;\n}\n\nasync function updateShipment(id: number, data: UpdateShipmentRequest): Promise<Shipment> {\n  const response = await fetch(`/api/admin/logistics/shipments/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data)\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n  }\n  \n  const result = await response.json();\n  return result.data;\n}\n\nasync function deleteShipment(id: number): Promise<void> {\n  const response = await fetch(`/api/admin/logistics/shipments/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n  }\n}\n\n// =====================================================\n// HOOK PRINCIPAL: useShipments\n// =====================================================\n\nexport function useShipments(params: GetShipmentsRequest = {}): UseShipmentsReturn {\n  const queryClient = useQueryClient();\n  \n  const queryKey = [...SHIPMENTS_QUERY_KEY, params];\n  \n  const {\n    data,\n    isLoading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey,\n    queryFn: () => fetchShipments(params),\n    staleTime: STALE_TIME,\n    retry: 3,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000)\n  });\n  \n  return {\n    data,\n    isLoading,\n    error: error as Error | null,\n    refetch\n  };\n}\n\n// =====================================================\n// HOOK: useCreateShipment\n// =====================================================\n\nexport function useCreateShipment() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: createShipment,\n    onSuccess: (newShipment) => {\n      // Invalidar cache de shipments\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\n      \n      // Invalidar dashboard de logística\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\n      \n      toast.success('Envío creado exitosamente', {\n        description: `Número de envío: ${newShipment.shipment_number}`\n      });\n    },\n    onError: (error: Error) => {\n      toast.error('Error al crear envío', {\n        description: error.message\n      });\n    }\n  });\n}\n\n// =====================================================\n// HOOK: useUpdateShipment\n// =====================================================\n\nexport function useUpdateShipment() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ id, data }: { id: number; data: UpdateShipmentRequest }) => \n      updateShipment(id, data),\n    onSuccess: (updatedShipment) => {\n      // Actualizar cache específico del shipment\n      queryClient.setQueryData(\n        ['admin', 'logistics', 'shipment', updatedShipment.id],\n        updatedShipment\n      );\n      \n      // Invalidar listas de shipments\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\n      \n      // Invalidar dashboard si cambió el estado\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\n      \n      toast.success('Envío actualizado exitosamente');\n    },\n    onError: (error: Error) => {\n      toast.error('Error al actualizar envío', {\n        description: error.message\n      });\n    }\n  });\n}\n\n// =====================================================\n// HOOK: useDeleteShipment\n// =====================================================\n\nexport function useDeleteShipment() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: deleteShipment,\n    onSuccess: (_, deletedId) => {\n      // Remover del cache\n      queryClient.removeQueries({ queryKey: ['admin', 'logistics', 'shipment', deletedId] });\n      \n      // Invalidar listas\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\n      \n      toast.success('Envío eliminado exitosamente');\n    },\n    onError: (error: Error) => {\n      toast.error('Error al eliminar envío', {\n        description: error.message\n      });\n    }\n  });\n}\n\n// =====================================================\n// HOOK: useShipmentFilters\n// =====================================================\n\nexport function useShipmentFilters() {\n  const [filters, setFilters] = useState<GetShipmentsRequest>({\n    page: 1,\n    limit: 20,\n    order_by: 'created_at',\n    order_direction: 'desc'\n  });\n  \n  const updateFilter = useCallback((key: keyof GetShipmentsRequest, value: any) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value,\n      page: key !== 'page' ? 1 : value // Reset page when other filters change\n    }));\n  }, []);\n  \n  const resetFilters = useCallback(() => {\n    setFilters({\n      page: 1,\n      limit: 20,\n      order_by: 'created_at',\n      order_direction: 'desc'\n    });\n  }, []);\n  \n  const setPage = useCallback((page: number) => {\n    updateFilter('page', page);\n  }, [updateFilter]);\n  \n  const setStatus = useCallback((status: ShipmentStatus | undefined) => {\n    updateFilter('status', status);\n  }, [updateFilter]);\n  \n  const setSearch = useCallback((search: string) => {\n    updateFilter('search', search || undefined);\n  }, [updateFilter]);\n  \n  const setDateRange = useCallback((dateFrom?: string, dateTo?: string) => {\n    setFilters(prev => ({\n      ...prev,\n      date_from: dateFrom,\n      date_to: dateTo,\n      page: 1\n    }));\n  }, []);\n  \n  return {\n    filters,\n    updateFilter,\n    resetFilters,\n    setPage,\n    setStatus,\n    setSearch,\n    setDateRange\n  };\n}\n\n// =====================================================\n// HOOK: useShipmentStats\n// =====================================================\n\nexport function useShipmentStats(shipments?: Shipment[]) {\n  return {\n    total: shipments?.length || 0,\n    byStatus: shipments?.reduce((acc, shipment) => {\n      acc[shipment.status] = (acc[shipment.status] || 0) + 1;\n      return acc;\n    }, {} as Record<ShipmentStatus, number>) || {},\n    totalCost: shipments?.reduce((acc, shipment) => acc + shipment.total_cost, 0) || 0,\n    averageCost: shipments?.length \n      ? (shipments.reduce((acc, shipment) => acc + shipment.total_cost, 0) / shipments.length)\n      : 0\n  };\n}\n\n// =====================================================\n// HOOK: useBulkShipmentOperations\n// =====================================================\n\nexport function useBulkShipmentOperations() {\n  const queryClient = useQueryClient();\n  const [selectedShipments, setSelectedShipments] = useState<number[]>([]);\n  \n  const bulkUpdateStatus = useMutation({\n    mutationFn: async ({ shipmentIds, status }: { shipmentIds: number[]; status: ShipmentStatus }) => {\n      const promises = shipmentIds.map(id => updateShipment(id, { status }));\n      return Promise.all(promises);\n    },\n    onSuccess: (_, { shipmentIds, status }) => {\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\n      \n      toast.success(`${shipmentIds.length} envíos actualizados a ${status}`);\n      setSelectedShipments([]);\n    },\n    onError: (error: Error) => {\n      toast.error('Error en operación masiva', {\n        description: error.message\n      });\n    }\n  });\n  \n  const bulkDelete = useMutation({\n    mutationFn: async (shipmentIds: number[]) => {\n      const promises = shipmentIds.map(id => deleteShipment(id));\n      return Promise.all(promises);\n    },\n    onSuccess: (_, shipmentIds) => {\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\n      \n      toast.success(`${shipmentIds.length} envíos eliminados`);\n      setSelectedShipments([]);\n    },\n    onError: (error: Error) => {\n      toast.error('Error al eliminar envíos', {\n        description: error.message\n      });\n    }\n  });\n  \n  const toggleSelection = useCallback((shipmentId: number) => {\n    setSelectedShipments(prev => \n      prev.includes(shipmentId)\n        ? prev.filter(id => id !== shipmentId)\n        : [...prev, shipmentId]\n    );\n  }, []);\n  \n  const selectAll = useCallback((shipmentIds: number[]) => {\n    setSelectedShipments(shipmentIds);\n  }, []);\n  \n  const clearSelection = useCallback(() => {\n    setSelectedShipments([]);\n  }, []);\n  \n  return {\n    selectedShipments,\n    toggleSelection,\n    selectAll,\n    clearSelection,\n    bulkUpdateStatus,\n    bulkDelete,\n    isLoading: bulkUpdateStatus.isPending || bulkDelete.isPending\n  };\n}\n"],"names":["useBulkShipmentOperations","useCreateShipment","useDeleteShipment","useShipmentFilters","useShipmentStats","useShipments","useUpdateShipment","SHIPMENTS_QUERY_KEY","STALE_TIME","fetchShipments","params","searchParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","method","headers","ok","errorData","json","catch","Error","error","status","statusText","createShipment","data","body","JSON","stringify","result","updateShipment","id","deleteShipment","queryClient","useQueryClient","queryKey","isLoading","refetch","useQuery","queryFn","staleTime","retry","retryDelay","attemptIndex","Math","min","useMutation","mutationFn","onSuccess","newShipment","invalidateQueries","toast","success","description","shipment_number","onError","message","updatedShipment","setQueryData","_","deletedId","removeQueries","filters","setFilters","useState","page","limit","order_by","order_direction","updateFilter","useCallback","prev","resetFilters","setPage","setStatus","setSearch","search","setDateRange","dateFrom","dateTo","date_from","date_to","shipments","total","length","byStatus","reduce","acc","shipment","totalCost","total_cost","averageCost","selectedShipments","setSelectedShipments","bulkUpdateStatus","shipmentIds","promises","map","Promise","all","bulkDelete","toggleSelection","shipmentId","includes","filter","selectAll","clearSelection","isPending"],"mappings":"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"}