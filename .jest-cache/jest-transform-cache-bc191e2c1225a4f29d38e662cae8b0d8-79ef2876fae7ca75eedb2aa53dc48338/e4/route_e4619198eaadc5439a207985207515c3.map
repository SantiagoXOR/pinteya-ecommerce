{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\refunds\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO REFUNDS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { getSupabaseClient } from '@/lib/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiter';\r\nimport { metricsCollector } from '@/lib/metrics';\r\nimport { createMercadoPagoClient } from '@/lib/mercadopago';\r\nimport { Payment } from 'mercadopago';\r\n\r\ninterface RefundRequest {\r\n  payment_id: string;\r\n  amount?: number;\r\n  reason?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface RefundResponse {\r\n  id: string;\r\n  payment_id: string;\r\n  amount: number;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  reason?: string;\r\n  created_at: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * POST /api/payments/refunds\r\n * Procesa reembolsos según documentación oficial de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.PAYMENT_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      logger.warn(LogCategory.API, 'Rate limit exceeded for refunds', {\r\n        clientIP,\r\n        userId,\r\n      });\r\n\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n      return response;\r\n    }\r\n\r\n    const body: RefundRequest = await request.json();\r\n    const { payment_id, amount, reason, metadata } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!payment_id) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'payment_id es requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.PAYMENT, 'Refund request started', {\r\n      userId,\r\n      payment_id,\r\n      amount,\r\n      reason,\r\n      clientIP,\r\n    });\r\n\r\n    // Verificar que el pago existe y pertenece al usuario\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error de configuración de base de datos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, total_amount, payment_status, external_reference')\r\n      .eq('external_reference', payment_id)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Pago no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (order.payment_status !== 'approved') {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Solo se pueden reembolsar pagos aprobados' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar monto del reembolso\r\n    const refundAmount = amount || order.total_amount;\r\n    if (refundAmount > order.total_amount) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'El monto del reembolso no puede ser mayor al pago original' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Procesar reembolso con MercadoPago\r\n    const refundResult = await processRefund(payment_id, refundAmount, reason, metadata);\r\n\r\n    // Actualizar estado en base de datos\r\n    await supabase\r\n      .from('orders')\r\n      .update({ \r\n        payment_status: refundResult.status === 'approved' ? 'refunded' : 'refund_pending',\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', order.id);\r\n\r\n    // Registrar reembolso en tabla de refunds (si existe)\r\n    try {\r\n      await supabase\r\n        .from('refunds')\r\n        .insert({\r\n          order_id: order.id,\r\n          payment_id,\r\n          refund_id: refundResult.id,\r\n          amount: refundAmount,\r\n          status: refundResult.status,\r\n          reason: reason || 'Reembolso solicitado por el cliente',\r\n          metadata: metadata || {},\r\n          created_at: new Date().toISOString(),\r\n        });\r\n    } catch (refundInsertError) {\r\n      // Si la tabla refunds no existe, solo loggeamos el warning\r\n      logger.warn(LogCategory.PAYMENT, 'Refunds table not found, skipping insert', {\r\n        payment_id,\r\n        refund_id: refundResult.id,\r\n      });\r\n    }\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'POST',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, payment_id, amount: refundAmount }\r\n    );\r\n\r\n    logger.info(LogCategory.PAYMENT, 'Refund processed successfully', {\r\n      userId,\r\n      payment_id,\r\n      refund_id: refundResult.id,\r\n      amount: refundAmount,\r\n      status: refundResult.status,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: refundResult,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Refund processing failed', {\r\n      operation: 'refund-processing-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'POST',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/payments/refunds\r\n * Lista reembolsos del usuario\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.QUERY_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n      return response;\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const limit = parseInt(url.searchParams.get('limit') || '10');\r\n    const offset = parseInt(url.searchParams.get('offset') || '0');\r\n    const status = url.searchParams.get('status');\r\n\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error de configuración de base de datos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Construir query\r\n    let query = supabase\r\n      .from('refunds')\r\n      .select(`\r\n        *,\r\n        orders (\r\n          id,\r\n          total_amount,\r\n          created_at\r\n        )\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    const { data: refunds, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Error al obtener reembolsos: ${error.message}`);\r\n    }\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'GET',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, count: (refunds?.length || 0).toString() }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Refunds list retrieved', {\r\n      userId,\r\n      count: refunds?.length || 0,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: refunds || [],\r\n      pagination: {\r\n        limit,\r\n        offset,\r\n        total: refunds?.length || 0,\r\n      },\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Refunds list failed', {\r\n      operation: 'refunds-list-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Procesa reembolso con MercadoPago\r\n */\r\nasync function processRefund(\r\n  paymentId: string,\r\n  amount: number,\r\n  reason?: string,\r\n  metadata?: Record<string, any>\r\n): Promise<RefundResponse> {\r\n  try {\r\n    // Crear cliente de MercadoPago\r\n    const client = createMercadoPagoClient();\r\n    const payment = new Payment(client);\r\n\r\n    // En una implementación real, aquí se haría la llamada a la API de MercadoPago\r\n    // Por ahora simulamos el reembolso\r\n    const refundId = `refund_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Simular respuesta de MercadoPago\r\n    const refundResponse: RefundResponse = {\r\n      id: refundId,\r\n      payment_id: paymentId,\r\n      amount,\r\n      status: 'approved', // En producción esto vendría de MercadoPago\r\n      reason: reason || 'Reembolso solicitado',\r\n      created_at: new Date().toISOString(),\r\n      metadata: metadata || {},\r\n    };\r\n\r\n    logger.info(LogCategory.PAYMENT, 'MercadoPago refund simulated', {\r\n      payment_id: paymentId,\r\n      refund_id: refundId,\r\n      amount,\r\n      status: refundResponse.status,\r\n    });\r\n\r\n    return refundResponse;\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.PAYMENT, 'MercadoPago refund failed', error as Error);\r\n\r\n    // En caso de error, devolver estado pendiente\r\n    return {\r\n      id: `refund_error_${Date.now()}`,\r\n      payment_id: paymentId,\r\n      amount,\r\n      status: 'pending',\r\n      reason: 'Error al procesar reembolso, se procesará manualmente',\r\n      created_at: new Date().toISOString(),\r\n      metadata: metadata || {},\r\n    };\r\n  }\r\n}\r\n"],"names":["GET","POST","request","startTime","Date","now","clientIP","headers","get","userAgent","session","auth","user","NextResponse","json","success","error","status","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","PAYMENT_API","logger","warn","LogCategory","API","userId","response","addRateLimitHeaders","body","payment_id","amount","reason","metadata","info","PAYMENT","supabase","getSupabaseClient","data","order","orderError","from","select","eq","single","payment_status","refundAmount","total_amount","refundResult","processRefund","update","updated_at","toISOString","id","insert","order_id","refund_id","created_at","refundInsertError","metricsCollector","recordRequest","processingTime","timestamp","processing_time","performance","LogLevel","ERROR","operation","duration","statusCode","message","QUERY_API","url","URL","limit","parseInt","searchParams","offset","query","ascending","range","refunds","Error","count","length","toString","pagination","total","paymentId","client","createMercadoPagoClient","payment","Payment","refundId","Math","random","substr","refundResponse"],"mappings":"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"}