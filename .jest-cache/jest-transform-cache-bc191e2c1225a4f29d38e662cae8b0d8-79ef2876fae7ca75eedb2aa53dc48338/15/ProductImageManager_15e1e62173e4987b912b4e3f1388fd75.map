{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\products\\ProductImageManager.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef } from 'react';\nimport Image from 'next/image';\nimport { AdminCard } from '../ui/AdminCard';\nimport { \n  Upload, \n  X, \n  Star, \n  StarOff, \n  Move, \n  Edit, \n  Trash2, \n  Image as ImageIcon,\n  Plus,\n  AlertCircle\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ProductImage {\n  url: string;\n  alt?: string;\n  is_primary?: boolean;\n}\n\ninterface ProductImageManagerProps {\n  productId?: string;\n  images: ProductImage[];\n  onChange: (images: ProductImage[]) => void;\n  error?: string;\n  maxImages?: number;\n  className?: string;\n}\n\nexport function ProductImageManager({\n  productId,\n  images = [],\n  onChange,\n  error,\n  maxImages = 10,\n  className\n}: ProductImageManagerProps) {\n  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const [editingAlt, setEditingAlt] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Handle file upload with Supabase Storage integration\n  const handleFileUpload = async (files: FileList, productId?: string) => {\n    if (files.length === 0) return;\n\n    if (!productId) {\n      console.error('Product ID is required for image upload');\n      return;\n    }\n    \n    const remainingSlots = maxImages - images.length;\n    const filesToUpload = Array.from(files).slice(0, remainingSlots);\n    \n    setUploading(true);\n    \n    try {\n      const uploadPromises = filesToUpload.map(async (file) => {\n        // TODO: Implement actual file upload to your storage service\n        // For now, we'll create a local URL\n        const url = URL.createObjectURL(file);\n        \n        return {\n          url,\n          alt: file.name.replace(/\\.[^/.]+$/, ''), // Remove extension\n          is_primary: images.length === 0, // First image is primary\n        };\n      });\n      \n      const newImages = await Promise.all(uploadPromises);\n      onChange([...images, ...newImages]);\n    } catch (error) {\n      console.error('Error uploading images:', error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  // Handle drag and drop\n  const handleDragStart = (index: number) => {\n    setDraggedIndex(index);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent, dropIndex: number) => {\n    e.preventDefault();\n    \n    if (draggedIndex === null) return;\n    \n    const newImages = [...images];\n    const draggedImage = newImages[draggedIndex];\n    \n    // Remove dragged item\n    newImages.splice(draggedIndex, 1);\n    \n    // Insert at new position\n    newImages.splice(dropIndex, 0, draggedImage);\n    \n    onChange(newImages);\n    setDraggedIndex(null);\n  };\n\n  // Set primary image\n  const setPrimaryImage = (index: number) => {\n    const newImages = images.map((img, i) => ({\n      ...img,\n      is_primary: i === index,\n    }));\n    onChange(newImages);\n  };\n\n  // Remove image\n  const removeImage = (index: number) => {\n    const newImages = images.filter((_, i) => i !== index);\n    \n    // If we removed the primary image, make the first one primary\n    if (images[index].is_primary && newImages.length > 0) {\n      newImages[0].is_primary = true;\n    }\n    \n    onChange(newImages);\n  };\n\n  // Edit alt text\n  const startEditingAlt = (index: number) => {\n    setEditingIndex(index);\n    setEditingAlt(images[index].alt || '');\n  };\n\n  const saveAltText = () => {\n    if (editingIndex === null) return;\n    \n    const newImages = [...images];\n    newImages[editingIndex] = {\n      ...newImages[editingIndex],\n      alt: editingAlt,\n    };\n    \n    onChange(newImages);\n    setEditingIndex(null);\n    setEditingAlt('');\n  };\n\n  const cancelEditingAlt = () => {\n    setEditingIndex(null);\n    setEditingAlt('');\n  };\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      <AdminCard title=\"Gestión de Imágenes\" className=\"p-6\">\n        <div className=\"space-y-6\">\n          {/* Upload Area */}\n          <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6\">\n            <div className=\"text-center\">\n              <ImageIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <div className=\"mt-4\">\n                <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                  <span className=\"mt-2 block text-sm font-medium text-gray-900\">\n                    Arrastra imágenes aquí o{' '}\n                    <span className=\"text-blaze-orange-600 hover:text-blaze-orange-500\">\n                      selecciona archivos\n                    </span>\n                  </span>\n                </label>\n                <input\n                  ref={fileInputRef}\n                  id=\"file-upload\"\n                  name=\"file-upload\"\n                  type=\"file\"\n                  className=\"sr-only\"\n                  multiple\n                  accept=\"image/*\"\n                  onChange={(e) => e.target.files && handleFileUpload(e.target.files)}\n                />\n              </div>\n              <p className=\"mt-1 text-xs text-gray-500\">\n                PNG, JPG, GIF hasta 10MB. Máximo {maxImages} imágenes.\n              </p>\n              \n              {images.length >= maxImages && (\n                <div className=\"mt-3 flex items-center justify-center space-x-2 text-yellow-600\">\n                  <AlertCircle className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Límite de imágenes alcanzado</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"text-red-600 text-sm\">{error}</div>\n          )}\n\n          {/* Images Grid */}\n          {images.length > 0 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-sm font-medium text-gray-900\">\n                  Imágenes del Producto ({images.length}/{maxImages})\n                </h4>\n                <p className=\"text-xs text-gray-500\">\n                  Arrastra para reordenar\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {images.map((image, index) => (\n                  <div\n                    key={index}\n                    draggable\n                    onDragStart={() => handleDragStart(index)}\n                    onDragOver={handleDragOver}\n                    onDrop={(e) => handleDrop(e, index)}\n                    className={cn(\n                      \"relative group border-2 rounded-lg overflow-hidden cursor-move transition-all\",\n                      image.is_primary \n                        ? \"border-blaze-orange-500 ring-2 ring-blaze-orange-200\" \n                        : \"border-gray-200 hover:border-gray-300\",\n                      draggedIndex === index && \"opacity-50\"\n                    )}\n                  >\n                    {/* Image */}\n                    <div className=\"aspect-square relative\">\n                      <Image\n                        src={image.url}\n                        alt={image.alt || `Imagen ${index + 1}`}\n                        fill\n                        className=\"object-cover\"\n                      />\n                      \n                      {/* Primary Badge */}\n                      {image.is_primary && (\n                        <div className=\"absolute top-2 left-2 bg-blaze-orange-600 text-white text-xs px-2 py-1 rounded\">\n                          Principal\n                        </div>\n                      )}\n                      \n                      {/* Actions Overlay */}\n                      <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all flex items-center justify-center opacity-0 group-hover:opacity-100\">\n                        <div className=\"flex space-x-2\">\n                          {/* Set Primary */}\n                          <button\n                            type=\"button\"\n                            onClick={() => setPrimaryImage(index)}\n                            className=\"p-2 bg-white rounded-full hover:bg-gray-100 transition-colors\"\n                            title={image.is_primary ? \"Es imagen principal\" : \"Establecer como principal\"}\n                          >\n                            {image.is_primary ? (\n                              <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                            ) : (\n                              <StarOff className=\"w-4 h-4 text-gray-600\" />\n                            )}\n                          </button>\n                          \n                          {/* Edit Alt */}\n                          <button\n                            type=\"button\"\n                            onClick={() => startEditingAlt(index)}\n                            className=\"p-2 bg-white rounded-full hover:bg-gray-100 transition-colors\"\n                            title=\"Editar texto alternativo\"\n                          >\n                            <Edit className=\"w-4 h-4 text-gray-600\" />\n                          </button>\n                          \n                          {/* Remove */}\n                          <button\n                            type=\"button\"\n                            onClick={() => removeImage(index)}\n                            className=\"p-2 bg-white rounded-full hover:bg-red-100 transition-colors\"\n                            title=\"Eliminar imagen\"\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-600\" />\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Alt Text */}\n                    <div className=\"p-2 bg-white\">\n                      {editingIndex === index ? (\n                        <div className=\"space-y-2\">\n                          <input\n                            type=\"text\"\n                            value={editingAlt}\n                            onChange={(e) => setEditingAlt(e.target.value)}\n                            className=\"w-full text-xs border border-gray-300 rounded px-2 py-1 focus:outline-none focus:ring-1 focus:ring-blaze-orange-500\"\n                            placeholder=\"Texto alternativo\"\n                          />\n                          <div className=\"flex space-x-1\">\n                            <button\n                              type=\"button\"\n                              onClick={saveAltText}\n                              className=\"flex-1 text-xs bg-blaze-orange-600 text-white px-2 py-1 rounded hover:bg-blaze-orange-700\"\n                            >\n                              Guardar\n                            </button>\n                            <button\n                              type=\"button\"\n                              onClick={cancelEditingAlt}\n                              className=\"flex-1 text-xs bg-gray-300 text-gray-700 px-2 py-1 rounded hover:bg-gray-400\"\n                            >\n                              Cancelar\n                            </button>\n                          </div>\n                        </div>\n                      ) : (\n                        <p className=\"text-xs text-gray-600 truncate\">\n                          {image.alt || 'Sin texto alternativo'}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n                \n                {/* Add More Button */}\n                {images.length < maxImages && (\n                  <button\n                    type=\"button\"\n                    onClick={() => fileInputRef.current?.click()}\n                    className=\"aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center hover:border-blaze-orange-400 hover:bg-blaze-orange-50 transition-colors\"\n                  >\n                    <Plus className=\"w-8 h-8 text-gray-400\" />\n                    <span className=\"text-xs text-gray-500 mt-2\">Agregar más</span>\n                  </button>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Upload Progress */}\n          {uploading && (\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blaze-orange-600\"></div>\n              <span>Subiendo imágenes...</span>\n            </div>\n          )}\n\n          {/* Tips */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h5 className=\"text-sm font-medium text-blue-800 mb-2\">\n              Consejos para mejores imágenes:\n            </h5>\n            <ul className=\"text-xs text-blue-700 space-y-1\">\n              <li>• Usa imágenes de alta calidad (mínimo 800x800px)</li>\n              <li>• La primera imagen será la imagen principal del producto</li>\n              <li>• Incluye diferentes ángulos y detalles del producto</li>\n              <li>• Agrega texto alternativo para mejorar la accesibilidad</li>\n              <li>• Arrastra las imágenes para cambiar el orden</li>\n            </ul>\n          </div>\n        </div>\n      </AdminCard>\n    </div>\n  );\n}\n"],"names":["ProductImageManager","productId","images","onChange","error","maxImages","className","draggedIndex","setDraggedIndex","useState","editingIndex","setEditingIndex","editingAlt","setEditingAlt","uploading","setUploading","fileInputRef","useRef","handleFileUpload","files","length","console","remainingSlots","filesToUpload","Array","from","slice","uploadPromises","map","file","url","URL","createObjectURL","alt","name","replace","is_primary","newImages","Promise","all","handleDragStart","index","handleDragOver","e","preventDefault","handleDrop","dropIndex","draggedImage","splice","setPrimaryImage","img","i","removeImage","filter","_","startEditingAlt","saveAltText","cancelEditingAlt","div","cn","AdminCard","title","ImageIcon","label","htmlFor","span","input","ref","id","type","multiple","accept","target","p","AlertCircle","h4","image","draggable","onDragStart","onDragOver","onDrop","Image","src","fill","button","onClick","Star","StarOff","Edit","Trash2","value","placeholder","current","click","Plus","h5","ul","li"],"mappings":"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"}