7ae4dd1cbb10c3f31295bdffa607a2ad
/**
 * Gestión de Usuarios Enterprise
 * Utilidades avanzadas para gestión de usuarios combinando Clerk + Supabase
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getEnterpriseUser: function() {
        return getEnterpriseUser;
    },
    getUserStatistics: function() {
        return getUserStatistics;
    },
    recordUserLogin: function() {
        return recordUserLogin;
    },
    searchEnterpriseUsers: function() {
        return searchEnterpriseUsers;
    },
    updateEnterpriseUser: function() {
        return updateEnterpriseUser;
    }
});
const _server = require("@clerk/nextjs/server");
const _supabase = require("../supabase");
async function getEnterpriseUser(clerkUserId, context) {
    try {
        if (!_supabase.supabaseAdmin) {
            return {
                success: false,
                error: 'Supabase admin client no disponible',
                code: 'SUPABASE_UNAVAILABLE'
            };
        }
        // Obtener datos de Supabase
        const { data: userProfile, error: supabaseError } = await _supabase.supabaseAdmin.from('user_profiles').select('*').eq('clerk_user_id', clerkUserId).single();
        if (supabaseError && supabaseError.code !== 'PGRST116') {
            console.error('[ENTERPRISE_USER] Error obteniendo usuario de Supabase:', supabaseError);
            return {
                success: false,
                error: 'Error obteniendo datos del usuario',
                code: 'SUPABASE_ERROR'
            };
        }
        // Obtener datos de Clerk
        let clerkUser;
        try {
            const client = await (0, _server.clerkClient)();
            clerkUser = await client.users.getUser(clerkUserId);
        } catch (clerkError) {
            console.error('[ENTERPRISE_USER] Error obteniendo usuario de Clerk:', clerkError);
            return {
                success: false,
                error: 'Error obteniendo datos de autenticación',
                code: 'CLERK_ERROR'
            };
        }
        // Combinar datos
        const enterpriseUser = {
            id: userProfile?.id || clerkUserId,
            clerkId: clerkUserId,
            email: clerkUser.emailAddresses[0]?.emailAddress || userProfile?.email || '',
            name: userProfile?.name || `${clerkUser.firstName || ''} ${clerkUser.lastName || ''}`.trim() || undefined,
            role: userProfile?.role || 'user',
            permissions: userProfile?.permissions || [],
            isActive: userProfile?.is_active ?? true,
            metadata: userProfile?.metadata || {},
            createdAt: userProfile?.created_at || clerkUser.createdAt.toString(),
            updatedAt: userProfile?.updated_at || clerkUser.updatedAt.toString(),
            lastLoginAt: userProfile?.last_login_at,
            loginCount: userProfile?.login_count || 0
        };
        return {
            success: true,
            user: enterpriseUser
        };
    } catch (error) {
        console.error('[ENTERPRISE_USER] Error en getEnterpriseUser:', error);
        return {
            success: false,
            error: 'Error interno obteniendo usuario',
            code: 'INTERNAL_ERROR'
        };
    }
}
async function searchEnterpriseUsers(options = {}, context) {
    try {
        if (!_supabase.supabaseAdmin) {
            return {
                success: false,
                error: 'Supabase admin client no disponible',
                code: 'SUPABASE_UNAVAILABLE'
            };
        }
        // Verificar permisos
        if (context && !context.permissions.includes('user_management')) {
            return {
                success: false,
                error: 'Permisos insuficientes para buscar usuarios',
                code: 'INSUFFICIENT_PERMISSIONS'
            };
        }
        let query = _supabase.supabaseAdmin.from('user_profiles').select('*', {
            count: 'exact'
        });
        // Aplicar filtros
        if (options.query) {
            query = query.or(`name.ilike.%${options.query}%,email.ilike.%${options.query}%`);
        }
        if (options.role) {
            query = query.eq('role', options.role);
        }
        if (options.isActive !== undefined) {
            query = query.eq('is_active', options.isActive);
        }
        // Aplicar ordenamiento
        const sortBy = options.sortBy || 'created_at';
        const sortOrder = options.sortOrder || 'desc';
        query = query.order(sortBy, {
            ascending: sortOrder === 'asc'
        });
        // Aplicar paginación
        if (options.limit) {
            query = query.limit(options.limit);
        }
        if (options.offset) {
            query = query.range(options.offset, options.offset + (options.limit || 10) - 1);
        }
        const { data: userProfiles, error: searchError, count } = await query;
        if (searchError) {
            console.error('[ENTERPRISE_USER] Error buscando usuarios:', searchError);
            return {
                success: false,
                error: 'Error buscando usuarios',
                code: 'SEARCH_ERROR'
            };
        }
        // Convertir a formato enterprise
        const enterpriseUsers = (userProfiles || []).map((profile)=>({
                id: profile.id,
                clerkId: profile.clerk_user_id,
                email: profile.email,
                name: profile.name,
                role: profile.role,
                permissions: profile.permissions || [],
                isActive: profile.is_active,
                metadata: profile.metadata || {},
                createdAt: profile.created_at,
                updatedAt: profile.updated_at,
                lastLoginAt: profile.last_login_at,
                loginCount: profile.login_count || 0
            }));
        return {
            success: true,
            users: enterpriseUsers,
            total: count || 0
        };
    } catch (error) {
        console.error('[ENTERPRISE_USER] Error en searchEnterpriseUsers:', error);
        return {
            success: false,
            error: 'Error interno buscando usuarios',
            code: 'INTERNAL_ERROR'
        };
    }
}
async function updateEnterpriseUser(clerkUserId, updates, context) {
    try {
        if (!_supabase.supabaseAdmin) {
            return {
                success: false,
                error: 'Supabase admin client no disponible',
                code: 'SUPABASE_UNAVAILABLE'
            };
        }
        // Verificar permisos
        if (!context.permissions.includes('user_management')) {
            return {
                success: false,
                error: 'Permisos insuficientes para actualizar usuarios',
                code: 'INSUFFICIENT_PERMISSIONS'
            };
        }
        // Preparar datos de actualización
        const updateData = {
            updated_at: new Date().toISOString()
        };
        if (updates.name !== undefined) updateData.name = updates.name;
        if (updates.role !== undefined) updateData.role = updates.role;
        if (updates.permissions !== undefined) updateData.permissions = updates.permissions;
        if (updates.metadata !== undefined) updateData.metadata = updates.metadata;
        if (updates.isActive !== undefined) updateData.is_active = updates.isActive;
        // Actualizar en Supabase
        const { data: updatedProfile, error: updateError } = await _supabase.supabaseAdmin.from('user_profiles').update(updateData).eq('clerk_user_id', clerkUserId).select('*').single();
        if (updateError) {
            console.error('[ENTERPRISE_USER] Error actualizando usuario:', updateError);
            return {
                success: false,
                error: 'Error actualizando usuario',
                code: 'UPDATE_ERROR'
            };
        }
        // Actualizar en Clerk si es necesario
        if (updates.name) {
            try {
                const client = await (0, _server.clerkClient)();
                const nameParts = updates.name.split(' ');
                await client.users.updateUser(clerkUserId, {
                    firstName: nameParts[0] || '',
                    lastName: nameParts.slice(1).join(' ') || ''
                });
            } catch (clerkError) {
                console.warn('[ENTERPRISE_USER] Error actualizando nombre en Clerk:', clerkError);
            // No fallar la operación por esto
            }
        }
        // Retornar usuario actualizado
        const userResult = await getEnterpriseUser(clerkUserId, context);
        return userResult;
    } catch (error) {
        console.error('[ENTERPRISE_USER] Error en updateEnterpriseUser:', error);
        return {
            success: false,
            error: 'Error interno actualizando usuario',
            code: 'INTERNAL_ERROR'
        };
    }
}
async function recordUserLogin(clerkUserId, metadata) {
    try {
        if (!_supabase.supabaseAdmin) return;
        await _supabase.supabaseAdmin.from('user_profiles').update({
            last_login_at: new Date().toISOString(),
            login_count: _supabase.supabaseAdmin.raw('login_count + 1'),
            updated_at: new Date().toISOString(),
            metadata: _supabase.supabaseAdmin.raw(`
          COALESCE(metadata, '{}'::jsonb) || 
          jsonb_build_object('last_login_metadata', $1::jsonb)
        `, [
                JSON.stringify(metadata || {})
            ])
        }).eq('clerk_user_id', clerkUserId);
    } catch (error) {
        console.error('[ENTERPRISE_USER] Error registrando login:', error);
    }
}
async function getUserStatistics(context) {
    try {
        if (!_supabase.supabaseAdmin || !context.permissions.includes('user_management')) {
            return {
                totalUsers: 0,
                activeUsers: 0,
                adminUsers: 0,
                recentLogins: 0
            };
        }
        const [{ count: totalUsers }, { count: activeUsers }, { count: adminUsers }, { count: recentLogins }] = await Promise.all([
            _supabase.supabaseAdmin.from('user_profiles').select('*', {
                count: 'exact',
                head: true
            }),
            _supabase.supabaseAdmin.from('user_profiles').select('*', {
                count: 'exact',
                head: true
            }).eq('is_active', true),
            _supabase.supabaseAdmin.from('user_profiles').select('*', {
                count: 'exact',
                head: true
            }).eq('role', 'admin'),
            _supabase.supabaseAdmin.from('user_profiles').select('*', {
                count: 'exact',
                head: true
            }).gte('last_login_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
        ]);
        return {
            totalUsers: totalUsers || 0,
            activeUsers: activeUsers || 0,
            adminUsers: adminUsers || 0,
            recentLogins: recentLogins || 0
        };
    } catch (error) {
        console.error('[ENTERPRISE_USER] Error obteniendo estadísticas:', error);
        return {
            totalUsers: 0,
            activeUsers: 0,
            adminUsers: 0,
            recentLogins: 0
        };
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxhdXRoXFxlbnRlcnByaXNlLXVzZXItbWFuYWdlbWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlc3Rpw7NuIGRlIFVzdWFyaW9zIEVudGVycHJpc2VcbiAqIFV0aWxpZGFkZXMgYXZhbnphZGFzIHBhcmEgZ2VzdGnDs24gZGUgdXN1YXJpb3MgY29tYmluYW5kbyBDbGVyayArIFN1cGFiYXNlXG4gKi9cblxuaW1wb3J0IHsgY2xlcmtDbGllbnQgfSBmcm9tICdAY2xlcmsvbmV4dGpzL3NlcnZlcic7XG5pbXBvcnQgeyBzdXBhYmFzZUFkbWluIH0gZnJvbSAnQC9saWIvc3VwYWJhc2UnO1xuaW1wb3J0IHR5cGUgeyBFbnRlcnByaXNlQXV0aENvbnRleHQgfSBmcm9tICcuL2VudGVycHJpc2UtYXV0aC11dGlscyc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUSVBPUyBZIElOVEVSRkFDRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50ZXJwcmlzZVVzZXIge1xuICBpZDogc3RyaW5nO1xuICBjbGVya0lkOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHJvbGU6ICdhZG1pbicgfCAndXNlcicgfCAnbW9kZXJhdG9yJztcbiAgcGVybWlzc2lvbnM6IHN0cmluZ1tdO1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgbWV0YWRhdGE/OiBhbnk7XG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xuICB1cGRhdGVkQXQ6IHN0cmluZztcbiAgbGFzdExvZ2luQXQ/OiBzdHJpbmc7XG4gIGxvZ2luQ291bnQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyQ3JlYXRpb25PcHRpb25zIHtcbiAgZW1haWw6IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgcm9sZT86ICdhZG1pbicgfCAndXNlcicgfCAnbW9kZXJhdG9yJztcbiAgcGVybWlzc2lvbnM/OiBzdHJpbmdbXTtcbiAgbWV0YWRhdGE/OiBhbnk7XG4gIHNlbmRJbnZpdGF0aW9uPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyVXBkYXRlT3B0aW9ucyB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHJvbGU/OiAnYWRtaW4nIHwgJ3VzZXInIHwgJ21vZGVyYXRvcic7XG4gIHBlcm1pc3Npb25zPzogc3RyaW5nW107XG4gIG1ldGFkYXRhPzogYW55O1xuICBpc0FjdGl2ZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclNlYXJjaE9wdGlvbnMge1xuICBxdWVyeT86IHN0cmluZztcbiAgcm9sZT86ICdhZG1pbicgfCAndXNlcicgfCAnbW9kZXJhdG9yJztcbiAgaXNBY3RpdmU/OiBib29sZWFuO1xuICBsaW1pdD86IG51bWJlcjtcbiAgb2Zmc2V0PzogbnVtYmVyO1xuICBzb3J0Qnk/OiAnbmFtZScgfCAnZW1haWwnIHwgJ2NyZWF0ZWRBdCcgfCAnbGFzdExvZ2luQXQnO1xuICBzb3J0T3JkZXI/OiAnYXNjJyB8ICdkZXNjJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyT3BlcmF0aW9uUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgdXNlcj86IEVudGVycHJpc2VVc2VyO1xuICB1c2Vycz86IEVudGVycHJpc2VVc2VyW107XG4gIGVycm9yPzogc3RyaW5nO1xuICBjb2RlPzogc3RyaW5nO1xuICB0b3RhbD86IG51bWJlcjtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZVTkNJT05FUyBERSBHRVNUScOTTiBERSBVU1VBUklPU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBPYnRpZW5lIHVuIHVzdWFyaW8gcG9yIHN1IElEIGRlIENsZXJrXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFbnRlcnByaXNlVXNlcihcbiAgY2xlcmtVc2VySWQ6IHN0cmluZyxcbiAgY29udGV4dD86IEVudGVycHJpc2VBdXRoQ29udGV4dFxuKTogUHJvbWlzZTxVc2VyT3BlcmF0aW9uUmVzdWx0PiB7XG4gIHRyeSB7XG4gICAgaWYgKCFzdXBhYmFzZUFkbWluKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdTdXBhYmFzZSBhZG1pbiBjbGllbnQgbm8gZGlzcG9uaWJsZScsXG4gICAgICAgIGNvZGU6ICdTVVBBQkFTRV9VTkFWQUlMQUJMRSdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gT2J0ZW5lciBkYXRvcyBkZSBTdXBhYmFzZVxuICAgIGNvbnN0IHsgZGF0YTogdXNlclByb2ZpbGUsIGVycm9yOiBzdXBhYmFzZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluXG4gICAgICAuZnJvbSgndXNlcl9wcm9maWxlcycpXG4gICAgICAuc2VsZWN0KCcqJylcbiAgICAgIC5lcSgnY2xlcmtfdXNlcl9pZCcsIGNsZXJrVXNlcklkKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgaWYgKHN1cGFiYXNlRXJyb3IgJiYgc3VwYWJhc2VFcnJvci5jb2RlICE9PSAnUEdSU1QxMTYnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbRU5URVJQUklTRV9VU0VSXSBFcnJvciBvYnRlbmllbmRvIHVzdWFyaW8gZGUgU3VwYWJhc2U6Jywgc3VwYWJhc2VFcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdFcnJvciBvYnRlbmllbmRvIGRhdG9zIGRlbCB1c3VhcmlvJyxcbiAgICAgICAgY29kZTogJ1NVUEFCQVNFX0VSUk9SJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBPYnRlbmVyIGRhdG9zIGRlIENsZXJrXG4gICAgbGV0IGNsZXJrVXNlcjtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgY2xlcmtDbGllbnQoKTtcbiAgICAgIGNsZXJrVXNlciA9IGF3YWl0IGNsaWVudC51c2Vycy5nZXRVc2VyKGNsZXJrVXNlcklkKTtcbiAgICB9IGNhdGNoIChjbGVya0Vycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbRU5URVJQUklTRV9VU0VSXSBFcnJvciBvYnRlbmllbmRvIHVzdWFyaW8gZGUgQ2xlcms6JywgY2xlcmtFcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdFcnJvciBvYnRlbmllbmRvIGRhdG9zIGRlIGF1dGVudGljYWNpw7NuJyxcbiAgICAgICAgY29kZTogJ0NMRVJLX0VSUk9SJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDb21iaW5hciBkYXRvc1xuICAgIGNvbnN0IGVudGVycHJpc2VVc2VyOiBFbnRlcnByaXNlVXNlciA9IHtcbiAgICAgIGlkOiB1c2VyUHJvZmlsZT8uaWQgfHwgY2xlcmtVc2VySWQsXG4gICAgICBjbGVya0lkOiBjbGVya1VzZXJJZCxcbiAgICAgIGVtYWlsOiBjbGVya1VzZXIuZW1haWxBZGRyZXNzZXNbMF0/LmVtYWlsQWRkcmVzcyB8fCB1c2VyUHJvZmlsZT8uZW1haWwgfHwgJycsXG4gICAgICBuYW1lOiB1c2VyUHJvZmlsZT8ubmFtZSB8fCBgJHtjbGVya1VzZXIuZmlyc3ROYW1lIHx8ICcnfSAke2NsZXJrVXNlci5sYXN0TmFtZSB8fCAnJ31gLnRyaW0oKSB8fCB1bmRlZmluZWQsXG4gICAgICByb2xlOiB1c2VyUHJvZmlsZT8ucm9sZSB8fCAndXNlcicsXG4gICAgICBwZXJtaXNzaW9uczogdXNlclByb2ZpbGU/LnBlcm1pc3Npb25zIHx8IFtdLFxuICAgICAgaXNBY3RpdmU6IHVzZXJQcm9maWxlPy5pc19hY3RpdmUgPz8gdHJ1ZSxcbiAgICAgIG1ldGFkYXRhOiB1c2VyUHJvZmlsZT8ubWV0YWRhdGEgfHwge30sXG4gICAgICBjcmVhdGVkQXQ6IHVzZXJQcm9maWxlPy5jcmVhdGVkX2F0IHx8IGNsZXJrVXNlci5jcmVhdGVkQXQudG9TdHJpbmcoKSxcbiAgICAgIHVwZGF0ZWRBdDogdXNlclByb2ZpbGU/LnVwZGF0ZWRfYXQgfHwgY2xlcmtVc2VyLnVwZGF0ZWRBdC50b1N0cmluZygpLFxuICAgICAgbGFzdExvZ2luQXQ6IHVzZXJQcm9maWxlPy5sYXN0X2xvZ2luX2F0LFxuICAgICAgbG9naW5Db3VudDogdXNlclByb2ZpbGU/LmxvZ2luX2NvdW50IHx8IDBcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICB1c2VyOiBlbnRlcnByaXNlVXNlclxuICAgIH07XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbRU5URVJQUklTRV9VU0VSXSBFcnJvciBlbiBnZXRFbnRlcnByaXNlVXNlcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdFcnJvciBpbnRlcm5vIG9idGVuaWVuZG8gdXN1YXJpbycsXG4gICAgICBjb2RlOiAnSU5URVJOQUxfRVJST1InXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIEJ1c2NhIHVzdWFyaW9zIGNvbiBmaWx0cm9zIGF2YW56YWRvc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoRW50ZXJwcmlzZVVzZXJzKFxuICBvcHRpb25zOiBVc2VyU2VhcmNoT3B0aW9ucyA9IHt9LFxuICBjb250ZXh0PzogRW50ZXJwcmlzZUF1dGhDb250ZXh0XG4pOiBQcm9taXNlPFVzZXJPcGVyYXRpb25SZXN1bHQ+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIXN1cGFiYXNlQWRtaW4pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1N1cGFiYXNlIGFkbWluIGNsaWVudCBubyBkaXNwb25pYmxlJyxcbiAgICAgICAgY29kZTogJ1NVUEFCQVNFX1VOQVZBSUxBQkxFJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYXIgcGVybWlzb3NcbiAgICBpZiAoY29udGV4dCAmJiAhY29udGV4dC5wZXJtaXNzaW9ucy5pbmNsdWRlcygndXNlcl9tYW5hZ2VtZW50JykpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1Blcm1pc29zIGluc3VmaWNpZW50ZXMgcGFyYSBidXNjYXIgdXN1YXJpb3MnLFxuICAgICAgICBjb2RlOiAnSU5TVUZGSUNJRU5UX1BFUk1JU1NJT05TJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcXVlcnkgPSBzdXBhYmFzZUFkbWluXG4gICAgICAuZnJvbSgndXNlcl9wcm9maWxlcycpXG4gICAgICAuc2VsZWN0KCcqJywgeyBjb3VudDogJ2V4YWN0JyB9KTtcblxuICAgIC8vIEFwbGljYXIgZmlsdHJvc1xuICAgIGlmIChvcHRpb25zLnF1ZXJ5KSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5Lm9yKGBuYW1lLmlsaWtlLiUke29wdGlvbnMucXVlcnl9JSxlbWFpbC5pbGlrZS4lJHtvcHRpb25zLnF1ZXJ5fSVgKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yb2xlKSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdyb2xlJywgb3B0aW9ucy5yb2xlKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pc0FjdGl2ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdpc19hY3RpdmUnLCBvcHRpb25zLmlzQWN0aXZlKTtcbiAgICB9XG5cbiAgICAvLyBBcGxpY2FyIG9yZGVuYW1pZW50b1xuICAgIGNvbnN0IHNvcnRCeSA9IG9wdGlvbnMuc29ydEJ5IHx8ICdjcmVhdGVkX2F0JztcbiAgICBjb25zdCBzb3J0T3JkZXIgPSBvcHRpb25zLnNvcnRPcmRlciB8fCAnZGVzYyc7XG4gICAgcXVlcnkgPSBxdWVyeS5vcmRlcihzb3J0QnksIHsgYXNjZW5kaW5nOiBzb3J0T3JkZXIgPT09ICdhc2MnIH0pO1xuXG4gICAgLy8gQXBsaWNhciBwYWdpbmFjacOzblxuICAgIGlmIChvcHRpb25zLmxpbWl0KSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LmxpbWl0KG9wdGlvbnMubGltaXQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm9mZnNldCkge1xuICAgICAgcXVlcnkgPSBxdWVyeS5yYW5nZShvcHRpb25zLm9mZnNldCwgb3B0aW9ucy5vZmZzZXQgKyAob3B0aW9ucy5saW1pdCB8fCAxMCkgLSAxKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGE6IHVzZXJQcm9maWxlcywgZXJyb3I6IHNlYXJjaEVycm9yLCBjb3VudCB9ID0gYXdhaXQgcXVlcnk7XG5cbiAgICBpZiAoc2VhcmNoRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tFTlRFUlBSSVNFX1VTRVJdIEVycm9yIGJ1c2NhbmRvIHVzdWFyaW9zOicsIHNlYXJjaEVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ0Vycm9yIGJ1c2NhbmRvIHVzdWFyaW9zJyxcbiAgICAgICAgY29kZTogJ1NFQVJDSF9FUlJPUidcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQ29udmVydGlyIGEgZm9ybWF0byBlbnRlcnByaXNlXG4gICAgY29uc3QgZW50ZXJwcmlzZVVzZXJzOiBFbnRlcnByaXNlVXNlcltdID0gKHVzZXJQcm9maWxlcyB8fCBbXSkubWFwKHByb2ZpbGUgPT4gKHtcbiAgICAgIGlkOiBwcm9maWxlLmlkLFxuICAgICAgY2xlcmtJZDogcHJvZmlsZS5jbGVya191c2VyX2lkLFxuICAgICAgZW1haWw6IHByb2ZpbGUuZW1haWwsXG4gICAgICBuYW1lOiBwcm9maWxlLm5hbWUsXG4gICAgICByb2xlOiBwcm9maWxlLnJvbGUsXG4gICAgICBwZXJtaXNzaW9uczogcHJvZmlsZS5wZXJtaXNzaW9ucyB8fCBbXSxcbiAgICAgIGlzQWN0aXZlOiBwcm9maWxlLmlzX2FjdGl2ZSxcbiAgICAgIG1ldGFkYXRhOiBwcm9maWxlLm1ldGFkYXRhIHx8IHt9LFxuICAgICAgY3JlYXRlZEF0OiBwcm9maWxlLmNyZWF0ZWRfYXQsXG4gICAgICB1cGRhdGVkQXQ6IHByb2ZpbGUudXBkYXRlZF9hdCxcbiAgICAgIGxhc3RMb2dpbkF0OiBwcm9maWxlLmxhc3RfbG9naW5fYXQsXG4gICAgICBsb2dpbkNvdW50OiBwcm9maWxlLmxvZ2luX2NvdW50IHx8IDBcbiAgICB9KSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHVzZXJzOiBlbnRlcnByaXNlVXNlcnMsXG4gICAgICB0b3RhbDogY291bnQgfHwgMFxuICAgIH07XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbRU5URVJQUklTRV9VU0VSXSBFcnJvciBlbiBzZWFyY2hFbnRlcnByaXNlVXNlcnM6JywgZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiAnRXJyb3IgaW50ZXJubyBidXNjYW5kbyB1c3VhcmlvcycsXG4gICAgICBjb2RlOiAnSU5URVJOQUxfRVJST1InXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIEFjdHVhbGl6YSB1biB1c3VhcmlvIGVudGVycHJpc2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUVudGVycHJpc2VVc2VyKFxuICBjbGVya1VzZXJJZDogc3RyaW5nLFxuICB1cGRhdGVzOiBVc2VyVXBkYXRlT3B0aW9ucyxcbiAgY29udGV4dDogRW50ZXJwcmlzZUF1dGhDb250ZXh0XG4pOiBQcm9taXNlPFVzZXJPcGVyYXRpb25SZXN1bHQ+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIXN1cGFiYXNlQWRtaW4pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1N1cGFiYXNlIGFkbWluIGNsaWVudCBubyBkaXNwb25pYmxlJyxcbiAgICAgICAgY29kZTogJ1NVUEFCQVNFX1VOQVZBSUxBQkxFJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYXIgcGVybWlzb3NcbiAgICBpZiAoIWNvbnRleHQucGVybWlzc2lvbnMuaW5jbHVkZXMoJ3VzZXJfbWFuYWdlbWVudCcpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdQZXJtaXNvcyBpbnN1ZmljaWVudGVzIHBhcmEgYWN0dWFsaXphciB1c3VhcmlvcycsXG4gICAgICAgIGNvZGU6ICdJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMnXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFByZXBhcmFyIGRhdG9zIGRlIGFjdHVhbGl6YWNpw7NuXG4gICAgY29uc3QgdXBkYXRlRGF0YTogYW55ID0ge1xuICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfTtcblxuICAgIGlmICh1cGRhdGVzLm5hbWUgIT09IHVuZGVmaW5lZCkgdXBkYXRlRGF0YS5uYW1lID0gdXBkYXRlcy5uYW1lO1xuICAgIGlmICh1cGRhdGVzLnJvbGUgIT09IHVuZGVmaW5lZCkgdXBkYXRlRGF0YS5yb2xlID0gdXBkYXRlcy5yb2xlO1xuICAgIGlmICh1cGRhdGVzLnBlcm1pc3Npb25zICE9PSB1bmRlZmluZWQpIHVwZGF0ZURhdGEucGVybWlzc2lvbnMgPSB1cGRhdGVzLnBlcm1pc3Npb25zO1xuICAgIGlmICh1cGRhdGVzLm1ldGFkYXRhICE9PSB1bmRlZmluZWQpIHVwZGF0ZURhdGEubWV0YWRhdGEgPSB1cGRhdGVzLm1ldGFkYXRhO1xuICAgIGlmICh1cGRhdGVzLmlzQWN0aXZlICE9PSB1bmRlZmluZWQpIHVwZGF0ZURhdGEuaXNfYWN0aXZlID0gdXBkYXRlcy5pc0FjdGl2ZTtcblxuICAgIC8vIEFjdHVhbGl6YXIgZW4gU3VwYWJhc2VcbiAgICBjb25zdCB7IGRhdGE6IHVwZGF0ZWRQcm9maWxlLCBlcnJvcjogdXBkYXRlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcbiAgICAgIC51cGRhdGUodXBkYXRlRGF0YSlcbiAgICAgIC5lcSgnY2xlcmtfdXNlcl9pZCcsIGNsZXJrVXNlcklkKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAodXBkYXRlRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tFTlRFUlBSSVNFX1VTRVJdIEVycm9yIGFjdHVhbGl6YW5kbyB1c3VhcmlvOicsIHVwZGF0ZUVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ0Vycm9yIGFjdHVhbGl6YW5kbyB1c3VhcmlvJyxcbiAgICAgICAgY29kZTogJ1VQREFURV9FUlJPUidcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQWN0dWFsaXphciBlbiBDbGVyayBzaSBlcyBuZWNlc2FyaW9cbiAgICBpZiAodXBkYXRlcy5uYW1lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBjbGVya0NsaWVudCgpO1xuICAgICAgICBjb25zdCBuYW1lUGFydHMgPSB1cGRhdGVzLm5hbWUuc3BsaXQoJyAnKTtcbiAgICAgICAgYXdhaXQgY2xpZW50LnVzZXJzLnVwZGF0ZVVzZXIoY2xlcmtVc2VySWQsIHtcbiAgICAgICAgICBmaXJzdE5hbWU6IG5hbWVQYXJ0c1swXSB8fCAnJyxcbiAgICAgICAgICBsYXN0TmFtZTogbmFtZVBhcnRzLnNsaWNlKDEpLmpvaW4oJyAnKSB8fCAnJ1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGNsZXJrRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdbRU5URVJQUklTRV9VU0VSXSBFcnJvciBhY3R1YWxpemFuZG8gbm9tYnJlIGVuIENsZXJrOicsIGNsZXJrRXJyb3IpO1xuICAgICAgICAvLyBObyBmYWxsYXIgbGEgb3BlcmFjacOzbiBwb3IgZXN0b1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldG9ybmFyIHVzdWFyaW8gYWN0dWFsaXphZG9cbiAgICBjb25zdCB1c2VyUmVzdWx0ID0gYXdhaXQgZ2V0RW50ZXJwcmlzZVVzZXIoY2xlcmtVc2VySWQsIGNvbnRleHQpO1xuICAgIHJldHVybiB1c2VyUmVzdWx0O1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW0VOVEVSUFJJU0VfVVNFUl0gRXJyb3IgZW4gdXBkYXRlRW50ZXJwcmlzZVVzZXI6JywgZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiAnRXJyb3IgaW50ZXJubyBhY3R1YWxpemFuZG8gdXN1YXJpbycsXG4gICAgICBjb2RlOiAnSU5URVJOQUxfRVJST1InXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdHJhIGFjdGl2aWRhZCBkZSBsb2dpbiBkZWwgdXN1YXJpb1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVjb3JkVXNlckxvZ2luKFxuICBjbGVya1VzZXJJZDogc3RyaW5nLFxuICBtZXRhZGF0YT86IGFueVxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgaWYgKCFzdXBhYmFzZUFkbWluKSByZXR1cm47XG5cbiAgICBhd2FpdCBzdXBhYmFzZUFkbWluXG4gICAgICAuZnJvbSgndXNlcl9wcm9maWxlcycpXG4gICAgICAudXBkYXRlKHtcbiAgICAgICAgbGFzdF9sb2dpbl9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBsb2dpbl9jb3VudDogc3VwYWJhc2VBZG1pbi5yYXcoJ2xvZ2luX2NvdW50ICsgMScpLFxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIG1ldGFkYXRhOiBzdXBhYmFzZUFkbWluLnJhdyhgXG4gICAgICAgICAgQ09BTEVTQ0UobWV0YWRhdGEsICd7fSc6Ompzb25iKSB8fCBcbiAgICAgICAgICBqc29uYl9idWlsZF9vYmplY3QoJ2xhc3RfbG9naW5fbWV0YWRhdGEnLCAkMTo6anNvbmIpXG4gICAgICAgIGAsIFtKU09OLnN0cmluZ2lmeShtZXRhZGF0YSB8fCB7fSldKVxuICAgICAgfSlcbiAgICAgIC5lcSgnY2xlcmtfdXNlcl9pZCcsIGNsZXJrVXNlcklkKTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tFTlRFUlBSSVNFX1VTRVJdIEVycm9yIHJlZ2lzdHJhbmRvIGxvZ2luOicsIGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIE9idGllbmUgZXN0YWTDrXN0aWNhcyBkZSB1c3Vhcmlvc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlclN0YXRpc3RpY3MoXG4gIGNvbnRleHQ6IEVudGVycHJpc2VBdXRoQ29udGV4dFxuKTogUHJvbWlzZTx7XG4gIHRvdGFsVXNlcnM6IG51bWJlcjtcbiAgYWN0aXZlVXNlcnM6IG51bWJlcjtcbiAgYWRtaW5Vc2VyczogbnVtYmVyO1xuICByZWNlbnRMb2dpbnM6IG51bWJlcjtcbn0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIXN1cGFiYXNlQWRtaW4gfHwgIWNvbnRleHQucGVybWlzc2lvbnMuaW5jbHVkZXMoJ3VzZXJfbWFuYWdlbWVudCcpKSB7XG4gICAgICByZXR1cm4geyB0b3RhbFVzZXJzOiAwLCBhY3RpdmVVc2VyczogMCwgYWRtaW5Vc2VyczogMCwgcmVjZW50TG9naW5zOiAwIH07XG4gICAgfVxuXG4gICAgY29uc3QgW1xuICAgICAgeyBjb3VudDogdG90YWxVc2VycyB9LFxuICAgICAgeyBjb3VudDogYWN0aXZlVXNlcnMgfSxcbiAgICAgIHsgY291bnQ6IGFkbWluVXNlcnMgfSxcbiAgICAgIHsgY291bnQ6IHJlY2VudExvZ2lucyB9XG4gICAgXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHN1cGFiYXNlQWRtaW4uZnJvbSgndXNlcl9wcm9maWxlcycpLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSksXG4gICAgICBzdXBhYmFzZUFkbWluLmZyb20oJ3VzZXJfcHJvZmlsZXMnKS5zZWxlY3QoJyonLCB7IGNvdW50OiAnZXhhY3QnLCBoZWFkOiB0cnVlIH0pLmVxKCdpc19hY3RpdmUnLCB0cnVlKSxcbiAgICAgIHN1cGFiYXNlQWRtaW4uZnJvbSgndXNlcl9wcm9maWxlcycpLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSkuZXEoJ3JvbGUnLCAnYWRtaW4nKSxcbiAgICAgIHN1cGFiYXNlQWRtaW4uZnJvbSgndXNlcl9wcm9maWxlcycpLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSlcbiAgICAgICAgLmd0ZSgnbGFzdF9sb2dpbl9hdCcsIG5ldyBEYXRlKERhdGUubm93KCkgLSA3ICogMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSlcbiAgICBdKTtcblxuICAgIHJldHVybiB7XG4gICAgICB0b3RhbFVzZXJzOiB0b3RhbFVzZXJzIHx8IDAsXG4gICAgICBhY3RpdmVVc2VyczogYWN0aXZlVXNlcnMgfHwgMCxcbiAgICAgIGFkbWluVXNlcnM6IGFkbWluVXNlcnMgfHwgMCxcbiAgICAgIHJlY2VudExvZ2luczogcmVjZW50TG9naW5zIHx8IDBcbiAgICB9O1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW0VOVEVSUFJJU0VfVVNFUl0gRXJyb3Igb2J0ZW5pZW5kbyBlc3RhZMOtc3RpY2FzOicsIGVycm9yKTtcbiAgICByZXR1cm4geyB0b3RhbFVzZXJzOiAwLCBhY3RpdmVVc2VyczogMCwgYWRtaW5Vc2VyczogMCwgcmVjZW50TG9naW5zOiAwIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRFbnRlcnByaXNlVXNlciIsImdldFVzZXJTdGF0aXN0aWNzIiwicmVjb3JkVXNlckxvZ2luIiwic2VhcmNoRW50ZXJwcmlzZVVzZXJzIiwidXBkYXRlRW50ZXJwcmlzZVVzZXIiLCJjbGVya1VzZXJJZCIsImNvbnRleHQiLCJzdXBhYmFzZUFkbWluIiwic3VjY2VzcyIsImVycm9yIiwiY29kZSIsImRhdGEiLCJ1c2VyUHJvZmlsZSIsInN1cGFiYXNlRXJyb3IiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJzaW5nbGUiLCJjb25zb2xlIiwiY2xlcmtVc2VyIiwiY2xpZW50IiwiY2xlcmtDbGllbnQiLCJ1c2VycyIsImdldFVzZXIiLCJjbGVya0Vycm9yIiwiZW50ZXJwcmlzZVVzZXIiLCJpZCIsImNsZXJrSWQiLCJlbWFpbCIsImVtYWlsQWRkcmVzc2VzIiwiZW1haWxBZGRyZXNzIiwibmFtZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwidHJpbSIsInVuZGVmaW5lZCIsInJvbGUiLCJwZXJtaXNzaW9ucyIsImlzQWN0aXZlIiwiaXNfYWN0aXZlIiwibWV0YWRhdGEiLCJjcmVhdGVkQXQiLCJjcmVhdGVkX2F0IiwidG9TdHJpbmciLCJ1cGRhdGVkQXQiLCJ1cGRhdGVkX2F0IiwibGFzdExvZ2luQXQiLCJsYXN0X2xvZ2luX2F0IiwibG9naW5Db3VudCIsImxvZ2luX2NvdW50IiwidXNlciIsIm9wdGlvbnMiLCJpbmNsdWRlcyIsInF1ZXJ5IiwiY291bnQiLCJvciIsInNvcnRCeSIsInNvcnRPcmRlciIsIm9yZGVyIiwiYXNjZW5kaW5nIiwibGltaXQiLCJvZmZzZXQiLCJyYW5nZSIsInVzZXJQcm9maWxlcyIsInNlYXJjaEVycm9yIiwiZW50ZXJwcmlzZVVzZXJzIiwibWFwIiwicHJvZmlsZSIsImNsZXJrX3VzZXJfaWQiLCJ0b3RhbCIsInVwZGF0ZXMiLCJ1cGRhdGVEYXRhIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidXBkYXRlZFByb2ZpbGUiLCJ1cGRhdGVFcnJvciIsInVwZGF0ZSIsIm5hbWVQYXJ0cyIsInNwbGl0IiwidXBkYXRlVXNlciIsInNsaWNlIiwiam9pbiIsIndhcm4iLCJ1c2VyUmVzdWx0IiwicmF3IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvdGFsVXNlcnMiLCJhY3RpdmVVc2VycyIsImFkbWluVXNlcnMiLCJyZWNlbnRMb2dpbnMiLCJQcm9taXNlIiwiYWxsIiwiaGVhZCIsImd0ZSIsIm5vdyJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7Ozs7Ozs7OztJQW9FcUJBLGlCQUFpQjtlQUFqQkE7O0lBK1JBQyxpQkFBaUI7ZUFBakJBOztJQTVCQUMsZUFBZTtlQUFmQTs7SUF0TEFDLHFCQUFxQjtlQUFyQkE7O0lBbUdBQyxvQkFBb0I7ZUFBcEJBOzs7d0JBbFBNOzBCQUNFO0FBaUV2QixlQUFlSixrQkFDcEJLLFdBQW1CLEVBQ25CQyxPQUErQjtJQUUvQixJQUFJO1FBQ0YsSUFBSSxDQUFDQyx1QkFBYSxFQUFFO1lBQ2xCLE9BQU87Z0JBQ0xDLFNBQVM7Z0JBQ1RDLE9BQU87Z0JBQ1BDLE1BQU07WUFDUjtRQUNGO1FBRUEsNEJBQTRCO1FBQzVCLE1BQU0sRUFBRUMsTUFBTUMsV0FBVyxFQUFFSCxPQUFPSSxhQUFhLEVBQUUsR0FBRyxNQUFNTix1QkFBYSxDQUNwRU8sSUFBSSxDQUFDLGlCQUNMQyxNQUFNLENBQUMsS0FDUEMsRUFBRSxDQUFDLGlCQUFpQlgsYUFDcEJZLE1BQU07UUFFVCxJQUFJSixpQkFBaUJBLGNBQWNILElBQUksS0FBSyxZQUFZO1lBQ3REUSxRQUFRVCxLQUFLLENBQUMsMkRBQTJESTtZQUN6RSxPQUFPO2dCQUNMTCxTQUFTO2dCQUNUQyxPQUFPO2dCQUNQQyxNQUFNO1lB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