0a4c3ed7e2ad9390ba6b46d1ddf29991
// ===================================
// PINTEYA E-COMMERCE - VALIDACIONES CON ZOD
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AddressSchema: function() {
        return AddressSchema;
    },
    CategoryFiltersSchema: function() {
        return CategoryFiltersSchema;
    },
    CategorySchema: function() {
        return CategorySchema;
    },
    ContactFormSchema: function() {
        return ContactFormSchema;
    },
    CreateOrderSchema: function() {
        return CreateOrderSchema;
    },
    CreatePreferenceSchema: function() {
        return CreatePreferenceSchema;
    },
    IdParamSchema: function() {
        return IdParamSchema;
    },
    MercadoPagoItemSchema: function() {
        return MercadoPagoItemSchema;
    },
    MercadoPagoWebhookSchema: function() {
        return MercadoPagoWebhookSchema;
    },
    NewsletterSchema: function() {
        return NewsletterSchema;
    },
    OrderFiltersSchema: function() {
        return OrderFiltersSchema;
    },
    OrderItemSchema: function() {
        return OrderItemSchema;
    },
    ProductFiltersSchema: function() {
        return ProductFiltersSchema;
    },
    ProductSchema: function() {
        return ProductSchema;
    },
    SlugParamSchema: function() {
        return SlugParamSchema;
    },
    UpdateUserProfileSchema: function() {
        return UpdateUserProfileSchema;
    },
    UserSchema: function() {
        return UserSchema;
    },
    safeValidateData: function() {
        return safeValidateData;
    },
    validateData: function() {
        return validateData;
    }
});
const _zod = require("zod");
const _shop = require("../constants/shop");
const ProductSchema = _zod.z.object({
    name: _zod.z.string().min(1, 'El nombre es requerido').max(255, 'Nombre muy largo'),
    brand: _zod.z.string().min(1, 'La marca es requerida').max(100, 'Marca muy larga').optional(),
    slug: _zod.z.string().min(1, 'El slug es requerido').max(255, 'Slug muy largo'),
    description: _zod.z.string().optional(),
    price: _zod.z.number().positive('El precio debe ser positivo'),
    discounted_price: _zod.z.number().positive().optional(),
    stock: _zod.z.number().int().min(0, 'El stock no puede ser negativo').default(0),
    category_id: _zod.z.number().int().positive().optional(),
    images: _zod.z.object({
        previews: _zod.z.array(_zod.z.string().url()).optional(),
        main: _zod.z.string().url().optional()
    }).optional()
});
const ProductFiltersSchema = _zod.z.object({
    category: _zod.z.string().optional(),
    brand: _zod.z.string().optional(),
    priceMin: _zod.z.number().positive().optional(),
    priceMax: _zod.z.number().positive().optional(),
    search: _zod.z.string().optional(),
    page: _zod.z.number().int().positive().default(1),
    limit: _zod.z.number().int().positive().max(100).default(12),
    sortBy: _zod.z.enum([
        'price',
        'name',
        'created_at',
        'brand'
    ]).default('created_at'),
    sortOrder: _zod.z.enum([
        'asc',
        'desc'
    ]).default('desc')
});
const CategorySchema = _zod.z.object({
    name: _zod.z.string().min(1, 'El nombre es requerido').max(255, 'Nombre muy largo'),
    slug: _zod.z.string().min(1, 'El slug es requerido').max(255, 'Slug muy largo'),
    description: _zod.z.string().optional().nullable(),
    icon: _zod.z.string().optional().nullable()
});
const CategoryFiltersSchema = _zod.z.object({
    search: _zod.z.string().optional(),
    parentId: _zod.z.number().optional()
});
const UserSchema = _zod.z.object({
    clerk_id: _zod.z.string().min(1, 'ID de Clerk requerido'),
    email: _zod.z.string().email('Email inválido'),
    name: _zod.z.string().max(255, 'Nombre muy largo').optional()
});
const UpdateUserProfileSchema = _zod.z.object({
    name: _zod.z.string().max(255, 'Nombre muy largo').optional(),
    email: _zod.z.string().email('Email inválido').optional()
});
const OrderItemSchema = _zod.z.object({
    productId: _zod.z.number().int().positive('ID de producto inválido'),
    quantity: _zod.z.number().int().positive('La cantidad debe ser positiva'),
    price: _zod.z.number().positive('El precio debe ser positivo')
});
const CreateOrderSchema = _zod.z.object({
    items: _zod.z.array(OrderItemSchema).min(1, 'Debe incluir al menos un producto'),
    total: _zod.z.number().positive('El total debe ser positivo'),
    shippingAddress: _zod.z.object({
        street: _zod.z.string().min(1, 'La dirección es requerida'),
        city: _zod.z.string().min(1, 'La ciudad es requerida'),
        postalCode: _zod.z.string().min(1, 'El código postal es requerido'),
        country: _zod.z.string().min(1, 'El país es requerido')
    }).optional()
});
const OrderFiltersSchema = _zod.z.object({
    status: _zod.z.string().optional(),
    dateFrom: _zod.z.string().optional(),
    dateTo: _zod.z.string().optional(),
    page: _zod.z.number().int().positive().default(1),
    limit: _zod.z.number().int().positive().max(100).default(10)
});
const MercadoPagoItemSchema = _zod.z.object({
    title: _zod.z.string().min(1, 'El título es requerido'),
    quantity: _zod.z.number().int().positive('La cantidad debe ser positiva'),
    unit_price: _zod.z.number().positive('El precio debe ser positivo'),
    currency_id: _zod.z.string().default('ARS')
});
const CreatePreferenceSchema = _zod.z.object({
    items: _zod.z.array(MercadoPagoItemSchema).min(1, 'Debe incluir al menos un item'),
    external_reference: _zod.z.string().min(1, 'La referencia externa es requerida'),
    back_urls: _zod.z.object({
        success: _zod.z.string().url('URL de éxito inválida'),
        failure: _zod.z.string().url('URL de fallo inválida'),
        pending: _zod.z.string().url('URL de pendiente inválida')
    })
});
const MercadoPagoWebhookSchema = _zod.z.object({
    action: _zod.z.string(),
    api_version: _zod.z.string(),
    data: _zod.z.object({
        id: _zod.z.string()
    }),
    date_created: _zod.z.string(),
    id: _zod.z.number(),
    live_mode: _zod.z.boolean(),
    type: _zod.z.string(),
    user_id: _zod.z.string()
});
const ContactFormSchema = _zod.z.object({
    name: _zod.z.string().min(_shop.VALIDATION_CONSTANTS.MIN_NAME_LENGTH, 'El nombre es requerido').max(_shop.VALIDATION_CONSTANTS.MAX_NAME_LENGTH, 'Nombre muy largo'),
    email: _zod.z.string().email('Email inválido'),
    subject: _zod.z.string().min(1, 'El asunto es requerido').max(200, 'Asunto muy largo'),
    message: _zod.z.string().min(_shop.VALIDATION_CONSTANTS.MIN_MESSAGE_LENGTH, 'El mensaje debe tener al menos 10 caracteres').max(_shop.VALIDATION_CONSTANTS.MAX_MESSAGE_LENGTH, 'Mensaje muy largo')
});
const NewsletterSchema = _zod.z.object({
    email: _zod.z.string().email('Email inválido')
});
const AddressSchema = _zod.z.object({
    name: _zod.z.string().min(1, 'El nombre es requerido').max(100, 'Nombre muy largo'),
    street: _zod.z.string().min(1, 'La dirección es requerida').max(255, 'Dirección muy larga'),
    city: _zod.z.string().min(1, 'La ciudad es requerida').max(100, 'Ciudad muy larga'),
    postal_code: _zod.z.string().min(1, 'El código postal es requerido').max(20, 'Código postal muy largo'),
    is_default: _zod.z.boolean().default(false)
});
const IdParamSchema = _zod.z.object({
    id: _zod.z.string().transform((val)=>{
        const num = parseInt(val, 10);
        if (isNaN(num) || num <= 0) {
            throw new Error('ID inválido');
        }
        return num;
    })
});
const SlugParamSchema = _zod.z.object({
    slug: _zod.z.string().min(1, 'Slug requerido').max(255, 'Slug muy largo')
});
function validateData(schema, data) {
    try {
        return schema.parse(data);
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            const messages = error.errors.map((err)=>`${err.path.join('.')}: ${err.message}`);
            throw new Error(`Errores de validación: ${messages.join(', ')}`);
        }
        throw error;
    }
}
function safeValidateData(schema, data) {
    try {
        const validatedData = schema.parse(data);
        return {
            success: true,
            data: validatedData
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            const messages = error.errors.map((err)=>`${err.path.join('.')}: ${err.message}`);
            return {
                success: false,
                error: `Errores de validación: ${messages.join(', ')}`
            };
        }
        return {
            success: false,
            error: 'Error de validación desconocido'
        };
    }
}

//# sourceMappingURL=data:application/json;base64,