{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ShopWithSidebar\\CategoryDropdown.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ChevronDown, Tag, Loader2 } from \"lucide-react\";\r\n\r\ninterface CategoryItemProps {\r\n  category: {\r\n    name: string;\r\n    products: number;\r\n    isRefined?: boolean;\r\n    slug?: string;\r\n    id?: string | number;\r\n  };\r\n  onCategorySelect: (categorySlug: string) => void;\r\n  isSelected: boolean;\r\n}\r\n\r\nconst CategoryItem = ({ category, onCategorySelect, isSelected }: CategoryItemProps) => {\r\n  const handleClick = () => {\r\n    if (category.slug) {\r\n      onCategorySelect(category.slug);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-between py-2 px-1 hover:bg-gray-50 rounded-md transition-colors\" data-testid=\"category-filter\">\r\n      <Checkbox\r\n        id={`category-${category.id || category.slug}`}\r\n        checked={isSelected}\r\n        onCheckedChange={handleClick}\r\n        label={category.name}\r\n        className=\"flex-1\"\r\n      />\r\n\r\n      <Badge\r\n        variant={isSelected ? \"default\" : \"secondary\"}\r\n        size=\"sm\"\r\n        className=\"ml-2\"\r\n      >\r\n        {category.products}\r\n      </Badge>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface CategoryDropdownProps {\r\n  categories: Array<{\r\n    name: string;\r\n    products: number;\r\n    isRefined?: boolean;\r\n    slug?: string;\r\n    id?: string | number;\r\n  }>;\r\n  onCategorySelect: (categorySlug: string) => void;\r\n  selectedCategory?: string;\r\n  loading?: boolean;\r\n}\r\n\r\nconst CategoryDropdown = ({\r\n  categories,\r\n  onCategorySelect,\r\n  selectedCategory,\r\n  loading = false\r\n}: CategoryDropdownProps) => {\r\n  const [toggleDropdown, setToggleDropdown] = useState(true);\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent className=\"p-0\">\r\n        <button\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            setToggleDropdown(!toggleDropdown);\r\n          }}\r\n          className=\"w-full flex items-center justify-between py-4 px-5 hover:bg-gray-50 transition-colors\"\r\n        >\r\n          <div className=\"flex items-center gap-2\">\r\n            <Tag className=\"w-4 h-4 text-primary\" />\r\n            <span className=\"font-medium text-gray-900\">Categorías</span>\r\n            {loading && (\r\n              <Loader2 className=\"w-4 h-4 animate-spin text-gray-400\" />\r\n            )}\r\n          </div>\r\n\r\n          <ChevronDown\r\n            className={`w-5 h-5 text-gray-600 transition-transform duration-200 ${\r\n              toggleDropdown ? \"rotate-180\" : \"\"\r\n            }`}\r\n          />\r\n        </button>\r\n\r\n        {/* Dropdown Content */}\r\n        {toggleDropdown && (\r\n          <div className=\"border-t border-gray-200 p-4 space-y-2\">\r\n            {loading ? (\r\n              <div className=\"flex items-center justify-center py-8 text-gray-500\">\r\n                <Loader2 className=\"w-5 h-5 animate-spin mr-2\" />\r\n                Cargando categorías...\r\n              </div>\r\n            ) : categories.length === 0 ? (\r\n              <div className=\"flex flex-col items-center justify-center py-8 text-gray-500\">\r\n                <Tag className=\"w-8 h-8 mb-2 text-gray-300\" />\r\n                <p className=\"text-sm\">No hay categorías disponibles</p>\r\n              </div>\r\n            ) : (\r\n              categories.map((category, key) => (\r\n                <CategoryItem\r\n                  key={category.id || key}\r\n                  category={category}\r\n                  onCategorySelect={onCategorySelect}\r\n                  isSelected={selectedCategory === category.slug}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CategoryDropdown;\r\n"],"names":["CategoryItem","category","onCategorySelect","isSelected","handleClick","slug","div","className","data-testid","Checkbox","id","checked","onCheckedChange","label","name","Badge","variant","size","products","CategoryDropdown","categories","selectedCategory","loading","toggleDropdown","setToggleDropdown","useState","Card","CardContent","button","onClick","e","preventDefault","Tag","span","Loader2","ChevronDown","length","p","map","key"],"mappings":"AAAA;;;;;+BA4HA;;;eAAA;;;;uBA1HyB;sBACS;0BACT;uBACH;6BACoB;AAc1C,MAAMA,eAAe,CAAC,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,UAAU,EAAqB;IACjF,MAAMC,cAAc;QAClB,IAAIH,SAASI,IAAI,EAAE;YACjBH,iBAAiBD,SAASI,IAAI;QAChC;IACF;IAEA,qBACE,sBAACC;QAAIC,WAAU;QAA4FC,eAAY;;0BACrH,qBAACC,kBAAQ;gBACPC,IAAI,CAAC,SAAS,EAAET,SAASS,EAAE,IAAIT,SAASI,IAAI,EAAE;gBAC9CM,SAASR;gBACTS,iBAAiBR;gBACjBS,OAAOZ,SAASa,IAAI;gBACpBP,WAAU;;0BAGZ,qBAACQ,YAAK;gBACJC,SAASb,aAAa,YAAY;gBAClCc,MAAK;gBACLV,WAAU;0BAETN,SAASiB,QAAQ;;;;AAI1B;AAeA,MAAMC,mBAAmB,CAAC,EACxBC,UAAU,EACVlB,gBAAgB,EAChBmB,gBAAgB,EAChBC,UAAU,KAAK,EACO;IACtB,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGC,IAAAA,eAAQ,EAAC;IAErD,qBACE,qBAACC,UAAI;kBACH,cAAA,sBAACC,iBAAW;YAACpB,WAAU;;8BACrB,sBAACqB;oBACCC,SAAS,CAACC;wBACRA,EAAEC,cAAc;wBAChBP,kBAAkB,CAACD;oBACrB;oBACAhB,WAAU;;sCAEV,sBAACD;4BAAIC,WAAU;;8CACb,qBAACyB,gBAAG;oCAACzB,WAAU;;8CACf,qBAAC0B;oCAAK1B,WAAU;8CAA4B;;gCAC3Ce,yBACC,qBAACY,oBAAO;oCAAC3B,WAAU;;;;sCAIvB,qBAAC4B,wBAAW;4BACV5B,WAAW,CAAC,wDAAwD,EAClEgB,iBAAiB,eAAe,IAChC;;;;gBAKLA,gCACC,qBAACjB;oBAAIC,WAAU;8BACZe,wBACC,sBAAChB;wBAAIC,WAAU;;0CACb,qBAAC2B,oBAAO;gCAAC3B,WAAU;;4BAA8B;;yBAGjDa,WAAWgB,MAAM,KAAK,kBACxB,sBAAC9B;wBAAIC,WAAU;;0CACb,qBAACyB,gBAAG;gCAACzB,WAAU;;0CACf,qBAAC8B;gCAAE9B,WAAU;0CAAU;;;yBAGzBa,WAAWkB,GAAG,CAAC,CAACrC,UAAUsC,oBACxB,qBAACvC;4BAECC,UAAUA;4BACVC,kBAAkBA;4BAClBC,YAAYkB,qBAAqBpB,SAASI,IAAI;2BAHzCJ,SAASS,EAAE,IAAI6B;;;;;AAYtC;MAEA,WAAepB"}