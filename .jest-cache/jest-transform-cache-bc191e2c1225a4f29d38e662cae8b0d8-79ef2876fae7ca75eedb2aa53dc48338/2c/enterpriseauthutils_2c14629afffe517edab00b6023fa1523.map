{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\enterprise-auth-utils.ts"],"sourcesContent":["/**\n * Utilidades de Autenticación Enterprise\n * Sistema centralizado que combina Clerk + Supabase con patrones enterprise\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\nimport { auth } from '@/auth';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { validateJWTIntegrity, validateJWTPermissions } from './jwt-validation';\nimport { validateRequestOrigin } from './csrf-protection';\nimport { checkRateLimit, RATE_LIMIT_CONFIGS } from './rate-limiting';\nimport { logAuthSuccess, logAuthFailure, logPermissionDenied } from './security-audit';\n\n// =====================================================\n// TIPOS Y INTERFACES ENTERPRISE\n// =====================================================\n\nexport interface EnterpriseAuthContext {\n  // Información del usuario\n  userId: string;\n  sessionId?: string;\n  email?: string;\n  role: 'admin' | 'user' | 'moderator';\n  permissions: string[];\n  \n  // Información de la sesión\n  sessionValid: boolean;\n  sessionMetadata?: any;\n  \n  // Información de seguridad\n  securityLevel: 'low' | 'medium' | 'high' | 'critical';\n  ipAddress?: string;\n  userAgent?: string;\n  \n  // Clientes de base de datos\n  supabase: typeof supabaseAdmin;\n  \n  // Información de validaciones\n  validations: {\n    jwtValid: boolean;\n    csrfValid: boolean;\n    rateLimitPassed: boolean;\n    originValid: boolean;\n  };\n}\n\nexport interface EnterpriseAuthResult {\n  success: boolean;\n  context?: EnterpriseAuthContext;\n  error?: string;\n  code?: string;\n  status?: number;\n  retryAfter?: number;\n}\n\nexport interface EnterpriseAuthOptions {\n  requiredRole?: 'admin' | 'user' | 'moderator';\n  requiredPermissions?: string[];\n  securityLevel?: 'low' | 'medium' | 'high' | 'critical';\n  enableRateLimit?: boolean;\n  enableCSRFProtection?: boolean;\n  enableJWTValidation?: boolean;\n  rateLimitType?: keyof typeof RATE_LIMIT_CONFIGS;\n}\n\n// =====================================================\n// CONFIGURACIONES ENTERPRISE\n// =====================================================\n\nconst ENTERPRISE_CONFIGS = {\n  // Configuración para operaciones críticas (admin, pagos)\n  critical: {\n    requiredRole: 'admin' as const,\n    securityLevel: 'critical' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'admin' as const,\n    requiredPermissions: ['admin_access']\n  },\n  \n  // Configuración para operaciones de alto nivel (gestión de contenido)\n  high: {\n    requiredRole: 'admin' as const,\n    securityLevel: 'high' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'admin' as const\n  },\n  \n  // Configuración para operaciones moderadas (APIs de productos)\n  medium: {\n    securityLevel: 'medium' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: false,\n    enableJWTValidation: false,\n    rateLimitType: 'products' as const\n  },\n  \n  // Configuración para operaciones básicas (consultas públicas)\n  low: {\n    securityLevel: 'low' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: false,\n    enableJWTValidation: false,\n    rateLimitType: 'general' as const\n  }\n};\n\n// =====================================================\n// FUNCIONES PRINCIPALES ENTERPRISE\n// =====================================================\n\n/**\n * Función principal de autenticación enterprise\n * Combina todas las validaciones y retorna contexto completo\n */\nexport async function getEnterpriseAuthContext(\n  request: NextRequest | NextApiRequest,\n  options: EnterpriseAuthOptions = {}\n): Promise<EnterpriseAuthResult> {\n  try {\n    // BYPASS TEMPORAL PARA DESARROLLO\n    if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\n      return {\n        success: true,\n        context: {\n          userId: 'dev-admin',\n          sessionId: 'dev-session',\n          email: 'santiago@xor.com.ar',\n          role: 'admin',\n          permissions: ['admin_access', 'products_read', 'products_write', 'orders_read', 'orders_write'],\n          sessionValid: true,\n          securityLevel: 'critical',\n          supabase: supabaseAdmin,\n          validations: {\n            jwtValid: true,\n            csrfValid: true,\n            rateLimitPassed: true,\n            originValid: true\n          }\n        },\n        user: {\n          id: 'dev-admin',\n          email: 'santiago@xor.com.ar',\n          name: 'Dev Admin'\n        },\n        supabase: supabaseAdmin\n      };\n    }\n\n    const startTime = Date.now();\n\n    // Aplicar configuración predefinida si se especifica nivel de seguridad\n    const config = options.securityLevel\n      ? { ...ENTERPRISE_CONFIGS[options.securityLevel], ...options }\n      : options;\n\n    // 1. VALIDACIÓN DE RATE LIMITING\n    if (config.enableRateLimit && config.rateLimitType) {\n      const rateLimitResult = await checkRateLimit(\n        request,\n        RATE_LIMIT_CONFIGS[config.rateLimitType],\n        `enterprise_${config.rateLimitType}`\n      );\n\n      if (!rateLimitResult.allowed) {\n        await logAuthFailure(\n          'unknown',\n          `Rate limit exceeded: ${rateLimitResult.error}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: rateLimitResult.error || 'Rate limit exceeded',\n          code: 'RATE_LIMIT_EXCEEDED',\n          status: 429,\n          retryAfter: rateLimitResult.retryAfter\n        };\n      }\n    }\n\n    // 2. VALIDACIÓN CSRF\n    let csrfValid = true;\n    if (config.enableCSRFProtection) {\n      const csrfResult = await validateRequestOrigin(request);\n      csrfValid = csrfResult.valid;\n      \n      if (!csrfValid) {\n        await logAuthFailure(\n          'unknown',\n          `CSRF validation failed: ${csrfResult.error}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: csrfResult.error || 'Invalid request origin',\n          code: 'CSRF_VALIDATION_FAILED',\n          status: 403\n        };\n      }\n    }\n\n    // 3. AUTENTICACIÓN BÁSICA CON CLERK\n    let userId: string;\n    let sessionId: string | undefined;\n    let userEmail: string | undefined;\n\n    if (request && 'query' in request) {\n      // Pages Router - NextAuth.js\n      // TODO: Implementar autenticación para Pages Router con NextAuth.js\n      return {\n        success: false,\n        error: 'Pages Router no soportado con NextAuth.js',\n        code: 'NOT_SUPPORTED',\n          status: 401\n        };\n    } else {\n      // App Router - NextAuth.js\n      const session = await auth();\n      if (!session?.user?.id) {\n        return {\n          success: false,\n          error: 'Usuario no autenticado',\n          code: 'NOT_AUTHENTICATED',\n          status: 401\n        };\n      }\n      userId = session.user.id;\n      sessionId = session.user.id; // NextAuth.js no tiene sessionId separado\n      userEmail = session.user.email;\n    }\n\n    // 4. VALIDACIÓN JWT\n    let jwtValid = true;\n    if (config.enableJWTValidation) {\n      const jwtResult = await validateJWTIntegrity(request);\n      jwtValid = jwtResult.valid;\n      \n      if (!jwtValid) {\n        await logAuthFailure(\n          userId,\n          `JWT validation failed: ${jwtResult.error}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: jwtResult.error || 'Invalid JWT token',\n          code: 'JWT_VALIDATION_FAILED',\n          status: 401\n        };\n      }\n\n      // Validar permisos específicos si se requieren\n      if (config.requiredRole || config.requiredPermissions) {\n        const permissionResult = await validateJWTPermissions(\n          config.requiredRole || '',\n          config.requiredPermissions || [],\n          request\n        );\n        \n        if (!permissionResult.valid) {\n          await logPermissionDenied(\n            userId,\n            `Permission validation failed: ${permissionResult.error}`,\n            request\n          );\n          \n          return {\n            success: false,\n            error: permissionResult.error || 'Insufficient permissions',\n            code: 'INSUFFICIENT_PERMISSIONS',\n            status: 403\n          };\n        }\n      }\n    }\n\n    // 5. OBTENER INFORMACIÓN DEL USUARIO DESDE SUPABASE\n    const { data: userProfile, error: userError } = await supabaseAdmin\n      .from('user_profiles')\n      .select('*')\n      .eq('clerk_user_id', userId)\n      .single();\n\n    if (userError && userError.code !== 'PGRST116') {\n      console.error('[ENTERPRISE_AUTH] Error obteniendo perfil de usuario:', userError);\n    }\n\n    // 6. DETERMINAR ROL Y PERMISOS\n    const userRole = userProfile?.role || 'user';\n    const userPermissions = userProfile?.permissions || [];\n\n    // Validar rol requerido\n    if (config.requiredRole && userRole !== config.requiredRole) {\n      await logPermissionDenied(\n        userId,\n        `Role validation failed: required ${config.requiredRole}, got ${userRole}`,\n        request\n      );\n      \n      return {\n        success: false,\n        error: `Rol requerido: ${config.requiredRole}`,\n        code: 'INSUFFICIENT_ROLE',\n        status: 403\n      };\n    }\n\n    // Validar permisos requeridos\n    if (config.requiredPermissions && config.requiredPermissions.length > 0) {\n      const hasAllPermissions = config.requiredPermissions.every(\n        permission => userPermissions.includes(permission)\n      );\n      \n      if (!hasAllPermissions) {\n        await logPermissionDenied(\n          userId,\n          `Permission validation failed: missing ${config.requiredPermissions.join(', ')}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: `Permisos insuficientes: ${config.requiredPermissions.join(', ')}`,\n          code: 'INSUFFICIENT_PERMISSIONS',\n          status: 403\n        };\n      }\n    }\n\n    // 7. OBTENER INFORMACIÓN ADICIONAL\n    const ipAddress = getClientIP(request);\n    const userAgent = getHeader(request, 'user-agent') || 'unknown';\n\n    // 8. CREAR CONTEXTO ENTERPRISE\n    const context: EnterpriseAuthContext = {\n      userId,\n      sessionId,\n      email: userProfile?.email || userEmail,\n      role: userRole as 'admin' | 'user' | 'moderator',\n      permissions: userPermissions,\n      sessionValid: !!sessionId,\n      sessionMetadata: userProfile?.metadata,\n      securityLevel: config.securityLevel || 'medium',\n      ipAddress,\n      userAgent,\n      supabase: supabaseAdmin,\n      validations: {\n        jwtValid,\n        csrfValid,\n        rateLimitPassed: true,\n        originValid: csrfValid\n      }\n    };\n\n    // 9. LOG DE ÉXITO\n    await logAuthSuccess(userId, {\n      ip_address: ipAddress,\n      user_agent: userAgent,\n      session_id: sessionId,\n      security_level: config.securityLevel || 'medium',\n      permissions: userPermissions,\n      role: userRole\n    }, request);\n\n    const duration = Date.now() - startTime;\n    console.log(`[ENTERPRISE_AUTH] Autenticación exitosa para ${userId} en ${duration}ms`);\n\n    return {\n      success: true,\n      context\n    };\n\n  } catch (error) {\n    console.error('[ENTERPRISE_AUTH] Error en autenticación enterprise:', error);\n    \n    await logAuthFailure(\n      'unknown',\n      `Enterprise auth error: ${error.message}`,\n      request\n    );\n    \n    return {\n      success: false,\n      error: 'Error interno de autenticación',\n      code: 'INTERNAL_AUTH_ERROR',\n      status: 500\n    };\n  }\n}\n\n// =====================================================\n// FUNCIONES AUXILIARES\n// =====================================================\n\n/**\n * Obtiene la IP del cliente\n */\nfunction getClientIP(request: NextRequest | NextApiRequest): string {\n  if ('ip' in request && request.ip) {\n    return request.ip;\n  }\n  \n  const forwarded = getHeader(request, 'x-forwarded-for');\n  const realIP = getHeader(request, 'x-real-ip');\n  const cfIP = getHeader(request, 'cf-connecting-ip');\n  \n  return forwarded?.split(',')[0] || realIP || cfIP || 'unknown';\n}\n\n/**\n * Obtiene un header de manera compatible\n */\nfunction getHeader(request: NextRequest | NextApiRequest, headerName: string): string | null {\n  if ('headers' in request && typeof request.headers.get === 'function') {\n    return (request as NextRequest).headers.get(headerName);\n  } else if ('headers' in request) {\n    const header = (request as NextApiRequest).headers[headerName];\n    return Array.isArray(header) ? header[0] : header || null;\n  }\n  return null;\n}\n\n// =====================================================\n// FUNCIONES DE CONVENIENCIA ENTERPRISE\n// =====================================================\n\n/**\n * Autenticación para operaciones críticas (admin, pagos)\n */\nexport async function requireCriticalAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, { securityLevel: 'critical' });\n}\n\n/**\n * Autenticación para operaciones de alto nivel (gestión de contenido)\n */\nexport async function requireHighAuth(\n  request: NextRequest | NextApiRequest,\n  requiredPermissions?: string[]\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, {\n    securityLevel: 'high',\n    requiredPermissions\n  });\n}\n\n/**\n * Autenticación para operaciones moderadas (APIs de productos)\n */\nexport async function requireMediumAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, { securityLevel: 'medium' });\n}\n\n/**\n * Autenticación básica para operaciones públicas con rate limiting\n */\nexport async function requireBasicAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, { securityLevel: 'low' });\n}\n\n/**\n * Autenticación específica para admin con permisos personalizados\n */\nexport async function requireAdminAuth(\n  request: NextRequest | NextApiRequest,\n  requiredPermissions: string[] = ['admin_access']\n): Promise<EnterpriseAuthResult> {\n  // BYPASS TEMPORAL PARA DESARROLLO\n  if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\n    console.log('[Enterprise Auth] BYPASS AUTH ENABLED - requireAdminAuth');\n\n    const { createClient } = await import('@supabase/supabase-js');\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    return {\n      success: true,\n      user: {\n        id: 'dev-admin',\n        email: 'santiago@xor.com.ar',\n        role: 'admin'\n      },\n      supabase,\n      context: {\n        user: {\n          id: 'dev-admin',\n          email: 'santiago@xor.com.ar',\n          role: 'admin'\n        },\n        permissions: requiredPermissions,\n        metadata: { bypass: true }\n      }\n    };\n  }\n\n  return getEnterpriseAuthContext(request, {\n    requiredRole: 'admin',\n    requiredPermissions,\n    securityLevel: 'critical',\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'admin'\n  });\n}\n\n/**\n * Autenticación para APIs de pagos con máxima seguridad\n */\nexport async function requirePaymentAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, {\n    securityLevel: 'critical',\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'payments',\n    requiredPermissions: ['payment_access']\n  });\n}\n\n/**\n * Middleware enterprise que maneja automáticamente errores\n */\nexport function withEnterpriseAuth(\n  authFunction: (request: NextRequest | NextApiRequest) => Promise<EnterpriseAuthResult>\n) {\n  return function (handler: Function) {\n    return async (request: NextRequest | NextApiRequest, ...args: any[]) => {\n      try {\n        const authResult = await authFunction(request);\n\n        if (!authResult.success) {\n          const errorResponse = {\n            success: false,\n            error: authResult.error,\n            code: authResult.code,\n            timestamp: new Date().toISOString(),\n            enterprise: true\n          };\n\n          const headers: Record<string, string> = {\n            'Content-Type': 'application/json'\n          };\n\n          if (authResult.retryAfter) {\n            headers['Retry-After'] = authResult.retryAfter.toString();\n          }\n\n          if ('query' in request) {\n            // Pages Router\n            const res = args[0] as any;\n            Object.entries(headers).forEach(([key, value]) => {\n              res.setHeader(key, value);\n            });\n            return res.status(authResult.status || 401).json(errorResponse);\n          } else {\n            // App Router\n            return new Response(JSON.stringify(errorResponse), {\n              status: authResult.status || 401,\n              headers\n            });\n          }\n        }\n\n        // Añadir contexto enterprise al request\n        (request as any).enterpriseAuth = authResult.context;\n\n        return handler(request, ...args);\n\n      } catch (error) {\n        console.error('[ENTERPRISE_AUTH] Error en middleware:', error);\n\n        const errorResponse = {\n          success: false,\n          error: 'Error interno de autenticación enterprise',\n          code: 'ENTERPRISE_AUTH_ERROR',\n          timestamp: new Date().toISOString()\n        };\n\n        if ('query' in request) {\n          // Pages Router\n          const res = args[0] as any;\n          return res.status(500).json(errorResponse);\n        } else {\n          // App Router\n          return new Response(JSON.stringify(errorResponse), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n      }\n    };\n  };\n}\n\n// =====================================================\n// MIDDLEWARES PREDEFINIDOS ENTERPRISE\n// =====================================================\n\n/**\n * Middleware para operaciones críticas\n */\nexport const withCriticalAuth = () => withEnterpriseAuth(requireCriticalAuth);\n\n/**\n * Middleware para operaciones de alto nivel\n */\nexport const withHighAuth = (requiredPermissions?: string[]) =>\n  withEnterpriseAuth((req) => requireHighAuth(req, requiredPermissions));\n\n/**\n * Middleware para operaciones moderadas\n */\nexport const withMediumAuth = () => withEnterpriseAuth(requireMediumAuth);\n\n/**\n * Middleware para operaciones básicas\n */\nexport const withBasicAuth = () => withEnterpriseAuth(requireBasicAuth);\n\n/**\n * Middleware para admin\n */\nexport const withAdminAuth = (requiredPermissions?: string[]) =>\n  withEnterpriseAuth((req) => requireAdminAuth(req, requiredPermissions));\n\n/**\n * Middleware para pagos\n */\nexport const withPaymentAuth = () => withEnterpriseAuth(requirePaymentAuth);\n"],"names":["getEnterpriseAuthContext","requireAdminAuth","requireBasicAuth","requireCriticalAuth","requireHighAuth","requireMediumAuth","requirePaymentAuth","withAdminAuth","withBasicAuth","withCriticalAuth","withEnterpriseAuth","withHighAuth","withMediumAuth","withPaymentAuth","ENTERPRISE_CONFIGS","critical","requiredRole","securityLevel","enableRateLimit","enableCSRFProtection","enableJWTValidation","rateLimitType","requiredPermissions","high","medium","low","request","options","process","env","NODE_ENV","BYPASS_AUTH","success","context","userId","sessionId","email","role","permissions","sessionValid","supabase","supabaseAdmin","validations","jwtValid","csrfValid","rateLimitPassed","originValid","user","id","name","startTime","Date","now","config","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","allowed","logAuthFailure","error","code","status","retryAfter","csrfResult","validateRequestOrigin","valid","userEmail","session","auth","jwtResult","validateJWTIntegrity","permissionResult","validateJWTPermissions","logPermissionDenied","data","userProfile","userError","from","select","eq","single","console","userRole","userPermissions","length","hasAllPermissions","every","permission","includes","join","ipAddress","getClientIP","userAgent","getHeader","sessionMetadata","metadata","logAuthSuccess","ip_address","user_agent","session_id","security_level","duration","log","message","ip","forwarded","realIP","cfIP","split","headerName","headers","get","header","Array","isArray","createClient","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","bypass","authFunction","handler","args","authResult","errorResponse","timestamp","toISOString","enterprise","toString","res","Object","entries","forEach","key","value","setHeader","json","Response","JSON","stringify","enterpriseAuth","req"],"mappings":"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"}