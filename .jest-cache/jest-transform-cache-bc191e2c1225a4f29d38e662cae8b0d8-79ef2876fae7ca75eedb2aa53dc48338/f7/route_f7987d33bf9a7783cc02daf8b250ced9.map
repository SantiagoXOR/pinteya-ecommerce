{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\metrics\\custom\\route.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - CUSTOM METRICS API\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\nimport { \n  enterpriseMetrics,\n  MetricType,\n  BusinessMetricCategory,\n  recordPerformanceMetric,\n  recordBusinessMetric,\n  recordSecurityMetric,\n  recordUserExperienceMetric\n} from '@/lib/monitoring/enterprise-metrics';\nimport { getSupabaseClient } from '@/lib/supabase';\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\n\ninterface CustomMetricDefinition {\n  id: string;\n  name: string;\n  description: string;\n  type: MetricType;\n  category: BusinessMetricCategory;\n  unit: string;\n  tags: Record<string, string>;\n  aggregationMethod: 'sum' | 'avg' | 'min' | 'max' | 'count';\n  retentionDays: number;\n  enabled: boolean;\n  createdBy: string;\n  createdAt: string;\n}\n\ninterface MetricValue {\n  metricId: string;\n  value: number;\n  timestamp?: string;\n  tags?: Record<string, string>;\n  metadata?: Record<string, any>;\n}\n\n/**\n * GET /api/admin/monitoring/metrics/custom\n * Obtiene métricas personalizadas y sus definiciones\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticación de admin\n    const authResult = await getAuthenticatedAdmin(request);\n    \n    if (!authResult.isAdmin || !authResult.userId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Acceso no autorizado'\n      }, { status: 401 });\n    }\n\n    const searchParams = request.nextUrl.searchParams;\n    const action = searchParams.get('action') || 'list';\n    const metricId = searchParams.get('metricId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const aggregation = searchParams.get('aggregation') || '1h';\n\n    const supabase = getSupabaseClient(true);\n    if (!supabase) {\n      throw new Error('Supabase client not available');\n    }\n\n    switch (action) {\n      case 'list':\n        // Listar definiciones de métricas personalizadas\n        const { data: definitions } = await supabase\n          .from('custom_metric_definitions')\n          .select('*')\n          .order('created_at', { ascending: false });\n\n        return NextResponse.json({\n          success: true,\n          data: {\n            definitions: definitions || [],\n            count: definitions?.length || 0\n          }\n        });\n\n      case 'values':\n        if (!metricId) {\n          return NextResponse.json({\n            success: false,\n            error: 'metricId requerido para obtener valores'\n          }, { status: 400 });\n        }\n\n        // Obtener valores de métrica específica\n        let query = supabase\n          .from('enterprise_metrics')\n          .select('*')\n          .eq('name', metricId)\n          .order('timestamp', { ascending: false })\n          .limit(1000);\n\n        if (startDate) {\n          query = query.gte('timestamp', startDate);\n        }\n        if (endDate) {\n          query = query.lte('timestamp', endDate);\n        }\n\n        const { data: values } = await query;\n\n        // Agregar datos si se solicita\n        let aggregatedData = values;\n        if (aggregation !== 'raw' && values) {\n          aggregatedData = await aggregateMetricValues(values, aggregation);\n        }\n\n        return NextResponse.json({\n          success: true,\n          data: {\n            metricId,\n            values: aggregatedData || [],\n            aggregation,\n            count: aggregatedData?.length || 0\n          }\n        });\n\n      case 'stats':\n        // Estadísticas generales de métricas personalizadas\n        const { count: totalDefinitions } = await supabase\n          .from('custom_metric_definitions')\n          .select('*', { count: 'exact', head: true });\n\n        const { count: totalValues } = await supabase\n          .from('enterprise_metrics')\n          .select('*', { count: 'exact', head: true })\n          .like('name', 'custom.%');\n\n        const last24h = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n        const { count: recentValues } = await supabase\n          .from('enterprise_metrics')\n          .select('*', { count: 'exact', head: true })\n          .like('name', 'custom.%')\n          .gte('timestamp', last24h);\n\n        return NextResponse.json({\n          success: true,\n          data: {\n            totalDefinitions: totalDefinitions || 0,\n            totalValues: totalValues || 0,\n            recentValues: recentValues || 0,\n            period: '24h'\n          }\n        });\n\n      default:\n        return NextResponse.json({\n          success: false,\n          error: 'Acción no válida'\n        }, { status: 400 });\n    }\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Failed to get custom metrics', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error interno del servidor'\n    }, { status: 500 });\n  }\n}\n\n/**\n * POST /api/admin/monitoring/metrics/custom\n * Crea nueva métrica personalizada o registra valores\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticación de admin\n    const authResult = await getAuthenticatedAdmin(request);\n    \n    if (!authResult.isAdmin || !authResult.userId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Acceso no autorizado'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { action, data } = body;\n\n    if (!action || !data) {\n      return NextResponse.json({\n        success: false,\n        error: 'Faltan parámetros: action y data'\n      }, { status: 400 });\n    }\n\n    const supabase = getSupabaseClient(true);\n    if (!supabase) {\n      throw new Error('Supabase client not available');\n    }\n\n    switch (action) {\n      case 'create_definition':\n        // Crear nueva definición de métrica\n        const definition: Partial<CustomMetricDefinition> = {\n          id: `custom.${data.name.toLowerCase().replace(/[^a-z0-9]/g, '_')}`,\n          name: data.name,\n          description: data.description || '',\n          type: data.type || MetricType.GAUGE,\n          category: data.category || BusinessMetricCategory.BUSINESS,\n          unit: data.unit || '',\n          tags: data.tags || {},\n          aggregationMethod: data.aggregationMethod || 'avg',\n          retentionDays: data.retentionDays || 30,\n          enabled: data.enabled !== false,\n          createdBy: authResult.userId,\n          createdAt: new Date().toISOString()\n        };\n\n        // Validar campos requeridos\n        if (!definition.name) {\n          return NextResponse.json({\n            success: false,\n            error: 'Nombre de métrica requerido'\n          }, { status: 400 });\n        }\n\n        // Verificar que no exista\n        const { data: existing } = await supabase\n          .from('custom_metric_definitions')\n          .select('id')\n          .eq('id', definition.id)\n          .single();\n\n        if (existing) {\n          return NextResponse.json({\n            success: false,\n            error: 'Ya existe una métrica con ese nombre'\n          }, { status: 409 });\n        }\n\n        // Crear definición\n        const { error: createError } = await supabase\n          .from('custom_metric_definitions')\n          .insert(definition);\n\n        if (createError) {\n          throw createError;\n        }\n\n        logger.info(LogLevel.INFO, 'Custom metric definition created', {\n          metricId: definition.id,\n          name: definition.name,\n          createdBy: authResult.userId\n        }, LogCategory.SYSTEM);\n\n        return NextResponse.json({\n          success: true,\n          data: {\n            metricId: definition.id,\n            name: definition.name,\n            created: true\n          }\n        });\n\n      case 'record_value':\n        // Registrar valor de métrica\n        const metricValue: MetricValue = data;\n\n        if (!metricValue.metricId || metricValue.value === undefined) {\n          return NextResponse.json({\n            success: false,\n            error: 'metricId y value son requeridos'\n          }, { status: 400 });\n        }\n\n        // Verificar que la métrica existe\n        const { data: metricDef } = await supabase\n          .from('custom_metric_definitions')\n          .select('*')\n          .eq('id', metricValue.metricId)\n          .single();\n\n        if (!metricDef) {\n          return NextResponse.json({\n            success: false,\n            error: 'Métrica no encontrada'\n          }, { status: 404 });\n        }\n\n        if (!metricDef.enabled) {\n          return NextResponse.json({\n            success: false,\n            error: 'Métrica deshabilitada'\n          }, { status: 400 });\n        }\n\n        // Registrar valor usando el sistema de métricas enterprise\n        await enterpriseMetrics.recordMetric(\n          metricValue.metricId,\n          metricValue.value,\n          metricDef.type,\n          metricDef.category,\n          metricValue.tags || metricDef.tags,\n          metricValue.metadata\n        );\n\n        logger.info(LogLevel.INFO, 'Custom metric value recorded', {\n          metricId: metricValue.metricId,\n          value: metricValue.value,\n          recordedBy: authResult.userId\n        }, LogCategory.SYSTEM);\n\n        return NextResponse.json({\n          success: true,\n          data: {\n            metricId: metricValue.metricId,\n            value: metricValue.value,\n            recorded: true,\n            timestamp: new Date().toISOString()\n          }\n        });\n\n      case 'record_batch':\n        // Registrar múltiples valores\n        const batchValues: MetricValue[] = data.values || [];\n\n        if (!Array.isArray(batchValues) || batchValues.length === 0) {\n          return NextResponse.json({\n            success: false,\n            error: 'Array de valores requerido'\n          }, { status: 400 });\n        }\n\n        const results = [];\n        for (const value of batchValues) {\n          try {\n            // Verificar métrica\n            const { data: def } = await supabase\n              .from('custom_metric_definitions')\n              .select('*')\n              .eq('id', value.metricId)\n              .single();\n\n            if (def && def.enabled) {\n              await enterpriseMetrics.recordMetric(\n                value.metricId,\n                value.value,\n                def.type,\n                def.category,\n                value.tags || def.tags,\n                value.metadata\n              );\n              results.push({ metricId: value.metricId, success: true });\n            } else {\n              results.push({ metricId: value.metricId, success: false, error: 'Metric not found or disabled' });\n            }\n          } catch (error) {\n            results.push({ \n              metricId: value.metricId, \n              success: false, \n              error: error instanceof Error ? error.message : 'Unknown error' \n            });\n          }\n        }\n\n        const successCount = results.filter(r => r.success).length;\n\n        logger.info(LogLevel.INFO, 'Custom metrics batch recorded', {\n          totalValues: batchValues.length,\n          successCount,\n          failureCount: batchValues.length - successCount,\n          recordedBy: authResult.userId\n        }, LogCategory.SYSTEM);\n\n        return NextResponse.json({\n          success: true,\n          data: {\n            totalValues: batchValues.length,\n            successCount,\n            failureCount: batchValues.length - successCount,\n            results\n          }\n        });\n\n      default:\n        return NextResponse.json({\n          success: false,\n          error: 'Acción no válida'\n        }, { status: 400 });\n    }\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Failed to process custom metrics request', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error interno del servidor'\n    }, { status: 500 });\n  }\n}\n\n/**\n * PUT /api/admin/monitoring/metrics/custom\n * Actualiza definición de métrica personalizada\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verificar autenticación de admin\n    const authResult = await getAuthenticatedAdmin(request);\n    \n    if (!authResult.isAdmin || !authResult.userId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Acceso no autorizado'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { metricId, updates } = body;\n\n    if (!metricId || !updates) {\n      return NextResponse.json({\n        success: false,\n        error: 'metricId y updates requeridos'\n      }, { status: 400 });\n    }\n\n    const supabase = getSupabaseClient(true);\n    if (!supabase) {\n      throw new Error('Supabase client not available');\n    }\n\n    // Verificar que la métrica existe\n    const { data: existing } = await supabase\n      .from('custom_metric_definitions')\n      .select('*')\n      .eq('id', metricId)\n      .single();\n\n    if (!existing) {\n      return NextResponse.json({\n        success: false,\n        error: 'Métrica no encontrada'\n      }, { status: 404 });\n    }\n\n    // Campos permitidos para actualización\n    const allowedFields = [\n      'description', 'unit', 'tags', 'aggregationMethod', \n      'retentionDays', 'enabled'\n    ];\n\n    const updateData: Record<string, any> = {};\n    for (const field of allowedFields) {\n      if (updates[field] !== undefined) {\n        updateData[field] = updates[field];\n      }\n    }\n\n    if (Object.keys(updateData).length === 0) {\n      return NextResponse.json({\n        success: false,\n        error: 'No hay campos válidos para actualizar'\n      }, { status: 400 });\n    }\n\n    // Actualizar\n    const { error: updateError } = await supabase\n      .from('custom_metric_definitions')\n      .update(updateData)\n      .eq('id', metricId);\n\n    if (updateError) {\n      throw updateError;\n    }\n\n    logger.info(LogLevel.INFO, 'Custom metric definition updated', {\n      metricId,\n      updatedFields: Object.keys(updateData),\n      updatedBy: authResult.userId\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        metricId,\n        updated: updateData,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Failed to update custom metric', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error interno del servidor'\n    }, { status: 500 });\n  }\n}\n\n/**\n * DELETE /api/admin/monitoring/metrics/custom\n * Elimina definición de métrica personalizada\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verificar autenticación de admin\n    const authResult = await getAuthenticatedAdmin(request);\n    \n    if (!authResult.isAdmin || !authResult.userId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Acceso no autorizado'\n      }, { status: 401 });\n    }\n\n    const searchParams = request.nextUrl.searchParams;\n    const metricId = searchParams.get('metricId');\n\n    if (!metricId) {\n      return NextResponse.json({\n        success: false,\n        error: 'metricId requerido'\n      }, { status: 400 });\n    }\n\n    const supabase = getSupabaseClient(true);\n    if (!supabase) {\n      throw new Error('Supabase client not available');\n    }\n\n    // Verificar que la métrica existe\n    const { data: existing } = await supabase\n      .from('custom_metric_definitions')\n      .select('*')\n      .eq('id', metricId)\n      .single();\n\n    if (!existing) {\n      return NextResponse.json({\n        success: false,\n        error: 'Métrica no encontrada'\n      }, { status: 404 });\n    }\n\n    // Eliminar definición\n    const { error: deleteError } = await supabase\n      .from('custom_metric_definitions')\n      .delete()\n      .eq('id', metricId);\n\n    if (deleteError) {\n      throw deleteError;\n    }\n\n    logger.info(LogLevel.INFO, 'Custom metric definition deleted', {\n      metricId,\n      name: existing.name,\n      deletedBy: authResult.userId\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        metricId,\n        deleted: true,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Failed to delete custom metric', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error interno del servidor'\n    }, { status: 500 });\n  }\n}\n\n/**\n * Agrega valores de métrica según el período especificado\n */\nasync function aggregateMetricValues(values: any[], period: string) {\n  const aggregated: Record<string, { sum: number; count: number; min: number; max: number }> = {};\n  \n  values.forEach(value => {\n    let key: string;\n    const date = new Date(value.timestamp);\n    \n    switch (period) {\n      case '1m':\n        key = date.toISOString().substring(0, 16) + ':00.000Z';\n        break;\n      case '5m':\n        const minutes = Math.floor(date.getMinutes() / 5) * 5;\n        key = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), minutes).toISOString();\n        break;\n      case '1h':\n        key = date.toISOString().substring(0, 13) + ':00:00.000Z';\n        break;\n      case '1d':\n        key = date.toISOString().substring(0, 10) + 'T00:00:00.000Z';\n        break;\n      default:\n        key = value.timestamp;\n    }\n    \n    if (!aggregated[key]) {\n      aggregated[key] = { sum: 0, count: 0, min: value.value, max: value.value };\n    }\n    \n    aggregated[key].sum += value.value;\n    aggregated[key].count += 1;\n    aggregated[key].min = Math.min(aggregated[key].min, value.value);\n    aggregated[key].max = Math.max(aggregated[key].max, value.value);\n  });\n  \n  return Object.entries(aggregated).map(([timestamp, data]) => ({\n    timestamp,\n    value: data.sum / data.count, // Promedio\n    sum: data.sum,\n    count: data.count,\n    min: data.min,\n    max: data.max\n  }));\n}\n"],"names":["DELETE","GET","POST","PUT","request","authResult","getAuthenticatedAdmin","isAdmin","userId","NextResponse","json","success","error","status","searchParams","nextUrl","action","get","metricId","startDate","endDate","aggregation","supabase","getSupabaseClient","Error","data","definitions","from","select","order","ascending","count","length","query","eq","limit","gte","lte","values","aggregatedData","aggregateMetricValues","totalDefinitions","head","totalValues","like","last24h","Date","now","toISOString","recentValues","period","logger","LogLevel","ERROR","message","LogCategory","SYSTEM","body","definition","id","name","toLowerCase","replace","description","type","MetricType","GAUGE","category","BusinessMetricCategory","BUSINESS","unit","tags","aggregationMethod","retentionDays","enabled","createdBy","createdAt","existing","single","createError","insert","info","INFO","created","metricValue","value","undefined","metricDef","enterpriseMetrics","recordMetric","metadata","recordedBy","recorded","timestamp","batchValues","Array","isArray","results","def","push","successCount","filter","r","failureCount","updates","allowedFields","updateData","field","Object","keys","updateError","update","updatedFields","updatedBy","updated","deleteError","delete","deletedBy","deleted","aggregated","forEach","key","date","substring","minutes","Math","floor","getMinutes","getFullYear","getMonth","getDate","getHours","sum","min","max","entries","map"],"mappings":"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"}