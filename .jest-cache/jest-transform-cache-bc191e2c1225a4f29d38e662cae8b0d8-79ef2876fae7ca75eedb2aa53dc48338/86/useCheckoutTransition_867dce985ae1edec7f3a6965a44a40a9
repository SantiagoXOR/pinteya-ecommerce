ba36979edebd929c23bc8b26781b9916
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useCheckoutTransition () {
        return useCheckoutTransition;
    }
});
const _react = require("react");
const _navigation = require("next/navigation");
function useCheckoutTransition(options = {}) {
    const { onTransitionStart, onTransitionComplete, onTransitionError, enableAnimation = true, enablePerformanceTracking = true, customDuration, skipAnimationThreshold = 100 } = options;
    const router = (0, _navigation.useRouter)();
    const [isTransitioning, setIsTransitioning] = (0, _react.useState)(false);
    const [skipAnimation, setSkipAnimation] = (0, _react.useState)(false);
    const [transitionProgress, setTransitionProgress] = (0, _react.useState)(0);
    // Refs para cleanup y performance tracking
    const timeoutRef = (0, _react.useRef)(null);
    const progressIntervalRef = (0, _react.useRef)(null);
    const performanceRef = (0, _react.useRef)({
        startTime: null,
        endTime: null,
        duration: null
    });
    // Memoizar duración para evitar recálculos
    const animationDuration = (0, _react.useMemo)(()=>{
        if (customDuration) return customDuration;
        return skipAnimation ? 200 : 2800;
    }, [
        skipAnimation,
        customDuration
    ]);
    // Detectar preferencia de movimiento reducido con mejor manejo de errores
    (0, _react.useEffect)(()=>{
        try {
            const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
            const handleChange = (e)=>{
                const shouldSkip = e.matches || !enableAnimation;
                setSkipAnimation(shouldSkip);
                // Performance tracking para preferencias de accesibilidad
                if (enablePerformanceTracking && shouldSkip) {
                    console.debug('[useCheckoutTransition] Animation skipped due to accessibility preferences');
                }
            };
            // Configuración inicial
            setSkipAnimation(mediaQuery.matches || !enableAnimation);
            // Escuchar cambios con soporte para navegadores antiguos
            if (mediaQuery.addEventListener) {
                mediaQuery.addEventListener("change", handleChange);
            } else {
                // Fallback para navegadores antiguos
                mediaQuery.addListener(handleChange);
            }
            return ()=>{
                if (mediaQuery.removeEventListener) {
                    mediaQuery.removeEventListener("change", handleChange);
                } else {
                    mediaQuery.removeListener(handleChange);
                }
            };
        } catch (error) {
            console.warn('[useCheckoutTransition] Error setting up media query listener:', error);
            setSkipAnimation(!enableAnimation);
        }
    }, [
        enableAnimation,
        enablePerformanceTracking
    ]);
    // Cleanup en unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (timeoutRef.current) {
                clearTimeout(timeoutRef.current);
            }
            if (progressIntervalRef.current) {
                clearInterval(progressIntervalRef.current);
            }
        };
    }, []);
    // Función optimizada para iniciar la transición
    const startTransition = (0, _react.useCallback)(()=>{
        if (isTransitioning) {
            console.warn('[useCheckoutTransition] Transition already in progress, ignoring duplicate call');
            return;
        }
        try {
            // Performance tracking
            const startTime = enablePerformanceTracking ? performance.now() : 0;
            performanceRef.current.startTime = startTime;
            setIsTransitioning(true);
            setTransitionProgress(0);
            // Callback de inicio con error handling
            try {
                onTransitionStart?.();
            } catch (error) {
                console.error('[useCheckoutTransition] Error in onTransitionStart callback:', error);
                onTransitionError?.(error);
            }
            // Progress tracking para animaciones largas
            if (!skipAnimation && animationDuration > skipAnimationThreshold) {
                const progressInterval = setInterval(()=>{
                    setTransitionProgress((prev)=>{
                        const elapsed = performance.now() - startTime;
                        const progress = Math.min(elapsed / animationDuration * 100, 100);
                        return progress;
                    });
                }, 16); // 60fps updates
                progressIntervalRef.current = progressInterval;
            }
            // Auto-reset con cleanup mejorado
            const timeout = setTimeout(()=>{
                try {
                    const endTime = enablePerformanceTracking ? performance.now() : 0;
                    performanceRef.current.endTime = endTime;
                    performanceRef.current.duration = endTime - startTime;
                    setIsTransitioning(false);
                    setTransitionProgress(100);
                    // Cleanup progress interval
                    if (progressIntervalRef.current) {
                        clearInterval(progressIntervalRef.current);
                        progressIntervalRef.current = null;
                    }
                    // Performance logging
                    if (enablePerformanceTracking) {
                        console.debug('[useCheckoutTransition] Transition completed', {
                            duration: performanceRef.current.duration,
                            skipAnimation,
                            animationDuration
                        });
                    }
                    // Callback de finalización con error handling
                    try {
                        onTransitionComplete?.();
                    } catch (error) {
                        console.error('[useCheckoutTransition] Error in onTransitionComplete callback:', error);
                        onTransitionError?.(error);
                    }
                    // Navegación con error handling
                    try {
                        router.push('/checkout');
                    } catch (error) {
                        console.error('[useCheckoutTransition] Error during navigation:', error);
                        onTransitionError?.(error);
                    }
                } catch (error) {
                    console.error('[useCheckoutTransition] Error during transition completion:', error);
                    onTransitionError?.(error);
                    setIsTransitioning(false);
                }
            }, animationDuration);
            timeoutRef.current = timeout;
        } catch (error) {
            console.error('[useCheckoutTransition] Error starting transition:', error);
            onTransitionError?.(error);
            setIsTransitioning(false);
        }
    }, [
        isTransitioning,
        skipAnimation,
        animationDuration,
        skipAnimationThreshold,
        enablePerformanceTracking,
        onTransitionStart,
        onTransitionComplete,
        onTransitionError,
        router
    ]);
    return {
        isTransitioning,
        startTransition,
        skipAnimation,
        isButtonDisabled: isTransitioning,
        transitionProgress,
        performanceMetrics: performanceRef.current
    };
}
const _default = useCheckoutTransition;

//# sourceMappingURL=data:application/json;base64,