{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchOptimized.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearchOptimized - Sistema de búsqueda con TanStack Query\r\n// ===================================\r\n\r\nimport { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { searchProducts } from '@/lib/api/products';\r\nimport { ProductWithCategory } from '@/types/api';\r\nimport { searchQueryKeys, searchQueryConfig } from '@/lib/query-client';\r\nimport { useSearchErrorHandler } from './useSearchErrorHandler';\r\nimport { useSearchToast } from './useSearchToast';\r\nimport { useSearchNavigation } from './useSearchNavigation';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface SearchSuggestion {\r\n  id: string;\r\n  type: 'product' | 'category' | 'recent' | 'trending';\r\n  title: string;\r\n  subtitle?: string;\r\n  image?: string;\r\n  badge?: string;\r\n  href: string;\r\n}\r\n\r\nexport interface UseSearchOptimizedOptions {\r\n  /** Tiempo de debounce en milisegundos */\r\n  debounceMs?: number;\r\n  /** Número máximo de sugerencias */\r\n  maxSuggestions?: number;\r\n  /** Límite de resultados de búsqueda */\r\n  searchLimit?: number;\r\n  /** Guardar búsquedas recientes */\r\n  saveRecentSearches?: boolean;\r\n  /** Habilitar prefetch de sugerencias */\r\n  enablePrefetch?: boolean;\r\n  /** Callback cuando se realiza una búsqueda */\r\n  onSearch?: (query: string, results: ProductWithCategory[]) => void;\r\n  /** Callback cuando se selecciona una sugerencia */\r\n  onSuggestionSelect?: (suggestion: SearchSuggestion) => void;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchOptimized(options: UseSearchOptimizedOptions = {}) {\r\n  const {\r\n    debounceMs = 150,\r\n    maxSuggestions = 6,\r\n    searchLimit = 12,\r\n    saveRecentSearches = true,\r\n    enablePrefetch = true,\r\n    onSearch,\r\n    onSuggestionSelect,\r\n  } = options;\r\n\r\n  // Estados locales\r\n  const [query, setQuery] = useState('');\r\n  const [debouncedQuery, setDebouncedQuery] = useState('');\r\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\r\n  const [hasSearched, setHasSearched] = useState(false);\r\n\r\n  // Hooks externos\r\n  const queryClient = useQueryClient();\r\n  const errorHandler = useSearchErrorHandler();\r\n  const toastHandler = useSearchToast();\r\n  const navigation = useSearchNavigation({\r\n    scrollToTop: true,\r\n    onBeforeNavigate: (url) => console.log('🔍 Navegando a:', url),\r\n    onAfterNavigate: (url) => console.log('✅ Navegación completada:', url),\r\n  });\r\n\r\n  // ===================================\r\n  // DEBOUNCED QUERY UPDATE\r\n  // ===================================\r\n\r\n  const updateDebouncedQuery = useDebouncedCallback(\r\n    (value: string) => {\r\n      setDebouncedQuery(value);\r\n\r\n      // Analytics tracking\r\n      if (value.trim()) {\r\n        console.log('🔍 useSearchOptimized: Query debounced:', value);\r\n        console.log('🔍 useSearchOptimized: New debouncedQuery value:', value);\r\n        console.log('🔍 useSearchOptimized: Value type:', typeof value);\r\n        console.log('🔍 useSearchOptimized: Value length:', value?.length);\r\n        console.log('🔍 useSearchOptimized: Query enabled condition will be:', !!value?.trim());\r\n      }\r\n    },\r\n    debounceMs,\r\n    {\r\n      maxWait: 2000,\r\n      leading: false,\r\n      trailing: true,\r\n    }\r\n  );\r\n\r\n  // ===================================\r\n  // TANSTACK QUERY INTEGRATION\r\n  // ===================================\r\n\r\n  // Query principal para búsquedas\r\n  const { \r\n    data: searchResults, \r\n    isLoading, \r\n    error, \r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt \r\n  } = useQuery({\r\n    queryKey: searchQueryKeys.search(debouncedQuery),\r\n    queryFn: async ({ queryKey, signal }) => {\r\n      const [, , searchQuery] = queryKey;\r\n      if (!searchQuery?.trim()) return [];\r\n      \r\n      console.log('🔍 useSearchOptimized: Executing search for:', searchQuery);\r\n\r\n      // AbortController para cancelar requests (nota: searchProducts no soporta signal aún)\r\n      const response = await searchProducts(searchQuery, maxSuggestions);\r\n      console.log('🔍 useSearchOptimized: API response:', response);\r\n      console.log('🔍 useSearchOptimized: Response data:', response.data);\r\n      console.log('🔍 useSearchOptimized: Response success:', response.success);\r\n      return response.data || [];\r\n    },\r\n    enabled: (() => {\r\n      const isEnabled = !!debouncedQuery?.trim() && debouncedQuery.length >= 2;\r\n      console.log('🔍 useSearchOptimized: Query enabled condition:', isEnabled, 'for query:', debouncedQuery);\r\n      return isEnabled;\r\n    })(),\r\n    ...searchQueryConfig,\r\n  });\r\n\r\n  // ===================================\r\n  // SUGGESTIONS GENERATION\r\n  // ===================================\r\n\r\n  const suggestions: SearchSuggestion[] = Array.isArray(searchResults)\r\n    ? searchResults.map((product) => {\r\n        console.log('🔍 useSearchOptimized: Mapping product:', product);\r\n        return {\r\n          id: product.id.toString(),\r\n          type: 'product' as const,\r\n          title: product.name,\r\n          subtitle: product.category?.name,\r\n          image: product.images?.previews?.[0] || product.images?.thumbnails?.[0],\r\n          badge: product.stock > 0 ? 'En stock' : 'Sin stock',\r\n          href: `/products/${product.id}`,\r\n        };\r\n      })\r\n    : [];\r\n\r\n  console.log('🔍 useSearchOptimized: Generated suggestions:', suggestions.length, suggestions);\r\n\r\n  // ===================================\r\n  // SEARCH FUNCTIONS\r\n  // ===================================\r\n\r\n  const searchWithDebounce = useCallback((searchQuery: string) => {\r\n    setQuery(searchQuery);\r\n    updateDebouncedQuery(searchQuery);\r\n    \r\n    // Prefetch si está habilitado y la query es válida\r\n    if (enablePrefetch && searchQuery.trim().length > 2) {\r\n      // Prefetch de datos de búsqueda\r\n      queryClient.prefetchQuery({\r\n        queryKey: searchQueryKeys.search(searchQuery),\r\n        queryFn: () => searchProducts(searchQuery, maxSuggestions),\r\n        ...searchQueryConfig,\r\n      });\r\n\r\n      // Prefetch de página de resultados\r\n      navigation.prefetchSearch(searchQuery.trim());\r\n    }\r\n  }, [updateDebouncedQuery, enablePrefetch, queryClient, maxSuggestions, navigation]);\r\n\r\n  const executeSearch = useCallback(async (searchQuery: string) => {\r\n    if (!searchQuery.trim()) return;\r\n\r\n    try {\r\n      setHasSearched(true);\r\n      \r\n      // Guardar en historial\r\n      if (saveRecentSearches) {\r\n        const updated = [\r\n          searchQuery.trim(),\r\n          ...recentSearches.filter(s => s !== searchQuery.trim())\r\n        ].slice(0, 5);\r\n        \r\n        setRecentSearches(updated);\r\n        localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));\r\n      }\r\n\r\n      // Navegar a página de resultados usando navegación optimizada\r\n      navigation.navigateToSearch(searchQuery.trim());\r\n\r\n      // Callback externo\r\n      if (onSearch && searchResults) {\r\n        onSearch(searchQuery, searchResults);\r\n      }\r\n\r\n      toastHandler.showSuccessToast(searchQuery, searchResults?.length || 0);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ useSearchOptimized: Error en executeSearch:', error);\r\n      errorHandler.handleError(error);\r\n    }\r\n  }, [saveRecentSearches, recentSearches, navigation, onSearch, searchResults, toastHandler, errorHandler]);\r\n\r\n  const selectSuggestion = useCallback((suggestion: SearchSuggestion) => {\r\n    console.log('✅ useSearchOptimized: Suggestion selected:', suggestion.title);\r\n\r\n    // Navegar según el tipo de sugerencia\r\n    if (suggestion.type === 'product') {\r\n      navigation.navigateToProduct(suggestion.id);\r\n    } else {\r\n      // Para búsquedas recientes o trending, navegar a búsqueda\r\n      navigation.navigateToSearch(suggestion.title);\r\n    }\r\n\r\n    // Callback externo\r\n    if (onSuggestionSelect) {\r\n      onSuggestionSelect(suggestion);\r\n    }\r\n\r\n    toastHandler.showInfoToast(`${suggestion.type === 'product' ? 'Producto' : 'Búsqueda'} seleccionado`, suggestion.title);\r\n  }, [navigation, onSuggestionSelect, toastHandler]);\r\n\r\n  const clearSearch = useCallback(() => {\r\n    setQuery('');\r\n    setDebouncedQuery('');\r\n    setHasSearched(false);\r\n    \r\n    // Limpiar cache de búsquedas si es necesario\r\n    queryClient.removeQueries({ queryKey: searchQueryKeys.searches() });\r\n  }, [queryClient]);\r\n\r\n  // ===================================\r\n  // LIFECYCLE\r\n  // ===================================\r\n\r\n  const initialize = useCallback(() => {\r\n    // Cargar búsquedas recientes\r\n    if (saveRecentSearches) {\r\n      try {\r\n        const saved = localStorage.getItem('pinteya-recent-searches');\r\n        if (saved) {\r\n          setRecentSearches(JSON.parse(saved));\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error cargando búsquedas recientes:', error);\r\n      }\r\n    }\r\n  }, [saveRecentSearches]);\r\n\r\n  const cleanup = useCallback(() => {\r\n    // Limpiar debounce y cache si es necesario\r\n    updateDebouncedQuery.cancel();\r\n  }, [updateDebouncedQuery]);\r\n\r\n  // Inicializar al montar\r\n  useEffect(() => {\r\n    initialize();\r\n    return cleanup;\r\n  }, [initialize, cleanup]);\r\n\r\n  // ===================================\r\n  // RETURN\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado de búsqueda\r\n    query,\r\n    results: searchResults || [],\r\n    suggestions,\r\n    isLoading,\r\n    error: error?.message || null,\r\n    hasSearched,\r\n    recentSearches,\r\n\r\n    // Estados de TanStack Query\r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt,\r\n\r\n    // Estado de errores y toasts\r\n    searchError: errorHandler.currentError,\r\n    isRetrying: errorHandler.isRetrying,\r\n    retryCount: errorHandler.retryCount,\r\n    toasts: toastHandler.toasts,\r\n\r\n    // Funciones principales\r\n    searchWithDebounce,\r\n    executeSearch,\r\n    selectSuggestion,\r\n    clearSearch,\r\n    initialize,\r\n    cleanup,\r\n\r\n    // Funciones de manejo de errores\r\n    clearError: errorHandler.clearError,\r\n    retryManually: errorHandler.retryManually,\r\n\r\n    // Funciones de toast\r\n    removeToast: toastHandler.removeToast,\r\n    clearToasts: toastHandler.clearToasts,\r\n\r\n    // Utilidades de cache\r\n    invalidateSearch: (searchQuery: string) =>\r\n      queryClient.invalidateQueries({ queryKey: searchQueryKeys.search(searchQuery) }),\r\n    prefetchSearch: (searchQuery: string) =>\r\n      queryClient.prefetchQuery({\r\n        queryKey: searchQueryKeys.search(searchQuery),\r\n        queryFn: () => searchProducts(searchQuery, maxSuggestions),\r\n        ...searchQueryConfig,\r\n      }),\r\n\r\n    // Funciones de navegación optimizada\r\n    navigateToSearch: navigation.navigateToSearch,\r\n    navigateToProduct: navigation.navigateToProduct,\r\n    navigateToCategory: navigation.navigateToCategory,\r\n    prefetchSearchPage: navigation.prefetchSearch,\r\n    prefetchProductPage: navigation.prefetchProduct,\r\n    getCurrentSearchQuery: navigation.getCurrentSearchQuery,\r\n    buildSearchUrl: navigation.buildSearchUrl,\r\n  };\r\n}\r\n\r\nexport default useSearchOptimized;\r\n"],"names":["useSearchOptimized","options","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","enablePrefetch","onSearch","onSuggestionSelect","query","setQuery","useState","debouncedQuery","setDebouncedQuery","recentSearches","setRecentSearches","hasSearched","setHasSearched","queryClient","useQueryClient","errorHandler","useSearchErrorHandler","toastHandler","useSearchToast","navigation","useSearchNavigation","scrollToTop","onBeforeNavigate","url","console","log","onAfterNavigate","updateDebouncedQuery","useDebouncedCallback","value","trim","length","maxWait","leading","trailing","data","searchResults","isLoading","error","isFetching","isStale","dataUpdatedAt","useQuery","queryKey","searchQueryKeys","search","queryFn","signal","searchQuery","response","searchProducts","success","enabled","isEnabled","searchQueryConfig","suggestions","Array","isArray","map","product","id","toString","type","title","name","subtitle","category","image","images","previews","thumbnails","badge","stock","href","searchWithDebounce","useCallback","prefetchQuery","prefetchSearch","executeSearch","updated","filter","s","slice","localStorage","setItem","JSON","stringify","navigateToSearch","showSuccessToast","handleError","selectSuggestion","suggestion","navigateToProduct","showInfoToast","clearSearch","removeQueries","searches","initialize","saved","getItem","parse","warn","cleanup","cancel","useEffect","results","message","searchError","currentError","isRetrying","retryCount","toasts","clearError","retryManually","removeToast","clearToasts","invalidateSearch","invalidateQueries","navigateToCategory","prefetchSearchPage","prefetchProductPage","prefetchProduct","getCurrentSearchQuery","buildSearchUrl"],"mappings":"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"}