{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\audit-trail.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - AUDIT TRAIL SYSTEM ENTERPRISE\n// ===================================\n\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\nimport { getSupabaseClient } from '@/lib/supabase';\nimport crypto from 'crypto';\n\n// Niveles de criticidad según ISO/IEC 27001:2013\nexport enum AuditSeverity {\n  LOW = 'low',           // Eventos informativos\n  MEDIUM = 'medium',     // Eventos de advertencia\n  HIGH = 'high',         // Eventos críticos\n  CRITICAL = 'critical'  // Eventos de seguridad críticos\n}\n\n// Categorías de eventos de auditoría\nexport enum AuditCategory {\n  AUTHENTICATION = 'authentication',\n  AUTHORIZATION = 'authorization',\n  DATA_ACCESS = 'data_access',\n  DATA_MODIFICATION = 'data_modification',\n  PAYMENT_PROCESSING = 'payment_processing',\n  SYSTEM_ADMINISTRATION = 'system_administration',\n  SECURITY_VIOLATION = 'security_violation',\n  CONFIGURATION_CHANGE = 'configuration_change',\n  ERROR_EVENT = 'error_event',\n  COMPLIANCE_EVENT = 'compliance_event'\n}\n\n// Resultado de operaciones\nexport enum AuditResult {\n  SUCCESS = 'success',\n  FAILURE = 'failure',\n  BLOCKED = 'blocked',\n  UNAUTHORIZED = 'unauthorized',\n  ERROR = 'error'\n}\n\n// Evento de auditoría completo\nexport interface AuditEvent {\n  id: string;\n  timestamp: string;\n  userId?: string;\n  sessionId?: string;\n  action: string;\n  resource: string;\n  category: AuditCategory;\n  severity: AuditSeverity;\n  result: AuditResult;\n  ipAddress: string;\n  userAgent: string;\n  requestId?: string;\n  metadata?: Record<string, any>;\n  hash: string;\n  complianceFlags?: string[];\n}\n\n// Configuración de retención según compliance\nexport interface RetentionPolicy {\n  category: AuditCategory;\n  retentionDays: number;\n  archiveAfterDays: number;\n  requiresEncryption: boolean;\n}\n\n// Políticas de retención ISO/IEC 27001:2013\nexport const RETENTION_POLICIES: RetentionPolicy[] = [\n  {\n    category: AuditCategory.AUTHENTICATION,\n    retentionDays: 365,\n    archiveAfterDays: 90,\n    requiresEncryption: true\n  },\n  {\n    category: AuditCategory.AUTHORIZATION,\n    retentionDays: 365,\n    archiveAfterDays: 90,\n    requiresEncryption: true\n  },\n  {\n    category: AuditCategory.PAYMENT_PROCESSING,\n    retentionDays: 2555, // 7 años para compliance financiero\n    archiveAfterDays: 365,\n    requiresEncryption: true\n  },\n  {\n    category: AuditCategory.SECURITY_VIOLATION,\n    retentionDays: 2555, // 7 años\n    archiveAfterDays: 180,\n    requiresEncryption: true\n  },\n  {\n    category: AuditCategory.DATA_ACCESS,\n    retentionDays: 1095, // 3 años\n    archiveAfterDays: 180,\n    requiresEncryption: true\n  },\n  {\n    category: AuditCategory.SYSTEM_ADMINISTRATION,\n    retentionDays: 1095, // 3 años\n    archiveAfterDays: 365,\n    requiresEncryption: true\n  }\n];\n\n/**\n * Sistema de Auditoría Enterprise con compliance ISO/IEC 27001:2013\n */\nexport class AuditTrailManager {\n  private static instance: AuditTrailManager;\n  private secretKey: string;\n\n  constructor() {\n    this.secretKey = process.env.AUDIT_TRAIL_SECRET_KEY || 'default-audit-key';\n    if (this.secretKey === 'default-audit-key') {\n      logger.warn(LogLevel.WARN, 'Using default audit trail secret key - not secure for production', {}, LogCategory.SYSTEM);\n    }\n  }\n\n  static getInstance(): AuditTrailManager {\n    if (!AuditTrailManager.instance) {\n      AuditTrailManager.instance = new AuditTrailManager();\n    }\n    return AuditTrailManager.instance;\n  }\n\n  /**\n   * Registra un evento de auditoría\n   */\n  async logEvent(eventData: Omit<AuditEvent, 'id' | 'timestamp' | 'hash'>): Promise<void> {\n    try {\n      const auditEvent: AuditEvent = {\n        ...eventData,\n        id: this.generateEventId(),\n        timestamp: new Date().toISOString(),\n        hash: ''\n      };\n\n      // Generar hash de integridad\n      auditEvent.hash = this.generateEventHash(auditEvent);\n\n      // Almacenar en base de datos\n      await this.storeAuditEvent(auditEvent);\n\n      // Verificar si requiere alertas\n      if (this.requiresAlert(auditEvent)) {\n        await this.sendSecurityAlert(auditEvent);\n      }\n\n      // Log estructurado\n      logger.audit(LogLevel.INFO, `Audit event logged: ${auditEvent.action}`, {\n        eventId: auditEvent.id,\n        category: auditEvent.category,\n        severity: auditEvent.severity,\n        result: auditEvent.result,\n        userId: auditEvent.userId\n      });\n\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to log audit event', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        action: eventData.action,\n        category: eventData.category\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Registra evento de autenticación\n   */\n  async logAuthentication(\n    action: string,\n    result: AuditResult,\n    userId?: string,\n    metadata?: Record<string, any>,\n    request?: { ip: string; userAgent: string; sessionId?: string }\n  ): Promise<void> {\n    await this.logEvent({\n      userId,\n      sessionId: request?.sessionId,\n      action,\n      resource: 'authentication',\n      category: AuditCategory.AUTHENTICATION,\n      severity: result === AuditResult.FAILURE ? AuditSeverity.HIGH : AuditSeverity.MEDIUM,\n      result,\n      ipAddress: request?.ip || 'unknown',\n      userAgent: request?.userAgent || 'unknown',\n      metadata,\n      complianceFlags: ['ISO27001', 'AUTHENTICATION_LOG']\n    });\n  }\n\n  /**\n   * Registra evento de procesamiento de pagos\n   */\n  async logPaymentEvent(\n    action: string,\n    result: AuditResult,\n    paymentData: {\n      orderId?: string;\n      paymentId?: string;\n      amount?: number;\n      currency?: string;\n      method?: string;\n    },\n    userId?: string,\n    request?: { ip: string; userAgent: string }\n  ): Promise<void> {\n    await this.logEvent({\n      userId,\n      action,\n      resource: `payment:${paymentData.paymentId || 'unknown'}`,\n      category: AuditCategory.PAYMENT_PROCESSING,\n      severity: result === AuditResult.FAILURE ? AuditSeverity.HIGH : AuditSeverity.LOW,\n      result,\n      ipAddress: request?.ip || 'unknown',\n      userAgent: request?.userAgent || 'unknown',\n      metadata: {\n        ...paymentData,\n        complianceRequired: true\n      },\n      complianceFlags: ['ISO27001', 'PAYMENT_LOG', 'FINANCIAL_COMPLIANCE']\n    });\n  }\n\n  /**\n   * Registra violación de seguridad\n   */\n  async logSecurityViolation(\n    action: string,\n    details: string,\n    request: { ip: string; userAgent: string },\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    await this.logEvent({\n      action,\n      resource: 'security_system',\n      category: AuditCategory.SECURITY_VIOLATION,\n      severity: AuditSeverity.CRITICAL,\n      result: AuditResult.BLOCKED,\n      ipAddress: request.ip,\n      userAgent: request.userAgent,\n      metadata: {\n        details,\n        ...metadata,\n        alertRequired: true\n      },\n      complianceFlags: ['ISO27001', 'SECURITY_INCIDENT', 'IMMEDIATE_ALERT']\n    });\n  }\n\n  /**\n   * Registra acceso a datos sensibles\n   */\n  async logDataAccess(\n    action: string,\n    resource: string,\n    result: AuditResult,\n    userId?: string,\n    request?: { ip: string; userAgent: string },\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    await this.logEvent({\n      userId,\n      action,\n      resource,\n      category: AuditCategory.DATA_ACCESS,\n      severity: result === AuditResult.UNAUTHORIZED ? AuditSeverity.HIGH : AuditSeverity.MEDIUM,\n      result,\n      ipAddress: request?.ip || 'unknown',\n      userAgent: request?.userAgent || 'unknown',\n      metadata,\n      complianceFlags: ['ISO27001', 'DATA_ACCESS_LOG']\n    });\n  }\n\n  /**\n   * Registra cambios administrativos\n   */\n  async logAdminAction(\n    action: string,\n    resource: string,\n    result: AuditResult,\n    userId: string,\n    request: { ip: string; userAgent: string },\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    await this.logEvent({\n      userId,\n      action,\n      resource,\n      category: AuditCategory.SYSTEM_ADMINISTRATION,\n      severity: AuditSeverity.HIGH,\n      result,\n      ipAddress: request.ip,\n      userAgent: request.userAgent,\n      metadata,\n      complianceFlags: ['ISO27001', 'ADMIN_ACTION', 'PRIVILEGED_ACCESS']\n    });\n  }\n\n  /**\n   * Genera ID único para el evento\n   */\n  private generateEventId(): string {\n    return `audit_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  /**\n   * Genera hash de integridad para el evento\n   */\n  private generateEventHash(event: Omit<AuditEvent, 'hash'>): string {\n    const eventString = JSON.stringify({\n      id: event.id,\n      timestamp: event.timestamp,\n      userId: event.userId,\n      action: event.action,\n      resource: event.resource,\n      category: event.category,\n      result: event.result\n    });\n\n    return crypto\n      .createHmac('sha256', this.secretKey)\n      .update(eventString)\n      .digest('hex');\n  }\n\n  /**\n   * Almacena el evento en la base de datos\n   */\n  private async storeAuditEvent(event: AuditEvent): Promise<void> {\n    const supabase = getSupabaseClient(true); // Usar cliente administrativo\n\n    if (!supabase) {\n      throw new Error('Supabase client not available for audit logging');\n    }\n\n    const { error } = await supabase\n      .from('audit_events')\n      .insert({\n        id: event.id,\n        timestamp: event.timestamp,\n        user_id: event.userId,\n        session_id: event.sessionId,\n        action: event.action,\n        resource: event.resource,\n        category: event.category,\n        severity: event.severity,\n        result: event.result,\n        ip_address: event.ipAddress,\n        user_agent: event.userAgent,\n        request_id: event.requestId,\n        metadata: event.metadata,\n        hash: event.hash,\n        compliance_flags: event.complianceFlags\n      });\n\n    if (error) {\n      throw new Error(`Failed to store audit event: ${error.message}`);\n    }\n  }\n\n  /**\n   * Determina si el evento requiere alerta inmediata\n   */\n  private requiresAlert(event: AuditEvent): boolean {\n    return (\n      event.severity === AuditSeverity.CRITICAL ||\n      event.category === AuditCategory.SECURITY_VIOLATION ||\n      event.result === AuditResult.BLOCKED ||\n      event.complianceFlags?.includes('IMMEDIATE_ALERT') ||\n      false\n    );\n  }\n\n  /**\n   * Envía alerta de seguridad\n   */\n  private async sendSecurityAlert(event: AuditEvent): Promise<void> {\n    try {\n      // Log inmediato para alertas críticas\n      logger.security(LogLevel.ERROR, `SECURITY ALERT: ${event.action}`, {\n        eventId: event.id,\n        category: event.category,\n        severity: event.severity,\n        result: event.result,\n        ipAddress: event.ipAddress,\n        userId: event.userId,\n        resource: event.resource\n      });\n\n      // TODO: Implementar notificaciones adicionales (email, Slack, etc.)\n      // await this.sendEmailAlert(event);\n      // await this.sendSlackAlert(event);\n\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to send security alert', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        eventId: event.id\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Verifica la integridad de un evento\n   */\n  async verifyEventIntegrity(event: AuditEvent): Promise<boolean> {\n    const expectedHash = this.generateEventHash({\n      ...event,\n      hash: ''\n    });\n\n    return event.hash === expectedHash;\n  }\n\n  /**\n   * Obtiene eventos de auditoría con filtros\n   */\n  async getAuditEvents(filters: {\n    userId?: string;\n    category?: AuditCategory;\n    severity?: AuditSeverity;\n    startDate?: string;\n    endDate?: string;\n    limit?: number;\n  }): Promise<AuditEvent[]> {\n    const supabase = getSupabaseClient(true);\n\n    if (!supabase) {\n      throw new Error('Supabase client not available');\n    }\n\n    let query = supabase\n      .from('audit_events')\n      .select('*')\n      .order('timestamp', { ascending: false });\n\n    if (filters.userId) {\n      query = query.eq('user_id', filters.userId);\n    }\n\n    if (filters.category) {\n      query = query.eq('category', filters.category);\n    }\n\n    if (filters.severity) {\n      query = query.eq('severity', filters.severity);\n    }\n\n    if (filters.startDate) {\n      query = query.gte('timestamp', filters.startDate);\n    }\n\n    if (filters.endDate) {\n      query = query.lte('timestamp', filters.endDate);\n    }\n\n    if (filters.limit) {\n      query = query.limit(filters.limit);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Failed to retrieve audit events: ${error.message}`);\n    }\n\n    return data || [];\n  }\n}\n\n// Instancia singleton\nexport const auditTrail = AuditTrailManager.getInstance();\n\n// Funciones de conveniencia\nexport const logAuthentication = auditTrail.logAuthentication.bind(auditTrail);\nexport const logPaymentEvent = auditTrail.logPaymentEvent.bind(auditTrail);\nexport const logSecurityViolation = auditTrail.logSecurityViolation.bind(auditTrail);\nexport const logDataAccess = auditTrail.logDataAccess.bind(auditTrail);\nexport const logAdminAction = auditTrail.logAdminAction.bind(auditTrail);\n"],"names":["AuditCategory","AuditResult","AuditSeverity","AuditTrailManager","RETENTION_POLICIES","auditTrail","logAdminAction","logAuthentication","logDataAccess","logPaymentEvent","logSecurityViolation","category","retentionDays","archiveAfterDays","requiresEncryption","constructor","secretKey","process","env","AUDIT_TRAIL_SECRET_KEY","logger","warn","LogLevel","WARN","LogCategory","SYSTEM","getInstance","instance","logEvent","eventData","auditEvent","id","generateEventId","timestamp","Date","toISOString","hash","generateEventHash","storeAuditEvent","requiresAlert","sendSecurityAlert","audit","INFO","action","eventId","severity","result","userId","error","ERROR","Error","message","metadata","request","sessionId","resource","ipAddress","ip","userAgent","complianceFlags","paymentData","paymentId","complianceRequired","details","alertRequired","now","crypto","randomBytes","toString","event","eventString","JSON","stringify","createHmac","update","digest","supabase","getSupabaseClient","from","insert","user_id","session_id","ip_address","user_agent","request_id","requestId","compliance_flags","includes","security","verifyEventIntegrity","expectedHash","getAuditEvents","filters","query","select","order","ascending","eq","startDate","gte","endDate","lte","limit","data","bind"],"mappings":"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"}