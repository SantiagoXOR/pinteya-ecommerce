1f892a39051a443abfa39cf39998b714
// ===================================
// HOOK: useSearchOptimized - Sistema de b√∫squeda con TanStack Query
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    useSearchOptimized: function() {
        return useSearchOptimized;
    }
});
const _react = require("react");
const _reactquery = require("@tanstack/react-query");
const _usedebounce = require("use-debounce");
const _products = require("../lib/api/products");
const _queryclient = require("../lib/query-client");
const _useSearchErrorHandler = require("./useSearchErrorHandler");
const _useSearchToast = require("./useSearchToast");
const _useSearchNavigation = require("./useSearchNavigation");
function useSearchOptimized(options = {}) {
    const { debounceMs = 150, maxSuggestions = 6, searchLimit = 12, saveRecentSearches = true, enablePrefetch = true, onSearch, onSuggestionSelect } = options;
    // Estados locales
    const [query, setQuery] = (0, _react.useState)('');
    const [debouncedQuery, setDebouncedQuery] = (0, _react.useState)('');
    const [recentSearches, setRecentSearches] = (0, _react.useState)([]);
    const [hasSearched, setHasSearched] = (0, _react.useState)(false);
    // Hooks externos
    const queryClient = (0, _reactquery.useQueryClient)();
    const errorHandler = (0, _useSearchErrorHandler.useSearchErrorHandler)();
    const toastHandler = (0, _useSearchToast.useSearchToast)();
    const navigation = (0, _useSearchNavigation.useSearchNavigation)({
        scrollToTop: true,
        onBeforeNavigate: (url)=>console.log('üîç Navegando a:', url),
        onAfterNavigate: (url)=>console.log('‚úÖ Navegaci√≥n completada:', url)
    });
    // ===================================
    // DEBOUNCED QUERY UPDATE
    // ===================================
    const updateDebouncedQuery = (0, _usedebounce.useDebouncedCallback)((value)=>{
        setDebouncedQuery(value);
        // Analytics tracking
        if (value.trim()) {
            console.log('üîç useSearchOptimized: Query debounced:', value);
            console.log('üîç useSearchOptimized: New debouncedQuery value:', value);
            console.log('üîç useSearchOptimized: Value type:', typeof value);
            console.log('üîç useSearchOptimized: Value length:', value?.length);
            console.log('üîç useSearchOptimized: Query enabled condition will be:', !!value?.trim());
        }
    }, debounceMs, {
        maxWait: 2000,
        leading: false,
        trailing: true
    });
    // ===================================
    // TANSTACK QUERY INTEGRATION
    // ===================================
    // Query principal para b√∫squedas
    const { data: searchResults, isLoading, error, isFetching, isStale, dataUpdatedAt } = (0, _reactquery.useQuery)({
        queryKey: _queryclient.searchQueryKeys.search(debouncedQuery),
        queryFn: async ({ queryKey, signal })=>{
            const [, , searchQuery] = queryKey;
            if (!searchQuery?.trim()) return [];
            console.log('üîç useSearchOptimized: Executing search for:', searchQuery);
            // AbortController para cancelar requests (nota: searchProducts no soporta signal a√∫n)
            const response = await (0, _products.searchProducts)(searchQuery, maxSuggestions);
            console.log('üîç useSearchOptimized: API response:', response);
            console.log('üîç useSearchOptimized: Response data:', response.data);
            console.log('üîç useSearchOptimized: Response success:', response.success);
            return response.data || [];
        },
        enabled: (()=>{
            const isEnabled = !!debouncedQuery?.trim() && debouncedQuery.length >= 2;
            console.log('üîç useSearchOptimized: Query enabled condition:', isEnabled, 'for query:', debouncedQuery);
            return isEnabled;
        })(),
        ..._queryclient.searchQueryConfig
    });
    // ===================================
    // SUGGESTIONS GENERATION
    // ===================================
    const suggestions = Array.isArray(searchResults) ? searchResults.map((product)=>{
        console.log('üîç useSearchOptimized: Mapping product:', product);
        return {
            id: product.id.toString(),
            type: 'product',
            title: product.name,
            subtitle: product.category?.name,
            image: product.images?.previews?.[0] || product.images?.thumbnails?.[0],
            badge: product.stock > 0 ? 'En stock' : 'Sin stock',
            href: `/products/${product.id}`
        };
    }) : [];
    console.log('üîç useSearchOptimized: Generated suggestions:', suggestions.length, suggestions);
    // ===================================
    // SEARCH FUNCTIONS
    // ===================================
    const searchWithDebounce = (0, _react.useCallback)((searchQuery)=>{
        setQuery(searchQuery);
        updateDebouncedQuery(searchQuery);
        // Prefetch si est√° habilitado y la query es v√°lida
        if (enablePrefetch && searchQuery.trim().length > 2) {
            // Prefetch de datos de b√∫squeda
            queryClient.prefetchQuery({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery),
                queryFn: ()=>(0, _products.searchProducts)(searchQuery, maxSuggestions),
                ..._queryclient.searchQueryConfig
            });
            // Prefetch de p√°gina de resultados
            navigation.prefetchSearch(searchQuery.trim());
        }
    }, [
        updateDebouncedQuery,
        enablePrefetch,
        queryClient,
        maxSuggestions,
        navigation
    ]);
    const executeSearch = (0, _react.useCallback)(async (searchQuery)=>{
        if (!searchQuery.trim()) return;
        try {
            setHasSearched(true);
            // Guardar en historial
            if (saveRecentSearches) {
                const updated = [
                    searchQuery.trim(),
                    ...recentSearches.filter((s)=>s !== searchQuery.trim())
                ].slice(0, 5);
                setRecentSearches(updated);
                localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));
            }
            // Navegar a p√°gina de resultados usando navegaci√≥n optimizada
            navigation.navigateToSearch(searchQuery.trim());
            // Callback externo
            if (onSearch && searchResults) {
                onSearch(searchQuery, searchResults);
            }
            toastHandler.showSuccessToast(searchQuery, searchResults?.length || 0);
        } catch (error) {
            console.error('‚ùå useSearchOptimized: Error en executeSearch:', error);
            errorHandler.handleError(error);
        }
    }, [
        saveRecentSearches,
        recentSearches,
        navigation,
        onSearch,
        searchResults,
        toastHandler,
        errorHandler
    ]);
    const selectSuggestion = (0, _react.useCallback)((suggestion)=>{
        console.log('‚úÖ useSearchOptimized: Suggestion selected:', suggestion.title);
        // Navegar seg√∫n el tipo de sugerencia
        if (suggestion.type === 'product') {
            navigation.navigateToProduct(suggestion.id);
        } else {
            // Para b√∫squedas recientes o trending, navegar a b√∫squeda
            navigation.navigateToSearch(suggestion.title);
        }
        // Callback externo
        if (onSuggestionSelect) {
            onSuggestionSelect(suggestion);
        }
        toastHandler.showInfoToast(`${suggestion.type === 'product' ? 'Producto' : 'B√∫squeda'} seleccionado`, suggestion.title);
    }, [
        navigation,
        onSuggestionSelect,
        toastHandler
    ]);
    const clearSearch = (0, _react.useCallback)(()=>{
        setQuery('');
        setDebouncedQuery('');
        setHasSearched(false);
        // Limpiar cache de b√∫squedas si es necesario
        queryClient.removeQueries({
            queryKey: _queryclient.searchQueryKeys.searches()
        });
    }, [
        queryClient
    ]);
    // ===================================
    // LIFECYCLE
    // ===================================
    const initialize = (0, _react.useCallback)(()=>{
        // Cargar b√∫squedas recientes
        if (saveRecentSearches) {
            try {
                const saved = localStorage.getItem('pinteya-recent-searches');
                if (saved) {
                    setRecentSearches(JSON.parse(saved));
                }
            } catch (error) {
                console.warn('Error cargando b√∫squedas recientes:', error);
            }
        }
    }, [
        saveRecentSearches
    ]);
    const cleanup = (0, _react.useCallback)(()=>{
        // Limpiar debounce y cache si es necesario
        updateDebouncedQuery.cancel();
    }, [
        updateDebouncedQuery
    ]);
    // Inicializar al montar
    (0, _react.useEffect)(()=>{
        initialize();
        return cleanup;
    }, [
        initialize,
        cleanup
    ]);
    // ===================================
    // RETURN
    // ===================================
    return {
        // Estado de b√∫squeda
        query,
        results: searchResults || [],
        suggestions,
        isLoading,
        error: error?.message || null,
        hasSearched,
        recentSearches,
        // Estados de TanStack Query
        isFetching,
        isStale,
        dataUpdatedAt,
        // Estado de errores y toasts
        searchError: errorHandler.currentError,
        isRetrying: errorHandler.isRetrying,
        retryCount: errorHandler.retryCount,
        toasts: toastHandler.toasts,
        // Funciones principales
        searchWithDebounce,
        executeSearch,
        selectSuggestion,
        clearSearch,
        initialize,
        cleanup,
        // Funciones de manejo de errores
        clearError: errorHandler.clearError,
        retryManually: errorHandler.retryManually,
        // Funciones de toast
        removeToast: toastHandler.removeToast,
        clearToasts: toastHandler.clearToasts,
        // Utilidades de cache
        invalidateSearch: (searchQuery)=>queryClient.invalidateQueries({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery)
            }),
        prefetchSearch: (searchQuery)=>queryClient.prefetchQuery({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery),
                queryFn: ()=>(0, _products.searchProducts)(searchQuery, maxSuggestions),
                ..._queryclient.searchQueryConfig
            }),
        // Funciones de navegaci√≥n optimizada
        navigateToSearch: navigation.navigateToSearch,
        navigateToProduct: navigation.navigateToProduct,
        navigateToCategory: navigation.navigateToCategory,
        prefetchSearchPage: navigation.prefetchSearch,
        prefetchProductPage: navigation.prefetchProduct,
        getCurrentSearchQuery: navigation.getCurrentSearchQuery,
        buildSearchUrl: navigation.buildSearchUrl
    };
}
const _default = useSearchOptimized;

//# sourceMappingURL=data:application/json;base64,