{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\phase4\\enterprise-cache-system.test.ts"],"sourcesContent":["/**\n * Tests para el Sistema Enterprise de Caché\n * Verifica funcionalidad básica del sistema de caché inteligente\n */\n\nimport { enterpriseCacheSystem, ENTERPRISE_CACHE_CONFIGS, EnterpriseCacheUtils } from '@/lib/optimization/enterprise-cache-system';\n\n// Mock de dependencias\njest.mock('@/lib/cache-manager', () => ({\n  cacheManager: {\n    get: jest.fn(),\n    set: jest.fn(),\n  },\n  CACHE_CONFIGS: {\n    SYSTEM_CONFIG: { ttl: 300, prefix: 'system' },\n    PRODUCT_DATA: { ttl: 1800, prefix: 'products' }\n  }\n}));\n\njest.mock('@/lib/redis', () => ({\n  redisCache: {\n    del: jest.fn(),\n    client: {\n      scanStream: jest.fn()\n    }\n  }\n}));\n\njest.mock('@/lib/security/enterprise-audit-system', () => ({\n  enterpriseAuditSystem: {\n    logEnterpriseEvent: jest.fn()\n  }\n}));\n\ndescribe('Sistema Enterprise de Caché', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Configuraciones Predefinidas', () => {\n    test('debe tener configuración AUTH_CRITICAL', () => {\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL).toBeDefined();\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.ttl).toBe(300);\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.prefix).toBe('auth_critical');\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.securityLevel).toBe('critical');\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.encryptData).toBe(true);\n    });\n\n    test('debe tener configuración PRODUCTS_SMART', () => {\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART).toBeDefined();\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.ttl).toBe(1800);\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.prefix).toBe('products_smart');\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.enableInvalidation).toBe(true);\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.enableWarmup).toBe(true);\n    });\n\n    test('debe tener configuración PUBLIC_PERFORMANCE', () => {\n      expect(ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE).toBeDefined();\n      expect(ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.ttl).toBe(600);\n      expect(ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.warmupStrategy).toBe('eager');\n    });\n\n    test('debe tener configuración USER_SESSIONS', () => {\n      expect(ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS).toBeDefined();\n      expect(ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS.ttl).toBe(7200);\n      expect(ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS.encryptData).toBe(true);\n    });\n\n    test('debe tener configuración ANALYTICS_DATA', () => {\n      expect(ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA).toBeDefined();\n      expect(ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.ttl).toBe(900);\n      expect(ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.compressionLevel).toBe(8);\n    });\n  });\n\n  describe('Inicialización del Sistema', () => {\n    test('debe inicializar correctamente', async () => {\n      await expect(enterpriseCacheSystem.initialize()).resolves.not.toThrow();\n    });\n\n    test('debe ser singleton', () => {\n      const instance1 = enterpriseCacheSystem;\n      const instance2 = enterpriseCacheSystem;\n      expect(instance1).toBe(instance2);\n    });\n  });\n\n  describe('Operaciones de Caché', () => {\n    test('debe obtener métricas del sistema', () => {\n      const metrics = enterpriseCacheSystem.getMetrics();\n      expect(metrics).toBeDefined();\n      expect(typeof metrics).toBe('object');\n    });\n\n    test('debe obtener estadísticas de invalidación', () => {\n      const stats = enterpriseCacheSystem.getInvalidationStats();\n      expect(Array.isArray(stats)).toBe(true);\n    });\n\n    test('debe obtener estadísticas de warmup', () => {\n      const stats = enterpriseCacheSystem.getWarmupStats();\n      expect(Array.isArray(stats)).toBe(true);\n    });\n  });\n\n  describe('Utilidades de Caché', () => {\n    test('EnterpriseCacheUtils debe estar definido', () => {\n      expect(EnterpriseCacheUtils).toBeDefined();\n      expect(typeof EnterpriseCacheUtils.cacheProductData).toBe('function');\n      expect(typeof EnterpriseCacheUtils.cachePublicData).toBe('function');\n      expect(typeof EnterpriseCacheUtils.invalidateByPatterns).toBe('function');\n    });\n  });\n\n  describe('Configuración de Seguridad', () => {\n    test('configuraciones críticas deben tener encriptación habilitada', () => {\n      const criticalConfigs = [\n        ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL,\n        ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS\n      ];\n\n      criticalConfigs.forEach(config => {\n        expect(config.encryptData).toBe(true);\n        expect(['critical', 'high']).toContain(config.securityLevel);\n      });\n    });\n\n    test('configuraciones públicas deben tener seguridad básica', () => {\n      const publicConfigs = [\n        ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE,\n        ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA\n      ];\n\n      publicConfigs.forEach(config => {\n        expect(['basic', 'standard']).toContain(config.securityLevel);\n      });\n    });\n  });\n\n  describe('Configuración de Performance', () => {\n    test('configuraciones deben tener TTL apropiados', () => {\n      // Auth crítica: TTL corto para seguridad\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.ttl).toBeLessThanOrEqual(300);\n      \n      // Productos: TTL medio para balance\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.ttl).toBeGreaterThan(300);\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.ttl).toBeLessThanOrEqual(1800);\n      \n      // Sesiones: TTL largo para UX\n      expect(ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS.ttl).toBeGreaterThan(1800);\n    });\n\n    test('configuraciones deben tener compresión apropiada', () => {\n      // Datos críticos: compresión alta\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.compressionLevel).toBeGreaterThanOrEqual(9);\n      \n      // Analytics: compresión alta para volumen\n      expect(ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.compressionLevel).toBeGreaterThanOrEqual(8);\n      \n      // Performance público: compresión baja para velocidad\n      expect(ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.compressionLevel).toBeLessThanOrEqual(3);\n    });\n  });\n\n  describe('Estrategias de Warmup', () => {\n    test('configuraciones deben tener estrategias de warmup apropiadas', () => {\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.warmupStrategy).toBe('scheduled');\n      expect(ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.warmupStrategy).toBe('eager');\n      expect(ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.warmupStrategy).toBe('lazy');\n    });\n\n    test('configuraciones con warmup deben tener intervalos definidos', () => {\n      const warmupConfigs = Object.values(ENTERPRISE_CACHE_CONFIGS).filter(\n        config => config.enableWarmup\n      );\n\n      warmupConfigs.forEach(config => {\n        if (config.warmupStrategy === 'scheduled') {\n          expect(config.warmupInterval).toBeDefined();\n          expect(config.warmupInterval).toBeGreaterThan(0);\n        }\n      });\n    });\n  });\n\n  describe('Políticas de Eviction', () => {\n    test('configuraciones deben tener políticas de eviction apropiadas', () => {\n      // Auth crítica: TTL para seguridad\n      expect(ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.evictionPolicy).toBe('ttl');\n      \n      // Productos: LRU para acceso frecuente\n      expect(ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.evictionPolicy).toBe('lru');\n      \n      // Performance: LFU para datos populares\n      expect(ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.evictionPolicy).toBe('lfu');\n    });\n  });\n});\n"],"names":["jest","mock","cacheManager","get","fn","set","CACHE_CONFIGS","SYSTEM_CONFIG","ttl","prefix","PRODUCT_DATA","redisCache","del","client","scanStream","enterpriseAuditSystem","logEnterpriseEvent","describe","beforeEach","clearAllMocks","test","expect","ENTERPRISE_CACHE_CONFIGS","AUTH_CRITICAL","toBeDefined","toBe","securityLevel","encryptData","PRODUCTS_SMART","enableInvalidation","enableWarmup","PUBLIC_PERFORMANCE","warmupStrategy","USER_SESSIONS","ANALYTICS_DATA","compressionLevel","enterpriseCacheSystem","initialize","resolves","not","toThrow","instance1","instance2","metrics","getMetrics","stats","getInvalidationStats","Array","isArray","getWarmupStats","EnterpriseCacheUtils","cacheProductData","cachePublicData","invalidateByPatterns","criticalConfigs","forEach","config","toContain","publicConfigs","toBeLessThanOrEqual","toBeGreaterThan","toBeGreaterThanOrEqual","warmupConfigs","Object","values","filter","warmupInterval","evictionPolicy"],"mappings":"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"}