{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\enterprise-auth-utils.test.ts"],"sourcesContent":["/**\n * Tests para las Utilidades de Autenticación Enterprise\n * Verifica que las nuevas utilidades enterprise funcionan correctamente\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  getAuth: jest.fn(),\n  auth: jest.fn(),\n  clerkClient: jest.fn()\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      }))\n    }))\n  }\n}));\n\n// Mock de validaciones de seguridad\njest.mock('@/lib/auth/jwt-validation', () => ({\n  validateJWTIntegrity: jest.fn(),\n  validateJWTPermissions: jest.fn()\n}));\n\njest.mock('@/lib/auth/csrf-protection', () => ({\n  validateRequestOrigin: jest.fn()\n}));\n\njest.mock('@/lib/auth/rate-limiting', () => ({\n  checkRateLimit: jest.fn(),\n  RATE_LIMIT_CONFIGS: {\n    admin: { windowMs: 300000, maxRequests: 30 },\n    general: { windowMs: 60000, maxRequests: 100 }\n  }\n}));\n\njest.mock('@/lib/auth/security-audit', () => ({\n  logAuthSuccess: jest.fn(),\n  logAuthFailure: jest.fn(),\n  logPermissionDenied: jest.fn()\n}));\n\nimport {\n  getEnterpriseAuthContext,\n  requireCriticalAuth,\n  requireAdminAuth,\n  requireBasicAuth,\n  withEnterpriseAuth\n} from '@/lib/auth/enterprise-auth-utils';\nimport { getAuth, auth } from '@clerk/nextjs/server';\nimport { validateJWTIntegrity, validateJWTPermissions } from '@/lib/auth/jwt-validation';\nimport { validateRequestOrigin } from '@/lib/auth/csrf-protection';\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\nimport { supabaseAdmin } from '@/lib/supabase';\n\ndescribe('Utilidades de Autenticación Enterprise', () => {\n  let mockGetAuth: jest.MockedFunction<typeof getAuth>;\n  let mockAuth: jest.MockedFunction<typeof auth>;\n  let mockValidateJWT: jest.MockedFunction<typeof validateJWTIntegrity>;\n  let mockValidateJWTPermissions: jest.MockedFunction<typeof validateJWTPermissions>;\n  let mockValidateOrigin: jest.MockedFunction<typeof validateRequestOrigin>;\n  let mockCheckRateLimit: jest.MockedFunction<typeof checkRateLimit>;\n\n  beforeEach(() => {\n    mockGetAuth = getAuth as jest.MockedFunction<typeof getAuth>;\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\n    mockValidateJWT = validateJWTIntegrity as jest.MockedFunction<typeof validateJWTIntegrity>;\n    mockValidateJWTPermissions = validateJWTPermissions as jest.MockedFunction<typeof validateJWTPermissions>;\n    mockValidateOrigin = validateRequestOrigin as jest.MockedFunction<typeof validateRequestOrigin>;\n    mockCheckRateLimit = checkRateLimit as jest.MockedFunction<typeof checkRateLimit>;\n    \n    jest.clearAllMocks();\n\n    // Setup default mocks\n    mockCheckRateLimit.mockResolvedValue({\n      allowed: true,\n      limit: 30,\n      remaining: 29,\n      resetTime: Date.now() + 300000\n    });\n\n    mockValidateOrigin.mockResolvedValue({\n      valid: true\n    });\n\n    mockValidateJWT.mockResolvedValue({\n      valid: true,\n      payload: { sub: 'user_123', iss: 'clerk' }\n    });\n\n    mockValidateJWTPermissions.mockResolvedValue({\n      valid: true,\n      payload: { sub: 'user_123', metadata: { role: 'admin' } }\n    });\n\n    // Mock Supabase response\n    (supabaseAdmin.from as jest.Mock).mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({\n            data: {\n              id: 'profile_123',\n              email: 'admin@test.com',\n              role: 'admin',\n              permissions: ['admin_access', 'user_management'],\n              metadata: { test: true }\n            },\n            error: null\n          })\n        })\n      })\n    });\n  });\n\n  describe('getEnterpriseAuthContext', () => {\n    it('debe crear contexto enterprise completo para usuario admin', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {},\n        url: 'http://localhost:3000/api/test',\n        method: 'GET'\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      const result = await getEnterpriseAuthContext(mockRequest, {\n        securityLevel: 'critical',\n        enableJWTValidation: true,\n        enableCSRFProtection: true,\n        enableRateLimit: true\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.context).toBeDefined();\n      expect(result.context?.userId).toBe('user_123');\n      expect(result.context?.role).toBe('admin');\n      expect(result.context?.permissions).toContain('admin_access');\n      expect(result.context?.securityLevel).toBe('critical');\n      expect(result.context?.validations.jwtValid).toBe(true);\n      expect(result.context?.validations.csrfValid).toBe(true);\n      expect(result.context?.validations.rateLimitPassed).toBe(true);\n    });\n\n    it('debe fallar si rate limit es excedido', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockCheckRateLimit.mockResolvedValue({\n        allowed: false,\n        limit: 30,\n        remaining: 0,\n        resetTime: Date.now() + 300000,\n        retryAfter: 300,\n        error: 'Rate limit exceeded',\n        code: 'RATE_LIMIT_EXCEEDED'\n      });\n\n      const result = await getEnterpriseAuthContext(mockRequest, {\n        enableRateLimit: true,\n        rateLimitType: 'admin'\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Rate limit exceeded');\n      expect(result.code).toBe('RATE_LIMIT_EXCEEDED');\n      expect(result.status).toBe(429);\n      expect(result.retryAfter).toBe(300);\n    });\n\n    it('debe fallar si validación CSRF falla', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockValidateOrigin.mockResolvedValue({\n        valid: false,\n        error: 'Invalid origin',\n        code: 'INVALID_ORIGIN'\n      });\n\n      const result = await getEnterpriseAuthContext(mockRequest, {\n        enableCSRFProtection: true\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Invalid origin');\n      expect(result.code).toBe('CSRF_VALIDATION_FAILED');\n      expect(result.status).toBe(403);\n    });\n\n    it('debe fallar si usuario no está autenticado', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: null,\n        sessionId: null\n      });\n\n      const result = await getEnterpriseAuthContext(mockRequest);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Usuario no autenticado');\n      expect(result.code).toBe('NOT_AUTHENTICATED');\n      expect(result.status).toBe(401);\n    });\n\n    it('debe fallar si JWT es inválido', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      mockValidateJWT.mockResolvedValue({\n        valid: false,\n        error: 'Invalid JWT token',\n        code: 'INVALID_TOKEN'\n      });\n\n      const result = await getEnterpriseAuthContext(mockRequest, {\n        enableJWTValidation: true\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Invalid JWT token');\n      expect(result.code).toBe('JWT_VALIDATION_FAILED');\n      expect(result.status).toBe(401);\n    });\n\n    it('debe fallar si permisos son insuficientes', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      // Mock usuario sin permisos admin\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'profile_123',\n                email: 'user@test.com',\n                role: 'user',\n                permissions: ['basic_access']\n              },\n              error: null\n            })\n          })\n        })\n      });\n\n      const result = await getEnterpriseAuthContext(mockRequest, {\n        requiredRole: 'admin',\n        requiredPermissions: ['admin_access']\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Rol requerido: admin');\n      expect(result.code).toBe('INSUFFICIENT_ROLE');\n      expect(result.status).toBe(403);\n    });\n  });\n\n  describe('Funciones de conveniencia', () => {\n    it('requireCriticalAuth debe usar configuración crítica', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      const result = await requireCriticalAuth(mockRequest);\n\n      expect(result.success).toBe(true);\n      expect(result.context?.securityLevel).toBe('critical');\n      expect(mockCheckRateLimit).toHaveBeenCalled();\n      expect(mockValidateOrigin).toHaveBeenCalled();\n      expect(mockValidateJWT).toHaveBeenCalled();\n    });\n\n    it('requireAdminAuth debe requerir rol admin', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      const result = await requireAdminAuth(mockRequest, ['user_management']);\n\n      expect(result.success).toBe(true);\n      expect(result.context?.role).toBe('admin');\n      expect(result.context?.permissions).toContain('user_management');\n    });\n\n    it('requireBasicAuth debe usar configuración básica', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n\n      mockAuth.mockResolvedValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      const result = await requireBasicAuth(mockRequest);\n\n      expect(result.success).toBe(true);\n      expect(result.context?.securityLevel).toBe('low');\n    });\n  });\n\n  describe('withEnterpriseAuth middleware', () => {\n    it('debe ejecutar handler si autenticación es exitosa', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n      const mockResponse = { status: jest.fn(), json: jest.fn() };\n      const mockHandler = jest.fn().mockResolvedValue({ success: true });\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      const authFunction = jest.fn().mockResolvedValue({\n        success: true,\n        context: {\n          userId: 'user_123',\n          role: 'admin',\n          permissions: ['admin_access']\n        }\n      });\n\n      const middleware = withEnterpriseAuth(authFunction);\n      const wrappedHandler = middleware(mockHandler);\n\n      const result = await wrappedHandler(mockRequest, mockResponse);\n\n      expect(authFunction).toHaveBeenCalledWith(mockRequest);\n      expect(mockHandler).toHaveBeenCalledWith(mockRequest, mockResponse);\n      expect(mockRequest.enterpriseAuth).toBeDefined();\n    });\n\n    it('debe retornar error si autenticación falla', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n      const mockResponse = { \n        status: jest.fn().mockReturnThis(), \n        json: jest.fn(),\n        setHeader: jest.fn()\n      };\n      const mockHandler = jest.fn();\n\n      const authFunction = jest.fn().mockResolvedValue({\n        success: false,\n        error: 'Authentication failed',\n        code: 'AUTH_FAILED',\n        status: 401\n      });\n\n      const middleware = withEnterpriseAuth(authFunction);\n      const wrappedHandler = middleware(mockHandler);\n\n      await wrappedHandler(mockRequest, mockResponse);\n\n      expect(authFunction).toHaveBeenCalledWith(mockRequest);\n      expect(mockHandler).not.toHaveBeenCalled();\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith(\n        expect.objectContaining({\n          success: false,\n          error: 'Authentication failed',\n          code: 'AUTH_FAILED',\n          enterprise: true\n        })\n      );\n    });\n  });\n});\n"],"names":["jest","mock","getAuth","fn","auth","clerkClient","supabaseAdmin","from","select","eq","single","validateJWTIntegrity","validateJWTPermissions","validateRequestOrigin","checkRateLimit","RATE_LIMIT_CONFIGS","admin","windowMs","maxRequests","general","logAuthSuccess","logAuthFailure","logPermissionDenied","describe","mockGetAuth","mockAuth","mockValidateJWT","mockValidateJWTPermissions","mockValidateOrigin","mockCheckRateLimit","beforeEach","clearAllMocks","mockResolvedValue","allowed","limit","remaining","resetTime","Date","now","valid","payload","sub","iss","metadata","role","mockReturnValue","data","id","email","permissions","test","error","it","mockRequest","query","headers","url","method","userId","sessionId","result","getEnterpriseAuthContext","securityLevel","enableJWTValidation","enableCSRFProtection","enableRateLimit","expect","success","toBe","context","toBeDefined","toContain","validations","jwtValid","csrfValid","rateLimitPassed","retryAfter","code","rateLimitType","status","requiredRole","requiredPermissions","requireCriticalAuth","toHaveBeenCalled","requireAdminAuth","requireBasicAuth","mockResponse","json","mockHandler","authFunction","middleware","withEnterpriseAuth","wrappedHandler","toHaveBeenCalledWith","enterpriseAuth","mockReturnThis","setHeader","not","objectContaining","enterprise"],"mappings":"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"}