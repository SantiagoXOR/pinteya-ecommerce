10a4b8607399ad4461769fd0f83d1d6b
/**
 * useAnalytics Hook Tests
 * Enterprise-ready test suite for analytics tracking
 * Pinteya E-commerce
 */ "use strict";
// Mock useAuth hook
jest.mock('@/hooks/useAuth', ()=>({
        useAuth: ()=>({
                user: {
                    id: 'test-user-123',
                    email: 'test@example.com'
                },
                isLoaded: true
            })
    }));
// Mock usePathname
jest.mock('next/navigation', ()=>({
        usePathname: ()=>'/test-page'
    }));
// Mock analytics lib
jest.mock('@/lib/analytics', ()=>({
        analytics: {
            trackEvent: jest.fn().mockResolvedValue(undefined),
            trackEcommerceEvent: jest.fn().mockResolvedValue(undefined),
            trackPageView: jest.fn().mockResolvedValue(undefined),
            trackConversion: jest.fn().mockResolvedValue(undefined),
            trackProductView: jest.fn().mockResolvedValue(undefined),
            trackAddToCart: jest.fn().mockResolvedValue(undefined),
            trackRemoveFromCart: jest.fn().mockResolvedValue(undefined),
            trackCheckoutStart: jest.fn().mockResolvedValue(undefined),
            trackPurchase: jest.fn().mockResolvedValue(undefined),
            trackSearch: jest.fn().mockResolvedValue(undefined),
            getEvents: jest.fn(()=>[]),
            getInteractions: jest.fn(()=>[]),
            getConversionMetrics: jest.fn(()=>({
                    cartAdditions: 5,
                    cartRemovals: 1,
                    checkoutStarts: 3,
                    checkoutCompletions: 2,
                    productViews: 25,
                    categoryViews: 8,
                    searchQueries: 12,
                    conversionRate: 0.08,
                    averageOrderValue: 150.75,
                    cartAbandonmentRate: 0.33
                })),
            getSessionId: jest.fn(()=>'test-session-123'),
            initialize: jest.fn().mockResolvedValue(undefined)
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useAnalytics = require("../../hooks/useAnalytics");
const _analytics = require("../../lib/analytics");
// Mock window.gtag
Object.defineProperty(window, 'gtag', {
    value: jest.fn(),
    writable: true
});
describe('useAnalytics Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Initialization', ()=>{
        it('should initialize with correct default state', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            expect(result.current.isEnabled).toBe(true);
            expect(result.current.sessionMetrics).toBeDefined();
            expect(typeof result.current.trackEvent).toBe('function');
            expect(typeof result.current.trackPageView).toBe('function');
            expect(typeof result.current.getSessionId).toBe('function');
        });
        it('should provide all required tracking functions', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            const expectedFunctions = [
                'trackEvent',
                'trackEcommerceEvent',
                'trackPageView',
                'trackConversion',
                'trackProductView',
                'trackAddToCart',
                'trackRemoveFromCart',
                'trackCheckoutStart',
                'trackPurchase',
                'trackSearch'
            ];
            expectedFunctions.forEach((funcName)=>{
                expect(typeof result.current[funcName]).toBe('function');
            });
        });
    });
    describe('Event Tracking', ()=>{
        it('should track generic events correctly', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            (0, _react.act)(()=>{
                result.current.trackEvent('test_event', 'test_category', 'test_action', 'test_label', 100);
            });
            expect(_analytics.analytics.trackEvent).toHaveBeenCalledWith('test_event', 'test_category', 'test_action', 'test_label', 100, undefined);
        });
        it('should track product view events', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            (0, _react.act)(()=>{
                result.current.trackProductView('prod-123', 'Test Product', 'Electronics', 99.99);
            });
            expect(_analytics.analytics.trackProductView).toHaveBeenCalledWith('prod-123', 'Test Product', 'Electronics', 99.99);
        });
        it('should track add to cart events', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            (0, _react.act)(()=>{
                result.current.trackAddToCart('prod-123', 'Test Product', 99.99, 2);
            });
            expect(_analytics.analytics.trackAddToCart).toHaveBeenCalledWith('prod-123', 'Test Product', 99.99, 2);
        });
        it('should track checkout start events', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            (0, _react.act)(()=>{
                result.current.trackCheckoutStart(299.98, 3);
            });
            expect(_analytics.analytics.trackCheckoutStart).toHaveBeenCalledWith(299.98, 3);
        });
        it('should track purchase events', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            const mockItems = [
                {
                    id: 'item1',
                    name: 'Product 1',
                    price: 99.99
                }
            ];
            (0, _react.act)(()=>{
                result.current.trackPurchase('order-123', 299.98, mockItems);
            });
            expect(_analytics.analytics.trackPurchase).toHaveBeenCalledWith('order-123', 299.98, mockItems);
        });
        it('should track search events', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            (0, _react.act)(()=>{
                result.current.trackSearch('test query', 15);
            });
            expect(_analytics.analytics.trackSearch).toHaveBeenCalledWith('test query', 15);
        });
    });
    describe('Data Retrieval', ()=>{
        it('should get events correctly', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            const events = result.current.getEvents();
            expect(_analytics.analytics.getEvents).toHaveBeenCalled();
            expect(Array.isArray(events)).toBe(true);
        });
        it('should get session ID correctly', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            const sessionId = result.current.getSessionId();
            expect(_analytics.analytics.getSessionId).toHaveBeenCalled();
            expect(sessionId).toBe('test-session-123');
        });
        it('should get conversion metrics correctly', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            const metrics = result.current.getConversionMetrics();
            expect(_analytics.analytics.getConversionMetrics).toHaveBeenCalled();
            expect(metrics).toEqual({
                cartAdditions: 5,
                cartRemovals: 1,
                checkoutStarts: 3,
                checkoutCompletions: 2,
                productViews: 25,
                categoryViews: 8,
                searchQueries: 12,
                conversionRate: 0.08,
                averageOrderValue: 150.75,
                cartAbandonmentRate: 0.33
            });
        });
    });
    describe('State Management', ()=>{
        it('should toggle enabled state correctly', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            expect(result.current.isEnabled).toBe(true);
            (0, _react.act)(()=>{
                result.current.setEnabled(false);
            });
            expect(result.current.isEnabled).toBe(false);
            (0, _react.act)(()=>{
                result.current.setEnabled(true);
            });
            expect(result.current.isEnabled).toBe(true);
        });
        it('should refresh metrics correctly', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useAnalytics)());
            (0, _react.act)(()=>{
                result.current.refreshMetrics();
            });
            expect(_analytics.analytics.getConversionMetrics).toHaveBeenCalled();
        });
    });
});
describe('useRealTimeMetrics Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.useRealTimers();
    });
    it('should initialize with metrics from analytics', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useAnalytics.useRealTimeMetrics)());
        expect(result.current).toEqual({
            cartAdditions: 5,
            cartRemovals: 1,
            checkoutStarts: 3,
            checkoutCompletions: 2,
            productViews: 25,
            categoryViews: 8,
            searchQueries: 12,
            conversionRate: 0.08,
            averageOrderValue: 150.75,
            cartAbandonmentRate: 0.33
        });
    });
    it('should update metrics at specified interval', ()=>{
        (0, _react.renderHook)(()=>(0, _useAnalytics.useRealTimeMetrics)(1000));
        expect(_analytics.analytics.getConversionMetrics).toHaveBeenCalledTimes(1);
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(1000);
        });
        expect(_analytics.analytics.getConversionMetrics).toHaveBeenCalledTimes(2);
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(1000);
        });
        expect(_analytics.analytics.getConversionMetrics).toHaveBeenCalledTimes(3);
    });
}); // useComponentTracking tests skipped due to dependency on useOptimizedAnalytics
 // This hook will be tested separately when useOptimizedAnalytics is properly mocked

//# sourceMappingURL=data:application/json;base64,