a64918894ba0d8bc8e36135dedc5109c
// ===================================
// TESTS: API de Marcas
// ===================================
"use strict";
// Mock de Supabase - Versión completa para brands
jest.mock('@/lib/supabase', ()=>{
    const createMockQueryBuilder = ()=>{
        const mockData = {
            data: [
                {
                    brand: 'El Galgo',
                    product_count: 2
                },
                {
                    brand: 'Plavicon',
                    product_count: 3
                },
                {
                    brand: 'Akapol',
                    product_count: 1
                }
            ],
            error: null
        };
        const mockQueryBuilder = {
            select: jest.fn(()=>mockQueryBuilder),
            from: jest.fn(()=>mockQueryBuilder),
            insert: jest.fn(()=>mockQueryBuilder),
            update: jest.fn(()=>mockQueryBuilder),
            delete: jest.fn(()=>mockQueryBuilder),
            eq: jest.fn(()=>mockQueryBuilder),
            neq: jest.fn(()=>mockQueryBuilder),
            gt: jest.fn(()=>mockQueryBuilder),
            gte: jest.fn(()=>mockQueryBuilder),
            lt: jest.fn(()=>mockQueryBuilder),
            lte: jest.fn(()=>mockQueryBuilder),
            like: jest.fn(()=>mockQueryBuilder),
            ilike: jest.fn(()=>mockQueryBuilder),
            is: jest.fn(()=>mockQueryBuilder),
            in: jest.fn(()=>mockQueryBuilder),
            not: jest.fn(()=>mockQueryBuilder),
            or: jest.fn(()=>mockQueryBuilder),
            and: jest.fn(()=>mockQueryBuilder),
            order: jest.fn(()=>mockQueryBuilder),
            limit: jest.fn(()=>mockQueryBuilder),
            range: jest.fn(()=>mockQueryBuilder),
            single: jest.fn(()=>Promise.resolve(mockData)),
            maybeSingle: jest.fn(()=>Promise.resolve(mockData)),
            then: jest.fn((callback)=>Promise.resolve(callback(mockData))),
            catch: jest.fn(()=>Promise.resolve())
        };
        return mockQueryBuilder;
    };
    const mockClient = {
        from: jest.fn(()=>createMockQueryBuilder()),
        auth: {
            getUser: jest.fn(()=>Promise.resolve({
                    data: {
                        user: null
                    },
                    error: null
                }))
        }
    };
    return {
        getSupabaseClient: jest.fn(()=>mockClient),
        supabase: mockClient,
        supabaseAdmin: mockClient,
        handleSupabaseError: jest.fn((error, context)=>{
            if (error?.message) {
                throw new Error(error.message);
            }
            throw new Error('Supabase error');
        }),
        isAuthenticated: jest.fn(()=>Promise.resolve(false)),
        getCurrentUser: jest.fn(()=>Promise.resolve(null))
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../app/api/brands/route");
describe('API de Marcas', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('GET /api/brands', ()=>{
        it('debería obtener marcas con conteo de productos', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.data).toBeInstanceOf(Array);
            expect(data.data.length).toBeGreaterThan(0);
            // Verificar estructura de marca
            const firstBrand = data.data[0];
            expect(firstBrand).toHaveProperty('name');
            expect(firstBrand).toHaveProperty('products_count');
            expect(typeof firstBrand.name).toBe('string');
            expect(typeof firstBrand.products_count).toBe('number');
        });
        it('debería filtrar marcas por búsqueda', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands?search=galgo');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.data).toBeInstanceOf(Array);
        });
        it('debería filtrar por mínimo de productos', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands?minProducts=2');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.data).toBeInstanceOf(Array);
            // Verificar que todas las marcas tienen al menos 2 productos
            data.data.forEach((brand)=>{
                expect(brand.products_count).toBeGreaterThanOrEqual(2);
            });
        });
        it('debería ordenar marcas por número de productos', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            // Verificar ordenamiento descendente por productos
            for(let i = 0; i < data.data.length - 1; i++){
                expect(data.data[i].products_count).toBeGreaterThanOrEqual(data.data[i + 1].products_count);
            }
        });
        it('debería manejar errores de base de datos', async ()=>{
            // Mock error de Supabase
            const mockSupabase = require('@/lib/supabase');
            mockSupabase.getSupabaseClient.mockReturnValueOnce(null);
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(503);
            expect(data.success).toBe(false);
            expect(data.error).toBe('Servicio de base de datos no disponible');
        });
    });
    describe('POST /api/brands (estadísticas)', ()=>{
        beforeEach(()=>{
            // Mock para estadísticas
            const mockSupabase = require('@/lib/supabase');
            mockSupabase.getSupabaseClient.mockReturnValue({
                from: jest.fn(()=>({
                        select: jest.fn(()=>({
                                not: jest.fn(()=>Promise.resolve({
                                        data: [
                                            {
                                                brand: 'El Galgo',
                                                price: 100,
                                                discounted_price: null,
                                                stock: 10,
                                                category_id: 1
                                            },
                                            {
                                                brand: 'El Galgo',
                                                price: 150,
                                                discounted_price: 120,
                                                stock: 5,
                                                category_id: 1
                                            },
                                            {
                                                brand: 'Plavicon',
                                                price: 200,
                                                discounted_price: null,
                                                stock: 8,
                                                category_id: 2
                                            },
                                            {
                                                brand: 'Plavicon',
                                                price: 250,
                                                discounted_price: 200,
                                                stock: 3,
                                                category_id: 2
                                            },
                                            {
                                                brand: 'Akapol',
                                                price: 300,
                                                discounted_price: null,
                                                stock: 15,
                                                category_id: 3
                                            }
                                        ],
                                        error: null
                                    }))
                            }))
                    }))
            });
        });
        it('debería calcular estadísticas de marcas', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.data).toBeInstanceOf(Array);
            // Verificar estructura de estadísticas
            const firstStat = data.data[0];
            expect(firstStat).toHaveProperty('name');
            expect(firstStat).toHaveProperty('products_count');
            expect(firstStat).toHaveProperty('total_stock');
            expect(firstStat).toHaveProperty('avg_price');
            expect(firstStat).toHaveProperty('min_price');
            expect(firstStat).toHaveProperty('max_price');
            expect(firstStat).toHaveProperty('discounted_products');
        });
        it('debería calcular precios promedio correctamente', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            // Verificar que los precios promedio son números válidos
            data.data.forEach((stat)=>{
                expect(typeof stat.avg_price).toBe('number');
                expect(stat.avg_price).toBeGreaterThan(0);
                expect(stat.min_price).toBeLessThanOrEqual(stat.max_price);
            });
        });
        it('debería contar productos con descuento correctamente', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            // Verificar conteo de productos con descuento
            data.data.forEach((stat)=>{
                expect(typeof stat.discounted_products).toBe('number');
                expect(stat.discounted_products).toBeGreaterThanOrEqual(0);
                expect(stat.discounted_products).toBeLessThanOrEqual(stat.products_count);
            });
        });
    });
    describe('Validación de parámetros', ()=>{
        it('debería manejar parámetros de búsqueda vacíos', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands?search=');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
        });
        it('debería manejar minProducts inválido', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands?minProducts=abc');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
        // Debería usar valor por defecto (1)
        });
        it('debería manejar minProducts negativo', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/brands?minProducts=-5');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
        });
    });
    describe('Casos edge', ()=>{
        it('debería manejar respuesta vacía de base de datos', async ()=>{
            // Mock respuesta vacía
            const mockSupabase = require('@/lib/supabase');
            mockSupabase.getSupabaseClient.mockReturnValue({
                from: jest.fn(()=>({
                        select: jest.fn(()=>({
                                not: jest.fn(()=>({
                                        gt: jest.fn(()=>({
                                                ilike: jest.fn(()=>Promise.resolve({
                                                        data: [],
                                                        error: null
                                                    }))
                                            }))
                                    }))
                            }))
                    }))
            });
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.data).toEqual([]);
            expect(data.message).toBe('0 marcas encontradas');
        });
        it('debería manejar marcas con nombres especiales', async ()=>{
            // Mock con caracteres especiales
            const mockSupabase = require('@/lib/supabase');
            // Crear un mock más robusto que maneje tanto con como sin ilike
            const mockQueryBuilder = {
                select: jest.fn(()=>mockQueryBuilder),
                not: jest.fn(()=>mockQueryBuilder),
                gt: jest.fn(()=>mockQueryBuilder),
                ilike: jest.fn(()=>Promise.resolve({
                        data: [
                            {
                                brand: 'Marca & Cía.'
                            },
                            {
                                brand: 'Marca-Test'
                            },
                            {
                                brand: 'Marca 123'
                            }
                        ],
                        error: null
                    })),
                // Agregar método then para manejar casos sin ilike
                then: jest.fn((callback)=>callback({
                        data: [
                            {
                                brand: 'Marca & Cía.'
                            },
                            {
                                brand: 'Marca-Test'
                            },
                            {
                                brand: 'Marca 123'
                            }
                        ],
                        error: null
                    }))
            };
            mockSupabase.getSupabaseClient.mockReturnValue({
                from: jest.fn(()=>mockQueryBuilder)
            });
            const request = new _server.NextRequest('http://localhost:3000/api/brands');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.data.length).toBe(3);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,