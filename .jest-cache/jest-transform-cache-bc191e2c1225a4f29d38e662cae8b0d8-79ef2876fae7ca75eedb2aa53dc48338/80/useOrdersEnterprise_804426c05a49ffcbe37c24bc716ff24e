bd83cba52e11492807a82dc2b950bf11
// ===================================
// PINTEYA E-COMMERCE - ORDERS ENTERPRISE HOOK
// ===================================
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useOrderDetail () {
        return useOrderDetail;
    },
    get useOrdersEnterprise () {
        return useOrdersEnterprise;
    }
});
const _react = require("react");
function useOrdersEnterprise(initialFilters) {
    const [state, setState] = (0, _react.useState)({
        orders: [],
        loading: true,
        error: null,
        filters: {
            page: 1,
            limit: 20,
            sort_by: 'created_at',
            sort_order: 'desc',
            ...initialFilters
        },
        pagination: {
            page: 1,
            limit: 20,
            total: 0,
            totalPages: 0,
            hasNextPage: false,
            hasPreviousPage: false
        }
    });
    // ===================================
    // FUNCIONES DE API
    // ===================================
    const fetchOrders = (0, _react.useCallback)(async (filters)=>{
        setState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const queryParams = new URLSearchParams();
            Object.entries(filters).forEach(([key, value])=>{
                if (value !== undefined && value !== null && value !== '') {
                    queryParams.append(key, value.toString());
                }
            });
            const response = await fetch(`/api/admin/orders?${queryParams}`);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.data?.toString() || 'Error al cargar órdenes');
            }
            setState((prev)=>({
                    ...prev,
                    orders: data.data.orders,
                    pagination: data.data.pagination,
                    filters: data.data.filters,
                    loading: false
                }));
        } catch (error) {
            setState((prev)=>({
                    ...prev,
                    error: error instanceof Error ? error.message : 'Error desconocido',
                    loading: false
                }));
        }
    }, []);
    const createOrder = (0, _react.useCallback)(async (orderData)=>{
        const response = await fetch('/api/admin/orders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al crear orden');
        }
        // Refrescar lista después de crear
        await fetchOrders(state.filters);
        return data.data;
    }, [
        state.filters,
        fetchOrders
    ]);
    const updateOrder = (0, _react.useCallback)(async (orderId, orderData)=>{
        const response = await fetch(`/api/admin/orders/${orderId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al actualizar orden');
        }
        // Actualizar orden en el estado local
        setState((prev)=>({
                ...prev,
                orders: prev.orders.map((order)=>order.id === orderId ? {
                        ...order,
                        ...data.data
                    } : order)
            }));
        return data.data;
    }, []);
    const changeOrderStatus = (0, _react.useCallback)(async (orderId, newStatus, reason, additionalData)=>{
        const response = await fetch(`/api/admin/orders/${orderId}/status`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                status: newStatus,
                reason,
                ...additionalData
            })
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al cambiar estado');
        }
        // Actualizar orden en el estado local
        setState((prev)=>({
                ...prev,
                orders: prev.orders.map((order)=>order.id === orderId ? {
                        ...order,
                        status: newStatus
                    } : order)
            }));
    }, []);
    const bulkUpdateStatus = (0, _react.useCallback)(async (bulkData)=>{
        const response = await fetch('/api/admin/orders/bulk?operation=status_update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(bulkData)
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error en operación masiva');
        }
        // Refrescar lista después de operación masiva
        await fetchOrders(state.filters);
        return data.data;
    }, [
        state.filters,
        fetchOrders
    ]);
    const exportOrders = (0, _react.useCallback)(async (format = 'csv', filters)=>{
        const response = await fetch('/api/admin/orders/bulk?operation=export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                format,
                filters: filters || state.filters,
                include_items: true
            })
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al exportar órdenes');
        }
        return data.data;
    }, [
        state.filters
    ]);
    // ===================================
    // FUNCIONES DE FILTRADO Y PAGINACIÓN
    // ===================================
    const updateFilters = (0, _react.useCallback)((newFilters)=>{
        const updatedFilters = {
            ...state.filters,
            ...newFilters,
            page: newFilters.page || 1
        };
        setState((prev)=>({
                ...prev,
                filters: updatedFilters
            }));
        fetchOrders(updatedFilters);
    }, [
        state.filters,
        fetchOrders
    ]);
    const setPage = (0, _react.useCallback)((page)=>{
        updateFilters({
            page
        });
    }, [
        updateFilters
    ]);
    const setSearch = (0, _react.useCallback)((search)=>{
        updateFilters({
            search,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const setStatus = (0, _react.useCallback)((status)=>{
        updateFilters({
            status,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const setPaymentStatus = (0, _react.useCallback)((payment_status)=>{
        updateFilters({
            payment_status,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const setSorting = (0, _react.useCallback)((sort_by, sort_order)=>{
        updateFilters({
            sort_by,
            sort_order
        });
    }, [
        updateFilters
    ]);
    const setDateRange = (0, _react.useCallback)((date_from, date_to)=>{
        updateFilters({
            date_from,
            date_to,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const clearFilters = (0, _react.useCallback)(()=>{
        const defaultFilters = {
            page: 1,
            limit: 20,
            sort_by: 'created_at',
            sort_order: 'desc'
        };
        setState((prev)=>({
                ...prev,
                filters: defaultFilters
            }));
        fetchOrders(defaultFilters);
    }, [
        fetchOrders
    ]);
    // ===================================
    // FUNCIONES DE UTILIDAD
    // ===================================
    const refresh = (0, _react.useCallback)(()=>{
        fetchOrders(state.filters);
    }, [
        state.filters,
        fetchOrders
    ]);
    const getOrderById = (0, _react.useCallback)((orderId)=>{
        return state.orders.find((order)=>order.id === orderId);
    }, [
        state.orders
    ]);
    const getOrdersByStatus = (0, _react.useCallback)((status)=>{
        return state.orders.filter((order)=>order.status === status);
    }, [
        state.orders
    ]);
    const getTotalRevenue = (0, _react.useCallback)(()=>{
        return state.orders.reduce((total, order)=>{
            return order.status !== 'cancelled' ? total + order.total_amount : total;
        }, 0);
    }, [
        state.orders
    ]);
    const getAverageOrderValue = (0, _react.useCallback)(()=>{
        const validOrders = state.orders.filter((order)=>order.status !== 'cancelled');
        if (validOrders.length === 0) return 0;
        const total = validOrders.reduce((sum, order)=>sum + order.total_amount, 0);
        return total / validOrders.length;
    }, [
        state.orders
    ]);
    // ===================================
    // EFECTOS
    // ===================================
    (0, _react.useEffect)(()=>{
        fetchOrders(state.filters);
    }, []); // Solo ejecutar una vez al montar
    // ===================================
    // RETURN DEL HOOK
    // ===================================
    return {
        // Estado
        orders: state.orders,
        loading: state.loading,
        error: state.error,
        filters: state.filters,
        pagination: state.pagination,
        // Operaciones CRUD
        createOrder,
        updateOrder,
        changeOrderStatus,
        bulkUpdateStatus,
        exportOrders,
        // Filtrado y paginación
        updateFilters,
        setPage,
        setSearch,
        setStatus,
        setPaymentStatus,
        setSorting,
        setDateRange,
        clearFilters,
        // Utilidades
        refresh,
        getOrderById,
        getOrdersByStatus,
        getTotalRevenue,
        getAverageOrderValue,
        // Funciones de conveniencia
        hasNextPage: state.pagination.hasNextPage,
        hasPreviousPage: state.pagination.hasPreviousPage,
        totalOrders: state.pagination.total,
        currentPage: state.pagination.page,
        totalPages: state.pagination.totalPages
    };
}
function useOrderDetail(orderId) {
    const [order, setOrder] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const fetchOrder = (0, _react.useCallback)(async ()=>{
        if (!orderId) return;
        setLoading(true);
        setError(null);
        try {
            const response = await fetch(`/api/admin/orders/${orderId}`);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.error || 'Error al cargar orden');
            }
            setOrder(data.data.order);
        } catch (error) {
            setError(error instanceof Error ? error.message : 'Error desconocido');
        } finally{
            setLoading(false);
        }
    }, [
        orderId
    ]);
    (0, _react.useEffect)(()=>{
        fetchOrder();
    }, [
        fetchOrder
    ]);
    return {
        order,
        loading,
        error,
        refresh: fetchOrder
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZU9yZGVyc0VudGVycHJpc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gUElOVEVZQSBFLUNPTU1FUkNFIC0gT1JERVJTIEVOVEVSUFJJU0UgSE9PS1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuJ3VzZSBjbGllbnQnO1xyXG5cclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFxyXG4gIE9yZGVyRW50ZXJwcmlzZSwgXHJcbiAgT3JkZXJGaWx0ZXJzLCBcclxuICBPcmRlckxpc3RSZXNwb25zZSxcclxuICBVc2VPcmRlcnNTdGF0ZSxcclxuICBCdWxrU3RhdHVzVXBkYXRlLFxyXG4gIEJ1bGtTdGF0dXNVcGRhdGVSZXN1bHRcclxufSBmcm9tICdAL3R5cGVzL29yZGVycy1lbnRlcnByaXNlJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEhPT0sgUFJJTkNJUEFMXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlT3JkZXJzRW50ZXJwcmlzZShpbml0aWFsRmlsdGVycz86IE9yZGVyRmlsdGVycykge1xyXG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGU8VXNlT3JkZXJzU3RhdGU+KHtcclxuICAgIG9yZGVyczogW10sXHJcbiAgICBsb2FkaW5nOiB0cnVlLFxyXG4gICAgZXJyb3I6IG51bGwsXHJcbiAgICBmaWx0ZXJzOiB7XHJcbiAgICAgIHBhZ2U6IDEsXHJcbiAgICAgIGxpbWl0OiAyMCxcclxuICAgICAgc29ydF9ieTogJ2NyZWF0ZWRfYXQnLFxyXG4gICAgICBzb3J0X29yZGVyOiAnZGVzYycsXHJcbiAgICAgIC4uLmluaXRpYWxGaWx0ZXJzLFxyXG4gICAgfSxcclxuICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgcGFnZTogMSxcclxuICAgICAgbGltaXQ6IDIwLFxyXG4gICAgICB0b3RhbDogMCxcclxuICAgICAgdG90YWxQYWdlczogMCxcclxuICAgICAgaGFzTmV4dFBhZ2U6IGZhbHNlLFxyXG4gICAgICBoYXNQcmV2aW91c1BhZ2U6IGZhbHNlLFxyXG4gICAgfSxcclxuICB9KTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBGVU5DSU9ORVMgREUgQVBJXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgY29uc3QgZmV0Y2hPcmRlcnMgPSB1c2VDYWxsYmFjayhhc3luYyAoZmlsdGVyczogT3JkZXJGaWx0ZXJzKSA9PiB7XHJcbiAgICBzZXRTdGF0ZShwcmV2ID0+ICh7IC4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XHJcbiAgICAgIE9iamVjdC5lbnRyaWVzKGZpbHRlcnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgcXVlcnlQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvYWRtaW4vb3JkZXJzPyR7cXVlcnlQYXJhbXN9YCk7XHJcbiAgICAgIGNvbnN0IGRhdGE6IHsgZGF0YTogT3JkZXJMaXN0UmVzcG9uc2UgfSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5kYXRhPy50b1N0cmluZygpIHx8ICdFcnJvciBhbCBjYXJnYXIgw7NyZGVuZXMnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2V0U3RhdGUocHJldiA9PiAoe1xyXG4gICAgICAgIC4uLnByZXYsXHJcbiAgICAgICAgb3JkZXJzOiBkYXRhLmRhdGEub3JkZXJzLFxyXG4gICAgICAgIHBhZ2luYXRpb246IGRhdGEuZGF0YS5wYWdpbmF0aW9uLFxyXG4gICAgICAgIGZpbHRlcnM6IGRhdGEuZGF0YS5maWx0ZXJzLFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICB9KSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XHJcbiAgICAgICAgLi4ucHJldixcclxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRXJyb3IgZGVzY29ub2NpZG8nLFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICB9KSk7XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBjcmVhdGVPcmRlciA9IHVzZUNhbGxiYWNrKGFzeW5jIChvcmRlckRhdGE6IGFueSk6IFByb21pc2U8T3JkZXJFbnRlcnByaXNlPiA9PiB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2FkbWluL29yZGVycycsIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShvcmRlckRhdGEpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yIHx8ICdFcnJvciBhbCBjcmVhciBvcmRlbicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlZnJlc2NhciBsaXN0YSBkZXNwdcOpcyBkZSBjcmVhclxyXG4gICAgYXdhaXQgZmV0Y2hPcmRlcnMoc3RhdGUuZmlsdGVycyk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGEuZGF0YTtcclxuICB9LCBbc3RhdGUuZmlsdGVycywgZmV0Y2hPcmRlcnNdKTtcclxuXHJcbiAgY29uc3QgdXBkYXRlT3JkZXIgPSB1c2VDYWxsYmFjayhhc3luYyAob3JkZXJJZDogc3RyaW5nLCBvcmRlckRhdGE6IGFueSk6IFByb21pc2U8T3JkZXJFbnRlcnByaXNlPiA9PiB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2FkbWluL29yZGVycy8ke29yZGVySWR9YCwge1xyXG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShvcmRlckRhdGEpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yIHx8ICdFcnJvciBhbCBhY3R1YWxpemFyIG9yZGVuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWN0dWFsaXphciBvcmRlbiBlbiBlbCBlc3RhZG8gbG9jYWxcclxuICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgLi4ucHJldixcclxuICAgICAgb3JkZXJzOiBwcmV2Lm9yZGVycy5tYXAob3JkZXIgPT4gXHJcbiAgICAgICAgb3JkZXIuaWQgPT09IG9yZGVySWQgPyB7IC4uLm9yZGVyLCAuLi5kYXRhLmRhdGEgfSA6IG9yZGVyXHJcbiAgICAgICksXHJcbiAgICB9KSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGEuZGF0YTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGNoYW5nZU9yZGVyU3RhdHVzID0gdXNlQ2FsbGJhY2soYXN5bmMgKFxyXG4gICAgb3JkZXJJZDogc3RyaW5nLCBcclxuICAgIG5ld1N0YXR1czogc3RyaW5nLCBcclxuICAgIHJlYXNvbjogc3RyaW5nLFxyXG4gICAgYWRkaXRpb25hbERhdGE/OiBhbnlcclxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvYWRtaW4vb3JkZXJzLyR7b3JkZXJJZH0vc3RhdHVzYCwge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBzdGF0dXM6IG5ld1N0YXR1cyxcclxuICAgICAgICByZWFzb24sXHJcbiAgICAgICAgLi4uYWRkaXRpb25hbERhdGEsXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yIHx8ICdFcnJvciBhbCBjYW1iaWFyIGVzdGFkbycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFjdHVhbGl6YXIgb3JkZW4gZW4gZWwgZXN0YWRvIGxvY2FsXHJcbiAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XHJcbiAgICAgIC4uLnByZXYsXHJcbiAgICAgIG9yZGVyczogcHJldi5vcmRlcnMubWFwKG9yZGVyID0+IFxyXG4gICAgICAgIG9yZGVyLmlkID09PSBvcmRlcklkID8geyAuLi5vcmRlciwgc3RhdHVzOiBuZXdTdGF0dXMgfSA6IG9yZGVyXHJcbiAgICAgICksXHJcbiAgICB9KSk7XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBidWxrVXBkYXRlU3RhdHVzID0gdXNlQ2FsbGJhY2soYXN5bmMgKFxyXG4gICAgYnVsa0RhdGE6IEJ1bGtTdGF0dXNVcGRhdGVcclxuICApOiBQcm9taXNlPEJ1bGtTdGF0dXNVcGRhdGVSZXN1bHQ+ID0+IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvYWRtaW4vb3JkZXJzL2J1bGs/b3BlcmF0aW9uPXN0YXR1c191cGRhdGUnLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYnVsa0RhdGEpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yIHx8ICdFcnJvciBlbiBvcGVyYWNpw7NuIG1hc2l2YScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlZnJlc2NhciBsaXN0YSBkZXNwdcOpcyBkZSBvcGVyYWNpw7NuIG1hc2l2YVxyXG4gICAgYXdhaXQgZmV0Y2hPcmRlcnMoc3RhdGUuZmlsdGVycyk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGEuZGF0YTtcclxuICB9LCBbc3RhdGUuZmlsdGVycywgZmV0Y2hPcmRlcnNdKTtcclxuXHJcbiAgY29uc3QgZXhwb3J0T3JkZXJzID0gdXNlQ2FsbGJhY2soYXN5bmMgKFxyXG4gICAgZm9ybWF0OiAnY3N2JyB8ICdqc29uJyA9ICdjc3YnLFxyXG4gICAgZmlsdGVycz86IE9yZGVyRmlsdGVyc1xyXG4gICk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2FkbWluL29yZGVycy9idWxrP29wZXJhdGlvbj1leHBvcnQnLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGZvcm1hdCxcclxuICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzIHx8IHN0YXRlLmZpbHRlcnMsXHJcbiAgICAgICAgaW5jbHVkZV9pdGVtczogdHJ1ZSxcclxuICAgICAgfSksXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IgfHwgJ0Vycm9yIGFsIGV4cG9ydGFyIMOzcmRlbmVzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRhdGEuZGF0YTtcclxuICB9LCBbc3RhdGUuZmlsdGVyc10pO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIEZVTkNJT05FUyBERSBGSUxUUkFETyBZIFBBR0lOQUNJw5NOXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgY29uc3QgdXBkYXRlRmlsdGVycyA9IHVzZUNhbGxiYWNrKChuZXdGaWx0ZXJzOiBQYXJ0aWFsPE9yZGVyRmlsdGVycz4pID0+IHtcclxuICAgIGNvbnN0IHVwZGF0ZWRGaWx0ZXJzID0ge1xyXG4gICAgICAuLi5zdGF0ZS5maWx0ZXJzLFxyXG4gICAgICAuLi5uZXdGaWx0ZXJzLFxyXG4gICAgICBwYWdlOiBuZXdGaWx0ZXJzLnBhZ2UgfHwgMSwgLy8gUmVzZXQgcGFnZSB1bmxlc3MgZXhwbGljaXRseSBzZXRcclxuICAgIH07XHJcblxyXG4gICAgc2V0U3RhdGUocHJldiA9PiAoe1xyXG4gICAgICAuLi5wcmV2LFxyXG4gICAgICBmaWx0ZXJzOiB1cGRhdGVkRmlsdGVycyxcclxuICAgIH0pKTtcclxuXHJcbiAgICBmZXRjaE9yZGVycyh1cGRhdGVkRmlsdGVycyk7XHJcbiAgfSwgW3N0YXRlLmZpbHRlcnMsIGZldGNoT3JkZXJzXSk7XHJcblxyXG4gIGNvbnN0IHNldFBhZ2UgPSB1c2VDYWxsYmFjaygocGFnZTogbnVtYmVyKSA9PiB7XHJcbiAgICB1cGRhdGVGaWx0ZXJzKHsgcGFnZSB9KTtcclxuICB9LCBbdXBkYXRlRmlsdGVyc10pO1xyXG5cclxuICBjb25zdCBzZXRTZWFyY2ggPSB1c2VDYWxsYmFjaygoc2VhcmNoOiBzdHJpbmcpID0+IHtcclxuICAgIHVwZGF0ZUZpbHRlcnMoeyBzZWFyY2gsIHBhZ2U6IDEgfSk7XHJcbiAgfSwgW3VwZGF0ZUZpbHRlcnNdKTtcclxuXHJcbiAgY29uc3Qgc2V0U3RhdHVzID0gdXNlQ2FsbGJhY2soKHN0YXR1czogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XHJcbiAgICB1cGRhdGVGaWx0ZXJzKHsgc3RhdHVzLCBwYWdlOiAxIH0pO1xyXG4gIH0sIFt1cGRhdGVGaWx0ZXJzXSk7XHJcblxyXG4gIGNvbnN0IHNldFBheW1lbnRTdGF0dXMgPSB1c2VDYWxsYmFjaygocGF5bWVudF9zdGF0dXM6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgdXBkYXRlRmlsdGVycyh7IHBheW1lbnRfc3RhdHVzLCBwYWdlOiAxIH0pO1xyXG4gIH0sIFt1cGRhdGVGaWx0ZXJzXSk7XHJcblxyXG4gIGNvbnN0IHNldFNvcnRpbmcgPSB1c2VDYWxsYmFjaygoc29ydF9ieTogc3RyaW5nLCBzb3J0X29yZGVyOiAnYXNjJyB8ICdkZXNjJykgPT4ge1xyXG4gICAgdXBkYXRlRmlsdGVycyh7IHNvcnRfYnksIHNvcnRfb3JkZXIgfSk7XHJcbiAgfSwgW3VwZGF0ZUZpbHRlcnNdKTtcclxuXHJcbiAgY29uc3Qgc2V0RGF0ZVJhbmdlID0gdXNlQ2FsbGJhY2soKGRhdGVfZnJvbT86IHN0cmluZywgZGF0ZV90bz86IHN0cmluZykgPT4ge1xyXG4gICAgdXBkYXRlRmlsdGVycyh7IGRhdGVfZnJvbSwgZGF0ZV90bywgcGFnZTogMSB9KTtcclxuICB9LCBbdXBkYXRlRmlsdGVyc10pO1xyXG5cclxuICBjb25zdCBjbGVhckZpbHRlcnMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0RmlsdGVyczogT3JkZXJGaWx0ZXJzID0ge1xyXG4gICAgICBwYWdlOiAxLFxyXG4gICAgICBsaW1pdDogMjAsXHJcbiAgICAgIHNvcnRfYnk6ICdjcmVhdGVkX2F0JyxcclxuICAgICAgc29ydF9vcmRlcjogJ2Rlc2MnLFxyXG4gICAgfTtcclxuXHJcbiAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XHJcbiAgICAgIC4uLnByZXYsXHJcbiAgICAgIGZpbHRlcnM6IGRlZmF1bHRGaWx0ZXJzLFxyXG4gICAgfSkpO1xyXG5cclxuICAgIGZldGNoT3JkZXJzKGRlZmF1bHRGaWx0ZXJzKTtcclxuICB9LCBbZmV0Y2hPcmRlcnNdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBGVU5DSU9ORVMgREUgVVRJTElEQURcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBjb25zdCByZWZyZXNoID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgZmV0Y2hPcmRlcnMoc3RhdGUuZmlsdGVycyk7XHJcbiAgfSwgW3N0YXRlLmZpbHRlcnMsIGZldGNoT3JkZXJzXSk7XHJcblxyXG4gIGNvbnN0IGdldE9yZGVyQnlJZCA9IHVzZUNhbGxiYWNrKChvcmRlcklkOiBzdHJpbmcpOiBPcmRlckVudGVycHJpc2UgfCB1bmRlZmluZWQgPT4ge1xyXG4gICAgcmV0dXJuIHN0YXRlLm9yZGVycy5maW5kKG9yZGVyID0+IG9yZGVyLmlkID09PSBvcmRlcklkKTtcclxuICB9LCBbc3RhdGUub3JkZXJzXSk7XHJcblxyXG4gIGNvbnN0IGdldE9yZGVyc0J5U3RhdHVzID0gdXNlQ2FsbGJhY2soKHN0YXR1czogc3RyaW5nKTogT3JkZXJFbnRlcnByaXNlW10gPT4ge1xyXG4gICAgcmV0dXJuIHN0YXRlLm9yZGVycy5maWx0ZXIob3JkZXIgPT4gb3JkZXIuc3RhdHVzID09PSBzdGF0dXMpO1xyXG4gIH0sIFtzdGF0ZS5vcmRlcnNdKTtcclxuXHJcbiAgY29uc3QgZ2V0VG90YWxSZXZlbnVlID0gdXNlQ2FsbGJhY2soKCk6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gc3RhdGUub3JkZXJzLnJlZHVjZSgodG90YWwsIG9yZGVyKSA9PiB7XHJcbiAgICAgIHJldHVybiBvcmRlci5zdGF0dXMgIT09ICdjYW5jZWxsZWQnID8gdG90YWwgKyBvcmRlci50b3RhbF9hbW91bnQgOiB0b3RhbDtcclxuICAgIH0sIDApO1xyXG4gIH0sIFtzdGF0ZS5vcmRlcnNdKTtcclxuXHJcbiAgY29uc3QgZ2V0QXZlcmFnZU9yZGVyVmFsdWUgPSB1c2VDYWxsYmFjaygoKTogbnVtYmVyID0+IHtcclxuICAgIGNvbnN0IHZhbGlkT3JkZXJzID0gc3RhdGUub3JkZXJzLmZpbHRlcihvcmRlciA9PiBvcmRlci5zdGF0dXMgIT09ICdjYW5jZWxsZWQnKTtcclxuICAgIGlmICh2YWxpZE9yZGVycy5sZW5ndGggPT09IDApIHJldHVybiAwO1xyXG4gICAgXHJcbiAgICBjb25zdCB0b3RhbCA9IHZhbGlkT3JkZXJzLnJlZHVjZSgoc3VtLCBvcmRlcikgPT4gc3VtICsgb3JkZXIudG90YWxfYW1vdW50LCAwKTtcclxuICAgIHJldHVybiB0b3RhbCAvIHZhbGlkT3JkZXJzLmxlbmd0aDtcclxuICB9LCBbc3RhdGUub3JkZXJzXSk7XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gRUZFQ1RPU1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBmZXRjaE9yZGVycyhzdGF0ZS5maWx0ZXJzKTtcclxuICB9LCBbXSk7IC8vIFNvbG8gZWplY3V0YXIgdW5hIHZleiBhbCBtb250YXJcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBSRVRVUk4gREVMIEhPT0tcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLy8gRXN0YWRvXHJcbiAgICBvcmRlcnM6IHN0YXRlLm9yZGVycyxcclxuICAgIGxvYWRpbmc6IHN0YXRlLmxvYWRpbmcsXHJcbiAgICBlcnJvcjogc3RhdGUuZXJyb3IsXHJcbiAgICBmaWx0ZXJzOiBzdGF0ZS5maWx0ZXJzLFxyXG4gICAgcGFnaW5hdGlvbjogc3RhdGUucGFnaW5hdGlvbixcclxuXHJcbiAgICAvLyBPcGVyYWNpb25lcyBDUlVEXHJcbiAgICBjcmVhdGVPcmRlcixcclxuICAgIHVwZGF0ZU9yZGVyLFxyXG4gICAgY2hhbmdlT3JkZXJTdGF0dXMsXHJcbiAgICBidWxrVXBkYXRlU3RhdHVzLFxyXG4gICAgZXhwb3J0T3JkZXJzLFxyXG5cclxuICAgIC8vIEZpbHRyYWRvIHkgcGFnaW5hY2nDs25cclxuICAgIHVwZGF0ZUZpbHRlcnMsXHJcbiAgICBzZXRQYWdlLFxyXG4gICAgc2V0U2VhcmNoLFxyXG4gICAgc2V0U3RhdHVzLFxyXG4gICAgc2V0UGF5bWVudFN0YXR1cyxcclxuICAgIHNldFNvcnRpbmcsXHJcbiAgICBzZXREYXRlUmFuZ2UsXHJcbiAgICBjbGVhckZpbHRlcnMsXHJcblxyXG4gICAgLy8gVXRpbGlkYWRlc1xyXG4gICAgcmVmcmVzaCxcclxuICAgIGdldE9yZGVyQnlJZCxcclxuICAgIGdldE9yZGVyc0J5U3RhdHVzLFxyXG4gICAgZ2V0VG90YWxSZXZlbnVlLFxyXG4gICAgZ2V0QXZlcmFnZU9yZGVyVmFsdWUsXHJcblxyXG4gICAgLy8gRnVuY2lvbmVzIGRlIGNvbnZlbmllbmNpYVxyXG4gICAgaGFzTmV4dFBhZ2U6IHN0YXRlLnBhZ2luYXRpb24uaGFzTmV4dFBhZ2UsXHJcbiAgICBoYXNQcmV2aW91c1BhZ2U6IHN0YXRlLnBhZ2luYXRpb24uaGFzUHJldmlvdXNQYWdlLFxyXG4gICAgdG90YWxPcmRlcnM6IHN0YXRlLnBhZ2luYXRpb24udG90YWwsXHJcbiAgICBjdXJyZW50UGFnZTogc3RhdGUucGFnaW5hdGlvbi5wYWdlLFxyXG4gICAgdG90YWxQYWdlczogc3RhdGUucGFnaW5hdGlvbi50b3RhbFBhZ2VzLFxyXG4gIH07XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEhPT0sgUEFSQSBPUkRFTiBJTkRJVklEVUFMXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlT3JkZXJEZXRhaWwob3JkZXJJZDogc3RyaW5nKSB7XHJcbiAgY29uc3QgW29yZGVyLCBzZXRPcmRlcl0gPSB1c2VTdGF0ZTxPcmRlckVudGVycHJpc2UgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG5cclxuICBjb25zdCBmZXRjaE9yZGVyID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKCFvcmRlcklkKSByZXR1cm47XHJcblxyXG4gICAgc2V0TG9hZGluZyh0cnVlKTtcclxuICAgIHNldEVycm9yKG51bGwpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvYWRtaW4vb3JkZXJzLyR7b3JkZXJJZH1gKTtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5lcnJvciB8fCAnRXJyb3IgYWwgY2FyZ2FyIG9yZGVuJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNldE9yZGVyKGRhdGEuZGF0YS5vcmRlcik7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBzZXRFcnJvcihlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdFcnJvciBkZXNjb25vY2lkbycpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICB9XHJcbiAgfSwgW29yZGVySWRdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGZldGNoT3JkZXIoKTtcclxuICB9LCBbZmV0Y2hPcmRlcl0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgb3JkZXIsXHJcbiAgICBsb2FkaW5nLFxyXG4gICAgZXJyb3IsXHJcbiAgICByZWZyZXNoOiBmZXRjaE9yZGVyLFxyXG4gIH07XHJcbn1cclxuIl0sIm5hbWVzIjpbInVzZU9yZGVyRGV0YWlsIiwidXNlT3JkZXJzRW50ZXJwcmlzZSIsImluaXRpYWxGaWx0ZXJzIiwic3RhdGUiLCJzZXRTdGF0ZSIsInVzZVN0YXRlIiwib3JkZXJzIiwibG9hZGluZyIsImVycm9yIiwiZmlsdGVycyIsInBhZ2UiLCJsaW1pdCIsInNvcnRfYnkiLCJzb3J0X29yZGVyIiwicGFnaW5hdGlvbiIsInRvdGFsIiwidG90YWxQYWdlcyIsImhhc05leHRQYWdlIiwiaGFzUHJldmlvdXNQYWdlIiwiZmV0Y2hPcmRlcnMiLCJ1c2VDYWxsYmFjayIsInByZXYiLCJxdWVyeVBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJhcHBlbmQiLCJ0b1N0cmluZyIsInJlc3BvbnNlIiwiZmV0Y2giLCJkYXRhIiwianNvbiIsIm9rIiwiRXJyb3IiLCJtZXNzYWdlIiwiY3JlYXRlT3JkZXIiLCJvcmRlckRhdGEiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVPcmRlciIsIm9yZGVySWQiLCJtYXAiLCJvcmRlciIsImlkIiwiY2hhbmdlT3JkZXJTdGF0dXMiLCJuZXdTdGF0dXMiLCJyZWFzb24iLCJhZGRpdGlvbmFsRGF0YSIsInN0YXR1cyIsImJ1bGtVcGRhdGVTdGF0dXMiLCJidWxrRGF0YSIsImV4cG9ydE9yZGVycyIsImZvcm1hdCIsImluY2x1ZGVfaXRlbXMiLCJ1cGRhdGVGaWx0ZXJzIiwibmV3RmlsdGVycyIsInVwZGF0ZWRGaWx0ZXJzIiwic2V0UGFnZSIsInNldFNlYXJjaCIsInNlYXJjaCIsInNldFN0YXR1cyIsInNldFBheW1lbnRTdGF0dXMiLCJwYXltZW50X3N0YXR1cyIsInNldFNvcnRpbmciLCJzZXREYXRlUmFuZ2UiLCJkYXRlX2Zyb20iLCJkYXRlX3RvIiwiY2xlYXJGaWx0ZXJzIiwiZGVmYXVsdEZpbHRlcnMiLCJyZWZyZXNoIiwiZ2V0T3JkZXJCeUlkIiwiZmluZCIsImdldE9yZGVyc0J5U3RhdHVzIiwiZmlsdGVyIiwiZ2V0VG90YWxSZXZlbnVlIiwicmVkdWNlIiwidG90YWxfYW1vdW50IiwiZ2V0QXZlcmFnZU9yZGVyVmFsdWUiLCJ2YWxpZE9yZGVycyIsImxlbmd0aCIsInN1bSIsInVzZUVmZmVjdCIsInRvdGFsT3JkZXJzIiwiY3VycmVudFBhZ2UiLCJzZXRPcmRlciIsInNldExvYWRpbmciLCJzZXRFcnJvciIsImZldGNoT3JkZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0Qyw4Q0FBOEM7QUFDOUMsc0NBQXNDO0FBRXRDOzs7Ozs7Ozs7Ozs7UUE4VmdCQTtlQUFBQTs7UUE5VUFDO2VBQUFBOzs7dUJBZGlDO0FBYzFDLFNBQVNBLG9CQUFvQkMsY0FBNkI7SUFDL0QsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUdDLElBQUFBLGVBQVEsRUFBaUI7UUFDakRDLFFBQVEsRUFBRTtRQUNWQyxTQUFTO1FBQ1RDLE9BQU87UUFDUEMsU0FBUztZQUNQQyxNQUFNO1lBQ05DLE9BQU87WUFDUEMsU0FBUztZQUNUQyxZQUFZO1lBQ1osR0FBR1gsY0FBYztRQUNuQjtRQUNBWSxZQUFZO1lBQ1ZKLE1BQU07WUFDTkMsT0FBTztZQUNQSSxPQUFPO1lBQ1BDLFlBQVk7WUFDWkMsYUFBYTtZQUNiQyxpQkFBaUI7UUFDbkI7SUFDRjtJQUVBLHNDQUFzQztJQUN0QyxtQkFBbUI7SUFDbkIsc0NBQXNDO0lBRXRDLE1BQU1DLGNBQWNDLElBQUFBLGtCQUFXLEVBQUMsT0FBT1g7UUFDckNMLFNBQVNpQixDQUFBQSxPQUFTLENBQUE7Z0JBQUUsR0FBR0EsSUFBSTtnQkFBRWQsU0FBUztnQkFBTUMsT0FBTztZQUFLLENBQUE7UUFFeEQsSUFBSTtZQUNGLE1BQU1jLGNBQWMsSUFBSUM7WUFDeEJDLE9BQU9DLE9BQU8sQ0FBQ2hCLFNBQVNpQixPQUFPLENBQUMsQ0FBQyxDQUFDQyxLQUFLQyxNQUFNO2dCQUMzQyxJQUFJQSxVQUFVQyxhQUFhRCxVQUFVLFFBQVFBLFVBQVUsSUFBSTtvQkFDekROLFlBQVlRLE1BQU0sQ0FBQ0gsS0FBS0MsTUFBTUcsUUFBUTtnQkFDeEM7WUFDRjtZQUVBLE1BQU1DLFdBQVcsTUFB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