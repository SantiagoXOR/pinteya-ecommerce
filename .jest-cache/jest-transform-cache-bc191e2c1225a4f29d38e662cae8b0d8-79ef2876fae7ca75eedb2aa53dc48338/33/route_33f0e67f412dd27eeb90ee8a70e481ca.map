{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\mercadopago\\metrics\\route.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - MERCADOPAGO METRICS API\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { metricsCollector } from '@/lib/metrics';\nimport { isRedisAvailable } from '@/lib/redis';\nimport { logger, LogCategory } from '@/lib/logger';\n\n// Tipos para la respuesta de métricas\ninterface MetricsResponse {\n  success: boolean;\n  data?: {\n    realTimeMetrics: {\n      totalRequests: number;\n      successRate: number;\n      errorRate: number;\n      averageResponseTime: number;\n      rateLimitHits: number;\n      retryAttempts: number;\n    };\n    endpointMetrics: {\n      createPreference: EndpointMetric;\n      webhook: EndpointMetric;\n      paymentQuery: EndpointMetric;\n    };\n    systemHealth: {\n      redisStatus: 'connected' | 'disconnected';\n      lastUpdate: string;\n      uptime: number;\n    };\n    alerts: Alert[];\n  };\n  error?: string;\n}\n\ninterface EndpointMetric {\n  requests: number;\n  successRate: number;\n  averageResponseTime: number;\n  errorCount: number;\n  lastError?: string;\n}\n\ninterface Alert {\n  type: 'warning' | 'error' | 'info';\n  message: string;\n  timestamp: string;\n  endpoint?: string;\n}\n\n/**\n * GET /api/admin/mercadopago/metrics\n * Obtiene métricas en tiempo real de MercadoPago\n */\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Verificar autenticación\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { success: false, error: 'No autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // TODO: Verificar rol de admin\n    // const isAdmin = await checkUserRole(userId);\n    // if (!isAdmin) {\n    //   return NextResponse.json(\n    //     { success: false, error: 'Acceso denegado' },\n    //     { status: 403 }\n    //   );\n    // }\n\n    logger.info(LogCategory.API, 'Fetching MercadoPago metrics', { userId });\n\n    // Obtener métricas del sistema\n    const metrics = await metricsCollector.getMercadoPagoMetrics();\n    const redisStatus = await isRedisAvailable();\n\n    // Calcular métricas en tiempo real\n    const totalRequests = metrics.payment_creation.requests.total + \n                         metrics.payment_queries.requests.total + \n                         metrics.webhook_processing.requests.total;\n\n    const totalSuccess = metrics.payment_creation.requests.success + \n                        metrics.payment_queries.requests.success + \n                        metrics.webhook_processing.requests.success;\n\n    const totalErrors = metrics.payment_creation.requests.error + \n                       metrics.payment_queries.requests.error + \n                       metrics.webhook_processing.requests.error;\n\n    const successRate = totalRequests > 0 ? (totalSuccess / totalRequests) * 100 : 100;\n    const errorRate = totalRequests > 0 ? (totalErrors / totalRequests) * 100 : 0;\n\n    // Calcular tiempo de respuesta promedio ponderado\n    const avgResponseTime = (\n      metrics.payment_creation.response_times.avg * metrics.payment_creation.requests.total +\n      metrics.payment_queries.response_times.avg * metrics.payment_queries.requests.total +\n      metrics.webhook_processing.response_times.avg * metrics.webhook_processing.requests.total\n    ) / (totalRequests || 1);\n\n    // Generar alertas basadas en umbrales\n    const alerts: Alert[] = [];\n\n    if (errorRate > 5) {\n      alerts.push({\n        type: 'error',\n        message: `Tasa de error alta: ${errorRate.toFixed(1)}%`,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    if (avgResponseTime > 3000) {\n      alerts.push({\n        type: 'warning',\n        message: `Tiempo de respuesta alto: ${avgResponseTime.toFixed(0)}ms`,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    if (!redisStatus) {\n      alerts.push({\n        type: 'warning',\n        message: 'Redis desconectado - usando fallback en memoria',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // Preparar respuesta\n    const response: MetricsResponse = {\n      success: true,\n      data: {\n        realTimeMetrics: {\n          totalRequests,\n          successRate: Math.round(successRate * 100) / 100,\n          errorRate: Math.round(errorRate * 100) / 100,\n          averageResponseTime: Math.round(avgResponseTime),\n          rateLimitHits: metrics.payment_creation.requests.rate_limited + \n                        metrics.payment_queries.requests.rate_limited + \n                        metrics.webhook_processing.requests.rate_limited,\n          retryAttempts: metrics.payment_creation.retry_stats.total_retries + \n                        metrics.payment_queries.retry_stats.total_retries + \n                        metrics.webhook_processing.retry_stats.total_retries,\n        },\n        endpointMetrics: {\n          createPreference: {\n            requests: metrics.payment_creation.requests.total,\n            successRate: metrics.payment_creation.requests.total > 0 ? \n              (metrics.payment_creation.requests.success / metrics.payment_creation.requests.total) * 100 : 100,\n            averageResponseTime: Math.round(metrics.payment_creation.response_times.avg),\n            errorCount: metrics.payment_creation.requests.error,\n          },\n          webhook: {\n            requests: metrics.webhook_processing.requests.total,\n            successRate: metrics.webhook_processing.requests.total > 0 ? \n              (metrics.webhook_processing.requests.success / metrics.webhook_processing.requests.total) * 100 : 100,\n            averageResponseTime: Math.round(metrics.webhook_processing.response_times.avg),\n            errorCount: metrics.webhook_processing.requests.error,\n          },\n          paymentQuery: {\n            requests: metrics.payment_queries.requests.total,\n            successRate: metrics.payment_queries.requests.total > 0 ? \n              (metrics.payment_queries.requests.success / metrics.payment_queries.requests.total) * 100 : 100,\n            averageResponseTime: Math.round(metrics.payment_queries.response_times.avg),\n            errorCount: metrics.payment_queries.requests.error,\n          },\n        },\n        systemHealth: {\n          redisStatus: redisStatus ? 'connected' : 'disconnected',\n          lastUpdate: new Date().toISOString(),\n          uptime: process.uptime(),\n        },\n        alerts,\n      },\n    };\n\n    logger.info(LogCategory.API, 'MercadoPago metrics retrieved successfully');\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    logger.error(LogCategory.API, 'Error fetching MercadoPago metrics', error as Error);\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Error interno del servidor',\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/admin/mercadopago/metrics\n * Reinicia las métricas de MercadoPago\n */\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Verificar autenticación\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { success: false, error: 'No autorizado' },\n        { status: 401 }\n      );\n    }\n\n    logger.info(LogCategory.API, 'Resetting MercadoPago metrics', { userId });\n\n    // TODO: Implementar reset de métricas\n    // await metricsCollector.resetMetrics();\n\n    return NextResponse.json({\n      success: true,\n      message: 'Métricas reiniciadas correctamente',\n    });\n\n  } catch (error) {\n    logger.error(LogCategory.API, 'Error resetting MercadoPago metrics', error as Error);\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Error interno del servidor',\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":["GET","POST","request","userId","auth","NextResponse","json","success","error","status","logger","info","LogCategory","API","metrics","metricsCollector","getMercadoPagoMetrics","redisStatus","isRedisAvailable","totalRequests","payment_creation","requests","total","payment_queries","webhook_processing","totalSuccess","totalErrors","successRate","errorRate","avgResponseTime","response_times","avg","alerts","push","type","message","toFixed","timestamp","Date","toISOString","response","data","realTimeMetrics","Math","round","averageResponseTime","rateLimitHits","rate_limited","retryAttempts","retry_stats","total_retries","endpointMetrics","createPreference","errorCount","webhook","paymentQuery","systemHealth","lastUpdate","uptime","process"],"mappings":"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"}