{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\config\\route.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - MONITORING CONFIGURATION API\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\nimport { enterpriseMetrics } from '@/lib/monitoring/enterprise-metrics';\nimport { enterpriseAlertSystem } from '@/lib/monitoring/alert-system';\nimport { \n  mercadoPagoCriticalBreaker, \n  mercadoPagoStandardBreaker, \n  webhookProcessingBreaker \n} from '@/lib/mercadopago/circuit-breaker';\nimport { getSupabaseClient } from '@/lib/supabase';\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\n\ninterface MonitoringConfig {\n  metrics: {\n    enabled: boolean;\n    flushInterval: number;\n    retentionDays: number;\n    aggregationPeriods: string[];\n  };\n  alerts: {\n    enabled: boolean;\n    escalationEnabled: boolean;\n    defaultCooldown: number;\n    maxAlertsPerHour: number;\n  };\n  circuitBreakers: {\n    enabled: boolean;\n    configs: Record<string, any>;\n  };\n  dashboard: {\n    refreshInterval: number;\n    maxDataPoints: number;\n    cacheTimeout: number;\n  };\n  compliance: {\n    auditEnabled: boolean;\n    retentionPolicies: Record<string, number>;\n    encryptionEnabled: boolean;\n  };\n}\n\n/**\n * GET /api/admin/monitoring/config\n * Obtiene la configuración actual del sistema de monitoreo\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticación de admin\n    const authResult = await getAuthenticatedAdmin(request);\n    \n    if (!authResult.isAdmin || !authResult.userId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Acceso no autorizado'\n      }, { status: 401 });\n    }\n\n    // Obtener configuración actual\n    const config: MonitoringConfig = {\n      metrics: {\n        enabled: true,\n        flushInterval: 30000, // 30 segundos\n        retentionDays: 30,\n        aggregationPeriods: ['1m', '5m', '1h', '1d', '7d']\n      },\n      alerts: {\n        enabled: true,\n        escalationEnabled: true,\n        defaultCooldown: 5, // minutos\n        maxAlertsPerHour: 100\n      },\n      circuitBreakers: {\n        enabled: true,\n        configs: {\n          mercadopago_critical: mercadoPagoCriticalBreaker.getMetrics(),\n          mercadopago_standard: mercadoPagoStandardBreaker.getMetrics(),\n          webhook_processing: webhookProcessingBreaker.getMetrics()\n        }\n      },\n      dashboard: {\n        refreshInterval: 5000, // 5 segundos\n        maxDataPoints: 100,\n        cacheTimeout: 30 // segundos\n      },\n      compliance: {\n        auditEnabled: true,\n        retentionPolicies: {\n          authentication: 365,\n          payment_processing: 2555, // 7 años\n          security_violation: 2555,\n          data_access: 1095 // 3 años\n        },\n        encryptionEnabled: true\n      }\n    };\n\n    // Obtener estadísticas del sistema\n    const stats = await getSystemStats();\n\n    logger.info(LogLevel.INFO, 'Monitoring configuration retrieved', {\n      userId: authResult.userId,\n      configSections: Object.keys(config).length\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        config,\n        stats,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Failed to get monitoring configuration', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error interno del servidor'\n    }, { status: 500 });\n  }\n}\n\n/**\n * PUT /api/admin/monitoring/config\n * Actualiza la configuración del sistema de monitoreo\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verificar autenticación de admin\n    const authResult = await getAuthenticatedAdmin(request);\n    \n    if (!authResult.isAdmin || !authResult.userId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Acceso no autorizado'\n      }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { section, config } = body;\n\n    if (!section || !config) {\n      return NextResponse.json({\n        success: false,\n        error: 'Faltan parámetros: section y config'\n      }, { status: 400 });\n    }\n\n    // Validar y aplicar configuración según la sección\n    let updateResult: any = {};\n\n    switch (section) {\n      case 'metrics':\n        updateResult = await updateMetricsConfig(config, authResult.userId);\n        break;\n      case 'alerts':\n        updateResult = await updateAlertsConfig(config, authResult.userId);\n        break;\n      case 'circuitBreakers':\n        updateResult = await updateCircuitBreakersConfig(config, authResult.userId);\n        break;\n      case 'dashboard':\n        updateResult = await updateDashboardConfig(config, authResult.userId);\n        break;\n      case 'compliance':\n        updateResult = await updateComplianceConfig(config, authResult.userId);\n        break;\n      default:\n        return NextResponse.json({\n          success: false,\n          error: 'Sección de configuración no válida'\n        }, { status: 400 });\n    }\n\n    logger.info(LogLevel.INFO, `Monitoring configuration updated: ${section}`, {\n      userId: authResult.userId,\n      section,\n      changes: Object.keys(config).length\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        section,\n        updated: updateResult,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    logger.error(LogLevel.ERROR, 'Failed to update monitoring configuration', {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, LogCategory.SYSTEM);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error interno del servidor'\n    }, { status: 500 });\n  }\n}\n\n/**\n * Obtiene estadísticas del sistema\n */\nasync function getSystemStats() {\n  const supabase = getSupabaseClient(true);\n  \n  if (!supabase) {\n    return {\n      metrics: { total: 0, last24h: 0 },\n      alerts: { active: 0, total: 0 },\n      auditEvents: { total: 0, last24h: 0 }\n    };\n  }\n\n  const last24h = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n\n  // Estadísticas de métricas\n  const { data: metricsStats } = await supabase\n    .from('enterprise_metrics')\n    .select('id, timestamp')\n    .gte('timestamp', last24h);\n\n  const { count: totalMetrics } = await supabase\n    .from('enterprise_metrics')\n    .select('*', { count: 'exact', head: true });\n\n  // Estadísticas de alertas\n  const { data: alertsStats } = await supabase\n    .from('enterprise_alerts')\n    .select('id, status, triggered_at')\n    .eq('status', 'active');\n\n  const { count: totalAlerts } = await supabase\n    .from('enterprise_alerts')\n    .select('*', { count: 'exact', head: true });\n\n  // Estadísticas de auditoría\n  const { data: auditStats } = await supabase\n    .from('audit_events')\n    .select('id, timestamp')\n    .gte('timestamp', last24h);\n\n  const { count: totalAuditEvents } = await supabase\n    .from('audit_events')\n    .select('*', { count: 'exact', head: true });\n\n  return {\n    metrics: {\n      total: totalMetrics || 0,\n      last24h: metricsStats?.length || 0\n    },\n    alerts: {\n      active: alertsStats?.length || 0,\n      total: totalAlerts || 0\n    },\n    auditEvents: {\n      total: totalAuditEvents || 0,\n      last24h: auditStats?.length || 0\n    }\n  };\n}\n\n/**\n * Actualiza configuración de métricas\n */\nasync function updateMetricsConfig(config: any, userId: string) {\n  // TODO: Implementar actualización de configuración de métricas\n  // Por ahora solo validamos y retornamos confirmación\n  \n  const validFields = ['enabled', 'flushInterval', 'retentionDays', 'aggregationPeriods'];\n  const updates: Record<string, any> = {};\n\n  for (const field of validFields) {\n    if (config[field] !== undefined) {\n      updates[field] = config[field];\n    }\n  }\n\n  return {\n    updated: updates,\n    message: 'Metrics configuration updated successfully'\n  };\n}\n\n/**\n * Actualiza configuración de alertas\n */\nasync function updateAlertsConfig(config: any, userId: string) {\n  const validFields = ['enabled', 'escalationEnabled', 'defaultCooldown', 'maxAlertsPerHour'];\n  const updates: Record<string, any> = {};\n\n  for (const field of validFields) {\n    if (config[field] !== undefined) {\n      updates[field] = config[field];\n    }\n  }\n\n  return {\n    updated: updates,\n    message: 'Alerts configuration updated successfully'\n  };\n}\n\n/**\n * Actualiza configuración de circuit breakers\n */\nasync function updateCircuitBreakersConfig(config: any, userId: string) {\n  const updates: Record<string, any> = {};\n\n  if (config.enabled !== undefined) {\n    updates.enabled = config.enabled;\n  }\n\n  // Reset circuit breakers si se solicita\n  if (config.reset) {\n    if (config.reset.includes('mercadopago_critical')) {\n      mercadoPagoCriticalBreaker.reset();\n      updates.mercadopago_critical_reset = true;\n    }\n    if (config.reset.includes('mercadopago_standard')) {\n      mercadoPagoStandardBreaker.reset();\n      updates.mercadopago_standard_reset = true;\n    }\n    if (config.reset.includes('webhook_processing')) {\n      webhookProcessingBreaker.reset();\n      updates.webhook_processing_reset = true;\n    }\n  }\n\n  return {\n    updated: updates,\n    message: 'Circuit breakers configuration updated successfully'\n  };\n}\n\n/**\n * Actualiza configuración del dashboard\n */\nasync function updateDashboardConfig(config: any, userId: string) {\n  const validFields = ['refreshInterval', 'maxDataPoints', 'cacheTimeout'];\n  const updates: Record<string, any> = {};\n\n  for (const field of validFields) {\n    if (config[field] !== undefined) {\n      updates[field] = config[field];\n    }\n  }\n\n  return {\n    updated: updates,\n    message: 'Dashboard configuration updated successfully'\n  };\n}\n\n/**\n * Actualiza configuración de compliance\n */\nasync function updateComplianceConfig(config: any, userId: string) {\n  const validFields = ['auditEnabled', 'retentionPolicies', 'encryptionEnabled'];\n  const updates: Record<string, any> = {};\n\n  for (const field of validFields) {\n    if (config[field] !== undefined) {\n      updates[field] = config[field];\n    }\n  }\n\n  return {\n    updated: updates,\n    message: 'Compliance configuration updated successfully'\n  };\n}\n"],"names":["GET","PUT","request","authResult","getAuthenticatedAdmin","isAdmin","userId","NextResponse","json","success","error","status","config","metrics","enabled","flushInterval","retentionDays","aggregationPeriods","alerts","escalationEnabled","defaultCooldown","maxAlertsPerHour","circuitBreakers","configs","mercadopago_critical","mercadoPagoCriticalBreaker","getMetrics","mercadopago_standard","mercadoPagoStandardBreaker","webhook_processing","webhookProcessingBreaker","dashboard","refreshInterval","maxDataPoints","cacheTimeout","compliance","auditEnabled","retentionPolicies","authentication","payment_processing","security_violation","data_access","encryptionEnabled","stats","getSystemStats","logger","info","LogLevel","INFO","configSections","Object","keys","length","LogCategory","SYSTEM","data","timestamp","Date","toISOString","ERROR","Error","message","body","section","updateResult","updateMetricsConfig","updateAlertsConfig","updateCircuitBreakersConfig","updateDashboardConfig","updateComplianceConfig","changes","updated","supabase","getSupabaseClient","total","last24h","active","auditEvents","now","metricsStats","from","select","gte","count","totalMetrics","head","alertsStats","eq","totalAlerts","auditStats","totalAuditEvents","validFields","updates","field","undefined","reset","includes","mercadopago_critical_reset","mercadopago_standard_reset","webhook_processing_reset"],"mappings":"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"}