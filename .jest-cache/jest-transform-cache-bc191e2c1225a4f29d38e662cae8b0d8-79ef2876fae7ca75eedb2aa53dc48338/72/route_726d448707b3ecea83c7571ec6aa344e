afae4e8abb7de2a9016e4aa258389b2c
// ===================================
// PINTEYA E-COMMERCE - MONITORING CONFIGURATION API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    PUT: function() {
        return PUT;
    }
});
const _server = require("next/server");
const _adminauth = require("../../../../../lib/auth/admin-auth");
const _circuitbreaker = require("../../../../../lib/mercadopago/circuit-breaker");
const _supabase = require("../../../../../lib/supabase");
const _logger = require("../../../../../lib/logger");
async function GET(request) {
    try {
        // Verificar autenticación de admin
        const authResult = await (0, _adminauth.getAuthenticatedAdmin)(request);
        if (!authResult.isAdmin || !authResult.userId) {
            return _server.NextResponse.json({
                success: false,
                error: 'Acceso no autorizado'
            }, {
                status: 401
            });
        }
        // Obtener configuración actual
        const config = {
            metrics: {
                enabled: true,
                flushInterval: 30000,
                retentionDays: 30,
                aggregationPeriods: [
                    '1m',
                    '5m',
                    '1h',
                    '1d',
                    '7d'
                ]
            },
            alerts: {
                enabled: true,
                escalationEnabled: true,
                defaultCooldown: 5,
                maxAlertsPerHour: 100
            },
            circuitBreakers: {
                enabled: true,
                configs: {
                    mercadopago_critical: _circuitbreaker.mercadoPagoCriticalBreaker.getMetrics(),
                    mercadopago_standard: _circuitbreaker.mercadoPagoStandardBreaker.getMetrics(),
                    webhook_processing: _circuitbreaker.webhookProcessingBreaker.getMetrics()
                }
            },
            dashboard: {
                refreshInterval: 5000,
                maxDataPoints: 100,
                cacheTimeout: 30 // segundos
            },
            compliance: {
                auditEnabled: true,
                retentionPolicies: {
                    authentication: 365,
                    payment_processing: 2555,
                    security_violation: 2555,
                    data_access: 1095 // 3 años
                },
                encryptionEnabled: true
            }
        };
        // Obtener estadísticas del sistema
        const stats = await getSystemStats();
        _logger.logger.info(_logger.LogLevel.INFO, 'Monitoring configuration retrieved', {
            userId: authResult.userId,
            configSections: Object.keys(config).length
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: true,
            data: {
                config,
                stats,
                timestamp: new Date().toISOString()
            }
        });
    } catch (error) {
        _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to get monitoring configuration', {
            error: error instanceof Error ? error.message : 'Unknown error'
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
async function PUT(request) {
    try {
        // Verificar autenticación de admin
        const authResult = await (0, _adminauth.getAuthenticatedAdmin)(request);
        if (!authResult.isAdmin || !authResult.userId) {
            return _server.NextResponse.json({
                success: false,
                error: 'Acceso no autorizado'
            }, {
                status: 401
            });
        }
        const body = await request.json();
        const { section, config } = body;
        if (!section || !config) {
            return _server.NextResponse.json({
                success: false,
                error: 'Faltan parámetros: section y config'
            }, {
                status: 400
            });
        }
        // Validar y aplicar configuración según la sección
        let updateResult = {};
        switch(section){
            case 'metrics':
                updateResult = await updateMetricsConfig(config, authResult.userId);
                break;
            case 'alerts':
                updateResult = await updateAlertsConfig(config, authResult.userId);
                break;
            case 'circuitBreakers':
                updateResult = await updateCircuitBreakersConfig(config, authResult.userId);
                break;
            case 'dashboard':
                updateResult = await updateDashboardConfig(config, authResult.userId);
                break;
            case 'compliance':
                updateResult = await updateComplianceConfig(config, authResult.userId);
                break;
            default:
                return _server.NextResponse.json({
                    success: false,
                    error: 'Sección de configuración no válida'
                }, {
                    status: 400
                });
        }
        _logger.logger.info(_logger.LogLevel.INFO, `Monitoring configuration updated: ${section}`, {
            userId: authResult.userId,
            section,
            changes: Object.keys(config).length
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: true,
            data: {
                section,
                updated: updateResult,
                timestamp: new Date().toISOString()
            }
        });
    } catch (error) {
        _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to update monitoring configuration', {
            error: error instanceof Error ? error.message : 'Unknown error'
        }, _logger.LogCategory.SYSTEM);
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
/**
 * Obtiene estadísticas del sistema
 */ async function getSystemStats() {
    const supabase = (0, _supabase.getSupabaseClient)(true);
    if (!supabase) {
        return {
            metrics: {
                total: 0,
                last24h: 0
            },
            alerts: {
                active: 0,
                total: 0
            },
            auditEvents: {
                total: 0,
                last24h: 0
            }
        };
    }
    const last24h = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    // Estadísticas de métricas
    const { data: metricsStats } = await supabase.from('enterprise_metrics').select('id, timestamp').gte('timestamp', last24h);
    const { count: totalMetrics } = await supabase.from('enterprise_metrics').select('*', {
        count: 'exact',
        head: true
    });
    // Estadísticas de alertas
    const { data: alertsStats } = await supabase.from('enterprise_alerts').select('id, status, triggered_at').eq('status', 'active');
    const { count: totalAlerts } = await supabase.from('enterprise_alerts').select('*', {
        count: 'exact',
        head: true
    });
    // Estadísticas de auditoría
    const { data: auditStats } = await supabase.from('audit_events').select('id, timestamp').gte('timestamp', last24h);
    const { count: totalAuditEvents } = await supabase.from('audit_events').select('*', {
        count: 'exact',
        head: true
    });
    return {
        metrics: {
            total: totalMetrics || 0,
            last24h: metricsStats?.length || 0
        },
        alerts: {
            active: alertsStats?.length || 0,
            total: totalAlerts || 0
        },
        auditEvents: {
            total: totalAuditEvents || 0,
            last24h: auditStats?.length || 0
        }
    };
}
/**
 * Actualiza configuración de métricas
 */ async function updateMetricsConfig(config, userId) {
    // TODO: Implementar actualización de configuración de métricas
    // Por ahora solo validamos y retornamos confirmación
    const validFields = [
        'enabled',
        'flushInterval',
        'retentionDays',
        'aggregationPeriods'
    ];
    const updates = {};
    for (const field of validFields){
        if (config[field] !== undefined) {
            updates[field] = config[field];
        }
    }
    return {
        updated: updates,
        message: 'Metrics configuration updated successfully'
    };
}
/**
 * Actualiza configuración de alertas
 */ async function updateAlertsConfig(config, userId) {
    const validFields = [
        'enabled',
        'escalationEnabled',
        'defaultCooldown',
        'maxAlertsPerHour'
    ];
    const updates = {};
    for (const field of validFields){
        if (config[field] !== undefined) {
            updates[field] = config[field];
        }
    }
    return {
        updated: updates,
        message: 'Alerts configuration updated successfully'
    };
}
/**
 * Actualiza configuración de circuit breakers
 */ async function updateCircuitBreakersConfig(config, userId) {
    const updates = {};
    if (config.enabled !== undefined) {
        updates.enabled = config.enabled;
    }
    // Reset circuit breakers si se solicita
    if (config.reset) {
        if (config.reset.includes('mercadopago_critical')) {
            _circuitbreaker.mercadoPagoCriticalBreaker.reset();
            updates.mercadopago_critical_reset = true;
        }
        if (config.reset.includes('mercadopago_standard')) {
            _circuitbreaker.mercadoPagoStandardBreaker.reset();
            updates.mercadopago_standard_reset = true;
        }
        if (config.reset.includes('webhook_processing')) {
            _circuitbreaker.webhookProcessingBreaker.reset();
            updates.webhook_processing_reset = true;
        }
    }
    return {
        updated: updates,
        message: 'Circuit breakers configuration updated successfully'
    };
}
/**
 * Actualiza configuración del dashboard
 */ async function updateDashboardConfig(config, userId) {
    const validFields = [
        'refreshInterval',
        'maxDataPoints',
        'cacheTimeout'
    ];
    const updates = {};
    for (const field of validFields){
        if (config[field] !== undefined) {
            updates[field] = config[field];
        }
    }
    return {
        updated: updates,
        message: 'Dashboard configuration updated successfully'
    };
}
/**
 * Actualiza configuración de compliance
 */ async function updateComplianceConfig(config, userId) {
    const validFields = [
        'auditEnabled',
        'retentionPolicies',
        'encryptionEnabled'
    ];
    const updates = {};
    for (const field of validFields){
        if (config[field] !== undefined) {
            updates[field] = config[field];
        }
    }
    return {
        updated: updates,
        message: 'Compliance configuration updated successfully'
    };
}

//# sourceMappingURL=data:application/json;base64,