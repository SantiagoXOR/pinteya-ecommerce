e21eb8c93d8093f501042ffa9765254b
// ===================================
// HOOK: useRecentSearches - Gestión de búsquedas recientes con localStorage
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useRecentSearches () {
        return useRecentSearches;
    },
    get useRecentSearchesSimple () {
        return useRecentSearchesSimple;
    }
});
const _react = require("react");
const _jsonutils = require("../lib/json-utils");
const DEFAULT_OPTIONS = {
    maxSearches: 5,
    storageKey: 'pinteya-recent-searches',
    enablePersistence: true,
    filterDuplicates: true,
    expirationDays: 30
};
function useRecentSearches(options = {}) {
    const config = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const [recentSearches, setRecentSearches] = (0, _react.useState)([]);
    // Función para validar y limpiar una búsqueda
    const sanitizeSearch = (0, _react.useCallback)((search)=>{
        return search.trim().toLowerCase();
    }, []);
    // Función para verificar si los datos han expirado
    const isExpired = (0, _react.useCallback)((timestamp)=>{
        if (config.expirationDays === 0) return false;
        const maxAge = config.expirationDays * 24 * 60 * 60 * 1000;
        return Date.now() - timestamp > maxAge;
    }, [
        config.expirationDays
    ]);
    // Cargar búsquedas desde localStorage
    const loadFromStorage = (0, _react.useCallback)(()=>{
        if (!config.enablePersistence) {
            return [];
        }
        // Usar utilidad segura para cargar desde localStorage
        const result = (0, _jsonutils.safeLocalStorageGet)(config.storageKey);
        if (!result.success) {
            return [];
        }
        const data = result.data;
        // Verificar si es formato nuevo (con metadata)
        if (data && typeof data === 'object' && 'searches' in data && Array.isArray(data.searches)) {
            const persistedData = data;
            // Verificar expiración
            if (persistedData.timestamp && isExpired(persistedData.timestamp)) {
                // Limpiar datos expirados usando utilidad segura
                (0, _jsonutils.safeLocalStorageSet)(config.storageKey, {
                    searches: [],
                    timestamp: Date.now(),
                    version: '1.0'
                });
                return [];
            }
            return persistedData.searches.slice(0, config.maxSearches);
        }
        // Formato antiguo (array simple)
        if (Array.isArray(data)) {
            return data.slice(0, config.maxSearches);
        }
        return [];
    }, [
        config.enablePersistence,
        config.storageKey,
        config.maxSearches,
        isExpired
    ]);
    // Guardar búsquedas en localStorage
    const saveToStorage = (0, _react.useCallback)((searches)=>{
        if (!config.enablePersistence || typeof window === 'undefined') {
            return;
        }
        try {
            if (searches.length === 0) {
                localStorage.removeItem(config.storageKey);
                return;
            }
            const dataToStore = {
                searches: searches.slice(0, config.maxSearches),
                timestamp: Date.now(),
                version: '1.0.0'
            };
            localStorage.setItem(config.storageKey, JSON.stringify(dataToStore));
        } catch (error) {
            console.warn('Error saving recent searches to localStorage:', error);
        }
    }, [
        config.enablePersistence,
        config.storageKey,
        config.maxSearches
    ]);
    // Cargar búsquedas al inicializar
    (0, _react.useEffect)(()=>{
        const loaded = loadFromStorage();
        setRecentSearches(loaded);
    }, [
        loadFromStorage
    ]);
    // Agregar una nueva búsqueda
    const addSearch = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        if (!sanitized || sanitized.length < 2) return;
        setRecentSearches((prev)=>{
            let updated = [
                ...prev
            ];
            // Remover duplicados si está habilitado
            if (config.filterDuplicates) {
                updated = updated.filter((s)=>sanitizeSearch(s) !== sanitized);
            }
            // Agregar al principio
            updated.unshift(search.trim());
            // Limitar al máximo configurado
            updated = updated.slice(0, config.maxSearches);
            // Guardar en localStorage
            saveToStorage(updated);
            return updated;
        });
    }, [
        sanitizeSearch,
        config.filterDuplicates,
        config.maxSearches,
        saveToStorage
    ]);
    // Remover una búsqueda específica
    const removeSearch = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        setRecentSearches((prev)=>{
            const updated = prev.filter((s)=>sanitizeSearch(s) !== sanitized);
            saveToStorage(updated);
            return updated;
        });
    }, [
        sanitizeSearch,
        saveToStorage
    ]);
    // Limpiar todas las búsquedas
    const clearSearches = (0, _react.useCallback)(()=>{
        setRecentSearches([]);
        saveToStorage([]);
    }, [
        saveToStorage
    ]);
    // Verificar si una búsqueda existe
    const hasSearch = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        return recentSearches.some((s)=>sanitizeSearch(s) === sanitized);
    }, [
        recentSearches,
        sanitizeSearch
    ]);
    // Obtener las N búsquedas más recientes
    const getRecentSearches = (0, _react.useCallback)((limit)=>{
        const actualLimit = limit ?? config.maxSearches;
        return recentSearches.slice(0, actualLimit);
    }, [
        recentSearches,
        config.maxSearches
    ]);
    // Mover una búsqueda al principio (reordenar)
    const moveToTop = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        setRecentSearches((prev)=>{
            const filtered = prev.filter((s)=>sanitizeSearch(s) !== sanitized);
            const existing = prev.find((s)=>sanitizeSearch(s) === sanitized);
            if (!existing) return prev;
            const updated = [
                existing,
                ...filtered
            ];
            saveToStorage(updated);
            return updated;
        });
    }, [
        sanitizeSearch,
        saveToStorage
    ]);
    return {
        recentSearches,
        addSearch,
        removeSearch,
        clearSearches,
        hasSearch,
        getRecentSearches,
        moveToTop
    };
}
function useRecentSearchesSimple(limit = 5) {
    const { getRecentSearches } = useRecentSearches({
        maxSearches: limit
    });
    return getRecentSearches();
}
const _default = useRecentSearches;

//# sourceMappingURL=data:application/json;base64,