{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\auth\\security\\route.ts"],"sourcesContent":["/**\n * API Enterprise de Auditor√≠a de Seguridad Mejorada\n * Refactorizada con utilidades enterprise + RLS + validaciones robustas\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getAuthenticatedUser } from '@/lib/auth/admin-auth';\nimport {\n  requireAdminAuth\n} from '@/lib/auth/enterprise-auth-utils';\nimport {\n  executeWithRLS\n} from '@/lib/auth/enterprise-rls-utils';\nimport {\n  withCache,\n  getCacheStats\n} from '@/lib/auth/enterprise-cache';\nimport {\n  analyzeSecurityPatterns,\n  getSecurityMetrics,\n  generateSecurityReport,\n  getActiveSecurityAlerts,\n  updateSecurityAlert,\n  resolveSecurityAlert,\n  markAlertAsFalsePositive,\n  runSecurityHealthCheck,\n  cleanupOldSecurityEvents,\n  exportSecurityEvents\n} from '@/lib/auth/security-audit-enhanced';\nimport { ApiResponse } from '@/types/api';\n\n// =====================================================\n// GET /api/auth/security\n// Obtiene m√©tricas, alertas o ejecuta an√°lisis\n// =====================================================\n\nexport async function GET(request: NextRequest) {\n  try {\n    const url = new URL(request.url);\n    const action = url.searchParams.get('action') || 'metrics';\n    const userId = url.searchParams.get('userId');\n    const severity = url.searchParams.get('severity') as any;\n\n    // ENTERPRISE: Autenticaci√≥n enterprise con permisos espec√≠ficos de seguridad\n    const enterpriseResult = await requireAdminAuth(request, ['security_read', 'admin_access']);\n\n    if (!enterpriseResult.success) {\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: enterpriseResult.error || 'Permisos de administrador requeridos',\n        enterprise: true,\n        code: enterpriseResult.code\n      };\n      return NextResponse.json(errorResponse, { status: enterpriseResult.status || 403 });\n    }\n\n    const context = enterpriseResult.context!;\n\n    // LEGACY: Mantener compatibilidad con m√©todo anterior\n    const legacyResult = await getAuthenticatedUser(request);\n    console.log('üîç Security API: Enterprise vs Legacy auth comparison:', {\n      enterprise: enterpriseResult.success,\n      legacy: legacyResult.isAdmin,\n      agree: enterpriseResult.success === legacyResult.isAdmin\n    });\n\n    switch (action) {\n      case 'metrics':\n        // ENTERPRISE: Obtener m√©tricas de seguridad con cache\n        const metrics = await withCache(\n          `security_metrics_${context.userId}`,\n          () => getSecurityMetrics(),\n          2 * 60 * 1000 // 2 minutos de cache\n        );\n\n        const metricsResponse: ApiResponse<any> = {\n          data: {\n            metrics,\n            cache: getCacheStats(),\n            enterprise: {\n              user: context.userId,\n              role: context.role,\n              permissions: context.permissions\n            }\n          },\n          success: true,\n          message: 'M√©tricas de seguridad obtenidas (enterprise)',\n          enterprise: true\n        };\n        return NextResponse.json(metricsResponse);\n\n      case 'alerts':\n        // ENTERPRISE: Obtener alertas activas con cache\n        const alerts = await withCache(\n          `security_alerts_${userId || 'all'}_${severity || 'all'}`,\n          () => getActiveSecurityAlerts(userId || undefined, severity),\n          1 * 60 * 1000 // 1 minuto de cache\n        );\n\n        const alertsResponse: ApiResponse<any> = {\n          data: {\n            alerts,\n            count: alerts.length,\n            cache: getCacheStats(),\n            enterprise: {\n              filtered_by_user: userId,\n              filtered_by_severity: severity,\n              requester: context.userId\n            }\n          },\n          success: true,\n          message: 'Alertas de seguridad obtenidas'\n        };\n        return NextResponse.json(alertsResponse);\n\n      case 'analyze':\n        // Ejecutar an√°lisis de patrones\n        const timeWindow = parseInt(url.searchParams.get('timeWindow') || '24');\n        const analysisAlerts = await analyzeSecurityPatterns(userId || undefined, timeWindow);\n        const analysisResponse: ApiResponse<any> = {\n          data: { alerts: analysisAlerts, count: analysisAlerts.length },\n          success: true,\n          message: `An√°lisis completado: ${analysisAlerts.length} alertas generadas`\n        };\n        return NextResponse.json(analysisResponse);\n\n      case 'health':\n        // Ejecutar verificaci√≥n de salud de seguridad\n        const healthCheck = await runSecurityHealthCheck();\n        const healthResponse: ApiResponse<any> = {\n          data: healthCheck,\n          success: true,\n          message: `Estado de seguridad: ${healthCheck.status}`\n        };\n        return NextResponse.json(healthResponse);\n\n      case 'report':\n        // Generar reporte de seguridad\n        const startDateStr = url.searchParams.get('startDate');\n        const endDateStr = url.searchParams.get('endDate');\n        \n        if (!startDateStr || !endDateStr) {\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: 'startDate y endDate son requeridos para generar reporte'\n          };\n          return NextResponse.json(errorResponse, { status: 400 });\n        }\n\n        const startDate = new Date(startDateStr);\n        const endDate = new Date(endDateStr);\n        \n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: 'Fechas inv√°lidas'\n          };\n          return NextResponse.json(errorResponse, { status: 400 });\n        }\n\n        const report = await generateSecurityReport(startDate, endDate);\n        const reportResponse: ApiResponse<any> = {\n          data: { report },\n          success: true,\n          message: 'Reporte de seguridad generado'\n        };\n        return NextResponse.json(reportResponse);\n\n      case 'export':\n        // Exportar eventos de seguridad\n        const exportStartStr = url.searchParams.get('startDate');\n        const exportEndStr = url.searchParams.get('endDate');\n        const format = url.searchParams.get('format') as 'json' | 'csv' || 'json';\n        \n        if (!exportStartStr || !exportEndStr) {\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: 'startDate y endDate son requeridos para exportar'\n          };\n          return NextResponse.json(errorResponse, { status: 400 });\n        }\n\n        const exportStart = new Date(exportStartStr);\n        const exportEnd = new Date(exportEndStr);\n        \n        const exportData = await exportSecurityEvents(exportStart, exportEnd, format);\n        \n        // Retornar como archivo descargable\n        const headers = new Headers();\n        headers.set('Content-Type', format === 'json' ? 'application/json' : 'text/csv');\n        headers.set('Content-Disposition', `attachment; filename=\"security-events-${exportStartStr}-${exportEndStr}.${format}\"`);\n        \n        return new Response(exportData, { headers });\n\n      default:\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: `Acci√≥n no v√°lida: ${action}`\n        };\n        return NextResponse.json(errorResponse, { status: 400 });\n    }\n  } catch (error) {\n    console.error('Error en GET /api/auth/security:', error);\n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: 'Error interno del servidor'\n    };\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}\n\n// =====================================================\n// POST /api/auth/security\n// Acciones sobre alertas y mantenimiento\n// =====================================================\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action, alertId, status, notes, assignedTo } = body;\n\n    if (!action) {\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Acci√≥n es requerida'\n      };\n      return NextResponse.json(errorResponse, { status: 400 });\n    }\n\n    // Verificar autenticaci√≥n y permisos de admin\n    const authResult = await getAuthenticatedUser(request);\n    if (!authResult.userId || !authResult.isAdmin) {\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Permisos de administrador requeridos'\n      };\n      return NextResponse.json(errorResponse, { status: 403 });\n    }\n\n    switch (action) {\n      case 'update_alert':\n        // Actualizar estado de alerta\n        if (!alertId) {\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: 'alertId es requerido'\n          };\n          return NextResponse.json(errorResponse, { status: 400 });\n        }\n\n        const updateResult = await updateSecurityAlert(alertId, {\n          status,\n          assigned_to: assignedTo,\n          resolution_notes: notes\n        });\n\n        const updateResponse: ApiResponse<any> = {\n          data: { success: updateResult },\n          success: updateResult,\n          message: updateResult ? 'Alerta actualizada' : 'Error actualizando alerta'\n        };\n        return NextResponse.json(updateResponse, { \n          status: updateResult ? 200 : 500 \n        });\n\n      case 'resolve_alert':\n        // Resolver alerta\n        if (!alertId || !notes) {\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: 'alertId y notes son requeridos'\n          };\n          return NextResponse.json(errorResponse, { status: 400 });\n        }\n\n        const resolveResult = await resolveSecurityAlert(\n          alertId, \n          notes, \n          authResult.userId\n        );\n\n        const resolveResponse: ApiResponse<any> = {\n          data: { success: resolveResult },\n          success: resolveResult,\n          message: resolveResult ? 'Alerta resuelta' : 'Error resolviendo alerta'\n        };\n        return NextResponse.json(resolveResponse, { \n          status: resolveResult ? 200 : 500 \n        });\n\n      case 'false_positive':\n        // Marcar como falso positivo\n        if (!alertId || !notes) {\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: 'alertId y notes son requeridos'\n          };\n          return NextResponse.json(errorResponse, { status: 400 });\n        }\n\n        const fpResult = await markAlertAsFalsePositive(\n          alertId, \n          notes, \n          authResult.userId\n        );\n\n        const fpResponse: ApiResponse<any> = {\n          data: { success: fpResult },\n          success: fpResult,\n          message: fpResult ? 'Alerta marcada como falso positivo' : 'Error marcando alerta'\n        };\n        return NextResponse.json(fpResponse, { \n          status: fpResult ? 200 : 500 \n        });\n\n      case 'cleanup':\n        // Limpiar eventos antiguos\n        const daysToKeep = body.daysToKeep || 90;\n        const cleanupCount = await cleanupOldSecurityEvents(daysToKeep);\n\n        const cleanupResponse: ApiResponse<any> = {\n          data: { deletedCount: cleanupCount },\n          success: true,\n          message: `Limpieza completada: ${cleanupCount} eventos eliminados`\n        };\n        return NextResponse.json(cleanupResponse);\n\n      case 'force_analysis':\n        // Forzar an√°lisis de seguridad\n        const forceUserId = body.userId;\n        const forceTimeWindow = body.timeWindow || 24;\n        \n        const forceAlerts = await analyzeSecurityPatterns(forceUserId, forceTimeWindow);\n        \n        const forceResponse: ApiResponse<any> = {\n          data: { alerts: forceAlerts, count: forceAlerts.length },\n          success: true,\n          message: `An√°lisis forzado completado: ${forceAlerts.length} alertas generadas`\n        };\n        return NextResponse.json(forceResponse);\n\n      default:\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: `Acci√≥n no v√°lida: ${action}`\n        };\n        return NextResponse.json(errorResponse, { status: 400 });\n    }\n  } catch (error) {\n    console.error('Error en POST /api/auth/security:', error);\n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: 'Error interno del servidor'\n    };\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}\n"],"names":["GET","POST","request","url","URL","action","searchParams","get","userId","severity","enterpriseResult","requireAdminAuth","success","errorResponse","data","error","enterprise","code","NextResponse","json","status","context","legacyResult","getAuthenticatedUser","console","log","legacy","isAdmin","agree","metrics","withCache","getSecurityMetrics","metricsResponse","cache","getCacheStats","user","role","permissions","message","alerts","getActiveSecurityAlerts","undefined","alertsResponse","count","length","filtered_by_user","filtered_by_severity","requester","timeWindow","parseInt","analysisAlerts","analyzeSecurityPatterns","analysisResponse","healthCheck","runSecurityHealthCheck","healthResponse","startDateStr","endDateStr","startDate","Date","endDate","isNaN","getTime","report","generateSecurityReport","reportResponse","exportStartStr","exportEndStr","format","exportStart","exportEnd","exportData","exportSecurityEvents","headers","Headers","set","Response","body","alertId","notes","assignedTo","authResult","updateResult","updateSecurityAlert","assigned_to","resolution_notes","updateResponse","resolveResult","resolveSecurityAlert","resolveResponse","fpResult","markAlertAsFalsePositive","fpResponse","daysToKeep","cleanupCount","cleanupOldSecurityEvents","cleanupResponse","deletedCount","forceUserId","forceTimeWindow","forceAlerts","forceResponse"],"mappings":"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"}