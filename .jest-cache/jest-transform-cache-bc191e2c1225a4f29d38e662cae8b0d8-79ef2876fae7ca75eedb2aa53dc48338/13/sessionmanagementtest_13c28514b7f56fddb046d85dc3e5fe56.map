{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\session-management.test.ts"],"sourcesContent":["/**\n * Tests para el sistema de gestión avanzada de sesiones\n * Verifica creación, actualización, invalidación y cleanup de sesiones\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  clerkClient: jest.fn(() => ({\n    users: {\n      getUserList: jest.fn()\n    },\n    sessions: {\n      getSession: jest.fn()\n    }\n  }))\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          order: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        })),\n        or: jest.fn(() => ({\n          single: jest.fn()\n        })),\n        order: jest.fn(() => ({}))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\n// Mock de cache manager\njest.mock('@/lib/cache-manager', () => ({\n  CacheManager: {\n    getInstance: jest.fn(() => ({\n      get: jest.fn(),\n      set: jest.fn(),\n      delete: jest.fn()\n    }))\n  },\n  CACHE_CONFIGS: {\n    USER_SESSION: { ttl: 600 }\n  }\n}));\n\n// Mock de auditoría de seguridad\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\nimport {\n  createSession,\n  updateSession,\n  invalidateSession,\n  getUserSessions,\n  getSessionInfo,\n  isSessionValid,\n  updateSessionActivity,\n  cleanupExpiredSessions,\n  getSessionStats,\n  type SessionData\n} from '@/lib/auth/session-management';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { clerkClient } from '@clerk/nextjs/server';\n\ndescribe('Sistema de Gestión de Sesiones', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  const mockSessionData: SessionData = {\n    id: 'sess_123',\n    user_id: 'user_123',\n    clerk_session_id: 'sess_clerk_123',\n    status: 'active',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    expires_at: '2024-01-02T00:00:00Z',\n    last_activity: '2024-01-01T12:00:00Z',\n    ip_address: '192.168.1.1',\n    user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n    device_info: {\n      type: 'desktop',\n      os: 'Windows',\n      browser: 'Chrome'\n    },\n    metadata: {\n      login_method: 'clerk',\n      timezone: 'UTC'\n    }\n  };\n\n  describe('Funciones de gestión de sesiones', () => {\n    it('debe crear sesión con parámetros válidos', async () => {\n      const result = await createSession('user_123', 'sess_clerk_123');\n\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n      expect(typeof result.action).toBe('string');\n    });\n\n    it('debe actualizar sesión existente', async () => {\n      const result = await updateSession('sess_clerk_123', {});\n\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n      expect(typeof result.action).toBe('string');\n    });\n\n    it('debe invalidar sesión específica', async () => {\n      const result = await invalidateSession('sess_clerk_123');\n\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n      expect(typeof result.action).toBe('string');\n    });\n  });\n\n  describe('Funciones básicas', () => {\n    it('debe tener funciones principales definidas', () => {\n      expect(typeof createSession).toBe('function');\n      expect(typeof updateSession).toBe('function');\n      expect(typeof invalidateSession).toBe('function');\n      expect(typeof getUserSessions).toBe('function');\n      expect(typeof getSessionInfo).toBe('function');\n      expect(typeof isSessionValid).toBe('function');\n      expect(typeof updateSessionActivity).toBe('function');\n      expect(typeof cleanupExpiredSessions).toBe('function');\n      expect(typeof getSessionStats).toBe('function');\n    });\n\n    it('debe manejar errores gracefully', async () => {\n      // Test que las funciones no lanzan excepciones no manejadas\n      const result = await createSession('', '');\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n    });\n  });\n\n  describe('invalidateSession', () => {\n    it('debe invalidar una sesión exitosamente', async () => {\n      const invalidatedSession = { ...mockSessionData, status: 'revoked' };\n      \n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: invalidatedSession,\n        error: null\n      });\n\n      const result = await invalidateSession('sess_clerk_123', 'manual_logout');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('deleted');\n    });\n\n    it('debe manejar sesión ya invalidada', async () => {\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      const result = await invalidateSession('sess_already_invalid');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('found_existing');\n    });\n  });\n\n  describe('Funciones de consulta', () => {\n    it('debe obtener sesiones de usuario', async () => {\n      const sessions = await getUserSessions('user_123');\n\n      expect(Array.isArray(sessions)).toBe(true);\n    });\n\n    it('debe obtener información de sesión específica', async () => {\n      const session = await getSessionInfo('sess_clerk_123');\n\n      // Puede ser null o un objeto de sesión\n      expect(session === null || typeof session === 'object').toBe(true);\n    });\n\n    it('debe validar sesión', async () => {\n      const isValid = await isSessionValid('sess_clerk_123');\n\n      expect(typeof isValid).toBe('boolean');\n    });\n\n    it('debe actualizar actividad de sesión', async () => {\n      const result = await updateSessionActivity('sess_clerk_123', {\n        last_page: '/dashboard'\n      });\n\n      expect(typeof result).toBe('boolean');\n    });\n  });\n\n  describe('Funciones de cleanup y estadísticas', () => {\n    it('debe tener función de cleanup implementada', async () => {\n      const result = await cleanupExpiredSessions();\n\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n      expect(typeof result.cleaned).toBe('number');\n      expect(typeof result.errors).toBe('number');\n      expect(result.details).toBeDefined();\n    });\n\n    it('debe tener función de estadísticas implementada', async () => {\n      const stats = await getSessionStats();\n\n      expect(stats).toBeDefined();\n      expect(typeof stats.total).toBe('number');\n      expect(typeof stats.active).toBe('number');\n      expect(typeof stats.expired).toBe('number');\n      expect(typeof stats.revoked).toBe('number');\n      expect(typeof stats.invalid).toBe('number');\n      expect(typeof stats.byDevice).toBe('object');\n    });\n  });\n});\n"],"names":["jest","mock","clerkClient","fn","users","getUserList","sessions","getSession","supabaseAdmin","from","select","eq","single","order","or","insert","update","CacheManager","getInstance","get","set","delete","CACHE_CONFIGS","USER_SESSION","ttl","logSecurityEvent","logAdminAction","describe","beforeEach","clearAllMocks","mockSessionData","id","user_id","clerk_session_id","status","created_at","updated_at","expires_at","last_activity","ip_address","user_agent","device_info","type","os","browser","metadata","login_method","timezone","it","result","createSession","expect","toBeDefined","success","toBe","action","updateSession","invalidateSession","getUserSessions","getSessionInfo","isSessionValid","updateSessionActivity","cleanupExpiredSessions","getSessionStats","invalidatedSession","mockSupabase","mockResolvedValue","data","error","code","Array","isArray","session","isValid","last_page","cleaned","errors","details","stats","total","active","expired","revoked","invalid","byDevice"],"mappings":"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"}