{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\user-sync-service.ts"],"sourcesContent":["/**\n * Servicio de Sincronización Automática de Usuarios\n * Maneja la sincronización robusta entre Clerk y Supabase con retry logic y manejo de errores\n */\n\nimport { clerkClient } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { logSecurityEvent, logAdminAction } from './security-audit';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface ClerkUserData {\n  id: string;\n  email_addresses: {\n    email_address: string;\n    id: string;\n    verification: {\n      status: string;\n      strategy: string;\n    };\n  }[];\n  first_name: string | null;\n  last_name: string | null;\n  created_at: number;\n  updated_at: number;\n  image_url?: string;\n  phone_numbers?: {\n    phone_number: string;\n    id: string;\n    verification: {\n      status: string;\n    };\n  }[];\n  public_metadata?: Record<string, any>;\n  private_metadata?: Record<string, any>;\n}\n\nexport interface UserSyncResult {\n  success: boolean;\n  action: 'created' | 'updated' | 'found_existing' | 'deleted' | 'error';\n  userId?: string;\n  error?: string;\n  details?: Record<string, any>;\n}\n\nexport interface SyncOptions {\n  retryAttempts?: number;\n  retryDelay?: number;\n  validateData?: boolean;\n  createMissingRole?: boolean;\n  logEvents?: boolean;\n}\n\n// =====================================================\n// CONFIGURACIÓN Y CONSTANTES\n// =====================================================\n\nconst DEFAULT_SYNC_OPTIONS: Required<SyncOptions> = {\n  retryAttempts: 3,\n  retryDelay: 1000, // 1 segundo\n  validateData: true,\n  createMissingRole: true,\n  logEvents: true\n};\n\nconst DEFAULT_ROLE_NAME = 'customer';\n\n// =====================================================\n// FUNCIONES DE UTILIDAD\n// =====================================================\n\n/**\n * Espera un tiempo determinado (para retry logic)\n */\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Valida los datos del usuario de Clerk\n */\nfunction validateClerkUserData(userData: ClerkUserData): { valid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  if (!userData.id) {\n    errors.push('ID de usuario de Clerk es requerido');\n  }\n\n  if (!userData.email_addresses || userData.email_addresses.length === 0) {\n    errors.push('Al menos un email es requerido');\n  } else {\n    const primaryEmail = userData.email_addresses[0]?.email_address;\n    if (!primaryEmail || !primaryEmail.includes('@')) {\n      errors.push('Email primario inválido');\n    }\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * Obtiene o crea el rol por defecto\n */\nasync function ensureDefaultRole(): Promise<number | null> {\n  try {\n    if (!supabaseAdmin) {\n      throw new Error('Supabase admin client no disponible');\n    }\n\n    // Intentar obtener el rol customer\n    const { data: role, error } = await supabaseAdmin\n      .from('user_roles')\n      .select('id')\n      .eq('role_name', DEFAULT_ROLE_NAME)\n      .eq('is_active', true)\n      .single();\n\n    if (error && error.code !== 'PGRST116') {\n      throw error;\n    }\n\n    if (role) {\n      return role.id;\n    }\n\n    // Si no existe, crear el rol customer\n    console.log('[USER_SYNC] Creando rol customer por defecto...');\n    const { data: newRole, error: createError } = await supabaseAdmin\n      .from('user_roles')\n      .insert({\n        role_name: DEFAULT_ROLE_NAME,\n        display_name: 'Cliente',\n        description: 'Cliente regular del e-commerce',\n        permissions: {\n          orders: { create: true, read: true, update: false, delete: false },\n          profile: { read: true, update: true }\n        },\n        is_active: true,\n        is_system_role: true\n      })\n      .select('id')\n      .single();\n\n    if (createError) {\n      console.error('[USER_SYNC] Error creando rol por defecto:', createError);\n      return null;\n    }\n\n    return newRole.id;\n  } catch (error) {\n    console.error('[USER_SYNC] Error en ensureDefaultRole:', error);\n    return null;\n  }\n}\n\n// =====================================================\n// FUNCIONES PRINCIPALES DE SINCRONIZACIÓN\n// =====================================================\n\n/**\n * Sincroniza un usuario de Clerk con Supabase\n */\nexport async function syncUserToSupabase(\n  clerkUserData: ClerkUserData,\n  options: SyncOptions = {}\n): Promise<UserSyncResult> {\n  const opts = { ...DEFAULT_SYNC_OPTIONS, ...options };\n  let lastError: Error | null = null;\n\n  // Validar datos si está habilitado\n  if (opts.validateData) {\n    const validation = validateClerkUserData(clerkUserData);\n    if (!validation.valid) {\n      const error = `Datos de usuario inválidos: ${validation.errors.join(', ')}`;\n      console.error('[USER_SYNC]', error);\n      return { success: false, action: 'error', error };\n    }\n  }\n\n  // Retry logic\n  for (let attempt = 1; attempt <= opts.retryAttempts; attempt++) {\n    try {\n      console.log(`[USER_SYNC] Intento ${attempt}/${opts.retryAttempts} para usuario ${clerkUserData.id}`);\n\n      const result = await performUserSync(clerkUserData, opts);\n\n      // Log evento de éxito si está habilitado\n      if (opts.logEvents && result.success) {\n        await logSecurityEvent({\n          user_id: clerkUserData.id,\n          event_type: 'DATA_ACCESS',\n          event_category: 'data_access',\n          severity: 'low',\n          description: `Usuario sincronizado: ${result.action}`,\n          metadata: {\n            action: result.action,\n            email: clerkUserData.email_addresses[0]?.email_address,\n            attempt\n          }\n        });\n      }\n\n      return result;\n    } catch (error) {\n      lastError = error as Error;\n      console.error(`[USER_SYNC] Error en intento ${attempt}:`, error);\n\n      // Si no es el último intento, esperar antes de reintentar\n      if (attempt < opts.retryAttempts) {\n        const delayMs = opts.retryDelay * attempt; // Backoff exponencial\n        console.log(`[USER_SYNC] Esperando ${delayMs}ms antes del siguiente intento...`);\n        await delay(delayMs);\n      }\n    }\n  }\n\n  // Log evento de error si está habilitado\n  if (opts.logEvents) {\n    await logSecurityEvent({\n      user_id: clerkUserData.id,\n      event_type: 'SECURITY_VIOLATION',\n      event_category: 'data_access',\n      severity: 'medium',\n      description: `Error sincronizando usuario después de ${opts.retryAttempts} intentos`,\n      metadata: {\n        error: lastError?.message,\n        email: clerkUserData.email_addresses[0]?.email_address,\n        attempts: opts.retryAttempts\n      }\n    });\n  }\n\n  return {\n    success: false,\n    action: 'error',\n    error: `Error después de ${opts.retryAttempts} intentos: ${lastError?.message}`\n  };\n}\n\n/**\n * Realiza la sincronización real del usuario\n */\nasync function performUserSync(\n  clerkUserData: ClerkUserData,\n  options: Required<SyncOptions>\n): Promise<UserSyncResult> {\n  if (!supabaseAdmin) {\n    throw new Error('Supabase admin client no disponible');\n  }\n\n  const primaryEmail = clerkUserData.email_addresses[0]?.email_address;\n  const isEmailVerified = clerkUserData.email_addresses[0]?.verification?.status === 'verified';\n\n  // Verificar si el usuario ya existe\n  const { data: existingUser, error: fetchError } = await supabaseAdmin\n    .from('user_profiles')\n    .select('*')\n    .or(`email.eq.${primaryEmail},clerk_user_id.eq.${clerkUserData.id}`)\n    .single();\n\n  if (fetchError && fetchError.code !== 'PGRST116') {\n    throw new Error(`Error verificando usuario existente: ${fetchError.message}`);\n  }\n\n  // Preparar datos del usuario\n  const userData = {\n    clerk_user_id: clerkUserData.id,\n    email: primaryEmail,\n    first_name: clerkUserData.first_name,\n    last_name: clerkUserData.last_name,\n    is_verified: isEmailVerified,\n    is_active: true,\n    metadata: {\n      clerk_created_at: clerkUserData.created_at,\n      clerk_updated_at: clerkUserData.updated_at,\n      image_url: clerkUserData.image_url,\n      phone_numbers: clerkUserData.phone_numbers,\n      public_metadata: clerkUserData.public_metadata,\n      last_sync: new Date().toISOString()\n    },\n    updated_at: new Date().toISOString()\n  };\n\n  if (existingUser) {\n    // Actualizar usuario existente\n    const { data: updatedUser, error: updateError } = await supabaseAdmin\n      .from('user_profiles')\n      .update(userData)\n      .eq('id', existingUser.id)\n      .select('*')\n      .single();\n\n    if (updateError) {\n      throw new Error(`Error actualizando usuario: ${updateError.message}`);\n    }\n\n    return {\n      success: true,\n      action: 'updated',\n      userId: updatedUser.id,\n      details: { previousData: existingUser, newData: updatedUser }\n    };\n  } else {\n    // Crear nuevo usuario\n    let roleId: number | null = null;\n\n    if (options.createMissingRole) {\n      roleId = await ensureDefaultRole();\n    }\n\n    const newUserData = {\n      ...userData,\n      role_id: roleId\n    };\n\n    const { data: newUser, error: insertError } = await supabaseAdmin\n      .from('user_profiles')\n      .insert(newUserData)\n      .select('*')\n      .single();\n\n    if (insertError) {\n      // Manejar error de clave duplicada\n      if (insertError.code === '23505') {\n        console.log('[USER_SYNC] Usuario ya existe (clave duplicada), obteniendo usuario...');\n        const { data: existingUserRetry, error: retryError } = await supabaseAdmin\n          .from('user_profiles')\n          .select('*')\n          .or(`email.eq.${primaryEmail},clerk_user_id.eq.${clerkUserData.id}`)\n          .single();\n\n        if (!retryError && existingUserRetry) {\n          return {\n            success: true,\n            action: 'found_existing',\n            userId: existingUserRetry.id,\n            details: { userData: existingUserRetry }\n          };\n        }\n      }\n\n      throw new Error(`Error creando usuario: ${insertError.message}`);\n    }\n\n    return {\n      success: true,\n      action: 'created',\n      userId: newUser.id,\n      details: { userData: newUser }\n    };\n  }\n}\n\n/**\n * Elimina un usuario de Supabase (soft delete)\n */\nexport async function deleteUserFromSupabase(\n  clerkUserId: string,\n  options: SyncOptions = {}\n): Promise<UserSyncResult> {\n  const opts = { ...DEFAULT_SYNC_OPTIONS, ...options };\n  let lastError: Error | null = null;\n\n  // Retry logic\n  for (let attempt = 1; attempt <= opts.retryAttempts; attempt++) {\n    try {\n      console.log(`[USER_SYNC] Eliminando usuario ${clerkUserId} - Intento ${attempt}/${opts.retryAttempts}`);\n\n      if (!supabaseAdmin) {\n        throw new Error('Supabase admin client no disponible');\n      }\n\n      // Soft delete: marcar como inactivo en lugar de eliminar\n      const { data: deletedUser, error: deleteError } = await supabaseAdmin\n        .from('user_profiles')\n        .update({\n          is_active: false,\n          clerk_user_id: null, // Limpiar referencia a Clerk\n          metadata: {\n            deleted_at: new Date().toISOString(),\n            deleted_by: 'clerk_webhook',\n            original_clerk_id: clerkUserId\n          },\n          updated_at: new Date().toISOString()\n        })\n        .eq('clerk_user_id', clerkUserId)\n        .select('*')\n        .single();\n\n      if (deleteError && deleteError.code !== 'PGRST116') {\n        throw new Error(`Error eliminando usuario: ${deleteError.message}`);\n      }\n\n      if (!deletedUser) {\n        console.log(`[USER_SYNC] Usuario ${clerkUserId} no encontrado en Supabase`);\n        return {\n          success: true,\n          action: 'deleted',\n          details: { message: 'Usuario no encontrado en Supabase' }\n        };\n      }\n\n      // Log evento si está habilitado\n      if (opts.logEvents) {\n        await logSecurityEvent({\n          user_id: clerkUserId,\n          event_type: 'ADMIN_ACTION',\n          event_category: 'admin_operations',\n          severity: 'medium',\n          description: 'Usuario eliminado de Supabase',\n          metadata: {\n            action: 'soft_delete',\n            user_email: deletedUser.email,\n            attempt\n          }\n        });\n      }\n\n      return {\n        success: true,\n        action: 'deleted',\n        userId: deletedUser.id,\n        details: { deletedUser }\n      };\n    } catch (error) {\n      lastError = error as Error;\n      console.error(`[USER_SYNC] Error en intento ${attempt}:`, error);\n\n      if (attempt < opts.retryAttempts) {\n        const delayMs = opts.retryDelay * attempt;\n        await delay(delayMs);\n      }\n    }\n  }\n\n  return {\n    success: false,\n    action: 'error',\n    error: `Error después de ${opts.retryAttempts} intentos: ${lastError?.message}`\n  };\n}\n\n/**\n * Sincroniza un usuario desde Clerk usando su ID\n */\nexport async function syncUserFromClerk(\n  clerkUserId: string,\n  options: SyncOptions = {}\n): Promise<UserSyncResult> {\n  try {\n    console.log(`[USER_SYNC] Obteniendo usuario ${clerkUserId} desde Clerk...`);\n\n    const client = await clerkClient();\n    const clerkUser = await client.users.getUser(clerkUserId);\n\n    if (!clerkUser) {\n      return {\n        success: false,\n        action: 'error',\n        error: 'Usuario no encontrado en Clerk'\n      };\n    }\n\n    // Convertir datos de Clerk al formato esperado\n    const clerkUserData: ClerkUserData = {\n      id: clerkUser.id,\n      email_addresses: clerkUser.emailAddresses.map(email => ({\n        email_address: email.emailAddress,\n        id: email.id,\n        verification: {\n          status: email.verification?.status || 'unverified',\n          strategy: email.verification?.strategy || 'unknown'\n        }\n      })),\n      first_name: clerkUser.firstName,\n      last_name: clerkUser.lastName,\n      created_at: clerkUser.createdAt,\n      updated_at: clerkUser.updatedAt,\n      image_url: clerkUser.imageUrl,\n      phone_numbers: clerkUser.phoneNumbers?.map(phone => ({\n        phone_number: phone.phoneNumber,\n        id: phone.id,\n        verification: {\n          status: phone.verification?.status || 'unverified'\n        }\n      })),\n      public_metadata: clerkUser.publicMetadata,\n      private_metadata: clerkUser.privateMetadata\n    };\n\n    return await syncUserToSupabase(clerkUserData, options);\n  } catch (error) {\n    console.error('[USER_SYNC] Error obteniendo usuario de Clerk:', error);\n    return {\n      success: false,\n      action: 'error',\n      error: `Error obteniendo usuario de Clerk: ${error.message}`\n    };\n  }\n}\n\n/**\n * Sincronización masiva de usuarios desde Clerk\n */\nexport async function bulkSyncUsersFromClerk(\n  options: SyncOptions & { batchSize?: number; maxUsers?: number } = {}\n): Promise<{\n  success: boolean;\n  totalProcessed: number;\n  successful: number;\n  failed: number;\n  results: UserSyncResult[];\n}> {\n  const opts = {\n    ...DEFAULT_SYNC_OPTIONS,\n    batchSize: 10,\n    maxUsers: 100,\n    ...options\n  };\n\n  console.log('[USER_SYNC] Iniciando sincronización masiva de usuarios...');\n\n  try {\n    const client = await clerkClient();\n    const results: UserSyncResult[] = [];\n    let offset = 0;\n    let totalProcessed = 0;\n    let successful = 0;\n    let failed = 0;\n\n    while (totalProcessed < opts.maxUsers) {\n      const limit = Math.min(opts.batchSize, opts.maxUsers - totalProcessed);\n\n      console.log(`[USER_SYNC] Obteniendo batch ${offset}-${offset + limit}...`);\n\n      const clerkUsers = await client.users.getUserList({\n        limit,\n        offset\n      });\n\n      if (!clerkUsers || clerkUsers.length === 0) {\n        console.log('[USER_SYNC] No hay más usuarios para procesar');\n        break;\n      }\n\n      // Procesar usuarios en paralelo (con límite)\n      const batchPromises = clerkUsers.map(async (clerkUser) => {\n        const clerkUserData: ClerkUserData = {\n          id: clerkUser.id,\n          email_addresses: clerkUser.emailAddresses.map(email => ({\n            email_address: email.emailAddress,\n            id: email.id,\n            verification: {\n              status: email.verification?.status || 'unverified',\n              strategy: email.verification?.strategy || 'unknown'\n            }\n          })),\n          first_name: clerkUser.firstName,\n          last_name: clerkUser.lastName,\n          created_at: clerkUser.createdAt,\n          updated_at: clerkUser.updatedAt,\n          image_url: clerkUser.imageUrl,\n          phone_numbers: clerkUser.phoneNumbers?.map(phone => ({\n            phone_number: phone.phoneNumber,\n            id: phone.id,\n            verification: {\n              status: phone.verification?.status || 'unverified'\n            }\n          })),\n          public_metadata: clerkUser.publicMetadata,\n          private_metadata: clerkUser.privateMetadata\n        };\n\n        return await syncUserToSupabase(clerkUserData, {\n          ...opts,\n          logEvents: false // Evitar spam de logs en sync masivo\n        });\n      });\n\n      const batchResults = await Promise.allSettled(batchPromises);\n\n      batchResults.forEach((result, index) => {\n        if (result.status === 'fulfilled') {\n          results.push(result.value);\n          if (result.value.success) {\n            successful++;\n          } else {\n            failed++;\n          }\n        } else {\n          console.error(`[USER_SYNC] Error procesando usuario ${index}:`, result.reason);\n          results.push({\n            success: false,\n            action: 'error',\n            error: result.reason?.message || 'Error desconocido'\n          });\n          failed++;\n        }\n      });\n\n      totalProcessed += clerkUsers.length;\n      offset += limit;\n\n      // Pequeña pausa entre batches para no sobrecargar\n      if (totalProcessed < opts.maxUsers) {\n        await delay(500);\n      }\n    }\n\n    console.log(`[USER_SYNC] Sincronización masiva completada: ${successful} exitosos, ${failed} fallidos`);\n\n    return {\n      success: failed === 0,\n      totalProcessed,\n      successful,\n      failed,\n      results\n    };\n  } catch (error) {\n    console.error('[USER_SYNC] Error en sincronización masiva:', error);\n    return {\n      success: false,\n      totalProcessed: 0,\n      successful: 0,\n      failed: 1,\n      results: [{\n        success: false,\n        action: 'error',\n        error: `Error en sincronización masiva: ${error.message}`\n      }]\n    };\n  }\n}\n"],"names":["bulkSyncUsersFromClerk","deleteUserFromSupabase","syncUserFromClerk","syncUserToSupabase","DEFAULT_SYNC_OPTIONS","retryAttempts","retryDelay","validateData","createMissingRole","logEvents","DEFAULT_ROLE_NAME","delay","ms","Promise","resolve","setTimeout","validateClerkUserData","userData","errors","id","push","email_addresses","length","primaryEmail","email_address","includes","valid","ensureDefaultRole","supabaseAdmin","Error","data","role","error","from","select","eq","single","code","console","log","newRole","createError","insert","role_name","display_name","description","permissions","orders","create","read","update","delete","profile","is_active","is_system_role","clerkUserData","options","opts","lastError","validation","join","success","action","attempt","result","performUserSync","logSecurityEvent","user_id","event_type","event_category","severity","metadata","email","delayMs","message","attempts","isEmailVerified","verification","status","existingUser","fetchError","or","clerk_user_id","first_name","last_name","is_verified","clerk_created_at","created_at","clerk_updated_at","updated_at","image_url","phone_numbers","public_metadata","last_sync","Date","toISOString","updatedUser","updateError","userId","details","previousData","newData","roleId","newUserData","role_id","newUser","insertError","existingUserRetry","retryError","clerkUserId","deletedUser","deleteError","deleted_at","deleted_by","original_clerk_id","user_email","client","clerkClient","clerkUser","users","getUser","emailAddresses","map","emailAddress","strategy","firstName","lastName","createdAt","updatedAt","imageUrl","phoneNumbers","phone","phone_number","phoneNumber","publicMetadata","private_metadata","privateMetadata","batchSize","maxUsers","results","offset","totalProcessed","successful","failed","limit","Math","min","clerkUsers","getUserList","batchPromises","batchResults","allSettled","forEach","index","value","reason"],"mappings":"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"}