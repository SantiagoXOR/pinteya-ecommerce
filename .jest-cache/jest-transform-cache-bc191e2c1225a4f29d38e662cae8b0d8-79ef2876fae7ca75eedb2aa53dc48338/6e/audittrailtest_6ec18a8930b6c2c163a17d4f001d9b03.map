{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\audit-trail.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - AUDIT TRAIL TESTS\n// ===================================\n\nimport { \n  AuditTrailManager,\n  AuditCategory,\n  AuditSeverity,\n  AuditResult,\n  logAuthentication,\n  logPaymentEvent,\n  logSecurityViolation,\n  logDataAccess,\n  logAdminAction\n} from '@/lib/security/audit-trail';\n\n// Mock logger\njest.mock('@/lib/logger', () => ({\n  logger: {\n    audit: jest.fn(),\n    security: jest.fn(),\n    error: jest.fn(),\n  },\n  LogLevel: {\n    INFO: 'info',\n    ERROR: 'error',\n  },\n  LogCategory: {\n    SYSTEM: 'system',\n  },\n}));\n\n// Mock Supabase\nconst mockSupabaseInsert = jest.fn();\nconst mockSupabaseSelect = jest.fn();\nconst mockSupabaseFrom = jest.fn(() => ({\n  insert: mockSupabaseInsert,\n  select: mockSupabaseSelect,\n}));\n\njest.mock('@/lib/supabase', () => ({\n  getSupabaseClient: jest.fn(() => ({\n    from: mockSupabaseFrom,\n  })),\n}));\n\ndescribe('Audit Trail System Enterprise', () => {\n  let auditManager: AuditTrailManager;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    auditManager = new AuditTrailManager();\n    \n    // Mock successful database operations\n    mockSupabaseInsert.mockResolvedValue({ error: null });\n    mockSupabaseSelect.mockResolvedValue({ data: [], error: null });\n  });\n\n  describe('AuditTrailManager', () => {\n    test('debe crear instancia singleton', () => {\n      const instance1 = AuditTrailManager.getInstance();\n      const instance2 = AuditTrailManager.getInstance();\n      \n      expect(instance1).toBe(instance2);\n    });\n\n    test('debe generar ID único para eventos', async () => {\n      const eventData = {\n        userId: 'test-user',\n        action: 'test_action',\n        resource: 'test_resource',\n        category: AuditCategory.AUTHENTICATION,\n        severity: AuditSeverity.LOW,\n        result: AuditResult.SUCCESS,\n        ipAddress: '127.0.0.1',\n        userAgent: 'test-agent'\n      };\n\n      await auditManager.logEvent(eventData);\n      await auditManager.logEvent(eventData);\n\n      expect(mockSupabaseInsert).toHaveBeenCalledTimes(2);\n      \n      const call1 = mockSupabaseInsert.mock.calls[0][0];\n      const call2 = mockSupabaseInsert.mock.calls[1][0];\n      \n      expect(call1.id).not.toBe(call2.id);\n      expect(call1.id).toMatch(/^audit_\\d+_[a-f0-9]{16}$/);\n    });\n\n    test('debe generar hash de integridad', async () => {\n      const eventData = {\n        userId: 'test-user',\n        action: 'test_action',\n        resource: 'test_resource',\n        category: AuditCategory.AUTHENTICATION,\n        severity: AuditSeverity.LOW,\n        result: AuditResult.SUCCESS,\n        ipAddress: '127.0.0.1',\n        userAgent: 'test-agent'\n      };\n\n      await auditManager.logEvent(eventData);\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          hash: expect.stringMatching(/^[a-f0-9]{64}$/)\n        })\n      );\n    });\n\n    test('debe almacenar evento en base de datos', async () => {\n      const eventData = {\n        userId: 'test-user',\n        action: 'test_action',\n        resource: 'test_resource',\n        category: AuditCategory.AUTHENTICATION,\n        severity: AuditSeverity.MEDIUM,\n        result: AuditResult.SUCCESS,\n        ipAddress: '192.168.1.1',\n        userAgent: 'Mozilla/5.0',\n        metadata: { extra: 'data' }\n      };\n\n      await auditManager.logEvent(eventData);\n\n      expect(mockSupabaseFrom).toHaveBeenCalledWith('audit_events');\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          user_id: 'test-user',\n          action: 'test_action',\n          resource: 'test_resource',\n          category: 'authentication',\n          severity: 'medium',\n          result: 'success',\n          ip_address: '192.168.1.1',\n          user_agent: 'Mozilla/5.0',\n          metadata: { extra: 'data' }\n        })\n      );\n    });\n\n    test('debe manejar errores de base de datos', async () => {\n      mockSupabaseInsert.mockResolvedValue({ \n        error: { message: 'Database error' } \n      });\n\n      const eventData = {\n        action: 'test_action',\n        resource: 'test_resource',\n        category: AuditCategory.AUTHENTICATION,\n        severity: AuditSeverity.LOW,\n        result: AuditResult.SUCCESS,\n        ipAddress: '127.0.0.1',\n        userAgent: 'test-agent'\n      };\n\n      // No debe lanzar error, debe manejarlo internamente\n      await expect(auditManager.logEvent(eventData)).resolves.not.toThrow();\n    });\n  });\n\n  describe('Funciones de conveniencia', () => {\n    test('logAuthentication debe crear evento de autenticación', async () => {\n      await logAuthentication(\n        'user_login',\n        AuditResult.SUCCESS,\n        'user-123',\n        { sessionId: 'session-456' },\n        { ip: '192.168.1.1', userAgent: 'Chrome' }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'user_login',\n          resource: 'authentication',\n          category: 'authentication',\n          severity: 'medium',\n          result: 'success',\n          user_id: 'user-123',\n          ip_address: '192.168.1.1',\n          user_agent: 'Chrome',\n          metadata: { sessionId: 'session-456' },\n          compliance_flags: ['ISO27001', 'AUTHENTICATION_LOG']\n        })\n      );\n    });\n\n    test('logPaymentEvent debe crear evento de pago', async () => {\n      await logPaymentEvent(\n        'payment_processed',\n        AuditResult.SUCCESS,\n        {\n          orderId: 'order-123',\n          paymentId: 'payment-456',\n          amount: 100.50,\n          currency: 'ARS',\n          method: 'mercadopago'\n        },\n        'user-789',\n        { ip: '10.0.0.1', userAgent: 'Safari' }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'payment_processed',\n          resource: 'payment:payment-456',\n          category: 'payment_processing',\n          severity: 'low',\n          result: 'success',\n          user_id: 'user-789',\n          ip_address: '10.0.0.1',\n          user_agent: 'Safari',\n          metadata: expect.objectContaining({\n            orderId: 'order-123',\n            paymentId: 'payment-456',\n            amount: 100.50,\n            currency: 'ARS',\n            method: 'mercadopago',\n            complianceRequired: true\n          }),\n          compliance_flags: ['ISO27001', 'PAYMENT_LOG', 'FINANCIAL_COMPLIANCE']\n        })\n      );\n    });\n\n    test('logSecurityViolation debe crear evento crítico', async () => {\n      await logSecurityViolation(\n        'invalid_signature',\n        'HMAC signature validation failed',\n        { ip: '192.168.1.100', userAgent: 'Unknown' },\n        { attemptedResource: '/api/webhook' }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'invalid_signature',\n          resource: 'security_system',\n          category: 'security_violation',\n          severity: 'critical',\n          result: 'blocked',\n          ip_address: '192.168.1.100',\n          user_agent: 'Unknown',\n          metadata: expect.objectContaining({\n            details: 'HMAC signature validation failed',\n            attemptedResource: '/api/webhook',\n            alertRequired: true\n          }),\n          compliance_flags: ['ISO27001', 'SECURITY_INCIDENT', 'IMMEDIATE_ALERT']\n        })\n      );\n    });\n\n    test('logDataAccess debe crear evento de acceso a datos', async () => {\n      await logDataAccess(\n        'user_data_accessed',\n        'user_profiles',\n        AuditResult.SUCCESS,\n        'admin-user',\n        { ip: '172.16.0.1', userAgent: 'Firefox' },\n        { recordsAccessed: 5 }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'user_data_accessed',\n          resource: 'user_profiles',\n          category: 'data_access',\n          severity: 'medium',\n          result: 'success',\n          user_id: 'admin-user',\n          ip_address: '172.16.0.1',\n          user_agent: 'Firefox',\n          metadata: { recordsAccessed: 5 },\n          compliance_flags: ['ISO27001', 'DATA_ACCESS_LOG']\n        })\n      );\n    });\n\n    test('logAdminAction debe crear evento administrativo', async () => {\n      await logAdminAction(\n        'user_role_changed',\n        'user:user-123',\n        AuditResult.SUCCESS,\n        'admin-456',\n        { ip: '10.1.1.1', userAgent: 'Edge' },\n        { oldRole: 'user', newRole: 'admin' }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'user_role_changed',\n          resource: 'user:user-123',\n          category: 'system_administration',\n          severity: 'high',\n          result: 'success',\n          user_id: 'admin-456',\n          ip_address: '10.1.1.1',\n          user_agent: 'Edge',\n          metadata: { oldRole: 'user', newRole: 'admin' },\n          compliance_flags: ['ISO27001', 'ADMIN_ACTION', 'PRIVILEGED_ACCESS']\n        })\n      );\n    });\n  });\n\n  describe('Severidad automática', () => {\n    test('debe asignar severidad HIGH para fallos de autenticación', async () => {\n      await logAuthentication(\n        'login_failed',\n        AuditResult.FAILURE,\n        undefined,\n        { reason: 'invalid_password' },\n        { ip: '192.168.1.1', userAgent: 'Chrome' }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          severity: 'high'\n        })\n      );\n    });\n\n    test('debe asignar severidad HIGH para fallos de pago', async () => {\n      await logPaymentEvent(\n        'payment_failed',\n        AuditResult.FAILURE,\n        { paymentId: 'payment-123', amount: 100 },\n        'user-456',\n        { ip: '10.0.0.1', userAgent: 'Safari' }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          severity: 'high'\n        })\n      );\n    });\n\n    test('debe asignar severidad HIGH para acceso no autorizado', async () => {\n      await logDataAccess(\n        'unauthorized_access',\n        'sensitive_data',\n        AuditResult.UNAUTHORIZED,\n        'user-123',\n        { ip: '192.168.1.1', userAgent: 'Chrome' }\n      );\n\n      expect(mockSupabaseInsert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          severity: 'high'\n        })\n      );\n    });\n  });\n\n  describe('Compliance flags', () => {\n    test('debe incluir flags de compliance apropiados', async () => {\n      // Evento de autenticación\n      await logAuthentication('login', AuditResult.SUCCESS, 'user-1');\n      expect(mockSupabaseInsert).toHaveBeenLastCalledWith(\n        expect.objectContaining({\n          compliance_flags: ['ISO27001', 'AUTHENTICATION_LOG']\n        })\n      );\n\n      // Evento de pago\n      await logPaymentEvent('payment', AuditResult.SUCCESS, {}, 'user-2');\n      expect(mockSupabaseInsert).toHaveBeenLastCalledWith(\n        expect.objectContaining({\n          compliance_flags: ['ISO27001', 'PAYMENT_LOG', 'FINANCIAL_COMPLIANCE']\n        })\n      );\n\n      // Violación de seguridad\n      await logSecurityViolation('attack', 'details', { ip: '1.1.1.1', userAgent: 'bot' });\n      expect(mockSupabaseInsert).toHaveBeenLastCalledWith(\n        expect.objectContaining({\n          compliance_flags: ['ISO27001', 'SECURITY_INCIDENT', 'IMMEDIATE_ALERT']\n        })\n      );\n    });\n  });\n});\n"],"names":["jest","mock","logger","audit","fn","security","error","LogLevel","INFO","ERROR","LogCategory","SYSTEM","getSupabaseClient","from","mockSupabaseFrom","mockSupabaseInsert","mockSupabaseSelect","insert","select","describe","auditManager","beforeEach","clearAllMocks","AuditTrailManager","mockResolvedValue","data","test","instance1","getInstance","instance2","expect","toBe","eventData","userId","action","resource","category","AuditCategory","AUTHENTICATION","severity","AuditSeverity","LOW","result","AuditResult","SUCCESS","ipAddress","userAgent","logEvent","toHaveBeenCalledTimes","call1","calls","call2","id","not","toMatch","toHaveBeenCalledWith","objectContaining","hash","stringMatching","MEDIUM","metadata","extra","user_id","ip_address","user_agent","message","resolves","toThrow","logAuthentication","sessionId","ip","compliance_flags","logPaymentEvent","orderId","paymentId","amount","currency","method","complianceRequired","logSecurityViolation","attemptedResource","details","alertRequired","logDataAccess","recordsAccessed","logAdminAction","oldRole","newRole","FAILURE","undefined","reason","UNAUTHORIZED","toHaveBeenLastCalledWith"],"mappings":"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"}