{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - API DE PRODUCTOS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/supabase';\r\nimport { validateData, ProductFiltersSchema, ProductSchema } from '@/lib/validations';\r\nimport { ApiResponse, PaginatedResponse, ProductWithCategory } from '@/types/api';\r\n\r\n// ===================================\r\n// GET /api/products - Obtener productos con filtros\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer parámetros de query\r\n    const queryParams = {\r\n      category: searchParams.get('category') || undefined,\r\n      brand: searchParams.get('brand') || undefined,\r\n      priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,\r\n      priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,\r\n      search: searchParams.get('search') || undefined,\r\n      page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,\r\n      limit: searchParams.get('limit') ? Number(searchParams.get('limit')) : 12,\r\n      sortBy: searchParams.get('sortBy') as 'price' | 'name' | 'created_at' | 'brand' || 'created_at',\r\n      sortOrder: searchParams.get('sortOrder') as 'asc' | 'desc' || 'desc',\r\n    };\r\n\r\n    // Validar parámetros\r\n    const filters = validateData(ProductFiltersSchema, queryParams);\r\n    \r\n    const supabase = getSupabaseClient();\r\n\r\n    // Verificar que el cliente de Supabase esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/products');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Construir query base\r\n    let query = supabase\r\n      .from('products')\r\n      .select(`\r\n        *,\r\n        category:categories(id, name, slug)\r\n      `, { count: 'exact' });\r\n\r\n    // Aplicar filtros\r\n    if (filters.category) {\r\n      // Primero obtener el ID de la categoría por su slug\r\n      const { data: categoryData } = await supabase\r\n        .from('categories')\r\n        .select('id')\r\n        .eq('slug', filters.category)\r\n        .single();\r\n\r\n      if (categoryData) {\r\n        query = query.eq('category_id', categoryData.id);\r\n      }\r\n    }\r\n\r\n    if (filters.brand) {\r\n      query = query.eq('brand', filters.brand);\r\n    }\r\n\r\n    if (filters.priceMin) {\r\n      query = query.gte('price', filters.priceMin);\r\n    }\r\n\r\n    if (filters.priceMax) {\r\n      query = query.lte('price', filters.priceMax);\r\n    }\r\n\r\n    if (filters.search) {\r\n      query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,brand.ilike.%${filters.search}%`);\r\n    }\r\n\r\n    // Solo productos con stock (temporalmente comentado para testing)\r\n    // query = query.gt('stock', 0);\r\n\r\n    // Ordenamiento\r\n    const orderColumn = filters.sortBy === 'created_at' ? 'created_at' :\r\n                       filters.sortBy === 'brand' ? 'brand' :\r\n                       (filters.sortBy || 'created_at');\r\n    query = query.order(orderColumn, { ascending: filters.sortOrder === 'asc' });\r\n\r\n    // Paginación\r\n    const page = filters.page || 1;\r\n    const limit = filters.limit || 10;\r\n    const from = (page - 1) * limit;\r\n    const to = from + limit - 1;\r\n    query = query.range(from, to);\r\n\r\n    // Ejecutar query\r\n    const { data: products, error, count } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error en GET /api/products - Supabase:', error);\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error obteniendo productos de la base de datos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Calcular información de paginación\r\n    const totalPages = Math.ceil((count || 0) / limit);\r\n\r\n    const response: PaginatedResponse<ProductWithCategory> = {\r\n      data: products || [],\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total: count || 0,\r\n        totalPages,\r\n      },\r\n      success: true,\r\n      message: `${products?.length || 0} productos encontrados`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en GET /api/products:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST /api/products - Crear producto (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // TODO: Verificar permisos de administrador\r\n    // const { userId } = auth();\r\n    // if (!userId || !isAdmin(userId)) {\r\n    //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });\r\n    // }\r\n\r\n    const body = await request.json();\r\n    \r\n    // Validar datos del producto\r\n    const productData = validateData(ProductSchema, body);\r\n    \r\n    const supabase = getSupabaseClient(true); // Usar cliente admin\r\n\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/products');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio administrativo no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Crear slug si no se proporciona\r\n    if (!productData.slug) {\r\n      productData.slug = productData.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9]+/g, '-')\r\n        .replace(/(^-|-$)/g, '');\r\n    }\r\n\r\n    // Insertar producto\r\n    const { data: product, error } = await supabase\r\n      .from('products')\r\n      .insert(productData)\r\n      .select(`\r\n        *,\r\n        category:categories(id, name, slug)\r\n      `)\r\n      .single();\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'POST /api/products');\r\n    }\r\n\r\n    const response: ApiResponse<ProductWithCategory> = {\r\n      data: product,\r\n      success: true,\r\n      message: 'Producto creado exitosamente',\r\n    };\r\n\r\n    return NextResponse.json(response, { status: 201 });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en POST /api/products:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n"],"names":["GET","POST","request","searchParams","URL","url","queryParams","category","get","undefined","brand","priceMin","Number","priceMax","search","page","limit","sortBy","sortOrder","filters","validateData","ProductFiltersSchema","supabase","getSupabaseClient","console","error","errorResponse","data","success","NextResponse","json","status","query","from","select","count","categoryData","eq","single","id","gte","lte","or","orderColumn","order","ascending","to","range","products","message","totalPages","Math","ceil","response","pagination","total","length","body","productData","ProductSchema","slug","name","toLowerCase","replace","product","insert","handleSupabaseError"],"mappings":"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"}