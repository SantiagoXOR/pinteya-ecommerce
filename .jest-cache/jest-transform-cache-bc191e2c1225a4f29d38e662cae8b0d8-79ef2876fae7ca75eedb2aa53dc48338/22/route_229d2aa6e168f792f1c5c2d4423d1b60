72ac14e4fe760c8077030fef9c5a51f1
// ===================================
// PINTEYA E-COMMERCE - API DE PRODUCTOS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _supabase = require("../../../lib/supabase");
const _validations = require("../../../lib/validations");
async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        // Extraer parámetros de query
        const queryParams = {
            category: searchParams.get('category') || undefined,
            brand: searchParams.get('brand') || undefined,
            priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,
            priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,
            search: searchParams.get('search') || undefined,
            page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,
            limit: searchParams.get('limit') ? Number(searchParams.get('limit')) : 12,
            sortBy: searchParams.get('sortBy') || 'created_at',
            sortOrder: searchParams.get('sortOrder') || 'desc'
        };
        // Validar parámetros
        const filters = (0, _validations.validateData)(_validations.ProductFiltersSchema, queryParams);
        const supabase = (0, _supabase.getSupabaseClient)();
        // Verificar que el cliente de Supabase esté disponible
        if (!supabase) {
            console.error('Cliente de Supabase no disponible en GET /api/products');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio de base de datos no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Construir query base
        let query = supabase.from('products').select(`
        *,
        category:categories(id, name, slug)
      `, {
            count: 'exact'
        });
        // Aplicar filtros
        if (filters.category) {
            // Primero obtener el ID de la categoría por su slug
            const { data: categoryData } = await supabase.from('categories').select('id').eq('slug', filters.category).single();
            if (categoryData) {
                query = query.eq('category_id', categoryData.id);
            }
        }
        if (filters.brand) {
            query = query.eq('brand', filters.brand);
        }
        if (filters.priceMin) {
            query = query.gte('price', filters.priceMin);
        }
        if (filters.priceMax) {
            query = query.lte('price', filters.priceMax);
        }
        if (filters.search) {
            query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,brand.ilike.%${filters.search}%`);
        }
        // Solo productos con stock (temporalmente comentado para testing)
        // query = query.gt('stock', 0);
        // Ordenamiento
        const orderColumn = filters.sortBy === 'created_at' ? 'created_at' : filters.sortBy === 'brand' ? 'brand' : filters.sortBy || 'created_at';
        query = query.order(orderColumn, {
            ascending: filters.sortOrder === 'asc'
        });
        // Paginación
        const page = filters.page || 1;
        const limit = filters.limit || 10;
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        query = query.range(from, to);
        // Ejecutar query
        const { data: products, error, count } = await query;
        if (error) {
            console.error('Error en GET /api/products - Supabase:', error);
            const errorResponse = {
                data: null,
                success: false,
                error: error.message || 'Error obteniendo productos de la base de datos'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
        // Calcular información de paginación
        const totalPages = Math.ceil((count || 0) / limit);
        const response = {
            data: products || [],
            pagination: {
                page,
                limit,
                total: count || 0,
                totalPages
            },
            success: true,
            message: `${products?.length || 0} productos encontrados`
        };
        return _server.NextResponse.json(response);
    } catch (error) {
        console.error('Error en GET /api/products:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        // TODO: Verificar permisos de administrador
        // const { userId } = auth();
        // if (!userId || !isAdmin(userId)) {
        //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
        // }
        const body = await request.json();
        // Validar datos del producto
        const productData = (0, _validations.validateData)(_validations.ProductSchema, body);
        const supabase = (0, _supabase.getSupabaseClient)(true); // Usar cliente admin
        // Verificar que el cliente administrativo esté disponible
        if (!supabase) {
            console.error('Cliente administrativo de Supabase no disponible en POST /api/products');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio administrativo no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Crear slug si no se proporciona
        if (!productData.slug) {
            productData.slug = productData.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
        }
        // Insertar producto
        const { data: product, error } = await supabase.from('products').insert(productData).select(`
        *,
        category:categories(id, name, slug)
      `).single();
        if (error) {
            (0, _supabase.handleSupabaseError)(error, 'POST /api/products');
        }
        const response = {
            data: product,
            success: true,
            message: 'Producto creado exitosamente'
        };
        return _server.NextResponse.json(response, {
            status: 201
        });
    } catch (error) {
        console.error('Error en POST /api/products:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,