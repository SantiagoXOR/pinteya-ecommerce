037b13de56fcaea9fc27fd5432ad3233
// ===================================
// PINTEYA E-COMMERCE - CART HOOK WITH CLERK INTEGRATION
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useCart: function() {
        return useCart;
    },
    useCartWithClerk: function() {
        return useCartWithClerk;
    }
});
const _react = require("react");
const _nextjs = require("@clerk/nextjs");
const _store = require("../redux/store");
const _cartslice = require("../redux/features/cart-slice");
const _cartPersistence = require("../redux/middleware/cartPersistence");
const useCartWithClerk = ()=>{
    const { user, isLoaded } = (0, _nextjs.useUser)();
    const dispatch = (0, _store.useAppDispatch)();
    const cartItems = (0, _store.useAppSelector)(_cartslice.selectCartItems);
    // Función para migrar carrito temporal a usuario autenticado
    const migrateCart = (0, _react.useCallback)(async (userId)=>{
        try {
            // Obtener items del localStorage
            const temporaryItems = (0, _cartPersistence.loadCartFromStorage)();
            if (temporaryItems.length > 0) {
                // Migrar items al backend (implementación futura)
                const migrationSuccess = await (0, _cartPersistence.migrateTemporaryCart)(temporaryItems, userId);
                if (migrationSuccess) {
                    // Limpiar localStorage después de migración exitosa
                    (0, _cartPersistence.clearCartFromStorage)();
                }
            }
            // Cargar carrito del usuario desde el backend (implementación futura)
            const userCartItems = await (0, _cartPersistence.loadUserCart)(userId);
            // Si hay items del usuario, reemplazar el carrito actual
            if (userCartItems.length > 0) {
                dispatch((0, _cartslice.replaceCart)(userCartItems));
            }
        } catch (error) {
            console.error('Error during cart migration:', error);
        }
    }, [
        dispatch
    ]);
    // Función para guardar carrito del usuario autenticado
    const saveCart = (0, _react.useCallback)(async (userId)=>{
        try {
            if (cartItems.length > 0) {
                await (0, _cartPersistence.saveUserCart)(userId, cartItems);
            }
        } catch (error) {
            console.error('Error saving user cart:', error);
        }
    }, [
        cartItems
    ]);
    // Efecto para manejar cambios en el estado de autenticación
    (0, _react.useEffect)(()=>{
        if (!isLoaded) return;
        if (user) {
            // Usuario autenticado - migrar carrito temporal si existe
            migrateCart(user.id);
        } else {
            // Usuario no autenticado - cargar desde localStorage
            const persistedItems = (0, _cartPersistence.loadCartFromStorage)();
            if (persistedItems.length > 0) {
                dispatch((0, _cartslice.hydrateCart)(persistedItems));
            }
        }
    }, [
        user,
        isLoaded,
        dispatch,
        migrateCart
    ]);
    // Efecto para guardar carrito de usuario autenticado cuando cambie
    (0, _react.useEffect)(()=>{
        if (!isLoaded || !user) return;
        // Debounce para evitar guardados excesivos
        const timeoutId = setTimeout(()=>{
            saveCart(user.id);
        }, 1000);
        return ()=>clearTimeout(timeoutId);
    }, [
        cartItems,
        user,
        isLoaded,
        saveCart
    ]);
    // Función para limpiar carrito al cerrar sesión
    const handleSignOut = (0, _react.useCallback)(()=>{
        dispatch((0, _cartslice.removeAllItemsFromCart)());
        (0, _cartPersistence.clearCartFromStorage)();
    }, [
        dispatch
    ]);
    return {
        isAuthenticated: !!user,
        userId: user?.id,
        cartItems,
        migrateCart,
        saveCart,
        handleSignOut
    };
};
const useCart = ()=>{
    const cartItems = (0, _store.useAppSelector)(_cartslice.selectCartItems);
    const dispatch = (0, _store.useAppDispatch)();
    return {
        cartItems,
        dispatch
    };
};

//# sourceMappingURL=data:application/json;base64,