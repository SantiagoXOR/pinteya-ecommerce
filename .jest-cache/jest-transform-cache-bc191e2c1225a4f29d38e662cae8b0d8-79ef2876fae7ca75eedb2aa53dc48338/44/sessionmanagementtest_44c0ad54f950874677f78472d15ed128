d31e6699aa44f6f52b441a24d0682f76
/**
 * Tests para el sistema de gestión avanzada de sesiones
 * Verifica creación, actualización, invalidación y cleanup de sesiones
 */ // Mock de Clerk
"use strict";
jest.mock('@clerk/nextjs/server', ()=>({
        clerkClient: jest.fn(()=>({
                users: {
                    getUserList: jest.fn()
                },
                sessions: {
                    getSession: jest.fn()
                }
            }))
    }));
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn(),
                                    order: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                })),
                            or: jest.fn(()=>({
                                    single: jest.fn()
                                })),
                            order: jest.fn(()=>({}))
                        })),
                    insert: jest.fn(()=>({
                            select: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                }))
                        }))
                }))
        }
    }));
// Mock de cache manager
jest.mock('@/lib/cache-manager', ()=>({
        CacheManager: {
            getInstance: jest.fn(()=>({
                    get: jest.fn(),
                    set: jest.fn(),
                    delete: jest.fn()
                }))
        },
        CACHE_CONFIGS: {
            USER_SESSION: {
                ttl: 600
            }
        }
    }));
// Mock de auditoría de seguridad
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn(),
        logAdminAction: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _sessionmanagement = require("../lib/auth/session-management");
const _supabase = require("../lib/supabase");
const _server = require("@clerk/nextjs/server");
describe('Sistema de Gestión de Sesiones', ()=>{
    let mockSupabase;
    let mockClerkClient;
    beforeEach(()=>{
        mockSupabase = _supabase.supabaseAdmin;
        mockClerkClient = _server.clerkClient;
        jest.clearAllMocks();
    });
    const mockSessionData = {
        id: 'sess_123',
        user_id: 'user_123',
        clerk_session_id: 'sess_clerk_123',
        status: 'active',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
        expires_at: '2024-01-02T00:00:00Z',
        last_activity: '2024-01-01T12:00:00Z',
        ip_address: '192.168.1.1',
        user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        device_info: {
            type: 'desktop',
            os: 'Windows',
            browser: 'Chrome'
        },
        metadata: {
            login_method: 'clerk',
            timezone: 'UTC'
        }
    };
    describe('createSession', ()=>{
        it('debe crear una nueva sesión exitosamente', async ()=>{
            // Simplificar mocks
            const mockChain = {
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                single: jest.fn().mockReturnThis(),
                insert: jest.fn().mockReturnThis()
            };
            mockChain.eq.mockResolvedValueOnce({
                data: [],
                error: null
            }); // Sesiones existentes
            mockChain.single.mockResolvedValueOnce({
                data: mockSessionData,
                error: null
            }); // Nueva sesión
            mockSupabase.from.mockReturnValue(mockChain);
            const result = await (0, _sessionmanagement.createSession)('user_123', 'sess_clerk_123');
            expect(result.success).toBe(true);
            expect(result.action).toBe('created');
        });
        it('debe manejar errores de creación', async ()=>{
            const mockChain = {
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                single: jest.fn().mockReturnThis(),
                insert: jest.fn().mockReturnThis()
            };
            mockChain.eq.mockResolvedValueOnce({
                data: [],
                error: null
            }); // Sesiones existentes
            mockChain.single.mockResolvedValueOnce({
                data: null,
                error: {
                    message: 'Error de base de datos'
                }
            }); // Error en inserción
            mockSupabase.from.mockReturnValue(mockChain);
            const result = await (0, _sessionmanagement.createSession)('user_123', 'sess_clerk_123');
            expect(result.success).toBe(false);
            expect(result.action).toBe('error');
        });
    });
    describe('Funciones básicas', ()=>{
        it('debe tener funciones principales definidas', ()=>{
            expect(typeof _sessionmanagement.createSession).toBe('function');
            expect(typeof _sessionmanagement.updateSession).toBe('function');
            expect(typeof _sessionmanagement.invalidateSession).toBe('function');
            expect(typeof _sessionmanagement.getUserSessions).toBe('function');
            expect(typeof _sessionmanagement.getSessionInfo).toBe('function');
            expect(typeof _sessionmanagement.isSessionValid).toBe('function');
            expect(typeof _sessionmanagement.updateSessionActivity).toBe('function');
            expect(typeof _sessionmanagement.cleanupExpiredSessions).toBe('function');
            expect(typeof _sessionmanagement.getSessionStats).toBe('function');
        });
        it('debe manejar errores gracefully', async ()=>{
            // Test que las funciones no lanzan excepciones no manejadas
            const result = await (0, _sessionmanagement.createSession)('', '');
            expect(result).toBeDefined();
            expect(typeof result.success).toBe('boolean');
        });
    });
    describe('invalidateSession', ()=>{
        it('debe invalidar una sesión exitosamente', async ()=>{
            const invalidatedSession = {
                ...mockSessionData,
                status: 'revoked'
            };
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: invalidatedSession,
                error: null
            });
            const result = await (0, _sessionmanagement.invalidateSession)('sess_clerk_123', 'manual_logout');
            expect(result.success).toBe(true);
            expect(result.action).toBe('deleted');
        });
        it('debe manejar sesión ya invalidada', async ()=>{
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            const result = await (0, _sessionmanagement.invalidateSession)('sess_already_invalid');
            expect(result.success).toBe(true);
            expect(result.action).toBe('found_existing');
        });
    });
    describe('getUserSessions', ()=>{
        it('debe obtener sesiones de usuario desde cache', async ()=>{
            const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();
            mockCache.get.mockResolvedValue([
                mockSessionData
            ]);
            const sessions = await (0, _sessionmanagement.getUserSessions)('user_123');
            expect(sessions).toHaveLength(1);
            expect(mockCache.get).toHaveBeenCalled();
        });
        it('debe obtener sesiones de base de datos si no hay cache', async ()=>{
            const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();
            mockCache.get.mockResolvedValue(null);
            // Mock chain más específico
            const mockOrder = jest.fn().mockResolvedValue({
                data: [
                    mockSessionData
                ],
                error: null
            });
            const mockEq2 = jest.fn().mockReturnValue({
                order: mockOrder
            });
            const mockEq1 = jest.fn().mockReturnValue({
                eq: mockEq2
            });
            const mockSelect = jest.fn().mockReturnValue({
                eq: mockEq1
            });
            mockSupabase.from.mockReturnValue({
                select: mockSelect
            });
            const sessions = await (0, _sessionmanagement.getUserSessions)('user_123');
            expect(sessions).toHaveLength(1);
            expect(mockCache.set).toHaveBeenCalled();
        });
    });
    describe('getSessionInfo', ()=>{
        it('debe obtener información de sesión', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: mockSessionData,
                error: null
            });
            const session = await (0, _sessionmanagement.getSessionInfo)('sess_clerk_123');
            expect(session).toEqual(mockSessionData);
        });
        it('debe retornar null para sesión no encontrada', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            const session = await (0, _sessionmanagement.getSessionInfo)('sess_not_found');
            expect(session).toBeNull();
        });
    });
    describe('isSessionValid', ()=>{
        it('debe validar sesión activa y no expirada', async ()=>{
            const validSession = {
                ...mockSessionData,
                status: 'active',
                expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                last_activity: new Date().toISOString()
            };
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: validSession,
                error: null
            });
            const isValid = await (0, _sessionmanagement.isSessionValid)('sess_clerk_123');
            expect(isValid).toBe(true);
        });
        it('debe invalidar sesión expirada', async ()=>{
            const expiredSession = {
                ...mockSessionData,
                status: 'active',
                expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
                last_activity: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()
            };
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: expiredSession,
                error: null
            });
            // Mock para invalidateSession
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    ...expiredSession,
                    status: 'revoked'
                },
                error: null
            });
            const isValid = await (0, _sessionmanagement.isSessionValid)('sess_clerk_123');
            expect(isValid).toBe(false);
        });
    });
    describe('updateSessionActivity', ()=>{
        it('debe actualizar actividad de sesión', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: mockSessionData,
                error: null
            });
            mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({
                data: {
                    ...mockSessionData,
                    last_activity: new Date().toISOString()
                },
                error: null
            });
            const result = await (0, _sessionmanagement.updateSessionActivity)('sess_clerk_123', {
                last_page: '/dashboard'
            });
            expect(result).toBe(true);
        });
    });
    describe('cleanupExpiredSessions', ()=>{
        it('debe limpiar sesiones expiradas', async ()=>{
            const expiredSessions = [
                {
                    ...mockSessionData,
                    id: 'sess_1',
                    expires_at: '2023-01-01T00:00:00Z'
                },
                {
                    ...mockSessionData,
                    id: 'sess_2',
                    last_activity: '2023-01-01T00:00:00Z'
                }
            ];
            mockSupabase.from().select().eq().or.mockResolvedValue({
                data: expiredSessions,
                error: null
            });
            mockClerkClient.mockReturnValue({
                sessions: {
                    getSession: jest.fn().mockRejectedValue(new Error('Session not found'))
                }
            });
            mockSupabase.from().update().eq.mockResolvedValue({
                error: null
            });
            const result = await (0, _sessionmanagement.cleanupExpiredSessions)();
            expect(result.success).toBe(true);
            expect(result.cleaned).toBe(2);
        });
    });
    describe('getSessionStats', ()=>{
        it('debe obtener estadísticas de sesiones', async ()=>{
            const sessions = [
                {
                    status: 'active',
                    device_info: {
                        type: 'desktop'
                    }
                },
                {
                    status: 'active',
                    device_info: {
                        type: 'mobile'
                    }
                },
                {
                    status: 'expired',
                    device_info: {
                        type: 'desktop'
                    }
                }
            ];
            mockSupabase.from().select.mockResolvedValue({
                data: sessions,
                error: null
            });
            const stats = await (0, _sessionmanagement.getSessionStats)();
            expect(stats.total).toBe(3);
            expect(stats.active).toBe(2);
            expect(stats.expired).toBe(1);
            expect(stats.byDevice.desktop).toBe(2);
            expect(stats.byDevice.mobile).toBe(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,