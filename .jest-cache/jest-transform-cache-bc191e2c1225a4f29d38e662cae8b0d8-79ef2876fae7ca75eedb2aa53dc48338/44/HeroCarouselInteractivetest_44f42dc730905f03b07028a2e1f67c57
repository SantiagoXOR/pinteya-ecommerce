fd7e6efe88c9bd246c34f3298805aeae
"use strict";
// Mock del hook useHeroCarousel
jest.mock('@/hooks/useHeroCarousel', ()=>({
        useHeroCarousel: jest.fn(()=>({
                currentIndex: 0,
                isPlaying: true,
                isPaused: false,
                goToSlide: jest.fn(),
                goToNext: jest.fn(),
                goToPrevious: jest.fn(),
                pause: jest.fn(),
                resume: jest.fn(),
                setHover: jest.fn()
            }))
    }));
// Mock de Next.js Image
jest.mock('next/image', ()=>{
    return function MockImage({ src, alt, width, height, className }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            width: width,
            height: height,
            className: className
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _HeroCarouselInteractive = /*#__PURE__*/ _interop_require_default(require("../../components/Home/Hero/HeroCarouselInteractive"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('HeroCarouselInteractive', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('should render without crashing', ()=>{
        expect(()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        }).not.toThrow();
    });
    it('should render all carousel images', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        // Verificar que se renderizan las 3 imágenes
        const images = _react1.screen.getAllByRole('img');
        expect(images).toHaveLength(3);
        // Verificar que las imágenes tienen los alt texts correctos
        expect(_react1.screen.getByAltText(/Pintá rápido, fácil y cotiza al instante - Promoción principal/i)).toBeInTheDocument();
        expect(_react1.screen.getByAltText(/Ofertas especiales en pintura y ferretería/i)).toBeInTheDocument();
        expect(_react1.screen.getByAltText(/Productos de calidad para tu hogar/i)).toBeInTheDocument();
    });
    it('should render navigation controls', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        // Verificar botones de navegación
        const prevButton = _react1.screen.getByLabelText(/Imagen anterior/i);
        const nextButton = _react1.screen.getByLabelText(/Imagen siguiente/i);
        expect(prevButton).toBeInTheDocument();
        expect(nextButton).toBeInTheDocument();
    });
    it('should render dot indicators', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        // Verificar que se renderizan 3 indicadores (dots)
        const dots = _react1.screen.getAllByRole('button').filter((button)=>button.getAttribute('aria-label')?.includes('Ir a imagen'));
        expect(dots).toHaveLength(3);
    });
    it('should call navigation functions when buttons are clicked', ()=>{
        const mockGoToNext = jest.fn();
        const mockGoToPrevious = jest.fn();
        const { useHeroCarousel } = require('@/hooks/useHeroCarousel');
        useHeroCarousel.mockReturnValue({
            currentIndex: 0,
            isPlaying: true,
            isPaused: false,
            goToSlide: jest.fn(),
            goToNext: mockGoToNext,
            goToPrevious: mockGoToPrevious,
            pause: jest.fn(),
            resume: jest.fn(),
            setHover: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        const prevButton = _react1.screen.getByLabelText(/Imagen anterior/i);
        const nextButton = _react1.screen.getByLabelText(/Imagen siguiente/i);
        _react1.fireEvent.click(nextButton);
        expect(mockGoToNext).toHaveBeenCalledTimes(1);
        _react1.fireEvent.click(prevButton);
        expect(mockGoToPrevious).toHaveBeenCalledTimes(1);
    });
    it('should call goToSlide when dot indicators are clicked', ()=>{
        const mockGoToSlide = jest.fn();
        const { useHeroCarousel } = require('@/hooks/useHeroCarousel');
        useHeroCarousel.mockReturnValue({
            currentIndex: 0,
            isPlaying: true,
            isPaused: false,
            goToSlide: mockGoToSlide,
            goToNext: jest.fn(),
            goToPrevious: jest.fn(),
            pause: jest.fn(),
            resume: jest.fn(),
            setHover: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        const secondDot = _react1.screen.getByLabelText(/Ir a imagen 2/i);
        _react1.fireEvent.click(secondDot);
        expect(mockGoToSlide).toHaveBeenCalledWith(1);
    });
    it('should handle hover events', ()=>{
        const mockSetHover = jest.fn();
        const { useHeroCarousel } = require('@/hooks/useHeroCarousel');
        useHeroCarousel.mockReturnValue({
            currentIndex: 0,
            isPlaying: true,
            isPaused: false,
            goToSlide: jest.fn(),
            goToNext: jest.fn(),
            goToPrevious: jest.fn(),
            pause: jest.fn(),
            resume: jest.fn(),
            setHover: mockSetHover
        });
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        const carousel = container.querySelector('.hero-carousel-container');
        if (carousel) {
            _react1.fireEvent.mouseEnter(carousel);
            expect(mockSetHover).toHaveBeenCalledWith(true);
            _react1.fireEvent.mouseLeave(carousel);
            expect(mockSetHover).toHaveBeenCalledWith(false);
        }
    });
    it('should apply correct CSS classes', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {
            className: "custom-class"
        }));
        const carousel = container.querySelector('.hero-carousel-container');
        expect(carousel).toHaveClass('hero-carousel-container');
        expect(carousel).toHaveClass('custom-class');
    });
    it('should show progress indicator', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        // Verificar que existe el indicador de progreso
        const progressContainer = container.querySelector('.hero-carousel-progress');
        expect(progressContainer).toBeInTheDocument();
    });
    it('should have proper accessibility attributes', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        // Verificar aria-labels en botones
        expect(_react1.screen.getByLabelText(/Imagen anterior/i)).toBeInTheDocument();
        expect(_react1.screen.getByLabelText(/Imagen siguiente/i)).toBeInTheDocument();
        // Verificar aria-current en dots
        const firstDot = _react1.screen.getByLabelText(/Ir a imagen 1/i);
        expect(firstDot).toHaveAttribute('aria-current', 'true');
    });
    it('should disable navigation buttons when there is only one image', ()=>{
        // Mock para simular solo una imagen
        jest.doMock('@/components/Home/Hero/HeroCarouselInteractive', ()=>{
            const originalModule = jest.requireActual('@/components/Home/Hero/HeroCarouselInteractive');
            return {
                ...originalModule,
                HERO_IMAGES: [
                    {
                        src: '/images/hero/hero-01.png',
                        alt: 'Single image',
                        priority: true
                    }
                ]
            };
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarouselInteractive.default, {}));
        const prevButton = _react1.screen.getByLabelText(/Imagen anterior/i);
        const nextButton = _react1.screen.getByLabelText(/Imagen siguiente/i);
        // Los botones deberían estar deshabilitados cuando hay solo una imagen
        // Nota: Esta funcionalidad se implementa en el componente real
        expect(prevButton).toBeInTheDocument();
        expect(nextButton).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,