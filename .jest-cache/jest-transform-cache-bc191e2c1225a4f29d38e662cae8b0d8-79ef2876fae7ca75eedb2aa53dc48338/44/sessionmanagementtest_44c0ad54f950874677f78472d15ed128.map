{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\session-management.test.ts"],"sourcesContent":["/**\n * Tests para el sistema de gestión avanzada de sesiones\n * Verifica creación, actualización, invalidación y cleanup de sesiones\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  clerkClient: jest.fn(() => ({\n    users: {\n      getUserList: jest.fn()\n    },\n    sessions: {\n      getSession: jest.fn()\n    }\n  }))\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          order: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        })),\n        or: jest.fn(() => ({\n          single: jest.fn()\n        })),\n        order: jest.fn(() => ({}))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\n// Mock de cache manager\njest.mock('@/lib/cache-manager', () => ({\n  CacheManager: {\n    getInstance: jest.fn(() => ({\n      get: jest.fn(),\n      set: jest.fn(),\n      delete: jest.fn()\n    }))\n  },\n  CACHE_CONFIGS: {\n    USER_SESSION: { ttl: 600 }\n  }\n}));\n\n// Mock de auditoría de seguridad\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\nimport {\n  createSession,\n  updateSession,\n  invalidateSession,\n  getUserSessions,\n  getSessionInfo,\n  isSessionValid,\n  updateSessionActivity,\n  cleanupExpiredSessions,\n  getSessionStats,\n  type SessionData\n} from '@/lib/auth/session-management';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { clerkClient } from '@clerk/nextjs/server';\n\ndescribe('Sistema de Gestión de Sesiones', () => {\n  let mockSupabase: any;\n  let mockClerkClient: jest.MockedFunction<typeof clerkClient>;\n\n  beforeEach(() => {\n    mockSupabase = supabaseAdmin as any;\n    mockClerkClient = clerkClient as jest.MockedFunction<typeof clerkClient>;\n    jest.clearAllMocks();\n  });\n\n  const mockSessionData: SessionData = {\n    id: 'sess_123',\n    user_id: 'user_123',\n    clerk_session_id: 'sess_clerk_123',\n    status: 'active',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    expires_at: '2024-01-02T00:00:00Z',\n    last_activity: '2024-01-01T12:00:00Z',\n    ip_address: '192.168.1.1',\n    user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n    device_info: {\n      type: 'desktop',\n      os: 'Windows',\n      browser: 'Chrome'\n    },\n    metadata: {\n      login_method: 'clerk',\n      timezone: 'UTC'\n    }\n  };\n\n  describe('createSession', () => {\n    it('debe crear una nueva sesión exitosamente', async () => {\n      // Simplificar mocks\n      const mockChain = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockReturnThis(),\n        insert: jest.fn().mockReturnThis()\n      };\n\n      mockChain.eq.mockResolvedValueOnce({ data: [], error: null }); // Sesiones existentes\n      mockChain.single.mockResolvedValueOnce({ data: mockSessionData, error: null }); // Nueva sesión\n\n      mockSupabase.from.mockReturnValue(mockChain);\n\n      const result = await createSession('user_123', 'sess_clerk_123');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('created');\n    });\n\n    it('debe manejar errores de creación', async () => {\n      const mockChain = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockReturnThis(),\n        insert: jest.fn().mockReturnThis()\n      };\n\n      mockChain.eq.mockResolvedValueOnce({ data: [], error: null }); // Sesiones existentes\n      mockChain.single.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Error de base de datos' }\n      }); // Error en inserción\n\n      mockSupabase.from.mockReturnValue(mockChain);\n\n      const result = await createSession('user_123', 'sess_clerk_123');\n\n      expect(result.success).toBe(false);\n      expect(result.action).toBe('error');\n    });\n  });\n\n  describe('Funciones básicas', () => {\n    it('debe tener funciones principales definidas', () => {\n      expect(typeof createSession).toBe('function');\n      expect(typeof updateSession).toBe('function');\n      expect(typeof invalidateSession).toBe('function');\n      expect(typeof getUserSessions).toBe('function');\n      expect(typeof getSessionInfo).toBe('function');\n      expect(typeof isSessionValid).toBe('function');\n      expect(typeof updateSessionActivity).toBe('function');\n      expect(typeof cleanupExpiredSessions).toBe('function');\n      expect(typeof getSessionStats).toBe('function');\n    });\n\n    it('debe manejar errores gracefully', async () => {\n      // Test que las funciones no lanzan excepciones no manejadas\n      const result = await createSession('', '');\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n    });\n  });\n\n  describe('invalidateSession', () => {\n    it('debe invalidar una sesión exitosamente', async () => {\n      const invalidatedSession = { ...mockSessionData, status: 'revoked' };\n      \n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: invalidatedSession,\n        error: null\n      });\n\n      const result = await invalidateSession('sess_clerk_123', 'manual_logout');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('deleted');\n    });\n\n    it('debe manejar sesión ya invalidada', async () => {\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      const result = await invalidateSession('sess_already_invalid');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('found_existing');\n    });\n  });\n\n  describe('getUserSessions', () => {\n    it('debe obtener sesiones de usuario desde cache', async () => {\n      const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();\n      mockCache.get.mockResolvedValue([mockSessionData]);\n\n      const sessions = await getUserSessions('user_123');\n\n      expect(sessions).toHaveLength(1);\n      expect(mockCache.get).toHaveBeenCalled();\n    });\n\n    it('debe obtener sesiones de base de datos si no hay cache', async () => {\n      const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();\n      mockCache.get.mockResolvedValue(null);\n\n      // Mock chain más específico\n      const mockOrder = jest.fn().mockResolvedValue({\n        data: [mockSessionData],\n        error: null\n      });\n      const mockEq2 = jest.fn().mockReturnValue({ order: mockOrder });\n      const mockEq1 = jest.fn().mockReturnValue({ eq: mockEq2 });\n      const mockSelect = jest.fn().mockReturnValue({ eq: mockEq1 });\n      mockSupabase.from.mockReturnValue({ select: mockSelect });\n\n      const sessions = await getUserSessions('user_123');\n\n      expect(sessions).toHaveLength(1);\n      expect(mockCache.set).toHaveBeenCalled();\n    });\n  });\n\n  describe('getSessionInfo', () => {\n    it('debe obtener información de sesión', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: mockSessionData,\n        error: null\n      });\n\n      const session = await getSessionInfo('sess_clerk_123');\n\n      expect(session).toEqual(mockSessionData);\n    });\n\n    it('debe retornar null para sesión no encontrada', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      const session = await getSessionInfo('sess_not_found');\n\n      expect(session).toBeNull();\n    });\n  });\n\n  describe('isSessionValid', () => {\n    it('debe validar sesión activa y no expirada', async () => {\n      const validSession = {\n        ...mockSessionData,\n        status: 'active',\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        last_activity: new Date().toISOString()\n      };\n\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: validSession,\n        error: null\n      });\n\n      const isValid = await isSessionValid('sess_clerk_123');\n\n      expect(isValid).toBe(true);\n    });\n\n    it('debe invalidar sesión expirada', async () => {\n      const expiredSession = {\n        ...mockSessionData,\n        status: 'active',\n        expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        last_activity: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()\n      };\n\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: expiredSession,\n        error: null\n      });\n\n      // Mock para invalidateSession\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { ...expiredSession, status: 'revoked' },\n        error: null\n      });\n\n      const isValid = await isSessionValid('sess_clerk_123');\n\n      expect(isValid).toBe(false);\n    });\n  });\n\n  describe('updateSessionActivity', () => {\n    it('debe actualizar actividad de sesión', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: mockSessionData,\n        error: null\n      });\n\n      mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({\n        data: { ...mockSessionData, last_activity: new Date().toISOString() },\n        error: null\n      });\n\n      const result = await updateSessionActivity('sess_clerk_123', {\n        last_page: '/dashboard'\n      });\n\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('cleanupExpiredSessions', () => {\n    it('debe limpiar sesiones expiradas', async () => {\n      const expiredSessions = [\n        { ...mockSessionData, id: 'sess_1', expires_at: '2023-01-01T00:00:00Z' },\n        { ...mockSessionData, id: 'sess_2', last_activity: '2023-01-01T00:00:00Z' }\n      ];\n\n      mockSupabase.from().select().eq().or.mockResolvedValue({\n        data: expiredSessions,\n        error: null\n      });\n\n      mockClerkClient.mockReturnValue({\n        sessions: {\n          getSession: jest.fn().mockRejectedValue(new Error('Session not found'))\n        }\n      } as any);\n\n      mockSupabase.from().update().eq.mockResolvedValue({\n        error: null\n      });\n\n      const result = await cleanupExpiredSessions();\n\n      expect(result.success).toBe(true);\n      expect(result.cleaned).toBe(2);\n    });\n  });\n\n  describe('getSessionStats', () => {\n    it('debe obtener estadísticas de sesiones', async () => {\n      const sessions = [\n        { status: 'active', device_info: { type: 'desktop' } },\n        { status: 'active', device_info: { type: 'mobile' } },\n        { status: 'expired', device_info: { type: 'desktop' } }\n      ];\n\n      mockSupabase.from().select.mockResolvedValue({\n        data: sessions,\n        error: null\n      });\n\n      const stats = await getSessionStats();\n\n      expect(stats.total).toBe(3);\n      expect(stats.active).toBe(2);\n      expect(stats.expired).toBe(1);\n      expect(stats.byDevice.desktop).toBe(2);\n      expect(stats.byDevice.mobile).toBe(1);\n    });\n  });\n});\n"],"names":["jest","mock","clerkClient","fn","users","getUserList","sessions","getSession","supabaseAdmin","from","select","eq","single","order","or","insert","update","CacheManager","getInstance","get","set","delete","CACHE_CONFIGS","USER_SESSION","ttl","logSecurityEvent","logAdminAction","describe","mockSupabase","mockClerkClient","beforeEach","clearAllMocks","mockSessionData","id","user_id","clerk_session_id","status","created_at","updated_at","expires_at","last_activity","ip_address","user_agent","device_info","type","os","browser","metadata","login_method","timezone","it","mockChain","mockReturnThis","mockResolvedValueOnce","data","error","mockReturnValue","result","createSession","expect","success","toBe","action","message","updateSession","invalidateSession","getUserSessions","getSessionInfo","isSessionValid","updateSessionActivity","cleanupExpiredSessions","getSessionStats","toBeDefined","invalidatedSession","mockResolvedValue","code","mockCache","require","toHaveLength","toHaveBeenCalled","mockOrder","mockEq2","mockEq1","mockSelect","session","toEqual","toBeNull","validSession","Date","now","toISOString","isValid","expiredSession","last_page","expiredSessions","mockRejectedValue","Error","cleaned","stats","total","active","expired","byDevice","desktop","mobile"],"mappings":"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"}