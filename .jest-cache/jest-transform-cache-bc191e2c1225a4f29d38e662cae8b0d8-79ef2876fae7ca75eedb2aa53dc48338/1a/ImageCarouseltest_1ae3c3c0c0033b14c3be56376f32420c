ecea37cb7f21839fb9986781fad4708b
"use strict";
// Mock de Swiper
jest.mock('swiper/react', ()=>({
        Swiper: ({ children, onSwiper, onSlideChange, ...props })=>{
            _react.default.useEffect(()=>{
                const mockSwiper = {
                    activeIndex: 0,
                    slidePrev: jest.fn(),
                    slideNext: jest.fn(),
                    slideTo: jest.fn(),
                    autoplay: {
                        start: jest.fn(),
                        stop: jest.fn()
                    }
                };
                onSwiper?.(mockSwiper);
            }, []);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "swiper-container",
                ...props,
                children: children
            });
        },
        SwiperSlide: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "swiper-slide",
                children: children
            })
    }));
jest.mock('swiper/modules', ()=>({
        Autoplay: {},
        Pagination: {},
        Navigation: {},
        EffectFade: {}
    }));
// Mock de Next.js Image
jest.mock('next/image', ()=>{
    return function MockImage({ src, alt, ...props }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            ...props,
            "data-testid": "carousel-image"
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _jestaxe = require("jest-axe");
const _ImageCarousel = /*#__PURE__*/ _interop_require_default(require("../../components/ui/ImageCarousel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Extender expect con jest-axe
expect.extend(_jestaxe.toHaveNoViolations);
// Datos de prueba
const mockImages = [
    {
        src: '/images/hero/hero-01.png',
        alt: 'Pintá rápido, fácil y cotiza al instante - Productos de pinturería premium',
        priority: true
    },
    {
        src: '/images/hero/hero-02.png',
        alt: 'Amplia gama de productos para pinturería y ferretería',
        priority: false
    },
    {
        src: '/images/hero/hero-03.png',
        alt: 'Herramientas y accesorios profesionales para pintura',
        priority: false
    }
];
describe('ImageCarousel', ()=>{
    const user = _userevent.default.setup();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Renderizado básico', ()=>{
        it('debe renderizar el carrusel con imágenes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            expect(_react1.screen.getByTestId('swiper-container')).toBeInTheDocument();
            expect(_react1.screen.getAllByTestId('carousel-image')).toHaveLength(mockImages.length);
        });
        it('debe mostrar mensaje cuando no hay imágenes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: []
            }));
            expect(_react1.screen.getByText('Sin imágenes disponibles')).toBeInTheDocument();
        });
        it('debe aplicar className personalizado', ()=>{
            const customClass = 'custom-carousel-class';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                className: customClass
            }));
            const container = _react1.screen.getByRole('region');
            expect(container).toHaveClass(customClass);
        });
    });
    describe('Accesibilidad', ()=>{
        it('debe tener atributos ARIA correctos', ()=>{
            const ariaLabel = 'Carrusel de productos Pinteya';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                ariaLabel: ariaLabel
            }));
            const carousel = _react1.screen.getByRole('region');
            expect(carousel).toHaveAttribute('aria-label', ariaLabel);
            expect(carousel).toHaveAttribute('aria-live', 'polite');
            expect(carousel).toHaveAttribute('tabIndex', '0');
        });
        it('debe mostrar botones de navegación con labels accesibles', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                showNavigation: true
            }));
            expect(_react1.screen.getByLabelText('Imagen anterior')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText('Imagen siguiente')).toBeInTheDocument();
        });
        it('debe mostrar indicador de slide actual para lectores de pantalla', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            const indicator = _react1.screen.getByText(/Imagen 1 de 3:/);
            expect(indicator).toHaveClass('sr-only');
            expect(indicator).toHaveAttribute('aria-live', 'polite');
        });
        it('no debe tener violaciones de accesibilidad', async ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            const results = await (0, _jestaxe.axe)(container);
            expect(results).toHaveNoViolations();
        });
    });
    describe('Navegación por teclado', ()=>{
        it('debe navegar con flechas del teclado', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            const carousel = _react1.screen.getByRole('region');
            carousel.focus();
            // Simular tecla flecha derecha
            await user.keyboard('{ArrowRight}');
            // Verificar que se llamó al método de navegación
            // (En un test real, verificaríamos el cambio de slide)
            expect(carousel).toHaveFocus();
        });
        it('debe ir al inicio con tecla Home', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            const carousel = _react1.screen.getByRole('region');
            carousel.focus();
            await user.keyboard('{Home}');
            expect(carousel).toHaveFocus();
        });
        it('debe ir al final con tecla End', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            const carousel = _react1.screen.getByRole('region');
            carousel.focus();
            await user.keyboard('{End}');
            expect(carousel).toHaveFocus();
        });
    });
    describe('Autoplay y hover', ()=>{
        it('debe mostrar indicador de autoplay cuando está activo', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                autoplay: true
            }));
            const indicator = _react1.screen.getByTitle('Autoplay activo');
            expect(indicator).toBeInTheDocument();
        });
        it('debe cambiar indicador en hover', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                autoplay: true,
                pauseOnHover: true
            }));
            const carousel = _react1.screen.getByRole('region');
            // Hover sobre el carrusel
            await user.hover(carousel);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTitle('Autoplay pausado')).toBeInTheDocument();
            });
        });
    });
    describe('Configuración responsive', ()=>{
        it('debe aplicar aspect ratio correcto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                aspectRatio: "square"
            }));
            const slides = _react1.screen.getAllByTestId('swiper-slide');
            slides.forEach((slide)=>{
                expect(slide.firstChild).toHaveClass('aspect-square');
            });
        });
        it('debe ocultar navegación en mobile cuando se especifica', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                showNavigation: false
            }));
            expect(_react1.screen.queryByLabelText('Imagen anterior')).not.toBeInTheDocument();
            expect(_react1.screen.queryByLabelText('Imagen siguiente')).not.toBeInTheDocument();
        });
    });
    describe('Estilos Pinteya', ()=>{
        it('debe aplicar colores de marca en controles', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                showNavigation: true
            }));
            const prevButton = _react1.screen.getByLabelText('Imagen anterior');
            const nextButton = _react1.screen.getByLabelText('Imagen siguiente');
            expect(prevButton).toHaveClass('text-blaze-orange-600');
            expect(nextButton).toHaveClass('text-blaze-orange-600');
        });
        it('debe aplicar estilos de foco con colores Pinteya', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                showNavigation: true
            }));
            const prevButton = _react1.screen.getByLabelText('Imagen anterior');
            expect(prevButton).toHaveClass('focus:ring-blaze-orange-500');
        });
    });
    describe('Callbacks y eventos', ()=>{
        it('debe llamar onSlideChange cuando cambia el slide', ()=>{
            const onSlideChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages,
                onSlideChange: onSlideChange
            }));
            // El callback se llama durante la inicialización
            expect(onSlideChange).toHaveBeenCalled();
        });
    });
    describe('Optimización de imágenes', ()=>{
        it('debe marcar la primera imagen con priority', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            const images = _react1.screen.getAllByTestId('carousel-image');
            expect(images[0]).toHaveAttribute('priority', 'true');
        });
        it('debe aplicar sizes responsive por defecto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: mockImages
            }));
            const images = _react1.screen.getAllByTestId('carousel-image');
            images.forEach((img)=>{
                expect(img).toHaveAttribute('sizes');
            });
        });
    });
    describe('Estados de error', ()=>{
        it('debe manejar imágenes undefined gracefully', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: undefined
            }));
            expect(_react1.screen.getByText('Sin imágenes disponibles')).toBeInTheDocument();
        });
        it('debe manejar array vacío de imágenes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageCarousel.default, {
                images: []
            }));
            expect(_react1.screen.getByText('Sin imágenes disponibles')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,