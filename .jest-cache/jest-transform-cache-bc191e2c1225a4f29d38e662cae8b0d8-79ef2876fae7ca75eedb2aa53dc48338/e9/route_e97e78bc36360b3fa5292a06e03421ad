dc2b6f405ed4ac12cadee1fbdc7f1d36
// ===================================
// PINTEYA E-COMMERCE - MERCADOPAGO METRICS API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    }
});
const _server = require("next/server");
const _auth = require("../../../../../auth");
const _metrics = require("../../../../../lib/metrics");
const _redis = require("../../../../../lib/redis");
const _logger = require("../../../../../lib/logger");
async function GET(request) {
    try {
        // Verificar autenticación
        const session = await (0, _auth.auth)();
        if (!session?.user) {
            return _server.NextResponse.json({
                success: false,
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        // TODO: Verificar rol de admin
        // const isAdmin = await checkUserRole(userId);
        // if (!isAdmin) {
        //   return NextResponse.json(
        //     { success: false, error: 'Acceso denegado' },
        //     { status: 403 }
        //   );
        // }
        _logger.logger.info(_logger.LogCategory.API, 'Fetching MercadoPago metrics', {
            userId
        });
        // Obtener métricas del sistema
        const metrics = await _metrics.metricsCollector.getMercadoPagoMetrics();
        const redisStatus = await (0, _redis.isRedisAvailable)();
        // Calcular métricas en tiempo real
        const totalRequests = metrics.payment_creation.requests.total + metrics.payment_queries.requests.total + metrics.webhook_processing.requests.total;
        const totalSuccess = metrics.payment_creation.requests.success + metrics.payment_queries.requests.success + metrics.webhook_processing.requests.success;
        const totalErrors = metrics.payment_creation.requests.error + metrics.payment_queries.requests.error + metrics.webhook_processing.requests.error;
        const successRate = totalRequests > 0 ? totalSuccess / totalRequests * 100 : 100;
        const errorRate = totalRequests > 0 ? totalErrors / totalRequests * 100 : 0;
        // Calcular tiempo de respuesta promedio ponderado
        const avgResponseTime = (metrics.payment_creation.response_times.avg * metrics.payment_creation.requests.total + metrics.payment_queries.response_times.avg * metrics.payment_queries.requests.total + metrics.webhook_processing.response_times.avg * metrics.webhook_processing.requests.total) / (totalRequests || 1);
        // Generar alertas basadas en umbrales
        const alerts = [];
        if (errorRate > 5) {
            alerts.push({
                type: 'error',
                message: `Tasa de error alta: ${errorRate.toFixed(1)}%`,
                timestamp: new Date().toISOString()
            });
        }
        if (avgResponseTime > 3000) {
            alerts.push({
                type: 'warning',
                message: `Tiempo de respuesta alto: ${avgResponseTime.toFixed(0)}ms`,
                timestamp: new Date().toISOString()
            });
        }
        if (!redisStatus) {
            alerts.push({
                type: 'warning',
                message: 'Redis desconectado - usando fallback en memoria',
                timestamp: new Date().toISOString()
            });
        }
        // Preparar respuesta
        const response = {
            success: true,
            data: {
                realTimeMetrics: {
                    totalRequests,
                    successRate: Math.round(successRate * 100) / 100,
                    errorRate: Math.round(errorRate * 100) / 100,
                    averageResponseTime: Math.round(avgResponseTime),
                    rateLimitHits: metrics.payment_creation.requests.rate_limited + metrics.payment_queries.requests.rate_limited + metrics.webhook_processing.requests.rate_limited,
                    retryAttempts: metrics.payment_creation.retry_stats.total_retries + metrics.payment_queries.retry_stats.total_retries + metrics.webhook_processing.retry_stats.total_retries
                },
                endpointMetrics: {
                    createPreference: {
                        requests: metrics.payment_creation.requests.total,
                        successRate: metrics.payment_creation.requests.total > 0 ? metrics.payment_creation.requests.success / metrics.payment_creation.requests.total * 100 : 100,
                        averageResponseTime: Math.round(metrics.payment_creation.response_times.avg),
                        errorCount: metrics.payment_creation.requests.error
                    },
                    webhook: {
                        requests: metrics.webhook_processing.requests.total,
                        successRate: metrics.webhook_processing.requests.total > 0 ? metrics.webhook_processing.requests.success / metrics.webhook_processing.requests.total * 100 : 100,
                        averageResponseTime: Math.round(metrics.webhook_processing.response_times.avg),
                        errorCount: metrics.webhook_processing.requests.error
                    },
                    paymentQuery: {
                        requests: metrics.payment_queries.requests.total,
                        successRate: metrics.payment_queries.requests.total > 0 ? metrics.payment_queries.requests.success / metrics.payment_queries.requests.total * 100 : 100,
                        averageResponseTime: Math.round(metrics.payment_queries.response_times.avg),
                        errorCount: metrics.payment_queries.requests.error
                    }
                },
                systemHealth: {
                    redisStatus: redisStatus ? 'connected' : 'disconnected',
                    lastUpdate: new Date().toISOString(),
                    uptime: process.uptime()
                },
                alerts
            }
        };
        _logger.logger.info(_logger.LogCategory.API, 'MercadoPago metrics retrieved successfully');
        return _server.NextResponse.json(response);
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Error fetching MercadoPago metrics', error);
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        // Verificar autenticación
        const session = await (0, _auth.auth)();
        if (!session?.user) {
            return _server.NextResponse.json({
                success: false,
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        _logger.logger.info(_logger.LogCategory.API, 'Resetting MercadoPago metrics', {
            userId
        });
        // TODO: Implementar reset de métricas
        // await metricsCollector.resetMetrics();
        return _server.NextResponse.json({
            success: true,
            message: 'Métricas reiniciadas correctamente'
        });
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.API, 'Error resetting MercadoPago metrics', error);
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,