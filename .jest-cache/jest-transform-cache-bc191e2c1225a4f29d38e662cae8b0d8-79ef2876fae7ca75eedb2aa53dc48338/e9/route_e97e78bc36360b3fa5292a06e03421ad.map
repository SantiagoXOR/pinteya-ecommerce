{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\mercadopago\\metrics\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO METRICS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { metricsCollector } from '@/lib/metrics';\r\nimport { isRedisAvailable } from '@/lib/redis';\r\nimport { logger, LogCategory } from '@/lib/logger';\r\n\r\n// Tipos para la respuesta de métricas\r\ninterface MetricsResponse {\r\n  success: boolean;\r\n  data?: {\r\n    realTimeMetrics: {\r\n      totalRequests: number;\r\n      successRate: number;\r\n      errorRate: number;\r\n      averageResponseTime: number;\r\n      rateLimitHits: number;\r\n      retryAttempts: number;\r\n    };\r\n    endpointMetrics: {\r\n      createPreference: EndpointMetric;\r\n      webhook: EndpointMetric;\r\n      paymentQuery: EndpointMetric;\r\n    };\r\n    systemHealth: {\r\n      redisStatus: 'connected' | 'disconnected';\r\n      lastUpdate: string;\r\n      uptime: number;\r\n    };\r\n    alerts: Alert[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\ninterface EndpointMetric {\r\n  requests: number;\r\n  successRate: number;\r\n  averageResponseTime: number;\r\n  errorCount: number;\r\n  lastError?: string;\r\n}\r\n\r\ninterface Alert {\r\n  type: 'warning' | 'error' | 'info';\r\n  message: string;\r\n  timestamp: string;\r\n  endpoint?: string;\r\n}\r\n\r\n/**\r\n * GET /api/admin/mercadopago/metrics\r\n * Obtiene métricas en tiempo real de MercadoPago\r\n */\r\nexport async function GET(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // TODO: Verificar rol de admin\r\n    // const isAdmin = await checkUserRole(userId);\r\n    // if (!isAdmin) {\r\n    //   return NextResponse.json(\r\n    //     { success: false, error: 'Acceso denegado' },\r\n    //     { status: 403 }\r\n    //   );\r\n    // }\r\n\r\n    logger.info(LogCategory.API, 'Fetching MercadoPago metrics', { userId });\r\n\r\n    // Obtener métricas del sistema\r\n    const metrics = await metricsCollector.getMercadoPagoMetrics();\r\n    const redisStatus = await isRedisAvailable();\r\n\r\n    // Calcular métricas en tiempo real\r\n    const totalRequests = metrics.payment_creation.requests.total + \r\n                         metrics.payment_queries.requests.total + \r\n                         metrics.webhook_processing.requests.total;\r\n\r\n    const totalSuccess = metrics.payment_creation.requests.success + \r\n                        metrics.payment_queries.requests.success + \r\n                        metrics.webhook_processing.requests.success;\r\n\r\n    const totalErrors = metrics.payment_creation.requests.error + \r\n                       metrics.payment_queries.requests.error + \r\n                       metrics.webhook_processing.requests.error;\r\n\r\n    const successRate = totalRequests > 0 ? (totalSuccess / totalRequests) * 100 : 100;\r\n    const errorRate = totalRequests > 0 ? (totalErrors / totalRequests) * 100 : 0;\r\n\r\n    // Calcular tiempo de respuesta promedio ponderado\r\n    const avgResponseTime = (\r\n      metrics.payment_creation.response_times.avg * metrics.payment_creation.requests.total +\r\n      metrics.payment_queries.response_times.avg * metrics.payment_queries.requests.total +\r\n      metrics.webhook_processing.response_times.avg * metrics.webhook_processing.requests.total\r\n    ) / (totalRequests || 1);\r\n\r\n    // Generar alertas basadas en umbrales\r\n    const alerts: Alert[] = [];\r\n\r\n    if (errorRate > 5) {\r\n      alerts.push({\r\n        type: 'error',\r\n        message: `Tasa de error alta: ${errorRate.toFixed(1)}%`,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    if (avgResponseTime > 3000) {\r\n      alerts.push({\r\n        type: 'warning',\r\n        message: `Tiempo de respuesta alto: ${avgResponseTime.toFixed(0)}ms`,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    if (!redisStatus) {\r\n      alerts.push({\r\n        type: 'warning',\r\n        message: 'Redis desconectado - usando fallback en memoria',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Preparar respuesta\r\n    const response: MetricsResponse = {\r\n      success: true,\r\n      data: {\r\n        realTimeMetrics: {\r\n          totalRequests,\r\n          successRate: Math.round(successRate * 100) / 100,\r\n          errorRate: Math.round(errorRate * 100) / 100,\r\n          averageResponseTime: Math.round(avgResponseTime),\r\n          rateLimitHits: metrics.payment_creation.requests.rate_limited + \r\n                        metrics.payment_queries.requests.rate_limited + \r\n                        metrics.webhook_processing.requests.rate_limited,\r\n          retryAttempts: metrics.payment_creation.retry_stats.total_retries + \r\n                        metrics.payment_queries.retry_stats.total_retries + \r\n                        metrics.webhook_processing.retry_stats.total_retries,\r\n        },\r\n        endpointMetrics: {\r\n          createPreference: {\r\n            requests: metrics.payment_creation.requests.total,\r\n            successRate: metrics.payment_creation.requests.total > 0 ? \r\n              (metrics.payment_creation.requests.success / metrics.payment_creation.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.payment_creation.response_times.avg),\r\n            errorCount: metrics.payment_creation.requests.error,\r\n          },\r\n          webhook: {\r\n            requests: metrics.webhook_processing.requests.total,\r\n            successRate: metrics.webhook_processing.requests.total > 0 ? \r\n              (metrics.webhook_processing.requests.success / metrics.webhook_processing.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.webhook_processing.response_times.avg),\r\n            errorCount: metrics.webhook_processing.requests.error,\r\n          },\r\n          paymentQuery: {\r\n            requests: metrics.payment_queries.requests.total,\r\n            successRate: metrics.payment_queries.requests.total > 0 ? \r\n              (metrics.payment_queries.requests.success / metrics.payment_queries.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.payment_queries.response_times.avg),\r\n            errorCount: metrics.payment_queries.requests.error,\r\n          },\r\n        },\r\n        systemHealth: {\r\n          redisStatus: redisStatus ? 'connected' : 'disconnected',\r\n          lastUpdate: new Date().toISOString(),\r\n          uptime: process.uptime(),\r\n        },\r\n        alerts,\r\n      },\r\n    };\r\n\r\n    logger.info(LogCategory.API, 'MercadoPago metrics retrieved successfully');\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error fetching MercadoPago metrics', error as Error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Error interno del servidor',\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/mercadopago/metrics\r\n * Reinicia las métricas de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Resetting MercadoPago metrics', { userId });\r\n\r\n    // TODO: Implementar reset de métricas\r\n    // await metricsCollector.resetMetrics();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Métricas reiniciadas correctamente',\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error resetting MercadoPago metrics', error as Error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Error interno del servidor',\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":["GET","POST","request","session","auth","user","NextResponse","json","success","error","status","logger","info","LogCategory","API","userId","metrics","metricsCollector","getMercadoPagoMetrics","redisStatus","isRedisAvailable","totalRequests","payment_creation","requests","total","payment_queries","webhook_processing","totalSuccess","totalErrors","successRate","errorRate","avgResponseTime","response_times","avg","alerts","push","type","message","toFixed","timestamp","Date","toISOString","response","data","realTimeMetrics","Math","round","averageResponseTime","rateLimitHits","rate_limited","retryAttempts","retry_stats","total_retries","endpointMetrics","createPreference","errorCount","webhook","paymentQuery","systemHealth","lastUpdate","uptime","process"],"mappings":"AAAA,sCAAsC;AACtC,+CAA+C;AAC/C,sCAAsC;;;;;;;;;;;;QAsDhBA;eAAAA;;QAiJAC;eAAAA;;;wBArMoB;sBACrB;yBACY;uBACA;wBACG;AAgD7B,eAAeD,IAAIE,OAAoB;IAC5C,IAAI;QACF,0BAA0B;QAC1B,MAAMC,UAAU,MAAMC,IAAAA,UAAI;QAC1B,IAAI,CAACD,SAASE,MAAM;YAClB,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBAAEC,SAAS;gBAAOC,OAAO;YAAgB,GACzC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,+CAA+C;QAC/C,kBAAkB;QAClB,8BAA8B;QAC9B,oDAAoD;QACpD,sBAAsB;QACtB,OAAO;QACP,IAAI;QAEJC,cAAM,CAACC,IAAI,CAACC,mBAAW,CAACC,GAAG,EAAE,gCAAgC;YAAEC;QAAO;QAEtE,+BAA+B;QAC/B,MAAMC,UAAU,MAAMC,yBAAgB,CAACC,qBAAqB;QAC5D,MAAMC,cAAc,MAAMC,IAAAA,uBAAgB;QAE1C,mCAAmC;QACnC,MAAMC,gBAAgBL,QAAQM,gBAAgB,CAACC,QAAQ,CAACC,KAAK,GACxCR,QAAQS,eAAe,CAACF,QAAQ,CAACC,KAAK,GACtCR,QAAQU,kBAAkB,CAACH,QAAQ,CAACC,KAAK;QAE9D,MAAMG,eAAeX,QAAQM,gBAAgB,CAACC,QAAQ,CAACf,OAAO,GAC1CQ,QAAQS,eAAe,CAACF,QAAQ,CAACf,OAAO,GACxCQ,QAAQU,kBAAkB,CAACH,QAAQ,CAACf,OAAO;QAE/D,MAAMoB,cAAcZ,QAAQM,gBAAgB,CAACC,QAAQ,CAACd,KAAK,GACxCO,QAAQS,eAAe,CAACF,QAAQ,CAACd,KAAK,GACtCO,QAAQU,kBAAkB,CAACH,QAAQ,CAACd,KAAK;QAE5D,MAAMoB,cAAcR,gBAAgB,IAAI,AAACM,eAAeN,gBAAiB,MAAM;QAC/E,MAAMS,YAAYT,gBAAgB,IAAI,AAACO,cAAcP,gBAAiB,MAAM;QAE5E,kDAAkD;QAClD,MAAMU,kBAAkB,AACtBf,CAAAA,QAAQM,gBAAgB,CAACU,cAAc,CAACC,GAAG,GAAGjB,QAAQM,gBAAgB,CAACC,QAAQ,CAACC,KAAK,GACrFR,QAAQS,eAAe,CAACO,cAAc,CAACC,GAAG,GAAGjB,QAAQS,eAAe,CAACF,QAAQ,CAACC,KAAK,GACnFR,QAAQU,kBAAkB,CAACM,cAAc,CAACC,GAAG,GAAGjB,QAAQU,kBAAkB,CAACH,QAAQ,CAACC,KAAK,AAAD,IACrFH,CAAAA,iBAAiB,CAAA;QAEtB,sCAAsC;QACtC,MAAMa,SAAkB,EAAE;QAE1B,IAAIJ,YAAY,GAAG;YACjBI,OAAOC,IAAI,CAAC;gBACVC,MAAM;gBACNC,SAAS,CAAC,oBAAoB,EAAEP,UAAUQ,OAAO,CAAC,GAAG,CAAC,CAAC;gBACvDC,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF;QAEA,IAAIV,kBAAkB,MAAM;YAC1BG,OAAOC,IAAI,CAAC;gBACVC,MAAM;gBACNC,SAAS,CAAC,0BAA0B,EAAEN,gBAAgBO,OAAO,CAAC,GAAG,EAAE,CAAC;gBACpEC,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF;QAEA,IAAI,CAACtB,aAAa;YAChBe,OAAOC,IAAI,CAAC;gBACVC,MAAM;gBACNC,SAAS;gBACTE,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF;QAEA,qBAAqB;QACrB,MAAMC,WAA4B;YAChClC,SAAS;YACTmC,MAAM;gBACJC,iBAAiB;oBACfvB;oBACAQ,aAAagB,KAAKC,KAAK,CAACjB,cAAc,OAAO;oBAC7CC,WAAWe,KAAKC,KAAK,CAAChB,YAAY,OAAO;oBACzCiB,qBAAqBF,KAAKC,KAAK,CAACf;oBAChCiB,eAAehC,QAAQM,gBAAgB,CAACC,QAAQ,CAAC0B,YAAY,GAC/CjC,QAAQS,eAAe,CAACF,QAAQ,CAAC0B,YAAY,GAC7CjC,QAAQU,kBAAkB,CAACH,QAAQ,CAAC0B,YAAY;oBAC9DC,eAAelC,QAAQM,gBAAgB,CAAC6B,WAAW,CAACC,aAAa,GACnDpC,QAAQS,eAAe,CAAC0B,WAAW,CAACC,aAAa,GACjDpC,QAAQU,kBAAkB,CAACyB,WAAW,CAACC,aAAa;gBACpE;gBACAC,iBAAiB;oBACfC,kBAAkB;wBAChB/B,UAAUP,QAAQM,gBAAgB,CAACC,QAAQ,CAACC,KAAK;wBACjDK,aAAab,QAAQM,gBAAgB,CAACC,QAAQ,CAACC,KAAK,GAAG,IACrD,AAACR,QAAQM,gBAAgB,CAACC,QAAQ,CAACf,OAAO,GAAGQ,QAAQM,gBAAgB,CAACC,QAAQ,CAACC,KAAK,GAAI,MAAM;wBAChGuB,qBAAqBF,KAAKC,KAAK,CAAC9B,QAAQM,gBAAgB,CAACU,cAAc,CAACC,GAAG;wBAC3EsB,YAAYvC,QAAQM,gBAAgB,CAACC,QAAQ,CAACd,KAAK;oBACrD;oBACA+C,SAAS;wBACPjC,UAAUP,QAAQU,kBAAkB,CAACH,QAAQ,CAACC,KAAK;wBACnDK,aAAab,QAAQU,kBAAkB,CAACH,QAAQ,CAACC,KAAK,GAAG,IACvD,AAACR,QAAQU,kBAAkB,CAACH,QAAQ,CAACf,OAAO,GAAGQ,QAAQU,kBAAkB,CAACH,QAAQ,CAACC,KAAK,GAAI,MAAM;wBACpGuB,qBAAqBF,KAAKC,KAAK,CAAC9B,QAAQU,kBAAkB,CAACM,cAAc,CAACC,GAAG;wBAC7EsB,YAAYvC,QAAQU,kBAAkB,CAACH,QAAQ,CAACd,KAAK;oBACvD;oBACAgD,cAAc;wBACZlC,UAAUP,QAAQS,eAAe,CAACF,QAAQ,CAACC,KAAK;wBAChDK,aAAab,QAAQS,eAAe,CAACF,QAAQ,CAACC,KAAK,GAAG,IACpD,AAACR,QAAQS,eAAe,CAACF,QAAQ,CAACf,OAAO,GAAGQ,QAAQS,eAAe,CAACF,QAAQ,CAACC,KAAK,GAAI,MAAM;wBAC9FuB,qBAAqBF,KAAKC,KAAK,CAAC9B,QAAQS,eAAe,CAACO,cAAc,CAACC,GAAG;wBAC1EsB,YAAYvC,QAAQS,eAAe,CAACF,QAAQ,CAACd,KAAK;oBACpD;gBACF;gBACAiD,cAAc;oBACZvC,aAAaA,cAAc,cAAc;oBACzCwC,YAAY,IAAInB,OAAOC,WAAW;oBAClCmB,QAAQC,QAAQD,MAAM;gBACxB;gBACA1B;YACF;QACF;QAEAvB,cAAM,CAACC,IAAI,CAACC,mBAAW,CAACC,GAAG,EAAE;QAE7B,OAAOR,oBAAY,CAACC,IAAI,CAACmC;IAE3B,EAAE,OAAOjC,OAAO;QACdE,cAAM,CAACF,KAAK,CAACI,mBAAW,CAACC,GAAG,EAAE,sCAAsCL;QAEpE,OAAOH,oBAAY,CAACC,IAAI,CACtB;YACEC,SAAS;YACTC,OAAO;QACT,GACA;YAAEC,QAAQ;QAAI;IAElB;AACF;AAMO,eAAeT,KAAKC,OAAoB;IAC7C,IAAI;QACF,0BAA0B;QAC1B,MAAMC,UAAU,MAAMC,IAAAA,UAAI;QAC1B,IAAI,CAACD,SAASE,MAAM;YAClB,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBAAEC,SAAS;gBAAOC,OAAO;YAAgB,GACzC;gBAAEC,QAAQ;YAAI;QAElB;QAEAC,cAAM,CAACC,IAAI,CAACC,mBAAW,CAACC,GAAG,EAAE,iCAAiC;YAAEC;QAAO;QAEvE,sCAAsC;QACtC,yCAAyC;QAEzC,OAAOT,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACT6B,SAAS;QACX;IAEF,EAAE,OAAO5B,OAAO;QACdE,cAAM,CAACF,KAAK,CAACI,mBAAW,CAACC,GAAG,EAAE,uCAAuCL;QAErE,OAAOH,oBAAY,CAACC,IAAI,CACtB;YACEC,SAAS;YACTC,OAAO;QACT,GACA;YAAEC,QAAQ;QAAI;IAElB;AACF"}