1648c54aae0a4b3136c126c63f8cd7a1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addItemToCart: function() {
        return addItemToCart;
    },
    cart: function() {
        return cart;
    },
    default: function() {
        return _default;
    },
    hydrateCart: function() {
        return hydrateCart;
    },
    removeAllItemsFromCart: function() {
        return removeAllItemsFromCart;
    },
    removeItemFromCart: function() {
        return removeItemFromCart;
    },
    replaceCart: function() {
        return replaceCart;
    },
    selectCartItems: function() {
        return selectCartItems;
    },
    selectTotalPrice: function() {
        return selectTotalPrice;
    },
    updateCartItemQuantity: function() {
        return updateCartItemQuantity;
    }
});
const _toolkit = require("@reduxjs/toolkit");
const _cartPersistence = require("../middleware/cartPersistence");
// Función para obtener el estado inicial con persistencia
const getInitialState = ()=>{
    // En el servidor, siempre retornar estado vacío
    if (typeof window === 'undefined') {
        return {
            items: []
        };
    }
    // En el cliente, intentar cargar desde localStorage
    try {
        const persistedItems = (0, _cartPersistence.loadCartFromStorage)();
        return {
            items: persistedItems
        };
    } catch (error) {
        console.warn('Error loading persisted cart:', error);
        return {
            items: []
        };
    }
};
const initialState = getInitialState();
const cart = (0, _toolkit.createSlice)({
    name: "cart",
    initialState,
    reducers: {
        addItemToCart: (state, action)=>{
            const { id, title, price, quantity, discountedPrice, imgs } = action.payload;
            const existingItem = state.items.find((item)=>item.id === id);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                state.items.push({
                    id,
                    title,
                    price,
                    quantity,
                    discountedPrice,
                    imgs
                });
            }
        },
        removeItemFromCart: (state, action)=>{
            const itemId = action.payload;
            state.items = state.items.filter((item)=>item.id !== itemId);
        },
        updateCartItemQuantity: (state, action)=>{
            const { id, quantity } = action.payload;
            const existingItem = state.items.find((item)=>item.id === id);
            if (existingItem) {
                existingItem.quantity = quantity;
            }
        },
        removeAllItemsFromCart: (state)=>{
            state.items = [];
        },
        // Acción para hidratar el carrito desde localStorage
        hydrateCart: (state, action)=>{
            state.items = action.payload;
        },
        // Acción para reemplazar todo el carrito (útil para migración de usuarios)
        replaceCart: (state, action)=>{
            state.items = action.payload;
        }
    }
});
const selectCartItems = (state)=>state.cartReducer.items;
const selectTotalPrice = (0, _toolkit.createSelector)([
    selectCartItems
], (items)=>{
    return items.reduce((total, item)=>{
        return total + item.discountedPrice * item.quantity;
    }, 0);
});
const { addItemToCart, removeItemFromCart, updateCartItemQuantity, removeAllItemsFromCart, hydrateCart, replaceCart } = cart.actions;
const _default = cart.reducer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xccmVkdXhcXGZlYXR1cmVzXFxjYXJ0LXNsaWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBjcmVhdGVTbGljZSwgUGF5bG9hZEFjdGlvbiB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCB7IFJvb3RTdGF0ZSB9IGZyb20gXCIuLi9zdG9yZVwiO1xyXG5pbXBvcnQgeyBsb2FkQ2FydEZyb21TdG9yYWdlIH0gZnJvbSBcIi4uL21pZGRsZXdhcmUvY2FydFBlcnNpc3RlbmNlXCI7XHJcblxyXG50eXBlIEluaXRpYWxTdGF0ZSA9IHtcclxuICBpdGVtczogQ2FydEl0ZW1bXTtcclxufTtcclxuXHJcbnR5cGUgQ2FydEl0ZW0gPSB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIHByaWNlOiBudW1iZXI7XHJcbiAgZGlzY291bnRlZFByaWNlOiBudW1iZXI7XHJcbiAgcXVhbnRpdHk6IG51bWJlcjtcclxuICBpbWdzPzoge1xyXG4gICAgdGh1bWJuYWlsczogc3RyaW5nW107XHJcbiAgICBwcmV2aWV3czogc3RyaW5nW107XHJcbiAgfTtcclxufTtcclxuXHJcbi8vIEZ1bmNpw7NuIHBhcmEgb2J0ZW5lciBlbCBlc3RhZG8gaW5pY2lhbCBjb24gcGVyc2lzdGVuY2lhXHJcbmNvbnN0IGdldEluaXRpYWxTdGF0ZSA9ICgpOiBJbml0aWFsU3RhdGUgPT4ge1xyXG4gIC8vIEVuIGVsIHNlcnZpZG9yLCBzaWVtcHJlIHJldG9ybmFyIGVzdGFkbyB2YWPDrW9cclxuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHJldHVybiB7IGl0ZW1zOiBbXSB9O1xyXG4gIH1cclxuXHJcbiAgLy8gRW4gZWwgY2xpZW50ZSwgaW50ZW50YXIgY2FyZ2FyIGRlc2RlIGxvY2FsU3RvcmFnZVxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBwZXJzaXN0ZWRJdGVtcyA9IGxvYWRDYXJ0RnJvbVN0b3JhZ2UoKTtcclxuICAgIHJldHVybiB7IGl0ZW1zOiBwZXJzaXN0ZWRJdGVtcyB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGxvYWRpbmcgcGVyc2lzdGVkIGNhcnQ6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHsgaXRlbXM6IFtdIH07XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlOiBJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYXJ0ID0gY3JlYXRlU2xpY2Uoe1xyXG4gIG5hbWU6IFwiY2FydFwiLFxyXG4gIGluaXRpYWxTdGF0ZSxcclxuICByZWR1Y2Vyczoge1xyXG4gICAgYWRkSXRlbVRvQ2FydDogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248Q2FydEl0ZW0+KSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgaWQsIHRpdGxlLCBwcmljZSwgcXVhbnRpdHksIGRpc2NvdW50ZWRQcmljZSwgaW1ncyB9ID1cclxuICAgICAgICBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gc3RhdGUuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG5cclxuICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xyXG4gICAgICAgIGV4aXN0aW5nSXRlbS5xdWFudGl0eSArPSBxdWFudGl0eTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZS5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICBwcmljZSxcclxuICAgICAgICAgIHF1YW50aXR5LFxyXG4gICAgICAgICAgZGlzY291bnRlZFByaWNlLFxyXG4gICAgICAgICAgaW1ncyxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlbW92ZUl0ZW1Gcm9tQ2FydDogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248bnVtYmVyPikgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtSWQgPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgc3RhdGUuaXRlbXMgPSBzdGF0ZS5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaWQgIT09IGl0ZW1JZCk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlQ2FydEl0ZW1RdWFudGl0eTogKFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPHsgaWQ6IG51bWJlcjsgcXVhbnRpdHk6IG51bWJlciB9PlxyXG4gICAgKSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgaWQsIHF1YW50aXR5IH0gPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gc3RhdGUuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG5cclxuICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xyXG4gICAgICAgIGV4aXN0aW5nSXRlbS5xdWFudGl0eSA9IHF1YW50aXR5O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZUFsbEl0ZW1zRnJvbUNhcnQ6IChzdGF0ZSkgPT4ge1xyXG4gICAgICBzdGF0ZS5pdGVtcyA9IFtdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBBY2Npw7NuIHBhcmEgaGlkcmF0YXIgZWwgY2Fycml0byBkZXNkZSBsb2NhbFN0b3JhZ2VcclxuICAgIGh5ZHJhdGVDYXJ0OiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxDYXJ0SXRlbVtdPikgPT4ge1xyXG4gICAgICBzdGF0ZS5pdGVtcyA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBBY2Npw7NuIHBhcmEgcmVlbXBsYXphciB0b2RvIGVsIGNhcnJpdG8gKMO6dGlsIHBhcmEgbWlncmFjacOzbiBkZSB1c3VhcmlvcylcclxuICAgIHJlcGxhY2VDYXJ0OiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxDYXJ0SXRlbVtdPikgPT4ge1xyXG4gICAgICBzdGF0ZS5pdGVtcyA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RDYXJ0SXRlbXMgPSAoc3RhdGU6IFJvb3RTdGF0ZSkgPT4gc3RhdGUuY2FydFJlZHVjZXIuaXRlbXM7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0VG90YWxQcmljZSA9IGNyZWF0ZVNlbGVjdG9yKFtzZWxlY3RDYXJ0SXRlbXNdLCAoaXRlbXMpID0+IHtcclxuICByZXR1cm4gaXRlbXMucmVkdWNlKCh0b3RhbDogbnVtYmVyLCBpdGVtOiBDYXJ0SXRlbSkgPT4ge1xyXG4gICAgcmV0dXJuIHRvdGFsICsgaXRlbS5kaXNjb3VudGVkUHJpY2UgKiBpdGVtLnF1YW50aXR5O1xyXG4gIH0sIDApO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCB7XHJcbiAgYWRkSXRlbVRvQ2FydCxcclxuICByZW1vdmVJdGVtRnJvbUNhcnQsXHJcbiAgdXBkYXRlQ2FydEl0ZW1RdWFudGl0eSxcclxuICByZW1vdmVBbGxJdGVtc0Zyb21DYXJ0LFxyXG4gIGh5ZHJhdGVDYXJ0LFxyXG4gIHJlcGxhY2VDYXJ0LFxyXG59ID0gY2FydC5hY3Rpb25zO1xyXG5leHBvcnQgZGVmYXVsdCBjYXJ0LnJlZHVjZXI7XHJcbiJdLCJuYW1lcyI6WyJhZGRJdGVtVG9DYXJ0IiwiY2FydCIsImh5ZHJhdGVDYXJ0IiwicmVtb3ZlQWxsSXRlbXNGcm9tQ2FydCIsInJlbW92ZUl0ZW1Gcm9tQ2FydCIsInJlcGxhY2VDYXJ0Iiwic2VsZWN0Q2FydEl0ZW1zIiwic2VsZWN0VG90YWxQcmljZSIsInVwZGF0ZUNhcnRJdGVtUXVhbnRpdHkiLCJnZXRJbml0aWFsU3RhdGUiLCJ3aW5kb3ciLCJpdGVtcyIsInBlcnNpc3RlZEl0ZW1zIiwibG9hZENhcnRGcm9tU3RvcmFnZSIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJpbml0aWFsU3RhdGUiLCJjcmVhdGVTbGljZSIsIm5hbWUiLCJyZWR1Y2VycyIsInN0YXRlIiwiYWN0aW9uIiwiaWQiLCJ0aXRsZSIsInByaWNlIiwicXVhbnRpdHkiLCJkaXNjb3VudGVkUHJpY2UiLCJpbWdzIiwicGF5bG9hZCIsImV4aXN0aW5nSXRlbSIsImZpbmQiLCJpdGVtIiwicHVzaCIsIml0ZW1JZCIsImZpbHRlciIsImNhcnRSZWR1Y2VyIiwiY3JlYXRlU2VsZWN0b3IiLCJyZWR1Y2UiLCJ0b3RhbCIsImFjdGlvbnMiLCJyZWR1Y2VyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXNHRUEsYUFBYTtlQUFiQTs7SUEvRFdDLElBQUk7ZUFBSkE7O0lBc0ViLE9BQTRCO2VBQTVCOztJQUhFQyxXQUFXO2VBQVhBOztJQURBQyxzQkFBc0I7ZUFBdEJBOztJQUZBQyxrQkFBa0I7ZUFBbEJBOztJQUlBQyxXQUFXO2VBQVhBOztJQWRXQyxlQUFlO2VBQWZBOztJQUVBQyxnQkFBZ0I7ZUFBaEJBOztJQVNYQyxzQkFBc0I7ZUFBdEJBOzs7eUJBeEd5RDtpQ0FFdkI7QUFrQnBDLDBEQUEwRDtBQUMxRCxNQUFNQyxrQkFBa0I7SUFDdEIsZ0RBQWdEO0lBQ2hELElBQUksT0FBT0MsV0FBVyxhQUFhO1FBQ2pDLE9BQU87WUFBRUMsT0FBTyxFQUFFO1FBQUM7SUFDckI7SUFFQSxvREFBb0Q7SUFDcEQsSUFBSTtRQUNGLE1BQU1DLGlCQUFpQkMsSUFBQUEsb0NBQW1CO1FBQzFDLE9BQU87WUFBRUYsT0FBT0M7UUFBZTtJQUNqQyxFQUFFLE9BQU9FLE9BQU87UUFDZEMsUUFBUUMsSUFBSSxDQUFDLGlDQUFpQ0Y7UUFDOUMsT0FBTztZQUFFSCxPQUFPLEVBQUU7UUFBQztJQUNyQjtBQUNGO0FBRUEsTUFBTU0sZUFBNkJSO0FBRTVCLE1BQU1SLE9BQU9pQixJQUFBQSxvQkFBVyxFQUFDO0lBQzlCQyxNQUFNO0lBQ05GO0lBQ0FHLFVBQVU7UUFDUnBCLGVBQWUsQ0FBQ3FCLE9BQU9DO1lBQ3JCLE1BQU0sRUFBRUMsRUFBRSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxlQUFlLEVBQUVDLElBQUksRUFBRSxHQUN6RE4sT0FBT08sT0FBTztZQUNoQixNQUFNQyxlQUFlVCxNQUFNVixLQUFLLENBQUNvQixJQUFJLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS1QsRUFBRSxLQUFLQTtZQUU1RCxJQUFJTyxjQUFjO2dCQUNoQkEsYUFBYUosUUFBUSxJQUFJQTtZQUMzQixPQUFPO2dCQUNMTCxNQUFNVixLQUFLLENBQUNzQixJQUFJLENBQUM7b0JBQ2ZWO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7Z0JBQ0Y7WUFDRjtRQUNGO1FBQ0F4QixvQkFBb0IsQ0FBQ2lCLE9BQU9DO1lBQzFCLE1BQU1ZLFNBQVNaLE9BQU9PLE9BQU87WUFDN0JSLE1BQU1WLEtBQUssR0FBR1UsTUFBTVYsS0FBSyxDQUFDd0IsTUFBTSxDQUFDLENBQUNILE9BQVNBLEtBQUtULEVBQUUsS0FBS1c7UUFDekQ7UUFDQTFCLHdCQUF3QixDQUN0QmEsT0FDQUM7WUFFQSxNQUFNLEVBQUVDLEVBQUUsRUFBRUcsUUFBUSxFQUFFLEdBQUdKLE9BQU9PLE9BQU87WUFDdkMsTUFBTUMsZUFBZVQsTUFBTVYsS0FBSyxDQUFDb0IsSUFBSSxDQUFDLENBQUNDLE9BQVNBLEtBQUtULEVBQUUsS0FBS0E7WUFFNUQsSUFBSU8sY0FBYztnQkFDaEJBLGFBQWFKLFFBQVEsR0FBR0E7WUFDMUI7UUFDRjtRQUVBdkIsd0JBQXdCLENBQUNrQjtZQUN2QkEsTUFBTVYsS0FBSyxHQUFHLEVBQUU7UUFDbEI7UUFFQSxxREFBcUQ7UUFDckRULGFBQWEsQ0FBQ21CLE9BQU9DO1lBQ25CRCxNQUFNVixLQUFLLEdBQUdXLE9BQU9PLE9BQU87UUFDOUI7UUFFQSwyRUFBMkU7UUFDM0V4QixhQUFhLENBQUNnQixPQUFPQztZQUNuQkQsTUFBTVYsS0FBSyxHQUFHVyxPQUFPTyxPQUFPO1FBQzlCO0lBQ0Y7QUFDRjtBQUVPLE1BQU12QixrQkFBa0IsQ0FBQ2UsUUFBcUJBLE1BQU1lLFdBQVcsQ0FBQ3pCLEtBQUs7QUFFckUsTUFBTUosbUJBQW1COEIsSUFBQUEsdUJBQWMsRUFBQztJQUFDL0I7Q0FBZ0IsRUFBRSxDQUFDSztJQUNqRSxPQUFPQSxNQUFNMkIsTUFBTSxDQUFDLENBQUNDLE9BQWVQO1FBQ2xDLE9BQU9PLFFBQVFQLEtBQUtMLGVBQWUsR0FBR0ssS0FBS04sUUFBUTtJQUNyRCxHQUFHO0FBQ0w7QUFFTyxNQUFNLEVBQ1gxQixhQUFhLEVBQ2JJLGtCQUFrQixFQUNsQkksc0JBQXNCLEVBQ3RCTCxzQkFBc0IsRUFDdEJELFdBQVcsRUFDWEcsV0FBVyxFQUNaLEdBQUdKLEtBQUt1QyxPQUFPO01BQ2hCLFdBQWV2QyxLQUFLd0MsT0FBTyJ9