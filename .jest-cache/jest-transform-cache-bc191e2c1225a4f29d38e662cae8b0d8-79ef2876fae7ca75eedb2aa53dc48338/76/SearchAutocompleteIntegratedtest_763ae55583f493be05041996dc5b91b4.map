{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\ui\\SearchAutocompleteIntegrated.test.tsx"],"sourcesContent":["// ===================================\r\n// TESTS: SearchAutocompleteIntegrated - Integración completa\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport { useRouter } from 'next/navigation';\r\nimport { searchProducts } from '@/lib/api/products';\r\nimport { SearchAutocompleteIntegrated } from '@/components/ui/SearchAutocompleteIntegrated';\r\n\r\n// Mocks\r\njest.mock('next/navigation', () => ({\r\n  useRouter: jest.fn(),\r\n}));\r\n\r\njest.mock('@/lib/api/products', () => ({\r\n  searchProducts: jest.fn(),\r\n}));\r\n\r\nconst mockPush = jest.fn();\r\nconst mockSearchProducts = searchProducts as jest.MockedFunction<typeof searchProducts>;\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  (useRouter as jest.Mock).mockReturnValue({\r\n    push: mockPush,\r\n  });\r\n  \r\n  // Mock localStorage\r\n  Object.defineProperty(window, 'localStorage', {\r\n    value: {\r\n      getItem: jest.fn(() => null),\r\n      setItem: jest.fn(),\r\n      removeItem: jest.fn(),\r\n      clear: jest.fn(),\r\n    },\r\n    writable: true,\r\n  });\r\n});\r\n\r\ndescribe('SearchAutocompleteIntegrated', () => {\r\n  it('should render with default props', () => {\r\n    render(<SearchAutocompleteIntegrated />);\r\n    \r\n    expect(screen.getByRole('combobox')).toBeInTheDocument();\r\n    expect(screen.getByPlaceholderText('Busco productos de pinturería...')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should integrate with useSearch hook and show suggestions', async () => {\r\n    const mockResponse = {\r\n      success: true,\r\n      data: [\r\n        { \r\n          id: '1', \r\n          name: 'Pintura Látex Blanca', \r\n          category: { name: 'Pinturas' },\r\n          images: { previews: ['/test.jpg'] },\r\n          stock: 10\r\n        },\r\n        { \r\n          id: '2', \r\n          name: 'Pintura Esmalte Azul', \r\n          category: { name: 'Pinturas' },\r\n          images: { previews: ['/test2.jpg'] },\r\n          stock: 5\r\n        },\r\n      ],\r\n      pagination: { total: 2, page: 1, limit: 6, totalPages: 1 },\r\n    };\r\n\r\n    mockSearchProducts.mockResolvedValue(mockResponse);\r\n\r\n    render(<SearchAutocompleteIntegrated debounceMs={100} />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'pintura');\r\n    \r\n    // Esperar a que aparezcan las sugerencias\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Pintura Látex Blanca')).toBeInTheDocument();\r\n      expect(screen.getByText('Pintura Esmalte Azul')).toBeInTheDocument();\r\n    }, { timeout: 1000 });\r\n\r\n    // Verificar que se llamó a la API\r\n    expect(mockSearchProducts).toHaveBeenCalledWith('pintura', 6);\r\n  });\r\n\r\n  it('should execute search on Enter key', async () => {\r\n    const onSearchExecuted = jest.fn();\r\n    const mockResponse = {\r\n      success: true,\r\n      data: [{ id: '1', name: 'Test Product', category: { name: 'Test' } }],\r\n      pagination: { total: 1, page: 1, limit: 12, totalPages: 1 },\r\n    };\r\n\r\n    mockSearchProducts.mockResolvedValue(mockResponse);\r\n\r\n    render(\r\n      <SearchAutocompleteIntegrated \r\n        onSearchExecuted={onSearchExecuted}\r\n        debounceMs={100}\r\n      />\r\n    );\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'test query');\r\n    await userEvent.keyboard('{Enter}');\r\n    \r\n    await waitFor(() => {\r\n      expect(mockPush).toHaveBeenCalledWith('/search?q=test%20query');\r\n    });\r\n  });\r\n\r\n  it('should handle suggestion selection', async () => {\r\n    const onSuggestionSelected = jest.fn();\r\n    const mockResponse = {\r\n      success: true,\r\n      data: [\r\n        { \r\n          id: '1', \r\n          name: 'Test Product', \r\n          category: { name: 'Test Category' },\r\n          images: { previews: ['/test.jpg'] },\r\n          stock: 10\r\n        },\r\n      ],\r\n      pagination: { total: 1, page: 1, limit: 6, totalPages: 1 },\r\n    };\r\n\r\n    mockSearchProducts.mockResolvedValue(mockResponse);\r\n\r\n    render(\r\n      <SearchAutocompleteIntegrated \r\n        onSuggestionSelected={onSuggestionSelected}\r\n        debounceMs={100}\r\n      />\r\n    );\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'test');\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Test Product')).toBeInTheDocument();\r\n    });\r\n\r\n    await userEvent.click(screen.getByText('Test Product'));\r\n    \r\n    expect(onSuggestionSelected).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        title: 'Test Product',\r\n        type: 'product'\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should clear search when clear button is clicked', async () => {\r\n    render(<SearchAutocompleteIntegrated />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'test query');\r\n    \r\n    // Buscar el botón de limpiar\r\n    const clearButton = screen.getByLabelText('Clear search');\r\n    await userEvent.click(clearButton);\r\n    \r\n    expect(input).toHaveValue('');\r\n  });\r\n\r\n  it('should show loading state during search', async () => {\r\n    // Mock para simular búsqueda lenta\r\n    mockSearchProducts.mockImplementation(() => \r\n      new Promise(resolve => setTimeout(() => resolve({\r\n        success: true,\r\n        data: [],\r\n        pagination: { total: 0, page: 1, limit: 6, totalPages: 0 },\r\n      }), 1000))\r\n    );\r\n\r\n    render(<SearchAutocompleteIntegrated debounceMs={50} />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'test');\r\n    \r\n    // Verificar que aparece el spinner de carga\r\n    await waitFor(() => {\r\n      const spinner = document.querySelector('.animate-spin');\r\n      expect(spinner).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('should handle API errors gracefully', async () => {\r\n    mockSearchProducts.mockRejectedValue(new Error('API Error'));\r\n\r\n    render(<SearchAutocompleteIntegrated debounceMs={50} />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'test');\r\n    \r\n    await waitFor(() => {\r\n      expect(mockSearchProducts).toHaveBeenCalled();\r\n    });\r\n\r\n    // El componente no debería crashear y debería mostrar estado sin resultados\r\n    expect(input).toBeInTheDocument();\r\n  });\r\n});\r\n"],"names":["jest","mock","useRouter","fn","searchProducts","mockPush","mockSearchProducts","beforeEach","clearAllMocks","mockReturnValue","push","Object","defineProperty","window","value","getItem","setItem","removeItem","clear","writable","describe","it","render","SearchAutocompleteIntegrated","expect","screen","getByRole","toBeInTheDocument","getByPlaceholderText","mockResponse","success","data","id","name","category","images","previews","stock","pagination","total","page","limit","totalPages","mockResolvedValue","debounceMs","input","userEvent","type","waitFor","getByText","timeout","toHaveBeenCalledWith","onSearchExecuted","keyboard","onSuggestionSelected","click","objectContaining","title","clearButton","getByLabelText","toHaveValue","mockImplementation","Promise","resolve","setTimeout","spinner","document","querySelector","mockRejectedValue","Error","toHaveBeenCalled"],"mappings":"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"}