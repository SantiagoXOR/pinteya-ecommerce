72e3fba41d7bdfb590a373a0963cb9ec
// =====================================================
// WEBSOCKET: LOGISTICS REAL-TIME SYSTEM
// Descripci√≥n: Sistema WebSocket para tracking tiempo real
// Basado en: WebSocket API + React Context + Event Emitter
// =====================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get LogisticsWebSocketClient () {
        return LogisticsWebSocketClient;
    },
    get LogisticsWebSocketSimulator () {
        return LogisticsWebSocketSimulator;
    },
    get getLogisticsWebSocket () {
        return getLogisticsWebSocket;
    }
});
const _events = require("events");
class LogisticsWebSocketClient extends _events.EventEmitter {
    constructor(url){
        super(), this.ws = null, this.reconnectAttempts = 0, this.maxReconnectAttempts = 5, this.reconnectDelay = 1000, this.heartbeatInterval = null, this.isConnected = false, this.subscriptions = new Set();
        this.url = url;
    }
    // =====================================================
    // CONEXI√ìN Y RECONEXI√ìN
    // =====================================================
    connect() {
        return new Promise((resolve, reject)=>{
            try {
                this.ws = new WebSocket(this.url);
                this.ws.onopen = ()=>{
                    console.log('üîó WebSocket conectado');
                    this.isConnected = true;
                    this.reconnectAttempts = 0;
                    this.startHeartbeat();
                    this.resubscribe();
                    this.emit('connected');
                    resolve();
                };
                this.ws.onmessage = (event)=>{
                    try {
                        const message = JSON.parse(event.data);
                        this.handleMessage(message);
                    } catch (error) {
                        console.error('‚ùå Error parsing WebSocket message:', error);
                    }
                };
                this.ws.onclose = (event)=>{
                    console.log('üîå WebSocket desconectado:', event.code, event.reason);
                    this.isConnected = false;
                    this.stopHeartbeat();
                    this.emit('disconnected', event);
                    if (!event.wasClean && this.reconnectAttempts < this.maxReconnectAttempts) {
                        this.scheduleReconnect();
                    }
                };
                this.ws.onerror = (error)=>{
                    console.error('‚ùå WebSocket error:', error);
                    this.emit('error', error);
                    reject(error);
                };
            } catch (error) {
                reject(error);
            }
        });
    }
    scheduleReconnect() {
        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts);
        console.log(`üîÑ Reconectando en ${delay}ms (intento ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`);
        setTimeout(()=>{
            this.reconnectAttempts++;
            this.connect().catch(()=>{
                if (this.reconnectAttempts >= this.maxReconnectAttempts) {
                    console.error('‚ùå M√°ximo de intentos de reconexi√≥n alcanzado');
                    this.emit('max_reconnect_attempts');
                }
            });
        }, delay);
    }
    disconnect() {
        if (this.ws) {
            this.ws.close(1000, 'Client disconnect');
            this.ws = null;
        }
        this.stopHeartbeat();
        this.isConnected = false;
    }
    // =====================================================
    // HEARTBEAT
    // =====================================================
    startHeartbeat() {
        this.heartbeatInterval = setInterval(()=>{
            if (this.isConnected && this.ws?.readyState === WebSocket.OPEN) {
                this.send({
                    type: 'ping',
                    data: {},
                    timestamp: new Date().toISOString()
                });
            }
        }, 30000); // 30 segundos
    }
    stopHeartbeat() {
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;
        }
    }
    // =====================================================
    // ENV√çO DE MENSAJES
    // =====================================================
    send(message) {
        if (this.ws?.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify(message));
        } else {
            console.warn('‚ö†Ô∏è WebSocket no est√° conectado, mensaje no enviado:', message);
        }
    }
    // =====================================================
    // SUSCRIPCIONES
    // =====================================================
    subscribeToShipment(shipmentId) {
        const subscription = `shipment:${shipmentId}`;
        this.subscriptions.add(subscription);
        this.send({
            type: 'subscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    unsubscribeFromShipment(shipmentId) {
        const subscription = `shipment:${shipmentId}`;
        this.subscriptions.delete(subscription);
        this.send({
            type: 'unsubscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    subscribeToGeofence(zoneId) {
        const subscription = `geofence:${zoneId}`;
        this.subscriptions.add(subscription);
        this.send({
            type: 'subscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    subscribeToAlerts() {
        const subscription = 'alerts:all';
        this.subscriptions.add(subscription);
        this.send({
            type: 'subscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    resubscribe() {
        this.subscriptions.forEach((subscription)=>{
            this.send({
                type: 'subscribe',
                data: {
                    subscription
                },
                timestamp: new Date().toISOString()
            });
        });
    }
    // =====================================================
    // MANEJO DE MENSAJES
    // =====================================================
    handleMessage(message) {
        console.log('üì® WebSocket message received:', message.type);
        switch(message.type){
            case 'tracking_update':
                this.handleTrackingUpdate(message.data);
                break;
            case 'shipment_status':
                this.handleShipmentStatus(message.data);
                break;
            case 'alert':
                this.handleAlert(message.data);
                break;
            case 'geofence_event':
                this.handleGeofenceEvent(message.data);
                break;
            case 'route_update':
                this.handleRouteUpdate(message.data);
                break;
            default:
                console.log('ü§∑ Unknown message type:', message.type);
        }
        // Emitir evento gen√©rico
        this.emit('message', message);
    }
    handleTrackingUpdate(update) {
        console.log('üìç Tracking update:', update);
        this.emit('tracking_update', update);
    }
    handleShipmentStatus(data) {
        console.log('üì¶ Shipment status update:', data);
        this.emit('shipment_status', data);
    }
    handleAlert(alert) {
        console.log('üö® Alert received:', alert);
        this.emit('alert', alert);
        // Mostrar notificaci√≥n del navegador si est√° permitido (DESHABILITADO EN DESARROLLO)
        if ('Notification' in window && Notification.permission === 'granted' && process.env.NODE_ENV === 'production') {
            new Notification(`Alerta de Log√≠stica - ${alert.type}`, {
                body: alert.message,
                icon: '/favicon.ico',
                tag: alert.id
            });
        }
    }
    handleGeofenceEvent(event) {
        console.log('üó∫Ô∏è Geofence event:', event);
        this.emit('geofence_event', event);
    }
    handleRouteUpdate(data) {
        console.log('üõ£Ô∏è Route update:', data);
        this.emit('route_update', data);
    }
    // =====================================================
    // UTILIDADES
    // =====================================================
    getConnectionState() {
        if (!this.ws) return 'disconnected';
        switch(this.ws.readyState){
            case WebSocket.CONNECTING:
                return 'connecting';
            case WebSocket.OPEN:
                return 'connected';
            case WebSocket.CLOSING:
            case WebSocket.CLOSED:
                return 'disconnected';
            default:
                return 'error';
        }
    }
    isReady() {
        return this.isConnected && this.ws?.readyState === WebSocket.OPEN;
    }
    getSubscriptions() {
        return Array.from(this.subscriptions);
    }
}
// =====================================================
// INSTANCIA SINGLETON
// =====================================================
let logisticsWS = null;
function getLogisticsWebSocket() {
    if (!logisticsWS) {
        // En desarrollo usar WebSocket local, en producci√≥n usar WSS
        const wsUrl = process.env.NODE_ENV === 'development' ? 'ws://localhost:3001/logistics' : 'wss://api.pinteya.com/logistics';
        logisticsWS = new LogisticsWebSocketClient(wsUrl);
    }
    return logisticsWS;
}
class LogisticsWebSocketSimulator extends _events.EventEmitter {
    start() {
        if (this.isRunning) return;
        this.isRunning = true;
        console.log('üé≠ Iniciando simulador WebSocket');
        // Simular actualizaciones de tracking cada 10 segundos
        const trackingInterval = setInterval(()=>{
            this.simulateTrackingUpdate();
        }, 10000);
        // Simular alertas cada 30 segundos
        const alertInterval = setInterval(()=>{
            this.simulateAlert();
        }, 30000);
        // Simular eventos de geofence cada 45 segundos
        const geofenceInterval = setInterval(()=>{
            this.simulateGeofenceEvent();
        }, 45000);
        this.intervals.push(trackingInterval, alertInterval, geofenceInterval);
    }
    stop() {
        this.intervals.forEach((interval)=>clearInterval(interval));
        this.intervals = [];
        this.isRunning = false;
        console.log('üõë Simulador WebSocket detenido');
    }
    simulateTrackingUpdate() {
        const update = {
            shipment_id: Math.floor(Math.random() * 100) + 1,
            location: {
                latitude: -34.6037 + (Math.random() - 0.5) * 0.1,
                longitude: -58.3816 + (Math.random() - 0.5) * 0.1,
                address: 'Av. Corrientes 1234, CABA'
            },
            status: [
                'in_transit',
                'out_for_delivery'
            ][Math.floor(Math.random() * 2)],
            timestamp: new Date().toISOString(),
            courier_id: Math.floor(Math.random() * 4) + 1,
            estimated_arrival: new Date(Date.now() + 3600000).toISOString()
        };
        this.emit('tracking_update', update);
    }
    simulateAlert() {
        const alerts = [
            {
                type: 'delay',
                message: 'Retraso en la entrega debido al tr√°fico'
            },
            {
                type: 'exception',
                message: 'Direcci√≥n incorrecta, contactar cliente'
            },
            {
                type: 'delivery_attempt',
                message: 'Primer intento de entrega fallido'
            }
        ];
        const randomAlert = alerts[Math.floor(Math.random() * alerts.length)];
        const alert = {
            id: `alert_${Date.now()}`,
            type: randomAlert.type,
            severity: [
                'low',
                'medium',
                'high'
            ][Math.floor(Math.random() * 3)],
            shipment_id: Math.floor(Math.random() * 100) + 1,
            message: randomAlert.message,
            timestamp: new Date().toISOString(),
            auto_resolve: Math.random() > 0.5
        };
        this.emit('alert', alert);
    }
    simulateGeofenceEvent() {
        const event = {
            shipment_id: Math.floor(Math.random() * 100) + 1,
            zone_id: [
                'caba',
                'gba_norte'
            ][Math.floor(Math.random() * 2)],
            zone_name: [
                'CABA - Zona Prioritaria',
                'GBA Norte - Zona de Entrega'
            ][Math.floor(Math.random() * 2)],
            event_type: [
                'enter',
                'exit'
            ][Math.floor(Math.random() * 2)],
            location: {
                latitude: -34.6037 + (Math.random() - 0.5) * 0.1,
                longitude: -58.3816 + (Math.random() - 0.5) * 0.1
            },
            timestamp: new Date().toISOString()
        };
        this.emit('geofence_event', event);
    }
    constructor(...args){
        super(...args), this.intervals = [], this.isRunning = false;
    }
}

//# sourceMappingURL=data:application/json;base64,