82f9b6c11cba9f746c55e2faae40e847
// ===================================
// PINTEYA E-COMMERCE - WEBHOOK ROBUSTO DE CLERK
// VersiÃ³n mejorada con validaciÃ³n de firma, retry logic y auditorÃ­a
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _svix = require("svix");
const _usersyncservice = require("../../../../lib/auth/user-sync-service");
const _securityaudit = require("../../../../lib/auth/security-audit");
// ===================================
// FUNCIONES DE UTILIDAD
// ===================================
/**
 * Valida los headers del webhook de Clerk
 */ function validateWebhookHeaders(request) {
    const svix_id = request.headers.get('svix-id');
    const svix_timestamp = request.headers.get('svix-timestamp');
    const svix_signature = request.headers.get('svix-signature');
    if (!svix_id || !svix_timestamp || !svix_signature) {
        return {
            valid: false,
            error: 'Headers de webhook faltantes (svix-id, svix-timestamp, svix-signature)'
        };
    }
    return {
        valid: true,
        headers: {
            svix_id,
            svix_timestamp,
            svix_signature
        }
    };
}
/**
 * Verifica la firma del webhook usando svix
 */ async function verifyWebhookSignature(payload, headers, secret) {
    try {
        const wh = new _svix.Webhook(secret);
        const evt = wh.verify(payload, {
            'svix-id': headers.svix_id,
            'svix-timestamp': headers.svix_timestamp,
            'svix-signature': headers.svix_signature
        });
        return {
            valid: true,
            event: evt
        };
    } catch (error) {
        console.error('[WEBHOOK] Error verificando firma:', error);
        return {
            valid: false,
            error: `Error verificando firma: ${error.message}`
        };
    }
}
/**
 * Procesa un evento de webhook especÃ­fico
 */ async function processWebhookEvent(event) {
    const startTime = Date.now();
    const eventType = event.type;
    const userData = event.data;
    console.log(`[WEBHOOK] Procesando evento: ${eventType} para usuario ${userData.id}`);
    try {
        switch(eventType){
            case 'user.created':
                const createResult = await (0, _usersyncservice.syncUserToSupabase)(userData, {
                    retryAttempts: 2,
                    retryDelay: 1000,
                    validateData: true,
                    createMissingRole: true,
                    logEvents: true
                });
                if (createResult.success) {
                    await (0, _securityaudit.logAdminAction)(userData.id, 'USER_CREATED_VIA_WEBHOOK', 'user_profile', {
                        userId: userData.id,
                        userRole: 'customer',
                        permissions: {},
                        metadata: {
                            source: 'clerk_webhook'
                        }
                    }, {
                        action: createResult.action,
                        email: userData.email_addresses[0]?.email_address,
                        webhook_event: eventType
                    });
                    return {
                        success: true,
                        eventType,
                        userId: userData.id,
                        action: createResult.action,
                        processingTime: Date.now() - startTime
                    };
                } else {
                    throw new Error(createResult.error || 'Error creando usuario');
                }
            case 'user.updated':
                const updateResult = await (0, _usersyncservice.syncUserToSupabase)(userData, {
                    retryAttempts: 2,
                    retryDelay: 1000,
                    validateData: true,
                    createMissingRole: false,
                    logEvents: true
                });
                if (updateResult.success) {
                    await (0, _securityaudit.logAdminAction)(userData.id, 'USER_UPDATED_VIA_WEBHOOK', 'user_profile', {
                        userId: userData.id,
                        userRole: 'customer',
                        permissions: {},
                        metadata: {
                            source: 'clerk_webhook'
                        }
                    }, {
                        action: updateResult.action,
                        email: userData.email_addresses[0]?.email_address,
                        webhook_event: eventType
                    });
                    return {
                        success: true,
                        eventType,
                        userId: userData.id,
                        action: updateResult.action,
                        processingTime: Date.now() - startTime
                    };
                } else {
                    throw new Error(updateResult.error || 'Error actualizando usuario');
                }
            case 'user.deleted':
                const deleteResult = await (0, _usersyncservice.deleteUserFromSupabase)(userData.id, {
                    retryAttempts: 2,
                    retryDelay: 1000,
                    logEvents: true
                });
                if (deleteResult.success) {
                    await (0, _securityaudit.logAdminAction)(userData.id, 'USER_DELETED_VIA_WEBHOOK', 'user_profile', {
                        userId: userData.id,
                        userRole: 'customer',
                        permissions: {},
                        metadata: {
                            source: 'clerk_webhook'
                        }
                    }, {
                        action: deleteResult.action,
                        webhook_event: eventType
                    });
                    return {
                        success: true,
                        eventType,
                        userId: userData.id,
                        action: deleteResult.action,
                        processingTime: Date.now() - startTime
                    };
                } else {
                    throw new Error(deleteResult.error || 'Error eliminando usuario');
                }
            default:
                console.log(`[WEBHOOK] Evento no manejado: ${eventType}`);
                return {
                    success: true,
                    eventType,
                    userId: userData.id,
                    action: 'ignored',
                    processingTime: Date.now() - startTime
                };
        }
    } catch (error) {
        console.error(`[WEBHOOK] Error procesando evento ${eventType}:`, error);
        // Log evento de error
        await (0, _securityaudit.logSecurityEvent)({
            user_id: userData.id,
            event_type: 'SECURITY_VIOLATION',
            event_category: 'data_access',
            severity: 'medium',
            description: `Error procesando webhook ${eventType}`,
            metadata: {
                eventType,
                error: error.message,
                webhook_event: true
            }
        });
        return {
            success: false,
            eventType,
            userId: userData.id,
            error: error.message,
            processingTime: Date.now() - startTime
        };
    }
}
async function POST(request) {
    console.log('[WEBHOOK] ðŸš« TEMPORALMENTE DESHABILITADO PARA EVITAR RECURSIÃ“N');
    // RESPUESTA TEMPORAL PARA EVITAR ERRORES
    return _server.NextResponse.json({
        success: false,
        message: 'Webhook temporalmente deshabilitado para evitar recursiÃ³n',
        timestamp: new Date().toISOString()
    }, {
        status: 503
    });
}

//# sourceMappingURL=data:application/json;base64,