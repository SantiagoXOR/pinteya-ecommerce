{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\mercadopago\\circuit-breaker.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - CIRCUIT BREAKER PATTERN ENTERPRISE\n// ===================================\n\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\nimport { metricsCollector } from '@/lib/metrics';\n\n// Estados del Circuit Breaker\nexport enum CircuitBreakerState {\n  CLOSED = 'CLOSED',     // Funcionamiento normal\n  OPEN = 'OPEN',         // Circuito abierto, rechaza requests\n  HALF_OPEN = 'HALF_OPEN' // Probando si el servicio se recuperó\n}\n\n// Configuración del Circuit Breaker\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;      // Número de fallos para abrir el circuito\n  recoveryTimeout: number;       // Tiempo antes de intentar recuperación (ms)\n  monitoringWindow: number;      // Ventana de monitoreo para contar fallos (ms)\n  halfOpenMaxCalls: number;      // Máximo de llamadas en estado HALF_OPEN\n  successThreshold: number;      // Éxitos necesarios para cerrar el circuito\n}\n\n// Configuraciones predefinidas\nexport const CIRCUIT_BREAKER_CONFIGS = {\n  MERCADOPAGO_CRITICAL: {\n    failureThreshold: 5,\n    recoveryTimeout: 60000,      // 1 minuto\n    monitoringWindow: 120000,    // 2 minutos\n    halfOpenMaxCalls: 3,\n    successThreshold: 2\n  },\n  MERCADOPAGO_STANDARD: {\n    failureThreshold: 3,\n    recoveryTimeout: 30000,      // 30 segundos\n    monitoringWindow: 60000,     // 1 minuto\n    halfOpenMaxCalls: 2,\n    successThreshold: 1\n  },\n  WEBHOOK_PROCESSING: {\n    failureThreshold: 10,\n    recoveryTimeout: 15000,      // 15 segundos\n    monitoringWindow: 30000,     // 30 segundos\n    halfOpenMaxCalls: 5,\n    successThreshold: 3\n  }\n} as const;\n\n// Métricas del Circuit Breaker\ninterface CircuitBreakerMetrics {\n  totalCalls: number;\n  successfulCalls: number;\n  failedCalls: number;\n  rejectedCalls: number;\n  lastFailureTime: number;\n  lastSuccessTime: number;\n  stateChanges: number;\n}\n\n// Resultado de ejecución\nexport interface CircuitBreakerResult<T> {\n  success: boolean;\n  data?: T;\n  error?: Error;\n  state: CircuitBreakerState;\n  executionTime: number;\n  wasRejected: boolean;\n}\n\n/**\n * Circuit Breaker Enterprise para MercadoPago\n * Implementa el patrón Circuit Breaker con estados y recuperación automática\n */\nexport class CircuitBreaker {\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\n  private failures: number = 0;\n  private successes: number = 0;\n  private lastFailureTime: number = 0;\n  private lastSuccessTime: number = 0;\n  private halfOpenCalls: number = 0;\n  private stateChanges: number = 0;\n  private metrics: CircuitBreakerMetrics;\n\n  constructor(\n    private name: string,\n    private config: CircuitBreakerConfig\n  ) {\n    this.metrics = {\n      totalCalls: 0,\n      successfulCalls: 0,\n      failedCalls: 0,\n      rejectedCalls: 0,\n      lastFailureTime: 0,\n      lastSuccessTime: 0,\n      stateChanges: 0\n    };\n\n    logger.debug(LogLevel.DEBUG, `Circuit Breaker initialized: ${name}`, {\n      config: this.config\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Ejecuta una operación protegida por el circuit breaker\n   */\n  async execute<T>(operation: () => Promise<T>): Promise<CircuitBreakerResult<T>> {\n    const startTime = Date.now();\n    this.metrics.totalCalls++;\n\n    // Verificar si debemos rechazar la llamada\n    if (this.shouldReject()) {\n      this.metrics.rejectedCalls++;\n      \n      await this.recordMetrics('rejected');\n      \n      return {\n        success: false,\n        error: new Error(`Circuit breaker is ${this.state} - operation rejected`),\n        state: this.state,\n        executionTime: Date.now() - startTime,\n        wasRejected: true\n      };\n    }\n\n    try {\n      // Ejecutar la operación\n      const result = await operation();\n      \n      // Registrar éxito\n      await this.onSuccess();\n      \n      const executionTime = Date.now() - startTime;\n      await this.recordMetrics('success', executionTime);\n      \n      return {\n        success: true,\n        data: result,\n        state: this.state,\n        executionTime,\n        wasRejected: false\n      };\n\n    } catch (error) {\n      // Registrar fallo\n      await this.onFailure(error as Error);\n      \n      const executionTime = Date.now() - startTime;\n      await this.recordMetrics('failure', executionTime);\n      \n      return {\n        success: false,\n        error: error as Error,\n        state: this.state,\n        executionTime,\n        wasRejected: false\n      };\n    }\n  }\n\n  /**\n   * Determina si debemos rechazar la operación\n   */\n  private shouldReject(): boolean {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CircuitBreakerState.CLOSED:\n        return false;\n\n      case CircuitBreakerState.OPEN:\n        // Verificar si es tiempo de intentar recuperación\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\n          this.transitionToHalfOpen();\n          return false;\n        }\n        return true;\n\n      case CircuitBreakerState.HALF_OPEN:\n        // Limitar llamadas en estado HALF_OPEN\n        return this.halfOpenCalls >= this.config.halfOpenMaxCalls;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Maneja un éxito en la operación\n   */\n  private async onSuccess(): Promise<void> {\n    this.lastSuccessTime = Date.now();\n    this.metrics.successfulCalls++;\n\n    switch (this.state) {\n      case CircuitBreakerState.HALF_OPEN:\n        this.successes++;\n        this.halfOpenCalls++;\n        \n        if (this.successes >= this.config.successThreshold) {\n          this.transitionToClosed();\n        }\n        break;\n\n      case CircuitBreakerState.CLOSED:\n        // Reset failure counter en ventana de monitoreo\n        if (this.isInMonitoringWindow()) {\n          this.failures = 0;\n        }\n        break;\n    }\n  }\n\n  /**\n   * Maneja un fallo en la operación\n   */\n  private async onFailure(error: Error): Promise<void> {\n    this.lastFailureTime = Date.now();\n    this.metrics.failedCalls++;\n    this.failures++;\n\n    logger.warn(LogLevel.WARN, `Circuit Breaker failure: ${this.name}`, {\n      error: error.message,\n      failures: this.failures,\n      state: this.state\n    }, LogCategory.SYSTEM);\n\n    switch (this.state) {\n      case CircuitBreakerState.CLOSED:\n        if (this.failures >= this.config.failureThreshold) {\n          this.transitionToOpen();\n        }\n        break;\n\n      case CircuitBreakerState.HALF_OPEN:\n        this.transitionToOpen();\n        break;\n    }\n  }\n\n  /**\n   * Transición a estado OPEN\n   */\n  private transitionToOpen(): void {\n    this.state = CircuitBreakerState.OPEN;\n    this.stateChanges++;\n    this.metrics.stateChanges++;\n    this.halfOpenCalls = 0;\n    this.successes = 0;\n\n    logger.warn(LogLevel.WARN, `Circuit Breaker OPENED: ${this.name}`, {\n      failures: this.failures,\n      threshold: this.config.failureThreshold\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Transición a estado HALF_OPEN\n   */\n  private transitionToHalfOpen(): void {\n    this.state = CircuitBreakerState.HALF_OPEN;\n    this.stateChanges++;\n    this.metrics.stateChanges++;\n    this.halfOpenCalls = 0;\n    this.successes = 0;\n\n    logger.info(LogLevel.INFO, `Circuit Breaker HALF-OPEN: ${this.name}`, {\n      recoveryTimeout: this.config.recoveryTimeout\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Transición a estado CLOSED\n   */\n  private transitionToClosed(): void {\n    this.state = CircuitBreakerState.CLOSED;\n    this.stateChanges++;\n    this.metrics.stateChanges++;\n    this.failures = 0;\n    this.successes = 0;\n    this.halfOpenCalls = 0;\n\n    logger.info(LogLevel.INFO, `Circuit Breaker CLOSED: ${this.name}`, {\n      successThreshold: this.config.successThreshold\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Verifica si estamos en la ventana de monitoreo\n   */\n  private isInMonitoringWindow(): boolean {\n    const now = Date.now();\n    return (now - this.lastFailureTime) <= this.config.monitoringWindow;\n  }\n\n  /**\n   * Registra métricas del circuit breaker\n   */\n  private async recordMetrics(\n    operation: 'success' | 'failure' | 'rejected',\n    executionTime?: number\n  ): Promise<void> {\n    try {\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.${operation}`, 1, {\n        state: this.state,\n        operation\n      });\n\n      if (executionTime) {\n        await metricsCollector.recordMetric(\n          `circuit_breaker.${this.name}.execution_time`,\n          executionTime,\n          { state: this.state }\n        );\n      }\n\n      // Métricas de estado\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.state_changes`, this.stateChanges);\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.failure_rate`, \n        this.metrics.totalCalls > 0 ? this.metrics.failedCalls / this.metrics.totalCalls : 0\n      );\n\n    } catch (error) {\n      logger.error(LogLevel.ERROR, `Failed to record circuit breaker metrics: ${this.name}`, {\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Obtiene el estado actual del circuit breaker\n   */\n  getState(): CircuitBreakerState {\n    return this.state;\n  }\n\n  /**\n   * Obtiene las métricas del circuit breaker\n   */\n  getMetrics(): CircuitBreakerMetrics & { state: CircuitBreakerState; config: CircuitBreakerConfig } {\n    return {\n      ...this.metrics,\n      state: this.state,\n      config: this.config\n    };\n  }\n\n  /**\n   * Fuerza el reset del circuit breaker (solo para testing/admin)\n   */\n  reset(): void {\n    this.state = CircuitBreakerState.CLOSED;\n    this.failures = 0;\n    this.successes = 0;\n    this.halfOpenCalls = 0;\n    this.lastFailureTime = 0;\n    this.lastSuccessTime = 0;\n\n    logger.info(LogLevel.INFO, `Circuit Breaker manually reset: ${this.name}`, {}, LogCategory.SYSTEM);\n  }\n}\n\n// Instancias globales de circuit breakers\nexport const mercadoPagoCriticalBreaker = new CircuitBreaker(\n  'mercadopago_critical',\n  CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_CRITICAL\n);\n\nexport const mercadoPagoStandardBreaker = new CircuitBreaker(\n  'mercadopago_standard', \n  CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_STANDARD\n);\n\nexport const webhookProcessingBreaker = new CircuitBreaker(\n  'webhook_processing',\n  CIRCUIT_BREAKER_CONFIGS.WEBHOOK_PROCESSING\n);\n\n/**\n * Wrapper para operaciones críticas de MercadoPago\n */\nexport async function executeMercadoPagoCritical<T>(\n  operation: () => Promise<T>\n): Promise<CircuitBreakerResult<T>> {\n  return mercadoPagoCriticalBreaker.execute(operation);\n}\n\n/**\n * Wrapper para operaciones estándar de MercadoPago\n */\nexport async function executeMercadoPagoStandard<T>(\n  operation: () => Promise<T>\n): Promise<CircuitBreakerResult<T>> {\n  return mercadoPagoStandardBreaker.execute(operation);\n}\n\n/**\n * Wrapper para procesamiento de webhooks\n */\nexport async function executeWebhookProcessing<T>(\n  operation: () => Promise<T>\n): Promise<CircuitBreakerResult<T>> {\n  return webhookProcessingBreaker.execute(operation);\n}\n"],"names":["CIRCUIT_BREAKER_CONFIGS","CircuitBreaker","CircuitBreakerState","executeMercadoPagoCritical","executeMercadoPagoStandard","executeWebhookProcessing","mercadoPagoCriticalBreaker","mercadoPagoStandardBreaker","webhookProcessingBreaker","MERCADOPAGO_CRITICAL","failureThreshold","recoveryTimeout","monitoringWindow","halfOpenMaxCalls","successThreshold","MERCADOPAGO_STANDARD","WEBHOOK_PROCESSING","constructor","name","config","state","failures","successes","lastFailureTime","lastSuccessTime","halfOpenCalls","stateChanges","metrics","totalCalls","successfulCalls","failedCalls","rejectedCalls","logger","debug","LogLevel","DEBUG","LogCategory","SYSTEM","execute","operation","startTime","Date","now","shouldReject","recordMetrics","success","error","Error","executionTime","wasRejected","result","onSuccess","data","onFailure","transitionToHalfOpen","transitionToClosed","isInMonitoringWindow","warn","WARN","message","transitionToOpen","threshold","info","INFO","metricsCollector","recordMetric","ERROR","getState","getMetrics","reset"],"mappings":"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"}