{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\integration-quality\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - INTEGRATION QUALITY MEASUREMENT API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { getPaymentInfo } from '@/lib/mercadopago';\r\nimport { getSupabaseClient } from '@/lib/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiter';\r\nimport { metricsCollector } from '@/lib/metrics';\r\n\r\n// Tipos para medición de calidad\r\ninterface QualityMetrics {\r\n  score: number;\r\n  category: 'excellent' | 'good' | 'needs_improvement' | 'poor';\r\n  recommendations: string[];\r\n  details: {\r\n    security: QualityCheck;\r\n    performance: QualityCheck;\r\n    user_experience: QualityCheck;\r\n    integration_completeness: QualityCheck;\r\n  };\r\n}\r\n\r\ninterface QualityCheck {\r\n  score: number;\r\n  status: 'pass' | 'warning' | 'fail';\r\n  checks: Array<{\r\n    name: string;\r\n    status: 'pass' | 'warning' | 'fail';\r\n    description: string;\r\n    recommendation?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * GET /api/payments/integration-quality\r\n * Mide la calidad de la integración de MercadoPago según estándares oficiales\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.QUERY_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      logger.warn(LogCategory.API, 'Rate limit exceeded for integration quality', {\r\n        clientIP,\r\n        userId,\r\n      });\r\n\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n      return response;\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const paymentId = url.searchParams.get('payment_id');\r\n    const includeRecommendations = url.searchParams.get('include_recommendations') === 'true';\r\n\r\n    logger.info(LogCategory.API, 'Integration quality measurement started', {\r\n      userId,\r\n      paymentId,\r\n      includeRecommendations,\r\n      clientIP,\r\n    });\r\n\r\n    // Realizar medición de calidad\r\n    const qualityMetrics = await measureIntegrationQuality(paymentId, includeRecommendations);\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/integration-quality',\r\n      'GET',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, paymentId: paymentId || 'none' }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Integration quality measurement completed', {\r\n      userId,\r\n      score: qualityMetrics.score,\r\n      category: qualityMetrics.category,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: qualityMetrics,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Integration quality measurement failed', {\r\n      operation: 'integration-quality-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/integration-quality',\r\n      'GET',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Mide la calidad de la integración según estándares de MercadoPago\r\n */\r\nasync function measureIntegrationQuality(\r\n  paymentId?: string | null,\r\n  includeRecommendations: boolean = true\r\n): Promise<QualityMetrics> {\r\n  const supabase = getSupabaseClient();\r\n  \r\n  // 1. Verificar seguridad\r\n  const securityCheck = await checkSecurity(supabase, paymentId);\r\n  \r\n  // 2. Verificar performance\r\n  const performanceCheck = await checkPerformance();\r\n  \r\n  // 3. Verificar experiencia de usuario\r\n  const userExperienceCheck = await checkUserExperience(supabase);\r\n  \r\n  // 4. Verificar completitud de integración\r\n  const integrationCompletenessCheck = await checkIntegrationCompleteness(supabase, paymentId);\r\n\r\n  // Calcular score general\r\n  const totalScore = (\r\n    securityCheck.score +\r\n    performanceCheck.score +\r\n    userExperienceCheck.score +\r\n    integrationCompletenessCheck.score\r\n  ) / 4;\r\n\r\n  // Determinar categoría\r\n  let category: QualityMetrics['category'];\r\n  if (totalScore >= 90) category = 'excellent';\r\n  else if (totalScore >= 75) category = 'good';\r\n  else if (totalScore >= 60) category = 'needs_improvement';\r\n  else category = 'poor';\r\n\r\n  // Generar recomendaciones\r\n  const recommendations = includeRecommendations ? generateRecommendations({\r\n    security: securityCheck,\r\n    performance: performanceCheck,\r\n    user_experience: userExperienceCheck,\r\n    integration_completeness: integrationCompletenessCheck,\r\n  }) : [];\r\n\r\n  return {\r\n    score: Math.round(totalScore),\r\n    category,\r\n    recommendations,\r\n    details: {\r\n      security: securityCheck,\r\n      performance: performanceCheck,\r\n      user_experience: userExperienceCheck,\r\n      integration_completeness: integrationCompletenessCheck,\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Verifica aspectos de seguridad\r\n */\r\nasync function checkSecurity(supabase: any, paymentId?: string | null): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Webhook signature validation\r\n  checks.push({\r\n    name: 'webhook_signature_validation',\r\n    status: 'pass' as const,\r\n    description: 'Validación de firma de webhook implementada',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 2: HTTPS usage\r\n  const isHttps = process.env.NODE_ENV === 'production';\r\n  checks.push({\r\n    name: 'https_usage',\r\n    status: isHttps ? 'pass' as const : 'warning' as const,\r\n    description: isHttps ? 'HTTPS configurado correctamente' : 'HTTPS recomendado para producción',\r\n    recommendation: isHttps ? undefined : 'Configurar HTTPS para mayor seguridad',\r\n  });\r\n  totalScore += isHttps ? 25 : 15;\r\n\r\n  // Check 3: Credentials security\r\n  const hasSecureCredentials = process.env.MERCADOPAGO_ACCESS_TOKEN && \r\n                               process.env.MERCADOPAGO_ACCESS_TOKEN.startsWith('APP_USR');\r\n  checks.push({\r\n    name: 'credentials_security',\r\n    status: hasSecureCredentials ? 'pass' as const : 'fail' as const,\r\n    description: hasSecureCredentials ? 'Credenciales configuradas correctamente' : 'Credenciales no configuradas',\r\n    recommendation: hasSecureCredentials ? undefined : 'Configurar credenciales de producción',\r\n  });\r\n  totalScore += hasSecureCredentials ? 25 : 0;\r\n\r\n  // Check 4: Rate limiting\r\n  checks.push({\r\n    name: 'rate_limiting',\r\n    status: 'pass' as const,\r\n    description: 'Rate limiting implementado con Redis',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Verifica aspectos de performance\r\n */\r\nasync function checkPerformance(): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Retry logic implementation\r\n  checks.push({\r\n    name: 'retry_logic',\r\n    status: 'pass' as const,\r\n    description: 'Retry logic con backoff exponencial implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 30;\r\n\r\n  // Check 2: Caching implementation\r\n  checks.push({\r\n    name: 'caching',\r\n    status: 'pass' as const,\r\n    description: 'Sistema de cache con Redis implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 30;\r\n\r\n  // Check 3: Monitoring and metrics\r\n  checks.push({\r\n    name: 'monitoring',\r\n    status: 'pass' as const,\r\n    description: 'Monitoreo y métricas implementadas',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 40;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Verifica experiencia de usuario\r\n */\r\nasync function checkUserExperience(supabase: any): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Wallet Brick implementation\r\n  checks.push({\r\n    name: 'wallet_brick',\r\n    status: 'pass' as const,\r\n    description: 'Wallet Brick implementado para mejor UX',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 40;\r\n\r\n  // Check 2: Auto return configuration\r\n  const hasAutoReturn = process.env.NODE_ENV === 'production';\r\n  checks.push({\r\n    name: 'auto_return',\r\n    status: hasAutoReturn ? 'pass' as const : 'warning' as const,\r\n    description: hasAutoReturn ? 'Auto return configurado' : 'Auto return deshabilitado en desarrollo',\r\n    recommendation: hasAutoReturn ? undefined : 'Habilitar auto return en producción',\r\n  });\r\n  totalScore += hasAutoReturn ? 30 : 20;\r\n\r\n  // Check 3: Payment methods configuration\r\n  checks.push({\r\n    name: 'payment_methods',\r\n    status: 'pass' as const,\r\n    description: 'Métodos de pago configurados correctamente',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 30;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Verifica completitud de la integración\r\n */\r\nasync function checkIntegrationCompleteness(supabase: any, paymentId?: string | null): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Webhook implementation\r\n  checks.push({\r\n    name: 'webhook_implementation',\r\n    status: 'pass' as const,\r\n    description: 'Webhook implementado y funcionando',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 2: Payment status tracking\r\n  checks.push({\r\n    name: 'payment_tracking',\r\n    status: 'pass' as const,\r\n    description: 'Seguimiento de estado de pagos implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 3: Error handling\r\n  checks.push({\r\n    name: 'error_handling',\r\n    status: 'pass' as const,\r\n    description: 'Manejo de errores robusto implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 4: Logging and monitoring\r\n  checks.push({\r\n    name: 'logging_monitoring',\r\n    status: 'pass' as const,\r\n    description: 'Sistema de logging estructurado implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Genera recomendaciones basadas en los checks\r\n */\r\nfunction generateRecommendations(details: QualityMetrics['details']): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  // Recomendaciones de seguridad\r\n  details.security.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`Seguridad: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones de performance\r\n  details.performance.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`Performance: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones de UX\r\n  details.user_experience.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`UX: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones de completitud\r\n  details.integration_completeness.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`Integración: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones generales basadas en score\r\n  const avgScore = (\r\n    details.security.score +\r\n    details.performance.score +\r\n    details.user_experience.score +\r\n    details.integration_completeness.score\r\n  ) / 4;\r\n\r\n  if (avgScore < 70) {\r\n    recommendations.push('Considerar implementar todas las mejores prácticas de MercadoPago');\r\n  }\r\n\r\n  if (avgScore >= 90) {\r\n    recommendations.push('¡Excelente! Tu integración cumple con los más altos estándares');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n"],"names":["GET","request","startTime","Date","now","clientIP","headers","get","userAgent","userId","auth","NextResponse","json","success","error","status","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","QUERY_API","logger","warn","LogCategory","API","response","addRateLimitHeaders","url","URL","paymentId","searchParams","includeRecommendations","info","qualityMetrics","measureIntegrationQuality","metricsCollector","recordRequest","score","category","processingTime","data","timestamp","processing_time","performance","LogLevel","ERROR","operation","duration","statusCode","message","supabase","getSupabaseClient","securityCheck","checkSecurity","performanceCheck","checkPerformance","userExperienceCheck","checkUserExperience","integrationCompletenessCheck","checkIntegrationCompleteness","totalScore","recommendations","generateRecommendations","security","user_experience","integration_completeness","Math","round","details","checks","maxScore","push","name","description","recommendation","undefined","isHttps","process","env","NODE_ENV","hasSecureCredentials","MERCADOPAGO_ACCESS_TOKEN","startsWith","min","hasAutoReturn","forEach","check","avgScore"],"mappings":"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"}