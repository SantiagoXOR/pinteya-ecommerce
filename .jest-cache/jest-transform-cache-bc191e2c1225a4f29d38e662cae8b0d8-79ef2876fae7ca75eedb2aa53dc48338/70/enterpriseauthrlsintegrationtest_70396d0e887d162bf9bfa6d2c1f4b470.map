{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\integration\\enterprise-auth-rls-integration.test.ts"],"sourcesContent":["/**\n * Tests de Integración Enterprise Auth + RLS\n * Valida la integración completa entre utilidades enterprise, RLS y APIs\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  getAuth: jest.fn(),\n  auth: jest.fn(),\n  clerkClient: jest.fn()\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    auth: {\n      admin: {\n        listUsers: jest.fn(),\n        createUser: jest.fn()\n      }\n    },\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          range: jest.fn(() => ({\n            order: jest.fn(() => ({\n              then: jest.fn()\n            }))\n          }))\n        })),\n        or: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            range: jest.fn(() => ({\n              order: jest.fn()\n            }))\n          }))\n        }))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\n// Mock de createClient de Supabase\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => ({\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      }))\n    }))\n  }))\n}));\n\nimport { NextRequest } from 'next/server';\nimport { getAuth, auth } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { createClient } from '@supabase/supabase-js';\n\n// Importar utilidades enterprise\nimport {\n  getEnterpriseAuthContext,\n  requireAdminAuth,\n  requireCriticalAuth\n} from '@/lib/auth/enterprise-auth-utils';\nimport {\n  validateRLSContext,\n  executeWithRLS,\n  createRLSFilters\n} from '@/lib/auth/enterprise-rls-utils';\nimport {\n  searchEnterpriseUsers,\n  getEnterpriseUser\n} from '@/lib/auth/enterprise-user-management';\nimport {\n  withCache,\n  getCacheStats\n} from '@/lib/auth/enterprise-cache';\n\ndescribe('Integración Enterprise Auth + RLS', () => {\n  let mockGetAuth: jest.MockedFunction<typeof getAuth>;\n  let mockAuth: jest.MockedFunction<typeof auth>;\n\n  beforeEach(() => {\n    mockGetAuth = getAuth as jest.MockedFunction<typeof getAuth>;\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\n    \n    jest.clearAllMocks();\n\n    // Setup environment variables\n    process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';\n\n    // Mock Clerk auth responses\n    mockGetAuth.mockReturnValue({\n      userId: 'user_123',\n      sessionId: 'sess_123'\n    });\n\n    mockAuth.mockResolvedValue({\n      userId: 'user_123',\n      sessionId: 'sess_123'\n    });\n\n    // Mock Supabase responses\n    (supabaseAdmin.from as jest.Mock).mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({\n            data: {\n              id: 'profile_123',\n              supabase_user_id: 'supabase_123',\n              clerk_user_id: 'user_123',\n              email: 'admin@test.com',\n              role_id: 1,\n              permissions: ['admin_access', 'user_management', 'products_read'],\n              is_active: true,\n              user_roles: { role_name: 'admin' }\n            },\n            error: null\n          })\n        })\n      })\n    });\n  });\n\n  describe('Flujo Completo de Autenticación Enterprise', () => {\n    it('debe completar flujo enterprise completo: Auth → RLS → Cache → API', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {},\n        url: 'http://localhost:3000/api/test',\n        method: 'GET'\n      } as any;\n\n      // 1. PASO: Autenticación Enterprise\n      const authResult = await getEnterpriseAuthContext(mockRequest, {\n        securityLevel: 'critical',\n        enableJWTValidation: false, // Simplificar para test\n        enableCSRFProtection: false,\n        enableRateLimit: false\n      });\n\n      expect(authResult.success).toBe(true);\n      expect(authResult.context).toBeDefined();\n      expect(authResult.context?.userId).toBe('user_123');\n      expect(authResult.context?.role).toBe('admin');\n\n      // 2. PASO: Validación RLS\n      const rlsValidation = await validateRLSContext(authResult.context!);\n      \n      expect(rlsValidation.valid).toBe(true);\n      expect(rlsValidation.context?.role).toBe('admin');\n      expect(rlsValidation.context?.permissions).toContain('admin_access');\n\n      // 3. PASO: Filtros RLS\n      const rlsFilters = createRLSFilters(rlsValidation.context!, 'products');\n      \n      // Admin no debe tener filtros restrictivos\n      expect(rlsFilters).toEqual({});\n\n      // 4. PASO: Cache Enterprise\n      const cacheStats = getCacheStats();\n      \n      expect(cacheStats).toBeDefined();\n      expect(typeof cacheStats.hits).toBe('number');\n      expect(typeof cacheStats.misses).toBe('number');\n\n      // 5. PASO: Integración completa\n      expect(authResult.success && rlsValidation.valid).toBe(true);\n    });\n\n    it('debe manejar usuario normal con filtros RLS restrictivos', async () => {\n      // Mock usuario normal\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'profile_456',\n                clerk_user_id: 'user_456',\n                email: 'user@test.com',\n                role_id: 2,\n                permissions: ['basic_access'],\n                is_active: true,\n                user_roles: { role_name: 'user' }\n              },\n              error: null\n            })\n          })\n        })\n      });\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_456',\n        sessionId: 'sess_456'\n      });\n\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      // 1. Autenticación\n      const authResult = await getEnterpriseAuthContext(mockRequest, {\n        securityLevel: 'medium',\n        enableJWTValidation: false,\n        enableCSRFProtection: false,\n        enableRateLimit: false\n      });\n\n      expect(authResult.success).toBe(true);\n      expect(authResult.context?.role).toBe('user');\n\n      // 2. RLS para usuario normal\n      const rlsValidation = await validateRLSContext(authResult.context!);\n      expect(rlsValidation.valid).toBe(true);\n\n      // 3. Filtros RLS restrictivos para usuario normal\n      const productFilters = createRLSFilters(rlsValidation.context!, 'products');\n      const userProfileFilters = createRLSFilters(rlsValidation.context!, 'user_profiles');\n      const orderFilters = createRLSFilters(rlsValidation.context!, 'orders');\n\n      // Usuario normal debe tener filtros restrictivos\n      expect(productFilters).toEqual({ is_active: true });\n      expect(userProfileFilters).toEqual({ clerk_user_id: 'user_456' });\n      expect(orderFilters).toEqual({ user_id: 'user_456' });\n    });\n  });\n\n  describe('Integración con APIs Enterprise', () => {\n    it('debe integrar correctamente con requireAdminAuth', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n\n      const result = await requireAdminAuth(mockRequest, ['user_management']);\n\n      expect(result.success).toBe(true);\n      expect(result.context?.permissions).toContain('user_management');\n    });\n\n    it('debe integrar correctamente con requireCriticalAuth', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n\n      const result = await requireCriticalAuth(mockRequest);\n\n      expect(result.success).toBe(true);\n      expect(result.context?.securityLevel).toBe('critical');\n    });\n\n    it('debe ejecutar consultas con RLS correctamente', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n      \n      const authResult = await getEnterpriseAuthContext(mockRequest, {\n        securityLevel: 'high',\n        enableJWTValidation: false,\n        enableCSRFProtection: false,\n        enableRateLimit: false\n      });\n\n      expect(authResult.success).toBe(true);\n\n      const queryResult = await executeWithRLS(\n        authResult.context!,\n        async (client, rlsContext) => {\n          expect(client).toBeDefined();\n          expect(rlsContext.role).toBe('admin');\n          return { data: 'test' };\n        },\n        { enforceRLS: true, auditLog: false }\n      );\n\n      expect(queryResult.success).toBe(true);\n      expect(queryResult.data).toEqual({ data: 'test' });\n    });\n  });\n\n  describe('Gestión de Usuarios Enterprise', () => {\n    it('debe obtener usuario enterprise correctamente', async () => {\n      const result = await getEnterpriseUser('user_123');\n\n      expect(result.success).toBe(true);\n      expect(result.user?.clerkId).toBe('user_123');\n      expect(result.user?.role).toBe('admin');\n    });\n\n    it('debe buscar usuarios enterprise con contexto', async () => {\n      const mockContext = {\n        userId: 'user_123',\n        role: 'admin' as const,\n        permissions: ['user_management'],\n        sessionValid: true,\n        securityLevel: 'high' as const,\n        supabase: supabaseAdmin,\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      };\n\n      // Mock search response\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          or: jest.fn().mockReturnValue({\n            eq: jest.fn().mockReturnValue({\n              order: jest.fn().mockReturnValue({\n                limit: jest.fn().mockReturnValue({\n                  range: jest.fn().mockResolvedValue({\n                    data: [\n                      {\n                        id: 'profile_123',\n                        clerk_user_id: 'user_123',\n                        email: 'admin@test.com',\n                        role: 'admin',\n                        permissions: ['admin_access'],\n                        is_active: true\n                      }\n                    ],\n                    error: null,\n                    count: 1\n                  })\n                })\n              })\n            })\n          })\n        })\n      });\n\n      const result = await searchEnterpriseUsers({\n        query: 'admin',\n        limit: 10,\n        offset: 0\n      }, mockContext);\n\n      expect(result.success).toBe(true);\n      expect(result.users).toBeDefined();\n      expect(result.total).toBe(1);\n    });\n  });\n\n  describe('Cache Enterprise Integration', () => {\n    it('debe usar cache correctamente en operaciones enterprise', async () => {\n      const cacheKey = 'test_cache_key';\n      const testData = { test: 'data' };\n\n      const result = await withCache(\n        cacheKey,\n        async () => testData,\n        60000 // 1 minuto\n      );\n\n      expect(result).toEqual(testData);\n    });\n\n    it('debe proporcionar estadísticas de cache', () => {\n      const stats = getCacheStats();\n\n      expect(stats).toHaveProperty('hits');\n      expect(stats).toHaveProperty('misses');\n      expect(stats).toHaveProperty('entries');\n      expect(stats).toHaveProperty('hitRate');\n      expect(stats).toHaveProperty('memoryUsage');\n    });\n  });\n\n  describe('Escenarios de Error', () => {\n    it('debe manejar usuario no autenticado', async () => {\n      mockGetAuth.mockReturnValue({\n        userId: null,\n        sessionId: null\n      });\n\n      const mockRequest = { query: {}, headers: {} } as any;\n\n      const result = await getEnterpriseAuthContext(mockRequest);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Usuario no autenticado');\n      expect(result.code).toBe('NOT_AUTHENTICATED');\n    });\n\n    it('debe manejar usuario inactivo en RLS', async () => {\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'profile_123',\n                is_active: false,\n                user_roles: { role_name: 'user' }\n              },\n              error: null\n            })\n          })\n        })\n      });\n\n      const mockContext = {\n        userId: 'user_123',\n        role: 'user' as const,\n        permissions: [],\n        sessionValid: true,\n        securityLevel: 'medium' as const,\n        supabase: supabaseAdmin,\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      };\n\n      const result = await validateRLSContext(mockContext);\n\n      expect(result.valid).toBe(false);\n      expect(result.error).toBe('Usuario inactivo o no encontrado');\n    });\n\n    it('debe manejar permisos insuficientes', async () => {\n      const mockRequest = { query: {}, headers: {} } as any;\n\n      // Mock usuario sin permisos admin\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'profile_123',\n                role_id: 2,\n                permissions: ['basic_access'],\n                is_active: true,\n                user_roles: { role_name: 'user' }\n              },\n              error: null\n            })\n          })\n        })\n      });\n\n      const result = await requireAdminAuth(mockRequest, ['admin_access']);\n\n      expect(result.success).toBe(false);\n      expect(result.code).toBe('INSUFFICIENT_ROLE');\n    });\n  });\n});\n"],"names":["jest","mock","getAuth","fn","auth","clerkClient","supabaseAdmin","admin","listUsers","createUser","from","select","eq","single","range","order","then","or","insert","update","createClient","describe","mockGetAuth","mockAuth","beforeEach","clearAllMocks","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","mockReturnValue","userId","sessionId","mockResolvedValue","data","id","supabase_user_id","clerk_user_id","email","role_id","permissions","is_active","user_roles","role_name","error","it","mockRequest","query","headers","url","method","authResult","getEnterpriseAuthContext","securityLevel","enableJWTValidation","enableCSRFProtection","enableRateLimit","expect","success","toBe","context","toBeDefined","role","rlsValidation","validateRLSContext","valid","toContain","rlsFilters","createRLSFilters","toEqual","cacheStats","getCacheStats","hits","misses","productFilters","userProfileFilters","orderFilters","user_id","result","requireAdminAuth","requireCriticalAuth","queryResult","executeWithRLS","client","rlsContext","enforceRLS","auditLog","getEnterpriseUser","user","clerkId","mockContext","sessionValid","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","limit","count","searchEnterpriseUsers","offset","users","total","cacheKey","testData","test","withCache","stats","toHaveProperty","code"],"mappings":"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"}