58222613796b5db3f325f1beaaa4aad7
// ===================================
// COMPONENTE: SearchAutocompleteIntegrated - Integración completa con useSearch
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SearchAutocompleteIntegrated: function() {
        return SearchAutocompleteIntegrated;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _searchautocomplete = require("./search-autocomplete");
const _useSearchOptimized = require("../../hooks/useSearchOptimized");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const SearchAutocompleteIntegrated = /*#__PURE__*/ _react.default.forwardRef(({ debounceMs = 150, maxSuggestions = 6, searchLimit = 12, saveRecentSearches = true, onSearchExecuted, onSuggestionSelected, onSearch, onSuggestionSelect, ...props }, ref)=>{
    // Hook de búsqueda optimizado con TanStack Query
    const { query, results, suggestions, isLoading, error, searchWithDebounce, executeSearch, selectSuggestion, clearSearch } = (0, _useSearchOptimized.useSearchOptimized)({
        debounceMs,
        maxSuggestions,
        searchLimit,
        saveRecentSearches,
        onSearch: (query, results)=>{
            console.log(`🔍 SearchAutocompleteIntegrated: Búsqueda ejecutada: "${query}" - ${results.length} resultados`);
            onSearchExecuted?.(query, results);
            onSearch?.(query);
        },
        onSuggestionSelect: (suggestion)=>{
            console.log(`✅ SearchAutocompleteIntegrated: Sugerencia seleccionada: ${suggestion.title}`);
            onSuggestionSelected?.(suggestion);
            onSuggestionSelect?.(suggestion);
        }
    });
    // Manejar envío de búsqueda
    const handleSearch = (query)=>{
        console.log('🔍 SearchAutocompleteIntegrated: handleSearch llamado con:', query);
        executeSearch(query);
    };
    // Manejar selección de sugerencia
    const handleSuggestionSelect = (suggestion)=>{
        console.log('✅ SearchAutocompleteIntegrated: handleSuggestionSelect llamado con:', suggestion);
        selectSuggestion(suggestion);
    };
    // Manejar limpieza
    const handleClear = ()=>{
        console.log('🧹 SearchAutocompleteIntegrated: handleClear llamado');
        clearSearch();
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
        ref: ref,
        ...props,
        // Estado del hook optimizado
        query: query,
        suggestions: suggestions,
        isLoading: isLoading,
        error: error,
        // Callbacks integrados
        onSearch: handleSearch,
        onSuggestionSelect: handleSuggestionSelect,
        searchWithDebounce: searchWithDebounce,
        onClear: handleClear
    });
});
SearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated';
const _default = SearchAutocompleteIntegrated;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcdWlcXFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIENPTVBPTkVOVEU6IFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQgLSBJbnRlZ3JhY2nDs24gY29tcGxldGEgY29uIHVzZVNlYXJjaFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2VhcmNoQXV0b2NvbXBsZXRlLCBTZWFyY2hBdXRvY29tcGxldGVQcm9wcyB9IGZyb20gJy4vc2VhcmNoLWF1dG9jb21wbGV0ZSc7XHJcbmltcG9ydCB7IHVzZVNlYXJjaE9wdGltaXplZCB9IGZyb20gJ0AvaG9va3MvdXNlU2VhcmNoT3B0aW1pemVkJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZFByb3BzIFxyXG4gIGV4dGVuZHMgT21pdDxTZWFyY2hBdXRvY29tcGxldGVQcm9wcywgJ3F1ZXJ5JyB8ICdzdWdnZXN0aW9ucycgfCAnaXNMb2FkaW5nJyB8ICdlcnJvcicgfCAnc2VhcmNoV2l0aERlYm91bmNlJyB8ICdvbkNsZWFyJz4ge1xyXG4gIC8vIENvbmZpZ3VyYWNpw7NuIGRlbCBob29rIHVzZVNlYXJjaFxyXG4gIGRlYm91bmNlTXM/OiBudW1iZXI7XHJcbiAgbWF4U3VnZ2VzdGlvbnM/OiBudW1iZXI7XHJcbiAgc2VhcmNoTGltaXQ/OiBudW1iZXI7XHJcbiAgc2F2ZVJlY2VudFNlYXJjaGVzPzogYm9vbGVhbjtcclxuICBcclxuICAvLyBDYWxsYmFja3MgYWRpY2lvbmFsZXNcclxuICBvblNlYXJjaEV4ZWN1dGVkPzogKHF1ZXJ5OiBzdHJpbmcsIHJlc3VsdHM6IGFueVtdKSA9PiB2b2lkO1xyXG4gIG9uU3VnZ2VzdGlvblNlbGVjdGVkPzogKHN1Z2dlc3Rpb246IGFueSkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQgLSBDb21wb25lbnRlIHF1ZSBpbnRlZ3JhIFNlYXJjaEF1dG9jb21wbGV0ZSBjb24gdXNlU2VhcmNoXHJcbiAqIFxyXG4gKiBFc3RlIGNvbXBvbmVudGUgcHJvcG9yY2lvbmEgdW5hIGV4cGVyaWVuY2lhIGRlIGLDunNxdWVkYSBjb21wbGV0YSBzaW4gbmVjZXNpZGFkXHJcbiAqIGRlIG1hbmVqYXIgbWFudWFsbWVudGUgZWwgZXN0YWRvIGRlbCBob29rIHVzZVNlYXJjaC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MSW5wdXRFbGVtZW50LCBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkUHJvcHM+KFxyXG4gICh7XHJcbiAgICBkZWJvdW5jZU1zID0gMTUwLFxyXG4gICAgbWF4U3VnZ2VzdGlvbnMgPSA2LFxyXG4gICAgc2VhcmNoTGltaXQgPSAxMixcclxuICAgIHNhdmVSZWNlbnRTZWFyY2hlcyA9IHRydWUsXHJcbiAgICBvblNlYXJjaEV4ZWN1dGVkLFxyXG4gICAgb25TdWdnZXN0aW9uU2VsZWN0ZWQsXHJcbiAgICBvblNlYXJjaCxcclxuICAgIG9uU3VnZ2VzdGlvblNlbGVjdCxcclxuICAgIC4uLnByb3BzXHJcbiAgfSwgcmVmKSA9PiB7XHJcbiAgICBcclxuICAgIC8vIEhvb2sgZGUgYsO6c3F1ZWRhIG9wdGltaXphZG8gY29uIFRhblN0YWNrIFF1ZXJ5XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHF1ZXJ5LFxyXG4gICAgICByZXN1bHRzLFxyXG4gICAgICBzdWdnZXN0aW9ucyxcclxuICAgICAgaXNMb2FkaW5nLFxyXG4gICAgICBlcnJvcixcclxuICAgICAgc2VhcmNoV2l0aERlYm91bmNlLFxyXG4gICAgICBleGVjdXRlU2VhcmNoLFxyXG4gICAgICBzZWxlY3RTdWdnZXN0aW9uLFxyXG4gICAgICBjbGVhclNlYXJjaCxcclxuICAgIH0gPSB1c2VTZWFyY2hPcHRpbWl6ZWQoe1xyXG4gICAgICBkZWJvdW5jZU1zLFxyXG4gICAgICBtYXhTdWdnZXN0aW9ucyxcclxuICAgICAgc2VhcmNoTGltaXQsXHJcbiAgICAgIHNhdmVSZWNlbnRTZWFyY2hlcyxcclxuICAgICAgb25TZWFyY2g6IChxdWVyeSwgcmVzdWx0cykgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5SNIFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQ6IELDunNxdWVkYSBlamVjdXRhZGE6IFwiJHtxdWVyeX1cIiAtICR7cmVzdWx0cy5sZW5ndGh9IHJlc3VsdGFkb3NgKTtcclxuICAgICAgICBvblNlYXJjaEV4ZWN1dGVkPy4ocXVlcnksIHJlc3VsdHMpO1xyXG4gICAgICAgIG9uU2VhcmNoPy4ocXVlcnkpO1xyXG4gICAgICB9LFxyXG4gICAgICBvblN1Z2dlc3Rpb25TZWxlY3Q6IChzdWdnZXN0aW9uKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkOiBTdWdlcmVuY2lhIHNlbGVjY2lvbmFkYTogJHtzdWdnZXN0aW9uLnRpdGxlfWApO1xyXG4gICAgICAgIG9uU3VnZ2VzdGlvblNlbGVjdGVkPy4oc3VnZ2VzdGlvbik7XHJcbiAgICAgICAgb25TdWdnZXN0aW9uU2VsZWN0Py4oc3VnZ2VzdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE1hbmVqYXIgZW52w61vIGRlIGLDunNxdWVkYVxyXG4gICAgY29uc3QgaGFuZGxlU2VhcmNoID0gKHF1ZXJ5OiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ/CflI0gU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZDogaGFuZGxlU2VhcmNoIGxsYW1hZG8gY29uOicsIHF1ZXJ5KTtcclxuICAgICAgZXhlY3V0ZVNlYXJjaChxdWVyeSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1hbmVqYXIgc2VsZWNjacOzbiBkZSBzdWdlcmVuY2lhXHJcbiAgICBjb25zdCBoYW5kbGVTdWdnZXN0aW9uU2VsZWN0ID0gKHN1Z2dlc3Rpb246IGFueSkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIFNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQ6IGhhbmRsZVN1Z2dlc3Rpb25TZWxlY3QgbGxhbWFkbyBjb246Jywgc3VnZ2VzdGlvbik7XHJcbiAgICAgIHNlbGVjdFN1Z2dlc3Rpb24oc3VnZ2VzdGlvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1hbmVqYXIgbGltcGllemFcclxuICAgIGNvbnN0IGhhbmRsZUNsZWFyID0gKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygn8J+nuSBTZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkOiBoYW5kbGVDbGVhciBsbGFtYWRvJyk7XHJcbiAgICAgIGNsZWFyU2VhcmNoKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxTZWFyY2hBdXRvY29tcGxldGVcclxuICAgICAgICByZWY9e3JlZn1cclxuICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgLy8gRXN0YWRvIGRlbCBob29rIG9wdGltaXphZG9cclxuICAgICAgICBxdWVyeT17cXVlcnl9XHJcbiAgICAgICAgc3VnZ2VzdGlvbnM9e3N1Z2dlc3Rpb25zfVxyXG4gICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxyXG4gICAgICAgIGVycm9yPXtlcnJvcn1cclxuICAgICAgICAvLyBDYWxsYmFja3MgaW50ZWdyYWRvc1xyXG4gICAgICAgIG9uU2VhcmNoPXtoYW5kbGVTZWFyY2h9XHJcbiAgICAgICAgb25TdWdnZXN0aW9uU2VsZWN0PXtoYW5kbGVTdWdnZXN0aW9uU2VsZWN0fVxyXG4gICAgICAgIHNlYXJjaFdpdGhEZWJvdW5jZT17c2VhcmNoV2l0aERlYm91bmNlfVxyXG4gICAgICAgIG9uQ2xlYXI9e2hhbmRsZUNsZWFyfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcblxyXG5TZWFyY2hBdXRvY29tcGxldGVJbnRlZ3JhdGVkLmRpc3BsYXlOYW1lID0gJ1NlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQXV0b2NvbXBsZXRlSW50ZWdyYXRlZDtcclxuIl0sIm5hbWVzIjpbIlNlYXJjaEF1dG9jb21wbGV0ZUludGVncmF0ZWQiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJkZWJvdW5jZU1zIiwibWF4U3VnZ2VzdGlvbnMiLCJzZWFyY2hMaW1pdCIsInNhdmVSZWNlbnRTZWFyY2hlcyIsIm9uU2VhcmNoRXhlY3V0ZWQiLCJvblN1Z2dlc3Rpb25TZWxlY3RlZCIsIm9uU2VhcmNoIiwib25TdWdnZXN0aW9uU2VsZWN0IiwicHJvcHMiLCJyZWYiLCJxdWVyeSIsInJlc3VsdHMiLCJzdWdnZXN0aW9ucyIsImlzTG9hZGluZyIsImVycm9yIiwic2VhcmNoV2l0aERlYm91bmNlIiwiZXhlY3V0ZVNlYXJjaCIsInNlbGVjdFN1Z2dlc3Rpb24iLCJjbGVhclNlYXJjaCIsInVzZVNlYXJjaE9wdGltaXplZCIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJzdWdnZXN0aW9uIiwidGl0bGUiLCJoYW5kbGVTZWFyY2giLCJoYW5kbGVTdWdnZXN0aW9uU2VsZWN0IiwiaGFuZGxlQ2xlYXIiLCJTZWFyY2hBdXRvY29tcGxldGUiLCJvbkNsZWFyIiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0QyxnRkFBZ0Y7QUFDaEYsc0NBQXNDOzs7Ozs7Ozs7Ozs7SUF5QnpCQSw0QkFBNEI7ZUFBNUJBOztJQWdGYixPQUE0QztlQUE1Qzs7Ozs4REF2R2tCO29DQUMwQztvQ0FDekI7Ozs7OztBQXFCNUIsTUFBTUEsNkNBQStCQyxjQUFLLENBQUNDLFVBQVUsQ0FDMUQsQ0FBQyxFQUNDQyxhQUFhLEdBQUcsRUFDaEJDLGlCQUFpQixDQUFDLEVBQ2xCQyxjQUFjLEVBQUUsRUFDaEJDLHFCQUFxQixJQUFJLEVBQ3pCQyxnQkFBZ0IsRUFDaEJDLG9CQUFvQixFQUNwQkMsUUFBUSxFQUNSQyxrQkFBa0IsRUFDbEIsR0FBR0MsT0FDSixFQUFFQztJQUVELGlEQUFpRDtJQUNqRCxNQUFNLEVBQ0pDLEtBQUssRUFDTEMsT0FBTyxFQUNQQyxXQUFXLEVBQ1hDLFNBQVMsRUFDVEMsS0FBSyxFQUNMQyxrQkFBa0IsRUFDbEJDLGFBQWEsRUFDYkMsZ0JBQWdCLEVBQ2hCQyxXQUFXLEVBQ1osR0FBR0MsSUFBQUEsc0NBQWtCLEVBQUM7UUFDckJuQjtRQUNBQztRQUNBQztRQUNBQztRQUNBRyxVQUFVLENBQUNJLE9BQU9DO1lBQ2hCUyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxzREFBc0QsRUFBRVgsTUFBTSxJQUFJLEVBQUVDLFFBQVFXLE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDNUdsQixtQkFBbUJNLE9BQU9DO1lBQzFCTCxXQUFXSTtRQUNiO1FBQ0FILG9CQUFvQixDQUFDZ0I7WUFDbkJILFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHlEQUF5RCxFQUFFRSxXQUFXQyxLQUFLLEVBQUU7WUFDMUZuQix1QkFBdUJrQjtZQUN2QmhCLHFCQUFxQmdCO1FBQ3ZCO0lBQ0Y7SUFFQSw0QkFBNEI7SUFDNUIsTUFBTUUsZUFBZSxDQUFDZjtRQUNwQlUsUUFBUUMsR0FBRyxDQUFDLDhEQUE4RFg7UUFDMUVNLGNBQWNOO0lBQ2hCO0lBRUEsa0NBQWtDO0lBQ2xDLE1BQU1nQix5QkFBeUIsQ0FBQ0g7UUFDOUJILFFBQVFDLEdBQUcsQ0FBQyx1RUFBdUVFO1FBQ25GTixpQkFBaUJNO0lBQ25CO0lBRUEsbUJBQW1CO0lBQ25CLE1BQU1JLGNBQWM7UUFDbEJQLFFBQVFDLEdBQUcsQ0FBQztRQUNaSDtJQUNGO0lBRUEscUJBQ0UscUJBQUNVLHNDQUFrQjtRQUNqQm5CLEtBQUtBO1FBQ0osR0FBR0QsS0FBSztRQUNULDZCQUE2QjtRQUM3QkUsT0FBT0E7UUFDUEUsYUFBYUE7UUFDYkMsV0FBV0E7UUFDWEMsT0FBT0E7UUFDUCx1QkFBdUI7UUFDdkJSLFVBQVVtQjtRQUNWbEIsb0JBQW9CbUI7UUFDcEJYLG9CQUFvQkE7UUFDcEJjLFNBQVNGOztBQUdmO0FBR0Y5Qiw2QkFBNkJpQyxXQUFXLEdBQUc7TUFFM0MsV0FBZWpDIn0=