6851964d3abc1f24007c99759118d7d9
// ===================================
// PINTEYA E-COMMERCE - ORDER LIST ENTERPRISE TESTS
// ===================================
"use strict";
jest.mock('@/hooks/use-toast', ()=>({
        useToast: ()=>({
                toast: mockToast
            })
    }));
// Mock Next.js router
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn()
            }),
        useSearchParams: ()=>new URLSearchParams(),
        usePathname: ()=>'/admin/orders'
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _OrderListEnterprise = require("../../../../components/admin/orders/OrderListEnterprise");
const _ordersmocks = require("../../../setup/orders-mocks.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ===================================
// SETUP MOCKS
// ===================================
// Mock useToast
const mockToast = jest.fn();
// Mock fetch
const mockFetch = (0, _ordersmocks.createMockFetch)();
global.fetch = mockFetch;
// ===================================
// HELPER FUNCTIONS
// ===================================
const renderOrderList = (props = {})=>{
    const defaultProps = {
        onOrderSelect: jest.fn(),
        onOrderEdit: jest.fn(),
        onBulkAction: jest.fn(),
        enableBulkActions: true,
        enableFilters: true,
        pageSize: 20,
        ...props
    };
    return {
        ...(0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {
            ...defaultProps
        })),
        props: defaultProps
    };
};
// ===================================
// TESTS BÁSICOS
// ===================================
describe('OrderListEnterprise', ()=>{
    beforeEach(()=>{
        (0, _ordersmocks.resetAllMocks)();
        mockFetch.mockClear();
        mockToast.mockClear();
    });
    test('should render loading state initially', async ()=>{
        // Arrange & Act
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Assert
        expect(_react1.screen.getByText('Gestión de Órdenes')).toBeInTheDocument();
        expect(_react1.screen.getByText('Administra y monitorea todas las órdenes del sistema')).toBeInTheDocument();
    });
    test('should fetch and display orders on mount', async ()=>{
        // Arrange & Act
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for data to load
        await (0, _react1.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('/api/admin/orders'), undefined);
        });
        // Assert
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].user_profiles.name)).toBeInTheDocument();
        });
    });
    test('should display correct order information', async ()=>{
        // Arrange & Act
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Assert order details
        expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].user_profiles.name)).toBeInTheDocument();
        expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].user_profiles.email)).toBeInTheDocument();
        expect(_react1.screen.getByText(`$${_ordersmocks.mockOrders[0].total_amount.toLocaleString()} ${_ordersmocks.mockOrders[0].currency}`)).toBeInTheDocument();
    });
    test('should handle API errors gracefully', async ()=>{
        // Arrange
        mockFetch.mockImplementationOnce(()=>Promise.resolve({
                ok: false,
                status: 500,
                json: ()=>Promise.resolve({
                        error: 'Server error'
                    })
            }));
        // Act
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Assert
        await (0, _react1.waitFor)(()=>{
            expect(mockToast).toHaveBeenCalledWith({
                title: 'Error',
                description: 'No se pudieron cargar las órdenes',
                variant: 'destructive'
            });
        });
    });
});
// ===================================
// TESTS DE FILTROS
// ===================================
describe('OrderListEnterprise - Filters', ()=>{
    beforeEach(()=>{
        (0, _ordersmocks.resetAllMocks)();
        mockFetch.mockClear();
    });
    test('should render filter components when enabled', async ()=>{
        // Arrange & Act
        await (0, _react1.act)(async ()=>{
            renderOrderList({
                enableFilters: true
            });
        });
        // Assert
        expect(_react1.screen.getByText('Filtros')).toBeInTheDocument();
        expect(_react1.screen.getByPlaceholderText('Buscar órdenes...')).toBeInTheDocument();
        expect(_react1.screen.getByText('Estado')).toBeInTheDocument();
        expect(_react1.screen.getByText('Estado de Pago')).toBeInTheDocument();
    });
    test('should not render filters when disabled', async ()=>{
        // Arrange & Act
        await (0, _react1.act)(async ()=>{
            renderOrderList({
                enableFilters: false
            });
        });
        // Assert
        expect(_react1.screen.queryByText('Filtros')).not.toBeInTheDocument();
        expect(_react1.screen.queryByPlaceholderText('Buscar órdenes...')).not.toBeInTheDocument();
    });
    test('should handle search filter changes', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for initial load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByPlaceholderText('Buscar órdenes...')).toBeInTheDocument();
        });
        // Act
        const searchInput = _react1.screen.getByPlaceholderText('Buscar órdenes...');
        await (0, _react1.act)(async ()=>{
            await user.type(searchInput, 'test search');
        });
        // Assert
        await (0, _react1.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('search=test%20search'), undefined);
        });
    });
    test('should handle status filter changes', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for initial load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Estado')).toBeInTheDocument();
        });
        // Act - Click on status select
        const statusSelect = _react1.screen.getByText('Estado').closest('div').querySelector('[role="combobox"]');
        await (0, _react1.act)(async ()=>{
            await user.click(statusSelect);
        });
        // Wait for dropdown to appear and select an option
        await (0, _react1.waitFor)(()=>{
            const pendingOption = _react1.screen.getByText('Pendiente');
            expect(pendingOption).toBeInTheDocument();
        });
        const pendingOption = _react1.screen.getByText('Pendiente');
        await (0, _react1.act)(async ()=>{
            await user.click(pendingOption);
        });
        // Assert
        await (0, _react1.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('status=pending'), undefined);
        });
    });
    test('should reset page when filters change', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for initial load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByPlaceholderText('Buscar órdenes...')).toBeInTheDocument();
        });
        // Act - Change search filter
        const searchInput = _react1.screen.getByPlaceholderText('Buscar órdenes...');
        await (0, _react1.act)(async ()=>{
            await user.type(searchInput, 'test');
        });
        // Assert - Should include page=1 in the request
        await (0, _react1.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('page=1'), undefined);
        });
    });
});
// ===================================
// TESTS DE ACCIONES MASIVAS
// ===================================
describe('OrderListEnterprise - Bulk Actions', ()=>{
    beforeEach(()=>{
        (0, _ordersmocks.resetAllMocks)();
        mockFetch.mockClear();
    });
    test('should render bulk action controls when enabled', async ()=>{
        // Arrange & Act
        await (0, _react1.act)(async ()=>{
            renderOrderList({
                enableBulkActions: true
            });
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Assert - Should have checkboxes for selection
        const checkboxes = _react1.screen.getAllByRole('checkbox');
        expect(checkboxes.length).toBeGreaterThan(0);
    });
    test('should not render bulk actions when disabled', async ()=>{
        // Arrange & Act
        await (0, _react1.act)(async ()=>{
            renderOrderList({
                enableBulkActions: false
            });
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Assert - Should not have selection checkboxes
        const checkboxes = _react1.screen.queryAllByRole('checkbox');
        expect(checkboxes.length).toBe(0);
    });
    test('should handle individual order selection', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Act - Select first order
        const checkboxes = _react1.screen.getAllByRole('checkbox');
        const firstOrderCheckbox = checkboxes[1]; // Skip the "select all" checkbox
        await (0, _react1.act)(async ()=>{
            await user.click(firstOrderCheckbox);
        });
        // Assert - Bulk actions should appear
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/orden\(es\) seleccionada\(s\)/)).toBeInTheDocument();
        });
    });
    test('should handle select all functionality', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Act - Click select all checkbox
        const checkboxes = _react1.screen.getAllByRole('checkbox');
        const selectAllCheckbox = checkboxes[0];
        await (0, _react1.act)(async ()=>{
            await user.click(selectAllCheckbox);
        });
        // Assert - All orders should be selected
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(`${_ordersmocks.mockOrders.length} orden(es) seleccionada(s)`)).toBeInTheDocument();
        });
    });
    test('should call onBulkAction when bulk action is triggered', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        const { props } = renderOrderList();
        await (0, _react1.act)(async ()=>{
        // Component is already rendered
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Act - Select an order and trigger bulk action
        const checkboxes = _react1.screen.getAllByRole('checkbox');
        const firstOrderCheckbox = checkboxes[1];
        await (0, _react1.act)(async ()=>{
            await user.click(firstOrderCheckbox);
        });
        // Wait for bulk actions to appear
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Exportar')).toBeInTheDocument();
        });
        const exportButton = _react1.screen.getByText('Exportar');
        await (0, _react1.act)(async ()=>{
            await user.click(exportButton);
        });
        // Assert
        expect(props.onBulkAction).toHaveBeenCalledWith('export', [
            _ordersmocks.mockOrders[0].id
        ]);
    });
    test('should show warning when no orders selected for bulk action', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        const { props } = renderOrderList();
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Act - Try to trigger bulk action without selection
        // First select an order to show bulk actions
        const checkboxes = _react1.screen.getAllByRole('checkbox');
        const firstOrderCheckbox = checkboxes[1];
        await (0, _react1.act)(async ()=>{
            await user.click(firstOrderCheckbox);
        });
        // Then deselect it
        await (0, _react1.act)(async ()=>{
            await user.click(firstOrderCheckbox);
        });
        // Now try to use a bulk action (this should be handled by the component's internal logic)
        // The bulk action buttons should not be visible when no orders are selected
        expect(_react1.screen.queryByText('Exportar')).not.toBeInTheDocument();
    });
});
// ===================================
// TESTS DE PAGINACIÓN
// ===================================
describe('OrderListEnterprise - Pagination', ()=>{
    beforeEach(()=>{
        (0, _ordersmocks.resetAllMocks)();
        mockFetch.mockClear();
    });
    test('should handle page navigation', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        // Mock response with pagination
        mockFetch.mockImplementationOnce(()=>Promise.resolve({
                ok: true,
                status: 200,
                json: ()=>Promise.resolve({
                        data: {
                            orders: _ordersmocks.mockOrders,
                            pagination: {
                                page: 1,
                                limit: 20,
                                total: 50,
                                totalPages: 3,
                                hasNextPage: true,
                                hasPreviousPage: false
                            },
                            filters: {}
                        },
                        success: true,
                        error: null
                    })
            }));
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Página 1 de 3')).toBeInTheDocument();
        });
        // Act - Click next page
        const nextButton = _react1.screen.getByText('Siguiente');
        await (0, _react1.act)(async ()=>{
            await user.click(nextButton);
        });
        // Assert
        await (0, _react1.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('page=2'), undefined);
        });
    });
    test('should disable navigation buttons appropriately', async ()=>{
        // Arrange
        mockFetch.mockImplementationOnce(()=>Promise.resolve({
                ok: true,
                status: 200,
                json: ()=>Promise.resolve({
                        data: {
                            orders: _ordersmocks.mockOrders,
                            pagination: {
                                page: 1,
                                limit: 20,
                                total: 10,
                                totalPages: 1,
                                hasNextPage: false,
                                hasPreviousPage: false
                            },
                            filters: {}
                        },
                        success: true,
                        error: null
                    })
            }));
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Mostrando 1 a 10 de 10 órdenes')).toBeInTheDocument();
        });
        // Assert - Navigation buttons should be disabled
        const previousButton = _react1.screen.getByText('Anterior');
        const nextButton = _react1.screen.getByText('Siguiente');
        expect(previousButton).toBeDisabled();
        expect(nextButton).toBeDisabled();
    });
});
// ===================================
// TESTS DE INTERACCIONES
// ===================================
describe('OrderListEnterprise - Interactions', ()=>{
    beforeEach(()=>{
        (0, _ordersmocks.resetAllMocks)();
        mockFetch.mockClear();
    });
    test('should call onOrderSelect when order is clicked', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        const { props } = renderOrderList();
        await (0, _react1.act)(async ()=>{
        // Component is already rendered
        });
        // Wait for orders to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(_ordersmocks.mockOrders[0].order_number)).toBeInTheDocument();
        });
        // Act - Click on "Ver Detalles" in dropdown menu
        const moreButtons = _react1.screen.getAllByRole('button');
        const moreButton = moreButtons.find((button)=>button.querySelector('svg') // Find button with icon (MoreHorizontal)
        );
        if (moreButton) {
            await (0, _react1.act)(async ()=>{
                await user.click(moreButton);
            });
            // Wait for dropdown to appear
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Ver Detalles')).toBeInTheDocument();
            });
            const viewDetailsButton = _react1.screen.getByText('Ver Detalles');
            await (0, _react1.act)(async ()=>{
                await user.click(viewDetailsButton);
            });
            // Assert
            expect(props.onOrderSelect).toHaveBeenCalledWith(_ordersmocks.mockOrders[0]);
        }
    });
    test('should refresh data when refresh button is clicked', async ()=>{
        // Arrange
        const user = _userevent.default.setup();
        await (0, _react1.act)(async ()=>{
            renderOrderList();
        });
        // Wait for initial load
        await (0, _react1.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledTimes(1);
        });
        // Act - Click refresh button
        const refreshButton = _react1.screen.getByText('Actualizar');
        await (0, _react1.act)(async ()=>{
            await user.click(refreshButton);
        });
        // Assert - Should make another API call
        await (0, _react1.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledTimes(2);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,