efab61d00800f13505089735dffc6a81
// ===================================
// PINTEYA E-COMMERCE - ADAPTADOR DE PRODUCTOS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get adaptApiProductToLegacy () {
        return adaptApiProductToLegacy;
    },
    get adaptApiProductsToLegacy () {
        return adaptApiProductsToLegacy;
    },
    get adaptDatabaseProductToLegacy () {
        return adaptDatabaseProductToLegacy;
    },
    get calculateProductFeatures () {
        return calculateProductFeatures;
    }
});
function adaptDatabaseProductToLegacy(dbProduct) {
    return {
        id: dbProduct.id,
        title: dbProduct.name,
        price: dbProduct.price,
        discountedPrice: dbProduct.discounted_price || dbProduct.price,
        reviews: 0,
        imgs: dbProduct.images ? {
            thumbnails: dbProduct.images.thumbnails || [],
            previews: dbProduct.images.previews || []
        } : undefined
    };
}
function adaptApiProductToLegacy(apiProduct) {
    // FIX TEMPORAL: Limpiar "Poxipol" del título si está presente
    let cleanTitle = apiProduct.name;
    if (cleanTitle && cleanTitle.includes('Poximix') && cleanTitle.includes('Poxipol')) {
        cleanTitle = cleanTitle.replace(/\s*Poxipol\s*$/, '').trim();
    }
    return {
        // Campos legacy requeridos
        id: apiProduct.id,
        title: cleanTitle,
        price: apiProduct.price,
        discountedPrice: apiProduct.discounted_price ?? apiProduct.price,
        reviews: 0,
        imgs: apiProduct.images ? {
            thumbnails: apiProduct.images.thumbnails || apiProduct.images.previews || [
                apiProduct.images.main
            ],
            previews: apiProduct.images.previews || [
                apiProduct.images.main
            ]
        } : {
            thumbnails: [
                '/images/products/placeholder.svg'
            ],
            previews: [
                '/images/products/placeholder.svg'
            ]
        },
        // Campos adicionales para nuevas funcionalidades
        stock: apiProduct.stock,
        created_at: apiProduct.created_at,
        category: apiProduct.category,
        name: cleanTitle,
        brand: apiProduct.brand,
        discounted_price: apiProduct.discounted_price,
        images: apiProduct.images
    };
}
function adaptApiProductsToLegacy(apiProducts) {
    return apiProducts.map(adaptApiProductToLegacy);
}
function calculateProductFeatures(product) {
    // Precio actual (con descuento si existe)
    const currentPrice = product.discounted_price || product.price;
    // Envío gratis para productos > $15000
    const freeShipping = currentPrice >= 15000;
    // Envío rápido para ciertas categorías
    const categoryName = product.category?.name?.toLowerCase() || '';
    const fastShipping = categoryName.includes('pincel') || categoryName.includes('rodillo') || categoryName.includes('brocha') || categoryName.includes('herramienta');
    // Producto nuevo (últimos 30 días)
    const isNew = product.created_at ? new Date(product.created_at) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) : false;
    // Calcular descuento
    const discount = product.discounted_price && product.price && product.discounted_price < product.price ? Math.round((product.price - product.discounted_price) / product.price * 100) : undefined;
    // Badge principal
    const badge = discount ? `${discount}% OFF` : undefined;
    // Stock disponible
    const stock = product.stock || 0;
    return {
        currentPrice,
        freeShipping,
        fastShipping,
        isNew,
        discount,
        badge,
        stock
    };
}

//# sourceMappingURL=data:application/json;base64,