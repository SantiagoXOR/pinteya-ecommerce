{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\query-client.ts"],"sourcesContent":["// ===================================\r\n// CONFIGURACIÓN: TanStack Query Client\r\n// ===================================\r\n\r\nimport { QueryClient } from '@tanstack/react-query';\r\n\r\n// Configuración optimizada para e-commerce\r\nexport const queryClientConfig = {\r\n  defaultOptions: {\r\n    queries: {\r\n      // Cache por 5 minutos para datos de productos\r\n      staleTime: 5 * 60 * 1000,\r\n      // Mantener en cache por 10 minutos\r\n      gcTime: 10 * 60 * 1000,\r\n      // Retry logic inteligente\r\n      retry: (failureCount: number, error: any) => {\r\n        // No retry para errores 4xx (cliente)\r\n        if (error?.status >= 400 && error?.status < 500) return false;\r\n        // Máximo 2 reintentos para errores de red/servidor\r\n        return failureCount < 2;\r\n      },\r\n      // Intervalo de retry con backoff exponencial\r\n      retryDelay: (attemptIndex: number) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n      // Refetch en focus para datos críticos\r\n      refetchOnWindowFocus: false,\r\n      // Refetch en reconexión\r\n      refetchOnReconnect: true,\r\n      // No refetch en mount si los datos están frescos\r\n      refetchOnMount: true,\r\n    },\r\n    mutations: {\r\n      // Retry para mutaciones críticas (checkout, etc.)\r\n      retry: 1,\r\n      retryDelay: 1000,\r\n    },\r\n  },\r\n};\r\n\r\n// Función para crear QueryClient con configuración optimizada\r\nexport function createQueryClient() {\r\n  return new QueryClient(queryClientConfig);\r\n}\r\n\r\n// Instancia singleton para uso en la aplicación\r\nexport const queryClient = createQueryClient();\r\n\r\n// Configuración específica para búsquedas\r\nexport const searchQueryConfig = {\r\n  // Cache más agresivo para búsquedas\r\n  staleTime: 2 * 60 * 1000, // 2 minutos\r\n  gcTime: 5 * 60 * 1000,    // 5 minutos\r\n  // Retry más conservador para búsquedas\r\n  retry: 1,\r\n  retryDelay: 500,\r\n  // No refetch automático para búsquedas\r\n  refetchOnWindowFocus: false,\r\n  refetchOnReconnect: false,\r\n  refetchOnMount: false,\r\n};\r\n\r\n// Keys para queries de búsqueda\r\nexport const searchQueryKeys = {\r\n  all: ['search'] as const,\r\n  searches: () => [...searchQueryKeys.all, 'searches'] as const,\r\n  search: (query: string) => [...searchQueryKeys.searches(), query] as const,\r\n  suggestions: (query: string) => [...searchQueryKeys.all, 'suggestions', query] as const,\r\n  recent: () => [...searchQueryKeys.all, 'recent'] as const,\r\n  trending: () => [...searchQueryKeys.all, 'trending'] as const,\r\n} as const;\r\n\r\n// Utilidades para invalidación de cache\r\nexport const searchQueryUtils = {\r\n  // Invalidar todas las búsquedas\r\n  invalidateAll: () => queryClient.invalidateQueries({ queryKey: searchQueryKeys.all }),\r\n  \r\n  // Invalidar búsquedas específicas\r\n  invalidateSearch: (query: string) => \r\n    queryClient.invalidateQueries({ queryKey: searchQueryKeys.search(query) }),\r\n  \r\n  // Limpiar cache de búsquedas\r\n  clearSearchCache: () => queryClient.removeQueries({ queryKey: searchQueryKeys.all }),\r\n  \r\n  // Prefetch de búsqueda\r\n  prefetchSearch: (query: string) => \r\n    queryClient.prefetchQuery({\r\n      queryKey: searchQueryKeys.search(query),\r\n      queryFn: () => import('@/lib/api/products').then(m => m.searchProducts(query, 6)),\r\n      ...searchQueryConfig,\r\n    }),\r\n};\r\n"],"names":["createQueryClient","queryClient","queryClientConfig","searchQueryConfig","searchQueryKeys","searchQueryUtils","defaultOptions","queries","staleTime","gcTime","retry","failureCount","error","status","retryDelay","attemptIndex","Math","min","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","mutations","QueryClient","all","searches","search","query","suggestions","recent","trending","invalidateAll","invalidateQueries","queryKey","invalidateSearch","clearSearchCache","removeQueries","prefetchSearch","prefetchQuery","queryFn","then","m","searchProducts"],"mappings":"AAAA,sCAAsC;AACtC,uCAAuC;AACvC,sCAAsC;;;;;;;;;;;;IAqCtBA,iBAAiB;eAAjBA;;IAKHC,WAAW;eAAXA;;IArCAC,iBAAiB;eAAjBA;;IAwCAC,iBAAiB;eAAjBA;;IAcAC,eAAe;eAAfA;;IAUAC,gBAAgB;eAAhBA;;;4BAnEe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGrB,MAAMH,oBAAoB;IAC/BI,gBAAgB;QACdC,SAAS;YACP,8CAA8C;YAC9CC,WAAW,IAAI,KAAK;YACpB,mCAAmC;YACnCC,QAAQ,KAAK,KAAK;YAClB,0BAA0B;YAC1BC,OAAO,CAACC,cAAsBC;gBAC5B,sCAAsC;gBACtC,IAAIA,OAAOC,UAAU,OAAOD,OAAOC,SAAS,KAAK,OAAO;gBACxD,mDAAmD;gBACnD,OAAOF,eAAe;YACxB;YACA,6CAA6C;YAC7CG,YAAY,CAACC,eAAyBC,KAAKC,GAAG,CAAC,OAAO,KAAKF,cAAc;YACzE,uCAAuC;YACvCG,sBAAsB;YACtB,wBAAwB;YACxBC,oBAAoB;YACpB,iDAAiD;YACjDC,gBAAgB;QAClB;QACAC,WAAW;YACT,kDAAkD;YAClDX,OAAO;YACPI,YAAY;QACd;IACF;AACF;AAGO,SAASd;IACd,OAAO,IAAIsB,uBAAW,CAACpB;AACzB;AAGO,MAAMD,cAAcD;AAGpB,MAAMG,oBAAoB;IAC/B,oCAAoC;IACpCK,WAAW,IAAI,KAAK;IACpBC,QAAQ,IAAI,KAAK;IACjB,uCAAuC;IACvCC,OAAO;IACPI,YAAY;IACZ,uCAAuC;IACvCI,sBAAsB;IACtBC,oBAAoB;IACpBC,gBAAgB;AAClB;AAGO,MAAMhB,kBAAkB;IAC7BmB,KAAK;QAAC;KAAS;IACfC,UAAU,IAAM;eAAIpB,gBAAgBmB,GAAG;YAAE;SAAW;IACpDE,QAAQ,CAACC,QAAkB;eAAItB,gBAAgBoB,QAAQ;YAAIE;SAAM;IACjEC,aAAa,CAACD,QAAkB;eAAItB,gBAAgBmB,GAAG;YAAE;YAAeG;SAAM;IAC9EE,QAAQ,IAAM;eAAIxB,gBAAgBmB,GAAG;YAAE;SAAS;IAChDM,UAAU,IAAM;eAAIzB,gBAAgBmB,GAAG;YAAE;SAAW;AACtD;AAGO,MAAMlB,mBAAmB;IAC9B,gCAAgC;IAChCyB,eAAe,IAAM7B,YAAY8B,iBAAiB,CAAC;YAAEC,UAAU5B,gBAAgBmB,GAAG;QAAC;IAEnF,kCAAkC;IAClCU,kBAAkB,CAACP,QACjBzB,YAAY8B,iBAAiB,CAAC;YAAEC,UAAU5B,gBAAgBqB,MAAM,CAACC;QAAO;IAE1E,6BAA6B;IAC7BQ,kBAAkB,IAAMjC,YAAYkC,aAAa,CAAC;YAAEH,UAAU5B,gBAAgBmB,GAAG;QAAC;IAElF,uBAAuB;IACvBa,gBAAgB,CAACV,QACfzB,YAAYoC,aAAa,CAAC;YACxBL,UAAU5B,gBAAgBqB,MAAM,CAACC;YACjCY,SAAS,IAAM,mEAAA,QAAO,oBAAsBC,IAAI,CAACC,CAAAA,IAAKA,EAAEC,cAAc,CAACf,OAAO;YAC9E,GAAGvB,iBAAiB;QACtB;AACJ"}