{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\alert-system.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ENTERPRISE ALERT SYSTEM\n// ===================================\n\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\nimport { getSupabaseClient } from '@/lib/supabase';\nimport { CacheUtils } from '@/lib/cache-manager';\n\n// Niveles de alerta con escalamiento\nexport enum AlertLevel {\n  INFO = 'info',\n  WARNING = 'warning', \n  CRITICAL = 'critical',\n  EMERGENCY = 'emergency'\n}\n\n// Tipos de notificación\nexport enum NotificationType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  WEBHOOK = 'webhook',\n  SMS = 'sms',\n  PUSH = 'push',\n  LOG = 'log'\n}\n\n// Estados de alerta\nexport enum AlertStatus {\n  ACTIVE = 'active',\n  ACKNOWLEDGED = 'acknowledged',\n  RESOLVED = 'resolved',\n  SUPPRESSED = 'suppressed'\n}\n\n// Configuración de canal de notificación\nexport interface NotificationChannel {\n  id: string;\n  type: NotificationType;\n  name: string;\n  config: Record<string, any>;\n  enabled: boolean;\n  levels: AlertLevel[];\n  rateLimit?: {\n    maxPerHour: number;\n    maxPerDay: number;\n  };\n}\n\n// Regla de escalamiento\nexport interface EscalationRule {\n  id: string;\n  name: string;\n  enabled: boolean;\n  conditions: {\n    level: AlertLevel;\n    duration: number; // minutos sin resolución\n    repeatCount?: number; // número de repeticiones\n  };\n  actions: {\n    escalateToLevel?: AlertLevel;\n    notifyChannels: string[]; // IDs de canales\n    assignToUser?: string;\n  };\n}\n\n// Configuración de alerta\nexport interface AlertRule {\n  id: string;\n  name: string;\n  description: string;\n  enabled: boolean;\n  metricName: string;\n  condition: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\n  threshold: number;\n  level: AlertLevel;\n  cooldownMinutes: number;\n  channels: string[]; // IDs de canales de notificación\n  escalationRules: string[]; // IDs de reglas de escalamiento\n  tags: Record<string, string>;\n  metadata?: Record<string, any>;\n}\n\n// Alerta activa\nexport interface Alert {\n  id: string;\n  ruleId: string;\n  ruleName: string;\n  level: AlertLevel;\n  status: AlertStatus;\n  message: string;\n  metricName: string;\n  value: number;\n  threshold: number;\n  triggeredAt: string;\n  acknowledgedAt?: string;\n  acknowledgedBy?: string;\n  resolvedAt?: string;\n  resolvedBy?: string;\n  escalatedAt?: string;\n  escalatedFrom?: AlertLevel;\n  notificationsSent: NotificationLog[];\n  tags: Record<string, string>;\n  metadata?: Record<string, any>;\n}\n\n// Log de notificación\nexport interface NotificationLog {\n  id: string;\n  channelId: string;\n  channelType: NotificationType;\n  sentAt: string;\n  success: boolean;\n  error?: string;\n  responseTime: number;\n}\n\n/**\n * Sistema de Alertas Enterprise con escalamiento automático\n */\nexport class EnterpriseAlertSystem {\n  private static instance: EnterpriseAlertSystem;\n  private alertRules: Map<string, AlertRule> = new Map();\n  private notificationChannels: Map<string, NotificationChannel> = new Map();\n  private escalationRules: Map<string, EscalationRule> = new Map();\n  private activeAlerts: Map<string, Alert> = new Map();\n  private escalationInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.initializeDefaultChannels();\n    this.initializeDefaultRules();\n    this.startEscalationMonitoring();\n  }\n\n  static getInstance(): EnterpriseAlertSystem {\n    if (!EnterpriseAlertSystem.instance) {\n      EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();\n    }\n    return EnterpriseAlertSystem.instance;\n  }\n\n  /**\n   * Configura un canal de notificación\n   */\n  setNotificationChannel(channel: NotificationChannel): void {\n    this.notificationChannels.set(channel.id, channel);\n    logger.info(LogLevel.INFO, `Notification channel configured: ${channel.id}`, {\n      type: channel.type,\n      enabled: channel.enabled,\n      levels: channel.levels\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Configura una regla de escalamiento\n   */\n  setEscalationRule(rule: EscalationRule): void {\n    this.escalationRules.set(rule.id, rule);\n    logger.info(LogLevel.INFO, `Escalation rule configured: ${rule.id}`, {\n      level: rule.conditions.level,\n      duration: rule.conditions.duration,\n      enabled: rule.enabled\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Configura una regla de alerta\n   */\n  setAlertRule(rule: AlertRule): void {\n    this.alertRules.set(rule.id, rule);\n    logger.info(LogLevel.INFO, `Alert rule configured: ${rule.id}`, {\n      metricName: rule.metricName,\n      threshold: rule.threshold,\n      level: rule.level,\n      enabled: rule.enabled\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Dispara una alerta\n   */\n  async triggerAlert(\n    ruleId: string,\n    metricName: string,\n    value: number,\n    message?: string\n  ): Promise<Alert | null> {\n    const rule = this.alertRules.get(ruleId);\n    if (!rule || !rule.enabled) {\n      return null;\n    }\n\n    // Verificar cooldown\n    const existingAlert = Array.from(this.activeAlerts.values())\n      .find(alert => alert.ruleId === ruleId && alert.status === AlertStatus.ACTIVE);\n\n    if (existingAlert) {\n      const cooldownEnd = new Date(existingAlert.triggeredAt);\n      cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);\n      \n      if (new Date() < cooldownEnd) {\n        return null; // Aún en cooldown\n      }\n    }\n\n    // Crear nueva alerta\n    const alert: Alert = {\n      id: this.generateAlertId(),\n      ruleId: rule.id,\n      ruleName: rule.name,\n      level: rule.level,\n      status: AlertStatus.ACTIVE,\n      message: message || `${rule.description} - Value: ${value}, Threshold: ${rule.threshold}`,\n      metricName,\n      value,\n      threshold: rule.threshold,\n      triggeredAt: new Date().toISOString(),\n      notificationsSent: [],\n      tags: rule.tags,\n      metadata: rule.metadata\n    };\n\n    this.activeAlerts.set(alert.id, alert);\n\n    // Enviar notificaciones\n    await this.sendNotifications(alert, rule.channels);\n\n    // Almacenar en base de datos\n    await this.storeAlert(alert);\n\n    logger.warn(LogLevel.WARN, `Alert triggered: ${rule.name}`, {\n      alertId: alert.id,\n      level: alert.level,\n      metricName: alert.metricName,\n      value: alert.value,\n      threshold: alert.threshold\n    }, LogCategory.SYSTEM);\n\n    return alert;\n  }\n\n  /**\n   * Reconoce una alerta\n   */\n  async acknowledgeAlert(alertId: string, userId: string): Promise<boolean> {\n    const alert = this.activeAlerts.get(alertId);\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {\n      return false;\n    }\n\n    alert.status = AlertStatus.ACKNOWLEDGED;\n    alert.acknowledgedAt = new Date().toISOString();\n    alert.acknowledgedBy = userId;\n\n    await this.updateAlert(alert);\n\n    logger.info(LogLevel.INFO, `Alert acknowledged: ${alertId}`, {\n      userId,\n      level: alert.level,\n      ruleName: alert.ruleName\n    }, LogCategory.SYSTEM);\n\n    return true;\n  }\n\n  /**\n   * Resuelve una alerta\n   */\n  async resolveAlert(alertId: string, userId?: string): Promise<boolean> {\n    const alert = this.activeAlerts.get(alertId);\n    if (!alert) {\n      return false;\n    }\n\n    alert.status = AlertStatus.RESOLVED;\n    alert.resolvedAt = new Date().toISOString();\n    alert.resolvedBy = userId;\n\n    await this.updateAlert(alert);\n    this.activeAlerts.delete(alertId);\n\n    logger.info(LogLevel.INFO, `Alert resolved: ${alertId}`, {\n      userId,\n      level: alert.level,\n      ruleName: alert.ruleName,\n      duration: this.calculateDuration(alert.triggeredAt, alert.resolvedAt!)\n    }, LogCategory.SYSTEM);\n\n    return true;\n  }\n\n  /**\n   * Envía notificaciones para una alerta\n   */\n  private async sendNotifications(alert: Alert, channelIds: string[]): Promise<void> {\n    const notifications = await Promise.allSettled(\n      channelIds.map(channelId => this.sendNotification(alert, channelId))\n    );\n\n    // Log resultados\n    notifications.forEach((result, index) => {\n      const channelId = channelIds[index];\n      if (result.status === 'fulfilled' && result.value) {\n        alert.notificationsSent.push(result.value);\n      } else if (result.status === 'rejected') {\n        logger.error(LogLevel.ERROR, `Failed to send notification to channel: ${channelId}`, {\n          alertId: alert.id,\n          error: result.reason\n        }, LogCategory.SYSTEM);\n      }\n    });\n  }\n\n  /**\n   * Envía notificación a un canal específico\n   */\n  private async sendNotification(alert: Alert, channelId: string): Promise<NotificationLog | null> {\n    const channel = this.notificationChannels.get(channelId);\n    if (!channel || !channel.enabled || !channel.levels.includes(alert.level)) {\n      return null;\n    }\n\n    // Verificar rate limiting\n    if (channel.rateLimit && !(await this.checkRateLimit(channelId, channel.rateLimit))) {\n      logger.warn(LogLevel.WARN, `Rate limit exceeded for channel: ${channelId}`, {\n        alertId: alert.id\n      }, LogCategory.SYSTEM);\n      return null;\n    }\n\n    const startTime = Date.now();\n    let success = false;\n    let error: string | undefined;\n\n    try {\n      switch (channel.type) {\n        case NotificationType.EMAIL:\n          await this.sendEmailNotification(alert, channel);\n          break;\n        case NotificationType.SLACK:\n          await this.sendSlackNotification(alert, channel);\n          break;\n        case NotificationType.WEBHOOK:\n          await this.sendWebhookNotification(alert, channel);\n          break;\n        case NotificationType.SMS:\n          await this.sendSMSNotification(alert, channel);\n          break;\n        case NotificationType.LOG:\n          await this.sendLogNotification(alert, channel);\n          break;\n        default:\n          throw new Error(`Unsupported notification type: ${channel.type}`);\n      }\n      success = true;\n    } catch (err) {\n      error = err instanceof Error ? err.message : 'Unknown error';\n    }\n\n    const notificationLog: NotificationLog = {\n      id: this.generateNotificationId(),\n      channelId,\n      channelType: channel.type,\n      sentAt: new Date().toISOString(),\n      success,\n      error,\n      responseTime: Date.now() - startTime\n    };\n\n    return notificationLog;\n  }\n\n  /**\n   * Monitoreo de escalamiento automático\n   */\n  private async checkEscalations(): Promise<void> {\n    for (const alert of this.activeAlerts.values()) {\n      if (alert.status !== AlertStatus.ACTIVE) {\n        continue;\n      }\n\n      const rule = this.alertRules.get(alert.ruleId);\n      if (!rule) {\n        continue;\n      }\n\n      // Verificar reglas de escalamiento\n      for (const escalationRuleId of rule.escalationRules) {\n        const escalationRule = this.escalationRules.get(escalationRuleId);\n        if (!escalationRule || !escalationRule.enabled) {\n          continue;\n        }\n\n        // Verificar condiciones de escalamiento\n        if (this.shouldEscalate(alert, escalationRule)) {\n          await this.escalateAlert(alert, escalationRule);\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica si una alerta debe escalarse\n   */\n  private shouldEscalate(alert: Alert, rule: EscalationRule): boolean {\n    // Verificar nivel\n    if (alert.level !== rule.conditions.level) {\n      return false;\n    }\n\n    // Verificar duración\n    const alertAge = Date.now() - new Date(alert.triggeredAt).getTime();\n    const requiredDuration = rule.conditions.duration * 60 * 1000; // convertir a ms\n\n    if (alertAge < requiredDuration) {\n      return false;\n    }\n\n    // Verificar si ya fue escalada\n    if (alert.escalatedAt) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Escala una alerta\n   */\n  private async escalateAlert(alert: Alert, rule: EscalationRule): Promise<void> {\n    const originalLevel = alert.level;\n    \n    // Actualizar nivel si es necesario\n    if (rule.actions.escalateToLevel) {\n      alert.level = rule.actions.escalateToLevel;\n      alert.escalatedFrom = originalLevel;\n    }\n\n    alert.escalatedAt = new Date().toISOString();\n\n    // Enviar notificaciones de escalamiento\n    await this.sendNotifications(alert, rule.actions.notifyChannels);\n\n    // Asignar a usuario si es necesario\n    if (rule.actions.assignToUser) {\n      alert.metadata = {\n        ...alert.metadata,\n        assignedTo: rule.actions.assignToUser\n      };\n    }\n\n    await this.updateAlert(alert);\n\n    logger.error(LogLevel.ERROR, `Alert escalated: ${alert.id}`, {\n      originalLevel,\n      newLevel: alert.level,\n      escalationRule: rule.name,\n      duration: this.calculateDuration(alert.triggeredAt, alert.escalatedAt)\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Implementaciones de notificación específicas\n   */\n  private async sendEmailNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\n    // TODO: Implementar envío de email\n    logger.info(LogLevel.INFO, `Email notification sent`, {\n      alertId: alert.id,\n      to: channel.config.to,\n      subject: `[${alert.level.toUpperCase()}] ${alert.ruleName}`\n    }, LogCategory.SYSTEM);\n  }\n\n  private async sendSlackNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\n    // TODO: Implementar notificación Slack\n    logger.info(LogLevel.INFO, `Slack notification sent`, {\n      alertId: alert.id,\n      channel: channel.config.channel,\n      webhook: channel.config.webhookUrl ? 'configured' : 'missing'\n    }, LogCategory.SYSTEM);\n  }\n\n  private async sendWebhookNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\n    if (!channel.config.url) {\n      throw new Error('Webhook URL not configured');\n    }\n\n    const response = await fetch(channel.config.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...(channel.config.headers || {})\n      },\n      body: JSON.stringify({\n        alert,\n        timestamp: new Date().toISOString(),\n        source: 'pinteya-ecommerce'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\n    }\n  }\n\n  private async sendSMSNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\n    // TODO: Implementar envío de SMS\n    logger.info(LogLevel.INFO, `SMS notification sent`, {\n      alertId: alert.id,\n      to: channel.config.phoneNumber\n    }, LogCategory.SYSTEM);\n  }\n\n  private async sendLogNotification(alert: Alert, channel: NotificationChannel): Promise<void> {\n    const logLevel = alert.level === AlertLevel.EMERGENCY || alert.level === AlertLevel.CRITICAL \n      ? LogLevel.ERROR \n      : LogLevel.WARN;\n\n    logger.log(logLevel, `ALERT: ${alert.message}`, {\n      alertId: alert.id,\n      level: alert.level,\n      metricName: alert.metricName,\n      value: alert.value,\n      threshold: alert.threshold,\n      ruleName: alert.ruleName\n    }, LogCategory.SYSTEM);\n  }\n\n  /**\n   * Inicializa canales por defecto\n   */\n  private initializeDefaultChannels(): void {\n    // Canal de log por defecto\n    this.setNotificationChannel({\n      id: 'default_log',\n      type: NotificationType.LOG,\n      name: 'Default Log Channel',\n      config: {},\n      enabled: true,\n      levels: [AlertLevel.INFO, AlertLevel.WARNING, AlertLevel.CRITICAL, AlertLevel.EMERGENCY]\n    });\n\n    // Canal de webhook por defecto (deshabilitado)\n    this.setNotificationChannel({\n      id: 'default_webhook',\n      type: NotificationType.WEBHOOK,\n      name: 'Default Webhook Channel',\n      config: {\n        url: process.env.ALERT_WEBHOOK_URL || ''\n      },\n      enabled: false,\n      levels: [AlertLevel.CRITICAL, AlertLevel.EMERGENCY],\n      rateLimit: {\n        maxPerHour: 10,\n        maxPerDay: 50\n      }\n    });\n  }\n\n  /**\n   * Inicializa reglas por defecto\n   */\n  private initializeDefaultRules(): void {\n    // Regla de escalamiento para alertas críticas\n    this.setEscalationRule({\n      id: 'critical_escalation',\n      name: 'Critical Alert Escalation',\n      enabled: true,\n      conditions: {\n        level: AlertLevel.CRITICAL,\n        duration: 15 // 15 minutos\n      },\n      actions: {\n        escalateToLevel: AlertLevel.EMERGENCY,\n        notifyChannels: ['default_log', 'default_webhook']\n      }\n    });\n  }\n\n  /**\n   * Inicia monitoreo de escalamiento\n   */\n  private startEscalationMonitoring(): void {\n    this.escalationInterval = setInterval(() => {\n      this.checkEscalations();\n    }, 60000); // Verificar cada minuto\n  }\n\n  /**\n   * Funciones auxiliares\n   */\n  private generateAlertId(): string {\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateNotificationId(): string {\n    return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private calculateDuration(start: string, end: string): number {\n    return Math.round((new Date(end).getTime() - new Date(start).getTime()) / 1000 / 60); // minutos\n  }\n\n  private async checkRateLimit(channelId: string, rateLimit: { maxPerHour: number; maxPerDay: number }): Promise<boolean> {\n    // TODO: Implementar verificación de rate limiting con Redis\n    return true;\n  }\n\n  private async storeAlert(alert: Alert): Promise<void> {\n    try {\n      const supabase = getSupabaseClient(true);\n      if (!supabase) return;\n\n      await supabase.from('enterprise_alerts').insert({\n        id: alert.id,\n        rule_id: alert.ruleId,\n        rule_name: alert.ruleName,\n        level: alert.level,\n        status: alert.status,\n        message: alert.message,\n        metric_name: alert.metricName,\n        value: alert.value,\n        threshold: alert.threshold,\n        triggered_at: alert.triggeredAt,\n        acknowledged_at: alert.acknowledgedAt,\n        acknowledged_by: alert.acknowledgedBy,\n        resolved_at: alert.resolvedAt,\n        resolved_by: alert.resolvedBy,\n        escalated_at: alert.escalatedAt,\n        escalated_from: alert.escalatedFrom,\n        notifications_sent: alert.notificationsSent,\n        tags: alert.tags,\n        metadata: alert.metadata\n      });\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to store alert', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        alertId: alert.id\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  private async updateAlert(alert: Alert): Promise<void> {\n    try {\n      const supabase = getSupabaseClient(true);\n      if (!supabase) return;\n\n      await supabase\n        .from('enterprise_alerts')\n        .update({\n          level: alert.level,\n          status: alert.status,\n          acknowledged_at: alert.acknowledgedAt,\n          acknowledged_by: alert.acknowledgedBy,\n          resolved_at: alert.resolvedAt,\n          resolved_by: alert.resolvedBy,\n          escalated_at: alert.escalatedAt,\n          escalated_from: alert.escalatedFrom,\n          notifications_sent: alert.notificationsSent,\n          metadata: alert.metadata\n        })\n        .eq('id', alert.id);\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to update alert', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        alertId: alert.id\n      }, LogCategory.SYSTEM);\n    }\n  }\n\n  /**\n   * Limpia recursos\n   */\n  destroy(): void {\n    if (this.escalationInterval) {\n      clearInterval(this.escalationInterval);\n      this.escalationInterval = null;\n    }\n  }\n}\n\n// Instancia singleton\nexport const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance();\n\n// Funciones de conveniencia\nexport const triggerAlert = enterpriseAlertSystem.triggerAlert.bind(enterpriseAlertSystem);\nexport const acknowledgeAlert = enterpriseAlertSystem.acknowledgeAlert.bind(enterpriseAlertSystem);\nexport const resolveAlert = enterpriseAlertSystem.resolveAlert.bind(enterpriseAlertSystem);\n"],"names":["AlertLevel","AlertStatus","EnterpriseAlertSystem","NotificationType","acknowledgeAlert","enterpriseAlertSystem","resolveAlert","triggerAlert","alertRules","Map","notificationChannels","escalationRules","activeAlerts","escalationInterval","initializeDefaultChannels","initializeDefaultRules","startEscalationMonitoring","getInstance","instance","setNotificationChannel","channel","set","id","logger","info","LogLevel","INFO","type","enabled","levels","LogCategory","SYSTEM","setEscalationRule","rule","level","conditions","duration","setAlertRule","metricName","threshold","ruleId","value","message","get","existingAlert","Array","from","values","find","alert","status","cooldownEnd","Date","triggeredAt","setMinutes","getMinutes","cooldownMinutes","generateAlertId","ruleName","name","description","toISOString","notificationsSent","tags","metadata","sendNotifications","channels","storeAlert","warn","WARN","alertId","userId","acknowledgedAt","acknowledgedBy","updateAlert","resolvedAt","resolvedBy","delete","calculateDuration","channelIds","notifications","Promise","allSettled","map","channelId","sendNotification","forEach","result","index","push","error","ERROR","reason","includes","rateLimit","checkRateLimit","startTime","now","success","sendEmailNotification","sendSlackNotification","sendWebhookNotification","sendSMSNotification","sendLogNotification","Error","err","notificationLog","generateNotificationId","channelType","sentAt","responseTime","checkEscalations","escalationRuleId","escalationRule","shouldEscalate","escalateAlert","alertAge","getTime","requiredDuration","escalatedAt","originalLevel","actions","escalateToLevel","escalatedFrom","notifyChannels","assignToUser","assignedTo","newLevel","to","config","subject","toUpperCase","webhook","webhookUrl","url","response","fetch","method","headers","body","JSON","stringify","timestamp","source","ok","statusText","phoneNumber","logLevel","log","process","env","ALERT_WEBHOOK_URL","maxPerHour","maxPerDay","setInterval","Math","random","toString","substr","start","end","round","supabase","getSupabaseClient","insert","rule_id","rule_name","metric_name","triggered_at","acknowledged_at","acknowledged_by","resolved_at","resolved_by","escalated_at","escalated_from","notifications_sent","update","eq","destroy","clearInterval","bind"],"mappings":"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"}