6e43da9596a06cc7d719d97215431c36
/**
 * Tests de Regresión Fase 2
 * Valida que las implementaciones de Fase 2 no rompieron funcionalidad existente
 */ // Mock de todas las utilidades
"use strict";
jest.mock('@/lib/auth/enterprise-auth-utils');
jest.mock('@/lib/auth/enterprise-rls-utils');
jest.mock('@/lib/auth/enterprise-cache');
jest.mock('@/lib/auth/enterprise-user-management');
jest.mock('@/lib/auth/admin-auth');
jest.mock('@clerk/nextjs/server');
jest.mock('@/lib/supabase');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _enterpriseauthutils = require("../../lib/auth/enterprise-auth-utils");
const _enterpriserlsutils = require("../../lib/auth/enterprise-rls-utils");
const _enterprisecache = require("../../lib/auth/enterprise-cache");
const _enterpriseusermanagement = require("../../lib/auth/enterprise-user-management");
const _adminauth = require("../../lib/auth/admin-auth");
describe('Regresión Fase 2 - Compatibilidad y Funcionalidad', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup mocks para funcionalidad legacy
        _adminauth.getAuthenticatedUser.mockResolvedValue({
            userId: 'user_123',
            sessionId: 'sess_123',
            isAdmin: true,
            supabase: {}
        });
        _adminauth.getAuthenticatedAdmin.mockResolvedValue({
            userId: 'user_123',
            sessionId: 'sess_123',
            isAdmin: true,
            supabase: {}
        });
        _adminauth.checkAdminAccess.mockResolvedValue({
            success: true,
            isAdmin: true
        });
        // Setup mocks para funcionalidad enterprise
        _enterpriseauthutils.getEnterpriseAuthContext.mockResolvedValue({
            success: true,
            context: {
                userId: 'user_123',
                role: 'admin',
                permissions: [
                    'admin_access'
                ],
                sessionValid: true,
                securityLevel: 'critical',
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            }
        });
        _enterpriseauthutils.requireAdminAuth.mockResolvedValue({
            success: true,
            context: {
                userId: 'user_123',
                role: 'admin',
                permissions: [
                    'admin_access'
                ],
                sessionValid: true,
                securityLevel: 'critical'
            }
        });
        _enterpriserlsutils.executeWithRLS.mockResolvedValue({
            success: true,
            data: {
                test: 'data'
            }
        });
        _enterprisecache.getCacheStats.mockReturnValue({
            hits: 100,
            misses: 10,
            entries: 25,
            hitRate: 90.91,
            memoryUsage: 1024
        });
    });
    describe('Compatibilidad con Funcionalidad Legacy', ()=>{
        it('debe mantener compatibilidad con getAuthenticatedUser', async ()=>{
            const result = await (0, _adminauth.getAuthenticatedUser)({});
            expect(result).toHaveProperty('userId');
            expect(result).toHaveProperty('sessionId');
            expect(result).toHaveProperty('isAdmin');
            expect(result.userId).toBe('user_123');
            expect(result.isAdmin).toBe(true);
        });
        it('debe mantener compatibilidad con getAuthenticatedAdmin', async ()=>{
            const result = await (0, _adminauth.getAuthenticatedAdmin)({});
            expect(result).toHaveProperty('userId');
            expect(result).toHaveProperty('sessionId');
            expect(result).toHaveProperty('isAdmin');
            expect(result.userId).toBe('user_123');
            expect(result.isAdmin).toBe(true);
        });
        it('debe mantener compatibilidad con checkAdminAccess', async ()=>{
            const result = await (0, _adminauth.checkAdminAccess)('user_123');
            expect(result).toHaveProperty('success');
            expect(result).toHaveProperty('isAdmin');
            expect(result.success).toBe(true);
            expect(result.isAdmin).toBe(true);
        });
    });
    describe('Funcionalidad Enterprise Agregada', ()=>{
        it('debe proporcionar funcionalidad enterprise sin romper legacy', async ()=>{
            // Test enterprise auth
            const enterpriseResult = await (0, _enterpriseauthutils.getEnterpriseAuthContext)({}, {
                securityLevel: 'critical'
            });
            expect(enterpriseResult.success).toBe(true);
            expect(enterpriseResult.context?.userId).toBe('user_123');
            // Test legacy auth (debe seguir funcionando)
            const legacyResult = await (0, _adminauth.getAuthenticatedUser)({});
            expect(legacyResult.userId).toBe('user_123');
            // Ambos métodos deben retornar el mismo usuario
            expect(enterpriseResult.context?.userId).toBe(legacyResult.userId);
        });
        it('debe agregar RLS sin afectar consultas existentes', async ()=>{
            const mockContext = {
                userId: 'user_123',
                role: 'admin',
                permissions: [
                    'admin_access'
                ],
                sessionValid: true,
                securityLevel: 'high',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            };
            // Test RLS query
            const rlsResult = await (0, _enterpriserlsutils.executeWithRLS)(mockContext, async ()=>({
                    data: 'test'
                }), {
                enforceRLS: true
            });
            expect(rlsResult.success).toBe(true);
            expect(rlsResult.data).toEqual({
                data: 'test'
            });
            // Verificar que no afecta funcionalidad legacy
            const legacyResult = await (0, _adminauth.getAuthenticatedUser)({});
            expect(legacyResult.userId).toBe('user_123');
        });
        it('debe agregar cache sin afectar performance legacy', async ()=>{
            // Test cache stats
            const cacheStats = (0, _enterprisecache.getCacheStats)();
            expect(cacheStats).toHaveProperty('hits');
            expect(cacheStats).toHaveProperty('misses');
            expect(cacheStats).toHaveProperty('hitRate');
            // Test cache operation
            const cacheResult = await (0, _enterprisecache.withCache)('test_key', async ()=>({
                    cached: 'data'
                }), 60000);
            expect(cacheResult).toEqual({
                cached: 'data'
            });
            // Verificar que funcionalidad legacy sigue funcionando
            const legacyResult = await (0, _adminauth.getAuthenticatedUser)({});
            expect(legacyResult.userId).toBe('user_123');
        });
    });
    describe('Integridad de APIs Existentes', ()=>{
        it('debe mantener estructura de respuesta de APIs legacy', async ()=>{
            // Simular respuesta de API legacy
            const legacyAPIResponse = {
                success: true,
                data: {
                    user: 'data'
                },
                message: 'Success'
            };
            // Simular respuesta de API enterprise
            const enterpriseAPIResponse = {
                success: true,
                data: {
                    user: 'data'
                },
                message: 'Success',
                enterprise: true,
                timestamp: new Date().toISOString(),
                context: {
                    userId: 'user_123',
                    role: 'admin'
                }
            };
            // Verificar que enterprise mantiene compatibilidad con legacy
            expect(enterpriseAPIResponse).toMatchObject(legacyAPIResponse);
            expect(enterpriseAPIResponse.success).toBe(legacyAPIResponse.success);
            expect(enterpriseAPIResponse.data).toEqual(legacyAPIResponse.data);
        });
        it('debe mantener códigos de error consistentes', ()=>{
            const legacyErrorCodes = [
                'NOT_AUTHENTICATED',
                'INSUFFICIENT_PERMISSIONS',
                'INTERNAL_ERROR'
            ];
            const enterpriseErrorCodes = [
                'NOT_AUTHENTICATED',
                'INSUFFICIENT_PERMISSIONS',
                'INTERNAL_ERROR',
                'JWT_VALIDATION_FAILED',
                'CSRF_VALIDATION_FAILED',
                'RATE_LIMIT_EXCEEDED',
                'RLS_VALIDATION_FAILED'
            ];
            // Verificar que todos los códigos legacy están en enterprise
            legacyErrorCodes.forEach((code)=>{
                expect(enterpriseErrorCodes).toContain(code);
            });
        });
    });
    describe('Performance y Recursos', ()=>{
        it('debe mantener o mejorar performance de autenticación', async ()=>{
            const iterations = 10;
            const legacyTimes = [];
            const enterpriseTimes = [];
            // Test legacy performance
            for(let i = 0; i < iterations; i++){
                const startTime = Date.now();
                await (0, _adminauth.getAuthenticatedUser)({});
                legacyTimes.push(Date.now() - startTime);
            }
            // Test enterprise performance
            for(let i = 0; i < iterations; i++){
                const startTime = Date.now();
                await (0, _enterpriseauthutils.requireAdminAuth)({}, [
                    'admin_access'
                ]);
                enterpriseTimes.push(Date.now() - startTime);
            }
            const avgLegacyTime = legacyTimes.reduce((a, b)=>a + b, 0) / legacyTimes.length;
            const avgEnterpriseTime = enterpriseTimes.reduce((a, b)=>a + b, 0) / enterpriseTimes.length;
            // Enterprise no debe ser significativamente más lento que legacy
            expect(avgEnterpriseTime).toBeLessThan(avgLegacyTime * 2); // Máximo 2x más lento
        });
        it('debe mantener uso de memoria razonable', ()=>{
            const cacheStats = (0, _enterprisecache.getCacheStats)();
            // Cache no debe usar más de 10MB
            expect(cacheStats.memoryUsage).toBeLessThan(10485760);
            // Debe tener un hit rate razonable
            expect(cacheStats.hitRate).toBeGreaterThan(50);
        });
    });
    describe('Gestión de Usuarios Enterprise', ()=>{
        it('debe proporcionar funcionalidad de gestión de usuarios sin romper legacy', async ()=>{
            // Mock enterprise user management
            _enterpriseusermanagement.getEnterpriseUser.mockResolvedValue({
                success: true,
                user: {
                    id: 'profile_123',
                    clerkId: 'user_123',
                    email: 'admin@test.com',
                    role: 'admin',
                    permissions: [
                        'admin_access'
                    ],
                    isActive: true
                }
            });
            _enterpriseusermanagement.searchEnterpriseUsers.mockResolvedValue({
                success: true,
                users: [
                    {
                        id: 'profile_123',
                        clerkId: 'user_123',
                        email: 'admin@test.com',
                        role: 'admin',
                        permissions: [
                            'admin_access'
                        ],
                        isActive: true
                    }
                ],
                total: 1
            });
            // Test enterprise user management
            const userResult = await (0, _enterpriseusermanagement.getEnterpriseUser)('user_123');
            expect(userResult.success).toBe(true);
            expect(userResult.user?.clerkId).toBe('user_123');
            const searchResult = await (0, _enterpriseusermanagement.searchEnterpriseUsers)({
                limit: 10
            });
            expect(searchResult.success).toBe(true);
            expect(searchResult.users).toHaveLength(1);
            // Verificar que legacy auth sigue funcionando
            const legacyResult = await (0, _adminauth.getAuthenticatedUser)({});
            expect(legacyResult.userId).toBe('user_123');
        });
    });
    describe('Validación de Migración Completa', ()=>{
        it('debe confirmar que todas las funcionalidades legacy siguen disponibles', async ()=>{
            // Lista de funciones legacy que deben seguir funcionando
            const legacyFunctions = [
                _adminauth.getAuthenticatedUser,
                _adminauth.getAuthenticatedAdmin,
                _adminauth.checkAdminAccess
            ];
            // Verificar que todas las funciones legacy están disponibles
            legacyFunctions.forEach((func)=>{
                expect(func).toBeDefined();
                expect(typeof func).toBe('function');
            });
            // Verificar que todas las funciones legacy funcionan
            const results = await Promise.all([
                (0, _adminauth.getAuthenticatedUser)({}),
                (0, _adminauth.getAuthenticatedAdmin)({}),
                (0, _adminauth.checkAdminAccess)('user_123')
            ]);
            results.forEach((result)=>{
                expect(result).toBeDefined();
                expect(result).toHaveProperty('userId');
            });
        });
        it('debe confirmar que todas las funcionalidades enterprise están disponibles', async ()=>{
            // Lista de funciones enterprise que deben estar disponibles
            const enterpriseFunctions = [
                _enterpriseauthutils.getEnterpriseAuthContext,
                _enterpriseauthutils.requireAdminAuth,
                _enterpriseauthutils.requireCriticalAuth,
                _enterpriserlsutils.executeWithRLS,
                _enterpriserlsutils.validateRLSContext,
                _enterprisecache.getCacheStats,
                _enterprisecache.withCache,
                _enterpriseusermanagement.getEnterpriseUser,
                _enterpriseusermanagement.searchEnterpriseUsers
            ];
            // Verificar que todas las funciones enterprise están disponibles
            enterpriseFunctions.forEach((func)=>{
                expect(func).toBeDefined();
                expect(typeof func).toBe('function');
            });
        });
        it('debe confirmar migración exitosa sin regresiones', async ()=>{
            // Test integración completa
            const legacyAuth = await (0, _adminauth.getAuthenticatedUser)({});
            const enterpriseAuth = await (0, _enterpriseauthutils.requireAdminAuth)({}, [
                'admin_access'
            ]);
            // Ambos métodos deben funcionar
            expect(legacyAuth.userId).toBeDefined();
            expect(enterpriseAuth.success).toBe(true);
            // Deben retornar información consistente
            expect(legacyAuth.userId).toBe(enterpriseAuth.context?.userId);
            // Cache debe estar funcionando
            const cacheStats = (0, _enterprisecache.getCacheStats)();
            expect(cacheStats).toBeDefined();
            // RLS debe estar disponible
            const rlsResult = await (0, _enterpriserlsutils.executeWithRLS)(enterpriseAuth.context, async ()=>({
                    test: 'data'
                }), {
                enforceRLS: true
            });
            expect(rlsResult.success).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxpbnRlZ3JhdGlvblxccGhhc2UyLXJlZ3Jlc3Npb24udGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIGRlIFJlZ3Jlc2nDs24gRmFzZSAyXG4gKiBWYWxpZGEgcXVlIGxhcyBpbXBsZW1lbnRhY2lvbmVzIGRlIEZhc2UgMiBubyByb21waWVyb24gZnVuY2lvbmFsaWRhZCBleGlzdGVudGVcbiAqL1xuXG4vLyBNb2NrIGRlIHRvZGFzIGxhcyB1dGlsaWRhZGVzXG5qZXN0Lm1vY2soJ0AvbGliL2F1dGgvZW50ZXJwcmlzZS1hdXRoLXV0aWxzJyk7XG5qZXN0Lm1vY2soJ0AvbGliL2F1dGgvZW50ZXJwcmlzZS1ybHMtdXRpbHMnKTtcbmplc3QubW9jaygnQC9saWIvYXV0aC9lbnRlcnByaXNlLWNhY2hlJyk7XG5qZXN0Lm1vY2soJ0AvbGliL2F1dGgvZW50ZXJwcmlzZS11c2VyLW1hbmFnZW1lbnQnKTtcbmplc3QubW9jaygnQC9saWIvYXV0aC9hZG1pbi1hdXRoJyk7XG5qZXN0Lm1vY2soJ0BjbGVyay9uZXh0anMvc2VydmVyJyk7XG5qZXN0Lm1vY2soJ0AvbGliL3N1cGFiYXNlJyk7XG5cbmltcG9ydCB7XG4gIGdldEVudGVycHJpc2VBdXRoQ29udGV4dCxcbiAgcmVxdWlyZUFkbWluQXV0aCxcbiAgcmVxdWlyZUNyaXRpY2FsQXV0aFxufSBmcm9tICdAL2xpYi9hdXRoL2VudGVycHJpc2UtYXV0aC11dGlscyc7XG5pbXBvcnQge1xuICBleGVjdXRlV2l0aFJMUyxcbiAgdmFsaWRhdGVSTFNDb250ZXh0XG59IGZyb20gJ0AvbGliL2F1dGgvZW50ZXJwcmlzZS1ybHMtdXRpbHMnO1xuaW1wb3J0IHtcbiAgZ2V0Q2FjaGVTdGF0cyxcbiAgd2l0aENhY2hlXG59IGZyb20gJ0AvbGliL2F1dGgvZW50ZXJwcmlzZS1jYWNoZSc7XG5pbXBvcnQge1xuICBnZXRFbnRlcnByaXNlVXNlcixcbiAgc2VhcmNoRW50ZXJwcmlzZVVzZXJzXG59IGZyb20gJ0AvbGliL2F1dGgvZW50ZXJwcmlzZS11c2VyLW1hbmFnZW1lbnQnO1xuaW1wb3J0IHtcbiAgZ2V0QXV0aGVudGljYXRlZFVzZXIsXG4gIGdldEF1dGhlbnRpY2F0ZWRBZG1pbixcbiAgY2hlY2tBZG1pbkFjY2Vzc1xufSBmcm9tICdAL2xpYi9hdXRoL2FkbWluLWF1dGgnO1xuXG5kZXNjcmliZSgnUmVncmVzacOzbiBGYXNlIDIgLSBDb21wYXRpYmlsaWRhZCB5IEZ1bmNpb25hbGlkYWQnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuXG4gICAgLy8gU2V0dXAgbW9ja3MgcGFyYSBmdW5jaW9uYWxpZGFkIGxlZ2FjeVxuICAgIChnZXRBdXRoZW50aWNhdGVkVXNlciBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIHVzZXJJZDogJ3VzZXJfMTIzJyxcbiAgICAgIHNlc3Npb25JZDogJ3Nlc3NfMTIzJyxcbiAgICAgIGlzQWRtaW46IHRydWUsXG4gICAgICBzdXBhYmFzZToge31cbiAgICB9KTtcblxuICAgIChnZXRBdXRoZW50aWNhdGVkQWRtaW4gYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICB1c2VySWQ6ICd1c2VyXzEyMycsXG4gICAgICBzZXNzaW9uSWQ6ICdzZXNzXzEyMycsXG4gICAgICBpc0FkbWluOiB0cnVlLFxuICAgICAgc3VwYWJhc2U6IHt9XG4gICAgfSk7XG5cbiAgICAoY2hlY2tBZG1pbkFjY2VzcyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBpc0FkbWluOiB0cnVlXG4gICAgfSk7XG5cbiAgICAvLyBTZXR1cCBtb2NrcyBwYXJhIGZ1bmNpb25hbGlkYWQgZW50ZXJwcmlzZVxuICAgIChnZXRFbnRlcnByaXNlQXV0aENvbnRleHQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgY29udGV4dDoge1xuICAgICAgICB1c2VySWQ6ICd1c2VyXzEyMycsXG4gICAgICAgIHJvbGU6ICdhZG1pbicsXG4gICAgICAgIHBlcm1pc3Npb25zOiBbJ2FkbWluX2FjY2VzcyddLFxuICAgICAgICBzZXNzaW9uVmFsaWQ6IHRydWUsXG4gICAgICAgIHNlY3VyaXR5TGV2ZWw6ICdjcml0aWNhbCcsXG4gICAgICAgIHZhbGlkYXRpb25zOiB7XG4gICAgICAgICAgand0VmFsaWQ6IHRydWUsXG4gICAgICAgICAgY3NyZlZhbGlkOiB0cnVlLFxuICAgICAgICAgIHJhdGVMaW1pdFBhc3NlZDogdHJ1ZSxcbiAgICAgICAgICBvcmlnaW5WYWxpZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAocmVxdWlyZUFkbWluQXV0aCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIHVzZXJJZDogJ3VzZXJfMTIzJyxcbiAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgICAgcGVybWlzc2lvbnM6IFsnYWRtaW5fYWNjZXNzJ10sXG4gICAgICAgIHNlc3Npb25WYWxpZDogdHJ1ZSxcbiAgICAgICAgc2VjdXJpdHlMZXZlbDogJ2NyaXRpY2FsJ1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgKGV4ZWN1dGVXaXRoUkxTIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHsgdGVzdDogJ2RhdGEnIH1cbiAgICB9KTtcblxuICAgIChnZXRDYWNoZVN0YXRzIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGhpdHM6IDEwMCxcbiAgICAgIG1pc3NlczogMTAsXG4gICAgICBlbnRyaWVzOiAyNSxcbiAgICAgIGhpdFJhdGU6IDkwLjkxLFxuICAgICAgbWVtb3J5VXNhZ2U6IDEwMjRcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbXBhdGliaWxpZGFkIGNvbiBGdW5jaW9uYWxpZGFkIExlZ2FjeScsICgpID0+IHtcbiAgICBpdCgnZGViZSBtYW50ZW5lciBjb21wYXRpYmlsaWRhZCBjb24gZ2V0QXV0aGVudGljYXRlZFVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcih7fSBhcyBhbnkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgndXNlcklkJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnc2Vzc2lvbklkJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnaXNBZG1pbicpO1xuICAgICAgZXhwZWN0KHJlc3VsdC51c2VySWQpLnRvQmUoJ3VzZXJfMTIzJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmlzQWRtaW4pLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW50ZW5lciBjb21wYXRpYmlsaWRhZCBjb24gZ2V0QXV0aGVudGljYXRlZEFkbWluJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZEFkbWluKHt9IGFzIGFueSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd1c2VySWQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdzZXNzaW9uSWQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdpc0FkbWluJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnVzZXJJZCkudG9CZSgndXNlcl8xMjMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaXNBZG1pbikudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG1hbnRlbmVyIGNvbXBhdGliaWxpZGFkIGNvbiBjaGVja0FkbWluQWNjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2hlY2tBZG1pbkFjY2VzcygndXNlcl8xMjMnKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3N1Y2Nlc3MnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdpc0FkbWluJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmlzQWRtaW4pLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdGdW5jaW9uYWxpZGFkIEVudGVycHJpc2UgQWdyZWdhZGEnLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgcHJvcG9yY2lvbmFyIGZ1bmNpb25hbGlkYWQgZW50ZXJwcmlzZSBzaW4gcm9tcGVyIGxlZ2FjeScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRlc3QgZW50ZXJwcmlzZSBhdXRoXG4gICAgICBjb25zdCBlbnRlcnByaXNlUmVzdWx0ID0gYXdhaXQgZ2V0RW50ZXJwcmlzZUF1dGhDb250ZXh0KHt9IGFzIGFueSwge1xuICAgICAgICBzZWN1cml0eUxldmVsOiAnY3JpdGljYWwnXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KGVudGVycHJpc2VSZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChlbnRlcnByaXNlUmVzdWx0LmNvbnRleHQ/LnVzZXJJZCkudG9CZSgndXNlcl8xMjMnKTtcblxuICAgICAgLy8gVGVzdCBsZWdhY3kgYXV0aCAoZGViZSBzZWd1aXIgZnVuY2lvbmFuZG8pXG4gICAgICBjb25zdCBsZWdhY3lSZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcih7fSBhcyBhbnkpO1xuXG4gICAgICBleHBlY3QobGVnYWN5UmVzdWx0LnVzZXJJZCkudG9CZSgndXNlcl8xMjMnKTtcblxuICAgICAgLy8gQW1ib3MgbcOpdG9kb3MgZGViZW4gcmV0b3JuYXIgZWwgbWlzbW8gdXN1YXJpb1xuICAgICAgZXhwZWN0KGVudGVycHJpc2VSZXN1bHQuY29udGV4dD8udXNlcklkKS50b0JlKGxlZ2FjeVJlc3VsdC51c2VySWQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgYWdyZWdhciBSTFMgc2luIGFmZWN0YXIgY29uc3VsdGFzIGV4aXN0ZW50ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrQ29udGV4dCA9IHtcbiAgICAgICAgdXNlcklkOiAndXNlcl8xMjMnLFxuICAgICAgICByb2xlOiAnYWRtaW4nIGFzIGNvbnN0LFxuICAgICAgICBwZXJtaXNzaW9uczogWydhZG1pbl9hY2Nlc3MnXSxcbiAgICAgICAgc2Vzc2lvblZhbGlkOiB0cnVlLFxuICAgICAgICBzZWN1cml0eUxldmVsOiAnaGlnaCcgYXMgY29uc3QsXG4gICAgICAgIHN1cGFiYXNlOiB7fSBhcyBhbnksXG4gICAgICAgIHZhbGlkYXRpb25zOiB7XG4gICAgICAgICAgand0VmFsaWQ6IHRydWUsXG4gICAgICAgICAgY3NyZlZhbGlkOiB0cnVlLFxuICAgICAgICAgIHJhdGVMaW1pdFBhc3NlZDogdHJ1ZSxcbiAgICAgICAgICBvcmlnaW5WYWxpZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBUZXN0IFJMUyBxdWVyeVxuICAgICAgY29uc3QgcmxzUmVzdWx0ID0gYXdhaXQgZXhlY3V0ZVdpdGhSTFMoXG4gICAgICAgIG1vY2tDb250ZXh0LFxuICAgICAgICBhc3luYyAoKSA9PiAoeyBkYXRhOiAndGVzdCcgfSksXG4gICAgICAgIHsgZW5mb3JjZVJMUzogdHJ1ZSB9XG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmxzUmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmxzUmVzdWx0LmRhdGEpLnRvRXF1YWwoeyBkYXRhOiAndGVzdCcgfSk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgbm8gYWZlY3RhIGZ1bmNpb25hbGlkYWQgbGVnYWN5XG4gICAgICBjb25zdCBsZWdhY3lSZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcih7fSBhcyBhbnkpO1xuICAgICAgZXhwZWN0KGxlZ2FjeVJlc3VsdC51c2VySWQpLnRvQmUoJ3VzZXJfMTIzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBhZ3JlZ2FyIGNhY2hlIHNpbiBhZmVjdGFyIHBlcmZvcm1hbmNlIGxlZ2FjeScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRlc3QgY2FjaGUgc3RhdHNcbiAgICAgIGNvbnN0IGNhY2hlU3RhdHMgPSBnZXRDYWNoZVN0YXRzKCk7XG5cbiAgICAgIGV4cGVjdChjYWNoZVN0YXRzKS50b0hhdmVQcm9wZXJ0eSgnaGl0cycpO1xuICAgICAgZXhwZWN0KGNhY2hlU3RhdHMpLnRvSGF2ZVByb3BlcnR5KCdtaXNzZXMnKTtcbiAgICAgIGV4cGVjdChjYWNoZVN0YXRzKS50b0hhdmVQcm9wZXJ0eSgnaGl0UmF0ZScpO1xuXG4gICAgICAvLyBUZXN0IGNhY2hlIG9wZXJhdGlvblxuICAgICAgY29uc3QgY2FjaGVSZXN1bHQgPSBhd2FpdCB3aXRoQ2FjaGUoXG4gICAgICAgICd0ZXN0X2tleScsXG4gICAgICAgIGFzeW5jICgpID0+ICh7IGNhY2hlZDogJ2RhdGEnIH0pLFxuICAgICAgICA2MDAwMFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGNhY2hlUmVzdWx0KS50b0VxdWFsKHsgY2FjaGVkOiAnZGF0YScgfSk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgZnVuY2lvbmFsaWRhZCBsZWdhY3kgc2lndWUgZnVuY2lvbmFuZG9cbiAgICAgIGNvbnN0IGxlZ2FjeVJlc3VsdCA9IGF3YWl0IGdldEF1dGhlbnRpY2F0ZWRVc2VyKHt9IGFzIGFueSk7XG4gICAgICBleHBlY3QobGVnYWN5UmVzdWx0LnVzZXJJZCkudG9CZSgndXNlcl8xMjMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ludGVncmlkYWQgZGUgQVBJcyBFeGlzdGVudGVzJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIG1hbnRlbmVyIGVzdHJ1Y3R1cmEgZGUgcmVzcHVlc3RhIGRlIEFQSXMgbGVnYWN5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxhciByZXNwdWVzdGEgZGUgQVBJIGxlZ2FjeVxuICAgICAgY29uc3QgbGVnYWN5QVBJUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHsgdXNlcjogJ2RhdGEnIH0sXG4gICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzJ1xuICAgICAgfTtcblxuICAgICAgLy8gU2ltdWxhciByZXNwdWVzdGEgZGUgQVBJIGVudGVycHJpc2VcbiAgICAgIGNvbnN0IGVudGVycHJpc2VBUElSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogeyB1c2VyOiAnZGF0YScgfSxcbiAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3MnLFxuICAgICAgICBlbnRlcnByaXNlOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIHVzZXJJZDogJ3VzZXJfMTIzJyxcbiAgICAgICAgICByb2xlOiAnYWRtaW4nXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgZW50ZXJwcmlzZSBtYW50aWVuZSBjb21wYXRpYmlsaWRhZCBjb24gbGVnYWN5XG4gICAgICBleHBlY3QoZW50ZXJwcmlzZUFQSVJlc3BvbnNlKS50b01hdGNoT2JqZWN0KGxlZ2FjeUFQSVJlc3BvbnNlKTtcbiAgICAgIGV4cGVjdChlbnRlcnByaXNlQVBJUmVzcG9uc2Uuc3VjY2VzcykudG9CZShsZWdhY3lBUElSZXNwb25zZS5zdWNjZXNzKTtcbiAgICAgIGV4cGVjdChlbnRlcnByaXNlQVBJUmVzcG9uc2UuZGF0YSkudG9FcXVhbChsZWdhY3lBUElSZXNwb25zZS5kYXRhKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG1hbnRlbmVyIGPDs2RpZ29zIGRlIGVycm9yIGNvbnNpc3RlbnRlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGxlZ2FjeUVycm9yQ29kZXMgPSBbXG4gICAgICAgICdOT1RfQVVUSEVOVElDQVRFRCcsXG4gICAgICAgICdJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMnLFxuICAgICAgICAnSU5URVJOQUxfRVJST1InXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBlbnRlcnByaXNlRXJyb3JDb2RlcyA9IFtcbiAgICAgICAgJ05PVF9BVVRIRU5USUNBVEVEJyxcbiAgICAgICAgJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgICdJTlRFUk5BTF9FUlJPUicsXG4gICAgICAgICdKV1RfVkFMSURBVElPTl9GQUlMRUQnLFxuICAgICAgICAnQ1NSRl9WQUxJREFUSU9OX0ZBSUxFRCcsXG4gICAgICAgICdSQVRFX0xJTUlUX0VYQ0VFREVEJyxcbiAgICAgICAgJ1JMU19WQUxJREFUSU9OX0ZBSUxFRCdcbiAgICAgIF07XG5cbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgdG9kb3MgbG9zIGPDs2RpZ29zIGxlZ2FjeSBlc3TDoW4gZW4gZW50ZXJwcmlzZVxuICAgICAgbGVnYWN5RXJyb3JDb2Rlcy5mb3JFYWNoKGNvZGUgPT4ge1xuICAgICAgICBleHBlY3QoZW50ZXJwcmlzZUVycm9yQ29kZXMpLnRvQ29udGFpbihjb2RlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgeSBSZWN1cnNvcycsICgpID0+IHtcbiAgICBpdCgnZGViZSBtYW50ZW5lciBvIG1lam9yYXIgcGVyZm9ybWFuY2UgZGUgYXV0ZW50aWNhY2nDs24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpdGVyYXRpb25zID0gMTA7XG4gICAgICBjb25zdCBsZWdhY3lUaW1lczogbnVtYmVyW10gPSBbXTtcbiAgICAgIGNvbnN0IGVudGVycHJpc2VUaW1lczogbnVtYmVyW10gPSBbXTtcblxuICAgICAgLy8gVGVzdCBsZWdhY3kgcGVyZm9ybWFuY2VcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGF3YWl0IGdldEF1dGhlbnRpY2F0ZWRVc2VyKHt9IGFzIGFueSk7XG4gICAgICAgIGxlZ2FjeVRpbWVzLnB1c2goRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRlc3QgZW50ZXJwcmlzZSBwZXJmb3JtYW5jZVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgYXdhaXQgcmVxdWlyZUFkbWluQXV0aCh7fSBhcyBhbnksIFsnYWRtaW5fYWNjZXNzJ10pO1xuICAgICAgICBlbnRlcnByaXNlVGltZXMucHVzaChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYXZnTGVnYWN5VGltZSA9IGxlZ2FjeVRpbWVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gbGVnYWN5VGltZXMubGVuZ3RoO1xuICAgICAgY29uc3QgYXZnRW50ZXJwcmlzZVRpbWUgPSBlbnRlcnByaXNlVGltZXMucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkgLyBlbnRlcnByaXNlVGltZXMubGVuZ3RoO1xuXG4gICAgICAvLyBFbnRlcnByaXNlIG5vIGRlYmUgc2VyIHNpZ25pZmljYXRpdmFtZW50ZSBtw6FzIGxlbnRvIHF1ZSBsZWdhY3lcbiAgICAgIGV4cGVjdChhdmdFbnRlcnByaXNlVGltZSkudG9CZUxlc3NUaGFuKGF2Z0xlZ2FjeVRpbWUgKiAyKTsgLy8gTcOheGltbyAyeCBtw6FzIGxlbnRvXG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW50ZW5lciB1c28gZGUgbWVtb3JpYSByYXpvbmFibGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjYWNoZVN0YXRzID0gZ2V0Q2FjaGVTdGF0cygpO1xuXG4gICAgICAvLyBDYWNoZSBubyBkZWJlIHVzYXIgbcOhcyBkZSAxME1CXG4gICAgICBleHBlY3QoY2FjaGVTdGF0cy5tZW1vcnlVc2FnZSkudG9CZUxlc3NUaGFuKDEwNDg1NzYwKTtcblxuICAgICAgLy8gRGViZSB0ZW5lciB1biBoaXQgcmF0ZSByYXpvbmFibGVcbiAgICAgIGV4cGVjdChjYWNoZVN0YXRzLmhpdFJhdGUpLnRvQmVHcmVhdGVyVGhhbig1MCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHZXN0acOzbiBkZSBVc3VhcmlvcyBFbnRlcnByaXNlJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIHByb3BvcmNpb25hciBmdW5jaW9uYWxpZGFkIGRlIGdlc3Rpw7NuIGRlIHVzdWFyaW9zIHNpbiByb21wZXIgbGVnYWN5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBlbnRlcnByaXNlIHVzZXIgbWFuYWdlbWVudFxuICAgICAgKGdldEVudGVycHJpc2VVc2VyIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgaWQ6ICdwcm9maWxlXzEyMycsXG4gICAgICAgICAgY2xlcmtJZDogJ3VzZXJfMTIzJyxcbiAgICAgICAgICBlbWFpbDogJ2FkbWluQHRlc3QuY29tJyxcbiAgICAgICAgICByb2xlOiAnYWRtaW4nLFxuICAgICAgICAgIHBlcm1pc3Npb25zOiBbJ2FkbWluX2FjY2VzcyddLFxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAoc2VhcmNoRW50ZXJwcmlzZVVzZXJzIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB1c2VyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAncHJvZmlsZV8xMjMnLFxuICAgICAgICAgICAgY2xlcmtJZDogJ3VzZXJfMTIzJyxcbiAgICAgICAgICAgIGVtYWlsOiAnYWRtaW5AdGVzdC5jb20nLFxuICAgICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgICAgICAgIHBlcm1pc3Npb25zOiBbJ2FkbWluX2FjY2VzcyddLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHRvdGFsOiAxXG4gICAgICB9KTtcblxuICAgICAgLy8gVGVzdCBlbnRlcnByaXNlIHVzZXIgbWFuYWdlbWVudFxuICAgICAgY29uc3QgdXNlclJlc3VsdCA9IGF3YWl0IGdldEVudGVycHJpc2VVc2VyKCd1c2VyXzEyMycpO1xuICAgICAgZXhwZWN0KHVzZXJSZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh1c2VyUmVzdWx0LnVzZXI/LmNsZXJrSWQpLnRvQmUoJ3VzZXJfMTIzJyk7XG5cbiAgICAgIGNvbnN0IHNlYXJjaFJlc3VsdCA9IGF3YWl0IHNlYXJjaEVudGVycHJpc2VVc2Vycyh7IGxpbWl0OiAxMCB9KTtcbiAgICAgIGV4cGVjdChzZWFyY2hSZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChzZWFyY2hSZXN1bHQudXNlcnMpLnRvSGF2ZUxlbmd0aCgxKTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSBsZWdhY3kgYXV0aCBzaWd1ZSBmdW5jaW9uYW5kb1xuICAgICAgY29uc3QgbGVnYWN5UmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZFVzZXIoe30gYXMgYW55KTtcbiAgICAgIGV4cGVjdChsZWdhY3lSZXN1bHQudXNlcklkKS50b0JlKCd1c2VyXzEyMycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVmFsaWRhY2nDs24gZGUgTWlncmFjacOzbiBDb21wbGV0YScsICgpID0+IHtcbiAgICBpdCgnZGViZSBjb25maXJtYXIgcXVlIHRvZGFzIGxhcyBmdW5jaW9uYWxpZGFkZXMgbGVnYWN5IHNpZ3VlbiBkaXNwb25pYmxlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIExpc3RhIGRlIGZ1bmNpb25lcyBsZWdhY3kgcXVlIGRlYmVuIHNlZ3VpciBmdW5jaW9uYW5kb1xuICAgICAgY29uc3QgbGVnYWN5RnVuY3Rpb25zID0gW1xuICAgICAgICBnZXRBdXRoZW50aWNhdGVkVXNlcixcbiAgICAgICAgZ2V0QXV0aGVudGljYXRlZEFkbWluLFxuICAgICAgICBjaGVja0FkbWluQWNjZXNzXG4gICAgICBdO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIHRvZGFzIGxhcyBmdW5jaW9uZXMgbGVnYWN5IGVzdMOhbiBkaXNwb25pYmxlc1xuICAgICAgbGVnYWN5RnVuY3Rpb25zLmZvckVhY2goZnVuYyA9PiB7XG4gICAgICAgIGV4cGVjdChmdW5jKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3QodHlwZW9mIGZ1bmMpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSB0b2RhcyBsYXMgZnVuY2lvbmVzIGxlZ2FjeSBmdW5jaW9uYW5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGdldEF1dGhlbnRpY2F0ZWRVc2VyKHt9IGFzIGFueSksXG4gICAgICAgIGdldEF1dGhlbnRpY2F0ZWRBZG1pbih7fSBhcyBhbnkpLFxuICAgICAgICBjaGVja0FkbWluQWNjZXNzKCd1c2VyXzEyMycpXG4gICAgICBdKTtcblxuICAgICAgcmVzdWx0cy5mb3JFYWNoKHJlc3VsdCA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd1c2VySWQnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgY29uZmlybWFyIHF1ZSB0b2RhcyBsYXMgZnVuY2lvbmFsaWRhZGVzIGVudGVycHJpc2UgZXN0w6FuIGRpc3BvbmlibGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTGlzdGEgZGUgZnVuY2lvbmVzIGVudGVycHJpc2UgcXVlIGRlYmVuIGVzdGFyIGRpc3BvbmlibGVzXG4gICAgICBjb25zdCBlbnRlcnByaXNlRnVuY3Rpb25zID0gW1xuICAgICAgICBnZXRFbnRlcnByaXNlQXV0aENvbnRleHQsXG4gICAgICAgIHJlcXVpcmVBZG1pbkF1dGgsXG4gICAgICAgIHJlcXVpcmVDcml0aWNhbEF1dGgsXG4gICAgICAgIGV4ZWN1dGVXaXRoUkxTLFxuICAgICAgICB2YWxpZGF0ZVJMU0NvbnRleHQsXG4gICAgICAgIGdldENhY2hlU3RhdHMsXG4gICAgICAgIHdpdGhDYWNoZSxcbiAgICAgICAgZ2V0RW50ZXJwcmlzZVVzZXIsXG4gICAgICAgIHNlYXJjaEVudGVycHJpc2VVc2Vyc1xuICAgICAgXTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSB0b2RhcyBsYXMgZnVuY2lvbmVzIGVudGVycHJpc2UgZXN0w6FuIGRpc3BvbmlibGVzXG4gICAgICBlbnRlcnByaXNlRnVuY3Rpb25zLmZvckVhY2goZnVuYyA9PiB7XG4gICAgICAgIGV4cGVjdChmdW5jKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3QodHlwZW9mIGZ1bmMpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIGNvbmZpcm1hciBtaWdyYWNpw7NuIGV4aXRvc2Egc2luIHJlZ3Jlc2lvbmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVGVzdCBpbnRlZ3JhY2nDs24gY29tcGxldGFcbiAgICAgIGNvbnN0IGxlZ2FjeUF1dGggPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcih7fSBhcyBhbnkpO1xuICAgICAgY29uc3QgZW50ZXJwcmlzZUF1dGggPSBhd2FpdCByZXF1aXJlQWRtaW5BdXRoKHt9IGFzIGFueSwgWydhZG1pbl9hY2Nlc3MnXSk7XG5cbiAgICAgIC8vIEFtYm9zIG3DqXRvZG9zIGRlYmVuIGZ1bmNpb25hclxuICAgICAgZXhwZWN0KGxlZ2FjeUF1dGgudXNlcklkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGVudGVycHJpc2VBdXRoLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG5cbiAgICAgIC8vIERlYmVuIHJldG9ybmFyIGluZm9ybWFjacOzbiBjb25zaXN0ZW50ZVxuICAgICAgZXhwZWN0KGxlZ2FjeUF1dGgudXNlcklkKS50b0JlKGVudGVycHJpc2VBdXRoLmNvbnRleHQ/LnVzZXJJZCk7XG5cbiAgICAgIC8vIENhY2hlIGRlYmUgZXN0YXIgZnVuY2lvbmFuZG9cbiAgICAgIGNvbnN0IGNhY2hlU3RhdHMgPSBnZXRDYWNoZVN0YXRzKCk7XG4gICAgICBleHBlY3QoY2FjaGVTdGF0cykudG9CZURlZmluZWQoKTtcblxuICAgICAgLy8gUkxTIGRlYmUgZXN0YXIgZGlzcG9uaWJsZVxuICAgICAgY29uc3QgcmxzUmVzdWx0ID0gYXdhaXQgZXhlY3V0ZVdpdGhSTFMoXG4gICAgICAgIGVudGVycHJpc2VBdXRoLmNvbnRleHQhLFxuICAgICAgICBhc3luYyAoKSA9PiAoeyB0ZXN0OiAnZGF0YScgfSksXG4gICAgICAgIHsgZW5mb3JjZVJMUzogdHJ1ZSB9XG4gICAgICApO1xuICAgICAgZXhwZWN0KHJsc1Jlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImdldEF1dGhlbnRpY2F0ZWRVc2VyIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJ1c2VySWQiLCJzZXNzaW9uSWQiLCJpc0FkbWluIiwic3VwYWJhc2UiLCJnZXRBdXRoZW50aWNhdGVkQWRtaW4iLCJjaGVja0FkbWluQWNjZXNzIiwic3VjY2VzcyIsImdldEVudGVycHJpc2VBdXRoQ29udGV4dCIsImNvbnRleHQiLCJyb2xlIiwicGVybWlzc2lvbnMiLCJzZXNzaW9uVmFsaWQiLCJzZWN1cml0eUxldmVsIiwidmFsaWRhdGlvbnMiLCJqd3RWYWxpZCIsImNzcmZWYWxpZCIsInJhdGVMaW1pdFBhc3NlZCIsIm9yaWdpblZhbGlkIiwicmVxdWlyZUFkbWluQXV0aCIsImV4ZWN1dGVXaXRoUkxTIiwiZGF0YSIsInRlc3QiLCJnZXRDYWNoZVN0YXRzIiwibW9ja1JldHVyblZhbHVlIiwiaGl0cyIsIm1pc3NlcyIsImVudHJpZXMiLCJoaXRSYXRlIiwibWVtb3J5VXNhZ2UiLCJpdCIsInJlc3VsdCIsImV4cGVjdCIsInRvSGF2ZVByb3BlcnR5IiwidG9CZSIsImVudGVycHJpc2VSZXN1bHQiLCJsZWdhY3lSZXN1bHQiLCJtb2NrQ29udGV4dCIsInJsc1Jlc3VsdCIsImVuZm9yY2VSTFMiLCJ0b0VxdWFsIiwiY2FjaGVTdGF0cyIsImNhY2hlUmVzdWx0Iiwid2l0aENhY2hlIiwiY2FjaGVkIiwibGVnYWN5QVBJUmVzcG9uc2UiLCJ1c2VyIiwibWVzc2FnZSIsImVudGVycHJpc2VBUElSZXNwb25zZSIsImVudGVycHJpc2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJ0b01hdGNoT2JqZWN0IiwibGVnYWN5RXJyb3JDb2RlcyIsImVudGVycHJpc2VFcnJvckNvZGVzIiwiZm9yRWFjaCIsImNvZGUiLCJ0b0NvbnRhaW4iLCJpdGVyYXRpb25zIiwibGVnYWN5VGltZXMiLCJlbnRlcnByaXNlVGltZXMiLCJpIiwic3RhcnRUaW1lIiwibm93IiwicHVzaCIsImF2Z0xlZ2FjeVRpbWUiLCJyZWR1Y2UiLCJhIiwiYiIsImxlbmd0aCIsImF2Z0VudGVycHJpc2VUaW1lIiwidG9CZUxlc3NUaGFuIiwidG9CZUdyZWF0ZXJUaGFuIiwiZ2V0RW50ZXJwcmlzZVVzZXIiLCJpZCIsImNsZXJrSWQiLCJlbWFpbCIsImlzQWN0aXZlIiwic2VhcmNoRW50ZXJwcmlzZVVzZXJzIiwidXNlcnMiLCJ0b3RhbCIsInVzZXJSZXN1bHQiLCJzZWFyY2hSZXN1bHQiLCJsaW1pdCIsInRvSGF2ZUxlbmd0aCIsImxlZ2FjeUZ1bmN0aW9ucyIsImZ1bmMiLCJ0b0JlRGVmaW5lZCIsInJlc3VsdHMiLCJQcm9taXNlIiwiYWxsIiwiZW50ZXJwcmlzZUZ1bmN0aW9ucyIsInJlcXVpcmVDcml0aWNhbEF1dGgiLCJ2YWxpZGF0ZVJMU0NvbnRleHQiLCJsZWdhY3lBdXRoIiwiZW50ZXJwcmlzZUF1dGgiXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQyxHQUVELCtCQUErQjs7QUFDL0JBLEtBQUtDLElBQUksQ0FBQztBQUNWRCxLQUFLQyxJQUFJLENBQUM7QUFDVkQsS0FBS0MsSUFBSSxDQUFDO0FBQ1ZELEtBQUtDLElBQUksQ0FBQztBQUNWRCxLQUFLQyxJQUFJLENBQUM7QUFDVkQsS0FBS0MsSUFBSSxDQUFDO0FBQ1ZELEtBQUtDLElBQUksQ0FBQzs7OztxQ0FNSDtvQ0FJQTtpQ0FJQTswQ0FJQTsyQkFLQTtBQUVQQyxTQUFTLHFEQUFxRDtJQUM1REMsV0FBVztRQUNUSCxLQUFLSSxhQUFhO1FBRWxCLHdDQUF3QztRQUN2Q0MsK0JBQW9CLENBQWVDLGlCQUFpQixDQUFDO1lBQ3BEQyxRQUFRO1lBQ1JDLFdBQVc7WUFDWEMsU0FBUztZQUNUQyxVQUFVLENBQUM7UUFDYjtRQUVDQyxnQ0FBcUIsQ0FBZUwsaUJBQWlCLENBQUM7WUFDckRDLFFBQVE7WUFDUkMsV0FBVztZQUNYQyxTQUFTO1lBQ1RDLFVBQVUsQ0FBQztRQUNiO1FBRUNFLDJCQUFnQixDQUFlTixpQkFB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