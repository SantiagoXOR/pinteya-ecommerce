9e5b919b12e6a399cc58de2e04f406e3
// ===================================
// HOOK: useTrendingSearches - B√∫squedas populares/trending
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    useTrendingSearches: function() {
        return useTrendingSearches;
    },
    useTrendingSearchesByCategory: function() {
        return useTrendingSearchesByCategory;
    },
    useTrendingSearchesSimple: function() {
        return useTrendingSearchesSimple;
    }
});
const _reactquery = require("@tanstack/react-query");
const _queryclient = require("../lib/query-client");
function useTrendingSearches(options = {}) {
    const { limit = 6, days = 7, category, enabled = true, refetchInterval = 5 * 60 * 1000 } = options;
    // Query para obtener b√∫squedas trending
    const { data, isLoading, error, refetch, isStale } = (0, _reactquery.useQuery)({
        queryKey: [
            ..._queryclient.searchQueryKeys.trending(),
            'params',
            {
                limit,
                days,
                category
            }
        ],
        queryFn: async ()=>{
            console.log('üî• useTrendingSearches: Fetching trending searches', {
                limit,
                days,
                category
            });
            const params = new URLSearchParams();
            params.set('limit', limit.toString());
            params.set('days', days.toString());
            if (category) {
                params.set('category', category);
            }
            const response = await fetch(`/api/search/trending?${params.toString()}`);
            if (!response.ok) {
                throw new Error(`Error fetching trending searches: ${response.status}`);
            }
            const result = await response.json();
            if (!result.success || !result.data) {
                throw new Error(result.error || 'Error obteniendo b√∫squedas trending');
            }
            console.log('‚úÖ useTrendingSearches: Trending searches fetched', {
                count: result.data.trending.length,
                lastUpdated: result.data.lastUpdated
            });
            return result.data;
        },
        enabled,
        refetchInterval,
        staleTime: 2 * 60 * 1000,
        gcTime: 10 * 60 * 1000,
        retry: 2,
        retryDelay: (attemptIndex)=>Math.min(1000 * 2 ** attemptIndex, 30000)
    });
    // Funci√≥n para registrar una b√∫squeda en analytics
    const trackSearch = async (query, searchCategory)=>{
        try {
            const response = await fetch('/api/search/trending', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    query: query.trim(),
                    category: searchCategory,
                    userId: null,
                    sessionId: `session-${Date.now()}`
                })
            });
            if (!response.ok) {
                console.warn('‚ö†Ô∏è Error tracking search:', response.status);
            } else {}
        } catch (error) {
            console.warn('‚ö†Ô∏è Error tracking search:', error);
        // No lanzar error para no interrumpir la experiencia del usuario
        }
    };
    return {
        trendingSearches: data?.trending || [],
        isLoading,
        error: error,
        refetch,
        isStale,
        lastUpdated: data?.lastUpdated || null,
        trackSearch
    };
}
function useTrendingSearchesSimple(limit = 6) {
    const { trendingSearches } = useTrendingSearches({
        limit
    });
    return trendingSearches;
}
function useTrendingSearchesByCategory(category, limit = 4) {
    const { trendingSearches } = useTrendingSearches({
        category,
        limit,
        refetchInterval: 10 * 60 * 1000 // 10 minutos para categor√≠as espec√≠ficas
    });
    return trendingSearches;
}
const _default = useTrendingSearches;

//# sourceMappingURL=data:application/json;base64,