724285b17d8d401f3b7f4cc0847d50b4
// ===================================
// PINTEYA E-COMMERCE - SETUP DE JEST
// ===================================
// Polyfills para MSW
"use strict";
// Mock TanStack Query para tests - Versión completa con QueryCache
jest.mock('@tanstack/react-query', ()=>{
    const actual = jest.requireActual('@tanstack/react-query');
    // Mock completo del QueryCache
    const mockQueryCache = {
        clear: jest.fn(),
        get: jest.fn(()=>null),
        getAll: jest.fn(()=>[]),
        find: jest.fn(()=>null),
        findAll: jest.fn(()=>[]),
        notify: jest.fn(),
        onFocus: jest.fn(),
        onOnline: jest.fn(),
        subscribe: jest.fn(()=>jest.fn()),
        build: jest.fn()
    };
    // Mock completo del MutationCache
    const mockMutationCache = {
        clear: jest.fn(),
        getAll: jest.fn(()=>[]),
        find: jest.fn(()=>null),
        findAll: jest.fn(()=>[]),
        notify: jest.fn(),
        subscribe: jest.fn(()=>jest.fn()),
        build: jest.fn()
    };
    // Mock del QueryClient con todos los métodos necesarios
    const mockQueryClient = {
        clear: jest.fn(),
        getQueryCache: jest.fn(()=>mockQueryCache),
        getMutationCache: jest.fn(()=>mockMutationCache),
        setQueryData: jest.fn(),
        getQueryData: jest.fn(),
        invalidateQueries: jest.fn(),
        removeQueries: jest.fn(),
        prefetchQuery: jest.fn(),
        defaultQueryOptions: jest.fn(()=>({})),
        getDefaultOptions: jest.fn(()=>({
                queries: {},
                mutations: {}
            })),
        mount: jest.fn(),
        unmount: jest.fn(),
        isFetching: jest.fn(()=>0),
        isMutating: jest.fn(()=>0)
    };
    return {
        ...actual,
        QueryClient: jest.fn().mockImplementation(()=>mockQueryClient),
        useQuery: jest.fn(()=>({
                data: null,
                error: null,
                isLoading: false,
                isError: false,
                isSuccess: true,
                isFetching: false,
                isStale: false,
                dataUpdatedAt: Date.now(),
                refetch: jest.fn()
            })),
        useQueryClient: jest.fn(()=>mockQueryClient),
        QueryClientProvider: ({ children })=>children
    };
});
// Mock Next.js router
jest.mock('next/router', ()=>({
        useRouter () {
            return {
                route: '/',
                pathname: '/',
                query: {},
                asPath: '/',
                push: jest.fn(),
                pop: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn(),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                },
                isFallback: false
            };
        }
    }));
// Mock Next.js navigation
jest.mock('next/navigation', ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn()
            };
        },
        useSearchParams: jest.fn(()=>({
                get: jest.fn((key)=>{
                    if (key === 'q') return 'test-query';
                    return null;
                }),
                getAll: jest.fn(),
                has: jest.fn(),
                keys: jest.fn(),
                values: jest.fn(),
                entries: jest.fn(),
                forEach: jest.fn(),
                toString: jest.fn(()=>'q=test-query')
            })),
        usePathname () {
            return '/';
        }
    }));
// Mock Next.js Image component
jest.mock('next/image', ()=>({
        __esModule: true,
        default: (props)=>{
            // eslint-disable-next-line @next/next/no-img-element
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                ...props
            });
        }
    }));
// Mock Next.js Link component
jest.mock('next/link', ()=>({
        __esModule: true,
        default: ({ children, href, ...props })=>{
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: href,
                ...props,
                children: children
            });
        }
    }));
// Mock Context Providers
jest.mock('@/app/context/CartSidebarModalContext', ()=>({
        useCartModalContext: ()=>({
                isOpen: false,
                openModal: jest.fn(),
                closeModal: jest.fn()
            }),
        CartModalProvider: ({ children })=>children
    }));
jest.mock('@/app/context/QuickViewModalContext', ()=>({
        useModalContext: ()=>({
                isOpen: false,
                openModal: jest.fn(),
                closeModal: jest.fn(),
                selectedProduct: null
            }),
        ModalProvider: ({ children })=>children
    }));
// Mock NextAuth.js components and functions
jest.mock('next-auth', ()=>({
        default: jest.fn(()=>({
                handlers: {
                    GET: jest.fn(),
                    POST: jest.fn()
                },
                auth: jest.fn(),
                signIn: jest.fn(),
                signOut: jest.fn()
            }))
    }));
jest.mock('next-auth/providers/google', ()=>({
        default: jest.fn(()=>({
                id: 'google',
                name: 'Google',
                type: 'oauth'
            }))
    }));
// Mock NextAuth.js auth function
jest.mock('@/auth', ()=>({
        auth: jest.fn(()=>Promise.resolve({
                user: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    image: 'https://example.com/avatar.jpg'
                },
                expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
            })),
        signIn: jest.fn(),
        signOut: jest.fn()
    }));
// Mock principal de Supabase - Versión mejorada
jest.mock('@/lib/supabase', ()=>{
    // Mock completo del query builder con todos los métodos
    const createMockQueryBuilder = ()=>{
        const mockData = {
            data: [
                {
                    brand: 'El Galgo',
                    product_count: 3
                },
                {
                    brand: 'Plavicon',
                    product_count: 5
                },
                {
                    brand: 'Akapol',
                    product_count: 2
                }
            ],
            error: null
        };
        const mockQueryBuilder = {
            select: jest.fn(()=>mockQueryBuilder),
            from: jest.fn(()=>mockQueryBuilder),
            insert: jest.fn(()=>mockQueryBuilder),
            update: jest.fn(()=>mockQueryBuilder),
            delete: jest.fn(()=>mockQueryBuilder),
            eq: jest.fn(()=>mockQueryBuilder),
            neq: jest.fn(()=>mockQueryBuilder),
            gt: jest.fn(()=>mockQueryBuilder),
            gte: jest.fn(()=>mockQueryBuilder),
            lt: jest.fn(()=>mockQueryBuilder),
            lte: jest.fn(()=>mockQueryBuilder),
            like: jest.fn(()=>mockQueryBuilder),
            ilike: jest.fn(()=>mockQueryBuilder),
            is: jest.fn(()=>mockQueryBuilder),
            in: jest.fn(()=>mockQueryBuilder),
            not: jest.fn(()=>mockQueryBuilder),
            or: jest.fn(()=>mockQueryBuilder),
            and: jest.fn(()=>mockQueryBuilder),
            order: jest.fn(()=>mockQueryBuilder),
            limit: jest.fn(()=>mockQueryBuilder),
            range: jest.fn(()=>mockQueryBuilder),
            single: jest.fn(()=>Promise.resolve(mockData)),
            maybeSingle: jest.fn(()=>Promise.resolve(mockData)),
            then: jest.fn((callback)=>Promise.resolve(callback(mockData))),
            catch: jest.fn(()=>Promise.resolve())
        };
        return mockQueryBuilder;
    };
    const mockClient = {
        from: jest.fn(()=>createMockQueryBuilder()),
        auth: {
            getUser: jest.fn(()=>Promise.resolve({
                    data: {
                        user: null
                    },
                    error: null
                }))
        }
    };
    return {
        getSupabaseClient: jest.fn(()=>mockClient),
        supabase: mockClient,
        supabaseAdmin: mockClient,
        handleSupabaseError: jest.fn((error, context)=>{
            if (error?.message) {
                throw new Error(error.message);
            }
            throw new Error('Supabase error');
        }),
        isAuthenticated: jest.fn(()=>Promise.resolve(false)),
        getCurrentUser: jest.fn(()=>Promise.resolve(null))
    };
});
// Mock adicional para importaciones directas
jest.mock('@/lib/supabase/client', ()=>({
        createClient: jest.fn(()=>mockSupabaseClient)
    }));
// Mock NextAuth.js para tests de API
jest.mock('next-auth/next', ()=>({
        getServerSession: jest.fn(()=>Promise.resolve({
                user: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User'
                }
            }))
    }));
// Mock auth utilities para compatibilidad
jest.mock('@/lib/auth/admin-auth', ()=>({
        getAuthUser: jest.fn(()=>Promise.resolve({
                id: 'test-user-id',
                email: 'test@example.com',
                name: 'Test User'
            })),
        getAuthUserId: jest.fn(()=>Promise.resolve('test-user-id')),
        requireAuth: jest.fn(()=>Promise.resolve({
                id: 'test-user-id',
                email: 'test@example.com',
                name: 'Test User'
            }))
    }));
// Mock MercadoPago - Versión completa
jest.mock('@/lib/mercadopago', ()=>({
        preference: {
            create: jest.fn(()=>Promise.resolve({
                    id: 'test-preference-id',
                    init_point: 'https://test-mercadopago.com/checkout'
                }))
        },
        payment: {
            get: jest.fn(()=>Promise.resolve({
                    id: 'test-payment-id',
                    status: 'approved',
                    external_reference: 'test-order-id'
                }))
        },
        getPaymentInfo: jest.fn(()=>Promise.resolve({
                success: true,
                data: {
                    id: 'test-payment-id',
                    status: 'approved',
                    external_reference: 'test-order-id'
                }
            })),
        validateWebhookSignature: jest.fn(()=>true),
        createPaymentPreference: jest.fn(()=>Promise.resolve({
                success: true,
                data: {
                    id: 'test-preference-id',
                    init_point: 'https://test-mercadopago.com/checkout',
                    sandbox_init_point: 'https://test-mercadopago.com/checkout'
                }
            })),
        mercadopago: {
            preferences: {
                create: jest.fn(()=>Promise.resolve({
                        body: {
                            id: 'test-preference-id',
                            init_point: 'https://test-mercadopago.com/checkout'
                        }
                    }))
            }
        }
    }));
// Mock Redis para tests
jest.mock('@/lib/redis', ()=>({
        redis: {
            get: jest.fn(()=>Promise.resolve(null)),
            set: jest.fn(()=>Promise.resolve('OK')),
            del: jest.fn(()=>Promise.resolve(1)),
            incr: jest.fn(()=>Promise.resolve(1)),
            expire: jest.fn(()=>Promise.resolve(1)),
            ping: jest.fn(()=>Promise.resolve('PONG')),
            disconnect: jest.fn(()=>Promise.resolve())
        },
        RedisCache: jest.fn().mockImplementation(()=>({
                get: jest.fn(()=>Promise.resolve(null)),
                set: jest.fn(()=>Promise.resolve(true)),
                del: jest.fn(()=>Promise.resolve(true)),
                incr: jest.fn(()=>Promise.resolve(1)),
                expire: jest.fn(()=>Promise.resolve(true)),
                ping: jest.fn(()=>Promise.resolve(true))
            })),
        isRedisAvailable: jest.fn(()=>false)
    }));
// Mock Rate Limiter
jest.mock('@/lib/rate-limiter', ()=>({
        checkRateLimit: jest.fn(()=>Promise.resolve({
                success: true,
                remaining: 100,
                reset: Date.now() + 60000
            })),
        RateLimiter: jest.fn().mockImplementation(()=>({
                check: jest.fn(()=>Promise.resolve({
                        success: true,
                        remaining: 100,
                        reset: Date.now() + 60000
                    }))
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _util = require("util");
const _web = require("node:stream/web");
require("@testing-library/jest-dom");
global.TextEncoder = _util.TextEncoder;
global.TextDecoder = _util.TextDecoder;
global.ReadableStream = _web.ReadableStream;
global.WritableStream = _web.WritableStream;
global.TransformStream = _web.TransformStream;
// Mock fetch si no está disponible
if (!global.fetch) {
    global.fetch = jest.fn();
}
// Mock BroadcastChannel para MSW
global.BroadcastChannel = class BroadcastChannel {
    constructor(name){
        this.name = name;
    }
    postMessage() {}
    close() {}
    addEventListener() {}
    removeEventListener() {}
};
// Mock environment variables
process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';
process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY = 'test-clerk-key';
process.env.CLERK_SECRET_KEY = 'test-clerk-secret';
process.env.MERCADOPAGO_ACCESS_TOKEN = 'test-mp-token';
process.env.NEXT_PUBLIC_MERCADOPAGO_PUBLIC_KEY = 'test-mp-public-key';
// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    observe() {
        return null;
    }
    disconnect() {
        return null;
    }
    unobserve() {
        return null;
    }
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    observe() {
        return null;
    }
    disconnect() {
        return null;
    }
    unobserve() {
        return null;
    }
};
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.localStorage = localStorageMock;
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;
// Mock fetch
global.fetch = jest.fn();
// Mock Request and Response for Next.js API tests
global.Request = class Request {
    constructor(input, init = {}){
        // Use defineProperty to handle read-only properties
        Object.defineProperty(this, 'url', {
            value: input,
            writable: false,
            enumerable: true,
            configurable: true
        });
        this.method = init.method || 'GET';
        this.headers = new Headers(init.headers);
        this.body = init.body;
    }
    async json() {
        return JSON.parse(this.body || '{}');
    }
    async text() {
        return this.body || '';
    }
};
global.Response = class Response {
    constructor(body, init = {}){
        this.body = body;
        this.status = init.status || 200;
        this.statusText = init.statusText || 'OK';
        this.headers = new Headers(init.headers);
        this.ok = this.status >= 200 && this.status < 300;
    }
    static json(data, init = {}) {
        return new Response(JSON.stringify(data), {
            ...init,
            headers: {
                'Content-Type': 'application/json',
                ...init.headers
            }
        });
    }
    async json() {
        return JSON.parse(this.body || '{}');
    }
    async text() {
        return this.body || '';
    }
};
global.Headers = class Headers1 {
    constructor(init = {}){
        this.headers = new Map();
        if (init) {
            Object.entries(init).forEach(([key, value])=>{
                this.headers.set(key.toLowerCase(), value);
            });
        }
    }
    get(name) {
        return this.headers.get(name.toLowerCase());
    }
    set(name, value) {
        this.headers.set(name.toLowerCase(), value);
    }
    has(name) {
        return this.headers.has(name.toLowerCase());
    }
    delete(name) {
        this.headers.delete(name.toLowerCase());
    }
    // Método entries() requerido por NextRequest
    entries() {
        return this.headers.entries();
    }
    // Métodos adicionales para compatibilidad completa
    keys() {
        return this.headers.keys();
    }
    values() {
        return this.headers.values();
    }
    forEach(callback, thisArg) {
        this.headers.forEach(callback, thisArg);
    }
    // Symbol.iterator para hacer Headers iterable
    [Symbol.iterator]() {
        return this.headers.entries();
    }
};
// Suppress console errors in tests unless explicitly needed
const originalError = console.error;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
});
// Mock Supabase - Configuración completa y robusta
const mockSupabaseResponse = {
    data: [
        {
            id: 1,
            name: 'Test Product 1',
            slug: 'test-product-1',
            description: 'Test description',
            price: 1000,
            discounted_price: 900,
            stock: 10,
            category_id: 1,
            brand: 'Test Brand',
            images: [
                'test1.jpg'
            ],
            created_at: '2024-01-01T00:00:00Z',
            category: {
                id: 1,
                name: 'Test Category',
                slug: 'test-category'
            }
        },
        {
            id: 2,
            name: 'Test Product 2',
            slug: 'test-product-2',
            description: 'Test description 2',
            price: 2000,
            discounted_price: 2000,
            stock: 5,
            category_id: 2,
            brand: 'Test Brand 2',
            images: [
                'test2.jpg'
            ],
            created_at: '2024-01-01T00:00:00Z',
            category: {
                id: 2,
                name: 'Test Category 2',
                slug: 'test-category-2'
            }
        }
    ],
    error: null,
    count: 2
};
// Función para crear un mock robusto de query builder
const createMockQueryBuilder = ()=>{
    const builder = {};
    // Métodos que retornan el builder para chaining
    const chainableMethods = [
        'select',
        'eq',
        'gte',
        'lte',
        'gt',
        'lt',
        'or',
        'and',
        'ilike',
        'like',
        'in',
        'order',
        'neq',
        'is',
        'not'
    ];
    chainableMethods.forEach((method)=>{
        builder[method] = jest.fn(()=>builder);
    });
    // Métodos que retornan promesas
    builder.range = jest.fn(()=>Promise.resolve(mockSupabaseResponse));
    builder.single = jest.fn(()=>Promise.resolve({
            data: {
                id: 1,
                name: 'Test Category',
                slug: 'test-category'
            },
            error: null
        }));
    // Agregar soporte para Promise (then/catch) para casos donde no se llama a range()
    builder.then = jest.fn((callback)=>{
        return Promise.resolve(callback(mockSupabaseResponse));
    });
    builder.catch = jest.fn((callback)=>{
        return Promise.resolve();
    });
    // Métodos especiales
    builder.insert = jest.fn((data)=>{
        // Para inserts que no necesitan select (como order_items)
        if (Array.isArray(data) && data[0]?.order_id) {
            return Promise.resolve({
                data: null,
                error: null
            });
        }
        return {
            select: jest.fn((columns)=>({
                    single: jest.fn(()=>{
                        // Crear un objeto de usuario válido para inserts de usuarios (array)
                        if (Array.isArray(data) && data[0]?.clerk_id) {
                            return Promise.resolve({
                                data: {
                                    id: 'test-user-id',
                                    clerk_id: data[0].clerk_id,
                                    email: data[0].email || 'test@example.com',
                                    name: data[0].name || 'Test User'
                                },
                                error: null
                            });
                        }
                        // Para inserts de usuarios sin array (objeto directo)
                        if (data?.clerk_id) {
                            return Promise.resolve({
                                data: {
                                    id: 'test-user-id',
                                    clerk_id: data.clerk_id,
                                    email: data.email || 'test@example.com',
                                    name: data.name || 'Test User'
                                },
                                error: null
                            });
                        }
                        // Para otros tipos de insert, usar el mock por defecto
                        return Promise.resolve({
                            data: {
                                id: 1,
                                ...mockSupabaseResponse.data[0]
                            },
                            error: null
                        });
                    })
                }))
        };
    });
    builder.update = jest.fn(()=>({
            eq: jest.fn(()=>Promise.resolve({
                    error: null
                }))
        }));
    builder.delete = jest.fn(()=>({
            eq: jest.fn(()=>Promise.resolve({
                    error: null
                }))
        }));
    // Método para consultas con IN (productos)
    builder.in = jest.fn(()=>Promise.resolve({
            data: [
                {
                    id: 1,
                    name: 'Test Product 1',
                    price: 1000,
                    discounted_price: null,
                    stock: 10,
                    images: {
                        previews: [
                            'test1.jpg'
                        ]
                    },
                    category: {
                        name: 'Test Category',
                        slug: 'test-category'
                    }
                },
                {
                    id: 2,
                    name: 'Test Product 2',
                    price: 2000,
                    discounted_price: 1800,
                    stock: 5,
                    images: {
                        previews: [
                            'test2.jpg'
                        ]
                    },
                    category: {
                        name: 'Test Category',
                        slug: 'test-category'
                    }
                }
            ],
            error: null
        }));
    return builder;
};
// Clean up after each test
afterEach(()=>{
    jest.clearAllMocks();
    localStorageMock.clear();
    sessionStorageMock.clear();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXGplc3Quc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gUElOVEVZQSBFLUNPTU1FUkNFIC0gU0VUVVAgREUgSkVTVFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8gUG9seWZpbGxzIHBhcmEgTVNXXHJcbmltcG9ydCB7IFRleHRFbmNvZGVyLCBUZXh0RGVjb2RlciB9IGZyb20gJ3V0aWwnO1xyXG5pbXBvcnQgeyBSZWFkYWJsZVN0cmVhbSwgV3JpdGFibGVTdHJlYW0sIFRyYW5zZm9ybVN0cmVhbSB9IGZyb20gJ3N0cmVhbS93ZWInO1xyXG5cclxuZ2xvYmFsLlRleHRFbmNvZGVyID0gVGV4dEVuY29kZXI7XHJcbmdsb2JhbC5UZXh0RGVjb2RlciA9IFRleHREZWNvZGVyO1xyXG5nbG9iYWwuUmVhZGFibGVTdHJlYW0gPSBSZWFkYWJsZVN0cmVhbTtcclxuZ2xvYmFsLldyaXRhYmxlU3RyZWFtID0gV3JpdGFibGVTdHJlYW07XHJcbmdsb2JhbC5UcmFuc2Zvcm1TdHJlYW0gPSBUcmFuc2Zvcm1TdHJlYW07XHJcblxyXG4vLyBNb2NrIGZldGNoIHNpIG5vIGVzdMOhIGRpc3BvbmlibGVcclxuaWYgKCFnbG9iYWwuZmV0Y2gpIHtcclxuICBnbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCk7XHJcbn1cclxuXHJcbi8vIE1vY2sgQnJvYWRjYXN0Q2hhbm5lbCBwYXJhIE1TV1xyXG5nbG9iYWwuQnJvYWRjYXN0Q2hhbm5lbCA9IGNsYXNzIEJyb2FkY2FzdENoYW5uZWwge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgfVxyXG4gIHBvc3RNZXNzYWdlKCkge31cclxuICBjbG9zZSgpIHt9XHJcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9XHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9XHJcbn07XHJcblxyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nXHJcblxyXG4vLyBNb2NrIFRhblN0YWNrIFF1ZXJ5IHBhcmEgdGVzdHMgLSBWZXJzacOzbiBjb21wbGV0YSBjb24gUXVlcnlDYWNoZVxyXG5qZXN0Lm1vY2soJ0B0YW5zdGFjay9yZWFjdC1xdWVyeScsICgpID0+IHtcclxuICBjb25zdCBhY3R1YWwgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ0B0YW5zdGFjay9yZWFjdC1xdWVyeScpO1xyXG5cclxuICAvLyBNb2NrIGNvbXBsZXRvIGRlbCBRdWVyeUNhY2hlXHJcbiAgY29uc3QgbW9ja1F1ZXJ5Q2FjaGUgPSB7XHJcbiAgICBjbGVhcjogamVzdC5mbigpLFxyXG4gICAgZ2V0OiBqZXN0LmZuKCgpID0+IG51bGwpLFxyXG4gICAgZ2V0QWxsOiBqZXN0LmZuKCgpID0+IFtdKSxcclxuICAgIGZpbmQ6IGplc3QuZm4oKCkgPT4gbnVsbCksXHJcbiAgICBmaW5kQWxsOiBqZXN0LmZuKCgpID0+IFtdKSxcclxuICAgIG5vdGlmeTogamVzdC5mbigpLFxyXG4gICAgb25Gb2N1czogamVzdC5mbigpLFxyXG4gICAgb25PbmxpbmU6IGplc3QuZm4oKSxcclxuICAgIHN1YnNjcmliZTogamVzdC5mbigoKSA9PiBqZXN0LmZuKCkpLFxyXG4gICAgYnVpbGQ6IGplc3QuZm4oKSxcclxuICB9O1xyXG5cclxuICAvLyBNb2NrIGNvbXBsZXRvIGRlbCBNdXRhdGlvbkNhY2hlXHJcbiAgY29uc3QgbW9ja011dGF0aW9uQ2FjaGUgPSB7XHJcbiAgICBjbGVhcjogamVzdC5mbigpLFxyXG4gICAgZ2V0QWxsOiBqZXN0LmZuKCgpID0+IFtdKSxcclxuICAgIGZpbmQ6IGplc3QuZm4oKCkgPT4gbnVsbCksXHJcbiAgICBmaW5kQWxsOiBqZXN0LmZuKCgpID0+IFtdKSxcclxuICAgIG5vdGlmeTogamVzdC5mbigpLFxyXG4gICAgc3Vic2NyaWJlOiBqZXN0LmZuKCgpID0+IGplc3QuZm4oKSksXHJcbiAgICBidWlsZDogamVzdC5mbigpLFxyXG4gIH07XHJcblxyXG4gIC8vIE1vY2sgZGVsIFF1ZXJ5Q2xpZW50IGNvbiB0b2RvcyBsb3MgbcOpdG9kb3MgbmVjZXNhcmlvc1xyXG4gIGNvbnN0IG1vY2tRdWVyeUNsaWVudCA9IHtcclxuICAgIGNsZWFyOiBqZXN0LmZuKCksXHJcbiAgICBnZXRRdWVyeUNhY2hlOiBqZXN0LmZuKCgpID0+IG1vY2tRdWVyeUNhY2hlKSxcclxuICAgIGdldE11dGF0aW9uQ2FjaGU6IGplc3QuZm4oKCkgPT4gbW9ja011dGF0aW9uQ2FjaGUpLFxyXG4gICAgc2V0UXVlcnlEYXRhOiBqZXN0LmZuKCksXHJcbiAgICBnZXRRdWVyeURhdGE6IGplc3QuZm4oKSxcclxuICAgIGludmFsaWRhdGVRdWVyaWVzOiBqZXN0LmZuKCksXHJcbiAgICByZW1vdmVRdWVyaWVzOiBqZXN0LmZuKCksXHJcbiAgICBwcmVmZXRjaFF1ZXJ5OiBqZXN0LmZuKCksXHJcbiAgICBkZWZhdWx0UXVlcnlPcHRpb25zOiBqZXN0LmZuKCgpID0+ICh7fSkpLFxyXG4gICAgZ2V0RGVmYXVsdE9wdGlvbnM6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgcXVlcmllczoge30sXHJcbiAgICAgIG11dGF0aW9uczoge30sXHJcbiAgICB9KSksXHJcbiAgICBtb3VudDogamVzdC5mbigpLFxyXG4gICAgdW5tb3VudDogamVzdC5mbigpLFxyXG4gICAgaXNGZXRjaGluZzogamVzdC5mbigoKSA9PiAwKSxcclxuICAgIGlzTXV0YXRpbmc6IGplc3QuZm4oKCkgPT4gMCksXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLmFjdHVhbCxcclxuICAgIFF1ZXJ5Q2xpZW50OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG1vY2tRdWVyeUNsaWVudCksXHJcbiAgICB1c2VRdWVyeTogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICBkYXRhOiBudWxsLFxyXG4gICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgaXNFcnJvcjogZmFsc2UsXHJcbiAgICAgIGlzU3VjY2VzczogdHJ1ZSxcclxuICAgICAgaXNGZXRjaGluZzogZmFsc2UsXHJcbiAgICAgIGlzU3RhbGU6IGZhbHNlLFxyXG4gICAgICBkYXRhVXBkYXRlZEF0OiBEYXRlLm5vdygpLFxyXG4gICAgICByZWZldGNoOiBqZXN0LmZuKCksXHJcbiAgICB9KSksXHJcbiAgICB1c2VRdWVyeUNsaWVudDogamVzdC5mbigoKSA9PiBtb2NrUXVlcnlDbGllbnQpLFxyXG4gICAgUXVlcnlDbGllbnRQcm92aWRlcjogKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW4sXHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyBNb2NrIE5leHQuanMgcm91dGVyXHJcbmplc3QubW9jaygnbmV4dC9yb3V0ZXInLCAoKSA9PiAoe1xyXG4gIHVzZVJvdXRlcigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJvdXRlOiAnLycsXHJcbiAgICAgIHBhdGhuYW1lOiAnLycsXHJcbiAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgYXNQYXRoOiAnLycsXHJcbiAgICAgIHB1c2g6IGplc3QuZm4oKSxcclxuICAgICAgcG9wOiBqZXN0LmZuKCksXHJcbiAgICAgIHJlbG9hZDogamVzdC5mbigpLFxyXG4gICAgICBiYWNrOiBqZXN0LmZuKCksXHJcbiAgICAgIHByZWZldGNoOiBqZXN0LmZuKCksXHJcbiAgICAgIGJlZm9yZVBvcFN0YXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIGV2ZW50czoge1xyXG4gICAgICAgIG9uOiBqZXN0LmZuKCksXHJcbiAgICAgICAgb2ZmOiBqZXN0LmZuKCksXHJcbiAgICAgICAgZW1pdDogamVzdC5mbigpLFxyXG4gICAgICB9LFxyXG4gICAgICBpc0ZhbGxiYWNrOiBmYWxzZSxcclxuICAgIH1cclxuICB9LFxyXG59KSlcclxuXHJcbi8vIE1vY2sgTmV4dC5qcyBuYXZpZ2F0aW9uXHJcbmplc3QubW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcclxuICB1c2VSb3V0ZXIoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwdXNoOiBqZXN0LmZuKCksXHJcbiAgICAgIHJlcGxhY2U6IGplc3QuZm4oKSxcclxuICAgICAgcHJlZmV0Y2g6IGplc3QuZm4oKSxcclxuICAgICAgYmFjazogamVzdC5mbigpLFxyXG4gICAgICBmb3J3YXJkOiBqZXN0LmZuKCksXHJcbiAgICAgIHJlZnJlc2g6IGplc3QuZm4oKSxcclxuICAgIH1cclxuICB9LFxyXG4gIHVzZVNlYXJjaFBhcmFtczogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgZ2V0OiBqZXN0LmZuKChrZXkpID0+IHtcclxuICAgICAgaWYgKGtleSA9PT0gJ3EnKSByZXR1cm4gJ3Rlc3QtcXVlcnknO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0pLFxyXG4gICAgZ2V0QWxsOiBqZXN0LmZuKCksXHJcbiAgICBoYXM6IGplc3QuZm4oKSxcclxuICAgIGtleXM6IGplc3QuZm4oKSxcclxuICAgIHZhbHVlczogamVzdC5mbigpLFxyXG4gICAgZW50cmllczogamVzdC5mbigpLFxyXG4gICAgZm9yRWFjaDogamVzdC5mbigpLFxyXG4gICAgdG9TdHJpbmc6IGplc3QuZm4oKCkgPT4gJ3E9dGVzdC1xdWVyeScpLFxyXG4gIH0pKSxcclxuICB1c2VQYXRobmFtZSgpIHtcclxuICAgIHJldHVybiAnLydcclxuICB9LFxyXG59KSlcclxuXHJcbi8vIE1vY2sgTmV4dC5qcyBJbWFnZSBjb21wb25lbnRcclxuamVzdC5tb2NrKCduZXh0L2ltYWdlJywgKCkgPT4gKHtcclxuICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gIGRlZmF1bHQ6IChwcm9wcykgPT4ge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBuZXh0L25leHQvbm8taW1nLWVsZW1lbnRcclxuICAgIHJldHVybiA8aW1nIHsuLi5wcm9wc30gLz5cclxuICB9LFxyXG59KSlcclxuXHJcbi8vIE1vY2sgTmV4dC5qcyBMaW5rIGNvbXBvbmVudFxyXG5qZXN0Lm1vY2soJ25leHQvbGluaycsICgpID0+ICh7XHJcbiAgX19lc01vZHVsZTogdHJ1ZSxcclxuICBkZWZhdWx0OiAoeyBjaGlsZHJlbiwgaHJlZiwgLi4ucHJvcHMgfSkgPT4ge1xyXG4gICAgcmV0dXJuIDxhIGhyZWY9e2hyZWZ9IHsuLi5wcm9wc30+e2NoaWxkcmVufTwvYT5cclxuICB9LFxyXG59KSlcclxuXHJcbi8vIE1vY2sgZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcbnByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCA9ICdodHRwczovL3Rlc3Quc3VwYWJhc2UuY28nXHJcbnByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZID0gJ3Rlc3QtYW5vbi1rZXknXHJcbnByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1BVQkxJU0hBQkxFX0tFWSA9ICd0ZXN0LWNsZXJrLWtleSdcclxucHJvY2Vzcy5lbnYuQ0xFUktfU0VDUkVUX0tFWSA9ICd0ZXN0LWNsZXJrLXNlY3JldCdcclxucHJvY2Vzcy5lbnYuTUVSQ0FET1BBR09fQUNDRVNTX1RPS0VOID0gJ3Rlc3QtbXAtdG9rZW4nXHJcbnByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX01FUkNBRE9QQUdPX1BVQkxJQ19LRVkgPSAndGVzdC1tcC1wdWJsaWMta2V5J1xyXG5cclxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbWF0Y2hNZWRpYScsIHtcclxuICB3cml0YWJsZTogdHJ1ZSxcclxuICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xyXG4gICAgbWF0Y2hlczogZmFsc2UsXHJcbiAgICBtZWRpYTogcXVlcnksXHJcbiAgICBvbmNoYW5nZTogbnVsbCxcclxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksIC8vIGRlcHJlY2F0ZWRcclxuICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksIC8vIGRlcHJlY2F0ZWRcclxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcclxuICB9KSksXHJcbn0pXHJcblxyXG4vLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyXHJcbmdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgb2JzZXJ2ZSgpIHtcclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG4gIGRpc2Nvbm5lY3QoKSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuICB1bm9ic2VydmUoKSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxufVxyXG5cclxuLy8gTW9jayBSZXNpemVPYnNlcnZlclxyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSBjbGFzcyBSZXNpemVPYnNlcnZlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIG9ic2VydmUoKSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuICBkaXNjb25uZWN0KCkge1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcbiAgdW5vYnNlcnZlKCkge1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcbn1cclxuXHJcbi8vIE1vY2sgbG9jYWxTdG9yYWdlXHJcbmNvbnN0IGxvY2FsU3RvcmFnZU1vY2sgPSB7XHJcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxyXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcclxuICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXHJcbiAgY2xlYXI6IGplc3QuZm4oKSxcclxufVxyXG5nbG9iYWwubG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlTW9ja1xyXG5cclxuLy8gTW9jayBzZXNzaW9uU3RvcmFnZVxyXG5jb25zdCBzZXNzaW9uU3RvcmFnZU1vY2sgPSB7XHJcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxyXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcclxuICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXHJcbiAgY2xlYXI6IGplc3QuZm4oKSxcclxufVxyXG5nbG9iYWwuc2Vzc2lvblN0b3JhZ2UgPSBzZXNzaW9uU3RvcmFnZU1vY2tcclxuXHJcbi8vIE1vY2sgZmV0Y2hcclxuZ2xvYmFsLmZldGNoID0gamVzdC5mbigpXHJcblxyXG4vLyBNb2NrIFJlcXVlc3QgYW5kIFJlc3BvbnNlIGZvciBOZXh0LmpzIEFQSSB0ZXN0c1xyXG5nbG9iYWwuUmVxdWVzdCA9IGNsYXNzIFJlcXVlc3Qge1xyXG4gIGNvbnN0cnVjdG9yKGlucHV0LCBpbml0ID0ge30pIHtcclxuICAgIC8vIFVzZSBkZWZpbmVQcm9wZXJ0eSB0byBoYW5kbGUgcmVhZC1vbmx5IHByb3BlcnRpZXNcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndXJsJywge1xyXG4gICAgICB2YWx1ZTogaW5wdXQsXHJcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KVxyXG4gICAgdGhpcy5tZXRob2QgPSBpbml0Lm1ldGhvZCB8fCAnR0VUJ1xyXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKVxyXG4gICAgdGhpcy5ib2R5ID0gaW5pdC5ib2R5XHJcbiAgfVxyXG5cclxuICBhc3luYyBqc29uKCkge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5ib2R5IHx8ICd7fScpXHJcbiAgfVxyXG5cclxuICBhc3luYyB0ZXh0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYm9keSB8fCAnJ1xyXG4gIH1cclxufVxyXG5cclxuZ2xvYmFsLlJlc3BvbnNlID0gY2xhc3MgUmVzcG9uc2Uge1xyXG4gIGNvbnN0cnVjdG9yKGJvZHksIGluaXQgPSB7fSkge1xyXG4gICAgdGhpcy5ib2R5ID0gYm9keVxyXG4gICAgdGhpcy5zdGF0dXMgPSBpbml0LnN0YXR1cyB8fCAyMDBcclxuICAgIHRoaXMuc3RhdHVzVGV4dCA9IGluaXQuc3RhdHVzVGV4dCB8fCAnT0snXHJcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0LmhlYWRlcnMpXHJcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXHJcbiAgfVxyXG5cclxuICBzdGF0aWMganNvbihkYXRhLCBpbml0ID0ge30pIHtcclxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIHtcclxuICAgICAgLi4uaW5pdCxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgLi4uaW5pdC5oZWFkZXJzLFxyXG4gICAgICB9LFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGFzeW5jIGpzb24oKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmJvZHkgfHwgJ3t9JylcclxuICB9XHJcblxyXG4gIGFzeW5jIHRleHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ib2R5IHx8ICcnXHJcbiAgfVxyXG59XHJcblxyXG5nbG9iYWwuSGVhZGVycyA9IGNsYXNzIEhlYWRlcnMge1xyXG4gIGNvbnN0cnVjdG9yKGluaXQgPSB7fSkge1xyXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IE1hcCgpXHJcbiAgICBpZiAoaW5pdCkge1xyXG4gICAgICBPYmplY3QuZW50cmllcyhpbml0KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KGtleS50b0xvd2VyQ2FzZSgpLCB2YWx1ZSlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldChuYW1lKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oZWFkZXJzLmdldChuYW1lLnRvTG93ZXJDYXNlKCkpXHJcbiAgfVxyXG5cclxuICBzZXQobmFtZSwgdmFsdWUpIHtcclxuICAgIHRoaXMuaGVhZGVycy5zZXQobmFtZS50b0xvd2VyQ2FzZSgpLCB2YWx1ZSlcclxuICB9XHJcblxyXG4gIGhhcyhuYW1lKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oZWFkZXJzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpXHJcbiAgfVxyXG5cclxuICBkZWxldGUobmFtZSkge1xyXG4gICAgdGhpcy5oZWFkZXJzLmRlbGV0ZShuYW1lLnRvTG93ZXJDYXNlKCkpXHJcbiAgfVxyXG5cclxuICAvLyBNw6l0b2RvIGVudHJpZXMoKSByZXF1ZXJpZG8gcG9yIE5leHRSZXF1ZXN0XHJcbiAgZW50cmllcygpIHtcclxuICAgIHJldHVybiB0aGlzLmhlYWRlcnMuZW50cmllcygpXHJcbiAgfVxyXG5cclxuICAvLyBNw6l0b2RvcyBhZGljaW9uYWxlcyBwYXJhIGNvbXBhdGliaWxpZGFkIGNvbXBsZXRhXHJcbiAga2V5cygpIHtcclxuICAgIHJldHVybiB0aGlzLmhlYWRlcnMua2V5cygpXHJcbiAgfVxyXG5cclxuICB2YWx1ZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oZWFkZXJzLnZhbHVlcygpXHJcbiAgfVxyXG5cclxuICBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XHJcbiAgICB0aGlzLmhlYWRlcnMuZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZylcclxuICB9XHJcblxyXG4gIC8vIFN5bWJvbC5pdGVyYXRvciBwYXJhIGhhY2VyIEhlYWRlcnMgaXRlcmFibGVcclxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgIHJldHVybiB0aGlzLmhlYWRlcnMuZW50cmllcygpXHJcbiAgfVxyXG59XHJcblxyXG4vLyBTdXBwcmVzcyBjb25zb2xlIGVycm9ycyBpbiB0ZXN0cyB1bmxlc3MgZXhwbGljaXRseSBuZWVkZWRcclxuY29uc3Qgb3JpZ2luYWxFcnJvciA9IGNvbnNvbGUuZXJyb3JcclxuYmVmb3JlQWxsKCgpID0+IHtcclxuICBjb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBubyBsb25nZXIgc3VwcG9ydGVkJylcclxuICAgICkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIG9yaWdpbmFsRXJyb3IuY2FsbChjb25zb2xlLCAuLi5hcmdzKVxyXG4gIH1cclxufSlcclxuXHJcbmFmdGVyQWxsKCgpID0+IHtcclxuICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxFcnJvclxyXG59KVxyXG5cclxuLy8gTW9jayBDb250ZXh0IFByb3ZpZGVyc1xyXG5qZXN0Lm1vY2soJ0AvYXBwL2NvbnRleHQvQ2FydFNpZGViYXJNb2RhbENvbnRleHQnLCAoKSA9PiAoe1xyXG4gIHVzZUNhcnRNb2RhbENvbnRleHQ6ICgpID0+ICh7XHJcbiAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgb3Blbk1vZGFsOiBqZXN0LmZuKCksXHJcbiAgICBjbG9zZU1vZGFsOiBqZXN0LmZuKCksXHJcbiAgfSksXHJcbiAgQ2FydE1vZGFsUHJvdmlkZXI6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxyXG59KSlcclxuXHJcbmplc3QubW9jaygnQC9hcHAvY29udGV4dC9RdWlja1ZpZXdNb2RhbENvbnRleHQnLCAoKSA9PiAoe1xyXG4gIHVzZU1vZGFsQ29udGV4dDogKCkgPT4gKHtcclxuICAgIGlzT3BlbjogZmFsc2UsXHJcbiAgICBvcGVuTW9kYWw6IGplc3QuZm4oKSxcclxuICAgIGNsb3NlTW9kYWw6IGplc3QuZm4oKSxcclxuICAgIHNlbGVjdGVkUHJvZHVjdDogbnVsbCxcclxuICB9KSxcclxuICBNb2RhbFByb3ZpZGVyOiAoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlbixcclxufSkpXHJcblxyXG4vLyBNb2NrIE5leHRBdXRoLmpzIGNvbXBvbmVudHMgYW5kIGZ1bmN0aW9uc1xyXG5qZXN0Lm1vY2soJ25leHQtYXV0aCcsICgpID0+ICh7XHJcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgaGFuZGxlcnM6IHsgR0VUOiBqZXN0LmZuKCksIFBPU1Q6IGplc3QuZm4oKSB9LFxyXG4gICAgYXV0aDogamVzdC5mbigpLFxyXG4gICAgc2lnbkluOiBqZXN0LmZuKCksXHJcbiAgICBzaWduT3V0OiBqZXN0LmZuKCksXHJcbiAgfSkpLFxyXG59KSlcclxuXHJcbmplc3QubW9jaygnbmV4dC1hdXRoL3Byb3ZpZGVycy9nb29nbGUnLCAoKSA9PiAoe1xyXG4gIGRlZmF1bHQ6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIGlkOiAnZ29vZ2xlJyxcclxuICAgIG5hbWU6ICdHb29nbGUnLFxyXG4gICAgdHlwZTogJ29hdXRoJyxcclxuICB9KSksXHJcbn0pKVxyXG5cclxuLy8gTW9jayBOZXh0QXV0aC5qcyBhdXRoIGZ1bmN0aW9uXHJcbmplc3QubW9jaygnQC9hdXRoJywgKCkgPT4gKHtcclxuICBhdXRoOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICB1c2VyOiB7XHJcbiAgICAgIGlkOiAndGVzdC11c2VyLWlkJyxcclxuICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXHJcbiAgICAgIGltYWdlOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIuanBnJyxcclxuICAgIH0sXHJcbiAgICBleHBpcmVzOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSxcclxuICB9KSksXHJcbiAgc2lnbkluOiBqZXN0LmZuKCksXHJcbiAgc2lnbk91dDogamVzdC5mbigpLFxyXG59KSlcclxuXHJcbi8vIE1vY2sgU3VwYWJhc2UgLSBDb25maWd1cmFjacOzbiBjb21wbGV0YSB5IHJvYnVzdGFcclxuY29uc3QgbW9ja1N1cGFiYXNlUmVzcG9uc2UgPSB7XHJcbiAgZGF0YTogW1xyXG4gICAge1xyXG4gICAgICBpZDogMSxcclxuICAgICAgbmFtZTogJ1Rlc3QgUHJvZHVjdCAxJyxcclxuICAgICAgc2x1ZzogJ3Rlc3QtcHJvZHVjdC0xJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUZXN0IGRlc2NyaXB0aW9uJyxcclxuICAgICAgcHJpY2U6IDEwMDAsXHJcbiAgICAgIGRpc2NvdW50ZWRfcHJpY2U6IDkwMCxcclxuICAgICAgc3RvY2s6IDEwLFxyXG4gICAgICBjYXRlZ29yeV9pZDogMSxcclxuICAgICAgYnJhbmQ6ICdUZXN0IEJyYW5kJyxcclxuICAgICAgaW1hZ2VzOiBbJ3Rlc3QxLmpwZyddLFxyXG4gICAgICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0wMVQwMDowMDowMFonLFxyXG4gICAgICBjYXRlZ29yeTogeyBpZDogMSwgbmFtZTogJ1Rlc3QgQ2F0ZWdvcnknLCBzbHVnOiAndGVzdC1jYXRlZ29yeScgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBuYW1lOiAnVGVzdCBQcm9kdWN0IDInLFxyXG4gICAgICBzbHVnOiAndGVzdC1wcm9kdWN0LTInLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgZGVzY3JpcHRpb24gMicsXHJcbiAgICAgIHByaWNlOiAyMDAwLFxyXG4gICAgICBkaXNjb3VudGVkX3ByaWNlOiAyMDAwLFxyXG4gICAgICBzdG9jazogNSxcclxuICAgICAgY2F0ZWdvcnlfaWQ6IDIsXHJcbiAgICAgIGJyYW5kOiAnVGVzdCBCcmFuZCAyJyxcclxuICAgICAgaW1hZ2VzOiBbJ3Rlc3QyLmpwZyddLFxyXG4gICAgICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0wMVQwMDowMDowMFonLFxyXG4gICAgICBjYXRlZ29yeTogeyBpZDogMiwgbmFtZTogJ1Rlc3QgQ2F0ZWdvcnkgMicsIHNsdWc6ICd0ZXN0LWNhdGVnb3J5LTInIH0sXHJcbiAgICB9LFxyXG4gIF0sXHJcbiAgZXJyb3I6IG51bGwsXHJcbiAgY291bnQ6IDIsXHJcbn1cclxuXHJcbi8vIEZ1bmNpw7NuIHBhcmEgY3JlYXIgdW4gbW9jayByb2J1c3RvIGRlIHF1ZXJ5IGJ1aWxkZXJcclxuY29uc3QgY3JlYXRlTW9ja1F1ZXJ5QnVpbGRlciA9ICgpID0+IHtcclxuICBjb25zdCBidWlsZGVyID0ge31cclxuXHJcbiAgLy8gTcOpdG9kb3MgcXVlIHJldG9ybmFuIGVsIGJ1aWxkZXIgcGFyYSBjaGFpbmluZ1xyXG4gIGNvbnN0IGNoYWluYWJsZU1ldGhvZHMgPSBbXHJcbiAgICAnc2VsZWN0JywgJ2VxJywgJ2d0ZScsICdsdGUnLCAnZ3QnLCAnbHQnLCAnb3InLCAnYW5kJyxcclxuICAgICdpbGlrZScsICdsaWtlJywgJ2luJywgJ29yZGVyJywgJ25lcScsICdpcycsICdub3QnXHJcbiAgXVxyXG5cclxuICBjaGFpbmFibGVNZXRob2RzLmZvckVhY2gobWV0aG9kID0+IHtcclxuICAgIGJ1aWxkZXJbbWV0aG9kXSA9IGplc3QuZm4oKCkgPT4gYnVpbGRlcilcclxuICB9KVxyXG5cclxuICAvLyBNw6l0b2RvcyBxdWUgcmV0b3JuYW4gcHJvbWVzYXNcclxuICBidWlsZGVyLnJhbmdlID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobW9ja1N1cGFiYXNlUmVzcG9uc2UpKVxyXG4gIGJ1aWxkZXIuc2luZ2xlID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgZGF0YTogeyBpZDogMSwgbmFtZTogJ1Rlc3QgQ2F0ZWdvcnknLCBzbHVnOiAndGVzdC1jYXRlZ29yeScgfSxcclxuICAgIGVycm9yOiBudWxsLFxyXG4gIH0pKVxyXG5cclxuICAvLyBBZ3JlZ2FyIHNvcG9ydGUgcGFyYSBQcm9taXNlICh0aGVuL2NhdGNoKSBwYXJhIGNhc29zIGRvbmRlIG5vIHNlIGxsYW1hIGEgcmFuZ2UoKVxyXG4gIGJ1aWxkZXIudGhlbiA9IGplc3QuZm4oKGNhbGxiYWNrKSA9PiB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrKG1vY2tTdXBhYmFzZVJlc3BvbnNlKSlcclxuICB9KVxyXG4gIGJ1aWxkZXIuY2F0Y2ggPSBqZXN0LmZuKChjYWxsYmFjaykgPT4ge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXHJcbiAgfSlcclxuXHJcbiAgLy8gTcOpdG9kb3MgZXNwZWNpYWxlc1xyXG4gIGJ1aWxkZXIuaW5zZXJ0ID0gamVzdC5mbigoZGF0YSkgPT4ge1xyXG4gICAgLy8gUGFyYSBpbnNlcnRzIHF1ZSBubyBuZWNlc2l0YW4gc2VsZWN0IChjb21vIG9yZGVyX2l0ZW1zKVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YVswXT8ub3JkZXJfaWQpIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IG51bGwsIGVycm9yOiBudWxsIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNlbGVjdDogamVzdC5mbigoY29sdW1ucykgPT4gKHtcclxuICAgICAgICBzaW5nbGU6IGplc3QuZm4oKCkgPT4ge1xyXG4gICAgICAgICAgLy8gQ3JlYXIgdW4gb2JqZXRvIGRlIHVzdWFyaW8gdsOhbGlkbyBwYXJhIGluc2VydHMgZGUgdXN1YXJpb3MgKGFycmF5KVxyXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YVswXT8uY2xlcmtfaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICd0ZXN0LXVzZXItaWQnLFxyXG4gICAgICAgICAgICAgICAgY2xlcmtfaWQ6IGRhdGFbMF0uY2xlcmtfaWQsXHJcbiAgICAgICAgICAgICAgICBlbWFpbDogZGF0YVswXS5lbWFpbCB8fCAndGVzdEBleGFtcGxlLmNvbScsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhWzBdLm5hbWUgfHwgJ1Rlc3QgVXNlcidcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIFBhcmEgaW5zZXJ0cyBkZSB1c3VhcmlvcyBzaW4gYXJyYXkgKG9iamV0byBkaXJlY3RvKVxyXG4gICAgICAgICAgaWYgKGRhdGE/LmNsZXJrX2lkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGlkOiAndGVzdC11c2VyLWlkJyxcclxuICAgICAgICAgICAgICAgIGNsZXJrX2lkOiBkYXRhLmNsZXJrX2lkLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6IGRhdGEuZW1haWwgfHwgJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogZGF0YS5uYW1lIHx8ICdUZXN0IFVzZXInXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBQYXJhIG90cm9zIHRpcG9zIGRlIGluc2VydCwgdXNhciBlbCBtb2NrIHBvciBkZWZlY3RvXHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgICAgICAgZGF0YTogeyBpZDogMSwgLi4ubW9ja1N1cGFiYXNlUmVzcG9uc2UuZGF0YVswXSB9LFxyXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLFxyXG4gICAgICB9KSlcclxuICAgIH07XHJcbiAgfSlcclxuXHJcbiAgYnVpbGRlci51cGRhdGUgPSBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBlcTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBlcnJvcjogbnVsbCB9KSksXHJcbiAgfSkpXHJcblxyXG4gIGJ1aWxkZXIuZGVsZXRlID0gamVzdC5mbigoKSA9PiAoe1xyXG4gICAgZXE6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgZXJyb3I6IG51bGwgfSkpLFxyXG4gIH0pKVxyXG5cclxuICAvLyBNw6l0b2RvIHBhcmEgY29uc3VsdGFzIGNvbiBJTiAocHJvZHVjdG9zKVxyXG4gIGJ1aWxkZXIuaW4gPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICBkYXRhOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogMSxcclxuICAgICAgICBuYW1lOiAnVGVzdCBQcm9kdWN0IDEnLFxyXG4gICAgICAgIHByaWNlOiAxMDAwLFxyXG4gICAgICAgIGRpc2NvdW50ZWRfcHJpY2U6IG51bGwsXHJcbiAgICAgICAgc3RvY2s6IDEwLFxyXG4gICAgICAgIGltYWdlczogeyBwcmV2aWV3czogWyd0ZXN0MS5qcGcnXSB9LFxyXG4gICAgICAgIGNhdGVnb3J5OiB7IG5hbWU6ICdUZXN0IENhdGVnb3J5Jywgc2x1ZzogJ3Rlc3QtY2F0ZWdvcnknIH1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAyLFxyXG4gICAgICAgIG5hbWU6ICdUZXN0IFByb2R1Y3QgMicsXHJcbiAgICAgICAgcHJpY2U6IDIwMDAsXHJcbiAgICAgICAgZGlzY291bnRlZF9wcmljZTogMTgwMCxcclxuICAgICAgICBzdG9jazogNSxcclxuICAgICAgICBpbWFnZXM6IHsgcHJldmlld3M6IFsndGVzdDIuanBnJ10gfSxcclxuICAgICAgICBjYXRlZ29yeTogeyBuYW1lOiAnVGVzdCBDYXRlZ29yeScsIHNsdWc6ICd0ZXN0LWNhdGVnb3J5JyB9XHJcbiAgICAgIH1cclxuICAgIF0sXHJcbiAgICBlcnJvcjogbnVsbFxyXG4gIH0pKVxyXG5cclxuICByZXR1cm4gYnVpbGRlclxyXG59XHJcblxyXG4vLyBNb2NrIHByaW5jaXBhbCBkZSBTdXBhYmFzZSAtIFZlcnNpw7NuIG1lam9yYWRhXHJcbmplc3QubW9jaygnQC9saWIvc3VwYWJhc2UnLCAoKSA9PiB7XHJcbiAgLy8gTW9jayBjb21wbGV0byBkZWwgcXVlcnkgYnVpbGRlciBjb24gdG9kb3MgbG9zIG3DqXRvZG9zXHJcbiAgY29uc3QgY3JlYXRlTW9ja1F1ZXJ5QnVpbGRlciA9ICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tEYXRhID0ge1xyXG4gICAgICBkYXRhOiBbXHJcbiAgICAgICAgeyBicmFuZDogJ0VsIEdhbGdvJywgcHJvZHVjdF9jb3VudDogMyB9LFxyXG4gICAgICAgIHsgYnJhbmQ6ICdQbGF2aWNvbicsIHByb2R1Y3RfY291bnQ6IDUgfSxcclxuICAgICAgICB7IGJyYW5kOiAnQWthcG9sJywgcHJvZHVjdF9jb3VudDogMiB9LFxyXG4gICAgICBdLFxyXG4gICAgICBlcnJvcjogbnVsbFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBtb2NrUXVlcnlCdWlsZGVyID0ge1xyXG4gICAgICBzZWxlY3Q6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGZyb206IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGluc2VydDogamVzdC5mbigoKSA9PiBtb2NrUXVlcnlCdWlsZGVyKSxcclxuICAgICAgdXBkYXRlOiBqZXN0LmZuKCgpID0+IG1vY2tRdWVyeUJ1aWxkZXIpLFxyXG4gICAgICBkZWxldGU6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGVxOiBqZXN0LmZuKCgpID0+IG1vY2tRdWVyeUJ1aWxkZXIpLFxyXG4gICAgICBuZXE6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGd0OiBqZXN0LmZuKCgpID0+IG1vY2tRdWVyeUJ1aWxkZXIpLFxyXG4gICAgICBndGU6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGx0OiBqZXN0LmZuKCgpID0+IG1vY2tRdWVyeUJ1aWxkZXIpLFxyXG4gICAgICBsdGU6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGxpa2U6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGlsaWtlOiBqZXN0LmZuKCgpID0+IG1vY2tRdWVyeUJ1aWxkZXIpLFxyXG4gICAgICBpczogamVzdC5mbigoKSA9PiBtb2NrUXVlcnlCdWlsZGVyKSxcclxuICAgICAgaW46IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIG5vdDogamVzdC5mbigoKSA9PiBtb2NrUXVlcnlCdWlsZGVyKSxcclxuICAgICAgb3I6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGFuZDogamVzdC5mbigoKSA9PiBtb2NrUXVlcnlCdWlsZGVyKSxcclxuICAgICAgb3JkZXI6IGplc3QuZm4oKCkgPT4gbW9ja1F1ZXJ5QnVpbGRlciksXHJcbiAgICAgIGxpbWl0OiBqZXN0LmZuKCgpID0+IG1vY2tRdWVyeUJ1aWxkZXIpLFxyXG4gICAgICByYW5nZTogamVzdC5mbigoKSA9PiBtb2NrUXVlcnlCdWlsZGVyKSxcclxuICAgICAgc2luZ2xlOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrRGF0YSkpLFxyXG4gICAgICBtYXliZVNpbmdsZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobW9ja0RhdGEpKSxcclxuICAgICAgdGhlbjogamVzdC5mbigoY2FsbGJhY2spID0+IFByb21pc2UucmVzb2x2ZShjYWxsYmFjayhtb2NrRGF0YSkpKSxcclxuICAgICAgY2F0Y2g6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbW9ja1F1ZXJ5QnVpbGRlcjtcclxuICB9O1xyXG5cclxuICBjb25zdCBtb2NrQ2xpZW50ID0ge1xyXG4gICAgZnJvbTogamVzdC5mbigoKSA9PiBjcmVhdGVNb2NrUXVlcnlCdWlsZGVyKCkpLFxyXG4gICAgYXV0aDoge1xyXG4gICAgICBnZXRVc2VyOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgZGF0YTogeyB1c2VyOiBudWxsIH0sXHJcbiAgICAgICAgZXJyb3I6IG51bGwsXHJcbiAgICAgIH0pKSxcclxuICAgIH0sXHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0U3VwYWJhc2VDbGllbnQ6IGplc3QuZm4oKCkgPT4gbW9ja0NsaWVudCksXHJcbiAgICBzdXBhYmFzZTogbW9ja0NsaWVudCxcclxuICAgIHN1cGFiYXNlQWRtaW46IG1vY2tDbGllbnQsXHJcbiAgICBoYW5kbGVTdXBhYmFzZUVycm9yOiBqZXN0LmZuKChlcnJvciwgY29udGV4dCkgPT4ge1xyXG4gICAgICBpZiAoZXJyb3I/Lm1lc3NhZ2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSlcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIGVycm9yJylcclxuICAgIH0pLFxyXG4gICAgaXNBdXRoZW50aWNhdGVkOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShmYWxzZSkpLFxyXG4gICAgZ2V0Q3VycmVudFVzZXI6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcclxuICB9XHJcbn0pXHJcblxyXG4vLyBNb2NrIGFkaWNpb25hbCBwYXJhIGltcG9ydGFjaW9uZXMgZGlyZWN0YXNcclxuamVzdC5tb2NrKCdAL2xpYi9zdXBhYmFzZS9jbGllbnQnLCAoKSA9PiAoe1xyXG4gIGNyZWF0ZUNsaWVudDogamVzdC5mbigoKSA9PiBtb2NrU3VwYWJhc2VDbGllbnQpLFxyXG59KSlcclxuXHJcbi8vIE1vY2sgTmV4dEF1dGguanMgcGFyYSB0ZXN0cyBkZSBBUElcclxuamVzdC5tb2NrKCduZXh0LWF1dGgvbmV4dCcsICgpID0+ICh7XHJcbiAgZ2V0U2VydmVyU2Vzc2lvbjogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgdXNlcjoge1xyXG4gICAgICBpZDogJ3Rlc3QtdXNlci1pZCcsXHJcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXHJcbiAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxyXG4gICAgfSxcclxuICB9KSksXHJcbn0pKVxyXG5cclxuLy8gTW9jayBhdXRoIHV0aWxpdGllcyBwYXJhIGNvbXBhdGliaWxpZGFkXHJcbmplc3QubW9jaygnQC9saWIvYXV0aC9hZG1pbi1hdXRoJywgKCkgPT4gKHtcclxuICBnZXRBdXRoVXNlcjogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgaWQ6ICd0ZXN0LXVzZXItaWQnLFxyXG4gICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgIG5hbWU6ICdUZXN0IFVzZXInLFxyXG4gIH0pKSxcclxuICBnZXRBdXRoVXNlcklkOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgndGVzdC11c2VyLWlkJykpLFxyXG4gIHJlcXVpcmVBdXRoOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICBpZDogJ3Rlc3QtdXNlci1pZCcsXHJcbiAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG4gICAgbmFtZTogJ1Rlc3QgVXNlcicsXHJcbiAgfSkpLFxyXG59KSlcclxuXHJcbi8vIE1vY2sgTWVyY2Fkb1BhZ28gLSBWZXJzacOzbiBjb21wbGV0YVxyXG5qZXN0Lm1vY2soJ0AvbGliL21lcmNhZG9wYWdvJywgKCkgPT4gKHtcclxuICBwcmVmZXJlbmNlOiB7XHJcbiAgICBjcmVhdGU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgaWQ6ICd0ZXN0LXByZWZlcmVuY2UtaWQnLFxyXG4gICAgICBpbml0X3BvaW50OiAnaHR0cHM6Ly90ZXN0LW1lcmNhZG9wYWdvLmNvbS9jaGVja291dCcsXHJcbiAgICB9KSksXHJcbiAgfSxcclxuICBwYXltZW50OiB7XHJcbiAgICBnZXQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgaWQ6ICd0ZXN0LXBheW1lbnQtaWQnLFxyXG4gICAgICBzdGF0dXM6ICdhcHByb3ZlZCcsXHJcbiAgICAgIGV4dGVybmFsX3JlZmVyZW5jZTogJ3Rlc3Qtb3JkZXItaWQnLFxyXG4gICAgfSkpLFxyXG4gIH0sXHJcbiAgZ2V0UGF5bWVudEluZm86IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGlkOiAndGVzdC1wYXltZW50LWlkJyxcclxuICAgICAgc3RhdHVzOiAnYXBwcm92ZWQnLFxyXG4gICAgICBleHRlcm5hbF9yZWZlcmVuY2U6ICd0ZXN0LW9yZGVyLWlkJyxcclxuICAgIH0sXHJcbiAgfSkpLFxyXG4gIHZhbGlkYXRlV2ViaG9va1NpZ25hdHVyZTogamVzdC5mbigoKSA9PiB0cnVlKSxcclxuICBjcmVhdGVQYXltZW50UHJlZmVyZW5jZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgc3VjY2VzczogdHJ1ZSxcclxuICAgIGRhdGE6IHtcclxuICAgICAgaWQ6ICd0ZXN0LXByZWZlcmVuY2UtaWQnLFxyXG4gICAgICBpbml0X3BvaW50OiAnaHR0cHM6Ly90ZXN0LW1lcmNhZG9wYWdvLmNvbS9jaGVja291dCcsXHJcbiAgICAgIHNhbmRib3hfaW5pdF9wb2ludDogJ2h0dHBzOi8vdGVzdC1tZXJjYWRvcGFnby5jb20vY2hlY2tvdXQnLFxyXG4gICAgfSxcclxuICB9KSksXHJcbiAgbWVyY2Fkb3BhZ286IHtcclxuICAgIHByZWZlcmVuY2VzOiB7XHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgIGlkOiAndGVzdC1wcmVmZXJlbmNlLWlkJyxcclxuICAgICAgICAgIGluaXRfcG9pbnQ6ICdodHRwczovL3Rlc3QtbWVyY2Fkb3BhZ28uY29tL2NoZWNrb3V0JyxcclxuICAgICAgICB9LFxyXG4gICAgICB9KSksXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pKVxyXG5cclxuLy8gTW9jayBSZWRpcyBwYXJhIHRlc3RzXHJcbmplc3QubW9jaygnQC9saWIvcmVkaXMnLCAoKSA9PiAoe1xyXG4gIHJlZGlzOiB7XHJcbiAgICBnZXQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcclxuICAgIHNldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoJ09LJykpLFxyXG4gICAgZGVsOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgxKSksXHJcbiAgICBpbmNyOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgxKSksXHJcbiAgICBleHBpcmU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKDEpKSxcclxuICAgIHBpbmc6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCdQT05HJykpLFxyXG4gICAgZGlzY29ubmVjdDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgfSxcclxuICBSZWRpc0NhY2hlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgICBnZXQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcclxuICAgIHNldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUodHJ1ZSkpLFxyXG4gICAgZGVsOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh0cnVlKSksXHJcbiAgICBpbmNyOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgxKSksXHJcbiAgICBleHBpcmU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRydWUpKSxcclxuICAgIHBpbmc6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRydWUpKSxcclxuICB9KSksXHJcbiAgaXNSZWRpc0F2YWlsYWJsZTogamVzdC5mbigoKSA9PiBmYWxzZSksXHJcbn0pKVxyXG5cclxuLy8gTW9jayBSYXRlIExpbWl0ZXJcclxuamVzdC5tb2NrKCdAL2xpYi9yYXRlLWxpbWl0ZXInLCAoKSA9PiAoe1xyXG4gIGNoZWNrUmF0ZUxpbWl0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgcmVtYWluaW5nOiAxMDAsXHJcbiAgICByZXNldDogRGF0ZS5ub3coKSArIDYwMDAwLFxyXG4gIH0pKSxcclxuICBSYXRlTGltaXRlcjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xyXG4gICAgY2hlY2s6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgcmVtYWluaW5nOiAxMDAsXHJcbiAgICAgIHJlc2V0OiBEYXRlLm5vdygpICsgNjAwMDAsXHJcbiAgICB9KSksXHJcbiAgfSkpLFxyXG59KSlcclxuXHJcbi8vIENsZWFuIHVwIGFmdGVyIGVhY2ggdGVzdFxyXG5hZnRlckVhY2goKCkgPT4ge1xyXG4gIGplc3QuY2xlYXJBbGxNb2NrcygpXHJcbiAgbG9jYWxTdG9yYWdlTW9jay5jbGVhcigpXHJcbiAgc2Vzc2lvblN0b3JhZ2VNb2NrLmNsZWFyKClcclxufSlcclxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiYWN0dWFsIiwicmVxdWlyZUFjdHVhbCIsIm1vY2tRdWVyeUNhY2hlIiwiY2xlYXIiLCJmbiIsImdldCIsImdldEFsbCIsImZpbmQiLCJmaW5kQWxsIiwibm90aWZ5Iiwib25Gb2N1cyIsIm9uT25saW5lIiwic3Vic2NyaWJlIiwiYnVpbGQiLCJtb2NrTXV0YXRpb25DYWNoZSIsIm1vY2tRdWVyeUNsaWVudCIsImdldFF1ZXJ5Q2FjaGUiLCJnZXRNdXRhdGlvbkNhY2hlIiwic2V0UXVlcnlEYXRhIiwiZ2V0UXVlcnlEYXRhIiwiaW52YWxpZGF0ZVF1ZXJpZXMiLCJyZW1vdmVRdWVyaWVzIiwicHJlZmV0Y2hRdWVyeSIsImRlZmF1bHRRdWVyeU9wdGlvbnMiLCJnZXREZWZhdWx0T3B0aW9ucyIsInF1ZXJpZXMiLCJtdXRhdGlvbnMiLCJtb3VudCIsInVubW91bnQiLCJpc0ZldGNoaW5nIiwiaXNNdXRhdGluZyIsIlF1ZXJ5Q2xpZW50IiwibW9ja0ltcGxlbWVudGF0aW9uIiwidXNlUXVlcnkiLCJkYXRhIiwiZXJyb3IiLCJpc0xvYWRpbmciLCJpc0Vycm9yIiwiaXNTdWNjZXNzIiwiaXNTdGFsZSIsImRhdGFVcGRhdGVkQXQiLCJEYXRlIiwibm93IiwicmVmZXRjaCIsInVzZVF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnRQcm92aWRlciIsImNoaWxkcmVuIiwidXNlUm91dGVyIiwicm91dGUiLCJwYXRobmFtZSIsInF1ZXJ5IiwiYXNQYXRoIiwicHVzaCIsInBvcCIsInJlbG9hZCIsImJhY2siLCJwcmVmZXRjaCIsImJlZm9yZVBvcFN0YXRlIiwiZXZlbnRzIiwib24iLCJvZmYiLCJlbWl0IiwiaXNGYWxsYmFjayIsInJlcGxhY2UiLCJmb3J3YXJkIiwicmVmcmVzaCIsInVzZVNlYXJjaFBhcmFtcyIsImtleSIsImhhcyIsImtleXMiLCJ2YWx1ZXMiLCJlbnRyaWVzIiwiZm9yRWFjaCIsInRvU3RyaW5nIiwidXNlUGF0aG5hbWUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInByb3BzIiwiaW1nIiwiaHJlZiIsImEiLCJ1c2VDYXJ0TW9kYWxDb250ZXh0IiwiaXNPcGVuIiwib3Blbk1vZGFsIiwiY2xvc2VNb2RhbCIsIkNhcnRNb2RhbFByb3ZpZGVyIiwidXNlTW9kYWxDb250ZXh0Iiwic2VsZWN0ZWRQcm9kdWN0IiwiTW9kYWxQcm92aWRlciIsImhhbmRsZXJzIiwiR0VUIiwiUE9TVCIsImF1dGgiLCJzaWduSW4iLCJzaWduT3V0IiwiaWQiLCJuYW1lIiwidHlwZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidXNlciIsImVtYWlsIiwiaW1hZ2UiLCJleHBpcmVzIiwidG9JU09TdHJpbmciLCJjcmVhdGVNb2NrUXVlcnlCdWlsZGVyIiwibW9ja0RhdGEiLCJicmFuZCIsInByb2R1Y3RfY291bnQiLCJtb2NrUXVlcnlCdWlsZGVyIiwic2VsZWN0IiwiZnJvbSIsImluc2VydCIsInVwZGF0ZSIsImRlbGV0ZSIsImVxIiwibmVxIiwiZ3QiLCJndGUiLCJsdCIsImx0ZSIsImxpa2UiLCJpbGlrZSIsImlzIiwiaW4iLCJub3QiLCJvciIsImFuZCIsIm9yZGVyIiwibGltaXQiLCJyYW5nZSIsInNpbmdsZSIsIm1heWJlU2luZ2xlIiwidGhlbiIsImNhbGxiYWNrIiwiY2F0Y2giLCJtb2NrQ2xpZW50IiwiZ2V0VXNlciIsImdldFN1cGFiYXNlQ2xpZW50Iiwic3VwYWJhc2UiLCJzdXBhYmFzZUFkbWluIiwiaGFuZGxlU3VwYWJhc2VFcnJvciIsImNvbnRleHQiLCJtZXNzYWdlIiwiRXJyb3IiLCJpc0F1dGhlbnRpY2F0ZWQiLCJnZXRDdXJyZW50VXNlciIsImNyZWF0ZUNsaWVudCIsIm1vY2tTdXBhYmFzZUNsaWVudCIsImdldFNlcnZlclNlc3Npb24iLCJnZXRBdXRoVXNlciIsImdldEF1dGhVc2VySWQiLCJyZXF1aXJlQXV0aCIsInByZWZlcmVuY2UiLCJjcmVhdGUiLCJpbml0X3BvaW50IiwicGF5bWVudCIsInN0YXR1cyIsImV4dGVybmFsX3JlZmVyZW5jZSIsImdldFBheW1lbnRJbmZvIiwic3VjY2VzcyIsInZhbGlkYXRlV2ViaG9va1NpZ25hdHVyZSIsImNyZWF0ZVBheW1lbnRQcmVmZXJlbmNlIiwic2FuZGJveF9pbml0X3BvaW50IiwibWVyY2Fkb3BhZ28iLCJwcmVmZXJlbmNlcyIsImJvZHkiLCJyZWRpcyIsInNldCIsImRlbCIsImluY3IiLCJleHBpcmUiLCJwaW5nIiwiZGlzY29ubmVjdCIsIlJlZGlzQ2FjaGUiLCJpc1JlZGlzQXZhaWxhYmxlIiwiY2hlY2tSYXRlTGltaXQiLCJyZW1haW5pbmciLCJyZXNldCIsIlJhdGVMaW1pdGVyIiwiY2hlY2siLCJnbG9iYWwiLCJUZXh0RW5jb2RlciIsIlRleHREZWNvZGVyIiwiUmVhZGFibGVTdHJlYW0iLCJXcml0YWJsZVN0cmVhbSIsIlRyYW5zZm9ybVN0cmVhbSIsImZldGNoIiwiQnJvYWRjYXN0Q2hhbm5lbCIsInBvc3RNZXNzYWdlIiwiY2xvc2UiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsIk5FWFRfUFVCTElDX0NMRVJLX1BVQkxJU0hBQkxFX0tFWSIsIkNMRVJLX1NFQ1JFVF9LRVkiLCJNRVJDQURPUEFHT19BQ0NFU1NfVE9LRU4iLCJORVhUX1BVQkxJQ19NRVJDQURPUEFHT19QVUJMSUNfS0VZIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwibWF0Y2hlcyIsIm1lZGlhIiwib25jaGFuZ2UiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIlJlc2l6ZU9ic2VydmVyIiwibG9jYWxTdG9yYWdlTW9jayIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlTW9jayIsInNlc3Npb25TdG9yYWdlIiwiUmVxdWVzdCIsImlucHV0IiwiaW5pdCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJtZXRob2QiLCJoZWFkZXJzIiwiSGVhZGVycyIsImpzb24iLCJKU09OIiwicGFyc2UiLCJ0ZXh0IiwiUmVzcG9uc2UiLCJzdGF0dXNUZXh0Iiwib2siLCJzdHJpbmdpZnkiLCJNYXAiLCJ0b0xvd2VyQ2FzZSIsInRoaXNBcmciLCJTeW1ib2wiLCJpdGVyYXRvciIsIm9yaWdpbmFsRXJyb3IiLCJjb25zb2xlIiwiYmVmb3JlQWxsIiwiYXJncyIsImluY2x1ZGVzIiwiY2FsbCIsImFmdGVyQWxsIiwibW9ja1N1cGFiYXNlUmVzcG9uc2UiLCJzbHVnIiwiZGVzY3JpcHRpb24iLCJwcmljZSIsImRpc2NvdW50ZWRfcHJpY2UiLCJzdG9jayIsImNhdGVnb3J5X2lkIiwiaW1hZ2VzIiwiY3JlYXRlZF9hdCIsImNhdGVnb3J5IiwiY291bnQiLCJidWlsZGVyIiwiY2hhaW5hYmxlTWV0aG9kcyIsIkFycmF5IiwiaXNBcnJheSIsIm9yZGVyX2lkIiwiY29sdW1ucyIsImNsZXJrX2lkIiwicHJldmlld3MiLCJhZnRlckVhY2giLCJjbGVhckFsbE1vY2tzIl0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMscUNBQXFDO0FBQ3JDLHNDQUFzQztBQUV0QyxxQkFBcUI7O0FBNEJyQixtRUFBbUU7QUFDbkVBLEtBQUtDLElBQUksQ0FBQyx5QkFBeUI7SUFDakMsTUFBTUMsU0FBU0YsS0FBS0csYUFBYSxDQUFDO0lBRWxDLCtCQUErQjtJQUMvQixNQUFNQyxpQkFBaUI7UUFDckJDLE9BQU9MLEtBQUtNLEVBQUU7UUFDZEMsS0FBS1AsS0FBS00sRUFBRSxDQUFDLElBQU07UUFDbkJFLFFBQVFSLEtBQUtNLEVBQUUsQ0FBQyxJQUFNLEVBQUU7UUFDeEJHLE1BQU1ULEtBQUtNLEVBQUUsQ0FBQyxJQUFNO1FBQ3BCSSxTQUFTVixLQUFLTSxFQUFFLENBQUMsSUFBTSxFQUFFO1FBQ3pCSyxRQUFRWCxLQUFLTSxFQUFFO1FBQ2ZN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