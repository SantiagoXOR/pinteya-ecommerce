{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\admin\\orders\\OrderListEnterprise.test.jsx"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ORDER LIST ENTERPRISE TESTS\n// ===================================\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { OrderListEnterprise } from '@/components/admin/orders/OrderListEnterprise';\nimport { \n  mockOrders, \n  createMockFetch, \n  resetAllMocks \n} from '../../../setup/orders-mocks';\n\n// ===================================\n// SETUP MOCKS\n// ===================================\n\n// Mock useToast\nconst mockToast = jest.fn();\njest.mock('../../../../hooks/use-toast', () => ({\n  useToast: () => ({ toast: mockToast })\n}));\n\n// Mock fetch\nconst mockFetch = createMockFetch();\nglobal.fetch = mockFetch;\n\n// Mock Next.js router\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn()\n  }),\n  useSearchParams: () => new URLSearchParams(),\n  usePathname: () => '/admin/orders'\n}));\n\n// ===================================\n// HELPER FUNCTIONS\n// ===================================\n\nconst renderOrderList = (props = {}) => {\n  const defaultProps = {\n    onOrderSelect: jest.fn(),\n    onOrderEdit: jest.fn(),\n    onBulkAction: jest.fn(),\n    enableBulkActions: true,\n    enableFilters: true,\n    pageSize: 20,\n    ...props\n  };\n\n  return {\n    ...render(<OrderListEnterprise {...defaultProps} />),\n    props: defaultProps\n  };\n};\n\n// ===================================\n// TESTS BÁSICOS\n// ===================================\n\ndescribe('OrderListEnterprise', () => {\n  beforeEach(() => {\n    resetAllMocks();\n    mockFetch.mockClear();\n    mockToast.mockClear();\n  });\n\n  test('should render loading state initially', async () => {\n    // Arrange & Act\n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Assert\n    expect(screen.getByText('Gestión de Órdenes')).toBeInTheDocument();\n    expect(screen.getByText('Administra y monitorea todas las órdenes del sistema')).toBeInTheDocument();\n  });\n\n  test('should fetch and display orders on mount', async () => {\n    // Arrange & Act\n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for data to load\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/admin/orders'),\n        undefined\n      );\n    });\n\n    // Assert\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n      expect(screen.getByText(mockOrders[0].user_profiles.name)).toBeInTheDocument();\n    });\n  });\n\n  test('should display correct order information', async () => {\n    // Arrange & Act\n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Assert order details\n    expect(screen.getByText(mockOrders[0].user_profiles.name)).toBeInTheDocument();\n    expect(screen.getByText(mockOrders[0].user_profiles.email)).toBeInTheDocument();\n    expect(screen.getByText(`$${mockOrders[0].total_amount.toLocaleString()} ${mockOrders[0].currency}`)).toBeInTheDocument();\n  });\n\n  test('should handle API errors gracefully', async () => {\n    // Arrange\n    mockFetch.mockImplementationOnce(() => \n      Promise.resolve({\n        ok: false,\n        status: 500,\n        json: () => Promise.resolve({ error: 'Server error' })\n      })\n    );\n\n    // Act\n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Assert\n    await waitFor(() => {\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Error',\n        description: 'No se pudieron cargar las órdenes',\n        variant: 'destructive'\n      });\n    });\n  });\n});\n\n// ===================================\n// TESTS DE FILTROS\n// ===================================\n\ndescribe('OrderListEnterprise - Filters', () => {\n  beforeEach(() => {\n    resetAllMocks();\n    mockFetch.mockClear();\n  });\n\n  test('should render filter components when enabled', async () => {\n    // Arrange & Act\n    await act(async () => {\n      renderOrderList({ enableFilters: true });\n    });\n\n    // Assert\n    expect(screen.getByText('Filtros')).toBeInTheDocument();\n    expect(screen.getByPlaceholderText('Buscar órdenes...')).toBeInTheDocument();\n    expect(screen.getByText('Estado')).toBeInTheDocument();\n    expect(screen.getByText('Estado de Pago')).toBeInTheDocument();\n  });\n\n  test('should not render filters when disabled', async () => {\n    // Arrange & Act\n    await act(async () => {\n      renderOrderList({ enableFilters: false });\n    });\n\n    // Assert\n    expect(screen.queryByText('Filtros')).not.toBeInTheDocument();\n    expect(screen.queryByPlaceholderText('Buscar órdenes...')).not.toBeInTheDocument();\n  });\n\n  test('should handle search filter changes', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    \n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(screen.getByPlaceholderText('Buscar órdenes...')).toBeInTheDocument();\n    });\n\n    // Act\n    const searchInput = screen.getByPlaceholderText('Buscar órdenes...');\n    await act(async () => {\n      await user.type(searchInput, 'test search');\n    });\n\n    // Assert\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('search=test%20search'),\n        undefined\n      );\n    });\n  });\n\n  test('should handle status filter changes', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    \n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(screen.getByText('Estado')).toBeInTheDocument();\n    });\n\n    // Act - Click on status select\n    const statusSelect = screen.getByText('Estado').closest('div').querySelector('[role=\"combobox\"]');\n    await act(async () => {\n      await user.click(statusSelect);\n    });\n\n    // Wait for dropdown to appear and select an option\n    await waitFor(() => {\n      const pendingOption = screen.getByText('Pendiente');\n      expect(pendingOption).toBeInTheDocument();\n    });\n\n    const pendingOption = screen.getByText('Pendiente');\n    await act(async () => {\n      await user.click(pendingOption);\n    });\n\n    // Assert\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('status=pending'),\n        undefined\n      );\n    });\n  });\n\n  test('should reset page when filters change', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    \n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(screen.getByPlaceholderText('Buscar órdenes...')).toBeInTheDocument();\n    });\n\n    // Act - Change search filter\n    const searchInput = screen.getByPlaceholderText('Buscar órdenes...');\n    await act(async () => {\n      await user.type(searchInput, 'test');\n    });\n\n    // Assert - Should include page=1 in the request\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('page=1'),\n        undefined\n      );\n    });\n  });\n});\n\n// ===================================\n// TESTS DE ACCIONES MASIVAS\n// ===================================\n\ndescribe('OrderListEnterprise - Bulk Actions', () => {\n  beforeEach(() => {\n    resetAllMocks();\n    mockFetch.mockClear();\n  });\n\n  test('should render bulk action controls when enabled', async () => {\n    // Arrange & Act\n    await act(async () => {\n      renderOrderList({ enableBulkActions: true });\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Assert - Should have checkboxes for selection\n    const checkboxes = screen.getAllByRole('checkbox');\n    expect(checkboxes.length).toBeGreaterThan(0);\n  });\n\n  test('should not render bulk actions when disabled', async () => {\n    // Arrange & Act\n    await act(async () => {\n      renderOrderList({ enableBulkActions: false });\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Assert - Should not have selection checkboxes\n    const checkboxes = screen.queryAllByRole('checkbox');\n    expect(checkboxes.length).toBe(0);\n  });\n\n  test('should handle individual order selection', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    \n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Act - Select first order\n    const checkboxes = screen.getAllByRole('checkbox');\n    const firstOrderCheckbox = checkboxes[1]; // Skip the \"select all\" checkbox\n    \n    await act(async () => {\n      await user.click(firstOrderCheckbox);\n    });\n\n    // Assert - Bulk actions should appear\n    await waitFor(() => {\n      expect(screen.getByText(/orden\\(es\\) seleccionada\\(s\\)/)).toBeInTheDocument();\n    });\n  });\n\n  test('should handle select all functionality', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    \n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Act - Click select all checkbox\n    const checkboxes = screen.getAllByRole('checkbox');\n    const selectAllCheckbox = checkboxes[0];\n    \n    await act(async () => {\n      await user.click(selectAllCheckbox);\n    });\n\n    // Assert - All orders should be selected\n    await waitFor(() => {\n      expect(screen.getByText(`${mockOrders.length} orden(es) seleccionada(s)`)).toBeInTheDocument();\n    });\n  });\n\n  test('should call onBulkAction when bulk action is triggered', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    const { props } = renderOrderList();\n    \n    await act(async () => {\n      // Component is already rendered\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Act - Select an order and trigger bulk action\n    const checkboxes = screen.getAllByRole('checkbox');\n    const firstOrderCheckbox = checkboxes[1];\n    \n    await act(async () => {\n      await user.click(firstOrderCheckbox);\n    });\n\n    // Wait for bulk actions to appear\n    await waitFor(() => {\n      expect(screen.getByText('Exportar')).toBeInTheDocument();\n    });\n\n    const exportButton = screen.getByText('Exportar');\n    await act(async () => {\n      await user.click(exportButton);\n    });\n\n    // Assert\n    expect(props.onBulkAction).toHaveBeenCalledWith('export', [mockOrders[0].id]);\n  });\n\n  test('should show warning when no orders selected for bulk action', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    const { props } = renderOrderList();\n    \n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Act - Try to trigger bulk action without selection\n    // First select an order to show bulk actions\n    const checkboxes = screen.getAllByRole('checkbox');\n    const firstOrderCheckbox = checkboxes[1];\n    \n    await act(async () => {\n      await user.click(firstOrderCheckbox);\n    });\n\n    // Then deselect it\n    await act(async () => {\n      await user.click(firstOrderCheckbox);\n    });\n\n    // Now try to use a bulk action (this should be handled by the component's internal logic)\n    // The bulk action buttons should not be visible when no orders are selected\n    expect(screen.queryByText('Exportar')).not.toBeInTheDocument();\n  });\n});\n\n// ===================================\n// TESTS DE PAGINACIÓN\n// ===================================\n\ndescribe('OrderListEnterprise - Pagination', () => {\n  beforeEach(() => {\n    resetAllMocks();\n    mockFetch.mockClear();\n  });\n\n  test('should handle page navigation', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    \n    // Mock response with pagination\n    mockFetch.mockImplementationOnce(() => \n      Promise.resolve({\n        ok: true,\n        status: 200,\n        json: () => Promise.resolve({\n          data: {\n            orders: mockOrders,\n            pagination: {\n              page: 1,\n              limit: 20,\n              total: 50,\n              totalPages: 3,\n              hasNextPage: true,\n              hasPreviousPage: false\n            },\n            filters: {}\n          },\n          success: true,\n          error: null\n        })\n      })\n    );\n\n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText('Página 1 de 3')).toBeInTheDocument();\n    });\n\n    // Act - Click next page\n    const nextButton = screen.getByText('Siguiente');\n    await act(async () => {\n      await user.click(nextButton);\n    });\n\n    // Assert\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('page=2'),\n        undefined\n      );\n    });\n  });\n\n  test('should disable navigation buttons appropriately', async () => {\n    // Arrange\n    mockFetch.mockImplementationOnce(() => \n      Promise.resolve({\n        ok: true,\n        status: 200,\n        json: () => Promise.resolve({\n          data: {\n            orders: mockOrders,\n            pagination: {\n              page: 1,\n              limit: 20,\n              total: 10,\n              totalPages: 1,\n              hasNextPage: false,\n              hasPreviousPage: false\n            },\n            filters: {}\n          },\n          success: true,\n          error: null\n        })\n      })\n    );\n\n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText('Mostrando 1 a 10 de 10 órdenes')).toBeInTheDocument();\n    });\n\n    // Assert - Navigation buttons should be disabled\n    const previousButton = screen.getByText('Anterior');\n    const nextButton = screen.getByText('Siguiente');\n    \n    expect(previousButton).toBeDisabled();\n    expect(nextButton).toBeDisabled();\n  });\n});\n\n// ===================================\n// TESTS DE INTERACCIONES\n// ===================================\n\ndescribe('OrderListEnterprise - Interactions', () => {\n  beforeEach(() => {\n    resetAllMocks();\n    mockFetch.mockClear();\n  });\n\n  test('should call onOrderSelect when order is clicked', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    const { props } = renderOrderList();\n    \n    await act(async () => {\n      // Component is already rendered\n    });\n\n    // Wait for orders to load\n    await waitFor(() => {\n      expect(screen.getByText(mockOrders[0].order_number)).toBeInTheDocument();\n    });\n\n    // Act - Click on \"Ver Detalles\" in dropdown menu\n    const moreButtons = screen.getAllByRole('button');\n    const moreButton = moreButtons.find(button => \n      button.querySelector('svg') // Find button with icon (MoreHorizontal)\n    );\n    \n    if (moreButton) {\n      await act(async () => {\n        await user.click(moreButton);\n      });\n\n      // Wait for dropdown to appear\n      await waitFor(() => {\n        expect(screen.getByText('Ver Detalles')).toBeInTheDocument();\n      });\n\n      const viewDetailsButton = screen.getByText('Ver Detalles');\n      await act(async () => {\n        await user.click(viewDetailsButton);\n      });\n\n      // Assert\n      expect(props.onOrderSelect).toHaveBeenCalledWith(mockOrders[0]);\n    }\n  });\n\n  test('should refresh data when refresh button is clicked', async () => {\n    // Arrange\n    const user = userEvent.setup();\n    \n    await act(async () => {\n      renderOrderList();\n    });\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n    });\n\n    // Act - Click refresh button\n    const refreshButton = screen.getByText('Actualizar');\n    await act(async () => {\n      await user.click(refreshButton);\n    });\n\n    // Assert - Should make another API call\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n"],"names":["jest","mock","useToast","toast","mockToast","useRouter","push","fn","replace","back","useSearchParams","URLSearchParams","usePathname","mockFetch","createMockFetch","global","fetch","renderOrderList","props","defaultProps","onOrderSelect","onOrderEdit","onBulkAction","enableBulkActions","enableFilters","pageSize","render","OrderListEnterprise","describe","beforeEach","resetAllMocks","mockClear","test","act","expect","screen","getByText","toBeInTheDocument","waitFor","toHaveBeenCalledWith","stringContaining","undefined","mockOrders","order_number","user_profiles","name","email","total_amount","toLocaleString","currency","mockImplementationOnce","Promise","resolve","ok","status","json","error","title","description","variant","getByPlaceholderText","queryByText","not","queryByPlaceholderText","user","userEvent","setup","searchInput","type","statusSelect","closest","querySelector","click","pendingOption","checkboxes","getAllByRole","length","toBeGreaterThan","queryAllByRole","toBe","firstOrderCheckbox","selectAllCheckbox","exportButton","id","data","orders","pagination","page","limit","total","totalPages","hasNextPage","hasPreviousPage","filters","success","nextButton","previousButton","toBeDisabled","moreButtons","moreButton","find","button","viewDetailsButton","toHaveBeenCalledTimes","refreshButton"],"mappings":"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"}