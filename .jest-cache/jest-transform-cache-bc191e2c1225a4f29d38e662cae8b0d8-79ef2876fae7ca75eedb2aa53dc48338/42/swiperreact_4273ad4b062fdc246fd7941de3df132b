913fbc6d976fc594f5dbead8cf7473c5
/**
 * Mock para Swiper React - Patrón 1: Imports faltantes
 * Resuelve problemas de ESM modules en Jest
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Swiper () {
        return Swiper;
    },
    get SwiperSlide () {
        return SwiperSlide;
    },
    get // Exportación por defecto
    default () {
        return _default;
    },
    get useSwiper () {
        return useSwiper;
    },
    get useSwiperSlide () {
        return useSwiperSlide;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const Swiper = /*#__PURE__*/ _react.default.forwardRef(({ children, ...props }, ref)=>{
    return /*#__PURE__*/ _react.default.createElement('div', {
        'data-testid': 'swiper-container',
        ref,
        ...props
    }, children);
});
const SwiperSlide = ({ children, ...props })=>{
    return /*#__PURE__*/ _react.default.createElement('div', {
        'data-testid': 'swiper-slide',
        ...props
    }, children);
};
const useSwiper = ()=>({
        slideTo: jest.fn(),
        slideNext: jest.fn(),
        slidePrev: jest.fn(),
        update: jest.fn(),
        destroy: jest.fn(),
        activeIndex: 0,
        slides: []
    });
const useSwiperSlide = ()=>({
        isActive: false,
        isVisible: true,
        isPrev: false,
        isNext: false
    });
const _default = {
    Swiper,
    SwiperSlide,
    useSwiper,
    useSwiperSlide
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXF9fbW9ja3NfX1xcc3dpcGVyLXJlYWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9jayBwYXJhIFN3aXBlciBSZWFjdCAtIFBhdHLDs24gMTogSW1wb3J0cyBmYWx0YW50ZXNcbiAqIFJlc3VlbHZlIHByb2JsZW1hcyBkZSBFU00gbW9kdWxlcyBlbiBKZXN0XG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLy8gTW9jayBkZWwgY29tcG9uZW50ZSBTd2lwZXJcbmV4cG9ydCBjb25zdCBTd2lwZXIgPSBSZWFjdC5mb3J3YXJkUmVmKCh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAnZGF0YS10ZXN0aWQnOiAnc3dpcGVyLWNvbnRhaW5lcicsXG4gICAgcmVmLFxuICAgIC4uLnByb3BzXG4gIH0sIGNoaWxkcmVuKTtcbn0pO1xuXG4vLyBNb2NrIGRlbCBjb21wb25lbnRlIFN3aXBlclNsaWRlXG5leHBvcnQgY29uc3QgU3dpcGVyU2xpZGUgPSAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICdkYXRhLXRlc3RpZCc6ICdzd2lwZXItc2xpZGUnLFxuICAgIC4uLnByb3BzXG4gIH0sIGNoaWxkcmVuKTtcbn07XG5cbi8vIE1vY2sgZGUgdXNlU3dpcGVyIGhvb2tcbmV4cG9ydCBjb25zdCB1c2VTd2lwZXIgPSAoKSA9PiAoe1xuICBzbGlkZVRvOiBqZXN0LmZuKCksXG4gIHNsaWRlTmV4dDogamVzdC5mbigpLFxuICBzbGlkZVByZXY6IGplc3QuZm4oKSxcbiAgdXBkYXRlOiBqZXN0LmZuKCksXG4gIGRlc3Ryb3k6IGplc3QuZm4oKSxcbiAgYWN0aXZlSW5kZXg6IDAsXG4gIHNsaWRlczogW10sXG59KTtcblxuLy8gTW9jayBkZSB1c2VTd2lwZXJTbGlkZSBob29rXG5leHBvcnQgY29uc3QgdXNlU3dpcGVyU2xpZGUgPSAoKSA9PiAoe1xuICBpc0FjdGl2ZTogZmFsc2UsXG4gIGlzVmlzaWJsZTogdHJ1ZSxcbiAgaXNQcmV2OiBmYWxzZSxcbiAgaXNOZXh0OiBmYWxzZSxcbn0pO1xuXG4vLyBFeHBvcnRhY2nDs24gcG9yIGRlZmVjdG9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgU3dpcGVyLFxuICBTd2lwZXJTbGlkZSxcbiAgdXNlU3dpcGVyLFxuICB1c2VTd2lwZXJTbGlkZSxcbn07XG4iXSwibmFtZXMiOlsiU3dpcGVyIiwiU3dpcGVyU2xpZGUiLCJ1c2VTd2lwZXIiLCJ1c2VTd2lwZXJTbGlkZSIsIlJlYWN0IiwiZm9yd2FyZFJlZiIsImNoaWxkcmVuIiwicHJvcHMiLCJyZWYiLCJjcmVhdGVFbGVtZW50Iiwic2xpZGVUbyIsImplc3QiLCJmbiIsInNsaWRlTmV4dCIsInNsaWRlUHJldiIsInVwZGF0ZSIsImRlc3Ryb3kiLCJhY3RpdmVJbmRleCIsInNsaWRlcyIsImlzQWN0aXZlIiwiaXNWaXNpYmxlIiwiaXNQcmV2IiwiaXNOZXh0Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0M7Ozs7Ozs7Ozs7O1FBS1lBO2VBQUFBOztRQVNBQztlQUFBQTs7UUEwQmIsMEJBQTBCO0lBQzFCO2VBQUE7O1FBbkJhQztlQUFBQTs7UUFXQUM7ZUFBQUE7Ozs4REEvQks7Ozs7OztBQUdYLE1BQU1ILHVCQUFTSSxjQUFLLENBQUNDLFVBQVUsQ0FBQyxDQUFDLEVBQUVDLFFBQVEsRUFBRSxHQUFHQyxPQUFPLEVBQUVDO0lBQzlELHFCQUFPSixjQUFLLENBQUNLLGFBQWEsQ0FBQyxPQUFPO1FBQ2hDLGVBQWU7UUFDZkQ7UUFDQSxHQUFHRCxLQUFLO0lBQ1YsR0FBR0Q7QUFDTDtBQUdPLE1BQU1MLGNBQWMsQ0FBQyxFQUFFSyxRQUFRLEVBQUUsR0FBR0MsT0FBTztJQUNoRCxxQkFBT0gsY0FBSyxDQUFDSyxhQUFhLENBQUMsT0FBTztRQUNoQyxlQUFlO1FBQ2YsR0FBR0YsS0FBSztJQUNWLEdBQUdEO0FBQ0w7QUFHTyxNQUFNSixZQUFZLElBQU8sQ0FBQTtRQUM5QlEsU0FBU0MsS0FBS0MsRUFBRTtRQUNoQkMsV0FBV0YsS0FBS0MsRUFBRTtRQUNsQkUsV0FBV0gsS0FBS0MsRUFBRTtRQUNsQkcsUUFBUUosS0FBS0MsRUFBRTtRQUNmSSxTQUFTTCxLQUFLQyxFQUFFO1FBQ2hCSyxhQUFhO1FBQ2JDLFFBQVEsRUFBRTtJQUNaLENBQUE7QUFHTyxNQUFNZixpQkFBaUIsSUFBTyxDQUFBO1FBQ25DZ0IsVUFBVTtRQUNWQyxXQUFXO1FBQ1hDLFFBQVE7UUFDUkMsUUFBUTtJQUNWLENBQUE7TUFHQSxXQUFlO0lBQ2J0QjtJQUNBQztJQUNBQztJQUNBQztBQUNGIn0=