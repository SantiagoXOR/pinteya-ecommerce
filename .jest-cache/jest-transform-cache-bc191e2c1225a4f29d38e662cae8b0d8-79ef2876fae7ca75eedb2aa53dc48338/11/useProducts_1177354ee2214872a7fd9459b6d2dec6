bfb4b70c62c89cd7c424b378dec899c7
// ===================================
// PINTEYA E-COMMERCE - HOOK PARA PRODUCTOS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProducts", {
    enumerable: true,
    get: function() {
        return useProducts;
    }
});
const _react = require("react");
const _products = require("../lib/api/products");
const _productAdapter = require("../lib/adapters/productAdapter");
function useProducts(options = {}) {
    const { initialFilters = {}, autoFetch = true } = options;
    // Referencias para evitar re-renders innecesarios
    const abortControllerRef = (0, _react.useRef)(null);
    const lastRequestRef = (0, _react.useRef)('');
    // DEBUG: Log básico para verificar que el hook se ejecuta (solo en desarrollo)
    if (process.env.NODE_ENV === 'development') {}
    const [state, setState] = (0, _react.useState)({
        products: [],
        loading: false,
        error: null,
        pagination: {
            page: 1,
            limit: 12,
            total: 0,
            totalPages: 0
        }
    });
    const [filters, setFilters] = (0, _react.useState)(initialFilters);
    /**
   * Obtiene productos desde la API con optimizaciones de performance
   */ const fetchProducts = (0, _react.useCallback)(async (newFilters)=>{
        // Cancelar request anterior si existe
        if (abortControllerRef.current) {
            abortControllerRef.current.abort();
        }
        // Crear nuevo AbortController
        abortControllerRef.current = new AbortController();
        const signal = abortControllerRef.current.signal;
        const filtersToUse = newFilters || filters;
        // Crear clave única para el request
        const requestKey = JSON.stringify(filtersToUse);
        // Evitar requests duplicados
        if (requestKey === lastRequestRef.current) {
            return;
        }
        lastRequestRef.current = requestKey;
        setState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const response = await (0, _products.getProducts)(filtersToUse);
            // Verificar si el request fue cancelado
            if (signal.aborted) {
                return;
            }
            if (response.success) {
                // DEBUG CRÍTICO: Log de datos antes del adaptador (solo en desarrollo)
                if (process.env.NODE_ENV === 'development') {
                    const poximixProducts = response.data.filter((p)=>p.name?.includes('Poximix'));
                    if (poximixProducts.length > 0) {
                        console.log('🔍 DEBUG CRÍTICO - DATOS ANTES DEL ADAPTADOR:', poximixProducts.map((p)=>({
                                id: p.id,
                                name: p.name,
                                'contiene Poxipol': p.name?.includes('Poxipol')
                            })));
                    }
                }
                const adaptedProducts = (0, _productAdapter.adaptApiProductsToLegacy)(response.data);
                // DEBUG CRÍTICO: Log de datos después del adaptador (solo en desarrollo)
                if (process.env.NODE_ENV === 'development') {
                    const adaptedPoximix = adaptedProducts.filter((p)=>p.title?.includes('Poximix'));
                    if (adaptedPoximix.length > 0) {
                        console.log('🔍 DEBUG CRÍTICO - DATOS DESPUÉS DEL ADAPTADOR:', adaptedPoximix.map((p)=>({
                                id: p.id,
                                title: p.title,
                                'contiene Poxipol': p.title?.includes('Poxipol')
                            })));
                    }
                }
                setState((prev)=>({
                        ...prev,
                        products: adaptedProducts,
                        loading: false,
                        pagination: response.pagination
                    }));
            } else {
                setState((prev)=>({
                        ...prev,
                        loading: false,
                        error: response.error || 'Error obteniendo productos'
                    }));
            }
        } catch (error) {
            // Ignorar errores de cancelación
            if (error.name === 'AbortError') {
                return;
            }
            setState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message || 'Error inesperado'
                }));
        }
    }, [
        filters
    ]);
    /**
   * Actualiza los filtros y obtiene productos
   */ const updateFilters = (0, _react.useCallback)((newFilters)=>{
        const updatedFilters = {
            ...filters,
            ...newFilters
        };
        setFilters(updatedFilters);
        fetchProducts(updatedFilters);
    }, [
        filters,
        fetchProducts
    ]);
    /**
   * Cambia la página
   */ const changePage = (0, _react.useCallback)((page)=>{
        updateFilters({
            page
        });
    }, [
        updateFilters
    ]);
    /**
   * Cambia el límite de productos por página
   */ const changeLimit = (0, _react.useCallback)((limit)=>{
        updateFilters({
            limit,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Cambia el ordenamiento
   */ const changeSorting = (0, _react.useCallback)((sortBy, sortOrder)=>{
        updateFilters({
            sortBy,
            sortOrder,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Busca productos por término
   */ const searchProducts = (0, _react.useCallback)((searchTerm)=>{
        updateFilters({
            search: searchTerm,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Filtra por categoría
   */ const filterByCategory = (0, _react.useCallback)((category)=>{
        updateFilters({
            category,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Filtra por rango de precios
   */ const filterByPriceRange = (0, _react.useCallback)((priceMin, priceMax)=>{
        updateFilters({
            priceMin,
            priceMax,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Limpia todos los filtros
   */ const clearFilters = (0, _react.useCallback)(()=>{
        const clearedFilters = {
            page: 1,
            limit: filters.limit || 12,
            sortBy: 'created_at',
            sortOrder: 'desc'
        };
        setFilters(clearedFilters);
        fetchProducts(clearedFilters);
    }, [
        filters.limit,
        fetchProducts
    ]);
    /**
   * Refresca los productos
   */ const refresh = (0, _react.useCallback)(()=>{
        fetchProducts();
    }, [
        fetchProducts
    ]);
    // Auto-fetch al montar el componente
    (0, _react.useEffect)(()=>{
        if (autoFetch) {
            fetchProducts();
        }
    }, [
        autoFetch,
        fetchProducts
    ]);
    // Cleanup effect para cancelar requests pendientes
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
            }
        };
    }, []);
    // Memoized helpers para optimizar renders
    const helpers = (0, _react.useMemo)(()=>({
            hasProducts: state.products.length > 0,
            isEmpty: !state.loading && state.products.length === 0,
            hasError: !!state.error,
            hasNextPage: state.pagination.page < state.pagination.totalPages,
            hasPrevPage: state.pagination.page > 1
        }), [
        state.products.length,
        state.loading,
        state.error,
        state.pagination.page,
        state.pagination.totalPages
    ]);
    return {
        // Estado
        products: state.products,
        loading: state.loading,
        error: state.error,
        pagination: state.pagination,
        filters,
        // Acciones
        fetchProducts,
        updateFilters,
        changePage,
        changeLimit,
        changeSorting,
        searchProducts,
        filterByCategory,
        filterByPriceRange,
        clearFilters,
        refresh,
        // Helpers memoizados
        ...helpers
    };
}

//# sourceMappingURL=data:application/json;base64,