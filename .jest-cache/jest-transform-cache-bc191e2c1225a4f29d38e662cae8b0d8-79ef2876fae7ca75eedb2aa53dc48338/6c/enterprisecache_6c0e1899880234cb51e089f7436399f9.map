{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\enterprise-cache.ts"],"sourcesContent":["/**\n * Sistema de Cache Enterprise\n * Cache inteligente para utilidades de autenticación con invalidación automática\n */\n\nimport type { EnterpriseUser, EnterpriseAuthContext } from './enterprise-auth-utils';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n  key: string;\n}\n\ninterface CacheStats {\n  hits: number;\n  misses: number;\n  entries: number;\n  hitRate: number;\n  memoryUsage: number;\n}\n\n// =====================================================\n// CONFIGURACIÓN DE CACHE\n// =====================================================\n\nconst CACHE_CONFIG = {\n  // TTL por tipo de dato (en milisegundos)\n  ttl: {\n    user: 5 * 60 * 1000,        // 5 minutos para datos de usuario\n    permissions: 10 * 60 * 1000, // 10 minutos para permisos\n    session: 2 * 60 * 1000,      // 2 minutos para datos de sesión\n    auth: 1 * 60 * 1000,         // 1 minuto para contexto de auth\n    stats: 30 * 60 * 1000        // 30 minutos para estadísticas\n  },\n  \n  // Límites de cache\n  maxEntries: 1000,\n  cleanupInterval: 5 * 60 * 1000, // Limpiar cada 5 minutos\n  \n  // Prefijos para diferentes tipos de datos\n  prefixes: {\n    user: 'user:',\n    permissions: 'perms:',\n    session: 'session:',\n    auth: 'auth:',\n    stats: 'stats:'\n  }\n};\n\n// =====================================================\n// IMPLEMENTACIÓN DE CACHE EN MEMORIA\n// =====================================================\n\nclass EnterpriseCache {\n  private cache = new Map<string, CacheEntry<any>>();\n  private stats = {\n    hits: 0,\n    misses: 0\n  };\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor() {\n    this.startCleanupTimer();\n  }\n\n  /**\n   * Obtiene un valor del cache\n   */\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    \n    if (!entry) {\n      this.stats.misses++;\n      return null;\n    }\n\n    // Verificar si ha expirado\n    if (Date.now() > entry.timestamp + entry.ttl) {\n      this.cache.delete(key);\n      this.stats.misses++;\n      return null;\n    }\n\n    this.stats.hits++;\n    return entry.data;\n  }\n\n  /**\n   * Almacena un valor en el cache\n   */\n  set<T>(key: string, data: T, ttl?: number): void {\n    // Verificar límite de entradas\n    if (this.cache.size >= CACHE_CONFIG.maxEntries) {\n      this.evictOldest();\n    }\n\n    const entry: CacheEntry<T> = {\n      data,\n      timestamp: Date.now(),\n      ttl: ttl || CACHE_CONFIG.ttl.user,\n      key\n    };\n\n    this.cache.set(key, entry);\n  }\n\n  /**\n   * Elimina una entrada del cache\n   */\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  /**\n   * Elimina entradas por patrón\n   */\n  deletePattern(pattern: string): number {\n    let deleted = 0;\n    const regex = new RegExp(pattern.replace('*', '.*'));\n    \n    for (const key of this.cache.keys()) {\n      if (regex.test(key)) {\n        this.cache.delete(key);\n        deleted++;\n      }\n    }\n    \n    return deleted;\n  }\n\n  /**\n   * Limpia todo el cache\n   */\n  clear(): void {\n    this.cache.clear();\n    this.stats.hits = 0;\n    this.stats.misses = 0;\n  }\n\n  /**\n   * Obtiene estadísticas del cache\n   */\n  getStats(): CacheStats {\n    const total = this.stats.hits + this.stats.misses;\n    const hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\n    \n    // Estimar uso de memoria (aproximado)\n    const memoryUsage = JSON.stringify([...this.cache.entries()]).length;\n\n    return {\n      hits: this.stats.hits,\n      misses: this.stats.misses,\n      entries: this.cache.size,\n      hitRate: Math.round(hitRate * 100) / 100,\n      memoryUsage\n    };\n  }\n\n  /**\n   * Elimina entradas expiradas\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    let cleaned = 0;\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (now > entry.timestamp + entry.ttl) {\n        this.cache.delete(key);\n        cleaned++;\n      }\n    }\n\n    if (cleaned > 0) {\n      console.log(`[ENTERPRISE_CACHE] Limpiadas ${cleaned} entradas expiradas`);\n    }\n  }\n\n  /**\n   * Elimina la entrada más antigua\n   */\n  private evictOldest(): void {\n    let oldestKey = '';\n    let oldestTime = Date.now();\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.timestamp < oldestTime) {\n        oldestTime = entry.timestamp;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n    }\n  }\n\n  /**\n   * Inicia el timer de limpieza automática\n   */\n  private startCleanupTimer(): void {\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup();\n    }, CACHE_CONFIG.cleanupInterval);\n  }\n\n  /**\n   * Detiene el timer de limpieza\n   */\n  destroy(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n    this.clear();\n  }\n}\n\n// Instancia global del cache\nconst enterpriseCache = new EnterpriseCache();\n\n// =====================================================\n// FUNCIONES DE CACHE ESPECÍFICAS\n// =====================================================\n\n/**\n * Cache para datos de usuario\n */\nexport function cacheUser(userId: string, user: EnterpriseUser): void {\n  const key = CACHE_CONFIG.prefixes.user + userId;\n  enterpriseCache.set(key, user, CACHE_CONFIG.ttl.user);\n}\n\nexport function getCachedUser(userId: string): EnterpriseUser | null {\n  const key = CACHE_CONFIG.prefixes.user + userId;\n  return enterpriseCache.get<EnterpriseUser>(key);\n}\n\nexport function invalidateUser(userId: string): void {\n  const key = CACHE_CONFIG.prefixes.user + userId;\n  enterpriseCache.delete(key);\n}\n\n/**\n * Cache para permisos de usuario\n */\nexport function cacheUserPermissions(userId: string, permissions: string[]): void {\n  const key = CACHE_CONFIG.prefixes.permissions + userId;\n  enterpriseCache.set(key, permissions, CACHE_CONFIG.ttl.permissions);\n}\n\nexport function getCachedUserPermissions(userId: string): string[] | null {\n  const key = CACHE_CONFIG.prefixes.permissions + userId;\n  return enterpriseCache.get<string[]>(key);\n}\n\nexport function invalidateUserPermissions(userId: string): void {\n  const key = CACHE_CONFIG.prefixes.permissions + userId;\n  enterpriseCache.delete(key);\n}\n\n/**\n * Cache para contexto de autenticación\n */\nexport function cacheAuthContext(userId: string, context: EnterpriseAuthContext): void {\n  const key = CACHE_CONFIG.prefixes.auth + userId;\n  enterpriseCache.set(key, context, CACHE_CONFIG.ttl.auth);\n}\n\nexport function getCachedAuthContext(userId: string): EnterpriseAuthContext | null {\n  const key = CACHE_CONFIG.prefixes.auth + userId;\n  return enterpriseCache.get<EnterpriseAuthContext>(key);\n}\n\nexport function invalidateAuthContext(userId: string): void {\n  const key = CACHE_CONFIG.prefixes.auth + userId;\n  enterpriseCache.delete(key);\n}\n\n/**\n * Cache para estadísticas\n */\nexport function cacheStats(key: string, stats: any): void {\n  const cacheKey = CACHE_CONFIG.prefixes.stats + key;\n  enterpriseCache.set(cacheKey, stats, CACHE_CONFIG.ttl.stats);\n}\n\nexport function getCachedStats(key: string): any | null {\n  const cacheKey = CACHE_CONFIG.prefixes.stats + key;\n  return enterpriseCache.get(cacheKey);\n}\n\n/**\n * Invalidación masiva por usuario\n */\nexport function invalidateUserCache(userId: string): void {\n  invalidateUser(userId);\n  invalidateUserPermissions(userId);\n  invalidateAuthContext(userId);\n  \n  // Invalidar también datos de sesión\n  const sessionKey = CACHE_CONFIG.prefixes.session + userId;\n  enterpriseCache.delete(sessionKey);\n}\n\n/**\n * Invalidación por patrón\n */\nexport function invalidateCachePattern(pattern: string): number {\n  return enterpriseCache.deletePattern(pattern);\n}\n\n/**\n * Obtener estadísticas del cache\n */\nexport function getCacheStats(): CacheStats {\n  return enterpriseCache.getStats();\n}\n\n/**\n * Limpiar todo el cache\n */\nexport function clearCache(): void {\n  enterpriseCache.clear();\n}\n\n/**\n * Función de utilidad para cache con callback\n */\nexport async function withCache<T>(\n  key: string,\n  fetcher: () => Promise<T>,\n  ttl?: number\n): Promise<T> {\n  // Intentar obtener del cache\n  const cached = enterpriseCache.get<T>(key);\n  if (cached !== null) {\n    return cached;\n  }\n\n  // Si no está en cache, ejecutar fetcher\n  const data = await fetcher();\n  \n  // Almacenar en cache\n  enterpriseCache.set(key, data, ttl);\n  \n  return data;\n}\n\n/**\n * Middleware para cache automático de respuestas\n */\nexport function withResponseCache(ttl: number = CACHE_CONFIG.ttl.user) {\n  return function (handler: Function) {\n    return async (request: any, ...args: any[]) => {\n      // Generar clave de cache basada en URL y parámetros\n      const url = request.url || request.nextUrl?.pathname || 'unknown';\n      const method = request.method || 'GET';\n      const cacheKey = `response:${method}:${url}`;\n\n      // Solo cachear GET requests\n      if (method === 'GET') {\n        const cached = enterpriseCache.get(cacheKey);\n        if (cached) {\n          return cached;\n        }\n      }\n\n      // Ejecutar handler\n      const response = await handler(request, ...args);\n\n      // Cachear respuesta exitosa para GET requests\n      if (method === 'GET' && response && response.status === 200) {\n        enterpriseCache.set(cacheKey, response, ttl);\n      }\n\n      return response;\n    };\n  };\n}\n\n// Exportar instancia del cache para uso avanzado\nexport { enterpriseCache };\n"],"names":["cacheAuthContext","cacheStats","cacheUser","cacheUserPermissions","clearCache","enterpriseCache","getCacheStats","getCachedAuthContext","getCachedStats","getCachedUser","getCachedUserPermissions","invalidateAuthContext","invalidateCachePattern","invalidateUser","invalidateUserCache","invalidateUserPermissions","withCache","withResponseCache","CACHE_CONFIG","ttl","user","permissions","session","auth","stats","maxEntries","cleanupInterval","prefixes","EnterpriseCache","cache","Map","hits","misses","startCleanupTimer","get","key","entry","Date","now","timestamp","delete","data","set","size","evictOldest","deletePattern","pattern","deleted","regex","RegExp","replace","keys","test","clear","getStats","total","hitRate","memoryUsage","JSON","stringify","entries","length","Math","round","cleanup","cleaned","console","log","oldestKey","oldestTime","cleanupTimer","setInterval","destroy","clearInterval","userId","context","cacheKey","sessionKey","fetcher","cached","handler","request","args","url","nextUrl","pathname","method","response","status"],"mappings":"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"}