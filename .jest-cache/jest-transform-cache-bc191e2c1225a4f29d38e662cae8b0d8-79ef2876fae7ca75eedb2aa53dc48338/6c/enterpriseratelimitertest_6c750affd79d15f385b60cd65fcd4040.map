{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\rate-limiting\\enterprise-rate-limiter.test.ts"],"sourcesContent":["/**\n * Tests para Sistema Enterprise de Rate Limiting\n * Valida funcionalidad completa del rate limiting con Redis y fallback en memoria\n */\n\n// Mock de Redis\njest.mock('@/lib/redis', () => ({\n  isRedisAvailable: jest.fn(),\n  enterpriseRateLimit: jest.fn(),\n  redis: {\n    pipeline: jest.fn(() => ({\n      incr: jest.fn(),\n      expire: jest.fn(),\n      exec: jest.fn()\n    })),\n    ping: jest.fn()\n  }\n}));\n\nimport { NextRequest } from 'next/server';\nimport {\n  checkEnterpriseRateLimit,\n  ENTERPRISE_RATE_LIMIT_CONFIGS,\n  ipKeyGenerator,\n  userKeyGenerator,\n  endpointKeyGenerator,\n  hybridKeyGenerator,\n  memoryStore,\n  metricsCollector\n} from '@/lib/rate-limiting/enterprise-rate-limiter';\nimport { isRedisAvailable, enterpriseRateLimit } from '@/lib/redis';\n\ndescribe('Sistema Enterprise de Rate Limiting', () => {\n  let mockIsRedisAvailable: jest.MockedFunction<typeof isRedisAvailable>;\n  let mockEnterpriseRateLimit: jest.MockedFunction<typeof enterpriseRateLimit>;\n\n  beforeEach(() => {\n    mockIsRedisAvailable = isRedisAvailable as jest.MockedFunction<typeof isRedisAvailable>;\n    mockEnterpriseRateLimit = enterpriseRateLimit as jest.MockedFunction<typeof enterpriseRateLimit>;\n\n    jest.clearAllMocks();\n\n    // Reset memory store\n    memoryStore.clear();\n\n    // Reset métricas\n    metricsCollector.reset();\n\n    // Configurar mocks por defecto\n    mockIsRedisAvailable.mockResolvedValue(false); // Por defecto usar memoria\n    mockEnterpriseRateLimit.mockResolvedValue({\n      allowed: true,\n      count: 1,\n      remaining: 49,\n      resetTime: Date.now() + 300000\n    });\n  });\n\n  describe('Configuraciones Predefinidas', () => {\n    it('debe tener configuración para autenticación crítica', () => {\n      const config = ENTERPRISE_RATE_LIMIT_CONFIGS.CRITICAL_AUTH;\n      \n      expect(config.windowMs).toBe(15 * 60 * 1000); // 15 minutos\n      expect(config.maxRequests).toBe(3);\n      expect(config.enableRedis).toBe(true);\n      expect(config.enableMetrics).toBe(true);\n      expect(config.message).toContain('crítica');\n    });\n\n    it('debe tener configuración para APIs admin', () => {\n      const config = ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_API;\n      \n      expect(config.windowMs).toBe(5 * 60 * 1000); // 5 minutos\n      expect(config.maxRequests).toBe(50);\n      expect(config.enableRedis).toBe(true);\n      expect(config.enableMetrics).toBe(true);\n    });\n\n    it('debe tener configuración para APIs de pagos', () => {\n      const config = ENTERPRISE_RATE_LIMIT_CONFIGS.PAYMENT_API;\n      \n      expect(config.windowMs).toBe(10 * 60 * 1000); // 10 minutos\n      expect(config.maxRequests).toBe(15);\n      expect(config.enableRedis).toBe(true);\n      expect(config.onLimitReached).toBeDefined();\n    });\n\n    it('debe tener configuración para APIs públicas', () => {\n      const config = ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_API;\n      \n      expect(config.windowMs).toBe(1 * 60 * 1000); // 1 minuto\n      expect(config.maxRequests).toBe(100);\n      expect(config.enableLogging).toBe(false);\n    });\n  });\n\n  describe('Generadores de Claves', () => {\n    const mockRequest = {\n      headers: new Map([\n        ['x-forwarded-for', '192.168.1.1'],\n        ['x-clerk-user-id', 'user_123']\n      ]),\n      nextUrl: { pathname: '/api/test' }\n    } as any;\n\n    it('debe generar clave por IP', () => {\n      const key = ipKeyGenerator(mockRequest);\n      expect(key).toBe('ip:192.168.1.1');\n    });\n\n    it('debe generar clave por usuario', () => {\n      const key = userKeyGenerator(mockRequest);\n      expect(key).toBe('user:user_123');\n    });\n\n    it('debe generar clave por endpoint', () => {\n      const key = endpointKeyGenerator(mockRequest);\n      expect(key).toBe('endpoint:192.168.1.1:/api/test');\n    });\n\n    it('debe generar clave híbrida', () => {\n      const key = hybridKeyGenerator(mockRequest);\n      expect(key).toBe('user:user_123:/api/test');\n    });\n\n    it('debe usar IP como fallback cuando no hay usuario', () => {\n      const requestWithoutUser = {\n        headers: new Map([['x-forwarded-for', '192.168.1.1']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const key = userKeyGenerator(requestWithoutUser);\n      expect(key).toBe('ip:192.168.1.1');\n    });\n  });\n\n  describe('Rate Limiting con Redis', () => {\n    it('debe usar Redis cuando está disponible', async () => {\n      // Configurar Redis como disponible\n      mockIsRedisAvailable.mockResolvedValue(true);\n      mockEnterpriseRateLimit.mockResolvedValue({\n        allowed: true,\n        count: 1,\n        remaining: 49,\n        resetTime: Date.now() + 300000\n      });\n\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.1']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n\n      expect(result.allowed).toBe(true);\n      expect(result.source).toBe('redis');\n      expect(mockIsRedisAvailable).toHaveBeenCalled();\n      expect(mockEnterpriseRateLimit).toHaveBeenCalled();\n    });\n\n    it('debe usar fallback en memoria cuando Redis no está disponible', async () => {\n      // Redis no disponible (configuración por defecto)\n      mockIsRedisAvailable.mockResolvedValue(false);\n\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.1']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n\n      expect(result.allowed).toBe(true);\n      expect(result.source).toBe('memory');\n      expect(mockIsRedisAvailable).toHaveBeenCalled();\n      expect(mockEnterpriseRateLimit).not.toHaveBeenCalled();\n    });\n\n    it('debe manejar errores de Redis y usar fallback', async () => {\n      // Redis disponible pero con error\n      mockIsRedisAvailable.mockResolvedValue(true);\n      mockEnterpriseRateLimit.mockRejectedValue(new Error('Redis error'));\n\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.1']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n\n      expect(result.allowed).toBe(true);\n      expect(result.source).toBe('memory');\n    });\n  });\n\n  describe('Rate Limiting en Memoria', () => {\n    beforeEach(() => {\n      mockIsRedisAvailable.mockResolvedValue(false);\n    });\n\n    it('debe permitir primera request', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.1']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n\n      expect(result.allowed).toBe(true);\n      expect(result.remaining).toBe(49); // 50 - 1\n      expect(result.source).toBe('memory');\n    });\n\n    it('debe incrementar contador en requests subsecuentes', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.1']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      // Primera request\n      const result1 = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n      expect(result1.remaining).toBe(49);\n\n      // Segunda request\n      const result2 = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n      expect(result2.remaining).toBe(48);\n    });\n\n    it('debe bloquear cuando se excede el límite', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.2']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      // Hacer 3 requests (límite para CRITICAL_AUTH)\n      for (let i = 0; i < 3; i++) {\n        const result = await checkEnterpriseRateLimit(mockRequest, 'CRITICAL_AUTH');\n        expect(result.allowed).toBe(true);\n      }\n\n      // Cuarta request debe ser bloqueada\n      const result = await checkEnterpriseRateLimit(mockRequest, 'CRITICAL_AUTH');\n      expect(result.allowed).toBe(false);\n      expect(result.retryAfter).toBeDefined();\n    });\n\n    it('debe resetear contador después de la ventana', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.3']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      // Configuración con ventana muy corta para testing\n      const customConfig = { windowMs: 100 }; // 100ms\n\n      // Primera request\n      const result1 = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', customConfig);\n      expect(result1.allowed).toBe(true);\n\n      // Esperar que expire la ventana\n      await new Promise(resolve => setTimeout(resolve, 150));\n\n      // Nueva request después de expiración\n      const result2 = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', customConfig);\n      expect(result2.allowed).toBe(true);\n      expect(result2.remaining).toBe(49); // Contador reseteado\n    });\n  });\n\n  describe('Métricas y Logging', () => {\n    beforeEach(() => {\n      mockIsRedisAvailable.mockResolvedValue(false);\n    });\n\n    it('debe registrar métricas cuando está habilitado', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.4']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n\n      const metrics = metricsCollector.getMetrics();\n      expect(metrics.totalRequests).toBe(1);\n      expect(metrics.allowedRequests).toBe(1);\n      expect(metrics.memoryFallbacks).toBe(1);\n    });\n\n    it('debe registrar requests bloqueadas en métricas', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.5']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      // Exceder límite\n      for (let i = 0; i < 4; i++) {\n        await checkEnterpriseRateLimit(mockRequest, 'CRITICAL_AUTH');\n      }\n\n      const metrics = metricsCollector.getMetrics();\n      expect(metrics.totalRequests).toBe(4);\n      expect(metrics.allowedRequests).toBe(3);\n      expect(metrics.blockedRequests).toBe(1);\n    });\n\n    it('debe incluir métricas de tiempo de respuesta', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.6']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n\n      expect(result.metrics).toBeDefined();\n      expect(result.metrics?.responseTime).toBeGreaterThan(0);\n      expect(result.metrics?.keyGenerated).toBeDefined();\n    });\n  });\n\n  describe('Configuraciones Personalizadas', () => {\n    beforeEach(() => {\n      mockIsRedisAvailable.mockResolvedValue(false);\n    });\n\n    it('debe aplicar configuración personalizada', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.7']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const customConfig = {\n        maxRequests: 2,\n        windowMs: 60000\n      };\n\n      // Primera y segunda request deben pasar\n      const result1 = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', customConfig);\n      expect(result1.allowed).toBe(true);\n\n      const result2 = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', customConfig);\n      expect(result2.allowed).toBe(true);\n\n      // Tercera request debe ser bloqueada\n      const result3 = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', customConfig);\n      expect(result3.allowed).toBe(false);\n    });\n\n    it('debe usar generador de clave personalizado', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.8']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const customConfig = {\n        keyGenerator: () => 'custom_key'\n      };\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', customConfig);\n      expect(result.allowed).toBe(true);\n      expect(result.metrics?.keyGenerated).toBe('custom_key');\n    });\n  });\n\n  describe('Manejo de Errores', () => {\n    it('debe manejar configuración no encontrada', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.9']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'INVALID_CONFIG' as any);\n\n      expect(result.allowed).toBe(true);\n      expect(result.error).toContain('no encontrada');\n      expect(result.code).toBe('CONFIG_NOT_FOUND');\n      expect(result.source).toBe('error');\n    });\n\n    it('debe permitir requests en caso de error interno', async () => {\n      mockIsRedisAvailable.mockRejectedValue(new Error('Internal error'));\n\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.10']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API');\n\n      expect(result.allowed).toBe(true);\n      expect(result.error).toContain('Error interno');\n      expect(result.code).toBe('INTERNAL_ERROR');\n      expect(result.source).toBe('error');\n    });\n  });\n\n  describe('Store en Memoria', () => {\n    it('debe proporcionar estadísticas del store', () => {\n      const stats = memoryStore.getStats();\n      \n      expect(stats).toHaveProperty('entries');\n      expect(stats).toHaveProperty('memoryUsage');\n      expect(typeof stats.entries).toBe('number');\n      expect(typeof stats.memoryUsage).toBe('number');\n    });\n\n    it('debe limpiar entradas expiradas', async () => {\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.11']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      // Crear entrada con TTL muy corto\n      await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', { windowMs: 50 });\n\n      // Esperar expiración\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Nueva request debería crear nueva entrada\n      const result = await checkEnterpriseRateLimit(mockRequest, 'ADMIN_API', { windowMs: 60000 });\n      expect(result.remaining).toBe(49); // Contador reseteado\n    });\n  });\n});\n"],"names":["jest","mock","isRedisAvailable","fn","enterpriseRateLimit","redis","pipeline","incr","expire","exec","ping","describe","mockIsRedisAvailable","mockEnterpriseRateLimit","beforeEach","clearAllMocks","memoryStore","clear","metricsCollector","reset","mockResolvedValue","allowed","count","remaining","resetTime","Date","now","it","config","ENTERPRISE_RATE_LIMIT_CONFIGS","CRITICAL_AUTH","expect","windowMs","toBe","maxRequests","enableRedis","enableMetrics","message","toContain","ADMIN_API","PAYMENT_API","onLimitReached","toBeDefined","PUBLIC_API","enableLogging","mockRequest","headers","Map","nextUrl","pathname","key","ipKeyGenerator","userKeyGenerator","endpointKeyGenerator","hybridKeyGenerator","requestWithoutUser","result","checkEnterpriseRateLimit","source","toHaveBeenCalled","not","mockRejectedValue","Error","result1","result2","i","retryAfter","customConfig","Promise","resolve","setTimeout","metrics","getMetrics","totalRequests","allowedRequests","memoryFallbacks","blockedRequests","responseTime","toBeGreaterThan","keyGenerated","result3","keyGenerator","error","code","stats","getStats","toHaveProperty","entries","memoryUsage"],"mappings":"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"}