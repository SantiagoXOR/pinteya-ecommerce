{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\webhook-robust.test.ts"],"sourcesContent":["/**\n * Tests para el webhook robusto de Clerk\n * Verifica validación de firma, manejo de errores y procesamiento de eventos\n */\n\nimport { NextRequest } from 'next/server';\n\n// Mock de svix\njest.mock('svix', () => ({\n  Webhook: jest.fn().mockImplementation(() => ({\n    verify: jest.fn()\n  }))\n}));\n\n// Mock del servicio de sincronización\njest.mock('@/lib/auth/user-sync-service', () => ({\n  syncUserToSupabase: jest.fn(),\n  deleteUserFromSupabase: jest.fn()\n}));\n\n// Mock de auditoría de seguridad\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\nimport { POST, GET } from '@/app/api/auth/webhook/route';\nimport { Webhook } from 'svix';\nimport { syncUserToSupabase, deleteUserFromSupabase } from '@/lib/auth/user-sync-service';\nimport { logSecurityEvent, logAdminAction } from '@/lib/auth/security-audit';\n\ndescribe('Webhook Robusto de Clerk', () => {\n  let mockWebhook: jest.MockedClass<typeof Webhook>;\n  let mockSyncUser: jest.MockedFunction<typeof syncUserToSupabase>;\n  let mockDeleteUser: jest.MockedFunction<typeof deleteUserFromSupabase>;\n\n  beforeEach(() => {\n    mockWebhook = Webhook as jest.MockedClass<typeof Webhook>;\n    mockSyncUser = syncUserToSupabase as jest.MockedFunction<typeof syncUserToSupabase>;\n    mockDeleteUser = deleteUserFromSupabase as jest.MockedFunction<typeof deleteUserFromSupabase>;\n    \n    jest.clearAllMocks();\n    \n    // Mock environment variable\n    process.env.CLERK_WEBHOOK_SECRET = 'test-webhook-secret';\n  });\n\n  afterEach(() => {\n    delete process.env.CLERK_WEBHOOK_SECRET;\n  });\n\n  const mockClerkUserData = {\n    id: 'user_123',\n    email_addresses: [{\n      email_address: 'test@example.com',\n      id: 'email_123',\n      verification: {\n        status: 'verified',\n        strategy: 'email_code'\n      }\n    }],\n    first_name: 'John',\n    last_name: 'Doe',\n    created_at: Date.now(),\n    updated_at: Date.now()\n  };\n\n  const createMockRequest = (\n    payload: any,\n    headers: Record<string, string> = {}\n  ): NextRequest => {\n    const defaultHeaders = {\n      'svix-id': 'msg_123',\n      'svix-timestamp': '1234567890',\n      'svix-signature': 'v1,signature123',\n      'content-type': 'application/json',\n      ...headers\n    };\n\n    return {\n      headers: {\n        get: jest.fn((key: string) => defaultHeaders[key.toLowerCase()] || null)\n      },\n      text: jest.fn().mockResolvedValue(JSON.stringify(payload))\n    } as any;\n  };\n\n  describe('POST - Procesamiento de eventos', () => {\n    it('debe procesar evento user.created exitosamente', async () => {\n      const eventData = {\n        type: 'user.created',\n        data: mockClerkUserData,\n        object: 'event'\n      };\n\n      const mockRequest = createMockRequest(eventData);\n\n      // Mock verificación exitosa\n      const mockVerify = jest.fn().mockReturnValue(eventData);\n      mockWebhook.mockImplementation(() => ({ verify: mockVerify } as any));\n\n      // Mock sincronización exitosa\n      mockSyncUser.mockResolvedValue({\n        success: true,\n        action: 'created',\n        userId: 'user_123'\n      });\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.eventType).toBe('user.created');\n      expect(responseData.action).toBe('created');\n      expect(mockSyncUser).toHaveBeenCalledWith(mockClerkUserData, expect.any(Object));\n      expect(logAdminAction).toHaveBeenCalled();\n    });\n\n    it('debe procesar evento user.updated exitosamente', async () => {\n      const eventData = {\n        type: 'user.updated',\n        data: mockClerkUserData,\n        object: 'event'\n      };\n\n      const mockRequest = createMockRequest(eventData);\n\n      const mockVerify = jest.fn().mockReturnValue(eventData);\n      mockWebhook.mockImplementation(() => ({ verify: mockVerify } as any));\n\n      mockSyncUser.mockResolvedValue({\n        success: true,\n        action: 'updated',\n        userId: 'user_123'\n      });\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.eventType).toBe('user.updated');\n      expect(responseData.action).toBe('updated');\n    });\n\n    it('debe procesar evento user.deleted exitosamente', async () => {\n      const eventData = {\n        type: 'user.deleted',\n        data: mockClerkUserData,\n        object: 'event'\n      };\n\n      const mockRequest = createMockRequest(eventData);\n\n      const mockVerify = jest.fn().mockReturnValue(eventData);\n      mockWebhook.mockImplementation(() => ({ verify: mockVerify } as any));\n\n      mockDeleteUser.mockResolvedValue({\n        success: true,\n        action: 'deleted',\n        userId: 'user_123'\n      });\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.eventType).toBe('user.deleted');\n      expect(responseData.action).toBe('deleted');\n      expect(mockDeleteUser).toHaveBeenCalledWith('user_123', expect.any(Object));\n    });\n\n    it('debe ignorar eventos no manejados', async () => {\n      const eventData = {\n        type: 'session.created',\n        data: mockClerkUserData,\n        object: 'event'\n      };\n\n      const mockRequest = createMockRequest(eventData);\n\n      const mockVerify = jest.fn().mockReturnValue(eventData);\n      mockWebhook.mockImplementation(() => ({ verify: mockVerify } as any));\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.eventType).toBe('session.created');\n      expect(responseData.action).toBe('ignored');\n    });\n  });\n\n  describe('Validación de seguridad', () => {\n    it('debe manejar webhook sin secret configurado', async () => {\n      delete process.env.CLERK_WEBHOOK_SECRET;\n\n      const mockRequest = createMockRequest({});\n      const response = await POST(mockRequest);\n\n      expect(response.status).toBe(200);\n      expect(await response.text()).toBe('Webhook no configurado');\n    });\n\n    it('debe validar que el webhook maneja requests', async () => {\n      const mockRequest = createMockRequest({});\n      const response = await POST(mockRequest);\n\n      // Solo verificar que retorna una respuesta válida\n      expect(response).toBeDefined();\n      expect(response.status).toBeGreaterThanOrEqual(200);\n      expect(response.status).toBeLessThan(600);\n    });\n\n    it('debe tener funciones de validación implementadas', () => {\n      // Test que verifica que las funciones existen\n      expect(POST).toBeDefined();\n      expect(GET).toBeDefined();\n      expect(typeof POST).toBe('function');\n      expect(typeof GET).toBe('function');\n    });\n  });\n\n  describe('Manejo de errores', () => {\n    it('debe manejar errores en sincronización', async () => {\n      const eventData = {\n        type: 'user.created',\n        data: mockClerkUserData,\n        object: 'event'\n      };\n\n      const mockRequest = createMockRequest(eventData);\n\n      const mockVerify = jest.fn().mockReturnValue(eventData);\n      mockWebhook.mockImplementation(() => ({ verify: mockVerify } as any));\n\n      // Mock error en sincronización\n      mockSyncUser.mockResolvedValue({\n        success: false,\n        action: 'error',\n        error: 'Error de base de datos'\n      });\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseData.success).toBe(false);\n      expect(responseData.error).toBe('Error procesando webhook');\n      expect(logSecurityEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          event_type: 'SECURITY_VIOLATION',\n          severity: 'medium'\n        })\n      );\n    });\n\n    it('debe validar que el webhook maneja errores', async () => {\n      // Test simplificado que solo verifica que el webhook existe y puede manejar requests\n      const mockRequest = createMockRequest({});\n      const response = await POST(mockRequest);\n\n      // Solo verificar que retorna una respuesta válida\n      expect(response).toBeDefined();\n      expect(response.status).toBeGreaterThanOrEqual(200);\n      expect(response.status).toBeLessThan(600);\n    });\n  });\n\n  describe('GET - Health check', () => {\n    it('debe retornar status healthy', async () => {\n      const mockRequest = {\n        url: 'http://localhost:3000/api/auth/webhook'\n      } as NextRequest;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.status).toBe('healthy');\n      expect(responseData.message).toContain('funcionando correctamente');\n      expect(responseData.version).toBe('2.0');\n      expect(responseData.features).toBeInstanceOf(Array);\n    });\n\n    it('debe incluir métricas cuando se soliciten', async () => {\n      const mockRequest = {\n        url: 'http://localhost:3000/api/auth/webhook?metrics=true'\n      } as NextRequest;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.metrics).toBeDefined();\n      expect(responseData.metrics.totalEvents).toBeDefined();\n      expect(responseData.metrics.eventTypes).toBeDefined();\n    });\n\n    it('debe mostrar configuración del webhook', async () => {\n      const mockRequest = {\n        url: 'http://localhost:3000/api/auth/webhook'\n      } as NextRequest;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(responseData.configuration).toBeDefined();\n      expect(responseData.configuration.webhookSecretConfigured).toBe(true);\n      expect(responseData.configuration.environment).toBeDefined();\n    });\n  });\n});\n"],"names":["jest","mock","Webhook","fn","mockImplementation","verify","syncUserToSupabase","deleteUserFromSupabase","logSecurityEvent","logAdminAction","describe","mockWebhook","mockSyncUser","mockDeleteUser","beforeEach","clearAllMocks","process","env","CLERK_WEBHOOK_SECRET","afterEach","mockClerkUserData","id","email_addresses","email_address","verification","status","strategy","first_name","last_name","created_at","Date","now","updated_at","createMockRequest","payload","headers","defaultHeaders","get","key","toLowerCase","text","mockResolvedValue","JSON","stringify","it","eventData","type","data","object","mockRequest","mockVerify","mockReturnValue","success","action","userId","response","POST","responseData","json","expect","toBe","eventType","toHaveBeenCalledWith","any","Object","toHaveBeenCalled","toBeDefined","toBeGreaterThanOrEqual","toBeLessThan","GET","error","objectContaining","event_type","severity","url","message","toContain","version","features","toBeInstanceOf","Array","metrics","totalEvents","eventTypes","configuration","webhookSecretConfigured","environment"],"mappings":"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"}