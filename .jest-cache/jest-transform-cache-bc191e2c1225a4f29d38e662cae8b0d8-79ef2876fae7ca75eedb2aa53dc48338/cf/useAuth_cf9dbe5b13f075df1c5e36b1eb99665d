bccff63b79ff0d891c6b9d8e5d1a8106
/**
 * Hook de Autenticaci칩n para NextAuth.js
 * Reemplaza los hooks de Clerk con NextAuth.js
 */ "use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useAuth () {
        return useAuth;
    },
    get useIsAdmin () {
        return useIsAdmin;
    },
    get useRequireAuth () {
        return useRequireAuth;
    }
});
const _react = require("next-auth/react");
const _navigation = require("next/navigation");
const _react1 = require("react");
function useAuth() {
    const { data: session, status } = (0, _react.useSession)();
    const router = (0, _navigation.useRouter)();
    const handleSignIn = (0, _react1.useCallback)(async (provider = "google", options)=>{
        try {
            await (0, _react.signIn)(provider, {
                callbackUrl: options?.callbackUrl || "/admin",
                redirect: true
            });
        } catch (error) {
            console.error("Error al iniciar sesi칩n:", error);
        }
    }, []);
    const handleSignOut = (0, _react1.useCallback)(async (options)=>{
        try {
            await (0, _react.signOut)({
                callbackUrl: options?.callbackUrl || "/",
                redirect: true
            });
        } catch (error) {
            console.error("Error al cerrar sesi칩n:", error);
        }
    }, []);
    // Mapear usuario de NextAuth a nuestro formato
    const user = session?.user ? {
        id: session.user.id || session.user.email || '',
        name: session.user.name,
        email: session.user.email,
        image: session.user.image
    } : null;
    return {
        user,
        isLoaded: status !== "loading",
        isSignedIn: status === "authenticated",
        signIn: handleSignIn,
        signOut: handleSignOut,
        session,
        status
    };
}
function useIsAdmin() {
    const { user, isSignedIn } = useAuth();
    // Por ahora, todos los usuarios autenticados son admin
    // TODO: Implementar sistema de roles m치s granular
    return isSignedIn && !!user;
}
function useRequireAuth(redirectTo = "/api/auth/signin") {
    const { isSignedIn, isLoaded } = useAuth();
    const router = (0, _navigation.useRouter)();
    if (isLoaded && !isSignedIn) {
        router.push(redirectTo);
    }
    return {
        isSignedIn,
        isLoaded
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZUF1dGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIb29rIGRlIEF1dGVudGljYWNpw7NuIHBhcmEgTmV4dEF1dGguanNcbiAqIFJlZW1wbGF6YSBsb3MgaG9va3MgZGUgQ2xlcmsgY29uIE5leHRBdXRoLmpzXG4gKi9cblxuXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0IHsgdXNlU2Vzc2lvbiwgc2lnbkluLCBzaWduT3V0IH0gZnJvbSBcIm5leHQtYXV0aC9yZWFjdFwiXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9uYXZpZ2F0aW9uXCJcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCJcblxuZXhwb3J0IGludGVyZmFjZSBBdXRoVXNlciB7XG4gIGlkOiBzdHJpbmdcbiAgbmFtZT86IHN0cmluZyB8IG51bGxcbiAgZW1haWw/OiBzdHJpbmcgfCBudWxsXG4gIGltYWdlPzogc3RyaW5nIHwgbnVsbFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUF1dGhSZXR1cm4ge1xuICAvLyBFc3RhZG8gZGUgYXV0ZW50aWNhY2nDs25cbiAgdXNlcjogQXV0aFVzZXIgfCBudWxsXG4gIGlzTG9hZGVkOiBib29sZWFuXG4gIGlzU2lnbmVkSW46IGJvb2xlYW5cbiAgXG4gIC8vIEZ1bmNpb25lcyBkZSBhdXRlbnRpY2FjacOzblxuICBzaWduSW46IChwcm92aWRlcj86IHN0cmluZywgb3B0aW9ucz86IHsgY2FsbGJhY2tVcmw/OiBzdHJpbmcgfSkgPT4gUHJvbWlzZTx2b2lkPlxuICBzaWduT3V0OiAob3B0aW9ucz86IHsgY2FsbGJhY2tVcmw/OiBzdHJpbmcgfSkgPT4gUHJvbWlzZTx2b2lkPlxuICBcbiAgLy8gSW5mb3JtYWNpw7NuIGRlIHNlc2nDs25cbiAgc2Vzc2lvbjogYW55XG4gIHN0YXR1czogXCJsb2FkaW5nXCIgfCBcImF1dGhlbnRpY2F0ZWRcIiB8IFwidW5hdXRoZW50aWNhdGVkXCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dGgoKTogVXNlQXV0aFJldHVybiB7XG4gIGNvbnN0IHsgZGF0YTogc2Vzc2lvbiwgc3RhdHVzIH0gPSB1c2VTZXNzaW9uKClcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcblxuICBjb25zdCBoYW5kbGVTaWduSW4gPSB1c2VDYWxsYmFjayhhc3luYyAocHJvdmlkZXI6IHN0cmluZyA9IFwiZ29vZ2xlXCIsIG9wdGlvbnM/OiB7IGNhbGxiYWNrVXJsPzogc3RyaW5nIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2lnbkluKHByb3ZpZGVyLCB7XG4gICAgICAgIGNhbGxiYWNrVXJsOiBvcHRpb25zPy5jYWxsYmFja1VybCB8fCBcIi9hZG1pblwiLFxuICAgICAgICByZWRpcmVjdDogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBpbmljaWFyIHNlc2nDs246XCIsIGVycm9yKVxuICAgIH1cbiAgfSwgW10pXG5cbiAgY29uc3QgaGFuZGxlU2lnbk91dCA9IHVzZUNhbGxiYWNrKGFzeW5jIChvcHRpb25zPzogeyBjYWxsYmFja1VybD86IHN0cmluZyB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHNpZ25PdXQoe1xuICAgICAgICBjYWxsYmFja1VybDogb3B0aW9ucz8uY2FsbGJhY2tVcmwgfHwgXCIvXCIsXG4gICAgICAgIHJlZGlyZWN0OiB0cnVlLFxuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNlcnJhciBzZXNpw7NuOlwiLCBlcnJvcilcbiAgICB9XG4gIH0sIFtdKVxuXG4gIC8vIE1hcGVhciB1c3VhcmlvIGRlIE5leHRBdXRoIGEgbnVlc3RybyBmb3JtYXRvXG4gIGNvbnN0IHVzZXI6IEF1dGhVc2VyIHwgbnVsbCA9IHNlc3Npb24/LnVzZXIgPyB7XG4gICAgaWQ6IHNlc3Npb24udXNlci5pZCB8fCBzZXNzaW9uLnVzZXIuZW1haWwgfHwgJycsXG4gICAgbmFtZTogc2Vzc2lvbi51c2VyLm5hbWUsXG4gICAgZW1haWw6IHNlc3Npb24udXNlci5lbWFpbCxcbiAgICBpbWFnZTogc2Vzc2lvbi51c2VyLmltYWdlLFxuICB9IDogbnVsbFxuXG4gIHJldHVybiB7XG4gICAgdXNlcixcbiAgICBpc0xvYWRlZDogc3RhdHVzICE9PSBcImxvYWRpbmdcIixcbiAgICBpc1NpZ25lZEluOiBzdGF0dXMgPT09IFwiYXV0aGVudGljYXRlZFwiLFxuICAgIHNpZ25JbjogaGFuZGxlU2lnbkluLFxuICAgIHNpZ25PdXQ6IGhhbmRsZVNpZ25PdXQsXG4gICAgc2Vzc2lvbixcbiAgICBzdGF0dXMsXG4gIH1cbn1cblxuLy8gSG9vayBwYXJhIHZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIGVzIGFkbWluaXN0cmFkb3JcbmV4cG9ydCBmdW5jdGlvbiB1c2VJc0FkbWluKCk6IGJvb2xlYW4ge1xuICBjb25zdCB7IHVzZXIsIGlzU2lnbmVkSW4gfSA9IHVzZUF1dGgoKVxuICBcbiAgLy8gUG9yIGFob3JhLCB0b2RvcyBsb3MgdXN1YXJpb3MgYXV0ZW50aWNhZG9zIHNvbiBhZG1pblxuICAvLyBUT0RPOiBJbXBsZW1lbnRhciBzaXN0ZW1hIGRlIHJvbGVzIG3DoXMgZ3JhbnVsYXJcbiAgcmV0dXJuIGlzU2lnbmVkSW4gJiYgISF1c2VyXG59XG5cbi8vIEhvb2sgcGFyYSBwcm90ZWdlciBydXRhc1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlcXVpcmVBdXRoKHJlZGlyZWN0VG86IHN0cmluZyA9IFwiL2FwaS9hdXRoL3NpZ25pblwiKSB7XG4gIGNvbnN0IHsgaXNTaWduZWRJbiwgaXNMb2FkZWQgfSA9IHVzZUF1dGgoKVxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKVxuXG4gIGlmIChpc0xvYWRlZCAmJiAhaXNTaWduZWRJbikge1xuICAgIHJvdXRlci5wdXNoKHJlZGlyZWN0VG8pXG4gIH1cblxuICByZXR1cm4geyBpc1NpZ25lZEluLCBpc0xvYWRlZCB9XG59XG4iXSwibmFtZXMiOlsidXNlQXV0aCIsInVzZUlzQWRtaW4iLCJ1c2VSZXF1aXJlQXV0aCIsImRhdGEiLCJzZXNzaW9uIiwic3RhdHVzIiwidXNlU2Vzc2lvbiIsInJvdXRlciIsInVzZVJvdXRlciIsImhhbmRsZVNpZ25JbiIsInVzZUNhbGxiYWNrIiwicHJvdmlkZXIiLCJvcHRpb25zIiwic2lnbkluIiwiY2FsbGJhY2tVcmwiLCJyZWRpcmVjdCIsImVycm9yIiwiY29uc29sZSIsImhhbmRsZVNpZ25PdXQiLCJzaWduT3V0IiwidXNlciIsImlkIiwiZW1haWwiLCJuYW1lIiwiaW1hZ2UiLCJpc0xvYWRlZCIsImlzU2lnbmVkSW4iLCJyZWRpcmVjdFRvIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDLEdBRUQ7Ozs7Ozs7Ozs7OztRQTRCZ0JBO2VBQUFBOztRQThDQUM7ZUFBQUE7O1FBU0FDO2VBQUFBOzs7dUJBakY0Qjs0QkFDbEI7d0JBQ0U7QUF3QnJCLFNBQVNGO0lBQ2QsTUFBTSxFQUFFRyxNQUFNQyxPQUFPLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVTtJQUM1QyxNQUFNQyxTQUFTQyxJQUFBQSxxQkFBUztJQUV4QixNQUFNQyxlQUFlQyxJQUFBQSxtQkFBVyxFQUFDLE9BQU9DLFdBQW1CLFFBQVEsRUFBRUM7UUFDbkUsSUFBSTtZQUNGLE1BQU1DLElBQUFBLGFBQU0sRUFBQ0YsVUFBVTtnQkFDckJHLGFBQWFGLFNBQVNFLGVBQWU7Z0JBQ3JDQyxVQUFVO1lBQ1o7UUFDRixFQUFFLE9BQU9DLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDRCQUE0QkE7UUFDNUM7SUFDRixHQUFHLEVBQUU7SUFFTCxNQUFNRSxnQkFBZ0JSLElBQUFBLG1CQUFXLEVBQUMsT0FBT0U7UUFDdkMsSUFBSTtZQUNGLE1BQU1PLElBQUFBLGNBQU8sRUFBQztnQkFDWkwsYUFBYUYsU0FBU0UsZUFBZTtnQkFDckNDLFVBQVU7WUFDWjtRQUNGLEVBQUUsT0FBT0MsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsMkJBQTJCQTtRQUMzQztJQUNGLEdBQUcsRUFBRTtJQUVMLCtDQUErQztJQUMvQyxNQUFNSSxPQUF3QmhCLFNBQVNnQixPQUFPO1FBQzVDQyxJQUFJakIsUUFBUWdCLElBQUksQ0FBQ0MsRUFBRSxJQUFJakIsUUFBUWdCLElBQUksQ0FBQ0UsS0FBSyxJQUFJO1FBQzdDQyxNQUFNbkIsUUFBUWdCLElBQUksQ0FBQ0csSUFBSTtRQUN2QkQsT0FBT2xCLFFBQVFnQixJQUFJLENBQUNFLEtBQUs7UUFDekJFLE9BQU9wQixRQUFRZ0IsSUFBSSxDQUFDSSxLQUFLO0lBQzNCLElBQUk7SUFFSixPQUFPO1FBQ0xKO1FBQ0FLLFVBQVVwQixXQUFXO1FBQ3JCcUIsWUFBWXJCLFdBQVc7UUFDdkJRLFFBQVFKO1FBQ1JVLFNBQVNEO1FBQ1RkO1FBQ0FDO0lBQ0Y7QUFDRjtBQUdPLFNBQVNKO0lBQ2QsTUFBTSxFQUFFbUIsSUFBSSxFQUFFTSxVQUFVLEVBQUUsR0FBRzFCO0lBRTdCLHVEQUF1RDtJQUN2RCxrREFBa0Q7SUFDbEQsT0FBTzBCLGNBQWMsQ0FBQyxDQUFDTjtBQUN6QjtBQUdPLFNBQVNsQixlQUFleUIsYUFBcUIsa0JBQWtCO0lBQ3BFLE1BQU0sRUFBRUQsVUFBVSxFQUFFRCxRQUFRLEVBQUUsR0FBR3pCO0lBQ2pDLE1BQU1PLFNBQVNDLElBQUFBLHFCQUFTO0lBRXhCLElBQUlpQixZQUFZLENBQUNDLFlBQVk7UUFDM0JuQixPQUFPcUIsSUFBSSxDQUFDRDtJQUNkO0lBRUEsT0FBTztRQUFFRDtRQUFZRDtJQUFTO0FBQ2hDIn0=