58a413585149d26d34312dd8d99cf624
// ===================================
// PINTEYA E-COMMERCE - FUNCIONES DE API PARA CATEGORÍAS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get formatCategoryName () {
        return formatCategoryName;
    },
    get getCategories () {
        return getCategories;
    },
    get getCategoriesHierarchy () {
        return getCategoriesHierarchy;
    },
    get getCategoryBreadcrumb () {
        return getCategoryBreadcrumb;
    },
    get getCategoryBySlug () {
        return getCategoryBySlug;
    },
    get getCategoryImage () {
        return getCategoryImage;
    },
    get getCategoryUrl () {
        return getCategoryUrl;
    },
    get getMainCategories () {
        return getMainCategories;
    },
    get getSubcategories () {
        return getSubcategories;
    },
    get hasSubcategories () {
        return hasSubcategories;
    },
    get searchCategories () {
        return searchCategories;
    }
});
async function getCategories(filters) {
    try {
        const searchParams = new URLSearchParams();
        if (filters) {
            Object.entries(filters).forEach(([key, value])=>{
                if (value !== undefined && value !== null) {
                    searchParams.append(key, value.toString());
                }
            });
        }
        const response = await fetch(`/api/categories?${searchParams.toString()}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }
        return await response.json();
    } catch (error) {
        console.error('Error obteniendo categorías:', error);
        throw error;
    }
}
async function getMainCategories() {
    try {
        const response = await getCategories();
        return response.data || [];
    } catch (error) {
        console.error('Error obteniendo categorías:', error);
        return [];
    }
}
async function getSubcategories(parentId) {
    // Nota: La tabla categories actual no soporta jerarquías (no tiene parent_id)
    // Retornamos array vacío por ahora
    console.warn('getSubcategories: La tabla categories no soporta jerarquías');
    return [];
}
async function searchCategories(searchTerm) {
    try {
        const response = await getCategories({
            search: searchTerm
        });
        return response.data || [];
    } catch (error) {
        console.error('Error buscando categorías:', error);
        return [];
    }
}
async function getCategoriesHierarchy() {
    try {
        const response = await fetch('/api/categories/hierarchy', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (!response.ok) {
            // Si no existe el endpoint de jerarquía, construirla manualmente
            return await buildCategoriesHierarchy();
        }
        const data = await response.json();
        return data.data || [];
    } catch (error) {
        console.error('Error obteniendo jerarquía de categorías:', error);
        return await buildCategoriesHierarchy();
    }
}
/**
 * Construye la jerarquía de categorías manualmente
 * @returns Promise<CategoryHierarchy[]>
 */ async function buildCategoriesHierarchy() {
    try {
        const response = await getCategories();
        const categories = response.data || [];
        // Como no hay parent_id, todas las categorías son de nivel raíz
        const rootCategories = categories.map((category)=>({
                ...category,
                children: []
            }));
        return rootCategories;
    } catch (error) {
        console.error('Error construyendo jerarquía de categorías:', error);
        return [];
    }
}
async function getCategoryBySlug(slug, categories) {
    try {
        if (!categories) {
            const response = await getCategories();
            categories = response.data || [];
        }
        return categories.find((category)=>category.slug === slug) || null;
    } catch (error) {
        console.error(`Error obteniendo categoría por slug ${slug}:`, error);
        return null;
    }
}
async function getCategoryBreadcrumb(categoryId, categories) {
    try {
        if (!categories) {
            const response = await getCategories();
            categories = response.data || [];
        }
        // Como no hay jerarquías, el breadcrumb solo incluye la categoría actual
        const currentCategory = categories.find((cat)=>cat.id === categoryId);
        return currentCategory ? [
            currentCategory
        ] : [];
    } catch (error) {
        console.error(`Error obteniendo breadcrumb de categoría ${categoryId}:`, error);
        return [];
    }
}
async function hasSubcategories(categoryId, categories) {
    // Como no hay jerarquías, ninguna categoría tiene subcategorías
    return false;
}
function formatCategoryName(category) {
    return category.name.charAt(0).toUpperCase() + category.name.slice(1).toLowerCase();
}
function getCategoryUrl(category) {
    return `/shop?category=${category.slug}`;
}
function getCategoryImage(category) {
    return category && category.icon ? category.icon : '/images/categories/default.jpg';
}

//# sourceMappingURL=data:application/json;base64,