{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\categories.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - FUNCIONES DE API PARA CATEGORÍAS\n// ===================================\n\nimport { CategoryFilters, ApiResponse } from '@/types/api';\nimport { Category } from '@/types/database';\n\n// ===================================\n// FUNCIONES PARA EL FRONTEND\n// ===================================\n\n/**\n * Obtiene todas las categorías desde la API\n * @param filters - Filtros de categorías\n * @returns Promise<ApiResponse<Category[]>>\n */\nexport async function getCategories(filters?: CategoryFilters): Promise<ApiResponse<Category[]>> {\n  try {\n    const searchParams = new URLSearchParams();\n    \n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const response = await fetch(`/api/categories?${searchParams.toString()}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error obteniendo categorías:', error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene todas las categorías (simplificado para la estructura actual)\n * @returns Promise<Category[]>\n */\nexport async function getMainCategories(): Promise<Category[]> {\n  try {\n    const response = await getCategories();\n    return response.data || [];\n  } catch (error) {\n    console.error('Error obteniendo categorías:', error);\n    return [];\n  }\n}\n\n/**\n * Obtiene subcategorías de una categoría padre\n * @param parentId - ID de la categoría padre\n * @returns Promise<Category[]>\n */\nexport async function getSubcategories(parentId: number): Promise<Category[]> {\n  // Nota: La tabla categories actual no soporta jerarquías (no tiene parent_id)\n  // Retornamos array vacío por ahora\n  console.warn('getSubcategories: La tabla categories no soporta jerarquías');\n  return [];\n}\n\n/**\n * Busca categorías por nombre\n * @param searchTerm - Término de búsqueda\n * @returns Promise<Category[]>\n */\nexport async function searchCategories(searchTerm: string): Promise<Category[]> {\n  try {\n    const response = await getCategories({ search: searchTerm });\n    return response.data || [];\n  } catch (error) {\n    console.error('Error buscando categorías:', error);\n    return [];\n  }\n}\n\n/**\n * Obtiene la jerarquía completa de categorías\n * @returns Promise<CategoryHierarchy[]>\n */\nexport async function getCategoriesHierarchy(): Promise<CategoryHierarchy[]> {\n  try {\n    const response = await fetch('/api/categories/hierarchy', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      // Si no existe el endpoint de jerarquía, construirla manualmente\n      return await buildCategoriesHierarchy();\n    }\n\n    const data = await response.json();\n    return data.data || [];\n  } catch (error) {\n    console.error('Error obteniendo jerarquía de categorías:', error);\n    return await buildCategoriesHierarchy();\n  }\n}\n\n// ===================================\n// FUNCIONES AUXILIARES\n// ===================================\n\nexport interface CategoryHierarchy extends Category {\n  children: CategoryHierarchy[];\n}\n\n/**\n * Construye la jerarquía de categorías manualmente\n * @returns Promise<CategoryHierarchy[]>\n */\nasync function buildCategoriesHierarchy(): Promise<CategoryHierarchy[]> {\n  try {\n    const response = await getCategories();\n    const categories = response.data || [];\n\n    // Como no hay parent_id, todas las categorías son de nivel raíz\n    const rootCategories: CategoryHierarchy[] = categories.map(category => ({\n      ...category,\n      children: []\n    }));\n\n    return rootCategories;\n  } catch (error) {\n    console.error('Error construyendo jerarquía de categorías:', error);\n    return [];\n  }\n}\n\n/**\n * Encuentra una categoría por slug\n * @param slug - Slug de la categoría\n * @param categories - Lista de categorías (opcional)\n * @returns Promise<Category | null>\n */\nexport async function getCategoryBySlug(\n  slug: string,\n  categories?: Category[]\n): Promise<Category | null> {\n  try {\n    if (!categories) {\n      const response = await getCategories();\n      categories = response.data || [];\n    }\n\n    return categories.find(category => category.slug === slug) || null;\n  } catch (error) {\n    console.error(`Error obteniendo categoría por slug ${slug}:`, error);\n    return null;\n  }\n}\n\n/**\n * Obtiene el breadcrumb de una categoría\n * @param categoryId - ID de la categoría\n * @param categories - Lista de categorías (opcional)\n * @returns Promise<Category[]>\n */\nexport async function getCategoryBreadcrumb(\n  categoryId: number,\n  categories?: Category[]\n): Promise<Category[]> {\n  try {\n    if (!categories) {\n      const response = await getCategories();\n      categories = response.data || [];\n    }\n\n    // Como no hay jerarquías, el breadcrumb solo incluye la categoría actual\n    const currentCategory = categories.find(cat => cat.id === categoryId);\n    return currentCategory ? [currentCategory] : [];\n  } catch (error) {\n    console.error(`Error obteniendo breadcrumb de categoría ${categoryId}:`, error);\n    return [];\n  }\n}\n\n/**\n * Verifica si una categoría tiene subcategorías\n * @param categoryId - ID de la categoría\n * @param categories - Lista de categorías (opcional)\n * @returns Promise<boolean>\n */\nexport async function hasSubcategories(\n  categoryId: number,\n  categories?: Category[]\n): Promise<boolean> {\n  // Como no hay jerarquías, ninguna categoría tiene subcategorías\n  return false;\n}\n\n/**\n * Formatea el nombre de la categoría para mostrar\n * @param category - Categoría\n * @returns string\n */\nexport function formatCategoryName(category: Category): string {\n  return category.name.charAt(0).toUpperCase() + category.name.slice(1).toLowerCase();\n}\n\n/**\n * Genera la URL de la categoría\n * @param category - Categoría\n * @returns string\n */\nexport function getCategoryUrl(category: Category): string {\n  return `/shop?category=${category.slug}`;\n}\n\n/**\n * Obtiene la imagen de la categoría o una por defecto\n * @param category - Categoría\n * @returns string\n */\nexport function getCategoryImage(category: Category): string {\n  return (category && category.icon) ? category.icon : '/images/categories/default.jpg';\n}\n"],"names":["formatCategoryName","getCategories","getCategoriesHierarchy","getCategoryBreadcrumb","getCategoryBySlug","getCategoryImage","getCategoryUrl","getMainCategories","getSubcategories","hasSubcategories","searchCategories","filters","searchParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","method","headers","ok","Error","status","statusText","json","error","console","data","parentId","warn","searchTerm","search","buildCategoriesHierarchy","categories","rootCategories","map","category","children","slug","find","categoryId","currentCategory","cat","id","name","charAt","toUpperCase","slice","toLowerCase","icon"],"mappings":"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"}