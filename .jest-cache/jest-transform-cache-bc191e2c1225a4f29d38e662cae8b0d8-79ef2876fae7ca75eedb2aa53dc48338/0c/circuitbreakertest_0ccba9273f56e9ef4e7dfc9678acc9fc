07ec992b4b88524436b1b93906988c23
// ===================================
// PINTEYA E-COMMERCE - CIRCUIT BREAKER TESTS
// ===================================
"use strict";
// Mock logger
jest.mock('@/lib/logger', ()=>({
        logger: {
            debug: jest.fn(),
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn()
        },
        LogLevel: {
            DEBUG: 'debug',
            INFO: 'info',
            WARN: 'warn',
            ERROR: 'error'
        },
        LogCategory: {
            SYSTEM: 'system'
        }
    }));
// Mock metrics collector
jest.mock('@/lib/metrics', ()=>({
        metricsCollector: {
            recordMetric: jest.fn().mockResolvedValue(undefined)
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _circuitbreaker = require("../../lib/mercadopago/circuit-breaker");
describe('Circuit Breaker Enterprise', ()=>{
    let circuitBreaker;
    beforeEach(()=>{
        jest.clearAllMocks();
        circuitBreaker = new _circuitbreaker.CircuitBreaker('test', {
            failureThreshold: 3,
            recoveryTimeout: 1000,
            monitoringWindow: 5000,
            halfOpenMaxCalls: 2,
            successThreshold: 1
        });
    });
    describe('Estado CLOSED', ()=>{
        test('debe ejecutar operaciones exitosas normalmente', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('success');
            const result = await circuitBreaker.execute(mockOperation);
            expect(result.success).toBe(true);
            expect(result.data).toBe('success');
            expect(result.state).toBe(_circuitbreaker.CircuitBreakerState.CLOSED);
            expect(result.wasRejected).toBe(false);
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
        test('debe manejar fallos sin cambiar de estado si no alcanza el umbral', async ()=>{
            const mockOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            // Primer fallo
            const result1 = await circuitBreaker.execute(mockOperation);
            expect(result1.success).toBe(false);
            expect(result1.state).toBe(_circuitbreaker.CircuitBreakerState.CLOSED);
            // Segundo fallo
            const result2 = await circuitBreaker.execute(mockOperation);
            expect(result2.success).toBe(false);
            expect(result2.state).toBe(_circuitbreaker.CircuitBreakerState.CLOSED);
            expect(mockOperation).toHaveBeenCalledTimes(2);
        });
        test('debe cambiar a OPEN cuando alcanza el umbral de fallos', async ()=>{
            const mockOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            // Ejecutar hasta alcanzar el umbral (3 fallos)
            await circuitBreaker.execute(mockOperation);
            await circuitBreaker.execute(mockOperation);
            const result = await circuitBreaker.execute(mockOperation);
            expect(result.success).toBe(false);
            expect(result.state).toBe(_circuitbreaker.CircuitBreakerState.OPEN);
            expect(mockOperation).toHaveBeenCalledTimes(3);
        });
    });
    describe('Estado OPEN', ()=>{
        beforeEach(async ()=>{
            // Forzar el circuit breaker a estado OPEN
            const mockOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            await circuitBreaker.execute(mockOperation);
            await circuitBreaker.execute(mockOperation);
            await circuitBreaker.execute(mockOperation);
        });
        test('debe rechazar operaciones inmediatamente', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('success');
            const result = await circuitBreaker.execute(mockOperation);
            expect(result.success).toBe(false);
            expect(result.wasRejected).toBe(true);
            expect(result.state).toBe(_circuitbreaker.CircuitBreakerState.OPEN);
            expect(mockOperation).not.toHaveBeenCalled();
        });
        test('debe transicionar a HALF_OPEN después del timeout de recuperación', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('success');
            // Esperar el timeout de recuperación
            await new Promise((resolve)=>setTimeout(resolve, 1100));
            const result = await circuitBreaker.execute(mockOperation);
            expect(result.success).toBe(true);
            expect(result.state).toBe(_circuitbreaker.CircuitBreakerState.HALF_OPEN);
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
    });
    describe('Estado HALF_OPEN', ()=>{
        beforeEach(async ()=>{
            // Forzar a estado OPEN y luego esperar timeout
            const mockOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            await circuitBreaker.execute(mockOperation);
            await circuitBreaker.execute(mockOperation);
            await circuitBreaker.execute(mockOperation);
            // Esperar timeout de recuperación
            await new Promise((resolve)=>setTimeout(resolve, 1100));
        });
        test('debe permitir llamadas limitadas', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('success');
            // Primera llamada exitosa
            const result1 = await circuitBreaker.execute(mockOperation);
            expect(result1.success).toBe(true);
            expect(result1.state).toBe(_circuitbreaker.CircuitBreakerState.CLOSED); // Se cierra inmediatamente con 1 éxito
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
        test('debe volver a OPEN si falla una operación', async ()=>{
            const mockOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            const result = await circuitBreaker.execute(mockOperation);
            expect(result.success).toBe(false);
            expect(result.state).toBe(_circuitbreaker.CircuitBreakerState.OPEN);
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
        test('debe rechazar llamadas que excedan el límite', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('success');
            // Primera llamada exitosa (cierra el circuito)
            await circuitBreaker.execute(mockOperation);
            // Forzar de vuelta a HALF_OPEN para probar límite
            circuitBreaker.reset();
            const failOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            await circuitBreaker.execute(failOperation);
            await circuitBreaker.execute(failOperation);
            await circuitBreaker.execute(failOperation);
            await new Promise((resolve)=>setTimeout(resolve, 1100));
            // Ahora en HALF_OPEN, probar límite de llamadas
            await circuitBreaker.execute(mockOperation); // 1ra llamada
            await circuitBreaker.execute(mockOperation); // 2da llamada (límite)
            const result = await circuitBreaker.execute(mockOperation); // 3ra llamada (rechazada)
            expect(result.wasRejected).toBe(true);
        });
    });
    describe('Métricas', ()=>{
        test('debe registrar métricas correctamente', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('success');
            await circuitBreaker.execute(mockOperation);
            const metrics = circuitBreaker.getMetrics();
            expect(metrics.totalCalls).toBe(1);
            expect(metrics.successfulCalls).toBe(1);
            expect(metrics.failedCalls).toBe(0);
            expect(metrics.rejectedCalls).toBe(0);
        });
        test('debe actualizar métricas en fallos', async ()=>{
            const mockOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            await circuitBreaker.execute(mockOperation);
            const metrics = circuitBreaker.getMetrics();
            expect(metrics.totalCalls).toBe(1);
            expect(metrics.successfulCalls).toBe(0);
            expect(metrics.failedCalls).toBe(1);
            expect(metrics.rejectedCalls).toBe(0);
        });
    });
    describe('Configuraciones predefinidas', ()=>{
        test('debe tener configuración para MercadoPago crítico', ()=>{
            const config = _circuitbreaker.CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_CRITICAL;
            expect(config.failureThreshold).toBe(5);
            expect(config.recoveryTimeout).toBe(60000);
            expect(config.monitoringWindow).toBe(120000);
            expect(config.halfOpenMaxCalls).toBe(3);
            expect(config.successThreshold).toBe(2);
        });
        test('debe tener configuración para MercadoPago estándar', ()=>{
            const config = _circuitbreaker.CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_STANDARD;
            expect(config.failureThreshold).toBe(3);
            expect(config.recoveryTimeout).toBe(30000);
            expect(config.monitoringWindow).toBe(60000);
            expect(config.halfOpenMaxCalls).toBe(2);
            expect(config.successThreshold).toBe(1);
        });
        test('debe tener configuración para procesamiento de webhooks', ()=>{
            const config = _circuitbreaker.CIRCUIT_BREAKER_CONFIGS.WEBHOOK_PROCESSING;
            expect(config.failureThreshold).toBe(10);
            expect(config.recoveryTimeout).toBe(15000);
            expect(config.monitoringWindow).toBe(30000);
            expect(config.halfOpenMaxCalls).toBe(5);
            expect(config.successThreshold).toBe(3);
        });
    });
    describe('Wrappers de conveniencia', ()=>{
        test('executeMercadoPagoCritical debe usar el circuit breaker correcto', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('critical success');
            const result = await (0, _circuitbreaker.executeMercadoPagoCritical)(mockOperation);
            expect(result.success).toBe(true);
            expect(result.data).toBe('critical success');
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
        test('executeMercadoPagoStandard debe usar el circuit breaker correcto', async ()=>{
            const mockOperation = jest.fn().mockResolvedValue('standard success');
            const result = await (0, _circuitbreaker.executeMercadoPagoStandard)(mockOperation);
            expect(result.success).toBe(true);
            expect(result.data).toBe('standard success');
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
    });
    describe('Reset manual', ()=>{
        test('debe resetear el circuit breaker a estado CLOSED', async ()=>{
            // Forzar a estado OPEN
            const mockOperation = jest.fn().mockRejectedValue(new Error('Test error'));
            await circuitBreaker.execute(mockOperation);
            await circuitBreaker.execute(mockOperation);
            await circuitBreaker.execute(mockOperation);
            expect(circuitBreaker.getState()).toBe(_circuitbreaker.CircuitBreakerState.OPEN);
            // Reset manual
            circuitBreaker.reset();
            expect(circuitBreaker.getState()).toBe(_circuitbreaker.CircuitBreakerState.CLOSED);
            const metrics = circuitBreaker.getMetrics();
            expect(metrics.lastFailureTime).toBe(0);
            expect(metrics.lastSuccessTime).toBe(0);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,