6a8ce4bf286dbc62ea665b034261f52b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const CustomSelect = ({ options, onChange })=>{
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    const [selectedOption, setSelectedOption] = (0, _react.useState)(options[0]);
    const selectRef = (0, _react.useRef)(null);
    // Function to close the dropdown when a click occurs outside the component
    const handleClickOutside = (0, _react.useCallback)((event)=>{
        if (selectRef.current && event.target && !selectRef.current.contains(event.target)) {
            setIsOpen(false);
        }
    }, []);
    (0, _react.useEffect)(()=>{
        // Add a click event listener to the document
        document.addEventListener("click", handleClickOutside);
        // Clean up the event listener when the component unmounts
        return ()=>{
            document.removeEventListener("click", handleClickOutside);
        };
    }, [
        handleClickOutside
    ]);
    const toggleDropdown = (0, _react.useCallback)(()=>{
        setIsOpen((prev)=>!prev);
    }, []);
    const handleOptionClick = (0, _react.useCallback)((option)=>{
        setSelectedOption(option);
        setIsOpen(false);
        // Call onChange if it's defined
        if (onChange) {
            onChange(option.value);
        }
    }, [
        onChange
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "custom-select custom-select-2 flex-shrink-0 relative",
        ref: selectRef,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `select-selected whitespace-nowrap ${isOpen ? "select-arrow-active" : ""}`,
                onClick: toggleDropdown,
                children: selectedOption.label
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `select-items ${isOpen ? "" : "select-hide"}`,
                children: options.slice(1).map((option, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        onClick: ()=>handleOptionClick(option),
                        className: `select-item ${selectedOption === option ? "same-as-selected" : ""}`,
                        children: option.label
                    }, index))
            })
        ]
    });
};
const _default = CustomSelect;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcU2hvcFdpdGhTaWRlYmFyXFxDdXN0b21TZWxlY3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IEN1c3RvbVNlbGVjdCA9ICh7IG9wdGlvbnMsIG9uQ2hhbmdlIH06IHsgb3B0aW9uczogYW55W107IG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZCB9KSA9PiB7XG4gIGNvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzZWxlY3RlZE9wdGlvbiwgc2V0U2VsZWN0ZWRPcHRpb25dID0gdXNlU3RhdGUob3B0aW9uc1swXSk7XG4gIGNvbnN0IHNlbGVjdFJlZiA9IHVzZVJlZjxhbnk+KG51bGwpO1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGNsb3NlIHRoZSBkcm9wZG93biB3aGVuIGEgY2xpY2sgb2NjdXJzIG91dHNpZGUgdGhlIGNvbXBvbmVudFxuICBjb25zdCBoYW5kbGVDbGlja091dHNpZGUgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBpZiAoc2VsZWN0UmVmLmN1cnJlbnQgJiYgZXZlbnQudGFyZ2V0ICYmICFzZWxlY3RSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcbiAgICAgIHNldElzT3BlbihmYWxzZSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBBZGQgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byB0aGUgZG9jdW1lbnRcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlQ2xpY2tPdXRzaWRlKTtcblxuICAgIC8vIENsZWFuIHVwIHRoZSBldmVudCBsaXN0ZW5lciB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHNcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrT3V0c2lkZSk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsaWNrT3V0c2lkZV0pO1xuXG4gIGNvbnN0IHRvZ2dsZURyb3Bkb3duID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzT3BlbigocHJldikgPT4gIXByZXYpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlT3B0aW9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAob3B0aW9uOiBhbnkpID0+IHtcbiAgICAgIHNldFNlbGVjdGVkT3B0aW9uKG9wdGlvbik7XG4gICAgICBzZXRJc09wZW4oZmFsc2UpO1xuICAgICAgLy8gQ2FsbCBvbkNoYW5nZSBpZiBpdCdzIGRlZmluZWRcbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICBvbkNoYW5nZShvcHRpb24udmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uQ2hhbmdlXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPVwiY3VzdG9tLXNlbGVjdCBjdXN0b20tc2VsZWN0LTIgZmxleC1zaHJpbmstMCByZWxhdGl2ZVwiXG4gICAgICByZWY9e3NlbGVjdFJlZn1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YHNlbGVjdC1zZWxlY3RlZCB3aGl0ZXNwYWNlLW5vd3JhcCAke1xuICAgICAgICAgIGlzT3BlbiA/IFwic2VsZWN0LWFycm93LWFjdGl2ZVwiIDogXCJcIlxuICAgICAgICB9YH1cbiAgICAgICAgb25DbGljaz17dG9nZ2xlRHJvcGRvd259XG4gICAgICA+XG4gICAgICAgIHtzZWxlY3RlZE9wdGlvbi5sYWJlbH1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2BzZWxlY3QtaXRlbXMgJHtpc09wZW4gPyBcIlwiIDogXCJzZWxlY3QtaGlkZVwifWB9PlxuICAgICAgICB7b3B0aW9ucy5zbGljZSgxKS5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlT3B0aW9uQ2xpY2sob3B0aW9uKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHNlbGVjdC1pdGVtICR7XG4gICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uID09PSBvcHRpb24gPyBcInNhbWUtYXMtc2VsZWN0ZWRcIiA6IFwiXCJcbiAgICAgICAgICAgIH1gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDdXN0b21TZWxlY3Q7XG4iXSwibmFtZXMiOlsiQ3VzdG9tU2VsZWN0Iiwib3B0aW9ucyIsIm9uQ2hhbmdlIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwidXNlU3RhdGUiLCJzZWxlY3RlZE9wdGlvbiIsInNldFNlbGVjdGVkT3B0aW9uIiwic2VsZWN0UmVmIiwidXNlUmVmIiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwidXNlQ2FsbGJhY2siLCJldmVudCIsImN1cnJlbnQiLCJ0YXJnZXQiLCJjb250YWlucyIsInVzZUVmZmVjdCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVEcm9wZG93biIsInByZXYiLCJoYW5kbGVPcHRpb25DbGljayIsIm9wdGlvbiIsInZhbHVlIiwiZGl2IiwiY2xhc3NOYW1lIiwicmVmIiwib25DbGljayIsImxhYmVsIiwic2xpY2UiLCJtYXAiLCJpbmRleCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFzRUE7OztlQUFBOzs7OytEQXRFZ0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVoRSxNQUFNQSxlQUFlLENBQUMsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQXNEO0lBQzdGLE1BQU0sQ0FBQ0MsUUFBUUMsVUFBVSxHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFDckMsTUFBTSxDQUFDQyxnQkFBZ0JDLGtCQUFrQixHQUFHRixJQUFBQSxlQUFRLEVBQUNKLE9BQU8sQ0FBQyxFQUFFO0lBQy9ELE1BQU1PLFlBQVlDLElBQUFBLGFBQU0sRUFBTTtJQUU5QiwyRUFBMkU7SUFDM0UsTUFBTUMscUJBQXFCQyxJQUFBQSxrQkFBVyxFQUFDLENBQUNDO1FBQ3RDLElBQUlKLFVBQVVLLE9BQU8sSUFBSUQsTUFBTUUsTUFBTSxJQUFJLENBQUNOLFVBQVVLLE9BQU8sQ0FBQ0UsUUFBUSxDQUFDSCxNQUFNRSxNQUFNLEdBQVc7WUFDMUZWLFVBQVU7UUFDWjtJQUNGLEdBQUcsRUFBRTtJQUVMWSxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsNkNBQTZDO1FBQzdDQyxTQUFTQyxnQkFBZ0IsQ0FBQyxTQUFTUjtRQUVuQywwREFBMEQ7UUFDMUQsT0FBTztZQUNMTyxTQUFTRSxtQkFBbUIsQ0FBQyxTQUFTVDtRQUN4QztJQUNGLEdBQUc7UUFBQ0E7S0FBbUI7SUFFdkIsTUFBTVUsaUJBQWlCVCxJQUFBQSxrQkFBVyxFQUFDO1FBQ2pDUCxVQUFVLENBQUNpQixPQUFTLENBQUNBO0lBQ3ZCLEdBQUcsRUFBRTtJQUVMLE1BQU1DLG9CQUFvQlgsSUFBQUEsa0JBQVcsRUFDbkMsQ0FBQ1k7UUFDQ2hCLGtCQUFrQmdCO1FBQ2xCbkIsVUFBVTtRQUNWLGdDQUFnQztRQUNoQyxJQUFJRixVQUFVO1lBQ1pBLFNBQVNxQixPQUFPQyxLQUFLO1FBQ3ZCO0lBQ0YsR0FDQTtRQUFDdEI7S0FBUztJQUdaLHFCQUNFLHNCQUFDdUI7UUFDQ0MsV0FBVTtRQUNWQyxLQUFLbkI7OzBCQUVMLHFCQUFDaUI7Z0JBQ0NDLFdBQVcsQ0FBQyxrQ0FBa0MsRUFDNUN2QixTQUFTLHdCQUF3QixJQUNqQztnQkFDRnlCLFNBQVNSOzBCQUVSZCxlQUFldUIsS0FBSzs7MEJBRXZCLHFCQUFDSjtnQkFBSUMsV0FBVyxDQUFDLGFBQWEsRUFBRXZCLFNBQVMsS0FBSyxlQUFlOzBCQUMxREYsUUFBUTZCLEtBQUssQ0FBQyxHQUFHQyxHQUFHLENBQUMsQ0FBQ1IsUUFBUVMsc0JBQzdCLHFCQUFDUDt3QkFFQ0csU0FBUyxJQUFNTixrQkFBa0JDO3dCQUNqQ0csV0FBVyxDQUFDLFlBQVksRUFDdEJwQixtQkFBbUJpQixTQUFTLHFCQUFxQixJQUNqRDtrQ0FFREEsT0FBT00sS0FBSzt1QkFOUkc7Ozs7QUFZakI7TUFFQSxXQUFlaEMifQ==