{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\search\\trending\\route.ts"],"sourcesContent":["// ===================================\n// API: /api/search/trending - B√∫squedas populares/trending\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSupabaseClient } from '@/lib/supabase';\nimport { ApiResponse } from '@/types/api';\n\nexport interface TrendingSearch {\n  id: string;\n  query: string;\n  count: number;\n  category?: string;\n  href: string;\n  type: 'trending';\n}\n\nexport interface TrendingSearchesResponse {\n  trending: TrendingSearch[];\n  lastUpdated: string;\n}\n\n// B√∫squedas trending generadas din√°micamente basadas en productos reales\nasync function generateDynamicTrendingSearches(supabase: any, limit: number = 6): Promise<TrendingSearch[]> {\n  try {\n    // Obtener productos m√°s populares y marcas para generar b√∫squedas trending realistas\n    const { data: products, error: productsError } = await supabase\n      .from('products')\n      .select('name, brand, category_id, categories(name)')\n      .eq('is_active', true)\n      .limit(20);\n\n    if (productsError || !products) {\n      console.warn('Error obteniendo productos para trending:', productsError);\n      return getFallbackTrendingSearches(limit);\n    }\n\n    // Generar b√∫squedas trending basadas en productos reales\n    const trendingSearches: TrendingSearch[] = [];\n    const usedQueries = new Set<string>();\n\n    // Agregar b√∫squedas por marca\n    const brands = [...new Set(products.map(p => p.brand).filter(Boolean))];\n    brands.slice(0, 2).forEach((brand, index) => {\n      if (brand && !usedQueries.has(brand.toLowerCase())) {\n        trendingSearches.push({\n          id: `trending-brand-${index + 1}`,\n          query: brand,\n          count: Math.floor(Math.random() * 50) + 20, // Rango realista 20-70\n          category: \"marcas\",\n          href: `/search?q=${encodeURIComponent(brand)}`,\n          type: \"trending\"\n        });\n        usedQueries.add(brand.toLowerCase());\n      }\n    });\n\n    // Agregar b√∫squedas por categor√≠a\n    const categories = [...new Set(products.map(p => p.categories?.name).filter(Boolean))];\n    categories.slice(0, 2).forEach((category, index) => {\n      if (category && !usedQueries.has(category.toLowerCase())) {\n        trendingSearches.push({\n          id: `trending-category-${index + 1}`,\n          query: category,\n          count: Math.floor(Math.random() * 40) + 15, // Rango realista 15-55\n          category: \"pinturas\",\n          href: `/search?q=${encodeURIComponent(category)}`,\n          type: \"trending\"\n        });\n        usedQueries.add(category.toLowerCase());\n      }\n    });\n\n    // Agregar b√∫squedas por productos espec√≠ficos\n    const popularProducts = products.slice(0, 2);\n    popularProducts.forEach((product, index) => {\n      const productName = product.name;\n      if (productName && !usedQueries.has(productName.toLowerCase())) {\n        trendingSearches.push({\n          id: `trending-product-${index + 1}`,\n          query: productName,\n          count: Math.floor(Math.random() * 30) + 10, // Rango realista 10-40\n          category: \"productos\",\n          href: `/search?q=${encodeURIComponent(productName)}`,\n          type: \"trending\"\n        });\n        usedQueries.add(productName.toLowerCase());\n      }\n    });\n\n    // Ordenar por count descendente y limitar\n    return trendingSearches\n      .sort((a, b) => b.count - a.count)\n      .slice(0, limit);\n\n  } catch (error) {\n    console.error('Error generando trending searches din√°micas:', error);\n    return getFallbackTrendingSearches(limit);\n  }\n}\n\n// Fallback con datos m√≠nimos (solo si falla todo lo dem√°s)\nfunction getFallbackTrendingSearches(limit: number = 6): TrendingSearch[] {\n  const fallbackSearches = [\n    { query: \"Pintura\", category: \"pinturas\" },\n    { query: \"Esmalte\", category: \"pinturas\" },\n    { query: \"L√°tex\", category: \"pinturas\" },\n    { query: \"Barniz\", category: \"pinturas\" },\n    { query: \"Imprimaci√≥n\", category: \"pinturas\" },\n    { query: \"Rodillos\", category: \"herramientas\" }\n  ];\n\n  return fallbackSearches.slice(0, limit).map((search, index) => ({\n    id: `fallback-${index + 1}`,\n    query: search.query,\n    count: Math.floor(Math.random() * 20) + 5, // Rango m√≠nimo 5-25\n    category: search.category,\n    href: `/search?q=${encodeURIComponent(search.query.toLowerCase())}`,\n    type: \"trending\" as const\n  }));\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get('limit') || '6');\n    const days = parseInt(searchParams.get('days') || '7');\n    const category = searchParams.get('category');\n\n    console.log('üî• API /api/search/trending: Obteniendo b√∫squedas trending', {\n      limit,\n      days,\n      category\n    });\n\n    const supabase = getSupabaseClient();\n\n    let trendingSearches: TrendingSearch[] = [];\n\n    // Intentar obtener b√∫squedas trending reales del sistema de analytics\n    if (supabase) {\n      try {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n\n        // Query para obtener b√∫squedas m√°s populares de analytics_events\n        let query = supabase\n          .from('analytics_events')\n          .select('label, metadata')\n          .eq('category', 'search')\n          .eq('action', 'search_query')\n          .gte('created_at', startDate.toISOString())\n          .not('label', 'is', null);\n\n        if (category) {\n          query = query.eq('metadata->>category', category);\n        }\n\n        const { data: analyticsData, error } = await query;\n\n        if (!error && analyticsData && analyticsData.length > 0) {\n          // Procesar datos de analytics para obtener trending\n          const searchCounts = new Map<string, number>();\n          const searchCategories = new Map<string, string>();\n\n          analyticsData.forEach((event) => {\n            if (event.label) {\n              const query = event.label.toLowerCase().trim();\n              if (query.length > 2) { // Solo queries de m√°s de 2 caracteres\n                searchCounts.set(query, (searchCounts.get(query) || 0) + 1);\n                \n                // Extraer categor√≠a del metadata si existe\n                if (event.metadata && event.metadata.category) {\n                  searchCategories.set(query, event.metadata.category);\n                }\n              }\n            }\n          });\n\n          // Convertir a array y ordenar por popularidad\n          const sortedSearches = Array.from(searchCounts.entries())\n            .sort((a, b) => b[1] - a[1])\n            .slice(0, limit);\n\n          trendingSearches = sortedSearches.map(([query, count], index) => ({\n            id: `trending-real-${index + 1}`,\n            query: query.charAt(0).toUpperCase() + query.slice(1),\n            count,\n            category: searchCategories.get(query),\n            href: `/search?q=${encodeURIComponent(query)}`,\n            type: 'trending' as const\n          }));\n\n        }\n      } catch (analyticsError) {\n        console.warn('‚ö†Ô∏è Error obteniendo trending de analytics, usando fallback:', analyticsError);\n      }\n    }\n\n    // Si no hay datos reales o hay pocos, generar din√°micamente\n    if (trendingSearches.length < 3) {\n      console.log('üîÑ Generando b√∫squedas trending din√°micas desde productos');\n\n      try {\n        const dynamicSearches = await generateDynamicTrendingSearches(supabase, limit);\n\n        // Filtrar por categor√≠a si se especifica\n        let filteredSearches = dynamicSearches;\n        if (category) {\n          filteredSearches = dynamicSearches.filter(\n            search => search.category === category\n          );\n        }\n\n        // Combinar datos reales con din√°micos si es necesario\n        const needed = limit - trendingSearches.length;\n        const additionalSearches = filteredSearches.slice(0, needed);\n\n        trendingSearches = [...trendingSearches, ...additionalSearches];\n      } catch (error) {\n        console.error('Error generando trending din√°micas, usando fallback:', error);\n        const fallbackSearches = getFallbackTrendingSearches(limit - trendingSearches.length);\n        trendingSearches = [...trendingSearches, ...fallbackSearches];\n      }\n    }\n\n    // Limitar al n√∫mero solicitado\n    trendingSearches = trendingSearches.slice(0, limit);\n\n    const response: ApiResponse<TrendingSearchesResponse> = {\n      data: {\n        trending: trendingSearches,\n        lastUpdated: new Date().toISOString()\n      },\n      success: true\n    };\n\n    console.log('üî• Trending searches response:', {\n      count: trendingSearches.length,\n      hasRealData: trendingSearches.some(s => s.id.includes('real')),\n      categories: [...new Set(trendingSearches.map(s => s.category).filter(Boolean))]\n    });\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('‚ùå Error en /api/search/trending:', error);\n\n    // En caso de error, devolver b√∫squedas por defecto\n    const fallbackResponse: ApiResponse<TrendingSearchesResponse> = {\n      data: {\n        trending: defaultTrendingSearches.slice(0, parseInt(request.nextUrl.searchParams.get('limit') || '6')),\n        lastUpdated: new Date().toISOString()\n      },\n      success: true\n    };\n\n    return NextResponse.json(fallbackResponse);\n  }\n}\n\n// M√©todo POST para registrar una b√∫squeda (para analytics)\nexport async function POST(request: NextRequest) {\n  try {\n    // Validar que el request tenga contenido\n    const contentType = request.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      return NextResponse.json(\n        { error: 'Content-Type debe ser application/json' },\n        { status: 400 }\n      );\n    }\n\n    // Obtener el texto del body primero para validar\n    const bodyText = await request.text();\n    if (!bodyText || bodyText.trim() === '' || bodyText === '\"\"' || bodyText === \"''\") {\n      return NextResponse.json(\n        { error: 'Body de la request no puede estar vac√≠o' },\n        { status: 400 }\n      );\n    }\n\n    // Parsear JSON de forma segura\n    let requestData;\n    try {\n      requestData = JSON.parse(bodyText);\n    } catch (parseError) {\n      console.error('Error parsing JSON in POST /api/search/trending:', parseError);\n      return NextResponse.json(\n        { error: 'JSON inv√°lido en el body de la request' },\n        { status: 400 }\n      );\n    }\n\n    const { query, category, userId, sessionId } = requestData;\n\n    if (!query || typeof query !== 'string') {\n      return NextResponse.json(\n        { error: 'Query de b√∫squeda requerida' },\n        { status: 400 }\n      );\n    }\n\n    const supabase = getSupabaseClient();\n\n    if (supabase) {\n      // Registrar la b√∫squeda en analytics usando funci√≥n optimizada\n      const { error } = await supabase.rpc('insert_analytics_event_optimized', {\n        p_event_name: 'search',\n        p_category: 'search',\n        p_action: 'search',\n        p_label: query.toLowerCase().trim().substring(0, 50),\n        p_user_id: userId,\n        p_session_id: sessionId || 'anonymous',\n        p_page: '/search',\n        p_user_agent: null\n      });\n\n      if (error) {\n        console.error('Error registrando b√∫squeda en analytics:', error);\n      } else {\n      }\n    }\n\n    return NextResponse.json({ success: true });\n\n  } catch (error) {\n    console.error('‚ùå Error registrando b√∫squeda:', error);\n    return NextResponse.json(\n      { error: 'Error interno del servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":["GET","POST","generateDynamicTrendingSearches","supabase","limit","data","products","error","productsError","from","select","eq","console","warn","getFallbackTrendingSearches","trendingSearches","usedQueries","Set","brands","map","p","brand","filter","Boolean","slice","forEach","index","has","toLowerCase","push","id","query","count","Math","floor","random","category","href","encodeURIComponent","type","add","categories","name","popularProducts","product","productName","sort","a","b","fallbackSearches","search","request","searchParams","URL","url","parseInt","get","days","log","getSupabaseClient","startDate","Date","setDate","getDate","gte","toISOString","not","analyticsData","length","searchCounts","Map","searchCategories","event","label","trim","set","metadata","sortedSearches","Array","entries","charAt","toUpperCase","analyticsError","dynamicSearches","filteredSearches","needed","additionalSearches","response","trending","lastUpdated","success","hasRealData","some","s","includes","NextResponse","json","fallbackResponse","defaultTrendingSearches","nextUrl","contentType","headers","status","bodyText","text","requestData","JSON","parse","parseError","userId","sessionId","rpc","p_event_name","p_category","p_action","p_label","substring","p_user_id","p_session_id","p_page","p_user_agent"],"mappings":"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"}