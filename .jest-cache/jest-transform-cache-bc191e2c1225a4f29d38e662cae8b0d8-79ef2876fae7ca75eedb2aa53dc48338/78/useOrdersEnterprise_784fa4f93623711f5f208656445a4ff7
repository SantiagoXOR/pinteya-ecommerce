dc8c0c370d64092ee1261e520ed333ba
// ===================================
// PINTEYA E-COMMERCE - ORDERS ENTERPRISE HOOK
// ===================================
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useOrderDetail: function() {
        return useOrderDetail;
    },
    useOrdersEnterprise: function() {
        return useOrdersEnterprise;
    }
});
const _react = require("react");
function useOrdersEnterprise(initialFilters) {
    const [state, setState] = (0, _react.useState)({
        orders: [],
        loading: true,
        error: null,
        filters: {
            page: 1,
            limit: 20,
            sort_by: 'created_at',
            sort_order: 'desc',
            ...initialFilters
        },
        pagination: {
            page: 1,
            limit: 20,
            total: 0,
            totalPages: 0,
            hasNextPage: false,
            hasPreviousPage: false
        }
    });
    // ===================================
    // FUNCIONES DE API
    // ===================================
    const fetchOrders = (0, _react.useCallback)(async (filters)=>{
        setState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            const queryParams = new URLSearchParams();
            Object.entries(filters).forEach(([key, value])=>{
                if (value !== undefined && value !== null && value !== '') {
                    queryParams.append(key, value.toString());
                }
            });
            const response = await fetch(`/api/admin/orders?${queryParams}`);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.data?.toString() || 'Error al cargar órdenes');
            }
            setState((prev)=>({
                    ...prev,
                    orders: data.data.orders,
                    pagination: data.data.pagination,
                    filters: data.data.filters,
                    loading: false
                }));
        } catch (error) {
            setState((prev)=>({
                    ...prev,
                    error: error instanceof Error ? error.message : 'Error desconocido',
                    loading: false
                }));
        }
    }, []);
    const createOrder = (0, _react.useCallback)(async (orderData)=>{
        const response = await fetch('/api/admin/orders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al crear orden');
        }
        // Refrescar lista después de crear
        await fetchOrders(state.filters);
        return data.data;
    }, [
        state.filters,
        fetchOrders
    ]);
    const updateOrder = (0, _react.useCallback)(async (orderId, orderData)=>{
        const response = await fetch(`/api/admin/orders/${orderId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al actualizar orden');
        }
        // Actualizar orden en el estado local
        setState((prev)=>({
                ...prev,
                orders: prev.orders.map((order)=>order.id === orderId ? {
                        ...order,
                        ...data.data
                    } : order)
            }));
        return data.data;
    }, []);
    const changeOrderStatus = (0, _react.useCallback)(async (orderId, newStatus, reason, additionalData)=>{
        const response = await fetch(`/api/admin/orders/${orderId}/status`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                status: newStatus,
                reason,
                ...additionalData
            })
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al cambiar estado');
        }
        // Actualizar orden en el estado local
        setState((prev)=>({
                ...prev,
                orders: prev.orders.map((order)=>order.id === orderId ? {
                        ...order,
                        status: newStatus
                    } : order)
            }));
    }, []);
    const bulkUpdateStatus = (0, _react.useCallback)(async (bulkData)=>{
        const response = await fetch('/api/admin/orders/bulk?operation=status_update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(bulkData)
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error en operación masiva');
        }
        // Refrescar lista después de operación masiva
        await fetchOrders(state.filters);
        return data.data;
    }, [
        state.filters,
        fetchOrders
    ]);
    const exportOrders = (0, _react.useCallback)(async (format = 'csv', filters)=>{
        const response = await fetch('/api/admin/orders/bulk?operation=export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                format,
                filters: filters || state.filters,
                include_items: true
            })
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Error al exportar órdenes');
        }
        return data.data;
    }, [
        state.filters
    ]);
    // ===================================
    // FUNCIONES DE FILTRADO Y PAGINACIÓN
    // ===================================
    const updateFilters = (0, _react.useCallback)((newFilters)=>{
        const updatedFilters = {
            ...state.filters,
            ...newFilters,
            page: newFilters.page || 1
        };
        setState((prev)=>({
                ...prev,
                filters: updatedFilters
            }));
        fetchOrders(updatedFilters);
    }, [
        state.filters,
        fetchOrders
    ]);
    const setPage = (0, _react.useCallback)((page)=>{
        updateFilters({
            page
        });
    }, [
        updateFilters
    ]);
    const setSearch = (0, _react.useCallback)((search)=>{
        updateFilters({
            search,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const setStatus = (0, _react.useCallback)((status)=>{
        updateFilters({
            status,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const setPaymentStatus = (0, _react.useCallback)((payment_status)=>{
        updateFilters({
            payment_status,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const setSorting = (0, _react.useCallback)((sort_by, sort_order)=>{
        updateFilters({
            sort_by,
            sort_order
        });
    }, [
        updateFilters
    ]);
    const setDateRange = (0, _react.useCallback)((date_from, date_to)=>{
        updateFilters({
            date_from,
            date_to,
            page: 1
        });
    }, [
        updateFilters
    ]);
    const clearFilters = (0, _react.useCallback)(()=>{
        const defaultFilters = {
            page: 1,
            limit: 20,
            sort_by: 'created_at',
            sort_order: 'desc'
        };
        setState((prev)=>({
                ...prev,
                filters: defaultFilters
            }));
        fetchOrders(defaultFilters);
    }, [
        fetchOrders
    ]);
    // ===================================
    // FUNCIONES DE UTILIDAD
    // ===================================
    const refresh = (0, _react.useCallback)(()=>{
        fetchOrders(state.filters);
    }, [
        state.filters,
        fetchOrders
    ]);
    const getOrderById = (0, _react.useCallback)((orderId)=>{
        return state.orders.find((order)=>order.id === orderId);
    }, [
        state.orders
    ]);
    const getOrdersByStatus = (0, _react.useCallback)((status)=>{
        return state.orders.filter((order)=>order.status === status);
    }, [
        state.orders
    ]);
    const getTotalRevenue = (0, _react.useCallback)(()=>{
        return state.orders.reduce((total, order)=>{
            return order.status !== 'cancelled' ? total + order.total_amount : total;
        }, 0);
    }, [
        state.orders
    ]);
    const getAverageOrderValue = (0, _react.useCallback)(()=>{
        const validOrders = state.orders.filter((order)=>order.status !== 'cancelled');
        if (validOrders.length === 0) return 0;
        const total = validOrders.reduce((sum, order)=>sum + order.total_amount, 0);
        return total / validOrders.length;
    }, [
        state.orders
    ]);
    // ===================================
    // EFECTOS
    // ===================================
    (0, _react.useEffect)(()=>{
        fetchOrders(state.filters);
    }, []); // Solo ejecutar una vez al montar
    // ===================================
    // RETURN DEL HOOK
    // ===================================
    return {
        // Estado
        orders: state.orders,
        loading: state.loading,
        error: state.error,
        filters: state.filters,
        pagination: state.pagination,
        // Operaciones CRUD
        createOrder,
        updateOrder,
        changeOrderStatus,
        bulkUpdateStatus,
        exportOrders,
        // Filtrado y paginación
        updateFilters,
        setPage,
        setSearch,
        setStatus,
        setPaymentStatus,
        setSorting,
        setDateRange,
        clearFilters,
        // Utilidades
        refresh,
        getOrderById,
        getOrdersByStatus,
        getTotalRevenue,
        getAverageOrderValue,
        // Funciones de conveniencia
        hasNextPage: state.pagination.hasNextPage,
        hasPreviousPage: state.pagination.hasPreviousPage,
        totalOrders: state.pagination.total,
        currentPage: state.pagination.page,
        totalPages: state.pagination.totalPages
    };
}
function useOrderDetail(orderId) {
    const [order, setOrder] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const fetchOrder = (0, _react.useCallback)(async ()=>{
        if (!orderId) return;
        setLoading(true);
        setError(null);
        try {
            const response = await fetch(`/api/admin/orders/${orderId}`);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.error || 'Error al cargar orden');
            }
            setOrder(data.data.order);
        } catch (error) {
            setError(error instanceof Error ? error.message : 'Error desconocido');
        } finally{
            setLoading(false);
        }
    }, [
        orderId
    ]);
    (0, _react.useEffect)(()=>{
        fetchOrder();
    }, [
        fetchOrder
    ]);
    return {
        order,
        loading,
        error,
        refresh: fetchOrder
    };
}

//# sourceMappingURL=data:application/json;base64,