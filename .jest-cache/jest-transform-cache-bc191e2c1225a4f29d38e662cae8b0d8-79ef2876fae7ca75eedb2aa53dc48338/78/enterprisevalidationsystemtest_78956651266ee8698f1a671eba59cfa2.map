{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\validation\\enterprise-validation-system.test.ts"],"sourcesContent":["/**\n * Tests para Sistema Enterprise de Validación\n * Valida funcionalidad completa del sistema de validación y sanitización\n */\n\n// Mock de dependencias\njest.mock('@/lib/security/enterprise-audit-system', () => ({\n  enterpriseAuditSystem: {\n    logEnterpriseEvent: jest.fn()\n  }\n}));\n\njest.mock('isomorphic-dompurify', () => ({\n  sanitize: jest.fn((input) => input.replace(/<script.*?<\\/script>/gi, ''))\n}));\n\njest.mock('validator', () => ({\n  escape: jest.fn((input) => input.replace(/[<>&\"']/g, (char) => {\n    const entities: Record<string, string> = {\n      '<': '&lt;',\n      '>': '&gt;',\n      '&': '&amp;',\n      '\"': '&quot;',\n      \"'\": '&#x27;'\n    };\n    return entities[char] || char;\n  }))\n}));\n\nimport { z } from 'zod';\nimport {\n  EnterpriseValidator,\n  EnterpriseSanitizer,\n  ENTERPRISE_VALIDATION_CONFIGS,\n  criticalValidator,\n  highValidator,\n  standardValidator,\n  basicValidator\n} from '@/lib/validation/enterprise-validation-system';\nimport {\n  EnterpriseEmailSchema,\n  EnterprisePasswordSchema,\n  EnterpriseProductSchema,\n  EnterpriseUserSchema,\n  EnterpriseOrderSchema\n} from '@/lib/validation/enterprise-schemas';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\ndescribe('Sistema Enterprise de Validación', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Configuraciones Enterprise', () => {\n    it('debe tener configuración crítica para admin', () => {\n      const config = ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN;\n      \n      expect(config.enableSanitization).toBe(true);\n      expect(config.enableSecurityValidation).toBe(true);\n      expect(config.enableAuditLogging).toBe(true);\n      expect(config.securityLevel).toBe('critical');\n      expect(config.allowedTags).toEqual([]);\n      expect(config.maxStringLength).toBe(1000);\n    });\n\n    it('debe tener configuración alta para pagos', () => {\n      const config = ENTERPRISE_VALIDATION_CONFIGS.HIGH_PAYMENT;\n      \n      expect(config.securityLevel).toBe('high');\n      expect(config.maxStringLength).toBe(500);\n      expect(config.maxArrayLength).toBe(50);\n      expect(config.maxObjectDepth).toBe(3);\n    });\n\n    it('debe tener configuración estándar para APIs públicas', () => {\n      const config = ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC;\n      \n      expect(config.securityLevel).toBe('standard');\n      expect(config.enableAuditLogging).toBe(false);\n      expect(config.allowedTags).toContain('b');\n      expect(config.allowedTags).toContain('i');\n    });\n\n    it('debe tener configuración básica para usuarios', () => {\n      const config = ENTERPRISE_VALIDATION_CONFIGS.BASIC_USER;\n      \n      expect(config.securityLevel).toBe('basic');\n      expect(config.enableSecurityValidation).toBe(false);\n      expect(config.allowedTags).toContain('p');\n      expect(config.allowedTags).toContain('br');\n    });\n  });\n\n  describe('EnterpriseSanitizer', () => {\n    let sanitizer: EnterpriseSanitizer;\n\n    beforeEach(() => {\n      sanitizer = new EnterpriseSanitizer(ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\n    });\n\n    describe('sanitizeString', () => {\n      it('debe remover scripts maliciosos', () => {\n        const maliciousInput = 'Hello <script>alert(\"xss\")</script> World';\n        const result = sanitizer.sanitizeString(maliciousInput, { removeScripts: true });\n        \n        expect(result).toBe('Hello  World');\n      });\n\n      it('debe remover javascript: URLs', () => {\n        const maliciousInput = 'Click <a href=\"javascript:alert(1)\">here</a>';\n        const result = sanitizer.sanitizeString(maliciousInput, { removeScripts: true });\n        \n        expect(result).not.toContain('javascript:');\n      });\n\n      it('debe normalizar espacios en blanco', () => {\n        const input = 'Hello    world   with   spaces';\n        const result = sanitizer.sanitizeString(input, { normalizeWhitespace: true });\n        \n        expect(result).toBe('Hello world with spaces');\n      });\n\n      it('debe aplicar longitud máxima', () => {\n        const longInput = 'a'.repeat(2000);\n        const result = sanitizer.sanitizeString(longInput, { maxLength: 100 });\n        \n        expect(result.length).toBe(100);\n      });\n\n      it('debe remover palabras clave SQL', () => {\n        const sqlInput = 'SELECT * FROM users WHERE id = 1';\n        const result = sanitizer.sanitizeString(sqlInput, { removeSqlKeywords: true });\n        \n        expect(result).not.toContain('SELECT');\n        expect(result).not.toContain('FROM');\n      });\n\n      it('debe escapar HTML cuando se solicita', () => {\n        const htmlInput = '<div>Hello & \"World\"</div>';\n        const result = sanitizer.sanitizeString(htmlInput, { escapeHtml: true });\n        \n        expect(result).toContain('&lt;');\n        expect(result).toContain('&gt;');\n        expect(result).toContain('&amp;');\n        expect(result).toContain('&quot;');\n      });\n    });\n\n    describe('sanitizeObject', () => {\n      it('debe sanitizar strings en objetos', () => {\n        const input = {\n          name: 'John <script>alert(\"xss\")</script>',\n          description: 'A normal description'\n        };\n        \n        const result = sanitizer.sanitizeObject(input);\n        \n        expect(result.name).not.toContain('<script>');\n        expect(result.description).toBe('A normal description');\n      });\n\n      it('debe sanitizar arrays', () => {\n        const input = [\n          'Normal string',\n          'String with <script>alert(\"xss\")</script>',\n          123,\n          true\n        ];\n        \n        const result = sanitizer.sanitizeObject(input);\n        \n        expect(result[0]).toBe('Normal string');\n        expect(result[1]).not.toContain('<script>');\n        expect(result[2]).toBe(123);\n        expect(result[3]).toBe(true);\n      });\n\n      it('debe manejar objetos anidados', () => {\n        const input = {\n          user: {\n            name: 'John <script>alert(\"xss\")</script>',\n            profile: {\n              bio: 'Bio with SELECT * FROM users'\n            }\n          }\n        };\n        \n        const result = sanitizer.sanitizeObject(input);\n        \n        expect(result.user.name).not.toContain('<script>');\n        expect(result.user.profile.bio).not.toContain('SELECT');\n      });\n\n      it('debe lanzar error si excede profundidad máxima', () => {\n        const deepObject = { level1: { level2: { level3: { level4: { level5: { level6: 'deep' } } } } } };\n        \n        const shallowSanitizer = new EnterpriseSanitizer({\n          ...ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC,\n          maxObjectDepth: 3\n        });\n        \n        expect(() => shallowSanitizer.sanitizeObject(deepObject)).toThrow('profundidad máxima');\n      });\n\n      it('debe lanzar error si array excede longitud máxima', () => {\n        const longArray = new Array(1001).fill('item');\n        \n        expect(() => sanitizer.sanitizeObject(longArray)).toThrow('longitud máxima');\n      });\n    });\n\n    describe('sanitizeFormData', () => {\n      it('debe sanitizar datos de formulario', () => {\n        const formData = new FormData();\n        formData.append('name', 'John <script>alert(\"xss\")</script>');\n        formData.append('email', 'john@example.com');\n        \n        const result = sanitizer.sanitizeFormData(formData);\n        \n        expect(result.name).not.toContain('<script>');\n        expect(result.email).toBe('john@example.com');\n      });\n    });\n  });\n\n  describe('EnterpriseValidator', () => {\n    let validator: EnterpriseValidator;\n    let mockContext: EnterpriseAuthContext;\n\n    beforeEach(() => {\n      validator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\n      mockContext = {\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        email: 'test@example.com',\n        role: 'customer',\n        permissions: ['read'],\n        sessionValid: true,\n        securityLevel: 'standard',\n        ipAddress: '192.168.1.1',\n        userAgent: 'test-agent',\n        supabase: {} as any,\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      };\n    });\n\n    describe('validateAndSanitize', () => {\n      it('debe validar datos correctos', async () => {\n        const schema = z.object({\n          name: z.string().min(1),\n          age: z.number().min(0)\n        });\n        \n        const data = { name: 'John', age: 25 };\n        \n        const result = await validator.validateAndSanitize(schema, data, mockContext);\n        \n        expect(result.success).toBe(true);\n        expect(result.data).toEqual(data);\n        expect(result.metadata?.sanitizationApplied).toBe(true);\n        expect(result.metadata?.securityLevel).toBe('standard');\n      });\n\n      it('debe fallar con datos inválidos', async () => {\n        const schema = z.object({\n          name: z.string().min(1),\n          age: z.number().min(0)\n        });\n        \n        const data = { name: '', age: -5 };\n        \n        const result = await validator.validateAndSanitize(schema, data, mockContext);\n        \n        expect(result.success).toBe(false);\n        expect(result.errors).toBeDefined();\n        expect(result.errors!.length).toBeGreaterThan(0);\n        expect(result.errors![0].field).toBeDefined();\n        expect(result.errors![0].message).toBeDefined();\n      });\n\n      it('debe sanitizar datos antes de validar', async () => {\n        const schema = z.object({\n          name: z.string(),\n          description: z.string()\n        });\n        \n        const data = {\n          name: 'John <script>alert(\"xss\")</script>',\n          description: 'Normal description'\n        };\n        \n        const result = await validator.validateAndSanitize(schema, data, mockContext);\n        \n        expect(result.success).toBe(true);\n        expect(result.sanitized?.name).not.toContain('<script>');\n        expect(result.data?.name).not.toContain('<script>');\n      });\n\n      it('debe detectar patrones de inyección SQL', async () => {\n        const securityValidator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);\n        \n        const schema = z.object({\n          query: z.string()\n        });\n        \n        const data = { query: 'SELECT * FROM users WHERE id = 1' };\n        \n        const result = await securityValidator.validateAndSanitize(schema, data, mockContext);\n        \n        expect(result.success).toBe(false);\n        expect(result.errors?.[0].code).toBe('SQL_INJECTION_DETECTED');\n        expect(result.errors?.[0].severity).toBe('critical');\n      });\n\n      it('debe detectar patrones XSS', async () => {\n        const securityValidator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);\n        \n        const schema = z.object({\n          content: z.string()\n        });\n        \n        const data = { content: '<script>alert(\"xss\")</script>' };\n        \n        const result = await securityValidator.validateAndSanitize(schema, data, mockContext);\n        \n        expect(result.success).toBe(false);\n        expect(result.errors?.[0].code).toBe('XSS_DETECTED');\n        expect(result.errors?.[0].severity).toBe('critical');\n      });\n\n      it('debe incluir métricas de performance', async () => {\n        const schema = z.object({\n          name: z.string()\n        });\n        \n        const data = { name: 'John' };\n        \n        const result = await validator.validateAndSanitize(schema, data, mockContext);\n        \n        expect(result.metadata?.performanceMs).toBeDefined();\n        expect(result.metadata?.performanceMs).toBeGreaterThan(0);\n        expect(result.metadata?.rulesApplied).toContain('sanitization');\n      });\n    });\n  });\n\n  describe('Esquemas Enterprise', () => {\n    describe('EnterpriseEmailSchema', () => {\n      it('debe validar emails correctos', () => {\n        const validEmails = [\n          'test@example.com',\n          'user.name@domain.co.uk',\n          'user+tag@example.org'\n        ];\n        \n        validEmails.forEach(email => {\n          const result = EnterpriseEmailSchema.safeParse(email);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('debe rechazar emails inválidos', () => {\n        const invalidEmails = [\n          'invalid-email',\n          'test@',\n          '@example.com',\n          'test..test@example.com',\n          'test@example..com'\n        ];\n        \n        invalidEmails.forEach(email => {\n          const result = EnterpriseEmailSchema.safeParse(email);\n          expect(result.success).toBe(false);\n        });\n      });\n    });\n\n    describe('EnterprisePasswordSchema', () => {\n      it('debe validar contraseñas seguras', () => {\n        const validPasswords = [\n          'MySecure123!',\n          'Another@Pass1',\n          'Complex#Password9'\n        ];\n        \n        validPasswords.forEach(password => {\n          const result = EnterprisePasswordSchema.safeParse(password);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('debe rechazar contraseñas débiles', () => {\n        const invalidPasswords = [\n          'weak',\n          'nouppercaseornumbers!',\n          'NOLOWERCASEORNUMBERS!',\n          'NoSpecialChars123',\n          'NoNumbers!',\n          '12345678'\n        ];\n        \n        invalidPasswords.forEach(password => {\n          const result = EnterprisePasswordSchema.safeParse(password);\n          expect(result.success).toBe(false);\n        });\n      });\n    });\n\n    describe('EnterpriseProductSchema', () => {\n      it('debe validar producto válido', () => {\n        const validProduct = {\n          name: 'Pintura Látex Interior',\n          brand: 'Sherwin Williams',\n          slug: 'pintura-latex-interior',\n          description: 'Pintura látex de alta calidad para interiores',\n          price: 2500.50,\n          stock: 100,\n          status: 'active' as const\n        };\n        \n        const result = EnterpriseProductSchema.safeParse(validProduct);\n        expect(result.success).toBe(true);\n      });\n\n      it('debe rechazar producto con datos inválidos', () => {\n        const invalidProduct = {\n          name: 'A', // Muy corto\n          price: -100, // Precio negativo\n          stock: -5, // Stock negativo\n          slug: 'Invalid Slug!' // Slug inválido\n        };\n        \n        const result = EnterpriseProductSchema.safeParse(invalidProduct);\n        expect(result.success).toBe(false);\n        expect(result.error?.errors.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('Instancias Predefinidas', () => {\n    it('debe tener validadores predefinidos', () => {\n      expect(criticalValidator).toBeInstanceOf(EnterpriseValidator);\n      expect(highValidator).toBeInstanceOf(EnterpriseValidator);\n      expect(standardValidator).toBeInstanceOf(EnterpriseValidator);\n      expect(basicValidator).toBeInstanceOf(EnterpriseValidator);\n    });\n\n    it('debe usar configuraciones correctas', async () => {\n      const schema = z.object({ test: z.string() });\n      const data = { test: 'value' };\n      \n      const criticalResult = await criticalValidator.validateAndSanitize(schema, data);\n      const basicResult = await basicValidator.validateAndSanitize(schema, data);\n      \n      expect(criticalResult.metadata?.securityLevel).toBe('critical');\n      expect(basicResult.metadata?.securityLevel).toBe('basic');\n    });\n  });\n\n  describe('Manejo de Errores', () => {\n    it('debe manejar errores de sanitización', async () => {\n      const validator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);\n      const schema = z.object({ test: z.string() });\n      \n      // Simular error en sanitización\n      const circularObject: any = {};\n      circularObject.self = circularObject;\n      \n      const result = await validator.validateAndSanitize(schema, circularObject);\n      \n      expect(result.success).toBe(false);\n      expect(result.errors?.[0].code).toBe('VALIDATION_ERROR');\n    });\n\n    it('debe determinar severidad correctamente', async () => {\n      const validator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\n      const schema = z.object({\n        password: z.string().min(8),\n        email: z.string().email(),\n        name: z.string().min(1)\n      });\n      \n      const data = {\n        password: 'short',\n        email: 'invalid-email',\n        name: ''\n      };\n      \n      const result = await validator.validateAndSanitize(schema, data);\n      \n      expect(result.success).toBe(false);\n      \n      const passwordError = result.errors?.find(e => e.field === 'password');\n      const emailError = result.errors?.find(e => e.field === 'email');\n      const nameError = result.errors?.find(e => e.field === 'name');\n      \n      expect(passwordError?.severity).toBe('critical');\n      expect(emailError?.severity).toBe('critical');\n      expect(nameError?.severity).toBe('medium');\n    });\n  });\n});\n"],"names":["jest","mock","enterpriseAuditSystem","logEnterpriseEvent","fn","sanitize","input","replace","escape","char","entities","describe","beforeEach","clearAllMocks","it","config","ENTERPRISE_VALIDATION_CONFIGS","CRITICAL_ADMIN","expect","enableSanitization","toBe","enableSecurityValidation","enableAuditLogging","securityLevel","allowedTags","toEqual","maxStringLength","HIGH_PAYMENT","maxArrayLength","maxObjectDepth","STANDARD_PUBLIC","toContain","BASIC_USER","sanitizer","EnterpriseSanitizer","maliciousInput","result","sanitizeString","removeScripts","not","normalizeWhitespace","longInput","repeat","maxLength","length","sqlInput","removeSqlKeywords","htmlInput","escapeHtml","name","description","sanitizeObject","user","profile","bio","deepObject","level1","level2","level3","level4","level5","level6","shallowSanitizer","toThrow","longArray","Array","fill","formData","FormData","append","sanitizeFormData","email","validator","mockContext","EnterpriseValidator","userId","sessionId","role","permissions","sessionValid","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","schema","z","object","string","min","age","number","data","validateAndSanitize","success","metadata","sanitizationApplied","errors","toBeDefined","toBeGreaterThan","field","message","sanitized","securityValidator","query","code","severity","content","performanceMs","rulesApplied","validEmails","forEach","EnterpriseEmailSchema","safeParse","invalidEmails","validPasswords","password","EnterprisePasswordSchema","invalidPasswords","validProduct","brand","slug","price","stock","status","EnterpriseProductSchema","invalidProduct","error","criticalValidator","toBeInstanceOf","highValidator","standardValidator","basicValidator","test","criticalResult","basicResult","circularObject","self","passwordError","find","e","emailError","nameError"],"mappings":"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"}