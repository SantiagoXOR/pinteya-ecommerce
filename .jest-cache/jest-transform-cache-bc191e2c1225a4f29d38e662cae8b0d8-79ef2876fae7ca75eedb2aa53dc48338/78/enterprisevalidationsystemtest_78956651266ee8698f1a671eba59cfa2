4715a81e75ebbe076468e13c102b2ac5
/**
 * Tests para Sistema Enterprise de Validación
 * Valida funcionalidad completa del sistema de validación y sanitización
 */ // Mock de dependencias
"use strict";
jest.mock('@/lib/security/enterprise-audit-system', ()=>({
        enterpriseAuditSystem: {
            logEnterpriseEvent: jest.fn()
        }
    }));
jest.mock('isomorphic-dompurify', ()=>({
        sanitize: jest.fn((input)=>input.replace(/<script.*?<\/script>/gi, ''))
    }));
jest.mock('validator', ()=>({
        escape: jest.fn((input)=>input.replace(/[<>&"']/g, (char)=>{
                const entities = {
                    '<': '&lt;',
                    '>': '&gt;',
                    '&': '&amp;',
                    '"': '&quot;',
                    "'": '&#x27;'
                };
                return entities[char] || char;
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _zod = require("zod");
const _enterprisevalidationsystem = require("../../lib/validation/enterprise-validation-system");
const _enterpriseschemas = require("../../lib/validation/enterprise-schemas");
describe('Sistema Enterprise de Validación', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Configuraciones Enterprise', ()=>{
        it('debe tener configuración crítica para admin', ()=>{
            const config = _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN;
            expect(config.enableSanitization).toBe(true);
            expect(config.enableSecurityValidation).toBe(true);
            expect(config.enableAuditLogging).toBe(true);
            expect(config.securityLevel).toBe('critical');
            expect(config.allowedTags).toEqual([]);
            expect(config.maxStringLength).toBe(1000);
        });
        it('debe tener configuración alta para pagos', ()=>{
            const config = _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.HIGH_PAYMENT;
            expect(config.securityLevel).toBe('high');
            expect(config.maxStringLength).toBe(500);
            expect(config.maxArrayLength).toBe(50);
            expect(config.maxObjectDepth).toBe(3);
        });
        it('debe tener configuración estándar para APIs públicas', ()=>{
            const config = _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC;
            expect(config.securityLevel).toBe('standard');
            expect(config.enableAuditLogging).toBe(false);
            expect(config.allowedTags).toContain('b');
            expect(config.allowedTags).toContain('i');
        });
        it('debe tener configuración básica para usuarios', ()=>{
            const config = _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.BASIC_USER;
            expect(config.securityLevel).toBe('basic');
            expect(config.enableSecurityValidation).toBe(false);
            expect(config.allowedTags).toContain('p');
            expect(config.allowedTags).toContain('br');
        });
    });
    describe('EnterpriseSanitizer', ()=>{
        let sanitizer;
        beforeEach(()=>{
            sanitizer = new _enterprisevalidationsystem.EnterpriseSanitizer(_enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);
        });
        describe('sanitizeString', ()=>{
            it('debe remover scripts maliciosos', ()=>{
                const maliciousInput = 'Hello <script>alert("xss")</script> World';
                const result = sanitizer.sanitizeString(maliciousInput, {
                    removeScripts: true
                });
                expect(result).toBe('Hello  World');
            });
            it('debe remover javascript: URLs', ()=>{
                const maliciousInput = 'Click <a href="javascript:alert(1)">here</a>';
                const result = sanitizer.sanitizeString(maliciousInput, {
                    removeScripts: true
                });
                expect(result).not.toContain('javascript:');
            });
            it('debe normalizar espacios en blanco', ()=>{
                const input = 'Hello    world   with   spaces';
                const result = sanitizer.sanitizeString(input, {
                    normalizeWhitespace: true
                });
                expect(result).toBe('Hello world with spaces');
            });
            it('debe aplicar longitud máxima', ()=>{
                const longInput = 'a'.repeat(2000);
                const result = sanitizer.sanitizeString(longInput, {
                    maxLength: 100
                });
                expect(result.length).toBe(100);
            });
            it('debe remover palabras clave SQL', ()=>{
                const sqlInput = 'SELECT * FROM users WHERE id = 1';
                const result = sanitizer.sanitizeString(sqlInput, {
                    removeSqlKeywords: true
                });
                expect(result).not.toContain('SELECT');
                expect(result).not.toContain('FROM');
            });
            it('debe escapar HTML cuando se solicita', ()=>{
                const htmlInput = '<div>Hello & "World"</div>';
                const result = sanitizer.sanitizeString(htmlInput, {
                    escapeHtml: true
                });
                expect(result).toContain('&lt;');
                expect(result).toContain('&gt;');
                expect(result).toContain('&amp;');
                expect(result).toContain('&quot;');
            });
        });
        describe('sanitizeObject', ()=>{
            it('debe sanitizar strings en objetos', ()=>{
                const input = {
                    name: 'John <script>alert("xss")</script>',
                    description: 'A normal description'
                };
                const result = sanitizer.sanitizeObject(input);
                expect(result.name).not.toContain('<script>');
                expect(result.description).toBe('A normal description');
            });
            it('debe sanitizar arrays', ()=>{
                const input = [
                    'Normal string',
                    'String with <script>alert("xss")</script>',
                    123,
                    true
                ];
                const result = sanitizer.sanitizeObject(input);
                expect(result[0]).toBe('Normal string');
                expect(result[1]).not.toContain('<script>');
                expect(result[2]).toBe(123);
                expect(result[3]).toBe(true);
            });
            it('debe manejar objetos anidados', ()=>{
                const input = {
                    user: {
                        name: 'John <script>alert("xss")</script>',
                        profile: {
                            bio: 'Bio with SELECT * FROM users'
                        }
                    }
                };
                const result = sanitizer.sanitizeObject(input);
                expect(result.user.name).not.toContain('<script>');
                expect(result.user.profile.bio).not.toContain('SELECT');
            });
            it('debe lanzar error si excede profundidad máxima', ()=>{
                const deepObject = {
                    level1: {
                        level2: {
                            level3: {
                                level4: {
                                    level5: {
                                        level6: 'deep'
                                    }
                                }
                            }
                        }
                    }
                };
                const shallowSanitizer = new _enterprisevalidationsystem.EnterpriseSanitizer({
                    ..._enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC,
                    maxObjectDepth: 3
                });
                expect(()=>shallowSanitizer.sanitizeObject(deepObject)).toThrow('profundidad máxima');
            });
            it('debe lanzar error si array excede longitud máxima', ()=>{
                const longArray = new Array(1001).fill('item');
                expect(()=>sanitizer.sanitizeObject(longArray)).toThrow('longitud máxima');
            });
        });
        describe('sanitizeFormData', ()=>{
            it('debe sanitizar datos de formulario', ()=>{
                const formData = new FormData();
                formData.append('name', 'John <script>alert("xss")</script>');
                formData.append('email', 'john@example.com');
                const result = sanitizer.sanitizeFormData(formData);
                expect(result.name).not.toContain('<script>');
                expect(result.email).toBe('john@example.com');
            });
        });
    });
    describe('EnterpriseValidator', ()=>{
        let validator;
        let mockContext;
        beforeEach(()=>{
            validator = new _enterprisevalidationsystem.EnterpriseValidator(_enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);
            mockContext = {
                userId: 'user_123',
                sessionId: 'sess_123',
                email: 'test@example.com',
                role: 'customer',
                permissions: [
                    'read'
                ],
                sessionValid: true,
                securityLevel: 'standard',
                ipAddress: '192.168.1.1',
                userAgent: 'test-agent',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            };
        });
        describe('validateAndSanitize', ()=>{
            it('debe validar datos correctos', async ()=>{
                const schema = _zod.z.object({
                    name: _zod.z.string().min(1),
                    age: _zod.z.number().min(0)
                });
                const data = {
                    name: 'John',
                    age: 25
                };
                const result = await validator.validateAndSanitize(schema, data, mockContext);
                expect(result.success).toBe(true);
                expect(result.data).toEqual(data);
                expect(result.metadata?.sanitizationApplied).toBe(true);
                expect(result.metadata?.securityLevel).toBe('standard');
            });
            it('debe fallar con datos inválidos', async ()=>{
                const schema = _zod.z.object({
                    name: _zod.z.string().min(1),
                    age: _zod.z.number().min(0)
                });
                const data = {
                    name: '',
                    age: -5
                };
                const result = await validator.validateAndSanitize(schema, data, mockContext);
                expect(result.success).toBe(false);
                expect(result.errors).toBeDefined();
                expect(result.errors.length).toBeGreaterThan(0);
                expect(result.errors[0].field).toBeDefined();
                expect(result.errors[0].message).toBeDefined();
            });
            it('debe sanitizar datos antes de validar', async ()=>{
                const schema = _zod.z.object({
                    name: _zod.z.string(),
                    description: _zod.z.string()
                });
                const data = {
                    name: 'John <script>alert("xss")</script>',
                    description: 'Normal description'
                };
                const result = await validator.validateAndSanitize(schema, data, mockContext);
                expect(result.success).toBe(true);
                expect(result.sanitized?.name).not.toContain('<script>');
                expect(result.data?.name).not.toContain('<script>');
            });
            it('debe detectar patrones de inyección SQL', async ()=>{
                const securityValidator = new _enterprisevalidationsystem.EnterpriseValidator(_enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);
                const schema = _zod.z.object({
                    query: _zod.z.string()
                });
                const data = {
                    query: 'SELECT * FROM users WHERE id = 1'
                };
                const result = await securityValidator.validateAndSanitize(schema, data, mockContext);
                expect(result.success).toBe(false);
                expect(result.errors?.[0].code).toBe('SQL_INJECTION_DETECTED');
                expect(result.errors?.[0].severity).toBe('critical');
            });
            it('debe detectar patrones XSS', async ()=>{
                const securityValidator = new _enterprisevalidationsystem.EnterpriseValidator(_enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);
                const schema = _zod.z.object({
                    content: _zod.z.string()
                });
                const data = {
                    content: '<script>alert("xss")</script>'
                };
                const result = await securityValidator.validateAndSanitize(schema, data, mockContext);
                expect(result.success).toBe(false);
                expect(result.errors?.[0].code).toBe('XSS_DETECTED');
                expect(result.errors?.[0].severity).toBe('critical');
            });
            it('debe incluir métricas de performance', async ()=>{
                const schema = _zod.z.object({
                    name: _zod.z.string()
                });
                const data = {
                    name: 'John'
                };
                const result = await validator.validateAndSanitize(schema, data, mockContext);
                expect(result.metadata?.performanceMs).toBeDefined();
                expect(result.metadata?.performanceMs).toBeGreaterThan(0);
                expect(result.metadata?.rulesApplied).toContain('sanitization');
            });
        });
    });
    describe('Esquemas Enterprise', ()=>{
        describe('EnterpriseEmailSchema', ()=>{
            it('debe validar emails correctos', ()=>{
                const validEmails = [
                    'test@example.com',
                    'user.name@domain.co.uk',
                    'user+tag@example.org'
                ];
                validEmails.forEach((email)=>{
                    const result = _enterpriseschemas.EnterpriseEmailSchema.safeParse(email);
                    expect(result.success).toBe(true);
                });
            });
            it('debe rechazar emails inválidos', ()=>{
                const invalidEmails = [
                    'invalid-email',
                    'test@',
                    '@example.com',
                    'test..test@example.com',
                    'test@example..com'
                ];
                invalidEmails.forEach((email)=>{
                    const result = _enterpriseschemas.EnterpriseEmailSchema.safeParse(email);
                    expect(result.success).toBe(false);
                });
            });
        });
        describe('EnterprisePasswordSchema', ()=>{
            it('debe validar contraseñas seguras', ()=>{
                const validPasswords = [
                    'MySecure123!',
                    'Another@Pass1',
                    'Complex#Password9'
                ];
                validPasswords.forEach((password)=>{
                    const result = _enterpriseschemas.EnterprisePasswordSchema.safeParse(password);
                    expect(result.success).toBe(true);
                });
            });
            it('debe rechazar contraseñas débiles', ()=>{
                const invalidPasswords = [
                    'weak',
                    'nouppercaseornumbers!',
                    'NOLOWERCASEORNUMBERS!',
                    'NoSpecialChars123',
                    'NoNumbers!',
                    '12345678'
                ];
                invalidPasswords.forEach((password)=>{
                    const result = _enterpriseschemas.EnterprisePasswordSchema.safeParse(password);
                    expect(result.success).toBe(false);
                });
            });
        });
        describe('EnterpriseProductSchema', ()=>{
            it('debe validar producto válido', ()=>{
                const validProduct = {
                    name: 'Pintura Látex Interior',
                    brand: 'Sherwin Williams',
                    slug: 'pintura-latex-interior',
                    description: 'Pintura látex de alta calidad para interiores',
                    price: 2500.50,
                    stock: 100,
                    status: 'active'
                };
                const result = _enterpriseschemas.EnterpriseProductSchema.safeParse(validProduct);
                expect(result.success).toBe(true);
            });
            it('debe rechazar producto con datos inválidos', ()=>{
                const invalidProduct = {
                    name: 'A',
                    price: -100,
                    stock: -5,
                    slug: 'Invalid Slug!' // Slug inválido
                };
                const result = _enterpriseschemas.EnterpriseProductSchema.safeParse(invalidProduct);
                expect(result.success).toBe(false);
                expect(result.error?.errors.length).toBeGreaterThan(0);
            });
        });
    });
    describe('Instancias Predefinidas', ()=>{
        it('debe tener validadores predefinidos', ()=>{
            expect(_enterprisevalidationsystem.criticalValidator).toBeInstanceOf(_enterprisevalidationsystem.EnterpriseValidator);
            expect(_enterprisevalidationsystem.highValidator).toBeInstanceOf(_enterprisevalidationsystem.EnterpriseValidator);
            expect(_enterprisevalidationsystem.standardValidator).toBeInstanceOf(_enterprisevalidationsystem.EnterpriseValidator);
            expect(_enterprisevalidationsystem.basicValidator).toBeInstanceOf(_enterprisevalidationsystem.EnterpriseValidator);
        });
        it('debe usar configuraciones correctas', async ()=>{
            const schema = _zod.z.object({
                test: _zod.z.string()
            });
            const data = {
                test: 'value'
            };
            const criticalResult = await _enterprisevalidationsystem.criticalValidator.validateAndSanitize(schema, data);
            const basicResult = await _enterprisevalidationsystem.basicValidator.validateAndSanitize(schema, data);
            expect(criticalResult.metadata?.securityLevel).toBe('critical');
            expect(basicResult.metadata?.securityLevel).toBe('basic');
        });
    });
    describe('Manejo de Errores', ()=>{
        it('debe manejar errores de sanitización', async ()=>{
            const validator = new _enterprisevalidationsystem.EnterpriseValidator(_enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);
            const schema = _zod.z.object({
                test: _zod.z.string()
            });
            // Simular error en sanitización
            const circularObject = {};
            circularObject.self = circularObject;
            const result = await validator.validateAndSanitize(schema, circularObject);
            expect(result.success).toBe(false);
            expect(result.errors?.[0].code).toBe('VALIDATION_ERROR');
        });
        it('debe determinar severidad correctamente', async ()=>{
            const validator = new _enterprisevalidationsystem.EnterpriseValidator(_enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);
            const schema = _zod.z.object({
                password: _zod.z.string().min(8),
                email: _zod.z.string().email(),
                name: _zod.z.string().min(1)
            });
            const data = {
                password: 'short',
                email: 'invalid-email',
                name: ''
            };
            const result = await validator.validateAndSanitize(schema, data);
            expect(result.success).toBe(false);
            const passwordError = result.errors?.find((e)=>e.field === 'password');
            const emailError = result.errors?.find((e)=>e.field === 'email');
            const nameError = result.errors?.find((e)=>e.field === 'name');
            expect(passwordError?.severity).toBe('critical');
            expect(emailError?.severity).toBe('critical');
            expect(nameError?.severity).toBe('medium');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,