0aef9a184efb1adba33b705be1dc656c
// ===================================
// PINTEYA E-COMMERCE - ENTERPRISE METRICS TESTS
// ===================================
"use strict";
// Mock logger
jest.mock('@/lib/logger', ()=>({
        logger: {
            debug: jest.fn(),
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn()
        },
        LogLevel: {
            DEBUG: 'debug',
            INFO: 'info',
            WARN: 'warn',
            ERROR: 'error'
        },
        LogCategory: {
            SYSTEM: 'system'
        }
    }));
jest.mock('@/lib/supabase', ()=>({
        getSupabaseClient: jest.fn(()=>({
                from: mockSupabaseFrom,
                rpc: mockSupabaseRpc
            }))
    }));
// Mock cache
jest.mock('@/lib/cache-manager', ()=>({
        CacheUtils: {
            cacheMetricsAggregation: jest.fn((key, fn)=>fn())
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _enterprisemetrics = require("../../lib/monitoring/enterprise-metrics");
// Mock Supabase
const mockSupabaseInsert = jest.fn();
const mockSupabaseRpc = jest.fn();
const mockSupabaseFrom = jest.fn(()=>({
        insert: mockSupabaseInsert
    }));
describe('Enterprise Metrics System', ()=>{
    let metricsCollector;
    beforeEach(()=>{
        jest.clearAllMocks();
        metricsCollector = new _enterprisemetrics.EnterpriseMetricsCollector();
        // Mock successful database operations
        mockSupabaseInsert.mockResolvedValue({
            error: null
        });
        mockSupabaseRpc.mockResolvedValue({
            data: [],
            error: null
        });
    });
    afterEach(()=>{
        metricsCollector.destroy();
    });
    describe('EnterpriseMetricsCollector', ()=>{
        test('debe crear instancia singleton', ()=>{
            const instance1 = _enterprisemetrics.EnterpriseMetricsCollector.getInstance();
            const instance2 = _enterprisemetrics.EnterpriseMetricsCollector.getInstance();
            expect(instance1).toBe(instance2);
        });
        test('debe registrar métrica básica', async ()=>{
            await metricsCollector.recordMetric('test.metric', 100, _enterprisemetrics.MetricType.GAUGE, _enterprisemetrics.BusinessMetricCategory.PERFORMANCE, {
                environment: 'test'
            }, {
                source: 'unit-test'
            });
            // Verificar que se agregó al buffer (se flusheará automáticamente)
            expect(true).toBe(true); // La métrica se almacena en buffer interno
        });
        test('debe generar ID único para métricas', async ()=>{
            const metric1 = await metricsCollector.recordMetric('test1', 1);
            const metric2 = await metricsCollector.recordMetric('test2', 2);
            // Los IDs se generan internamente, verificamos que no hay errores
            expect(metric1).toBeUndefined(); // recordMetric no retorna valor
            expect(metric2).toBeUndefined();
        });
        test('debe manejar errores sin fallar', async ()=>{
            // Simular error en base de datos
            mockSupabaseInsert.mockResolvedValue({
                error: {
                    message: 'Database error'
                }
            });
            // No debe lanzar error
            await expect(metricsCollector.recordMetric('test.error', 1)).resolves.not.toThrow();
        });
    });
    describe('Métricas de Performance', ()=>{
        test('debe registrar métrica de performance', async ()=>{
            await (0, _enterprisemetrics.recordPerformanceMetric)('api_call', 1500, true, {
                endpoint: '/api/test'
            });
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
        test('debe registrar métricas de duración y contador', async ()=>{
            await (0, _enterprisemetrics.recordPerformanceMetric)('database_query', 250, true, {
                table: 'products'
            });
            // Se registran dos métricas: duración y contador
            expect(true).toBe(true);
        });
    });
    describe('Métricas de Negocio', ()=>{
        test('debe registrar evento de negocio', async ()=>{
            await (0, _enterprisemetrics.recordBusinessMetric)('order_created', 1, {
                amount: '100.50',
                currency: 'ARS',
                method: 'mercadopago'
            });
            expect(true).toBe(true);
        });
        test('debe registrar métricas con valores personalizados', async ()=>{
            await (0, _enterprisemetrics.recordBusinessMetric)('revenue', 15000.75, {
                period: 'daily',
                source: 'ecommerce'
            });
            expect(true).toBe(true);
        });
    });
    describe('Métricas de Seguridad', ()=>{
        test('debe registrar evento de seguridad', async ()=>{
            await (0, _enterprisemetrics.recordSecurityMetric)('login_attempt', 'medium', {
                ip: '192.168.1.1',
                success: 'true'
            });
            expect(true).toBe(true);
        });
        test('debe registrar violación de seguridad crítica', async ()=>{
            await (0, _enterprisemetrics.recordSecurityMetric)('signature_validation_failed', 'critical', {
                endpoint: '/api/webhook',
                ip: '10.0.0.1'
            });
            expect(true).toBe(true);
        });
    });
    describe('Métricas de Experiencia de Usuario', ()=>{
        test('debe registrar métrica de UX', async ()=>{
            await (0, _enterprisemetrics.recordUserExperienceMetric)('page_load_time', 2500, 'user-123', {
                page: '/shop',
                device: 'mobile'
            });
            expect(true).toBe(true);
        });
        test('debe manejar usuarios anónimos', async ()=>{
            await (0, _enterprisemetrics.recordUserExperienceMetric)('bounce_rate', 0.25, undefined, {
                page: '/home',
                source: 'organic'
            });
            expect(true).toBe(true);
        });
    });
    describe('Sistema de Alertas', ()=>{
        test('debe configurar regla de alerta', ()=>{
            const rule = {
                id: 'test_alert',
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _enterprisemetrics.AlertLevel.WARNING,
                enabled: true,
                cooldownMinutes: 5,
                description: 'Test alert',
                actions: [
                    {
                        type: 'log',
                        config: {}
                    }
                ]
            };
            metricsCollector.setAlertRule(rule);
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
        test('debe evaluar condiciones de alerta correctamente', async ()=>{
            // Configurar alerta para valores > 50
            const rule = {
                id: 'high_value_alert',
                metricName: 'test.value',
                condition: 'gt',
                threshold: 50,
                level: _enterprisemetrics.AlertLevel.WARNING,
                enabled: true,
                cooldownMinutes: 1,
                description: 'Value too high',
                actions: [
                    {
                        type: 'log',
                        config: {}
                    }
                ]
            };
            metricsCollector.setAlertRule(rule);
            // Registrar métrica que debería disparar alerta
            await metricsCollector.recordMetric('test.value', 75, _enterprisemetrics.MetricType.GAUGE, _enterprisemetrics.BusinessMetricCategory.PERFORMANCE);
            // La alerta se dispara internamente
            expect(true).toBe(true);
        });
    });
    describe('Agregación de Métricas', ()=>{
        test('debe obtener métricas agregadas', async ()=>{
            const mockAggregation = [
                {
                    period_start: '2025-01-01T00:00:00Z',
                    period_end: '2025-01-01T01:00:00Z',
                    count: 10,
                    sum: 1000,
                    avg: 100,
                    min: 50,
                    max: 150,
                    p50: 95,
                    p95: 140,
                    p99: 148
                }
            ];
            mockSupabaseRpc.mockResolvedValue({
                data: mockAggregation,
                error: null
            });
            const result = await metricsCollector.getAggregatedMetrics('test.metric', '1h', '2025-01-01T00:00:00Z', '2025-01-01T23:59:59Z');
            expect(mockSupabaseRpc).toHaveBeenCalledWith('aggregate_metrics', {
                metric_name: 'test.metric',
                period_interval: '1h',
                start_time: '2025-01-01T00:00:00Z',
                end_time: '2025-01-01T23:59:59Z'
            });
            expect(result).toEqual(mockAggregation);
        });
        test('debe manejar errores en agregación', async ()=>{
            mockSupabaseRpc.mockResolvedValue({
                data: null,
                error: {
                    message: 'Aggregation failed'
                }
            });
            await expect(metricsCollector.getAggregatedMetrics('test.metric', '1h', '2025-01-01T00:00:00Z', '2025-01-01T23:59:59Z')).rejects.toThrow('Failed to aggregate metrics: Aggregation failed');
        });
    });
    describe('Alertas por Defecto', ()=>{
        test('debe tener alertas predefinidas configuradas', ()=>{
            // Las alertas se configuran en el constructor
            expect(true).toBe(true);
        });
        test('debe disparar alerta de response time alto', async ()=>{
            // Registrar métrica que supera el umbral (5000ms)
            await metricsCollector.recordMetric('performance.api.duration', 6000, _enterprisemetrics.MetricType.TIMER, _enterprisemetrics.BusinessMetricCategory.PERFORMANCE);
            // La alerta se dispara automáticamente
            expect(true).toBe(true);
        });
        test('debe disparar alerta de error rate alto', async ()=>{
            // Registrar métrica que supera el umbral (5%)
            await metricsCollector.recordMetric('performance.api.error_rate', 0.08, _enterprisemetrics.MetricType.GAUGE, _enterprisemetrics.BusinessMetricCategory.PERFORMANCE);
            // La alerta se dispara automáticamente
            expect(true).toBe(true);
        });
        test('debe disparar alerta de violación de seguridad', async ()=>{
            // Registrar métrica de violación
            await metricsCollector.recordMetric('security.violation', 1, _enterprisemetrics.MetricType.COUNTER, _enterprisemetrics.BusinessMetricCategory.SECURITY);
            // La alerta se dispara automáticamente
            expect(true).toBe(true);
        });
    });
    describe('Limpieza de Recursos', ()=>{
        test('debe limpiar recursos correctamente', ()=>{
            const collector = new _enterprisemetrics.EnterpriseMetricsCollector();
            // Verificar que destroy no lanza errores
            expect(()=>collector.destroy()).not.toThrow();
        });
    });
    describe('Funciones de Conveniencia', ()=>{
        test('recordPerformanceMetric debe funcionar', async ()=>{
            await expect((0, _enterprisemetrics.recordPerformanceMetric)('test_op', 100, true, {
                tag: 'value'
            })).resolves.not.toThrow();
        });
        test('recordBusinessMetric debe funcionar', async ()=>{
            await expect((0, _enterprisemetrics.recordBusinessMetric)('test_event', 1, {
                tag: 'value'
            })).resolves.not.toThrow();
        });
        test('recordSecurityMetric debe funcionar', async ()=>{
            await expect((0, _enterprisemetrics.recordSecurityMetric)('test_security', 'medium', {
                tag: 'value'
            })).resolves.not.toThrow();
        });
        test('recordUserExperienceMetric debe funcionar', async ()=>{
            await expect((0, _enterprisemetrics.recordUserExperienceMetric)('test_ux', 100, 'user-123', {
                tag: 'value'
            })).resolves.not.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,