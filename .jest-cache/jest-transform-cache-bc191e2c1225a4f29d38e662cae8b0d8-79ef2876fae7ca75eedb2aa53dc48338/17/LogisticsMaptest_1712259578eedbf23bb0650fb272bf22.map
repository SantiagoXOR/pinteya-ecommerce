{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\logistics\\components\\LogisticsMap.test.tsx"],"sourcesContent":["// =====================================================\n// TEST: LOGISTICS MAP COMPONENT\n// Descripción: Tests comprehensivos para el componente de mapa\n// Basado en: Jest + RTL + MSW\n// =====================================================\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { LogisticsMap } from '@/components/admin/logistics/LogisticsMap';\nimport { mockShipment, createMockWebSocket } from '../setup/test-config';\n\n// =====================================================\n// SETUP\n// =====================================================\n\nconst createTestQueryClient = () => new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false }\n  }\n});\n\nconst renderWithProviders = (component: React.ReactElement) => {\n  const queryClient = createTestQueryClient();\n  return render(\n    <QueryClientProvider client={queryClient}>\n      {component}\n    </QueryClientProvider>\n  );\n};\n\n// =====================================================\n// TESTS BÁSICOS\n// =====================================================\n\ndescribe('LogisticsMap Component', () => {\n  beforeEach(() => {\n    createMockWebSocket();\n  });\n\n  it('should render map container', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    expect(screen.getByText('Mapa de Logística')).toBeInTheDocument();\n    expect(screen.getByText('Tracking en tiempo real de 0 envíos')).toBeInTheDocument();\n  });\n\n  it('should display shipments count correctly', () => {\n    const shipments = [mockShipment, { ...mockShipment, id: 2 }];\n    \n    renderWithProviders(\n      <LogisticsMap shipments={shipments} />\n    );\n\n    expect(screen.getByText('Tracking en tiempo real de 2 envíos')).toBeInTheDocument();\n  });\n\n  it('should show loading state initially', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    expect(screen.getByText('Cargando mapa...')).toBeInTheDocument();\n  });\n\n  // =====================================================\n  // TESTS DE FILTROS\n  // =====================================================\n\n  it('should render filter controls', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[mockShipment]} />\n    );\n\n    // Filtro de estado\n    const comboboxes = screen.getAllByRole('combobox');\n    expect(comboboxes.length).toBeGreaterThan(0);\n    expect(comboboxes[0]).toBeInTheDocument();\n    \n    // Switches de capas\n    expect(screen.getByText('Zonas')).toBeInTheDocument();\n    expect(screen.getByText('Rutas')).toBeInTheDocument();\n  });\n\n  it('should filter shipments by status', async () => {\n    const shipments = [\n      { ...mockShipment, id: 1, status: 'in_transit' },\n      { ...mockShipment, id: 2, status: 'delivered' }\n    ];\n\n    renderWithProviders(\n      <LogisticsMap shipments={shipments} />\n    );\n\n    // Verificar que hay filtros disponibles\n    const comboboxes = screen.getAllByRole('combobox');\n    expect(comboboxes.length).toBeGreaterThan(0);\n    \n    const filterSelect = comboboxes[0]; // Usar el primer combobox\n    expect(filterSelect).toBeInTheDocument();\n    \n    // Simular interacción con el filtro\n    fireEvent.click(filterSelect);\n    \n    // Verificar que el componente sigue funcionando\n    expect(comboboxes[0]).toBeInTheDocument();\n  });\n\n  // =====================================================\n  // TESTS DE CONTROLES\n  // =====================================================\n\n  it('should have map control buttons', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    // Verificar que hay botones de control disponibles\n    const buttons = screen.getAllByRole('button');\n    expect(buttons.length).toBeGreaterThan(0);\n    \n    // Verificar que los botones son interactuables\n    buttons.forEach(button => {\n      expect(button).toBeInTheDocument();\n      expect(button).not.toBeDisabled();\n    });\n  });\n\n  it('should toggle geofences visibility', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    const switches = screen.getAllByRole('switch');\n    const geofenceSwitch = switches[1] || switches[0]; // Usar el segundo switch o el primero si solo hay uno\n    expect(geofenceSwitch).toBeInTheDocument();\n\n    fireEvent.click(geofenceSwitch);\n    // Verificar que el click fue procesado\n    expect(geofenceSwitch).toBeInTheDocument();\n  });\n\n  it('should toggle routes visibility', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    const switches = screen.getAllByRole('switch');\n    const routesSwitch = switches[0]; // Usar el primer switch disponible\n    expect(routesSwitch).toBeInTheDocument();\n\n    fireEvent.click(routesSwitch);\n    // Verificar que el click fue procesado\n    expect(routesSwitch).toBeInTheDocument();\n  });\n\n  // =====================================================\n  // TESTS DE ESTILOS DE MAPA\n  // =====================================================\n\n  it('should change map style', async () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    // Encontrar el select de estilo\n    const styleSelects = screen.getAllByRole('combobox');\n    const styleSelect = styleSelects.find(select => \n      select.getAttribute('aria-label')?.includes('style') || \n      select.closest('[data-testid]')?.getAttribute('data-testid')?.includes('style')\n    ) || styleSelects[1]; // Fallback al segundo select\n\n    if (styleSelect) {\n      fireEvent.click(styleSelect);\n\n      await waitFor(() => {\n        // Buscar opción de satélite si existe\n        const satelliteOption = screen.queryByText('Satélite') || screen.queryByText('satellite');\n        if (satelliteOption) {\n          fireEvent.click(satelliteOption);\n        }\n      });\n\n      // Verificar que el select sigue siendo válido después del cambio\n      expect(styleSelect).toBeInTheDocument();\n    }\n  });\n\n  // =====================================================\n  // TESTS DE TIEMPO REAL\n  // =====================================================\n\n  it('should show real-time badge when enabled', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} realTimeEnabled={true} />\n    );\n\n    expect(screen.getByText('Tiempo Real')).toBeInTheDocument();\n  });\n\n  it('should not show real-time badge when disabled', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} realTimeEnabled={false} />\n    );\n\n    expect(screen.queryByText('Tiempo Real')).not.toBeInTheDocument();\n  });\n\n  // =====================================================\n  // TESTS DE SELECCIÓN DE ENVÍOS\n  // =====================================================\n\n  it('should call onShipmentSelect when shipment is selected', () => {\n    const onShipmentSelect = jest.fn();\n    \n    renderWithProviders(\n      <LogisticsMap \n        shipments={[mockShipment]} \n        onShipmentSelect={onShipmentSelect}\n      />\n    );\n\n    // Simular click en el mapa (esto normalmente sería manejado por MapLibre)\n    // Como MapLibre está mockeado, simulamos el comportamiento\n    const mapContainer = document.querySelector('[data-testid=\"map-container\"]') || \n                        document.querySelector('.maplibregl-map');\n    \n    if (mapContainer) {\n      fireEvent.click(mapContainer);\n      // En un test real, esto triggearía el evento de MapLibre\n      // que llamaría a onShipmentSelect\n    }\n  });\n\n  // =====================================================\n  // TESTS DE LEYENDA\n  // =====================================================\n\n  it('should display map legend', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    expect(screen.getByText('En Tránsito')).toBeInTheDocument();\n    expect(screen.getByText('En Reparto')).toBeInTheDocument();\n    expect(screen.getByText('Entregado')).toBeInTheDocument();\n  });\n\n  // =====================================================\n  // TESTS DE RESPONSIVE\n  // =====================================================\n\n  it('should be responsive', () => {\n    const { container } = renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    const mapCard = container.querySelector('.relative');\n    expect(mapCard).toHaveClass('relative');\n  });\n\n  // =====================================================\n  // TESTS DE ACCESIBILIDAD\n  // =====================================================\n\n  it('should have proper ARIA labels', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    // Verificar que los controles están presentes y son accesibles\n    const switches = screen.getAllByRole('switch');\n    expect(switches.length).toBeGreaterThan(0);\n    \n    switches.forEach(switchElement => {\n      // Verificar que el switch es interactuable\n      expect(switchElement).toBeInTheDocument();\n      expect(switchElement).not.toBeDisabled();\n    });\n  });\n\n  it('should support keyboard navigation', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    const filterSelect = screen.getAllByRole('combobox')[0];\n    \n    // Verificar que es focuseable\n    filterSelect.focus();\n    expect(filterSelect).toHaveFocus();\n\n    // Simular navegación con teclado\n    fireEvent.keyDown(filterSelect, { key: 'ArrowDown' });\n    fireEvent.keyDown(filterSelect, { key: 'Enter' });\n  });\n\n  // =====================================================\n  // TESTS DE ERROR HANDLING\n  // =====================================================\n\n  it('should handle empty shipments gracefully', () => {\n    renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    expect(screen.getByText('Tracking en tiempo real de 0 envíos')).toBeInTheDocument();\n  });\n\n  it('should handle invalid shipment data', () => {\n    const invalidShipments = [\n      { ...mockShipment, id: null },\n      { ...mockShipment, status: 'invalid_status' }\n    ] as any;\n\n    expect(() => {\n      renderWithProviders(\n        <LogisticsMap shipments={invalidShipments} />\n      );\n    }).not.toThrow();\n  });\n\n  // =====================================================\n  // TESTS DE PERFORMANCE\n  // =====================================================\n\n  it('should handle large number of shipments', () => {\n    const manyShipments = Array.from({ length: 1000 }, (_, i) => ({\n      ...mockShipment,\n      id: i + 1,\n      shipment_number: `SHP-${i + 1}`\n    }));\n\n    const startTime = performance.now();\n    \n    renderWithProviders(\n      <LogisticsMap shipments={manyShipments} />\n    );\n\n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n\n    // Verificar que el render no tome más de 1 segundo\n    expect(renderTime).toBeLessThan(1000);\n    \n    expect(screen.getByText('Tracking en tiempo real de 1000 envíos')).toBeInTheDocument();\n  });\n\n  // =====================================================\n  // TESTS DE CLEANUP\n  // =====================================================\n\n  it('should cleanup resources on unmount', () => {\n    const { unmount } = renderWithProviders(\n      <LogisticsMap shipments={[]} />\n    );\n\n    // Verificar que no hay memory leaks\n    expect(() => unmount()).not.toThrow();\n  });\n});\n"],"names":["createTestQueryClient","QueryClient","defaultOptions","queries","retry","mutations","renderWithProviders","component","queryClient","render","QueryClientProvider","client","describe","beforeEach","createMockWebSocket","it","LogisticsMap","shipments","expect","screen","getByText","toBeInTheDocument","mockShipment","id","comboboxes","getAllByRole","length","toBeGreaterThan","status","filterSelect","fireEvent","click","buttons","forEach","button","not","toBeDisabled","switches","geofenceSwitch","routesSwitch","styleSelects","styleSelect","find","select","getAttribute","includes","closest","waitFor","satelliteOption","queryByText","realTimeEnabled","onShipmentSelect","jest","fn","mapContainer","document","querySelector","container","mapCard","toHaveClass","switchElement","focus","toHaveFocus","keyDown","key","invalidShipments","toThrow","manyShipments","Array","from","_","i","shipment_number","startTime","performance","now","endTime","renderTime","toBeLessThan","unmount"],"mappings":"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"}