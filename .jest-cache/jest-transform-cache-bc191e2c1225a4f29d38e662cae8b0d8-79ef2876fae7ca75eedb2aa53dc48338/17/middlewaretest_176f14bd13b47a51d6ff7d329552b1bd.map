{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\middleware.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - MIDDLEWARE CONSERVADOR (VERSIÓN ESTABLE)\n// ===================================\n// Implementación conservadora que mantiene la estructura original\n// pero con mejoras mínimas y compatibilidad garantizada\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\nimport { createClerkClient } from '@clerk/nextjs/server';\n\n// ===================================\n// DEFINICIÓN DE RUTAS\n// ===================================\n\n// Rutas que requieren autenticación admin\nconst isAdminRoute = createRouteMatcher([\n  '/api/admin(.*)',\n  '/admin(.*)'\n]);\n\n// Rutas públicas que NO requieren autenticación\nconst isPublicRoute = createRouteMatcher([\n  '/',\n  '/shop(.*)',\n  '/search(.*)',\n  '/product(.*)',\n  '/category(.*)',\n  '/about',\n  '/contact',\n  '/signin(.*)',\n  '/signup(.*)',\n  '/sso-callback(.*)',\n  // APIs públicas\n  '/api/products(.*)',\n  '/api/categories(.*)',\n  '/api/test(.*)',\n  '/api/payments/create-preference',\n  '/api/payments/webhook',\n  '/api/payments/status',\n  '/api/auth/webhook',\n  '/api/webhooks(.*)',\n  '/api/debug(.*)',\n  '/api/analytics(.*)'\n]);\n\n// Rutas que deben ser completamente excluidas del middleware\nconst isExcludedRoute = createRouteMatcher([\n  '/api/auth/webhook',\n  '/api/webhooks(.*)',\n  '/api/webhooks/clerk'\n]);\n\n// ===================================\n// MIDDLEWARE PRINCIPAL CONSERVADOR\n// ===================================\n\nexport default clerkMiddleware(async (auth, request) => {\n  const { pathname } = request.nextUrl;\n\n  // Redirección de /my-account a /admin (mantener compatibilidad)\n  if (pathname.startsWith('/my-account')) {\n    const adminUrl = new URL('/admin', request.url);\n    return NextResponse.redirect(adminUrl, { status: 302 });\n  }\n\n  // Exclusión total para rutas que causan recursión\n  if (isExcludedRoute(request)) {\n    return NextResponse.next();\n  }\n\n  // Skip inmediato para rutas estáticas (performance crítico)\n  if (\n    pathname.startsWith('/_next') ||\n    pathname.startsWith('/favicon') ||\n    pathname.includes('.') ||\n    pathname === '/robots.txt' ||\n    pathname === '/sitemap.xml' ||\n    pathname === '/_not-found'\n  ) {\n    return NextResponse.next();\n  }\n\n  // Skip inmediato para webhooks (CRÍTICO para producción)\n  if (pathname.startsWith('/api/webhooks/')) {\n    return NextResponse.next();\n  }\n\n  // ===================================\n  // PROTECCIÓN DE RUTAS ADMIN (CONSERVADORA)\n  // ===================================\n\n  if (isAdminRoute(request)) {\n    const { userId, sessionClaims, redirectToSignIn } = await auth();\n\n    if (!session?.user) {\n      return redirectToSignIn();\n    }\n\n    // Verificación robusta de roles con fallback a Clerk API\n    const publicRole = sessionClaims?.publicMetadata?.role as string;\n    const privateRole = sessionClaims?.privateMetadata?.role as string;\n\n    let isAdmin = publicRole === 'admin' || privateRole === 'admin';\n\n    // Si sessionClaims no tiene el rol, verificar directamente con Clerk\n    if (!isAdmin) {\n      try {\n        const clerkClient = createClerkClient({\n          secretKey: process.env.CLERK_SECRET_KEY!\n        });\n        const clerkUser = await clerkClient.users.getUser(userId);\n        const userPublicRole = clerkUser.publicMetadata?.role as string;\n        const userPrivateRole = clerkUser.privateMetadata?.role as string;\n\n        isAdmin = userPublicRole === 'admin' || userPrivateRole === 'admin';\n      } catch (error) {\n        console.error(`[MIDDLEWARE] Error verificando con Clerk API:`, error);\n      }\n    }\n\n    if (!isAdmin) {\n      // Redirigir a homepage\n      return NextResponse.redirect(new URL('/', request.url));\n    }\n\n    return NextResponse.next();\n  }\n\n  // ===================================\n  // RUTAS PÚBLICAS Y OTRAS PROTEGIDAS\n  // ===================================\n\n  // Permitir rutas públicas sin verificación adicional\n  if (isPublicRoute(request)) {\n    return NextResponse.next();\n  }\n\n  // Para otras rutas protegidas, verificar autenticación básica\n  const { userId, redirectToSignIn } = await auth();\n  if (!session?.user) {\n    return redirectToSignIn();\n  }\n\n  return NextResponse.next();\n});\n\n// ===================================\n// CONFIGURACIÓN DEL MATCHER (CONSERVADORA)\n// ===================================\n\nexport const config = {\n  matcher: [\n    // Incluir todas las rutas excepto archivos estáticos Y rutas excluidas\n    '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)|api/auth/webhook|api/webhooks/clerk).*)',\n    // Procesar rutas API EXCEPTO las que causan recursión\n    '/(api|trpc)/((?!auth/webhook|webhooks/clerk).*)',\n  ],\n};\n"],"names":["config","isAdminRoute","createRouteMatcher","isPublicRoute","isExcludedRoute","clerkMiddleware","auth","request","pathname","nextUrl","startsWith","adminUrl","URL","url","NextResponse","redirect","status","next","includes","userId","sessionClaims","redirectToSignIn","session","user","publicRole","publicMetadata","role","privateRole","privateMetadata","isAdmin","clerkClient","createClerkClient","secretKey","process","env","CLERK_SECRET_KEY","clerkUser","users","getUser","userPublicRole","userPrivateRole","error","console","matcher"],"mappings":"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"}