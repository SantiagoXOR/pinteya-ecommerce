181533ca858a0ac8f326372e59965f75
/**
 * Hook personalizado para Analytics en Pinteya E-commerce
 * Proporciona funciones de tracking y métricas fáciles de usar
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useAnalytics () {
        return useAnalytics;
    },
    get useComponentTracking () {
        return useComponentTracking;
    },
    get useRealTimeMetrics () {
        return useRealTimeMetrics;
    }
});
const _react = require("react");
const _useAuth = require("./useAuth");
const _navigation = require("next/navigation");
const _analytics = require("../lib/analytics");
const useAnalytics = ()=>{
    const { user } = (0, _useAuth.useAuth)();
    const pathname = (0, _navigation.usePathname)();
    const [isEnabled, setIsEnabled] = (0, _react.useState)(true);
    const [sessionMetrics, setSessionMetrics] = (0, _react.useState)({
        cartAdditions: 0,
        cartRemovals: 0,
        checkoutStarts: 0,
        checkoutCompletions: 0,
        productViews: 0,
        categoryViews: 0,
        searchQueries: 0,
        conversionRate: 0,
        averageOrderValue: 0,
        cartAbandonmentRate: 0
    });
    // Track page views automáticamente cuando cambia la ruta
    (0, _react.useEffect)(()=>{
        if (isEnabled) {
            _analytics.analytics.trackPageView(pathname);
        }
    }, [
        pathname,
        isEnabled
    ]);
    // Actualizar métricas periódicamente
    (0, _react.useEffect)(()=>{
        const updateMetrics = ()=>{
            setSessionMetrics(_analytics.analytics.getConversionMetrics());
        };
        updateMetrics();
        const interval = setInterval(updateMetrics, 5000); // Actualizar cada 5 segundos
        return ()=>clearInterval(interval);
    }, []);
    // Habilitar/deshabilitar analytics
    (0, _react.useEffect)(()=>{
        if (isEnabled) {
            _analytics.analytics.enable();
        } else {
            _analytics.analytics.disable();
        }
    }, [
        isEnabled
    ]);
    const trackEvent = (0, _react.useCallback)((event, category, action, label, value, metadata)=>{
        if (!isEnabled) return;
        const enrichedMetadata = {
            ...metadata,
            userId: user?.id,
            userEmail: user?.emailAddresses?.[0]?.emailAddress
        };
        optimizedAnalytics.trackEvent(event, category, action, label, value, enrichedMetadata);
    }, [
        isEnabled,
        user
    ]);
    const trackEcommerceEvent = (0, _react.useCallback)((action, data)=>{
        if (!isEnabled) return;
        const enrichedData = {
            ...data,
            userId: user?.id,
            userEmail: user?.emailAddresses?.[0]?.emailAddress
        };
        _analytics.analytics.trackEcommerceEvent(action, enrichedData);
    }, [
        isEnabled,
        user
    ]);
    const trackPageView = (0, _react.useCallback)((page)=>{
        if (!isEnabled) return;
        _analytics.analytics.trackPageView(page);
    }, [
        isEnabled
    ]);
    const trackConversion = (0, _react.useCallback)((type, value, metadata)=>{
        if (!isEnabled) return;
        const enrichedMetadata = {
            ...metadata,
            userId: user?.id
        };
        _analytics.analytics.trackConversion(type, value, enrichedMetadata);
    }, [
        isEnabled,
        user
    ]);
    // Funciones específicas para e-commerce
    const trackProductView = (0, _react.useCallback)((productId, productName, category, price)=>{
        trackEcommerceEvent('view_item', {
            item_id: productId,
            item_name: productName,
            item_category: category,
            price: price,
            currency: 'ARS'
        });
    }, [
        trackEcommerceEvent
    ]);
    const trackAddToCart = (0, _react.useCallback)((productId, productName, price, quantity)=>{
        trackEcommerceEvent('add_to_cart', {
            item_id: productId,
            item_name: productName,
            price: price,
            quantity: quantity,
            currency: 'ARS',
            value: price * quantity
        });
    }, [
        trackEcommerceEvent
    ]);
    const trackRemoveFromCart = (0, _react.useCallback)((productId, productName)=>{
        trackEcommerceEvent('remove_from_cart', {
            item_id: productId,
            item_name: productName
        });
    }, [
        trackEcommerceEvent
    ]);
    const trackCheckoutStart = (0, _react.useCallback)((cartValue, itemCount)=>{
        trackEcommerceEvent('begin_checkout', {
            value: cartValue,
            currency: 'ARS',
            num_items: itemCount
        });
    }, [
        trackEcommerceEvent
    ]);
    const trackPurchase = (0, _react.useCallback)((orderId, value, items)=>{
        trackEcommerceEvent('purchase', {
            transaction_id: orderId,
            value: value,
            currency: 'ARS',
            items: items
        });
        // También trackear como conversión
        trackConversion('purchase', value, {
            orderId,
            itemCount: items.length
        });
    }, [
        trackEcommerceEvent,
        trackConversion
    ]);
    const trackSearch = (0, _react.useCallback)((query, resultsCount)=>{
        trackEcommerceEvent('search', {
            search_term: query,
            results_count: resultsCount
        });
    }, [
        trackEcommerceEvent
    ]);
    const getEvents = (0, _react.useCallback)(()=>{
        return _analytics.analytics.getEvents();
    }, []);
    const getInteractions = (0, _react.useCallback)(()=>{
        return _analytics.analytics.getInteractions();
    }, []);
    const getConversionMetrics = (0, _react.useCallback)(()=>{
        return _analytics.analytics.getConversionMetrics();
    }, []);
    const getSessionId = (0, _react.useCallback)(()=>{
        return _analytics.analytics.getSessionId();
    }, []);
    const refreshMetrics = (0, _react.useCallback)(()=>{
        setSessionMetrics(_analytics.analytics.getConversionMetrics());
    }, []);
    const setEnabled = (0, _react.useCallback)((enabled)=>{
        setIsEnabled(enabled);
    }, []);
    return {
        // Tracking functions
        trackEvent,
        trackEcommerceEvent,
        trackPageView,
        trackConversion,
        trackProductView,
        trackAddToCart,
        trackRemoveFromCart,
        trackCheckoutStart,
        trackPurchase,
        trackSearch,
        // Data retrieval
        getEvents,
        getInteractions,
        getConversionMetrics,
        getSessionId,
        // State
        isEnabled,
        setEnabled,
        // Real-time metrics
        sessionMetrics,
        refreshMetrics
    };
};
const useRealTimeMetrics = (refreshInterval = 5000)=>{
    const [metrics, setMetrics] = (0, _react.useState)({
        cartAdditions: 0,
        cartRemovals: 0,
        checkoutStarts: 0,
        checkoutCompletions: 0,
        productViews: 0,
        categoryViews: 0,
        searchQueries: 0,
        conversionRate: 0,
        averageOrderValue: 0,
        cartAbandonmentRate: 0
    });
    (0, _react.useEffect)(()=>{
        const updateMetrics = ()=>{
            setMetrics(_analytics.analytics.getConversionMetrics());
        };
        updateMetrics();
        const interval = setInterval(updateMetrics, refreshInterval);
        return ()=>clearInterval(interval);
    }, [
        refreshInterval
    ]);
    return metrics;
};
const useComponentTracking = (componentName, trackMount = true)=>{
    const { trackEvent } = useOptimizedAnalytics();
    (0, _react.useEffect)(()=>{
        if (trackMount) {
            trackEvent('component_mount', 'ui', 'mount', componentName);
        }
        return ()=>{
            trackEvent('component_unmount', 'ui', 'unmount', componentName);
        };
    }, [
        componentName,
        trackMount,
        trackEvent
    ]);
    const trackComponentEvent = (0, _react.useCallback)((action, metadata)=>{
        trackEvent('component_interaction', 'ui', action, componentName, undefined, metadata);
    }, [
        componentName,
        trackEvent
    ]);
    return {
        trackComponentEvent
    };
};

//# sourceMappingURL=data:application/json;base64,