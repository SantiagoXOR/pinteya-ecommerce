2f856aa7e692cf13e5d2a8d2dbc871be
// =====================================================
// TEST: LOGISTICS MAP COMPONENT
// Descripción: Tests comprehensivos para el componente de mapa
// Basado en: Jest + RTL + MSW
// =====================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _LogisticsMap = require("../../../src/components/admin/logistics/LogisticsMap");
const _testconfig = require("../setup/test-config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// =====================================================
// SETUP
// =====================================================
const createTestQueryClient = ()=>new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
const renderWithProviders = (component)=>{
    const queryClient = createTestQueryClient();
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: component
    }));
};
// =====================================================
// TESTS BÁSICOS
// =====================================================
describe('LogisticsMap Component', ()=>{
    beforeEach(()=>{
        (0, _testconfig.createMockWebSocket)();
    });
    it('should render map container', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('Mapa de Logística')).toBeInTheDocument();
        expect(_react1.screen.getByText('Tracking en tiempo real de 0 envíos')).toBeInTheDocument();
    });
    it('should display shipments count correctly', ()=>{
        const shipments = [
            _testconfig.mockShipment,
            {
                ..._testconfig.mockShipment,
                id: 2
            }
        ];
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: shipments
        }));
        expect(_react1.screen.getByText('Tracking en tiempo real de 2 envíos')).toBeInTheDocument();
    });
    it('should show loading state initially', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('Cargando mapa...')).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE FILTROS
    // =====================================================
    it('should render filter controls', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [
                _testconfig.mockShipment
            ]
        }));
        // Filtro de estado
        const comboboxes = _react1.screen.getAllByRole('combobox');
        expect(comboboxes.length).toBeGreaterThan(0);
        expect(comboboxes[0]).toBeInTheDocument();
        // Switches de capas
        expect(_react1.screen.getByText('Zonas')).toBeInTheDocument();
        expect(_react1.screen.getByText('Rutas')).toBeInTheDocument();
    });
    it('should filter shipments by status', async ()=>{
        const shipments = [
            {
                ..._testconfig.mockShipment,
                id: 1,
                status: 'in_transit'
            },
            {
                ..._testconfig.mockShipment,
                id: 2,
                status: 'delivered'
            }
        ];
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: shipments
        }));
        // Verificar que hay filtros disponibles
        const comboboxes = _react1.screen.getAllByRole('combobox');
        expect(comboboxes.length).toBeGreaterThan(0);
        const filterSelect = comboboxes[0]; // Usar el primer combobox
        expect(filterSelect).toBeInTheDocument();
        // Simular interacción con el filtro
        _react1.fireEvent.click(filterSelect);
        // Verificar que el componente sigue funcionando
        expect(comboboxes[0]).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE CONTROLES
    // =====================================================
    it('should have map control buttons', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Verificar que hay botones de control disponibles
        const buttons = _react1.screen.getAllByRole('button');
        expect(buttons.length).toBeGreaterThan(0);
        // Verificar que los botones son interactuables
        buttons.forEach((button)=>{
            expect(button).toBeInTheDocument();
            expect(button).not.toBeDisabled();
        });
    });
    it('should toggle geofences visibility', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const switches = _react1.screen.getAllByRole('switch');
        const geofenceSwitch = switches[1] || switches[0]; // Usar el segundo switch o el primero si solo hay uno
        expect(geofenceSwitch).toBeInTheDocument();
        _react1.fireEvent.click(geofenceSwitch);
        // Verificar que el click fue procesado
        expect(geofenceSwitch).toBeInTheDocument();
    });
    it('should toggle routes visibility', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const switches = _react1.screen.getAllByRole('switch');
        const routesSwitch = switches[0]; // Usar el primer switch disponible
        expect(routesSwitch).toBeInTheDocument();
        _react1.fireEvent.click(routesSwitch);
        // Verificar que el click fue procesado
        expect(routesSwitch).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE ESTILOS DE MAPA
    // =====================================================
    it('should change map style', async ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Encontrar el select de estilo
        const styleSelects = _react1.screen.getAllByRole('combobox');
        const styleSelect = styleSelects.find((select)=>select.getAttribute('aria-label')?.includes('style') || select.closest('[data-testid]')?.getAttribute('data-testid')?.includes('style')) || styleSelects[1]; // Fallback al segundo select
        if (styleSelect) {
            _react1.fireEvent.click(styleSelect);
            await (0, _react1.waitFor)(()=>{
                // Buscar opción de satélite si existe
                const satelliteOption = _react1.screen.queryByText('Satélite') || _react1.screen.queryByText('satellite');
                if (satelliteOption) {
                    _react1.fireEvent.click(satelliteOption);
                }
            });
            // Verificar que el select sigue siendo válido después del cambio
            expect(styleSelect).toBeInTheDocument();
        }
    });
    // =====================================================
    // TESTS DE TIEMPO REAL
    // =====================================================
    it('should show real-time badge when enabled', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [],
            realTimeEnabled: true
        }));
        expect(_react1.screen.getByText('Tiempo Real')).toBeInTheDocument();
    });
    it('should not show real-time badge when disabled', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [],
            realTimeEnabled: false
        }));
        expect(_react1.screen.queryByText('Tiempo Real')).not.toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE SELECCIÓN DE ENVÍOS
    // =====================================================
    it('should call onShipmentSelect when shipment is selected', ()=>{
        const onShipmentSelect = jest.fn();
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [
                _testconfig.mockShipment
            ],
            onShipmentSelect: onShipmentSelect
        }));
        // Simular click en el mapa (esto normalmente sería manejado por MapLibre)
        // Como MapLibre está mockeado, simulamos el comportamiento
        const mapContainer = document.querySelector('[data-testid="map-container"]') || document.querySelector('.maplibregl-map');
        if (mapContainer) {
            _react1.fireEvent.click(mapContainer);
        // En un test real, esto triggearía el evento de MapLibre
        // que llamaría a onShipmentSelect
        }
    });
    // =====================================================
    // TESTS DE LEYENDA
    // =====================================================
    it('should display map legend', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('En Tránsito')).toBeInTheDocument();
        expect(_react1.screen.getByText('En Reparto')).toBeInTheDocument();
        expect(_react1.screen.getByText('Entregado')).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE RESPONSIVE
    // =====================================================
    it('should be responsive', ()=>{
        const { container } = renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const mapCard = container.querySelector('.relative');
        expect(mapCard).toHaveClass('relative');
    });
    // =====================================================
    // TESTS DE ACCESIBILIDAD
    // =====================================================
    it('should have proper ARIA labels', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Verificar que los controles están presentes y son accesibles
        const switches = _react1.screen.getAllByRole('switch');
        expect(switches.length).toBeGreaterThan(0);
        switches.forEach((switchElement)=>{
            // Verificar que el switch es interactuable
            expect(switchElement).toBeInTheDocument();
            expect(switchElement).not.toBeDisabled();
        });
    });
    it('should support keyboard navigation', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const filterSelect = _react1.screen.getAllByRole('combobox')[0];
        // Verificar que es focuseable
        filterSelect.focus();
        expect(filterSelect).toHaveFocus();
        // Simular navegación con teclado
        _react1.fireEvent.keyDown(filterSelect, {
            key: 'ArrowDown'
        });
        _react1.fireEvent.keyDown(filterSelect, {
            key: 'Enter'
        });
    });
    // =====================================================
    // TESTS DE ERROR HANDLING
    // =====================================================
    it('should handle empty shipments gracefully', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('Tracking en tiempo real de 0 envíos')).toBeInTheDocument();
    });
    it('should handle invalid shipment data', ()=>{
        const invalidShipments = [
            {
                ..._testconfig.mockShipment,
                id: null
            },
            {
                ..._testconfig.mockShipment,
                status: 'invalid_status'
            }
        ];
        expect(()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
                shipments: invalidShipments
            }));
        }).not.toThrow();
    });
    // =====================================================
    // TESTS DE PERFORMANCE
    // =====================================================
    it('should handle large number of shipments', ()=>{
        const manyShipments = Array.from({
            length: 1000
        }, (_, i)=>({
                ..._testconfig.mockShipment,
                id: i + 1,
                shipment_number: `SHP-${i + 1}`
            }));
        const startTime = performance.now();
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: manyShipments
        }));
        const endTime = performance.now();
        const renderTime = endTime - startTime;
        // Verificar que el render no tome más de 1 segundo
        expect(renderTime).toBeLessThan(1000);
        expect(_react1.screen.getByText('Tracking en tiempo real de 1000 envíos')).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE CLEANUP
    // =====================================================
    it('should cleanup resources on unmount', ()=>{
        const { unmount } = renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Verificar que no hay memory leaks
        expect(()=>unmount()).not.toThrow();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXF9fdGVzdHNfX1xcbG9naXN0aWNzXFxjb21wb25lbnRzXFxMb2dpc3RpY3NNYXAudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFRFU1Q6IExPR0lTVElDUyBNQVAgQ09NUE9ORU5UXG4vLyBEZXNjcmlwY2nDs246IFRlc3RzIGNvbXByZWhlbnNpdm9zIHBhcmEgZWwgY29tcG9uZW50ZSBkZSBtYXBhXG4vLyBCYXNhZG8gZW46IEplc3QgKyBSVEwgKyBNU1dcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgeyBMb2dpc3RpY3NNYXAgfSBmcm9tICdAL2NvbXBvbmVudHMvYWRtaW4vbG9naXN0aWNzL0xvZ2lzdGljc01hcCc7XG5pbXBvcnQgeyBtb2NrU2hpcG1lbnQsIGNyZWF0ZU1vY2tXZWJTb2NrZXQgfSBmcm9tICcuLi9zZXR1cC90ZXN0LWNvbmZpZyc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBTRVRVUFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuY29uc3QgY3JlYXRlVGVzdFF1ZXJ5Q2xpZW50ID0gKCkgPT4gbmV3IFF1ZXJ5Q2xpZW50KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBxdWVyaWVzOiB7IHJldHJ5OiBmYWxzZSB9LFxuICAgIG11dGF0aW9uczogeyByZXRyeTogZmFsc2UgfVxuICB9XG59KTtcblxuY29uc3QgcmVuZGVyV2l0aFByb3ZpZGVycyA9IChjb21wb25lbnQ6IFJlYWN0LlJlYWN0RWxlbWVudCkgPT4ge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IGNyZWF0ZVRlc3RRdWVyeUNsaWVudCgpO1xuICByZXR1cm4gcmVuZGVyKFxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAge2NvbXBvbmVudH1cbiAgICA8L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gICk7XG59O1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVEVTVFMgQsOBU0lDT1Ncbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmRlc2NyaWJlKCdMb2dpc3RpY3NNYXAgQ29tcG9uZW50JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjcmVhdGVNb2NrV2ViU29ja2V0KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIG1hcCBjb250YWluZXInLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXtbXX0gLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ01hcGEgZGUgTG9nw61zdGljYScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUcmFja2luZyBlbiB0aWVtcG8gcmVhbCBkZSAwIGVudsOtb3MnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IHNoaXBtZW50cyBjb3VudCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3Qgc2hpcG1lbnRzID0gW21vY2tTaGlwbWVudCwgeyAuLi5tb2NrU2hpcG1lbnQsIGlkOiAyIH1dO1xuICAgIFxuICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8TG9naXN0aWNzTWFwIHNoaXBtZW50cz17c2hpcG1lbnRzfSAvPlxuICAgICk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVHJhY2tpbmcgZW4gdGllbXBvIHJlYWwgZGUgMiBlbnbDrW9zJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2hvdyBsb2FkaW5nIHN0YXRlIGluaXRpYWxseScsICgpID0+IHtcbiAgICByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExvZ2lzdGljc01hcCBzaGlwbWVudHM9e1tdfSAvPlxuICAgICk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ2FyZ2FuZG8gbWFwYS4uLicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBURVNUUyBERSBGSUxUUk9TXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgZmlsdGVyIGNvbnRyb2xzJywgKCkgPT4ge1xuICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8TG9naXN0aWNzTWFwIHNoaXBtZW50cz17W21vY2tTaGlwbWVudF19IC8+XG4gICAgKTtcblxuICAgIC8vIEZpbHRybyBkZSBlc3RhZG9cbiAgICBjb25zdCBjb21ib2JveGVzID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnY29tYm9ib3gnKTtcbiAgICBleHBlY3QoY29tYm9ib3hlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QoY29tYm9ib3hlc1swXSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBcbiAgICAvLyBTd2l0Y2hlcyBkZSBjYXBhc1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdab25hcycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdSdXRhcycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpbHRlciBzaGlwbWVudHMgYnkgc3RhdHVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBtZW50cyA9IFtcbiAgICAgIHsgLi4ubW9ja1NoaXBtZW50LCBpZDogMSwgc3RhdHVzOiAnaW5fdHJhbnNpdCcgfSxcbiAgICAgIHsgLi4ubW9ja1NoaXBtZW50LCBpZDogMiwgc3RhdHVzOiAnZGVsaXZlcmVkJyB9XG4gICAgXTtcblxuICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8TG9naXN0aWNzTWFwIHNoaXBtZW50cz17c2hpcG1lbnRzfSAvPlxuICAgICk7XG5cbiAgICAvLyBWZXJpZmljYXIgcXVlIGhheSBmaWx0cm9zIGRpc3BvbmlibGVzXG4gICAgY29uc3QgY29tYm9ib3hlcyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2NvbWJvYm94Jyk7XG4gICAgZXhwZWN0KGNvbWJvYm94ZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgXG4gICAgY29uc3QgZmlsdGVyU2VsZWN0ID0gY29tYm9ib3hlc1swXTsgLy8gVXNhciBlbCBwcmltZXIgY29tYm9ib3hcbiAgICBleHBlY3QoZmlsdGVyU2VsZWN0KS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIFxuICAgIC8vIFNpbXVsYXIgaW50ZXJhY2Npw7NuIGNvbiBlbCBmaWx0cm9cbiAgICBmaXJlRXZlbnQuY2xpY2soZmlsdGVyU2VsZWN0KTtcbiAgICBcbiAgICAvLyBWZXJpZmljYXIgcXVlIGVsIGNvbXBvbmVudGUgc2lndWUgZnVuY2lvbmFuZG9cbiAgICBleHBlY3QoY29tYm9ib3hlc1swXSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gVEVTVFMgREUgQ09OVFJPTEVTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIG1hcCBjb250cm9sIGJ1dHRvbnMnLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXtbXX0gLz5cbiAgICApO1xuXG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBoYXkgYm90b25lcyBkZSBjb250cm9sIGRpc3BvbmlibGVzXG4gICAgY29uc3QgYnV0dG9ucyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2J1dHRvbicpO1xuICAgIGV4cGVjdChidXR0b25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIFxuICAgIC8vIFZlcmlmaWNhciBxdWUgbG9zIGJvdG9uZXMgc29uIGludGVyYWN0dWFibGVzXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBleHBlY3QoYnV0dG9uKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KGJ1dHRvbikubm90LnRvQmVEaXNhYmxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRvZ2dsZSBnZW9mZW5jZXMgdmlzaWJpbGl0eScsICgpID0+IHtcbiAgICByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExvZ2lzdGljc01hcCBzaGlwbWVudHM9e1tdfSAvPlxuICAgICk7XG5cbiAgICBjb25zdCBzd2l0Y2hlcyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ3N3aXRjaCcpO1xuICAgIGNvbnN0IGdlb2ZlbmNlU3dpdGNoID0gc3dpdGNoZXNbMV0gfHwgc3dpdGNoZXNbMF07IC8vIFVzYXIgZWwgc2VndW5kbyBzd2l0Y2ggbyBlbCBwcmltZXJvIHNpIHNvbG8gaGF5IHVub1xuICAgIGV4cGVjdChnZW9mZW5jZVN3aXRjaCkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIGZpcmVFdmVudC5jbGljayhnZW9mZW5jZVN3aXRjaCk7XG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBlbCBjbGljayBmdWUgcHJvY2VzYWRvXG4gICAgZXhwZWN0KGdlb2ZlbmNlU3dpdGNoKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRvZ2dsZSByb3V0ZXMgdmlzaWJpbGl0eScsICgpID0+IHtcbiAgICByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExvZ2lzdGljc01hcCBzaGlwbWVudHM9e1tdfSAvPlxuICAgICk7XG5cbiAgICBjb25zdCBzd2l0Y2hlcyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ3N3aXRjaCcpO1xuICAgIGNvbnN0IHJvdXRlc1N3aXRjaCA9IHN3aXRjaGVzWzBdOyAvLyBVc2FyIGVsIHByaW1lciBzd2l0Y2ggZGlzcG9uaWJsZVxuICAgIGV4cGVjdChyb3V0ZXNTd2l0Y2gpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICBmaXJlRXZlbnQuY2xpY2socm91dGVzU3dpdGNoKTtcbiAgICAvLyBWZXJpZmljYXIgcXVlIGVsIGNsaWNrIGZ1ZSBwcm9jZXNhZG9cbiAgICBleHBlY3Qocm91dGVzU3dpdGNoKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBURVNUUyBERSBFU1RJTE9TIERFIE1BUEFcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBpdCgnc2hvdWxkIGNoYW5nZSBtYXAgc3R5bGUnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXtbXX0gLz5cbiAgICApO1xuXG4gICAgLy8gRW5jb250cmFyIGVsIHNlbGVjdCBkZSBlc3RpbG9cbiAgICBjb25zdCBzdHlsZVNlbGVjdHMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdjb21ib2JveCcpO1xuICAgIGNvbnN0IHN0eWxlU2VsZWN0ID0gc3R5bGVTZWxlY3RzLmZpbmQoc2VsZWN0ID0+IFxuICAgICAgc2VsZWN0LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpPy5pbmNsdWRlcygnc3R5bGUnKSB8fCBcbiAgICAgIHNlbGVjdC5jbG9zZXN0KCdbZGF0YS10ZXN0aWRdJyk/LmdldEF0dHJpYnV0ZSgnZGF0YS10ZXN0aWQnKT8uaW5jbHVkZXMoJ3N0eWxlJylcbiAgICApIHx8IHN0eWxlU2VsZWN0c1sxXTsgLy8gRmFsbGJhY2sgYWwgc2VndW5kbyBzZWxlY3RcblxuICAgIGlmIChzdHlsZVNlbGVjdCkge1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHN0eWxlU2VsZWN0KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIC8vIEJ1c2NhciBvcGNpw7NuIGRlIHNhdMOpbGl0ZSBzaSBleGlzdGVcbiAgICAgICAgY29uc3Qgc2F0ZWxsaXRlT3B0aW9uID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KCdTYXTDqWxpdGUnKSB8fCBzY3JlZW4ucXVlcnlCeVRleHQoJ3NhdGVsbGl0ZScpO1xuICAgICAgICBpZiAoc2F0ZWxsaXRlT3B0aW9uKSB7XG4gICAgICAgICAgZmlyZUV2ZW50LmNsaWNrKHNhdGVsbGl0ZU9wdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIGVsIHNlbGVjdCBzaWd1ZSBzaWVuZG8gdsOhbGlkbyBkZXNwdcOpcyBkZWwgY2FtYmlvXG4gICAgICBleHBlY3Qoc3R5bGVTZWxlY3QpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfVxuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBURVNUUyBERSBUSUVNUE8gUkVBTFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGl0KCdzaG91bGQgc2hvdyByZWFsLXRpbWUgYmFkZ2Ugd2hlbiBlbmFibGVkJywgKCkgPT4ge1xuICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8TG9naXN0aWNzTWFwIHNoaXBtZW50cz17W119IHJlYWxUaW1lRW5hYmxlZD17dHJ1ZX0gLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1RpZW1wbyBSZWFsJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IHNob3cgcmVhbC10aW1lIGJhZGdlIHdoZW4gZGlzYWJsZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXtbXX0gcmVhbFRpbWVFbmFibGVkPXtmYWxzZX0gLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgnVGllbXBvIFJlYWwnKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFRFU1RTIERFIFNFTEVDQ0nDk04gREUgRU5Ww41PU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGl0KCdzaG91bGQgY2FsbCBvblNoaXBtZW50U2VsZWN0IHdoZW4gc2hpcG1lbnQgaXMgc2VsZWN0ZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25TaGlwbWVudFNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICBcbiAgICByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExvZ2lzdGljc01hcCBcbiAgICAgICAgc2hpcG1lbnRzPXtbbW9ja1NoaXBtZW50XX0gXG4gICAgICAgIG9uU2hpcG1lbnRTZWxlY3Q9e29uU2hpcG1lbnRTZWxlY3R9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICAvLyBTaW11bGFyIGNsaWNrIGVuIGVsIG1hcGEgKGVzdG8gbm9ybWFsbWVudGUgc2Vyw61hIG1hbmVqYWRvIHBvciBNYXBMaWJyZSlcbiAgICAvLyBDb21vIE1hcExpYnJlIGVzdMOhIG1vY2tlYWRvLCBzaW11bGFtb3MgZWwgY29tcG9ydGFtaWVudG9cbiAgICBjb25zdCBtYXBDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10ZXN0aWQ9XCJtYXAtY29udGFpbmVyXCJdJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwbGlicmVnbC1tYXAnKTtcbiAgICBcbiAgICBpZiAobWFwQ29udGFpbmVyKSB7XG4gICAgICBmaXJlRXZlbnQuY2xpY2sobWFwQ29udGFpbmVyKTtcbiAgICAgIC8vIEVuIHVuIHRlc3QgcmVhbCwgZXN0byB0cmlnZ2VhcsOtYSBlbCBldmVudG8gZGUgTWFwTGlicmVcbiAgICAgIC8vIHF1ZSBsbGFtYXLDrWEgYSBvblNoaXBtZW50U2VsZWN0XG4gICAgfVxuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBURVNUUyBERSBMRVlFTkRBXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IG1hcCBsZWdlbmQnLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXtbXX0gLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0VuIFRyw6Fuc2l0bycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdFbiBSZXBhcnRvJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0VudHJlZ2FkbycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBURVNUUyBERSBSRVNQT05TSVZFXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgaXQoJ3Nob3VsZCBiZSByZXNwb25zaXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExvZ2lzdGljc01hcCBzaGlwbWVudHM9e1tdfSAvPlxuICAgICk7XG5cbiAgICBjb25zdCBtYXBDYXJkID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5yZWxhdGl2ZScpO1xuICAgIGV4cGVjdChtYXBDYXJkKS50b0hhdmVDbGFzcygncmVsYXRpdmUnKTtcbiAgfSk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gVEVTVFMgREUgQUNDRVNJQklMSURBRFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGl0KCdzaG91bGQgaGF2ZSBwcm9wZXIgQVJJQSBsYWJlbHMnLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXtbXX0gLz5cbiAgICApO1xuXG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBsb3MgY29udHJvbGVzIGVzdMOhbiBwcmVzZW50ZXMgeSBzb24gYWNjZXNpYmxlc1xuICAgIGNvbnN0IHN3aXRjaGVzID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnc3dpdGNoJyk7XG4gICAgZXhwZWN0KHN3aXRjaGVzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIFxuICAgIHN3aXRjaGVzLmZvckVhY2goc3dpdGNoRWxlbWVudCA9PiB7XG4gICAgICAvLyBWZXJpZmljYXIgcXVlIGVsIHN3aXRjaCBlcyBpbnRlcmFjdHVhYmxlXG4gICAgICBleHBlY3Qoc3dpdGNoRWxlbWVudCkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzd2l0Y2hFbGVtZW50KS5ub3QudG9CZURpc2FibGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc3VwcG9ydCBrZXlib2FyZCBuYXZpZ2F0aW9uJywgKCkgPT4ge1xuICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8TG9naXN0aWNzTWFwIHNoaXBtZW50cz17W119IC8+XG4gICAgKTtcblxuICAgIGNvbnN0IGZpbHRlclNlbGVjdCA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2NvbWJvYm94JylbMF07XG4gICAgXG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBlcyBmb2N1c2VhYmxlXG4gICAgZmlsdGVyU2VsZWN0LmZvY3VzKCk7XG4gICAgZXhwZWN0KGZpbHRlclNlbGVjdCkudG9IYXZlRm9jdXMoKTtcblxuICAgIC8vIFNpbXVsYXIgbmF2ZWdhY2nDs24gY29uIHRlY2xhZG9cbiAgICBmaXJlRXZlbnQua2V5RG93bihmaWx0ZXJTZWxlY3QsIHsga2V5OiAnQXJyb3dEb3duJyB9KTtcbiAgICBmaXJlRXZlbnQua2V5RG93bihmaWx0ZXJTZWxlY3QsIHsga2V5OiAnRW50ZXInIH0pO1xuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBURVNUUyBERSBFUlJPUiBIQU5ETElOR1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IHNoaXBtZW50cyBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICA8TG9naXN0aWNzTWFwIHNoaXBtZW50cz17W119IC8+XG4gICAgKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUcmFja2luZyBlbiB0aWVtcG8gcmVhbCBkZSAwIGVudsOtb3MnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCBzaGlwbWVudCBkYXRhJywgKCkgPT4ge1xuICAgIGNvbnN0IGludmFsaWRTaGlwbWVudHMgPSBbXG4gICAgICB7IC4uLm1vY2tTaGlwbWVudCwgaWQ6IG51bGwgfSxcbiAgICAgIHsgLi4ubW9ja1NoaXBtZW50LCBzdGF0dXM6ICdpbnZhbGlkX3N0YXR1cycgfVxuICAgIF0gYXMgYW55O1xuXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhQcm92aWRlcnMoXG4gICAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXtpbnZhbGlkU2hpcG1lbnRzfSAvPlxuICAgICAgKTtcbiAgICB9KS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBURVNUUyBERSBQRVJGT1JNQU5DRVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGl0KCdzaG91bGQgaGFuZGxlIGxhcmdlIG51bWJlciBvZiBzaGlwbWVudHMnLCAoKSA9PiB7XG4gICAgY29uc3QgbWFueVNoaXBtZW50cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwMDAgfSwgKF8sIGkpID0+ICh7XG4gICAgICAuLi5tb2NrU2hpcG1lbnQsXG4gICAgICBpZDogaSArIDEsXG4gICAgICBzaGlwbWVudF9udW1iZXI6IGBTSFAtJHtpICsgMX1gXG4gICAgfSkpO1xuXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgXG4gICAgcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgICAgIDxMb2dpc3RpY3NNYXAgc2hpcG1lbnRzPXttYW55U2hpcG1lbnRzfSAvPlxuICAgICk7XG5cbiAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgcmVuZGVyVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG5cbiAgICAvLyBWZXJpZmljYXIgcXVlIGVsIHJlbmRlciBubyB0b21lIG3DoXMgZGUgMSBzZWd1bmRvXG4gICAgZXhwZWN0KHJlbmRlclRpbWUpLnRvQmVMZXNzVGhhbigxMDAwKTtcbiAgICBcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVHJhY2tpbmcgZW4gdGllbXBvIHJlYWwgZGUgMTAwMCBlbnbDrW9zJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFRFU1RTIERFIENMRUFOVVBcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBpdCgnc2hvdWxkIGNsZWFudXAgcmVzb3VyY2VzIG9uIHVubW91bnQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyB1bm1vdW50IH0gPSByZW5kZXJXaXRoUHJvdmlkZXJzKFxuICAgICAgPExvZ2lzdGljc01hcCBzaGlwbWVudHM9e1tdfSAvPlxuICAgICk7XG5cbiAgICAvLyBWZXJpZmljYXIgcXVlIG5vIGhheSBtZW1vcnkgbGVha3NcbiAgICBleHBlY3QoKCkgPT4gdW5tb3VudCgpKS5ub3QudG9UaHJvdygpO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImNyZWF0ZVRlc3RRdWVyeUNsaWVudCIsIlF1ZXJ5Q2xpZW50IiwiZGVmYXVsdE9wdGlvbnMiLCJxdWVyaWVzIiwicmV0cnkiLCJtdXRhdGlvbnMiLCJyZW5kZXJXaXRoUHJvdmlkZXJzIiwiY29tcG9uZW50IiwicXVlcnlDbGllbnQiLCJyZW5kZXIiLCJRdWVyeUNsaWVudFByb3ZpZGVyIiwiY2xpZW50IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY3JlYXRlTW9ja1dlYlNvY2tldCIsIml0IiwiTG9naXN0aWNzTWFwIiwic2hpcG1lbnRzIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJtb2NrU2hpcG1lbnQiLCJpZCIsImNvbWJvYm94ZXMiLCJnZXRBbGxCeVJvbGUiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iLCJzdGF0dXMiLCJmaWx0ZXJTZWxlY3QiLCJmaXJlRXZlbnQiLCJjbGljayIsImJ1dHRvbnMiLCJmb3JFYWNoIiwiYnV0dG9uIiwibm90IiwidG9CZURpc2FibGVkIiwic3dpdGNoZXMiLCJnZW9mZW5jZVN3aXRjaCIsInJvdXRlc1N3aXRjaCIsInN0eWxlU2VsZWN0cyIsInN0eWxlU2VsZWN0IiwiZmluZCIsInNlbGVjdCIsImdldEF0dHJpYnV0ZSIsImluY2x1ZGVzIiwiY2xvc2VzdCIsIndhaXRGb3IiLCJzYXRlbGxpdGVPcHRpb24iLCJxdWVyeUJ5VGV4dCIsInJlYWxUaW1lRW5hYmxlZCIsIm9uU2hpcG1lbnRTZWxlY3QiLCJqZXN0IiwiZm4iLCJtYXBDb250YWluZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250YWluZXIiLCJtYXBDYXJkIiwidG9IYXZlQ2xhc3MiLCJzd2l0Y2hFbGVtZW50IiwiZm9jdXMiLCJ0b0hhdmVGb2N1cyIsImtleURvd24iLCJrZXkiLCJpbnZhbGlkU2hpcG1lbnRzIiwidG9UaHJvdyIsIm1hbnlTaGlwbWVudHMiLCJBcnJheSIsImZyb20iLCJfIiwiaSIsInNoaXBtZW50X251bWJlciIsInN0YXJ0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiZW5kVGltZSIsInJlbmRlclRpbWUiLCJ0b0JlTGVzc1RoYW4iLCJ1bm1vdW50Il0sIm1hcHBpbmdzIjoiQUFBQSx3REFBd0Q7QUFDeEQsZ0NBQWdDO0FBQ2hDLCtEQUErRDtBQUMvRCw4QkFBOEI7QUFDOUIsd0RBQXdEOzs7Ozs7OERBRXRDO3dCQUNpQzs0QkFDRjs4QkFDcEI7NEJBQ3FCOzs7Ozs7QUFFbEQsd0RBQXdEO0FBQ3hELFFBQVE7QUFDUix3REFBd0Q7QUFFeEQsTUFBTUEsd0JBQXdCLElBQU0sSUFBSUMsdUJBQVcsQ0FBQztRQUNsREMsZ0JBQWdCO1lBQ2RDLFNBQVM7Z0JBQUVDLE9BQU87WUFBTTtZQUN4QkMsV0FBVztnQkFBRUQsT0FBTztZQUFNO1FBQzVCO0lBQ0Y7QUFFQSxNQUFNRSxzQkFBc0IsQ0FBQ0M7SUFDM0IsTUFBTUMsY0FBY1I7SUFDcEIsT0FBT1MsSUFBQUEsY0FBTSxnQkFDWCxxQkFBQ0MsK0JBQW1CO1FBQUNDLFFBQVFIO2tCQUMxQkQ7O0FBR1A7QUFFQSx3REFBd0Q7QUFDeEQsZ0JBQWdCO0FBQ2hCLHdEQUF3RDtBQUV4REssU0FBUywwQkFBMEI7SUFDakNDLFdBQVc7UUFDVEMsSUFBQUEsK0JBQW1CO0lBQ3JCO0lBRUFDLEdBQUcsK0JBQStCO1FBQ2hDVCxrQ0FDRSxxQkFBQ1UsMEJBQVk7WUFBQ0MsV0FBVyxFQUFFOztRQUc3QkMsT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsc0JBQXNCQyxpQkFBaUI7UUFDL0RILE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLHdDQUF3Q0MsaUJBQWlCO0lBQ25GO0lBRUFOLEdBQUcsNENBQTRDO1FBQzdDLE1BQU1F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