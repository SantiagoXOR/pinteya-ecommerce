8abf785c419f3dafed7bb221726de9dd
// ===================================
// PINTEYA E-COMMERCE - CIRCUIT BREAKER PATTERN ENTERPRISE
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CIRCUIT_BREAKER_CONFIGS () {
        return CIRCUIT_BREAKER_CONFIGS;
    },
    get CircuitBreaker () {
        return CircuitBreaker;
    },
    get CircuitBreakerState () {
        return CircuitBreakerState;
    },
    get executeMercadoPagoCritical () {
        return executeMercadoPagoCritical;
    },
    get executeMercadoPagoStandard () {
        return executeMercadoPagoStandard;
    },
    get executeWebhookProcessing () {
        return executeWebhookProcessing;
    },
    get mercadoPagoCriticalBreaker () {
        return mercadoPagoCriticalBreaker;
    },
    get mercadoPagoStandardBreaker () {
        return mercadoPagoStandardBreaker;
    },
    get webhookProcessingBreaker () {
        return webhookProcessingBreaker;
    }
});
const _logger = require("../logger");
const _metrics = require("../metrics");
var CircuitBreakerState = /*#__PURE__*/ function(CircuitBreakerState) {
    CircuitBreakerState["CLOSED"] = "CLOSED";
    CircuitBreakerState["OPEN"] = "OPEN";
    CircuitBreakerState["HALF_OPEN"] = "HALF_OPEN"; // Probando si el servicio se recuperó
    return CircuitBreakerState;
}({});
const CIRCUIT_BREAKER_CONFIGS = {
    MERCADOPAGO_CRITICAL: {
        failureThreshold: 5,
        recoveryTimeout: 60000,
        monitoringWindow: 120000,
        halfOpenMaxCalls: 3,
        successThreshold: 2
    },
    MERCADOPAGO_STANDARD: {
        failureThreshold: 3,
        recoveryTimeout: 30000,
        monitoringWindow: 60000,
        halfOpenMaxCalls: 2,
        successThreshold: 1
    },
    WEBHOOK_PROCESSING: {
        failureThreshold: 10,
        recoveryTimeout: 15000,
        monitoringWindow: 30000,
        halfOpenMaxCalls: 5,
        successThreshold: 3
    }
};
class CircuitBreaker {
    constructor(name, config){
        this.name = name;
        this.config = config;
        this.state = "CLOSED";
        this.failures = 0;
        this.successes = 0;
        this.lastFailureTime = 0;
        this.lastSuccessTime = 0;
        this.halfOpenCalls = 0;
        this.stateChanges = 0;
        this.metrics = {
            totalCalls: 0,
            successfulCalls: 0,
            failedCalls: 0,
            rejectedCalls: 0,
            lastFailureTime: 0,
            lastSuccessTime: 0,
            stateChanges: 0
        };
        _logger.logger.debug(_logger.LogLevel.DEBUG, `Circuit Breaker initialized: ${name}`, {
            config: this.config
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Ejecuta una operación protegida por el circuit breaker
   */ async execute(operation) {
        const startTime = Date.now();
        this.metrics.totalCalls++;
        // Verificar si debemos rechazar la llamada
        if (this.shouldReject()) {
            this.metrics.rejectedCalls++;
            await this.recordMetrics('rejected');
            return {
                success: false,
                error: new Error(`Circuit breaker is ${this.state} - operation rejected`),
                state: this.state,
                executionTime: Date.now() - startTime,
                wasRejected: true
            };
        }
        try {
            // Ejecutar la operación
            const result = await operation();
            // Registrar éxito
            await this.onSuccess();
            const executionTime = Date.now() - startTime;
            await this.recordMetrics('success', executionTime);
            return {
                success: true,
                data: result,
                state: this.state,
                executionTime,
                wasRejected: false
            };
        } catch (error) {
            // Registrar fallo
            await this.onFailure(error);
            const executionTime = Date.now() - startTime;
            await this.recordMetrics('failure', executionTime);
            return {
                success: false,
                error: error,
                state: this.state,
                executionTime,
                wasRejected: false
            };
        }
    }
    /**
   * Determina si debemos rechazar la operación
   */ shouldReject() {
        const now = Date.now();
        switch(this.state){
            case "CLOSED":
                return false;
            case "OPEN":
                // Verificar si es tiempo de intentar recuperación
                if (now - this.lastFailureTime >= this.config.recoveryTimeout) {
                    this.transitionToHalfOpen();
                    return false;
                }
                return true;
            case "HALF_OPEN":
                // Limitar llamadas en estado HALF_OPEN
                return this.halfOpenCalls >= this.config.halfOpenMaxCalls;
            default:
                return false;
        }
    }
    /**
   * Maneja un éxito en la operación
   */ async onSuccess() {
        this.lastSuccessTime = Date.now();
        this.metrics.successfulCalls++;
        switch(this.state){
            case "HALF_OPEN":
                this.successes++;
                this.halfOpenCalls++;
                if (this.successes >= this.config.successThreshold) {
                    this.transitionToClosed();
                }
                break;
            case "CLOSED":
                // Reset failure counter en ventana de monitoreo
                if (this.isInMonitoringWindow()) {
                    this.failures = 0;
                }
                break;
        }
    }
    /**
   * Maneja un fallo en la operación
   */ async onFailure(error) {
        this.lastFailureTime = Date.now();
        this.metrics.failedCalls++;
        this.failures++;
        _logger.logger.warn(_logger.LogLevel.WARN, `Circuit Breaker failure: ${this.name}`, {
            error: error.message,
            failures: this.failures,
            state: this.state
        }, _logger.LogCategory.SYSTEM);
        switch(this.state){
            case "CLOSED":
                if (this.failures >= this.config.failureThreshold) {
                    this.transitionToOpen();
                }
                break;
            case "HALF_OPEN":
                this.transitionToOpen();
                break;
        }
    }
    /**
   * Transición a estado OPEN
   */ transitionToOpen() {
        this.state = "OPEN";
        this.stateChanges++;
        this.metrics.stateChanges++;
        this.halfOpenCalls = 0;
        this.successes = 0;
        _logger.logger.warn(_logger.LogLevel.WARN, `Circuit Breaker OPENED: ${this.name}`, {
            failures: this.failures,
            threshold: this.config.failureThreshold
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Transición a estado HALF_OPEN
   */ transitionToHalfOpen() {
        this.state = "HALF_OPEN";
        this.stateChanges++;
        this.metrics.stateChanges++;
        this.halfOpenCalls = 0;
        this.successes = 0;
        _logger.logger.info(_logger.LogLevel.INFO, `Circuit Breaker HALF-OPEN: ${this.name}`, {
            recoveryTimeout: this.config.recoveryTimeout
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Transición a estado CLOSED
   */ transitionToClosed() {
        this.state = "CLOSED";
        this.stateChanges++;
        this.metrics.stateChanges++;
        this.failures = 0;
        this.successes = 0;
        this.halfOpenCalls = 0;
        _logger.logger.info(_logger.LogLevel.INFO, `Circuit Breaker CLOSED: ${this.name}`, {
            successThreshold: this.config.successThreshold
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Verifica si estamos en la ventana de monitoreo
   */ isInMonitoringWindow() {
        const now = Date.now();
        return now - this.lastFailureTime <= this.config.monitoringWindow;
    }
    /**
   * Registra métricas del circuit breaker
   */ async recordMetrics(operation, executionTime) {
        try {
            await _metrics.metricsCollector.recordMetric(`circuit_breaker.${this.name}.${operation}`, 1, {
                state: this.state,
                operation
            });
            if (executionTime) {
                await _metrics.metricsCollector.recordMetric(`circuit_breaker.${this.name}.execution_time`, executionTime, {
                    state: this.state
                });
            }
            // Métricas de estado
            await _metrics.metricsCollector.recordMetric(`circuit_breaker.${this.name}.state_changes`, this.stateChanges);
            await _metrics.metricsCollector.recordMetric(`circuit_breaker.${this.name}.failure_rate`, this.metrics.totalCalls > 0 ? this.metrics.failedCalls / this.metrics.totalCalls : 0);
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, `Failed to record circuit breaker metrics: ${this.name}`, {
                error: error instanceof Error ? error.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Obtiene el estado actual del circuit breaker
   */ getState() {
        return this.state;
    }
    /**
   * Obtiene las métricas del circuit breaker
   */ getMetrics() {
        return {
            ...this.metrics,
            state: this.state,
            config: this.config
        };
    }
    /**
   * Fuerza el reset del circuit breaker (solo para testing/admin)
   */ reset() {
        this.state = "CLOSED";
        this.failures = 0;
        this.successes = 0;
        this.halfOpenCalls = 0;
        this.lastFailureTime = 0;
        this.lastSuccessTime = 0;
        _logger.logger.info(_logger.LogLevel.INFO, `Circuit Breaker manually reset: ${this.name}`, {}, _logger.LogCategory.SYSTEM);
    }
}
const mercadoPagoCriticalBreaker = new CircuitBreaker('mercadopago_critical', CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_CRITICAL);
const mercadoPagoStandardBreaker = new CircuitBreaker('mercadopago_standard', CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_STANDARD);
const webhookProcessingBreaker = new CircuitBreaker('webhook_processing', CIRCUIT_BREAKER_CONFIGS.WEBHOOK_PROCESSING);
async function executeMercadoPagoCritical(operation) {
    return mercadoPagoCriticalBreaker.execute(operation);
}
async function executeMercadoPagoStandard(operation) {
    return mercadoPagoStandardBreaker.execute(operation);
}
async function executeWebhookProcessing(operation) {
    return webhookProcessingBreaker.execute(operation);
}

//# sourceMappingURL=data:application/json;base64,