{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\categories.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TESTS PARA API CATEGORIES\n// ===================================\n\nimport { NextRequest } from 'next/server';\nimport { GET } from '@/app/api/categories/route';\n\n// Mock Supabase\nconst mockSupabaseClient = {\n  from: jest.fn(() => ({\n    select: jest.fn(() => ({\n      order: jest.fn(() => ({\n        data: [\n          { id: 1, name: 'Pinturas', slug: 'pinturas', products_count: [{ count: 5 }] },\n          { id: 2, name: 'Herramientas', slug: 'herramientas', products_count: [{ count: 3 }] },\n        ],\n        error: null,\n      })),\n    })),\n  })),\n};\n\njest.mock('@/lib/supabase', () => ({\n  getSupabaseClient: jest.fn(() => mockSupabaseClient),\n  handleSupabaseError: jest.fn(),\n}));\n\ndescribe('/api/categories', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Reset getSupabaseClient mock\n    const { getSupabaseClient } = require('@/lib/supabase');\n    getSupabaseClient.mockReturnValue(mockSupabaseClient);\n\n    // Reset mock data to default\n    mockSupabaseClient.from.mockReturnValue({\n      select: jest.fn(() => ({\n        order: jest.fn(() => ({\n          data: [\n            { id: 1, name: 'Pinturas', slug: 'pinturas', products_count: [{ count: 5 }] },\n            { id: 2, name: 'Herramientas', slug: 'herramientas', products_count: [{ count: 3 }] },\n          ],\n          error: null,\n        })),\n      })),\n    });\n  });\n\n  describe('GET', () => {\n    it('should return categories successfully', async () => {\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data).toHaveLength(2);\n      expect(data.data[0]).toEqual({\n        id: 1,\n        name: 'Pinturas',\n        slug: 'pinturas',\n        products_count: 5,\n      });\n    });\n\n    it('should handle database errors', async () => {\n      // Mock error response\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          order: jest.fn(() => ({\n            data: null,\n            error: { message: 'Database error' },\n          })),\n        })),\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Database error');\n    });\n\n    it('should handle empty categories', async () => {\n      // Mock empty response\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          order: jest.fn(() => ({\n            data: [],\n            error: null,\n          })),\n        })),\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data).toEqual([]);\n    });\n\n    it('should handle unexpected errors', async () => {\n      // Mock unexpected error\n      const { getSupabaseClient } = require('@/lib/supabase');\n      getSupabaseClient.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Unexpected error');\n    });\n\n    it('should return categories with proper structure', async () => {\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toHaveProperty('success');\n      expect(data).toHaveProperty('data');\n      expect(data).toHaveProperty('message');\n\n      // Verificar estructura de categorÃ­as\n      data.data.forEach((category: any) => {\n        expect(category).toHaveProperty('id');\n        expect(category).toHaveProperty('name');\n        expect(category).toHaveProperty('slug');\n      });\n    });\n\n    it('should call supabase with correct parameters', async () => {\n      const { getSupabaseClient } = require('@/lib/supabase');\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      await GET(request);\n\n      expect(getSupabaseClient).toHaveBeenCalled();\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('categories');\n    });\n\n    it('should handle null data response', async () => {\n      // Mock null response\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          order: jest.fn(() => ({\n            data: null,\n            error: null,\n          })),\n        })),\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data).toEqual([]);\n    });\n\n    it('should handle categories with special characters', async () => {\n      // Mock response with special characters\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          order: jest.fn(() => ({\n            data: [\n              { id: 1, name: 'Pinturas & Barnices', slug: 'pinturas-barnices', products_count: [{ count: 2 }] },\n              { id: 2, name: 'Herramientas (Profesionales)', slug: 'herramientas-profesionales', products_count: [{ count: 1 }] },\n            ],\n            error: null,\n          })),\n        })),\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/categories');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data).toHaveLength(2);\n      expect(data.data[0].name).toBe('Pinturas & Barnices');\n      expect(data.data[1].name).toBe('Herramientas (Profesionales)');\n    });\n  });\n});\n"],"names":["jest","mock","getSupabaseClient","fn","mockSupabaseClient","handleSupabaseError","from","select","order","data","id","name","slug","products_count","count","error","describe","beforeEach","clearAllMocks","require","mockReturnValue","it","request","NextRequest","response","GET","json","expect","status","toBe","success","toHaveLength","toEqual","message","mockImplementation","Error","toHaveProperty","forEach","category","toHaveBeenCalled","toHaveBeenCalledWith"],"mappings":"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"}