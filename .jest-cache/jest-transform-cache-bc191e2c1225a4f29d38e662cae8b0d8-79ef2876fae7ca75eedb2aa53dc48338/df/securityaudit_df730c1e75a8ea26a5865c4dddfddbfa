7cef999ea9b451316b366979704fd523
/**
 * Sistema de Auditoría de Seguridad
 * Registra eventos de seguridad y detecta patrones sospechosos
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get detectMultipleAuthFailures () {
        return detectMultipleAuthFailures;
    },
    get detectMultipleIPAccess () {
        return detectMultipleIPAccess;
    },
    get logAdminAction () {
        return logAdminAction;
    },
    get logAuthFailure () {
        return logAuthFailure;
    },
    get logAuthSuccess () {
        return logAuthSuccess;
    },
    get logDataAccess () {
        return logDataAccess;
    },
    get logPermissionDenied () {
        return logPermissionDenied;
    },
    get logSecurityEvent () {
        return logSecurityEvent;
    },
    get runSecurityDetection () {
        return runSecurityDetection;
    }
});
const _supabase = require("../supabase");
async function logSecurityEvent(event) {
    try {
        if (!_supabase.supabaseAdmin) {
            console.warn('[SECURITY] Supabase admin no disponible para logging');
            return;
        }
        const securityEvent = {
            ...event,
            timestamp: new Date().toISOString(),
            resolved: false
        };
        const { error } = await _supabase.supabaseAdmin.from('security_events').insert(securityEvent);
        if (error) {
            console.error('[SECURITY] Error guardando evento de seguridad:', error);
        } else {
            console.log(`[SECURITY] Evento registrado: ${event.event_type} - ${event.description}`);
        }
        // También log en consola para desarrollo
        console.log('[SECURITY EVENT]', JSON.stringify(securityEvent, null, 2));
    } catch (error) {
        console.error('[SECURITY] Error en logSecurityEvent:', error);
    }
}
async function logAuthSuccess(userId, context, request) {
    await logSecurityEvent({
        user_id: userId,
        event_type: 'AUTH_SUCCESS',
        event_category: 'authentication',
        severity: 'low',
        description: `Usuario autenticado exitosamente con rol: ${context.userRole}`,
        metadata: {
            role: context.userRole,
            permissions: context.permissions,
            emailVerified: context.metadata.emailVerified
        },
        ip_address: context.ipAddress,
        user_agent: context.userAgent
    });
}
async function logAuthFailure(userId, reason, request) {
    let ipAddress;
    let userAgent;
    if (request) {
        if ('headers' in request && typeof request.headers.get === 'function') {
            ipAddress = request.headers.get('x-forwarded-for') || 'unknown';
            userAgent = request.headers.get('user-agent') || 'unknown';
        } else if ('headers' in request) {
            const req = request;
            ipAddress = req.headers['x-forwarded-for'] || 'unknown';
            userAgent = req.headers['user-agent'] || 'unknown';
        }
    }
    await logSecurityEvent({
        user_id: userId || 'unknown',
        event_type: 'AUTH_FAILURE',
        event_category: 'authentication',
        severity: 'medium',
        description: `Fallo de autenticación: ${reason}`,
        metadata: {
            reason
        },
        ip_address: ipAddress,
        user_agent: userAgent
    });
}
async function logPermissionDenied(userId, operation, requiredPermissions, context) {
    await logSecurityEvent({
        user_id: userId,
        event_type: 'PERMISSION_DENIED',
        event_category: 'authorization',
        severity: 'medium',
        description: `Acceso denegado a operación: ${operation}`,
        metadata: {
            operation,
            requiredPermissions,
            userRole: context.userRole,
            userPermissions: context.permissions
        },
        ip_address: context.ipAddress,
        user_agent: context.userAgent
    });
}
async function logDataAccess(userId, resource, action, context, metadata) {
    await logSecurityEvent({
        user_id: userId,
        event_type: 'DATA_ACCESS',
        event_category: 'data_access',
        severity: 'low',
        description: `Acceso a ${resource} - Acción: ${action}`,
        metadata: {
            resource,
            action,
            userRole: context.userRole,
            ...metadata
        },
        ip_address: context.ipAddress,
        user_agent: context.userAgent
    });
}
async function logAdminAction(userId, action, target, context, metadata) {
    await logSecurityEvent({
        user_id: userId,
        event_type: 'ADMIN_ACTION',
        event_category: 'admin_operations',
        severity: 'medium',
        description: `Acción administrativa: ${action} en ${target}`,
        metadata: {
            action,
            target,
            userRole: context.userRole,
            ...metadata
        },
        ip_address: context.ipAddress,
        user_agent: context.userAgent
    });
}
async function detectMultipleAuthFailures(userId, timeWindowMinutes = 15, maxAttempts = 5) {
    try {
        if (!_supabase.supabaseAdmin) return false;
        const timeThreshold = new Date(Date.now() - timeWindowMinutes * 60 * 1000).toISOString();
        const { data, error } = await _supabase.supabaseAdmin.from('security_events').select('id').eq('user_id', userId).eq('event_type', 'AUTH_FAILURE').gte('timestamp', timeThreshold);
        if (error) {
            console.error('[SECURITY] Error detectando fallos de auth:', error);
            return false;
        }
        const failureCount = data?.length || 0;
        if (failureCount >= maxAttempts) {
            await logSecurityEvent({
                user_id: userId,
                event_type: 'SUSPICIOUS_ACTIVITY',
                event_category: 'suspicious_behavior',
                severity: 'high',
                description: `Múltiples fallos de autenticación detectados: ${failureCount} intentos en ${timeWindowMinutes} minutos`,
                metadata: {
                    failureCount,
                    timeWindowMinutes,
                    threshold: maxAttempts
                }
            });
            return true;
        }
        return false;
    } catch (error) {
        console.error('[SECURITY] Error en detectMultipleAuthFailures:', error);
        return false;
    }
}
async function detectMultipleIPAccess(userId, timeWindowHours = 1, maxIPs = 3) {
    try {
        if (!_supabase.supabaseAdmin) return false;
        const timeThreshold = new Date(Date.now() - timeWindowHours * 60 * 60 * 1000).toISOString();
        const { data, error } = await _supabase.supabaseAdmin.from('security_events').select('ip_address').eq('user_id', userId).eq('event_type', 'AUTH_SUCCESS').gte('timestamp', timeThreshold).not('ip_address', 'is', null);
        if (error) {
            console.error('[SECURITY] Error detectando múltiples IPs:', error);
            return false;
        }
        const uniqueIPs = new Set(data?.map((event)=>event.ip_address));
        const ipCount = uniqueIPs.size;
        if (ipCount >= maxIPs) {
            await logSecurityEvent({
                user_id: userId,
                event_type: 'SUSPICIOUS_ACTIVITY',
                event_category: 'suspicious_behavior',
                severity: 'medium',
                description: `Acceso desde múltiples IPs detectado: ${ipCount} IPs diferentes en ${timeWindowHours} horas`,
                metadata: {
                    ipCount,
                    timeWindowHours,
                    threshold: maxIPs,
                    ips: Array.from(uniqueIPs)
                }
            });
            return true;
        }
        return false;
    } catch (error) {
        console.error('[SECURITY] Error en detectMultipleIPAccess:', error);
        return false;
    }
}
async function runSecurityDetection(userId) {
    try {
        await Promise.all([
            detectMultipleAuthFailures(userId),
            detectMultipleIPAccess(userId)
        ]);
    } catch (error) {
        console.error('[SECURITY] Error en runSecurityDetection:', error);
    }
}

//# sourceMappingURL=data:application/json;base64,