aa8f0461e0dd52de8658fea8e040cda7
/**
 * Tests para el sistema de auditoría de seguridad mejorado
 */ // Mocks básicos
"use strict";
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    gte: jest.fn(()=>({
                                            lte: jest.fn(()=>({
                                                    order: jest.fn(()=>Promise.resolve({
                                                            data: [],
                                                            error: null
                                                        }))
                                                }))
                                        })),
                                    order: jest.fn(()=>Promise.resolve({
                                            data: [],
                                            error: null
                                        }))
                                })),
                            gte: jest.fn(()=>({
                                    order: jest.fn(()=>Promise.resolve({
                                            data: [],
                                            error: null
                                        }))
                                })),
                            order: jest.fn(()=>Promise.resolve({
                                    data: [],
                                    error: null
                                }))
                        })),
                    insert: jest.fn(()=>Promise.resolve({
                            error: null
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>Promise.resolve({
                                    error: null
                                }))
                        })),
                    delete: jest.fn(()=>({
                            lt: jest.fn(()=>Promise.resolve({
                                    data: [],
                                    error: null
                                }))
                        }))
                }))
        }
    }));
jest.mock('@/lib/cache-manager', ()=>({
        CacheManager: {
            getInstance: jest.fn(()=>({
                    get: jest.fn().mockResolvedValue(null),
                    set: jest.fn().mockResolvedValue(true),
                    delete: jest.fn().mockResolvedValue(true)
                }))
        },
        CACHE_CONFIGS: {
            USER_SESSION: {
                ttl: 600
            }
        }
    }));
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn().mockResolvedValue(true)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _securityauditenhanced = require("../lib/auth/security-audit-enhanced");
const _securitydashboard = require("../lib/auth/security-dashboard");
describe('Sistema de Auditoría de Seguridad Mejorado', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Funciones principales', ()=>{
        it('debe tener todas las funciones definidas', ()=>{
            expect(typeof _securityauditenhanced.analyzeSecurityPatterns).toBe('function');
            expect(typeof _securityauditenhanced.getSecurityMetrics).toBe('function');
            expect(typeof _securityauditenhanced.generateSecurityReport).toBe('function');
            expect(typeof _securityauditenhanced.getActiveSecurityAlerts).toBe('function');
            expect(typeof _securityauditenhanced.updateSecurityAlert).toBe('function');
            expect(typeof _securityauditenhanced.resolveSecurityAlert).toBe('function');
            expect(typeof _securityauditenhanced.markAlertAsFalsePositive).toBe('function');
            expect(typeof _securityauditenhanced.runSecurityHealthCheck).toBe('function');
            expect(typeof _securityauditenhanced.cleanupOldSecurityEvents).toBe('function');
            expect(typeof _securityauditenhanced.exportSecurityEvents).toBe('function');
        });
        it('debe tener patrones de seguridad predefinidos', ()=>{
            expect(Array.isArray(_securityauditenhanced.DEFAULT_SECURITY_PATTERNS)).toBe(true);
            expect(_securityauditenhanced.DEFAULT_SECURITY_PATTERNS.length).toBeGreaterThan(0);
            _securityauditenhanced.DEFAULT_SECURITY_PATTERNS.forEach((pattern)=>{
                expect(pattern).toHaveProperty('id');
                expect(pattern).toHaveProperty('name');
                expect(pattern).toHaveProperty('description');
                expect(pattern).toHaveProperty('severity');
                expect(pattern).toHaveProperty('conditions');
                expect(pattern).toHaveProperty('timeWindow');
                expect(pattern).toHaveProperty('threshold');
                expect(pattern).toHaveProperty('enabled');
                expect(pattern).toHaveProperty('actions');
            });
        });
    });
    describe('Análisis de patrones', ()=>{
        it('debe ejecutar análisis sin errores', async ()=>{
            const alerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)();
            expect(Array.isArray(alerts)).toBe(true);
        });
        it('debe analizar patrones para usuario específico', async ()=>{
            const alerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)('user_123', 24);
            expect(Array.isArray(alerts)).toBe(true);
        });
        it('debe manejar errores gracefully', async ()=>{
            // Test que verifica que no se lanzan excepciones no manejadas
            await expect((0, _securityauditenhanced.analyzeSecurityPatterns)('invalid_user')).resolves.toBeDefined();
        });
    });
    describe('Métricas de seguridad', ()=>{
        it('debe obtener métricas de seguridad', async ()=>{
            const metrics = await (0, _securityauditenhanced.getSecurityMetrics)();
            expect(metrics).toBeDefined();
            expect(typeof metrics.total_events_24h).toBe('number');
            expect(typeof metrics.critical_events_24h).toBe('number');
            expect(typeof metrics.unique_users_24h).toBe('number');
            expect(typeof metrics.auth_failures_24h).toBe('number');
            expect(typeof metrics.suspicious_activities_24h).toBe('number');
            expect(typeof metrics.blocked_users).toBe('number');
            expect(typeof metrics.active_alerts).toBe('number');
            expect(typeof metrics.avg_response_time).toBe('number');
            expect(typeof metrics.security_score).toBe('number');
        });
        it('debe retornar métricas válidas', async ()=>{
            const metrics = await (0, _securityauditenhanced.getSecurityMetrics)();
            expect(metrics.security_score).toBeGreaterThanOrEqual(0);
            expect(metrics.security_score).toBeLessThanOrEqual(100);
            expect(metrics.total_events_24h).toBeGreaterThanOrEqual(0);
            expect(metrics.critical_events_24h).toBeGreaterThanOrEqual(0);
        });
    });
    describe('Reportes de seguridad', ()=>{
        it('debe generar reporte de seguridad', async ()=>{
            const startDate = new Date('2024-01-01');
            const endDate = new Date('2024-01-02');
            const report = await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate);
            expect(report).toBeDefined();
            expect(report).toHaveProperty('id');
            expect(report).toHaveProperty('period_start');
            expect(report).toHaveProperty('period_end');
            expect(report).toHaveProperty('total_events');
            expect(report).toHaveProperty('events_by_severity');
            expect(report).toHaveProperty('events_by_category');
            expect(report).toHaveProperty('top_users');
            expect(report).toHaveProperty('top_ips');
            expect(report).toHaveProperty('patterns_detected');
            expect(report).toHaveProperty('recommendations');
            expect(report).toHaveProperty('generated_at');
        });
        it('debe validar fechas del reporte', async ()=>{
            const startDate = new Date('2024-01-01');
            const endDate = new Date('2024-01-02');
            const report = await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate);
            expect(report.period_start).toBe(startDate.toISOString());
            expect(report.period_end).toBe(endDate.toISOString());
            expect(Array.isArray(report.recommendations)).toBe(true);
        });
    });
    describe('Gestión de alertas', ()=>{
        it('debe obtener alertas activas', async ()=>{
            const alerts = await (0, _securityauditenhanced.getActiveSecurityAlerts)();
            expect(Array.isArray(alerts)).toBe(true);
        });
        it('debe filtrar alertas por usuario', async ()=>{
            const alerts = await (0, _securityauditenhanced.getActiveSecurityAlerts)('user_123');
            expect(Array.isArray(alerts)).toBe(true);
        });
        it('debe filtrar alertas por severidad', async ()=>{
            const alerts = await (0, _securityauditenhanced.getActiveSecurityAlerts)(undefined, 'high');
            expect(Array.isArray(alerts)).toBe(true);
        });
        it('debe actualizar estado de alerta', async ()=>{
            const result = await (0, _securityauditenhanced.updateSecurityAlert)('alert_123', {
                status: 'investigating'
            });
            expect(typeof result).toBe('boolean');
        });
        it('debe resolver alerta', async ()=>{
            const result = await (0, _securityauditenhanced.resolveSecurityAlert)('alert_123', 'Problema resuelto', 'admin_user');
            expect(typeof result).toBe('boolean');
        });
        it('debe marcar como falso positivo', async ()=>{
            const result = await (0, _securityauditenhanced.markAlertAsFalsePositive)('alert_123', 'Falso positivo confirmado', 'admin_user');
            expect(typeof result).toBe('boolean');
        });
    });
    describe('Verificación de salud', ()=>{
        it('debe ejecutar verificación de salud', async ()=>{
            const healthCheck = await (0, _securityauditenhanced.runSecurityHealthCheck)();
            expect(healthCheck).toBeDefined();
            expect(healthCheck).toHaveProperty('status');
            expect(healthCheck).toHaveProperty('issues');
            expect(healthCheck).toHaveProperty('recommendations');
            expect(healthCheck).toHaveProperty('metrics');
            expect([
                'healthy',
                'warning',
                'critical'
            ]).toContain(healthCheck.status);
            expect(Array.isArray(healthCheck.issues)).toBe(true);
            expect(Array.isArray(healthCheck.recommendations)).toBe(true);
        });
    });
    describe('Utilidades', ()=>{
        it('debe tener función de limpieza implementada', async ()=>{
            const deletedCount = await (0, _securityauditenhanced.cleanupOldSecurityEvents)(90);
            expect(typeof deletedCount).toBe('number');
            expect(deletedCount).toBeGreaterThanOrEqual(0);
        });
        it('debe tener función de exportación implementada', async ()=>{
            const startDate = new Date('2024-01-01');
            const endDate = new Date('2024-01-02');
            // Test que la función existe y retorna algo
            await expect((0, _securityauditenhanced.exportSecurityEvents)(startDate, endDate, 'json')).resolves.toBeDefined();
        });
    });
    describe('Dashboard de Seguridad', ()=>{
        it('debe crear instancia de dashboard', ()=>{
            const dashboard = new _securitydashboard.SecurityDashboard();
            expect(dashboard).toBeDefined();
            expect(typeof dashboard.start).toBe('function');
            expect(typeof dashboard.stop).toBe('function');
            expect(typeof dashboard.refreshData).toBe('function');
            expect(typeof dashboard.getData).toBe('function');
        });
        it('debe obtener instancia singleton', ()=>{
            const dashboard1 = (0, _securitydashboard.getSecurityDashboard)();
            const dashboard2 = (0, _securitydashboard.getSecurityDashboard)();
            expect(dashboard1).toBe(dashboard2);
        });
        it('debe obtener estado del dashboard', ()=>{
            const dashboard = new _securitydashboard.SecurityDashboard();
            const status = dashboard.getStatus();
            expect(status).toBeDefined();
            expect(status).toHaveProperty('isRunning');
            expect(status).toHaveProperty('lastUpdate');
            expect(status).toHaveProperty('config');
            expect(status).toHaveProperty('uptime');
            expect(typeof status.isRunning).toBe('boolean');
            expect(status.lastUpdate instanceof Date).toBe(true);
            expect(typeof status.config).toBe('object');
            expect(typeof status.uptime).toBe('number');
        });
        it('debe actualizar configuración', ()=>{
            const dashboard = new _securitydashboard.SecurityDashboard();
            const newConfig = {
                refreshInterval: 60
            };
            dashboard.updateConfig(newConfig);
            const status = dashboard.getStatus();
            expect(status.config.refreshInterval).toBe(60);
        });
    });
    describe('Manejo de errores', ()=>{
        it('debe manejar errores sin lanzar excepciones', async ()=>{
            // Test que verifica que las funciones no lanzan errores no manejados
            const promises = [
                (0, _securityauditenhanced.analyzeSecurityPatterns)('invalid_user'),
                (0, _securityauditenhanced.getSecurityMetrics)(),
                (0, _securityauditenhanced.getActiveSecurityAlerts)(),
                (0, _securityauditenhanced.runSecurityHealthCheck)(),
                (0, _securityauditenhanced.cleanupOldSecurityEvents)(90)
            ];
            const results = await Promise.allSettled(promises);
            results.forEach((result, index)=>{
                expect(result.status).toBe('fulfilled');
                if (result.status === 'fulfilled') {
                    expect(result.value).toBeDefined();
                }
            });
        });
        it('debe manejar funciones individuales', async ()=>{
            // Test individual para cada función
            await expect((0, _securityauditenhanced.analyzeSecurityPatterns)()).resolves.toBeDefined();
            await expect((0, _securityauditenhanced.getSecurityMetrics)()).resolves.toBeDefined();
            await expect((0, _securityauditenhanced.getActiveSecurityAlerts)()).resolves.toBeDefined();
            await expect((0, _securityauditenhanced.runSecurityHealthCheck)()).resolves.toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,