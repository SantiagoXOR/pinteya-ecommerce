{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchToast.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearchToast - Toast notifications para búsquedas\r\n// ===================================\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport type { SearchError } from './useSearchErrorHandler';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface ToastNotification {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  description?: string;\r\n  duration?: number;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n}\r\n\r\nexport interface UseSearchToastOptions {\r\n  defaultDuration?: number;\r\n  maxToasts?: number;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\n\r\nconst DEFAULT_DURATION = 5000;\r\nconst MAX_TOASTS = 3;\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\nfunction generateToastId(): string {\r\n  return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nfunction getErrorToastContent(error: SearchError, retryCount: number = 0) {\r\n  const baseTitle = 'Error en la búsqueda';\r\n  \r\n  switch (error.type) {\r\n    case 'network':\r\n      return {\r\n        title: 'Sin conexión',\r\n        description: retryCount > 0 \r\n          ? `Reintentando... (${retryCount}/3)`\r\n          : 'Verifica tu conexión a internet',\r\n      };\r\n      \r\n    case 'timeout':\r\n      return {\r\n        title: 'Búsqueda lenta',\r\n        description: retryCount > 0\r\n          ? `Reintentando búsqueda... (${retryCount}/3)`\r\n          : 'La búsqueda tardó demasiado',\r\n      };\r\n      \r\n    case 'server':\r\n      return {\r\n        title: 'Error del servidor',\r\n        description: retryCount > 0\r\n          ? `Reintentando conexión... (${retryCount}/3)`\r\n          : 'Problema temporal del servidor',\r\n      };\r\n      \r\n    case 'validation':\r\n      return {\r\n        title: 'Búsqueda inválida',\r\n        description: 'Verifica los términos de búsqueda',\r\n      };\r\n      \r\n    default:\r\n      return {\r\n        title: baseTitle,\r\n        description: retryCount > 0\r\n          ? `Reintentando... (${retryCount}/3)`\r\n          : 'Error inesperado',\r\n      };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchToast(options: UseSearchToastOptions = {}) {\r\n  const {\r\n    defaultDuration = DEFAULT_DURATION,\r\n    maxToasts = MAX_TOASTS,\r\n  } = options;\r\n\r\n  const [toasts, setToasts] = useState<ToastNotification[]>([]);\r\n\r\n  /**\r\n   * Remueve un toast específico\r\n   */\r\n  const removeToast = useCallback((id: string) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id));\r\n  }, []);\r\n\r\n  /**\r\n   * Agrega un nuevo toast\r\n   */\r\n  const addToast = useCallback((toast: Omit<ToastNotification, 'id'>): string => {\r\n    const id = generateToastId();\r\n    const newToast: ToastNotification = {\r\n      ...toast,\r\n      id,\r\n      duration: toast.duration ?? defaultDuration,\r\n    };\r\n\r\n    setToasts(prev => {\r\n      const updated = [newToast, ...prev];\r\n      // Limitar número máximo de toasts\r\n      return updated.slice(0, maxToasts);\r\n    });\r\n\r\n    // Auto-remove después del duration\r\n    if (newToast.duration && newToast.duration > 0) {\r\n      setTimeout(() => {\r\n        removeToast(id);\r\n      }, newToast.duration);\r\n    }\r\n\r\n    return id;\r\n  }, [defaultDuration, maxToasts, removeToast]);\r\n\r\n  /**\r\n   * Limpia todos los toasts\r\n   */\r\n  const clearToasts = useCallback(() => {\r\n    setToasts([]);\r\n  }, []);\r\n\r\n  /**\r\n   * Toast de éxito para búsquedas\r\n   */\r\n  const showSuccessToast = useCallback((query: string, resultCount: number) => {\r\n    return addToast({\r\n      type: 'success',\r\n      title: '¡Búsqueda exitosa!',\r\n      description: `Se encontraron ${resultCount} productos para \"${query}\"`,\r\n      duration: 3000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast de error para búsquedas\r\n   */\r\n  const showErrorToast = useCallback((\r\n    error: SearchError, \r\n    retryCount: number = 0,\r\n    onRetry?: () => void\r\n  ) => {\r\n    const { title, description } = getErrorToastContent(error, retryCount);\r\n    \r\n    return addToast({\r\n      type: 'error',\r\n      title,\r\n      description,\r\n      duration: error.retryable ? 4000 : 6000,\r\n      action: error.retryable && onRetry ? {\r\n        label: 'Reintentar',\r\n        onClick: onRetry,\r\n      } : undefined,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast de advertencia para búsquedas\r\n   */\r\n  const showWarningToast = useCallback((message: string, description?: string) => {\r\n    return addToast({\r\n      type: 'warning',\r\n      title: message,\r\n      description,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast informativo\r\n   */\r\n  const showInfoToast = useCallback((message: string, description?: string) => {\r\n    return addToast({\r\n      type: 'info',\r\n      title: message,\r\n      description,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para cuando no hay resultados\r\n   */\r\n  const showNoResultsToast = useCallback((query: string) => {\r\n    return addToast({\r\n      type: 'warning',\r\n      title: 'Sin resultados',\r\n      description: `No se encontraron productos para \"${query}\"`,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry en progreso\r\n   */\r\n  const showRetryToast = useCallback((attempt: number, maxAttempts: number) => {\r\n    return addToast({\r\n      type: 'info',\r\n      title: 'Reintentando búsqueda...',\r\n      description: `Intento ${attempt} de ${maxAttempts}`,\r\n      duration: 2000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry exitoso\r\n   */\r\n  const showRetrySuccessToast = useCallback(() => {\r\n    return addToast({\r\n      type: 'success',\r\n      title: '¡Conexión restaurada!',\r\n      description: 'La búsqueda se completó exitosamente',\r\n      duration: 3000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry fallido\r\n   */\r\n  const showRetryFailedToast = useCallback((attempts: number) => {\r\n    return addToast({\r\n      type: 'error',\r\n      title: 'Búsqueda fallida',\r\n      description: `No se pudo completar después de ${attempts} intentos`,\r\n      duration: 6000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  return {\r\n    // Estado\r\n    toasts,\r\n    hasToasts: toasts.length > 0,\r\n    \r\n    // Funciones generales\r\n    addToast,\r\n    removeToast,\r\n    clearToasts,\r\n    \r\n    // Funciones específicas para búsquedas\r\n    showSuccessToast,\r\n    showErrorToast,\r\n    showWarningToast,\r\n    showInfoToast,\r\n    showNoResultsToast,\r\n    showRetryToast,\r\n    showRetrySuccessToast,\r\n    showRetryFailedToast,\r\n  };\r\n}\r\n\r\nexport default useSearchToast;\r\n"],"names":["useSearchToast","DEFAULT_DURATION","MAX_TOASTS","generateToastId","Date","now","Math","random","toString","substr","getErrorToastContent","error","retryCount","baseTitle","type","title","description","options","defaultDuration","maxToasts","toasts","setToasts","useState","removeToast","useCallback","id","prev","filter","toast","addToast","newToast","duration","updated","slice","setTimeout","clearToasts","showSuccessToast","query","resultCount","showErrorToast","onRetry","retryable","action","label","onClick","undefined","showWarningToast","message","showInfoToast","showNoResultsToast","showRetryToast","attempt","maxAttempts","showRetrySuccessToast","showRetryFailedToast","attempts","hasToasts","length"],"mappings":"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"}