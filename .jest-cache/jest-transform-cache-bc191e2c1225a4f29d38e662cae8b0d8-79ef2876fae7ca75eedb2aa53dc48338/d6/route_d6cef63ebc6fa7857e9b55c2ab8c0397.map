{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - API DE PRODUCTOS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/supabase';\r\nimport { validateData, safeValidateData, ProductFiltersSchema, ProductSchema } from '@/lib/validations';\r\nimport { ApiResponse, PaginatedResponse, ProductWithCategory } from '@/types/api';\r\n\r\n// ===================================\r\n// GET /api/products - Obtener productos con filtros\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer parámetros de query\r\n    const queryParams = {\r\n      category: searchParams.get('category') || undefined,\r\n      categories: searchParams.get('categories')?.split(',').filter(Boolean) || undefined,\r\n      brand: searchParams.get('brand') || undefined,\r\n      brands: searchParams.get('brands')?.split(',').filter(Boolean) || undefined,\r\n      paintType: searchParams.get('paintType') || undefined,\r\n      paintTypes: searchParams.get('paintTypes')?.split(',').filter(Boolean) || undefined,\r\n      priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,\r\n      priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,\r\n      search: searchParams.get('search') || undefined,\r\n      page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,\r\n      limit: searchParams.get('limit') ? Number(searchParams.get('limit')) : 12,\r\n      sortBy: searchParams.get('sortBy') as 'price' | 'name' | 'created_at' | 'brand' || 'created_at',\r\n      sortOrder: searchParams.get('sortOrder') as 'asc' | 'desc' || 'desc',\r\n    };\r\n\r\n    // Validar parámetros de manera segura\r\n    const validationResult = safeValidateData(ProductFiltersSchema, queryParams);\r\n\r\n    if (!validationResult.success) {\r\n      console.error('Error de validación en GET /api/products:', validationResult.error);\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: `Parámetros inválidos: ${validationResult.error}`,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const filters = validationResult.data!;\r\n    \r\n    const supabase = getSupabaseClient();\r\n\r\n    // Verificar que el cliente de Supabase esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/products');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Construir query base optimizada (solo campos necesarios)\r\n    let query = supabase\r\n      .from('products')\r\n      .select(`\r\n        id, name, slug, price, discounted_price, brand, stock, images,\r\n        category:categories(id, name, slug)\r\n      `, { count: 'exact' });\r\n\r\n    // Aplicar filtros\r\n    if (filters.category) {\r\n      // Primero obtener el ID de la categoría por su slug\r\n      const { data: categoryData } = await supabase\r\n        .from('categories')\r\n        .select('id')\r\n        .eq('slug', filters.category)\r\n        .single();\r\n\r\n      if (categoryData) {\r\n        query = query.eq('category_id', categoryData.id);\r\n      }\r\n    }\r\n\r\n    // Filtro por múltiples categorías (nuevo)\r\n    if (filters.categories && filters.categories.length > 0) {\r\n      const { data: categoriesData } = await supabase\r\n        .from('categories')\r\n        .select('id')\r\n        .in('slug', filters.categories);\r\n\r\n      if (categoriesData && categoriesData.length > 0) {\r\n        const categoryIds = categoriesData.map(cat => cat.id);\r\n        query = query.in('category_id', categoryIds);\r\n      }\r\n    }\r\n\r\n    if (filters.brand) {\r\n      query = query.eq('brand', filters.brand);\r\n    }\r\n\r\n    // Filtro por múltiples marcas (nuevo)\r\n    if (filters.brands && filters.brands.length > 0) {\r\n      query = query.in('brand', filters.brands);\r\n    }\r\n\r\n    // Filtro por tipo de pintura (nuevo)\r\n    if (filters.paintType) {\r\n      query = query.eq('paint_type', filters.paintType);\r\n    }\r\n\r\n    // Filtro por múltiples tipos de pintura (nuevo)\r\n    if (filters.paintTypes && filters.paintTypes.length > 0) {\r\n      query = query.in('paint_type', filters.paintTypes);\r\n    }\r\n\r\n    if (filters.priceMin) {\r\n      query = query.gte('price', filters.priceMin);\r\n    }\r\n\r\n    if (filters.priceMax) {\r\n      query = query.lte('price', filters.priceMax);\r\n    }\r\n\r\n    if (filters.search) {\r\n      query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,brand.ilike.%${filters.search}%`);\r\n    }\r\n\r\n    // Solo productos con stock (temporalmente comentado para testing)\r\n    // query = query.gt('stock', 0);\r\n\r\n    // Ordenamiento\r\n    const orderColumn = filters.sortBy === 'created_at' ? 'created_at' :\r\n                       filters.sortBy === 'brand' ? 'brand' :\r\n                       (filters.sortBy || 'created_at');\r\n    query = query.order(orderColumn, { ascending: filters.sortOrder === 'asc' });\r\n\r\n    // Paginación\r\n    const page = filters.page || 1;\r\n    const limit = filters.limit || 10;\r\n    const from = (page - 1) * limit;\r\n    const to = from + limit - 1;\r\n    query = query.range(from, to);\r\n\r\n    // Ejecutar query\r\n    const { data: products, error, count } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error en GET /api/products - Supabase:', error);\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error obteniendo productos de la base de datos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Calcular información de paginación\r\n    const totalPages = Math.ceil((count || 0) / limit);\r\n\r\n    const response: PaginatedResponse<ProductWithCategory> = {\r\n      data: products || [],\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total: count || 0,\r\n        totalPages,\r\n      },\r\n      success: true,\r\n      message: `${products?.length || 0} productos encontrados`,\r\n    };\r\n\r\n    // Agregar headers de cache para mejorar performance\r\n    return NextResponse.json(response, {\r\n      headers: {\r\n        'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en GET /api/products:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST /api/products - Crear producto (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // TODO: Verificar permisos de administrador\r\n    // const { userId } = auth();\r\n    // if (!userId || !isAdmin(userId)) {\r\n    //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });\r\n    // }\r\n\r\n    const body = await request.json();\r\n    \r\n    // Validar datos del producto\r\n    const productData = validateData(ProductSchema, body);\r\n    \r\n    const supabase = getSupabaseClient(true); // Usar cliente admin\r\n\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/products');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio administrativo no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Crear slug si no se proporciona\r\n    if (!productData.slug) {\r\n      productData.slug = productData.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9]+/g, '-')\r\n        .replace(/(^-|-$)/g, '');\r\n    }\r\n\r\n    // Insertar producto\r\n    const { data: product, error } = await supabase\r\n      .from('products')\r\n      .insert(productData)\r\n      .select(`\r\n        *,\r\n        category:categories(id, name, slug)\r\n      `)\r\n      .single();\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'POST /api/products');\r\n    }\r\n\r\n    const response: ApiResponse<ProductWithCategory> = {\r\n      data: product,\r\n      success: true,\r\n      message: 'Producto creado exitosamente',\r\n    };\r\n\r\n    return NextResponse.json(response, { status: 201 });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en POST /api/products:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n"],"names":["GET","POST","request","searchParams","URL","url","queryParams","category","get","undefined","categories","split","filter","Boolean","brand","brands","paintType","paintTypes","priceMin","Number","priceMax","search","page","limit","sortBy","sortOrder","validationResult","safeValidateData","ProductFiltersSchema","success","console","error","errorResponse","data","NextResponse","json","status","filters","supabase","getSupabaseClient","query","from","select","count","categoryData","eq","single","id","length","categoriesData","in","categoryIds","map","cat","gte","lte","or","orderColumn","order","ascending","to","range","products","message","totalPages","Math","ceil","response","pagination","total","headers","body","productData","validateData","ProductSchema","slug","name","toLowerCase","replace","product","insert","handleSupabaseError"],"mappings":"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"}