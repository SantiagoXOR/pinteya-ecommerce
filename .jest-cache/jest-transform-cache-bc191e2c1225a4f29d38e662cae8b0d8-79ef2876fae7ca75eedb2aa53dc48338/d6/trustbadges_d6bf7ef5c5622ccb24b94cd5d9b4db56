2781c3384a2bb1d688b983397d75a5cd
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get FastShippingBadge () {
        return FastShippingBadge;
    },
    get InstantDeliveryBadge () {
        return InstantDeliveryBadge;
    },
    get LocalBusinessBadge () {
        return LocalBusinessBadge;
    },
    get MoneyBackBadge () {
        return MoneyBackBadge;
    },
    get PaymentSecurityBadge () {
        return PaymentSecurityBadge;
    },
    get QualityBadge () {
        return QualityBadge;
    },
    get SecurePurchaseBadge () {
        return SecurePurchaseBadge;
    },
    get SupportBadge () {
        return SupportBadge;
    },
    get TrustBadge () {
        return TrustBadge;
    },
    get TrustBadgeGroup () {
        return TrustBadgeGroup;
    },
    get trustBadgeVariants () {
        return trustBadgeVariants;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
const _lucidereact = require("lucide-react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const trustBadgeVariants = (0, _classvarianceauthority.cva)("inline-flex items-center gap-2 rounded-lg font-medium transition-all duration-200", {
    variants: {
        variant: {
            security: "bg-green-50 text-green-700 border border-green-200 hover:bg-green-100",
            guarantee: "bg-blue-50 text-blue-700 border border-blue-200 hover:bg-blue-100",
            shipping: "bg-orange-50 text-orange-700 border border-orange-200 hover:bg-orange-100",
            quality: "bg-purple-50 text-purple-700 border border-purple-200 hover:bg-purple-100",
            support: "bg-teal-50 text-teal-700 border border-teal-200 hover:bg-teal-100",
            payment: "bg-primary/10 text-primary border border-primary/20 hover:bg-primary/20"
        },
        size: {
            sm: "px-2 py-1 text-xs",
            md: "px-3 py-1.5 text-sm",
            lg: "px-4 py-2 text-base"
        },
        animation: {
            none: "",
            pulse: "animate-pulse",
            bounce: "animate-bounce",
            glow: "animate-pulse shadow-lg"
        }
    },
    defaultVariants: {
        variant: "security",
        size: "md",
        animation: "none"
    }
});
const TrustBadge = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, animation, icon, children, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        className: (0, _utils.cn)(trustBadgeVariants({
            variant,
            size,
            animation
        }), className),
        ...props,
        children: [
            icon,
            children
        ]
    }));
TrustBadge.displayName = "TrustBadge";
const SecurePurchaseBadge = /*#__PURE__*/ _react.forwardRef(({ text = "Compra Protegida", className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TrustBadge, {
        ref: ref,
        variant: "security",
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ShieldCheck, {
            className: "w-4 h-4"
        }),
        className: (0, _utils.cn)("", className),
        ...props,
        children: text
    }));
SecurePurchaseBadge.displayName = "SecurePurchaseBadge";
const MoneyBackBadge = /*#__PURE__*/ _react.forwardRef(({ days = 30, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(TrustBadge, {
        ref: ref,
        variant: "guarantee",
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Shield, {
            className: "w-4 h-4"
        }),
        className: (0, _utils.cn)("", className),
        ...props,
        children: [
            days,
            " d\xedas de garant\xeda"
        ]
    }));
MoneyBackBadge.displayName = "MoneyBackBadge";
const FastShippingBadge = /*#__PURE__*/ _react.forwardRef(({ hours = 24, text, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TrustBadge, {
        ref: ref,
        variant: "shipping",
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Truck, {
            className: "w-4 h-4"
        }),
        className: (0, _utils.cn)("", className),
        ...props,
        children: text || `Envío en ${hours}hs`
    }));
FastShippingBadge.displayName = "FastShippingBadge";
const QualityBadge = /*#__PURE__*/ _react.forwardRef(({ text = "Calidad Premium", rating, className, ...props }, ref)=>{
    // Validación segura del rating para prevenir errores de template literal
    const safeRating = typeof rating === 'number' && rating > 0 ? rating : null;
    const displayText = safeRating ? `${safeRating}★ ${text}` : text;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(TrustBadge, {
        ref: ref,
        variant: "quality",
        icon: safeRating ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Star, {
            className: "w-4 h-4 fill-current"
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Award, {
            className: "w-4 h-4"
        }),
        className: (0, _utils.cn)("", className),
        ...props,
        children: displayText
    });
});
QualityBadge.displayName = "QualityBadge";
const SupportBadge = /*#__PURE__*/ _react.forwardRef(({ type = 'phone', hours = '24/7', className, ...props }, ref)=>{
    const getIcon = ()=>{
        switch(type){
            case 'phone':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Phone, {
                    className: "w-4 h-4"
                });
            case 'chat':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.MessageCircle, {
                    className: "w-4 h-4"
                });
            case 'email':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Clock, {
                    className: "w-4 h-4"
                });
            default:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Phone, {
                    className: "w-4 h-4"
                });
        }
    };
    const getText = ()=>{
        switch(type){
            case 'phone':
                return `Soporte ${hours}`;
            case 'chat':
                return `Chat en vivo`;
            case 'email':
                return `Respuesta ${hours}`;
            default:
                return `Soporte ${hours}`;
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(TrustBadge, {
        ref: ref,
        variant: "support",
        icon: getIcon(),
        className: (0, _utils.cn)("", className),
        ...props,
        children: getText()
    });
});
SupportBadge.displayName = "SupportBadge";
const PaymentSecurityBadge = /*#__PURE__*/ _react.forwardRef(({ provider = 'mercadopago', className, ...props }, ref)=>{
    const getContent = ()=>{
        switch(provider){
            case 'mercadopago':
                return {
                    icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CreditCard, {
                        className: "w-4 h-4"
                    }),
                    text: "MercadoPago Seguro"
                };
            case 'ssl':
                return {
                    icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Lock, {
                        className: "w-4 h-4"
                    }),
                    text: "SSL Certificado"
                };
            case 'secure':
                return {
                    icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ShieldCheck, {
                        className: "w-4 h-4"
                    }),
                    text: "Pago 100% Seguro"
                };
            default:
                return {
                    icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CreditCard, {
                        className: "w-4 h-4"
                    }),
                    text: "Pago Seguro"
                };
        }
    };
    const { icon, text } = getContent();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(TrustBadge, {
        ref: ref,
        variant: "payment",
        icon: icon,
        className: (0, _utils.cn)("", className),
        ...props,
        children: text
    });
});
PaymentSecurityBadge.displayName = "PaymentSecurityBadge";
const LocalBusinessBadge = /*#__PURE__*/ _react.forwardRef(({ city = "Córdoba", years = 15, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(TrustBadge, {
        ref: ref,
        variant: "quality",
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.MapPin, {
            className: "w-4 h-4"
        }),
        className: (0, _utils.cn)("", className),
        ...props,
        children: [
            years,
            " a\xf1os en ",
            city
        ]
    }));
LocalBusinessBadge.displayName = "LocalBusinessBadge";
const InstantDeliveryBadge = /*#__PURE__*/ _react.forwardRef(({ text = "Entrega Inmediata", className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TrustBadge, {
        ref: ref,
        variant: "shipping",
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Zap, {
            className: "w-4 h-4"
        }),
        animation: "glow",
        className: (0, _utils.cn)("", className),
        ...props,
        children: text
    }));
InstantDeliveryBadge.displayName = "InstantDeliveryBadge";
const TrustBadgeGroup = /*#__PURE__*/ _react.forwardRef(({ badges = [
    'secure',
    'guarantee',
    'shipping'
], layout = 'horizontal', size = 'md', className, ...props }, ref)=>{
    const layoutClasses = {
        horizontal: "flex flex-wrap gap-2",
        vertical: "flex flex-col gap-2",
        grid: "grid grid-cols-2 md:grid-cols-3 gap-2"
    };
    const renderBadge = (badge)=>{
        const commonProps = {
            size
        };
        switch(badge){
            case 'secure':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(SecurePurchaseBadge, {
                    ...commonProps
                }, badge);
            case 'guarantee':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MoneyBackBadge, {
                    ...commonProps
                }, badge);
            case 'shipping':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(FastShippingBadge, {
                    ...commonProps
                }, badge);
            case 'quality':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(QualityBadge, {
                    ...commonProps
                }, badge);
            case 'support':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(SupportBadge, {
                    ...commonProps
                }, badge);
            case 'payment':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(PaymentSecurityBadge, {
                    ...commonProps
                }, badge);
            case 'local':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(LocalBusinessBadge, {
                    ...commonProps
                }, badge);
            case 'instant':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(InstantDeliveryBadge, {
                    ...commonProps
                }, badge);
            default:
                return null;
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: ref,
        className: (0, _utils.cn)(layoutClasses[layout], className),
        ...props,
        children: badges.map(renderBadge)
    });
});
TrustBadgeGroup.displayName = "TrustBadgeGroup";

//# sourceMappingURL=data:application/json;base64,