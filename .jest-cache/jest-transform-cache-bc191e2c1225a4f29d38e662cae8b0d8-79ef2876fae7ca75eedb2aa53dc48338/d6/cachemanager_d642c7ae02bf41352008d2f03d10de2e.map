{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CACHE MANAGER\r\n// ===================================\r\n\r\nimport { redisCache } from './redis';\r\nimport { logger, LogLevel, LogCategory } from './logger';\r\n\r\n// Configuración de cache\r\nexport interface CacheConfig {\r\n  ttl: number;           // Time to live en segundos\r\n  prefix: string;        // Prefijo para las claves\r\n  compress?: boolean;    // Comprimir datos grandes\r\n  serialize?: boolean;   // Serializar objetos complejos\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const CACHE_CONFIGS = {\r\n  // Para respuestas de MercadoPago (corta duración)\r\n  MERCADOPAGO_RESPONSE: {\r\n    ttl: 300,              // 5 minutos\r\n    prefix: 'mp_response',\r\n    compress: true,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para información de pagos (duración media)\r\n  PAYMENT_INFO: {\r\n    ttl: 1800,             // 30 minutos\r\n    prefix: 'payment_info',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para configuraciones del sistema (larga duración)\r\n  SYSTEM_CONFIG: {\r\n    ttl: 3600,             // 1 hora\r\n    prefix: 'sys_config',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para datos de productos (duración media)\r\n  PRODUCT_DATA: {\r\n    ttl: 900,              // 15 minutos\r\n    prefix: 'product',\r\n    compress: true,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para sesiones de usuario (corta duración)\r\n  USER_SESSION: {\r\n    ttl: 600,              // 10 minutos\r\n    prefix: 'user_session',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Clase principal para manejo de cache\r\n */\r\nexport class CacheManager {\r\n  private static instance: CacheManager;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): CacheManager {\r\n    if (!CacheManager.instance) {\r\n      CacheManager.instance = new CacheManager();\r\n    }\r\n    return CacheManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Genera clave de cache\r\n   */\r\n  private generateKey(config: CacheConfig, key: string): string {\r\n    return `cache:${config.prefix}:${key}`;\r\n  }\r\n\r\n  /**\r\n   * Serializa datos para almacenamiento\r\n   */\r\n  private serialize(data: any, config: CacheConfig): string {\r\n    try {\r\n      let serialized = config.serialize ? JSON.stringify(data) : data.toString();\r\n      \r\n      if (config.compress && serialized.length > 1000) {\r\n        // Implementación básica de compresión (en producción usar zlib)\r\n        serialized = this.simpleCompress(serialized);\r\n      }\r\n      \r\n      return serialized;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Serialization error', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deserializa datos del cache\r\n   */\r\n  private deserialize(data: string, config: CacheConfig): any {\r\n    try {\r\n      let deserialized = data;\r\n      \r\n      if (config.compress && data.startsWith('COMPRESSED:')) {\r\n        deserialized = this.simpleDecompress(data);\r\n      }\r\n      \r\n      return config.serialize ? JSON.parse(deserialized) : deserialized;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Deserialization error', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compresión simple (placeholder para implementación real)\r\n   */\r\n  private simpleCompress(data: string): string {\r\n    // En producción, usar zlib o similar\r\n    return `COMPRESSED:${data}`;\r\n  }\r\n\r\n  /**\r\n   * Descompresión simple (placeholder para implementación real)\r\n   */\r\n  private simpleDecompress(data: string): string {\r\n    return data.replace('COMPRESSED:', '');\r\n  }\r\n\r\n  /**\r\n   * Obtiene un valor del cache\r\n   */\r\n  async get<T>(key: string, config: CacheConfig): Promise<T | null> {\r\n    const startTime = Date.now();\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const cached = await redisCache.get(cacheKey);\r\n      \r\n      if (cached === null) {\r\n        logger.info(LogCategory.API, 'Cache miss');\r\n        return null;\r\n      }\r\n\r\n      const result = this.deserialize(cached, config);\r\n      \r\n      logger.info(LogCategory.API, 'Cache hit');\r\n\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache get error', error as Error);\r\n      return null; // Fallar silenciosamente para no afectar la aplicación\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece un valor en el cache\r\n   */\r\n  async set<T>(key: string, value: T, config: CacheConfig): Promise<boolean> {\r\n    const startTime = Date.now();\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const serialized = this.serialize(value, config);\r\n      const success = await redisCache.set(cacheKey, serialized, config.ttl);\r\n      \r\n      logger.info(LogCategory.API, 'Cache set');\r\n\r\n      return success;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache set error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina un valor del cache\r\n   */\r\n  async delete(key: string, config: CacheConfig): Promise<boolean> {\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const success = await redisCache.del(cacheKey);\r\n      \r\n      logger.info(LogCategory.API, 'Cache delete');\r\n\r\n      return success;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache delete error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene o establece un valor (patrón cache-aside)\r\n   */\r\n  async getOrSet<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheConfig\r\n  ): Promise<T> {\r\n    // Intentar obtener del cache primero\r\n    const cached = await this.get<T>(key, config);\r\n    if (cached !== null) {\r\n      return cached;\r\n    }\r\n\r\n    // Si no está en cache, obtener del origen\r\n    const startTime = Date.now();\r\n    try {\r\n      const value = await fetcher();\r\n      \r\n      // Almacenar en cache de forma asíncrona\r\n      this.set(key, value, config).catch(error => {\r\n        logger.warn(LogCategory.API, 'Background cache set failed');\r\n      });\r\n\r\n      logger.info(LogCategory.API, 'Cache miss - fetched from source');\r\n\r\n      return value;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Fetcher error in getOrSet', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalida cache por patrón\r\n   */\r\n  async invalidatePattern(pattern: string, config: CacheConfig): Promise<number> {\r\n    const fullPattern = this.generateKey(config, pattern);\r\n    \r\n    try {\r\n      // En Redis real, usaríamos SCAN + DEL para patrones\r\n      // Por simplicidad, aquí solo registramos la operación\r\n      logger.info(LogCategory.API, 'Cache invalidation requested');\r\n\r\n      // TODO: Implementar invalidación real por patrón\r\n      return 0;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache invalidation error', error as Error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas del cache\r\n   */\r\n  async getStats(): Promise<{\r\n    hits: number;\r\n    misses: number;\r\n    hitRate: number;\r\n    totalKeys: number;\r\n  }> {\r\n    try {\r\n      // En implementación real, obtendríamos estas métricas de Redis\r\n      return {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0,\r\n        totalKeys: 0,\r\n      };\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache stats error', error as Error);\r\n      return {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0,\r\n        totalKeys: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia todo el cache de un prefijo\r\n   */\r\n  async clear(config: CacheConfig): Promise<boolean> {\r\n    try {\r\n      logger.info(LogCategory.API, 'Cache clear requested');\r\n\r\n      // TODO: Implementar limpieza real por prefijo\r\n      return true;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache clear error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const cacheManager = CacheManager.getInstance();\r\n\r\n/**\r\n * Decorador para cachear resultados de funciones\r\n */\r\nexport function cached(config: CacheConfig, keyGenerator?: (...args: any[]) => string) {\r\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      const key = keyGenerator ? keyGenerator(...args) : `${propertyName}:${JSON.stringify(args)}`;\r\n      \r\n      return cacheManager.getOrSet(\r\n        key,\r\n        () => method.apply(this, args),\r\n        config\r\n      );\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * Funciones de utilidad para casos comunes\r\n */\r\nexport const CacheUtils = {\r\n  /**\r\n   * Cache para respuestas de MercadoPago\r\n   */\r\n  async cacheMercadoPagoResponse<T>(key: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(key, fetcher, CACHE_CONFIGS.MERCADOPAGO_RESPONSE);\r\n  },\r\n\r\n  /**\r\n   * Cache para información de pagos\r\n   */\r\n  async cachePaymentInfo<T>(paymentId: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(`payment:${paymentId}`, fetcher, CACHE_CONFIGS.PAYMENT_INFO);\r\n  },\r\n\r\n  /**\r\n   * Cache para datos de productos\r\n   */\r\n  async cacheProductData<T>(productId: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(`product:${productId}`, fetcher, CACHE_CONFIGS.PRODUCT_DATA);\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de un pago específico\r\n   */\r\n  async invalidatePayment(paymentId: string): Promise<boolean> {\r\n    return cacheManager.delete(`payment:${paymentId}`, CACHE_CONFIGS.PAYMENT_INFO);\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de un producto específico\r\n   */\r\n  async invalidateProduct(productId: string): Promise<boolean> {\r\n    return cacheManager.delete(`product:${productId}`, CACHE_CONFIGS.PRODUCT_DATA);\r\n  },\r\n};\r\n"],"names":["CACHE_CONFIGS","CacheManager","CacheUtils","cacheManager","cached","MERCADOPAGO_RESPONSE","ttl","prefix","compress","serialize","PAYMENT_INFO","SYSTEM_CONFIG","PRODUCT_DATA","USER_SESSION","getInstance","instance","generateKey","config","key","data","serialized","JSON","stringify","toString","length","simpleCompress","error","logger","LogCategory","API","deserialize","deserialized","startsWith","simpleDecompress","parse","replace","get","startTime","Date","now","cacheKey","redisCache","info","result","set","value","success","delete","del","getOrSet","fetcher","catch","warn","invalidatePattern","pattern","fullPattern","getStats","hits","misses","hitRate","totalKeys","clear","keyGenerator","target","propertyName","descriptor","method","args","apply","cacheMercadoPagoResponse","cachePaymentInfo","paymentId","cacheProductData","productId","invalidatePayment","invalidateProduct"],"mappings":"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"}