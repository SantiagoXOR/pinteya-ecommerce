8b3afc204e5ae0ceba487cf994cce7e2
// ===================================
// PINTEYA E-COMMERCE - RETRY LOGIC WITH EXPONENTIAL BACKOFF
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RETRY_CONFIGS () {
        return RETRY_CONFIGS;
    },
    get createRetryFunction () {
        return createRetryFunction;
    },
    get retryMercadoPagoOperation () {
        return retryMercadoPagoOperation;
    },
    get retryWebhookOperation () {
        return retryWebhookOperation;
    },
    get retryWithBackoff () {
        return retryWithBackoff;
    }
});
const _logger = require("./logger");
const _metrics = require("./metrics");
const RETRY_CONFIGS = {
    // Para llamadas críticas a MercadoPago
    MERCADOPAGO_CRITICAL: {
        maxRetries: 3,
        baseDelayMs: 1000,
        maxDelayMs: 30000,
        backoffMultiplier: 2,
        jitterMs: 500,
        retryableErrors: [
            'ECONNRESET',
            'ENOTFOUND',
            'ECONNREFUSED',
            'ETIMEDOUT',
            'NETWORK_ERROR',
            'TIMEOUT',
            '500',
            '502',
            '503',
            '504',
            '429' // Rate limit - retry después de delay
        ],
        nonRetryableErrors: [
            '400',
            '401',
            '403',
            '404',
            '422',
            'INVALID_CREDENTIALS',
            'INVALID_REQUEST',
            'PAYMENT_REJECTED'
        ]
    },
    // Para operaciones de consulta menos críticas
    MERCADOPAGO_QUERY: {
        maxRetries: 2,
        baseDelayMs: 500,
        maxDelayMs: 10000,
        backoffMultiplier: 2,
        jitterMs: 250,
        retryableErrors: [
            'ECONNRESET',
            'ENOTFOUND',
            'ETIMEDOUT',
            '500',
            '502',
            '503',
            '504'
        ],
        nonRetryableErrors: [
            '400',
            '401',
            '403',
            '404',
            '422'
        ]
    },
    // Para webhooks (menos agresivo)
    WEBHOOK_PROCESSING: {
        maxRetries: 1,
        baseDelayMs: 2000,
        maxDelayMs: 5000,
        backoffMultiplier: 1.5,
        jitterMs: 1000,
        retryableErrors: [
            'ECONNRESET',
            'ETIMEDOUT',
            '500',
            '503'
        ],
        nonRetryableErrors: [
            '400',
            '401',
            '403',
            '404',
            '422',
            'DUPLICATE_WEBHOOK'
        ]
    }
};
/**
 * Calcula el delay para el siguiente intento usando backoff exponencial con jitter
 */ function calculateDelay(attempt, config) {
    // Backoff exponencial: baseDelay * (multiplier ^ attempt)
    const exponentialDelay = config.baseDelayMs * Math.pow(config.backoffMultiplier, attempt);
    // Aplicar límite máximo
    const cappedDelay = Math.min(exponentialDelay, config.maxDelayMs);
    // Agregar jitter aleatorio para evitar thundering herd
    const jitter = Math.random() * config.jitterMs;
    return Math.floor(cappedDelay + jitter);
}
/**
 * Determina si un error es reintentable
 */ function isRetryableError(error, config) {
    const errorMessage = (error.message || '').toLowerCase();
    const errorName = (error.name || '').toLowerCase();
    // Verificar errores no reintenables primero (tienen prioridad)
    for (const nonRetryableError of config.nonRetryableErrors){
        if (errorMessage.includes(nonRetryableError.toLowerCase()) || errorName.includes(nonRetryableError.toLowerCase())) {
            return false;
        }
    }
    // Verificar errores reintenables
    for (const retryableError of config.retryableErrors){
        if (errorMessage.includes(retryableError.toLowerCase()) || errorName.includes(retryableError.toLowerCase())) {
            return true;
        }
    }
    // Por defecto, no reintentar errores desconocidos
    return false;
}
/**
 * Extrae información del error para logging
 */ function extractErrorInfo(error) {
    const message = (error.message || '').toLowerCase();
    const name = (error.name || '').toLowerCase();
    // Detectar errores de red
    const networkErrors = [
        'econnreset',
        'enotfound',
        'econnrefused',
        'etimedout'
    ];
    const isNetwork = networkErrors.some((netError)=>message.includes(netError) || name.includes(netError));
    // Extraer código de estado HTTP si existe
    const statusMatch = message.match(/(\d{3})/);
    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;
    return {
        type: name || 'unknown',
        code: statusCode?.toString(),
        statusCode,
        isNetwork
    };
}
async function retryWithBackoff(operation, config, operationName = 'unknown') {
    const startTime = Date.now();
    let lastError;
    let attempts = 0;
    _logger.logger.info(_logger.LogCategory.API, `Starting retry operation: ${operationName}`);
    for(let attempt = 0; attempt <= config.maxRetries; attempt++){
        attempts = attempt + 1;
        const attemptStart = Date.now();
        try {
            _logger.logger.info(_logger.LogCategory.API, `Retry attempt ${attempts}/${config.maxRetries + 1} for ${operationName}`);
            const result = await operation();
            const attemptDuration = Date.now() - attemptStart;
            const totalDuration = Date.now() - startTime;
            _logger.logger.info(_logger.LogCategory.API, `Retry operation succeeded: ${operationName}`);
            // ✅ NUEVO: Registrar métricas de retry exitoso
            await _metrics.metricsCollector.recordRetry(operationName, attempts, true, totalDuration);
            return {
                success: true,
                data: result,
                attempts,
                totalDuration,
                lastAttemptDuration: attemptDuration
            };
        } catch (error) {
            lastError = error;
            const attemptDuration = Date.now() - attemptStart;
            const errorInfo = extractErrorInfo(lastError);
            const attemptInfo = {
                attempt: attempts,
                maxRetries: config.maxRetries + 1,
                delay: 0,
                error: lastError,
                duration: attemptDuration
            };
            // Log del intento fallido
            _logger.logger.warn(_logger.LogCategory.API, `Retry attempt ${attempts} failed for ${operationName}`);
            // Si es el último intento, no calcular delay
            if (attempt === config.maxRetries) {
                break;
            }
            // Verificar si el error es reintentable
            if (!isRetryableError(lastError, config)) {
                _logger.logger.error(_logger.LogCategory.API, `Non-retryable error for ${operationName}`, lastError);
                break;
            }
            // Calcular delay para el siguiente intento
            const delay = calculateDelay(attempt, config);
            attemptInfo.delay = delay;
            _logger.logger.info(_logger.LogCategory.API, `Retrying ${operationName} in ${delay}ms`);
            // Esperar antes del siguiente intento
            await new Promise((resolve)=>setTimeout(resolve, delay));
        }
    }
    // Todos los intentos fallaron
    const totalDuration = Date.now() - startTime;
    _logger.logger.error(_logger.LogCategory.API, `All retry attempts failed for ${operationName}`, lastError);
    // ✅ NUEVO: Registrar métricas de retry fallido
    await _metrics.metricsCollector.recordRetry(operationName, attempts, false, totalDuration);
    return {
        success: false,
        error: lastError,
        attempts,
        totalDuration,
        lastAttemptDuration: 0
    };
}
async function retryMercadoPagoOperation(operation, operationName, isCritical = true) {
    const config = isCritical ? RETRY_CONFIGS.MERCADOPAGO_CRITICAL : RETRY_CONFIGS.MERCADOPAGO_QUERY;
    return retryWithBackoff(operation, config, `MercadoPago:${operationName}`);
}
async function retryWebhookOperation(operation, operationName) {
    return retryWithBackoff(operation, RETRY_CONFIGS.WEBHOOK_PROCESSING, `Webhook:${operationName}`);
}
function createRetryFunction(config, operationName) {
    return (operation)=>{
        return retryWithBackoff(operation, config, operationName);
    };
}

//# sourceMappingURL=data:application/json;base64,