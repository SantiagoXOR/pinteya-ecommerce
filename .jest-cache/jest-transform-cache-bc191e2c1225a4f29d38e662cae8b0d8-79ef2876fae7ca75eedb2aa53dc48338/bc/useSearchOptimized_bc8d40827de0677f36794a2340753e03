fa02f6ab322762b9367fcfd00f63c922
// ===================================
// HOOK: useSearchOptimized - Sistema de búsqueda con TanStack Query
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    useSearchOptimized: function() {
        return useSearchOptimized;
    }
});
const _react = require("react");
const _reactquery = require("@tanstack/react-query");
const _usedebounce = require("use-debounce");
const _products = require("../lib/api/products");
const _queryclient = require("../lib/query-client");
const _useSearchErrorHandler = require("./useSearchErrorHandler");
const _useSearchToast = require("./useSearchToast");
const _useSearchNavigation = require("./useSearchNavigation");
const _useTrendingSearches = require("./useTrendingSearches");
const _useRecentSearches = require("./useRecentSearches");
const _shop = require("../constants/shop");
function useSearchOptimized(options = {}) {
    const { debounceMs = 150, maxSuggestions = 6, searchLimit = 12, saveRecentSearches = true, enablePrefetch = true, onSearch, onSuggestionSelect } = options;
    // Estados locales
    const [query, setQuery] = (0, _react.useState)('');
    const [debouncedQuery, setDebouncedQuery] = (0, _react.useState)('');
    const [recentSearches, setRecentSearches] = (0, _react.useState)([]);
    const [hasSearched, setHasSearched] = (0, _react.useState)(false);
    // Hooks externos
    const queryClient = (0, _reactquery.useQueryClient)();
    const errorHandler = (0, _useSearchErrorHandler.useSearchErrorHandler)();
    const toastHandler = (0, _useSearchToast.useSearchToast)();
    const navigation = (0, _useSearchNavigation.useSearchNavigation)({
        scrollToTop: true,
        onBeforeNavigate: (url)=>console.log('🔍 Navegando a:', url),
        onAfterNavigate: (url)=>console.log('✅ Navegación completada:', url)
    });
    // Hooks para trending y recent searches
    const { trendingSearches, trackSearch } = (0, _useTrendingSearches.useTrendingSearches)({
        limit: 4,
        enabled: true
    });
    const { recentSearches: recentSearchesList, addSearch: addRecentSearch, getRecentSearches } = (0, _useRecentSearches.useRecentSearches)({
        maxSearches: _shop.SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,
        enablePersistence: saveRecentSearches,
        expirationDays: _shop.SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS
    });
    // ===================================
    // DEBOUNCED QUERY UPDATE
    // ===================================
    const updateDebouncedQuery = (0, _usedebounce.useDebouncedCallback)((value)=>{
        setDebouncedQuery(value);
        // Analytics tracking
        if (value.trim()) {
            console.log('🔍 useSearchOptimized: Query debounced:', value);
            console.log('🔍 useSearchOptimized: New debouncedQuery value:', value);
            console.log('🔍 useSearchOptimized: Value type:', typeof value);
            console.log('🔍 useSearchOptimized: Value length:', value?.length);
            console.log('🔍 useSearchOptimized: Query enabled condition will be:', !!value?.trim());
        }
    }, debounceMs, {
        maxWait: 2000,
        leading: false,
        trailing: true
    });
    // ===================================
    // TANSTACK QUERY INTEGRATION
    // ===================================
    // Query principal para búsquedas
    const { data: searchResults, isLoading, error, isFetching, isStale, dataUpdatedAt } = (0, _reactquery.useQuery)({
        queryKey: _queryclient.searchQueryKeys.search(debouncedQuery),
        queryFn: async ({ queryKey, signal })=>{
            const [, , searchQuery] = queryKey;
            if (!searchQuery?.trim()) return [];
            console.log('🔍 useSearchOptimized: Executing search for:', searchQuery);
            // AbortController para cancelar requests (nota: searchProducts no soporta signal aún)
            const response = await (0, _products.searchProducts)(searchQuery, maxSuggestions);
            console.log('🔍 useSearchOptimized: API response:', response);
            console.log('🔍 useSearchOptimized: Response data:', response.data);
            console.log('🔍 useSearchOptimized: Response success:', response.success);
            return response.data || [];
        },
        enabled: (()=>{
            const isEnabled = !!debouncedQuery?.trim() && debouncedQuery.length >= 1;
            console.log('🔍 useSearchOptimized: Query enabled condition:', isEnabled, 'for query:', debouncedQuery);
            return isEnabled;
        })(),
        ..._queryclient.searchQueryConfig
    });
    // ===================================
    // SUGGESTIONS GENERATION
    // ===================================
    const suggestions = (()=>{
        const allSuggestions = [];
        const hasQuery = !!debouncedQuery?.trim();
        console.log('🔍 useSearchOptimized: === GENERATING SUGGESTIONS ===');
        console.log('🔍 useSearchOptimized: hasQuery:', hasQuery);
        console.log('🔍 useSearchOptimized: debouncedQuery:', `"${debouncedQuery}"`);
        console.log('🔍 useSearchOptimized: query (current):', `"${query}"`);
        console.log('🔍 useSearchOptimized: isLoading:', isLoading);
        console.log('🔍 useSearchOptimized: error:', error);
        console.log('🔍 useSearchOptimized: searchResults:', searchResults);
        console.log('🔍 useSearchOptimized: searchResults type:', typeof searchResults);
        console.log('🔍 useSearchOptimized: searchResults.data isArray:', Array.isArray(searchResults?.data));
        console.log('🔍 useSearchOptimized: searchResults.data length:', searchResults?.data?.length);
        if (hasQuery) {
            // CUANDO HAY TEXTO: Priorizar productos SIEMPRE
            console.log('🔍 useSearchOptimized: *** PROCESSING QUERY MODE ***');
            if (Array.isArray(searchResults?.data) && searchResults.data.length > 0) {
                console.log('🔍 useSearchOptimized: Processing', searchResults.data.length, 'products');
                const productSuggestions = searchResults.data.map((product)=>{
                    console.log('🔍 useSearchOptimized: Mapping product:', product.name);
                    return {
                        id: product.id.toString(),
                        type: 'product',
                        title: product.name,
                        subtitle: product.category?.name,
                        image: product.images?.previews?.[0] || product.images?.thumbnails?.[0],
                        badge: product.stock > 0 ? 'En stock' : 'Sin stock',
                        href: `/products/${product.id}`
                    };
                });
                allSuggestions.push(...productSuggestions);
                console.log('🔍 useSearchOptimized: ✅ Added', productSuggestions.length, 'product suggestions');
            } else {
                console.log('🔍 useSearchOptimized: ❌ No products found or invalid searchResults');
                console.log('🔍 useSearchOptimized: searchResults details:', {
                    isArray: Array.isArray(searchResults?.data),
                    length: searchResults?.data?.length,
                    value: searchResults
                });
            }
            // Solo agregar recent/trending si hay muy pocos productos
            if (allSuggestions.length < 2) {
                console.log('🔍 useSearchOptimized: Adding recent searches as fallback');
                const recentSuggestions = getRecentSearches(2).map((search, index)=>({
                        id: `recent-${index}`,
                        type: 'recent',
                        title: search,
                        href: `/shop?q=${encodeURIComponent(search)}`
                    }));
                allSuggestions.push(...recentSuggestions);
                console.log('🔍 useSearchOptimized: Added', recentSuggestions.length, 'recent suggestions as fallback');
            }
        } else {
            // CUANDO NO HAY TEXTO: Mostrar trending y recent
            console.log('🔍 useSearchOptimized: *** PROCESSING EMPTY MODE ***');
            // Agregar búsquedas recientes primero
            const recentSuggestions = getRecentSearches(3).map((search, index)=>({
                    id: `recent-${index}`,
                    type: 'recent',
                    title: search,
                    href: `/shop?q=${encodeURIComponent(search)}`
                }));
            allSuggestions.push(...recentSuggestions);
            console.log('🔍 useSearchOptimized: Added', recentSuggestions.length, 'recent suggestions');
            // Agregar trending searches
            if (allSuggestions.length < maxSuggestions) {
                const remainingSlots = maxSuggestions - allSuggestions.length;
                const trendingSuggestions = trendingSearches.slice(0, remainingSlots).map((trending)=>({
                        id: trending.id,
                        type: 'trending',
                        title: trending.query,
                        href: trending.href,
                        badge: trending.count ? `${trending.count}` : undefined
                    }));
                allSuggestions.push(...trendingSuggestions);
                console.log('🔍 useSearchOptimized: Added', trendingSuggestions.length, 'trending suggestions');
            }
        }
        const finalSuggestions = allSuggestions.slice(0, maxSuggestions);
        console.log('🔍 useSearchOptimized: === FINAL RESULT ===');
        console.log('🔍 useSearchOptimized: Final suggestions count:', finalSuggestions.length);
        console.log('🔍 useSearchOptimized: Final suggestions types:', finalSuggestions.map((s)=>s.type));
        console.log('🔍 useSearchOptimized: Final suggestions titles:', finalSuggestions.map((s)=>s.title));
        console.log('🔍 useSearchOptimized: === END SUGGESTIONS ===');
        return finalSuggestions;
    })();
    console.log('🔍 useSearchOptimized: Generated suggestions:', suggestions.length, suggestions);
    // ===================================
    // SEARCH FUNCTIONS
    // ===================================
    const searchWithDebounce = (0, _react.useCallback)((searchQuery)=>{
        setQuery(searchQuery);
        updateDebouncedQuery(searchQuery);
        // Prefetch si está habilitado y la query es válida
        if (enablePrefetch && searchQuery.trim().length >= 1) {
            // Prefetch de datos de búsqueda
            queryClient.prefetchQuery({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery),
                queryFn: ()=>(0, _products.searchProducts)(searchQuery, maxSuggestions),
                ..._queryclient.searchQueryConfig
            });
            // Prefetch de página de resultados
            navigation.prefetchSearch(searchQuery.trim());
        }
    }, [
        updateDebouncedQuery,
        enablePrefetch,
        queryClient,
        maxSuggestions,
        navigation
    ]);
    const executeSearch = (0, _react.useCallback)(async (searchQuery)=>{
        if (!searchQuery.trim()) return;
        try {
            setHasSearched(true);
            // Guardar en historial usando el hook
            if (saveRecentSearches) {
                addRecentSearch(searchQuery.trim());
            }
            // Registrar en trending searches
            trackSearch(searchQuery.trim()).catch(console.warn);
            // Navegar a página de resultados usando navegación optimizada
            navigation.navigateToSearch(searchQuery.trim());
            // Callback externo
            if (onSearch && searchResults) {
                onSearch(searchQuery, searchResults);
            }
            toastHandler.showSuccessToast(searchQuery, searchResults?.data?.length || 0);
        } catch (error) {
            console.error('❌ useSearchOptimized: Error en executeSearch:', error);
            errorHandler.handleError(error);
        }
    }, [
        saveRecentSearches,
        recentSearches,
        navigation,
        onSearch,
        searchResults,
        toastHandler,
        errorHandler
    ]);
    const selectSuggestion = (0, _react.useCallback)((suggestion)=>{
        console.log('✅ useSearchOptimized: Suggestion selected:', suggestion.title);
        // Navegar según el tipo de sugerencia
        if (suggestion.type === 'product') {
            navigation.navigateToProduct(suggestion.id);
        } else {
            // Para búsquedas recientes o trending, navegar a búsqueda
            navigation.navigateToSearch(suggestion.title);
        }
        // Callback externo
        if (onSuggestionSelect) {
            onSuggestionSelect(suggestion);
        }
        toastHandler.showInfoToast(`${suggestion.type === 'product' ? 'Producto' : 'Búsqueda'} seleccionado`, suggestion.title);
    }, [
        navigation,
        onSuggestionSelect,
        toastHandler
    ]);
    const clearSearch = (0, _react.useCallback)(()=>{
        setQuery('');
        setDebouncedQuery('');
        setHasSearched(false);
        // Limpiar cache de búsquedas si es necesario
        queryClient.removeQueries({
            queryKey: _queryclient.searchQueryKeys.searches()
        });
    }, [
        queryClient
    ]);
    // ===================================
    // LIFECYCLE
    // ===================================
    const initialize = (0, _react.useCallback)(()=>{
        // Cargar búsquedas recientes
        if (saveRecentSearches) {
            try {
                const saved = localStorage.getItem('pinteya-recent-searches');
                if (saved && saved.trim() !== '' && saved !== '""' && saved !== "''") {
                    // Validar que no esté corrupto
                    if (saved.includes('""') && saved.length < 5) {
                        console.warn('Detected corrupted recent searches data, cleaning up');
                        localStorage.removeItem('pinteya-recent-searches');
                        return;
                    }
                    const parsed = JSON.parse(saved);
                    // Verificar que sea un array válido
                    if (Array.isArray(parsed)) {
                        setRecentSearches(parsed);
                    } else {
                        console.warn('Invalid recent searches format, resetting');
                        localStorage.removeItem('pinteya-recent-searches');
                    }
                }
            } catch (error) {
                console.warn('Error cargando búsquedas recientes:', error);
                // Limpiar datos corruptos
                localStorage.removeItem('pinteya-recent-searches');
            }
        }
    }, [
        saveRecentSearches
    ]);
    const cleanup = (0, _react.useCallback)(()=>{
        // Limpiar debounce y cache si es necesario
        updateDebouncedQuery.cancel();
    }, [
        updateDebouncedQuery
    ]);
    // Inicializar al montar
    (0, _react.useEffect)(()=>{
        initialize();
        return cleanup;
    }, [
        initialize,
        cleanup
    ]);
    // ===================================
    // RETURN
    // ===================================
    return {
        // Estado de búsqueda
        query,
        results: searchResults || [],
        suggestions,
        isLoading,
        error: error?.message || null,
        hasSearched,
        recentSearches: recentSearchesList,
        trendingSearches,
        // Estados de TanStack Query
        isFetching,
        isStale,
        dataUpdatedAt,
        // Estado de errores y toasts
        searchError: errorHandler.currentError,
        isRetrying: errorHandler.isRetrying,
        retryCount: errorHandler.retryCount,
        toasts: toastHandler.toasts,
        // Funciones principales
        searchWithDebounce,
        executeSearch,
        selectSuggestion,
        clearSearch,
        initialize,
        cleanup,
        // Funciones de manejo de errores
        clearError: errorHandler.clearError,
        retryManually: errorHandler.retryManually,
        // Funciones de toast
        removeToast: toastHandler.removeToast,
        clearToasts: toastHandler.clearToasts,
        // Utilidades de cache
        invalidateSearch: (searchQuery)=>queryClient.invalidateQueries({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery)
            }),
        prefetchSearch: (searchQuery)=>queryClient.prefetchQuery({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery),
                queryFn: ()=>(0, _products.searchProducts)(searchQuery, maxSuggestions),
                ..._queryclient.searchQueryConfig
            }),
        // Funciones de navegación optimizada
        navigateToSearch: navigation.navigateToSearch,
        navigateToProduct: navigation.navigateToProduct,
        navigateToCategory: navigation.navigateToCategory,
        prefetchSearchPage: navigation.prefetchSearch,
        prefetchProductPage: navigation.prefetchProduct,
        getCurrentSearchQuery: navigation.getCurrentSearchQuery,
        buildSearchUrl: navigation.buildSearchUrl
    };
}
const _default = useSearchOptimized;

//# sourceMappingURL=data:application/json;base64,