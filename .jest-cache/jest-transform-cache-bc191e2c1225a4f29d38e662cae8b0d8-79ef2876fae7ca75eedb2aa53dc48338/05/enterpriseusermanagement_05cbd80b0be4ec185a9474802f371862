1750d3420c6ec567a3a7f2a33fc52de5
/**
 * Enterprise User Management
 * Gestión avanzada de usuarios para el sistema enterprise
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getEnterpriseUser () {
        return getEnterpriseUser;
    },
    get getUserStatistics () {
        return getUserStatistics;
    },
    get listEnterpriseUsers () {
        return listEnterpriseUsers;
    },
    get recordUserLogin () {
        return recordUserLogin;
    },
    get toggleUserStatus () {
        return toggleUserStatus;
    },
    get updateUserRole () {
        return updateUserRole;
    }
});
const _supabase = require("../supabase");
const _logger = require("../logger");
async function getEnterpriseUser(userId, options = {}) {
    try {
        const { data, error } = await _supabase.supabaseAdmin.from('users').select(`
        id,
        email,
        name,
        role,
        is_active,
        last_login,
        created_at,
        updated_at
        ${options.includePermissions ? ', permissions' : ''}
      `).eq('id', userId).single();
        if (error) {
            _logger.logger.error('Error obteniendo usuario enterprise:', error);
            return null;
        }
        return {
            id: data.id,
            email: data.email,
            name: data.name,
            role: data.role,
            permissions: data.permissions || [],
            isActive: data.is_active,
            lastLogin: data.last_login ? new Date(data.last_login) : undefined,
            createdAt: new Date(data.created_at),
            updatedAt: new Date(data.updated_at)
        };
    } catch (error) {
        _logger.logger.error('Error en getEnterpriseUser:', error);
        return null;
    }
}
async function listEnterpriseUsers(options = {}) {
    try {
        let query = _supabase.supabaseAdmin.from('users').select(`
        id,
        email,
        name,
        role,
        is_active,
        last_login,
        created_at,
        updated_at
        ${options.includePermissions ? ', permissions' : ''}
      `);
        if (options.filterByRole) {
            query = query.eq('role', options.filterByRole);
        }
        if (options.isActive !== undefined) {
            query = query.eq('is_active', options.isActive);
        }
        const { data, error } = await query.order('created_at', {
            ascending: false
        });
        if (error) {
            _logger.logger.error('Error listando usuarios enterprise:', error);
            return [];
        }
        return data.map((user)=>({
                id: user.id,
                email: user.email,
                name: user.name,
                role: user.role,
                permissions: user.permissions || [],
                isActive: user.is_active,
                lastLogin: user.last_login ? new Date(user.last_login) : undefined,
                createdAt: new Date(user.created_at),
                updatedAt: new Date(user.updated_at)
            }));
    } catch (error) {
        _logger.logger.error('Error en listEnterpriseUsers:', error);
        return [];
    }
}
async function updateUserRole(userId, newRole) {
    try {
        const { error } = await _supabase.supabaseAdmin.from('users').update({
            role: newRole,
            updated_at: new Date().toISOString()
        }).eq('id', userId);
        if (error) {
            _logger.logger.error('Error actualizando rol de usuario:', error);
            return false;
        }
        _logger.logger.info(`Rol de usuario ${userId} actualizado a ${newRole}`);
        return true;
    } catch (error) {
        _logger.logger.error('Error en updateUserRole:', error);
        return false;
    }
}
async function toggleUserStatus(userId, isActive) {
    try {
        const { error } = await _supabase.supabaseAdmin.from('users').update({
            is_active: isActive,
            updated_at: new Date().toISOString()
        }).eq('id', userId);
        if (error) {
            _logger.logger.error('Error cambiando estado de usuario:', error);
            return false;
        }
        _logger.logger.info(`Usuario ${userId} ${isActive ? 'activado' : 'desactivado'}`);
        return true;
    } catch (error) {
        _logger.logger.error('Error en toggleUserStatus:', error);
        return false;
    }
}
async function getUserStatistics() {
    try {
        const { data, error } = await _supabase.supabaseAdmin.from('users').select('role, is_active').not('role', 'is', null);
        if (error) {
            _logger.logger.error('Error obteniendo estadísticas de usuarios:', error);
            return null;
        }
        const stats = {
            total: data.length,
            active: data.filter((u)=>u.is_active).length,
            inactive: data.filter((u)=>!u.is_active).length,
            byRole: {
                admin: data.filter((u)=>u.role === 'admin').length,
                customer: data.filter((u)=>u.role === 'customer').length,
                moderator: data.filter((u)=>u.role === 'moderator').length
            }
        };
        return stats;
    } catch (error) {
        _logger.logger.error('Error en getUserStatistics:', error);
        return null;
    }
}
async function recordUserLogin(userId) {
    try {
        await _supabase.supabaseAdmin.from('users').update({
            last_login: new Date().toISOString(),
            updated_at: new Date().toISOString()
        }).eq('id', userId);
    } catch (error) {
        _logger.logger.error('Error registrando login de usuario:', error);
    }
}

//# sourceMappingURL=data:application/json;base64,