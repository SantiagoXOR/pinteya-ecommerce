{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\validation\\enterprise-validation-system.ts"],"sourcesContent":["/**\n * Sistema Enterprise de Validación y Sanitización\n * Unifica y extiende todas las validaciones con capacidades enterprise\n */\n\nimport { z } from 'zod';\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\nimport DOMPurify from 'isomorphic-dompurify';\nimport validator from 'validator';\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\n// =====================================================\n// TIPOS Y INTERFACES ENTERPRISE\n// =====================================================\n\nexport interface ValidationResult<T = any> {\n  success: boolean;\n  data?: T;\n  errors?: ValidationError[];\n  sanitized?: T;\n  metadata?: ValidationMetadata;\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  code: string;\n  value?: any;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface ValidationMetadata {\n  validatedAt: string;\n  validatedBy?: string;\n  sanitizationApplied: boolean;\n  securityLevel: 'basic' | 'standard' | 'high' | 'critical';\n  rulesApplied: string[];\n  performanceMs: number;\n}\n\nexport interface EnterpriseValidationConfig {\n  enableSanitization?: boolean;\n  enableSecurityValidation?: boolean;\n  enableAuditLogging?: boolean;\n  securityLevel?: 'basic' | 'standard' | 'high' | 'critical';\n  customSanitizers?: Record<string, (value: any) => any>;\n  customValidators?: Record<string, z.ZodSchema>;\n  allowedTags?: string[];\n  allowedAttributes?: string[];\n  maxStringLength?: number;\n  maxArrayLength?: number;\n  maxObjectDepth?: number;\n}\n\nexport interface SanitizationOptions {\n  removeHtml?: boolean;\n  removeScripts?: boolean;\n  normalizeWhitespace?: boolean;\n  trimStrings?: boolean;\n  escapeHtml?: boolean;\n  removeEmojis?: boolean;\n  removeSqlKeywords?: boolean;\n  maxLength?: number;\n  allowedCharacters?: RegExp;\n}\n\n// =====================================================\n// CONFIGURACIONES PREDEFINIDAS ENTERPRISE\n// =====================================================\n\nexport const ENTERPRISE_VALIDATION_CONFIGS: Record<string, EnterpriseValidationConfig> = {\n  // Validación crítica para operaciones admin\n  CRITICAL_ADMIN: {\n    enableSanitization: true,\n    enableSecurityValidation: true,\n    enableAuditLogging: true,\n    securityLevel: 'critical',\n    allowedTags: [], // No HTML permitido\n    maxStringLength: 1000,\n    maxArrayLength: 100,\n    maxObjectDepth: 5\n  },\n\n  // Validación alta para APIs de pagos\n  HIGH_PAYMENT: {\n    enableSanitization: true,\n    enableSecurityValidation: true,\n    enableAuditLogging: true,\n    securityLevel: 'high',\n    allowedTags: [],\n    maxStringLength: 500,\n    maxArrayLength: 50,\n    maxObjectDepth: 3\n  },\n\n  // Validación estándar para APIs públicas\n  STANDARD_PUBLIC: {\n    enableSanitization: true,\n    enableSecurityValidation: true,\n    enableAuditLogging: false,\n    securityLevel: 'standard',\n    allowedTags: ['b', 'i', 'em', 'strong'],\n    maxStringLength: 2000,\n    maxArrayLength: 200,\n    maxObjectDepth: 4\n  },\n\n  // Validación básica para contenido de usuario\n  BASIC_USER: {\n    enableSanitization: true,\n    enableSecurityValidation: false,\n    enableAuditLogging: false,\n    securityLevel: 'basic',\n    allowedTags: ['b', 'i', 'em', 'strong', 'p', 'br'],\n    maxStringLength: 5000,\n    maxArrayLength: 500,\n    maxObjectDepth: 3\n  }\n};\n\n// =====================================================\n// SANITIZADORES ENTERPRISE\n// =====================================================\n\nexport class EnterpriseSanitizer {\n  private config: EnterpriseValidationConfig;\n\n  constructor(config: EnterpriseValidationConfig = ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC) {\n    this.config = config;\n  }\n\n  /**\n   * Sanitiza una cadena de texto\n   */\n  sanitizeString(value: string, options: SanitizationOptions = {}): string {\n    if (typeof value !== 'string') {\n      return String(value || '');\n    }\n\n    let sanitized = value;\n\n    // Remover scripts maliciosos\n    if (options.removeScripts !== false) {\n      sanitized = sanitized.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n      sanitized = sanitized.replace(/javascript:/gi, '');\n      sanitized = sanitized.replace(/on\\w+\\s*=/gi, '');\n    }\n\n    // Remover HTML si está configurado\n    if (options.removeHtml) {\n      sanitized = DOMPurify.sanitize(sanitized, { \n        ALLOWED_TAGS: this.config.allowedTags || [],\n        ALLOWED_ATTR: this.config.allowedAttributes || []\n      });\n    }\n\n    // Escapar HTML\n    if (options.escapeHtml) {\n      sanitized = validator.escape(sanitized);\n    }\n\n    // Normalizar espacios en blanco\n    if (options.normalizeWhitespace !== false) {\n      sanitized = sanitized.replace(/\\s+/g, ' ');\n    }\n\n    // Trim strings\n    if (options.trimStrings !== false) {\n      sanitized = sanitized.trim();\n    }\n\n    // Remover emojis si está configurado\n    if (options.removeEmojis) {\n      sanitized = sanitized.replace(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]/gu, '');\n    }\n\n    // Remover palabras clave SQL sospechosas\n    if (options.removeSqlKeywords) {\n      const sqlKeywords = /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b/gi;\n      sanitized = sanitized.replace(sqlKeywords, '');\n    }\n\n    // Aplicar longitud máxima\n    const maxLength = options.maxLength || this.config.maxStringLength || 10000;\n    if (sanitized.length > maxLength) {\n      sanitized = sanitized.substring(0, maxLength);\n    }\n\n    // Validar caracteres permitidos\n    if (options.allowedCharacters) {\n      sanitized = sanitized.replace(options.allowedCharacters, '');\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Sanitiza un objeto recursivamente\n   */\n  sanitizeObject(obj: any, depth: number = 0): any {\n    const maxDepth = this.config.maxObjectDepth || 10;\n    \n    if (depth > maxDepth) {\n      throw new Error(`Objeto excede la profundidad máxima permitida (${maxDepth})`);\n    }\n\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    if (typeof obj === 'string') {\n      return this.sanitizeString(obj, {\n        removeHtml: this.config.securityLevel === 'critical',\n        removeScripts: true,\n        removeSqlKeywords: this.config.securityLevel !== 'basic'\n      });\n    }\n\n    if (typeof obj === 'number' || typeof obj === 'boolean') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      const maxLength = this.config.maxArrayLength || 1000;\n      if (obj.length > maxLength) {\n        throw new Error(`Array excede la longitud máxima permitida (${maxLength})`);\n      }\n      return obj.map(item => this.sanitizeObject(item, depth + 1));\n    }\n\n    if (typeof obj === 'object') {\n      const sanitized: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        const sanitizedKey = this.sanitizeString(key, { removeHtml: true, removeScripts: true });\n        sanitized[sanitizedKey] = this.sanitizeObject(value, depth + 1);\n      }\n      return sanitized;\n    }\n\n    return obj;\n  }\n\n  /**\n   * Sanitiza datos de formulario\n   */\n  sanitizeFormData(formData: FormData): Record<string, any> {\n    const sanitized: Record<string, any> = {};\n\n    for (const [key, value] of formData.entries()) {\n      const sanitizedKey = this.sanitizeString(key, { removeHtml: true });\n      \n      if (value instanceof File) {\n        // Validar archivo\n        sanitized[sanitizedKey] = this.sanitizeFile(value);\n      } else {\n        sanitized[sanitizedKey] = this.sanitizeString(value.toString());\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Sanitiza información de archivos\n   */\n  private sanitizeFile(file: File): { name: string; size: number; type: string } {\n    const allowedTypes = [\n      'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n      'application/pdf', 'text/plain', 'text/csv'\n    ];\n\n    const sanitizedName = this.sanitizeString(file.name, {\n      removeHtml: true,\n      removeScripts: true,\n      allowedCharacters: /[^a-zA-Z0-9._-]/g\n    });\n\n    if (!allowedTypes.includes(file.type)) {\n      throw new Error(`Tipo de archivo no permitido: ${file.type}`);\n    }\n\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxSize) {\n      throw new Error(`Archivo excede el tamaño máximo permitido (${maxSize} bytes)`);\n    }\n\n    return {\n      name: sanitizedName,\n      size: file.size,\n      type: file.type\n    };\n  }\n}\n\n// =====================================================\n// VALIDADORES ENTERPRISE\n// =====================================================\n\nexport class EnterpriseValidator {\n  private sanitizer: EnterpriseSanitizer;\n  private config: EnterpriseValidationConfig;\n\n  constructor(config: EnterpriseValidationConfig = ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC) {\n    this.config = config;\n    this.sanitizer = new EnterpriseSanitizer(config);\n  }\n\n  /**\n   * Valida y sanitiza datos usando un schema de Zod\n   */\n  async validateAndSanitize<T>(\n    schema: z.ZodSchema<T>,\n    data: unknown,\n    context?: EnterpriseAuthContext,\n    request?: NextRequest | NextApiRequest\n  ): Promise<ValidationResult<T>> {\n    const startTime = Date.now();\n    const rulesApplied: string[] = [];\n\n    try {\n      // 1. Sanitización si está habilitada\n      let sanitizedData = data;\n      if (this.config.enableSanitization) {\n        sanitizedData = this.sanitizer.sanitizeObject(data);\n        rulesApplied.push('sanitization');\n      }\n\n      // 2. Validación con Zod\n      const validationResult = schema.safeParse(sanitizedData);\n      \n      if (!validationResult.success) {\n        const errors: ValidationError[] = validationResult.error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message,\n          code: err.code,\n          value: err.input,\n          severity: this.determineSeverity(err.code, err.path)\n        }));\n\n        // Registrar errores de validación si está habilitado\n        if (this.config.enableAuditLogging && context) {\n          await this.logValidationEvent('VALIDATION_FAILED', errors, context, request);\n        }\n\n        return {\n          success: false,\n          errors,\n          metadata: {\n            validatedAt: new Date().toISOString(),\n            validatedBy: context?.userId,\n            sanitizationApplied: this.config.enableSanitization || false,\n            securityLevel: this.config.securityLevel || 'standard',\n            rulesApplied,\n            performanceMs: Date.now() - startTime\n          }\n        };\n      }\n\n      // 3. Validaciones de seguridad adicionales\n      if (this.config.enableSecurityValidation) {\n        const securityValidation = await this.performSecurityValidation(validationResult.data);\n        if (!securityValidation.success) {\n          return securityValidation;\n        }\n        rulesApplied.push('security_validation');\n      }\n\n      // 4. Registrar validación exitosa\n      if (this.config.enableAuditLogging && context) {\n        await this.logValidationEvent('VALIDATION_SUCCESS', [], context, request);\n      }\n\n      return {\n        success: true,\n        data: validationResult.data,\n        sanitized: sanitizedData as T,\n        metadata: {\n          validatedAt: new Date().toISOString(),\n          validatedBy: context?.userId,\n          sanitizationApplied: this.config.enableSanitization || false,\n          securityLevel: this.config.securityLevel || 'standard',\n          rulesApplied,\n          performanceMs: Date.now() - startTime\n        }\n      };\n\n    } catch (error) {\n      const validationError: ValidationError = {\n        field: 'general',\n        message: error instanceof Error ? error.message : 'Error de validación desconocido',\n        code: 'VALIDATION_ERROR',\n        severity: 'high'\n      };\n\n      // Registrar error crítico\n      if (this.config.enableAuditLogging && context) {\n        await this.logValidationEvent('VALIDATION_ERROR', [validationError], context, request);\n      }\n\n      return {\n        success: false,\n        errors: [validationError],\n        metadata: {\n          validatedAt: new Date().toISOString(),\n          validatedBy: context?.userId,\n          sanitizationApplied: false,\n          securityLevel: this.config.securityLevel || 'standard',\n          rulesApplied,\n          performanceMs: Date.now() - startTime\n        }\n      };\n    }\n  }\n\n  /**\n   * Determina la severidad de un error de validación\n   */\n  private determineSeverity(code: string, path: (string | number)[]): 'low' | 'medium' | 'high' | 'critical' {\n    // Campos críticos\n    const criticalFields = ['password', 'email', 'payment', 'admin', 'auth'];\n    const highFields = ['user_id', 'amount', 'price', 'quantity'];\n    \n    const fieldPath = path.join('.').toLowerCase();\n    \n    if (criticalFields.some(field => fieldPath.includes(field))) {\n      return 'critical';\n    }\n    \n    if (highFields.some(field => fieldPath.includes(field))) {\n      return 'high';\n    }\n    \n    // Códigos críticos\n    const criticalCodes = ['invalid_type', 'custom'];\n    if (criticalCodes.includes(code)) {\n      return 'high';\n    }\n    \n    return 'medium';\n  }\n\n  /**\n   * Realiza validaciones de seguridad adicionales\n   */\n  private async performSecurityValidation(data: any): Promise<ValidationResult> {\n    try {\n      // Detectar patrones sospechosos\n      const dataString = JSON.stringify(data).toLowerCase();\n      \n      // Patrones de inyección SQL\n      const sqlPatterns = [\n        /(\\bselect\\b.*\\bfrom\\b)/i,\n        /(\\bunion\\b.*\\bselect\\b)/i,\n        /(\\binsert\\b.*\\binto\\b)/i,\n        /(\\bupdate\\b.*\\bset\\b)/i,\n        /(\\bdelete\\b.*\\bfrom\\b)/i,\n        /(\\bdrop\\b.*\\btable\\b)/i\n      ];\n\n      for (const pattern of sqlPatterns) {\n        if (pattern.test(dataString)) {\n          return {\n            success: false,\n            errors: [{\n              field: 'security',\n              message: 'Patrón de inyección SQL detectado',\n              code: 'SQL_INJECTION_DETECTED',\n              severity: 'critical'\n            }]\n          };\n        }\n      }\n\n      // Patrones de XSS\n      const xssPatterns = [\n        /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n        /javascript:/i,\n        /on\\w+\\s*=/i,\n        /eval\\s*\\(/i,\n        /expression\\s*\\(/i\n      ];\n\n      for (const pattern of xssPatterns) {\n        if (pattern.test(dataString)) {\n          return {\n            success: false,\n            errors: [{\n              field: 'security',\n              message: 'Patrón de XSS detectado',\n              code: 'XSS_DETECTED',\n              severity: 'critical'\n            }]\n          };\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        errors: [{\n          field: 'security',\n          message: 'Error en validación de seguridad',\n          code: 'SECURITY_VALIDATION_ERROR',\n          severity: 'high'\n        }]\n      };\n    }\n  }\n\n  /**\n   * Registra eventos de validación en el sistema de auditoría\n   */\n  private async logValidationEvent(\n    eventType: string,\n    errors: ValidationError[],\n    context: EnterpriseAuthContext,\n    request?: NextRequest | NextApiRequest\n  ): Promise<void> {\n    try {\n      await enterpriseAuditSystem.logEnterpriseEvent({\n        user_id: context.userId,\n        event_type: eventType as any,\n        event_category: 'data_validation',\n        severity: errors.some(e => e.severity === 'critical') ? 'critical' :\n                 errors.some(e => e.severity === 'high') ? 'high' : 'low',\n        description: `Validación de datos: ${eventType}`,\n        metadata: {\n          errors_count: errors.length,\n          errors: errors.map(e => ({ field: e.field, code: e.code, severity: e.severity })),\n          security_level: this.config.securityLevel\n        },\n        ip_address: this.getClientIP(request),\n        user_agent: this.getUserAgent(request)\n      }, context, request as NextRequest);\n    } catch (error) {\n      console.error('[ENTERPRISE_VALIDATION] Error logging validation event:', error);\n    }\n  }\n\n  private getClientIP(request?: NextRequest | NextApiRequest): string {\n    if (!request) return 'unknown';\n    \n    if ('headers' in request && typeof request.headers.get === 'function') {\n      return (request as NextRequest).headers.get('x-forwarded-for') || 'unknown';\n    } else if ('headers' in request) {\n      const headerValue = (request as NextApiRequest).headers['x-forwarded-for'];\n      return Array.isArray(headerValue) ? headerValue[0] : headerValue || 'unknown';\n    }\n    \n    return 'unknown';\n  }\n\n  private getUserAgent(request?: NextRequest | NextApiRequest): string {\n    if (!request) return 'unknown';\n    \n    if ('headers' in request && typeof request.headers.get === 'function') {\n      return (request as NextRequest).headers.get('user-agent') || 'unknown';\n    } else if ('headers' in request) {\n      const headerValue = (request as NextApiRequest).headers['user-agent'];\n      return Array.isArray(headerValue) ? headerValue[0] : headerValue || 'unknown';\n    }\n    \n    return 'unknown';\n  }\n}\n\n// =====================================================\n// INSTANCIAS GLOBALES\n// =====================================================\n\n// Instancias predefinidas para diferentes niveles de seguridad\nexport const criticalValidator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);\nexport const highValidator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.HIGH_PAYMENT);\nexport const standardValidator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\nexport const basicValidator = new EnterpriseValidator(ENTERPRISE_VALIDATION_CONFIGS.BASIC_USER);\n\n// Sanitizadores predefinidos\nexport const criticalSanitizer = new EnterpriseSanitizer(ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);\nexport const highSanitizer = new EnterpriseSanitizer(ENTERPRISE_VALIDATION_CONFIGS.HIGH_PAYMENT);\nexport const standardSanitizer = new EnterpriseSanitizer(ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\nexport const basicSanitizer = new EnterpriseSanitizer(ENTERPRISE_VALIDATION_CONFIGS.BASIC_USER);\n"],"names":["ENTERPRISE_VALIDATION_CONFIGS","EnterpriseSanitizer","EnterpriseValidator","basicSanitizer","basicValidator","criticalSanitizer","criticalValidator","highSanitizer","highValidator","standardSanitizer","standardValidator","CRITICAL_ADMIN","enableSanitization","enableSecurityValidation","enableAuditLogging","securityLevel","allowedTags","maxStringLength","maxArrayLength","maxObjectDepth","HIGH_PAYMENT","STANDARD_PUBLIC","BASIC_USER","config","sanitizeString","value","options","String","sanitized","removeScripts","replace","removeHtml","DOMPurify","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","allowedAttributes","escapeHtml","validator","escape","normalizeWhitespace","trimStrings","trim","removeEmojis","removeSqlKeywords","sqlKeywords","maxLength","length","substring","allowedCharacters","sanitizeObject","obj","depth","maxDepth","Error","undefined","Array","isArray","map","item","key","Object","entries","sanitizedKey","sanitizeFormData","formData","File","sanitizeFile","toString","file","allowedTypes","sanitizedName","name","includes","type","maxSize","size","sanitizer","validateAndSanitize","schema","data","context","request","startTime","Date","now","rulesApplied","sanitizedData","push","validationResult","safeParse","success","errors","error","err","field","path","join","message","code","input","severity","determineSeverity","logValidationEvent","metadata","validatedAt","toISOString","validatedBy","userId","sanitizationApplied","performanceMs","securityValidation","performSecurityValidation","validationError","criticalFields","highFields","fieldPath","toLowerCase","some","criticalCodes","dataString","JSON","stringify","sqlPatterns","pattern","test","xssPatterns","eventType","enterpriseAuditSystem","logEnterpriseEvent","user_id","event_type","event_category","e","description","errors_count","security_level","ip_address","getClientIP","user_agent","getUserAgent","console","headers","get","headerValue"],"mappings":"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"}