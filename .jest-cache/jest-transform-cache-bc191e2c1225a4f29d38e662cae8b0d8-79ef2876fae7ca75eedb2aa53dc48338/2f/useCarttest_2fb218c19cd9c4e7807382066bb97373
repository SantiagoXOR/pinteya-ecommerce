c33b066725a1c6f243a6905956bd6c56
// ===================================
// TESTS PARA HOOK DEL CARRITO
// Tests unitarios e integración para useCart
// ===================================
"use strict";
// Mocks
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            info: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _useCart = require("../../hooks/useCart");
const _sonner = require("sonner");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock localStorage
const localStorageMock = (()=>{
    let store = {};
    return {
        getItem: (key)=>{
            return store[key] || null;
        },
        setItem: (key, value)=>{
            store[key] = value.toString();
        },
        removeItem: (key)=>{
            delete store[key];
        },
        clear: ()=>{
            store = {};
        }
    };
})();
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Wrapper para React Query
const createWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
};
// Datos de prueba
const mockProduct = {
    id: 1,
    name: 'Producto Test',
    price: 100,
    image: 'https://example.com/image.jpg',
    stock: 10,
    category: 'Electronics'
};
const mockCartItem = {
    id: 1,
    name: 'Producto Test',
    price: 100,
    image: 'https://example.com/image.jpg',
    quantity: 2,
    stock: 10
};
describe('useCart Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        localStorageMock.clear();
    });
    describe('Inicialización del Carrito', ()=>{
        it('debe inicializar con carrito vacío', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.items).toEqual([]);
            expect(result.current.totalItems).toBe(0);
            expect(result.current.totalPrice).toBe(0);
            expect(result.current.isEmpty).toBe(true);
        });
        it('debe cargar items del localStorage al inicializar', ()=>{
            const savedItems = [
                mockCartItem
            ];
            localStorageMock.setItem('cart-items', JSON.stringify(savedItems));
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.items).toEqual(savedItems);
            expect(result.current.totalItems).toBe(2);
            expect(result.current.totalPrice).toBe(200);
            expect(result.current.isEmpty).toBe(false);
        });
        it('debe manejar localStorage corrupto', ()=>{
            localStorageMock.setItem('cart-items', 'invalid-json');
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.items).toEqual([]);
            expect(result.current.isEmpty).toBe(true);
        });
    });
    describe('Agregar Productos', ()=>{
        it('debe agregar un producto nuevo al carrito', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 2);
            });
            expect(result.current.items).toHaveLength(1);
            expect(result.current.items[0]).toEqual({
                id: mockProduct.id,
                name: mockProduct.name,
                price: mockProduct.price,
                image: mockProduct.image,
                quantity: 2,
                stock: mockProduct.stock
            });
            expect(result.current.totalItems).toBe(2);
            expect(result.current.totalPrice).toBe(200);
            expect(_sonner.toast.success).toHaveBeenCalledWith('Producto agregado al carrito');
        });
        it('debe incrementar cantidad si el producto ya existe', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 1);
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 2);
            });
            expect(result.current.items).toHaveLength(1);
            expect(result.current.items[0].quantity).toBe(3);
            expect(result.current.totalItems).toBe(3);
            expect(result.current.totalPrice).toBe(300);
        });
        it('debe validar stock disponible', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 15); // Más que el stock disponible
            });
            expect(result.current.items).toHaveLength(0);
            expect(_sonner.toast.error).toHaveBeenCalledWith('No hay suficiente stock disponible');
        });
        it('debe validar cantidad mínima', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 0);
            });
            expect(result.current.items).toHaveLength(0);
            expect(_sonner.toast.error).toHaveBeenCalledWith('La cantidad debe ser mayor a 0');
        });
        it('debe usar cantidad por defecto de 1', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct);
            });
            expect(result.current.items[0].quantity).toBe(1);
        });
    });
    describe('Actualizar Cantidad', ()=>{
        beforeEach(()=>{
            localStorageMock.setItem('cart-items', JSON.stringify([
                mockCartItem
            ]));
        });
        it('debe actualizar la cantidad de un producto', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.updateQuantity(1, 5);
            });
            expect(result.current.items[0].quantity).toBe(5);
            expect(result.current.totalItems).toBe(5);
            expect(result.current.totalPrice).toBe(500);
        });
        it('debe validar stock al actualizar cantidad', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.updateQuantity(1, 15);
            });
            expect(result.current.items[0].quantity).toBe(2); // No debe cambiar
            expect(_sonner.toast.error).toHaveBeenCalledWith('No hay suficiente stock disponible');
        });
        it('debe remover el producto si la cantidad es 0', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.updateQuantity(1, 0);
            });
            expect(result.current.items).toHaveLength(0);
            expect(result.current.isEmpty).toBe(true);
        });
        it('debe manejar producto inexistente', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.updateQuantity(999, 5);
            });
            expect(_sonner.toast.error).toHaveBeenCalledWith('Producto no encontrado en el carrito');
        });
    });
    describe('Remover Productos', ()=>{
        beforeEach(()=>{
            const items = [
                mockCartItem,
                {
                    ...mockCartItem,
                    id: 2,
                    name: 'Producto 2'
                }
            ];
            localStorageMock.setItem('cart-items', JSON.stringify(items));
        });
        it('debe remover un producto específico', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.removeItem(1);
            });
            expect(result.current.items).toHaveLength(1);
            expect(result.current.items[0].id).toBe(2);
            expect(_sonner.toast.success).toHaveBeenCalledWith('Producto removido del carrito');
        });
        it('debe manejar producto inexistente al remover', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.removeItem(999);
            });
            expect(result.current.items).toHaveLength(2); // No debe cambiar
            expect(_sonner.toast.error).toHaveBeenCalledWith('Producto no encontrado en el carrito');
        });
    });
    describe('Limpiar Carrito', ()=>{
        beforeEach(()=>{
            localStorageMock.setItem('cart-items', JSON.stringify([
                mockCartItem
            ]));
        });
        it('debe limpiar todos los productos del carrito', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.clearCart();
            });
            expect(result.current.items).toEqual([]);
            expect(result.current.totalItems).toBe(0);
            expect(result.current.totalPrice).toBe(0);
            expect(result.current.isEmpty).toBe(true);
            expect(_sonner.toast.success).toHaveBeenCalledWith('Carrito vaciado');
        });
    });
    describe('Cálculos del Carrito', ()=>{
        it('debe calcular correctamente el total de items', ()=>{
            const items = [
                {
                    ...mockCartItem,
                    quantity: 2
                },
                {
                    ...mockCartItem,
                    id: 2,
                    quantity: 3
                }
            ];
            localStorageMock.setItem('cart-items', JSON.stringify(items));
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.totalItems).toBe(5);
        });
        it('debe calcular correctamente el precio total', ()=>{
            const items = [
                {
                    ...mockCartItem,
                    price: 100,
                    quantity: 2
                },
                {
                    ...mockCartItem,
                    id: 2,
                    price: 50,
                    quantity: 3
                }
            ];
            localStorageMock.setItem('cart-items', JSON.stringify(items));
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.totalPrice).toBe(350); // (100*2) + (50*3)
        });
        it('debe manejar precios decimales correctamente', ()=>{
            const items = [
                {
                    ...mockCartItem,
                    price: 99.99,
                    quantity: 2
                }
            ];
            localStorageMock.setItem('cart-items', JSON.stringify(items));
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.totalPrice).toBe(199.98);
        });
    });
    describe('Persistencia en localStorage', ()=>{
        it('debe guardar cambios en localStorage', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 2);
            });
            const savedItems = JSON.parse(localStorageMock.getItem('cart-items') || '[]');
            expect(savedItems).toHaveLength(1);
            expect(savedItems[0].id).toBe(mockProduct.id);
            expect(savedItems[0].quantity).toBe(2);
        });
        it('debe sincronizar con localStorage al actualizar', ()=>{
            localStorageMock.setItem('cart-items', JSON.stringify([
                mockCartItem
            ]));
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.updateQuantity(1, 5);
            });
            const savedItems = JSON.parse(localStorageMock.getItem('cart-items') || '[]');
            expect(savedItems[0].quantity).toBe(5);
        });
        it('debe limpiar localStorage al vaciar carrito', ()=>{
            localStorageMock.setItem('cart-items', JSON.stringify([
                mockCartItem
            ]));
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.clearCart();
            });
            const savedItems = localStorageMock.getItem('cart-items');
            expect(JSON.parse(savedItems || '[]')).toEqual([]);
        });
    });
    describe('Utilidades del Carrito', ()=>{
        beforeEach(()=>{
            localStorageMock.setItem('cart-items', JSON.stringify([
                mockCartItem
            ]));
        });
        it('debe verificar si un producto está en el carrito', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isInCart(1)).toBe(true);
            expect(result.current.isInCart(999)).toBe(false);
        });
        it('debe obtener la cantidad de un producto específico', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.getItemQuantity(1)).toBe(2);
            expect(result.current.getItemQuantity(999)).toBe(0);
        });
        it('debe obtener un producto específico del carrito', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            const item = result.current.getItem(1);
            expect(item).toEqual(mockCartItem);
            expect(result.current.getItem(999)).toBeUndefined();
        });
    });
    describe('Casos Edge y Errores', ()=>{
        it('debe manejar productos con datos inválidos', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            const invalidProduct = {
                id: null,
                name: '',
                price: -100,
                image: '',
                stock: -5
            };
            (0, _react.act)(()=>{
                result.current.addItem(invalidProduct, 1);
            });
            expect(result.current.items).toHaveLength(0);
            expect(_sonner.toast.error).toHaveBeenCalledWith('Datos del producto inválidos');
        });
        it('debe manejar errores de localStorage', ()=>{
            // Simular error de localStorage
            const originalSetItem = localStorageMock.setItem;
            localStorageMock.setItem = jest.fn(()=>{
                throw new Error('localStorage error');
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 1);
            });
            // Debe agregar el item aunque falle localStorage
            expect(result.current.items).toHaveLength(1);
            expect(_sonner.toast.error).toHaveBeenCalledWith('Error al guardar en el carrito');
            // Restaurar función original
            localStorageMock.setItem = originalSetItem;
        });
        it('debe manejar cantidades muy grandes', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addItem(mockProduct, 999999);
            });
            expect(result.current.items).toHaveLength(0);
            expect(_sonner.toast.error).toHaveBeenCalledWith('Cantidad demasiado grande');
        });
        it('debe manejar productos sin stock', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            const outOfStockProduct = {
                ...mockProduct,
                stock: 0
            };
            (0, _react.act)(()=>{
                result.current.addItem(outOfStockProduct, 1);
            });
            expect(result.current.items).toHaveLength(0);
            expect(_sonner.toast.error).toHaveBeenCalledWith('Producto sin stock disponible');
        });
    });
    describe('Performance y Optimización', ()=>{
        it('debe evitar re-renders innecesarios', ()=>{
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            const initialItems = result.current.items;
            const initialTotalItems = result.current.totalItems;
            const initialTotalPrice = result.current.totalPrice;
            // Re-render sin cambios
            rerender();
            // Las referencias deben ser las mismas
            expect(result.current.items).toBe(initialItems);
            expect(result.current.totalItems).toBe(initialTotalItems);
            expect(result.current.totalPrice).toBe(initialTotalPrice);
        });
        it('debe manejar múltiples operaciones rápidas', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                // Múltiples operaciones rápidas
                result.current.addItem(mockProduct, 1);
                result.current.addItem(mockProduct, 1);
                result.current.updateQuantity(1, 5);
                result.current.updateQuantity(1, 3);
            });
            expect(result.current.items[0].quantity).toBe(3);
            expect(result.current.totalItems).toBe(3);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlQ2FydC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVEVTVFMgUEFSQSBIT09LIERFTCBDQVJSSVRPXG4vLyBUZXN0cyB1bml0YXJpb3MgZSBpbnRlZ3JhY2nDs24gcGFyYSB1c2VDYXJ0XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgeyByZW5kZXJIb29rLCBhY3QsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7IHVzZUNhcnQgfSBmcm9tICdAL2hvb2tzL3VzZUNhcnQnO1xuaW1wb3J0IHsgdG9hc3QgfSBmcm9tICdzb25uZXInO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLy8gTW9ja3Ncbmplc3QubW9jaygnc29ubmVyJywgKCkgPT4gKHtcbiAgdG9hc3Q6IHtcbiAgICBzdWNjZXNzOiBqZXN0LmZuKCksXG4gICAgZXJyb3I6IGplc3QuZm4oKSxcbiAgICBpbmZvOiBqZXN0LmZuKClcbiAgfVxufSkpO1xuXG4vLyBNb2NrIGxvY2FsU3RvcmFnZVxuY29uc3QgbG9jYWxTdG9yYWdlTW9jayA9ICgoKSA9PiB7XG4gIGxldCBzdG9yZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG4gIHJldHVybiB7XG4gICAgZ2V0SXRlbTogKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gc3RvcmVba2V5XSB8fCBudWxsO1xuICAgIH0sXG4gICAgc2V0SXRlbTogKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBzdG9yZVtrZXldID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9LFxuICAgIHJlbW92ZUl0ZW06IChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgZGVsZXRlIHN0b3JlW2tleV07XG4gICAgfSxcbiAgICBjbGVhcjogKCkgPT4ge1xuICAgICAgc3RvcmUgPSB7fTtcbiAgICB9XG4gIH07XG59KSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbG9jYWxTdG9yYWdlJywge1xuICB2YWx1ZTogbG9jYWxTdG9yYWdlTW9ja1xufSk7XG5cbi8vIFdyYXBwZXIgcGFyYSBSZWFjdCBRdWVyeVxuY29uc3QgY3JlYXRlV3JhcHBlciA9ICgpID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoe1xuICAgIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgICBxdWVyaWVzOiB7XG4gICAgICAgIHJldHJ5OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG4gIFxuICByZXR1cm4gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pID0+IChcbiAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT57Y2hpbGRyZW59PC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICApO1xufTtcblxuLy8gRGF0b3MgZGUgcHJ1ZWJhXG5jb25zdCBtb2NrUHJvZHVjdCA9IHtcbiAgaWQ6IDEsXG4gIG5hbWU6ICdQcm9kdWN0byBUZXN0JyxcbiAgcHJpY2U6IDEwMCxcbiAgaW1hZ2U6ICdodHRwczovL2V4YW1wbGUuY29tL2ltYWdlLmpwZycsXG4gIHN0b2NrOiAxMCxcbiAgY2F0ZWdvcnk6ICdFbGVjdHJvbmljcydcbn07XG5cbmNvbnN0IG1vY2tDYXJ0SXRlbSA9IHtcbiAgaWQ6IDEsXG4gIG5hbWU6ICdQcm9kdWN0byBUZXN0JyxcbiAgcHJpY2U6IDEwMCxcbiAgaW1hZ2U6ICdodHRwczovL2V4YW1wbGUuY29tL2ltYWdlLmpwZycsXG4gIHF1YW50aXR5OiAyLFxuICBzdG9jazogMTBcbn07XG5cbmRlc2NyaWJlKCd1c2VDYXJ0IEhvb2snLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGxvY2FsU3RvcmFnZU1vY2suY2xlYXIoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0luaWNpYWxpemFjacOzbiBkZWwgQ2Fycml0bycsICgpID0+IHtcbiAgICBpdCgnZGViZSBpbmljaWFsaXphciBjb24gY2Fycml0byB2YWPDrW8nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VDYXJ0KCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zKS50b0VxdWFsKFtdKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbEl0ZW1zKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvdGFsUHJpY2UpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNFbXB0eSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIGNhcmdhciBpdGVtcyBkZWwgbG9jYWxTdG9yYWdlIGFsIGluaWNpYWxpemFyJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2F2ZWRJdGVtcyA9IFttb2NrQ2FydEl0ZW1dO1xuICAgICAgbG9jYWxTdG9yYWdlTW9jay5zZXRJdGVtKCdjYXJ0LWl0ZW1zJywgSlNPTi5zdHJpbmdpZnkoc2F2ZWRJdGVtcykpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VDYXJ0KCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zKS50b0VxdWFsKHNhdmVkSXRlbXMpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvdGFsSXRlbXMpLnRvQmUoMik7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxQcmljZSkudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRW1wdHkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgbWFuZWphciBsb2NhbFN0b3JhZ2UgY29ycnVwdG8nLCAoKSA9PiB7XG4gICAgICBsb2NhbFN0b3JhZ2VNb2NrLnNldEl0ZW0oJ2NhcnQtaXRlbXMnLCAnaW52YWxpZC1qc29uJyk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXRlbXMpLnRvRXF1YWwoW10pO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRW1wdHkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBZ3JlZ2FyIFByb2R1Y3RvcycsICgpID0+IHtcbiAgICBpdCgnZGViZSBhZ3JlZ2FyIHVuIHByb2R1Y3RvIG51ZXZvIGFsIGNhcnJpdG8nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VDYXJ0KCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpXG4gICAgICB9KTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuYWRkSXRlbShtb2NrUHJvZHVjdCwgMik7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXRlbXNbMF0pLnRvRXF1YWwoe1xuICAgICAgICBpZDogbW9ja1Byb2R1Y3QuaWQsXG4gICAgICAgIG5hbWU6IG1vY2tQcm9kdWN0Lm5hbWUsXG4gICAgICAgIHByaWNlOiBtb2NrUHJvZHVjdC5wcmljZSxcbiAgICAgICAgaW1hZ2U6IG1vY2tQcm9kdWN0LmltYWdlLFxuICAgICAgICBxdWFudGl0eTogMixcbiAgICAgICAgc3RvY2s6IG1vY2tQcm9kdWN0LnN0b2NrXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbEl0ZW1zKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvdGFsUHJpY2UpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdCh0b2FzdC5zdWNjZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUHJvZHVjdG8gYWdyZWdhZG8gYWwgY2Fycml0bycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgaW5jcmVtZW50YXIgY2FudGlkYWQgc2kgZWwgcHJvZHVjdG8geWEgZXhpc3RlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFkZEl0ZW0obW9ja1Byb2R1Y3QsIDEpO1xuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFkZEl0ZW0obW9ja1Byb2R1Y3QsIDIpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zWzBdLnF1YW50aXR5KS50b0JlKDMpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvdGFsSXRlbXMpLnRvQmUoMyk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxQcmljZSkudG9CZSgzMDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgdmFsaWRhciBzdG9jayBkaXNwb25pYmxlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFkZEl0ZW0obW9ja1Byb2R1Y3QsIDE1KTsgLy8gTcOhcyBxdWUgZWwgc3RvY2sgZGlzcG9uaWJsZVxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtcykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KHRvYXN0LmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ05vIGhheSBzdWZpY2llbnRlIHN0b2NrIGRpc3BvbmlibGUnXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgdmFsaWRhciBjYW50aWRhZCBtw61uaW1hJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFkZEl0ZW0obW9ja1Byb2R1Y3QsIDApO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtcykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KHRvYXN0LmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ0xhIGNhbnRpZGFkIGRlYmUgc2VyIG1heW9yIGEgMCdcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSB1c2FyIGNhbnRpZGFkIHBvciBkZWZlY3RvIGRlIDEnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VDYXJ0KCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpXG4gICAgICB9KTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuYWRkSXRlbShtb2NrUHJvZHVjdCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zWzBdLnF1YW50aXR5KS50b0JlKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQWN0dWFsaXphciBDYW50aWRhZCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSgnY2FydC1pdGVtcycsIEpTT04uc3RyaW5naWZ5KFttb2NrQ2FydEl0ZW1dKSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBhY3R1YWxpemFyIGxhIGNhbnRpZGFkIGRlIHVuIHByb2R1Y3RvJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnVwZGF0ZVF1YW50aXR5KDEsIDUpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtc1swXS5xdWFudGl0eSkudG9CZSg1KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbEl0ZW1zKS50b0JlKDUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvdGFsUHJpY2UpLnRvQmUoNTAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIHZhbGlkYXIgc3RvY2sgYWwgYWN0dWFsaXphciBjYW50aWRhZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC51cGRhdGVRdWFudGl0eSgxLCAxNSk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zWzBdLnF1YW50aXR5KS50b0JlKDIpOyAvLyBObyBkZWJlIGNhbWJpYXJcbiAgICAgIGV4cGVjdCh0b2FzdC5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdObyBoYXkgc3VmaWNpZW50ZSBzdG9jayBkaXNwb25pYmxlJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIHJlbW92ZXIgZWwgcHJvZHVjdG8gc2kgbGEgY2FudGlkYWQgZXMgMCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC51cGRhdGVRdWFudGl0eSgxLCAwKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXRlbXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0VtcHR5KS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgbWFuZWphciBwcm9kdWN0byBpbmV4aXN0ZW50ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC51cGRhdGVRdWFudGl0eSg5OTksIDUpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdCh0b2FzdC5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Byb2R1Y3RvIG5vIGVuY29udHJhZG8gZW4gZWwgY2Fycml0bycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVtb3ZlciBQcm9kdWN0b3MnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBjb25zdCBpdGVtcyA9IFttb2NrQ2FydEl0ZW0sIHsgLi4ubW9ja0NhcnRJdGVtLCBpZDogMiwgbmFtZTogJ1Byb2R1Y3RvIDInIH1dO1xuICAgICAgbG9jYWxTdG9yYWdlTW9jay5zZXRJdGVtKCdjYXJ0LWl0ZW1zJywgSlNPTi5zdHJpbmdpZnkoaXRlbXMpKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIHJlbW92ZXIgdW4gcHJvZHVjdG8gZXNwZWPDrWZpY28nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VDYXJ0KCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpXG4gICAgICB9KTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQucmVtb3ZlSXRlbSgxKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXRlbXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtc1swXS5pZCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdCh0b2FzdC5zdWNjZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUHJvZHVjdG8gcmVtb3ZpZG8gZGVsIGNhcnJpdG8nKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG1hbmVqYXIgcHJvZHVjdG8gaW5leGlzdGVudGUgYWwgcmVtb3ZlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5yZW1vdmVJdGVtKDk5OSk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zKS50b0hhdmVMZW5ndGgoMik7IC8vIE5vIGRlYmUgY2FtYmlhclxuICAgICAgZXhwZWN0KHRvYXN0LmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUHJvZHVjdG8gbm8gZW5jb250cmFkbyBlbiBlbCBjYXJyaXRvJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdMaW1waWFyIENhcnJpdG8nLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBsb2NhbFN0b3JhZ2VNb2NrLnNldEl0ZW0oJ2NhcnQtaXRlbXMnLCBKU09OLnN0cmluZ2lmeShbbW9ja0NhcnRJdGVtXSkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgbGltcGlhciB0b2RvcyBsb3MgcHJvZHVjdG9zIGRlbCBjYXJyaXRvJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmNsZWFyQ2FydCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtcykudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxJdGVtcykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbFByaWNlKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRW1wdHkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodG9hc3Quc3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0NhcnJpdG8gdmFjaWFkbycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ8OhbGN1bG9zIGRlbCBDYXJyaXRvJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIGNhbGN1bGFyIGNvcnJlY3RhbWVudGUgZWwgdG90YWwgZGUgaXRlbXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpdGVtcyA9IFtcbiAgICAgICAgeyAuLi5tb2NrQ2FydEl0ZW0sIHF1YW50aXR5OiAyIH0sXG4gICAgICAgIHsgLi4ubW9ja0NhcnRJdGVtLCBpZDogMiwgcXVhbnRpdHk6IDMgfVxuICAgICAgXTtcbiAgICAgIGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSgnY2FydC1pdGVtcycsIEpTT04uc3RyaW5naWZ5KGl0ZW1zKSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxJdGVtcykudG9CZSg1KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIGNhbGN1bGFyIGNvcnJlY3RhbWVudGUgZWwgcHJlY2lvIHRvdGFsJywgKCkgPT4ge1xuICAgICAgY29uc3QgaXRlbXMgPSBbXG4gICAgICAgIHsgLi4ubW9ja0NhcnRJdGVtLCBwcmljZTogMTAwLCBxdWFudGl0eTogMiB9LFxuICAgICAgICB7IC4uLm1vY2tDYXJ0SXRlbSwgaWQ6IDIsIHByaWNlOiA1MCwgcXVhbnRpdHk6IDMgfVxuICAgICAgXTtcbiAgICAgIGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSgnY2FydC1pdGVtcycsIEpTT04uc3RyaW5naWZ5KGl0ZW1zKSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxQcmljZSkudG9CZSgzNTApOyAvLyAoMTAwKjIpICsgKDUwKjMpXG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIHByZWNpb3MgZGVjaW1hbGVzIGNvcnJlY3RhbWVudGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpdGVtcyA9IFtcbiAgICAgICAgeyAuLi5tb2NrQ2FydEl0ZW0sIHByaWNlOiA5OS45OSwgcXVhbnRpdHk6IDIgfVxuICAgICAgXTtcbiAgICAgIGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSgnY2FydC1pdGVtcycsIEpTT04uc3RyaW5naWZ5KGl0ZW1zKSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxQcmljZSkudG9CZSgxOTkuOTgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyc2lzdGVuY2lhIGVuIGxvY2FsU3RvcmFnZScsICgpID0+IHtcbiAgICBpdCgnZGViZSBndWFyZGFyIGNhbWJpb3MgZW4gbG9jYWxTdG9yYWdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFkZEl0ZW0obW9ja1Byb2R1Y3QsIDIpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNhdmVkSXRlbXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZU1vY2suZ2V0SXRlbSgnY2FydC1pdGVtcycpIHx8ICdbXScpO1xuICAgICAgZXhwZWN0KHNhdmVkSXRlbXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChzYXZlZEl0ZW1zWzBdLmlkKS50b0JlKG1vY2tQcm9kdWN0LmlkKTtcbiAgICAgIGV4cGVjdChzYXZlZEl0ZW1zWzBdLnF1YW50aXR5KS50b0JlKDIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgc2luY3Jvbml6YXIgY29uIGxvY2FsU3RvcmFnZSBhbCBhY3R1YWxpemFyJywgKCkgPT4ge1xuICAgICAgbG9jYWxTdG9yYWdlTW9jay5zZXRJdGVtKCdjYXJ0LWl0ZW1zJywgSlNPTi5zdHJpbmdpZnkoW21vY2tDYXJ0SXRlbV0pKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnVwZGF0ZVF1YW50aXR5KDEsIDUpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNhdmVkSXRlbXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZU1vY2suZ2V0SXRlbSgnY2FydC1pdGVtcycpIHx8ICdbXScpO1xuICAgICAgZXhwZWN0KHNhdmVkSXRlbXNbMF0ucXVhbnRpdHkpLnRvQmUoNSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBsaW1waWFyIGxvY2FsU3RvcmFnZSBhbCB2YWNpYXIgY2Fycml0bycsICgpID0+IHtcbiAgICAgIGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSgnY2FydC1pdGVtcycsIEpTT04uc3RyaW5naWZ5KFttb2NrQ2FydEl0ZW1dKSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5jbGVhckNhcnQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzYXZlZEl0ZW1zID0gbG9jYWxTdG9yYWdlTW9jay5nZXRJdGVtKCdjYXJ0LWl0ZW1zJyk7XG4gICAgICBleHBlY3QoSlNPTi5wYXJzZShzYXZlZEl0ZW1zIHx8ICdbXScpKS50b0VxdWFsKFtdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1V0aWxpZGFkZXMgZGVsIENhcnJpdG8nLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBsb2NhbFN0b3JhZ2VNb2NrLnNldEl0ZW0oJ2NhcnQtaXRlbXMnLCBKU09OLnN0cmluZ2lmeShbbW9ja0NhcnRJdGVtXSkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgdmVyaWZpY2FyIHNpIHVuIHByb2R1Y3RvIGVzdMOhIGVuIGVsIGNhcnJpdG8nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VDYXJ0KCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzSW5DYXJ0KDEpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzSW5DYXJ0KDk5OSkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgb2J0ZW5lciBsYSBjYW50aWRhZCBkZSB1biBwcm9kdWN0byBlc3BlY8OtZmljbycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZ2V0SXRlbVF1YW50aXR5KDEpKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmdldEl0ZW1RdWFudGl0eSg5OTkpKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgb2J0ZW5lciB1biBwcm9kdWN0byBlc3BlY8OtZmljbyBkZWwgY2Fycml0bycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpdGVtID0gcmVzdWx0LmN1cnJlbnQuZ2V0SXRlbSgxKTtcbiAgICAgIGV4cGVjdChpdGVtKS50b0VxdWFsKG1vY2tDYXJ0SXRlbSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZ2V0SXRlbSg5OTkpKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDYXNvcyBFZGdlIHkgRXJyb3JlcycsICgpID0+IHtcbiAgICBpdCgnZGViZSBtYW5lamFyIHByb2R1Y3RvcyBjb24gZGF0b3MgaW52w6FsaWRvcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpbnZhbGlkUHJvZHVjdCA9IHtcbiAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBwcmljZTogLTEwMCxcbiAgICAgICAgaW1hZ2U6ICcnLFxuICAgICAgICBzdG9jazogLTVcbiAgICAgIH07XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFkZEl0ZW0oaW52YWxpZFByb2R1Y3QgYXMgYW55LCAxKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXRlbXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgIGV4cGVjdCh0b2FzdC5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdEYXRvcyBkZWwgcHJvZHVjdG8gaW52w6FsaWRvcydcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIGVycm9yZXMgZGUgbG9jYWxTdG9yYWdlJywgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxhciBlcnJvciBkZSBsb2NhbFN0b3JhZ2VcbiAgICAgIGNvbnN0IG9yaWdpbmFsU2V0SXRlbSA9IGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbTtcbiAgICAgIGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSA9IGplc3QuZm4oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvY2FsU3RvcmFnZSBlcnJvcicpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5hZGRJdGVtKG1vY2tQcm9kdWN0LCAxKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBEZWJlIGFncmVnYXIgZWwgaXRlbSBhdW5xdWUgZmFsbGUgbG9jYWxTdG9yYWdlXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXRlbXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdCh0b2FzdC5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdFcnJvciBhbCBndWFyZGFyIGVuIGVsIGNhcnJpdG8nXG4gICAgICApO1xuXG4gICAgICAvLyBSZXN0YXVyYXIgZnVuY2nDs24gb3JpZ2luYWxcbiAgICAgIGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSA9IG9yaWdpbmFsU2V0SXRlbTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG1hbmVqYXIgY2FudGlkYWRlcyBtdXkgZ3JhbmRlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5hZGRJdGVtKG1vY2tQcm9kdWN0LCA5OTk5OTkpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtcykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KHRvYXN0LmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ0NhbnRpZGFkIGRlbWFzaWFkbyBncmFuZGUnXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgbWFuZWphciBwcm9kdWN0b3Mgc2luIHN0b2NrJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQ2FydCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG91dE9mU3RvY2tQcm9kdWN0ID0geyAuLi5tb2NrUHJvZHVjdCwgc3RvY2s6IDAgfTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuYWRkSXRlbShvdXRPZlN0b2NrUHJvZHVjdCwgMSk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lml0ZW1zKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgICBleHBlY3QodG9hc3QuZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnUHJvZHVjdG8gc2luIHN0b2NrIGRpc3BvbmlibGUnXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgeSBPcHRpbWl6YWNpw7NuJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIGV2aXRhciByZS1yZW5kZXJzIGlubmVjZXNhcmlvcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0LCByZXJlbmRlciB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VDYXJ0KCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaW5pdGlhbEl0ZW1zID0gcmVzdWx0LmN1cnJlbnQuaXRlbXM7XG4gICAgICBjb25zdCBpbml0aWFsVG90YWxJdGVtcyA9IHJlc3VsdC5jdXJyZW50LnRvdGFsSXRlbXM7XG4gICAgICBjb25zdCBpbml0aWFsVG90YWxQcmljZSA9IHJlc3VsdC5jdXJyZW50LnRvdGFsUHJpY2U7XG5cbiAgICAgIC8vIFJlLXJlbmRlciBzaW4gY2FtYmlvc1xuICAgICAgcmVyZW5kZXIoKTtcblxuICAgICAgLy8gTGFzIHJlZmVyZW5jaWFzIGRlYmVuIHNlciBsYXMgbWlzbWFzXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXRlbXMpLnRvQmUoaW5pdGlhbEl0ZW1zKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbEl0ZW1zKS50b0JlKGluaXRpYWxUb3RhbEl0ZW1zKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbFByaWNlKS50b0JlKGluaXRpYWxUb3RhbFByaWNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG1hbmVqYXIgbcO6bHRpcGxlcyBvcGVyYWNpb25lcyByw6FwaWRhcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUNhcnQoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKClcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICAvLyBNw7psdGlwbGVzIG9wZXJhY2lvbmVzIHLDoXBpZGFzXG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFkZEl0ZW0obW9ja1Byb2R1Y3QsIDEpO1xuICAgICAgICByZXN1bHQuY3VycmVudC5hZGRJdGVtKG1vY2tQcm9kdWN0LCAxKTtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQudXBkYXRlUXVhbnRpdHkoMSwgNSk7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnVwZGF0ZVF1YW50aXR5KDEsIDMpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pdGVtc1swXS5xdWFudGl0eSkudG9CZSgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b3RhbEl0ZW1zKS50b0JlKDMpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInRvYXN0Iiwic3VjY2VzcyIsImZuIiwiZXJyb3IiLCJpbmZvIiwibG9jYWxTdG9yYWdlTW9jayIsInN0b3JlIiwiZ2V0SXRlbSIsImtleSIsInNldEl0ZW0iLCJ2YWx1ZSIsInRvU3RyaW5nIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJjcmVhdGVXcmFwcGVyIiwicXVlcnlDbGllbnQiLCJRdWVyeUNsaWVudCIsImRlZmF1bHRPcHRpb25zIiwicXVlcmllcyIsInJldHJ5IiwiY2hpbGRyZW4iLCJRdWVyeUNsaWVudFByb3ZpZGVyIiwiY2xpZW50IiwibW9ja1Byb2R1Y3QiLCJpZCIsIm5hbWUiLCJwcmljZSIsImltYWdlIiwic3RvY2siLCJjYXRlZ29yeSIsIm1vY2tDYXJ0SXRlbSIsInF1YW50aXR5IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwicmVzdWx0IiwicmVuZGVySG9vayIsInVzZUNhcnQiLCJ3cmFwcGVyIiwiZXhwZWN0IiwiY3VycmVudCIsIml0ZW1zIiwidG9FcXVhbCIsInRvdGFsSXRlbXMiLCJ0b0JlIiwidG90YWxQcmljZSIsImlzRW1wdHkiLCJzYXZlZEl0ZW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsImFjdCIsImFkZEl0ZW0iLCJ0b0hhdmVMZW5ndGgiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInVwZGF0ZVF1YW50aXR5IiwiY2xlYXJDYXJ0IiwicGFyc2UiLCJpc0luQ2FydCIsImdldEl0ZW1RdWFudGl0eSIsIml0ZW0iLCJ0b0JlVW5kZWZpbmVkIiwiaW52YWxpZFByb2R1Y3QiLCJvcmlnaW5hbFNldEl0ZW0iLCJFcnJvciIsIm91dE9mU3RvY2tQcm9kdWN0IiwicmVyZW5kZXIiLCJpbml0aWFsSXRlbXMiLCJpbml0aWFsVG90YWxJdGVtcyIsImluaXRpYWxUb3RhbFByaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMsOEJBQThCO0FBQzlCLDZDQUE2QztBQUM3QyxzQ0FBc0M7O0FBUXRDLFFBQVE7QUFDUkEsS0FBS0MsSUFBSSxDQUFDLFVBQVUsSUFBTyxDQUFBO1FBQ3pCQyxPQUFPO1lBQ0xDLFNBQVNILEtBQUtJLEVBQUU7WUFDaEJDLE9BQU9MLEtBQUtJLEVBQUU7WUFDZEUsTUFBTU4sS0FBS0ksRUFBRTtRQUNmO0lBQ0YsQ0FBQTs7Ozs7dUJBYnlDOzRCQUNRO3lCQUN6Qjt3QkFDRjsrREFDSjs7Ozs7O0FBV2xCLG9CQUFvQjtBQUNwQixNQUFNRyxtQkFBbUIsQUFBQyxDQUFBO0lBQ3hCLElBQUlDLFFBQW1DLENBQUM7SUFFeEMsT0FBTztRQUNMQyxTQUFTLENBQUNDO1lBQ1IsT0FBT0YsS0FBSyxDQUFDRSxJQUFJLElBQUk7UUFDdkI7UUFDQUMsU0FBUyxDQUFDRCxLQUFhRTtZQUNyQkosS0FBSyxDQUFDRSxJQUFJLEdBQUdFLE1BQU1DLFFBQVE7UUFDN0I7UUFDQUMsWUFBWSxDQUFDSjtZQUNYLE9BQU9GLEtBQUssQ0FBQ0UsSUFBSTtRQUNuQjtRQUNBSyxPQUFPO1lBQ0xQLFFBQVEsQ0FBQztRQUNYO0lBQ0Y7QUFDRixDQUFBO0FBRUFRLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUSxnQkFBZ0I7SUFDNUNOLE9BQU9MO0FBQ1Q7QUFFQSwyQkFBMkI7QUFDM0IsTUFBTVksZ0JBQWdCO0lBQ3BCLE1BQU1DLGNBQWMsSUFBSUMsdUJBQVcsQ0FBQztRQUNsQ0MsZ0JBQWdCO1lBQ2RDLFNBQVM7Z0JBQ1BDLE9BQU87WUFDVDtRQUNGO0lBQ0Y7SUFFQSxPQUFPLENBQUMsRUFBRUMsUUFBUSxFQUFpQyxpQkFDakQscUJBQUNDLCtCQUFtQjtZQUFDQyxRQUFRUDtzQkFBY0s7O0FBRS9DO0FBRUEsa0JBQWtCO0FBQ2xCLE1BQU1HLGNBQWM7SUFDbEJDLElBQUk7SUFDSkMsTUFBTTtJQUNOQyxPQUFPO0lBQ1BDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxVQUFVO0FBQ1o7QUFFQSxNQUFNQyxlQUFlO0lBQ25CTixJQUFJO0lBQ0pDLE1BQU07SUFDTkMsT0FBTztJQUNQQyxPQUFPO0lBQ1BJLFVBQVU7SUFDVkgsT0FBTztBQUNUO0FBRUFJLFNBQVMsZ0JBQWdCO0lBQ3ZCQyxXQUFXO1FBQ1R0QyxLQUFLdUMsYUFBYTtRQUNsQmhDLGlCQUFpQlEsS0FBSztJQUN4QjtJQUVBc0IsU0FBUyw4QkFBOEI7UUFDckNHLEdBQUcsc0NBQXNDO1lBQ3ZDLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUEwQixPQUFPSixPQUFPSyxPQUFPLENBQUNDLEtBQUssRUFBRUMsT0FBTyxDQUFDLEVBQUU7WUFDdkNILE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0csVUFBVSxFQUFFQyxJQUFJLENBQUM7WUFDdkNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFRCxJQUFJLENBQUM7WUFDdkNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ00sT0FBTyxFQUFFRixJQUFJLENBQUM7UUFDdEM7UUFFQVYsR0FBRyxxREFBcUQ7WUFDdEQsTUFBTWEsYUFBYTtnQkFBQ2xCO2FBQWE7WUFDakM1QixpQkFBaUJJLE9BQU8sQ0FBQyxjQUFjMkMsS0FBS0MsU0FBUyxDQUFDRjtZQUV0RCxNQUFNLEVBQUVaLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLGdCQUFPLEtBQUk7Z0JBQzdDQyxTQUFTekI7WUFDWDtZQUVBMEIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sQ0FBQ0s7WUFDckNSLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0csVUFBVSxFQUFFQyxJQUFJLENBQUM7WUFDdkNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFRCxJQUFJLENBQUM7WUFDdkNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ00sT0FBTyxFQUFFRixJQUFJLENBQUM7UUFDdEM7UUFFQVYsR0FBRyxzQ0FBc0M7WUFDdkNqQyxpQkFBaUJJLE9BQU8sQ0FBQyxjQUFjO1lBRXZDLE1BQU0sRUFBRThCLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLGdCQUFPLEtBQUk7Z0JBQzdDQyxTQUFTekI7WUFDWDtZQUVBMEIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sQ0FBQyxFQUFFO1lBQ3ZDSCxPQUFPSixPQUFPSyxPQUFPLENBQUNNLE9BQU8sRUFBRUYsSUFBSSxDQUFDO1FBQ3RDO0lBQ0Y7SUFFQWIsU0FBUyxxQkFBcUI7UUFDNUJHLEdBQUcsNkNBQTZDO1lBQzlDLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUFxQyxJQUFBQSxVQUFHLEVBQUM7Z0JBQ0ZmLE9BQU9LLE9BQU8sQ0FBQ1csT0FBTyxDQUFDN0IsYUFBYTtZQUN0QztZQUVBaUIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVXLFlBQVksQ0FBQztZQUMxQ2IsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLENBQUMsRUFBRSxFQUFFQyxPQUFPLENBQUM7Z0JBQ3RDbkIsSUFBSUQsWUFBWUMsRUFBRTtnQkFDbEJDLE1BQU1GLFlBQVlFLElBQUk7Z0JBQ3RCQyxPQUFPSCxZQUFZRyxLQUFLO2dCQUN4QkMsT0FBT0osWUFBWUksS0FBSztnQkFDeEJJLFVBQVU7Z0JBQ1ZILE9BQU9MLFlBQVlLLEtBQUs7WUFDMUI7WUFDQVksT0FBT0osT0FBT0ssT0FBTyxDQUFDRyxVQUFVLEVBQUVDLElBQUksQ0FBQztZQUN2Q0wsT0FBT0osT0FBT0ssT0FBTyxDQUFDSyxVQUFVLEVBQUVELElBQUksQ0FBQztZQUN2Q0wsT0FBTzNDLGFBQUssQ0FBQ0MsT0FBTyxFQUFFd0Qsb0JBQW9CLENBQUM7UUFDN0M7UUFFQW5CLEdBQUcsc0RBQXNEO1lBQ3ZELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUFxQyxJQUFBQSxVQUFHLEVBQUM7Z0JBQ0ZmLE9BQU9LLE9BQU8sQ0FBQ1csT0FBTyxDQUFDN0IsYUFBYTtZQUN0QztZQUVBNEIsSUFBQUEsVUFBRyxFQUFDO2dCQUNGZixPQUFPSyxPQUFPLENBQUNXLE9BQU8sQ0FBQzdCLGFBQWE7WUFDdEM7WUFFQWlCLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFVyxZQUFZLENBQUM7WUFDMUNiLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsQ0FBQ1gsUUFBUSxFQUFFYyxJQUFJLENBQUM7WUFDOUNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0csVUFBVSxFQUFFQyxJQUFJLENBQUM7WUFDdkNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFRCxJQUFJLENBQUM7UUFDekM7UUFFQVYsR0FBRyxpQ0FBaUM7WUFDbEMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQXFDLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDVyxPQUFPLENBQUM3QixhQUFhLEtBQUssOEJBQThCO1lBQ3pFO1lBRUFpQixPQUFPSixPQUFPSyxPQUFPLENBQUNDLEtBQUssRUFBRVcsWUFBWSxDQUFDO1lBQzFDYixPQUFPM0MsYUFBSyxDQUFDRyxLQUFLLEVBQUVzRCxvQkFBb0IsQ0FDdEM7UUFFSjtRQUVBbkIsR0FBRyxnQ0FBZ0M7WUFDakMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQXFDLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDVyxPQUFPLENBQUM3QixhQUFhO1lBQ3RDO1lBRUFpQixPQUFPSixPQUFPSyxPQUFPLENBQUNDLEtBQUssRUFBRVcsWUFBWSxDQUFDO1lBQzFDYixPQUFPM0MsYUFBSyxDQUFDRyxLQUFLLEVBQUVzRCxvQkFBb0IsQ0FDdEM7UUFFSjtRQUVBbkIsR0FBRyx1Q0FBdUM7WUFDeEMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQXFDLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDVyxPQUFPLENBQUM3QjtZQUN6QjtZQUVBaUIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDWCxRQUFRLEVBQUVjLElBQUksQ0FBQztRQUNoRDtJQUNGO0lBRUFiLFNBQVMsdUJBQXVCO1FBQzlCQyxXQUFXO1lBQ1QvQixpQkFBaUJJLE9BQU8sQ0FBQyxjQUFjMkMsS0FBS0MsU0FBUyxDQUFDO2dCQUFDcEI7YUFBYTtRQUN0RTtRQUVBSyxHQUFHLDhDQUE4QztZQUMvQyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLGdCQUFPLEtBQUk7Z0JBQzdDQyxTQUFTekI7WUFDWDtZQUVBcUMsSUFBQUEsVUFBRyxFQUFDO2dCQUNGZixPQUFPSyxPQUFPLENBQUNjLGNBQWMsQ0FBQyxHQUFHO1lBQ25DO1lBRUFmLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsQ0FBQ1gsUUFBUSxFQUFFYyxJQUFJLENBQUM7WUFDOUNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0csVUFBVSxFQUFFQyxJQUFJLENBQUM7WUFDdkNMLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFRCxJQUFJLENBQUM7UUFDekM7UUFFQVYsR0FBRyw2Q0FBNkM7WUFDOUMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQXFDLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDYyxjQUFjLENBQUMsR0FBRztZQUNuQztZQUVBZixPQUFPSixPQUFPSyxPQUFPLENBQUNDLEtBQUssQ0FBQyxFQUFFLENBQUNYLFFBQVEsRUFBRWMsSUFBSSxDQUFDLElBQUksa0JBQWtCO1lBQ3BFTCxPQUFPM0MsYUFBSyxDQUFDRyxLQUFLLEVBQUVzRCxvQkFBb0IsQ0FDdEM7UUFFSjtRQUVBbkIsR0FBRyxnREFBZ0Q7WUFDakQsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQXFDLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDYyxjQUFjLENBQUMsR0FBRztZQUNuQztZQUVBZixPQUFPSixPQUFPSyxPQUFPLENBQUNDLEtBQUssRUFBRVcsWUFBWSxDQUFDO1lBQzFDYixPQUFPSixPQUFPSyxPQUFPLENBQUNNLE9BQU8sRUFBRUYsSUFBSSxDQUFDO1FBQ3RDO1FBRUFWLEdBQUcscUNBQXFDO1lBQ3RDLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUFxQyxJQUFBQSxVQUFHLEVBQUM7Z0JBQ0ZmLE9BQU9LLE9BQU8sQ0FBQ2MsY0FBYyxDQUFDLEtBQUs7WUFDckM7WUFFQWYsT0FBTzNDLGFBQUssQ0FBQ0csS0FBSyxFQUFFc0Qsb0JBQW9CLENBQUM7UUFDM0M7SUFDRjtJQUVBdEIsU0FBUyxxQkFBcUI7UUFDNUJDLFdBQVc7WUFDVCxNQUFNUyxRQUFRO2dCQUFDWjtnQkFBYztvQkFBRSxHQUFHQSxZQUFZO29CQUFFTixJQUFJO29CQUFHQyxNQUFNO2dCQUFhO2FBQUU7WUFDNUV2QixpQkFBaUJJLE9BQU8sQ0FBQyxjQUFjMkMsS0FBS0MsU0FBUyxDQUFDUjtRQUN4RDtRQUVBUCxHQUFHLHVDQUF1QztZQUN4QyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLGdCQUFPLEtBQUk7Z0JBQzdDQyxTQUFTekI7WUFDWDtZQUVBcUMsSUFBQUEsVUFBRyxFQUFDO2dCQUNGZixPQUFPSyxPQUFPLENBQUNoQyxVQUFVLENBQUM7WUFDNUI7WUFFQStCLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFVyxZQUFZLENBQUM7WUFDMUNiLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsQ0FBQ2xCLEVBQUUsRUFBRXFCLElBQUksQ0FBQztZQUN4Q0wsT0FBTzNDLGFBQUssQ0FBQ0MsT0FBTyxFQUFFd0Qsb0JBQW9CLENBQUM7UUFDN0M7UUFFQW5CLEdBQUcsZ0RBQWdEO1lBQ2pELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUFxQyxJQUFBQSxVQUFHLEVBQUM7Z0JBQ0ZmLE9BQU9LLE9BQU8sQ0FBQ2hDLFVBQVUsQ0FBQztZQUM1QjtZQUVBK0IsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVXLFlBQVksQ0FBQyxJQUFJLGtCQUFrQjtZQUNoRWIsT0FBTzNDLGFBQUssQ0FBQ0csS0FBSyxFQUFFc0Qsb0JBQW9CLENBQUM7UUFDM0M7SUFDRjtJQUVBdEIsU0FBUyxtQkFBbUI7UUFDMUJDLFdBQVc7WUFDVC9CLGlCQUFpQkksT0FBTyxDQUFDLGNBQWMyQyxLQUFLQyxTQUFTLENBQUM7Z0JBQUNwQjthQUFhO1FBQ3RFO1FBRUFLLEdBQUcsZ0RBQWdEO1lBQ2pELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUFxQyxJQUFBQSxVQUFHLEVBQUM7Z0JBQ0ZmLE9BQU9LLE9BQU8sQ0FBQ2UsU0FBUztZQUMxQjtZQUVBaEIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sQ0FBQyxFQUFFO1lBQ3ZDSCxPQUFPSixPQUFPSyxPQUFPLENBQUNHLFVBQVUsRUFBRUMsSUFBSSxDQUFDO1lBQ3ZDTCxPQUFPSixPQUFPSyxPQUFPLENBQUNLLFVBQVUsRUFBRUQsSUFBSSxDQUFDO1lBQ3ZDTCxPQUFPSixPQUFPSyxPQUFPLENBQUNNLE9BQU8sRUFBRUYsSUFBSSxDQUFDO1lBQ3BDTCxPQUFPM0MsYUFBSyxDQUFDQyxPQUFPLEVBQUV3RCxvQkFBb0IsQ0FBQztRQUM3QztJQUNGO0lBRUF0QixTQUFTLHdCQUF3QjtRQUMvQkcsR0FBRyxpREFBaUQ7WUFDbEQsTUFBTU8sUUFBUTtnQkFDWjtvQkFBRSxHQUFHWixZQUFZO29CQUFFQyxVQUFVO2dCQUFFO2dCQUMvQjtvQkFBRSxHQUFHRCxZQUFZO29CQUFFTixJQUFJO29CQUFHTyxVQUFVO2dCQUFFO2FBQ3ZDO1lBQ0Q3QixpQkFBaUJJLE9BQU8sQ0FBQyxjQUFjMkMsS0FBS0MsU0FBUyxDQUFDUjtZQUV0RCxNQUFNLEVBQUVOLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLGdCQUFPLEtBQUk7Z0JBQzdDQyxTQUFTekI7WUFDWDtZQUVBMEIsT0FBT0osT0FBT0ssT0FBTyxDQUFDRyxVQUFVLEVBQUVDLElBQUksQ0FBQztRQUN6QztRQUVBVixHQUFHLCtDQUErQztZQUNoRCxNQUFNTyxRQUFRO2dCQUNaO29CQUFFLEdBQUdaLFlBQVk7b0JBQUVKLE9BQU87b0JBQUtLLFVBQVU7Z0JBQUU7Z0JBQzNDO29CQUFFLEdBQUdELFlBQVk7b0JBQUVOLElBQUk7b0JBQUdFLE9BQU87b0JBQUlLLFVBQVU7Z0JBQUU7YUFDbEQ7WUFDRDdCLGlCQUFpQkksT0FBTyxDQUFDLGNBQWMyQyxLQUFLQyxTQUFTLENBQUNSO1lBRXRELE1BQU0sRUFBRU4sTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUEwQixPQUFPSixPQUFPSyxPQUFPLENBQUNLLFVBQVUsRUFBRUQsSUFBSSxDQUFDLE1BQU0sbUJBQW1CO1FBQ2xFO1FBRUFWLEdBQUcsZ0RBQWdEO1lBQ2pELE1BQU1PLFFBQVE7Z0JBQ1o7b0JBQUUsR0FBR1osWUFBWTtvQkFBRUosT0FBTztvQkFBT0ssVUFBVTtnQkFBRTthQUM5QztZQUNEN0IsaUJBQWlCSSxPQUFPLENBQUMsY0FBYzJDLEtBQUtDLFNBQVMsQ0FBQ1I7WUFFdEQsTUFBTSxFQUFFTixNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQTBCLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFRCxJQUFJLENBQUM7UUFDekM7SUFDRjtJQUVBYixTQUFTLGdDQUFnQztRQUN2Q0csR0FBRyx3Q0FBd0M7WUFDekMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQXFDLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDVyxPQUFPLENBQUM3QixhQUFhO1lBQ3RDO1lBRUEsTUFBTXlCLGFBQWFDLEtBQUtRLEtBQUssQ0FBQ3ZELGlCQUFpQkUsT0FBTyxDQUFDLGlCQUFpQjtZQUN4RW9DLE9BQU9RLFlBQVlLLFlBQVksQ0FBQztZQUNoQ2IsT0FBT1EsVUFBVSxDQUFDLEVBQUUsQ0FBQ3hCLEVBQUUsRUFBRXFCLElBQUksQ0FBQ3RCLFlBQVlDLEVBQUU7WUFDNUNnQixPQUFPUSxVQUFVLENBQUMsRUFBRSxDQUFDakIsUUFBUSxFQUFFYyxJQUFJLENBQUM7UUFDdEM7UUFFQVYsR0FBRyxtREFBbUQ7WUFDcERqQyxpQkFBaUJJLE9BQU8sQ0FBQyxjQUFjMkMsS0FBS0MsU0FBUyxDQUFDO2dCQUFDcEI7YUFBYTtZQUVwRSxNQUFNLEVBQUVNLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLGdCQUFPLEtBQUk7Z0JBQzdDQyxTQUFTekI7WUFDWDtZQUVBcUMsSUFBQUEsVUFBRyxFQUFDO2dCQUNGZixPQUFPSyxPQUFPLENBQUNjLGNBQWMsQ0FBQyxHQUFHO1lBQ25DO1lBRUEsTUFBTVAsYUFBYUMsS0FBS1EsS0FBSyxDQUFDdkQsaUJBQWlCRSxPQUFPLENBQUMsaUJBQWlCO1lBQ3hFb0MsT0FBT1EsVUFBVSxDQUFDLEVBQUUsQ0FBQ2pCLFFBQVEsRUFBRWMsSUFBSSxDQUFDO1FBQ3RDO1FBRUFWLEdBQUcsK0NBQStDO1lBQ2hEakMsaUJBQWlCSSxPQUFPLENBQUMsY0FBYzJDLEtBQUtDLFNBQVMsQ0FBQztnQkFBQ3BCO2FBQWE7WUFFcEUsTUFBTSxFQUFFTSxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQXFDLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDZSxTQUFTO1lBQzFCO1lBRUEsTUFBTVIsYUFBYTlDLGlCQUFpQkUsT0FBTyxDQUFDO1lBQzVDb0MsT0FBT1MsS0FBS1EsS0FBSyxDQUFDVCxjQUFjLE9BQU9MLE9BQU8sQ0FBQyxFQUFFO1FBQ25EO0lBQ0Y7SUFFQVgsU0FBUywwQkFBMEI7UUFDakNDLFdBQVc7WUFDVC9CLGlCQUFpQkksT0FBTyxDQUFDLGNBQWMyQyxLQUFLQyxTQUFTLENBQUM7Z0JBQUNwQjthQUFhO1FBQ3RFO1FBRUFLLEdBQUcsb0RBQW9EO1lBQ3JELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUEwQixPQUFPSixPQUFPSyxPQUFPLENBQUNpQixRQUFRLENBQUMsSUFBSWIsSUFBSSxDQUFDO1lBQ3hDTCxPQUFPSixPQUFPSyxPQUFPLENBQUNpQixRQUFRLENBQUMsTUFBTWIsSUFBSSxDQUFDO1FBQzVDO1FBRUFWLEdBQUcsc0RBQXNEO1lBQ3ZELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUEwQixPQUFPSixPQUFPSyxPQUFPLENBQUNrQixlQUFlLENBQUMsSUFBSWQsSUFBSSxDQUFDO1lBQy9DTCxPQUFPSixPQUFPSyxPQUFPLENBQUNrQixlQUFlLENBQUMsTUFBTWQsSUFBSSxDQUFDO1FBQ25EO1FBRUFWLEdBQUcsbURBQW1EO1lBQ3BELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUEsTUFBTThDLE9BQU94QixPQUFPSyxPQUFPLENBQUNyQyxPQUFPLENBQUM7WUFDcENvQyxPQUFPb0IsTUFBTWpCLE9BQU8sQ0FBQ2I7WUFDckJVLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ3JDLE9BQU8sQ0FBQyxNQUFNeUQsYUFBYTtRQUNuRDtJQUNGO0lBRUE3QixTQUFTLHdCQUF3QjtRQUMvQkcsR0FBRyw4Q0FBOEM7WUFDL0MsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxnQkFBTyxLQUFJO2dCQUM3Q0MsU0FBU3pCO1lBQ1g7WUFFQSxNQUFNZ0QsaUJBQWlCO2dCQUNyQnRDLElBQUk7Z0JBQ0pDLE1BQU07Z0JBQ05DLE9BQU8sQ0FBQztnQkFDUkMsT0FBTztnQkFDUEMsT0FBTyxDQUFDO1lBQ1Y7WUFFQXVCLElBQUFBLFVBQUcsRUFBQztnQkFDRmYsT0FBT0ssT0FBTyxDQUFDVyxPQUFPLENBQUNVLGdCQUF1QjtZQUNoRDtZQUVBdEIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVXLFlBQVksQ0FBQztZQUMxQ2IsT0FBTzNDLGFBQUssQ0FBQ0csS0FBSyxFQUFFc0Qsb0JBQW9CLENBQ3RDO1FBRUo7UUFFQW5CLEdBQUcsd0NBQXdDO1lBQ3pDLGdDQUFnQztZQUNoQyxNQUFNNEIsa0JBQWtCN0QsaUJBQWlCSSxPQUFPO1lBQ2hESixpQkFBaUJJLE9BQU8sR0FBR1gsS0FBS0ksRUFBRSxDQUFDO2dCQUNqQyxNQUFNLElBQUlpRSxNQUFNO1lBQ2xCO1lBRUEsTUFBTSxFQUFFNUIsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUFxQyxJQUFBQSxVQUFHLEVBQUM7Z0JBQ0ZmLE9BQU9LLE9BQU8sQ0FBQ1csT0FBTyxDQUFDN0IsYUFBYTtZQUN0QztZQUVBLGlEQUFpRDtZQUNqRGlCLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFVyxZQUFZLENBQUM7WUFDMUNiLE9BQU8zQyxhQUFLLENBQUNHLEtBQUssRUFBRXNELG9CQUFvQixDQUN0QztZQUdGLDZCQUE2QjtZQUM3QnBELGlCQUFpQkksT0FBTyxHQUFHeUQ7UUFDN0I7UUFFQTVCLEdBQUcsdUNBQXVDO1lBQ3hDLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUFxQyxJQUFBQSxVQUFHLEVBQUM7Z0JBQ0ZmLE9BQU9LLE9BQU8sQ0FBQ1csT0FBTyxDQUFDN0IsYUFBYTtZQUN0QztZQUVBaUIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVXLFlBQVksQ0FBQztZQUMxQ2IsT0FBTzNDLGFBQUssQ0FBQ0csS0FBSyxFQUFFc0Qsb0JBQW9CLENBQ3RDO1FBRUo7UUFFQW5CLEdBQUcsb0NBQW9DO1lBQ3JDLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDN0NDLFNBQVN6QjtZQUNYO1lBRUEsTUFBTW1ELG9CQUFvQjtnQkFBRSxHQUFHMUMsV0FBVztnQkFBRUssT0FBTztZQUFFO1lBRXJEdUIsSUFBQUEsVUFBRyxFQUFDO2dCQUNGZixPQUFPSyxPQUFPLENBQUNXLE9BQU8sQ0FBQ2EsbUJBQW1CO1lBQzVDO1lBRUF6QixPQUFPSixPQUFPSyxPQUFPLENBQUNDLEtBQUssRUFBRVcsWUFBWSxDQUFDO1lBQzFDYixPQUFPM0MsYUFBSyxDQUFDRyxLQUFLLEVBQUVzRCxvQkFBb0IsQ0FDdEM7UUFFSjtJQUNGO0lBRUF0QixTQUFTLDhCQUE4QjtRQUNyQ0csR0FBRyx1Q0FBdUM7WUFDeEMsTUFBTSxFQUFFQyxNQUFNLEVBQUU4QixRQUFRLEVBQUUsR0FBRzdCLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsZ0JBQU8sS0FBSTtnQkFDdkRDLFNBQVN6QjtZQUNYO1lBRUEsTUFBTXFELGVBQWUvQixPQUFPSyxPQUFPLENBQUNDLEtBQUs7WUFDekMsTUFBTTBCLG9CQUFvQmhDLE9BQU9LLE9BQU8sQ0FBQ0csVUFBVTtZQUNuRCxNQUFNeUIsb0JBQW9CakMsT0FBT0ssT0FBTyxDQUFDSyxVQUFVO1lBRW5ELHdCQUF3QjtZQUN4Qm9CO1lBRUEsdUNBQXVDO1lBQ3ZDMUIsT0FBT0osT0FBT0ssT0FBTyxDQUFDQyxLQUFLLEVBQUVHLElBQUksQ0FBQ3NCO1lBQ2xDM0IsT0FBT0osT0FBT0ssT0FBTyxDQUFDRyxVQUFVLEVBQUVDLElBQUksQ0FBQ3VCO1lBQ3ZDNUIsT0FBT0osT0FBT0ssT0FBTyxDQUFDSyxVQUFVLEVBQUVELElBQUksQ0FBQ3dCO1FBQ3pDO1FBRUFsQyxHQUFHLDhDQUE4QztZQUMvQyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLGdCQUFPLEtBQUk7Z0JBQzdDQyxTQUFTekI7WUFDWDtZQUVBcUMsSUFBQUEsVUFBRyxFQUFDO2dCQUNGLGdDQUFnQztnQkFDaENmLE9BQU9LLE9BQU8sQ0FBQ1csT0FBTyxDQUFDN0IsYUFBYTtnQkFDcENhLE9BQU9LLE9BQU8sQ0FBQ1csT0FBTyxDQUFDN0IsYUFBYTtnQkFDcENhLE9BQU9LLE9BQU8sQ0FBQ2MsY0FBYyxDQUFDLEdBQUc7Z0JBQ2pDbkIsT0FBT0ssT0FBTyxDQUFDYyxjQUFjLENBQUMsR0FBRztZQUNuQztZQUVBZixPQUFPSixPQUFPSyxPQUFPLENBQUNDLEtBQUssQ0FBQyxFQUFFLENBQUNYLFFBQVEsRUFBRWMsSUFBSSxDQUFDO1lBQzlDTCxPQUFPSixPQUFPSyxPQUFPLENBQUNHLFVBQVUsRUFBRUMsSUFBSSxDQUFDO1FBQ3pDO0lBQ0Y7QUFDRiJ9