{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\brands.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS: API de Marcas\r\n// ===================================\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { GET, POST } from '@/app/api/brands/route';\r\n\r\n// Mock de Supabase - Versión completa para brands\r\njest.mock('@/lib/supabase', () => {\r\n  const createMockQueryBuilder = () => {\r\n    const mockData = {\r\n      data: [\r\n        { brand: 'El Galgo', product_count: 2 },\r\n        { brand: 'Plavicon', product_count: 3 },\r\n        { brand: 'Akapol', product_count: 1 },\r\n      ],\r\n      error: null\r\n    };\r\n\r\n    const mockQueryBuilder = {\r\n      select: jest.fn(() => mockQueryBuilder),\r\n      from: jest.fn(() => mockQueryBuilder),\r\n      insert: jest.fn(() => mockQueryBuilder),\r\n      update: jest.fn(() => mockQueryBuilder),\r\n      delete: jest.fn(() => mockQueryBuilder),\r\n      eq: jest.fn(() => mockQueryBuilder),\r\n      neq: jest.fn(() => mockQueryBuilder),\r\n      gt: jest.fn(() => mockQueryBuilder),\r\n      gte: jest.fn(() => mockQueryBuilder),\r\n      lt: jest.fn(() => mockQueryBuilder),\r\n      lte: jest.fn(() => mockQueryBuilder),\r\n      like: jest.fn(() => mockQueryBuilder),\r\n      ilike: jest.fn(() => mockQueryBuilder),\r\n      is: jest.fn(() => mockQueryBuilder),\r\n      in: jest.fn(() => mockQueryBuilder),\r\n      not: jest.fn(() => mockQueryBuilder),\r\n      or: jest.fn(() => mockQueryBuilder),\r\n      and: jest.fn(() => mockQueryBuilder),\r\n      order: jest.fn(() => mockQueryBuilder),\r\n      limit: jest.fn(() => mockQueryBuilder),\r\n      range: jest.fn(() => mockQueryBuilder),\r\n      single: jest.fn(() => Promise.resolve(mockData)),\r\n      maybeSingle: jest.fn(() => Promise.resolve(mockData)),\r\n      then: jest.fn((callback) => Promise.resolve(callback(mockData))),\r\n      catch: jest.fn(() => Promise.resolve()),\r\n    };\r\n\r\n    return mockQueryBuilder;\r\n  };\r\n\r\n  const mockClient = {\r\n    from: jest.fn(() => createMockQueryBuilder()),\r\n    auth: {\r\n      getUser: jest.fn(() => Promise.resolve({\r\n        data: { user: null },\r\n        error: null,\r\n      })),\r\n    },\r\n  };\r\n\r\n  return {\r\n    getSupabaseClient: jest.fn(() => mockClient),\r\n    supabase: mockClient,\r\n    supabaseAdmin: mockClient,\r\n    handleSupabaseError: jest.fn((error, context) => {\r\n      if (error?.message) {\r\n        throw new Error(error.message)\r\n      }\r\n      throw new Error('Supabase error')\r\n    }),\r\n    isAuthenticated: jest.fn(() => Promise.resolve(false)),\r\n    getCurrentUser: jest.fn(() => Promise.resolve(null)),\r\n  };\r\n});\r\n\r\ndescribe('API de Marcas', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('GET /api/brands', () => {\r\n    it('debería obtener marcas con conteo de productos', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeInstanceOf(Array);\r\n      expect(data.data.length).toBeGreaterThan(0);\r\n      \r\n      // Verificar estructura de marca\r\n      const firstBrand = data.data[0];\r\n      expect(firstBrand).toHaveProperty('name');\r\n      expect(firstBrand).toHaveProperty('products_count');\r\n      expect(typeof firstBrand.name).toBe('string');\r\n      expect(typeof firstBrand.products_count).toBe('number');\r\n    });\r\n\r\n    it('debería filtrar marcas por búsqueda', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands?search=galgo');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeInstanceOf(Array);\r\n    });\r\n\r\n    it('debería filtrar por mínimo de productos', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands?minProducts=2');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeInstanceOf(Array);\r\n      \r\n      // Verificar que todas las marcas tienen al menos 2 productos\r\n      data.data.forEach((brand: any) => {\r\n        expect(brand.products_count).toBeGreaterThanOrEqual(2);\r\n      });\r\n    });\r\n\r\n    it('debería ordenar marcas por número de productos', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      \r\n      // Verificar ordenamiento descendente por productos\r\n      for (let i = 0; i < data.data.length - 1; i++) {\r\n        expect(data.data[i].products_count).toBeGreaterThanOrEqual(\r\n          data.data[i + 1].products_count\r\n        );\r\n      }\r\n    });\r\n\r\n    it('debería manejar errores de base de datos', async () => {\r\n      // Mock error de Supabase\r\n      const mockSupabase = require('@/lib/supabase');\r\n      mockSupabase.getSupabaseClient.mockReturnValueOnce(null);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(503);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Servicio de base de datos no disponible');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/brands (estadísticas)', () => {\r\n    beforeEach(() => {\r\n      // Mock para estadísticas\r\n      const mockSupabase = require('@/lib/supabase');\r\n      mockSupabase.getSupabaseClient.mockReturnValue({\r\n        from: jest.fn(() => ({\r\n          select: jest.fn(() => ({\r\n            not: jest.fn(() => Promise.resolve({\r\n              data: [\r\n                { brand: 'El Galgo', price: 100, discounted_price: null, stock: 10, category_id: 1 },\r\n                { brand: 'El Galgo', price: 150, discounted_price: 120, stock: 5, category_id: 1 },\r\n                { brand: 'Plavicon', price: 200, discounted_price: null, stock: 8, category_id: 2 },\r\n                { brand: 'Plavicon', price: 250, discounted_price: 200, stock: 3, category_id: 2 },\r\n                { brand: 'Akapol', price: 300, discounted_price: null, stock: 15, category_id: 3 },\r\n              ],\r\n              error: null\r\n            }))\r\n          }))\r\n        }))\r\n      });\r\n    });\r\n\r\n    it('debería calcular estadísticas de marcas', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeInstanceOf(Array);\r\n      \r\n      // Verificar estructura de estadísticas\r\n      const firstStat = data.data[0];\r\n      expect(firstStat).toHaveProperty('name');\r\n      expect(firstStat).toHaveProperty('products_count');\r\n      expect(firstStat).toHaveProperty('total_stock');\r\n      expect(firstStat).toHaveProperty('avg_price');\r\n      expect(firstStat).toHaveProperty('min_price');\r\n      expect(firstStat).toHaveProperty('max_price');\r\n      expect(firstStat).toHaveProperty('discounted_products');\r\n    });\r\n\r\n    it('debería calcular precios promedio correctamente', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      \r\n      // Verificar que los precios promedio son números válidos\r\n      data.data.forEach((stat: any) => {\r\n        expect(typeof stat.avg_price).toBe('number');\r\n        expect(stat.avg_price).toBeGreaterThan(0);\r\n        expect(stat.min_price).toBeLessThanOrEqual(stat.max_price);\r\n      });\r\n    });\r\n\r\n    it('debería contar productos con descuento correctamente', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      \r\n      // Verificar conteo de productos con descuento\r\n      data.data.forEach((stat: any) => {\r\n        expect(typeof stat.discounted_products).toBe('number');\r\n        expect(stat.discounted_products).toBeGreaterThanOrEqual(0);\r\n        expect(stat.discounted_products).toBeLessThanOrEqual(stat.products_count);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Validación de parámetros', () => {\r\n    it('debería manejar parámetros de búsqueda vacíos', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands?search=');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n    });\r\n\r\n    it('debería manejar minProducts inválido', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands?minProducts=abc');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      // Debería usar valor por defecto (1)\r\n    });\r\n\r\n    it('debería manejar minProducts negativo', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/brands?minProducts=-5');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Casos edge', () => {\r\n    it('debería manejar respuesta vacía de base de datos', async () => {\r\n      // Mock respuesta vacía\r\n      const mockSupabase = require('@/lib/supabase');\r\n      mockSupabase.getSupabaseClient.mockReturnValue({\r\n        from: jest.fn(() => ({\r\n          select: jest.fn(() => ({\r\n            not: jest.fn(() => ({\r\n              gt: jest.fn(() => ({\r\n                ilike: jest.fn(() => Promise.resolve({\r\n                  data: [],\r\n                  error: null\r\n                }))\r\n              }))\r\n            }))\r\n          }))\r\n        }))\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toEqual([]);\r\n      expect(data.message).toBe('0 marcas encontradas');\r\n    });\r\n\r\n    it('debería manejar marcas con nombres especiales', async () => {\r\n      // Mock con caracteres especiales\r\n      const mockSupabase = require('@/lib/supabase');\r\n\r\n      // Crear un mock más robusto que maneje tanto con como sin ilike\r\n      const mockQueryBuilder = {\r\n        select: jest.fn(() => mockQueryBuilder),\r\n        not: jest.fn(() => mockQueryBuilder),\r\n        gt: jest.fn(() => mockQueryBuilder),\r\n        ilike: jest.fn(() => Promise.resolve({\r\n          data: [\r\n            { brand: 'Marca & Cía.' },\r\n            { brand: 'Marca-Test' },\r\n            { brand: 'Marca 123' },\r\n          ],\r\n          error: null\r\n        })),\r\n        // Agregar método then para manejar casos sin ilike\r\n        then: jest.fn((callback) => callback({\r\n          data: [\r\n            { brand: 'Marca & Cía.' },\r\n            { brand: 'Marca-Test' },\r\n            { brand: 'Marca 123' },\r\n          ],\r\n          error: null\r\n        }))\r\n      };\r\n\r\n      mockSupabase.getSupabaseClient.mockReturnValue({\r\n        from: jest.fn(() => mockQueryBuilder)\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/brands');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data.length).toBe(3);\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","createMockQueryBuilder","mockData","data","brand","product_count","error","mockQueryBuilder","select","fn","from","insert","update","delete","eq","neq","gt","gte","lt","lte","like","ilike","is","in","not","or","and","order","limit","range","single","Promise","resolve","maybeSingle","then","callback","catch","mockClient","auth","getUser","user","getSupabaseClient","supabase","supabaseAdmin","handleSupabaseError","context","message","Error","isAuthenticated","getCurrentUser","describe","beforeEach","clearAllMocks","it","request","NextRequest","response","GET","json","expect","status","toBe","success","toBeInstanceOf","Array","length","toBeGreaterThan","firstBrand","toHaveProperty","name","products_count","forEach","toBeGreaterThanOrEqual","i","mockSupabase","require","mockReturnValueOnce","mockReturnValue","price","discounted_price","stock","category_id","POST","firstStat","stat","avg_price","min_price","toBeLessThanOrEqual","max_price","discounted_products","toEqual"],"mappings":"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"}