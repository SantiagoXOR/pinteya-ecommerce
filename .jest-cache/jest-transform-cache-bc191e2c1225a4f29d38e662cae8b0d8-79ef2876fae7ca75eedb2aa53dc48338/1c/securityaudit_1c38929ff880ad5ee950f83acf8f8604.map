{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\security-audit.ts"],"sourcesContent":["/**\n * Sistema de Auditoría de Seguridad\n * Registra eventos de seguridad y detecta patrones sospechosos\n */\n\nimport { supabaseAdmin } from '@/lib/supabase';\nimport type { NextRequest, NextApiRequest } from 'next';\nimport type { SecurityContext } from './security-validations';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface SecurityEvent {\n  id?: string;\n  user_id: string;\n  event_type: SecurityEventType;\n  event_category: SecurityEventCategory;\n  severity: SecuritySeverity;\n  description: string;\n  metadata?: Record<string, any>;\n  ip_address?: string;\n  user_agent?: string;\n  timestamp: string;\n  resolved: boolean;\n}\n\nexport type SecurityEventType = \n  | 'AUTH_SUCCESS'\n  | 'AUTH_FAILURE'\n  | 'PERMISSION_DENIED'\n  | 'SUSPICIOUS_ACTIVITY'\n  | 'ROLE_CHANGE'\n  | 'DATA_ACCESS'\n  | 'ADMIN_ACTION'\n  | 'SECURITY_VIOLATION';\n\nexport type SecurityEventCategory = \n  | 'authentication'\n  | 'authorization'\n  | 'data_access'\n  | 'admin_operations'\n  | 'suspicious_behavior';\n\nexport type SecuritySeverity = 'low' | 'medium' | 'high' | 'critical';\n\nexport interface SecurityAlert {\n  id?: string;\n  user_id: string;\n  alert_type: string;\n  severity: SecuritySeverity;\n  description: string;\n  event_count: number;\n  first_occurrence: string;\n  last_occurrence: string;\n  resolved: boolean;\n  metadata?: Record<string, any>;\n}\n\n// =====================================================\n// FUNCIONES DE LOGGING DE EVENTOS\n// =====================================================\n\n/**\n * Registra un evento de seguridad\n */\nexport async function logSecurityEvent(\n  event: Omit<SecurityEvent, 'id' | 'timestamp' | 'resolved'>\n): Promise<void> {\n  try {\n    if (!supabaseAdmin) {\n      console.warn('[SECURITY] Supabase admin no disponible para logging');\n      return;\n    }\n\n    const securityEvent: SecurityEvent = {\n      ...event,\n      timestamp: new Date().toISOString(),\n      resolved: false\n    };\n\n    const { error } = await supabaseAdmin\n      .from('security_events')\n      .insert(securityEvent);\n\n    if (error) {\n      console.error('[SECURITY] Error guardando evento de seguridad:', error);\n    } else {\n      console.log(`[SECURITY] Evento registrado: ${event.event_type} - ${event.description}`);\n    }\n\n    // También log en consola para desarrollo\n    console.log('[SECURITY EVENT]', JSON.stringify(securityEvent, null, 2));\n  } catch (error) {\n    console.error('[SECURITY] Error en logSecurityEvent:', error);\n  }\n}\n\n/**\n * Registra autenticación exitosa\n */\nexport async function logAuthSuccess(\n  userId: string,\n  context: SecurityContext,\n  request?: NextRequest | NextApiRequest\n): Promise<void> {\n  await logSecurityEvent({\n    user_id: userId,\n    event_type: 'AUTH_SUCCESS',\n    event_category: 'authentication',\n    severity: 'low',\n    description: `Usuario autenticado exitosamente con rol: ${context.userRole}`,\n    metadata: {\n      role: context.userRole,\n      permissions: context.permissions,\n      emailVerified: context.metadata.emailVerified\n    },\n    ip_address: context.ipAddress,\n    user_agent: context.userAgent\n  });\n}\n\n/**\n * Registra fallo de autenticación\n */\nexport async function logAuthFailure(\n  userId: string | null,\n  reason: string,\n  request?: NextRequest | NextApiRequest\n): Promise<void> {\n  let ipAddress: string | undefined;\n  let userAgent: string | undefined;\n\n  if (request) {\n    if ('headers' in request && typeof request.headers.get === 'function') {\n      ipAddress = request.headers.get('x-forwarded-for') || 'unknown';\n      userAgent = request.headers.get('user-agent') || 'unknown';\n    } else if ('headers' in request) {\n      const req = request as NextApiRequest;\n      ipAddress = req.headers['x-forwarded-for'] as string || 'unknown';\n      userAgent = req.headers['user-agent'] || 'unknown';\n    }\n  }\n\n  await logSecurityEvent({\n    user_id: userId || 'unknown',\n    event_type: 'AUTH_FAILURE',\n    event_category: 'authentication',\n    severity: 'medium',\n    description: `Fallo de autenticación: ${reason}`,\n    metadata: { reason },\n    ip_address: ipAddress,\n    user_agent: userAgent\n  });\n}\n\n/**\n * Registra denegación de permisos\n */\nexport async function logPermissionDenied(\n  userId: string,\n  operation: string,\n  requiredPermissions: string[],\n  context: SecurityContext\n): Promise<void> {\n  await logSecurityEvent({\n    user_id: userId,\n    event_type: 'PERMISSION_DENIED',\n    event_category: 'authorization',\n    severity: 'medium',\n    description: `Acceso denegado a operación: ${operation}`,\n    metadata: {\n      operation,\n      requiredPermissions,\n      userRole: context.userRole,\n      userPermissions: context.permissions\n    },\n    ip_address: context.ipAddress,\n    user_agent: context.userAgent\n  });\n}\n\n/**\n * Registra acceso a datos sensibles\n */\nexport async function logDataAccess(\n  userId: string,\n  resource: string,\n  action: string,\n  context: SecurityContext,\n  metadata?: Record<string, any>\n): Promise<void> {\n  await logSecurityEvent({\n    user_id: userId,\n    event_type: 'DATA_ACCESS',\n    event_category: 'data_access',\n    severity: 'low',\n    description: `Acceso a ${resource} - Acción: ${action}`,\n    metadata: {\n      resource,\n      action,\n      userRole: context.userRole,\n      ...metadata\n    },\n    ip_address: context.ipAddress,\n    user_agent: context.userAgent\n  });\n}\n\n/**\n * Registra acción administrativa\n */\nexport async function logAdminAction(\n  userId: string,\n  action: string,\n  target: string,\n  context: SecurityContext,\n  metadata?: Record<string, any>\n): Promise<void> {\n  await logSecurityEvent({\n    user_id: userId,\n    event_type: 'ADMIN_ACTION',\n    event_category: 'admin_operations',\n    severity: 'medium',\n    description: `Acción administrativa: ${action} en ${target}`,\n    metadata: {\n      action,\n      target,\n      userRole: context.userRole,\n      ...metadata\n    },\n    ip_address: context.ipAddress,\n    user_agent: context.userAgent\n  });\n}\n\n// =====================================================\n// DETECCIÓN DE ACTIVIDAD SOSPECHOSA\n// =====================================================\n\n/**\n * Detecta múltiples fallos de autenticación\n */\nexport async function detectMultipleAuthFailures(\n  userId: string,\n  timeWindowMinutes: number = 15,\n  maxAttempts: number = 5\n): Promise<boolean> {\n  try {\n    if (!supabaseAdmin) return false;\n\n    const timeThreshold = new Date(Date.now() - timeWindowMinutes * 60 * 1000).toISOString();\n\n    const { data, error } = await supabaseAdmin\n      .from('security_events')\n      .select('id')\n      .eq('user_id', userId)\n      .eq('event_type', 'AUTH_FAILURE')\n      .gte('timestamp', timeThreshold);\n\n    if (error) {\n      console.error('[SECURITY] Error detectando fallos de auth:', error);\n      return false;\n    }\n\n    const failureCount = data?.length || 0;\n    \n    if (failureCount >= maxAttempts) {\n      await logSecurityEvent({\n        user_id: userId,\n        event_type: 'SUSPICIOUS_ACTIVITY',\n        event_category: 'suspicious_behavior',\n        severity: 'high',\n        description: `Múltiples fallos de autenticación detectados: ${failureCount} intentos en ${timeWindowMinutes} minutos`,\n        metadata: {\n          failureCount,\n          timeWindowMinutes,\n          threshold: maxAttempts\n        }\n      });\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    console.error('[SECURITY] Error en detectMultipleAuthFailures:', error);\n    return false;\n  }\n}\n\n/**\n * Detecta acceso desde múltiples IPs\n */\nexport async function detectMultipleIPAccess(\n  userId: string,\n  timeWindowHours: number = 1,\n  maxIPs: number = 3\n): Promise<boolean> {\n  try {\n    if (!supabaseAdmin) return false;\n\n    const timeThreshold = new Date(Date.now() - timeWindowHours * 60 * 60 * 1000).toISOString();\n\n    const { data, error } = await supabaseAdmin\n      .from('security_events')\n      .select('ip_address')\n      .eq('user_id', userId)\n      .eq('event_type', 'AUTH_SUCCESS')\n      .gte('timestamp', timeThreshold)\n      .not('ip_address', 'is', null);\n\n    if (error) {\n      console.error('[SECURITY] Error detectando múltiples IPs:', error);\n      return false;\n    }\n\n    const uniqueIPs = new Set(data?.map(event => event.ip_address));\n    const ipCount = uniqueIPs.size;\n\n    if (ipCount >= maxIPs) {\n      await logSecurityEvent({\n        user_id: userId,\n        event_type: 'SUSPICIOUS_ACTIVITY',\n        event_category: 'suspicious_behavior',\n        severity: 'medium',\n        description: `Acceso desde múltiples IPs detectado: ${ipCount} IPs diferentes en ${timeWindowHours} horas`,\n        metadata: {\n          ipCount,\n          timeWindowHours,\n          threshold: maxIPs,\n          ips: Array.from(uniqueIPs)\n        }\n      });\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    console.error('[SECURITY] Error en detectMultipleIPAccess:', error);\n    return false;\n  }\n}\n\n/**\n * Ejecuta todas las detecciones de seguridad para un usuario\n */\nexport async function runSecurityDetection(userId: string): Promise<void> {\n  try {\n    await Promise.all([\n      detectMultipleAuthFailures(userId),\n      detectMultipleIPAccess(userId)\n    ]);\n  } catch (error) {\n    console.error('[SECURITY] Error en runSecurityDetection:', error);\n  }\n}\n"],"names":["detectMultipleAuthFailures","detectMultipleIPAccess","logAdminAction","logAuthFailure","logAuthSuccess","logDataAccess","logPermissionDenied","logSecurityEvent","runSecurityDetection","event","supabaseAdmin","console","warn","securityEvent","timestamp","Date","toISOString","resolved","error","from","insert","log","event_type","description","JSON","stringify","userId","context","request","user_id","event_category","severity","userRole","metadata","role","permissions","emailVerified","ip_address","ipAddress","user_agent","userAgent","reason","headers","get","req","operation","requiredPermissions","userPermissions","resource","action","target","timeWindowMinutes","maxAttempts","timeThreshold","now","data","select","eq","gte","failureCount","length","threshold","timeWindowHours","maxIPs","not","uniqueIPs","Set","map","ipCount","size","ips","Array","Promise","all"],"mappings":"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"}