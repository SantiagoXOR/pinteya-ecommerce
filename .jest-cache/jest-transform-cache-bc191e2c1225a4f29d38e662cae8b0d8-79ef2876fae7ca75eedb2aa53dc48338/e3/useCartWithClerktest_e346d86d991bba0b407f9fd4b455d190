fe0eb73834d463f6262f979e4d8f0d32
/**
 * Tests completos para useCartWithClerk
 * Cubre funcionalidades de migración, persistencia y autenticación
 */ "use strict";
// Mock para evitar problemas de dependencias
jest.mock('@/hooks/useAuth', ()=>({
        useAuth: jest.fn()
    }));
// Mock cart persistence functions
jest.mock('@/redux/middleware/cartPersistence', ()=>({
        loadCartFromStorage: jest.fn(()=>[]),
        clearCartFromStorage: jest.fn(),
        migrateTemporaryCart: jest.fn(()=>Promise.resolve(true)),
        loadUserCart: jest.fn(()=>Promise.resolve([])),
        saveUserCart: jest.fn(()=>Promise.resolve()),
        cartPersistenceMiddleware: jest.fn(()=>(next)=>(action)=>next(action))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactredux = require("react-redux");
const _toolkit = require("@reduxjs/toolkit");
const _useAuth = require("../../hooks/useAuth");
const _cartslice = /*#__PURE__*/ _interop_require_wildcard(require("../../redux/features/cart-slice"));
const _useCartWithClerk = require("../../hooks/useCartWithClerk");
const _cartPersistence = /*#__PURE__*/ _interop_require_wildcard(require("../../redux/middleware/cartPersistence"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(()=>null),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Mock console.error to avoid noise in tests
const originalConsoleError = console.error;
beforeAll(()=>{
    console.error = jest.fn();
});
afterAll(()=>{
    console.error = originalConsoleError;
});
// Mock user data
const mockUser = {
    id: 'user_123',
    name: 'Juan Pérez',
    email: 'juan@example.com'
};
// Mock product data
const mockProduct = {
    id: 1,
    name: 'Pintura Latex Interior',
    price: 5000,
    category: 'Pinturas'
};
describe('useCartWithClerk Hook', ()=>{
    let store;
    const mockUseAuth = _useAuth.useAuth;
    const mockCartPersistence = _cartPersistence;
    const renderHookWithStore = ()=>{
        store = (0, _toolkit.configureStore)({
            reducer: {
                cartReducer: _cartslice.default
            },
            middleware: (getDefaultMiddleware)=>getDefaultMiddleware()
        });
        const wrapper = ({ children })=>_react.default.createElement(_reactredux.Provider, {
                store
            }, children);
        return (0, _react1.renderHook)(()=>(0, _useCartWithClerk.useCartWithClerk)(), {
            wrapper
        });
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        localStorageMock.getItem.mockReturnValue(null);
        mockCartPersistence.loadCartFromStorage.mockReturnValue([]);
        mockCartPersistence.migrateTemporaryCart.mockResolvedValue(true);
        mockCartPersistence.loadUserCart.mockResolvedValue([]);
        mockCartPersistence.saveUserCart.mockResolvedValue();
    });
    describe('Unauthenticated User', ()=>{
        beforeEach(()=>{
            mockUseAuth.mockReturnValue({
                user: null,
                isLoaded: true,
                isSignedIn: false,
                signIn: jest.fn(),
                signOut: jest.fn(),
                session: null,
                status: 'unauthenticated'
            });
        });
        it('should handle unauthenticated user correctly', ()=>{
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.userId).toBeUndefined();
            expect(Array.isArray(result.current.cartItems)).toBe(true);
        });
    });
    describe('Authenticated User', ()=>{
        beforeEach(()=>{
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true,
                signIn: jest.fn(),
                signOut: jest.fn(),
                session: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('should identify authenticated user correctly', ()=>{
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.userId).toBe(mockUser.id);
            expect(Array.isArray(result.current.cartItems)).toBe(true);
        });
        it('should handle cart changes for authenticated user', ()=>{
            const { result } = renderHookWithStore();
            // Verificar estado inicial
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.cartItems).toHaveLength(0);
            // Agregar item al carrito usando Redux dispatch
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            // Verificar que el item se agregó correctamente
            expect(result.current.cartItems).toHaveLength(1);
            expect(result.current.cartItems[0]).toEqual(expect.objectContaining({
                id: mockProduct.id,
                price: mockProduct.price
            }));
        });
    });
    describe('Loading State', ()=>{
        beforeEach(()=>{
            mockUseAuth.mockReturnValue({
                user: null,
                isLoaded: false,
                isSignedIn: false,
                signIn: jest.fn(),
                signOut: jest.fn(),
                session: null,
                status: 'loading'
            });
        });
        it('should handle loading state correctly', ()=>{
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(false);
            expect(Array.isArray(result.current.cartItems)).toBe(true);
        });
        it('should not trigger effects during loading', ()=>{
            renderHookWithStore();
            expect(mockCartPersistence.loadCartFromStorage).not.toHaveBeenCalled();
            expect(mockCartPersistence.migrateTemporaryCart).not.toHaveBeenCalled();
        });
    });
    describe('Cart Migration', ()=>{
        beforeEach(()=>{
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true,
                signIn: jest.fn(),
                signOut: jest.fn(),
                session: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('should migrate temporary cart when user logs in', async ()=>{
            const temporaryItems = [
                mockProduct
            ];
            mockCartPersistence.loadCartFromStorage.mockReturnValue(temporaryItems);
            mockCartPersistence.loadUserCart.mockResolvedValue([]);
            const { result } = renderHookWithStore();
            await (0, _react1.waitFor)(()=>{
                expect(mockCartPersistence.migrateTemporaryCart).toHaveBeenCalledWith(temporaryItems, mockUser.id);
            });
            expect(mockCartPersistence.clearCartFromStorage).toHaveBeenCalled();
            expect(mockCartPersistence.loadUserCart).toHaveBeenCalledWith(mockUser.id);
        });
        it('should load user cart after migration', async ()=>{
            const userCartItems = [
                {
                    ...mockProduct,
                    id: 2
                }
            ];
            mockCartPersistence.loadUserCart.mockResolvedValue(userCartItems);
            const { result } = renderHookWithStore();
            await (0, _react1.waitFor)(()=>{
                expect(result.current.cartItems).toHaveLength(1);
                expect(result.current.cartItems[0].id).toBe(2);
            });
        });
        it('should handle migration errors gracefully', async ()=>{
            mockCartPersistence.migrateTemporaryCart.mockRejectedValue(new Error('Migration failed'));
            const { result } = renderHookWithStore();
            await (0, _react1.waitFor)(()=>{
                expect(console.error).toHaveBeenCalledWith('Error during cart migration:', expect.any(Error));
            });
            // Hook should still work despite migration error
            expect(result.current.isAuthenticated).toBe(true);
        });
    });
    describe('Cart Persistence', ()=>{
        beforeEach(()=>{
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true,
                signIn: jest.fn(),
                signOut: jest.fn(),
                session: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('should save cart when items change', async ()=>{
            const { result } = renderHookWithStore();
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            await (0, _react1.waitFor)(()=>{
                expect(mockCartPersistence.saveUserCart).toHaveBeenCalledWith(mockUser.id, expect.arrayContaining([
                    expect.objectContaining({
                        id: mockProduct.id
                    })
                ]));
            }, {
                timeout: 2000
            });
        });
        it('should handle save errors gracefully', async ()=>{
            mockCartPersistence.saveUserCart.mockRejectedValue(new Error('Save failed'));
            const { result } = renderHookWithStore();
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            await (0, _react1.waitFor)(()=>{
                expect(console.error).toHaveBeenCalledWith('Error saving user cart:', expect.any(Error));
            });
        });
    });
    describe('Sign Out Handling', ()=>{
        beforeEach(()=>{
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true,
                signIn: jest.fn(),
                signOut: jest.fn(),
                session: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('should clear cart and storage on sign out', ()=>{
            const { result } = renderHookWithStore();
            // Add item first
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            expect(result.current.cartItems).toHaveLength(1);
            // Sign out
            (0, _react1.act)(()=>{
                result.current.handleSignOut();
            });
            expect(result.current.cartItems).toHaveLength(0);
            expect(mockCartPersistence.clearCartFromStorage).toHaveBeenCalled();
        });
    });
    describe('Hook Functions', ()=>{
        beforeEach(()=>{
            mockUseAuth.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true,
                signIn: jest.fn(),
                signOut: jest.fn(),
                session: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('should provide migrateCart function', async ()=>{
            const { result } = renderHookWithStore();
            expect(typeof result.current.migrateCart).toBe('function');
            await (0, _react1.act)(async ()=>{
                await result.current.migrateCart('test-user-id');
            });
            expect(mockCartPersistence.loadCartFromStorage).toHaveBeenCalled();
            expect(mockCartPersistence.loadUserCart).toHaveBeenCalledWith('test-user-id');
        });
        it('should provide saveCart function', async ()=>{
            const { result } = renderHookWithStore();
            expect(typeof result.current.saveCart).toBe('function');
            // Add item to cart first
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            await (0, _react1.act)(async ()=>{
                await result.current.saveCart('test-user-id');
            });
            expect(mockCartPersistence.saveUserCart).toHaveBeenCalledWith('test-user-id', expect.arrayContaining([
                expect.objectContaining({
                    id: mockProduct.id
                })
            ]));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,