{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security-validations-enhanced.test.ts"],"sourcesContent":["/**\n * Tests para las validaciones de seguridad mejoradas\n * Verifica JWT validation, CSRF protection, Rate limiting\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  getAuth: jest.fn(),\n  auth: jest.fn()\n}));\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\nimport {\n  validateJWTIntegrity,\n  validateJWTPermissions\n} from '@/lib/auth/jwt-validation';\nimport {\n  validateRequestOrigin\n} from '@/lib/auth/csrf-protection';\nimport {\n  checkRateLimit,\n  RATE_LIMIT_CONFIGS\n} from '@/lib/auth/rate-limiting';\nimport { getAuth, auth } from '@clerk/nextjs/server';\n\ndescribe('Validaciones de Seguridad Mejoradas', () => {\n  let mockGetAuth: jest.MockedFunction<typeof getAuth>;\n  let mockAuth: jest.MockedFunction<typeof auth>;\n\n  beforeEach(() => {\n    mockGetAuth = getAuth as jest.MockedFunction<typeof getAuth>;\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\n    jest.clearAllMocks();\n  });\n\n  describe('Validación JWT', () => {\n    it('debe validar token JWT válido', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoiYWRtaW4ifX0.signature')\n      });\n\n      const result = await validateJWTIntegrity(mockRequest);\n\n      expect(result.valid).toBe(true);\n      expect(result.payload).toBeDefined();\n      expect(result.details?.subject).toBe('user_123');\n    });\n\n    it('debe rechazar token JWT inválido', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        getToken: jest.fn().mockResolvedValue('invalid_token')\n      });\n\n      const result = await validateJWTIntegrity(mockRequest);\n\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('Formato de token JWT inválido');\n      expect(result.code).toBe('INVALID_TOKEN_FORMAT');\n    });\n\n    it('debe validar permisos en JWT', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoiYWRtaW4iLCJwZXJtaXNzaW9ucyI6WyJhZG1pbl9hY2Nlc3MiXX19.signature')\n      });\n\n      const result = await validateJWTPermissions(\n        'admin',\n        ['admin_access'],\n        mockRequest\n      );\n\n      expect(result.valid).toBe(true);\n      expect(result.payload?.metadata?.role).toBe('admin');\n    });\n\n    it('debe rechazar permisos insuficientes en JWT', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoidXNlciJ9fQ.signature')\n      });\n\n      const result = await validateJWTPermissions(\n        'admin',\n        ['admin_access'],\n        mockRequest\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('Rol requerido: admin');\n      expect(result.code).toBe('INSUFFICIENT_ROLE');\n    });\n  });\n\n  describe('Protección CSRF', () => {\n    it('debe permitir requests GET sin validación estricta', async () => {\n      const mockRequest = {\n        method: 'GET',\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      const result = await validateRequestOrigin(mockRequest);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('debe validar origen para requests POST', async () => {\n      // Mock NODE_ENV para desarrollo para que sea menos estricto\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'development';\n\n      const mockRequest = {\n        method: 'POST',\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'origin') return 'http://localhost:3000';\n            if (header === 'referer') return 'http://localhost:3000/admin';\n            if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      const result = await validateRequestOrigin(mockRequest);\n\n      expect(result.valid).toBe(true);\n\n      // Restaurar NODE_ENV\n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it('debe rechazar origen no permitido', async () => {\n      const mockRequest = {\n        method: 'POST',\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'origin') return 'http://malicious-site.com';\n            if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      const result = await validateRequestOrigin(mockRequest);\n\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('Origen no permitido');\n      expect(result.code).toBe('INVALID_ORIGIN');\n    });\n\n    it('debe detectar User-Agent sospechoso', async () => {\n      // Forzar modo producción para validación estricta\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n\n      const mockRequest = {\n        method: 'POST',\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'origin') return process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n            if (header === 'referer') return process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n            if (header === 'user-agent') return 'curl/7.68.0';\n            return null;\n          })\n        }\n      } as any;\n\n      const result = await validateRequestOrigin(mockRequest);\n\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('User-Agent sospechoso');\n      expect(result.code).toBe('SUSPICIOUS_USER_AGENT');\n\n      // Restaurar NODE_ENV\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('debe permitir requests dentro del límite', async () => {\n      const mockRequest = {\n        method: 'GET',\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'x-forwarded-for') return '192.168.1.1';\n            if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      const result = await checkRateLimit(\n        mockRequest,\n        RATE_LIMIT_CONFIGS.general,\n        'test'\n      );\n\n      expect(result.allowed).toBe(true);\n      expect(result.remaining).toBeLessThan(result.limit);\n    });\n\n    it('debe rechazar requests que excedan el límite', async () => {\n      const mockRequest = {\n        method: 'POST',\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'x-forwarded-for') return '192.168.1.2';\n            if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      // Simular múltiples requests\n      const config = {\n        windowMs: 60000,\n        maxRequests: 2,\n        message: 'Rate limit exceeded'\n      };\n\n      // Primera request - debe pasar\n      const result1 = await checkRateLimit(mockRequest, config, 'test_limit');\n      expect(result1.allowed).toBe(true);\n\n      // Segunda request - debe pasar\n      const result2 = await checkRateLimit(mockRequest, config, 'test_limit');\n      expect(result2.allowed).toBe(true);\n\n      // Tercera request - debe fallar\n      const result3 = await checkRateLimit(mockRequest, config, 'test_limit');\n      expect(result3.allowed).toBe(false);\n      expect(result3.error).toBe('Rate limit exceeded');\n      expect(result3.code).toBe('RATE_LIMIT_EXCEEDED');\n    });\n\n    it('debe proporcionar información de rate limiting', async () => {\n      const mockRequest = {\n        method: 'GET',\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'x-forwarded-for') return '192.168.1.3';\n            if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      const result = await checkRateLimit(\n        mockRequest,\n        RATE_LIMIT_CONFIGS.admin,\n        'test_info'\n      );\n\n      expect(result).toHaveProperty('limit');\n      expect(result).toHaveProperty('remaining');\n      expect(result).toHaveProperty('resetTime');\n      expect(typeof result.limit).toBe('number');\n      expect(typeof result.remaining).toBe('number');\n      expect(typeof result.resetTime).toBe('number');\n    });\n  });\n\n  describe('Integración de validaciones', () => {\n    it('debe combinar todas las validaciones correctamente', async () => {\n      // Configurar entorno de desarrollo para tests\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'development';\n\n      // Test que verifica que todas las validaciones pueden trabajar juntas\n      const mockRequest = {\n        method: 'GET', // Usar GET para evitar validaciones CSRF estrictas\n        query: {},\n        headers: {\n          get: jest.fn().mockImplementation((header) => {\n            if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';\n            if (header === 'x-forwarded-for') return '192.168.1.4';\n            return null;\n          })\n        }\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoiYWRtaW4ifX0.signature')\n      });\n\n      // Validar JWT\n      const jwtResult = await validateJWTIntegrity(mockRequest);\n      expect(jwtResult.valid).toBe(true);\n\n      // Validar CSRF (debe pasar para GET)\n      const csrfResult = await validateRequestOrigin(mockRequest);\n      expect(csrfResult.valid).toBe(true);\n\n      // Validar Rate Limiting\n      const rateLimitResult = await checkRateLimit(\n        mockRequest,\n        RATE_LIMIT_CONFIGS.general, // Usar general en lugar de admin\n        'integration_test_unique'\n      );\n      expect(rateLimitResult.allowed).toBe(true);\n\n      // Todas las validaciones deben pasar\n      expect(jwtResult.valid && csrfResult.valid && rateLimitResult.allowed).toBe(true);\n\n      // Restaurar NODE_ENV\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n});\n"],"names":["jest","mock","getAuth","fn","auth","describe","mockGetAuth","mockAuth","beforeEach","clearAllMocks","it","mockRequest","query","headers","mockReturnValue","userId","sessionId","getToken","mockResolvedValue","result","validateJWTIntegrity","expect","valid","toBe","payload","toBeDefined","details","subject","error","toContain","code","validateJWTPermissions","metadata","role","method","get","mockImplementation","header","validateRequestOrigin","originalEnv","process","env","NODE_ENV","NEXT_PUBLIC_APP_URL","checkRateLimit","RATE_LIMIT_CONFIGS","general","allowed","remaining","toBeLessThan","limit","config","windowMs","maxRequests","message","result1","result2","result3","admin","toHaveProperty","resetTime","jwtResult","csrfResult","rateLimitResult"],"mappings":"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"}