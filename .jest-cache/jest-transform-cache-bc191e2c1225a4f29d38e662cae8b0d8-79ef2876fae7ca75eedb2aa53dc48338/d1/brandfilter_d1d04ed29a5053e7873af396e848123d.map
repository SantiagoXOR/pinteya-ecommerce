{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ui\\brand-filter.tsx"],"sourcesContent":["// ===================================\r\n// COMPONENTE: Filtro de Marcas\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Search, X } from 'lucide-react';\r\nimport { getBrandColor, formatBrandName } from '@/lib/api/brands';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface Brand {\r\n  name: string;\r\n  products_count: number;\r\n}\r\n\r\nexport interface BrandFilterProps {\r\n  brands: Brand[];\r\n  selectedBrands: string[];\r\n  onBrandChange: (brands: string[]) => void;\r\n  isLoading?: boolean;\r\n  showSearch?: boolean;\r\n  showProductCount?: boolean;\r\n  maxHeight?: string;\r\n  className?: string;\r\n}\r\n\r\n// ===================================\r\n// COMPONENTE PRINCIPAL\r\n// ===================================\r\n\r\nexport function BrandFilter({\r\n  brands,\r\n  selectedBrands,\r\n  onBrandChange,\r\n  isLoading = false,\r\n  showSearch = true,\r\n  showProductCount = true,\r\n  maxHeight = \"300px\",\r\n  className = \"\",\r\n}: BrandFilterProps) {\r\n  const [searchTerm, setSearchTerm] = React.useState('');\r\n\r\n  // Filtrar marcas por término de búsqueda\r\n  const filteredBrands = React.useMemo(() => {\r\n    if (!searchTerm) return brands;\r\n    return brands.filter(brand =>\r\n      brand.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  }, [brands, searchTerm]);\r\n\r\n  // Manejar selección de marca\r\n  const handleBrandToggle = (brandName: string) => {\r\n    const newSelectedBrands = selectedBrands.includes(brandName)\r\n      ? selectedBrands.filter(b => b !== brandName)\r\n      : [...selectedBrands, brandName];\r\n    \r\n    onBrandChange(newSelectedBrands);\r\n  };\r\n\r\n  // Limpiar filtros\r\n  const handleClearAll = () => {\r\n    onBrandChange([]);\r\n  };\r\n\r\n  // Seleccionar todas las marcas visibles\r\n  const handleSelectAll = () => {\r\n    const allVisibleBrands = filteredBrands.map(b => b.name);\r\n    onBrandChange(allVisibleBrands);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-sm\">Marcas</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"flex items-center space-x-2\">\r\n                <div className=\"w-4 h-4 bg-gray-200 rounded animate-pulse\" />\r\n                <div className=\"h-4 bg-gray-200 rounded flex-1 animate-pulse\" />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader className=\"pb-3\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <CardTitle className=\"text-sm\">Marcas</CardTitle>\r\n          {selectedBrands.length > 0 && (\r\n            <Badge variant=\"secondary\" className=\"text-xs\">\r\n              {selectedBrands.length}\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-4\">\r\n        {/* Búsqueda */}\r\n        {showSearch && (\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder=\"Buscar marcas...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"pl-8 h-9\"\r\n            />\r\n            {searchTerm && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"absolute right-1 top-1 h-7 w-7 p-0\"\r\n                onClick={() => setSearchTerm('')}\r\n              >\r\n                <X className=\"h-3 w-3\" />\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Controles */}\r\n        {filteredBrands.length > 1 && (\r\n          <div className=\"flex gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={handleSelectAll}\r\n              className=\"text-xs h-7 px-2\"\r\n            >\r\n              Todas\r\n            </Button>\r\n            {selectedBrands.length > 0 && (\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={handleClearAll}\r\n                className=\"text-xs h-7 px-2\"\r\n              >\r\n                Limpiar\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <Separator />\r\n\r\n        {/* Lista de marcas */}\r\n        <div style={{ maxHeight, overflowY: 'auto' }} className=\"pr-4\">\r\n          <div className=\"space-y-3\">\r\n            {filteredBrands.length === 0 ? (\r\n              <p className=\"text-sm text-muted-foreground text-center py-4\">\r\n                No se encontraron marcas\r\n              </p>\r\n            ) : (\r\n              filteredBrands.map((brand) => (\r\n                <div key={brand.name} className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id={`brand-${brand.name}`}\r\n                    checked={selectedBrands.includes(brand.name)}\r\n                    onCheckedChange={() => handleBrandToggle(brand.name)}\r\n                  />\r\n                  <label\r\n                    htmlFor={`brand-${brand.name}`}\r\n                    className=\"flex-1 cursor-pointer flex items-center justify-between text-sm font-medium\"\r\n                  >\r\n                    <span className=\"text-sm font-medium\">\r\n                      {formatBrandName(brand.name)}\r\n                    </span>\r\n                    {showProductCount && (\r\n                      <Badge\r\n                        variant=\"outline\"\r\n                        className=\"text-xs ml-2\"\r\n                        style={{\r\n                          borderColor: getBrandColor(brand.name),\r\n                          color: getBrandColor(brand.name)\r\n                        }}\r\n                      >\r\n                        {brand.products_count}\r\n                      </Badge>\r\n                    )}\r\n                  </label>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Marcas seleccionadas */}\r\n        {selectedBrands.length > 0 && (\r\n          <>\r\n            <Separator />\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-xs font-medium text-muted-foreground\">\r\n                Filtros activos:\r\n              </label>\r\n              <div className=\"flex flex-wrap gap-1\">\r\n                {selectedBrands.map((brandName) => (\r\n                  <Badge\r\n                    key={brandName}\r\n                    variant=\"secondary\"\r\n                    className=\"text-xs cursor-pointer hover:bg-destructive hover:text-destructive-foreground\"\r\n                    onClick={() => handleBrandToggle(brandName)}\r\n                  >\r\n                    {formatBrandName(brandName)}\r\n                    <X className=\"ml-1 h-3 w-3\" />\r\n                  </Badge>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// ===================================\r\n// COMPONENTE COMPACTO\r\n// ===================================\r\n\r\nexport interface BrandFilterCompactProps {\r\n  brands: Brand[];\r\n  selectedBrands: string[];\r\n  onBrandChange: (brands: string[]) => void;\r\n  className?: string;\r\n}\r\n\r\nexport function BrandFilterCompact({\r\n  brands,\r\n  selectedBrands,\r\n  onBrandChange,\r\n  className = \"\",\r\n}: BrandFilterCompactProps) {\r\n  const handleBrandToggle = (brandName: string) => {\r\n    const newSelectedBrands = selectedBrands.includes(brandName)\r\n      ? selectedBrands.filter(b => b !== brandName)\r\n      : [...selectedBrands, brandName];\r\n    \r\n    onBrandChange(newSelectedBrands);\r\n  };\r\n\r\n  return (\r\n    <div className={`space-y-2 ${className}`}>\r\n      <label className=\"text-sm font-medium\">Marcas</label>\r\n      <div className=\"flex flex-wrap gap-2\">\r\n        {brands.map((brand) => (\r\n          <Badge\r\n            key={brand.name}\r\n            variant={selectedBrands.includes(brand.name) ? \"default\" : \"outline\"}\r\n            className=\"cursor-pointer hover:bg-primary hover:text-primary-foreground\"\r\n            onClick={() => handleBrandToggle(brand.name)}\r\n            style={selectedBrands.includes(brand.name) ? {\r\n              backgroundColor: getBrandColor(brand.name),\r\n              borderColor: getBrandColor(brand.name)\r\n            } : {\r\n              borderColor: getBrandColor(brand.name),\r\n              color: getBrandColor(brand.name)\r\n            }}\r\n          >\r\n            {formatBrandName(brand.name)}\r\n            {selectedBrands.includes(brand.name) && (\r\n              <X className=\"ml-1 h-3 w-3\" />\r\n            )}\r\n          </Badge>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["BrandFilter","BrandFilterCompact","brands","selectedBrands","onBrandChange","isLoading","showSearch","showProductCount","maxHeight","className","searchTerm","setSearchTerm","React","useState","filteredBrands","useMemo","filter","brand","name","toLowerCase","includes","handleBrandToggle","brandName","newSelectedBrands","b","handleClearAll","handleSelectAll","allVisibleBrands","map","Card","CardHeader","CardTitle","CardContent","div","Array","_","i","length","Badge","variant","Search","Input","placeholder","value","onChange","e","target","Button","size","onClick","X","Separator","style","overflowY","p","Checkbox","id","checked","onCheckedChange","label","htmlFor","span","formatBrandName","borderColor","getBrandColor","color","products_count","backgroundColor"],"mappings":"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"}