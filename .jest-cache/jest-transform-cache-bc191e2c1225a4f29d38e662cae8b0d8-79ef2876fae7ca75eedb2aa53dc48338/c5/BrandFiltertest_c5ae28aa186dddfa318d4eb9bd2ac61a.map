{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\BrandFilter.test.tsx"],"sourcesContent":["// ===================================\r\n// TESTS: Componente BrandFilter\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport { BrandFilter, BrandFilterCompact } from '@/components/ui/brand-filter';\r\n\r\n// Mock de funciones de API\r\njest.mock('@/lib/api/brands', () => ({\r\n  formatBrandName: jest.fn((name) => name),\r\n  getBrandColor: jest.fn(() => '#FF6B35'),\r\n  getBrandLogo: jest.fn(() => '/images/brands/default.png'),\r\n}));\r\n\r\nconst mockBrands = [\r\n  { name: 'El Galgo', products_count: 5 },\r\n  { name: 'Plavicon', products_count: 8 },\r\n  { name: 'Akapol', products_count: 3 },\r\n  { name: 'Sinteplast', products_count: 2 },\r\n];\r\n\r\ndescribe('BrandFilter Component', () => {\r\n  const defaultProps = {\r\n    brands: mockBrands,\r\n    selectedBrands: [],\r\n    onBrandChange: jest.fn(),\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Renderizado básico', () => {\r\n    it('debería renderizar correctamente', () => {\r\n      render(<BrandFilter {...defaultProps} />);\r\n      \r\n      expect(screen.getByText('Marcas')).toBeInTheDocument();\r\n      expect(screen.getByPlaceholderText('Buscar marcas...')).toBeInTheDocument();\r\n      expect(screen.getByText('Todas')).toBeInTheDocument();\r\n      \r\n      // Verificar que todas las marcas se muestran\r\n      mockBrands.forEach(brand => {\r\n        expect(screen.getByText(brand.name)).toBeInTheDocument();\r\n        expect(screen.getByText(brand.products_count.toString())).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('debería mostrar estado de carga', () => {\r\n      render(<BrandFilter {...defaultProps} isLoading={true} />);\r\n      \r\n      expect(screen.getByText('Marcas')).toBeInTheDocument();\r\n      \r\n      // Verificar elementos de carga (skeletons)\r\n      const skeletons = screen.getAllByRole('generic');\r\n      expect(skeletons.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('debería ocultar búsqueda si showSearch es false', () => {\r\n      render(<BrandFilter {...defaultProps} showSearch={false} />);\r\n      \r\n      expect(screen.queryByPlaceholderText('Buscar marcas...')).not.toBeInTheDocument();\r\n    });\r\n\r\n    it('debería ocultar conteo de productos si showProductCount es false', () => {\r\n      render(<BrandFilter {...defaultProps} showProductCount={false} />);\r\n      \r\n      // Los números de conteo no deberían estar visibles\r\n      mockBrands.forEach(brand => {\r\n        expect(screen.getByText(brand.name)).toBeInTheDocument();\r\n        expect(screen.queryByText(brand.products_count.toString())).not.toBeInTheDocument();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Funcionalidad de selección', () => {\r\n    it('debería llamar onBrandChange al seleccionar una marca', async () => {\r\n      const user = userEvent.setup();\r\n      const onBrandChange = jest.fn();\r\n      \r\n      render(<BrandFilter {...defaultProps} onBrandChange={onBrandChange} />);\r\n      \r\n      const checkbox = screen.getByLabelText(/El Galgo/);\r\n      await user.click(checkbox);\r\n      \r\n      expect(onBrandChange).toHaveBeenCalledWith(['El Galgo']);\r\n    });\r\n\r\n    it('debería mostrar marcas seleccionadas', () => {\r\n      render(\r\n        <BrandFilter\r\n          {...defaultProps}\r\n          selectedBrands={['El Galgo', 'Plavicon']}\r\n        />\r\n      );\r\n\r\n      // Verificar que se muestran las marcas seleccionadas\r\n      expect(screen.getByText('Filtros activos:')).toBeInTheDocument();\r\n\r\n      // Buscar marcas por sus checkboxes marcados\r\n      const elGalgoCheckbox = screen.getByRole('checkbox', { name: /el galgo/i });\r\n      const plaviconCheckbox = screen.getByRole('checkbox', { name: /plavicon/i });\r\n\r\n      expect(elGalgoCheckbox).toBeChecked();\r\n      expect(plaviconCheckbox).toBeChecked();\r\n    });\r\n\r\n    it('debería permitir deseleccionar marcas desde los badges', async () => {\r\n      const user = userEvent.setup();\r\n      const onBrandChange = jest.fn();\r\n\r\n      render(\r\n        <BrandFilter\r\n          {...defaultProps}\r\n          selectedBrands={['El Galgo']}\r\n          onBrandChange={onBrandChange}\r\n        />\r\n      );\r\n\r\n      // Buscar el checkbox de El Galgo y desmarcarlo\r\n      const checkbox = screen.getByRole('checkbox', { name: /el galgo/i });\r\n      await user.click(checkbox);\r\n\r\n      expect(onBrandChange).toHaveBeenCalledWith([]);\r\n    });\r\n\r\n    it('debería seleccionar todas las marcas visibles', async () => {\r\n      const user = userEvent.setup();\r\n      const onBrandChange = jest.fn();\r\n      \r\n      render(<BrandFilter {...defaultProps} onBrandChange={onBrandChange} />);\r\n      \r\n      const selectAllButton = screen.getByText('Todas');\r\n      await user.click(selectAllButton);\r\n      \r\n      expect(onBrandChange).toHaveBeenCalledWith([\r\n        'El Galgo', 'Plavicon', 'Akapol', 'Sinteplast'\r\n      ]);\r\n    });\r\n\r\n    it('debería limpiar todas las marcas seleccionadas', async () => {\r\n      const user = userEvent.setup();\r\n      const onBrandChange = jest.fn();\r\n      \r\n      render(\r\n        <BrandFilter \r\n          {...defaultProps} \r\n          selectedBrands={['El Galgo', 'Plavicon']} \r\n          onBrandChange={onBrandChange}\r\n        />\r\n      );\r\n      \r\n      const clearButton = screen.getByText('Limpiar');\r\n      await user.click(clearButton);\r\n      \r\n      expect(onBrandChange).toHaveBeenCalledWith([]);\r\n    });\r\n  });\r\n\r\n  describe('Funcionalidad de búsqueda', () => {\r\n    it('debería filtrar marcas por término de búsqueda', async () => {\r\n      const user = userEvent.setup();\r\n      \r\n      render(<BrandFilter {...defaultProps} />);\r\n      \r\n      const searchInput = screen.getByPlaceholderText('Buscar marcas...');\r\n      await user.type(searchInput, 'galgo');\r\n      \r\n      // Debería mostrar solo El Galgo\r\n      expect(screen.getByText('El Galgo')).toBeInTheDocument();\r\n      expect(screen.queryByText('Plavicon')).not.toBeInTheDocument();\r\n      expect(screen.queryByText('Akapol')).not.toBeInTheDocument();\r\n    });\r\n\r\n    it('debería mostrar mensaje cuando no hay resultados', async () => {\r\n      const user = userEvent.setup();\r\n      \r\n      render(<BrandFilter {...defaultProps} />);\r\n      \r\n      const searchInput = screen.getByPlaceholderText('Buscar marcas...');\r\n      await user.type(searchInput, 'marca inexistente');\r\n      \r\n      expect(screen.getByText('No se encontraron marcas')).toBeInTheDocument();\r\n    });\r\n\r\n    it('debería limpiar búsqueda al hacer click en X', async () => {\r\n      const user = userEvent.setup();\r\n\r\n      render(<BrandFilter {...defaultProps} />);\r\n\r\n      const searchInput = screen.getByPlaceholderText('Buscar marcas...');\r\n      await user.type(searchInput, 'galgo');\r\n\r\n      // Verificar que se filtró\r\n      expect(screen.queryByText('Plavicon')).not.toBeInTheDocument();\r\n\r\n      // Limpiar el input directamente (simular borrar el texto)\r\n      await user.clear(searchInput);\r\n\r\n      // Verificar que se muestran todas las marcas nuevamente\r\n      expect(screen.getByText('Plavicon')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Casos edge', () => {\r\n    it('debería manejar lista vacía de marcas', () => {\r\n      render(<BrandFilter {...defaultProps} brands={[]} />);\r\n      \r\n      expect(screen.getByText('No se encontraron marcas')).toBeInTheDocument();\r\n    });\r\n\r\n    it('debería aplicar className personalizada', () => {\r\n      const { container } = render(\r\n        <BrandFilter {...defaultProps} className=\"custom-class\" />\r\n      );\r\n      \r\n      expect(container.firstChild).toHaveClass('custom-class');\r\n    });\r\n\r\n    it('debería respetar maxHeight personalizada', () => {\r\n      render(<BrandFilter {...defaultProps} maxHeight=\"200px\" />);\r\n      \r\n      // Verificar que el ScrollArea tiene la altura correcta\r\n      const scrollArea = screen.getByRole('region');\r\n      expect(scrollArea).toHaveStyle({ maxHeight: '200px' });\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('BrandFilterCompact Component', () => {\r\n  const defaultProps = {\r\n    brands: mockBrands,\r\n    selectedBrands: [],\r\n    onBrandChange: jest.fn(),\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('debería renderizar correctamente', () => {\r\n    render(<BrandFilterCompact {...defaultProps} />);\r\n    \r\n    expect(screen.getByText('Marcas')).toBeInTheDocument();\r\n    \r\n    // Verificar que todas las marcas se muestran como badges\r\n    mockBrands.forEach(brand => {\r\n      expect(screen.getByText(brand.name)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('debería mostrar marcas seleccionadas con estilo diferente', () => {\r\n    render(\r\n      <BrandFilterCompact \r\n        {...defaultProps} \r\n        selectedBrands={['El Galgo']} \r\n      />\r\n    );\r\n    \r\n    const selectedBadge = screen.getByText('El Galgo').closest('div');\r\n    const unselectedBadge = screen.getByText('Plavicon').closest('div');\r\n    \r\n    // Los badges seleccionados y no seleccionados deberían tener estilos diferentes\r\n    expect(selectedBadge).toHaveClass('cursor-pointer');\r\n    expect(unselectedBadge).toHaveClass('cursor-pointer');\r\n  });\r\n\r\n  it('debería alternar selección al hacer click', async () => {\r\n    const user = userEvent.setup();\r\n    const onBrandChange = jest.fn();\r\n    \r\n    render(<BrandFilterCompact {...defaultProps} onBrandChange={onBrandChange} />);\r\n    \r\n    const badge = screen.getByText('El Galgo');\r\n    await user.click(badge);\r\n    \r\n    expect(onBrandChange).toHaveBeenCalledWith(['El Galgo']);\r\n  });\r\n\r\n  it('debería aplicar className personalizada', () => {\r\n    const { container } = render(\r\n      <BrandFilterCompact {...defaultProps} className=\"custom-compact\" />\r\n    );\r\n    \r\n    expect(container.firstChild).toHaveClass('custom-compact');\r\n  });\r\n});\r\n"],"names":["jest","mock","formatBrandName","fn","name","getBrandColor","getBrandLogo","mockBrands","products_count","describe","defaultProps","brands","selectedBrands","onBrandChange","beforeEach","clearAllMocks","it","render","BrandFilter","expect","screen","getByText","toBeInTheDocument","getByPlaceholderText","forEach","brand","toString","isLoading","skeletons","getAllByRole","length","toBeGreaterThan","showSearch","queryByPlaceholderText","not","showProductCount","queryByText","user","userEvent","setup","checkbox","getByLabelText","click","toHaveBeenCalledWith","elGalgoCheckbox","getByRole","plaviconCheckbox","toBeChecked","selectAllButton","clearButton","searchInput","type","clear","container","className","firstChild","toHaveClass","maxHeight","scrollArea","toHaveStyle","BrandFilterCompact","selectedBadge","closest","unselectedBadge","badge"],"mappings":"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"}