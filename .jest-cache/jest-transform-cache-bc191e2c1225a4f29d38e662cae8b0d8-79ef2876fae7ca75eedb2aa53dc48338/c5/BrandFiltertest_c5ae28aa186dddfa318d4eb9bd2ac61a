ef1a09819e9d5c72670a501110c8d2f8
// ===================================
// TESTS: Componente BrandFilter
// ===================================
"use strict";
// Mock de funciones de API
jest.mock('@/lib/api/brands', ()=>({
        formatBrandName: jest.fn((name)=>name),
        getBrandColor: jest.fn(()=>'#FF6B35'),
        getBrandLogo: jest.fn(()=>'/images/brands/default.png')
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _brandfilter = require("../../components/ui/brand-filter");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockBrands = [
    {
        name: 'El Galgo',
        products_count: 5
    },
    {
        name: 'Plavicon',
        products_count: 8
    },
    {
        name: 'Akapol',
        products_count: 3
    },
    {
        name: 'Sinteplast',
        products_count: 2
    }
];
describe('BrandFilter Component', ()=>{
    const defaultProps = {
        brands: mockBrands,
        selectedBrands: [],
        onBrandChange: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Renderizado básico', ()=>{
        it('debería renderizar correctamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText('Marcas')).toBeInTheDocument();
            expect(_react1.screen.getByPlaceholderText('Buscar marcas...')).toBeInTheDocument();
            expect(_react1.screen.getByText('Todas')).toBeInTheDocument();
            // Verificar que todas las marcas se muestran
            mockBrands.forEach((brand)=>{
                expect(_react1.screen.getByText(brand.name)).toBeInTheDocument();
                expect(_react1.screen.getByText(brand.products_count.toString())).toBeInTheDocument();
            });
        });
        it('debería mostrar estado de carga', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                isLoading: true
            }));
            expect(_react1.screen.getByText('Marcas')).toBeInTheDocument();
            // Verificar elementos de carga (skeletons)
            const skeletons = _react1.screen.getAllByRole('generic');
            expect(skeletons.length).toBeGreaterThan(0);
        });
        it('debería ocultar búsqueda si showSearch es false', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                showSearch: false
            }));
            expect(_react1.screen.queryByPlaceholderText('Buscar marcas...')).not.toBeInTheDocument();
        });
        it('debería ocultar conteo de productos si showProductCount es false', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                showProductCount: false
            }));
            // Los números de conteo no deberían estar visibles
            mockBrands.forEach((brand)=>{
                expect(_react1.screen.getByText(brand.name)).toBeInTheDocument();
                expect(_react1.screen.queryByText(brand.products_count.toString())).not.toBeInTheDocument();
            });
        });
    });
    describe('Funcionalidad de selección', ()=>{
        it('debería llamar onBrandChange al seleccionar una marca', async ()=>{
            const user = _userevent.default.setup();
            const onBrandChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                onBrandChange: onBrandChange
            }));
            const checkbox = _react1.screen.getByLabelText(/El Galgo/);
            await user.click(checkbox);
            expect(onBrandChange).toHaveBeenCalledWith([
                'El Galgo'
            ]);
        });
        it('debería mostrar marcas seleccionadas', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                selectedBrands: [
                    'El Galgo',
                    'Plavicon'
                ]
            }));
            // Verificar que se muestran las marcas seleccionadas
            expect(_react1.screen.getByText('Filtros activos:')).toBeInTheDocument();
            // Buscar marcas por sus checkboxes marcados
            const elGalgoCheckbox = _react1.screen.getByRole('checkbox', {
                name: /el galgo/i
            });
            const plaviconCheckbox = _react1.screen.getByRole('checkbox', {
                name: /plavicon/i
            });
            expect(elGalgoCheckbox).toBeChecked();
            expect(plaviconCheckbox).toBeChecked();
        });
        it('debería permitir deseleccionar marcas desde los badges', async ()=>{
            const user = _userevent.default.setup();
            const onBrandChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                selectedBrands: [
                    'El Galgo'
                ],
                onBrandChange: onBrandChange
            }));
            // Buscar el checkbox de El Galgo y desmarcarlo
            const checkbox = _react1.screen.getByRole('checkbox', {
                name: /el galgo/i
            });
            await user.click(checkbox);
            expect(onBrandChange).toHaveBeenCalledWith([]);
        });
        it('debería seleccionar todas las marcas visibles', async ()=>{
            const user = _userevent.default.setup();
            const onBrandChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                onBrandChange: onBrandChange
            }));
            const selectAllButton = _react1.screen.getByText('Todas');
            await user.click(selectAllButton);
            expect(onBrandChange).toHaveBeenCalledWith([
                'El Galgo',
                'Plavicon',
                'Akapol',
                'Sinteplast'
            ]);
        });
        it('debería limpiar todas las marcas seleccionadas', async ()=>{
            const user = _userevent.default.setup();
            const onBrandChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                selectedBrands: [
                    'El Galgo',
                    'Plavicon'
                ],
                onBrandChange: onBrandChange
            }));
            const clearButton = _react1.screen.getByText('Limpiar');
            await user.click(clearButton);
            expect(onBrandChange).toHaveBeenCalledWith([]);
        });
    });
    describe('Funcionalidad de búsqueda', ()=>{
        it('debería filtrar marcas por término de búsqueda', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps
            }));
            const searchInput = _react1.screen.getByPlaceholderText('Buscar marcas...');
            await user.type(searchInput, 'galgo');
            // Debería mostrar solo El Galgo
            expect(_react1.screen.getByText('El Galgo')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Plavicon')).not.toBeInTheDocument();
            expect(_react1.screen.queryByText('Akapol')).not.toBeInTheDocument();
        });
        it('debería mostrar mensaje cuando no hay resultados', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps
            }));
            const searchInput = _react1.screen.getByPlaceholderText('Buscar marcas...');
            await user.type(searchInput, 'marca inexistente');
            expect(_react1.screen.getByText('No se encontraron marcas')).toBeInTheDocument();
        });
        it('debería limpiar búsqueda al hacer click en X', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps
            }));
            const searchInput = _react1.screen.getByPlaceholderText('Buscar marcas...');
            await user.type(searchInput, 'galgo');
            // Verificar que se filtró
            expect(_react1.screen.queryByText('Plavicon')).not.toBeInTheDocument();
            // Limpiar el input directamente (simular borrar el texto)
            await user.clear(searchInput);
            // Verificar que se muestran todas las marcas nuevamente
            expect(_react1.screen.getByText('Plavicon')).toBeInTheDocument();
        });
    });
    describe('Casos edge', ()=>{
        it('debería manejar lista vacía de marcas', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                brands: []
            }));
            expect(_react1.screen.getByText('No se encontraron marcas')).toBeInTheDocument();
        });
        it('debería aplicar className personalizada', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                className: "custom-class"
            }));
            expect(container.firstChild).toHaveClass('custom-class');
        });
        it('debería respetar maxHeight personalizada', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilter, {
                ...defaultProps,
                maxHeight: "200px"
            }));
            // Verificar que el ScrollArea tiene la altura correcta
            const scrollArea = _react1.screen.getByRole('region');
            expect(scrollArea).toHaveStyle({
                maxHeight: '200px'
            });
        });
    });
});
describe('BrandFilterCompact Component', ()=>{
    const defaultProps = {
        brands: mockBrands,
        selectedBrands: [],
        onBrandChange: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('debería renderizar correctamente', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilterCompact, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText('Marcas')).toBeInTheDocument();
        // Verificar que todas las marcas se muestran como badges
        mockBrands.forEach((brand)=>{
            expect(_react1.screen.getByText(brand.name)).toBeInTheDocument();
        });
    });
    it('debería mostrar marcas seleccionadas con estilo diferente', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilterCompact, {
            ...defaultProps,
            selectedBrands: [
                'El Galgo'
            ]
        }));
        const selectedBadge = _react1.screen.getByText('El Galgo').closest('div');
        const unselectedBadge = _react1.screen.getByText('Plavicon').closest('div');
        // Los badges seleccionados y no seleccionados deberían tener estilos diferentes
        expect(selectedBadge).toHaveClass('cursor-pointer');
        expect(unselectedBadge).toHaveClass('cursor-pointer');
    });
    it('debería alternar selección al hacer click', async ()=>{
        const user = _userevent.default.setup();
        const onBrandChange = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilterCompact, {
            ...defaultProps,
            onBrandChange: onBrandChange
        }));
        const badge = _react1.screen.getByText('El Galgo');
        await user.click(badge);
        expect(onBrandChange).toHaveBeenCalledWith([
            'El Galgo'
        ]);
    });
    it('debería aplicar className personalizada', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_brandfilter.BrandFilterCompact, {
            ...defaultProps,
            className: "custom-compact"
        }));
        expect(container.firstChild).toHaveClass('custom-compact');
    });
});

//# sourceMappingURL=data:application/json;base64,