{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\integration\\phase2-regression.test.ts"],"sourcesContent":["/**\n * Tests de Regresión Fase 2\n * Valida que las implementaciones de Fase 2 no rompieron funcionalidad existente\n */\n\n// Mock de todas las utilidades\njest.mock('@/lib/auth/enterprise-auth-utils');\njest.mock('@/lib/auth/enterprise-rls-utils');\njest.mock('@/lib/auth/enterprise-cache');\njest.mock('@/lib/auth/enterprise-user-management');\njest.mock('@/lib/auth/admin-auth');\njest.mock('@clerk/nextjs/server');\njest.mock('@/lib/supabase');\n\nimport {\n  getEnterpriseAuthContext,\n  requireAdminAuth,\n  requireCriticalAuth\n} from '@/lib/auth/enterprise-auth-utils';\nimport {\n  executeWithRLS,\n  validateRLSContext\n} from '@/lib/auth/enterprise-rls-utils';\nimport {\n  getCacheStats,\n  withCache\n} from '@/lib/auth/enterprise-cache';\nimport {\n  getEnterpriseUser,\n  searchEnterpriseUsers\n} from '@/lib/auth/enterprise-user-management';\nimport {\n  getAuthenticatedUser,\n  getAuthenticatedAdmin,\n  checkAdminAccess\n} from '@/lib/auth/admin-auth';\n\ndescribe('Regresión Fase 2 - Compatibilidad y Funcionalidad', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup mocks para funcionalidad legacy\n    (getAuthenticatedUser as jest.Mock).mockResolvedValue({\n      userId: 'user_123',\n      sessionId: 'sess_123',\n      isAdmin: true,\n      supabase: {}\n    });\n\n    (getAuthenticatedAdmin as jest.Mock).mockResolvedValue({\n      userId: 'user_123',\n      sessionId: 'sess_123',\n      isAdmin: true,\n      supabase: {}\n    });\n\n    (checkAdminAccess as jest.Mock).mockResolvedValue({\n      success: true,\n      isAdmin: true\n    });\n\n    // Setup mocks para funcionalidad enterprise\n    (getEnterpriseAuthContext as jest.Mock).mockResolvedValue({\n      success: true,\n      context: {\n        userId: 'user_123',\n        role: 'admin',\n        permissions: ['admin_access'],\n        sessionValid: true,\n        securityLevel: 'critical',\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      }\n    });\n\n    (requireAdminAuth as jest.Mock).mockResolvedValue({\n      success: true,\n      context: {\n        userId: 'user_123',\n        role: 'admin',\n        permissions: ['admin_access'],\n        sessionValid: true,\n        securityLevel: 'critical'\n      }\n    });\n\n    (executeWithRLS as jest.Mock).mockResolvedValue({\n      success: true,\n      data: { test: 'data' }\n    });\n\n    (getCacheStats as jest.Mock).mockReturnValue({\n      hits: 100,\n      misses: 10,\n      entries: 25,\n      hitRate: 90.91,\n      memoryUsage: 1024\n    });\n  });\n\n  describe('Compatibilidad con Funcionalidad Legacy', () => {\n    it('debe mantener compatibilidad con getAuthenticatedUser', async () => {\n      const result = await getAuthenticatedUser({} as any);\n\n      expect(result).toHaveProperty('userId');\n      expect(result).toHaveProperty('sessionId');\n      expect(result).toHaveProperty('isAdmin');\n      expect(result.userId).toBe('user_123');\n      expect(result.isAdmin).toBe(true);\n    });\n\n    it('debe mantener compatibilidad con getAuthenticatedAdmin', async () => {\n      const result = await getAuthenticatedAdmin({} as any);\n\n      expect(result).toHaveProperty('userId');\n      expect(result).toHaveProperty('sessionId');\n      expect(result).toHaveProperty('isAdmin');\n      expect(result.userId).toBe('user_123');\n      expect(result.isAdmin).toBe(true);\n    });\n\n    it('debe mantener compatibilidad con checkAdminAccess', async () => {\n      const result = await checkAdminAccess('user_123');\n\n      expect(result).toHaveProperty('success');\n      expect(result).toHaveProperty('isAdmin');\n      expect(result.success).toBe(true);\n      expect(result.isAdmin).toBe(true);\n    });\n  });\n\n  describe('Funcionalidad Enterprise Agregada', () => {\n    it('debe proporcionar funcionalidad enterprise sin romper legacy', async () => {\n      // Test enterprise auth\n      const enterpriseResult = await getEnterpriseAuthContext({} as any, {\n        securityLevel: 'critical'\n      });\n\n      expect(enterpriseResult.success).toBe(true);\n      expect(enterpriseResult.context?.userId).toBe('user_123');\n\n      // Test legacy auth (debe seguir funcionando)\n      const legacyResult = await getAuthenticatedUser({} as any);\n\n      expect(legacyResult.userId).toBe('user_123');\n\n      // Ambos métodos deben retornar el mismo usuario\n      expect(enterpriseResult.context?.userId).toBe(legacyResult.userId);\n    });\n\n    it('debe agregar RLS sin afectar consultas existentes', async () => {\n      const mockContext = {\n        userId: 'user_123',\n        role: 'admin' as const,\n        permissions: ['admin_access'],\n        sessionValid: true,\n        securityLevel: 'high' as const,\n        supabase: {} as any,\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      };\n\n      // Test RLS query\n      const rlsResult = await executeWithRLS(\n        mockContext,\n        async () => ({ data: 'test' }),\n        { enforceRLS: true }\n      );\n\n      expect(rlsResult.success).toBe(true);\n      expect(rlsResult.data).toEqual({ data: 'test' });\n\n      // Verificar que no afecta funcionalidad legacy\n      const legacyResult = await getAuthenticatedUser({} as any);\n      expect(legacyResult.userId).toBe('user_123');\n    });\n\n    it('debe agregar cache sin afectar performance legacy', async () => {\n      // Test cache stats\n      const cacheStats = getCacheStats();\n\n      expect(cacheStats).toHaveProperty('hits');\n      expect(cacheStats).toHaveProperty('misses');\n      expect(cacheStats).toHaveProperty('hitRate');\n\n      // Test cache operation\n      const cacheResult = await withCache(\n        'test_key',\n        async () => ({ cached: 'data' }),\n        60000\n      );\n\n      expect(cacheResult).toEqual({ cached: 'data' });\n\n      // Verificar que funcionalidad legacy sigue funcionando\n      const legacyResult = await getAuthenticatedUser({} as any);\n      expect(legacyResult.userId).toBe('user_123');\n    });\n  });\n\n  describe('Integridad de APIs Existentes', () => {\n    it('debe mantener estructura de respuesta de APIs legacy', async () => {\n      // Simular respuesta de API legacy\n      const legacyAPIResponse = {\n        success: true,\n        data: { user: 'data' },\n        message: 'Success'\n      };\n\n      // Simular respuesta de API enterprise\n      const enterpriseAPIResponse = {\n        success: true,\n        data: { user: 'data' },\n        message: 'Success',\n        enterprise: true,\n        timestamp: new Date().toISOString(),\n        context: {\n          userId: 'user_123',\n          role: 'admin'\n        }\n      };\n\n      // Verificar que enterprise mantiene compatibilidad con legacy\n      expect(enterpriseAPIResponse).toMatchObject(legacyAPIResponse);\n      expect(enterpriseAPIResponse.success).toBe(legacyAPIResponse.success);\n      expect(enterpriseAPIResponse.data).toEqual(legacyAPIResponse.data);\n    });\n\n    it('debe mantener códigos de error consistentes', () => {\n      const legacyErrorCodes = [\n        'NOT_AUTHENTICATED',\n        'INSUFFICIENT_PERMISSIONS',\n        'INTERNAL_ERROR'\n      ];\n\n      const enterpriseErrorCodes = [\n        'NOT_AUTHENTICATED',\n        'INSUFFICIENT_PERMISSIONS',\n        'INTERNAL_ERROR',\n        'JWT_VALIDATION_FAILED',\n        'CSRF_VALIDATION_FAILED',\n        'RATE_LIMIT_EXCEEDED',\n        'RLS_VALIDATION_FAILED'\n      ];\n\n      // Verificar que todos los códigos legacy están en enterprise\n      legacyErrorCodes.forEach(code => {\n        expect(enterpriseErrorCodes).toContain(code);\n      });\n    });\n  });\n\n  describe('Performance y Recursos', () => {\n    it('debe mantener o mejorar performance de autenticación', async () => {\n      const iterations = 10;\n      const legacyTimes: number[] = [];\n      const enterpriseTimes: number[] = [];\n\n      // Test legacy performance\n      for (let i = 0; i < iterations; i++) {\n        const startTime = Date.now();\n        await getAuthenticatedUser({} as any);\n        legacyTimes.push(Date.now() - startTime);\n      }\n\n      // Test enterprise performance\n      for (let i = 0; i < iterations; i++) {\n        const startTime = Date.now();\n        await requireAdminAuth({} as any, ['admin_access']);\n        enterpriseTimes.push(Date.now() - startTime);\n      }\n\n      const avgLegacyTime = legacyTimes.reduce((a, b) => a + b, 0) / legacyTimes.length;\n      const avgEnterpriseTime = enterpriseTimes.reduce((a, b) => a + b, 0) / enterpriseTimes.length;\n\n      // Enterprise no debe ser significativamente más lento que legacy\n      expect(avgEnterpriseTime).toBeLessThan(avgLegacyTime * 2); // Máximo 2x más lento\n    });\n\n    it('debe mantener uso de memoria razonable', () => {\n      const cacheStats = getCacheStats();\n\n      // Cache no debe usar más de 10MB\n      expect(cacheStats.memoryUsage).toBeLessThan(10485760);\n\n      // Debe tener un hit rate razonable\n      expect(cacheStats.hitRate).toBeGreaterThan(50);\n    });\n  });\n\n  describe('Gestión de Usuarios Enterprise', () => {\n    it('debe proporcionar funcionalidad de gestión de usuarios sin romper legacy', async () => {\n      // Mock enterprise user management\n      (getEnterpriseUser as jest.Mock).mockResolvedValue({\n        success: true,\n        user: {\n          id: 'profile_123',\n          clerkId: 'user_123',\n          email: 'admin@test.com',\n          role: 'admin',\n          permissions: ['admin_access'],\n          isActive: true\n        }\n      });\n\n      (searchEnterpriseUsers as jest.Mock).mockResolvedValue({\n        success: true,\n        users: [\n          {\n            id: 'profile_123',\n            clerkId: 'user_123',\n            email: 'admin@test.com',\n            role: 'admin',\n            permissions: ['admin_access'],\n            isActive: true\n          }\n        ],\n        total: 1\n      });\n\n      // Test enterprise user management\n      const userResult = await getEnterpriseUser('user_123');\n      expect(userResult.success).toBe(true);\n      expect(userResult.user?.clerkId).toBe('user_123');\n\n      const searchResult = await searchEnterpriseUsers({ limit: 10 });\n      expect(searchResult.success).toBe(true);\n      expect(searchResult.users).toHaveLength(1);\n\n      // Verificar que legacy auth sigue funcionando\n      const legacyResult = await getAuthenticatedUser({} as any);\n      expect(legacyResult.userId).toBe('user_123');\n    });\n  });\n\n  describe('Validación de Migración Completa', () => {\n    it('debe confirmar que todas las funcionalidades legacy siguen disponibles', async () => {\n      // Lista de funciones legacy que deben seguir funcionando\n      const legacyFunctions = [\n        getAuthenticatedUser,\n        getAuthenticatedAdmin,\n        checkAdminAccess\n      ];\n\n      // Verificar que todas las funciones legacy están disponibles\n      legacyFunctions.forEach(func => {\n        expect(func).toBeDefined();\n        expect(typeof func).toBe('function');\n      });\n\n      // Verificar que todas las funciones legacy funcionan\n      const results = await Promise.all([\n        getAuthenticatedUser({} as any),\n        getAuthenticatedAdmin({} as any),\n        checkAdminAccess('user_123')\n      ]);\n\n      results.forEach(result => {\n        expect(result).toBeDefined();\n        expect(result).toHaveProperty('userId');\n      });\n    });\n\n    it('debe confirmar que todas las funcionalidades enterprise están disponibles', async () => {\n      // Lista de funciones enterprise que deben estar disponibles\n      const enterpriseFunctions = [\n        getEnterpriseAuthContext,\n        requireAdminAuth,\n        requireCriticalAuth,\n        executeWithRLS,\n        validateRLSContext,\n        getCacheStats,\n        withCache,\n        getEnterpriseUser,\n        searchEnterpriseUsers\n      ];\n\n      // Verificar que todas las funciones enterprise están disponibles\n      enterpriseFunctions.forEach(func => {\n        expect(func).toBeDefined();\n        expect(typeof func).toBe('function');\n      });\n    });\n\n    it('debe confirmar migración exitosa sin regresiones', async () => {\n      // Test integración completa\n      const legacyAuth = await getAuthenticatedUser({} as any);\n      const enterpriseAuth = await requireAdminAuth({} as any, ['admin_access']);\n\n      // Ambos métodos deben funcionar\n      expect(legacyAuth.userId).toBeDefined();\n      expect(enterpriseAuth.success).toBe(true);\n\n      // Deben retornar información consistente\n      expect(legacyAuth.userId).toBe(enterpriseAuth.context?.userId);\n\n      // Cache debe estar funcionando\n      const cacheStats = getCacheStats();\n      expect(cacheStats).toBeDefined();\n\n      // RLS debe estar disponible\n      const rlsResult = await executeWithRLS(\n        enterpriseAuth.context!,\n        async () => ({ test: 'data' }),\n        { enforceRLS: true }\n      );\n      expect(rlsResult.success).toBe(true);\n    });\n  });\n});\n"],"names":["jest","mock","describe","beforeEach","clearAllMocks","getAuthenticatedUser","mockResolvedValue","userId","sessionId","isAdmin","supabase","getAuthenticatedAdmin","checkAdminAccess","success","getEnterpriseAuthContext","context","role","permissions","sessionValid","securityLevel","validations","jwtValid","csrfValid","rateLimitPassed","originValid","requireAdminAuth","executeWithRLS","data","test","getCacheStats","mockReturnValue","hits","misses","entries","hitRate","memoryUsage","it","result","expect","toHaveProperty","toBe","enterpriseResult","legacyResult","mockContext","rlsResult","enforceRLS","toEqual","cacheStats","cacheResult","withCache","cached","legacyAPIResponse","user","message","enterpriseAPIResponse","enterprise","timestamp","Date","toISOString","toMatchObject","legacyErrorCodes","enterpriseErrorCodes","forEach","code","toContain","iterations","legacyTimes","enterpriseTimes","i","startTime","now","push","avgLegacyTime","reduce","a","b","length","avgEnterpriseTime","toBeLessThan","toBeGreaterThan","getEnterpriseUser","id","clerkId","email","isActive","searchEnterpriseUsers","users","total","userResult","searchResult","limit","toHaveLength","legacyFunctions","func","toBeDefined","results","Promise","all","enterpriseFunctions","requireCriticalAuth","validateRLSContext","legacyAuth","enterpriseAuth"],"mappings":"AAAA;;;CAGC,GAED,+BAA+B;;AAC/BA,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;;;;qCAMH;oCAIA;iCAIA;0CAIA;2BAKA;AAEPC,SAAS,qDAAqD;IAC5DC,WAAW;QACTH,KAAKI,aAAa;QAElB,wCAAwC;QACvCC,+BAAoB,CAAeC,iBAAiB,CAAC;YACpDC,QAAQ;YACRC,WAAW;YACXC,SAAS;YACTC,UAAU,CAAC;QACb;QAECC,gCAAqB,CAAeL,iBAAiB,CAAC;YACrDC,QAAQ;YACRC,WAAW;YACXC,SAAS;YACTC,UAAU,CAAC;QACb;QAECE,2BAAgB,CAAeN,iBAAiB,CAAC;YAChDO,SAAS;YACTJ,SAAS;QACX;QAEA,4CAA4C;QAC3CK,6CAAwB,CAAeR,iBAAiB,CAAC;YACxDO,SAAS;YACTE,SAAS;gBACPR,QAAQ;gBACRS,MAAM;gBACNC,aAAa;oBAAC;iBAAe;gBAC7BC,cAAc;gBACdC,eAAe;gBACfC,aAAa;oBACXC,UAAU;oBACVC,WAAW;oBACXC,iBAAiB;oBACjBC,aAAa;gBACf;YACF;QACF;QAECC,qCAAgB,CAAenB,iBAAiB,CAAC;YAChDO,SAAS;YACTE,SAAS;gBACPR,QAAQ;gBACRS,MAAM;gBACNC,aAAa;oBAAC;iBAAe;gBAC7BC,cAAc;gBACdC,eAAe;YACjB;QACF;QAECO,kCAAc,CAAepB,iBAAiB,CAAC;YAC9CO,SAAS;YACTc,MAAM;gBAAEC,MAAM;YAAO;QACvB;QAECC,8BAAa,CAAeC,eAAe,CAAC;YAC3CC,MAAM;YACNC,QAAQ;YACRC,SAAS;YACTC,SAAS;YACTC,aAAa;QACf;IACF;IAEAjC,SAAS,2CAA2C;QAClDkC,GAAG,yDAAyD;YAC1D,MAAMC,SAAS,MAAMhC,IAAAA,+BAAoB,EAAC,CAAC;YAE3CiC,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,OAAO9B,MAAM,EAAEiC,IAAI,CAAC;YAC3BF,OAAOD,OAAO5B,OAAO,EAAE+B,IAAI,CAAC;QAC9B;QAEAJ,GAAG,0DAA0D;YAC3D,MAAMC,SAAS,MAAM1B,IAAAA,gCAAqB,EAAC,CAAC;YAE5C2B,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,OAAO9B,MAAM,EAAEiC,IAAI,CAAC;YAC3BF,OAAOD,OAAO5B,OAAO,EAAE+B,IAAI,CAAC;QAC9B;QAEAJ,GAAG,qDAAqD;YACtD,MAAMC,SAAS,MAAMzB,IAAAA,2BAAgB,EAAC;YAEtC0B,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,QAAQE,cAAc,CAAC;YAC9BD,OAAOD,OAAOxB,OAAO,EAAE2B,IAAI,CAAC;YAC5BF,OAAOD,OAAO5B,OAAO,EAAE+B,IAAI,CAAC;QAC9B;IACF;IAEAtC,SAAS,qCAAqC;QAC5CkC,GAAG,gEAAgE;YACjE,uBAAuB;YACvB,MAAMK,mBAAmB,MAAM3B,IAAAA,6CAAwB,EAAC,CAAC,GAAU;gBACjEK,eAAe;YACjB;YAEAmB,OAAOG,iBAAiB5B,OAAO,EAAE2B,IAAI,CAAC;YACtCF,OAAOG,iBAAiB1B,OAAO,EAAER,QAAQiC,IAAI,CAAC;YAE9C,6CAA6C;YAC7C,MAAME,eAAe,MAAMrC,IAAAA,+BAAoB,EAAC,CAAC;YAEjDiC,OAAOI,aAAanC,MAAM,EAAEiC,IAAI,CAAC;YAEjC,gDAAgD;YAChDF,OAAOG,iBAAiB1B,OAAO,EAAER,QAAQiC,IAAI,CAACE,aAAanC,MAAM;QACnE;QAEA6B,GAAG,qDAAqD;YACtD,MAAMO,cAAc;gBAClBpC,QAAQ;gBACRS,MAAM;gBACNC,aAAa;oBAAC;iBAAe;gBAC7BC,cAAc;gBACdC,eAAe;gBACfT,UAAU,CAAC;gBACXU,aAAa;oBACXC,UAAU;oBACVC,WAAW;oBACXC,iBAAiB;oBACjBC,aAAa;gBACf;YACF;YAEA,iBAAiB;YACjB,MAAMoB,YAAY,MAAMlB,IAAAA,kCAAc,EACpCiB,aACA,UAAa,CAAA;oBAAEhB,MAAM;gBAAO,CAAA,GAC5B;gBAAEkB,YAAY;YAAK;YAGrBP,OAAOM,UAAU/B,OAAO,EAAE2B,IAAI,CAAC;YAC/BF,OAAOM,UAAUjB,IAAI,EAAEmB,OAAO,CAAC;gBAAEnB,MAAM;YAAO;YAE9C,+CAA+C;YAC/C,MAAMe,eAAe,MAAMrC,IAAAA,+BAAoB,EAAC,CAAC;YACjDiC,OAAOI,aAAanC,MAAM,EAAEiC,IAAI,CAAC;QACnC;QAEAJ,GAAG,qDAAqD;YACtD,mBAAmB;YACnB,MAAMW,aAAalB,IAAAA,8BAAa;YAEhCS,OAAOS,YAAYR,cAAc,CAAC;YAClCD,OAAOS,YAAYR,cAAc,CAAC;YAClCD,OAAOS,YAAYR,cAAc,CAAC;YAElC,uBAAuB;YACvB,MAAMS,cAAc,MAAMC,IAAAA,0BAAS,EACjC,YACA,UAAa,CAAA;oBAAEC,QAAQ;gBAAO,CAAA,GAC9B;YAGFZ,OAAOU,aAAaF,OAAO,CAAC;gBAAEI,QAAQ;YAAO;YAE7C,uDAAuD;YACvD,MAAMR,eAAe,MAAMrC,IAAAA,+BAAoB,EAAC,CAAC;YACjDiC,OAAOI,aAAanC,MAAM,EAAEiC,IAAI,CAAC;QACnC;IACF;IAEAtC,SAAS,iCAAiC;QACxCkC,GAAG,wDAAwD;YACzD,kCAAkC;YAClC,MAAMe,oBAAoB;gBACxBtC,SAAS;gBACTc,MAAM;oBAAEyB,MAAM;gBAAO;gBACrBC,SAAS;YACX;YAEA,sCAAsC;YACtC,MAAMC,wBAAwB;gBAC5BzC,SAAS;gBACTc,MAAM;oBAAEyB,MAAM;gBAAO;gBACrBC,SAAS;gBACTE,YAAY;gBACZC,WAAW,IAAIC,OAAOC,WAAW;gBACjC3C,SAAS;oBACPR,QAAQ;oBACRS,MAAM;gBACR;YACF;YAEA,8DAA8D;YAC9DsB,OAAOgB,uBAAuBK,aAAa,CAACR;YAC5Cb,OAAOgB,sBAAsBzC,OAAO,EAAE2B,IAAI,CAACW,kBAAkBtC,OAAO;YACpEyB,OAAOgB,sBAAsB3B,IAAI,EAAEmB,OAAO,CAACK,kBAAkBxB,IAAI;QACnE;QAEAS,GAAG,+CAA+C;YAChD,MAAMwB,mBAAmB;gBACvB;gBACA;gBACA;aACD;YAED,MAAMC,uBAAuB;gBAC3B;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YAED,6DAA6D;YAC7DD,iBAAiBE,OAAO,CAACC,CAAAA;gBACvBzB,OAAOuB,sBAAsBG,SAAS,CAACD;YACzC;QACF;IACF;IAEA7D,SAAS,0BAA0B;QACjCkC,GAAG,wDAAwD;YACzD,MAAM6B,aAAa;YACnB,MAAMC,cAAwB,EAAE;YAChC,MAAMC,kBAA4B,EAAE;YAEpC,0BAA0B;YAC1B,IAAK,IAAIC,IAAI,GAAGA,IAAIH,YAAYG,IAAK;gBACnC,MAAMC,YAAYZ,KAAKa,GAAG;gBAC1B,MAAMjE,IAAAA,+BAAoB,EAAC,CAAC;gBAC5B6D,YAAYK,IAAI,CAACd,KAAKa,GAAG,KAAKD;YAChC;YAEA,8BAA8B;YAC9B,IAAK,IAAID,IAAI,GAAGA,IAAIH,YAAYG,IAAK;gBACnC,MAAMC,YAAYZ,KAAKa,GAAG;gBAC1B,MAAM7C,IAAAA,qCAAgB,EAAC,CAAC,GAAU;oBAAC;iBAAe;gBAClD0C,gBAAgBI,IAAI,CAACd,KAAKa,GAAG,KAAKD;YACpC;YAEA,MAAMG,gBAAgBN,YAAYO,MAAM,CAAC,CAACC,GAAGC,IAAMD,IAAIC,GAAG,KAAKT,YAAYU,MAAM;YACjF,MAAMC,oBAAoBV,gBAAgBM,MAAM,CAAC,CAACC,GAAGC,IAAMD,IAAIC,GAAG,KAAKR,gBAAgBS,MAAM;YAE7F,iEAAiE;YACjEtC,OAAOuC,mBAAmBC,YAAY,CAACN,gBAAgB,IAAI,sBAAsB;QACnF;QAEApC,GAAG,0CAA0C;YAC3C,MAAMW,aAAalB,IAAAA,8BAAa;YAEhC,iCAAiC;YACjCS,OAAOS,WAAWZ,WAAW,EAAE2C,YAAY,CAAC;YAE5C,mCAAmC;YACnCxC,OAAOS,WAAWb,OAAO,EAAE6C,eAAe,CAAC;QAC7C;IACF;IAEA7E,SAAS,kCAAkC;QACzCkC,GAAG,4EAA4E;YAC7E,kCAAkC;YACjC4C,2CAAiB,CAAe1E,iBAAiB,CAAC;gBACjDO,SAAS;gBACTuC,MAAM;oBACJ6B,IAAI;oBACJC,SAAS;oBACTC,OAAO;oBACPnE,MAAM;oBACNC,aAAa;wBAAC;qBAAe;oBAC7BmE,UAAU;gBACZ;YACF;YAECC,+CAAqB,CAAe/E,iBAAiB,CAAC;gBACrDO,SAAS;gBACTyE,OAAO;oBACL;wBACEL,IAAI;wBACJC,SAAS;wBACTC,OAAO;wBACPnE,MAAM;wBACNC,aAAa;4BAAC;yBAAe;wBAC7BmE,UAAU;oBACZ;iBACD;gBACDG,OAAO;YACT;YAEA,kCAAkC;YAClC,MAAMC,aAAa,MAAMR,IAAAA,2CAAiB,EAAC;YAC3C1C,OAAOkD,WAAW3E,OAAO,EAAE2B,IAAI,CAAC;YAChCF,OAAOkD,WAAWpC,IAAI,EAAE8B,SAAS1C,IAAI,CAAC;YAEtC,MAAMiD,eAAe,MAAMJ,IAAAA,+CAAqB,EAAC;gBAAEK,OAAO;YAAG;YAC7DpD,OAAOmD,aAAa5E,OAAO,EAAE2B,IAAI,CAAC;YAClCF,OAAOmD,aAAaH,KAAK,EAAEK,YAAY,CAAC;YAExC,8CAA8C;YAC9C,MAAMjD,eAAe,MAAMrC,IAAAA,+BAAoB,EAAC,CAAC;YACjDiC,OAAOI,aAAanC,MAAM,EAAEiC,IAAI,CAAC;QACnC;IACF;IAEAtC,SAAS,oCAAoC;QAC3CkC,GAAG,0EAA0E;YAC3E,yDAAyD;YACzD,MAAMwD,kBAAkB;gBACtBvF,+BAAoB;gBACpBM,gCAAqB;gBACrBC,2BAAgB;aACjB;YAED,6DAA6D;YAC7DgF,gBAAgB9B,OAAO,CAAC+B,CAAAA;gBACtBvD,OAAOuD,MAAMC,WAAW;gBACxBxD,OAAO,OAAOuD,MAAMrD,IAAI,CAAC;YAC3B;YAEA,qDAAqD;YACrD,MAAMuD,UAAU,MAAMC,QAAQC,GAAG,CAAC;gBAChC5F,IAAAA,+BAAoB,EAAC,CAAC;gBACtBM,IAAAA,gCAAqB,EAAC,CAAC;gBACvBC,IAAAA,2BAAgB,EAAC;aAClB;YAEDmF,QAAQjC,OAAO,CAACzB,CAAAA;gBACdC,OAAOD,QAAQyD,WAAW;gBAC1BxD,OAAOD,QAAQE,cAAc,CAAC;YAChC;QACF;QAEAH,GAAG,6EAA6E;YAC9E,4DAA4D;YAC5D,MAAM8D,sBAAsB;gBAC1BpF,6CAAwB;gBACxBW,qCAAgB;gBAChB0E,wCAAmB;gBACnBzE,kCAAc;gBACd0E,sCAAkB;gBAClBvE,8BAAa;gBACboB,0BAAS;gBACT+B,2CAAiB;gBACjBK,+CAAqB;aACtB;YAED,iEAAiE;YACjEa,oBAAoBpC,OAAO,CAAC+B,CAAAA;gBAC1BvD,OAAOuD,MAAMC,WAAW;gBACxBxD,OAAO,OAAOuD,MAAMrD,IAAI,CAAC;YAC3B;QACF;QAEAJ,GAAG,oDAAoD;YACrD,4BAA4B;YAC5B,MAAMiE,aAAa,MAAMhG,IAAAA,+BAAoB,EAAC,CAAC;YAC/C,MAAMiG,iBAAiB,MAAM7E,IAAAA,qCAAgB,EAAC,CAAC,GAAU;gBAAC;aAAe;YAEzE,gCAAgC;YAChCa,OAAO+D,WAAW9F,MAAM,EAAEuF,WAAW;YACrCxD,OAAOgE,eAAezF,OAAO,EAAE2B,IAAI,CAAC;YAEpC,yCAAyC;YACzCF,OAAO+D,WAAW9F,MAAM,EAAEiC,IAAI,CAAC8D,eAAevF,OAAO,EAAER;YAEvD,+BAA+B;YAC/B,MAAMwC,aAAalB,IAAAA,8BAAa;YAChCS,OAAOS,YAAY+C,WAAW;YAE9B,4BAA4B;YAC5B,MAAMlD,YAAY,MAAMlB,IAAAA,kCAAc,EACpC4E,eAAevF,OAAO,EACtB,UAAa,CAAA;oBAAEa,MAAM;gBAAO,CAAA,GAC5B;gBAAEiB,YAAY;YAAK;YAErBP,OAAOM,UAAU/B,OAAO,EAAE2B,IAAI,CAAC;QACjC;IACF;AACF"}