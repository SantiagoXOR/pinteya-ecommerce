{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\products.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TEST PRODUCTS API\n// ===================================\n\nimport { NextRequest } from 'next/server'\nimport { GET } from '@/app/api/products/route'\n\n// Mock Supabase\nconst mockSupabaseResponse = {\n  data: [\n    {\n      id: 1,\n      name: 'Test Product 1',\n      slug: 'test-product-1',\n      description: 'Test description',\n      price: 1000,\n      discounted_price: 900,\n      stock: 10,\n      category_id: 1,\n      images: { previews: ['/test1.jpg'] },\n      created_at: '2025-01-01T00:00:00Z',\n      updated_at: '2025-01-01T00:00:00Z',\n      category: {\n        id: 1,\n        name: 'Test Category',\n        slug: 'test-category',\n      },\n    },\n    {\n      id: 2,\n      name: 'Test Product 2',\n      slug: 'test-product-2',\n      description: 'Test description 2',\n      price: 2000,\n      discounted_price: null,\n      stock: 5,\n      category_id: 2,\n      images: { previews: ['/test2.jpg'] },\n      created_at: '2025-01-01T00:00:00Z',\n      updated_at: '2025-01-01T00:00:00Z',\n      category: {\n        id: 2,\n        name: 'Test Category 2',\n        slug: 'test-category-2',\n      },\n    },\n  ],\n  error: null,\n  count: 2,\n}\n\n// Los mocks de Supabase ya están configurados en jest.setup.js\n// No necesitamos redefinirlos aquí\n\ndescribe('/api/products', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('returns products with default pagination', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data).toHaveLength(2)\n    expect(data.pagination).toEqual({\n      page: 1,\n      limit: 12,\n      total: 2,\n      totalPages: 1,\n    })\n  })\n\n  it('handles pagination parameters', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?page=2&limit=6')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.pagination.page).toBe(2)\n    expect(data.pagination.limit).toBe(6)\n  })\n\n  it('handles search parameter', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?search=test')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    // Verify that search was applied (mock should be called with search)\n  })\n\n  it('handles category filter', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?category=1')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('handles price range filter', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?minPrice=500&maxPrice=1500')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('handles sorting parameters', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?sortBy=price&sortOrder=asc')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('validates pagination limits', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?limit=150')\n    const response = await GET(request)\n    const data = await response.json()\n\n    // La API debería retornar error 500 por validación fallida (limit > 100)\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    expect(data.error).toContain('limit')\n  })\n\n  it('handles invalid page numbers', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?page=-1')\n    const response = await GET(request)\n    const data = await response.json()\n\n    // La API debería retornar error 500 por validación fallida (page < 1)\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    expect(data.error).toContain('page')\n  })\n\n  it('handles database errors', async () => {\n    // Mock database error\n    const mockError = { message: 'Database connection failed' }\n    const mockSupabase = require('@/lib/supabase')\n\n    // Crear un mock que falle en el método range\n    const mockQueryBuilder = {\n      select: jest.fn(() => mockQueryBuilder),\n      eq: jest.fn(() => mockQueryBuilder),\n      gte: jest.fn(() => mockQueryBuilder),\n      lte: jest.fn(() => mockQueryBuilder),\n      gt: jest.fn(() => mockQueryBuilder),\n      lt: jest.fn(() => mockQueryBuilder),\n      or: jest.fn(() => mockQueryBuilder),\n      and: jest.fn(() => mockQueryBuilder),\n      ilike: jest.fn(() => mockQueryBuilder),\n      like: jest.fn(() => mockQueryBuilder),\n      in: jest.fn(() => mockQueryBuilder),\n      order: jest.fn(() => mockQueryBuilder),\n      range: jest.fn(() => Promise.resolve({ data: null, error: mockError })),\n      single: jest.fn(() => Promise.resolve({ data: null, error: mockError })),\n    }\n\n    mockSupabase.getSupabaseClient.mockReturnValue({\n      from: jest.fn(() => mockQueryBuilder),\n      auth: { getUser: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })) }\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/products')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    expect(data.error).toBe('Database connection failed')\n  })\n\n  it('returns correct product structure', async () => {\n    // Asegurar que el mock esté configurado correctamente para este test\n    const mockSupabase = require('@/lib/supabase')\n\n    const mockQueryBuilder = {\n      select: jest.fn(() => mockQueryBuilder),\n      eq: jest.fn(() => mockQueryBuilder),\n      gte: jest.fn(() => mockQueryBuilder),\n      lte: jest.fn(() => mockQueryBuilder),\n      gt: jest.fn(() => mockQueryBuilder),\n      lt: jest.fn(() => mockQueryBuilder),\n      or: jest.fn(() => mockQueryBuilder),\n      and: jest.fn(() => mockQueryBuilder),\n      ilike: jest.fn(() => mockQueryBuilder),\n      like: jest.fn(() => mockQueryBuilder),\n      in: jest.fn(() => mockQueryBuilder),\n      order: jest.fn(() => mockQueryBuilder),\n      range: jest.fn(() => Promise.resolve(mockSupabaseResponse)),\n      single: jest.fn(() => Promise.resolve({ data: null, error: null })),\n    }\n\n    mockSupabase.getSupabaseClient.mockReturnValue({\n      from: jest.fn(() => mockQueryBuilder),\n      auth: { getUser: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })) }\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/products')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(Array.isArray(data.data)).toBe(true)\n    expect(data.data.length).toBeGreaterThan(0)\n\n    expect(data.data[0]).toMatchObject({\n      id: expect.any(Number),\n      name: expect.any(String),\n      slug: expect.any(String),\n      description: expect.any(String),\n      price: expect.any(Number),\n      stock: expect.any(Number),\n      category_id: expect.any(Number),\n      images: expect.any(Object),\n      category: expect.objectContaining({\n        id: expect.any(Number),\n        name: expect.any(String),\n        slug: expect.any(String),\n      }),\n    })\n  })\n\n  it('handles empty results', async () => {\n    // Mock empty response\n    const mockSupabase = require('@/lib/supabase')\n\n    const mockQueryBuilder = {\n      select: jest.fn(() => mockQueryBuilder),\n      eq: jest.fn(() => mockQueryBuilder),\n      gte: jest.fn(() => mockQueryBuilder),\n      lte: jest.fn(() => mockQueryBuilder),\n      gt: jest.fn(() => mockQueryBuilder),\n      lt: jest.fn(() => mockQueryBuilder),\n      or: jest.fn(() => mockQueryBuilder),\n      and: jest.fn(() => mockQueryBuilder),\n      ilike: jest.fn(() => mockQueryBuilder),\n      like: jest.fn(() => mockQueryBuilder),\n      in: jest.fn(() => mockQueryBuilder),\n      order: jest.fn(() => mockQueryBuilder),\n      range: jest.fn(() => Promise.resolve({ data: [], error: null, count: 0 })),\n      single: jest.fn(() => Promise.resolve({ data: null, error: null })),\n    }\n\n    mockSupabase.getSupabaseClient.mockReturnValue({\n      from: jest.fn(() => mockQueryBuilder),\n      auth: { getUser: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })) }\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/products')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data).toEqual([])\n    expect(data.pagination.total).toBe(0)\n  })\n\n  it('handles multiple filters simultaneously', async () => {\n    const request = new NextRequest(\n      'http://localhost:3001/api/products?search=pintura&category=1&minPrice=1000&maxPrice=5000&sortBy=price&sortOrder=desc'\n    )\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('sanitizes search input', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?search=<script>alert(\"xss\")</script>')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    // Should handle potentially malicious input safely\n  })\n\n  it('handles special characters in search', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?search=pintura%20látex%20ñ')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('returns appropriate headers', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products')\n    const response = await GET(request)\n\n    expect(response.status).toBe(200)\n    // Verificar que la respuesta es JSON válida\n    const data = await response.json()\n    expect(data).toBeDefined()\n    expect(typeof data).toBe('object')\n  })\n\n  it('calculates total pages correctly', async () => {\n    // Mock response with specific count\n    const mockSupabase = require('@/lib/supabase')\n\n    const mockQueryBuilder = {\n      select: jest.fn(() => mockQueryBuilder),\n      eq: jest.fn(() => mockQueryBuilder),\n      gte: jest.fn(() => mockQueryBuilder),\n      lte: jest.fn(() => mockQueryBuilder),\n      gt: jest.fn(() => mockQueryBuilder),\n      lt: jest.fn(() => mockQueryBuilder),\n      or: jest.fn(() => mockQueryBuilder),\n      and: jest.fn(() => mockQueryBuilder),\n      ilike: jest.fn(() => mockQueryBuilder),\n      like: jest.fn(() => mockQueryBuilder),\n      in: jest.fn(() => mockQueryBuilder),\n      order: jest.fn(() => mockQueryBuilder),\n      range: jest.fn(() => Promise.resolve({\n        data: mockSupabaseResponse.data,\n        error: null,\n        count: 25 // 25 total items\n      })),\n      single: jest.fn(() => Promise.resolve({ data: null, error: null })),\n    }\n\n    mockSupabase.getSupabaseClient.mockReturnValue({\n      from: jest.fn(() => mockQueryBuilder),\n      auth: { getUser: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })) }\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/products?limit=10')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(data.pagination.total).toBe(25)\n    expect(data.pagination.totalPages).toBe(3) // Math.ceil(25/10)\n  })\n\n  it('handles brand filter correctly', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?brand=sherwin-williams')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('handles stock filter correctly', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?inStock=true')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('handles featured products filter', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?featured=true')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('handles discount filter', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?onSale=true')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('validates sort parameters', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?sortBy=invalid&sortOrder=invalid')\n    const response = await GET(request)\n    const data = await response.json()\n\n    // La API debería retornar error 500 por validación fallida (sortBy y sortOrder inválidos)\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    expect(data.error).toContain('sortBy')\n  })\n\n  it('handles network timeout errors', async () => {\n    const mockSupabase = require('@/lib/supabase')\n\n    mockSupabase.getSupabaseClient.mockImplementation(() => {\n      throw new Error('Network timeout')\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/products')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    expect(data.error).toBe('Network timeout')\n  })\n\n  it('handles very large page numbers', async () => {\n    const request = new NextRequest('http://localhost:3001/api/products?page=999999')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    // Should handle gracefully or return appropriate error\n  })\n\n  it('handles concurrent requests', async () => {\n    // Resetear el mock para este test específico\n    const mockSupabase = require('@/lib/supabase')\n\n    const mockQueryBuilder = {\n      select: jest.fn(() => mockQueryBuilder),\n      eq: jest.fn(() => mockQueryBuilder),\n      gte: jest.fn(() => mockQueryBuilder),\n      lte: jest.fn(() => mockQueryBuilder),\n      gt: jest.fn(() => mockQueryBuilder),\n      lt: jest.fn(() => mockQueryBuilder),\n      or: jest.fn(() => mockQueryBuilder),\n      and: jest.fn(() => mockQueryBuilder),\n      ilike: jest.fn(() => mockQueryBuilder),\n      like: jest.fn(() => mockQueryBuilder),\n      in: jest.fn(() => mockQueryBuilder),\n      order: jest.fn(() => mockQueryBuilder),\n      range: jest.fn(() => Promise.resolve(mockSupabaseResponse)),\n      single: jest.fn(() => Promise.resolve({ data: null, error: null })),\n    }\n\n    mockSupabase.getSupabaseClient.mockReturnValue({\n      from: jest.fn(() => mockQueryBuilder),\n      auth: { getUser: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })) }\n    })\n\n    const requests = Array(5).fill(null).map(() =>\n      GET(new NextRequest('http://localhost:3001/api/products'))\n    )\n\n    const responses = await Promise.all(requests)\n\n    responses.forEach(response => {\n      expect(response.status).toBe(200)\n    })\n  })\n})\n"],"names":["mockSupabaseResponse","data","id","name","slug","description","price","discounted_price","stock","category_id","images","previews","created_at","updated_at","category","error","count","describe","beforeEach","jest","clearAllMocks","it","request","NextRequest","response","GET","json","expect","status","toBe","success","toHaveLength","pagination","toEqual","page","limit","total","totalPages","toContain","mockError","message","mockSupabase","require","mockQueryBuilder","select","fn","eq","gte","lte","gt","lt","or","and","ilike","like","in","order","range","Promise","resolve","single","getSupabaseClient","mockReturnValue","from","auth","getUser","user","Array","isArray","length","toBeGreaterThan","toMatchObject","any","Number","String","Object","objectContaining","toBeDefined","mockImplementation","Error","requests","fill","map","responses","all","forEach"],"mappings":"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"}