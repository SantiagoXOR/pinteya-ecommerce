{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\integration\\admin-products-api.integration.test.ts"],"sourcesContent":["// ðŸ§ª Enterprise Integration Tests - Admin Products API\n\nimport { createMocks } from 'node-mocks-http';\nimport { NextRequest } from 'next/server';\n\n// Import the actual API handlers\nimport { GET as getProduct, PUT as updateProduct, DELETE as deleteProduct } from '@/app/api/admin/products/[id]/route';\nimport { GET as getImages, POST as uploadImage } from '@/app/api/admin/products/[id]/images/route';\nimport { POST as validateSlug } from '@/app/api/admin/products/validate-slug/route';\n\n// Mock Supabase client\nconst mockSupabaseClient = {\n  from: jest.fn(() => ({\n    select: jest.fn(() => ({\n      eq: jest.fn(() => ({\n        single: jest.fn(),\n        limit: jest.fn(),\n        order: jest.fn(() => ({\n          order: jest.fn(),\n        })),\n      })),\n    })),\n    insert: jest.fn(() => ({\n      select: jest.fn(() => ({\n        single: jest.fn(),\n      })),\n    })),\n    update: jest.fn(() => ({\n      eq: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(),\n        })),\n        neq: jest.fn(),\n      })),\n    })),\n    delete: jest.fn(() => ({\n      eq: jest.fn(),\n    })),\n  })),\n  storage: {\n    from: jest.fn(() => ({\n      upload: jest.fn(),\n      getPublicUrl: jest.fn(),\n      remove: jest.fn(),\n    })),\n  },\n};\n\n// Mock auth\nconst mockAuthResult = {\n  success: true,\n  user: { id: 'test-user-id', email: 'test@example.com' },\n  supabase: mockSupabaseClient,\n};\n\njest.mock('@/lib/auth/admin-auth', () => ({\n  checkCRUDPermissions: jest.fn().mockResolvedValue(mockAuthResult),\n}));\n\n// Mock middleware to pass through\njest.mock('@/lib/api/middleware-composer', () => ({\n  composeMiddlewares: jest.fn((...middlewares) => (handler) => handler),\n}));\n\njest.mock('@/lib/api/error-handler', () => ({\n  withErrorHandler: jest.fn((handler) => handler),\n  ApiError: class ApiError extends Error {\n    constructor(message: string, public statusCode: number = 500) {\n      super(message);\n    }\n  },\n  NotFoundError: jest.fn((resource) => new Error(`${resource} no encontrado`)),\n  ValidationError: jest.fn((message) => new Error(message)),\n}));\n\njest.mock('@/lib/api/api-logger', () => ({\n  withApiLogging: jest.fn((handler) => handler),\n  logAdminAction: jest.fn(),\n}));\n\njest.mock('@/lib/auth/api-auth-middleware', () => ({\n  withAdminAuth: jest.fn(() => (handler) => handler),\n}));\n\njest.mock('@/lib/validation/admin-schemas', () => ({\n  withValidation: jest.fn(() => (handler) => handler),\n}));\n\ndescribe('Admin Products API Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Product CRUD Operations', () => {\n    const mockProduct = {\n      id: 'test-product-id',\n      name: 'Test Product',\n      description: 'Test Description',\n      price: 100,\n      stock: 10,\n      category_id: 'test-category-id',\n      slug: 'test-product',\n      status: 'active',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z',\n      categories: { id: 'test-category-id', name: 'Test Category' },\n    };\n\n    describe('GET Product', () => {\n      it('should retrieve product successfully', async () => {\n        mockSupabaseClient.from().select().eq().single.mockResolvedValue({\n          data: mockProduct,\n          error: null,\n        });\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n        } as any;\n\n        const response = await getProduct(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n        expect(responseData.data.name).toBe('Test Product');\n        expect(responseData.data.category_name).toBe('Test Category');\n        expect(responseData.data.categories).toBeUndefined();\n      });\n\n      it('should handle product not found', async () => {\n        mockSupabaseClient.from().select().eq().single.mockResolvedValue({\n          data: null,\n          error: { message: 'Not found' },\n        });\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n        } as any;\n\n        await expect(\n          getProduct(mockRequest, { params: { id: 'non-existent-id' } })\n        ).rejects.toThrow('Producto no encontrado');\n      });\n    });\n\n    describe('PUT Product', () => {\n      it('should update product successfully', async () => {\n        const updateData = {\n          name: 'Updated Product',\n          price: 150,\n          stock: 20,\n        };\n\n        // Mock existing product check\n        mockSupabaseClient.from().select().eq().single\n          .mockResolvedValueOnce({\n            data: mockProduct,\n            error: null,\n          });\n\n        // Mock update operation\n        mockSupabaseClient.from().update().eq().select().single.mockResolvedValue({\n          data: { ...mockProduct, ...updateData, slug: 'updated-product' },\n          error: null,\n        });\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n          validatedData: updateData,\n        } as any;\n\n        const response = await updateProduct(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n        expect(responseData.data.name).toBe('Updated Product');\n        expect(responseData.message).toBe('Producto actualizado exitosamente');\n      });\n\n      it('should validate category when updating category_id', async () => {\n        const updateData = {\n          category_id: 'new-category-id',\n        };\n\n        // Mock existing product check\n        mockSupabaseClient.from().select().eq().single\n          .mockResolvedValueOnce({\n            data: mockProduct,\n            error: null,\n          })\n          .mockResolvedValueOnce({\n            data: { id: 'new-category-id' },\n            error: null,\n          });\n\n        mockSupabaseClient.from().update().eq().select().single.mockResolvedValue({\n          data: { ...mockProduct, category_id: 'new-category-id' },\n          error: null,\n        });\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n          validatedData: updateData,\n        } as any;\n\n        const response = await updateProduct(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n      });\n    });\n\n    describe('DELETE Product', () => {\n      it('should perform soft delete when product has orders', async () => {\n        // Mock existing product check\n        mockSupabaseClient.from().select().eq().single.mockResolvedValue({\n          data: mockProduct,\n          error: null,\n        });\n\n        // Mock order items check - has orders\n        mockSupabaseClient.from().select().eq().limit.mockResolvedValue({\n          data: [{ id: 'order-item-id' }],\n          error: null,\n        });\n\n        // Mock soft delete update\n        mockSupabaseClient.from().update().eq.mockResolvedValue({\n          error: null,\n        });\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n        } as any;\n\n        const response = await deleteProduct(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n        expect(responseData.soft_delete).toBe(true);\n        expect(responseData.message).toContain('marcado como inactivo');\n      });\n\n      it('should perform hard delete when product has no orders', async () => {\n        // Mock existing product check\n        mockSupabaseClient.from().select().eq().single.mockResolvedValue({\n          data: mockProduct,\n          error: null,\n        });\n\n        // Mock order items check - no orders\n        mockSupabaseClient.from().select().eq().limit.mockResolvedValue({\n          data: [],\n          error: null,\n        });\n\n        // Mock hard delete\n        mockSupabaseClient.from().delete().eq.mockResolvedValue({\n          error: null,\n        });\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n        } as any;\n\n        const response = await deleteProduct(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n        expect(responseData.hard_delete).toBe(true);\n        expect(responseData.message).toBe('Producto eliminado exitosamente');\n      });\n    });\n  });\n\n  describe('Product Images Operations', () => {\n    const mockImages = [\n      {\n        id: 'image-1',\n        product_id: 'test-product-id',\n        url: 'https://example.com/image1.jpg',\n        alt_text: 'Image 1',\n        is_primary: true,\n        display_order: 0,\n      },\n      {\n        id: 'image-2',\n        product_id: 'test-product-id',\n        url: 'https://example.com/image2.jpg',\n        alt_text: 'Image 2',\n        is_primary: false,\n        display_order: 1,\n      },\n    ];\n\n    describe('GET Images', () => {\n      it('should retrieve product images successfully', async () => {\n        mockSupabaseClient.from().select().eq().order().order.mockResolvedValue({\n          data: mockImages,\n          error: null,\n        });\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n        } as any;\n\n        const response = await getImages(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n        expect(responseData.data).toHaveLength(2);\n        expect(responseData.data[0].is_primary).toBe(true);\n      });\n    });\n\n    describe('POST Image Upload', () => {\n      it('should upload image successfully', async () => {\n        // Mock product exists check\n        mockSupabaseClient.from().select().eq().single.mockResolvedValue({\n          data: { id: 'test-product-id', name: 'Test Product' },\n          error: null,\n        });\n\n        // Mock storage upload\n        mockSupabaseClient.storage.from().upload.mockResolvedValue({\n          data: { path: 'products/test-product-id/123_test.jpg' },\n          error: null,\n        });\n\n        mockSupabaseClient.storage.from().getPublicUrl.mockReturnValue({\n          data: { publicUrl: 'https://storage.example.com/test.jpg' },\n        });\n\n        // Mock database insert\n        const mockImageRecord = {\n          id: 'new-image-id',\n          product_id: 'test-product-id',\n          url: 'https://storage.example.com/test.jpg',\n          alt_text: 'Test image',\n          is_primary: true,\n        };\n\n        mockSupabaseClient.from().insert().select().single.mockResolvedValue({\n          data: mockImageRecord,\n          error: null,\n        });\n\n        // Mock update other images\n        mockSupabaseClient.from().update().eq().neq.mockResolvedValue({\n          error: null,\n        });\n\n        // Create mock file and form data\n        const mockFile = new File(['test content'], 'test.jpg', { type: 'image/jpeg' });\n        const mockFormData = new FormData();\n        mockFormData.append('file', mockFile);\n        mockFormData.append('alt_text', 'Test image');\n        mockFormData.append('is_primary', 'true');\n\n        const mockRequest = {\n          supabase: mockSupabaseClient,\n          user: { id: 'test-user-id' },\n          formData: jest.fn().mockResolvedValue(mockFormData),\n        } as any;\n\n        const response = await uploadImage(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(201);\n        expect(responseData.success).toBe(true);\n        expect(responseData.data.url).toBe('https://storage.example.com/test.jpg');\n        expect(responseData.message).toBe('Imagen subida exitosamente');\n      });\n    });\n  });\n\n  describe('Slug Validation', () => {\n    it('should validate slug availability', async () => {\n      // Mock slug check - available\n      mockSupabaseClient.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      const mockRequest = {\n        supabase: mockSupabaseClient,\n        user: { id: 'test-user-id' },\n        validatedData: { slug: 'new-product-slug' },\n      } as any;\n\n      const response = await validateSlug(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.available).toBe(true);\n      expect(responseData.message).toBe('Slug disponible');\n    });\n\n    it('should detect slug conflicts', async () => {\n      // Mock slug check - not available\n      mockSupabaseClient.from().select().eq().limit.mockResolvedValue({\n        data: [{ id: 'existing-product-id' }],\n        error: null,\n      });\n\n      const mockRequest = {\n        supabase: mockSupabaseClient,\n        user: { id: 'test-user-id' },\n        validatedData: { slug: 'existing-slug' },\n      } as any;\n\n      const response = await validateSlug(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.available).toBe(false);\n      expect(responseData.message).toBe('Slug ya estÃ¡ en uso');\n    });\n\n    it('should exclude current product when editing', async () => {\n      // Mock slug check excluding current product\n      mockSupabaseClient.from().select().eq().neq = jest.fn(() => ({\n        limit: jest.fn().mockResolvedValue({\n          data: [],\n          error: null,\n        }),\n      }));\n\n      const mockRequest = {\n        supabase: mockSupabaseClient,\n        user: { id: 'test-user-id' },\n        validatedData: { \n          slug: 'product-slug',\n          productId: 'current-product-id'\n        },\n      } as any;\n\n      const response = await validateSlug(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.available).toBe(true);\n    });\n  });\n\n  describe('End-to-End Product Workflow', () => {\n    it('should complete full product creation workflow', async () => {\n      // 1. Validate slug\n      mockSupabaseClient.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      const slugRequest = {\n        supabase: mockSupabaseClient,\n        user: { id: 'test-user-id' },\n        validatedData: { slug: 'new-product' },\n      } as any;\n\n      const slugResponse = await validateSlug(slugRequest);\n      const slugData = await slugResponse.json();\n\n      expect(slugData.available).toBe(true);\n\n      // 2. Create product (simulated)\n      const newProduct = {\n        id: 'new-product-id',\n        name: 'New Product',\n        slug: 'new-product',\n        price: 100,\n        stock: 10,\n        category_id: 'test-category-id',\n      };\n\n      // 3. Upload image\n      mockSupabaseClient.from().select().eq().single.mockResolvedValue({\n        data: newProduct,\n        error: null,\n      });\n\n      mockSupabaseClient.storage.from().upload.mockResolvedValue({\n        data: { path: 'products/new-product-id/image.jpg' },\n        error: null,\n      });\n\n      mockSupabaseClient.storage.from().getPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://storage.example.com/image.jpg' },\n      });\n\n      mockSupabaseClient.from().insert().select().single.mockResolvedValue({\n        data: {\n          id: 'image-id',\n          product_id: 'new-product-id',\n          url: 'https://storage.example.com/image.jpg',\n          is_primary: true,\n        },\n        error: null,\n      });\n\n      const mockFile = new File(['content'], 'image.jpg', { type: 'image/jpeg' });\n      const mockFormData = new FormData();\n      mockFormData.append('file', mockFile);\n      mockFormData.append('is_primary', 'true');\n\n      const imageRequest = {\n        supabase: mockSupabaseClient,\n        user: { id: 'test-user-id' },\n        formData: jest.fn().mockResolvedValue(mockFormData),\n      } as any;\n\n      const imageResponse = await uploadImage(imageRequest, { params: { id: 'new-product-id' } });\n      const imageData = await imageResponse.json();\n\n      expect(imageResponse.status).toBe(201);\n      expect(imageData.success).toBe(true);\n\n      // 4. Retrieve complete product\n      mockSupabaseClient.from().select().eq().single.mockResolvedValue({\n        data: {\n          ...newProduct,\n          categories: { name: 'Test Category' },\n        },\n        error: null,\n      });\n\n      const getRequest = {\n        supabase: mockSupabaseClient,\n        user: { id: 'test-user-id' },\n      } as any;\n\n      const getResponse = await getProduct(getRequest, { params: { id: 'new-product-id' } });\n      const getData = await getResponse.json();\n\n      expect(getResponse.status).toBe(200);\n      expect(getData.data.name).toBe('New Product');\n      expect(getData.data.category_name).toBe('Test Category');\n    });\n  });\n});\n"],"names":["jest","mock","checkCRUDPermissions","fn","mockResolvedValue","mockAuthResult","composeMiddlewares","middlewares","handler","withErrorHandler","ApiError","Error","constructor","message","statusCode","NotFoundError","resource","ValidationError","withApiLogging","logAdminAction","withAdminAuth","withValidation","mockSupabaseClient","from","select","eq","single","limit","order","insert","update","neq","delete","storage","upload","getPublicUrl","remove","success","user","id","email","supabase","describe","beforeEach","clearAllMocks","mockProduct","name","description","price","stock","category_id","slug","status","created_at","updated_at","categories","it","data","error","mockRequest","response","getProduct","params","responseData","json","expect","toBe","category_name","toBeUndefined","rejects","toThrow","updateData","mockResolvedValueOnce","validatedData","updateProduct","deleteProduct","soft_delete","toContain","hard_delete","mockImages","product_id","url","alt_text","is_primary","display_order","getImages","toHaveLength","path","mockReturnValue","publicUrl","mockImageRecord","mockFile","File","type","mockFormData","FormData","append","formData","uploadImage","validateSlug","available","productId","slugRequest","slugResponse","slugData","newProduct","imageRequest","imageResponse","imageData","getRequest","getResponse","getData"],"mappings":"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"}