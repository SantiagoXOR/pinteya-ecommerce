{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCategoriesWithDynamicCounts.ts"],"sourcesContent":["'use client';\n\nimport { useMemo } from 'react';\nimport { useCategories } from './useCategories';\nimport { useCategoryProductCounts, ProductFilters } from './useFilteredProducts';\nimport { Category } from '@/types/database';\n\n// ===================================\n// TIPOS\n// ===================================\n\nexport interface CategoryWithDynamicCount extends Category {\n  products_count: number;\n  isLoading?: boolean;\n}\n\nexport interface UseCategoriesWithDynamicCountsOptions {\n  baseFilters?: Omit<ProductFilters, 'categories' | 'category'>;\n  selectedCategories?: string[];\n  enableDynamicCounts?: boolean;\n}\n\n// ===================================\n// HOOK PRINCIPAL\n// ===================================\n\n/**\n * Hook que combina categorías estáticas con conteos dinámicos de productos\n * basados en filtros actuales\n */\nexport const useCategoriesWithDynamicCounts = ({\n  baseFilters = {},\n  selectedCategories = [],\n  enableDynamicCounts = true,\n}: UseCategoriesWithDynamicCountsOptions = {}) => {\n  // Obtener categorías base\n  const { categories: baseCategories, loading: categoriesLoading, error: categoriesError } = useCategories();\n\n  // Extraer slugs de categorías para obtener conteos\n  const categoryIds = useMemo(() => {\n    return baseCategories.map(cat => cat.slug).filter(Boolean);\n  }, [baseCategories]);\n\n  // Obtener conteos dinámicos solo si está habilitado\n  const {\n    data: dynamicCounts,\n    isLoading: countsLoading,\n    error: countsError\n  } = useCategoryProductCounts(\n    enableDynamicCounts ? categoryIds : [],\n    baseFilters\n  );\n\n  // Combinar categorías con conteos dinámicos\n  const categoriesWithDynamicCounts = useMemo((): CategoryWithDynamicCount[] => {\n    // Si no hay categorías base, retornar array vacío\n    if (baseCategories.length === 0) {\n      return [];\n    }\n\n    return baseCategories.map(category => {\n      const dynamicCount = enableDynamicCounts && dynamicCounts\n        ? dynamicCounts[category.slug]\n        : undefined;\n\n      return {\n        ...category,\n        products_count: dynamicCount !== undefined ? dynamicCount : (category.products_count || 0),\n        isLoading: enableDynamicCounts && countsLoading,\n      };\n    });\n  }, [baseCategories, dynamicCounts, enableDynamicCounts, countsLoading]);\n  \n  // Filtrar categorías seleccionadas si es necesario\n  const availableCategories = useMemo(() => {\n    if (selectedCategories.length === 0) {\n      return categoriesWithDynamicCounts;\n    }\n    \n    // Mostrar todas las categorías, pero marcar las seleccionadas\n    return categoriesWithDynamicCounts.map(category => ({\n      ...category,\n      isSelected: selectedCategories.includes(category.slug),\n    }));\n  }, [categoriesWithDynamicCounts, selectedCategories]);\n  \n  // Estados combinados\n  const isLoading = categoriesLoading || (enableDynamicCounts && countsLoading);\n  const error = categoriesError || countsError;\n  \n  // Estadísticas útiles\n  const stats = useMemo(() => {\n    const totalCategories = availableCategories.length;\n    const categoriesWithProducts = availableCategories.filter(cat => cat.products_count > 0).length;\n    const totalProducts = availableCategories.reduce((sum, cat) => sum + cat.products_count, 0);\n    const selectedCount = selectedCategories.length;\n    \n    return {\n      totalCategories,\n      categoriesWithProducts,\n      totalProducts,\n      selectedCount,\n      hasSelection: selectedCount > 0,\n    };\n  }, [availableCategories, selectedCategories]);\n  \n  return {\n    categories: availableCategories,\n    loading: isLoading,\n    error,\n    stats,\n    // Funciones de utilidad\n    getCategoryBySlug: (slug: string) => availableCategories.find(cat => cat.slug === slug),\n    getCategoryCount: (slug: string) => availableCategories.find(cat => cat.slug === slug)?.products_count || 0,\n    // Configuración\n    enableDynamicCounts,\n    baseFilters,\n    selectedCategories,\n  };\n};\n\n// ===================================\n// HOOK SIMPLIFICADO PARA CASOS COMUNES\n// ===================================\n\n/**\n * Hook simplificado para obtener categorías con conteos dinámicos\n * basados en filtros de búsqueda y otros filtros activos\n */\nexport const useCategoriesForFilters = (\n  searchTerm?: string,\n  selectedCategories: string[] = [],\n  otherFilters: Omit<ProductFilters, 'categories' | 'category' | 'search'> = {}\n) => {\n  const baseFilters = useMemo(() => ({\n    ...otherFilters,\n    ...(searchTerm && { search: searchTerm }),\n  }), [searchTerm, otherFilters]);\n  \n  return useCategoriesWithDynamicCounts({\n    baseFilters,\n    selectedCategories,\n    enableDynamicCounts: true,\n  });\n};\n\n// ===================================\n// HOOK PARA CONTEOS ESTÁTICOS (FALLBACK)\n// ===================================\n\n/**\n * Hook que devuelve categorías con conteos estáticos\n * Útil cuando no se necesitan conteos dinámicos o como fallback\n */\nexport const useCategoriesWithStaticCounts = () => {\n  return useCategoriesWithDynamicCounts({\n    enableDynamicCounts: false,\n  });\n};\n"],"names":["useCategoriesForFilters","useCategoriesWithDynamicCounts","useCategoriesWithStaticCounts","baseFilters","selectedCategories","enableDynamicCounts","categories","baseCategories","loading","categoriesLoading","error","categoriesError","useCategories","categoryIds","useMemo","map","cat","slug","filter","Boolean","data","dynamicCounts","isLoading","countsLoading","countsError","useCategoryProductCounts","categoriesWithDynamicCounts","length","category","dynamicCount","undefined","products_count","availableCategories","isSelected","includes","stats","totalCategories","categoriesWithProducts","totalProducts","reduce","sum","selectedCount","hasSelection","getCategoryBySlug","find","getCategoryCount","searchTerm","otherFilters","search"],"mappings":"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"}