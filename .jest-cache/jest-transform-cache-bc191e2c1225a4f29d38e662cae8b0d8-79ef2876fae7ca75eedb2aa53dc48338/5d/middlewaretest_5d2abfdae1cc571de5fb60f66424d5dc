a20ba4c75bc37c090f9738553796859a
/**
 * Tests para el middleware mejorado con Clerk
 * Verifica protección de rutas admin y funcionalidad básica
 */ "use strict";
// Mock de Clerk
jest.mock('@clerk/nextjs/server', ()=>({
        clerkMiddleware: (fn)=>fn,
        createRouteMatcher: (routes)=>(req)=>{
                const pathname = req.nextUrl?.pathname || req.url;
                return routes.some((route)=>{
                    const regex = new RegExp(route.replace(/\(\.\*\)/g, '.*'));
                    return regex.test(pathname);
                });
            }
    }));
// Mock del middleware de seguridad
jest.mock('../middleware/security', ()=>({
        securityMiddleware: jest.fn(()=>null)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
describe('Middleware con Clerk', ()=>{
    let mockAuth;
    let mockRequest;
    beforeEach(()=>{
        mockAuth = jest.fn();
        mockRequest = {
            nextUrl: {
                pathname: '/test',
                clone: ()=>new URL('http://localhost:3000/test')
            },
            url: 'http://localhost:3000/test',
            headers: new Map()
        };
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('Rutas estáticas', ()=>{
        it('debe permitir rutas _next sin procesamiento', async ()=>{
            mockRequest.nextUrl.pathname = '/_next/static/test.js';
            // El middleware debería retornar NextResponse.next() inmediatamente
            // Como es una función mock, verificamos que no se procese
            expect(mockRequest.nextUrl.pathname.startsWith('/_next')).toBe(true);
        });
        it('debe permitir archivos estáticos', async ()=>{
            const staticPaths = [
                '/favicon.ico',
                '/robots.txt',
                '/sitemap.xml',
                '/image.png',
                '/style.css'
            ];
            staticPaths.forEach((path)=>{
                mockRequest.nextUrl.pathname = path;
                const shouldSkip = path.startsWith('/favicon') || path.includes('.') || path === '/robots.txt' || path === '/sitemap.xml';
                expect(shouldSkip).toBe(true);
            });
        });
    });
    describe('Rutas públicas', ()=>{
        it('debe identificar correctamente rutas públicas', ()=>{
            const publicPaths = [
                '/',
                '/shop',
                '/shop/category/pinturas',
                '/search',
                '/search?q=pintura',
                '/product/123',
                '/category/decoracion',
                '/about',
                '/contact',
                '/signin',
                '/signup'
            ];
            // Simular createRouteMatcher para rutas públicas
            const isPublicRoute = (pathname)=>{
                const publicRoutes = [
                    '/',
                    '/shop(.*)',
                    '/search(.*)',
                    '/product(.*)',
                    '/category(.*)',
                    '/about',
                    '/contact',
                    '/signin(.*)',
                    '/signup(.*)'
                ];
                return publicRoutes.some((route)=>{
                    const regex = new RegExp('^' + route.replace(/\(\.\*\)/g, '.*') + '$');
                    return regex.test(pathname);
                });
            };
            publicPaths.forEach((path)=>{
                expect(isPublicRoute(path)).toBe(true);
            });
        });
        it('debe identificar correctamente APIs públicas', ()=>{
            const publicApiPaths = [
                '/api/products',
                '/api/products/123',
                '/api/categories',
                '/api/test',
                '/api/payments/create-preference',
                '/api/payments/webhook',
                '/api/debug/test'
            ];
            const isPublicApiRoute = (pathname)=>{
                const publicApiRoutes = [
                    '/api/products(.*)',
                    '/api/categories(.*)',
                    '/api/test(.*)',
                    '/api/payments/create-preference',
                    '/api/payments/webhook',
                    '/api/debug(.*)'
                ];
                return publicApiRoutes.some((route)=>{
                    const regex = new RegExp('^' + route.replace(/\(\.\*\)/g, '.*'));
                    return regex.test(pathname);
                });
            };
            publicApiPaths.forEach((path)=>{
                expect(isPublicApiRoute(path)).toBe(true);
            });
        });
    });
    describe('Rutas admin', ()=>{
        it('debe identificar correctamente rutas admin', ()=>{
            const adminPaths = [
                '/api/admin/products',
                '/api/admin/products/123',
                '/api/admin/users',
                '/api/admin/analytics'
            ];
            const isAdminRoute = (pathname)=>{
                const adminRoutes = [
                    '/api/admin(.*)'
                ];
                return adminRoutes.some((route)=>{
                    const regex = new RegExp('^' + route.replace(/\(\.\*\)/g, '.*'));
                    return regex.test(pathname);
                });
            };
            adminPaths.forEach((path)=>{
                expect(isAdminRoute(path)).toBe(true);
            });
        });
        it('debe rechazar rutas admin sin autenticación', ()=>{
            mockAuth.mockResolvedValue({
                userId: null
            });
            mockRequest.nextUrl.pathname = '/api/admin/products';
            // Simular verificación de autenticación
            const authResult = {
                userId: null
            };
            expect(authResult.userId).toBeNull();
        });
        it('debe rechazar rutas admin sin rol admin', ()=>{
            mockAuth.mockResolvedValue({
                userId: 'user_123',
                sessionClaims: {
                    metadata: {
                        role: 'user'
                    }
                }
            });
            mockRequest.nextUrl.pathname = '/api/admin/products';
            // Simular verificación de rol
            const authResult = {
                userId: 'user_123',
                sessionClaims: {
                    metadata: {
                        role: 'user'
                    }
                }
            };
            const userRole = authResult.sessionClaims?.metadata?.role;
            expect(userRole !== 'admin' && userRole !== 'moderator').toBe(true);
        });
        it('debe permitir rutas admin con rol admin', ()=>{
            mockAuth.mockResolvedValue({
                userId: 'user_123',
                sessionClaims: {
                    metadata: {
                        role: 'admin'
                    }
                }
            });
            mockRequest.nextUrl.pathname = '/api/admin/products';
            // Simular verificación de rol admin
            const authResult = {
                userId: 'user_123',
                sessionClaims: {
                    metadata: {
                        role: 'admin'
                    }
                }
            };
            const userRole = authResult.sessionClaims?.metadata?.role;
            expect(userRole === 'admin' || userRole === 'moderator').toBe(true);
        });
        it('debe permitir rutas admin con rol moderator', ()=>{
            mockAuth.mockResolvedValue({
                userId: 'user_456',
                sessionClaims: {
                    metadata: {
                        role: 'moderator'
                    }
                }
            });
            mockRequest.nextUrl.pathname = '/api/admin/users';
            // Simular verificación de rol moderator
            const authResult = {
                userId: 'user_456',
                sessionClaims: {
                    metadata: {
                        role: 'moderator'
                    }
                }
            };
            const userRole = authResult.sessionClaims?.metadata?.role;
            expect(userRole === 'admin' || userRole === 'moderator').toBe(true);
        });
    });
    describe('Manejo de errores', ()=>{
        it('debe manejar errores de autenticación gracefully', ()=>{
            mockAuth.mockRejectedValue(new Error('Auth service unavailable'));
            mockRequest.nextUrl.pathname = '/api/admin/products';
            // Simular manejo de error
            expect(()=>{
                throw new Error('Auth service unavailable');
            }).toThrow('Auth service unavailable');
        });
        it('debe aplicar fail-open para errores no críticos', ()=>{
            mockAuth.mockRejectedValue(new Error('Network timeout'));
            mockRequest.nextUrl.pathname = '/protected-page';
            // En caso de error no crítico, debería permitir acceso
            const shouldAllowAccess = true; // fail-open policy
            expect(shouldAllowAccess).toBe(true);
        });
    });
    describe('Configuración del matcher', ()=>{
        it('debe tener configuración correcta del matcher', ()=>{
            const expectedMatcher = [
                '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
                '/(api|trpc)(.*)'
            ];
            // Verificar que el matcher incluye las rutas correctas
            expect(expectedMatcher).toHaveLength(2);
            expect(expectedMatcher[0]).toContain('(?!_next');
            expect(expectedMatcher[1]).toContain('(api|trpc)');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,