bc037b1f11ad2b046e4cc745d9f45c86
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA CHECKOUT COMPONENT
// ===================================
"use strict";
// Mock next/navigation
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
jest.mock('@/hooks/useCheckout', ()=>({
        useCheckout: jest.fn(()=>mockUseCheckout)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _navigation = require("next/navigation");
const _Checkout = /*#__PURE__*/ _interop_require_default(require("../../components/Checkout"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock useCheckout hook con estructura correcta
const mockUseCheckout = {
    formData: {
        billing: {
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            streetAddress: '',
            city: '',
            state: '',
            zipCode: '',
            country: 'Argentina'
        },
        shipping: {
            differentAddress: false
        },
        paymentMethod: 'mercadopago',
        shippingMethod: 'free'
    },
    isLoading: false,
    errors: {},
    step: 'form',
    cartItems: [
        {
            id: '1',
            name: 'Pintura Blanca',
            price: 5000,
            quantity: 2,
            image: '/test-image.jpg'
        }
    ],
    totalPrice: 10000,
    shippingCost: 2500,
    discount: 0,
    finalTotal: 12500,
    appliedCoupon: null,
    applyCoupon: jest.fn(),
    updateBillingData: jest.fn(),
    updateShippingData: jest.fn(),
    updateFormData: jest.fn(),
    processCheckout: jest.fn()
};
const mockPush = jest.fn();
beforeEach(()=>{
    _navigation.useRouter.mockReturnValue({
        push: mockPush
    });
    jest.clearAllMocks();
    // Reset mock state
    mockUseCheckout.isLoading = false;
    mockUseCheckout.errors = {};
    mockUseCheckout.step = 'form';
    mockUseCheckout.cartItems = [
        {
            id: '1',
            name: 'Pintura Blanca',
            price: 5000,
            quantity: 2,
            image: '/test-image.jpg'
        }
    ];
});
describe('Checkout Component', ()=>{
    it('should render checkout form with cart items', async ()=>{
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        expect(_react1.screen.getByText('Checkout')).toBeInTheDocument();
        expect(_react1.screen.getByText('Datos de Facturación')).toBeInTheDocument();
    });
    it('should redirect to cart when no items', async ()=>{
        mockUseCheckout.cartItems = [];
        mockUseCheckout.step = 'form';
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        expect(mockPush).toHaveBeenCalledWith('/cart');
    });
    it('should handle form submission', async ()=>{
        const mockProcessCheckout = jest.fn().mockResolvedValue({
            success: true,
            init_point: 'https://mercadopago.com/checkout'
        });
        mockUseCheckout.processCheckout = mockProcessCheckout;
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        // Submit form
        const form = _react1.screen.getByRole('form');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.submit(form);
        });
        await (0, _react1.waitFor)(()=>{
            expect(mockProcessCheckout).toHaveBeenCalled();
        });
    });
    it('should display loading state', async ()=>{
        mockUseCheckout.isLoading = true;
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        expect(_react1.screen.getByText('Procesando...')).toBeInTheDocument();
    });
    it('should display error state', async ()=>{
        mockUseCheckout.errors = {
            general: 'Error procesando el pago'
        };
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        expect(_react1.screen.getByText('Error procesando el pago')).toBeInTheDocument();
    });
    it('should calculate shipping cost correctly', async ()=>{
        mockUseCheckout.shippingCost = 2500;
        mockUseCheckout.totalPrice = 10000;
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        // Should show shipping cost for orders under free shipping threshold
        const shippingElements = _react1.screen.getAllByText('$2.500');
        expect(shippingElements.length).toBeGreaterThan(0); // At least one shipping cost element
    });
    it('should show free shipping for large orders', async ()=>{
        mockUseCheckout.shippingCost = 0;
        mockUseCheckout.totalPrice = 30000;
        mockUseCheckout.cartItems = [
            {
                id: '1',
                name: 'Pintura Blanca',
                price: 30000,
                quantity: 1,
                image: '/test-image.jpg'
            }
        ];
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        // Should show free shipping for orders over threshold
        const freeShippingElements = _react1.screen.getAllByText('Gratis');
        expect(freeShippingElements.length).toBeGreaterThan(0); // At least one free shipping element
    });
    it('should validate required fields', async ()=>{
        mockUseCheckout.errors = {
            firstName: 'Nombre es requerido',
            email: 'Email es requerido'
        };
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        expect(_react1.screen.getByText('Nombre es requerido')).toBeInTheDocument();
        expect(_react1.screen.getByText('Email es requerido')).toBeInTheDocument();
    });
    it('should validate email format', async ()=>{
        mockUseCheckout.errors = {
            email: 'Email inválido'
        };
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        expect(_react1.screen.getByText('Email inválido')).toBeInTheDocument();
    });
    it('should handle empty cart error', async ()=>{
        mockUseCheckout.errors = {
            cart: 'El carrito está vacío'
        };
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkout.default, {}));
        });
        expect(_react1.screen.getByText('El carrito está vacío')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,