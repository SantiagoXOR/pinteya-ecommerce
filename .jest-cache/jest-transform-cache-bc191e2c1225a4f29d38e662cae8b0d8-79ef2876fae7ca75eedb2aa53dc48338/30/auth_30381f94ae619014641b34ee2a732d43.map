{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\auth.ts"],"sourcesContent":["/**\n * NextAuth.js v5 Configuration for Pinteya E-commerce\n * Configuración optimizada para producción con Google OAuth\n * Migración completa desde Clerk a NextAuth.js\n */\n\nimport NextAuth from \"next-auth\"\nimport GoogleProvider from \"next-auth/providers/google\"\n\n// Configuración de NextAuth.js v5 optimizada para producción\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  // Configuración de providers con validación\n  providers: [\n    GoogleProvider({\n      clientId: process.env.AUTH_GOOGLE_ID!,\n      clientSecret: process.env.AUTH_GOOGLE_SECRET!,\n      authorization: {\n        params: {\n          prompt: \"consent\",\n          access_type: \"offline\",\n          response_type: \"code\"\n        }\n      }\n    }),\n  ],\n\n  // Usar JWT strategy en lugar de adaptador de base de datos\n  // adapter: SupabaseAdapter({\n  //   url: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  //   secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  // }),\n\n  // Configuración de páginas personalizadas\n  pages: {\n    signIn: \"/auth/signin\",\n    error: \"/auth/error\",\n  },\n\n  // Configuración de base URL para producción\n  basePath: \"/api/auth\",\n\n  // Configuración de callbacks\n  callbacks: {\n    // Callback de sesión - JWT strategy simplificado\n    async session({ session, token }) {\n      // Agregar información adicional del usuario desde el token\n      if (token.sub) {\n        session.user.id = token.sub\n      }\n\n      return session\n    },\n\n    // Callback de JWT\n    async jwt({ token, user, account }) {\n      if (user) {\n        token.sub = user.id\n        token.email = user.email\n      }\n      return token\n    },\n\n    // Callback de autorización\n    async signIn({ user, account, profile }) {\n      // Permitir todos los sign-ins por ahora\n      // Aquí se pueden agregar validaciones adicionales\n      return true\n    },\n  },\n\n  // Configuración de eventos\n  events: {\n    async signIn({ user, account, profile, isNewUser }) {\n      console.log(`[NextAuth] Usuario autenticado: ${user.email}`)\n      \n      // Si es un nuevo usuario, crear entrada en tabla pública\n      if (isNewUser) {\n        console.log(`[NextAuth] Nuevo usuario registrado: ${user.email}`)\n      }\n    },\n    \n    async signOut({ session, token }) {\n      console.log(`[NextAuth] Usuario desconectado`)\n    },\n  },\n\n  // Configuración de sesión con JWT\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 días\n    updateAge: 24 * 60 * 60, // 24 horas\n  },\n\n  // Configuración de JWT para evitar problemas con Edge Runtime\n  jwt: {\n    maxAge: 30 * 24 * 60 * 60, // 30 días\n  },\n\n  // Configuración de debug\n  debug: process.env.NODE_ENV === \"development\",\n\n  // Configuración de trusted hosts para desarrollo y producción\n  trustHost: true,\n\n  // Configuración de cookies para producción\n  cookies: {\n    sessionToken: {\n      name: `${process.env.NODE_ENV === \"production\" ? \"__Secure-\" : \"\"}next-auth.session-token`,\n      options: {\n        httpOnly: true,\n        sameSite: \"lax\",\n        path: \"/\",\n        secure: process.env.NODE_ENV === \"production\",\n      },\n    },\n  },\n\n  // Configuración de secret para producción\n  secret: process.env.NEXTAUTH_SECRET,\n})\n\n// Tipos TypeScript para extender la sesión\ndeclare module \"next-auth\" {\n  interface Session {\n    supabaseAccessToken?: string\n    user: {\n      id: string\n      name?: string | null\n      email?: string | null\n      image?: string | null\n    }\n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    sub: string\n  }\n}\n"],"names":["auth","handlers","signIn","signOut","NextAuth","providers","GoogleProvider","clientId","process","env","AUTH_GOOGLE_ID","clientSecret","AUTH_GOOGLE_SECRET","authorization","params","prompt","access_type","response_type","pages","error","basePath","callbacks","session","token","sub","user","id","jwt","account","email","profile","events","isNewUser","console","log","strategy","maxAge","updateAge","debug","NODE_ENV","trustHost","cookies","sessionToken","name","options","httpOnly","sameSite","path","secure","secret","NEXTAUTH_SECRET"],"mappings":"AAAA;;;;CAIC;;;;;;;;;;;QAMwBA;eAAAA;;QAAVC;eAAAA;;QAAgBC;eAAAA;;QAAQC;eAAAA;;;iEAJlB;+DACM;;;;;;AAGpB,MAAM,EAAEF,QAAQ,EAAED,IAAI,EAAEE,MAAM,EAAEC,OAAO,EAAE,GAAGC,IAAAA,iBAAQ,EAAC;IAC1D,4CAA4C;IAC5CC,WAAW;QACTC,IAAAA,eAAc,EAAC;YACbC,UAAUC,QAAQC,GAAG,CAACC,cAAc;YACpCC,cAAcH,QAAQC,GAAG,CAACG,kBAAkB;YAC5CC,eAAe;gBACbC,QAAQ;oBACNC,QAAQ;oBACRC,aAAa;oBACbC,eAAe;gBACjB;YACF;QACF;KACD;IAED,2DAA2D;IAC3D,6BAA6B;IAC7B,gDAAgD;IAChD,oDAAoD;IACpD,MAAM;IAEN,0CAA0C;IAC1CC,OAAO;QACLhB,QAAQ;QACRiB,OAAO;IACT;IAEA,4CAA4C;IAC5CC,UAAU;IAEV,6BAA6B;IAC7BC,WAAW;QACT,iDAAiD;QACjD,MAAMC,SAAQ,EAAEA,OAAO,EAAEC,KAAK,EAAE;YAC9B,2DAA2D;YAC3D,IAAIA,MAAMC,GAAG,EAAE;gBACbF,QAAQG,IAAI,CAACC,EAAE,GAAGH,MAAMC,GAAG;YAC7B;YAEA,OAAOF;QACT;QAEA,kBAAkB;QAClB,MAAMK,KAAI,EAAEJ,KAAK,EAAEE,IAAI,EAAEG,OAAO,EAAE;YAChC,IAAIH,MAAM;gBACRF,MAAMC,GAAG,GAAGC,KAAKC,EAAE;gBACnBH,MAAMM,KAAK,GAAGJ,KAAKI,KAAK;YAC1B;YACA,OAAON;QACT;QAEA,2BAA2B;QAC3B,MAAMrB,QAAO,EAAEuB,IAAI,EAAEG,OAAO,EAAEE,OAAO,EAAE;YACrC,wCAAwC;YACxC,kDAAkD;YAClD,OAAO;QACT;IACF;IAEA,2BAA2B;IAC3BC,QAAQ;QACN,MAAM7B,QAAO,EAAEuB,IAAI,EAAEG,OAAO,EAAEE,OAAO,EAAEE,SAAS,EAAE;YAChDC,QAAQC,GAAG,CAAC,CAAC,gCAAgC,EAAET,KAAKI,KAAK,EAAE;YAE3D,yDAAyD;YACzD,IAAIG,WAAW;gBACbC,QAAQC,GAAG,CAAC,CAAC,qCAAqC,EAAET,KAAKI,KAAK,EAAE;YAClE;QACF;QAEA,MAAM1B,SAAQ,EAAEmB,OAAO,EAAEC,KAAK,EAAE;YAC9BU,QAAQC,GAAG,CAAC,CAAC,+BAA+B,CAAC;QAC/C;IACF;IAEA,kCAAkC;IAClCZ,SAAS;QACPa,UAAU;QACVC,QAAQ,KAAK,KAAK,KAAK;QACvBC,WAAW,KAAK,KAAK;IACvB;IAEA,8DAA8D;IAC9DV,KAAK;QACHS,QAAQ,KAAK,KAAK,KAAK;IACzB;IAEA,yBAAyB;IACzBE,OAAO9B,QAAQC,GAAG,CAAC8B,QAAQ,KAAK;IAEhC,8DAA8D;IAC9DC,WAAW;IAEX,2CAA2C;IAC3CC,SAAS;QACPC,cAAc;YACZC,MAAM,GAAGnC,QAAQC,GAAG,CAAC8B,QAAQ,KAAK,eAAe,cAAc,GAAG,uBAAuB,CAAC;YAC1FK,SAAS;gBACPC,UAAU;gBACVC,UAAU;gBACVC,MAAM;gBACNC,QAAQxC,QAAQC,GAAG,CAAC8B,QAAQ,KAAK;YACnC;QACF;IACF;IAEA,0CAA0C;IAC1CU,QAAQzC,QAAQC,GAAG,CAACyC,eAAe;AACrC"}