{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\rate-limiting.ts"],"sourcesContent":["/**\n * Sistema de Rate Limiting para APIs\n * Implementa límites de velocidad para prevenir ataques de fuerza bruta\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface RateLimitResult {\n  allowed: boolean;\n  limit: number;\n  remaining: number;\n  resetTime: number;\n  retryAfter?: number;\n  error?: string;\n  code?: string;\n}\n\nexport interface RateLimitConfig {\n  windowMs: number;  // Ventana de tiempo en milisegundos\n  maxRequests: number;  // Máximo número de requests por ventana\n  keyGenerator?: (request: NextRequest | NextApiRequest) => string;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n  message?: string;\n}\n\nexport interface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  firstRequest: number;\n}\n\n// =====================================================\n// CONFIGURACIONES DE RATE LIMITING\n// =====================================================\n\nexport const RATE_LIMIT_CONFIGS = {\n  // APIs de autenticación - muy restrictivo\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutos\n    maxRequests: 5, // 5 intentos por 15 minutos\n    message: 'Demasiados intentos de autenticación. Intenta de nuevo en 15 minutos.'\n  },\n  \n  // APIs admin - restrictivo (temporalmente aumentado para pruebas)\n  admin: {\n    windowMs: 1 * 60 * 1000, // 1 minuto\n    maxRequests: 100, // 100 requests por minuto\n    message: 'Demasiadas requests administrativas. Intenta de nuevo en 1 minuto.'\n  },\n  \n  // APIs de productos - moderado\n  products: {\n    windowMs: 1 * 60 * 1000, // 1 minuto\n    maxRequests: 60, // 60 requests por minuto\n    message: 'Demasiadas requests de productos. Intenta de nuevo en 1 minuto.'\n  },\n  \n  // APIs de pagos - muy restrictivo\n  payments: {\n    windowMs: 10 * 60 * 1000, // 10 minutos\n    maxRequests: 10, // 10 requests por 10 minutos\n    message: 'Demasiadas requests de pagos. Intenta de nuevo en 10 minutos.'\n  },\n  \n  // APIs generales - permisivo\n  general: {\n    windowMs: 1 * 60 * 1000, // 1 minuto\n    maxRequests: 100, // 100 requests por minuto\n    message: 'Demasiadas requests. Intenta de nuevo en 1 minuto.'\n  }\n};\n\n// =====================================================\n// ALMACENAMIENTO EN MEMORIA (Compatible con Edge Runtime)\n// =====================================================\n\nconst rateLimitStore = new Map<string, RateLimitEntry>();\n\n// Limpiar entradas expiradas cada 5 minutos\n// Solo en Node.js runtime, no en Edge Runtime\nif (typeof setInterval !== 'undefined' && typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  setInterval(() => {\n    const now = Date.now();\n    for (const [key, entry] of rateLimitStore.entries()) {\n      if (entry.resetTime < now) {\n        rateLimitStore.delete(key);\n      }\n    }\n  }, 5 * 60 * 1000);\n}\n\n// =====================================================\n// FUNCIONES DE RATE LIMITING\n// =====================================================\n\n/**\n * Genera una clave única para el rate limiting\n */\nfunction generateRateLimitKey(\n  request: NextRequest | NextApiRequest,\n  prefix: string = 'default'\n): string {\n  // Obtener IP del cliente\n  let clientIP = 'unknown';\n  \n  if ('ip' in request && request.ip) {\n    clientIP = request.ip;\n  } else if ('headers' in request) {\n    // Intentar obtener IP de headers\n    const forwarded = getHeader(request, 'x-forwarded-for');\n    const realIP = getHeader(request, 'x-real-ip');\n    const cfIP = getHeader(request, 'cf-connecting-ip');\n    \n    clientIP = forwarded?.split(',')[0] || realIP || cfIP || 'unknown';\n  }\n\n  // Obtener User-Agent para mayor especificidad\n  const userAgent = getHeader(request, 'user-agent') || 'unknown';\n  const userAgentHash = hashString(userAgent);\n\n  return `${prefix}:${clientIP}:${userAgentHash}`;\n}\n\n/**\n * Obtiene un header de manera compatible\n */\nfunction getHeader(\n  request: NextRequest | NextApiRequest,\n  headerName: string\n): string | null {\n  if ('headers' in request && typeof request.headers.get === 'function') {\n    return (request as NextRequest).headers.get(headerName);\n  } else if ('headers' in request) {\n    const header = (request as NextApiRequest).headers[headerName];\n    return Array.isArray(header) ? header[0] : header || null;\n  }\n  return null;\n}\n\n/**\n * Hash simple para User-Agent\n */\nfunction hashString(str: string): string {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convertir a 32-bit integer\n  }\n  return Math.abs(hash).toString(36);\n}\n\n/**\n * Verifica si una request está dentro de los límites\n */\nexport async function checkRateLimit(\n  request: NextRequest | NextApiRequest,\n  config: RateLimitConfig,\n  keyPrefix: string = 'api'\n): Promise<RateLimitResult> {\n  // Bypass temporal para pruebas de desarrollo\n  if (process.env.NODE_ENV === 'development' && keyPrefix === 'admin-orders') {\n    return {\n      allowed: true,\n      limit: config.maxRequests,\n      remaining: config.maxRequests,\n      resetTime: Date.now() + config.windowMs\n    };\n  }\n  \n  try {\n    const now = Date.now();\n    const key = config.keyGenerator \n      ? config.keyGenerator(request)\n      : generateRateLimitKey(request, keyPrefix);\n\n    // Obtener entrada actual o crear nueva\n    let entry = rateLimitStore.get(key);\n    \n    if (!entry || entry.resetTime < now) {\n      // Crear nueva entrada\n      entry = {\n        count: 1,\n        resetTime: now + config.windowMs,\n        firstRequest: now\n      };\n      rateLimitStore.set(key, entry);\n      \n      return {\n        allowed: true,\n        limit: config.maxRequests,\n        remaining: config.maxRequests - 1,\n        resetTime: entry.resetTime\n      };\n    }\n\n    // Incrementar contador\n    entry.count++;\n    rateLimitStore.set(key, entry);\n\n    // Verificar si excede el límite\n    if (entry.count > config.maxRequests) {\n      const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n      \n      return {\n        allowed: false,\n        limit: config.maxRequests,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter,\n        error: config.message || 'Rate limit exceeded',\n        code: 'RATE_LIMIT_EXCEEDED'\n      };\n    }\n\n    return {\n      allowed: true,\n      limit: config.maxRequests,\n      remaining: config.maxRequests - entry.count,\n      resetTime: entry.resetTime\n    };\n\n  } catch (error) {\n    console.error('[RATE_LIMIT] Error en verificación:', error);\n    \n    // En caso de error, permitir la request pero loggear\n    return {\n      allowed: true,\n      limit: config.maxRequests,\n      remaining: config.maxRequests,\n      resetTime: Date.now() + config.windowMs,\n      error: 'Error interno en rate limiting'\n    };\n  }\n}\n\n/**\n * Middleware de rate limiting\n */\nexport function withRateLimit(\n  configName: keyof typeof RATE_LIMIT_CONFIGS,\n  customConfig?: Partial<RateLimitConfig>\n) {\n  const baseConfig = RATE_LIMIT_CONFIGS[configName];\n  const config = { ...baseConfig, ...customConfig };\n\n  return function (handler: Function) {\n    return async (request: NextRequest | NextApiRequest, ...args: any[]) => {\n      try {\n        const rateLimitResult = await checkRateLimit(request, config, configName);\n        \n        // Añadir headers de rate limiting\n        const headers = {\n          'X-RateLimit-Limit': rateLimitResult.limit.toString(),\n          'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\n          'X-RateLimit-Reset': Math.ceil(rateLimitResult.resetTime / 1000).toString()\n        };\n\n        if (rateLimitResult.retryAfter) {\n          headers['Retry-After'] = rateLimitResult.retryAfter.toString();\n        }\n\n        if (!rateLimitResult.allowed) {\n          const errorResponse = {\n            success: false,\n            error: rateLimitResult.error,\n            code: rateLimitResult.code,\n            rateLimit: {\n              limit: rateLimitResult.limit,\n              remaining: rateLimitResult.remaining,\n              resetTime: rateLimitResult.resetTime,\n              retryAfter: rateLimitResult.retryAfter\n            }\n          };\n\n          if ('query' in request) {\n            // Pages Router\n            const res = args[0] as any;\n            Object.entries(headers).forEach(([key, value]) => {\n              res.setHeader(key, value);\n            });\n            return res.status(429).json(errorResponse);\n          } else {\n            // App Router\n            return new Response(JSON.stringify(errorResponse), {\n              status: 429,\n              headers: {\n                'Content-Type': 'application/json',\n                ...headers\n              }\n            });\n          }\n        }\n\n        // Añadir información de rate limiting al request\n        (request as any).rateLimit = rateLimitResult;\n\n        // Ejecutar handler original\n        const response = await handler(request, ...args);\n\n        // Añadir headers a la respuesta si es posible\n        if (response && typeof response.headers?.set === 'function') {\n          Object.entries(headers).forEach(([key, value]) => {\n            response.headers.set(key, value);\n          });\n        }\n\n        return response;\n\n      } catch (error) {\n        console.error('[RATE_LIMIT] Error en middleware:', error);\n        return handler(request, ...args);\n      }\n    };\n  };\n}\n\n/**\n * Rate limiting específico para APIs de autenticación\n */\nexport function withAuthRateLimit() {\n  return withRateLimit('auth');\n}\n\n/**\n * Rate limiting específico para APIs admin\n */\nexport function withAdminRateLimit() {\n  return withRateLimit('admin');\n}\n\n/**\n * Rate limiting específico para APIs de productos\n */\nexport function withProductRateLimit() {\n  return withRateLimit('products');\n}\n\n/**\n * Rate limiting específico para APIs de pagos\n */\nexport function withPaymentRateLimit() {\n  return withRateLimit('payments');\n}\n\n/**\n * Función para limpiar manualmente el rate limit de una clave\n */\nexport function clearRateLimit(key: string): boolean {\n  return rateLimitStore.delete(key);\n}\n\n/**\n * Función para obtener estadísticas de rate limiting\n */\nexport function getRateLimitStats(): {\n  totalKeys: number;\n  activeEntries: number;\n  oldestEntry: number | null;\n  newestEntry: number | null;\n} {\n  const now = Date.now();\n  const entries = Array.from(rateLimitStore.values());\n  const activeEntries = entries.filter(entry => entry.resetTime > now);\n  \n  return {\n    totalKeys: rateLimitStore.size,\n    activeEntries: activeEntries.length,\n    oldestEntry: entries.length > 0 ? Math.min(...entries.map(e => e.firstRequest)) : null,\n    newestEntry: entries.length > 0 ? Math.max(...entries.map(e => e.firstRequest)) : null\n  };\n}\n"],"names":["RATE_LIMIT_CONFIGS","checkRateLimit","clearRateLimit","getRateLimitStats","withAdminRateLimit","withAuthRateLimit","withPaymentRateLimit","withProductRateLimit","withRateLimit","auth","windowMs","maxRequests","message","admin","products","payments","general","rateLimitStore","Map","setInterval","process","env","NODE_ENV","now","Date","key","entry","entries","resetTime","delete","generateRateLimitKey","request","prefix","clientIP","ip","forwarded","getHeader","realIP","cfIP","split","userAgent","userAgentHash","hashString","headerName","headers","get","header","Array","isArray","str","hash","i","length","char","charCodeAt","Math","abs","toString","config","keyPrefix","allowed","limit","remaining","keyGenerator","count","firstRequest","set","retryAfter","ceil","error","code","console","configName","customConfig","baseConfig","handler","args","rateLimitResult","errorResponse","success","rateLimit","res","Object","forEach","value","setHeader","status","json","Response","JSON","stringify","response","from","values","activeEntries","filter","totalKeys","size","oldestEntry","min","map","e","newestEntry","max"],"mappings":"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"}