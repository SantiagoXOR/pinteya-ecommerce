e159b09265dbc74406730278ffa1f1e3
// ===================================
// TESTS: useSearch Hook - Sistema de búsqueda centralizado
// ===================================
"use strict";
// ===================================
// MOCKS
// ===================================
// Mock Next.js router
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
// Mock API de productos
jest.mock('@/lib/api/products', ()=>({
        searchProducts: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _navigation = require("next/navigation");
const _useSearch = require("../../hooks/useSearch");
const _products = require("../../lib/api/products");
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// ===================================
// SETUP
// ===================================
const mockPush = jest.fn();
const mockSearchProducts = _products.searchProducts;
beforeEach(()=>{
    jest.clearAllMocks();
    _navigation.useRouter.mockReturnValue({
        push: mockPush
    });
    localStorageMock.getItem.mockReturnValue(null);
});
// ===================================
// TESTS BÁSICOS
// ===================================
describe('useSearch Hook', ()=>{
    it('should initialize with default state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)());
        expect(result.current.query).toBe('');
        expect(result.current.results).toEqual([]);
        expect(result.current.suggestions).toEqual([]);
        expect(result.current.isLoading).toBe(false);
        expect(result.current.error).toBe(null);
        expect(result.current.hasSearched).toBe(false);
    });
    it('should accept custom options', ()=>{
        const onSearch = jest.fn();
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)({
                debounceMs: 200,
                maxSuggestions: 5,
                onSearch
            }));
        expect(typeof result.current.executeSearch).toBe('function');
        expect(typeof result.current.searchWithDebounce).toBe('function');
    });
});
// ===================================
// TESTS DE BÚSQUEDA
// ===================================
describe('useSearch - Search Functionality', ()=>{
    it('should execute search and navigate to results page', async ()=>{
        const mockResponse = {
            success: true,
            data: [
                {
                    id: '1',
                    name: 'Producto 1',
                    price: 100
                },
                {
                    id: '2',
                    name: 'Producto 2',
                    price: 200
                }
            ],
            pagination: {
                total: 2,
                page: 1,
                limit: 12,
                totalPages: 1
            }
        };
        mockSearchProducts.mockResolvedValue(mockResponse);
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)());
        await (0, _react.act)(async ()=>{
            await result.current.executeSearch('pintura');
        });
        await (0, _react.waitFor)(()=>{
            expect(mockSearchProducts).toHaveBeenCalledWith('pintura', 12);
            expect(mockPush).toHaveBeenCalledWith('/search?q=pintura');
            expect(result.current.results).toEqual(mockResponse.data);
            expect(result.current.hasSearched).toBe(true);
            expect(result.current.error).toBe(null);
        });
    });
    it('should handle search with category', async ()=>{
        const mockResponse = {
            success: true,
            data: [],
            pagination: {
                total: 0,
                page: 1,
                limit: 12,
                totalPages: 0
            }
        };
        mockSearchProducts.mockResolvedValue(mockResponse);
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)());
        await (0, _react.act)(async ()=>{
            await result.current.executeSearch('pintura', 'pinturas');
        });
        await (0, _react.waitFor)(()=>{
            expect(mockPush).toHaveBeenCalledWith('/search?q=pintura&category=pinturas');
        });
    });
    it('should handle search errors', async ()=>{
        const mockError = new Error('Network error');
        mockSearchProducts.mockRejectedValue(mockError);
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)());
        await (0, _react.act)(async ()=>{
            await result.current.executeSearch('pintura');
        });
        await (0, _react.waitFor)(()=>{
            expect(result.current.error).toBeTruthy();
            expect(result.current.results).toEqual([]);
            expect(result.current.hasSearched).toBe(true);
        });
    });
});
// ===================================
// TESTS DE DEBOUNCING
// ===================================
describe('useSearch - Debouncing', ()=>{
    beforeEach(()=>{
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.useRealTimers();
    });
    it('should debounce search requests', async ()=>{
        const mockResponse = {
            success: true,
            data: [],
            pagination: {
                total: 0,
                page: 1,
                limit: 8,
                totalPages: 0
            }
        };
        mockSearchProducts.mockResolvedValue(mockResponse);
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)({
                debounceMs: 150
            }));
        // Múltiples llamadas rápidas
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('p');
            result.current.searchWithDebounce('pi');
            result.current.searchWithDebounce('pin');
            result.current.searchWithDebounce('pint');
            result.current.searchWithDebounce('pintu');
            result.current.searchWithDebounce('pintura');
        });
        // Avanzar el timer
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(150);
        });
        await (0, _react.waitFor)(()=>{
            // Solo debería haberse llamado una vez con el último valor
            expect(mockSearchProducts).toHaveBeenCalledTimes(1);
            expect(mockSearchProducts).toHaveBeenCalledWith('pintura', 8);
        });
    });
    it('should cancel previous debounced calls', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)({
                debounceMs: 150
            }));
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('pintura');
        });
        // Avanzar solo 100ms (menos que el debounce)
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(100);
        });
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('esmalte');
        });
        // Avanzar otros 150ms
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(150);
        });
        await (0, _react.waitFor)(()=>{
            // Solo debería buscar 'esmalte', no 'pintura'
            expect(mockSearchProducts).toHaveBeenCalledTimes(1);
            expect(mockSearchProducts).toHaveBeenCalledWith('esmalte', 8);
        });
    });
});
// ===================================
// TESTS DE SUGERENCIAS
// ===================================
describe('useSearch - Suggestions', ()=>{
    it('should handle suggestion selection', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)());
        const suggestion = {
            id: 'test-1',
            type: 'product',
            title: 'Pintura Látex',
            href: '/products/pintura-latex'
        };
        (0, _react.act)(()=>{
            result.current.selectSuggestion(suggestion);
        });
        expect(mockPush).toHaveBeenCalledWith('/products/pintura-latex');
    });
});
// ===================================
// TESTS DE BÚSQUEDAS RECIENTES
// ===================================
describe('useSearch - Recent Searches', ()=>{
    it('should save recent searches to localStorage', async ()=>{
        const mockResponse = {
            success: true,
            data: [
                {
                    id: '1',
                    name: 'Producto',
                    price: 100
                }
            ],
            pagination: {
                total: 1,
                page: 1,
                limit: 12,
                totalPages: 1
            }
        };
        mockSearchProducts.mockResolvedValue(mockResponse);
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)({
                saveRecentSearches: true
            }));
        await (0, _react.act)(async ()=>{
            await result.current.executeSearch('pintura');
        });
        await (0, _react.waitFor)(()=>{
            expect(localStorageMock.setItem).toHaveBeenCalledWith('pinteya-recent-searches', expect.stringContaining('pintura'));
        });
    });
    it('should load recent searches from localStorage', ()=>{
        const recentSearches = [
            'pintura',
            'esmalte',
            'barniz'
        ];
        localStorageMock.getItem.mockReturnValue(JSON.stringify(recentSearches));
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)({
                saveRecentSearches: true
            }));
        (0, _react.act)(()=>{
            result.current.initialize();
        });
        expect(result.current.recentSearches).toEqual(recentSearches);
    });
});
// ===================================
// TESTS DE CLEANUP
// ===================================
describe('useSearch - Cleanup', ()=>{
    it('should cleanup timeouts on unmount', async ()=>{
        const clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
        const { result, unmount } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)());
        // Activar búsqueda para crear timeouts
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('test');
        });
        // Esperar un poco para que se establezcan los timeouts (optimizado)
        await (0, _react.act)(async ()=>{
            await new Promise((resolve)=>setTimeout(resolve, 50));
        });
        // Llamar cleanup explícitamente antes de unmount
        (0, _react.act)(()=>{
            result.current.cleanup();
        });
        unmount();
        expect(clearTimeoutSpy).toHaveBeenCalled();
        clearTimeoutSpy.mockRestore();
    });
    it('should clear search state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearch.useSearch)());
        // Simular estado con datos
        (0, _react.act)(()=>{
            result.current.clearSearch();
        });
        expect(result.current.query).toBe('');
        expect(result.current.results).toEqual([]);
        expect(result.current.suggestions).toEqual([]);
        expect(result.current.error).toBe(null);
        expect(result.current.hasSearched).toBe(false);
    });
});

//# sourceMappingURL=data:application/json;base64,