18e63bf1920d70f09b433ebe13811fbb
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ProactiveMonitoringService () {
        return ProactiveMonitoringService;
    },
    get proactiveMonitoring () {
        return proactiveMonitoring;
    },
    get reportError () {
        return reportError;
    },
    get startMonitoring () {
        return startMonitoring;
    },
    get stopMonitoring () {
        return stopMonitoring;
    }
});
const _logger = require("../logger");
const _alertsystem = require("./alert-system");
const _enterprisemetrics = require("./enterprise-metrics");
const _email = require("../notifications/email");
const _slack = require("../notifications/slack");
class ProactiveMonitoringService {
    static getInstance() {
        if (!ProactiveMonitoringService.instance) {
            ProactiveMonitoringService.instance = new ProactiveMonitoringService();
        }
        return ProactiveMonitoringService.instance;
    }
    constructor(){
        this.errorPatterns = new Map();
        this.errorCounts = new Map();
        this.healthChecks = new Map();
        this.monitoringInterval = null;
        // Solo inicializar en el servidor
        if (typeof window === 'undefined') {
            this.alertSystem = _alertsystem.EnterpriseAlertSystem.getInstance();
            this.metricsCollector = _enterprisemetrics.EnterpriseMetricsCollector.getInstance();
        }
        this.config = {
            enabled: true,
            checkInterval: 30,
            errorThreshold: 5,
            responseTimeThreshold: 2000,
            memoryThreshold: 80,
            cpuThreshold: 70,
            enableAutoRecovery: true,
            notificationChannels: [
                'email',
                'slack'
            ]
        };
        this.initializeDefaultPatterns();
    }
    initializeDefaultPatterns() {
        const defaultPatterns = [
            {
                id: 'database_connection_error',
                name: 'Database Connection Error',
                pattern: /database.*connection.*failed|connection.*timeout|pool.*exhausted/i,
                severity: 'critical',
                threshold: 3,
                timeWindow: 5,
                description: 'Errores de conexión a la base de datos',
                isActive: true
            },
            {
                id: 'payment_processing_error',
                name: 'Payment Processing Error',
                pattern: /payment.*failed|transaction.*error|mercadopago.*error/i,
                severity: 'high',
                threshold: 5,
                timeWindow: 10,
                description: 'Errores en el procesamiento de pagos',
                isActive: true
            },
            {
                id: 'authentication_error',
                name: 'Authentication Error',
                pattern: /auth.*failed|unauthorized|invalid.*token|session.*expired/i,
                severity: 'medium',
                threshold: 10,
                timeWindow: 15,
                description: 'Errores de autenticación',
                isActive: true
            },
            {
                id: 'api_rate_limit',
                name: 'API Rate Limit Exceeded',
                pattern: /rate.*limit.*exceeded|too.*many.*requests|429/i,
                severity: 'medium',
                threshold: 20,
                timeWindow: 5,
                description: 'Límite de velocidad de API excedido',
                isActive: true
            },
            {
                id: 'server_error',
                name: 'Internal Server Error',
                pattern: /internal.*server.*error|500.*error|unhandled.*exception/i,
                severity: 'high',
                threshold: 5,
                timeWindow: 10,
                description: 'Errores internos del servidor',
                isActive: true
            }
        ];
        defaultPatterns.forEach((pattern)=>{
            this.errorPatterns.set(pattern.id, pattern);
        });
    }
    /**
   * Inicia el monitoreo proactivo
   */ start() {
        // Solo ejecutar en el servidor
        if (typeof window !== 'undefined') {
            return;
        }
        if (!this.config.enabled) {
            _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring is disabled', {}, _logger.LogCategory.SYSTEM);
            return;
        }
        if (this.monitoringInterval) {
            this.stop();
        }
        this.monitoringInterval = setInterval(()=>{
            this.performHealthCheck();
        }, this.config.checkInterval * 1000);
        _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring started', {
            interval: this.config.checkInterval,
            patterns: this.errorPatterns.size
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Detiene el monitoreo proactivo
   */ stop() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
            _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring stopped', {}, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Registra un error para análisis
   */ async reportError(error, context) {
        const errorMessage = error instanceof Error ? error.message : error;
        const errorStack = error instanceof Error ? error.stack : undefined;
        // Solo procesar en el servidor
        if (typeof window === 'undefined') {
            // Analizar patrones de error
            for (const [patternId, pattern] of this.errorPatterns){
                if (!pattern.isActive) continue;
                const regex = pattern.pattern instanceof RegExp ? pattern.pattern : new RegExp(pattern.pattern, 'i');
                if (regex.test(errorMessage)) {
                    await this.handlePatternMatch(patternId, pattern, errorMessage, context);
                }
            }
            // Registrar métricas si está disponible
            if (this.metricsCollector) {
                await this.metricsCollector.recordMetric('errors_total', 1, undefined, undefined, {
                    type: 'application_error',
                    ...context
                });
            }
        }
        // Log del error
        _logger.logger.error(_logger.LogLevel.ERROR, 'Error reported to monitoring', {
            error: errorMessage,
            stack: errorStack,
            context
        }, _logger.LogCategory.SYSTEM);
    }
    async handlePatternMatch(patternId, pattern, errorMessage, context) {
        const now = new Date();
        const key = `${patternId}_${Math.floor(now.getTime() / (pattern.timeWindow * 60 * 1000))}`;
        const existing = this.errorCounts.get(key);
        if (existing) {
            existing.count++;
            existing.lastSeen = now;
        } else {
            this.errorCounts.set(key, {
                count: 1,
                firstSeen: now,
                lastSeen: now
            });
        }
        const errorCount = this.errorCounts.get(key);
        // Verificar si se alcanzó el umbral (solo en servidor)
        if (errorCount.count >= pattern.threshold && this.alertSystem) {
            await this.triggerAlert(pattern, errorCount, errorMessage, context);
            // Limpiar contador para evitar spam de alertas
            this.errorCounts.delete(key);
        }
    }
    async triggerAlert(pattern, errorCount, errorMessage, context) {
        const alert = {
            id: `pattern_${pattern.id}_${Date.now()}`,
            title: `Error Pattern Detected: ${pattern.name}`,
            message: `Pattern "${pattern.name}" detected ${errorCount.count} times in ${pattern.timeWindow} minutes`,
            severity: pattern.severity,
            details: {
                pattern: pattern.name,
                description: pattern.description,
                count: errorCount.count,
                threshold: pattern.threshold,
                timeWindow: pattern.timeWindow,
                firstSeen: errorCount.firstSeen.toISOString(),
                lastSeen: errorCount.lastSeen.toISOString(),
                lastError: errorMessage,
                context
            }
        };
        // Enviar notificaciones
        if (this.config.notificationChannels.includes('email')) {
            await this.sendEmailAlert(alert);
        }
        if (this.config.notificationChannels.includes('slack')) {
            await this.sendSlackAlert(alert);
        }
        _logger.logger.warn(_logger.LogLevel.WARN, 'Error pattern alert triggered', alert, _logger.LogCategory.SYSTEM);
    }
    async sendEmailAlert(alert) {
        try {
            await _email.emailService.sendNotification({
                to: [
                    'admin@example.com'
                ],
                subject: `🚨 ${alert.title}`,
                template: 'error-pattern-alert',
                data: alert,
                priority: alert.severity === 'critical' ? 'high' : 'normal'
            });
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to send email alert', {
                error
            }, _logger.LogCategory.SYSTEM);
        }
    }
    async sendSlackAlert(alert) {
        try {
            await _slack.slackService.sendErrorAlert({
                error: alert.message,
                context: alert.title,
                timestamp: new Date(),
                severity: alert.severity
            });
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to send Slack alert', {
                error
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Realiza verificación de salud del sistema
   */ async performHealthCheck() {
        try {
            const health = await this.getSystemHealth();
            // Verificar umbrales críticos
            if (health.status === 'critical' || health.status === 'down') {
                await this.handleCriticalHealth(health);
            } else if (health.status === 'warning') {
                await this.handleWarningHealth(health);
            }
            // Actualizar métricas si está disponible
            if (this.metricsCollector) {
                await this.metricsCollector.recordMetric('system_health_score', this.calculateHealthScore(health));
                await this.metricsCollector.recordMetric('system_response_time', health.responseTime);
                await this.metricsCollector.recordMetric('system_error_rate', health.errorRate);
                await this.metricsCollector.recordMetric('system_memory_usage', health.memoryUsage);
                await this.metricsCollector.recordMetric('system_cpu_usage', health.cpuUsage);
            }
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Health check failed', {
                error: error instanceof Error ? error.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        }
    }
    async getSystemHealth() {
        const issues = [];
        let status = 'healthy';
        // Simular verificaciones de salud (en producción, estas serían verificaciones reales)
        const responseTime = Math.random() * 1000 + 200 // 200-1200ms
        ;
        const errorRate = Math.random() * 5 // 0-5%
        ;
        const memoryUsage = Math.random() * 40 + 40 // 40-80%
        ;
        const cpuUsage = Math.random() * 30 + 20 // 20-50%
        ;
        const activeConnections = Math.floor(Math.random() * 100) + 50;
        // Verificar umbrales
        if (responseTime > this.config.responseTimeThreshold) {
            issues.push({
                id: 'high_response_time',
                type: 'performance',
                severity: 'medium',
                message: 'High response time detected',
                details: {
                    responseTime,
                    threshold: this.config.responseTimeThreshold
                },
                firstDetected: new Date(),
                lastSeen: new Date(),
                count: 1
            });
            status = 'warning';
        }
        if (errorRate > this.config.errorThreshold) {
            issues.push({
                id: 'high_error_rate',
                type: 'error',
                severity: 'high',
                message: 'High error rate detected',
                details: {
                    errorRate,
                    threshold: this.config.errorThreshold
                },
                firstDetected: new Date(),
                lastSeen: new Date(),
                count: 1
            });
            status = 'critical';
        }
        if (memoryUsage > this.config.memoryThreshold) {
            issues.push({
                id: 'high_memory_usage',
                type: 'resource',
                severity: 'medium',
                message: 'High memory usage detected',
                details: {
                    memoryUsage,
                    threshold: this.config.memoryThreshold
                },
                firstDetected: new Date(),
                lastSeen: new Date(),
                count: 1
            });
            if (status === 'healthy') status = 'warning';
        }
        return {
            status,
            uptime: typeof process !== 'undefined' && process.uptime ? process.uptime() : Date.now() / 1000,
            responseTime,
            errorRate,
            memoryUsage,
            cpuUsage,
            activeConnections,
            lastCheck: new Date(),
            issues
        };
    }
    calculateHealthScore(health) {
        let score = 100;
        health.issues.forEach((issue)=>{
            switch(issue.severity){
                case 'critical':
                    score -= 30;
                    break;
                case 'high':
                    score -= 20;
                    break;
                case 'medium':
                    score -= 10;
                    break;
                case 'low':
                    score -= 5;
                    break;
            }
        });
        return Math.max(0, score);
    }
    async handleCriticalHealth(health) {
        _logger.logger.error(_logger.LogLevel.ERROR, 'Critical system health detected', {
            health
        }, _logger.LogCategory.SYSTEM);
        // Enviar alertas críticas
        await this.sendSlackAlert({
            title: '🚨 CRITICAL: System Health Alert',
            message: 'System health is critical - immediate attention required',
            severity: 'critical',
            details: health
        });
        // Auto-recovery si está habilitado
        if (this.config.enableAutoRecovery) {
            await this.attemptAutoRecovery(health);
        }
    }
    async handleWarningHealth(health) {
        _logger.logger.warn(_logger.LogLevel.WARN, 'System health warning', {
            health
        }, _logger.LogCategory.SYSTEM);
    }
    async attemptAutoRecovery(health) {
        _logger.logger.info(_logger.LogLevel.INFO, 'Attempting auto-recovery', {
            health
        }, _logger.LogCategory.SYSTEM);
    // Implementar lógica de auto-recuperación
    // Por ejemplo: reiniciar servicios, limpiar cache, etc.
    }
    /**
   * Configuración del servicio
   */ updateConfig(newConfig) {
        this.config = {
            ...this.config,
            ...newConfig
        };
        if (this.config.enabled && !this.monitoringInterval) {
            this.start();
        } else if (!this.config.enabled && this.monitoringInterval) {
            this.stop();
        }
    }
    getConfig() {
        return {
            ...this.config
        };
    }
    /**
   * Gestión de patrones de error
   */ addErrorPattern(pattern) {
        this.errorPatterns.set(pattern.id, pattern);
        _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern added', {
            patternId: pattern.id
        }, _logger.LogCategory.SYSTEM);
    }
    removeErrorPattern(patternId) {
        this.errorPatterns.delete(patternId);
        _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern removed', {
            patternId
        }, _logger.LogCategory.SYSTEM);
    }
    getErrorPatterns() {
        return Array.from(this.errorPatterns.values());
    }
    /**
   * Obtener estadísticas de monitoreo
   */ async getMonitoringStats() {
        const totalErrors = Array.from(this.errorCounts.values()).reduce((sum, count)=>sum + count.count, 0);
        const activePatterns = Array.from(this.errorPatterns.values()).filter((p)=>p.isActive).length;
        const recentAlerts = this.alertSystem ? Array.from(this.errorCounts.values()).filter((count)=>Date.now() - count.lastSeen.getTime() < 24 * 60 * 60 * 1000).length : 0;
        const systemHealth = await this.getSystemHealth();
        return {
            totalErrors,
            activePatterns,
            recentAlerts,
            systemHealth
        };
    }
}
const proactiveMonitoring = ProactiveMonitoringService.getInstance();
const reportError = (error, context)=>proactiveMonitoring.reportError(error, context);
const startMonitoring = ()=>proactiveMonitoring.start();
const stopMonitoring = ()=>proactiveMonitoring.stop();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxtb25pdG9yaW5nXFxwcm9hY3RpdmUtbW9uaXRvcmluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgbG9nZ2VyLCBMb2dMZXZlbCwgTG9nQ2F0ZWdvcnkgfSBmcm9tICcuLi9sb2dnZXInXG5pbXBvcnQgeyBFbnRlcnByaXNlQWxlcnRTeXN0ZW0gfSBmcm9tICcuL2FsZXJ0LXN5c3RlbSdcbmltcG9ydCB7IEVudGVycHJpc2VNZXRyaWNzQ29sbGVjdG9yIH0gZnJvbSAnLi9lbnRlcnByaXNlLW1ldHJpY3MnXG5pbXBvcnQgeyBlbWFpbFNlcnZpY2UgfSBmcm9tICcuLi9ub3RpZmljYXRpb25zL2VtYWlsJ1xuaW1wb3J0IHsgc2xhY2tTZXJ2aWNlIH0gZnJvbSAnLi4vbm90aWZpY2F0aW9ucy9zbGFjaydcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvclBhdHRlcm4ge1xuICBpZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBwYXR0ZXJuOiBSZWdFeHAgfCBzdHJpbmdcbiAgc2V2ZXJpdHk6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAnY3JpdGljYWwnXG4gIHRocmVzaG9sZDogbnVtYmVyIC8vIE7Dum1lcm8gZGUgb2N1cnJlbmNpYXMgYW50ZXMgZGUgYWxlcnRhclxuICB0aW1lV2luZG93OiBudW1iZXIgLy8gVmVudGFuYSBkZSB0aWVtcG8gZW4gbWludXRvc1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIGlzQWN0aXZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3lzdGVtSGVhbHRoIHtcbiAgc3RhdHVzOiAnaGVhbHRoeScgfCAnd2FybmluZycgfCAnY3JpdGljYWwnIHwgJ2Rvd24nXG4gIHVwdGltZTogbnVtYmVyXG4gIHJlc3BvbnNlVGltZTogbnVtYmVyXG4gIGVycm9yUmF0ZTogbnVtYmVyXG4gIG1lbW9yeVVzYWdlOiBudW1iZXJcbiAgY3B1VXNhZ2U6IG51bWJlclxuICBhY3RpdmVDb25uZWN0aW9uczogbnVtYmVyXG4gIGxhc3RDaGVjazogRGF0ZVxuICBpc3N1ZXM6IEhlYWx0aElzc3VlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBIZWFsdGhJc3N1ZSB7XG4gIGlkOiBzdHJpbmdcbiAgdHlwZTogJ3BlcmZvcm1hbmNlJyB8ICdlcnJvcicgfCAncmVzb3VyY2UnIHwgJ3NlY3VyaXR5J1xuICBzZXZlcml0eTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCdcbiAgbWVzc2FnZTogc3RyaW5nXG4gIGRldGFpbHM6IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgZmlyc3REZXRlY3RlZDogRGF0ZVxuICBsYXN0U2VlbjogRGF0ZVxuICBjb3VudDogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9uaXRvcmluZ0NvbmZpZyB7XG4gIGVuYWJsZWQ6IGJvb2xlYW5cbiAgY2hlY2tJbnRlcnZhbDogbnVtYmVyIC8vIGVuIHNlZ3VuZG9zXG4gIGVycm9yVGhyZXNob2xkOiBudW1iZXJcbiAgcmVzcG9uc2VUaW1lVGhyZXNob2xkOiBudW1iZXJcbiAgbWVtb3J5VGhyZXNob2xkOiBudW1iZXJcbiAgY3B1VGhyZXNob2xkOiBudW1iZXJcbiAgZW5hYmxlQXV0b1JlY292ZXJ5OiBib29sZWFuXG4gIG5vdGlmaWNhdGlvbkNoYW5uZWxzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgY2xhc3MgUHJvYWN0aXZlTW9uaXRvcmluZ1NlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUHJvYWN0aXZlTW9uaXRvcmluZ1NlcnZpY2VcbiAgcHJpdmF0ZSBhbGVydFN5c3RlbTogRW50ZXJwcmlzZUFsZXJ0U3lzdGVtXG4gIHByaXZhdGUgbWV0cmljc0NvbGxlY3RvcjogRW50ZXJwcmlzZU1ldHJpY3NDb2xsZWN0b3JcbiAgcHJpdmF0ZSBlcnJvclBhdHRlcm5zOiBNYXA8c3RyaW5nLCBFcnJvclBhdHRlcm4+ID0gbmV3IE1hcCgpXG4gIHByaXZhdGUgZXJyb3JDb3VudHM6IE1hcDxzdHJpbmcsIHsgY291bnQ6IG51bWJlcjsgZmlyc3RTZWVuOiBEYXRlOyBsYXN0U2VlbjogRGF0ZSB9PiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIGhlYWx0aENoZWNrczogTWFwPHN0cmluZywgKCkgPT4gUHJvbWlzZTxhbnk+PiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIG1vbml0b3JpbmdJbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbFxuICBwcml2YXRlIGNvbmZpZzogTW9uaXRvcmluZ0NvbmZpZ1xuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBQcm9hY3RpdmVNb25pdG9yaW5nU2VydmljZSB7XG4gICAgaWYgKCFQcm9hY3RpdmVNb25pdG9yaW5nU2VydmljZS5pbnN0YW5jZSkge1xuICAgICAgUHJvYWN0aXZlTW9uaXRvcmluZ1NlcnZpY2UuaW5zdGFuY2UgPSBuZXcgUHJvYWN0aXZlTW9uaXRvcmluZ1NlcnZpY2UoKVxuICAgIH1cbiAgICByZXR1cm4gUHJvYWN0aXZlTW9uaXRvcmluZ1NlcnZpY2UuaW5zdGFuY2VcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIFNvbG8gaW5pY2lhbGl6YXIgZW4gZWwgc2Vydmlkb3JcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuYWxlcnRTeXN0ZW0gPSBFbnRlcnByaXNlQWxlcnRTeXN0ZW0uZ2V0SW5zdGFuY2UoKVxuICAgICAgdGhpcy5tZXRyaWNzQ29sbGVjdG9yID0gRW50ZXJwcmlzZU1ldHJpY3NDb2xsZWN0b3IuZ2V0SW5zdGFuY2UoKVxuICAgIH1cbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBjaGVja0ludGVydmFsOiAzMCwgLy8gMzAgc2VndW5kb3NcbiAgICAgIGVycm9yVGhyZXNob2xkOiA1LCAvLyA1JSBlcnJvciByYXRlXG4gICAgICByZXNwb25zZVRpbWVUaHJlc2hvbGQ6IDIwMDAsIC8vIDIgc2VndW5kb3NcbiAgICAgIG1lbW9yeVRocmVzaG9sZDogODAsIC8vIDgwJSBtZW1vcmlhXG4gICAgICBjcHVUaHJlc2hvbGQ6IDcwLCAvLyA3MCUgQ1BVXG4gICAgICBlbmFibGVBdXRvUmVjb3Zlcnk6IHRydWUsXG4gICAgICBub3RpZmljYXRpb25DaGFubmVsczogWydlbWFpbCcsICdzbGFjayddXG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbGl6ZURlZmF1bHRQYXR0ZXJucygpXG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVEZWZhdWx0UGF0dGVybnMoKTogdm9pZCB7XG4gICAgY29uc3QgZGVmYXVsdFBhdHRlcm5zOiBFcnJvclBhdHRlcm5bXSA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdkYXRhYmFzZV9jb25uZWN0aW9uX2Vycm9yJyxcbiAgICAgICAgbmFtZTogJ0RhdGFiYXNlIENvbm5lY3Rpb24gRXJyb3InLFxuICAgICAgICBwYXR0ZXJuOiAvZGF0YWJhc2UuKmNvbm5lY3Rpb24uKmZhaWxlZHxjb25uZWN0aW9uLip0aW1lb3V0fHBvb2wuKmV4aGF1c3RlZC9pLFxuICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJyxcbiAgICAgICAgdGhyZXNob2xkOiAzLFxuICAgICAgICB0aW1lV2luZG93OiA1LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Vycm9yZXMgZGUgY29uZXhpw7NuIGEgbGEgYmFzZSBkZSBkYXRvcycsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJ3BheW1lbnRfcHJvY2Vzc2luZ19lcnJvcicsXG4gICAgICAgIG5hbWU6ICdQYXltZW50IFByb2Nlc3NpbmcgRXJyb3InLFxuICAgICAgICBwYXR0ZXJuOiAvcGF5bWVudC4qZmFpbGVkfHRyYW5zYWN0aW9uLiplcnJvcnxtZXJjYWRvcGFnby4qZXJyb3IvaSxcbiAgICAgICAgc2V2ZXJpdHk6ICdoaWdoJyxcbiAgICAgICAgdGhyZXNob2xkOiA1LFxuICAgICAgICB0aW1lV2luZG93OiAxMCxcbiAgICAgICAgZGVzY3JpcHRpb246ICdFcnJvcmVzIGVuIGVsIHByb2Nlc2FtaWVudG8gZGUgcGFnb3MnLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdhdXRoZW50aWNhdGlvbl9lcnJvcicsXG4gICAgICAgIG5hbWU6ICdBdXRoZW50aWNhdGlvbiBFcnJvcicsXG4gICAgICAgIHBhdHRlcm46IC9hdXRoLipmYWlsZWR8dW5hdXRob3JpemVkfGludmFsaWQuKnRva2VufHNlc3Npb24uKmV4cGlyZWQvaSxcbiAgICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nLFxuICAgICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgICB0aW1lV2luZG93OiAxNSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdFcnJvcmVzIGRlIGF1dGVudGljYWNpw7NuJyxcbiAgICAgICAgaXNBY3RpdmU6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnYXBpX3JhdGVfbGltaXQnLFxuICAgICAgICBuYW1lOiAnQVBJIFJhdGUgTGltaXQgRXhjZWVkZWQnLFxuICAgICAgICBwYXR0ZXJuOiAvcmF0ZS4qbGltaXQuKmV4Y2VlZGVkfHRvby4qbWFueS4qcmVxdWVzdHN8NDI5L2ksXG4gICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgdGhyZXNob2xkOiAyMCxcbiAgICAgICAgdGltZVdpbmRvdzogNSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMw61taXRlIGRlIHZlbG9jaWRhZCBkZSBBUEkgZXhjZWRpZG8nLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdzZXJ2ZXJfZXJyb3InLFxuICAgICAgICBuYW1lOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyxcbiAgICAgICAgcGF0dGVybjogL2ludGVybmFsLipzZXJ2ZXIuKmVycm9yfDUwMC4qZXJyb3J8dW5oYW5kbGVkLipleGNlcHRpb24vaSxcbiAgICAgICAgc2V2ZXJpdHk6ICdoaWdoJyxcbiAgICAgICAgdGhyZXNob2xkOiA1LFxuICAgICAgICB0aW1lV2luZG93OiAxMCxcbiAgICAgICAgZGVzY3JpcHRpb246ICdFcnJvcmVzIGludGVybm9zIGRlbCBzZXJ2aWRvcicsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlXG4gICAgICB9XG4gICAgXVxuXG4gICAgZGVmYXVsdFBhdHRlcm5zLmZvckVhY2gocGF0dGVybiA9PiB7XG4gICAgICB0aGlzLmVycm9yUGF0dGVybnMuc2V0KHBhdHRlcm4uaWQsIHBhdHRlcm4pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmljaWEgZWwgbW9uaXRvcmVvIHByb2FjdGl2b1xuICAgKi9cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgLy8gU29sbyBlamVjdXRhciBlbiBlbCBzZXJ2aWRvclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5lbmFibGVkKSB7XG4gICAgICBsb2dnZXIuaW5mbyhMb2dMZXZlbC5JTkZPLCAnUHJvYWN0aXZlIG1vbml0b3JpbmcgaXMgZGlzYWJsZWQnLCB7fSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKSB7XG4gICAgICB0aGlzLnN0b3AoKVxuICAgIH1cblxuICAgIHRoaXMubW9uaXRvcmluZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5wZXJmb3JtSGVhbHRoQ2hlY2soKVxuICAgIH0sIHRoaXMuY29uZmlnLmNoZWNrSW50ZXJ2YWwgKiAxMDAwKVxuXG4gICAgbG9nZ2VyLmluZm8oTG9nTGV2ZWwuSU5GTywgJ1Byb2FjdGl2ZSBtb25pdG9yaW5nIHN0YXJ0ZWQnLCB7XG4gICAgICBpbnRlcnZhbDogdGhpcy5jb25maWcuY2hlY2tJbnRlcnZhbCxcbiAgICAgIHBhdHRlcm5zOiB0aGlzLmVycm9yUGF0dGVybnMuc2l6ZVxuICAgIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRpZW5lIGVsIG1vbml0b3JlbyBwcm9hY3Rpdm9cbiAgICovXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKVxuICAgICAgdGhpcy5tb25pdG9yaW5nSW50ZXJ2YWwgPSBudWxsXG4gICAgICBsb2dnZXIuaW5mbyhMb2dMZXZlbC5JTkZPLCAnUHJvYWN0aXZlIG1vbml0b3Jpbmcgc3RvcHBlZCcsIHt9LCBMb2dDYXRlZ29yeS5TWVNURU0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdHJhIHVuIGVycm9yIHBhcmEgYW7DoWxpc2lzXG4gICAqL1xuICBhc3luYyByZXBvcnRFcnJvcihlcnJvcjogRXJyb3IgfCBzdHJpbmcsIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvclxuICAgIGNvbnN0IGVycm9yU3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiB1bmRlZmluZWRcblxuICAgIC8vIFNvbG8gcHJvY2VzYXIgZW4gZWwgc2Vydmlkb3JcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIEFuYWxpemFyIHBhdHJvbmVzIGRlIGVycm9yXG4gICAgICBmb3IgKGNvbnN0IFtwYXR0ZXJuSWQsIHBhdHRlcm5dIG9mIHRoaXMuZXJyb3JQYXR0ZXJucykge1xuICAgICAgICBpZiAoIXBhdHRlcm4uaXNBY3RpdmUpIGNvbnRpbnVlXG5cbiAgICAgICAgY29uc3QgcmVnZXggPSBwYXR0ZXJuLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHAgPyBwYXR0ZXJuLnBhdHRlcm4gOiBuZXcgUmVnRXhwKHBhdHRlcm4ucGF0dGVybiwgJ2knKVxuICAgICAgICBpZiAocmVnZXgudGVzdChlcnJvck1lc3NhZ2UpKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVQYXR0ZXJuTWF0Y2gocGF0dGVybklkLCBwYXR0ZXJuLCBlcnJvck1lc3NhZ2UsIGNvbnRleHQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVnaXN0cmFyIG3DqXRyaWNhcyBzaSBlc3TDoSBkaXNwb25pYmxlXG4gICAgICBpZiAodGhpcy5tZXRyaWNzQ29sbGVjdG9yKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubWV0cmljc0NvbGxlY3Rvci5yZWNvcmRNZXRyaWMoJ2Vycm9yc190b3RhbCcsIDEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uX2Vycm9yJyxcbiAgICAgICAgICAuLi5jb250ZXh0XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTG9nIGRlbCBlcnJvclxuICAgIGxvZ2dlci5lcnJvcihMb2dMZXZlbC5FUlJPUiwgJ0Vycm9yIHJlcG9ydGVkIHRvIG1vbml0b3JpbmcnLCB7XG4gICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgc3RhY2s6IGVycm9yU3RhY2ssXG4gICAgICBjb250ZXh0XG4gICAgfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVQYXR0ZXJuTWF0Y2goXG4gICAgcGF0dGVybklkOiBzdHJpbmcsXG4gICAgcGF0dGVybjogRXJyb3JQYXR0ZXJuLFxuICAgIGVycm9yTWVzc2FnZTogc3RyaW5nLFxuICAgIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcbiAgICBjb25zdCBrZXkgPSBgJHtwYXR0ZXJuSWR9XyR7TWF0aC5mbG9vcihub3cuZ2V0VGltZSgpIC8gKHBhdHRlcm4udGltZVdpbmRvdyAqIDYwICogMTAwMCkpfWBcbiAgICBcbiAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuZXJyb3JDb3VudHMuZ2V0KGtleSlcbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIGV4aXN0aW5nLmNvdW50KytcbiAgICAgIGV4aXN0aW5nLmxhc3RTZWVuID0gbm93XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3JDb3VudHMuc2V0KGtleSwge1xuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgZmlyc3RTZWVuOiBub3csXG4gICAgICAgIGxhc3RTZWVuOiBub3dcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JDb3VudHMuZ2V0KGtleSkhXG4gICAgXG4gICAgLy8gVmVyaWZpY2FyIHNpIHNlIGFsY2FuesOzIGVsIHVtYnJhbCAoc29sbyBlbiBzZXJ2aWRvcilcbiAgICBpZiAoZXJyb3JDb3VudC5jb3VudCA+PSBwYXR0ZXJuLnRocmVzaG9sZCAmJiB0aGlzLmFsZXJ0U3lzdGVtKSB7XG4gICAgICBhd2FpdCB0aGlzLnRyaWdnZXJBbGVydChwYXR0ZXJuLCBlcnJvckNvdW50LCBlcnJvck1lc3NhZ2UsIGNvbnRleHQpXG4gICAgICBcbiAgICAgIC8vIExpbXBpYXIgY29udGFkb3IgcGFyYSBldml0YXIgc3BhbSBkZSBhbGVydGFzXG4gICAgICB0aGlzLmVycm9yQ291bnRzLmRlbGV0ZShrZXkpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB0cmlnZ2VyQWxlcnQoXG4gICAgcGF0dGVybjogRXJyb3JQYXR0ZXJuLFxuICAgIGVycm9yQ291bnQ6IHsgY291bnQ6IG51bWJlcjsgZmlyc3RTZWVuOiBEYXRlOyBsYXN0U2VlbjogRGF0ZSB9LFxuICAgIGVycm9yTWVzc2FnZTogc3RyaW5nLFxuICAgIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGFsZXJ0ID0ge1xuICAgICAgaWQ6IGBwYXR0ZXJuXyR7cGF0dGVybi5pZH1fJHtEYXRlLm5vdygpfWAsXG4gICAgICB0aXRsZTogYEVycm9yIFBhdHRlcm4gRGV0ZWN0ZWQ6ICR7cGF0dGVybi5uYW1lfWAsXG4gICAgICBtZXNzYWdlOiBgUGF0dGVybiBcIiR7cGF0dGVybi5uYW1lfVwiIGRldGVjdGVkICR7ZXJyb3JDb3VudC5jb3VudH0gdGltZXMgaW4gJHtwYXR0ZXJuLnRpbWVXaW5kb3d9IG1pbnV0ZXNgLFxuICAgICAgc2V2ZXJpdHk6IHBhdHRlcm4uc2V2ZXJpdHksXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIHBhdHRlcm46IHBhdHRlcm4ubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHBhdHRlcm4uZGVzY3JpcHRpb24sXG4gICAgICAgIGNvdW50OiBlcnJvckNvdW50LmNvdW50LFxuICAgICAgICB0aHJlc2hvbGQ6IHBhdHRlcm4udGhyZXNob2xkLFxuICAgICAgICB0aW1lV2luZG93OiBwYXR0ZXJuLnRpbWVXaW5kb3csXG4gICAgICAgIGZpcnN0U2VlbjogZXJyb3JDb3VudC5maXJzdFNlZW4udG9JU09TdHJpbmcoKSxcbiAgICAgICAgbGFzdFNlZW46IGVycm9yQ291bnQubGFzdFNlZW4udG9JU09TdHJpbmcoKSxcbiAgICAgICAgbGFzdEVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIGNvbnRleHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFbnZpYXIgbm90aWZpY2FjaW9uZXNcbiAgICBpZiAodGhpcy5jb25maWcubm90aWZpY2F0aW9uQ2hhbm5lbHMuaW5jbHVkZXMoJ2VtYWlsJykpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2VuZEVtYWlsQWxlcnQoYWxlcnQpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29uZmlnLm5vdGlmaWNhdGlvbkNoYW5uZWxzLmluY2x1ZGVzKCdzbGFjaycpKSB7XG4gICAgICBhd2FpdCB0aGlzLnNlbmRTbGFja0FsZXJ0KGFsZXJ0KVxuICAgIH1cblxuICAgIGxvZ2dlci53YXJuKExvZ0xldmVsLldBUk4sICdFcnJvciBwYXR0ZXJuIGFsZXJ0IHRyaWdnZXJlZCcsIGFsZXJ0LCBMb2dDYXRlZ29yeS5TWVNURU0pXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRFbWFpbEFsZXJ0KGFsZXJ0OiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZW1haWxTZXJ2aWNlLnNlbmROb3RpZmljYXRpb24oe1xuICAgICAgICB0bzogWydhZG1pbkBleGFtcGxlLmNvbSddLCAvLyBDb25maWd1cmFyIGVtYWlscyBkZSBhZG1pblxuICAgICAgICBzdWJqZWN0OiBg8J+aqCAke2FsZXJ0LnRpdGxlfWAsXG4gICAgICAgIHRlbXBsYXRlOiAnZXJyb3ItcGF0dGVybi1hbGVydCcsXG4gICAgICAgIGRhdGE6IGFsZXJ0LFxuICAgICAgICBwcmlvcml0eTogYWxlcnQuc2V2ZXJpdHkgPT09ICdjcml0aWNhbCcgPyAnaGlnaCcgOiAnbm9ybWFsJ1xuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKExvZ0xldmVsLkVSUk9SLCAnRmFpbGVkIHRvIHNlbmQgZW1haWwgYWxlcnQnLCB7IGVycm9yIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTbGFja0FsZXJ0KGFsZXJ0OiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2xhY2tTZXJ2aWNlLnNlbmRFcnJvckFsZXJ0KHtcbiAgICAgICAgZXJyb3I6IGFsZXJ0Lm1lc3NhZ2UsXG4gICAgICAgIGNvbnRleHQ6IGFsZXJ0LnRpdGxlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHNldmVyaXR5OiBhbGVydC5zZXZlcml0eVxuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKExvZ0xldmVsLkVSUk9SLCAnRmFpbGVkIHRvIHNlbmQgU2xhY2sgYWxlcnQnLCB7IGVycm9yIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVhbGl6YSB2ZXJpZmljYWNpw7NuIGRlIHNhbHVkIGRlbCBzaXN0ZW1hXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHBlcmZvcm1IZWFsdGhDaGVjaygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaGVhbHRoID0gYXdhaXQgdGhpcy5nZXRTeXN0ZW1IZWFsdGgoKVxuICAgICAgXG4gICAgICAvLyBWZXJpZmljYXIgdW1icmFsZXMgY3LDrXRpY29zXG4gICAgICBpZiAoaGVhbHRoLnN0YXR1cyA9PT0gJ2NyaXRpY2FsJyB8fCBoZWFsdGguc3RhdHVzID09PSAnZG93bicpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVDcml0aWNhbEhlYWx0aChoZWFsdGgpXG4gICAgICB9IGVsc2UgaWYgKGhlYWx0aC5zdGF0dXMgPT09ICd3YXJuaW5nJykge1xuICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZVdhcm5pbmdIZWFsdGgoaGVhbHRoKVxuICAgICAgfVxuXG4gICAgICAvLyBBY3R1YWxpemFyIG3DqXRyaWNhcyBzaSBlc3TDoSBkaXNwb25pYmxlXG4gICAgICBpZiAodGhpcy5tZXRyaWNzQ29sbGVjdG9yKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubWV0cmljc0NvbGxlY3Rvci5yZWNvcmRNZXRyaWMoJ3N5c3RlbV9oZWFsdGhfc2NvcmUnLCB0aGlzLmNhbGN1bGF0ZUhlYWx0aFNjb3JlKGhlYWx0aCkpXG4gICAgICAgIGF3YWl0IHRoaXMubWV0cmljc0NvbGxlY3Rvci5yZWNvcmRNZXRyaWMoJ3N5c3RlbV9yZXNwb25zZV90aW1lJywgaGVhbHRoLnJlc3BvbnNlVGltZSlcbiAgICAgICAgYXdhaXQgdGhpcy5tZXRyaWNzQ29sbGVjdG9yLnJlY29yZE1ldHJpYygnc3lzdGVtX2Vycm9yX3JhdGUnLCBoZWFsdGguZXJyb3JSYXRlKVxuICAgICAgICBhd2FpdCB0aGlzLm1ldHJpY3NDb2xsZWN0b3IucmVjb3JkTWV0cmljKCdzeXN0ZW1fbWVtb3J5X3VzYWdlJywgaGVhbHRoLm1lbW9yeVVzYWdlKVxuICAgICAgICBhd2FpdCB0aGlzLm1ldHJpY3NDb2xsZWN0b3IucmVjb3JkTWV0cmljKCdzeXN0ZW1fY3B1X3VzYWdlJywgaGVhbHRoLmNwdVVzYWdlKVxuICAgICAgfVxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihMb2dMZXZlbC5FUlJPUiwgJ0hlYWx0aCBjaGVjayBmYWlsZWQnLCB7XG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0U3lzdGVtSGVhbHRoKCk6IFByb21pc2U8U3lzdGVtSGVhbHRoPiB7XG4gICAgY29uc3QgaXNzdWVzOiBIZWFsdGhJc3N1ZVtdID0gW11cbiAgICBsZXQgc3RhdHVzOiBTeXN0ZW1IZWFsdGhbJ3N0YXR1cyddID0gJ2hlYWx0aHknXG5cbiAgICAvLyBTaW11bGFyIHZlcmlmaWNhY2lvbmVzIGRlIHNhbHVkIChlbiBwcm9kdWNjacOzbiwgZXN0YXMgc2Vyw61hbiB2ZXJpZmljYWNpb25lcyByZWFsZXMpXG4gICAgY29uc3QgcmVzcG9uc2VUaW1lID0gTWF0aC5yYW5kb20oKSAqIDEwMDAgKyAyMDAgLy8gMjAwLTEyMDBtc1xuICAgIGNvbnN0IGVycm9yUmF0ZSA9IE1hdGgucmFuZG9tKCkgKiA1IC8vIDAtNSVcbiAgICBjb25zdCBtZW1vcnlVc2FnZSA9IE1hdGgucmFuZG9tKCkgKiA0MCArIDQwIC8vIDQwLTgwJVxuICAgIGNvbnN0IGNwdVVzYWdlID0gTWF0aC5yYW5kb20oKSAqIDMwICsgMjAgLy8gMjAtNTAlXG4gICAgY29uc3QgYWN0aXZlQ29ubmVjdGlvbnMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgNTBcblxuICAgIC8vIFZlcmlmaWNhciB1bWJyYWxlc1xuICAgIGlmIChyZXNwb25zZVRpbWUgPiB0aGlzLmNvbmZpZy5yZXNwb25zZVRpbWVUaHJlc2hvbGQpIHtcbiAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgaWQ6ICdoaWdoX3Jlc3BvbnNlX3RpbWUnLFxuICAgICAgICB0eXBlOiAncGVyZm9ybWFuY2UnLFxuICAgICAgICBzZXZlcml0eTogJ21lZGl1bScsXG4gICAgICAgIG1lc3NhZ2U6ICdIaWdoIHJlc3BvbnNlIHRpbWUgZGV0ZWN0ZWQnLFxuICAgICAgICBkZXRhaWxzOiB7IHJlc3BvbnNlVGltZSwgdGhyZXNob2xkOiB0aGlzLmNvbmZpZy5yZXNwb25zZVRpbWVUaHJlc2hvbGQgfSxcbiAgICAgICAgZmlyc3REZXRlY3RlZDogbmV3IERhdGUoKSxcbiAgICAgICAgbGFzdFNlZW46IG5ldyBEYXRlKCksXG4gICAgICAgIGNvdW50OiAxXG4gICAgICB9KVxuICAgICAgc3RhdHVzID0gJ3dhcm5pbmcnXG4gICAgfVxuXG4gICAgaWYgKGVycm9yUmF0ZSA+IHRoaXMuY29uZmlnLmVycm9yVGhyZXNob2xkKSB7XG4gICAgICBpc3N1ZXMucHVzaCh7XG4gICAgICAgIGlkOiAnaGlnaF9lcnJvcl9yYXRlJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgc2V2ZXJpdHk6ICdoaWdoJyxcbiAgICAgICAgbWVzc2FnZTogJ0hpZ2ggZXJyb3IgcmF0ZSBkZXRlY3RlZCcsXG4gICAgICAgIGRldGFpbHM6IHsgZXJyb3JSYXRlLCB0aHJlc2hvbGQ6IHRoaXMuY29uZmlnLmVycm9yVGhyZXNob2xkIH0sXG4gICAgICAgIGZpcnN0RGV0ZWN0ZWQ6IG5ldyBEYXRlKCksXG4gICAgICAgIGxhc3RTZWVuOiBuZXcgRGF0ZSgpLFxuICAgICAgICBjb3VudDogMVxuICAgICAgfSlcbiAgICAgIHN0YXR1cyA9ICdjcml0aWNhbCdcbiAgICB9XG5cbiAgICBpZiAobWVtb3J5VXNhZ2UgPiB0aGlzLmNvbmZpZy5tZW1vcnlUaHJlc2hvbGQpIHtcbiAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgaWQ6ICdoaWdoX21lbW9yeV91c2FnZScsXG4gICAgICAgIHR5cGU6ICdyZXNvdXJjZScsXG4gICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgbWVzc2FnZTogJ0hpZ2ggbWVtb3J5IHVzYWdlIGRldGVjdGVkJyxcbiAgICAgICAgZGV0YWlsczogeyBtZW1vcnlVc2FnZSwgdGhyZXNob2xkOiB0aGlzLmNvbmZpZy5tZW1vcnlUaHJlc2hvbGQgfSxcbiAgICAgICAgZmlyc3REZXRlY3RlZDogbmV3IERhdGUoKSxcbiAgICAgICAgbGFzdFNlZW46IG5ldyBEYXRlKCksXG4gICAgICAgIGNvdW50OiAxXG4gICAgICB9KVxuICAgICAgaWYgKHN0YXR1cyA9PT0gJ2hlYWx0aHknKSBzdGF0dXMgPSAnd2FybmluZydcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzLFxuICAgICAgdXB0aW1lOiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy51cHRpbWUgPyBwcm9jZXNzLnVwdGltZSgpIDogRGF0ZS5ub3coKSAvIDEwMDAsXG4gICAgICByZXNwb25zZVRpbWUsXG4gICAgICBlcnJvclJhdGUsXG4gICAgICBtZW1vcnlVc2FnZSxcbiAgICAgIGNwdVVzYWdlLFxuICAgICAgYWN0aXZlQ29ubmVjdGlvbnMsXG4gICAgICBsYXN0Q2hlY2s6IG5ldyBEYXRlKCksXG4gICAgICBpc3N1ZXNcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUhlYWx0aFNjb3JlKGhlYWx0aDogU3lzdGVtSGVhbHRoKTogbnVtYmVyIHtcbiAgICBsZXQgc2NvcmUgPSAxMDBcbiAgICBcbiAgICBoZWFsdGguaXNzdWVzLmZvckVhY2goaXNzdWUgPT4ge1xuICAgICAgc3dpdGNoIChpc3N1ZS5zZXZlcml0eSkge1xuICAgICAgICBjYXNlICdjcml0aWNhbCc6XG4gICAgICAgICAgc2NvcmUgLT0gMzBcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdoaWdoJzpcbiAgICAgICAgICBzY29yZSAtPSAyMFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICAgICAgc2NvcmUgLT0gMTBcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdsb3cnOlxuICAgICAgICAgIHNjb3JlIC09IDVcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgc2NvcmUpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZUNyaXRpY2FsSGVhbHRoKGhlYWx0aDogU3lzdGVtSGVhbHRoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbG9nZ2VyLmVycm9yKExvZ0xldmVsLkVSUk9SLCAnQ3JpdGljYWwgc3lzdGVtIGhlYWx0aCBkZXRlY3RlZCcsIHsgaGVhbHRoIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcbiAgICBcbiAgICAvLyBFbnZpYXIgYWxlcnRhcyBjcsOtdGljYXNcbiAgICBhd2FpdCB0aGlzLnNlbmRTbGFja0FsZXJ0KHtcbiAgICAgIHRpdGxlOiAn8J+aqCBDUklUSUNBTDogU3lzdGVtIEhlYWx0aCBBbGVydCcsXG4gICAgICBtZXNzYWdlOiAnU3lzdGVtIGhlYWx0aCBpcyBjcml0aWNhbCAtIGltbWVkaWF0ZSBhdHRlbnRpb24gcmVxdWlyZWQnLFxuICAgICAgc2V2ZXJpdHk6ICdjcml0aWNhbCcsXG4gICAgICBkZXRhaWxzOiBoZWFsdGhcbiAgICB9KVxuXG4gICAgLy8gQXV0by1yZWNvdmVyeSBzaSBlc3TDoSBoYWJpbGl0YWRvXG4gICAgaWYgKHRoaXMuY29uZmlnLmVuYWJsZUF1dG9SZWNvdmVyeSkge1xuICAgICAgYXdhaXQgdGhpcy5hdHRlbXB0QXV0b1JlY292ZXJ5KGhlYWx0aClcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVdhcm5pbmdIZWFsdGgoaGVhbHRoOiBTeXN0ZW1IZWFsdGgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsb2dnZXIud2FybihMb2dMZXZlbC5XQVJOLCAnU3lzdGVtIGhlYWx0aCB3YXJuaW5nJywgeyBoZWFsdGggfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhdHRlbXB0QXV0b1JlY292ZXJ5KGhlYWx0aDogU3lzdGVtSGVhbHRoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbG9nZ2VyLmluZm8oTG9nTGV2ZWwuSU5GTywgJ0F0dGVtcHRpbmcgYXV0by1yZWNvdmVyeScsIHsgaGVhbHRoIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcbiAgICBcbiAgICAvLyBJbXBsZW1lbnRhciBsw7NnaWNhIGRlIGF1dG8tcmVjdXBlcmFjacOzblxuICAgIC8vIFBvciBlamVtcGxvOiByZWluaWNpYXIgc2VydmljaW9zLCBsaW1waWFyIGNhY2hlLCBldGMuXG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJhY2nDs24gZGVsIHNlcnZpY2lvXG4gICAqL1xuICB1cGRhdGVDb25maWcobmV3Q29uZmlnOiBQYXJ0aWFsPE1vbml0b3JpbmdDb25maWc+KTogdm9pZCB7XG4gICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuY29uZmlnLCAuLi5uZXdDb25maWcgfVxuICAgIFxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVkICYmICF0aGlzLm1vbml0b3JpbmdJbnRlcnZhbCkge1xuICAgICAgdGhpcy5zdGFydCgpXG4gICAgfSBlbHNlIGlmICghdGhpcy5jb25maWcuZW5hYmxlZCAmJiB0aGlzLm1vbml0b3JpbmdJbnRlcnZhbCkge1xuICAgICAgdGhpcy5zdG9wKClcbiAgICB9XG4gIH1cblxuICBnZXRDb25maWcoKTogTW9uaXRvcmluZ0NvbmZpZyB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5jb25maWcgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlc3Rpw7NuIGRlIHBhdHJvbmVzIGRlIGVycm9yXG4gICAqL1xuICBhZGRFcnJvclBhdHRlcm4ocGF0dGVybjogRXJyb3JQYXR0ZXJuKTogdm9pZCB7XG4gICAgdGhpcy5lcnJvclBhdHRlcm5zLnNldChwYXR0ZXJuLmlkLCBwYXR0ZXJuKVxuICAgIGxvZ2dlci5pbmZvKExvZ0xldmVsLklORk8sICdFcnJvciBwYXR0ZXJuIGFkZGVkJywgeyBwYXR0ZXJuSWQ6IHBhdHRlcm4uaWQgfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxuICB9XG5cbiAgcmVtb3ZlRXJyb3JQYXR0ZXJuKHBhdHRlcm5JZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5lcnJvclBhdHRlcm5zLmRlbGV0ZShwYXR0ZXJuSWQpXG4gICAgbG9nZ2VyLmluZm8oTG9nTGV2ZWwuSU5GTywgJ0Vycm9yIHBhdHRlcm4gcmVtb3ZlZCcsIHsgcGF0dGVybklkIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcbiAgfVxuXG4gIGdldEVycm9yUGF0dGVybnMoKTogRXJyb3JQYXR0ZXJuW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZXJyb3JQYXR0ZXJucy52YWx1ZXMoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRlbmVyIGVzdGFkw61zdGljYXMgZGUgbW9uaXRvcmVvXG4gICAqL1xuICBhc3luYyBnZXRNb25pdG9yaW5nU3RhdHMoKTogUHJvbWlzZTx7XG4gICAgdG90YWxFcnJvcnM6IG51bWJlclxuICAgIGFjdGl2ZVBhdHRlcm5zOiBudW1iZXJcbiAgICByZWNlbnRBbGVydHM6IG51bWJlclxuICAgIHN5c3RlbUhlYWx0aDogU3lzdGVtSGVhbHRoXG4gIH0+IHtcbiAgICBjb25zdCB0b3RhbEVycm9ycyA9IEFycmF5LmZyb20odGhpcy5lcnJvckNvdW50cy52YWx1ZXMoKSlcbiAgICAgIC5yZWR1Y2UoKHN1bSwgY291bnQpID0+IHN1bSArIGNvdW50LmNvdW50LCAwKVxuICAgIFxuICAgIGNvbnN0IGFjdGl2ZVBhdHRlcm5zID0gQXJyYXkuZnJvbSh0aGlzLmVycm9yUGF0dGVybnMudmFsdWVzKCkpXG4gICAgICAuZmlsdGVyKHAgPT4gcC5pc0FjdGl2ZSkubGVuZ3RoXG4gICAgXG4gICAgY29uc3QgcmVjZW50QWxlcnRzID0gdGhpcy5hbGVydFN5c3RlbSA/IFxuICAgICAgQXJyYXkuZnJvbSh0aGlzLmVycm9yQ291bnRzLnZhbHVlcygpKVxuICAgICAgICAuZmlsdGVyKGNvdW50ID0+IERhdGUubm93KCkgLSBjb3VudC5sYXN0U2Vlbi5nZXRUaW1lKCkgPCAyNCAqIDYwICogNjAgKiAxMDAwKS5sZW5ndGhcbiAgICAgIDogMFxuICAgIFxuICAgIGNvbnN0IHN5c3RlbUhlYWx0aCA9IGF3YWl0IHRoaXMuZ2V0U3lzdGVtSGVhbHRoKClcblxuICAgIHJldHVybiB7XG4gICAgICB0b3RhbEVycm9ycyxcbiAgICAgIGFjdGl2ZVBhdHRlcm5zLFxuICAgICAgcmVjZW50QWxlcnRzLFxuICAgICAgc3lzdGVtSGVhbHRoXG4gICAgfVxuICB9XG59XG5cbi8vIEluc3RhbmNpYSBzaW5nbGV0b25cbmV4cG9ydCBjb25zdCBwcm9hY3RpdmVNb25pdG9yaW5nID0gUHJvYWN0aXZlTW9uaXRvcmluZ1NlcnZpY2UuZ2V0SW5zdGFuY2UoKVxuXG4vLyBGdW5jaW9uZXMgZGUgY29udmVuaWVuY2lhXG5leHBvcnQgY29uc3QgcmVwb3J0RXJyb3IgPSAoZXJyb3I6IEVycm9yIHwgc3RyaW5nLCBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PikgPT5cbiAgcHJvYWN0aXZlTW9uaXRvcmluZy5yZXBvcnRFcnJvcihlcnJvciwgY29udGV4dClcblxuZXhwb3J0IGNvbnN0IHN0YXJ0TW9uaXRvcmluZyA9ICgpID0+IHByb2FjdGl2ZU1vbml0b3Jpbmcuc3RhcnQoKVxuZXhwb3J0IGNvbnN0IHN0b3BNb25pdG9yaW5nID0gKCkgPT4gcHJvYWN0aXZlTW9uaXRvcmluZy5zdG9wKCkiXSwibmFtZXMiOlsiUHJvYWN0aXZlTW9uaXRvcmluZ1NlcnZpY2UiLCJwcm9hY3RpdmVNb25pdG9yaW5nIiwicmVwb3J0RXJyb3IiLCJzdGFydE1vbml0b3JpbmciLCJzdG9wTW9uaXRvcmluZyIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJlcnJvclBhdHRlcm5zIiwiTWFwIiwiZXJyb3JDb3VudHMiLCJoZWFsdGhDaGVja3MiLCJtb25pdG9yaW5nSW50ZXJ2YWwiLCJ3aW5kb3ciLCJhbGVydFN5c3RlbSIsIkVudGVycHJpc2VBbGVydFN5c3RlbSIsIm1ldHJpY3NDb2xsZWN0b3IiLCJFbnRlcnByaXNlTWV0cmljc0NvbGxlY3RvciIsImNvbmZpZyIsImVuYWJsZWQiLCJjaGVja0ludGVydmFsIiwiZXJyb3JUaHJlc2hvbGQiLCJyZXNwb25zZVRpbWVUaHJlc2hvbGQiLCJtZW1vcnlUaHJlc2hvbGQiLCJjcHVUaHJlc2hvbGQiLCJlbmFibGVBdXRvUmVjb3ZlcnkiLCJub3RpZmljYXRpb25DaGFubmVscyIsImluaXRpYWxpemVEZWZhdWx0UGF0dGVybnMiLCJkZWZhdWx0UGF0dGVybnMiLCJpZCIsIm5hbWUiLCJwYXR0ZXJuIiwic2V2ZXJpdHkiLCJ0aHJlc2hvbGQiLCJ0aW1lV2luZG93IiwiZGVzY3JpcHRpb24iLCJpc0FjdGl2ZSIsImZvckVhY2giLCJzZXQiLCJzdGFydCIsImxvZ2dlciIsImluZm8iLCJMb2dMZXZlbCIsIklORk8iLCJMb2dDYXRlZ29yeSIsIlNZU1RFTSIsInN0b3AiLCJzZXRJbnRlcnZhbCIsInBlcmZvcm1IZWFsdGhDaGVjayIsImludGVydmFsIiwicGF0dGVybnMiLCJzaXplIiwiY2xlYXJJbnRlcnZhbCIsImVycm9yIiwiY29udGV4dCIsImVycm9yTWVzc2FnZSIsIkVycm9yIiwibWVzc2FnZSIsImVycm9yU3RhY2siLCJzdGFjayIsInVuZGVmaW5lZCIsInBhdHRlcm5JZCIsInJlZ2V4IiwiUmVnRXhwIiwidGVzdCIsImhhbmRsZVBhdHRlcm5NYXRjaCIsInJlY29yZE1ldHJpYyIsInR5cGUiLCJFUlJPUiIsIm5vdyIsIkRhdGUiLCJrZXkiLCJNYXRoIiwiZmxvb3IiLCJnZXRUaW1lIiwiZXhpc3RpbmciLCJnZXQiLCJjb3VudCIsImxhc3RTZWVuIiwiZmlyc3RTZWVuIiwiZXJyb3JDb3VudCIsInRyaWdnZXJBbGVydCIsImRlbGV0ZSIsImFsZXJ0IiwidGl0bGUiLCJkZXRhaWxzIiwidG9JU09TdHJpbmciLCJsYXN0RXJyb3IiLCJpbmNsdWRlcyIsInNlbmRFbWFpbEFsZXJ0Iiwic2VuZFNsYWNrQWxlcnQiLCJ3YXJuIiwiV0FSTiIsImVtYWlsU2VydmljZSIsInNlbmROb3RpZmljYXRpb24iLCJ0byIsInN1YmplY3QiLCJ0ZW1wbGF0ZSIsImRhdGEiLCJwcmlvcml0eSIsInNsYWNrU2VydmljZSIsInNlbmRFcnJvckFsZXJ0IiwidGltZXN0YW1wIiwiaGVhbHRoIiwiZ2V0U3lzdGVtSGVhbHRoIiwic3RhdHVzIiwiaGFuZGxlQ3JpdGljYWxIZWFsdGgiLCJoYW5kbGVXYXJuaW5nSGVhbHRoIiwiY2FsY3VsYXRlSGVhbHRoU2NvcmUiLCJyZXNwb25zZVRpbWUiLCJlcnJvclJhdGUiLCJtZW1vcnlVc2FnZSIsImNwdVVzYWdlIiwiaXNzdWVzIiwicmFuZG9tIiwiYWN0aXZlQ29ubmVjdGlvbnMiLCJwdXNoIiwiZmlyc3REZXRlY3RlZCIsInVwdGltZSIsInByb2Nlc3MiLCJsYXN0Q2hlY2siLCJzY29yZSIsImlzc3VlIiwibWF4IiwiYXR0ZW1wdEF1dG9SZWNvdmVyeSIsInVwZGF0ZUNvbmZpZyIsIm5ld0NvbmZpZyIsImdldENvbmZpZyIsImFkZEVycm9yUGF0dGVybiIsInJlbW92ZUVycm9yUGF0dGVybiIsImdldEVycm9yUGF0dGVybnMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJnZXRNb25pdG9yaW5nU3RhdHMiLCJ0b3RhbEVycm9ycyIsInJlZHVjZSIsInN1bSIsImFjdGl2ZVBhdHRlcm5zIiwiZmlsdGVyIiwicCIsImxlbmd0aCIsInJlY2VudEFsZXJ0cyIsInN5c3RlbUhlYWx0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztRQXFEYUE7ZUFBQUE7O1FBK2RBQztlQUFBQTs7UUFHQUM7ZUFBQUE7O1FBR0FDO2VBQUFBOztRQUNBQztlQUFBQTs7O3dCQXpoQmlDOzZCQUNSO21DQUNLO3VCQUNkO3VCQUNBO0FBK0N0QixNQUFNSjtJQVVYLE9BQU9LLGNBQTBDO1FBQy9DLElBQUksQ0FBQ0wsMkJBQTJCTSxRQUFRLEVBQUU7WUFDeENOLDJCQUEyQk0sUUFBUSxHQUFHLElBQUlOO1FBQzVDO1FBQ0EsT0FBT0EsMkJBQTJCTSxRQUFRO0lBQzVDO0lBRUEsYUFBYzthQWJOQyxnQkFBMkMsSUFBSUM7YUFDL0NDLGNBQStFLElBQUlEO2FBQ25GRSxlQUFnRCxJQUFJRjthQUNwREcscUJBQTRDO1FBV2xELGtDQUFrQztRQUNsQyxJQUFJLE9BQU9DLFdBQVcsYUFBYTtZQUNqQyxJQUFJLENBQUNDLFdBQVcsR0FBR0Msa0NBQXFCLENBQUNULFdBQVc7WUFDcEQsSUFBSSxDQUFDVSxnQkFBZ0IsR0FBR0MsNkNBQTBCLENBQUNYLFdBQVc7UUFDaEU7UUFDQSxJQUFJLENBQUNZLE1BQU0sR0FBRztZQUNaQyxTQUFTO1lBQ1RDLGVBQWU7WUFDZkMsZ0JBQWdCO1lBQ2hCQyx1QkFBdUI7WUFDdkJDLGlCQUFpQjtZQUNqQkMsY0FBYztZQUNkQyxvQkFBb0I7WUFDcEJDLHNCQUFzQjtnQkFBQztnQkFBUzthQUFRO1FBQzFDO1FBQ0EsSUFBSSxDQUFDQyx5QkFBeUI7SUFDaEM7SUFFUUEsNEJBQWtDO1FBQ3hDLE1BQU1DLGtCQUFrQztZQUN0QztnQkFDRUMsSUFBSTtnQkFDSkMsTUFB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