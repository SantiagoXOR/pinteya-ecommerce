{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useOrdersEnterprise.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ORDERS ENTERPRISE HOOK\r\n// ===================================\r\n\r\n'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  OrderEnterprise, \r\n  OrderFilters, \r\n  OrderListResponse,\r\n  UseOrdersState,\r\n  BulkStatusUpdate,\r\n  BulkStatusUpdateResult\r\n} from '@/types/orders-enterprise';\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useOrdersEnterprise(initialFilters?: OrderFilters) {\r\n  // Hook legacy - usar /hooks/admin/useOrdersEnterprise.ts en su lugar\r\n\r\n  const [state, setState] = useState<UseOrdersState>({\r\n    orders: [],\r\n    loading: true,\r\n    error: null,\r\n    filters: {\r\n      page: 1,\r\n      limit: 20,\r\n      sort_by: 'created_at',\r\n      sort_order: 'desc',\r\n      ...initialFilters,\r\n    },\r\n    pagination: {\r\n      page: 1,\r\n      limit: 20,\r\n      total: 0,\r\n      totalPages: 0,\r\n      hasNextPage: false,\r\n      hasPreviousPage: false,\r\n    },\r\n  });\r\n\r\n  // ===================================\r\n  // FUNCIONES DE API\r\n  // ===================================\r\n\r\n  const fetchOrders = useCallback(async (filters: OrderFilters) => {\r\n    setState(prev => ({ ...prev, loading: true, error: null }));\r\n    \r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        // FILTRAR OBJETOS: Solo agregar valores primitivos (string, number, boolean)\r\n        if (value !== undefined && value !== null && value !== '' && typeof value !== 'object') {\r\n          queryParams.append(key, value.toString());\r\n        }\r\n      });\r\n\r\n      const response = await fetch(`/api/admin/orders?${queryParams}`);\r\n      const data: { data: OrderListResponse } = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.data?.toString() || 'Error al cargar órdenes');\r\n      }\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        orders: data.data.orders,\r\n        pagination: data.data.pagination,\r\n        filters: data.data.filters,\r\n        loading: false,\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        error: error instanceof Error ? error.message : 'Error desconocido',\r\n        loading: false,\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  const createOrder = useCallback(async (orderData: any): Promise<OrderEnterprise> => {\r\n    const response = await fetch('/api/admin/orders', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(orderData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Error al crear orden');\r\n    }\r\n\r\n    // Refrescar lista después de crear\r\n    await fetchOrders(state.filters);\r\n\r\n    return data.data;\r\n  }, [state.filters, fetchOrders]);\r\n\r\n  const updateOrder = useCallback(async (orderId: string, orderData: any): Promise<OrderEnterprise> => {\r\n    const response = await fetch(`/api/admin/orders/${orderId}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(orderData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Error al actualizar orden');\r\n    }\r\n\r\n    // Actualizar orden en el estado local\r\n    setState(prev => ({\r\n      ...prev,\r\n      orders: prev.orders.map(order => \r\n        order.id === orderId ? { ...order, ...data.data } : order\r\n      ),\r\n    }));\r\n\r\n    return data.data;\r\n  }, []);\r\n\r\n  const changeOrderStatus = useCallback(async (\r\n    orderId: string, \r\n    newStatus: string, \r\n    reason: string,\r\n    additionalData?: any\r\n  ): Promise<void> => {\r\n    const response = await fetch(`/api/admin/orders/${orderId}/status`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        status: newStatus,\r\n        reason,\r\n        ...additionalData,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Error al cambiar estado');\r\n    }\r\n\r\n    // Actualizar orden en el estado local\r\n    setState(prev => ({\r\n      ...prev,\r\n      orders: prev.orders.map(order => \r\n        order.id === orderId ? { ...order, status: newStatus } : order\r\n      ),\r\n    }));\r\n  }, []);\r\n\r\n  const bulkUpdateStatus = useCallback(async (\r\n    bulkData: BulkStatusUpdate\r\n  ): Promise<BulkStatusUpdateResult> => {\r\n    const response = await fetch('/api/admin/orders/bulk?operation=status_update', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(bulkData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Error en operación masiva');\r\n    }\r\n\r\n    // Refrescar lista después de operación masiva\r\n    await fetchOrders(state.filters);\r\n\r\n    return data.data;\r\n  }, [state.filters, fetchOrders]);\r\n\r\n  const exportOrders = useCallback(async (\r\n    format: 'csv' | 'json' = 'csv',\r\n    filters?: OrderFilters\r\n  ): Promise<any> => {\r\n    const response = await fetch('/api/admin/orders/bulk?operation=export', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        format,\r\n        filters: filters || state.filters,\r\n        include_items: true,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Error al exportar órdenes');\r\n    }\r\n\r\n    return data.data;\r\n  }, [state.filters]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE FILTRADO Y PAGINACIÓN\r\n  // ===================================\r\n\r\n  const updateFilters = useCallback((newFilters: Partial<OrderFilters>) => {\r\n    const updatedFilters = {\r\n      ...state.filters,\r\n      ...newFilters,\r\n      page: newFilters.page || 1, // Reset page unless explicitly set\r\n    };\r\n\r\n    setState(prev => ({\r\n      ...prev,\r\n      filters: updatedFilters,\r\n    }));\r\n\r\n    fetchOrders(updatedFilters);\r\n  }, [state.filters, fetchOrders]);\r\n\r\n  const setPage = useCallback((page: number) => {\r\n    updateFilters({ page });\r\n  }, [updateFilters]);\r\n\r\n  const setSearch = useCallback((search: string) => {\r\n    updateFilters({ search, page: 1 });\r\n  }, [updateFilters]);\r\n\r\n  const setStatus = useCallback((status: string | undefined) => {\r\n    updateFilters({ status, page: 1 });\r\n  }, [updateFilters]);\r\n\r\n  const setPaymentStatus = useCallback((payment_status: string | undefined) => {\r\n    updateFilters({ payment_status, page: 1 });\r\n  }, [updateFilters]);\r\n\r\n  const setSorting = useCallback((sort_by: string, sort_order: 'asc' | 'desc') => {\r\n    updateFilters({ sort_by, sort_order });\r\n  }, [updateFilters]);\r\n\r\n  const setDateRange = useCallback((date_from?: string, date_to?: string) => {\r\n    updateFilters({ date_from, date_to, page: 1 });\r\n  }, [updateFilters]);\r\n\r\n  const clearFilters = useCallback(() => {\r\n    const defaultFilters: OrderFilters = {\r\n      page: 1,\r\n      limit: 20,\r\n      sort_by: 'created_at',\r\n      sort_order: 'desc',\r\n    };\r\n\r\n    setState(prev => ({\r\n      ...prev,\r\n      filters: defaultFilters,\r\n    }));\r\n\r\n    fetchOrders(defaultFilters);\r\n  }, [fetchOrders]);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE UTILIDAD\r\n  // ===================================\r\n\r\n  const refresh = useCallback(() => {\r\n    fetchOrders(state.filters);\r\n  }, [state.filters, fetchOrders]);\r\n\r\n  const getOrderById = useCallback((orderId: string): OrderEnterprise | undefined => {\r\n    return state.orders.find(order => order.id === orderId);\r\n  }, [state.orders]);\r\n\r\n  const getOrdersByStatus = useCallback((status: string): OrderEnterprise[] => {\r\n    return state.orders.filter(order => order.status === status);\r\n  }, [state.orders]);\r\n\r\n  // ===================================\r\n  // FUNCIÓN DE VALIDACIÓN DE DATOS\r\n  // ===================================\r\n\r\n  const validateOrderTotal = useCallback((total: unknown): number => {\r\n    if (typeof total === 'number' && !isNaN(total) && total >= 0) {\r\n      return total;\r\n    }\r\n    console.warn('[useOrdersEnterprise] Invalid order total detected:', total);\r\n    return 0;\r\n  }, []);\r\n\r\n  const getOrderTotal = useCallback((order: any): number => {\r\n    // Manejar tanto 'total' como 'total_amount' para compatibilidad con mocks\r\n    const total = order.total ?? order.total_amount;\r\n    return validateOrderTotal(total);\r\n  }, [validateOrderTotal]);\r\n\r\n  const getTotalRevenue = useCallback((): number => {\r\n    return state.orders.reduce((total, order) => {\r\n      const orderTotal = getOrderTotal(order);\r\n      return order.status !== 'cancelled' ? total + orderTotal : total;\r\n    }, 0);\r\n  }, [state.orders, getOrderTotal]);\r\n\r\n  const getAverageOrderValue = useCallback((): number => {\r\n    const validOrders = state.orders.filter(order => {\r\n      const total = getOrderTotal(order);\r\n      return order.status !== 'cancelled' && total > 0;\r\n    });\r\n\r\n    if (validOrders.length === 0) return 0;\r\n\r\n    const total = validOrders.reduce((sum, order) =>\r\n      sum + getOrderTotal(order), 0\r\n    );\r\n    return Math.round((total / validOrders.length) * 100) / 100;\r\n  }, [state.orders, getOrderTotal]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  useEffect(() => {\r\n    fetchOrders(state.filters);\r\n  }, []); // Solo ejecutar una vez al montar\r\n\r\n  // ===================================\r\n  // RETURN DEL HOOK\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    orders: state.orders,\r\n    loading: state.loading,\r\n    error: state.error,\r\n    filters: state.filters,\r\n    pagination: state.pagination,\r\n\r\n    // Operaciones CRUD\r\n    createOrder,\r\n    updateOrder,\r\n    changeOrderStatus,\r\n    bulkUpdateStatus,\r\n    exportOrders,\r\n\r\n    // Filtrado y paginación\r\n    updateFilters,\r\n    setPage,\r\n    setSearch,\r\n    setStatus,\r\n    setPaymentStatus,\r\n    setSorting,\r\n    setDateRange,\r\n    clearFilters,\r\n\r\n    // Utilidades\r\n    refresh,\r\n    getOrderById,\r\n    getOrdersByStatus,\r\n    getTotalRevenue,\r\n    getAverageOrderValue,\r\n\r\n    // Funciones de conveniencia\r\n    hasNextPage: state.pagination.hasNextPage,\r\n    hasPreviousPage: state.pagination.hasPreviousPage,\r\n    totalOrders: state.pagination.total,\r\n    currentPage: state.pagination.page,\r\n    totalPages: state.pagination.totalPages,\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOOK PARA ORDEN INDIVIDUAL\r\n// ===================================\r\n\r\nexport function useOrderDetail(orderId: string) {\r\n  const [order, setOrder] = useState<OrderEnterprise | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchOrder = useCallback(async () => {\r\n    if (!orderId) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(`/api/admin/orders/${orderId}`);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al cargar orden');\r\n      }\r\n\r\n      setOrder(data.data.order);\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Error desconocido');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [orderId]);\r\n\r\n  useEffect(() => {\r\n    fetchOrder();\r\n  }, [fetchOrder]);\r\n\r\n  return {\r\n    order,\r\n    loading,\r\n    error,\r\n    refresh: fetchOrder,\r\n  };\r\n}\r\n"],"names":["useOrderDetail","useOrdersEnterprise","initialFilters","state","setState","useState","orders","loading","error","filters","page","limit","sort_by","sort_order","pagination","total","totalPages","hasNextPage","hasPreviousPage","fetchOrders","useCallback","prev","queryParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","data","json","ok","Error","message","createOrder","orderData","method","headers","body","JSON","stringify","updateOrder","orderId","map","order","id","changeOrderStatus","newStatus","reason","additionalData","status","bulkUpdateStatus","bulkData","exportOrders","format","include_items","updateFilters","newFilters","updatedFilters","setPage","setSearch","search","setStatus","setPaymentStatus","payment_status","setSorting","setDateRange","date_from","date_to","clearFilters","defaultFilters","refresh","getOrderById","find","getOrdersByStatus","filter","validateOrderTotal","isNaN","console","warn","getOrderTotal","total_amount","getTotalRevenue","reduce","orderTotal","getAverageOrderValue","validOrders","length","sum","Math","round","useEffect","totalOrders","currentPage","setOrder","setLoading","setError","fetchOrder"],"mappings":"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"}