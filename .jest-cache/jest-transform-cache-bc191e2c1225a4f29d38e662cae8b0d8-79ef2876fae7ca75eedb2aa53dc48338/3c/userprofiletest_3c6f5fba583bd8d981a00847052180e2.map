{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\user-profile.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TESTS PARA API USER PROFILE\n// ===================================\n\nimport { NextRequest } from 'next/server';\nimport { GET, PUT } from '@/app/api/user/profile/route';\n\n// Mock Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  currentUser: jest.fn(),\n}));\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(() => ({\n            data: {\n              id: '1',\n              clerk_id: 'clerk_123',\n              name: 'Juan Pérez',\n              email: 'juan@example.com',\n            },\n            error: null,\n          })),\n        })),\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(() => ({\n            data: {\n              id: '1',\n              clerk_id: 'clerk_123',\n              name: 'Usuario Demo',\n              email: 'usuario@demo.com',\n            },\n            error: null,\n          })),\n        })),\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(() => ({\n              data: {\n                id: '1',\n                clerk_id: 'clerk_123',\n                name: 'Juan Carlos Pérez',\n                email: 'juan@example.com',\n              },\n              error: null,\n            })),\n          })),\n        })),\n      })),\n    })),\n  },\n}));\n\nconst mockUser = {\n  id: 'clerk_123',\n  emailAddresses: [{ emailAddress: 'juan@example.com' }],\n  firstName: 'Juan',\n  lastName: 'Pérez',\n};\n\ndescribe('/api/user/profile', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Configurar mock de currentUser por defecto\n    const { currentUser } = require('@clerk/nextjs/server');\n    currentUser.mockResolvedValue(mockUser);\n\n    // Resetear el mock de Supabase a su estado por defecto\n    const { supabaseAdmin } = require('@/lib/supabase');\n    supabaseAdmin.from.mockReturnValue({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(() => ({\n            data: {\n              id: '1',\n              clerk_id: 'clerk_123',\n              name: 'Juan Pérez',\n              email: 'juan@example.com',\n            },\n            error: null,\n          })),\n        })),\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(() => ({\n            data: {\n              id: '1',\n              clerk_id: 'clerk_123',\n              name: 'Usuario Demo',\n              email: 'usuario@demo.com',\n            },\n            error: null,\n          })),\n        })),\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(() => ({\n              data: {\n                id: '1',\n                clerk_id: 'clerk_123',\n                name: 'Juan Carlos Pérez',\n                email: 'juan@example.com',\n              },\n              error: null,\n            })),\n          })),\n        })),\n      })),\n    });\n  });\n\n  describe('GET', () => {\n    it('should return user profile successfully', async () => {\n      // Asegurar que currentUser devuelve un usuario válido\n      const { currentUser } = require('@clerk/nextjs/server');\n      currentUser.mockResolvedValue(mockUser);\n\n      // Asegurar que Supabase devuelve datos válidos\n      const { supabaseAdmin } = require('@/lib/supabase');\n      supabaseAdmin.from.mockReturnValue({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({\n              data: {\n                id: '1',\n                clerk_id: 'clerk_123',\n                name: 'Juan Pérez',\n                email: 'juan@example.com',\n              },\n              error: null,\n            })),\n          })),\n        })),\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/user/profile');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      // Si el test falla, mostrar la respuesta real para debug\n      if (response.status !== 200) {\n        console.log('Response status:', response.status);\n        console.log('Response data:', data);\n      }\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.user).toEqual({\n        id: '1',\n        clerk_id: 'clerk_123',\n        name: 'Juan Pérez',\n        email: 'juan@example.com',\n      });\n    });\n\n    it('should handle unauthenticated user (currently returns demo user)', async () => {\n      const { currentUser } = require('@clerk/nextjs/server');\n      currentUser.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/user/profile');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      // La API actual devuelve un usuario demo cuando no hay autenticación\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.user).toBeDefined();\n    });\n\n    it('should create demo user when not found in database', async () => {\n      const { currentUser } = require('@clerk/nextjs/server');\n      currentUser.mockResolvedValue(mockUser);\n\n      const { supabaseAdmin } = require('@/lib/supabase');\n      supabaseAdmin.from.mockReturnValue({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => ({\n              data: null,\n              error: { code: 'PGRST116' },\n            })),\n          })),\n        })),\n        insert: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(() => ({\n              data: {\n                id: '1',\n                clerk_id: 'demo-user-id',\n                name: 'Usuario Demo',\n                email: 'usuario@demo.com',\n              },\n              error: null,\n            })),\n          })),\n        })),\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/user/profile');\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.user.name).toBe('Usuario Demo');\n    });\n  });\n\n  describe('PUT', () => {\n    it('should update user profile successfully', async () => {\n      const { currentUser } = require('@clerk/nextjs/server');\n      currentUser.mockResolvedValue(mockUser);\n\n      const requestBody = { name: 'Juan Carlos Pérez', email: 'juan@example.com' };\n      const request = new NextRequest('http://localhost:3000/api/user/profile', {\n        method: 'PUT',\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.user.name).toBe('Juan Carlos Pérez');\n    });\n\n    it('should handle missing required fields', async () => {\n      const { currentUser } = require('@clerk/nextjs/server');\n      currentUser.mockResolvedValue(mockUser);\n\n      const request = new NextRequest('http://localhost:3000/api/user/profile', {\n        method: 'PUT',\n        body: JSON.stringify({ name: 'Juan Carlos Pérez' }), // Falta email\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Nombre y email son requeridos');\n    });\n\n    it('should handle database update error', async () => {\n      const { currentUser } = require('@clerk/nextjs/server');\n      currentUser.mockResolvedValue(mockUser);\n\n      const { supabaseAdmin } = require('@/lib/supabase');\n      supabaseAdmin.from.mockReturnValue({\n        update: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            select: jest.fn(() => ({\n              single: jest.fn(() => ({\n                data: null,\n                error: { message: 'Update failed' },\n              })),\n            })),\n          })),\n        })),\n      });\n\n      const requestBody = { name: 'Juan Carlos Pérez', email: 'juan@example.com' };\n      const request = new NextRequest('http://localhost:3000/api/user/profile', {\n        method: 'PUT',\n        body: JSON.stringify(requestBody),\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBe('Error al actualizar perfil de usuario');\n    });\n  });\n});\n"],"names":["jest","mock","currentUser","fn","supabaseAdmin","from","select","eq","single","data","id","clerk_id","name","email","error","insert","update","mockUser","emailAddresses","emailAddress","firstName","lastName","describe","beforeEach","clearAllMocks","require","mockResolvedValue","mockReturnValue","it","Promise","resolve","request","NextRequest","response","GET","json","status","console","log","expect","toBe","success","user","toEqual","toBeDefined","code","requestBody","method","body","JSON","stringify","PUT","message"],"mappings":"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"}