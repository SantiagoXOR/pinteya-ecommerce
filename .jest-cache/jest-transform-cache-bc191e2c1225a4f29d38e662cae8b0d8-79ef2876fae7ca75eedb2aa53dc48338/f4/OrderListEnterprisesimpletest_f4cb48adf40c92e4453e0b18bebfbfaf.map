{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\OrderListEnterprise-simple.test.tsx"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - SIMPLE CIRCULAR DEPENDENCIES TEST\n// Prueba simple para verificar que no hay dependencias circulares\n// ===================================\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { jest } from '@jest/globals';\nimport { OrderListEnterprise } from '@/components/admin/orders/OrderListEnterprise';\n\n// ===================================\n// MOCKS SIMPLES\n// ===================================\n\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\nconst mockToast = jest.fn();\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({ toast: mockToast })\n}));\n\n// Mock de performance\nconst mockPerformanceNow = jest.fn();\nObject.defineProperty(global, 'performance', {\n  value: { now: mockPerformanceNow },\n  writable: true\n});\n\n// Datos de prueba simples\nconst mockApiResponse = {\n  success: true,\n  data: {\n    orders: [],\n    pagination: {\n      page: 1,\n      limit: 20,\n      total: 0,\n      totalPages: 0,\n      hasNextPage: false,\n      hasPreviousPage: false\n    },\n    analytics: {\n      total_orders: 0,\n      total_revenue: 0,\n      pending_orders: 0,\n      completed_orders: 0\n    }\n  },\n  message: 'Orders retrieved successfully',\n  timestamp: new Date().toISOString()\n};\n\n// ===================================\n// SETUP Y CLEANUP\n// ===================================\n\nbeforeEach(() => {\n  jest.clearAllMocks();\n  mockPerformanceNow.mockReturnValue(1000);\n  \n  mockFetch.mockResolvedValue({\n    ok: true,\n    status: 200,\n    json: async () => mockApiResponse\n  });\n});\n\nafterEach(() => {\n  jest.clearAllTimers();\n});\n\n// ===================================\n// TESTS SIMPLES\n// ===================================\n\ndescribe('OrderListEnterprise - Simple Tests', () => {\n  it('debe renderizarse sin errores', async () => {\n    render(<OrderListEnterprise />);\n    \n    // Verificar que el componente se renderiza\n    expect(screen.getByText('Gestión de Órdenes')).toBeInTheDocument();\n    \n    // Esperar a que termine la carga\n    await waitFor(() => {\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\n    });\n  });\n\n  it('debe manejar cambios de filtros sin renders infinitos', async () => {\n    const { container } = render(<OrderListEnterprise />);\n    \n    // Esperar carga inicial\n    await waitFor(() => {\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\n    });\n\n    // Cambiar filtro de búsqueda\n    const searchInput = screen.getByPlaceholderText('Buscar órdenes...');\n    fireEvent.change(searchInput, { target: { value: 'test' } });\n\n    // Verificar que el componente sigue funcionando\n    expect(searchInput).toHaveValue('test');\n    \n    // No debería haber errores en console\n    expect(mockToast).not.toHaveBeenCalledWith(\n      expect.objectContaining({\n        variant: 'destructive'\n      })\n    );\n  });\n\n  it('debe hacer solo una petición inicial', async () => {\n    render(<OrderListEnterprise />);\n    \n    // Esperar carga inicial\n    await waitFor(() => {\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\n    });\n\n    // Verificar que solo se hizo una petición\n    expect(mockFetch).toHaveBeenCalledTimes(1);\n  });\n\n  it('debe limpiar recursos al desmontarse', async () => {\n    const { unmount } = render(<OrderListEnterprise />);\n    \n    // Esperar carga inicial\n    await waitFor(() => {\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\n    });\n\n    // Desmontar componente\n    unmount();\n\n    // No debería haber errores después del desmontaje\n    expect(mockToast).not.toHaveBeenCalledWith(\n      expect.objectContaining({\n        variant: 'destructive'\n      })\n    );\n  });\n});\n"],"names":["mockFetch","jest","fn","global","fetch","mockToast","mock","useToast","toast","mockPerformanceNow","Object","defineProperty","value","now","writable","mockApiResponse","success","data","orders","pagination","page","limit","total","totalPages","hasNextPage","hasPreviousPage","analytics","total_orders","total_revenue","pending_orders","completed_orders","message","timestamp","Date","toISOString","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","ok","status","json","afterEach","clearAllTimers","describe","it","render","OrderListEnterprise","expect","screen","getByText","toBeInTheDocument","waitFor","container","searchInput","getByPlaceholderText","fireEvent","change","target","toHaveValue","not","toHaveBeenCalledWith","objectContaining","variant","toHaveBeenCalledTimes","unmount"],"mappings":"AAAA,sCAAsC;AACtC,yDAAyD;AACzD,kEAAkE;AAClE,sCAAsC;;;;;;8DAEpB;wBACiC;yBACS;qCAExB;;;;;;AAEpC,sCAAsC;AACtC,gBAAgB;AAChB,sCAAsC;AAEtC,MAAMA,YAAYC,aAAI,CAACC,EAAE;AACzBC,OAAOC,KAAK,GAAGJ;AAEf,MAAMK,YAAYJ,aAAI,CAACC,EAAE;AACzBD,aAAI,CAACK,IAAI,CAAC,qBAAqB,IAAO,CAAA;QACpCC,UAAU,IAAO,CAAA;gBAAEC,OAAOH;YAAU,CAAA;IACtC,CAAA;AAEA,sBAAsB;AACtB,MAAMI,qBAAqBR,aAAI,CAACC,EAAE;AAClCQ,OAAOC,cAAc,CAACR,QAAQ,eAAe;IAC3CS,OAAO;QAAEC,KAAKJ;IAAmB;IACjCK,UAAU;AACZ;AAEA,0BAA0B;AAC1B,MAAMC,kBAAkB;IACtBC,SAAS;IACTC,MAAM;QACJC,QAAQ,EAAE;QACVC,YAAY;YACVC,MAAM;YACNC,OAAO;YACPC,OAAO;YACPC,YAAY;YACZC,aAAa;YACbC,iBAAiB;QACnB;QACAC,WAAW;YACTC,cAAc;YACdC,eAAe;YACfC,gBAAgB;YAChBC,kBAAkB;QACpB;IACF;IACAC,SAAS;IACTC,WAAW,IAAIC,OAAOC,WAAW;AACnC;AAEA,sCAAsC;AACtC,kBAAkB;AAClB,sCAAsC;AAEtCC,IAAAA,mBAAU,EAAC;IACTlC,aAAI,CAACmC,aAAa;IAClB3B,mBAAmB4B,eAAe,CAAC;IAEnCrC,UAAUsC,iBAAiB,CAAC;QAC1BC,IAAI;QACJC,QAAQ;QACRC,MAAM,UAAY1B;IACpB;AACF;AAEA2B,IAAAA,kBAAS,EAAC;IACRzC,aAAI,CAAC0C,cAAc;AACrB;AAEA,sCAAsC;AACtC,gBAAgB;AAChB,sCAAsC;AAEtCC,IAAAA,iBAAQ,EAAC,sCAAsC;IAC7CC,IAAAA,WAAE,EAAC,iCAAiC;QAClCC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;QAE3B,2CAA2C;QAC3CC,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,uBAAuBC,iBAAiB;QAEhE,iCAAiC;QACjC,MAAMC,IAAAA,eAAO,EAAC;YACZJ,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,wDAAwDC,iBAAiB;QACnG;IACF;IAEAN,IAAAA,WAAE,EAAC,yDAAyD;QAC1D,MAAM,EAAEQ,SAAS,EAAE,GAAGP,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;QAEjD,wBAAwB;QACxB,MAAMK,IAAAA,eAAO,EAAC;YACZJ,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,wDAAwDC,iBAAiB;QACnG;QAEA,6BAA6B;QAC7B,MAAMG,cAAcL,cAAM,CAACM,oBAAoB,CAAC;QAChDC,iBAAS,CAACC,MAAM,CAACH,aAAa;YAAEI,QAAQ;gBAAE9C,OAAO;YAAO;QAAE;QAE1D,gDAAgD;QAChDoC,IAAAA,eAAM,EAACM,aAAaK,WAAW,CAAC;QAEhC,sCAAsC;QACtCX,IAAAA,eAAM,EAAC3C,WAAWuD,GAAG,CAACC,oBAAoB,CACxCb,eAAM,CAACc,gBAAgB,CAAC;YACtBC,SAAS;QACX;IAEJ;IAEAlB,IAAAA,WAAE,EAAC,wCAAwC;QACzCC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;QAE3B,wBAAwB;QACxB,MAAMK,IAAAA,eAAO,EAAC;YACZJ,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,wDAAwDC,iBAAiB;QACnG;QAEA,0CAA0C;QAC1CH,IAAAA,eAAM,EAAChD,WAAWgE,qBAAqB,CAAC;IAC1C;IAEAnB,IAAAA,WAAE,EAAC,wCAAwC;QACzC,MAAM,EAAEoB,OAAO,EAAE,GAAGnB,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;QAE/C,wBAAwB;QACxB,MAAMK,IAAAA,eAAO,EAAC;YACZJ,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,wDAAwDC,iBAAiB;QACnG;QAEA,uBAAuB;QACvBc;QAEA,kDAAkD;QAClDjB,IAAAA,eAAM,EAAC3C,WAAWuD,GAAG,CAACC,oBAAoB,CACxCb,eAAM,CAACc,gBAAgB,CAAC;YACtBC,SAAS;QACX;IAEJ;AACF"}