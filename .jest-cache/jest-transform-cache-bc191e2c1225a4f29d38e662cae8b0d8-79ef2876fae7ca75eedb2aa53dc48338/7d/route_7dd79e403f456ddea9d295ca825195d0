a2b9adeb8d0d5e1866e4c891f93abd85
// ===================================
// PINTEYA E-COMMERCE - CREATE PAYMENT PREFERENCE API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _supabase = require("../../../../lib/supabase");
const _mercadopago = require("../../../../lib/mercadopago");
const _server1 = require("@clerk/nextjs/server");
const _shop = require("../../../../constants/shop");
const _zod = require("zod");
const _logger = require("../../../../lib/logger");
const _ratelimiter = require("../../../../lib/rate-limiter");
const _metrics = require("../../../../lib/metrics");
// Schema de validación para la entrada
const CreatePreferenceSchema = _zod.z.object({
    items: _zod.z.array(_zod.z.object({
        id: _zod.z.string().min(1, 'ID de producto requerido'),
        quantity: _zod.z.number().min(1, 'Cantidad debe ser mayor a 0').max(99, 'Cantidad máxima excedida')
    })).min(1, 'Al menos un producto es requerido'),
    payer: _zod.z.object({
        name: _zod.z.string().min(_shop.VALIDATION_CONSTANTS.MIN_NAME_LENGTH, 'Nombre requerido'),
        surname: _zod.z.string().min(_shop.VALIDATION_CONSTANTS.MIN_NAME_LENGTH, 'Apellido requerido'),
        email: _zod.z.string().email('Email inválido'),
        phone: _zod.z.string().regex(_shop.VALIDATION_CONSTANTS.PHONE_REGEX, 'Teléfono inválido').optional(),
        identification: _zod.z.object({
            type: _zod.z.string().min(1, 'Tipo de identificación requerido'),
            number: _zod.z.string().min(1, 'Número de identificación requerido')
        }).optional()
    }),
    shipping: _zod.z.object({
        cost: _zod.z.number().min(0, 'Costo de envío inválido'),
        address: _zod.z.object({
            street_name: _zod.z.string().min(1, 'Nombre de calle requerido'),
            street_number: _zod.z.string().min(1, 'Número de calle requerido'),
            zip_code: _zod.z.string().min(1, 'Código postal requerido'),
            city_name: _zod.z.string().min(1, 'Ciudad requerida'),
            state_name: _zod.z.string().min(1, 'Provincia requerida')
        })
    }).optional(),
    external_reference: _zod.z.string().optional()
});
// Función helper para calcular precio final
function getFinalPrice(product) {
    return product.discounted_price || product.price;
}
// Función helper para crear usuario temporal
async function createTemporaryUser(userId, email, name) {
    if (!_supabase.supabaseAdmin) {
        throw new Error('Cliente administrativo de Supabase no disponible');
    }
    const { error } = await _supabase.supabaseAdmin.from('users').insert({
        id: userId,
        clerk_id: 'temp-user',
        email,
        name
    });
    if (error) {
        console.error('Error creating temporary user:', error);
        throw new Error('Error creando usuario temporal');
    }
}
async function POST(request) {
    const requestStart = Date.now();
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';
    // ✅ NUEVO: Logging estructurado del inicio de la request
    _logger.logger.info(_logger.LogCategory.PAYMENT, 'Create preference request started', {
        endpoint: '/api/payments/create-preference',
        method: 'POST'
    }, {
        clientIP,
        userAgent
    });
    // ✅ NUEVO: Rate limiting avanzado para API de pagos
    const rateLimitConfig = {
        ..._ratelimiter.RATE_LIMIT_CONFIGS.PAYMENT_API,
        keyGenerator: (0, _ratelimiter.endpointKeyGenerator)('create-preference')
    };
    const rateLimitResult = await (0, _ratelimiter.checkRateLimit)(request, rateLimitConfig);
    if (!rateLimitResult.success) {
        _logger.logger.warn(_logger.LogCategory.SECURITY, 'Rate limit exceeded for create-preference', {
            clientIP,
            limit: rateLimitResult.limit,
            retryAfter: rateLimitResult.retryAfter
        });
        return _server.NextResponse.json({
            success: false,
            error: rateLimitConfig.message,
            retryAfter: rateLimitResult.retryAfter
        }, {
            status: 429,
            headers: {
                'RateLimit-Limit': rateLimitResult.limit.toString(),
                'RateLimit-Remaining': rateLimitResult.remaining.toString(),
                'RateLimit-Reset': new Date(rateLimitResult.resetTime).toISOString(),
                'Retry-After': rateLimitResult.retryAfter?.toString() || '60'
            }
        });
    }
    try {
        // Verificar que el cliente administrativo esté disponible
        if (!_supabase.supabaseAdmin) {
            _logger.logger.error(_logger.LogCategory.PAYMENT, 'Supabase admin client not available', undefined, {
                clientIP
            });
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio de base de datos no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Validar entrada
        const rawData = await request.json();
        const validationResult = CreatePreferenceSchema.safeParse(rawData);
        if (!validationResult.success) {
            const errorResponse = {
                data: null,
                success: false,
                error: `Datos inválidos: ${validationResult.error.errors.map((e)=>e.message).join(', ')}`
            };
            return _server.NextResponse.json(errorResponse, {
                status: 400
            });
        }
        const orderData = validationResult.data;
        const productIds = orderData.items.map((item)=>parseInt(item.id));
        const shippingCost = orderData.shipping?.cost || 0;
        // ===================================
        // OBTENER USUARIO AUTENTICADO CON CLERK
        // ===================================
        let userId = null;
        let userEmail = null;
        try {
            // Intentar obtener usuario autenticado de Clerk
            const clerkUser = await (0, _server1.currentUser)();
            if (clerkUser) {
                userId = clerkUser.id;
                userEmail = clerkUser.emailAddresses[0]?.emailAddress || null;
                // Verificar si el usuario existe en nuestra base de datos
                const { data: existingUser, error: userError } = await _supabase.supabaseAdmin.from('users').select('id, clerk_id').eq('clerk_id', clerkUser.id).single();
                if (userError && userError.code !== 'PGRST116') {
                    console.error('Error checking user in database:', userError);
                }
                // Si el usuario no existe en nuestra DB, crearlo
                if (!existingUser) {
                    const { data: newUser, error: createUserError } = await _supabase.supabaseAdmin.from('users').insert({
                        clerk_id: clerkUser.id,
                        email: userEmail,
                        name: `${clerkUser.firstName || ''} ${clerkUser.lastName || ''}`.trim() || 'Usuario'
                    }).select('id').single();
                    if (createUserError) {
                        console.error('Error creating user in database:', createUserError);
                        // Continuar con usuario temporal si falla la creación
                        userId = null;
                    } else if (newUser) {
                        userId = newUser.id;
                    } else {
                        console.error('Error: newUser is null after insertion');
                        userId = null;
                    }
                } else {
                    userId = existingUser.id;
                }
            }
        } catch (clerkError) {
            console.error('Error getting Clerk user:', clerkError);
        // Continuar sin usuario autenticado
        }
        // Si no hay usuario autenticado, usar usuario temporal
        if (!userId) {
            console.log('No authenticated user found, using temporary user');
            userId = '00000000-0000-4000-8000-000000000000';
            userEmail = orderData.payer.email;
            // Verificar que el usuario temporal existe
            const { data: tempUser, error: tempUserError } = await _supabase.supabaseAdmin.from('users').select('id').eq('id', userId).single();
            if (tempUserError) {
                // Crear usuario temporal si no existe
                const { error: createTempError } = await _supabase.supabaseAdmin.from('users').insert({
                    id: userId,
                    clerk_id: 'temp-user',
                    email: userEmail,
                    name: `${orderData.payer.name} ${orderData.payer.surname}`.trim()
                });
                if (createTempError) {
                    console.error('Error creating temporary user:', createTempError);
                }
            }
        }
        // ===================================
        // OBTENER PRODUCTOS Y VALIDAR STOCK
        // ===================================
        const { data: products, error: productsError } = await _supabase.supabaseAdmin.from('products').select(`
        id,
        name,
        price,
        discounted_price,
        stock,
        images,
        category:categories (
          name,
          slug
        )
      `).in('id', productIds);
        if (productsError || !products) {
            console.error('Error fetching products:', productsError);
            const errorResponse = {
                data: null,
                success: false,
                error: 'Error obteniendo productos'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
        // Convertir productos para tener categoría como objeto
        const typedProducts = products.map((product)=>({
                ...product,
                category: product.category && product.category.length > 0 ? product.category[0] : null
            }));
        // Validar stock disponible
        for (const item of orderData.items){
            const product = typedProducts.find((p)=>p.id === parseInt(item.id));
            if (!product) {
                const errorResponse = {
                    data: null,
                    success: false,
                    error: `Producto ${item.id} no encontrado`
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 400
                });
            }
            if (product.stock < item.quantity) {
                const errorResponse = {
                    data: null,
                    success: false,
                    error: `Stock insuficiente para ${product.name}. Disponible: ${product.stock}, solicitado: ${item.quantity}`
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 400
                });
            }
        }
        // ===================================
        // CALCULAR TOTALES CON PRECIOS CORRECTOS
        // ===================================
        const itemsTotal = orderData.items.reduce((total, item)=>{
            const product = typedProducts.find((p)=>p.id === parseInt(item.id));
            if (!product) return total;
            // Usar precio con descuento si existe, sino precio normal
            const finalPrice = getFinalPrice(product);
            return total + finalPrice * item.quantity;
        }, 0);
        const totalAmount = itemsTotal + shippingCost;
        // ===================================
        // CREAR ORDEN EN BASE DE DATOS
        // ===================================
        const { data: order, error: orderError } = await _supabase.supabaseAdmin.from('orders').insert({
            user_id: userId,
            status: 'pending',
            total: totalAmount,
            shipping_address: orderData.shipping?.address ? JSON.stringify(orderData.shipping.address) : null,
            external_reference: orderData.external_reference || `order_${Date.now()}`
        }).select().single();
        if (orderError || !order) {
            console.error('Error creating order:', orderError);
            console.error('Order data attempted:', {
                user_id: userId,
                status: 'pending',
                total: totalAmount,
                shipping_address: orderData.shipping?.address ? JSON.stringify(orderData.shipping.address) : null,
                external_reference: orderData.external_reference || `order_${Date.now()}`
            });
            const errorResponse = {
                data: null,
                success: false,
                error: `Error creando orden: ${orderError?.message || 'Unknown error'}`
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
        // ===================================
        // CREAR ITEMS DE LA ORDEN CON PRECIOS CORRECTOS
        // ===================================
        const orderItems = orderData.items.map((item)=>{
            const product = typedProducts.find((p)=>p.id === parseInt(item.id));
            if (!product) {
                throw new Error(`Producto ${item.id} no encontrado`);
            }
            // Usar precio con descuento si existe, sino precio normal
            const finalPrice = getFinalPrice(product);
            return {
                order_id: order.id,
                product_id: parseInt(item.id),
                quantity: item.quantity,
                price: finalPrice
            };
        });
        const { error: itemsError } = await _supabase.supabaseAdmin.from('order_items').insert(orderItems);
        if (itemsError) {
            console.error('Error creating order items:', itemsError);
            // Rollback: eliminar orden creada
            await _supabase.supabaseAdmin.from('orders').delete().eq('id', order.id);
            const errorResponse = {
                data: null,
                success: false,
                error: 'Error creando items de orden'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
        // ===================================
        // CONVERTIR ITEMS PARA MERCADOPAGO
        // ===================================
        const mercadoPagoItems = typedProducts.map((product)=>{
            const orderItem = orderData.items.find((item)=>item.id === product.id.toString());
            if (!orderItem) {
                throw new Error(`Order item not found for product ${product.id}`);
            }
            // Usar precio con descuento si existe, sino precio normal
            const finalPrice = getFinalPrice(product);
            return {
                id: product.id.toString(),
                title: product.name,
                description: `Producto de pinturería - ${product.category?.name || 'General'}`,
                picture_url: product.images?.previews?.[0] || '',
                category_id: product.category?.slug || 'general',
                quantity: orderItem.quantity,
                currency_id: 'ARS',
                unit_price: finalPrice
            };
        });
        // Agregar costo de envío si existe
        if (shippingCost > 0) {
            mercadoPagoItems.push({
                id: 'shipping',
                title: 'Costo de envío',
                description: 'Envío a domicilio',
                category_id: 'shipping',
                quantity: 1,
                currency_id: 'ARS',
                unit_price: shippingCost
            });
        }
        // ✅ MEJORADO: Usar nueva función con configuración avanzada
        const preferenceResult = await (0, _mercadopago.createPaymentPreference)({
            items: mercadoPagoItems,
            payer: {
                name: orderData.payer.name,
                surname: orderData.payer.surname,
                email: orderData.payer.email,
                phone: orderData.payer.phone ? {
                    area_code: orderData.payer.phone.substring(0, 3),
                    number: orderData.payer.phone.substring(3)
                } : undefined,
                identification: orderData.payer.identification,
                address: orderData.shipping ? {
                    street_name: orderData.shipping.address.street_name,
                    street_number: orderData.shipping.address.street_number,
                    zip_code: orderData.shipping.address.zip_code
                } : undefined
            },
            back_urls: {
                success: `${process.env.NEXT_PUBLIC_APP_URL}/checkout/success?order_id=${order.id}`,
                failure: `${process.env.NEXT_PUBLIC_APP_URL}/checkout/failure?order_id=${order.id}`,
                pending: `${process.env.NEXT_PUBLIC_APP_URL}/checkout/pending?order_id=${order.id}`
            },
            external_reference: order.id.toString(),
            shipments: orderData.shipping ? {
                cost: orderData.shipping.cost,
                receiver_address: {
                    zip_code: orderData.shipping.address.zip_code,
                    street_name: orderData.shipping.address.street_name,
                    street_number: orderData.shipping.address.street_number,
                    city_name: orderData.shipping.address.city_name,
                    state_name: orderData.shipping.address.state_name
                }
            } : undefined
        });
        // ✅ MEJORADO: Manejar resultado de la nueva función
        if (!preferenceResult.success) {
            throw new Error('error' in preferenceResult ? preferenceResult.error : 'Error creando preferencia de pago');
        }
        // Actualizar orden con ID de preferencia
        const preferenceData = 'data' in preferenceResult ? preferenceResult.data : null;
        const { error: updateError } = await _supabase.supabaseAdmin.from('orders').update({
            payment_preference_id: preferenceData?.id
        }).eq('id', order.id);
        if (updateError) {
            _logger.logger.warn(_logger.LogCategory.PAYMENT, 'Failed to update order with preference ID', {
                updateError
            }, {
                clientIP
            });
        }
        // ✅ NUEVO: Logging exitoso de creación de preferencia
        const processingTime = Date.now() - requestStart;
        _logger.logger.payment(_logger.LogLevel.INFO, 'Payment preference created successfully', {
            orderId: order.id.toString(),
            preferenceId: preferenceData?.id,
            amount: totalAmount,
            currency: 'ARS',
            method: 'mercadopago'
        }, {
            clientIP,
            userAgent
        });
        _logger.logger.performance(_logger.LogLevel.INFO, 'Create preference request completed', {
            operation: 'create-preference',
            duration: processingTime,
            endpoint: '/api/payments/create-preference',
            statusCode: 200
        }, {
            clientIP
        });
        // ✅ NUEVO: Crear respuesta con headers de rate limiting
        const response = _server.NextResponse.json({
            success: true,
            data: {
                init_point: preferenceData?.init_point,
                preference_id: preferenceData?.id
            }
        });
        // ✅ NUEVO: Registrar métricas de éxito
        await _metrics.metricsCollector.recordRequest('create-preference', 'POST', 200, Date.now() - requestStart, {
            clientIP,
            userAgent
        });
        // Agregar headers de rate limiting a la respuesta exitosa
        return (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, rateLimitConfig);
    } catch (error) {
        // ✅ MEJORADO: Logging estructurado de errores
        const processingTime = Date.now() - requestStart;
        _logger.logger.error(_logger.LogCategory.PAYMENT, 'Failed to create payment preference', error, {
            clientIP,
            userAgent
        });
        _logger.logger.performance(_logger.LogLevel.ERROR, 'Create preference request failed', {
            operation: 'create-preference',
            duration: processingTime,
            endpoint: '/api/payments/create-preference',
            statusCode: 500
        }, {
            clientIP
        });
        // ✅ NUEVO: Registrar métricas de error
        await _metrics.metricsCollector.recordRequest('create-preference', 'POST', 500, processingTime, {
            clientIP,
            userAgent,
            error: error.message
        });
        return _server.NextResponse.json({
            success: false,
            error: process.env.NODE_ENV === 'development' ? error.message : 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,