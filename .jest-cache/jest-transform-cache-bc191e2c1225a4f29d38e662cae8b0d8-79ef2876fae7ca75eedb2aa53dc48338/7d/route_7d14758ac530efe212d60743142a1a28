b46a638f8231150d7b98364306b7c9e9
// ===================================
// PINTEYA E-COMMERCE - MERCADOPAGO REFUNDS API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _server1 = require("@clerk/nextjs/server");
const _supabase = require("../../../../lib/supabase");
const _logger = require("../../../../lib/logger");
const _ratelimiter = require("../../../../lib/rate-limiter");
const _metrics = require("../../../../lib/metrics");
const _mercadopago = require("../../../../lib/mercadopago");
const _mercadopago1 = require("mercadopago");
async function POST(request) {
    const startTime = Date.now();
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';
    try {
        // Verificar autenticación
        const { userId } = await (0, _server1.auth)();
        if (!userId) {
            return _server.NextResponse.json({
                success: false,
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        // Rate limiting
        const rateLimitResult = await (0, _ratelimiter.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.PAYMENT_API);
        if (!rateLimitResult.success) {
            _logger.logger.warn(_logger.LogCategory.API, 'Rate limit exceeded for refunds', {
                clientIP,
                userId
            });
            const response = _server.NextResponse.json({
                success: false,
                error: 'Demasiadas solicitudes'
            }, {
                status: 429
            });
            (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.PAYMENT_API);
            return response;
        }
        const body = await request.json();
        const { payment_id, amount, reason, metadata } = body;
        // Validar datos requeridos
        if (!payment_id) {
            return _server.NextResponse.json({
                success: false,
                error: 'payment_id es requerido'
            }, {
                status: 400
            });
        }
        _logger.logger.info(_logger.LogCategory.PAYMENT, 'Refund request started', {
            userId,
            payment_id,
            amount,
            reason,
            clientIP
        });
        // Verificar que el pago existe y pertenece al usuario
        const supabase = (0, _supabase.getSupabaseClient)();
        if (!supabase) {
            return _server.NextResponse.json({
                success: false,
                error: 'Error de configuración de base de datos'
            }, {
                status: 500
            });
        }
        const { data: order, error: orderError } = await supabase.from('orders').select('id, total_amount, payment_status, external_reference').eq('external_reference', payment_id).single();
        if (orderError || !order) {
            return _server.NextResponse.json({
                success: false,
                error: 'Pago no encontrado'
            }, {
                status: 404
            });
        }
        if (order.payment_status !== 'approved') {
            return _server.NextResponse.json({
                success: false,
                error: 'Solo se pueden reembolsar pagos aprobados'
            }, {
                status: 400
            });
        }
        // Validar monto del reembolso
        const refundAmount = amount || order.total_amount;
        if (refundAmount > order.total_amount) {
            return _server.NextResponse.json({
                success: false,
                error: 'El monto del reembolso no puede ser mayor al pago original'
            }, {
                status: 400
            });
        }
        // Procesar reembolso con MercadoPago
        const refundResult = await processRefund(payment_id, refundAmount, reason, metadata);
        // Actualizar estado en base de datos
        await supabase.from('orders').update({
            payment_status: refundResult.status === 'approved' ? 'refunded' : 'refund_pending',
            updated_at: new Date().toISOString()
        }).eq('id', order.id);
        // Registrar reembolso en tabla de refunds (si existe)
        try {
            await supabase.from('refunds').insert({
                order_id: order.id,
                payment_id,
                refund_id: refundResult.id,
                amount: refundAmount,
                status: refundResult.status,
                reason: reason || 'Reembolso solicitado por el cliente',
                metadata: metadata || {},
                created_at: new Date().toISOString()
            });
        } catch (refundInsertError) {
            // Si la tabla refunds no existe, solo loggeamos el warning
            _logger.logger.warn(_logger.LogCategory.PAYMENT, 'Refunds table not found, skipping insert', {
                payment_id,
                refund_id: refundResult.id
            });
        }
        // Registrar métricas
        await _metrics.metricsCollector.recordRequest('/api/payments/refunds', 'POST', 200, Date.now() - startTime, {
            userId,
            payment_id,
            amount: refundAmount
        });
        _logger.logger.info(_logger.LogCategory.PAYMENT, 'Refund processed successfully', {
            userId,
            payment_id,
            refund_id: refundResult.id,
            amount: refundAmount,
            status: refundResult.status,
            processingTime: Date.now() - startTime
        });
        const response = _server.NextResponse.json({
            success: true,
            data: refundResult,
            timestamp: Date.now(),
            processing_time: Date.now() - startTime
        });
        (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.PAYMENT_API);
        return response;
    } catch (error) {
        const processingTime = Date.now() - startTime;
        _logger.logger.performance(_logger.LogLevel.ERROR, 'Refund processing failed', {
            operation: 'refund-processing-api',
            duration: processingTime,
            statusCode: 500
        }, {
            clientIP,
            userAgent
        });
        await _metrics.metricsCollector.recordRequest('/api/payments/refunds', 'POST', 500, processingTime, {
            error: error.message
        });
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
async function GET(request) {
    const startTime = Date.now();
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    try {
        // Verificar autenticación
        const { userId } = await (0, _server1.auth)();
        if (!userId) {
            return _server.NextResponse.json({
                success: false,
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        // Rate limiting
        const rateLimitResult = await (0, _ratelimiter.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
        if (!rateLimitResult.success) {
            const response = _server.NextResponse.json({
                success: false,
                error: 'Demasiadas solicitudes'
            }, {
                status: 429
            });
            (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
            return response;
        }
        // Obtener parámetros de consulta
        const url = new URL(request.url);
        const limit = parseInt(url.searchParams.get('limit') || '10');
        const offset = parseInt(url.searchParams.get('offset') || '0');
        const status = url.searchParams.get('status');
        const supabase = (0, _supabase.getSupabaseClient)();
        if (!supabase) {
            return _server.NextResponse.json({
                success: false,
                error: 'Error de configuración de base de datos'
            }, {
                status: 500
            });
        }
        // Construir query
        let query = supabase.from('refunds').select(`
        *,
        orders (
          id,
          total_amount,
          created_at
        )
      `).order('created_at', {
            ascending: false
        }).range(offset, offset + limit - 1);
        if (status) {
            query = query.eq('status', status);
        }
        const { data: refunds, error } = await query;
        if (error) {
            throw new Error(`Error al obtener reembolsos: ${error.message}`);
        }
        // Registrar métricas
        await _metrics.metricsCollector.recordRequest('/api/payments/refunds', 'GET', 200, Date.now() - startTime, {
            userId,
            count: (refunds?.length || 0).toString()
        });
        _logger.logger.info(_logger.LogCategory.API, 'Refunds list retrieved', {
            userId,
            count: refunds?.length || 0,
            processingTime: Date.now() - startTime
        });
        const response = _server.NextResponse.json({
            success: true,
            data: refunds || [],
            pagination: {
                limit,
                offset,
                total: refunds?.length || 0
            },
            timestamp: Date.now(),
            processing_time: Date.now() - startTime
        });
        (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
        return response;
    } catch (error) {
        const processingTime = Date.now() - startTime;
        _logger.logger.performance(_logger.LogLevel.ERROR, 'Refunds list failed', {
            operation: 'refunds-list-api',
            duration: processingTime,
            statusCode: 500
        }, {
            clientIP
        });
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
/**
 * Procesa reembolso con MercadoPago
 */ async function processRefund(paymentId, amount, reason, metadata) {
    try {
        // Crear cliente de MercadoPago
        const client = (0, _mercadopago.createMercadoPagoClient)();
        const payment = new _mercadopago1.Payment(client);
        // En una implementación real, aquí se haría la llamada a la API de MercadoPago
        // Por ahora simulamos el reembolso
        const refundId = `refund_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        // Simular respuesta de MercadoPago
        const refundResponse = {
            id: refundId,
            payment_id: paymentId,
            amount,
            status: 'approved',
            reason: reason || 'Reembolso solicitado',
            created_at: new Date().toISOString(),
            metadata: metadata || {}
        };
        _logger.logger.info(_logger.LogCategory.PAYMENT, 'MercadoPago refund simulated', {
            payment_id: paymentId,
            refund_id: refundId,
            amount,
            status: refundResponse.status
        });
        return refundResponse;
    } catch (error) {
        _logger.logger.error(_logger.LogCategory.PAYMENT, 'MercadoPago refund failed', error);
        // En caso de error, devolver estado pendiente
        return {
            id: `refund_error_${Date.now()}`,
            payment_id: paymentId,
            amount,
            status: 'pending',
            reason: 'Error al procesar reembolso, se procesará manualmente',
            created_at: new Date().toISOString(),
            metadata: metadata || {}
        };
    }
}

//# sourceMappingURL=data:application/json;base64,