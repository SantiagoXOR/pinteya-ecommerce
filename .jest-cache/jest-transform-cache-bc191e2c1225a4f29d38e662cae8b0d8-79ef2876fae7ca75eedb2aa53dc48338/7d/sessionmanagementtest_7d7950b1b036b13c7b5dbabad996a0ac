16ecab324a03ba0116c737dfae98e4c7
/**
 * Tests para el sistema de gestión avanzada de sesiones
 * Verifica creación, actualización, invalidación y cleanup de sesiones
 */ // Mock de Clerk
"use strict";
jest.mock('@clerk/nextjs/server', ()=>({
        clerkClient: jest.fn(()=>({
                users: {
                    getUserList: jest.fn()
                },
                sessions: {
                    getSession: jest.fn()
                }
            }))
    }));
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn(),
                                    order: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                })),
                            or: jest.fn(()=>({
                                    single: jest.fn()
                                })),
                            order: jest.fn(()=>({}))
                        })),
                    insert: jest.fn(()=>({
                            select: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                }))
                        }))
                }))
        }
    }));
// Mock de cache manager
jest.mock('@/lib/cache-manager', ()=>({
        CacheManager: {
            getInstance: jest.fn(()=>({
                    get: jest.fn(),
                    set: jest.fn(),
                    delete: jest.fn()
                }))
        },
        CACHE_CONFIGS: {
            USER_SESSION: {
                ttl: 600
            }
        }
    }));
// Mock de auditoría de seguridad
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn(),
        logAdminAction: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _sessionmanagement = require("../lib/auth/session-management");
const _supabase = require("../lib/supabase");
const _server = require("@clerk/nextjs/server");
describe('Sistema de Gestión de Sesiones', ()=>{
    let mockSupabase;
    let mockClerkClient;
    beforeEach(()=>{
        mockSupabase = _supabase.supabaseAdmin;
        mockClerkClient = _server.clerkClient;
        jest.clearAllMocks();
    });
    const mockSessionData = {
        id: 'sess_123',
        user_id: 'user_123',
        clerk_session_id: 'sess_clerk_123',
        status: 'active',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
        expires_at: '2024-01-02T00:00:00Z',
        last_activity: '2024-01-01T12:00:00Z',
        ip_address: '192.168.1.1',
        user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        device_info: {
            type: 'desktop',
            os: 'Windows',
            browser: 'Chrome'
        },
        metadata: {
            login_method: 'clerk',
            timezone: 'UTC'
        }
    };
    describe('createSession', ()=>{
        it('debe crear una nueva sesión exitosamente', async ()=>{
            // Mock: verificar sesiones existentes
            mockSupabase.from().select().eq().eq().mockResolvedValue({
                data: [],
                error: null
            });
            // Mock: insertar nueva sesión
            mockSupabase.from().insert().select().single.mockResolvedValue({
                data: mockSessionData,
                error: null
            });
            const mockRequest = {
                headers: {
                    get: jest.fn((key)=>{
                        if (key === 'x-forwarded-for') return '192.168.1.1';
                        if (key === 'user-agent') return 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36';
                        return null;
                    })
                }
            };
            const result = await (0, _sessionmanagement.createSession)('user_123', 'sess_clerk_123', mockRequest);
            expect(result.success).toBe(true);
            expect(result.action).toBe('created');
            expect(result.sessionId).toBe('sess_123');
        });
        it('debe manejar límite de sesiones por usuario', async ()=>{
            // Mock: usuario tiene muchas sesiones
            const existingSessions = Array(5).fill(null).map((_, i)=>({
                    id: `sess_${i}`
                }));
            mockSupabase.from().select().eq().eq().mockResolvedValue({
                data: existingSessions,
                error: null
            });
            // Mock: insertar nueva sesión
            mockSupabase.from().insert().select().single.mockResolvedValue({
                data: mockSessionData,
                error: null
            });
            const result = await (0, _sessionmanagement.createSession)('user_123', 'sess_clerk_123');
            expect(result.success).toBe(true);
            expect(result.action).toBe('created');
        });
        it('debe manejar errores de creación', async ()=>{
            // Mock: error en inserción
            mockSupabase.from().insert().select().single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Error de base de datos'
                }
            });
            const result = await (0, _sessionmanagement.createSession)('user_123', 'sess_clerk_123');
            expect(result.success).toBe(false);
            expect(result.action).toBe('error');
            expect(result.error).toContain('Error creando sesión');
        });
    });
    describe('updateSession', ()=>{
        it('debe actualizar una sesión exitosamente', async ()=>{
            const updatedSession = {
                ...mockSessionData,
                last_activity: '2024-01-01T13:00:00Z'
            };
            mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({
                data: updatedSession,
                error: null
            });
            const result = await (0, _sessionmanagement.updateSession)('sess_clerk_123', {
                metadata: {
                    last_page: '/dashboard'
                }
            });
            expect(result.success).toBe(true);
            expect(result.action).toBe('updated');
        });
        it('debe manejar sesión no encontrada', async ()=>{
            mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            const result = await (0, _sessionmanagement.updateSession)('sess_not_found', {});
            expect(result.success).toBe(false);
            expect(result.error).toContain('Sesión no encontrada');
        });
    });
    describe('invalidateSession', ()=>{
        it('debe invalidar una sesión exitosamente', async ()=>{
            const invalidatedSession = {
                ...mockSessionData,
                status: 'revoked'
            };
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: invalidatedSession,
                error: null
            });
            const result = await (0, _sessionmanagement.invalidateSession)('sess_clerk_123', 'manual_logout');
            expect(result.success).toBe(true);
            expect(result.action).toBe('deleted');
        });
        it('debe manejar sesión ya invalidada', async ()=>{
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            const result = await (0, _sessionmanagement.invalidateSession)('sess_already_invalid');
            expect(result.success).toBe(true);
            expect(result.action).toBe('found_existing');
        });
    });
    describe('getUserSessions', ()=>{
        it('debe obtener sesiones de usuario desde cache', async ()=>{
            const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();
            mockCache.get.mockResolvedValue([
                mockSessionData
            ]);
            const sessions = await (0, _sessionmanagement.getUserSessions)('user_123');
            expect(sessions).toEqual([
                mockSessionData
            ]);
            expect(mockCache.get).toHaveBeenCalled();
        });
        it('debe obtener sesiones de base de datos si no hay cache', async ()=>{
            const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();
            mockCache.get.mockResolvedValue(null);
            mockSupabase.from().select().eq().eq().order.mockResolvedValue({
                data: [
                    mockSessionData
                ],
                error: null
            });
            const sessions = await (0, _sessionmanagement.getUserSessions)('user_123');
            expect(sessions).toEqual([
                mockSessionData
            ]);
            expect(mockCache.set).toHaveBeenCalled();
        });
    });
    describe('getSessionInfo', ()=>{
        it('debe obtener información de sesión', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: mockSessionData,
                error: null
            });
            const session = await (0, _sessionmanagement.getSessionInfo)('sess_clerk_123');
            expect(session).toEqual(mockSessionData);
        });
        it('debe retornar null para sesión no encontrada', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            const session = await (0, _sessionmanagement.getSessionInfo)('sess_not_found');
            expect(session).toBeNull();
        });
    });
    describe('isSessionValid', ()=>{
        it('debe validar sesión activa y no expirada', async ()=>{
            const validSession = {
                ...mockSessionData,
                status: 'active',
                expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                last_activity: new Date().toISOString()
            };
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: validSession,
                error: null
            });
            const isValid = await (0, _sessionmanagement.isSessionValid)('sess_clerk_123');
            expect(isValid).toBe(true);
        });
        it('debe invalidar sesión expirada', async ()=>{
            const expiredSession = {
                ...mockSessionData,
                status: 'active',
                expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
                last_activity: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()
            };
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: expiredSession,
                error: null
            });
            // Mock para invalidateSession
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    ...expiredSession,
                    status: 'revoked'
                },
                error: null
            });
            const isValid = await (0, _sessionmanagement.isSessionValid)('sess_clerk_123');
            expect(isValid).toBe(false);
        });
    });
    describe('updateSessionActivity', ()=>{
        it('debe actualizar actividad de sesión', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: mockSessionData,
                error: null
            });
            mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({
                data: {
                    ...mockSessionData,
                    last_activity: new Date().toISOString()
                },
                error: null
            });
            const result = await (0, _sessionmanagement.updateSessionActivity)('sess_clerk_123', {
                last_page: '/dashboard'
            });
            expect(result).toBe(true);
        });
    });
    describe('cleanupExpiredSessions', ()=>{
        it('debe limpiar sesiones expiradas', async ()=>{
            const expiredSessions = [
                {
                    ...mockSessionData,
                    id: 'sess_1',
                    expires_at: '2023-01-01T00:00:00Z'
                },
                {
                    ...mockSessionData,
                    id: 'sess_2',
                    last_activity: '2023-01-01T00:00:00Z'
                }
            ];
            mockSupabase.from().select().eq().or.mockResolvedValue({
                data: expiredSessions,
                error: null
            });
            mockClerkClient.mockReturnValue({
                sessions: {
                    getSession: jest.fn().mockRejectedValue(new Error('Session not found'))
                }
            });
            mockSupabase.from().update().eq.mockResolvedValue({
                error: null
            });
            const result = await (0, _sessionmanagement.cleanupExpiredSessions)();
            expect(result.success).toBe(true);
            expect(result.cleaned).toBe(2);
        });
    });
    describe('getSessionStats', ()=>{
        it('debe obtener estadísticas de sesiones', async ()=>{
            const sessions = [
                {
                    status: 'active',
                    device_info: {
                        type: 'desktop'
                    }
                },
                {
                    status: 'active',
                    device_info: {
                        type: 'mobile'
                    }
                },
                {
                    status: 'expired',
                    device_info: {
                        type: 'desktop'
                    }
                }
            ];
            mockSupabase.from().select.mockResolvedValue({
                data: sessions,
                error: null
            });
            const stats = await (0, _sessionmanagement.getSessionStats)();
            expect(stats.total).toBe(3);
            expect(stats.active).toBe(2);
            expect(stats.expired).toBe(1);
            expect(stats.byDevice.desktop).toBe(2);
            expect(stats.byDevice.mobile).toBe(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxzZXNzaW9uLW1hbmFnZW1lbnQudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIHBhcmEgZWwgc2lzdGVtYSBkZSBnZXN0acOzbiBhdmFuemFkYSBkZSBzZXNpb25lc1xuICogVmVyaWZpY2EgY3JlYWNpw7NuLCBhY3R1YWxpemFjacOzbiwgaW52YWxpZGFjacOzbiB5IGNsZWFudXAgZGUgc2VzaW9uZXNcbiAqL1xuXG4vLyBNb2NrIGRlIENsZXJrXG5qZXN0Lm1vY2soJ0BjbGVyay9uZXh0anMvc2VydmVyJywgKCkgPT4gKHtcbiAgY2xlcmtDbGllbnQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICB1c2Vyczoge1xuICAgICAgZ2V0VXNlckxpc3Q6IGplc3QuZm4oKVxuICAgIH0sXG4gICAgc2Vzc2lvbnM6IHtcbiAgICAgIGdldFNlc3Npb246IGplc3QuZm4oKVxuICAgIH1cbiAgfSkpXG59KSk7XG5cbi8vIE1vY2sgZGUgU3VwYWJhc2Vcbmplc3QubW9jaygnQC9saWIvc3VwYWJhc2UnLCAoKSA9PiAoe1xuICBzdXBhYmFzZUFkbWluOiB7XG4gICAgZnJvbTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgc2VsZWN0OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgIGVxOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgc2luZ2xlOiBqZXN0LmZuKCksXG4gICAgICAgICAgb3JkZXI6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICAgIHNpbmdsZTogamVzdC5mbigpXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKSxcbiAgICAgICAgb3I6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICBzaW5nbGU6IGplc3QuZm4oKVxuICAgICAgICB9KSksXG4gICAgICAgIG9yZGVyOiBqZXN0LmZuKCgpID0+ICh7fSkpXG4gICAgICB9KSksXG4gICAgICBpbnNlcnQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgc2VsZWN0OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgc2luZ2xlOiBqZXN0LmZuKClcbiAgICAgICAgfSkpXG4gICAgICB9KSksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgZXE6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICBzZWxlY3Q6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICAgIHNpbmdsZTogamVzdC5mbigpXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKVxuICAgICAgfSkpXG4gICAgfSkpXG4gIH1cbn0pKTtcblxuLy8gTW9jayBkZSBjYWNoZSBtYW5hZ2VyXG5qZXN0Lm1vY2soJ0AvbGliL2NhY2hlLW1hbmFnZXInLCAoKSA9PiAoe1xuICBDYWNoZU1hbmFnZXI6IHtcbiAgICBnZXRJbnN0YW5jZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgICBzZXQ6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpXG4gICAgfSkpXG4gIH0sXG4gIENBQ0hFX0NPTkZJR1M6IHtcbiAgICBVU0VSX1NFU1NJT046IHsgdHRsOiA2MDAgfVxuICB9XG59KSk7XG5cbi8vIE1vY2sgZGUgYXVkaXRvcsOtYSBkZSBzZWd1cmlkYWRcbmplc3QubW9jaygnQC9saWIvYXV0aC9zZWN1cml0eS1hdWRpdCcsICgpID0+ICh7XG4gIGxvZ1NlY3VyaXR5RXZlbnQ6IGplc3QuZm4oKSxcbiAgbG9nQWRtaW5BY3Rpb246IGplc3QuZm4oKVxufSkpO1xuXG5pbXBvcnQge1xuICBjcmVhdGVTZXNzaW9uLFxuICB1cGRhdGVTZXNzaW9uLFxuICBpbnZhbGlkYXRlU2Vzc2lvbixcbiAgZ2V0VXNlclNlc3Npb25zLFxuICBnZXRTZXNzaW9uSW5mbyxcbiAgaXNTZXNzaW9uVmFsaWQsXG4gIHVwZGF0ZVNlc3Npb25BY3Rpdml0eSxcbiAgY2xlYW51cEV4cGlyZWRTZXNzaW9ucyxcbiAgZ2V0U2Vzc2lvblN0YXRzLFxuICB0eXBlIFNlc3Npb25EYXRhXG59IGZyb20gJ0AvbGliL2F1dGgvc2Vzc2lvbi1tYW5hZ2VtZW50JztcbmltcG9ydCB7IHN1cGFiYXNlQWRtaW4gfSBmcm9tICdAL2xpYi9zdXBhYmFzZSc7XG5pbXBvcnQgeyBjbGVya0NsaWVudCB9IGZyb20gJ0BjbGVyay9uZXh0anMvc2VydmVyJztcblxuZGVzY3JpYmUoJ1Npc3RlbWEgZGUgR2VzdGnDs24gZGUgU2VzaW9uZXMnLCAoKSA9PiB7XG4gIGxldCBtb2NrU3VwYWJhc2U6IGFueTtcbiAgbGV0IG1vY2tDbGVya0NsaWVudDogamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgY2xlcmtDbGllbnQ+O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tTdXBhYmFzZSA9IHN1cGFiYXNlQWRtaW4gYXMgYW55O1xuICAgIG1vY2tDbGVya0NsaWVudCA9IGNsZXJrQ2xpZW50IGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGNsZXJrQ2xpZW50PjtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgY29uc3QgbW9ja1Nlc3Npb25EYXRhOiBTZXNzaW9uRGF0YSA9IHtcbiAgICBpZDogJ3Nlc3NfMTIzJyxcbiAgICB1c2VyX2lkOiAndXNlcl8xMjMnLFxuICAgIGNsZXJrX3Nlc3Npb25faWQ6ICdzZXNzX2NsZXJrXzEyMycsXG4gICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0wMVQwMDowMDowMFonLFxuICAgIHVwZGF0ZWRfYXQ6ICcyMDI0LTAxLTAxVDAwOjAwOjAwWicsXG4gICAgZXhwaXJlc19hdDogJzIwMjQtMDEtMDJUMDA6MDA6MDBaJyxcbiAgICBsYXN0X2FjdGl2aXR5OiAnMjAyNC0wMS0wMVQxMjowMDowMFonLFxuICAgIGlwX2FkZHJlc3M6ICcxOTIuMTY4LjEuMScsXG4gICAgdXNlcl9hZ2VudDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNicsXG4gICAgZGV2aWNlX2luZm86IHtcbiAgICAgIHR5cGU6ICdkZXNrdG9wJyxcbiAgICAgIG9zOiAnV2luZG93cycsXG4gICAgICBicm93c2VyOiAnQ2hyb21lJ1xuICAgIH0sXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIGxvZ2luX21ldGhvZDogJ2NsZXJrJyxcbiAgICAgIHRpbWV6b25lOiAnVVRDJ1xuICAgIH1cbiAgfTtcblxuICBkZXNjcmliZSgnY3JlYXRlU2Vzc2lvbicsICgpID0+IHtcbiAgICBpdCgnZGViZSBjcmVhciB1bmEgbnVldmEgc2VzacOzbiBleGl0b3NhbWVudGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrOiB2ZXJpZmljYXIgc2VzaW9uZXMgZXhpc3RlbnRlc1xuICAgICAgbW9ja1N1cGFiYXNlLmZyb20oKS5zZWxlY3QoKS5lcSgpLmVxKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBNb2NrOiBpbnNlcnRhciBudWV2YSBzZXNpw7NuXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLmluc2VydCgpLnNlbGVjdCgpLnNpbmdsZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IG1vY2tTZXNzaW9uRGF0YSxcbiAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIGdldDogamVzdC5mbigoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd4LWZvcndhcmRlZC1mb3InKSByZXR1cm4gJzE5Mi4xNjguMS4xJztcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd1c2VyLWFnZW50JykgcmV0dXJuICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYnO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBhcyBhbnk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVNlc3Npb24oJ3VzZXJfMTIzJywgJ3Nlc3NfY2xlcmtfMTIzJywgbW9ja1JlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmFjdGlvbikudG9CZSgnY3JlYXRlZCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zZXNzaW9uSWQpLnRvQmUoJ3Nlc3NfMTIzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIGzDrW1pdGUgZGUgc2VzaW9uZXMgcG9yIHVzdWFyaW8nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrOiB1c3VhcmlvIHRpZW5lIG11Y2hhcyBzZXNpb25lc1xuICAgICAgY29uc3QgZXhpc3RpbmdTZXNzaW9ucyA9IEFycmF5KDUpLmZpbGwobnVsbCkubWFwKChfLCBpKSA9PiAoeyBpZDogYHNlc3NfJHtpfWAgfSkpO1xuICAgICAgbW9ja1N1cGFiYXNlLmZyb20oKS5zZWxlY3QoKS5lcSgpLmVxKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBleGlzdGluZ1Nlc3Npb25zLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIC8vIE1vY2s6IGluc2VydGFyIG51ZXZhIHNlc2nDs25cbiAgICAgIG1vY2tTdXBhYmFzZS5mcm9tKCkuaW5zZXJ0KCkuc2VsZWN0KCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogbW9ja1Nlc3Npb25EYXRhLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVNlc3Npb24oJ3VzZXJfMTIzJywgJ3Nlc3NfY2xlcmtfMTIzJyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYWN0aW9uKS50b0JlKCdjcmVhdGVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIGVycm9yZXMgZGUgY3JlYWNpw7NuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jazogZXJyb3IgZW4gaW5zZXJjacOzblxuICAgICAgbW9ja1N1cGFiYXNlLmZyb20oKS5pbnNlcnQoKS5zZWxlY3QoKS5zaW5nbGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBlcnJvcjogeyBtZXNzYWdlOiAnRXJyb3IgZGUgYmFzZSBkZSBkYXRvcycgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVNlc3Npb24oJ3VzZXJfMTIzJywgJ3Nlc3NfY2xlcmtfMTIzJyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmFjdGlvbikudG9CZSgnZXJyb3InKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignRXJyb3IgY3JlYW5kbyBzZXNpw7NuJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd1cGRhdGVTZXNzaW9uJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIGFjdHVhbGl6YXIgdW5hIHNlc2nDs24gZXhpdG9zYW1lbnRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlZFNlc3Npb24gPSB7IC4uLm1vY2tTZXNzaW9uRGF0YSwgbGFzdF9hY3Rpdml0eTogJzIwMjQtMDEtMDFUMTM6MDA6MDBaJyB9O1xuICAgICAgXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnVwZGF0ZSgpLmVxKCkuZXEoKS5zZWxlY3QoKS5zaW5nbGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiB1cGRhdGVkU2Vzc2lvbixcbiAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGRhdGVTZXNzaW9uKCdzZXNzX2NsZXJrXzEyMycsIHsgXG4gICAgICAgIG1ldGFkYXRhOiB7IGxhc3RfcGFnZTogJy9kYXNoYm9hcmQnIH0gXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hY3Rpb24pLnRvQmUoJ3VwZGF0ZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG1hbmVqYXIgc2VzacOzbiBubyBlbmNvbnRyYWRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1N1cGFiYXNlLmZyb20oKS51cGRhdGUoKS5lcSgpLmVxKCkuc2VsZWN0KCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3I6IHsgY29kZTogJ1BHUlNUMTE2JyB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlU2Vzc2lvbignc2Vzc19ub3RfZm91bmQnLCB7fSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ1Nlc2nDs24gbm8gZW5jb250cmFkYScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaW52YWxpZGF0ZVNlc3Npb24nLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgaW52YWxpZGFyIHVuYSBzZXNpw7NuIGV4aXRvc2FtZW50ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWRhdGVkU2Vzc2lvbiA9IHsgLi4ubW9ja1Nlc3Npb25EYXRhLCBzdGF0dXM6ICdyZXZva2VkJyB9O1xuICAgICAgXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnVwZGF0ZSgpLmVxKCkuc2VsZWN0KCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogaW52YWxpZGF0ZWRTZXNzaW9uLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGludmFsaWRhdGVTZXNzaW9uKCdzZXNzX2NsZXJrXzEyMycsICdtYW51YWxfbG9nb3V0Jyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYWN0aW9uKS50b0JlKCdkZWxldGVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIHNlc2nDs24geWEgaW52YWxpZGFkYScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tTdXBhYmFzZS5mcm9tKCkudXBkYXRlKCkuZXEoKS5zZWxlY3QoKS5zaW5nbGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBlcnJvcjogeyBjb2RlOiAnUEdSU1QxMTYnIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnZhbGlkYXRlU2Vzc2lvbignc2Vzc19hbHJlYWR5X2ludmFsaWQnKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hY3Rpb24pLnRvQmUoJ2ZvdW5kX2V4aXN0aW5nJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRVc2VyU2Vzc2lvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgb2J0ZW5lciBzZXNpb25lcyBkZSB1c3VhcmlvIGRlc2RlIGNhY2hlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0NhY2hlID0gcmVxdWlyZSgnQC9saWIvY2FjaGUtbWFuYWdlcicpLkNhY2hlTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgbW9ja0NhY2hlLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZShbbW9ja1Nlc3Npb25EYXRhXSk7XG5cbiAgICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgZ2V0VXNlclNlc3Npb25zKCd1c2VyXzEyMycpO1xuXG4gICAgICBleHBlY3Qoc2Vzc2lvbnMpLnRvRXF1YWwoW21vY2tTZXNzaW9uRGF0YV0pO1xuICAgICAgZXhwZWN0KG1vY2tDYWNoZS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG9idGVuZXIgc2VzaW9uZXMgZGUgYmFzZSBkZSBkYXRvcyBzaSBubyBoYXkgY2FjaGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrQ2FjaGUgPSByZXF1aXJlKCdAL2xpYi9jYWNoZS1tYW5hZ2VyJykuQ2FjaGVNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICBtb2NrQ2FjaGUuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnNlbGVjdCgpLmVxKCkuZXEoKS5vcmRlci5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IFttb2NrU2Vzc2lvbkRhdGFdLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgZ2V0VXNlclNlc3Npb25zKCd1c2VyXzEyMycpO1xuXG4gICAgICBleHBlY3Qoc2Vzc2lvbnMpLnRvRXF1YWwoW21vY2tTZXNzaW9uRGF0YV0pO1xuICAgICAgZXhwZWN0KG1vY2tDYWNoZS5zZXQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFNlc3Npb25JbmZvJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIG9idGVuZXIgaW5mb3JtYWNpw7NuIGRlIHNlc2nDs24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnNlbGVjdCgpLmVxKCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogbW9ja1Nlc3Npb25EYXRhLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXNzaW9uSW5mbygnc2Vzc19jbGVya18xMjMnKTtcblxuICAgICAgZXhwZWN0KHNlc3Npb24pLnRvRXF1YWwobW9ja1Nlc3Npb25EYXRhKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIHJldG9ybmFyIG51bGwgcGFyYSBzZXNpw7NuIG5vIGVuY29udHJhZGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnNlbGVjdCgpLmVxKCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3I6IHsgY29kZTogJ1BHUlNUMTE2JyB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldFNlc3Npb25JbmZvKCdzZXNzX25vdF9mb3VuZCcpO1xuXG4gICAgICBleHBlY3Qoc2Vzc2lvbikudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzU2Vzc2lvblZhbGlkJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIHZhbGlkYXIgc2VzacOzbiBhY3RpdmEgeSBubyBleHBpcmFkYScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkU2Vzc2lvbiA9IHtcbiAgICAgICAgLi4ubW9ja1Nlc3Npb25EYXRhLFxuICAgICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgICBleHBpcmVzX2F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgbGFzdF9hY3Rpdml0eTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9O1xuXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnNlbGVjdCgpLmVxKCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogdmFsaWRTZXNzaW9uLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGlzVmFsaWQgPSBhd2FpdCBpc1Nlc3Npb25WYWxpZCgnc2Vzc19jbGVya18xMjMnKTtcblxuICAgICAgZXhwZWN0KGlzVmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBpbnZhbGlkYXIgc2VzacOzbiBleHBpcmFkYScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGlyZWRTZXNzaW9uID0ge1xuICAgICAgICAuLi5tb2NrU2Vzc2lvbkRhdGEsXG4gICAgICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgICAgIGV4cGlyZXNfYXQ6IG5ldyBEYXRlKERhdGUubm93KCkgLSAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgICBsYXN0X2FjdGl2aXR5OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMyAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpXG4gICAgICB9O1xuXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnNlbGVjdCgpLmVxKCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogZXhwaXJlZFNlc3Npb24sXG4gICAgICAgIGVycm9yOiBudWxsXG4gICAgICB9KTtcblxuICAgICAgLy8gTW9jayBwYXJhIGludmFsaWRhdGVTZXNzaW9uXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnVwZGF0ZSgpLmVxKCkuc2VsZWN0KCkuc2luZ2xlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogeyAuLi5leHBpcmVkU2Vzc2lvbiwgc3RhdHVzOiAncmV2b2tlZCcgfSxcbiAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgaXNTZXNzaW9uVmFsaWQoJ3Nlc3NfY2xlcmtfMTIzJyk7XG5cbiAgICAgIGV4cGVjdChpc1ZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3VwZGF0ZVNlc3Npb25BY3Rpdml0eScsICgpID0+IHtcbiAgICBpdCgnZGViZSBhY3R1YWxpemFyIGFjdGl2aWRhZCBkZSBzZXNpw7NuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1N1cGFiYXNlLmZyb20oKS5zZWxlY3QoKS5lcSgpLnNpbmdsZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IG1vY2tTZXNzaW9uRGF0YSxcbiAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnVwZGF0ZSgpLmVxKCkuZXEoKS5zZWxlY3QoKS5zaW5nbGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiB7IC4uLm1vY2tTZXNzaW9uRGF0YSwgbGFzdF9hY3Rpdml0eTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0sXG4gICAgICAgIGVycm9yOiBudWxsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlU2Vzc2lvbkFjdGl2aXR5KCdzZXNzX2NsZXJrXzEyMycsIHtcbiAgICAgICAgbGFzdF9wYWdlOiAnL2Rhc2hib2FyZCdcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2xlYW51cEV4cGlyZWRTZXNzaW9ucycsICgpID0+IHtcbiAgICBpdCgnZGViZSBsaW1waWFyIHNlc2lvbmVzIGV4cGlyYWRhcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGlyZWRTZXNzaW9ucyA9IFtcbiAgICAgICAgeyAuLi5tb2NrU2Vzc2lvbkRhdGEsIGlkOiAnc2Vzc18xJywgZXhwaXJlc19hdDogJzIwMjMtMDEtMDFUMDA6MDA6MDBaJyB9LFxuICAgICAgICB7IC4uLm1vY2tTZXNzaW9uRGF0YSwgaWQ6ICdzZXNzXzInLCBsYXN0X2FjdGl2aXR5OiAnMjAyMy0wMS0wMVQwMDowMDowMFonIH1cbiAgICAgIF07XG5cbiAgICAgIG1vY2tTdXBhYmFzZS5mcm9tKCkuc2VsZWN0KCkuZXEoKS5vci5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IGV4cGlyZWRTZXNzaW9ucyxcbiAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrQ2xlcmtDbGllbnQubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgc2Vzc2lvbnM6IHtcbiAgICAgICAgICBnZXRTZXNzaW9uOiBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdTZXNzaW9uIG5vdCBmb3VuZCcpKVxuICAgICAgICB9XG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIG1vY2tTdXBhYmFzZS5mcm9tKCkudXBkYXRlKCkuZXEubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNsZWFudXBFeHBpcmVkU2Vzc2lvbnMoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jbGVhbmVkKS50b0JlKDIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0U2Vzc2lvblN0YXRzJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIG9idGVuZXIgZXN0YWTDrXN0aWNhcyBkZSBzZXNpb25lcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNlc3Npb25zID0gW1xuICAgICAgICB7IHN0YXR1czogJ2FjdGl2ZScsIGRldmljZV9pbmZvOiB7IHR5cGU6ICdkZXNrdG9wJyB9IH0sXG4gICAgICAgIHsgc3RhdHVzOiAnYWN0aXZlJywgZGV2aWNlX2luZm86IHsgdHlwZTogJ21vYmlsZScgfSB9LFxuICAgICAgICB7IHN0YXR1czogJ2V4cGlyZWQnLCBkZXZpY2VfaW5mbzogeyB0eXBlOiAnZGVza3RvcCcgfSB9XG4gICAgICBdO1xuXG4gICAgICBtb2NrU3VwYWJhc2UuZnJvbSgpLnNlbGVjdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IHNlc3Npb25zLFxuICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgZ2V0U2Vzc2lvblN0YXRzKCk7XG5cbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbCkudG9CZSgzKTtcbiAgICAgIGV4cGVjdChzdGF0cy5hY3RpdmUpLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc3RhdHMuZXhwaXJlZCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChzdGF0cy5ieURldmljZS5kZXNrdG9wKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHN0YXRzLmJ5RGV2aWNlLm1vYmlsZSkudG9CZSgxKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImNsZXJrQ2xpZW50IiwiZm4iLCJ1c2VycyIsImdldFVzZXJMaXN0Iiwic2Vzc2lvbnMiLCJnZXRTZXNzaW9uIiwic3VwYWJhc2VBZG1pbiIsImZyb20iLCJzZWxlY3QiLCJlcSIsInNpbmdsZSIsIm9yZGVyIiwib3IiLCJpbnNlcnQiLCJ1cGRhdGUiLCJDYWNoZU1hbmFnZXIiLCJnZXRJbnN0YW5jZSIsImdldCIsInNldCIsImRlbGV0ZSIsIkNBQ0hFX0NPTkZJR1MiLCJVU0VSX1NFU1NJT04iLCJ0dGwiLCJsb2dTZWN1cml0eUV2ZW50IiwibG9nQWRtaW5BY3Rpb24iLCJkZXNjcmliZSIsIm1vY2tTdXBhYmFzZSIsIm1vY2tDbGVya0NsaWVudCIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja1Nlc3Npb25EYXRhIiwiaWQiLCJ1c2VyX2lkIiwiY2xlcmtfc2Vzc2lvbl9pZCIsInN0YXR1cyIsImNyZWF0ZWRfYXQiLCJ1cGRhdGVkX2F0IiwiZXhwaXJlc19hdCIsImxhc3RfYWN0aXZpdHkiLCJpcF9hZGRyZXNzIiwidXNlcl9hZ2VudCIsImRldmljZV9pbmZvIiwidHlwZSIsIm9zIiwiYnJvd3NlciIsIm1ldGFkYXRhIiwibG9naW5fbWV0aG9kIiwidGltZXpvbmUiLCJpdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsImVycm9yIiwibW9ja1JlcXVlc3QiLCJoZWFkZXJzIiwia2V5IiwicmVzdWx0IiwiY3JlYXRlU2Vzc2lvbiIsImV4cGVjdCIsInN1Y2Nlc3MiLCJ0b0JlIiwiYWN0aW9uIiwic2Vzc2lvbklkIiwiZXhpc3RpbmdTZXNzaW9ucyIsIkFycmF5IiwiZmlsbCIsIm1hcCIsIl8iLCJpIiwibWVzc2FnZSIsInRvQ29udGFpbiIsInVwZGF0ZWRTZXNzaW9uIiwidXBkYXRlU2Vzc2lvbiIsImxhc3RfcGFnZSIsImNvZGUiLCJpbnZhbGlkYXRlZFNlc3Npb24iLCJpbnZhbGlkYXRlU2Vzc2lvbiIsIm1vY2tDYWNoZSIsInJlcXVpcmUiLCJnZXRVc2VyU2Vzc2lvbnMiLCJ0b0VxdWFsIiwidG9IYXZlQmVlbkNhbGxlZCIsInNlc3Npb24iLCJnZXRTZXNzaW9uSW5mbyIsInRvQmVOdWxsIiwidmFsaWRTZXNzaW9uIiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwiaXNWYWxpZCIsImlzU2Vzc2lvblZhbGlkIiwiZXhwaXJlZFNlc3Npb24iLCJ1cGRhdGVTZXNzaW9uQWN0aXZpdHkiLCJleHBpcmVkU2Vzc2lvbnMiLCJtb2NrUmV0dXJuVmFsdWUiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwiY2xlYW51cEV4cGlyZWRTZXNzaW9ucyIsImNsZWFuZWQiLCJzdGF0cyIsImdldFNlc3Npb25TdGF0cyIsInRvdGFs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