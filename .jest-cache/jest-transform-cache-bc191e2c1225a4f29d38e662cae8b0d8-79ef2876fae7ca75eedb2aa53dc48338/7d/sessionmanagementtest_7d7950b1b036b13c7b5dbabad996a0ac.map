{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\session-management.test.ts"],"sourcesContent":["/**\n * Tests para el sistema de gestión avanzada de sesiones\n * Verifica creación, actualización, invalidación y cleanup de sesiones\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  clerkClient: jest.fn(() => ({\n    users: {\n      getUserList: jest.fn()\n    },\n    sessions: {\n      getSession: jest.fn()\n    }\n  }))\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          order: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        })),\n        or: jest.fn(() => ({\n          single: jest.fn()\n        })),\n        order: jest.fn(() => ({}))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\n// Mock de cache manager\njest.mock('@/lib/cache-manager', () => ({\n  CacheManager: {\n    getInstance: jest.fn(() => ({\n      get: jest.fn(),\n      set: jest.fn(),\n      delete: jest.fn()\n    }))\n  },\n  CACHE_CONFIGS: {\n    USER_SESSION: { ttl: 600 }\n  }\n}));\n\n// Mock de auditoría de seguridad\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\nimport {\n  createSession,\n  updateSession,\n  invalidateSession,\n  getUserSessions,\n  getSessionInfo,\n  isSessionValid,\n  updateSessionActivity,\n  cleanupExpiredSessions,\n  getSessionStats,\n  type SessionData\n} from '@/lib/auth/session-management';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { clerkClient } from '@clerk/nextjs/server';\n\ndescribe('Sistema de Gestión de Sesiones', () => {\n  let mockSupabase: any;\n  let mockClerkClient: jest.MockedFunction<typeof clerkClient>;\n\n  beforeEach(() => {\n    mockSupabase = supabaseAdmin as any;\n    mockClerkClient = clerkClient as jest.MockedFunction<typeof clerkClient>;\n    jest.clearAllMocks();\n  });\n\n  const mockSessionData: SessionData = {\n    id: 'sess_123',\n    user_id: 'user_123',\n    clerk_session_id: 'sess_clerk_123',\n    status: 'active',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    expires_at: '2024-01-02T00:00:00Z',\n    last_activity: '2024-01-01T12:00:00Z',\n    ip_address: '192.168.1.1',\n    user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n    device_info: {\n      type: 'desktop',\n      os: 'Windows',\n      browser: 'Chrome'\n    },\n    metadata: {\n      login_method: 'clerk',\n      timezone: 'UTC'\n    }\n  };\n\n  describe('createSession', () => {\n    it('debe crear una nueva sesión exitosamente', async () => {\n      // Mock: verificar sesiones existentes\n      mockSupabase.from().select().eq().eq().mockResolvedValue({\n        data: [],\n        error: null\n      });\n\n      // Mock: insertar nueva sesión\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: mockSessionData,\n        error: null\n      });\n\n      const mockRequest = {\n        headers: {\n          get: jest.fn((key: string) => {\n            if (key === 'x-forwarded-for') return '192.168.1.1';\n            if (key === 'user-agent') return 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36';\n            return null;\n          })\n        }\n      } as any;\n\n      const result = await createSession('user_123', 'sess_clerk_123', mockRequest);\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('created');\n      expect(result.sessionId).toBe('sess_123');\n    });\n\n    it('debe manejar límite de sesiones por usuario', async () => {\n      // Mock: usuario tiene muchas sesiones\n      const existingSessions = Array(5).fill(null).map((_, i) => ({ id: `sess_${i}` }));\n      mockSupabase.from().select().eq().eq().mockResolvedValue({\n        data: existingSessions,\n        error: null\n      });\n\n      // Mock: insertar nueva sesión\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: mockSessionData,\n        error: null\n      });\n\n      const result = await createSession('user_123', 'sess_clerk_123');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('created');\n    });\n\n    it('debe manejar errores de creación', async () => {\n      // Mock: error en inserción\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: null,\n        error: { message: 'Error de base de datos' }\n      });\n\n      const result = await createSession('user_123', 'sess_clerk_123');\n\n      expect(result.success).toBe(false);\n      expect(result.action).toBe('error');\n      expect(result.error).toContain('Error creando sesión');\n    });\n  });\n\n  describe('updateSession', () => {\n    it('debe actualizar una sesión exitosamente', async () => {\n      const updatedSession = { ...mockSessionData, last_activity: '2024-01-01T13:00:00Z' };\n      \n      mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({\n        data: updatedSession,\n        error: null\n      });\n\n      const result = await updateSession('sess_clerk_123', { \n        metadata: { last_page: '/dashboard' } \n      });\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('updated');\n    });\n\n    it('debe manejar sesión no encontrada', async () => {\n      mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      const result = await updateSession('sess_not_found', {});\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Sesión no encontrada');\n    });\n  });\n\n  describe('invalidateSession', () => {\n    it('debe invalidar una sesión exitosamente', async () => {\n      const invalidatedSession = { ...mockSessionData, status: 'revoked' };\n      \n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: invalidatedSession,\n        error: null\n      });\n\n      const result = await invalidateSession('sess_clerk_123', 'manual_logout');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('deleted');\n    });\n\n    it('debe manejar sesión ya invalidada', async () => {\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      const result = await invalidateSession('sess_already_invalid');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('found_existing');\n    });\n  });\n\n  describe('getUserSessions', () => {\n    it('debe obtener sesiones de usuario desde cache', async () => {\n      const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();\n      mockCache.get.mockResolvedValue([mockSessionData]);\n\n      const sessions = await getUserSessions('user_123');\n\n      expect(sessions).toEqual([mockSessionData]);\n      expect(mockCache.get).toHaveBeenCalled();\n    });\n\n    it('debe obtener sesiones de base de datos si no hay cache', async () => {\n      const mockCache = require('@/lib/cache-manager').CacheManager.getInstance();\n      mockCache.get.mockResolvedValue(null);\n\n      mockSupabase.from().select().eq().eq().order.mockResolvedValue({\n        data: [mockSessionData],\n        error: null\n      });\n\n      const sessions = await getUserSessions('user_123');\n\n      expect(sessions).toEqual([mockSessionData]);\n      expect(mockCache.set).toHaveBeenCalled();\n    });\n  });\n\n  describe('getSessionInfo', () => {\n    it('debe obtener información de sesión', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: mockSessionData,\n        error: null\n      });\n\n      const session = await getSessionInfo('sess_clerk_123');\n\n      expect(session).toEqual(mockSessionData);\n    });\n\n    it('debe retornar null para sesión no encontrada', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      const session = await getSessionInfo('sess_not_found');\n\n      expect(session).toBeNull();\n    });\n  });\n\n  describe('isSessionValid', () => {\n    it('debe validar sesión activa y no expirada', async () => {\n      const validSession = {\n        ...mockSessionData,\n        status: 'active',\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        last_activity: new Date().toISOString()\n      };\n\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: validSession,\n        error: null\n      });\n\n      const isValid = await isSessionValid('sess_clerk_123');\n\n      expect(isValid).toBe(true);\n    });\n\n    it('debe invalidar sesión expirada', async () => {\n      const expiredSession = {\n        ...mockSessionData,\n        status: 'active',\n        expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        last_activity: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()\n      };\n\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: expiredSession,\n        error: null\n      });\n\n      // Mock para invalidateSession\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { ...expiredSession, status: 'revoked' },\n        error: null\n      });\n\n      const isValid = await isSessionValid('sess_clerk_123');\n\n      expect(isValid).toBe(false);\n    });\n  });\n\n  describe('updateSessionActivity', () => {\n    it('debe actualizar actividad de sesión', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: mockSessionData,\n        error: null\n      });\n\n      mockSupabase.from().update().eq().eq().select().single.mockResolvedValue({\n        data: { ...mockSessionData, last_activity: new Date().toISOString() },\n        error: null\n      });\n\n      const result = await updateSessionActivity('sess_clerk_123', {\n        last_page: '/dashboard'\n      });\n\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('cleanupExpiredSessions', () => {\n    it('debe limpiar sesiones expiradas', async () => {\n      const expiredSessions = [\n        { ...mockSessionData, id: 'sess_1', expires_at: '2023-01-01T00:00:00Z' },\n        { ...mockSessionData, id: 'sess_2', last_activity: '2023-01-01T00:00:00Z' }\n      ];\n\n      mockSupabase.from().select().eq().or.mockResolvedValue({\n        data: expiredSessions,\n        error: null\n      });\n\n      mockClerkClient.mockReturnValue({\n        sessions: {\n          getSession: jest.fn().mockRejectedValue(new Error('Session not found'))\n        }\n      } as any);\n\n      mockSupabase.from().update().eq.mockResolvedValue({\n        error: null\n      });\n\n      const result = await cleanupExpiredSessions();\n\n      expect(result.success).toBe(true);\n      expect(result.cleaned).toBe(2);\n    });\n  });\n\n  describe('getSessionStats', () => {\n    it('debe obtener estadísticas de sesiones', async () => {\n      const sessions = [\n        { status: 'active', device_info: { type: 'desktop' } },\n        { status: 'active', device_info: { type: 'mobile' } },\n        { status: 'expired', device_info: { type: 'desktop' } }\n      ];\n\n      mockSupabase.from().select.mockResolvedValue({\n        data: sessions,\n        error: null\n      });\n\n      const stats = await getSessionStats();\n\n      expect(stats.total).toBe(3);\n      expect(stats.active).toBe(2);\n      expect(stats.expired).toBe(1);\n      expect(stats.byDevice.desktop).toBe(2);\n      expect(stats.byDevice.mobile).toBe(1);\n    });\n  });\n});\n"],"names":["jest","mock","clerkClient","fn","users","getUserList","sessions","getSession","supabaseAdmin","from","select","eq","single","order","or","insert","update","CacheManager","getInstance","get","set","delete","CACHE_CONFIGS","USER_SESSION","ttl","logSecurityEvent","logAdminAction","describe","mockSupabase","mockClerkClient","beforeEach","clearAllMocks","mockSessionData","id","user_id","clerk_session_id","status","created_at","updated_at","expires_at","last_activity","ip_address","user_agent","device_info","type","os","browser","metadata","login_method","timezone","it","mockResolvedValue","data","error","mockRequest","headers","key","result","createSession","expect","success","toBe","action","sessionId","existingSessions","Array","fill","map","_","i","message","toContain","updatedSession","updateSession","last_page","code","invalidatedSession","invalidateSession","mockCache","require","getUserSessions","toEqual","toHaveBeenCalled","session","getSessionInfo","toBeNull","validSession","Date","now","toISOString","isValid","isSessionValid","expiredSession","updateSessionActivity","expiredSessions","mockReturnValue","mockRejectedValue","Error","cleanupExpiredSessions","cleaned","stats","getSessionStats","total","active","expired","byDevice","desktop","mobile"],"mappings":"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"}