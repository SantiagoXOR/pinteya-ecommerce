{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\create-preference\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CREATE PAYMENT PREFERENCE API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { CreatePreferencePayload } from '@/types/checkout';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { createPaymentPreference } from '@/lib/mercadopago';\r\nimport type { MercadoPagoItem } from '@/lib/mercadopago';\r\nimport { auth } from '@/auth';\r\nimport { CHECKOUT_CONSTANTS, VALIDATION_CONSTANTS } from '@/constants/shop';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, endpointKeyGenerator } from '@/lib/rate-limiter';\r\nimport { ENTERPRISE_RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/enterprise-rate-limiter';\r\nimport { metricsCollector } from '@/lib/metrics';\r\n\r\n// Schema de validación para la entrada\r\nconst CreatePreferenceSchema = z.object({\r\n  items: z.array(z.object({\r\n    id: z.string().min(1, 'ID de producto requerido'),\r\n    quantity: z.number().min(1, 'Cantidad debe ser mayor a 0').max(99, 'Cantidad máxima excedida'),\r\n  })).min(1, 'Al menos un producto es requerido'),\r\n  payer: z.object({\r\n    name: z.string().min(VALIDATION_CONSTANTS.MIN_NAME_LENGTH, 'Nombre requerido'),\r\n    surname: z.string().min(VALIDATION_CONSTANTS.MIN_NAME_LENGTH, 'Apellido requerido'),\r\n    email: z.string().email('Email inválido'),\r\n    phone: z.string().regex(VALIDATION_CONSTANTS.PHONE_REGEX, 'Teléfono inválido').optional(),\r\n    identification: z.object({\r\n      type: z.string().min(1, 'Tipo de identificación requerido'),\r\n      number: z.string().min(1, 'Número de identificación requerido'),\r\n    }).optional(),\r\n  }),\r\n  shipping: z.object({\r\n    cost: z.number().min(0, 'Costo de envío inválido'),\r\n    address: z.object({\r\n      street_name: z.string().min(1, 'Nombre de calle requerido'),\r\n      street_number: z.string().min(1, 'Número de calle requerido'),\r\n      zip_code: z.string().min(1, 'Código postal requerido'),\r\n      city_name: z.string().min(1, 'Ciudad requerida'),\r\n      state_name: z.string().min(1, 'Provincia requerida'),\r\n    }),\r\n  }).optional(),\r\n  external_reference: z.string().optional(),\r\n});\r\n\r\ninterface Product {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  discounted_price?: number;\r\n  images?: {\r\n    previews: string[];\r\n  };\r\n  category?: {\r\n    name: string;\r\n    slug: string;\r\n  };\r\n}\r\n\r\n// Función helper para calcular precio final\r\nfunction getFinalPrice(product: { price: number; discounted_price?: number | null }): number {\r\n  return product.discounted_price || product.price;\r\n}\r\n\r\n// Función helper para crear usuario temporal\r\nasync function createTemporaryUser(userId: string, email: string, name: string) {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Cliente administrativo de Supabase no disponible');\r\n  }\r\n\r\n  const { error } = await supabaseAdmin\r\n    .from('users')\r\n    .insert({\r\n      id: userId,\r\n      clerk_id: 'temp-user',\r\n      email,\r\n      name,\r\n    });\r\n\r\n  if (error) {\r\n    console.error('Error creating temporary user:', error);\r\n    throw new Error('Error creando usuario temporal');\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const requestStart = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  // ✅ NUEVO: Logging estructurado del inicio de la request\r\n  logger.info(LogCategory.PAYMENT, 'Create preference request started', {\r\n    endpoint: '/api/payments/create-preference',\r\n    method: 'POST',\r\n  }, {\r\n    clientIP,\r\n    userAgent,\r\n  });\r\n\r\n  // ✅ NUEVO: Rate limiting avanzado para API de pagos\r\n  const rateLimitConfig = {\r\n    ...ENTERPRISE_RATE_LIMIT_CONFIGS.PAYMENT_API,\r\n    keyGenerator: endpointKeyGenerator('create-preference'),\r\n  };\r\n\r\n  const rateLimitResult = await checkRateLimit(request, rateLimitConfig);\r\n\r\n  if (!rateLimitResult.success) {\r\n    logger.warn(LogCategory.SECURITY, 'Rate limit exceeded for create-preference', {\r\n      clientIP,\r\n      limit: rateLimitResult.limit,\r\n      retryAfter: rateLimitResult.retryAfter,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: rateLimitConfig.message,\r\n      retryAfter: rateLimitResult.retryAfter,\r\n    }, {\r\n      status: 429,\r\n      headers: {\r\n        'RateLimit-Limit': rateLimitResult.limit.toString(),\r\n        'RateLimit-Remaining': rateLimitResult.remaining.toString(),\r\n        'RateLimit-Reset': new Date(rateLimitResult.resetTime).toISOString(),\r\n        'Retry-After': rateLimitResult.retryAfter?.toString() || '60',\r\n      }\r\n    });\r\n  }\r\n\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      logger.error(LogCategory.PAYMENT, 'Supabase admin client not available', undefined, { clientIP });\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Validar entrada\r\n    const rawData = await request.json();\r\n    const validationResult = CreatePreferenceSchema.safeParse(rawData);\r\n\r\n    if (!validationResult.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: `Datos inválidos: ${validationResult.error.errors.map(e => e.message).join(', ')}`,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const orderData = validationResult.data;\r\n    const productIds = orderData.items.map(item => parseInt(item.id));\r\n    const shippingCost = orderData.shipping?.cost || 0;\r\n\r\n    // ===================================\r\n    // OBTENER USUARIO AUTENTICADO CON CLERK\r\n    // ===================================\r\n    let userId: string | null = null;\r\n    let userEmail: string | null = null;\r\n\r\n    try {\r\n      // Intentar obtener usuario autenticado de Clerk\r\n      const clerkUser = await currentUser();\r\n      if (clerkUser) {\r\n        userId = clerkUser.id;\r\n        userEmail = clerkUser.emailAddresses[0]?.emailAddress || null;\r\n\r\n        // Verificar si el usuario existe en nuestra base de datos\r\n        const { data: existingUser, error: userError } = await supabaseAdmin\r\n          .from('users')\r\n          .select('id, clerk_id')\r\n          .eq('clerk_id', clerkUser.id)\r\n          .single();\r\n\r\n        if (userError && userError.code !== 'PGRST116') {\r\n          console.error('Error checking user in database:', userError);\r\n        }\r\n\r\n        // Si el usuario no existe en nuestra DB, crearlo\r\n        if (!existingUser) {\r\n          const { data: newUser, error: createUserError } = await supabaseAdmin\r\n            .from('users')\r\n            .insert({\r\n              clerk_id: clerkUser.id,\r\n              email: userEmail,\r\n              name: `${clerkUser.firstName || ''} ${clerkUser.lastName || ''}`.trim() || 'Usuario',\r\n            })\r\n            .select('id')\r\n            .single();\r\n\r\n          if (createUserError) {\r\n            console.error('Error creating user in database:', createUserError);\r\n            // Continuar con usuario temporal si falla la creación\r\n            userId = null;\r\n          } else if (newUser) {\r\n            userId = newUser.id;\r\n          } else {\r\n            console.error('Error: newUser is null after insertion');\r\n            userId = null;\r\n          }\r\n        } else {\r\n          userId = existingUser.id;\r\n        }\r\n      }\r\n    } catch (clerkError) {\r\n      console.error('Error getting Clerk user:', clerkError);\r\n      // Continuar sin usuario autenticado\r\n    }\r\n\r\n    // Si no hay usuario autenticado, usar usuario temporal\r\n    if (!session?.user) {\r\n      userId = '00000000-0000-4000-8000-000000000000';\r\n      userEmail = orderData.payer.email;\r\n\r\n      // Verificar que el usuario temporal existe\r\n      const { data: tempUser, error: tempUserError } = await supabaseAdmin\r\n        .from('users')\r\n        .select('id')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      if (tempUserError) {\r\n        // Crear usuario temporal si no existe\r\n        const { error: createTempError } = await supabaseAdmin\r\n          .from('users')\r\n          .insert({\r\n            id: userId,\r\n            clerk_id: 'temp-user',\r\n            email: userEmail,\r\n            name: `${orderData.payer.name} ${orderData.payer.surname}`.trim(),\r\n          });\r\n\r\n        if (createTempError) {\r\n          console.error('Error creating temporary user:', createTempError);\r\n        }\r\n      }\r\n    }\r\n\r\n    // ===================================\r\n    // OBTENER PRODUCTOS Y VALIDAR STOCK\r\n    // ===================================\r\n    const { data: products, error: productsError } = await supabaseAdmin\r\n      .from('products')\r\n      .select(`\r\n        id,\r\n        name,\r\n        price,\r\n        discounted_price,\r\n        stock,\r\n        images,\r\n        category:categories (\r\n          name,\r\n          slug\r\n        )\r\n      `)\r\n      .in('id', productIds);\r\n\r\n    if (productsError || !products) {\r\n      console.error('Error fetching products:', productsError);\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error obteniendo productos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Definir tipo para productos con categoría (como viene de Supabase)\r\n    type SupabaseProduct = {\r\n      id: number;\r\n      name: string;\r\n      price: number;\r\n      discounted_price: number | null;\r\n      stock: number;\r\n      images: any;\r\n      category: {\r\n        name: string;\r\n        slug: string;\r\n      }[] | null;\r\n    };\r\n\r\n    // Convertir productos para tener categoría como objeto\r\n    const typedProducts = (products as SupabaseProduct[]).map(product => ({\r\n      ...product,\r\n      category: product.category && product.category.length > 0 ? product.category[0] : null\r\n    }));\r\n\r\n    // Validar stock disponible\r\n    for (const item of orderData.items) {\r\n      const product = typedProducts.find(p => p.id === parseInt(item.id));\r\n      if (!product) {\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: `Producto ${item.id} no encontrado`,\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n\r\n      if (product.stock < item.quantity) {\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: `Stock insuficiente para ${product.name}. Disponible: ${product.stock}, solicitado: ${item.quantity}`,\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n    }\r\n\r\n    // ===================================\r\n    // CALCULAR TOTALES CON PRECIOS CORRECTOS\r\n    // ===================================\r\n    const itemsTotal = orderData.items.reduce((total, item) => {\r\n      const product = typedProducts.find(p => p.id === parseInt(item.id));\r\n      if (!product) return total;\r\n\r\n      // Usar precio con descuento si existe, sino precio normal\r\n      const finalPrice = getFinalPrice(product);\r\n      return total + (finalPrice * item.quantity);\r\n    }, 0);\r\n\r\n    const totalAmount = itemsTotal + shippingCost;\r\n\r\n    // ===================================\r\n    // CREAR ORDEN EN BASE DE DATOS\r\n    // ===================================\r\n    const { data: order, error: orderError } = await supabaseAdmin\r\n      .from('orders')\r\n      .insert({\r\n        user_id: userId,\r\n        status: 'pending',\r\n        total: totalAmount,\r\n        shipping_address: orderData.shipping?.address ? JSON.stringify(orderData.shipping.address) : null,\r\n        external_reference: orderData.external_reference || `order_${Date.now()}`,\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      console.error('Error creating order:', orderError);\r\n      console.error('Order data attempted:', {\r\n        user_id: userId,\r\n        status: 'pending',\r\n        total: totalAmount,\r\n        shipping_address: orderData.shipping?.address ? JSON.stringify(orderData.shipping.address) : null,\r\n        external_reference: orderData.external_reference || `order_${Date.now()}`,\r\n      });\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: `Error creando orden: ${orderError?.message || 'Unknown error'}`,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // ===================================\r\n    // CREAR ITEMS DE LA ORDEN CON PRECIOS CORRECTOS\r\n    // ===================================\r\n    const orderItems = orderData.items.map(item => {\r\n      const product = typedProducts.find(p => p.id === parseInt(item.id));\r\n      if (!product) {\r\n        throw new Error(`Producto ${item.id} no encontrado`);\r\n      }\r\n\r\n      // Usar precio con descuento si existe, sino precio normal\r\n      const finalPrice = getFinalPrice(product);\r\n\r\n      return {\r\n        order_id: order.id,\r\n        product_id: parseInt(item.id),\r\n        quantity: item.quantity,\r\n        price: finalPrice,\r\n      };\r\n    });\r\n\r\n    const { error: itemsError } = await supabaseAdmin\r\n      .from('order_items')\r\n      .insert(orderItems);\r\n\r\n    if (itemsError) {\r\n      console.error('Error creating order items:', itemsError);\r\n      // Rollback: eliminar orden creada\r\n      await supabaseAdmin.from('orders').delete().eq('id', order.id);\r\n      \r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error creando items de orden',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // ===================================\r\n    // CONVERTIR ITEMS PARA MERCADOPAGO\r\n    // ===================================\r\n    const mercadoPagoItems: MercadoPagoItem[] = typedProducts.map((product) => {\r\n      const orderItem = orderData.items.find(item => item.id === product.id.toString());\r\n      if (!orderItem) {\r\n        throw new Error(`Order item not found for product ${product.id}`);\r\n      }\r\n\r\n      // Usar precio con descuento si existe, sino precio normal\r\n      const finalPrice = getFinalPrice(product);\r\n\r\n      return {\r\n        id: product.id.toString(),\r\n        title: product.name,\r\n        description: `Producto de pinturería - ${product.category?.name || 'General'}`,\r\n        picture_url: product.images?.previews?.[0] || '',\r\n        category_id: product.category?.slug || 'general',\r\n        quantity: orderItem.quantity,\r\n        currency_id: 'ARS',\r\n        unit_price: finalPrice,\r\n      };\r\n    });\r\n\r\n    // Agregar costo de envío si existe\r\n    if (shippingCost > 0) {\r\n      mercadoPagoItems.push({\r\n        id: 'shipping',\r\n        title: 'Costo de envío',\r\n        description: 'Envío a domicilio',\r\n        category_id: 'shipping',\r\n        quantity: 1,\r\n        currency_id: 'ARS',\r\n        unit_price: shippingCost,\r\n      });\r\n    }\r\n\r\n    // ✅ MEJORADO: Usar nueva función con configuración avanzada\r\n    const preferenceResult = await createPaymentPreference({\r\n      items: mercadoPagoItems,\r\n      payer: {\r\n        name: orderData.payer.name,\r\n        surname: orderData.payer.surname,\r\n        email: orderData.payer.email,\r\n        phone: orderData.payer.phone ? {\r\n          area_code: orderData.payer.phone.substring(0, 3),\r\n          number: orderData.payer.phone.substring(3),\r\n        } : undefined,\r\n        identification: orderData.payer.identification,\r\n        address: orderData.shipping ? {\r\n          street_name: orderData.shipping.address.street_name,\r\n          street_number: orderData.shipping.address.street_number,\r\n          zip_code: orderData.shipping.address.zip_code,\r\n        } : undefined,\r\n      },\r\n      back_urls: {\r\n        success: `${process.env.NEXT_PUBLIC_APP_URL}/checkout/success?order_id=${order.id}`,\r\n        failure: `${process.env.NEXT_PUBLIC_APP_URL}/checkout/failure?order_id=${order.id}`,\r\n        pending: `${process.env.NEXT_PUBLIC_APP_URL}/checkout/pending?order_id=${order.id}`,\r\n      },\r\n      external_reference: order.id.toString(),\r\n      shipments: orderData.shipping ? {\r\n        cost: orderData.shipping.cost,\r\n        receiver_address: {\r\n          zip_code: orderData.shipping.address.zip_code,\r\n          street_name: orderData.shipping.address.street_name,\r\n          street_number: orderData.shipping.address.street_number,\r\n          city_name: orderData.shipping.address.city_name,\r\n          state_name: orderData.shipping.address.state_name,\r\n        },\r\n      } : undefined,\r\n    });\r\n\r\n    // ✅ MEJORADO: Manejar resultado de la nueva función\r\n    if (!preferenceResult.success) {\r\n      throw new Error('error' in preferenceResult ? preferenceResult.error : 'Error creando preferencia de pago');\r\n    }\r\n\r\n    // Actualizar orden con ID de preferencia\r\n    const preferenceData = 'data' in preferenceResult ? preferenceResult.data : null;\r\n    const { error: updateError } = await supabaseAdmin\r\n      .from('orders')\r\n      .update({\r\n        payment_preference_id: preferenceData?.id,\r\n      })\r\n      .eq('id', order.id);\r\n\r\n    if (updateError) {\r\n      logger.warn(LogCategory.PAYMENT, 'Failed to update order with preference ID', { updateError }, { clientIP });\r\n    }\r\n\r\n    // ✅ NUEVO: Logging exitoso de creación de preferencia\r\n    const processingTime = Date.now() - requestStart;\r\n    logger.payment(LogLevel.INFO, 'Payment preference created successfully', {\r\n      orderId: order.id.toString(),\r\n      preferenceId: preferenceData?.id,\r\n      amount: totalAmount,\r\n      currency: 'ARS',\r\n      method: 'mercadopago',\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    logger.performance(LogLevel.INFO, 'Create preference request completed', {\r\n      operation: 'create-preference',\r\n      duration: processingTime,\r\n      endpoint: '/api/payments/create-preference',\r\n      statusCode: 200,\r\n    }, { clientIP });\r\n\r\n    // ✅ NUEVO: Crear respuesta con headers de rate limiting\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        init_point: preferenceData?.init_point,\r\n        preference_id: preferenceData?.id,\r\n      },\r\n    });\r\n\r\n    // ✅ NUEVO: Registrar métricas de éxito\r\n    await metricsCollector.recordRequest(\r\n      'create-preference',\r\n      'POST',\r\n      200,\r\n      Date.now() - requestStart,\r\n      { clientIP, userAgent }\r\n    );\r\n\r\n    // Agregar headers de rate limiting a la respuesta exitosa\r\n    return addRateLimitHeaders(response, rateLimitResult, rateLimitConfig);\r\n\r\n  } catch (error: any) {\r\n    // ✅ MEJORADO: Logging estructurado de errores\r\n    const processingTime = Date.now() - requestStart;\r\n\r\n    logger.error(LogCategory.PAYMENT, 'Failed to create payment preference', error, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    logger.performance(LogLevel.ERROR, 'Create preference request failed', {\r\n      operation: 'create-preference',\r\n      duration: processingTime,\r\n      endpoint: '/api/payments/create-preference',\r\n      statusCode: 500,\r\n    }, { clientIP });\r\n\r\n    // ✅ NUEVO: Registrar métricas de error\r\n    await metricsCollector.recordRequest(\r\n      'create-preference',\r\n      'POST',\r\n      500,\r\n      processingTime,\r\n      { clientIP, userAgent, error: error.message }\r\n    );\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: process.env.NODE_ENV === 'development' ? error.message : 'Error interno del servidor',\r\n    }, { status: 500 });\r\n  }\r\n}\r\n"],"names":["POST","CreatePreferenceSchema","z","object","items","array","id","string","min","quantity","number","max","payer","name","VALIDATION_CONSTANTS","MIN_NAME_LENGTH","surname","email","phone","regex","PHONE_REGEX","optional","identification","type","shipping","cost","address","street_name","street_number","zip_code","city_name","state_name","external_reference","getFinalPrice","product","discounted_price","price","createTemporaryUser","userId","supabaseAdmin","Error","error","from","insert","clerk_id","console","request","requestStart","Date","now","clientIP","headers","get","userAgent","logger","info","LogCategory","PAYMENT","endpoint","method","rateLimitConfig","ENTERPRISE_RATE_LIMIT_CONFIGS","PAYMENT_API","keyGenerator","endpointKeyGenerator","rateLimitResult","checkRateLimit","success","warn","SECURITY","limit","retryAfter","NextResponse","json","message","status","toString","remaining","resetTime","toISOString","undefined","errorResponse","data","rawData","validationResult","safeParse","errors","map","e","join","orderData","productIds","item","parseInt","shippingCost","userEmail","clerkUser","currentUser","emailAddresses","emailAddress","existingUser","userError","select","eq","single","code","newUser","createUserError","firstName","lastName","trim","clerkError","session","user","tempUser","tempUserError","createTempError","products","productsError","in","typedProducts","category","length","find","p","stock","itemsTotal","reduce","total","finalPrice","totalAmount","order","orderError","user_id","shipping_address","JSON","stringify","orderItems","order_id","product_id","itemsError","delete","mercadoPagoItems","orderItem","title","description","picture_url","images","previews","category_id","slug","currency_id","unit_price","push","preferenceResult","createPaymentPreference","area_code","substring","back_urls","process","env","NEXT_PUBLIC_APP_URL","failure","pending","shipments","receiver_address","preferenceData","updateError","update","payment_preference_id","processingTime","payment","LogLevel","INFO","orderId","preferenceId","amount","currency","performance","operation","duration","statusCode","response","init_point","preference_id","metricsCollector","recordRequest","addRateLimitHeaders","ERROR","NODE_ENV"],"mappings":"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"}