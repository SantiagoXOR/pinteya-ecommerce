71ec302d16cdcfd61f0fe3eaa7184273
"use strict";
// Mock next/image
jest.mock('next/image', ()=>({
        __esModule: true,
        default: ({ src, alt, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                src: src,
                alt: alt,
                ...props
            })
    }));
// Mock next/link
jest.mock('next/link', ()=>({
        __esModule: true,
        default: ({ children, href, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: href,
                ...props,
                children: children
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _Hero = /*#__PURE__*/ _interop_require_default(require("../../components/Home/Hero"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Hero Component', ()=>{
    it('should render without crashing', ()=>{
        expect(()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        }).not.toThrow();
    });
    it('should render the main heading', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        expect(_react1.screen.getByText(/Pintá rápido/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/fácil y cotiza/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/al instante/i)).toBeInTheDocument();
    });
    it('should render the hero image', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        // Hay múltiples imágenes con el mismo alt text, usar getAllByAltText
        const heroImages = _react1.screen.getAllByAltText(/Pintá rápido, fácil y cotiza al instante/i);
        expect(heroImages.length).toBeGreaterThan(0);
    });
    it('should render without service badges (moved to TrustSection)', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        // Los badges de servicios fueron movidos a TrustSection
        expect(_react1.screen.queryByText(/Envíos/i)).not.toBeInTheDocument();
        expect(_react1.screen.queryByText(/Asesoramiento/i)).not.toBeInTheDocument();
        expect(_react1.screen.queryByText(/Pagos/i)).not.toBeInTheDocument();
        expect(_react1.screen.queryByText(/Cambios/i)).not.toBeInTheDocument();
    });
    it('should render action buttons', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        // El componente Hero actual no tiene botones "Ver Catálogo", solo es visual
        // Verificar que el componente se renderiza sin errores
        expect(_react1.screen.getByText(/Pintá rápido/i)).toBeInTheDocument();
    });
    it('should render hero content without service badges', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        // El componente Hero ya no tiene badges de servicios (movidos a TrustSection)
        // Verificar que el contenido principal del hero está presente
        expect(_react1.screen.getByText(/Pintá rápido/i)).toBeInTheDocument();
        expect(_react1.screen.queryByText(/Envíos/i)).not.toBeInTheDocument();
        expect(_react1.screen.queryByText(/Asesoramiento/i)).not.toBeInTheDocument();
    });
    it('should render location information', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        // El componente Hero actual no muestra información de ubicación
        // Verificar que el componente principal se renderiza
        const heroSection = document.querySelector('section');
        expect(heroSection).toBeInTheDocument();
    });
    it('should render images without errors', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        const imgElements = container.querySelectorAll('img');
        expect(imgElements.length).toBeGreaterThan(0);
        // Verificar que todas las imágenes tienen src definido
        imgElements.forEach((img)=>{
            expect(img.getAttribute('src')).toBeTruthy();
        });
    });
    it('should not render service icons (moved to TrustSection)', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        // Verificar que NO hay imágenes de servicios (fueron movidas a TrustSection)
        const serviceImages = container.querySelectorAll('img[alt*="Envíos"], img[alt*="Asesoramiento"], img[alt*="Pagos"], img[alt*="Cambios"]');
        expect(serviceImages.length).toBe(0);
    });
    it('should not render service badges (moved to TrustSection)', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        // Los elementos con gradientes de servicios fueron movidos a TrustSection
        const serviceElements = container.querySelectorAll('[class*="bg-gradient-to-br"]');
        // Solo deben quedar los elementos decorativos del hero, no los 4 servicios
        expect(serviceElements.length).toBeLessThan(4);
    });
    it('should not have undefined elements in JSX', ()=>{
        // Este test específicamente busca el error mencionado
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation(()=>{});
        expect(()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Hero.default, {}));
        }).not.toThrow();
        // Verificar que no hay errores de React sobre elementos undefined
        const reactErrors = consoleSpy.mock.calls.filter((call)=>call[0] && call[0].toString().includes('Element type is invalid'));
        expect(reactErrors).toHaveLength(0);
        consoleSpy.mockRestore();
    });
});

//# sourceMappingURL=data:application/json;base64,