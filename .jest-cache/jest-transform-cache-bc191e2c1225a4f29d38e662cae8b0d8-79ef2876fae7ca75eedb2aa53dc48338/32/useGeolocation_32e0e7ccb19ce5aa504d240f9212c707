a038c3c4612aa57cc6196ea32915356d
/**
 * Hook para geolocalizaci√≥n autom√°tica y detecci√≥n de zona de entrega
 * Detecta la ubicaci√≥n del usuario y determina la zona de entrega m√°s cercana
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useGeolocation", {
    enumerable: true,
    get: function() {
        return useGeolocation;
    }
});
const _react = require("react");
// Zonas de entrega con coordenadas aproximadas
const DELIVERY_ZONES = [
    {
        id: "cordoba-capital",
        name: "C√≥rdoba Capital",
        available: true,
        coordinates: {
            lat: -31.4201,
            lng: -64.1888
        },
        radius: 15
    },
    {
        id: "cordoba-interior",
        name: "Interior de C√≥rdoba",
        available: true,
        coordinates: {
            lat: -31.4201,
            lng: -64.1888
        },
        radius: 100
    },
    {
        id: "buenos-aires",
        name: "Buenos Aires",
        available: false,
        coordinates: {
            lat: -34.6118,
            lng: -58.3960
        },
        radius: 50
    },
    {
        id: "rosario",
        name: "Rosario",
        available: false,
        coordinates: {
            lat: -32.9442,
            lng: -60.6505
        },
        radius: 30
    }
];
// Funci√≥n para calcular distancia entre dos puntos (f√≥rmula de Haversine)
function calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 6371; // Radio de la Tierra en km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}
// Funci√≥n para detectar la zona m√°s cercana
function detectNearestZone(userLat, userLng) {
    console.log('üó∫Ô∏è === DETECTING NEAREST ZONE ===');
    console.log('üó∫Ô∏è User coordinates:', userLat, userLng);
    let nearestZone = null;
    let minDistance = Infinity;
    for (const zone of DELIVERY_ZONES){
        console.log('üó∫Ô∏è Checking zone:', zone.name, zone.id);
        if (zone.coordinates) {
            const distance = calculateDistance(userLat, userLng, zone.coordinates.lat, zone.coordinates.lng);
            console.log(`üó∫Ô∏è Distance to ${zone.name}: ${distance.toFixed(2)}km (radius: ${zone.radius}km)`);
            // Verificar si est√° dentro del radio de la zona
            if (zone.radius && distance <= zone.radius && distance < minDistance) {
                console.log(`üó∫Ô∏è ‚úÖ ${zone.name} is within range and closer!`);
                nearestZone = zone;
                minDistance = distance;
            } else {
                console.log(`üó∫Ô∏è ‚ùå ${zone.name} is out of range or farther`);
            }
        } else {
            console.log(`üó∫Ô∏è ‚ö†Ô∏è ${zone.name} has no coordinates`);
        }
    }
    // Si no encuentra una zona espec√≠fica, usar C√≥rdoba Interior como fallback
    const fallbackZone = DELIVERY_ZONES.find((zone)=>zone.id === "cordoba-interior");
    const result = nearestZone || fallbackZone || null;
    console.log('üó∫Ô∏è Final result:', result?.name || 'null');
    console.log('üó∫Ô∏è === ZONE DETECTION COMPLETE ===');
    return result;
}
const useGeolocation = ()=>{
    const [state, setState] = (0, _react.useState)({
        location: null,
        isLoading: false,
        error: null,
        permissionStatus: 'unknown',
        detectedZone: null
    });
    // Funci√≥n para solicitar geolocalizaci√≥n
    const requestLocation = (0, _react.useCallback)(()=>{
        console.log('üó∫Ô∏è ===== REQUEST LOCATION START =====');
        console.log('üó∫Ô∏è Navigator geolocation available:', !!navigator.geolocation);
        if (!navigator.geolocation) {
            console.log('üó∫Ô∏è ‚ùå Geolocation not supported');
            setState((prev)=>({
                    ...prev,
                    error: 'Geolocalizaci√≥n no soportada por este navegador',
                    permissionStatus: 'denied'
                }));
            return;
        }
        console.log('üó∫Ô∏è ‚úÖ Starting geolocation request...');
        console.log('üó∫Ô∏è Setting loading state to true...');
        setState((prev)=>{
            const newState = {
                ...prev,
                isLoading: true,
                error: null
            };
            console.log('üó∫Ô∏è Loading state updated:', newState);
            return newState;
        });
        // Usar Promise para mejor manejo de errores
        const getCurrentPositionPromise = ()=>{
            return new Promise((resolve, reject)=>{
                navigator.geolocation.getCurrentPosition(resolve, reject, {
                    enableHighAccuracy: false,
                    timeout: 30000,
                    maximumAge: 0
                });
            });
        };
        // Ejecutar con async/await para mejor control
        getCurrentPositionPromise().then((position)=>{
            console.log('üó∫Ô∏è ===== GEOLOCATION SUCCESS =====');
            console.log('üó∫Ô∏è Position object:', position);
            console.log('üó∫Ô∏è Coordinates:', position.coords);
            const { latitude, longitude, accuracy } = position.coords;
            console.log('üó∫Ô∏è Lat:', latitude, 'Lng:', longitude, 'Accuracy:', accuracy, 'meters');
            const detectedZone = detectNearestZone(latitude, longitude);
            console.log('üó∫Ô∏è Detected zone result:', detectedZone);
            console.log('üó∫Ô∏è Updating state with new location...');
            // Usar setTimeout para asegurar que el setState se ejecute en el pr√≥ximo tick
            setTimeout(()=>{
                setState((prev)=>{
                    const newState = {
                        ...prev,
                        location: {
                            lat: latitude,
                            lng: longitude
                        },
                        detectedZone,
                        isLoading: false,
                        permissionStatus: 'granted',
                        error: null
                    };
                    console.log('üó∫Ô∏è New state:', newState);
                    return newState;
                });
                console.log('üó∫Ô∏è ===== STATE UPDATE COMPLETE =====');
            }, 0);
        }).catch((error)=>{
            console.log('üó∫Ô∏è Geolocation error:', error);
            let errorMessage = 'Error al obtener ubicaci√≥n';
            let permissionStatus = 'unknown';
            switch(error.code){
                case error.PERMISSION_DENIED:
                    errorMessage = 'Permisos de ubicaci√≥n denegados';
                    permissionStatus = 'denied';
                    console.log('üó∫Ô∏è Permission denied by user');
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = 'Ubicaci√≥n no disponible';
                    console.log('üó∫Ô∏è Position unavailable');
                    break;
                case error.TIMEOUT:
                    errorMessage = 'Tiempo de espera agotado';
                    console.log('üó∫Ô∏è Geolocation timeout');
                    break;
            }
            // Tambi√©n usar setTimeout para el manejo de errores
            setTimeout(()=>{
                setState((prev)=>({
                        ...prev,
                        error: errorMessage,
                        isLoading: false,
                        permissionStatus
                    }));
            }, 0);
        });
    }, []);
    // Verificar permisos al montar el componente
    (0, _react.useEffect)(()=>{
        console.log('üó∫Ô∏è useGeolocation useEffect running');
        if ('permissions' in navigator) {
            console.log('üó∫Ô∏è Permissions API supported, checking permissions...');
            navigator.permissions.query({
                name: 'geolocation'
            }).then((result)=>{
                console.log('üó∫Ô∏è Permission status:', result.state);
                setState((prev)=>({
                        ...prev,
                        permissionStatus: result.state
                    }));
                // Si ya tiene permisos, solicitar ubicaci√≥n autom√°ticamente
                if (result.state === 'granted') {
                    console.log('üó∫Ô∏è Permission already granted, will request location on user interaction');
                // No solicitar autom√°ticamente para evitar bucles infinitos
                } else if (result.state === 'prompt') {
                    console.log('üó∫Ô∏è Permission prompt available, will request on user interaction');
                // No solicitar autom√°ticamente si es 'prompt' para evitar popup inesperado
                } else {
                    console.log('üó∫Ô∏è Permission denied or unavailable, status:', result.state);
                }
            }).catch((error)=>{
                console.log('üó∫Ô∏è Error checking geolocation permissions:', error);
                setState((prev)=>({
                        ...prev,
                        permissionStatus: 'unknown'
                    }));
            });
        } else {
            console.log('üó∫Ô∏è Permissions API not supported, will try direct geolocation');
            setState((prev)=>({
                    ...prev,
                    permissionStatus: 'unknown'
                }));
        }
    }, []); // Sin dependencias para evitar bucles
    // Funci√≥n para obtener todas las zonas disponibles
    const getAvailableZones = (0, _react.useCallback)(()=>{
        return DELIVERY_ZONES;
    }, []);
    // Funci√≥n para seleccionar zona manualmente
    const selectZone = (0, _react.useCallback)((zoneId)=>{
        const zone = DELIVERY_ZONES.find((z)=>z.id === zoneId);
        if (zone) {
            setState((prev)=>({
                    ...prev,
                    detectedZone: zone
                }));
        }
    }, []);
    // Funci√≥n de test para simular geolocalizaci√≥n exitosa
    const testLocation = (0, _react.useCallback)((lat = -31.4201, lng = -64.1888)=>{
        console.log('üß™ ===== TEST LOCATION SIMULATION =====');
        console.log('üß™ Simulating location:', lat, lng);
        const detectedZone = detectNearestZone(lat, lng);
        console.log('üß™ Simulated detected zone:', detectedZone);
        console.log('üß™ Updating state with simulated location...');
        setState((prev)=>{
            const newState = {
                ...prev,
                location: {
                    lat,
                    lng
                },
                detectedZone,
                isLoading: false,
                permissionStatus: 'granted',
                error: null
            };
            console.log('üß™ Simulated new state:', newState);
            return newState;
        });
        console.log('üß™ ===== TEST SIMULATION COMPLETE =====');
    }, []);
    return {
        ...state,
        requestLocation,
        getAvailableZones,
        selectZone,
        deliveryZones: DELIVERY_ZONES,
        testLocation
    };
};

//# sourceMappingURL=data:application/json;base64,