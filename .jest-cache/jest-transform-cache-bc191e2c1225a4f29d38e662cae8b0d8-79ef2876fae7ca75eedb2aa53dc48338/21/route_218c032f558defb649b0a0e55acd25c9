c664fab0a09f884c7fac59011cf0c239
// ===================================
// API: /api/search/trending - B√∫squedas populares/trending
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _supabase = require("../../../../lib/supabase");
// B√∫squedas trending por defecto (fallback)
const defaultTrendingSearches = [
    {
        id: "trending-1",
        query: "Pintura l√°tex",
        count: 156,
        category: "pinturas",
        href: "/search?q=pintura+latex",
        type: "trending"
    },
    {
        id: "trending-2",
        query: "Sherwin Williams",
        count: 142,
        category: "marcas",
        href: "/search?q=sherwin+williams",
        type: "trending"
    },
    {
        id: "trending-3",
        query: "Rodillos premium",
        count: 98,
        category: "herramientas",
        href: "/search?q=rodillos+premium",
        type: "trending"
    },
    {
        id: "trending-4",
        query: "Pinceles",
        count: 87,
        category: "herramientas",
        href: "/search?q=pinceles",
        type: "trending"
    },
    {
        id: "trending-5",
        query: "Impermeabilizante",
        count: 76,
        category: "pinturas",
        href: "/search?q=impermeabilizante",
        type: "trending"
    },
    {
        id: "trending-6",
        query: "Petrilac",
        count: 65,
        category: "marcas",
        href: "/search?q=petrilac",
        type: "trending"
    }
];
async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        const limit = parseInt(searchParams.get('limit') || '6');
        const days = parseInt(searchParams.get('days') || '7');
        const category = searchParams.get('category');
        console.log('üî• API /api/search/trending: Obteniendo b√∫squedas trending', {
            limit,
            days,
            category
        });
        const supabase = (0, _supabase.getSupabaseClient)();
        let trendingSearches = [];
        // Intentar obtener b√∫squedas trending reales del sistema de analytics
        if (supabase) {
            try {
                const startDate = new Date();
                startDate.setDate(startDate.getDate() - days);
                // Query para obtener b√∫squedas m√°s populares de analytics_events
                let query = supabase.from('analytics_events').select('label, metadata').eq('category', 'search').eq('action', 'search_query').gte('created_at', startDate.toISOString()).not('label', 'is', null);
                if (category) {
                    query = query.eq('metadata->>category', category);
                }
                const { data: analyticsData, error } = await query;
                if (!error && analyticsData && analyticsData.length > 0) {
                    // Procesar datos de analytics para obtener trending
                    const searchCounts = new Map();
                    const searchCategories = new Map();
                    analyticsData.forEach((event)=>{
                        if (event.label) {
                            const query = event.label.toLowerCase().trim();
                            if (query.length > 2) {
                                searchCounts.set(query, (searchCounts.get(query) || 0) + 1);
                                // Extraer categor√≠a del metadata si existe
                                if (event.metadata && event.metadata.category) {
                                    searchCategories.set(query, event.metadata.category);
                                }
                            }
                        }
                    });
                    // Convertir a array y ordenar por popularidad
                    const sortedSearches = Array.from(searchCounts.entries()).sort((a, b)=>b[1] - a[1]).slice(0, limit);
                    trendingSearches = sortedSearches.map(([query, count], index)=>({
                            id: `trending-real-${index + 1}`,
                            query: query.charAt(0).toUpperCase() + query.slice(1),
                            count,
                            category: searchCategories.get(query),
                            href: `/search?q=${encodeURIComponent(query)}`,
                            type: 'trending'
                        }));
                }
            } catch (analyticsError) {
                console.warn('‚ö†Ô∏è Error obteniendo trending de analytics, usando fallback:', analyticsError);
            }
        }
        // Si no hay datos reales o hay pocos, usar datos por defecto
        if (trendingSearches.length < 3) {
            let filteredDefaults = defaultTrendingSearches;
            // Filtrar por categor√≠a si se especifica
            if (category) {
                filteredDefaults = defaultTrendingSearches.filter((search)=>search.category === category);
            }
            // Combinar datos reales con defaults si es necesario
            const needed = limit - trendingSearches.length;
            const additionalSearches = filteredDefaults.slice(0, needed);
            trendingSearches = [
                ...trendingSearches,
                ...additionalSearches
            ];
        }
        // Limitar al n√∫mero solicitado
        trendingSearches = trendingSearches.slice(0, limit);
        const response = {
            data: {
                trending: trendingSearches,
                lastUpdated: new Date().toISOString()
            },
            success: true
        };
        console.log('üî• Trending searches response:', {
            count: trendingSearches.length,
            hasRealData: trendingSearches.some((s)=>s.id.includes('real')),
            categories: [
                ...new Set(trendingSearches.map((s)=>s.category).filter(Boolean))
            ]
        });
        return _server.NextResponse.json(response);
    } catch (error) {
        console.error('‚ùå Error en /api/search/trending:', error);
        // En caso de error, devolver b√∫squedas por defecto
        const fallbackResponse = {
            data: {
                trending: defaultTrendingSearches.slice(0, parseInt(request.nextUrl.searchParams.get('limit') || '6')),
                lastUpdated: new Date().toISOString()
            },
            success: true
        };
        return _server.NextResponse.json(fallbackResponse);
    }
}
async function POST(request) {
    try {
        // Validar que el request tenga contenido
        const contentType = request.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            return _server.NextResponse.json({
                error: 'Content-Type debe ser application/json'
            }, {
                status: 400
            });
        }
        // Obtener el texto del body primero para validar
        const bodyText = await request.text();
        if (!bodyText || bodyText.trim() === '' || bodyText === '""' || bodyText === "''") {
            return _server.NextResponse.json({
                error: 'Body de la request no puede estar vac√≠o'
            }, {
                status: 400
            });
        }
        // Parsear JSON de forma segura
        let requestData;
        try {
            requestData = JSON.parse(bodyText);
        } catch (parseError) {
            console.error('Error parsing JSON in POST /api/search/trending:', parseError);
            return _server.NextResponse.json({
                error: 'JSON inv√°lido en el body de la request'
            }, {
                status: 400
            });
        }
        const { query, category, userId, sessionId } = requestData;
        if (!query || typeof query !== 'string') {
            return _server.NextResponse.json({
                error: 'Query de b√∫squeda requerida'
            }, {
                status: 400
            });
        }
        const supabase = (0, _supabase.getSupabaseClient)();
        if (supabase) {
            // Registrar la b√∫squeda en analytics usando funci√≥n optimizada
            const { error } = await supabase.rpc('insert_analytics_event_optimized', {
                p_event_name: 'search',
                p_category: 'search',
                p_action: 'search',
                p_label: query.toLowerCase().trim().substring(0, 50),
                p_user_id: userId,
                p_session_id: sessionId || 'anonymous',
                p_page: '/search',
                p_user_agent: null
            });
            if (error) {
                console.error('Error registrando b√∫squeda en analytics:', error);
            } else {}
        }
        return _server.NextResponse.json({
            success: true
        });
    } catch (error) {
        console.error('‚ùå Error registrando b√∫squeda:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXHNlYXJjaFxcdHJlbmRpbmdcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBBUEk6IC9hcGkvc2VhcmNoL3RyZW5kaW5nIC0gQsO6c3F1ZWRhcyBwb3B1bGFyZXMvdHJlbmRpbmdcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBnZXRTdXBhYmFzZUNsaWVudCB9IGZyb20gJ0AvbGliL3N1cGFiYXNlJztcbmltcG9ydCB7IEFwaVJlc3BvbnNlIH0gZnJvbSAnQC90eXBlcy9hcGknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyZW5kaW5nU2VhcmNoIHtcbiAgaWQ6IHN0cmluZztcbiAgcXVlcnk6IHN0cmluZztcbiAgY291bnQ6IG51bWJlcjtcbiAgY2F0ZWdvcnk/OiBzdHJpbmc7XG4gIGhyZWY6IHN0cmluZztcbiAgdHlwZTogJ3RyZW5kaW5nJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmVuZGluZ1NlYXJjaGVzUmVzcG9uc2Uge1xuICB0cmVuZGluZzogVHJlbmRpbmdTZWFyY2hbXTtcbiAgbGFzdFVwZGF0ZWQ6IHN0cmluZztcbn1cblxuLy8gQsO6c3F1ZWRhcyB0cmVuZGluZyBwb3IgZGVmZWN0byAoZmFsbGJhY2spXG5jb25zdCBkZWZhdWx0VHJlbmRpbmdTZWFyY2hlczogVHJlbmRpbmdTZWFyY2hbXSA9IFtcbiAge1xuICAgIGlkOiBcInRyZW5kaW5nLTFcIixcbiAgICBxdWVyeTogXCJQaW50dXJhIGzDoXRleFwiLFxuICAgIGNvdW50OiAxNTYsXG4gICAgY2F0ZWdvcnk6IFwicGludHVyYXNcIixcbiAgICBocmVmOiBcIi9zZWFyY2g/cT1waW50dXJhK2xhdGV4XCIsXG4gICAgdHlwZTogXCJ0cmVuZGluZ1wiXG4gIH0sXG4gIHtcbiAgICBpZDogXCJ0cmVuZGluZy0yXCIsIFxuICAgIHF1ZXJ5OiBcIlNoZXJ3aW4gV2lsbGlhbXNcIixcbiAgICBjb3VudDogMTQyLFxuICAgIGNhdGVnb3J5OiBcIm1hcmNhc1wiLFxuICAgIGhyZWY6IFwiL3NlYXJjaD9xPXNoZXJ3aW4rd2lsbGlhbXNcIixcbiAgICB0eXBlOiBcInRyZW5kaW5nXCJcbiAgfSxcbiAge1xuICAgIGlkOiBcInRyZW5kaW5nLTNcIixcbiAgICBxdWVyeTogXCJSb2RpbGxvcyBwcmVtaXVtXCIsXG4gICAgY291bnQ6IDk4LFxuICAgIGNhdGVnb3J5OiBcImhlcnJhbWllbnRhc1wiLFxuICAgIGhyZWY6IFwiL3NlYXJjaD9xPXJvZGlsbG9zK3ByZW1pdW1cIixcbiAgICB0eXBlOiBcInRyZW5kaW5nXCJcbiAgfSxcbiAge1xuICAgIGlkOiBcInRyZW5kaW5nLTRcIixcbiAgICBxdWVyeTogXCJQaW5jZWxlc1wiLFxuICAgIGNvdW50OiA4NyxcbiAgICBjYXRlZ29yeTogXCJoZXJyYW1pZW50YXNcIiwgXG4gICAgaHJlZjogXCIvc2VhcmNoP3E9cGluY2VsZXNcIixcbiAgICB0eXBlOiBcInRyZW5kaW5nXCJcbiAgfSxcbiAge1xuICAgIGlkOiBcInRyZW5kaW5nLTVcIixcbiAgICBxdWVyeTogXCJJbXBlcm1lYWJpbGl6YW50ZVwiLFxuICAgIGNvdW50OiA3NixcbiAgICBjYXRlZ29yeTogXCJwaW50dXJhc1wiLFxuICAgIGhyZWY6IFwiL3NlYXJjaD9xPWltcGVybWVhYmlsaXphbnRlXCIsXG4gICAgdHlwZTogXCJ0cmVuZGluZ1wiXG4gIH0sXG4gIHtcbiAgICBpZDogXCJ0cmVuZGluZy02XCIsXG4gICAgcXVlcnk6IFwiUGV0cmlsYWNcIixcbiAgICBjb3VudDogNjUsXG4gICAgY2F0ZWdvcnk6IFwibWFyY2FzXCIsXG4gICAgaHJlZjogXCIvc2VhcmNoP3E9cGV0cmlsYWNcIixcbiAgICB0eXBlOiBcInRyZW5kaW5nXCJcbiAgfVxuXTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBjb25zdCBsaW1pdCA9IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ2xpbWl0JykgfHwgJzYnKTtcbiAgICBjb25zdCBkYXlzID0gcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnZGF5cycpIHx8ICc3Jyk7XG4gICAgY29uc3QgY2F0ZWdvcnkgPSBzZWFyY2hQYXJhbXMuZ2V0KCdjYXRlZ29yeScpO1xuXG4gICAgY29uc29sZS5sb2coJ/CflKUgQVBJIC9hcGkvc2VhcmNoL3RyZW5kaW5nOiBPYnRlbmllbmRvIGLDunNxdWVkYXMgdHJlbmRpbmcnLCB7XG4gICAgICBsaW1pdCxcbiAgICAgIGRheXMsXG4gICAgICBjYXRlZ29yeVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUNsaWVudCgpO1xuXG4gICAgbGV0IHRyZW5kaW5nU2VhcmNoZXM6IFRyZW5kaW5nU2VhcmNoW10gPSBbXTtcblxuICAgIC8vIEludGVudGFyIG9idGVuZXIgYsO6c3F1ZWRhcyB0cmVuZGluZyByZWFsZXMgZGVsIHNpc3RlbWEgZGUgYW5hbHl0aWNzXG4gICAgaWYgKHN1cGFiYXNlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBzdGFydERhdGUuc2V0RGF0ZShzdGFydERhdGUuZ2V0RGF0ZSgpIC0gZGF5cyk7XG5cbiAgICAgICAgLy8gUXVlcnkgcGFyYSBvYnRlbmVyIGLDunNxdWVkYXMgbcOhcyBwb3B1bGFyZXMgZGUgYW5hbHl0aWNzX2V2ZW50c1xuICAgICAgICBsZXQgcXVlcnkgPSBzdXBhYmFzZVxuICAgICAgICAgIC5mcm9tKCdhbmFseXRpY3NfZXZlbnRzJylcbiAgICAgICAgICAuc2VsZWN0KCdsYWJlbCwgbWV0YWRhdGEnKVxuICAgICAgICAgIC5lcSgnY2F0ZWdvcnknLCAnc2VhcmNoJylcbiAgICAgICAgICAuZXEoJ2FjdGlvbicsICdzZWFyY2hfcXVlcnknKVxuICAgICAgICAgIC5ndGUoJ2NyZWF0ZWRfYXQnLCBzdGFydERhdGUudG9JU09TdHJpbmcoKSlcbiAgICAgICAgICAubm90KCdsYWJlbCcsICdpcycsIG51bGwpO1xuXG4gICAgICAgIGlmIChjYXRlZ29yeSkge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkuZXEoJ21ldGFkYXRhLT4+Y2F0ZWdvcnknLCBjYXRlZ29yeSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGRhdGE6IGFuYWx5dGljc0RhdGEsIGVycm9yIH0gPSBhd2FpdCBxdWVyeTtcblxuICAgICAgICBpZiAoIWVycm9yICYmIGFuYWx5dGljc0RhdGEgJiYgYW5hbHl0aWNzRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gUHJvY2VzYXIgZGF0b3MgZGUgYW5hbHl0aWNzIHBhcmEgb2J0ZW5lciB0cmVuZGluZ1xuICAgICAgICAgIGNvbnN0IHNlYXJjaENvdW50cyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG4gICAgICAgICAgY29uc3Qgc2VhcmNoQ2F0ZWdvcmllcyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG5cbiAgICAgICAgICBhbmFseXRpY3NEYXRhLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQubGFiZWwpIHtcbiAgICAgICAgICAgICAgY29uc3QgcXVlcnkgPSBldmVudC5sYWJlbC50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA+IDIpIHsgLy8gU29sbyBxdWVyaWVzIGRlIG3DoXMgZGUgMiBjYXJhY3RlcmVzXG4gICAgICAgICAgICAgICAgc2VhcmNoQ291bnRzLnNldChxdWVyeSwgKHNlYXJjaENvdW50cy5nZXQocXVlcnkpIHx8IDApICsgMSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gRXh0cmFlciBjYXRlZ29yw61hIGRlbCBtZXRhZGF0YSBzaSBleGlzdGVcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubWV0YWRhdGEgJiYgZXZlbnQubWV0YWRhdGEuY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAgIHNlYXJjaENhdGVnb3JpZXMuc2V0KHF1ZXJ5LCBldmVudC5tZXRhZGF0YS5jYXRlZ29yeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBDb252ZXJ0aXIgYSBhcnJheSB5IG9yZGVuYXIgcG9yIHBvcHVsYXJpZGFkXG4gICAgICAgICAgY29uc3Qgc29ydGVkU2VhcmNoZXMgPSBBcnJheS5mcm9tKHNlYXJjaENvdW50cy5lbnRyaWVzKCkpXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pXG4gICAgICAgICAgICAuc2xpY2UoMCwgbGltaXQpO1xuXG4gICAgICAgICAgdHJlbmRpbmdTZWFyY2hlcyA9IHNvcnRlZFNlYXJjaGVzLm1hcCgoW3F1ZXJ5LCBjb3VudF0sIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAgaWQ6IGB0cmVuZGluZy1yZWFsLSR7aW5kZXggKyAxfWAsXG4gICAgICAgICAgICBxdWVyeTogcXVlcnkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBxdWVyeS5zbGljZSgxKSxcbiAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgY2F0ZWdvcnk6IHNlYXJjaENhdGVnb3JpZXMuZ2V0KHF1ZXJ5KSxcbiAgICAgICAgICAgIGhyZWY6IGAvc2VhcmNoP3E9JHtlbmNvZGVVUklDb21wb25lbnQocXVlcnkpfWAsXG4gICAgICAgICAgICB0eXBlOiAndHJlbmRpbmcnIGFzIGNvbnN0XG4gICAgICAgICAgfSkpO1xuXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGFuYWx5dGljc0Vycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIG9idGVuaWVuZG8gdHJlbmRpbmcgZGUgYW5hbHl0aWNzLCB1c2FuZG8gZmFsbGJhY2s6JywgYW5hbHl0aWNzRXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNpIG5vIGhheSBkYXRvcyByZWFsZXMgbyBoYXkgcG9jb3MsIHVzYXIgZGF0b3MgcG9yIGRlZmVjdG9cbiAgICBpZiAodHJlbmRpbmdTZWFyY2hlcy5sZW5ndGggPCAzKSB7XG4gICAgICBcbiAgICAgIGxldCBmaWx0ZXJlZERlZmF1bHRzID0gZGVmYXVsdFRyZW5kaW5nU2VhcmNoZXM7XG4gICAgICBcbiAgICAgIC8vIEZpbHRyYXIgcG9yIGNhdGVnb3LDrWEgc2kgc2UgZXNwZWNpZmljYVxuICAgICAgaWYgKGNhdGVnb3J5KSB7XG4gICAgICAgIGZpbHRlcmVkRGVmYXVsdHMgPSBkZWZhdWx0VHJlbmRpbmdTZWFyY2hlcy5maWx0ZXIoXG4gICAgICAgICAgc2VhcmNoID0+IHNlYXJjaC5jYXRlZ29yeSA9PT0gY2F0ZWdvcnlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ29tYmluYXIgZGF0b3MgcmVhbGVzIGNvbiBkZWZhdWx0cyBzaSBlcyBuZWNlc2FyaW9cbiAgICAgIGNvbnN0IG5lZWRlZCA9IGxpbWl0IC0gdHJlbmRpbmdTZWFyY2hlcy5sZW5ndGg7XG4gICAgICBjb25zdCBhZGRpdGlvbmFsU2VhcmNoZXMgPSBmaWx0ZXJlZERlZmF1bHRzLnNsaWNlKDAsIG5lZWRlZCk7XG4gICAgICBcbiAgICAgIHRyZW5kaW5nU2VhcmNoZXMgPSBbLi4udHJlbmRpbmdTZWFyY2hlcywgLi4uYWRkaXRpb25hbFNlYXJjaGVzXTtcbiAgICB9XG5cbiAgICAvLyBMaW1pdGFyIGFsIG7Dum1lcm8gc29saWNpdGFkb1xuICAgIHRyZW5kaW5nU2VhcmNoZXMgPSB0cmVuZGluZ1NlYXJjaGVzLnNsaWNlKDAsIGxpbWl0KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlOiBBcGlSZXNwb25zZTxUcmVuZGluZ1NlYXJjaGVzUmVzcG9uc2U+ID0ge1xuICAgICAgZGF0YToge1xuICAgICAgICB0cmVuZGluZzogdHJlbmRpbmdTZWFyY2hlcyxcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ/CflKUgVHJlbmRpbmcgc2VhcmNoZXMgcmVzcG9uc2U6Jywge1xuICAgICAgY291bnQ6IHRyZW5kaW5nU2VhcmNoZXMubGVuZ3RoLFxuICAgICAgaGFzUmVhbERhdGE6IHRyZW5kaW5nU2VhcmNoZXMuc29tZShzID0+IHMuaWQuaW5jbHVkZXMoJ3JlYWwnKSksXG4gICAgICBjYXRlZ29yaWVzOiBbLi4ubmV3IFNldCh0cmVuZGluZ1NlYXJjaGVzLm1hcChzID0+IHMuY2F0ZWdvcnkpLmZpbHRlcihCb29sZWFuKSldXG4gICAgfSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzcG9uc2UpO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGVuIC9hcGkvc2VhcmNoL3RyZW5kaW5nOicsIGVycm9yKTtcblxuICAgIC8vIEVuIGNhc28gZGUgZXJyb3IsIGRldm9sdmVyIGLDunNxdWVkYXMgcG9yIGRlZmVjdG9cbiAgICBjb25zdCBmYWxsYmFja1Jlc3BvbnNlOiBBcGlSZXNwb25zZTxUcmVuZGluZ1NlYXJjaGVzUmVzcG9uc2U+ID0ge1xuICAgICAgZGF0YToge1xuICAgICAgICB0cmVuZGluZzogZGVmYXVsdFRyZW5kaW5nU2VhcmNoZXMuc2xpY2UoMCwgcGFyc2VJbnQocmVxdWVzdC5uZXh0VXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2xpbWl0JykgfHwgJzYnKSksXG4gICAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiB0cnVlXG4gICAgfTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihmYWxsYmFja1Jlc3BvbnNlKTtcbiAgfVxufVxuXG4vLyBNw6l0b2RvIFBPU1QgcGFyYSByZWdpc3RyYXIgdW5hIGLDunNxdWVkYSAocGFyYSBhbmFseXRpY3MpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIC8vIFZhbGlkYXIgcXVlIGVsIHJlcXVlc3QgdGVuZ2EgY29udGVuaWRvXG4gICAgY29uc3QgY29udGVudFR5cGUgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICBpZiAoIWNvbnRlbnRUeXBlIHx8ICFjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdDb250ZW50LVR5cGUgZGViZSBzZXIgYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIE9idGVuZXIgZWwgdGV4dG8gZGVsIGJvZHkgcHJpbWVybyBwYXJhIHZhbGlkYXJcbiAgICBjb25zdCBib2R5VGV4dCA9IGF3YWl0IHJlcXVlc3QudGV4dCgpO1xuICAgIGlmICghYm9keVRleHQgfHwgYm9keVRleHQudHJpbSgpID09PSAnJyB8fCBib2R5VGV4dCA9PT0gJ1wiXCInIHx8IGJvZHlUZXh0ID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0JvZHkgZGUgbGEgcmVxdWVzdCBubyBwdWVkZSBlc3RhciB2YWPDrW8nIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZWFyIEpTT04gZGUgZm9ybWEgc2VndXJhXG4gICAgbGV0IHJlcXVlc3REYXRhO1xuICAgIHRyeSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IEpTT04ucGFyc2UoYm9keVRleHQpO1xuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgSlNPTiBpbiBQT1NUIC9hcGkvc2VhcmNoL3RyZW5kaW5nOicsIHBhcnNlRXJyb3IpO1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnSlNPTiBpbnbDoWxpZG8gZW4gZWwgYm9keSBkZSBsYSByZXF1ZXN0JyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBxdWVyeSwgY2F0ZWdvcnksIHVzZXJJZCwgc2Vzc2lvbklkIH0gPSByZXF1ZXN0RGF0YTtcblxuICAgIGlmICghcXVlcnkgfHwgdHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnUXVlcnkgZGUgYsO6c3F1ZWRhIHJlcXVlcmlkYScgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2VDbGllbnQoKTtcblxuICAgIGlmIChzdXBhYmFzZSkge1xuICAgICAgLy8gUmVnaXN0cmFyIGxhIGLDunNxdWVkYSBlbiBhbmFseXRpY3MgdXNhbmRvIGZ1bmNpw7NuIG9wdGltaXphZGFcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnJwYygnaW5zZXJ0X2FuYWx5dGljc19ldmVudF9vcHRpbWl6ZWQnLCB7XG4gICAgICAgIHBfZXZlbnRfbmFtZTogJ3NlYXJjaCcsXG4gICAgICAgIHBfY2F0ZWdvcnk6ICdzZWFyY2gnLFxuICAgICAgICBwX2FjdGlvbjogJ3NlYXJjaCcsXG4gICAgICAgIHBfbGFiZWw6IHF1ZXJ5LnRvTG93ZXJDYXNlKCkudHJpbSgpLnN1YnN0cmluZygwLCA1MCksXG4gICAgICAgIHBfdXNlcl9pZDogdXNlcklkLFxuICAgICAgICBwX3Nlc3Npb25faWQ6IHNlc3Npb25JZCB8fCAnYW5vbnltb3VzJyxcbiAgICAgICAgcF9wYWdlOiAnL3NlYXJjaCcsXG4gICAgICAgIHBfdXNlcl9hZ2VudDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZWdpc3RyYW5kbyBiw7pzcXVlZGEgZW4gYW5hbHl0aWNzOicsIGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogdHJ1ZSB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciByZWdpc3RyYW5kbyBiw7pzcXVlZGE6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdFcnJvciBpbnRlcm5vIGRlbCBzZXJ2aWRvcicgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJHRVQiLCJQT1NUIiwiZGVmYXVsdFRyZW5kaW5nU2VhcmNoZXMiLCJpZCIsInF1ZXJ5IiwiY291bnQiLCJjYXRlZ29yeSIsImhyZWYiLCJ0eXBlIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsImxpbWl0IiwicGFyc2VJbnQiLCJnZXQiLCJkYXlzIiwiY29uc29sZSIsImxvZyIsInN1cGFiYXNlIiwiZ2V0U3VwYWJhc2VDbGllbnQiLCJ0cmVuZGluZ1NlYXJjaGVzIiwic3RhcnREYXRlIiwiRGF0ZSIsInNldERhdGUiLCJnZXREYXRlIiwiZnJvbSIsInNlbGVjdCIsImVxIiwiZ3RlIiwidG9JU09TdHJpbmciLCJub3QiLCJkYXRhIiwiYW5hbHl0aWNzRGF0YSIsImVycm9yIiwibGVuZ3RoIiwic2VhcmNoQ291bnRzIiwiTWFwIiwic2VhcmNoQ2F0ZWdvcmllcyIsImZvckVhY2giLCJldmVudCIsImxhYmVsIiwidG9Mb3dlckNhc2UiLCJ0cmltIiwic2V0IiwibWV0YWRhdGEiLCJzb3J0ZWRTZWFyY2hlcyIsIkFycmF5IiwiZW50cmllcyIsInNvcnQiLCJhIiwiYiIsInNsaWNlIiwibWFwIiwiaW5kZXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImFuYWx5dGljc0Vycm9yIiwid2FybiIsImZpbHRlcmVkRGVmYXVsdHMiLCJmaWx0ZXIiLCJzZWFyY2giLCJuZWVkZWQiLCJhZGRpdGlvbmFsU2VhcmNoZXMiLCJyZXNwb25zZSIsInRyZW5kaW5nIiwibGFzdFVwZGF0ZWQiLCJzdWNjZXNzIiwiaGFzUmVhbERhdGEiLCJzb21lIiwicyIsImluY2x1ZGVzIiwiY2F0ZWdvcmllcyIsIlNldCIsIkJvb2xlYW4iLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZmFsbGJhY2tSZXNwb25zZSIsIm5leHRVcmwiLCJjb250ZW50VHlwZSIsImhlYWRlcnMiLCJzdGF0dXMiLCJib2R5VGV4dCIsInRleHQiLCJyZXF1ZXN0RGF0YSIsIkpTT04iLCJwYXJzZSIsInBhcnNlRXJyb3IiLCJ1c2VySWQiLCJzZXNzaW9uSWQiLCJycGMiLCJwX2V2ZW50X25hbWUiLCJwX2NhdGVnb3J5IiwicF9hY3Rpb24iLCJwX2xhYmVsIiwic3Vic3RyaW5nIiwicF91c2VyX2lkIiwicF9zZXNzaW9uX2lkIiwicF9wYWdlIiwicF91c2VyX2FnZW50Il0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMsMkRBQTJEO0FBQzNELHNDQUFzQzs7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