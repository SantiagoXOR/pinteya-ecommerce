{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\checkout.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TEST CHECKOUT API\n// ===================================\n\nimport { NextRequest } from 'next/server'\n\n// Datos de prueba globales\nconst mockProducts = [\n  {\n    id: 1,\n    name: 'Test Product 1',\n    price: 1000,\n    discounted_price: 900,\n    stock: 10,\n    images: { previews: ['/test1.jpg'] },\n    category: { name: 'Test Category', slug: 'test-category' },\n  },\n  {\n    id: 2,\n    name: 'Test Product 2',\n    price: 2000,\n    discounted_price: null,\n    stock: 5,\n    images: { previews: ['/test2.jpg'] },\n    category: { name: 'Test Category 2', slug: 'test-category-2' },\n  },\n]\n\nconst mockUser = { id: 'test-user-id', clerk_id: 'test-clerk-id', email: 'test@example.com' }\nconst mockOrder = { id: 'test-order-id', user_id: 'test-user-id', status: 'pending', total: 3300 }\n\n// Usar el mock global de Supabase del jest.setup.js\n\n\n\nimport { POST } from '@/app/api/payments/create-preference/route'\n\nconst mockCheckoutPayload = {\n  items: [\n    { id: '1', name: 'Test Product 1', price: 900, quantity: 2, image: '/test1.jpg' },\n    { id: '2', name: 'Test Product 2', price: 2000, quantity: 1, image: '/test2.jpg' },\n  ],\n  payer: {\n    name: 'Juan',\n    surname: 'Pérez',\n    email: 'juan@test.com',\n    phone: '1234567890',\n    identification: { type: 'DNI', number: '12345678' },\n  },\n  shipping: {\n    address: {\n      street_name: 'Av. Corrientes',\n      street_number: '1234',\n      zip_code: '1000',\n      city_name: 'Buenos Aires',\n      state_name: 'CABA',\n    },\n    cost: 500,\n  },\n  external_reference: 'test-ref-123',\n}\n\n// Variables globales para tracking de mocks\nlet mockMercadoPago: any\nlet mockSupabaseAdmin: any\n\n// Mock específico para checkout que usa supabaseAdmin\nbeforeEach(() => {\n  // Resetear todos los mocks antes de cada test\n  jest.clearAllMocks();\n\n  // Obtener referencias a los mocks\n  mockMercadoPago = jest.mocked(require('@/lib/mercadopago').preference.create)\n  mockSupabaseAdmin = jest.mocked(require('@/lib/supabase').supabaseAdmin)\n\n  // Resetear el mock de MercadoPago para cada test\n  mockMercadoPago.mockResolvedValue({\n    id: 'test-preference-id',\n    init_point: 'https://mercadopago.com/checkout/test',\n  })\n\n  // Resetear el mock de Supabase\n  mockSupabaseAdmin.from.mockClear()\n})\n\n// Mock NextAuth\njest.mock('@/auth', () => ({ auth: jest.fn() }))\n\n// Mock MercadoPago\njest.mock('@/lib/mercadopago', () => ({\n  preference: {\n    create: jest.fn(() => Promise.resolve({\n      id: 'test-preference-id',\n      init_point: 'https://mercadopago.com/checkout/test',\n    })),\n  },\n}))\n\ndescribe('/api/payments/create-preference', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n\n    // Restaurar el mock de Supabase a su estado original\n    mockSupabaseAdmin.from.mockImplementation(() => ({\n      select: jest.fn(() => ({\n        in: jest.fn(() => Promise.resolve({\n          data: [\n            {\n              id: 1,\n              name: 'Test Product 1',\n              price: 1000,\n              discounted_price: null,\n              stock: 10,\n              images: { previews: ['test1.jpg'] },\n              category: { name: 'Test Category', slug: 'test-category' }\n            },\n            {\n              id: 2,\n              name: 'Test Product 2',\n              price: 2000,\n              discounted_price: 1800,\n              stock: 5,\n              images: { previews: ['test2.jpg'] },\n              category: { name: 'Test Category', slug: 'test-category' }\n            }\n          ],\n          error: null\n        })),\n        eq: jest.fn(() => ({\n          single: jest.fn(() => Promise.resolve({ data: null, error: { code: 'PGRST116' } }))\n        }))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(() => Promise.resolve({\n            data: { id: 1, ...mockOrder },\n            error: null\n          }))\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => Promise.resolve({ error: null }))\n      })),\n      delete: jest.fn(() => ({\n        eq: jest.fn(() => Promise.resolve({ error: null }))\n      }))\n    }))\n  })\n\n  it('creates payment preference successfully', async () => {\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data).toMatchObject({\n      init_point: 'https://mercadopago.com/checkout/test',\n      preference_id: 'test-preference-id',\n    })\n  })\n\n  it('validates product stock before creating order', async () => {\n    // Mock insufficient stock\n    const insufficientStockProducts = [\n      { ...mockProducts[0], stock: 1 }, // Only 1 in stock, but requesting 2\n      mockProducts[1],\n    ]\n\n    mockSupabaseAdmin.from.mockImplementation((table: string) => {\n      if (table === 'products') {\n        return {\n          select: jest.fn(() => ({\n            in: jest.fn(() => Promise.resolve({ data: insufficientStockProducts, error: null })),\n          })),\n        }\n      }\n      // Fallback para otras tablas\n      return {\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ data: null, error: null }))\n          })),\n          in: jest.fn(() => Promise.resolve({ data: [], error: null }))\n        })),\n        insert: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ data: null, error: null }))\n          }))\n        })),\n        update: jest.fn(() => ({\n          eq: jest.fn(() => Promise.resolve({ error: null }))\n        })),\n        delete: jest.fn(() => ({\n          eq: jest.fn(() => Promise.resolve({ error: null }))\n        }))\n      }\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(400)\n    expect(data.success).toBe(false)\n    expect(data.error).toContain('Stock insuficiente')\n  })\n\n  it('handles missing products', async () => {\n    // Mock missing product\n    mockSupabaseAdmin.from.mockImplementation((table: string) => {\n      if (table === 'products') {\n        return {\n          select: jest.fn(() => ({\n            in: jest.fn(() => Promise.resolve({ data: [mockProducts[0]], error: null })), // Only first product\n          })),\n        }\n      }\n      // Fallback para otras tablas\n      return {\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ data: null, error: null }))\n          })),\n          in: jest.fn(() => Promise.resolve({ data: [], error: null }))\n        })),\n        insert: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ data: null, error: null }))\n          }))\n        })),\n        update: jest.fn(() => ({\n          eq: jest.fn(() => Promise.resolve({ error: null }))\n        })),\n        delete: jest.fn(() => ({\n          eq: jest.fn(() => Promise.resolve({ error: null }))\n        }))\n      }\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(400)\n    expect(data.success).toBe(false)\n    expect(data.error).toContain('Producto 2 no encontrado')\n  })\n\n  it('calculates total correctly with discounts', async () => {\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    // Verificar que la respuesta sea exitosa\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n\n    // Verificar que se llamó a la tabla orders\n    expect(mockSupabaseAdmin.from).toHaveBeenCalledWith('orders')\n  })\n\n  it('creates order items with correct prices', async () => {\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    // Verificar que la respuesta sea exitosa\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n\n    // Verificar que se llamó a la tabla order_items\n    expect(mockSupabaseAdmin.from).toHaveBeenCalledWith('order_items')\n  })\n\n  it('handles authenticated users', async () => {\n    // Asegurar que auth retorna un usuario válido\n    jest.mocked(require('@clerk/nextjs/server').auth).mockResolvedValue({\n      id: 'test-user-id',\n      name: 'Juan Pérez', email: 'juan@example.com',\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('handles guest users (temporary user)', async () => {\n    // Mock no authenticated user\n    jest.mocked(require('@clerk/nextjs/server').auth).mockResolvedValue(null)\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('includes shipping cost in MercadoPago preference', async () => {\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    // Verificar que la respuesta sea exitosa\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n\n    // Verify MercadoPago preference was created\n    expect(mockMercadoPago).toHaveBeenCalled()\n\n    // Verificar que se llamó con los parámetros correctos\n    const callArgs = mockMercadoPago.mock.calls[0][0]\n    expect(callArgs.body.items).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          id: 'shipping',\n          title: 'Costo de envío',\n          unit_price: 500,\n        }),\n      ])\n    )\n  })\n\n  it('handles database errors gracefully', async () => {\n    // Mock database error para productos\n    mockSupabaseAdmin.from.mockImplementation((table: string) => {\n      if (table === 'products') {\n        return {\n          select: jest.fn(() => ({\n            in: jest.fn(() => Promise.resolve({ data: null, error: { message: 'Database error' } })),\n          })),\n        }\n      }\n      // Para otras tablas, retornar el mock normal\n      return {\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ data: null, error: null }))\n          }))\n        })),\n        insert: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ data: null, error: null }))\n          }))\n        }))\n      }\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    expect(data.error).toBe('Error obteniendo productos') // Corregir expectativa\n  })\n\n  it('handles MercadoPago errors', async () => {\n    // Mock MercadoPago error\n    jest.mocked(require('@/lib/mercadopago').preference.create).mockRejectedValue(\n      new Error('MercadoPago API error')\n    )\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n    expect(data.error).toBe('Error interno del servidor') // El error de MercadoPago se maneja en el catch general\n  })\n\n  it('validates request payload', async () => {\n    const invalidPayload = {\n      items: [], // Empty items\n      payer: mockCheckoutPayload.payer,\n    }\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(invalidPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    // El endpoint debería manejar items vacíos como error de validación\n    expect(response.status).toBe(400) // Retorna 400 por validación fallida\n    expect(data.success).toBe(false)\n  })\n\n  it('rollbacks order creation on order items error', async () => {\n    // Mock order creation success but order items failure\n    mockSupabaseAdmin.from.mockImplementation((table: string) => {\n      if (table === 'products') {\n        return {\n          select: jest.fn(() => ({\n            in: jest.fn(() => Promise.resolve({ data: mockProducts, error: null })),\n          })),\n        }\n      }\n      if (table === 'users') {\n        return {\n          select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n              single: jest.fn(() => Promise.resolve({ data: null, error: null }))\n            }))\n          })),\n          insert: jest.fn(() => ({\n            select: jest.fn(() => ({\n              single: jest.fn(() => Promise.resolve({ data: mockUser, error: null }))\n            }))\n          }))\n        }\n      }\n      if (table === 'orders') {\n        return {\n          insert: jest.fn(() => ({\n            select: jest.fn(() => ({\n              single: jest.fn(() => Promise.resolve({ data: mockOrder, error: null })),\n            })),\n          })),\n          delete: jest.fn(() => ({\n            eq: jest.fn(() => Promise.resolve({ error: null })),\n          })),\n        }\n      }\n      if (table === 'order_items') {\n        return {\n          insert: jest.fn(() => Promise.resolve({ error: { message: 'Order items error' } })),\n        }\n      }\n      return {}\n    })\n\n    const request = new NextRequest('http://localhost:3001/api/payments/create-preference', {\n      method: 'POST',\n      body: JSON.stringify(mockCheckoutPayload),\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(500)\n    expect(data.success).toBe(false)\n\n    // Verify that the function attempted to access multiple tables\n    expect(mockSupabaseAdmin.from).toHaveBeenCalledWith('products')\n    expect(mockSupabaseAdmin.from).toHaveBeenCalledWith('users')\n    expect(mockSupabaseAdmin.from).toHaveBeenCalledWith('orders')\n    expect(mockSupabaseAdmin.from).toHaveBeenCalledWith('order_items')\n  })\n})\n"],"names":["jest","mock","auth","fn","preference","create","Promise","resolve","id","init_point","mockProducts","name","price","discounted_price","stock","images","previews","category","slug","mockUser","clerk_id","email","mockOrder","user_id","status","total","mockCheckoutPayload","items","quantity","image","payer","surname","phone","identification","type","number","shipping","address","street_name","street_number","zip_code","city_name","state_name","cost","external_reference","mockMercadoPago","mockSupabaseAdmin","beforeEach","clearAllMocks","mocked","require","supabaseAdmin","mockResolvedValue","from","mockClear","describe","mockImplementation","select","in","data","error","eq","single","code","insert","update","delete","it","request","NextRequest","method","body","JSON","stringify","response","POST","json","expect","toBe","success","toMatchObject","preference_id","insufficientStockProducts","table","toContain","toHaveBeenCalledWith","toHaveBeenCalled","callArgs","calls","toEqual","arrayContaining","objectContaining","title","unit_price","message","mockRejectedValue","Error","invalidPayload"],"mappings":"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"}