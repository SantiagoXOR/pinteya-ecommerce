{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Dashboard\\EnterpriseMonitoringDashboard.tsx"],"sourcesContent":["/**\n * Dashboard Enterprise de Monitoreo Completo\n * Integra m√©tricas de todos los sistemas enterprise implementados\n */\n\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Activity,\n  Shield,\n  Zap,\n  Database,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Users,\n  Server,\n  TrendingUp,\n  TrendingDown,\n  RefreshCw,\n  Download,\n  Settings,\n  Eye,\n  Lock,\n  Cpu,\n  HardDrive,\n  Network,\n  BarChart3\n} from 'lucide-react';\n\n// =====================================================\n// TIPOS E INTERFACES\n// =====================================================\n\ninterface SystemHealth {\n  status: 'healthy' | 'warning' | 'critical' | 'unknown';\n  uptime: number;\n  lastCheck: string;\n  responseTime: number;\n  errorRate: number;\n}\n\ninterface SecurityMetrics {\n  rateLimitingStats: {\n    totalRequests: number;\n    blockedRequests: number;\n    allowedRequests: number;\n    topBlockedIPs: Array<{ ip: string; count: number }>;\n    averageResponseTime: number;\n  };\n  auditingStats: {\n    totalEvents: number;\n    criticalEvents: number;\n    anomaliesDetected: number;\n    lastIncident: string | null;\n  };\n  validationStats: {\n    totalValidations: number;\n    failedValidations: number;\n    attacksBlocked: number;\n    successRate: number;\n  };\n}\n\ninterface CacheMetrics {\n  hitRate: number;\n  totalHits: number;\n  totalMisses: number;\n  averageResponseTime: number;\n  memoryUsage: number;\n  evictions: number;\n  topKeys: Array<{ key: string; hits: number }>;\n}\n\ninterface PerformanceMetrics {\n  apiResponseTimes: {\n    p50: number;\n    p95: number;\n    p99: number;\n  };\n  throughput: number;\n  errorRates: {\n    '4xx': number;\n    '5xx': number;\n  };\n  resourceUsage: {\n    cpu: number;\n    memory: number;\n    disk: number;\n  };\n}\n\ninterface EnterpriseMetrics {\n  systemHealth: Record<string, SystemHealth>;\n  security: SecurityMetrics;\n  cache: CacheMetrics;\n  performance: PerformanceMetrics;\n  lastUpdated: string;\n}\n\n// =====================================================\n// COMPONENTES DE M√âTRICAS\n// =====================================================\n\nconst MetricCard: React.FC<{\n  title: string;\n  value: string | number;\n  change?: number;\n  icon: React.ReactNode;\n  status?: 'success' | 'warning' | 'error' | 'info';\n  subtitle?: string;\n}> = ({ title, value, change, icon, status = 'info', subtitle }) => {\n  const getStatusColor = () => {\n    switch (status) {\n      case 'success': return 'text-green-600 bg-green-50';\n      case 'warning': return 'text-yellow-600 bg-yellow-50';\n      case 'error': return 'text-red-600 bg-red-50';\n      default: return 'text-blue-600 bg-blue-50';\n    }\n  };\n\n  const getChangeColor = () => {\n    if (change === undefined) return '';\n    return change >= 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-lg ${getStatusColor()}`}>\n              {icon}\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n              {subtitle && (\n                <p className=\"text-xs text-gray-500\">{subtitle}</p>\n              )}\n            </div>\n          </div>\n          {change !== undefined && (\n            <div className={`flex items-center ${getChangeColor()}`}>\n              {change >= 0 ? <TrendingUp className=\"w-4 h-4\" /> : <TrendingDown className=\"w-4 h-4\" />}\n              <span className=\"text-sm font-medium ml-1\">\n                {Math.abs(change).toFixed(1)}%\n              </span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst SystemHealthIndicator: React.FC<{\n  name: string;\n  health: SystemHealth;\n}> = ({ name, health }) => {\n  const getStatusBadge = () => {\n    switch (health.status) {\n      case 'healthy':\n        return <Badge className=\"bg-green-100 text-green-800\">Saludable</Badge>;\n      case 'warning':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Advertencia</Badge>;\n      case 'critical':\n        return <Badge className=\"bg-red-100 text-red-800\">Cr√≠tico</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Desconocido</Badge>;\n    }\n  };\n\n  const formatUptime = (seconds: number) => {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${days}d ${hours}h ${minutes}m`;\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"font-semibold text-gray-900\">{name}</h3>\n          {getStatusBadge()}\n        </div>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Uptime:</span>\n            <span className=\"font-medium\">{formatUptime(health.uptime)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Tiempo respuesta:</span>\n            <span className=\"font-medium\">{health.responseTime}ms</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Tasa de error:</span>\n            <span className=\"font-medium\">{(health.errorRate * 100).toFixed(2)}%</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">√öltima verificaci√≥n:</span>\n            <span className=\"font-medium\">{new Date(health.lastCheck).toLocaleTimeString()}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// =====================================================\n// COMPONENTE PRINCIPAL\n// =====================================================\n\nexport const EnterpriseMonitoringDashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState<EnterpriseMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [autoRefresh, setAutoRefresh] = useState(false); // üö´ TEMPORALMENTE DESHABILITADO PARA EVITAR RECURSI√ìN\n  const [refreshInterval, setRefreshInterval] = useState(30); // segundos\n\n  // Funci√≥n para obtener m√©tricas\n  const fetchMetrics = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      // Simular llamada a API de m√©tricas enterprise\n      // En producci√≥n, esto ser√≠a una llamada real a /api/admin/monitoring/metrics\n      const response = await fetch('/api/admin/monitoring/enterprise-metrics');\n      \n      if (!response.ok) {\n        throw new Error('Error fetching metrics');\n      }\n      \n      const data = await response.json();\n      setMetrics(data);\n    } catch (error) {\n      console.error('Error fetching enterprise metrics:', error);\n      \n      // Datos de ejemplo para desarrollo\n      setMetrics({\n        systemHealth: {\n          'Rate Limiting': {\n            status: 'healthy',\n            uptime: 2592000, // 30 d√≠as\n            lastCheck: new Date().toISOString(),\n            responseTime: 45,\n            errorRate: 0.001\n          },\n          'Auditor√≠a': {\n            status: 'healthy',\n            uptime: 2592000,\n            lastCheck: new Date().toISOString(),\n            responseTime: 120,\n            errorRate: 0.002\n          },\n          'Validaci√≥n': {\n            status: 'warning',\n            uptime: 2580000,\n            lastCheck: new Date().toISOString(),\n            responseTime: 85,\n            errorRate: 0.015\n          },\n          'Cache': {\n            status: 'healthy',\n            uptime: 2592000,\n            lastCheck: new Date().toISOString(),\n            responseTime: 15,\n            errorRate: 0.0005\n          }\n        },\n        security: {\n          rateLimitingStats: {\n            totalRequests: 1250000,\n            blockedRequests: 15000,\n            allowedRequests: 1235000,\n            topBlockedIPs: [\n              { ip: '192.168.1.100', count: 2500 },\n              { ip: '10.0.0.50', count: 1800 },\n              { ip: '172.16.0.100', count: 1200 }\n            ],\n            averageResponseTime: 45\n          },\n          auditingStats: {\n            totalEvents: 850000,\n            criticalEvents: 125,\n            anomaliesDetected: 45,\n            lastIncident: '2025-01-31T10:30:00Z'\n          },\n          validationStats: {\n            totalValidations: 2100000,\n            failedValidations: 31500,\n            attacksBlocked: 8500,\n            successRate: 0.985\n          }\n        },\n        cache: {\n          hitRate: 0.892,\n          totalHits: 1850000,\n          totalMisses: 225000,\n          averageResponseTime: 15,\n          memoryUsage: 245 * 1024 * 1024, // 245MB\n          evictions: 1250,\n          topKeys: [\n            { key: 'products:featured', hits: 125000 },\n            { key: 'categories:all', hits: 98000 },\n            { key: 'auth:sessions', hits: 87000 }\n          ]\n        },\n        performance: {\n          apiResponseTimes: {\n            p50: 120,\n            p95: 450,\n            p99: 850\n          },\n          throughput: 2500, // requests per minute\n          errorRates: {\n            '4xx': 0.025,\n            '5xx': 0.008\n          },\n          resourceUsage: {\n            cpu: 35,\n            memory: 68,\n            disk: 42\n          }\n        },\n        lastUpdated: new Date().toISOString()\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Efecto para cargar m√©tricas iniciales\n  useEffect(() => {\n    fetchMetrics();\n  }, [fetchMetrics]);\n\n  // Efecto para auto-refresh\n  // üö´ TEMPORALMENTE DESHABILITADO PARA EVITAR RECURSI√ìN EN APIS DE AUTH\n  useEffect(() => {\n    console.log('[ENTERPRISE_DASHBOARD] üö´ Auto-refresh temporalmente deshabilitado para evitar recursi√≥n');\n    if (!autoRefresh) return;\n\n    const interval = setInterval(fetchMetrics, refreshInterval * 1000);\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, fetchMetrics]);\n\n  // Funci√≥n para exportar m√©tricas\n  const exportMetrics = () => {\n    if (!metrics) return;\n\n    const dataStr = JSON.stringify(metrics, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `enterprise-metrics-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    \n    URL.revokeObjectURL(url);\n  };\n\n  if (loading && !metrics) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"flex items-center space-x-2\">\n          <RefreshCw className=\"w-6 h-6 animate-spin text-blue-600\" />\n          <span className=\"text-lg font-medium text-gray-600\">Cargando m√©tricas enterprise...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error cargando m√©tricas</h3>\n          <p className=\"text-gray-600 mb-4\">No se pudieron cargar las m√©tricas del sistema</p>\n          <Button onClick={fetchMetrics} variant=\"outline\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Reintentar\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard Enterprise</h1>\n          <p className=\"text-gray-600\">\n            Monitoreo completo de sistemas enterprise\n            <span className=\"ml-2 text-sm\">\n              ‚Ä¢ √öltima actualizaci√≥n: {new Date(metrics.lastUpdated).toLocaleTimeString()}\n            </span>\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Auto-refresh:</label>\n            <Button\n              variant={autoRefresh ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setAutoRefresh(!autoRefresh)}\n            >\n              {autoRefresh ? <CheckCircle className=\"w-4 h-4\" /> : <Clock className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n          <Button onClick={exportMetrics} variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Exportar\n          </Button>\n          <Button onClick={fetchMetrics} variant=\"outline\" size=\"sm\" disabled={loading}>\n            <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n            Actualizar\n          </Button>\n        </div>\n      </div>\n\n      {/* M√©tricas principales */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <MetricCard\n          title=\"Requests Totales\"\n          value={metrics.security.rateLimitingStats.totalRequests.toLocaleString()}\n          icon={<Activity className=\"w-5 h-5\" />}\n          status=\"info\"\n          subtitle=\"√öltimas 24 horas\"\n        />\n        \n        <MetricCard\n          title=\"Tasa de Cache Hit\"\n          value={`${(metrics.cache.hitRate * 100).toFixed(1)}%`}\n          change={5.2}\n          icon={<Database className=\"w-5 h-5\" />}\n          status=\"success\"\n          subtitle=\"Promedio semanal\"\n        />\n        \n        <MetricCard\n          title=\"Ataques Bloqueados\"\n          value={metrics.security.validationStats.attacksBlocked.toLocaleString()}\n          icon={<Shield className=\"w-5 h-5\" />}\n          status=\"warning\"\n          subtitle=\"Sistema de validaci√≥n\"\n        />\n        \n        <MetricCard\n          title=\"Tiempo Respuesta P95\"\n          value={`${metrics.performance.apiResponseTimes.p95}ms`}\n          change={-2.8}\n          icon={<Zap className=\"w-5 h-5\" />}\n          status=\"success\"\n          subtitle=\"APIs enterprise\"\n        />\n      </div>\n\n      {/* Tabs de m√©tricas detalladas */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Resumen</TabsTrigger>\n          <TabsTrigger value=\"security\">Seguridad</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"cache\">Cache</TabsTrigger>\n          <TabsTrigger value=\"systems\">Sistemas</TabsTrigger>\n        </TabsList>\n\n        {/* Tab Resumen */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Estado de sistemas */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Server className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Estado de Sistemas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {Object.entries(metrics.systemHealth).map(([name, health]) => (\n                    <SystemHealthIndicator key={name} name={name} health={health} />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* M√©tricas de recursos */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Cpu className=\"w-5 h-5 mr-2 text-green-600\" />\n                  Uso de Recursos\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>CPU</span>\n                      <span>{metrics.performance.resourceUsage.cpu}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-600 h-2 rounded-full\" \n                        style={{ width: `${metrics.performance.resourceUsage.cpu}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Memoria</span>\n                      <span>{metrics.performance.resourceUsage.memory}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-green-600 h-2 rounded-full\" \n                        style={{ width: `${metrics.performance.resourceUsage.memory}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Disco</span>\n                      <span>{metrics.performance.resourceUsage.disk}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-yellow-600 h-2 rounded-full\" \n                        style={{ width: `${metrics.performance.resourceUsage.disk}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tab Seguridad */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Rate Limiting */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2 text-red-600\" />\n                  Rate Limiting\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-gray-600\">Total</p>\n                    <p className=\"font-semibold\">{metrics.security.rateLimitingStats.totalRequests.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Bloqueados</p>\n                    <p className=\"font-semibold text-red-600\">{metrics.security.rateLimitingStats.blockedRequests.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Permitidos</p>\n                    <p className=\"font-semibold text-green-600\">{metrics.security.rateLimitingStats.allowedRequests.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Tiempo Resp.</p>\n                    <p className=\"font-semibold\">{metrics.security.rateLimitingStats.averageResponseTime}ms</p>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">IPs m√°s bloqueadas</h4>\n                  <div className=\"space-y-1\">\n                    {metrics.security.rateLimitingStats.topBlockedIPs.map((item, index) => (\n                      <div key={index} className=\"flex justify-between text-xs\">\n                        <span className=\"font-mono\">{item.ip}</span>\n                        <span className=\"font-semibold\">{item.count}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Auditor√≠a */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Eye className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Auditor√≠a\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-gray-600\">Eventos Totales</p>\n                    <p className=\"font-semibold\">{metrics.security.auditingStats.totalEvents.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Cr√≠ticos</p>\n                    <p className=\"font-semibold text-red-600\">{metrics.security.auditingStats.criticalEvents}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Anomal√≠as</p>\n                    <p className=\"font-semibold text-yellow-600\">{metrics.security.auditingStats.anomaliesDetected}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">√öltimo Incidente</p>\n                    <p className=\"font-semibold text-xs\">\n                      {metrics.security.auditingStats.lastIncident ? \n                        new Date(metrics.security.auditingStats.lastIncident).toLocaleDateString() : \n                        'Ninguno'\n                      }\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Validaci√≥n */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Lock className=\"w-5 h-5 mr-2 text-green-600\" />\n                  Validaci√≥n\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-gray-600\">Validaciones</p>\n                    <p className=\"font-semibold\">{metrics.security.validationStats.totalValidations.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Fallidas</p>\n                    <p className=\"font-semibold text-red-600\">{metrics.security.validationStats.failedValidations.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Ataques</p>\n                    <p className=\"font-semibold text-red-600\">{metrics.security.validationStats.attacksBlocked.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Tasa √âxito</p>\n                    <p className=\"font-semibold text-green-600\">{(metrics.security.validationStats.successRate * 100).toFixed(1)}%</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tab Performance */}\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Tiempos de respuesta */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"w-5 h-5 mr-2 text-purple-600\" />\n                  Tiempos de Respuesta\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">{metrics.performance.apiResponseTimes.p50}ms</p>\n                    <p className=\"text-sm text-gray-600\">P50</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-yellow-600\">{metrics.performance.apiResponseTimes.p95}ms</p>\n                    <p className=\"text-sm text-gray-600\">P95</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-red-600\">{metrics.performance.apiResponseTimes.p99}ms</p>\n                    <p className=\"text-sm text-gray-600\">P99</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Throughput y errores */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Network className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Throughput y Errores\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-blue-600\">{metrics.performance.throughput}</p>\n                  <p className=\"text-sm text-gray-600\">Requests por minuto</p>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-gray-600\">Errores 4xx</p>\n                    <p className=\"font-semibold text-yellow-600\">{(metrics.performance.errorRates['4xx'] * 100).toFixed(2)}%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Errores 5xx</p>\n                    <p className=\"font-semibold text-red-600\">{(metrics.performance.errorRates['5xx'] * 100).toFixed(2)}%</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tab Cache */}\n        <TabsContent value=\"cache\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Estad√≠sticas de cache */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Database className=\"w-5 h-5 mr-2 text-green-600\" />\n                  Estad√≠sticas de Cache\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-gray-600\">Hit Rate</p>\n                    <p className=\"text-2xl font-bold text-green-600\">{(metrics.cache.hitRate * 100).toFixed(1)}%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Tiempo Resp.</p>\n                    <p className=\"text-2xl font-bold text-blue-600\">{metrics.cache.averageResponseTime}ms</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Total Hits</p>\n                    <p className=\"font-semibold\">{metrics.cache.totalHits.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Total Misses</p>\n                    <p className=\"font-semibold\">{metrics.cache.totalMisses.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Uso Memoria</p>\n                    <p className=\"font-semibold\">{(metrics.cache.memoryUsage / 1024 / 1024).toFixed(0)}MB</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-600\">Evictions</p>\n                    <p className=\"font-semibold\">{metrics.cache.evictions}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Top keys */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <HardDrive className=\"w-5 h-5 mr-2 text-purple-600\" />\n                  Claves M√°s Accedidas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {metrics.cache.topKeys.map((item, index) => (\n                    <div key={index} className=\"flex justify-between items-center\">\n                      <span className=\"font-mono text-sm text-gray-700\">{item.key}</span>\n                      <Badge variant=\"outline\">{item.hits.toLocaleString()}</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tab Sistemas */}\n        <TabsContent value=\"systems\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {Object.entries(metrics.systemHealth).map(([name, health]) => (\n              <SystemHealthIndicator key={name} name={name} health={health} />\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default EnterpriseMonitoringDashboard;\n"],"names":["EnterpriseMonitoringDashboard","MetricCard","title","value","change","icon","status","subtitle","getStatusColor","getChangeColor","undefined","Card","CardContent","className","div","p","TrendingUp","TrendingDown","span","Math","abs","toFixed","SystemHealthIndicator","name","health","getStatusBadge","Badge","formatUptime","seconds","days","floor","hours","minutes","h3","uptime","responseTime","errorRate","Date","lastCheck","toLocaleTimeString","metrics","setMetrics","useState","loading","setLoading","autoRefresh","setAutoRefresh","refreshInterval","setRefreshInterval","fetchMetrics","useCallback","response","fetch","ok","Error","data","json","error","console","systemHealth","toISOString","security","rateLimitingStats","totalRequests","blockedRequests","allowedRequests","topBlockedIPs","ip","count","averageResponseTime","auditingStats","totalEvents","criticalEvents","anomaliesDetected","lastIncident","validationStats","totalValidations","failedValidations","attacksBlocked","successRate","cache","hitRate","totalHits","totalMisses","memoryUsage","evictions","topKeys","key","hits","performance","apiResponseTimes","p50","p95","p99","throughput","errorRates","resourceUsage","cpu","memory","disk","lastUpdated","useEffect","log","interval","setInterval","clearInterval","exportMetrics","dataStr","JSON","stringify","dataBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","split","click","revokeObjectURL","RefreshCw","AlertTriangle","Button","onClick","variant","h1","label","size","CheckCircle","Clock","Download","disabled","toLocaleString","Activity","Database","Shield","Zap","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","CardHeader","CardTitle","Server","Object","entries","map","Cpu","style","width","h4","item","index","Eye","toLocaleDateString","Lock","BarChart3","Network","HardDrive"],"mappings":"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"}