893d3ff93082cf54a24c8668a433dcf5
// ===================================
// PINTEYA E-COMMERCE - FUNCIONES DE API PARA PRODUCTOS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateDiscountPercentage: function() {
        return calculateDiscountPercentage;
    },
    convertLegacyProduct: function() {
        return convertLegacyProduct;
    },
    formatPrice: function() {
        return formatPrice;
    },
    getDiscountedProducts: function() {
        return getDiscountedProducts;
    },
    getProductById: function() {
        return getProductById;
    },
    getProductMainImage: function() {
        return getProductMainImage;
    },
    getProducts: function() {
        return getProducts;
    },
    getProductsByBrand: function() {
        return getProductsByBrand;
    },
    getProductsByCategory: function() {
        return getProductsByCategory;
    },
    getRelatedProducts: function() {
        return getRelatedProducts;
    },
    isProductInStock: function() {
        return isProductInStock;
    },
    searchProducts: function() {
        return searchProducts;
    }
});
const _jsonutils = require("../json-utils");
async function getProducts(filters) {
    try {
        const searchParams = new URLSearchParams();
        if (filters) {
            Object.entries(filters).forEach(([key, value])=>{
                if (value !== undefined && value !== null) {
                    searchParams.append(key, value.toString());
                }
            });
        }
        const url = `/api/products?${searchParams.toString()}`;
        const DEBUG_MODE = process.env.NODE_ENV === 'development';
        if (DEBUG_MODE) {
            console.log('🔍 Fetching products from:', url);
        }
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (DEBUG_MODE) {
            console.log('📡 Response status:', response.status, response.statusText);
        }
        // Usar parsing seguro de JSON
        const result = await (0, _jsonutils.safeApiResponseJson)(response);
        if (DEBUG_MODE) {
            console.log('🔍 Parse result:', {
                success: result.success,
                error: result.error
            });
        }
        if (!result.success) {
            console.error('❌ JSON parsing failed:', result.error);
            // Return a fallback response instead of throwing
            return {
                data: [],
                pagination: {
                    page: 1,
                    limit: 12,
                    total: 0,
                    totalPages: 0
                },
                success: false,
                message: result.error || 'Error loading products'
            };
        }
        if (DEBUG_MODE) {
            console.log('✅ Products loaded successfully:', result.data?.data?.length || 0, 'items');
        }
        return result.data;
    } catch (error) {
        console.error('❌ Error obteniendo productos:', error);
        // Return a fallback response instead of throwing
        return {
            data: [],
            pagination: {
                page: 1,
                limit: 12,
                total: 0,
                totalPages: 0
            },
            success: false,
            message: error instanceof Error ? error.message : 'Error inesperado'
        };
    }
}
async function getProductById(id) {
    try {
        const response = await fetch(`/api/products/${id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        // Usar parsing seguro de JSON
        const result = await (0, _jsonutils.safeApiResponseJson)(response);
        if (!result.success) {
            throw new Error(result.error || 'Error parsing API response');
        }
        return result.data;
    } catch (error) {
        console.error(`Error obteniendo producto ${id}:`, error);
        throw error;
    }
}
async function searchProducts(searchTerm, limit = 12) {
    return getProducts({
        search: searchTerm,
        limit,
        page: 1
    });
}
async function getProductsByCategory(categorySlug, page = 1, limit = 12) {
    return getProducts({
        category: categorySlug,
        page,
        limit
    });
}
async function getDiscountedProducts(page = 1, limit = 12) {
    // Nota: Esto requeriría un filtro adicional en la API
    // Por ahora, obtenemos todos los productos y filtramos en el frontend
    const response = await getProducts({
        page,
        limit
    });
    // Filtrar productos con descuento
    const discountedProducts = response.data.filter((product)=>product.discounted_price && product.discounted_price < product.price);
    return {
        ...response,
        data: discountedProducts
    };
}
async function getProductsByBrand(brandName, page = 1, limit = 12) {
    return getProducts({
        brand: brandName,
        page,
        limit
    });
}
async function getRelatedProducts(productId, categoryId, limit = 4) {
    try {
        // Obtener productos de la misma categoría
        const response = await fetch(`/api/products?category_id=${categoryId}&limit=${limit + 1}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        // Usar parsing seguro de JSON
        const result = await (0, _jsonutils.safeApiResponseJson)(response);
        if (!result.success) {
            throw new Error(result.error || 'Error parsing API response');
        }
        const data = result.data;
        // Filtrar el producto actual y limitar resultados
        return data.data.filter((product)=>product.id !== productId).slice(0, limit);
    } catch (error) {
        console.error('Error obteniendo productos relacionados:', error);
        return [];
    }
}
function convertLegacyProduct(oldProduct) {
    return {
        id: oldProduct.id,
        name: oldProduct.title,
        brand: oldProduct.brand || null,
        slug: oldProduct.title.toLowerCase().replace(/[^a-z0-9]+/g, '-'),
        description: `Producto ${oldProduct.title}`,
        price: oldProduct.price,
        discounted_price: oldProduct.discountedPrice,
        stock: 50,
        category_id: 1,
        images: oldProduct.imgs,
        created_at: new Date().toISOString(),
        updated_at: null
    };
}
function calculateDiscountPercentage(originalPrice, discountedPrice) {
    if (!discountedPrice || discountedPrice >= originalPrice) {
        return 0;
    }
    return Math.round((originalPrice - discountedPrice) / originalPrice * 100);
}
function formatPrice(price, currency = 'ARS') {
    return new Intl.NumberFormat('es-AR', {
        style: 'currency',
        currency,
        minimumFractionDigits: 0,
        maximumFractionDigits: 2
    }).format(price);
}
function isProductInStock(product) {
    return product.stock > 0;
}
function getProductMainImage(product) {
    if (product.images?.previews?.[0]) {
        return product.images.previews[0];
    }
    if (product.images?.thumbnails?.[0]) {
        return product.images.thumbnails[0];
    }
    return '/images/products/placeholder.jpg';
}

//# sourceMappingURL=data:application/json;base64,