f61fe5eb9739e1651bd1e0dbf578cac6
/**
 * Tests para el componente AuthSection
 * Verifica la funcionalidad de autenticación con Clerk
 */ "use strict";
// Mock de Clerk
jest.mock('@clerk/nextjs', ()=>({
        SignedIn: ({ children })=>{
            const { isSignedIn } = (0, _nextjs.useUser)();
            return isSignedIn ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-in-content",
                children: children
            }) : null;
        },
        SignedOut: ({ children })=>{
            const { isSignedIn } = (0, _nextjs.useUser)();
            return !isSignedIn ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-out-content",
                children: children
            }) : null;
        },
        UserButton: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-button",
                children: "UserButton"
            }),
        useUser: jest.fn()
    }));
// Mock de Next.js Link
jest.mock('next/link', ()=>{
    return ({ children, href, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
            href: href,
            ...props,
            children: children
        });
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _nextjs = require("@clerk/nextjs");
const _AuthSection = /*#__PURE__*/ _interop_require_default(require("../AuthSection"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseUser = _nextjs.useUser;
describe('AuthSection Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Versión Desktop - Usuario no autenticado', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: true
            });
        });
        it('debe mostrar botones de iniciar sesión y registrarse', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            expect(_react1.screen.getByText('Iniciar Sesión')).toBeInTheDocument();
            expect(_react1.screen.getByText('Registrarse')).toBeInTheDocument();
        });
        it('debe tener los enlaces correctos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            const signinLink = _react1.screen.getByText('Iniciar Sesión').closest('a');
            const signupLink = _react1.screen.getByText('Registrarse').closest('a');
            expect(signinLink).toHaveAttribute('href', '/signin');
            expect(signupLink).toHaveAttribute('href', '/signup');
        });
        it('debe mostrar iconos en los botones', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            // Verificar que los iconos están presentes (por clases CSS)
            const signinButton = _react1.screen.getByText('Iniciar Sesión').closest('a');
            const signupButton = _react1.screen.getByText('Registrarse').closest('a');
            expect(signinButton).toBeInTheDocument();
            expect(signupButton).toBeInTheDocument();
        });
    });
    describe('Versión Desktop - Usuario autenticado', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: true,
                user: {
                    id: 'user_123',
                    firstName: 'Juan',
                    lastName: 'Pérez',
                    emailAddresses: [
                        {
                            emailAddress: 'juan@example.com'
                        }
                    ]
                },
                isLoaded: true
            });
        });
        it('debe mostrar el UserButton cuando está autenticado', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            expect(_react1.screen.getByTestId('user-button')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Iniciar Sesión')).not.toBeInTheDocument();
            expect(_react1.screen.queryByText('Registrarse')).not.toBeInTheDocument();
        });
    });
    describe('Versión Mobile - Usuario no autenticado', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: true
            });
        });
        it('debe mostrar solo botón de iniciar sesión en mobile', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            expect(_react1.screen.getByText('Iniciar Sesión')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Registrarse')).not.toBeInTheDocument();
        });
        it('debe tener estilos mobile específicos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            const signinButton = _react1.screen.getByText('Iniciar Sesión').closest('a');
            expect(signinButton).toHaveClass('text-xs', 'px-3', 'py-1');
        });
        it('debe tener el enlace correcto en mobile', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            const signinLink = _react1.screen.getByText('Iniciar Sesión').closest('a');
            expect(signinLink).toHaveAttribute('href', '/signin');
        });
    });
    describe('Versión Mobile - Usuario autenticado', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: true,
                user: {
                    id: 'user_123',
                    firstName: 'Juan',
                    lastName: 'Pérez',
                    emailAddresses: [
                        {
                            emailAddress: 'juan@example.com'
                        }
                    ]
                },
                isLoaded: true
            });
        });
        it('debe mostrar el UserButton en mobile cuando está autenticado', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            expect(_react1.screen.getByTestId('user-button')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Iniciar Sesión')).not.toBeInTheDocument();
        });
    });
    describe('Estados de carga', ()=>{
        it('debe manejar estado de carga de Clerk', ()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: false
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            // Cuando isLoaded es false, Clerk maneja el estado de carga internamente
            // El componente debería renderizar normalmente
            expect(_react1.screen.getByTestId('signed-out-content')).toBeInTheDocument();
        });
    });
    describe('Variantes del componente', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: true
            });
        });
        it('debe usar desktop como variante por defecto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            expect(_react1.screen.getByText('Iniciar Sesión')).toBeInTheDocument();
            expect(_react1.screen.getByText('Registrarse')).toBeInTheDocument();
        });
        it('debe aplicar estilos diferentes según la variante', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            // En desktop debe mostrar ambos botones
            expect(_react1.screen.getByText('Iniciar Sesión')).toBeInTheDocument();
            expect(_react1.screen.getByText('Registrarse')).toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            // En mobile solo debe mostrar iniciar sesión
            expect(_react1.screen.getByText('Iniciar Sesión')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Registrarse')).not.toBeInTheDocument();
            const mobileSignin = _react1.screen.getByText('Iniciar Sesión').closest('a');
            expect(mobileSignin).toHaveClass('text-xs');
        });
    });
    describe('Accesibilidad', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: true
            });
        });
        it('debe tener elementos accesibles', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            const signinButton = _react1.screen.getByText('Iniciar Sesión');
            const signupButton = _react1.screen.getByText('Registrarse');
            expect(signinButton).toBeInTheDocument();
            expect(signupButton).toBeInTheDocument();
            // Los botones deben ser navegables por teclado
            expect(signinButton.closest('a')).toHaveAttribute('href');
            expect(signupButton.closest('a')).toHaveAttribute('href');
        });
    });
    describe('Integración con Clerk', ()=>{
        it('debe usar los componentes de Clerk correctamente', ()=>{
            mockUseUser.mockReturnValue({
                isSignedIn: true,
                user: {
                    id: 'user_123'
                },
                isLoaded: true
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            expect(_react1.screen.getByTestId('signed-in-content')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('user-button')).toBeInTheDocument();
        });
        it('debe manejar cambios de estado de autenticación', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            // Inicialmente no autenticado
            mockUseUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: true
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            expect(_react1.screen.getByTestId('signed-out-content')).toBeInTheDocument();
            // Cambiar a autenticado
            mockUseUser.mockReturnValue({
                isSignedIn: true,
                user: {
                    id: 'user_123'
                },
                isLoaded: true
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            expect(_react1.screen.getByTestId('signed-in-content')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,