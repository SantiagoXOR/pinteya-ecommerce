ab0995b2df218a19008a67c39f242018
// ===================================
// PINTEYA E-COMMERCE - API DE PERFIL DE USUARIO
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get PUT () {
        return PUT;
    }
});
const _server = require("next/server");
const _supabase = require("../../../../lib/supabase");
const _auth = require("../../../../auth");
async function GET(request) {
    try {
        // Verificar que el cliente administrativo esté disponible
        if (!_supabase.supabaseAdmin) {
            console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile');
            return _server.NextResponse.json({
                error: 'Servicio de base de datos no disponible'
            }, {
                status: 503
            });
        }
        // Autenticación con Clerk
        const session = await (0, _auth.auth)();
        if (!session?.user) {
            const errorResponse = {
                data: null,
                success: false,
                error: 'Usuario no autenticado'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 401
            });
        }
        // Buscar usuario en Supabase
        const { data: user, error } = await _supabase.supabaseAdmin.from('users').select('*').eq('clerk_id', userId).single();
        if (error && error.code !== 'PGRST116') {
            console.error('Error al obtener usuario:', error);
            return _server.NextResponse.json({
                error: 'Error al obtener perfil de usuario'
            }, {
                status: 500
            });
        }
        // Si no existe el usuario, crear uno demo
        if (!session?.user) {
            const { data: newUser, error: createError } = await _supabase.supabaseAdmin.from('users').insert([
                {
                    clerk_id: userId,
                    email: 'usuario@demo.com',
                    name: 'Usuario Demo'
                }
            ]).select().single();
            if (createError) {
                console.error('Error al crear usuario demo:', createError);
                return _server.NextResponse.json({
                    error: 'Error al crear perfil de usuario'
                }, {
                    status: 500
                });
            }
            return _server.NextResponse.json({
                success: true,
                user: newUser
            });
        }
        return _server.NextResponse.json({
            success: true,
            user
        });
    } catch (error) {
        console.error('Error en GET /api/user/profile:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
async function PUT(request) {
    try {
        // Verificar que el cliente administrativo esté disponible
        if (!_supabase.supabaseAdmin) {
            console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile');
            return _server.NextResponse.json({
                error: 'Servicio de base de datos no disponible'
            }, {
                status: 503
            });
        }
        // Autenticación con Clerk
        const session = await (0, _auth.auth)();
        if (!session?.user) {
            const errorResponse = {
                data: null,
                success: false,
                error: 'Usuario no autenticado'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 401
            });
        }
        const body = await request.json();
        // Validar datos requeridos
        const { name, email } = body;
        if (!name || !email) {
            return _server.NextResponse.json({
                error: 'Nombre y email son requeridos'
            }, {
                status: 400
            });
        }
        // Actualizar usuario en Supabase
        const { data: updatedUser, error } = await _supabase.supabaseAdmin.from('users').update({
            name,
            email,
            updated_at: new Date().toISOString()
        }).eq('clerk_id', userId).select().single();
        if (error) {
            console.error('Error al actualizar usuario:', error);
            return _server.NextResponse.json({
                error: 'Error al actualizar perfil de usuario'
            }, {
                status: 500
            });
        }
        return _server.NextResponse.json({
            success: true,
            user: updatedUser,
            message: 'Perfil actualizado correctamente'
        });
    } catch (error) {
        console.error('Error en PUT /api/user/profile:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,