{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\orders\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - API DE ÓRDENES DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// GET - Obtener órdenes del usuario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/orders');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticación con Clerk\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const { searchParams } = new URL(request.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const limit = parseInt(searchParams.get('limit') || '10');\r\n    const status = searchParams.get('status');\r\n\r\n    // Obtener usuario primero\r\n    let { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('clerk_id', userId)\r\n      .single();\r\n\r\n    if (!user) {\r\n      // Crear usuario demo si no existe\r\n      const { data: newUser, error: createError } = await supabaseAdmin\r\n        .from('users')\r\n        .insert([\r\n          {\r\n            clerk_id: userId,\r\n            email: 'usuario@demo.com',\r\n            name: 'Usuario Demo',\r\n          },\r\n        ])\r\n        .select('id')\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('Error al crear usuario demo:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error al obtener usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      if (!newUser) {\r\n        console.error('Error: newUser es null después de la inserción');\r\n        return NextResponse.json(\r\n          { error: 'Error al crear usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      // Crear algunas órdenes demo para el usuario\r\n      await createDemoOrders(newUser.id);\r\n\r\n      // Usar el nuevo usuario\r\n      user = newUser;\r\n    }\r\n\r\n    // Construir query base\r\n    let query = supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        *,\r\n        order_items (\r\n          id,\r\n          quantity,\r\n          price,\r\n          products (\r\n            id,\r\n            name,\r\n            images\r\n          )\r\n        )\r\n      `)\r\n      .eq('user_id', user.id);\r\n\r\n    // Filtrar por status si se especifica\r\n    if (status && status !== 'all') {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    // Aplicar paginación y ordenamiento\r\n    const from = (page - 1) * limit;\r\n    const to = from + limit - 1;\r\n\r\n    const { data: orders, error, count } = await query\r\n      .order('created_at', { ascending: false })\r\n      .range(from, to);\r\n\r\n    if (error) {\r\n      console.error('Error al obtener órdenes:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener órdenes' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Calcular estadísticas\r\n    const { data: stats } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('status, total')\r\n      .eq('user_id', user.id);\r\n\r\n    const statistics = {\r\n      total_orders: stats?.length || 0,\r\n      total_spent: stats?.reduce((sum, order) => sum + parseFloat(order.total), 0) || 0,\r\n      pending_orders: stats?.filter(order => order.status === 'pending').length || 0,\r\n      completed_orders: stats?.filter(order => order.status === 'delivered').length || 0,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      orders: orders || [],\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total: count || 0,\r\n        pages: Math.ceil((count || 0) / limit),\r\n      },\r\n      statistics,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/orders:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// Función auxiliar para crear órdenes demo\r\n// ===================================\r\nasync function createDemoOrders(userId: string) {\r\n  if (!supabaseAdmin) return;\r\n\r\n  try {\r\n    // Obtener algunos productos para las órdenes demo\r\n    const { data: products } = await supabaseAdmin\r\n      .from('products')\r\n      .select('id, name, price')\r\n      .limit(5);\r\n\r\n    if (!products || products.length === 0) return;\r\n\r\n    // Crear órdenes demo\r\n    const demoOrders = [\r\n      {\r\n        user_id: userId,\r\n        total: 15000.00,\r\n        status: 'delivered',\r\n        payment_id: 'demo_payment_1',\r\n        shipping_address: {\r\n          name: 'Usuario Demo',\r\n          street: 'Av. Corrientes 1234',\r\n          city: 'Buenos Aires',\r\n          postal_code: '1043',\r\n          country: 'Argentina'\r\n        }\r\n      },\r\n      {\r\n        user_id: userId,\r\n        total: 8500.00,\r\n        status: 'shipped',\r\n        payment_id: 'demo_payment_2',\r\n        shipping_address: {\r\n          name: 'Usuario Demo',\r\n          street: 'Av. Corrientes 1234',\r\n          city: 'Buenos Aires',\r\n          postal_code: '1043',\r\n          country: 'Argentina'\r\n        }\r\n      },\r\n      {\r\n        user_id: userId,\r\n        total: 12300.00,\r\n        status: 'pending',\r\n        payment_id: 'demo_payment_3',\r\n        shipping_address: {\r\n          name: 'Usuario Demo',\r\n          street: 'Av. Corrientes 1234',\r\n          city: 'Buenos Aires',\r\n          postal_code: '1043',\r\n          country: 'Argentina'\r\n        }\r\n      }\r\n    ];\r\n\r\n    const { data: createdOrders } = await supabaseAdmin\r\n      .from('orders')\r\n      .insert(demoOrders)\r\n      .select();\r\n\r\n    // Crear items para cada orden\r\n    if (createdOrders && products.length >= 2) {\r\n      for (const order of createdOrders) {\r\n        const orderItems = [\r\n          {\r\n            order_id: order.id,\r\n            product_id: products[0].id,\r\n            quantity: 2,\r\n            price: products[0].price\r\n          },\r\n          {\r\n            order_id: order.id,\r\n            product_id: products[1].id,\r\n            quantity: 1,\r\n            price: products[1].price\r\n          }\r\n        ];\r\n\r\n        await supabaseAdmin\r\n          .from('order_items')\r\n          .insert(orderItems);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al crear órdenes demo:', error);\r\n  }\r\n}\r\n"],"names":["GET","request","supabaseAdmin","console","error","NextResponse","json","status","userId","auth","errorResponse","data","success","searchParams","URL","url","page","parseInt","get","limit","user","from","select","eq","single","newUser","createError","insert","clerk_id","email","name","createDemoOrders","id","query","to","orders","count","order","ascending","range","stats","statistics","total_orders","length","total_spent","reduce","sum","parseFloat","total","pending_orders","filter","completed_orders","pagination","pages","Math","ceil","products","demoOrders","user_id","payment_id","shipping_address","street","city","postal_code","country","createdOrders","orderItems","order_id","product_id","quantity","price"],"mappings":"AAAA,sCAAsC;AACtC,iDAAiD;AACjD,sCAAsC;;;;;+BAUhBA;;;eAAAA;;;wBARoB;0BACZ;yBACT;AAMd,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,0DAA0D;QAC1D,IAAI,CAACC,uBAAa,EAAE;YAClBC,QAAQC,KAAK,CAAC;YACd,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBAAEF,OAAO;YAA0C,GACnD;gBAAEG,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAMC,IAAAA,aAAI;QAC7B,IAAI,CAACD,QAAQ;YACX,MAAME,gBAAmC;gBACvCC,MAAM;gBACNC,SAAS;gBACTR,OAAO;YACT;YACA,OAAOC,oBAAY,CAACC,IAAI,CAACI,eAAe;gBAAEH,QAAQ;YAAI;QACxD;QACA,MAAM,EAAEM,YAAY,EAAE,GAAG,IAAIC,IAAIb,QAAQc,GAAG;QAC5C,MAAMC,OAAOC,SAASJ,aAAaK,GAAG,CAAC,WAAW;QAClD,MAAMC,QAAQF,SAASJ,aAAaK,GAAG,CAAC,YAAY;QACpD,MAAMX,SAASM,aAAaK,GAAG,CAAC;QAEhC,0BAA0B;QAC1B,IAAI,EAAEP,MAAMS,IAAI,EAAE,GAAG,MAAMlB,uBAAa,CACrCmB,IAAI,CAAC,SACLC,MAAM,CAAC,MACPC,EAAE,CAAC,YAAYf,QACfgB,MAAM;QAET,IAAI,CAACJ,MAAM;YACT,kCAAkC;YAClC,MAAM,EAAET,MAAMc,OAAO,EAAErB,OAAOsB,WAAW,EAAE,GAAG,MAAMxB,uBAAa,CAC9DmB,IAAI,CAAC,SACLM,MAAM,CAAC;gBACN;oBACEC,UAAUpB;oBACVqB,OAAO;oBACPC,MAAM;gBACR;aACD,EACAR,MAAM,CAAC,MACPE,MAAM;YAET,IAAIE,aAAa;gBACfvB,QAAQC,KAAK,CAAC,gCAAgCsB;gBAC9C,OAAOrB,oBAAY,CAACC,IAAI,CACtB;oBAAEF,OAAO;gBAA2B,GACpC;oBAAEG,QAAQ;gBAAI;YAElB;YAEA,IAAI,CAACkB,SAAS;gBACZtB,QAAQC,KAAK,CAAC;gBACd,OAAOC,oBAAY,CAACC,IAAI,CACtB;oBAAEF,OAAO;gBAAyB,GAClC;oBAAEG,QAAQ;gBAAI;YAElB;YAEA,6CAA6C;YAC7C,MAAMwB,iBAAiBN,QAAQO,EAAE;YAEjC,wBAAwB;YACxBZ,OAAOK;QACT;QAEA,uBAAuB;QACvB,IAAIQ,QAAQ/B,uBAAa,CACtBmB,IAAI,CAAC,UACLC,MAAM,CAAC,CAAC;;;;;;;;;;;;MAYT,CAAC,EACAC,EAAE,CAAC,WAAWH,KAAKY,EAAE;QAExB,sCAAsC;QACtC,IAAIzB,UAAUA,WAAW,OAAO;YAC9B0B,QAAQA,MAAMV,EAAE,CAAC,UAAUhB;QAC7B;QAEA,oCAAoC;QACpC,MAAMc,OAAO,AAACL,CAAAA,OAAO,CAAA,IAAKG;QAC1B,MAAMe,KAAKb,OAAOF,QAAQ;QAE1B,MAAM,EAAER,MAAMwB,MAAM,EAAE/B,KAAK,EAAEgC,KAAK,EAAE,GAAG,MAAMH,MAC1CI,KAAK,CAAC,cAAc;YAAEC,WAAW;QAAM,GACvCC,KAAK,CAAClB,MAAMa;QAEf,IAAI9B,OAAO;YACTD,QAAQC,KAAK,CAAC,6BAA6BA;YAC3C,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBAAEF,OAAO;YAA2B,GACpC;gBAAEG,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,MAAM,EAAEI,MAAM6B,KAAK,EAAE,GAAG,MAAMtC,uBAAa,CACxCmB,IAAI,CAAC,UACLC,MAAM,CAAC,iBACPC,EAAE,CAAC,WAAWH,KAAKY,EAAE;QAExB,MAAMS,aAAa;YACjBC,cAAcF,OAAOG,UAAU;YAC/BC,aAAaJ,OAAOK,OAAO,CAACC,KAAKT,QAAUS,MAAMC,WAAWV,MAAMW,KAAK,GAAG,MAAM;YAChFC,gBAAgBT,OAAOU,OAAOb,CAAAA,QAASA,MAAM9B,MAAM,KAAK,WAAWoC,UAAU;YAC7EQ,kBAAkBX,OAAOU,OAAOb,CAAAA,QAASA,MAAM9B,MAAM,KAAK,aAAaoC,UAAU;QACnF;QAEA,OAAOtC,oBAAY,CAACC,IAAI,CAAC;YACvBM,SAAS;YACTuB,QAAQA,UAAU,EAAE;YACpBiB,YAAY;gBACVpC;gBACAG;gBACA6B,OAAOZ,SAAS;gBAChBiB,OAAOC,KAAKC,IAAI,CAAC,AAACnB,CAAAA,SAAS,CAAA,IAAKjB;YAClC;YACAsB;QACF;IACF,EAAE,OAAOrC,OAAO;QACdD,QAAQC,KAAK,CAAC,kCAAkCA;QAChD,OAAOC,oBAAY,CAACC,IAAI,CACtB;YAAEF,OAAO;QAA6B,GACtC;YAAEG,QAAQ;QAAI;IAElB;AACF;AAEA,sCAAsC;AACtC,2CAA2C;AAC3C,sCAAsC;AACtC,eAAewB,iBAAiBvB,MAAc;IAC5C,IAAI,CAACN,uBAAa,EAAE;IAEpB,IAAI;QACF,kDAAkD;QAClD,MAAM,EAAES,MAAM6C,QAAQ,EAAE,GAAG,MAAMtD,uBAAa,CAC3CmB,IAAI,CAAC,YACLC,MAAM,CAAC,mBACPH,KAAK,CAAC;QAET,IAAI,CAACqC,YAAYA,SAASb,MAAM,KAAK,GAAG;QAExC,qBAAqB;QACrB,MAAMc,aAAa;YACjB;gBACEC,SAASlD;gBACTwC,OAAO;gBACPzC,QAAQ;gBACRoD,YAAY;gBACZC,kBAAkB;oBAChB9B,MAAM;oBACN+B,QAAQ;oBACRC,MAAM;oBACNC,aAAa;oBACbC,SAAS;gBACX;YACF;YACA;gBACEN,SAASlD;gBACTwC,OAAO;gBACPzC,QAAQ;gBACRoD,YAAY;gBACZC,kBAAkB;oBAChB9B,MAAM;oBACN+B,QAAQ;oBACRC,MAAM;oBACNC,aAAa;oBACbC,SAAS;gBACX;YACF;YACA;gBACEN,SAASlD;gBACTwC,OAAO;gBACPzC,QAAQ;gBACRoD,YAAY;gBACZC,kBAAkB;oBAChB9B,MAAM;oBACN+B,QAAQ;oBACRC,MAAM;oBACNC,aAAa;oBACbC,SAAS;gBACX;YACF;SACD;QAED,MAAM,EAAErD,MAAMsD,aAAa,EAAE,GAAG,MAAM/D,uBAAa,CAChDmB,IAAI,CAAC,UACLM,MAAM,CAAC8B,YACPnC,MAAM;QAET,8BAA8B;QAC9B,IAAI2C,iBAAiBT,SAASb,MAAM,IAAI,GAAG;YACzC,KAAK,MAAMN,SAAS4B,cAAe;gBACjC,MAAMC,aAAa;oBACjB;wBACEC,UAAU9B,MAAML,EAAE;wBAClBoC,YAAYZ,QAAQ,CAAC,EAAE,CAACxB,EAAE;wBAC1BqC,UAAU;wBACVC,OAAOd,QAAQ,CAAC,EAAE,CAACc,KAAK;oBAC1B;oBACA;wBACEH,UAAU9B,MAAML,EAAE;wBAClBoC,YAAYZ,QAAQ,CAAC,EAAE,CAACxB,EAAE;wBAC1BqC,UAAU;wBACVC,OAAOd,QAAQ,CAAC,EAAE,CAACc,KAAK;oBAC1B;iBACD;gBAED,MAAMpE,uBAAa,CAChBmB,IAAI,CAAC,eACLM,MAAM,CAACuC;YACZ;QACF;IACF,EAAE,OAAO9D,OAAO;QACdD,QAAQC,KAAK,CAAC,gCAAgCA;IAChD;AACF"}