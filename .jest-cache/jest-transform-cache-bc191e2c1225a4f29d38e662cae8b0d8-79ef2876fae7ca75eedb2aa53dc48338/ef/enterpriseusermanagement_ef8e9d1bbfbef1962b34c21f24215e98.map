{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\enterprise-user-management.ts"],"sourcesContent":["/**\n * Enterprise User Management\n * Gestión avanzada de usuarios para el sistema enterprise\n */\n\nimport { auth } from '@/auth';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { logger } from '@/lib/logger';\n\nexport interface EnterpriseUser {\n  id: string;\n  email: string;\n  name?: string;\n  role: 'admin' | 'customer' | 'moderator';\n  permissions: string[];\n  isActive: boolean;\n  lastLogin?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface UserManagementOptions {\n  includePermissions?: boolean;\n  includeLastLogin?: boolean;\n  filterByRole?: string;\n  isActive?: boolean;\n}\n\n/**\n * Obtiene un usuario por ID con información enterprise\n */\nexport async function getEnterpriseUser(\n  userId: string,\n  options: UserManagementOptions = {}\n): Promise<EnterpriseUser | null> {\n  try {\n    const { data, error } = await supabaseAdmin\n      .from('users')\n      .select(`\n        id,\n        email,\n        name,\n        role,\n        is_active,\n        last_login,\n        created_at,\n        updated_at\n        ${options.includePermissions ? ', permissions' : ''}\n      `)\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      logger.error('Error obteniendo usuario enterprise:', error);\n      return null;\n    }\n\n    return {\n      id: data.id,\n      email: data.email,\n      name: data.name,\n      role: data.role,\n      permissions: data.permissions || [],\n      isActive: data.is_active,\n      lastLogin: data.last_login ? new Date(data.last_login) : undefined,\n      createdAt: new Date(data.created_at),\n      updatedAt: new Date(data.updated_at),\n    };\n  } catch (error) {\n    logger.error('Error en getEnterpriseUser:', error);\n    return null;\n  }\n}\n\n/**\n * Lista usuarios con filtros enterprise\n */\nexport async function listEnterpriseUsers(\n  options: UserManagementOptions = {}\n): Promise<EnterpriseUser[]> {\n  try {\n    let query = supabaseAdmin\n      .from('users')\n      .select(`\n        id,\n        email,\n        name,\n        role,\n        is_active,\n        last_login,\n        created_at,\n        updated_at\n        ${options.includePermissions ? ', permissions' : ''}\n      `);\n\n    if (options.filterByRole) {\n      query = query.eq('role', options.filterByRole);\n    }\n\n    if (options.isActive !== undefined) {\n      query = query.eq('is_active', options.isActive);\n    }\n\n    const { data, error } = await query.order('created_at', { ascending: false });\n\n    if (error) {\n      logger.error('Error listando usuarios enterprise:', error);\n      return [];\n    }\n\n    return data.map(user => ({\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n      permissions: user.permissions || [],\n      isActive: user.is_active,\n      lastLogin: user.last_login ? new Date(user.last_login) : undefined,\n      createdAt: new Date(user.created_at),\n      updatedAt: new Date(user.updated_at),\n    }));\n  } catch (error) {\n    logger.error('Error en listEnterpriseUsers:', error);\n    return [];\n  }\n}\n\n/**\n * Actualiza el rol de un usuario\n */\nexport async function updateUserRole(\n  userId: string,\n  newRole: 'admin' | 'customer' | 'moderator'\n): Promise<boolean> {\n  try {\n    const { error } = await supabaseAdmin\n      .from('users')\n      .update({ \n        role: newRole,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n\n    if (error) {\n      logger.error('Error actualizando rol de usuario:', error);\n      return false;\n    }\n\n    logger.info(`Rol de usuario ${userId} actualizado a ${newRole}`);\n    return true;\n  } catch (error) {\n    logger.error('Error en updateUserRole:', error);\n    return false;\n  }\n}\n\n/**\n * Activa o desactiva un usuario\n */\nexport async function toggleUserStatus(\n  userId: string,\n  isActive: boolean\n): Promise<boolean> {\n  try {\n    const { error } = await supabaseAdmin\n      .from('users')\n      .update({ \n        is_active: isActive,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n\n    if (error) {\n      logger.error('Error cambiando estado de usuario:', error);\n      return false;\n    }\n\n    logger.info(`Usuario ${userId} ${isActive ? 'activado' : 'desactivado'}`);\n    return true;\n  } catch (error) {\n    logger.error('Error en toggleUserStatus:', error);\n    return false;\n  }\n}\n\n/**\n * Obtiene estadísticas de usuarios enterprise\n */\nexport async function getUserStatistics() {\n  try {\n    const { data, error } = await supabaseAdmin\n      .from('users')\n      .select('role, is_active')\n      .not('role', 'is', null);\n\n    if (error) {\n      logger.error('Error obteniendo estadísticas de usuarios:', error);\n      return null;\n    }\n\n    const stats = {\n      total: data.length,\n      active: data.filter(u => u.is_active).length,\n      inactive: data.filter(u => !u.is_active).length,\n      byRole: {\n        admin: data.filter(u => u.role === 'admin').length,\n        customer: data.filter(u => u.role === 'customer').length,\n        moderator: data.filter(u => u.role === 'moderator').length,\n      }\n    };\n\n    return stats;\n  } catch (error) {\n    logger.error('Error en getUserStatistics:', error);\n    return null;\n  }\n}\n\n/**\n * Registra el último login de un usuario\n */\nexport async function recordUserLogin(userId: string): Promise<void> {\n  try {\n    await supabaseAdmin\n      .from('users')\n      .update({ \n        last_login: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n  } catch (error) {\n    logger.error('Error registrando login de usuario:', error);\n  }\n}\n"],"names":["getEnterpriseUser","getUserStatistics","listEnterpriseUsers","recordUserLogin","toggleUserStatus","updateUserRole","userId","options","data","error","supabaseAdmin","from","select","includePermissions","eq","single","logger","id","email","name","role","permissions","isActive","is_active","lastLogin","last_login","Date","undefined","createdAt","created_at","updatedAt","updated_at","query","filterByRole","order","ascending","map","user","newRole","update","toISOString","info","not","stats","total","length","active","filter","u","inactive","byRole","admin","customer","moderator"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;QA4BqBA;eAAAA;;QA6JAC;eAAAA;;QA/GAC;eAAAA;;QAgJAC;eAAAA;;QA9DAC;eAAAA;;QA7BAC;eAAAA;;;0BA5HQ;wBACP;AAwBhB,eAAeL,kBACpBM,MAAc,EACdC,UAAiC,CAAC,CAAC;IAEnC,IAAI;QACF,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAMC,uBAAa,CACxCC,IAAI,CAAC,SACLC,MAAM,CAAC,CAAC;;;;;;;;;QASP,EAAEL,QAAQM,kBAAkB,GAAG,kBAAkB,GAAG;MACtD,CAAC,EACAC,EAAE,CAAC,MAAMR,QACTS,MAAM;QAET,IAAIN,OAAO;YACTO,cAAM,CAACP,KAAK,CAAC,wCAAwCA;YACrD,OAAO;QACT;QAEA,OAAO;YACLQ,IAAIT,KAAKS,EAAE;YACXC,OAAOV,KAAKU,KAAK;YACjBC,MAAMX,KAAKW,IAAI;YACfC,MAAMZ,KAAKY,IAAI;YACfC,aAAab,KAAKa,WAAW,IAAI,EAAE;YACnCC,UAAUd,KAAKe,SAAS;YACxBC,WAAWhB,KAAKiB,UAAU,GAAG,IAAIC,KAAKlB,KAAKiB,UAAU,IAAIE;YACzDC,WAAW,IAAIF,KAAKlB,KAAKqB,UAAU;YACnCC,WAAW,IAAIJ,KAAKlB,KAAKuB,UAAU;QACrC;IACF,EAAE,OAAOtB,OAAO;QACdO,cAAM,CAACP,KAAK,CAAC,+BAA+BA;QAC5C,OAAO;IACT;AACF;AAKO,eAAeP,oBACpBK,UAAiC,CAAC,CAAC;IAEnC,IAAI;QACF,IAAIyB,QAAQtB,uBAAa,CACtBC,IAAI,CAAC,SACLC,MAAM,CAAC,CAAC;;;;;;;;;QASP,EAAEL,QAAQM,kBAAkB,GAAG,kBAAkB,GAAG;MACtD,CAAC;QAEH,IAAIN,QAAQ0B,YAAY,EAAE;YACxBD,QAAQA,MAAMlB,EAAE,CAAC,QAAQP,QAAQ0B,YAAY;QAC/C;QAEA,IAAI1B,QAAQe,QAAQ,KAAKK,WAAW;YAClCK,QAAQA,MAAMlB,EAAE,CAAC,aAAaP,QAAQe,QAAQ;QAChD;QAEA,MAAM,EAAEd,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAMuB,MAAME,KAAK,CAAC,cAAc;YAAEC,WAAW;QAAM;QAE3E,IAAI1B,OAAO;YACTO,cAAM,CAACP,KAAK,CAAC,uCAAuCA;YACpD,OAAO,EAAE;QACX;QAEA,OAAOD,KAAK4B,GAAG,CAACC,CAAAA,OAAS,CAAA;gBACvBpB,IAAIoB,KAAKpB,EAAE;gBACXC,OAAOmB,KAAKnB,KAAK;gBACjBC,MAAMkB,KAAKlB,IAAI;gBACfC,MAAMiB,KAAKjB,IAAI;gBACfC,aAAagB,KAAKhB,WAAW,IAAI,EAAE;gBACnCC,UAAUe,KAAKd,SAAS;gBACxBC,WAAWa,KAAKZ,UAAU,GAAG,IAAIC,KAAKW,KAAKZ,UAAU,IAAIE;gBACzDC,WAAW,IAAIF,KAAKW,KAAKR,UAAU;gBACnCC,WAAW,IAAIJ,KAAKW,KAAKN,UAAU;YACrC,CAAA;IACF,EAAE,OAAOtB,OAAO;QACdO,cAAM,CAACP,KAAK,CAAC,iCAAiCA;QAC9C,OAAO,EAAE;IACX;AACF;AAKO,eAAeJ,eACpBC,MAAc,EACdgC,OAA2C;IAE3C,IAAI;QACF,MAAM,EAAE7B,KAAK,EAAE,GAAG,MAAMC,uBAAa,CAClCC,IAAI,CAAC,SACL4B,MAAM,CAAC;YACNnB,MAAMkB;YACNP,YAAY,IAAIL,OAAOc,WAAW;QACpC,GACC1B,EAAE,CAAC,MAAMR;QAEZ,IAAIG,OAAO;YACTO,cAAM,CAACP,KAAK,CAAC,sCAAsCA;YACnD,OAAO;QACT;QAEAO,cAAM,CAACyB,IAAI,CAAC,CAAC,eAAe,EAAEnC,OAAO,eAAe,EAAEgC,SAAS;QAC/D,OAAO;IACT,EAAE,OAAO7B,OAAO;QACdO,cAAM,CAACP,KAAK,CAAC,4BAA4BA;QACzC,OAAO;IACT;AACF;AAKO,eAAeL,iBACpBE,MAAc,EACdgB,QAAiB;IAEjB,IAAI;QACF,MAAM,EAAEb,KAAK,EAAE,GAAG,MAAMC,uBAAa,CAClCC,IAAI,CAAC,SACL4B,MAAM,CAAC;YACNhB,WAAWD;YACXS,YAAY,IAAIL,OAAOc,WAAW;QACpC,GACC1B,EAAE,CAAC,MAAMR;QAEZ,IAAIG,OAAO;YACTO,cAAM,CAACP,KAAK,CAAC,sCAAsCA;YACnD,OAAO;QACT;QAEAO,cAAM,CAACyB,IAAI,CAAC,CAAC,QAAQ,EAAEnC,OAAO,CAAC,EAAEgB,WAAW,aAAa,eAAe;QACxE,OAAO;IACT,EAAE,OAAOb,OAAO;QACdO,cAAM,CAACP,KAAK,CAAC,8BAA8BA;QAC3C,OAAO;IACT;AACF;AAKO,eAAeR;IACpB,IAAI;QACF,MAAM,EAAEO,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAMC,uBAAa,CACxCC,IAAI,CAAC,SACLC,MAAM,CAAC,mBACP8B,GAAG,CAAC,QAAQ,MAAM;QAErB,IAAIjC,OAAO;YACTO,cAAM,CAACP,KAAK,CAAC,8CAA8CA;YAC3D,OAAO;QACT;QAEA,MAAMkC,QAAQ;YACZC,OAAOpC,KAAKqC,MAAM;YAClBC,QAAQtC,KAAKuC,MAAM,CAACC,CAAAA,IAAKA,EAAEzB,SAAS,EAAEsB,MAAM;YAC5CI,UAAUzC,KAAKuC,MAAM,CAACC,CAAAA,IAAK,CAACA,EAAEzB,SAAS,EAAEsB,MAAM;YAC/CK,QAAQ;gBACNC,OAAO3C,KAAKuC,MAAM,CAACC,CAAAA,IAAKA,EAAE5B,IAAI,KAAK,SAASyB,MAAM;gBAClDO,UAAU5C,KAAKuC,MAAM,CAACC,CAAAA,IAAKA,EAAE5B,IAAI,KAAK,YAAYyB,MAAM;gBACxDQ,WAAW7C,KAAKuC,MAAM,CAACC,CAAAA,IAAKA,EAAE5B,IAAI,KAAK,aAAayB,MAAM;YAC5D;QACF;QAEA,OAAOF;IACT,EAAE,OAAOlC,OAAO;QACdO,cAAM,CAACP,KAAK,CAAC,+BAA+BA;QAC5C,OAAO;IACT;AACF;AAKO,eAAeN,gBAAgBG,MAAc;IAClD,IAAI;QACF,MAAMI,uBAAa,CAChBC,IAAI,CAAC,SACL4B,MAAM,CAAC;YACNd,YAAY,IAAIC,OAAOc,WAAW;YAClCT,YAAY,IAAIL,OAAOc,WAAW;QACpC,GACC1B,EAAE,CAAC,MAAMR;IACd,EAAE,OAAOG,OAAO;QACdO,cAAM,CAACP,KAAK,CAAC,uCAAuCA;IACtD;AACF"}