699277ae61e1a9f3c9c0cd16078b668c
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ProductInquiryTextarea: function() {
        return ProductInquiryTextarea;
    },
    ReviewTextarea: function() {
        return ReviewTextarea;
    },
    Textarea: function() {
        return Textarea;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const textareaVariants = (0, _classvarianceauthority.cva)("flex min-h-[80px] w-full rounded-md border bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 resize-none transition-all duration-200", {
    variants: {
        variant: {
            default: "border-gray-300 focus-visible:border-primary focus-visible:ring-primary/20",
            error: "border-red-500 focus-visible:border-red-500 focus-visible:ring-red-500/20",
            success: "border-green-500 focus-visible:border-green-500 focus-visible:ring-green-500/20"
        },
        size: {
            sm: "min-h-[60px] px-2 py-1 text-xs",
            md: "min-h-[80px] px-3 py-2 text-sm",
            lg: "min-h-[100px] px-4 py-3 text-base"
        },
        resize: {
            none: "resize-none",
            vertical: "resize-y",
            horizontal: "resize-x",
            both: "resize"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "md",
        resize: "vertical"
    }
});
const Textarea = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, resize, label, description, error, helperText, maxLength, showCharCount = false, autoResize = false, id, value, onChange, ...props }, ref)=>{
    const generatedId = _react.useId();
    const textareaId = id || generatedId;
    const hasError = !!error;
    const finalVariant = hasError ? "error" : variant;
    const [charCount, setCharCount] = _react.useState(0);
    const textareaRef = _react.useRef(null);
    // Combinar refs
    _react.useImperativeHandle(ref, ()=>textareaRef.current);
    // Auto resize functionality
    const adjustHeight = _react.useCallback(()=>{
        const textarea = textareaRef.current;
        if (textarea && autoResize) {
            textarea.style.height = 'auto';
            textarea.style.height = `${textarea.scrollHeight}px`;
        }
    }, [
        autoResize
    ]);
    // Handle change with character count
    const handleChange = (e)=>{
        const newValue = e.target.value;
        // Enforce max length
        if (maxLength && newValue.length > maxLength) {
            return;
        }
        setCharCount(newValue.length);
        if (autoResize) {
            adjustHeight();
        }
        onChange?.(e);
    };
    // Initialize character count
    _react.useEffect(()=>{
        if (value) {
            setCharCount(String(value).length);
        }
    }, [
        value
    ]);
    // Adjust height on mount if autoResize is enabled
    _react.useEffect(()=>{
        if (autoResize) {
            adjustHeight();
        }
    }, [
        adjustHeight,
        autoResize
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "w-full space-y-2",
        children: [
            (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-1",
                children: [
                    label && /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        htmlFor: textareaId,
                        className: (0, _utils.cn)("block text-sm font-medium text-gray-700", hasError && "text-red-600"),
                        children: [
                            label,
                            props.required && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-red-500 ml-1",
                                children: "*"
                            })
                        ]
                    }),
                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: (0, _utils.cn)("text-xs text-gray-600", hasError && "text-red-500"),
                        children: description
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                        ref: textareaRef,
                        id: textareaId,
                        className: (0, _utils.cn)(textareaVariants({
                            variant: finalVariant,
                            size,
                            resize
                        }), autoResize && "overflow-hidden", className),
                        value: value,
                        onChange: handleChange,
                        maxLength: maxLength,
                        ...props
                    }),
                    (showCharCount || maxLength) && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "absolute bottom-2 right-2 text-xs text-gray-500",
                        children: showCharCount && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            className: (0, _utils.cn)(maxLength && charCount > maxLength * 0.9 && "text-yellow-600", maxLength && charCount === maxLength && "text-red-600"),
                            children: [
                                charCount,
                                maxLength && `/${maxLength}`
                            ]
                        })
                    })
                ]
            }),
            (error || helperText) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-1",
                children: [
                    error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-xs text-red-600",
                        children: error
                    }),
                    helperText && !error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-xs text-gray-600",
                        children: helperText
                    })
                ]
            })
        ]
    });
});
Textarea.displayName = "Textarea";
const ReviewTextarea = /*#__PURE__*/ _react.forwardRef(({ productName, label, ...props }, ref)=>{
    const defaultLabel = productName ? `Escribe tu reseña sobre ${productName}` : "Escribe tu reseña";
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Textarea, {
        ref: ref,
        label: label || defaultLabel,
        placeholder: "Comparte tu experiencia con este producto. \xbfQu\xe9 te gust\xf3? \xbfLo recomendar\xedas?",
        maxLength: 500,
        showCharCount: true,
        autoResize: true,
        size: "lg",
        ...props
    });
});
ReviewTextarea.displayName = "ReviewTextarea";
const ProductInquiryTextarea = /*#__PURE__*/ _react.forwardRef(({ productName, ...props }, ref)=>{
    const placeholder = productName ? `Haz tu consulta sobre ${productName}...` : "Escribe tu consulta sobre este producto...";
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Textarea, {
        ref: ref,
        label: "Tu consulta",
        placeholder: placeholder,
        description: "Nuestro equipo te responder\xe1 a la brevedad",
        maxLength: 300,
        showCharCount: true,
        ...props
    });
});
ProductInquiryTextarea.displayName = "ProductInquiryTextarea";

//# sourceMappingURL=data:application/json;base64,