{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\types\\api-strict.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - STRICT API TYPES\n// Tipos TypeScript estrictos para prevenir errores de API\n// ===================================\n\nimport { OrderEnterprise, OrderStatus, PaymentStatus, FulfillmentStatus } from './orders-enterprise';\n\n// ===================================\n// TIPOS BASE ESTRICTOS\n// ===================================\n\n/**\n * Tipo base para respuestas de API con validación estricta\n */\nexport interface StrictApiResponse<T> {\n  readonly success: true;\n  readonly data: T;\n  readonly message?: string;\n  readonly timestamp: string;\n}\n\nexport interface StrictApiError {\n  readonly success: false;\n  readonly error: string;\n  readonly code?: string;\n  readonly details?: Record<string, unknown>;\n  readonly timestamp: string;\n  readonly path: string;\n}\n\n/**\n * Union type para respuestas de API que garantiza type safety\n */\nexport type ApiResult<T> = StrictApiResponse<T> | StrictApiError;\n\n// ===================================\n// TIPOS DE PAGINACIÓN ESTRICTOS\n// ===================================\n\n/**\n * Paginación con validación estricta de tipos\n */\nexport interface StrictPagination {\n  readonly page: number & { __brand: 'PositiveInteger' };\n  readonly limit: number & { __brand: 'PositiveInteger' };\n  readonly total: number & { __brand: 'NonNegativeInteger' };\n  readonly totalPages: number & { __brand: 'NonNegativeInteger' };\n  readonly hasNextPage: boolean;\n  readonly hasPreviousPage: boolean;\n}\n\n/**\n * Respuesta paginada con tipos estrictos\n */\nexport interface StrictPaginatedResponse<T> {\n  readonly success: true;\n  readonly data: {\n    readonly items: readonly T[];\n    readonly pagination: StrictPagination;\n    readonly filters?: Record<string, unknown>;\n  };\n  readonly message?: string;\n  readonly timestamp: string;\n}\n\n// ===================================\n// TIPOS ESPECÍFICOS PARA ÓRDENES\n// ===================================\n\n/**\n * Orden con validación estricta de campos requeridos\n */\nexport interface StrictOrderEnterprise {\n  readonly id: string | number; // Flexible para string o number\n  readonly order_number?: string & { __brand: 'OrderNumber' }; // Opcional\n  readonly user_id?: string | number; // Opcional y flexible\n  readonly status: OrderStatus;\n  readonly payment_status?: PaymentStatus; // Opcional\n  readonly fulfillment_status?: FulfillmentStatus; // Opcional\n  readonly total: number & { __brand: 'PositiveAmount' };\n  readonly currency?: string & { __brand: 'CurrencyCode' }; // Opcional\n  readonly created_at: string & { __brand: 'ISODateString' };\n  readonly updated_at?: string & { __brand: 'ISODateString' }; // Opcional\n  \n  // Campos opcionales con tipos estrictos\n  readonly shipping_address?: StrictAddress;\n  readonly billing_address?: StrictAddress;\n  readonly notes?: string & { __brand: 'NonEmptyString' };\n  readonly admin_notes?: string & { __brand: 'NonEmptyString' };\n  readonly tracking_number?: string & { __brand: 'TrackingNumber' };\n  readonly carrier?: string & { __brand: 'CarrierName' };\n  readonly estimated_delivery?: string & { __brand: 'ISODateString' };\n  readonly metadata: Record<string, unknown>;\n  \n  // Relaciones con tipos estrictos\n  readonly user_profiles?: StrictUserProfile | null;\n  readonly order_items?: readonly StrictOrderItem[];\n  readonly status_history?: readonly StrictOrderStatusHistory[];\n  readonly order_notes?: readonly StrictOrderNote[];\n}\n\n/**\n * Perfil de usuario con validación estricta\n */\nexport interface StrictUserProfile {\n  readonly id: string & { __brand: 'UserId' };\n  readonly name: string & { __brand: 'NonEmptyString' };\n  readonly email: string & { __brand: 'EmailAddress' };\n  readonly phone?: string & { __brand: 'PhoneNumber' };\n  readonly avatar_url?: string & { __brand: 'URL' };\n}\n\n/**\n * Item de orden con validación estricta\n */\nexport interface StrictOrderItem {\n  readonly id: string & { __brand: 'OrderItemId' };\n  readonly order_id: string & { __brand: 'OrderId' };\n  readonly product_id: number & { __brand: 'ProductId' };\n  readonly quantity: number & { __brand: 'PositiveInteger' };\n  readonly unit_price: number & { __brand: 'PositiveAmount' };\n  readonly total_price: number & { __brand: 'PositiveAmount' };\n  readonly product_name: string & { __brand: 'NonEmptyString' };\n  readonly product_sku?: string & { __brand: 'SKU' };\n}\n\n/**\n * Dirección con validación estricta\n */\nexport interface StrictAddress {\n  readonly street: string & { __brand: 'NonEmptyString' };\n  readonly city: string & { __brand: 'NonEmptyString' };\n  readonly state: string & { __brand: 'NonEmptyString' };\n  readonly postal_code: string & { __brand: 'PostalCode' };\n  readonly country: string & { __brand: 'CountryCode' };\n  readonly phone?: string & { __brand: 'PhoneNumber' };\n}\n\n/**\n * Historial de estado con validación estricta\n */\nexport interface StrictOrderStatusHistory {\n  readonly id: string & { __brand: 'StatusHistoryId' };\n  readonly order_id: string & { __brand: 'OrderId' };\n  readonly from_status: OrderStatus | null;\n  readonly to_status: OrderStatus;\n  readonly reason?: string & { __brand: 'NonEmptyString' };\n  readonly admin_id?: string & { __brand: 'AdminId' };\n  readonly created_at: string & { __brand: 'ISODateString' };\n}\n\n/**\n * Nota de orden con validación estricta\n */\nexport interface StrictOrderNote {\n  readonly id: string & { __brand: 'OrderNoteId' };\n  readonly order_id: string & { __brand: 'OrderId' };\n  readonly content: string & { __brand: 'NonEmptyString' };\n  readonly is_admin_note: boolean;\n  readonly admin_id?: string & { __brand: 'AdminId' };\n  readonly created_at: string & { __brand: 'ISODateString' };\n}\n\n// ===================================\n// RESPUESTAS ESPECÍFICAS DE API\n// ===================================\n\n/**\n * Respuesta de lista de órdenes con tipos estrictos\n */\nexport interface StrictOrdersListResponse {\n  readonly success: true;\n  readonly data: {\n    readonly orders: readonly StrictOrderEnterprise[];\n    readonly pagination: StrictPagination;\n    readonly filters: {\n      readonly search?: string;\n      readonly status?: OrderStatus;\n      readonly payment_status?: PaymentStatus;\n      readonly fulfillment_status?: FulfillmentStatus;\n      readonly date_from?: string & { __brand: 'ISODateString' };\n      readonly date_to?: string & { __brand: 'ISODateString' };\n    };\n    readonly analytics?: {\n      readonly total_orders: number & { __brand: 'NonNegativeInteger' };\n      readonly total_revenue: number & { __brand: 'NonNegativeAmount' };\n      readonly pending_orders: number & { __brand: 'NonNegativeInteger' };\n      readonly completed_orders: number & { __brand: 'NonNegativeInteger' };\n      readonly today_revenue: number & { __brand: 'NonNegativeAmount' };\n    };\n  };\n  readonly message?: string;\n  readonly timestamp: string;\n}\n\n/**\n * Respuesta de orden individual con tipos estrictos\n */\nexport interface StrictOrderDetailResponse {\n  readonly success: true;\n  readonly data: {\n    readonly order: StrictOrderEnterprise;\n    readonly timeline?: readonly StrictOrderStatusHistory[];\n    readonly related_orders?: readonly Pick<StrictOrderEnterprise, 'id' | 'order_number' | 'status' | 'total'>[];\n  };\n  readonly message?: string;\n  readonly timestamp: string;\n}\n\n// ===================================\n// VALIDADORES DE TIPOS\n// ===================================\n\n/**\n * Validador para verificar si un objeto es una respuesta de API válida\n */\nexport function isStrictApiResponse<T>(obj: unknown): obj is StrictApiResponse<T> {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'success' in obj &&\n    obj.success === true &&\n    'data' in obj &&\n    'timestamp' in obj &&\n    typeof (obj as any).timestamp === 'string'\n  );\n}\n\n/**\n * Validador para verificar si un objeto es un error de API válido\n */\nexport function isStrictApiError(obj: unknown): obj is StrictApiError {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'success' in obj &&\n    obj.success === false &&\n    'error' in obj &&\n    typeof (obj as any).error === 'string' &&\n    'timestamp' in obj &&\n    typeof (obj as any).timestamp === 'string'\n  );\n}\n\n/**\n * Validador para verificar si una paginación es válida\n */\nexport function isValidPagination(obj: unknown): obj is StrictPagination {\n  if (typeof obj !== 'object' || obj === null) return false;\n  \n  const pagination = obj as any;\n  return (\n    typeof pagination.page === 'number' &&\n    typeof pagination.limit === 'number' &&\n    typeof pagination.total === 'number' &&\n    typeof pagination.totalPages === 'number' &&\n    typeof pagination.hasNextPage === 'boolean' &&\n    typeof pagination.hasPreviousPage === 'boolean' &&\n    pagination.page > 0 &&\n    pagination.limit > 0 &&\n    pagination.total >= 0 &&\n    pagination.totalPages >= 0\n  );\n}\n\n/**\n * Validador para verificar si una orden es válida (versión más flexible)\n */\nexport function isValidStrictOrder(obj: unknown): obj is StrictOrderEnterprise {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n  \n  const order = obj as any;\n  \n  // Validaciones mínimas - solo campos absolutamente esenciales\n  const hasId = order.id && (typeof order.id === 'string' || typeof order.id === 'number');\n  const hasTotal = typeof order.total === 'number' && order.total >= 0;\n  const hasCreatedAt = order.created_at && typeof order.created_at === 'string';\n  const hasStatus = order.status && typeof order.status === 'string';\n  \n  // Solo requerir los campos absolutamente esenciales\n  return hasId && hasTotal && hasCreatedAt && hasStatus;\n}\n\n// ===================================\n// UTILIDADES DE TRANSFORMACIÓN\n// ===================================\n\n/**\n * Transforma una respuesta de API no tipada a una respuesta estricta\n */\nexport function toStrictOrdersResponse(obj: unknown): StrictOrdersListResponse | StrictApiError {\n  try {\n    if (!isStrictApiResponse(obj)) {\n      return {\n        success: false,\n        error: 'Invalid API response format',\n        code: 'INVALID_RESPONSE_FORMAT',\n        timestamp: new Date().toISOString(),\n        path: '/api/admin/orders'\n      };\n    }\n\n    const response = obj as any;\n    \n    // Validar estructura de datos\n    if (!response.data || typeof response.data !== 'object') {\n      return {\n        success: false,\n        error: 'Missing or invalid data field',\n        code: 'INVALID_DATA_FIELD',\n        timestamp: new Date().toISOString(),\n        path: '/api/admin/orders'\n      };\n    }\n\n    // Validar órdenes\n    const orders = response.data.orders || [];\n    if (!Array.isArray(orders)) {\n      return {\n        success: false,\n        error: 'Orders field must be an array',\n        code: 'INVALID_ORDERS_FIELD',\n        timestamp: new Date().toISOString(),\n        path: '/api/admin/orders'\n      };\n    }\n\n    // Validar paginación\n    const pagination = response.data.pagination;\n    if (pagination && !isValidPagination(pagination)) {\n      return {\n        success: false,\n        error: 'Invalid pagination format',\n        code: 'INVALID_PAGINATION',\n        timestamp: new Date().toISOString(),\n        path: '/api/admin/orders'\n      };\n    }\n\n    // Transformar órdenes para asegurar compatibilidad\n    \n    // Transformar órdenes para normalizar tipos\n    const transformedOrders = orders.map((order: any) => ({\n      ...order,\n      id: String(order.id), // Convertir ID a string para compatibilidad frontend\n      user_id: order.user_id ? String(order.user_id) : order.user_id,\n      total: Number(order.total) || 0,\n      created_at: order.created_at || new Date().toISOString(),\n      status: order.status || 'pending',\n      metadata: order.metadata || {}\n    }));\n    \n    const validOrders = transformedOrders.filter(isValidStrictOrder);\n    \n    // Crear respuesta estricta con valores por defecto seguros\n    return {\n      success: true,\n      data: {\n        orders: validOrders,\n        pagination: pagination || {\n          page: 1 as any,\n          limit: 20 as any,\n          total: orders.length as any,\n          totalPages: Math.ceil(orders.length / 20) as any,\n          hasNextPage: false,\n          hasPreviousPage: false\n        },\n        filters: response.data.filters || {},\n        analytics: response.data.analytics\n      },\n      message: response.message,\n      timestamp: response.timestamp || new Date().toISOString()\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to parse API response: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      code: 'PARSE_ERROR',\n      timestamp: new Date().toISOString(),\n      path: '/api/admin/orders'\n    };\n  }\n}\n\n/**\n * Crea una respuesta de error estricta\n */\nexport function createStrictApiError(\n  error: string,\n  code?: string,\n  details?: Record<string, unknown>,\n  path?: string\n): StrictApiError {\n  return {\n    success: false,\n    error,\n    code,\n    details,\n    timestamp: new Date().toISOString(),\n    path: path || '/api/unknown'\n  };\n}\n\n/**\n * Crea una respuesta exitosa estricta\n */\nexport function createStrictApiResponse<T>(\n  data: T,\n  message?: string\n): StrictApiResponse<T> {\n  return {\n    success: true,\n    data,\n    message,\n    timestamp: new Date().toISOString()\n  };\n}\n\n// ===================================\n// TIPOS DE UTILIDAD\n// ===================================\n\n/**\n * Extrae el tipo de datos de una respuesta de API\n */\nexport type ExtractApiData<T> = T extends StrictApiResponse<infer U> ? U : never;\n\n/**\n * Hace que todos los campos de un tipo sean de solo lectura recursivamente\n */\nexport type DeepReadonly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n\n/**\n * Tipo para funciones que manejan respuestas de API\n */\nexport type ApiHandler<T, R = void> = (response: ApiResult<T>) => R | Promise<R>;\n\n/**\n * Tipo para opciones de configuración de API\n */\nexport interface StrictApiOptions {\n  readonly timeout?: number;\n  readonly retries?: number;\n  readonly validateResponse?: boolean;\n  readonly throwOnError?: boolean;\n}"],"names":["createStrictApiError","createStrictApiResponse","isStrictApiError","isStrictApiResponse","isValidPagination","isValidStrictOrder","toStrictOrdersResponse","obj","success","timestamp","error","pagination","page","limit","total","totalPages","hasNextPage","hasPreviousPage","order","hasId","id","hasTotal","hasCreatedAt","created_at","hasStatus","status","code","Date","toISOString","path","response","data","orders","Array","isArray","transformedOrders","map","String","user_id","Number","metadata","validOrders","filter","length","Math","ceil","filters","analytics","message","Error","details"],"mappings":"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"}