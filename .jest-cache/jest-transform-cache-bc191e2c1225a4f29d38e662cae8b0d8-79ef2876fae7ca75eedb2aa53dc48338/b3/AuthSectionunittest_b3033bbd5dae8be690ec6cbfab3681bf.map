{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Header\\__tests__\\unit\\AuthSection.unit.test.tsx"],"sourcesContent":["/**\n * Tests Unitarios - AuthSection\n * Pruebas enfocadas en el componente de autenticación\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { ClerkProvider } from '@clerk/nextjs';\nimport AuthSection from '../../AuthSection';\n\n// Mock de Next.js\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock de Clerk con diferentes estados\nconst mockClerkHooks = {\n  useUser: jest.fn(),\n  SignedIn: ({ children }: { children: React.ReactNode }) => <div data-testid=\"signed-in\">{children}</div>,\n  SignedOut: ({ children }: { children: React.ReactNode }) => <div data-testid=\"signed-out\">{children}</div>,\n  UserButton: () => <div data-testid=\"user-button\">UserButton</div>,\n};\n\njest.mock('@clerk/nextjs', () => ({\n  ClerkProvider: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  ...mockClerkHooks,\n}));\n\n// Wrapper de pruebas\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <ClerkProvider publishableKey=\"test-key\">\n    {children}\n  </ClerkProvider>\n);\n\ndescribe('AuthSection - Tests Unitarios', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Estado por defecto: usuario no autenticado\n    mockClerkHooks.useUser.mockReturnValue({\n      isSignedIn: false,\n      user: null,\n      isLoaded: true,\n    });\n  });\n\n  describe('Variante Desktop', () => {\n    it('debe renderizar el botón de autenticación con solo icono Google', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      // Verificar que se renderiza el estado SignedOut\n      expect(screen.getByTestId('signed-out')).toBeInTheDocument();\n      \n      // Verificar que hay un botón con enlace a /signin\n      const signInLink = screen.getByRole('link');\n      expect(signInLink).toHaveAttribute('href', '/signin');\n    });\n\n    it('debe mostrar solo el icono de Google sin texto', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      // Verificar que NO hay texto \"Iniciar Sesión\"\n      expect(screen.queryByText('Iniciar Sesión')).not.toBeInTheDocument();\n      \n      // Verificar que hay un SVG (icono de Google)\n      const googleIcon = screen.getByRole('link').querySelector('svg');\n      expect(googleIcon).toBeInTheDocument();\n    });\n\n    it('debe tener las clases CSS correctas para el botón translúcido', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const button = screen.getByRole('button');\n      expect(button).toHaveClass('bg-white/20', 'hover:bg-white/30');\n      expect(button).toHaveClass('backdrop-blur-sm');\n      expect(button).toHaveClass('border-2', 'border-white/30');\n      expect(button).toHaveClass('rounded-full');\n    });\n\n    it('debe tener los colores oficiales de Google en el SVG', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const svgPaths = screen.getByRole('link').querySelectorAll('path');\n      \n      // Verificar que hay 4 paths (colores de Google)\n      expect(svgPaths).toHaveLength(4);\n      \n      // Verificar colores específicos\n      expect(svgPaths[0]).toHaveAttribute('fill', '#4285F4'); // Azul\n      expect(svgPaths[1]).toHaveAttribute('fill', '#34A853'); // Verde\n      expect(svgPaths[2]).toHaveAttribute('fill', '#FBBC05'); // Amarillo\n      expect(svgPaths[3]).toHaveAttribute('fill', '#EA4335'); // Rojo\n    });\n\n    it('debe ser clickeable y navegar a /signin', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const signInLink = screen.getByRole('link');\n      fireEvent.click(signInLink);\n      \n      // Verificar que el enlace es clickeable\n      expect(signInLink).toHaveAttribute('href', '/signin');\n    });\n  });\n\n  describe('Variante Mobile', () => {\n    it('debe renderizar correctamente en mobile', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"mobile\" />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('signed-out')).toBeInTheDocument();\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveClass('bg-white/20', 'hover:bg-white/30');\n    });\n\n    it('debe tener el mismo diseño que desktop', () => {\n      const { rerender } = render(\n        <TestWrapper>\n          <AuthSection variant=\"mobile\" />\n        </TestWrapper>\n      );\n\n      const mobileButton = screen.getByRole('button');\n      const mobileClasses = mobileButton.className;\n\n      rerender(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const desktopButton = screen.getByRole('button');\n      expect(desktopButton.className).toBe(mobileClasses);\n    });\n  });\n\n  describe('Variante TopBar', () => {\n    it('debe renderizar un botón diferente para topbar', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"topbar\" />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Ingresá')).toBeInTheDocument();\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveClass('text-gray-800', 'hover:text-gray-900');\n    });\n\n    it('debe tener estilos específicos para topbar', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"topbar\" />\n        </TestWrapper>\n      );\n\n      const button = screen.getByRole('button');\n      expect(button).toHaveClass('text-xs', 'px-2', 'py-1', 'h-auto');\n    });\n  });\n\n  describe('Estados de Clerk', () => {\n    it('debe mostrar skeleton cuando Clerk no está cargado', () => {\n      mockClerkHooks.useUser.mockReturnValue({\n        isSignedIn: false,\n        user: null,\n        isLoaded: false, // No cargado\n      });\n\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"mobile\" />\n        </TestWrapper>\n      );\n\n      // Verificar que se muestra el skeleton\n      const skeleton = screen.getByRole('generic');\n      expect(skeleton).toHaveClass('animate-pulse');\n    });\n\n    it('debe renderizar UserButton cuando el usuario está autenticado', () => {\n      mockClerkHooks.useUser.mockReturnValue({\n        isSignedIn: true,\n        user: { id: '1', firstName: 'Test' },\n        isLoaded: true,\n      });\n\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('signed-in')).toBeInTheDocument();\n      expect(screen.getByTestId('user-button')).toBeInTheDocument();\n    });\n  });\n\n  describe('Modo Fallback (sin Clerk)', () => {\n    it('debe funcionar sin Clerk habilitado', () => {\n      // Simular componente sin Clerk\n      const { container } = render(<AuthSection variant=\"desktop\" />);\n      \n      // Verificar que se renderiza algo (modo fallback)\n      expect(container.firstChild).toBeInTheDocument();\n    });\n  });\n\n  describe('Accesibilidad', () => {\n    it('debe tener atributos de accesibilidad correctos', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const button = screen.getByRole('button');\n      expect(button).toBeInTheDocument();\n      \n      const link = screen.getByRole('link');\n      expect(link).toHaveAttribute('href', '/signin');\n    });\n\n    it('debe ser navegable por teclado', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const button = screen.getByRole('button');\n      \n      // Simular navegación por teclado\n      fireEvent.keyDown(button, { key: 'Enter' });\n      fireEvent.keyDown(button, { key: ' ' });\n      \n      // Verificar que no hay errores\n      expect(button).toBeInTheDocument();\n    });\n  });\n\n  describe('Interacciones', () => {\n    it('debe manejar hover effects', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const button = screen.getByRole('button');\n      \n      fireEvent.mouseEnter(button);\n      fireEvent.mouseLeave(button);\n      \n      // Verificar que las clases hover están presentes\n      expect(button).toHaveClass('hover:bg-white/30');\n      expect(button).toHaveClass('hover:border-white/50');\n    });\n\n    it('debe manejar efectos de transformación', () => {\n      render(\n        <TestWrapper>\n          <AuthSection variant=\"desktop\" />\n        </TestWrapper>\n      );\n\n      const button = screen.getByRole('button');\n      \n      // Verificar clases de transformación\n      expect(button).toHaveClass('transform', 'hover:scale-105', 'active:scale-95');\n    });\n  });\n\n  describe('Consistencia Visual', () => {\n    it('debe mantener el mismo tamaño de icono en todas las variantes', () => {\n      const variants: Array<'desktop' | 'mobile' | 'topbar'> = ['desktop', 'mobile'];\n      \n      variants.forEach(variant => {\n        const { unmount } = render(\n          <TestWrapper>\n            <AuthSection variant={variant} />\n          </TestWrapper>\n        );\n\n        if (variant !== 'topbar') {\n          const svg = screen.getByRole('link').querySelector('svg');\n          expect(svg).toHaveClass('w-5', 'h-5');\n        }\n        \n        unmount();\n      });\n    });\n  });\n});\n"],"names":["jest","mock","useRouter","push","fn","replace","prefetch","ClerkProvider","children","div","mockClerkHooks","useUser","SignedIn","data-testid","SignedOut","UserButton","TestWrapper","publishableKey","describe","beforeEach","clearAllMocks","mockReturnValue","isSignedIn","user","isLoaded","it","render","AuthSection","variant","expect","screen","getByTestId","toBeInTheDocument","signInLink","getByRole","toHaveAttribute","queryByText","not","googleIcon","querySelector","button","toHaveClass","svgPaths","querySelectorAll","toHaveLength","fireEvent","click","rerender","mobileButton","mobileClasses","className","desktopButton","toBe","getByText","skeleton","id","firstName","container","firstChild","link","keyDown","key","mouseEnter","mouseLeave","variants","forEach","unmount","svg"],"mappings":"AAAA;;;CAGC;AAOD,kBAAkB;AAClBA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,WAAW,IAAO,CAAA;gBAChBC,MAAMH,KAAKI,EAAE;gBACbC,SAASL,KAAKI,EAAE;gBAChBE,UAAUN,KAAKI,EAAE;YACnB,CAAA;IACF,CAAA;AAUAJ,KAAKC,IAAI,CAAC,iBAAiB,IAAO,CAAA;QAChCM,eAAe,CAAC,EAAEC,QAAQ,EAAiC,iBAAK,qBAACC;0BAAKD;;QACtE,GAAGE,cAAc;IACnB,CAAA;;;;;8DAzBkB;wBACwB;wBACZ;oEACN;;;;;;AAWxB,uCAAuC;AACvC,MAAMA,iBAAiB;IACrBC,SAASX,KAAKI,EAAE;IAChBQ,UAAU,CAAC,EAAEJ,QAAQ,EAAiC,iBAAK,qBAACC;YAAII,eAAY;sBAAaL;;IACzFM,WAAW,CAAC,EAAEN,QAAQ,EAAiC,iBAAK,qBAACC;YAAII,eAAY;sBAAcL;;IAC3FO,YAAY,kBAAM,qBAACN;YAAII,eAAY;sBAAc;;AACnD;AAOA,qBAAqB;AACrB,MAAMG,cAAc,CAAC,EAAER,QAAQ,EAAiC,iBAC9D,qBAACD,qBAAa;QAACU,gBAAe;kBAC3BT;;AAILU,SAAS,iCAAiC;IACxCC,WAAW;QACTnB,KAAKoB,aAAa;QAClB,6CAA6C;QAC7CV,eAAeC,OAAO,CAACU,eAAe,CAAC;YACrCC,YAAY;YACZC,MAAM;YACNC,UAAU;QACZ;IACF;IAEAN,SAAS,oBAAoB;QAC3BO,GAAG,mEAAmE;YACpEC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,iDAAiD;YACjDC,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAE1D,kDAAkD;YAClD,MAAMC,aAAaH,cAAM,CAACI,SAAS,CAAC;YACpCL,OAAOI,YAAYE,eAAe,CAAC,QAAQ;QAC7C;QAEAV,GAAG,kDAAkD;YACnDC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,8CAA8C;YAC9CC,OAAOC,cAAM,CAACM,WAAW,CAAC,mBAAmBC,GAAG,CAACL,iBAAiB;YAElE,6CAA6C;YAC7C,MAAMM,aAAaR,cAAM,CAACI,SAAS,CAAC,QAAQK,aAAa,CAAC;YAC1DV,OAAOS,YAAYN,iBAAiB;QACtC;QAEAP,GAAG,iEAAiE;YAClEC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMY,SAASV,cAAM,CAACI,SAAS,CAAC;YAChCL,OAAOW,QAAQC,WAAW,CAAC,eAAe;YAC1CZ,OAAOW,QAAQC,WAAW,CAAC;YAC3BZ,OAAOW,QAAQC,WAAW,CAAC,YAAY;YACvCZ,OAAOW,QAAQC,WAAW,CAAC;QAC7B;QAEAhB,GAAG,wDAAwD;YACzDC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMc,WAAWZ,cAAM,CAACI,SAAS,CAAC,QAAQS,gBAAgB,CAAC;YAE3D,gDAAgD;YAChDd,OAAOa,UAAUE,YAAY,CAAC;YAE9B,gCAAgC;YAChCf,OAAOa,QAAQ,CAAC,EAAE,EAAEP,eAAe,CAAC,QAAQ,YAAY,OAAO;YAC/DN,OAAOa,QAAQ,CAAC,EAAE,EAAEP,eAAe,CAAC,QAAQ,YAAY,QAAQ;YAChEN,OAAOa,QAAQ,CAAC,EAAE,EAAEP,eAAe,CAAC,QAAQ,YAAY,WAAW;YACnEN,OAAOa,QAAQ,CAAC,EAAE,EAAEP,eAAe,CAAC,QAAQ,YAAY,OAAO;QACjE;QAEAV,GAAG,2CAA2C;YAC5CC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMK,aAAaH,cAAM,CAACI,SAAS,CAAC;YACpCW,iBAAS,CAACC,KAAK,CAACb;YAEhB,wCAAwC;YACxCJ,OAAOI,YAAYE,eAAe,CAAC,QAAQ;QAC7C;IACF;IAEAjB,SAAS,mBAAmB;QAC1BO,GAAG,2CAA2C;YAC5CC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzBC,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAE1D,MAAMQ,SAASV,cAAM,CAACI,SAAS,CAAC;YAChCL,OAAOW,QAAQC,WAAW,CAAC,eAAe;QAC5C;QAEAhB,GAAG,0CAA0C;YAC3C,MAAM,EAAEsB,QAAQ,EAAE,GAAGrB,IAAAA,cAAM,gBACzB,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMoB,eAAelB,cAAM,CAACI,SAAS,CAAC;YACtC,MAAMe,gBAAgBD,aAAaE,SAAS;YAE5CH,uBACE,qBAAC/B;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMuB,gBAAgBrB,cAAM,CAACI,SAAS,CAAC;YACvCL,OAAOsB,cAAcD,SAAS,EAAEE,IAAI,CAACH;QACvC;IACF;IAEA/B,SAAS,mBAAmB;QAC1BO,GAAG,kDAAkD;YACnDC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzBC,OAAOC,cAAM,CAACuB,SAAS,CAAC,YAAYrB,iBAAiB;YAErD,MAAMQ,SAASV,cAAM,CAACI,SAAS,CAAC;YAChCL,OAAOW,QAAQC,WAAW,CAAC,iBAAiB;QAC9C;QAEAhB,GAAG,8CAA8C;YAC/CC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMY,SAASV,cAAM,CAACI,SAAS,CAAC;YAChCL,OAAOW,QAAQC,WAAW,CAAC,WAAW,QAAQ,QAAQ;QACxD;IACF;IAEAvB,SAAS,oBAAoB;QAC3BO,GAAG,sDAAsD;YACvDf,eAAeC,OAAO,CAACU,eAAe,CAAC;gBACrCC,YAAY;gBACZC,MAAM;gBACNC,UAAU;YACZ;YAEAE,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,uCAAuC;YACvC,MAAM0B,WAAWxB,cAAM,CAACI,SAAS,CAAC;YAClCL,OAAOyB,UAAUb,WAAW,CAAC;QAC/B;QAEAhB,GAAG,iEAAiE;YAClEf,eAAeC,OAAO,CAACU,eAAe,CAAC;gBACrCC,YAAY;gBACZC,MAAM;oBAAEgC,IAAI;oBAAKC,WAAW;gBAAO;gBACnChC,UAAU;YACZ;YAEAE,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzBC,OAAOC,cAAM,CAACC,WAAW,CAAC,cAAcC,iBAAiB;YACzDH,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBC,iBAAiB;QAC7D;IACF;IAEAd,SAAS,6BAA6B;QACpCO,GAAG,uCAAuC;YACxC,+BAA+B;YAC/B,MAAM,EAAEgC,SAAS,EAAE,GAAG/B,IAAAA,cAAM,gBAAC,qBAACC,oBAAW;gBAACC,SAAQ;;YAElD,kDAAkD;YAClDC,OAAO4B,UAAUC,UAAU,EAAE1B,iBAAiB;QAChD;IACF;IAEAd,SAAS,iBAAiB;QACxBO,GAAG,mDAAmD;YACpDC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMY,SAASV,cAAM,CAACI,SAAS,CAAC;YAChCL,OAAOW,QAAQR,iBAAiB;YAEhC,MAAM2B,OAAO7B,cAAM,CAACI,SAAS,CAAC;YAC9BL,OAAO8B,MAAMxB,eAAe,CAAC,QAAQ;QACvC;QAEAV,GAAG,kCAAkC;YACnCC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMY,SAASV,cAAM,CAACI,SAAS,CAAC;YAEhC,iCAAiC;YACjCW,iBAAS,CAACe,OAAO,CAACpB,QAAQ;gBAAEqB,KAAK;YAAQ;YACzChB,iBAAS,CAACe,OAAO,CAACpB,QAAQ;gBAAEqB,KAAK;YAAI;YAErC,+BAA+B;YAC/BhC,OAAOW,QAAQR,iBAAiB;QAClC;IACF;IAEAd,SAAS,iBAAiB;QACxBO,GAAG,8BAA8B;YAC/BC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMY,SAASV,cAAM,CAACI,SAAS,CAAC;YAEhCW,iBAAS,CAACiB,UAAU,CAACtB;YACrBK,iBAAS,CAACkB,UAAU,CAACvB;YAErB,iDAAiD;YACjDX,OAAOW,QAAQC,WAAW,CAAC;YAC3BZ,OAAOW,QAAQC,WAAW,CAAC;QAC7B;QAEAhB,GAAG,0CAA0C;YAC3CC,IAAAA,cAAM,gBACJ,qBAACV;0BACC,cAAA,qBAACW,oBAAW;oBAACC,SAAQ;;;YAIzB,MAAMY,SAASV,cAAM,CAACI,SAAS,CAAC;YAEhC,qCAAqC;YACrCL,OAAOW,QAAQC,WAAW,CAAC,aAAa,mBAAmB;QAC7D;IACF;IAEAvB,SAAS,uBAAuB;QAC9BO,GAAG,iEAAiE;YAClE,MAAMuC,WAAmD;gBAAC;gBAAW;aAAS;YAE9EA,SAASC,OAAO,CAACrC,CAAAA;gBACf,MAAM,EAAEsC,OAAO,EAAE,GAAGxC,IAAAA,cAAM,gBACxB,qBAACV;8BACC,cAAA,qBAACW,oBAAW;wBAACC,SAASA;;;gBAI1B,IAAIA,YAAY,UAAU;oBACxB,MAAMuC,MAAMrC,cAAM,CAACI,SAAS,CAAC,QAAQK,aAAa,CAAC;oBACnDV,OAAOsC,KAAK1B,WAAW,CAAC,OAAO;gBACjC;gBAEAyB;YACF;QACF;IACF;AACF"}