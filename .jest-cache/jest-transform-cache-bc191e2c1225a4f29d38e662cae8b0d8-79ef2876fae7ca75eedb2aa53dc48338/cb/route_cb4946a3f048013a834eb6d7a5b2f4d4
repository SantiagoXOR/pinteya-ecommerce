2926f8793333011f81f06381771a3eb5
// ===================================
// API: /api/search/trending - B√∫squedas populares/trending
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _supabase = require("../../../../lib/supabase");
// B√∫squedas trending por defecto (fallback)
const defaultTrendingSearches = [
    {
        id: "trending-1",
        query: "Pintura l√°tex",
        count: 156,
        category: "pinturas",
        href: "/search?q=pintura+latex",
        type: "trending"
    },
    {
        id: "trending-2",
        query: "Sherwin Williams",
        count: 142,
        category: "marcas",
        href: "/search?q=sherwin+williams",
        type: "trending"
    },
    {
        id: "trending-3",
        query: "Rodillos premium",
        count: 98,
        category: "herramientas",
        href: "/search?q=rodillos+premium",
        type: "trending"
    },
    {
        id: "trending-4",
        query: "Pinceles",
        count: 87,
        category: "herramientas",
        href: "/search?q=pinceles",
        type: "trending"
    },
    {
        id: "trending-5",
        query: "Impermeabilizante",
        count: 76,
        category: "pinturas",
        href: "/search?q=impermeabilizante",
        type: "trending"
    },
    {
        id: "trending-6",
        query: "Petrilac",
        count: 65,
        category: "marcas",
        href: "/search?q=petrilac",
        type: "trending"
    }
];
async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        const limit = parseInt(searchParams.get('limit') || '6');
        const days = parseInt(searchParams.get('days') || '7');
        const category = searchParams.get('category');
        console.log('üî• API /api/search/trending: Obteniendo b√∫squedas trending', {
            limit,
            days,
            category
        });
        const supabase = (0, _supabase.getSupabaseClient)();
        let trendingSearches = [];
        // Intentar obtener b√∫squedas trending reales del sistema de analytics
        if (supabase) {
            try {
                const startDate = new Date();
                startDate.setDate(startDate.getDate() - days);
                // Query para obtener b√∫squedas m√°s populares de analytics_events
                let query = supabase.from('analytics_events').select('label, metadata').eq('category', 'search').eq('action', 'search_query').gte('created_at', startDate.toISOString()).not('label', 'is', null);
                if (category) {
                    query = query.eq('metadata->>category', category);
                }
                const { data: analyticsData, error } = await query;
                if (!error && analyticsData && analyticsData.length > 0) {
                    // Procesar datos de analytics para obtener trending
                    const searchCounts = new Map();
                    const searchCategories = new Map();
                    analyticsData.forEach((event)=>{
                        if (event.label) {
                            const query = event.label.toLowerCase().trim();
                            if (query.length > 2) {
                                searchCounts.set(query, (searchCounts.get(query) || 0) + 1);
                                // Extraer categor√≠a del metadata si existe
                                if (event.metadata && event.metadata.category) {
                                    searchCategories.set(query, event.metadata.category);
                                }
                            }
                        }
                    });
                    // Convertir a array y ordenar por popularidad
                    const sortedSearches = Array.from(searchCounts.entries()).sort((a, b)=>b[1] - a[1]).slice(0, limit);
                    trendingSearches = sortedSearches.map(([query, count], index)=>({
                            id: `trending-real-${index + 1}`,
                            query: query.charAt(0).toUpperCase() + query.slice(1),
                            count,
                            category: searchCategories.get(query),
                            href: `/search?q=${encodeURIComponent(query)}`,
                            type: 'trending'
                        }));
                    console.log('‚úÖ B√∫squedas trending obtenidas de analytics:', trendingSearches.length);
                }
            } catch (analyticsError) {
                console.warn('‚ö†Ô∏è Error obteniendo trending de analytics, usando fallback:', analyticsError);
            }
        }
        // Si no hay datos reales o hay pocos, usar datos por defecto
        if (trendingSearches.length < 3) {
            console.log('üìã Usando b√∫squedas trending por defecto');
            let filteredDefaults = defaultTrendingSearches;
            // Filtrar por categor√≠a si se especifica
            if (category) {
                filteredDefaults = defaultTrendingSearches.filter((search)=>search.category === category);
            }
            // Combinar datos reales con defaults si es necesario
            const needed = limit - trendingSearches.length;
            const additionalSearches = filteredDefaults.slice(0, needed);
            trendingSearches = [
                ...trendingSearches,
                ...additionalSearches
            ];
        }
        // Limitar al n√∫mero solicitado
        trendingSearches = trendingSearches.slice(0, limit);
        const response = {
            data: {
                trending: trendingSearches,
                lastUpdated: new Date().toISOString()
            },
            success: true
        };
        console.log('üî• Trending searches response:', {
            count: trendingSearches.length,
            hasRealData: trendingSearches.some((s)=>s.id.includes('real')),
            categories: [
                ...new Set(trendingSearches.map((s)=>s.category).filter(Boolean))
            ]
        });
        return _server.NextResponse.json(response);
    } catch (error) {
        console.error('‚ùå Error en /api/search/trending:', error);
        // En caso de error, devolver b√∫squedas por defecto
        const fallbackResponse = {
            data: {
                trending: defaultTrendingSearches.slice(0, parseInt(request.nextUrl.searchParams.get('limit') || '6')),
                lastUpdated: new Date().toISOString()
            },
            success: true
        };
        return _server.NextResponse.json(fallbackResponse);
    }
}
async function POST(request) {
    try {
        // Validar que el request tenga contenido
        const contentType = request.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            return _server.NextResponse.json({
                error: 'Content-Type debe ser application/json'
            }, {
                status: 400
            });
        }
        // Obtener el texto del body primero para validar
        const bodyText = await request.text();
        if (!bodyText || bodyText.trim() === '' || bodyText === '""' || bodyText === "''") {
            return _server.NextResponse.json({
                error: 'Body de la request no puede estar vac√≠o'
            }, {
                status: 400
            });
        }
        // Parsear JSON de forma segura
        let requestData;
        try {
            requestData = JSON.parse(bodyText);
        } catch (parseError) {
            console.error('Error parsing JSON in POST /api/search/trending:', parseError);
            return _server.NextResponse.json({
                error: 'JSON inv√°lido en el body de la request'
            }, {
                status: 400
            });
        }
        const { query, category, userId, sessionId } = requestData;
        if (!query || typeof query !== 'string') {
            return _server.NextResponse.json({
                error: 'Query de b√∫squeda requerida'
            }, {
                status: 400
            });
        }
        const supabase = (0, _supabase.getSupabaseClient)();
        if (supabase) {
            // Registrar la b√∫squeda en analytics
            const { error } = await supabase.from('analytics_events').insert({
                event_name: 'search_query',
                category: 'search',
                action: 'search_query',
                label: query.toLowerCase().trim(),
                user_id: userId,
                session_id: sessionId || 'anonymous',
                page: '/search',
                metadata: {
                    category: category,
                    timestamp: new Date().toISOString()
                }
            });
            if (error) {
                console.error('Error registrando b√∫squeda en analytics:', error);
            } else {
                console.log('‚úÖ B√∫squeda registrada en analytics:', query);
            }
        }
        return _server.NextResponse.json({
            success: true
        });
    } catch (error) {
        console.error('‚ùå Error registrando b√∫squeda:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,