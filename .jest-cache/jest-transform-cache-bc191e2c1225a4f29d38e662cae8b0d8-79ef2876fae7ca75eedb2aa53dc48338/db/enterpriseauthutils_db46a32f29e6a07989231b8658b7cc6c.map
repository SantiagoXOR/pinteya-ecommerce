{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\enterprise-auth-utils.ts"],"sourcesContent":["/**\n * Utilidades de Autenticación Enterprise\n * Sistema centralizado que combina Clerk + Supabase con patrones enterprise\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\nimport { auth, getAuth } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { validateJWTIntegrity, validateJWTPermissions } from './jwt-validation';\nimport { validateRequestOrigin } from './csrf-protection';\nimport { checkRateLimit, RATE_LIMIT_CONFIGS } from './rate-limiting';\nimport { logAuthSuccess, logAuthFailure, logPermissionDenied } from './security-audit';\n\n// =====================================================\n// TIPOS Y INTERFACES ENTERPRISE\n// =====================================================\n\nexport interface EnterpriseAuthContext {\n  // Información del usuario\n  userId: string;\n  sessionId?: string;\n  email?: string;\n  role: 'admin' | 'user' | 'moderator';\n  permissions: string[];\n  \n  // Información de la sesión\n  sessionValid: boolean;\n  sessionMetadata?: any;\n  \n  // Información de seguridad\n  securityLevel: 'low' | 'medium' | 'high' | 'critical';\n  ipAddress?: string;\n  userAgent?: string;\n  \n  // Clientes de base de datos\n  supabase: typeof supabaseAdmin;\n  \n  // Información de validaciones\n  validations: {\n    jwtValid: boolean;\n    csrfValid: boolean;\n    rateLimitPassed: boolean;\n    originValid: boolean;\n  };\n}\n\nexport interface EnterpriseAuthResult {\n  success: boolean;\n  context?: EnterpriseAuthContext;\n  error?: string;\n  code?: string;\n  status?: number;\n  retryAfter?: number;\n}\n\nexport interface EnterpriseAuthOptions {\n  requiredRole?: 'admin' | 'user' | 'moderator';\n  requiredPermissions?: string[];\n  securityLevel?: 'low' | 'medium' | 'high' | 'critical';\n  enableRateLimit?: boolean;\n  enableCSRFProtection?: boolean;\n  enableJWTValidation?: boolean;\n  rateLimitType?: keyof typeof RATE_LIMIT_CONFIGS;\n}\n\n// =====================================================\n// CONFIGURACIONES ENTERPRISE\n// =====================================================\n\nconst ENTERPRISE_CONFIGS = {\n  // Configuración para operaciones críticas (admin, pagos)\n  critical: {\n    requiredRole: 'admin' as const,\n    securityLevel: 'critical' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'admin' as const,\n    requiredPermissions: ['admin_access']\n  },\n  \n  // Configuración para operaciones de alto nivel (gestión de contenido)\n  high: {\n    requiredRole: 'admin' as const,\n    securityLevel: 'high' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'admin' as const\n  },\n  \n  // Configuración para operaciones moderadas (APIs de productos)\n  medium: {\n    securityLevel: 'medium' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: false,\n    enableJWTValidation: false,\n    rateLimitType: 'products' as const\n  },\n  \n  // Configuración para operaciones básicas (consultas públicas)\n  low: {\n    securityLevel: 'low' as const,\n    enableRateLimit: true,\n    enableCSRFProtection: false,\n    enableJWTValidation: false,\n    rateLimitType: 'general' as const\n  }\n};\n\n// =====================================================\n// FUNCIONES PRINCIPALES ENTERPRISE\n// =====================================================\n\n/**\n * Función principal de autenticación enterprise\n * Combina todas las validaciones y retorna contexto completo\n */\nexport async function getEnterpriseAuthContext(\n  request: NextRequest | NextApiRequest,\n  options: EnterpriseAuthOptions = {}\n): Promise<EnterpriseAuthResult> {\n  try {\n    const startTime = Date.now();\n    \n    // Aplicar configuración predefinida si se especifica nivel de seguridad\n    const config = options.securityLevel \n      ? { ...ENTERPRISE_CONFIGS[options.securityLevel], ...options }\n      : options;\n\n    // 1. VALIDACIÓN DE RATE LIMITING\n    if (config.enableRateLimit && config.rateLimitType) {\n      const rateLimitResult = await checkRateLimit(\n        request,\n        RATE_LIMIT_CONFIGS[config.rateLimitType],\n        `enterprise_${config.rateLimitType}`\n      );\n\n      if (!rateLimitResult.allowed) {\n        await logAuthFailure(\n          'unknown',\n          `Rate limit exceeded: ${rateLimitResult.error}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: rateLimitResult.error || 'Rate limit exceeded',\n          code: 'RATE_LIMIT_EXCEEDED',\n          status: 429,\n          retryAfter: rateLimitResult.retryAfter\n        };\n      }\n    }\n\n    // 2. VALIDACIÓN CSRF\n    let csrfValid = true;\n    if (config.enableCSRFProtection) {\n      const csrfResult = await validateRequestOrigin(request);\n      csrfValid = csrfResult.valid;\n      \n      if (!csrfValid) {\n        await logAuthFailure(\n          'unknown',\n          `CSRF validation failed: ${csrfResult.error}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: csrfResult.error || 'Invalid request origin',\n          code: 'CSRF_VALIDATION_FAILED',\n          status: 403\n        };\n      }\n    }\n\n    // 3. AUTENTICACIÓN BÁSICA CON CLERK\n    let userId: string;\n    let sessionId: string | undefined;\n    let userEmail: string | undefined;\n\n    if (request && 'query' in request) {\n      // Pages Router\n      const { userId: authUserId, sessionId: authSessionId } = getAuth(request as NextApiRequest);\n      if (!authUserId) {\n        return {\n          success: false,\n          error: 'Usuario no autenticado',\n          code: 'NOT_AUTHENTICATED',\n          status: 401\n        };\n      }\n      userId = authUserId;\n      sessionId = authSessionId;\n    } else {\n      // App Router\n      const { userId: authUserId, sessionId: authSessionId } = await auth();\n      if (!authUserId) {\n        return {\n          success: false,\n          error: 'Usuario no autenticado',\n          code: 'NOT_AUTHENTICATED',\n          status: 401\n        };\n      }\n      userId = authUserId;\n      sessionId = authSessionId;\n    }\n\n    // 4. VALIDACIÓN JWT\n    let jwtValid = true;\n    if (config.enableJWTValidation) {\n      const jwtResult = await validateJWTIntegrity(request);\n      jwtValid = jwtResult.valid;\n      \n      if (!jwtValid) {\n        await logAuthFailure(\n          userId,\n          `JWT validation failed: ${jwtResult.error}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: jwtResult.error || 'Invalid JWT token',\n          code: 'JWT_VALIDATION_FAILED',\n          status: 401\n        };\n      }\n\n      // Validar permisos específicos si se requieren\n      if (config.requiredRole || config.requiredPermissions) {\n        const permissionResult = await validateJWTPermissions(\n          config.requiredRole || '',\n          config.requiredPermissions || [],\n          request\n        );\n        \n        if (!permissionResult.valid) {\n          await logPermissionDenied(\n            userId,\n            `Permission validation failed: ${permissionResult.error}`,\n            request\n          );\n          \n          return {\n            success: false,\n            error: permissionResult.error || 'Insufficient permissions',\n            code: 'INSUFFICIENT_PERMISSIONS',\n            status: 403\n          };\n        }\n      }\n    }\n\n    // 5. OBTENER INFORMACIÓN DEL USUARIO DESDE SUPABASE\n    const { data: userProfile, error: userError } = await supabaseAdmin\n      .from('user_profiles')\n      .select('*')\n      .eq('clerk_user_id', userId)\n      .single();\n\n    if (userError && userError.code !== 'PGRST116') {\n      console.error('[ENTERPRISE_AUTH] Error obteniendo perfil de usuario:', userError);\n    }\n\n    // 6. DETERMINAR ROL Y PERMISOS\n    const userRole = userProfile?.role || 'user';\n    const userPermissions = userProfile?.permissions || [];\n\n    // Validar rol requerido\n    if (config.requiredRole && userRole !== config.requiredRole) {\n      await logPermissionDenied(\n        userId,\n        `Role validation failed: required ${config.requiredRole}, got ${userRole}`,\n        request\n      );\n      \n      return {\n        success: false,\n        error: `Rol requerido: ${config.requiredRole}`,\n        code: 'INSUFFICIENT_ROLE',\n        status: 403\n      };\n    }\n\n    // Validar permisos requeridos\n    if (config.requiredPermissions && config.requiredPermissions.length > 0) {\n      const hasAllPermissions = config.requiredPermissions.every(\n        permission => userPermissions.includes(permission)\n      );\n      \n      if (!hasAllPermissions) {\n        await logPermissionDenied(\n          userId,\n          `Permission validation failed: missing ${config.requiredPermissions.join(', ')}`,\n          request\n        );\n        \n        return {\n          success: false,\n          error: `Permisos insuficientes: ${config.requiredPermissions.join(', ')}`,\n          code: 'INSUFFICIENT_PERMISSIONS',\n          status: 403\n        };\n      }\n    }\n\n    // 7. OBTENER INFORMACIÓN ADICIONAL\n    const ipAddress = getClientIP(request);\n    const userAgent = getHeader(request, 'user-agent') || 'unknown';\n\n    // 8. CREAR CONTEXTO ENTERPRISE\n    const context: EnterpriseAuthContext = {\n      userId,\n      sessionId,\n      email: userProfile?.email || userEmail,\n      role: userRole as 'admin' | 'user' | 'moderator',\n      permissions: userPermissions,\n      sessionValid: !!sessionId,\n      sessionMetadata: userProfile?.metadata,\n      securityLevel: config.securityLevel || 'medium',\n      ipAddress,\n      userAgent,\n      supabase: supabaseAdmin,\n      validations: {\n        jwtValid,\n        csrfValid,\n        rateLimitPassed: true,\n        originValid: csrfValid\n      }\n    };\n\n    // 9. LOG DE ÉXITO\n    await logAuthSuccess(userId, {\n      ip_address: ipAddress,\n      user_agent: userAgent,\n      session_id: sessionId,\n      security_level: config.securityLevel || 'medium',\n      permissions: userPermissions,\n      role: userRole\n    }, request);\n\n    const duration = Date.now() - startTime;\n    console.log(`[ENTERPRISE_AUTH] Autenticación exitosa para ${userId} en ${duration}ms`);\n\n    return {\n      success: true,\n      context\n    };\n\n  } catch (error) {\n    console.error('[ENTERPRISE_AUTH] Error en autenticación enterprise:', error);\n    \n    await logAuthFailure(\n      'unknown',\n      `Enterprise auth error: ${error.message}`,\n      request\n    );\n    \n    return {\n      success: false,\n      error: 'Error interno de autenticación',\n      code: 'INTERNAL_AUTH_ERROR',\n      status: 500\n    };\n  }\n}\n\n// =====================================================\n// FUNCIONES AUXILIARES\n// =====================================================\n\n/**\n * Obtiene la IP del cliente\n */\nfunction getClientIP(request: NextRequest | NextApiRequest): string {\n  if ('ip' in request && request.ip) {\n    return request.ip;\n  }\n  \n  const forwarded = getHeader(request, 'x-forwarded-for');\n  const realIP = getHeader(request, 'x-real-ip');\n  const cfIP = getHeader(request, 'cf-connecting-ip');\n  \n  return forwarded?.split(',')[0] || realIP || cfIP || 'unknown';\n}\n\n/**\n * Obtiene un header de manera compatible\n */\nfunction getHeader(request: NextRequest | NextApiRequest, headerName: string): string | null {\n  if ('headers' in request && typeof request.headers.get === 'function') {\n    return (request as NextRequest).headers.get(headerName);\n  } else if ('headers' in request) {\n    const header = (request as NextApiRequest).headers[headerName];\n    return Array.isArray(header) ? header[0] : header || null;\n  }\n  return null;\n}\n\n// =====================================================\n// FUNCIONES DE CONVENIENCIA ENTERPRISE\n// =====================================================\n\n/**\n * Autenticación para operaciones críticas (admin, pagos)\n */\nexport async function requireCriticalAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, { securityLevel: 'critical' });\n}\n\n/**\n * Autenticación para operaciones de alto nivel (gestión de contenido)\n */\nexport async function requireHighAuth(\n  request: NextRequest | NextApiRequest,\n  requiredPermissions?: string[]\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, {\n    securityLevel: 'high',\n    requiredPermissions\n  });\n}\n\n/**\n * Autenticación para operaciones moderadas (APIs de productos)\n */\nexport async function requireMediumAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, { securityLevel: 'medium' });\n}\n\n/**\n * Autenticación básica para operaciones públicas con rate limiting\n */\nexport async function requireBasicAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, { securityLevel: 'low' });\n}\n\n/**\n * Autenticación específica para admin con permisos personalizados\n */\nexport async function requireAdminAuth(\n  request: NextRequest | NextApiRequest,\n  requiredPermissions: string[] = ['admin_access']\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, {\n    requiredRole: 'admin',\n    requiredPermissions,\n    securityLevel: 'critical',\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'admin'\n  });\n}\n\n/**\n * Autenticación para APIs de pagos con máxima seguridad\n */\nexport async function requirePaymentAuth(\n  request: NextRequest | NextApiRequest\n): Promise<EnterpriseAuthResult> {\n  return getEnterpriseAuthContext(request, {\n    securityLevel: 'critical',\n    enableRateLimit: true,\n    enableCSRFProtection: true,\n    enableJWTValidation: true,\n    rateLimitType: 'payments',\n    requiredPermissions: ['payment_access']\n  });\n}\n\n/**\n * Middleware enterprise que maneja automáticamente errores\n */\nexport function withEnterpriseAuth(\n  authFunction: (request: NextRequest | NextApiRequest) => Promise<EnterpriseAuthResult>\n) {\n  return function (handler: Function) {\n    return async (request: NextRequest | NextApiRequest, ...args: any[]) => {\n      try {\n        const authResult = await authFunction(request);\n\n        if (!authResult.success) {\n          const errorResponse = {\n            success: false,\n            error: authResult.error,\n            code: authResult.code,\n            timestamp: new Date().toISOString(),\n            enterprise: true\n          };\n\n          const headers: Record<string, string> = {\n            'Content-Type': 'application/json'\n          };\n\n          if (authResult.retryAfter) {\n            headers['Retry-After'] = authResult.retryAfter.toString();\n          }\n\n          if ('query' in request) {\n            // Pages Router\n            const res = args[0] as any;\n            Object.entries(headers).forEach(([key, value]) => {\n              res.setHeader(key, value);\n            });\n            return res.status(authResult.status || 401).json(errorResponse);\n          } else {\n            // App Router\n            return new Response(JSON.stringify(errorResponse), {\n              status: authResult.status || 401,\n              headers\n            });\n          }\n        }\n\n        // Añadir contexto enterprise al request\n        (request as any).enterpriseAuth = authResult.context;\n\n        return handler(request, ...args);\n\n      } catch (error) {\n        console.error('[ENTERPRISE_AUTH] Error en middleware:', error);\n\n        const errorResponse = {\n          success: false,\n          error: 'Error interno de autenticación enterprise',\n          code: 'ENTERPRISE_AUTH_ERROR',\n          timestamp: new Date().toISOString()\n        };\n\n        if ('query' in request) {\n          // Pages Router\n          const res = args[0] as any;\n          return res.status(500).json(errorResponse);\n        } else {\n          // App Router\n          return new Response(JSON.stringify(errorResponse), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n      }\n    };\n  };\n}\n\n// =====================================================\n// MIDDLEWARES PREDEFINIDOS ENTERPRISE\n// =====================================================\n\n/**\n * Middleware para operaciones críticas\n */\nexport const withCriticalAuth = () => withEnterpriseAuth(requireCriticalAuth);\n\n/**\n * Middleware para operaciones de alto nivel\n */\nexport const withHighAuth = (requiredPermissions?: string[]) =>\n  withEnterpriseAuth((req) => requireHighAuth(req, requiredPermissions));\n\n/**\n * Middleware para operaciones moderadas\n */\nexport const withMediumAuth = () => withEnterpriseAuth(requireMediumAuth);\n\n/**\n * Middleware para operaciones básicas\n */\nexport const withBasicAuth = () => withEnterpriseAuth(requireBasicAuth);\n\n/**\n * Middleware para admin\n */\nexport const withAdminAuth = (requiredPermissions?: string[]) =>\n  withEnterpriseAuth((req) => requireAdminAuth(req, requiredPermissions));\n\n/**\n * Middleware para pagos\n */\nexport const withPaymentAuth = () => withEnterpriseAuth(requirePaymentAuth);\n"],"names":["getEnterpriseAuthContext","requireAdminAuth","requireBasicAuth","requireCriticalAuth","requireHighAuth","requireMediumAuth","requirePaymentAuth","withAdminAuth","withBasicAuth","withCriticalAuth","withEnterpriseAuth","withHighAuth","withMediumAuth","withPaymentAuth","ENTERPRISE_CONFIGS","critical","requiredRole","securityLevel","enableRateLimit","enableCSRFProtection","enableJWTValidation","rateLimitType","requiredPermissions","high","medium","low","request","options","startTime","Date","now","config","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","allowed","logAuthFailure","error","success","code","status","retryAfter","csrfValid","csrfResult","validateRequestOrigin","valid","userId","sessionId","userEmail","authUserId","authSessionId","getAuth","auth","jwtValid","jwtResult","validateJWTIntegrity","permissionResult","validateJWTPermissions","logPermissionDenied","data","userProfile","userError","supabaseAdmin","from","select","eq","single","console","userRole","role","userPermissions","permissions","length","hasAllPermissions","every","permission","includes","join","ipAddress","getClientIP","userAgent","getHeader","context","email","sessionValid","sessionMetadata","metadata","supabase","validations","rateLimitPassed","originValid","logAuthSuccess","ip_address","user_agent","session_id","security_level","duration","log","message","ip","forwarded","realIP","cfIP","split","headerName","headers","get","header","Array","isArray","authFunction","handler","args","authResult","errorResponse","timestamp","toISOString","enterprise","toString","res","Object","entries","forEach","key","value","setHeader","json","Response","JSON","stringify","enterpriseAuth","req"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;IAoHqBA,wBAAwB;eAAxBA;;IA2UAC,gBAAgB;eAAhBA;;IATAC,gBAAgB;eAAhBA;;IA/BAC,mBAAmB;eAAnBA;;IASAC,eAAe;eAAfA;;IAaAC,iBAAiB;eAAjBA;;IAoCAC,kBAAkB;eAAlBA;;IAoHTC,aAAa;eAAbA;;IALAC,aAAa;eAAbA;;IAhBAC,gBAAgB;eAAhBA;;IA/EGC,kBAAkB;eAAlBA;;IAoFHC,YAAY;eAAZA;;IAMAC,cAAc;eAAdA;;IAgBAC,eAAe;eAAfA;;;wBAvkBiB;0BACA;+BAC+B;gCACvB;8BACa;+BACiB;AAsDpE,wDAAwD;AACxD,6BAA6B;AAC7B,wDAAwD;AAExD,MAAMC,qBAAqB;IACzB,yDAAyD;IACzDC,UAAU;QACRC,cAAc;QACdC,eAAe;QACfC,iBAAiB;QACjBC,sBAAsB;QACtBC,qBAAqB;QACrBC,eAAe;QACfC,qBAAqB;YAAC;SAAe;IACvC;IAEA,sEAAsE;IACtEC,MAAM;QACJP,cAAc;QACdC,eAAe;QACfC,iBAAiB;QACjBC,sBAAsB;QACtBC,qBAAqB;QACrBC,eAAe;IACjB;IAEA,+DAA+D;IAC/DG,QAAQ;QACNP,eAAe;QACfC,iBAAiB;QACjBC,sBAAsB;QACtBC,qBAAqB;QACrBC,eAAe;IACjB;IAEA,8DAA8D;IAC9DI,KAAK;QACHR,eAAe;QACfC,iBAAiB;QACjBC,sBAAsB;QACtBC,qBAAqB;QACrBC,eAAe;IACjB;AACF;AAUO,eAAerB,yBACpB0B,OAAqC,EACrCC,UAAiC,CAAC,CAAC;IAEnC,IAAI;QACF,MAAMC,YAAYC,KAAKC,GAAG;QAE1B,wEAAwE;QACxE,MAAMC,SAASJ,QAAQV,aAAa,GAChC;YAAE,GAAGH,kBAAkB,CAACa,QAAQV,aAAa,CAAC;YAAE,GAAGU,OAAO;QAAC,IAC3DA;QAEJ,iCAAiC;QACjC,IAAII,OAAOb,eAAe,IAAIa,OAAOV,aAAa,EAAE;YAClD,MAAMW,kBAAkB,MAAMC,IAAAA,4BAAc,EAC1CP,SACAQ,gCAAkB,CAACH,OAAOV,aAAa,CAAC,EACxC,CAAC,WAAW,EAAEU,OAAOV,aAAa,EAAE;YAGtC,IAAI,CAACW,gBAAgBG,OAAO,EAAE;gBAC5B,MAAMC,IAAAA,6BAAc,EAClB,WACA,CAAC,qBAAqB,EAAEJ,gBAAgBK,KAAK,EAAE,EAC/CX;gBAGF,OAAO;oBACLY,SAAS;oBACTD,OAAOL,gBAAgBK,KAAK,IAAI;oBAChCE,MAAM;oBACNC,QAAQ;oBACRC,YAAYT,gBAAgBS,UAAU;gBACxC;YACF;QACF;QAEA,qBAAqB;QACrB,IAAIC,YAAY;QAChB,IAAIX,OAAOZ,oBAAoB,EAAE;YAC/B,MAAMwB,aAAa,MAAMC,IAAAA,qCAAqB,EAAClB;YAC/CgB,YAAYC,WAAWE,KAAK;YAE5B,IAAI,CAACH,WAAW;gBACd,MAAMN,IAAAA,6BAAc,EAClB,WACA,CAAC,wBAAwB,EAAEO,WAAWN,KAAK,EAAE,EAC7CX;gBAGF,OAAO;oBACLY,SAAS;oBACTD,OAAOM,WAAWN,KAAK,IAAI;oBAC3BE,MAAM;oBACNC,QAAQ;gBACV;YACF;QACF;QAEA,oCAAoC;QACpC,IAAIM;QACJ,IAAIC;QACJ,IAAIC;QAEJ,IAAItB,WAAW,WAAWA,SAAS;YACjC,eAAe;YACf,MAAM,EAAEoB,QAAQG,UAAU,EAAEF,WAAWG,aAAa,EAAE,GAAGC,IAAAA,eAAO,EAACzB;YACjE,IAAI,CAACuB,YAAY;gBACf,OAAO;oBACLX,SAAS;oBACTD,OAAO;oBACPE,MAAM;oBACNC,QAAQ;gBACV;YACF;YACAM,SAASG;YACTF,YAAYG;QACd,OAAO;YACL,aAAa;YACb,MAAM,EAAEJ,QAAQG,UAAU,EAAEF,WAAWG,aAAa,EAAE,GAAG,MAAME,IAAAA,YAAI;YACnE,IAAI,CAACH,YAAY;gBACf,OAAO;oBACLX,SAAS;oBACTD,OAAO;oBACPE,MAAM;oBACNC,QAAQ;gBACV;YACF;YACAM,SAASG;YACTF,YAAYG;QACd;QAEA,oBAAoB;QACpB,IAAIG,WAAW;QACf,IAAItB,OAAOX,mBAAmB,EAAE;YAC9B,MAAMkC,YAAY,MAAMC,IAAAA,mCAAoB,EAAC7B;YAC7C2B,WAAWC,UAAUT,KAAK;YAE1B,IAAI,CAACQ,UAAU;gBACb,MAAMjB,IAAAA,6BAAc,EAClBU,QACA,CAAC,uBAAuB,EAAEQ,UAAUjB,KAAK,EAAE,EAC3CX;gBAGF,OAAO;oBACLY,SAAS;oBACTD,OAAOiB,UAAUjB,KAAK,IAAI;oBAC1BE,MAAM;oBACNC,QAAQ;gBACV;YACF;YAEA,+CAA+C;YAC/C,IAAIT,OAAOf,YAAY,IAAIe,OAAOT,mBAAmB,EAAE;gBACrD,MAAMkC,mBAAmB,MAAMC,IAAAA,qCAAsB,EACnD1B,OAAOf,YAAY,IAAI,IACvBe,OAAOT,mBAAmB,IAAI,EAAE,EAChCI;gBAGF,IAAI,CAAC8B,iBAAiBX,KAAK,EAAE;oBAC3B,MAAMa,IAAAA,kCAAmB,EACvBZ,QACA,CAAC,8BAA8B,EAAEU,iBAAiBnB,KAAK,EAAE,EACzDX;oBAGF,OAAO;wBACLY,SAAS;wBACTD,OAAOmB,iBAAiBnB,KAAK,IAAI;wBACjCE,MAAM;wBACNC,QAAQ;oBACV;gBACF;YACF;QACF;QAEA,oDAAoD;QACpD,MAAM,EAAEmB,MAAMC,WAAW,EAAEvB,OAAOwB,SAAS,EAAE,GAAG,MAAMC,uBAAa,CAChEC,IAAI,CAAC,iBACLC,MAAM,CAAC,KACPC,EAAE,CAAC,iBAAiBnB,QACpBoB,MAAM;QAET,IAAIL,aAAaA,UAAUtB,IAAI,KAAK,YAAY;YAC9C4B,QAAQ9B,KAAK,CAAC,yDAAyDwB;QACzE;QAEA,+BAA+B;QAC/B,MAAMO,WAAWR,aAAaS,QAAQ;QACtC,MAAMC,kBAAkBV,aAAaW,eAAe,EAAE;QAEtD,wBAAwB;QACxB,IAAIxC,OAAOf,YAAY,IAAIoD,aAAarC,OAAOf,YAAY,EAAE;YAC3D,MAAM0C,IAAAA,kCAAmB,EACvBZ,QACA,CAAC,iCAAiC,EAAEf,OAAOf,YAAY,CAAC,MAAM,EAAEoD,UAAU,EAC1E1C;YAGF,OAAO;gBACLY,SAAS;gBACTD,OAAO,CAAC,eAAe,EAAEN,OAAOf,YAAY,EAAE;gBAC9CuB,MAAM;gBACNC,QAAQ;YACV;QACF;QAEA,8BAA8B;QAC9B,IAAIT,OAAOT,mBAAmB,IAAIS,OAAOT,mBAAmB,CAACkD,MAAM,GAAG,GAAG;YACvE,MAAMC,oBAAoB1C,OAAOT,mBAAmB,CAACoD,KAAK,CACxDC,CAAAA,aAAcL,gBAAgBM,QAAQ,CAACD;YAGzC,IAAI,CAACF,mBAAmB;gBACtB,MAAMf,IAAAA,kCAAmB,EACvBZ,QACA,CAAC,sCAAsC,EAAEf,OAAOT,mBAAmB,CAACuD,IAAI,CAAC,OAAO,EAChFnD;gBAGF,OAAO;oBACLY,SAAS;oBACTD,OAAO,CAAC,wBAAwB,EAAEN,OAAOT,mBAAmB,CAACuD,IAAI,CAAC,OAAO;oBACzEtC,MAAM;oBACNC,QAAQ;gBACV;YACF;QACF;QAEA,mCAAmC;QACnC,MAAMsC,YAAYC,YAAYrD;QAC9B,MAAMsD,YAAYC,UAAUvD,SAAS,iBAAiB;QAEtD,+BAA+B;QAC/B,MAAMwD,UAAiC;YACrCpC;YACAC;YACAoC,OAAOvB,aAAauB,SAASnC;YAC7BqB,MAAMD;YACNG,aAAaD;YACbc,cAAc,CAAC,CAACrC;YAChBsC,iBAAiBzB,aAAa0B;YAC9BrE,eAAec,OAAOd,aAAa,IAAI;YACvC6D;YACAE;YACAO,UAAUzB,uBAAa;YACvB0B,aAAa;gBACXnC;gBACAX;gBACA+C,iBAAiB;gBACjBC,aAAahD;YACf;QACF;QAEA,kBAAkB;QAClB,MAAMiD,IAAAA,6BAAc,EAAC7C,QAAQ;YAC3B8C,YAAYd;YACZe,YAAYb;YACZc,YAAY/C;YACZgD,gBAAgBhE,OAAOd,aAAa,IAAI;YACxCsD,aAAaD;YACbD,MAAMD;QACR,GAAG1C;QAEH,MAAMsE,WAAWnE,KAAKC,GAAG,KAAKF;QAC9BuC,QAAQ8B,GAAG,CAAC,CAAC,6CAA6C,EAAEnD,OAAO,IAAI,EAAEkD,SAAS,EAAE,CAAC;QAErF,OAAO;YACL1D,SAAS;YACT4C;QACF;IAEF,EAAE,OAAO7C,OAAO;QACd8B,QAAQ9B,KAAK,CAAC,wDAAwDA;QAEtE,MAAMD,IAAAA,6BAAc,EAClB,WACA,CAAC,uBAAuB,EAAEC,MAAM6D,OAAO,EAAE,EACzCxE;QAGF,OAAO;YACLY,SAAS;YACTD,OAAO;YACPE,MAAM;YACNC,QAAQ;QACV;IACF;AACF;AAEA,wDAAwD;AACxD,uBAAuB;AACvB,wDAAwD;AAExD;;CAEC,GACD,SAASuC,YAAYrD,OAAqC;IACxD,IAAI,QAAQA,WAAWA,QAAQyE,EAAE,EAAE;QACjC,OAAOzE,QAAQyE,EAAE;IACnB;IAEA,MAAMC,YAAYnB,UAAUvD,SAAS;IACrC,MAAM2E,SAASpB,UAAUvD,SAAS;IAClC,MAAM4E,OAAOrB,UAAUvD,SAAS;IAEhC,OAAO0E,WAAWG,MAAM,IAAI,CAAC,EAAE,IAAIF,UAAUC,QAAQ;AACvD;AAEA;;CAEC,GACD,SAASrB,UAAUvD,OAAqC,EAAE8E,UAAkB;IAC1E,IAAI,aAAa9E,WAAW,OAAOA,QAAQ+E,OAAO,CAACC,GAAG,KAAK,YAAY;QACrE,OAAO,AAAChF,QAAwB+E,OAAO,CAACC,GAAG,CAACF;IAC9C,OAAO,IAAI,aAAa9E,SAAS;QAC/B,MAAMiF,SAAS,AAACjF,QAA2B+E,OAAO,CAACD,WAAW;QAC9D,OAAOI,MAAMC,OAAO,CAACF,UAAUA,MAAM,CAAC,EAAE,GAAGA,UAAU;IACvD;IACA,OAAO;AACT;AASO,eAAexG,oBACpBuB,OAAqC;IAErC,OAAO1B,yBAAyB0B,SAAS;QAAET,eAAe;IAAW;AACvE;AAKO,eAAeb,gBACpBsB,OAAqC,EACrCJ,mBAA8B;IAE9B,OAAOtB,yBAAyB0B,SAAS;QACvCT,eAAe;QACfK;IACF;AACF;AAKO,eAAejB,kBACpBqB,OAAqC;IAErC,OAAO1B,yBAAyB0B,SAAS;QAAET,eAAe;IAAS;AACrE;AAKO,eAAef,iBACpBwB,OAAqC;IAErC,OAAO1B,yBAAyB0B,SAAS;QAAET,eAAe;IAAM;AAClE;AAKO,eAAehB,iBACpByB,OAAqC,EACrCJ,sBAAgC;IAAC;CAAe;IAEhD,OAAOtB,yBAAyB0B,SAAS;QACvCV,cAAc;QACdM;QACAL,eAAe;QACfC,iBAAiB;QACjBC,sBAAsB;QACtBC,qBAAqB;QACrBC,eAAe;IACjB;AACF;AAKO,eAAef,mBACpBoB,OAAqC;IAErC,OAAO1B,yBAAyB0B,SAAS;QACvCT,eAAe;QACfC,iBAAiB;QACjBC,sBAAsB;QACtBC,qBAAqB;QACrBC,eAAe;QACfC,qBAAqB;YAAC;SAAiB;IACzC;AACF;AAKO,SAASZ,mBACdoG,YAAsF;IAEtF,OAAO,SAAUC,OAAiB;QAChC,OAAO,OAAOrF,SAAuC,GAAGsF;YACtD,IAAI;gBACF,MAAMC,aAAa,MAAMH,aAAapF;gBAEtC,IAAI,CAACuF,WAAW3E,OAAO,EAAE;oBACvB,MAAM4E,gBAAgB;wBACpB5E,SAAS;wBACTD,OAAO4E,WAAW5E,KAAK;wBACvBE,MAAM0E,WAAW1E,IAAI;wBACrB4E,WAAW,IAAItF,OAAOuF,WAAW;wBACjCC,YAAY;oBACd;oBAEA,MAAMZ,UAAkC;wBACtC,gBAAgB;oBAClB;oBAEA,IAAIQ,WAAWxE,UAAU,EAAE;wBACzBgE,OAAO,CAAC,cAAc,GAAGQ,WAAWxE,UAAU,CAAC6E,QAAQ;oBACzD;oBAEA,IAAI,WAAW5F,SAAS;wBACtB,eAAe;wBACf,MAAM6F,MAAMP,IAAI,CAAC,EAAE;wBACnBQ,OAAOC,OAAO,CAAChB,SAASiB,OAAO,CAAC,CAAC,CAACC,KAAKC,MAAM;4BAC3CL,IAAIM,SAAS,CAACF,KAAKC;wBACrB;wBACA,OAAOL,IAAI/E,MAAM,CAACyE,WAAWzE,MAAM,IAAI,KAAKsF,IAAI,CAACZ;oBACnD,OAAO;wBACL,aAAa;wBACb,OAAO,IAAIa,SAASC,KAAKC,SAAS,CAACf,gBAAgB;4BACjD1E,QAAQyE,WAAWzE,MAAM,IAAI;4BAC7BiE;wBACF;oBACF;gBACF;gBAEA,wCAAwC;gBACvC/E,QAAgBwG,cAAc,GAAGjB,WAAW/B,OAAO;gBAEpD,OAAO6B,QAAQrF,YAAYsF;YAE7B,EAAE,OAAO3E,OAAO;gBACd8B,QAAQ9B,KAAK,CAAC,0CAA0CA;gBAExD,MAAM6E,gBAAgB;oBACpB5E,SAAS;oBACTD,OAAO;oBACPE,MAAM;oBACN4E,WAAW,IAAItF,OAAOuF,WAAW;gBACnC;gBAEA,IAAI,WAAW1F,SAAS;oBACtB,eAAe;oBACf,MAAM6F,MAAMP,IAAI,CAAC,EAAE;oBACnB,OAAOO,IAAI/E,MAAM,CAAC,KAAKsF,IAAI,CAACZ;gBAC9B,OAAO;oBACL,aAAa;oBACb,OAAO,IAAIa,SAASC,KAAKC,SAAS,CAACf,gBAAgB;wBACjD1E,QAAQ;wBACRiE,SAAS;4BAAE,gBAAgB;wBAAmB;oBAChD;gBACF;YACF;QACF;IACF;AACF;AASO,MAAMhG,mBAAmB,IAAMC,mBAAmBP;AAKlD,MAAMQ,eAAe,CAACW,sBAC3BZ,mBAAmB,CAACyH,MAAQ/H,gBAAgB+H,KAAK7G;AAK5C,MAAMV,iBAAiB,IAAMF,mBAAmBL;AAKhD,MAAMG,gBAAgB,IAAME,mBAAmBR;AAK/C,MAAMK,gBAAgB,CAACe,sBAC5BZ,mBAAmB,CAACyH,MAAQlI,iBAAiBkI,KAAK7G;AAK7C,MAAMT,kBAAkB,IAAMH,mBAAmBJ"}