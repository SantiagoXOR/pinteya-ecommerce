f150a17fb44e42a2512137f64fbc9a5a
// ===================================
// PINTEYA E-COMMERCE - TESTS UNITARIOS PARA USECART WITH CLERK HOOK
// ===================================
"use strict";
// Mock Clerk
jest.mock('@clerk/nextjs', ()=>({
        useUser: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactredux = require("react-redux");
const _toolkit = require("@reduxjs/toolkit");
const _nextjs = require("@clerk/nextjs");
const _cartslice = /*#__PURE__*/ _interop_require_wildcard(require("../../redux/features/cart-slice"));
const _useCartWithClerk = require("../../hooks/useCartWithClerk");
const _cartPersistence = require("../../redux/middleware/cartPersistence");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock localStorage
const localStorageMock = (()=>{
    let store = {};
    return {
        getItem: jest.fn((key)=>store[key] || null),
        setItem: jest.fn((key, value)=>{
            store[key] = value.toString();
        }),
        removeItem: jest.fn((key)=>{
            delete store[key];
        }),
        clear: jest.fn(()=>{
            store = {};
        })
    };
})();
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Mock console methods
const consoleSpy = {
    warn: jest.spyOn(console, 'warn').mockImplementation(()=>{}),
    log: jest.spyOn(console, 'log').mockImplementation(()=>{}),
    error: jest.spyOn(console, 'error').mockImplementation(()=>{})
};
// Producto de prueba
const mockProduct = {
    id: 1,
    title: 'Pintura Latex Interior Blanco 4L',
    price: 18000,
    discountedPrice: 15000,
    quantity: 1,
    imgs: {
        thumbnails: [
            '/images/products/pintura-latex-blanco-sm.jpg'
        ],
        previews: [
            '/images/products/pintura-latex-blanco.jpg'
        ]
    }
};
// Mock user data
const mockUser = {
    id: 'user_123',
    firstName: 'Juan',
    lastName: 'Pérez',
    emailAddresses: [
        {
            emailAddress: 'juan@example.com'
        }
    ]
};
describe('useCartWithClerk Hook', ()=>{
    let store;
    const mockUseUser = _nextjs.useUser;
    const renderHookWithStore = (initialState = {})=>{
        store = (0, _toolkit.configureStore)({
            reducer: {
                cartReducer: _cartslice.default
            },
            middleware: (getDefaultMiddleware)=>getDefaultMiddleware().concat(_cartPersistence.cartPersistenceMiddleware),
            preloadedState: initialState
        });
        const wrapper = ({ children })=>_react.default.createElement(_reactredux.Provider, {
                store
            }, children);
        return (0, _react1.renderHook)(()=>(0, _useCartWithClerk.useCartWithClerk)(), {
            wrapper
        });
    };
    beforeEach(()=>{
        localStorageMock.clear();
        jest.clearAllMocks();
    });
    afterAll(()=>{
        // Limpiar mocks
        jest.clearAllMocks();
    });
    describe('Unauthenticated User', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                user: null,
                isLoaded: true,
                isSignedIn: false
            });
        });
        it('should load cart from localStorage for unauthenticated user', ()=>{
            // Preparar localStorage con datos
            const cartData = {
                items: [
                    mockProduct
                ],
                timestamp: Date.now(),
                version: '1.0.0'
            };
            localStorageMock.setItem('pinteya-cart', JSON.stringify(cartData));
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.userId).toBeUndefined();
            expect(result.current.cartItems).toHaveLength(1);
        });
        it('should start with empty cart when no localStorage data', ()=>{
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.cartItems).toHaveLength(0);
        });
        it('should handle corrupted localStorage gracefully', ()=>{
            localStorageMock.setItem('pinteya-cart', 'invalid-json');
            const { result } = renderHookWithStore();
            expect(result.current.cartItems).toHaveLength(0);
            expect(localStorageMock.removeItem).toHaveBeenCalledWith('pinteya-cart');
        });
    });
    describe('Authenticated User', ()=>{
        beforeEach(()=>{
            mockUseUser.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true
            });
        });
        it('should identify authenticated user correctly', ()=>{
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.userId).toBe(mockUser.id);
        });
        it('should migrate temporary cart when user signs in', async ()=>{
            // Preparar carrito temporal en localStorage
            const temporaryCartData = {
                items: [
                    mockProduct
                ],
                timestamp: Date.now(),
                version: '1.0.0'
            };
            localStorageMock.setItem('pinteya-cart', JSON.stringify(temporaryCartData));
            const { result } = renderHookWithStore();
            // Verificar que el hook funciona correctamente (sin verificar console logs)
            expect(result.current.isAuthenticated).toBe(true);
            // La migración es asíncrona, verificar que el hook se inicializa correctamente
            // El carrito puede estar vacío inicialmente mientras se procesa la migración
            expect(Array.isArray(result.current.cartItems)).toBe(true);
        });
        it('should save cart changes for authenticated user', async ()=>{
            const { result } = renderHookWithStore();
            // Agregar item al carrito
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            // Esperar el debounce del efecto (optimizado)
            await (0, _react1.act)(async ()=>{
                await new Promise((resolve)=>setTimeout(resolve, 500));
            });
            // Verificar que el hook funciona correctamente
            expect(result.current.isAuthenticated).toBe(true);
        });
        it('should handle sign out correctly', ()=>{
            const { result } = renderHookWithStore({
                cartReducer: {
                    items: [
                        mockProduct
                    ]
                }
            });
            (0, _react1.act)(()=>{
                result.current.handleSignOut();
            });
            expect(result.current.cartItems).toHaveLength(0);
            expect(localStorageMock.removeItem).toHaveBeenCalledWith('pinteya-cart');
        });
    });
    describe('Loading States', ()=>{
        it('should handle loading state correctly', ()=>{
            mockUseUser.mockReturnValue({
                user: null,
                isLoaded: false,
                isSignedIn: false
            });
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.userId).toBeUndefined();
        });
        it('should not perform actions while loading', ()=>{
            mockUseUser.mockReturnValue({
                user: null,
                isLoaded: false,
                isSignedIn: false
            });
            // Preparar localStorage con datos
            const cartData = {
                items: [
                    mockProduct
                ],
                timestamp: Date.now(),
                version: '1.0.0'
            };
            localStorageMock.setItem('pinteya-cart', JSON.stringify(cartData));
            const { result } = renderHookWithStore();
            // No debería cargar desde localStorage mientras está loading
            expect(result.current.cartItems).toHaveLength(0);
        });
    });
    describe('User State Transitions', ()=>{
        it('should handle transition from unauthenticated to authenticated', ()=>{
            // Iniciar como no autenticado
            mockUseUser.mockReturnValue({
                user: null,
                isLoaded: true,
                isSignedIn: false
            });
            const { result, rerender } = renderHookWithStore();
            // Agregar item como usuario no autenticado
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.cartItems).toHaveLength(1);
            // Simular autenticación
            mockUseUser.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true
            });
            rerender();
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.userId).toBe(mockUser.id);
            expect(result.current.cartItems).toHaveLength(1) // Carrito se mantiene
            ;
        });
        it('should handle transition from authenticated to unauthenticated', ()=>{
            // Iniciar como autenticado
            mockUseUser.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true
            });
            const { result, rerender } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(true);
            // Simular cierre de sesión
            mockUseUser.mockReturnValue({
                user: null,
                isLoaded: true,
                isSignedIn: false
            });
            rerender();
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.userId).toBeUndefined();
        });
    });
    describe('Error Handling', ()=>{
        it('should handle migration errors gracefully', async ()=>{
            // Mock error en migración
            consoleSpy.log.mockImplementationOnce(()=>{
                throw new Error('Migration failed');
            });
            mockUseUser.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true
            });
            // Preparar carrito temporal
            const temporaryCartData = {
                items: [
                    mockProduct
                ],
                timestamp: Date.now(),
                version: '1.0.0'
            };
            localStorageMock.setItem('pinteya-cart', JSON.stringify(temporaryCartData));
            const { result } = renderHookWithStore();
            expect(result.current.isAuthenticated).toBe(true);
        // Verificar que el hook maneja errores sin lanzar excepciones
        });
        it('should handle save errors gracefully', async ()=>{
            mockUseUser.mockReturnValue({
                user: mockUser,
                isLoaded: true,
                isSignedIn: true
            });
            // Mock error en guardado
            consoleSpy.log.mockImplementation((message)=>{
                if (message.includes('Saving')) {
                    throw new Error('Save failed');
                }
            });
            const { result } = renderHookWithStore();
            // Agregar item al carrito
            (0, _react1.act)(()=>{
                store.dispatch((0, _cartslice.addItemToCart)(mockProduct));
            });
            // Esperar el debounce del efecto (optimizado)
            await (0, _react1.act)(async ()=>{
                await new Promise((resolve)=>setTimeout(resolve, 500));
            });
            // Verificar que el hook maneja errores sin lanzar excepciones
            expect(result.current.isAuthenticated).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,