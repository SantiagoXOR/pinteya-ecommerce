{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\validation\\enterprise-validation-middleware.ts"],"sourcesContent":["/**\n * Middleware Enterprise de Validación\n * Integra validación y sanitización con APIs de forma transparente\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { z } from 'zod';\nimport {\n  EnterpriseValidator,\n  ENTERPRISE_VALIDATION_CONFIGS,\n  type EnterpriseValidationConfig,\n  type ValidationResult\n} from './enterprise-validation-system';\nimport { getEnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface ValidationMiddlewareOptions {\n  bodySchema?: z.ZodSchema;\n  querySchema?: z.ZodSchema;\n  paramsSchema?: z.ZodSchema;\n  configName?: keyof typeof ENTERPRISE_VALIDATION_CONFIGS;\n  customConfig?: EnterpriseValidationConfig;\n  skipValidation?: (request: NextRequest | NextApiRequest) => boolean;\n  onValidationError?: (errors: any[], request: NextRequest | NextApiRequest) => void;\n  enableContextValidation?: boolean;\n  strictMode?: boolean;\n}\n\nexport interface ValidatedRequest extends NextRequest {\n  validatedBody?: any;\n  validatedQuery?: any;\n  validatedParams?: any;\n  validationMetadata?: any;\n  enterpriseContext?: EnterpriseAuthContext;\n}\n\nexport interface ValidatedApiRequest extends NextApiRequest {\n  validatedBody?: any;\n  validatedQuery?: any;\n  validatedParams?: any;\n  validationMetadata?: any;\n  enterpriseContext?: EnterpriseAuthContext;\n}\n\n// =====================================================\n// MIDDLEWARE PARA NEXT.JS APP ROUTER\n// =====================================================\n\n/**\n * Middleware de validación para Next.js App Router\n */\nexport function withEnterpriseValidation(options: ValidationMiddlewareOptions) {\n  return function <T extends any[]>(\n    handler: (request: ValidatedRequest, ...args: T) => Promise<NextResponse> | NextResponse\n  ) {\n    return async (request: NextRequest, ...args: T): Promise<NextResponse> => {\n      try {\n        // Verificar si debe saltarse la validación\n        if (options.skipValidation && options.skipValidation(request)) {\n          return await handler(request as ValidatedRequest, ...args);\n        }\n\n        // Obtener configuración de validación\n        const config = options.customConfig || \n                      (options.configName ? ENTERPRISE_VALIDATION_CONFIGS[options.configName] : \n                       ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\n\n        const validator = new EnterpriseValidator(config);\n\n        // Obtener contexto enterprise si está habilitado\n        let enterpriseContext: EnterpriseAuthContext | undefined;\n        if (options.enableContextValidation) {\n          try {\n            const authResult = await getEnterpriseAuthContext(request, {\n              securityLevel: config.securityLevel || 'standard'\n            });\n            if (authResult.success) {\n              enterpriseContext = authResult.context;\n            }\n          } catch (error) {\n            console.warn('[VALIDATION_MIDDLEWARE] No se pudo obtener contexto enterprise:', error);\n          }\n        }\n\n        const validatedRequest = request as ValidatedRequest;\n        const validationResults: any = {};\n        const allErrors: any[] = [];\n\n        // 1. Validar body si hay schema\n        if (options.bodySchema && ['POST', 'PUT', 'PATCH'].includes(request.method)) {\n          try {\n            const body = await request.json();\n            const bodyValidation = await validator.validateAndSanitize(\n              options.bodySchema,\n              body,\n              enterpriseContext,\n              request\n            );\n\n            if (bodyValidation.success) {\n              validatedRequest.validatedBody = bodyValidation.data;\n              validationResults.body = bodyValidation.metadata;\n            } else {\n              allErrors.push(...(bodyValidation.errors || []));\n            }\n          } catch (error) {\n            allErrors.push({\n              field: 'body',\n              message: 'Error parsing JSON body',\n              code: 'INVALID_JSON',\n              severity: 'high'\n            });\n          }\n        }\n\n        // 2. Validar query parameters si hay schema\n        if (options.querySchema) {\n          const url = new URL(request.url);\n          const queryParams = Object.fromEntries(url.searchParams.entries());\n          \n          const queryValidation = await validator.validateAndSanitize(\n            options.querySchema,\n            queryParams,\n            enterpriseContext,\n            request\n          );\n\n          if (queryValidation.success) {\n            validatedRequest.validatedQuery = queryValidation.data;\n            validationResults.query = queryValidation.metadata;\n          } else {\n            allErrors.push(...(queryValidation.errors || []));\n          }\n        }\n\n        // 3. Validar params si hay schema\n        if (options.paramsSchema) {\n          // Extraer params de la URL (esto requeriría configuración adicional)\n          // Por ahora, asumimos que los params están disponibles en el contexto\n          const params = (request as any).params || {};\n          \n          const paramsValidation = await validator.validateAndSanitize(\n            options.paramsSchema,\n            params,\n            enterpriseContext,\n            request\n          );\n\n          if (paramsValidation.success) {\n            validatedRequest.validatedParams = paramsValidation.data;\n            validationResults.params = paramsValidation.metadata;\n          } else {\n            allErrors.push(...(paramsValidation.errors || []));\n          }\n        }\n\n        // 4. Verificar errores de validación\n        if (allErrors.length > 0) {\n          // Callback personalizado para errores\n          if (options.onValidationError) {\n            options.onValidationError(allErrors, request);\n          }\n\n          // Logging de errores\n          console.warn('[VALIDATION_MIDDLEWARE] Errores de validación:', allErrors);\n\n          // Respuesta de error\n          return NextResponse.json(\n            {\n              error: 'Errores de validación',\n              code: 'VALIDATION_FAILED',\n              details: allErrors.map(err => ({\n                field: err.field,\n                message: err.message,\n                code: err.code\n              })),\n              enterprise: true,\n              timestamp: new Date().toISOString()\n            },\n            { status: 400 }\n          );\n        }\n\n        // 5. Añadir metadatos de validación\n        validatedRequest.validationMetadata = validationResults;\n        validatedRequest.enterpriseContext = enterpriseContext;\n\n        // 6. Ejecutar handler original\n        return await handler(validatedRequest, ...args);\n\n      } catch (error) {\n        console.error('[VALIDATION_MIDDLEWARE] Error:', error);\n        \n        return NextResponse.json(\n          {\n            error: 'Error interno en validación',\n            code: 'VALIDATION_ERROR',\n            enterprise: true,\n            timestamp: new Date().toISOString()\n          },\n          { status: 500 }\n        );\n      }\n    };\n  };\n}\n\n// =====================================================\n// MIDDLEWARE PARA PAGES API\n// =====================================================\n\n/**\n * Middleware de validación para Pages API\n */\nexport function withEnterpriseValidationAPI(options: ValidationMiddlewareOptions) {\n  return function (\n    handler: (req: ValidatedApiRequest, res: NextApiResponse) => Promise<void> | void\n  ) {\n    return async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n      try {\n        // Verificar si debe saltarse la validación\n        if (options.skipValidation && options.skipValidation(req)) {\n          return await handler(req as ValidatedApiRequest, res);\n        }\n\n        // Obtener configuración de validación\n        const config = options.customConfig || \n                      (options.configName ? ENTERPRISE_VALIDATION_CONFIGS[options.configName] : \n                       ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\n\n        const validator = new EnterpriseValidator(config);\n\n        // Obtener contexto enterprise si está habilitado\n        let enterpriseContext: EnterpriseAuthContext | undefined;\n        if (options.enableContextValidation) {\n          try {\n            // Para Pages API, necesitaríamos adaptar getEnterpriseAuthContext\n            // Por ahora, lo omitimos\n          } catch (error) {\n            console.warn('[VALIDATION_API] No se pudo obtener contexto enterprise:', error);\n          }\n        }\n\n        const validatedRequest = req as ValidatedApiRequest;\n        const validationResults: any = {};\n        const allErrors: any[] = [];\n\n        // 1. Validar body si hay schema\n        if (options.bodySchema && ['POST', 'PUT', 'PATCH'].includes(req.method || '')) {\n          const bodyValidation = await validator.validateAndSanitize(\n            options.bodySchema,\n            req.body,\n            enterpriseContext,\n            req\n          );\n\n          if (bodyValidation.success) {\n            validatedRequest.validatedBody = bodyValidation.data;\n            validationResults.body = bodyValidation.metadata;\n          } else {\n            allErrors.push(...(bodyValidation.errors || []));\n          }\n        }\n\n        // 2. Validar query parameters si hay schema\n        if (options.querySchema) {\n          const queryValidation = await validator.validateAndSanitize(\n            options.querySchema,\n            req.query,\n            enterpriseContext,\n            req\n          );\n\n          if (queryValidation.success) {\n            validatedRequest.validatedQuery = queryValidation.data;\n            validationResults.query = queryValidation.metadata;\n          } else {\n            allErrors.push(...(queryValidation.errors || []));\n          }\n        }\n\n        // 3. Verificar errores de validación\n        if (allErrors.length > 0) {\n          // Callback personalizado para errores\n          if (options.onValidationError) {\n            options.onValidationError(allErrors, req);\n          }\n\n          // Respuesta de error\n          res.status(400).json({\n            error: 'Errores de validación',\n            code: 'VALIDATION_FAILED',\n            details: allErrors.map(err => ({\n              field: err.field,\n              message: err.message,\n              code: err.code\n            })),\n            enterprise: true,\n            timestamp: new Date().toISOString()\n          });\n          return;\n        }\n\n        // 4. Añadir metadatos de validación\n        validatedRequest.validationMetadata = validationResults;\n        validatedRequest.enterpriseContext = enterpriseContext;\n\n        // 5. Ejecutar handler original\n        return await handler(validatedRequest, res);\n\n      } catch (error) {\n        console.error('[VALIDATION_API] Error:', error);\n        \n        res.status(500).json({\n          error: 'Error interno en validación',\n          code: 'VALIDATION_ERROR',\n          enterprise: true,\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n  };\n}\n\n// =====================================================\n// FUNCIONES DE CONVENIENCIA\n// =====================================================\n\n/**\n * Validación crítica para operaciones admin\n */\nexport const withCriticalValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\n  withEnterpriseValidation({\n    ...schemas,\n    configName: 'CRITICAL_ADMIN',\n    enableContextValidation: true,\n    strictMode: true\n  });\n\n/**\n * Validación alta para APIs de pagos\n */\nexport const withHighValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\n  withEnterpriseValidation({\n    ...schemas,\n    configName: 'HIGH_PAYMENT',\n    enableContextValidation: true,\n    strictMode: true\n  });\n\n/**\n * Validación estándar para APIs públicas\n */\nexport const withStandardValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\n  withEnterpriseValidation({\n    ...schemas,\n    configName: 'STANDARD_PUBLIC',\n    enableContextValidation: false,\n    strictMode: false\n  });\n\n/**\n * Validación básica para contenido de usuario\n */\nexport const withBasicValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\n  withEnterpriseValidation({\n    ...schemas,\n    configName: 'BASIC_USER',\n    enableContextValidation: false,\n    strictMode: false\n  });\n\n/**\n * Función auxiliar para validar datos manualmente\n */\nexport async function validateData<T>(\n  schema: z.ZodSchema<T>,\n  data: unknown,\n  securityLevel: keyof typeof ENTERPRISE_VALIDATION_CONFIGS = 'STANDARD_PUBLIC',\n  context?: EnterpriseAuthContext\n): Promise<ValidationResult<T>> {\n  const config = ENTERPRISE_VALIDATION_CONFIGS[securityLevel];\n  const validator = new EnterpriseValidator(config);\n  \n  return await validator.validateAndSanitize(schema, data, context);\n}\n\n/**\n * Función auxiliar para sanitizar datos manualmente\n */\nexport function sanitizeData(\n  data: any,\n  securityLevel: keyof typeof ENTERPRISE_VALIDATION_CONFIGS = 'STANDARD_PUBLIC'\n): any {\n  const config = ENTERPRISE_VALIDATION_CONFIGS[securityLevel];\n  const validator = new EnterpriseValidator(config);\n  \n  return validator['sanitizer'].sanitizeObject(data);\n}\n"],"names":["sanitizeData","validateData","withBasicValidation","withCriticalValidation","withEnterpriseValidation","withEnterpriseValidationAPI","withHighValidation","withStandardValidation","options","handler","request","args","skipValidation","config","customConfig","configName","ENTERPRISE_VALIDATION_CONFIGS","STANDARD_PUBLIC","validator","EnterpriseValidator","enterpriseContext","enableContextValidation","authResult","getEnterpriseAuthContext","securityLevel","success","context","error","console","warn","validatedRequest","validationResults","allErrors","bodySchema","includes","method","body","json","bodyValidation","validateAndSanitize","validatedBody","data","metadata","push","errors","field","message","code","severity","querySchema","url","URL","queryParams","Object","fromEntries","searchParams","entries","queryValidation","validatedQuery","query","paramsSchema","params","paramsValidation","validatedParams","length","onValidationError","NextResponse","details","map","err","enterprise","timestamp","Date","toISOString","status","validationMetadata","req","res","schemas","strictMode","schema","sanitizeObject"],"mappings":"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"}