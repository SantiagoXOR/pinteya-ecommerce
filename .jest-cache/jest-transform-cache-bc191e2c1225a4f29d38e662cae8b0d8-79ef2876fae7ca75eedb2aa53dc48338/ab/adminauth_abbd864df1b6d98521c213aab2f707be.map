{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\admin-auth.ts"],"sourcesContent":["/**\n * Sistema de Autenticación y Autorización para Panel Administrativo\n * Implementa verificación de roles y permisos granulares\n */\n\nimport { auth, currentUser, getAuth } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  validateSecurityContext,\n  getSecurityContext,\n  type SecurityValidationResult,\n  type SecurityContext\n} from './security-validations';\nimport {\n  logAuthSuccess,\n  logAuthFailure,\n  logPermissionDenied,\n  runSecurityDetection\n} from './security-audit';\nimport {\n  logAuthentication,\n  logDataAccess,\n  logAdminAction,\n  AuditResult\n} from '@/lib/security/audit-trail';\nimport {\n  validateJWTIntegrity,\n  validateJWTPermissions,\n  type JWTValidationResult\n} from './jwt-validation';\nimport {\n  validateRequestOrigin,\n  type CSRFValidationResult\n} from './csrf-protection';\nimport {\n  checkRateLimit,\n  RATE_LIMIT_CONFIGS,\n  type RateLimitResult\n} from './rate-limiting';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface UserProfile {\n  id: string;\n  supabase_user_id: string | null;\n  clerk_user_id: string | null;\n  email: string;\n  first_name: string | null;\n  last_name: string | null;\n  role_id: number;\n  is_active: boolean;\n  is_verified: boolean;\n  user_roles: {\n    id: number;\n    role_name: string;\n    display_name: string;\n    permissions: Record<string, any>;\n    is_active: boolean;\n  };\n}\n\nexport interface AdminAuthResult {\n  success: boolean;\n  user?: UserProfile;\n  error?: string;\n  status?: number;\n}\n\nexport interface PermissionCheck {\n  resource: string;\n  action: string;\n  userId?: string;\n}\n\n// =====================================================\n// FUNCIONES DE VERIFICACIÓN DE AUTENTICACIÓN\n// =====================================================\n\n/**\n * Obtiene el usuario autenticado usando SOLO métodos oficiales de Clerk\n * MIGRADO: Ya no usa headers ni JWT como fallback - Solo getAuth(req) y auth()\n */\nexport async function getAuthenticatedUser(\n  request?: NextRequest | NextApiRequest\n): Promise<{ userId: string | null; sessionId?: string; error?: string; isAdmin?: boolean }> {\n  try {\n    // Método 1: Usar getAuth oficial de Clerk para API Routes (PREFERIDO)\n    if (request && 'query' in request) {\n      // Es NextApiRequest (Pages Router)\n      const { userId, sessionId, getToken } = getAuth(request as NextApiRequest);\n      if (userId) {\n        console.log(`[AUTH] Usuario autenticado via getAuth: ${userId}`);\n\n        // ✅ CORREGIDO: Verificar si es admin usando el token y fallback a currentUser\n        let isAdmin = false;\n        try {\n          const token = await getToken();\n          if (token) {\n            // Decodificar token para obtener metadata\n            const payload = JSON.parse(atob(token.split('.')[1]));\n            const publicRole = payload.publicMetadata?.role;\n            const privateRole = payload.privateMetadata?.role;\n            isAdmin = publicRole === 'admin' || privateRole === 'admin';\n\n            console.log(`[AUTH] Token verificación - publicRole: ${publicRole}, privateRole: ${privateRole}, isAdmin: ${isAdmin}`);\n          }\n\n          // Si no encontramos el rol en el token, verificar directamente con Clerk\n          if (!isAdmin) {\n            try {\n              const user = await currentUser();\n              if (user) {\n                const userPublicRole = user.publicMetadata?.role as string;\n                const userPrivateRole = user.privateMetadata?.role as string;\n                isAdmin = userPublicRole === 'admin' || userPrivateRole === 'admin';\n\n                console.log(`[AUTH] Fallback currentUser - userPublicRole: ${userPublicRole}, userPrivateRole: ${userPrivateRole}, isAdmin: ${isAdmin}`);\n              }\n            } catch (fallbackError) {\n              console.warn('[AUTH] Error en fallback currentUser:', fallbackError);\n            }\n          }\n        } catch (tokenError) {\n          console.warn('[AUTH] Error obteniendo token para verificar admin:', tokenError);\n        }\n\n        return { userId, sessionId, isAdmin };\n      }\n    }\n\n    // Método 2: Usar auth() para App Router Route Handlers\n    if (!request || !('query' in request)) {\n      try {\n        const { userId, sessionId, sessionClaims } = await auth();\n        if (userId) {\n          console.log(`[AUTH] Usuario autenticado via auth(): ${userId}`);\n\n          // ✅ CORREGIDO: Verificar si es admin usando publicMetadata y privateMetadata\n          const publicRole = sessionClaims?.publicMetadata?.role as string;\n          const privateRole = sessionClaims?.privateMetadata?.role as string;\n          let isAdmin = publicRole === 'admin' || privateRole === 'admin';\n\n          // Logging para debugging en producción\n          console.log(`[AUTH] Verificación de roles - publicRole: ${publicRole}, privateRole: ${privateRole}, isAdmin: ${isAdmin}`);\n\n          // Si no encontramos el rol en sessionClaims, verificar directamente con Clerk\n          if (!isAdmin && userId) {\n            try {\n              const user = await currentUser();\n              if (user) {\n                const userPublicRole = user.publicMetadata?.role as string;\n                const userPrivateRole = user.privateMetadata?.role as string;\n                isAdmin = userPublicRole === 'admin' || userPrivateRole === 'admin';\n\n                console.log(`[AUTH] Fallback verificación - userPublicRole: ${userPublicRole}, userPrivateRole: ${userPrivateRole}, isAdmin: ${isAdmin}`);\n              }\n            } catch (fallbackError) {\n              console.warn('[AUTH] Error en fallback de verificación de admin:', fallbackError);\n            }\n          }\n\n          return { userId, sessionId, isAdmin };\n        }\n      } catch (authError) {\n        console.warn('[AUTH] Error usando auth():', authError);\n        return {\n          userId: null,\n          error: `Error de autenticación: ${authError.message}`\n        };\n      }\n    }\n\n    console.warn('[AUTH] No se pudo obtener userId - usuario no autenticado');\n    return { userId: null, error: 'Usuario no autenticado' };\n  } catch (error) {\n    console.error('[AUTH] Error en getAuthenticatedUser:', error);\n    return {\n      userId: null,\n      error: error instanceof Error ? error.message : 'Error de autenticación'\n    };\n  }\n}\n\n/**\n * Función de migración para APIs que aún usan headers directamente\n * DEPRECADA: Usar getAuthenticatedUser() en su lugar\n */\nexport async function getAuthFromHeaders(\n  request: NextRequest\n): Promise<{ userId: string | null; error?: string; deprecated: boolean }> {\n  console.warn('[AUTH] ⚠️ DEPRECADO: getAuthFromHeaders() - Migrar a getAuthenticatedUser()');\n\n  const clerkUserId = request.headers.get('x-clerk-user-id');\n\n  if (!clerkUserId) {\n    return {\n      userId: null,\n      error: 'Header x-clerk-user-id no encontrado',\n      deprecated: true\n    };\n  }\n\n  return {\n    userId: clerkUserId,\n    deprecated: true\n  };\n}\n\n/**\n * Función mejorada que combina autenticación y verificación de admin\n * Reemplaza el patrón común de getAuthenticatedUser + checkAdminAccess\n */\nexport async function getAuthenticatedAdmin(\n  request?: NextRequest | NextApiRequest\n): Promise<{\n  userId: string | null;\n  sessionId?: string;\n  isAdmin: boolean;\n  user?: any;\n  supabase?: any;\n  error?: string;\n  status?: number;\n}> {\n  try {\n    // Obtener usuario autenticado\n    const authResult = await getAuthenticatedUser(request);\n\n    if (!authResult.userId) {\n      return {\n        userId: null,\n        isAdmin: false,\n        error: authResult.error || 'Usuario no autenticado',\n        status: 401\n      };\n    }\n\n    // Si ya tenemos información de admin del token, usarla\n    if (authResult.isAdmin !== undefined) {\n      if (!authResult.isAdmin) {\n        return {\n          userId: authResult.userId,\n          sessionId: authResult.sessionId,\n          isAdmin: false,\n          error: 'Permisos de administrador requeridos',\n          status: 403\n        };\n      }\n\n      return {\n        userId: authResult.userId,\n        sessionId: authResult.sessionId,\n        isAdmin: true,\n        supabase: supabaseAdmin\n      };\n    }\n\n    // Fallback: verificar admin en base de datos\n    const adminCheck = await checkAdminAccess(authResult.userId);\n\n    if (!adminCheck.success) {\n      return {\n        userId: authResult.userId,\n        sessionId: authResult.sessionId,\n        isAdmin: false,\n        error: adminCheck.error,\n        status: adminCheck.status\n      };\n    }\n\n    return {\n      userId: authResult.userId,\n      sessionId: authResult.sessionId,\n      isAdmin: true,\n      user: adminCheck.user,\n      supabase: adminCheck.supabase\n    };\n  } catch (error) {\n    console.error('[AUTH] Error en getAuthenticatedAdmin:', error);\n    return {\n      userId: null,\n      isAdmin: false,\n      error: 'Error interno de autenticación',\n      status: 500\n    };\n  }\n}\n\n/**\n * Nueva función específica para Pages Router API Routes\n * Usa getAuth(req) oficial de Clerk\n */\nexport function getAuthFromApiRoute(req: NextApiRequest, res: NextApiResponse) {\n  const { userId, sessionId, getToken } = getAuth(req);\n\n  if (!userId) {\n    throw new Error('Usuario no autenticado');\n  }\n\n  console.log(`[AUTH] API Route autenticada: ${userId}`);\n  return { userId, sessionId, getToken };\n}\n\n/**\n * Nueva función específica para App Router Route Handlers\n * Usa auth() oficial de Clerk\n */\nexport async function getAuthFromRouteHandler() {\n  const { userId, sessionId, getToken } = await auth();\n\n  if (!userId) {\n    throw new Error('Usuario no autenticado');\n  }\n\n  console.log(`[AUTH] Route Handler autenticado: ${userId}`);\n  return { userId, sessionId, getToken };\n}\n\n/**\n * Función unificada que detecta automáticamente el tipo de ruta\n * Con manejo robusto de errores y fallbacks\n */\nexport async function getUnifiedAuth(request?: NextRequest | NextApiRequest) {\n  try {\n    // Detectar si es API Route (Pages Router)\n    if (request && 'query' in request) {\n      try {\n        return getAuthFromApiRoute(request as NextApiRequest, {} as NextApiResponse);\n      } catch (apiError) {\n        console.warn('[AUTH] Error en API Route, usando fallback:', apiError);\n        // Fallback a función original\n        return await getAuthenticatedUser(request);\n      }\n    }\n\n    // Detectar si es Route Handler (App Router) o sin request\n    if (!request || !('query' in request)) {\n      try {\n        return await getAuthFromRouteHandler();\n      } catch (routeError) {\n        console.warn('[AUTH] Error en Route Handler, usando fallback:', routeError);\n        // Fallback a función original\n        return await getAuthenticatedUser(request);\n      }\n    }\n\n    // Fallback a función original\n    return await getAuthenticatedUser(request);\n  } catch (error) {\n    console.error('[AUTH] Error en getUnifiedAuth:', error);\n    // En lugar de lanzar error, retornar resultado de fallback\n    return await getAuthenticatedUser(request);\n  }\n}\n\n/**\n * Obtiene el perfil completo del usuario desde Supabase\n */\nexport async function getUserProfile(clerkUserId: string): Promise<UserProfile | null> {\n  try {\n    if (!supabaseAdmin) {\n      throw new Error('Supabase admin client not available');\n    }\n\n    // Primero obtener el perfil del usuario\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('user_profiles')\n      .select('*')\n      .eq('clerk_user_id', clerkUserId)\n      .eq('is_active', true)\n      .single();\n\n    if (profileError) {\n      console.error('Error fetching user profile:', profileError);\n      return null;\n    }\n\n    if (!profile) {\n      return null;\n    }\n\n    // Luego obtener el rol del usuario\n    const { data: role, error: roleError } = await supabaseAdmin\n      .from('user_roles')\n      .select('*')\n      .eq('id', profile.role_id)\n      .single();\n\n    if (roleError) {\n      console.error('Error fetching user role:', roleError);\n      return null;\n    }\n\n    // Combinar los datos\n    const userProfile: UserProfile = {\n      ...profile,\n      user_roles: role\n    };\n\n    return userProfile;\n  } catch (error) {\n    console.error('Error in getUserProfile:', error);\n    return null;\n  }\n}\n\n/**\n * Verifica si un usuario tiene acceso al panel administrativo\n */\nexport async function checkAdminAccess(clerkUserId: string): Promise<AdminAuthResult> {\n  try {\n    const profile = await getUserProfile(clerkUserId);\n    \n    if (!profile) {\n      return {\n        success: false,\n        error: 'Perfil de usuario no encontrado',\n        status: 404\n      };\n    }\n\n    if (!profile.user_roles || !profile.is_active) {\n      return {\n        success: false,\n        error: 'Rol de usuario no válido',\n        status: 403\n      };\n    }\n\n    // Verificar si tiene acceso al panel admin\n    const hasAdminAccess = hasPermission(profile, ['admin_panel', 'access']);\n    \n    if (!hasAdminAccess) {\n      return {\n        success: false,\n        error: 'Acceso denegado al panel administrativo',\n        status: 403\n      };\n    }\n\n    return {\n      success: true,\n      user: profile\n    };\n  } catch (error) {\n    console.error('Error in checkAdminAccess:', error);\n    return {\n      success: false,\n      error: 'Error interno del servidor',\n      status: 500\n    };\n  }\n}\n\n// =====================================================\n// FUNCIONES DE VERIFICACIÓN DE PERMISOS\n// =====================================================\n\n/**\n * Verifica si un usuario tiene un permiso específico\n */\nexport function hasPermission(\n  userProfile: UserProfile,\n  permissionPath: string[]\n): boolean {\n  try {\n    if (!userProfile.user_roles || !userProfile.user_roles.permissions) {\n      return false;\n    }\n\n    let current: any = userProfile.user_roles.permissions;\n    \n    for (const path of permissionPath) {\n      if (current[path] === undefined) {\n        return false;\n      }\n      current = current[path];\n    }\n\n    // Manejar diferentes tipos de valores de permisos\n    if (typeof current === 'boolean') {\n      return current;\n    }\n    \n    if (typeof current === 'string') {\n      // Para permisos como \"own\", \"own_limited\", etc.\n      return current !== 'false';\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error checking permission:', error);\n    return false;\n  }\n}\n\n/**\n * Verifica múltiples permisos\n */\nexport function hasAnyPermission(\n  userProfile: UserProfile,\n  permissions: string[][]\n): boolean {\n  return permissions.some(permission => hasPermission(userProfile, permission));\n}\n\n/**\n * Verifica todos los permisos\n */\nexport function hasAllPermissions(\n  userProfile: UserProfile,\n  permissions: string[][]\n): boolean {\n  return permissions.every(permission => hasPermission(userProfile, permission));\n}\n\n/**\n * Verifica si el usuario es administrador\n */\nexport function isAdmin(userProfile: UserProfile): boolean {\n  return userProfile.user_roles?.role_name === 'admin';\n}\n\n/**\n * Verifica si el usuario es moderador o administrador\n */\nexport function isModeratorOrAdmin(userProfile: UserProfile): boolean {\n  const role = userProfile.user_roles?.role_name;\n  return role === 'admin' || role === 'moderator';\n}\n\n// =====================================================\n// MIDDLEWARE DE AUTORIZACIÓN\n// =====================================================\n\n/**\n * Middleware principal para verificar permisos administrativos\n * MEJORADO: Incluye validaciones adicionales de seguridad (JWT, CSRF, Rate Limiting)\n */\nexport async function checkAdminPermissions(\n  requiredPermissions?: string[][],\n  request?: NextRequest | NextApiRequest\n): Promise<AdminAuthResult & {\n  supabase?: typeof supabaseAdmin;\n  securityContext?: SecurityContext;\n  jwtValidation?: JWTValidationResult;\n  csrfValidation?: CSRFValidationResult;\n  rateLimitResult?: RateLimitResult;\n}> {\n  try {\n    // 1. NUEVA VALIDACIÓN: Rate Limiting para APIs admin\n    const rateLimitResult = await checkRateLimit(\n      request!,\n      RATE_LIMIT_CONFIGS.admin,\n      'admin'\n    );\n\n    if (!rateLimitResult.allowed) {\n      await logAuthFailure(\n        'unknown',\n        'Rate limit exceeded for admin API',\n        request\n      );\n\n      return {\n        success: false,\n        error: rateLimitResult.error || 'Demasiadas requests administrativas',\n        status: 429,\n        rateLimitResult\n      };\n    }\n\n    // 2. NUEVA VALIDACIÓN: Origen de request (CSRF Protection)\n    const csrfValidation = await validateRequestOrigin(request!);\n\n    if (!csrfValidation.valid) {\n      await logAuthFailure(\n        'unknown',\n        `CSRF validation failed: ${csrfValidation.error}`,\n        request\n      );\n\n      return {\n        success: false,\n        error: csrfValidation.error || 'Origen de request no válido',\n        status: 403,\n        csrfValidation\n      };\n    }\n\n    // 3. Verificar autenticación con Clerk usando métodos oficiales\n    let userId: string;\n    let sessionId: string | undefined;\n\n    try {\n      const authResult = await getUnifiedAuth(request);\n      userId = authResult.userId;\n      sessionId = authResult.sessionId;\n\n      // Log autenticación exitosa\n      const securityContext = await getSecurityContext(userId, request);\n      if (securityContext) {\n        await logAuthSuccess(userId, securityContext, request);\n      }\n\n      // ✅ ENTERPRISE: Audit trail para autenticación exitosa\n      await logAuthentication(\n        'user_authenticated',\n        AuditResult.SUCCESS,\n        userId,\n        {\n          sessionId,\n          authMethod: 'clerk',\n          securityContext: securityContext?.riskLevel\n        },\n        {\n          ip: securityContext?.ipAddress || 'unknown',\n          userAgent: securityContext?.userAgent || 'unknown',\n          sessionId\n        }\n      );\n    } catch (authError) {\n      console.warn('[AUTH] Error en autenticación unificada, intentando fallback');\n      await logAuthFailure(null, `Error de autenticación: ${authError.message}`, request);\n\n      // ✅ ENTERPRISE: Audit trail para fallo de autenticación\n      await logAuthentication(\n        'authentication_failed',\n        AuditResult.FAILURE,\n        undefined,\n        {\n          error: authError.message,\n          authMethod: 'clerk',\n          fallbackAttempted: true\n        },\n        {\n          ip: request?.headers?.get('x-forwarded-for') || 'unknown',\n          userAgent: request?.headers?.get('user-agent') || 'unknown'\n        }\n      );\n\n      const fallbackResult = await getAuthenticatedUser(request);\n      if (!fallbackResult.userId) {\n        await logAuthFailure(null, fallbackResult.error || 'No autorizado', request);\n\n        // ✅ ENTERPRISE: Audit trail para fallo de fallback\n        await logAuthentication(\n          'authentication_fallback_failed',\n          AuditResult.FAILURE,\n          undefined,\n          {\n            error: fallbackResult.error,\n            authMethod: 'fallback'\n          },\n          {\n            ip: request?.headers?.get('x-forwarded-for') || 'unknown',\n            userAgent: request?.headers?.get('user-agent') || 'unknown'\n          }\n        );\n\n        return {\n          success: false,\n          error: fallbackResult.error || 'No autorizado',\n          status: 401\n        };\n      }\n      userId = fallbackResult.userId;\n      sessionId = fallbackResult.sessionId;\n    }\n\n    // 4. NUEVA VALIDACIÓN: Integridad del JWT\n    const jwtValidation = await validateJWTIntegrity(request);\n\n    if (!jwtValidation.valid) {\n      await logAuthFailure(\n        userId,\n        `JWT validation failed: ${jwtValidation.error}`,\n        request\n      );\n\n      return {\n        success: false,\n        error: jwtValidation.error || 'Token JWT inválido',\n        status: 401,\n        jwtValidation\n      };\n    }\n\n    // 5. NUEVA VALIDACIÓN: Permisos específicos en JWT\n    const jwtPermissionValidation = await validateJWTPermissions(\n      'admin',\n      ['admin_access'],\n      request\n    );\n\n    if (!jwtPermissionValidation.valid) {\n      await logPermissionDenied(\n        userId,\n        `JWT permission validation failed: ${jwtPermissionValidation.error}`,\n        request\n      );\n\n      return {\n        success: false,\n        error: jwtPermissionValidation.error || 'Permisos JWT insuficientes',\n        status: 403,\n        jwtValidation: jwtPermissionValidation\n      };\n    }\n\n    // 6. Ejecutar detección de seguridad\n    await runSecurityDetection(userId);\n\n    // 3. Obtener contexto de seguridad completo\n    const securityContext = await getSecurityContext(userId, request);\n    if (!securityContext) {\n      await logAuthFailure(userId, 'No se pudo obtener contexto de seguridad', request);\n      return {\n        success: false,\n        error: 'Error obteniendo contexto de seguridad',\n        status: 500\n      };\n    }\n\n    // 4. Verificar disponibilidad de Supabase\n    if (!supabaseAdmin) {\n      return {\n        success: false,\n        error: 'Servicio administrativo no disponible',\n        status: 503\n      };\n    }\n\n    // 5. Verificar acceso administrativo básico\n    const adminCheck = await checkAdminAccess(userId);\n\n    if (!adminCheck.success) {\n      await logPermissionDenied(userId, 'ADMIN_ACCESS', ['admin_panel'], securityContext);\n      return adminCheck;\n    }\n\n    const userProfile = adminCheck.user!;\n\n    // 6. Verificar permisos específicos con validaciones de seguridad\n    if (requiredPermissions && requiredPermissions.length > 0) {\n      const hasRequiredPermissions = hasAnyPermission(userProfile, requiredPermissions);\n\n      if (!hasRequiredPermissions) {\n        await logPermissionDenied(\n          userId,\n          'SPECIFIC_PERMISSIONS',\n          requiredPermissions.flat(),\n          securityContext\n        );\n        return {\n          success: false,\n          error: 'Permisos insuficientes para esta operación',\n          status: 403\n        };\n      }\n    }\n\n    // 7. Registrar acceso en audit log\n    await logAdminAccess(userProfile.id, 'API_ACCESS');\n\n    return {\n      success: true,\n      user: userProfile,\n      supabase: supabaseAdmin,\n      securityContext,\n      jwtValidation,\n      csrfValidation,\n      rateLimitResult\n    };\n  } catch (error) {\n    console.error('Error in checkAdminPermissions:', error);\n    return {\n      success: false,\n      error: 'Error interno del servidor',\n      status: 500\n    };\n  }\n}\n\n/**\n * Middleware específico para operaciones CRUD con validaciones de seguridad\n * Actualizado para soportar tanto NextRequest como NextApiRequest\n */\nexport async function checkCRUDPermissions(\n  resource: string,\n  action: 'create' | 'read' | 'update' | 'delete',\n  request?: NextRequest | NextApiRequest\n): Promise<AdminAuthResult & { supabase?: typeof supabaseAdmin; securityContext?: SecurityContext }> {\n  const requiredPermissions = [[resource, action]];\n  return checkAdminPermissions(requiredPermissions, request);\n}\n\n/**\n * Nueva función de validación de seguridad avanzada\n * Integra todas las validaciones de seguridad en una sola función\n */\nexport async function checkAdvancedSecurity(\n  userId: string,\n  operation: string,\n  requiredPermissions: string[],\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityValidationResult & { userProfile?: UserProfile; supabase?: typeof supabaseAdmin }> {\n  try {\n    // 1. Ejecutar detección de seguridad\n    await runSecurityDetection(userId);\n\n    // 2. Validar contexto de seguridad\n    const securityValidation = await validateSecurityContext(\n      userId,\n      operation,\n      requiredPermissions as any,\n      request\n    );\n\n    if (!securityValidation.valid) {\n      return securityValidation;\n    }\n\n    // 3. Obtener perfil de usuario desde Supabase\n    const userProfile = await getUserProfile(userId);\n    if (!userProfile) {\n      return {\n        valid: false,\n        error: 'Perfil de usuario no encontrado',\n        code: 'USER_PROFILE_NOT_FOUND',\n        severity: 'high'\n      };\n    }\n\n    // 4. Verificar disponibilidad de Supabase\n    if (!supabaseAdmin) {\n      return {\n        valid: false,\n        error: 'Servicio administrativo no disponible',\n        code: 'SERVICE_UNAVAILABLE',\n        severity: 'critical'\n      };\n    }\n\n    return {\n      valid: true,\n      context: securityValidation.context,\n      userProfile,\n      supabase: supabaseAdmin\n    };\n  } catch (error) {\n    console.error('[SECURITY] Error en checkAdvancedSecurity:', error);\n    return {\n      valid: false,\n      error: 'Error interno en validación de seguridad',\n      code: 'SECURITY_VALIDATION_ERROR',\n      severity: 'critical'\n    };\n  }\n}\n\n// =====================================================\n// FUNCIONES DE LOGGING Y AUDITORÍA\n// =====================================================\n\n/**\n * Registra acceso administrativo en el audit log\n */\nexport async function logAdminAccess(\n  userProfileId: string,\n  action: string,\n  resourceType?: string,\n  resourceId?: string,\n  additionalData?: Record<string, any>\n): Promise<void> {\n  try {\n    if (!supabaseAdmin) return;\n\n    await supabaseAdmin\n      .from('admin_audit_log')\n      .insert({\n        user_id: userProfileId,\n        action,\n        resource_type: resourceType || 'system',\n        resource_id: resourceId,\n        new_values: additionalData ? JSON.stringify(additionalData) : null\n      });\n  } catch (error) {\n    console.error('Error logging admin access:', error);\n    // No lanzar error para no interrumpir el flujo principal\n  }\n}\n\n/**\n * Registra cambios en recursos administrativos\n */\nexport async function logAdminAction(\n  userProfileId: string,\n  action: string,\n  resourceType: string,\n  resourceId: string,\n  oldValues?: any,\n  newValues?: any\n): Promise<void> {\n  try {\n    if (!supabaseAdmin) return;\n\n    await supabaseAdmin\n      .from('admin_audit_log')\n      .insert({\n        user_id: userProfileId,\n        action,\n        resource_type: resourceType,\n        resource_id: resourceId,\n        old_values: oldValues ? JSON.stringify(oldValues) : null,\n        new_values: newValues ? JSON.stringify(newValues) : null\n      });\n  } catch (error) {\n    console.error('Error logging admin action:', error);\n  }\n}\n\n// =====================================================\n// UTILIDADES PARA NEXT.JS API ROUTES\n// =====================================================\n\n/**\n * Wrapper para API routes que requieren autenticación admin (App Router)\n */\nexport function withAdminAuth(\n  handler: (\n    request: NextRequest,\n    context: { user: UserProfile; supabase: typeof supabaseAdmin }\n  ) => Promise<Response>,\n  requiredPermissions?: string[][]\n) {\n  return async (request: NextRequest): Promise<Response> => {\n    const authResult = await checkAdminPermissions(requiredPermissions, request);\n\n    if (!authResult.success) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: authResult.error\n        }),\n        {\n          status: authResult.status || 500,\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    return handler(request, {\n      user: authResult.user!,\n      supabase: authResult.supabase!\n    });\n  };\n}\n\n/**\n * Wrapper para Pages Router API Routes que requieren autenticación admin\n */\nexport function withAdminAuthPages(\n  handler: (\n    req: NextApiRequest,\n    res: NextApiResponse,\n    context: { user: UserProfile; supabase: typeof supabaseAdmin }\n  ) => Promise<void>,\n  requiredPermissions?: string[][]\n) {\n  return async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n    const authResult = await checkAdminPermissions(requiredPermissions, req);\n\n    if (!authResult.success) {\n      return res.status(authResult.status || 500).json({\n        success: false,\n        error: authResult.error\n      });\n    }\n\n    return handler(req, res, {\n      user: authResult.user!,\n      supabase: authResult.supabase!\n    });\n  };\n}\n\n/**\n * Extrae información de la request para logging\n * Soporta tanto NextRequest como NextApiRequest\n */\nexport function getRequestInfo(request: NextRequest | NextApiRequest) {\n  if ('query' in request) {\n    // NextApiRequest (Pages Router)\n    const req = request as NextApiRequest;\n    return {\n      method: req.method || 'GET',\n      url: req.url || 'unknown',\n      userAgent: req.headers['user-agent'] || 'unknown',\n      ip: req.headers['x-forwarded-for'] ||\n          req.headers['x-real-ip'] ||\n          req.connection?.remoteAddress ||\n          'unknown'\n    };\n  } else {\n    // NextRequest (App Router)\n    const req = request as NextRequest;\n    return {\n      method: req.method,\n      url: req.url,\n      userAgent: req.headers.get('user-agent') || 'unknown',\n      ip: req.headers.get('x-forwarded-for') ||\n          req.headers.get('x-real-ip') ||\n          'unknown'\n    };\n  }\n}\n"],"names":["checkAdminAccess","checkAdminPermissions","checkAdvancedSecurity","checkCRUDPermissions","getAuthFromApiRoute","getAuthFromHeaders","getAuthFromRouteHandler","getAuthenticatedAdmin","getAuthenticatedUser","getRequestInfo","getUnifiedAuth","getUserProfile","hasAllPermissions","hasAnyPermission","hasPermission","isAdmin","isModeratorOrAdmin","logAdminAccess","logAdminAction","withAdminAuth","withAdminAuthPages","request","userId","sessionId","getToken","getAuth","console","log","token","payload","JSON","parse","atob","split","publicRole","publicMetadata","role","privateRole","privateMetadata","user","currentUser","userPublicRole","userPrivateRole","fallbackError","warn","tokenError","sessionClaims","auth","authError","error","message","Error","clerkUserId","headers","get","deprecated","authResult","status","undefined","supabase","supabaseAdmin","adminCheck","success","req","res","apiError","routeError","data","profile","profileError","from","select","eq","single","roleError","role_id","userProfile","user_roles","is_active","hasAdminAccess","permissionPath","permissions","current","path","some","permission","every","role_name","requiredPermissions","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","admin","allowed","logAuthFailure","csrfValidation","validateRequestOrigin","valid","securityContext","getSecurityContext","logAuthSuccess","logAuthentication","AuditResult","SUCCESS","authMethod","riskLevel","ip","ipAddress","userAgent","FAILURE","fallbackAttempted","fallbackResult","jwtValidation","validateJWTIntegrity","jwtPermissionValidation","validateJWTPermissions","logPermissionDenied","runSecurityDetection","length","hasRequiredPermissions","flat","id","resource","action","operation","securityValidation","validateSecurityContext","code","severity","context","userProfileId","resourceType","resourceId","additionalData","insert","user_id","resource_type","resource_id","new_values","stringify","oldValues","newValues","old_values","handler","Response","json","method","url","connection","remoteAddress"],"mappings":"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"}