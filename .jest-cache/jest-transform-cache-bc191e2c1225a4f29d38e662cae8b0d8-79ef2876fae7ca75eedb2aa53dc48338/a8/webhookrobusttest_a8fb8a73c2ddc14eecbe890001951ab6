ae8c692fdf6293a70cb570e53adc4696
/**
 * Tests para el webhook robusto de Clerk
 * Verifica validación de firma, manejo de errores y procesamiento de eventos
 */ "use strict";
// Mock de svix
jest.mock('svix', ()=>({
        Webhook: jest.fn().mockImplementation(()=>({
                verify: jest.fn()
            }))
    }));
// Mock del servicio de sincronización
jest.mock('@/lib/auth/user-sync-service', ()=>({
        syncUserToSupabase: jest.fn(),
        deleteUserFromSupabase: jest.fn()
    }));
// Mock de auditoría de seguridad
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn(),
        logAdminAction: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../app/api/auth/webhook/route");
const _svix = require("svix");
const _usersyncservice = require("../lib/auth/user-sync-service");
const _securityaudit = require("../lib/auth/security-audit");
describe('Webhook Robusto de Clerk', ()=>{
    let mockWebhook;
    let mockSyncUser;
    let mockDeleteUser;
    beforeEach(()=>{
        mockWebhook = _svix.Webhook;
        mockSyncUser = _usersyncservice.syncUserToSupabase;
        mockDeleteUser = _usersyncservice.deleteUserFromSupabase;
        jest.clearAllMocks();
        // Mock environment variable
        process.env.CLERK_WEBHOOK_SECRET = 'test-webhook-secret';
    });
    afterEach(()=>{
        delete process.env.CLERK_WEBHOOK_SECRET;
    });
    const mockClerkUserData = {
        id: 'user_123',
        email_addresses: [
            {
                email_address: 'test@example.com',
                id: 'email_123',
                verification: {
                    status: 'verified',
                    strategy: 'email_code'
                }
            }
        ],
        first_name: 'John',
        last_name: 'Doe',
        created_at: Date.now(),
        updated_at: Date.now()
    };
    const createMockRequest = (payload, headers = {})=>{
        const defaultHeaders = {
            'svix-id': 'msg_123',
            'svix-timestamp': '1234567890',
            'svix-signature': 'v1,signature123',
            'content-type': 'application/json',
            ...headers
        };
        return {
            headers: {
                get: jest.fn((key)=>defaultHeaders[key.toLowerCase()] || null)
            },
            text: jest.fn().mockResolvedValue(JSON.stringify(payload))
        };
    };
    describe('POST - Procesamiento de eventos', ()=>{
        it('debe procesar evento user.created exitosamente', async ()=>{
            const eventData = {
                type: 'user.created',
                data: mockClerkUserData,
                object: 'event'
            };
            const mockRequest = createMockRequest(eventData);
            // Mock verificación exitosa
            const mockVerify = jest.fn().mockReturnValue(eventData);
            mockWebhook.mockImplementation(()=>({
                    verify: mockVerify
                }));
            // Mock sincronización exitosa
            mockSyncUser.mockResolvedValue({
                success: true,
                action: 'created',
                userId: 'user_123'
            });
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.eventType).toBe('user.created');
            expect(responseData.action).toBe('created');
            expect(mockSyncUser).toHaveBeenCalledWith(mockClerkUserData, expect.any(Object));
            expect(_securityaudit.logAdminAction).toHaveBeenCalled();
        });
        it('debe procesar evento user.updated exitosamente', async ()=>{
            const eventData = {
                type: 'user.updated',
                data: mockClerkUserData,
                object: 'event'
            };
            const mockRequest = createMockRequest(eventData);
            const mockVerify = jest.fn().mockReturnValue(eventData);
            mockWebhook.mockImplementation(()=>({
                    verify: mockVerify
                }));
            mockSyncUser.mockResolvedValue({
                success: true,
                action: 'updated',
                userId: 'user_123'
            });
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.eventType).toBe('user.updated');
            expect(responseData.action).toBe('updated');
        });
        it('debe procesar evento user.deleted exitosamente', async ()=>{
            const eventData = {
                type: 'user.deleted',
                data: mockClerkUserData,
                object: 'event'
            };
            const mockRequest = createMockRequest(eventData);
            const mockVerify = jest.fn().mockReturnValue(eventData);
            mockWebhook.mockImplementation(()=>({
                    verify: mockVerify
                }));
            mockDeleteUser.mockResolvedValue({
                success: true,
                action: 'deleted',
                userId: 'user_123'
            });
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.eventType).toBe('user.deleted');
            expect(responseData.action).toBe('deleted');
            expect(mockDeleteUser).toHaveBeenCalledWith('user_123', expect.any(Object));
        });
        it('debe ignorar eventos no manejados', async ()=>{
            const eventData = {
                type: 'session.created',
                data: mockClerkUserData,
                object: 'event'
            };
            const mockRequest = createMockRequest(eventData);
            const mockVerify = jest.fn().mockReturnValue(eventData);
            mockWebhook.mockImplementation(()=>({
                    verify: mockVerify
                }));
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.eventType).toBe('session.created');
            expect(responseData.action).toBe('ignored');
        });
    });
    describe('Validación de seguridad', ()=>{
        it('debe rechazar webhook sin secret configurado', async ()=>{
            delete process.env.CLERK_WEBHOOK_SECRET;
            const mockRequest = createMockRequest({});
            const response = await (0, _route.POST)(mockRequest);
            expect(response.status).toBe(200);
            expect(await response.text()).toBe('Webhook no configurado');
        });
        it('debe rechazar webhook con headers faltantes', async ()=>{
            const mockRequest = createMockRequest({}, {
                'svix-id': 'msg_123'
            });
            const response = await (0, _route.POST)(mockRequest);
            expect(response.status).toBe(400);
            expect(await response.text()).toContain('Headers de webhook faltantes');
            expect(_securityaudit.logSecurityEvent).toHaveBeenCalledWith(expect.objectContaining({
                event_type: 'SECURITY_VIOLATION',
                severity: 'medium'
            }));
        });
        it('debe rechazar webhook con firma inválida', async ()=>{
            const eventData = {
                type: 'user.created',
                data: mockClerkUserData,
                object: 'event'
            };
            const mockRequest = createMockRequest(eventData);
            // Mock verificación fallida
            const mockVerify = jest.fn().mockImplementation(()=>{
                throw new Error('Firma inválida');
            });
            mockWebhook.mockImplementation(()=>({
                    verify: mockVerify
                }));
            const response = await (0, _route.POST)(mockRequest);
            expect(response.status).toBe(401);
            expect(await response.text()).toBe('Firma inválida');
            expect(_securityaudit.logSecurityEvent).toHaveBeenCalledWith(expect.objectContaining({
                event_type: 'SECURITY_VIOLATION',
                severity: 'high'
            }));
        });
        it('debe manejar payload vacío', async ()=>{
            const mockRequest = {
                headers: {
                    get: jest.fn((key)=>{
                        const headers = {
                            'svix-id': 'msg_123',
                            'svix-timestamp': '1234567890',
                            'svix-signature': 'v1,signature123'
                        };
                        return headers[key.toLowerCase()] || null;
                    })
                },
                text: jest.fn().mockResolvedValue('')
            };
            const response = await (0, _route.POST)(mockRequest);
            expect(response.status).toBe(400);
            expect(await response.text()).toBe('Payload vacío');
        });
    });
    describe('Manejo de errores', ()=>{
        it('debe manejar errores en sincronización', async ()=>{
            const eventData = {
                type: 'user.created',
                data: mockClerkUserData,
                object: 'event'
            };
            const mockRequest = createMockRequest(eventData);
            const mockVerify = jest.fn().mockReturnValue(eventData);
            mockWebhook.mockImplementation(()=>({
                    verify: mockVerify
                }));
            // Mock error en sincronización
            mockSyncUser.mockResolvedValue({
                success: false,
                action: 'error',
                error: 'Error de base de datos'
            });
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(500);
            expect(responseData.success).toBe(false);
            expect(responseData.error).toBe('Error procesando webhook');
            expect(_securityaudit.logSecurityEvent).toHaveBeenCalledWith(expect.objectContaining({
                event_type: 'SECURITY_VIOLATION',
                severity: 'medium'
            }));
        });
        it('debe manejar errores críticos', async ()=>{
            const mockRequest = createMockRequest({});
            // Mock error crítico en verificación
            mockWebhook.mockImplementation(()=>{
                throw new Error('Error crítico');
            });
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(500);
            expect(responseData.success).toBe(false);
            expect(responseData.error).toBe('Error interno del servidor');
            expect(_securityaudit.logSecurityEvent).toHaveBeenCalledWith(expect.objectContaining({
                event_type: 'SECURITY_VIOLATION',
                severity: 'critical'
            }));
        });
    });
    describe('GET - Health check', ()=>{
        it('debe retornar status healthy', async ()=>{
            const mockRequest = {
                url: 'http://localhost:3000/api/auth/webhook'
            };
            const response = await (0, _route.GET)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.status).toBe('healthy');
            expect(responseData.message).toContain('funcionando correctamente');
            expect(responseData.version).toBe('2.0');
            expect(responseData.features).toBeInstanceOf(Array);
        });
        it('debe incluir métricas cuando se soliciten', async ()=>{
            const mockRequest = {
                url: 'http://localhost:3000/api/auth/webhook?metrics=true'
            };
            const response = await (0, _route.GET)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.metrics).toBeDefined();
            expect(responseData.metrics.totalEvents).toBeDefined();
            expect(responseData.metrics.eventTypes).toBeDefined();
        });
        it('debe mostrar configuración del webhook', async ()=>{
            const mockRequest = {
                url: 'http://localhost:3000/api/auth/webhook'
            };
            const response = await (0, _route.GET)(mockRequest);
            const responseData = await response.json();
            expect(responseData.configuration).toBeDefined();
            expect(responseData.configuration.webhookSecretConfigured).toBe(true);
            expect(responseData.configuration.environment).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,