cf8abd2498a8174f9f32a781c8a7ac9e
/**
 * Tests Unitarios - AuthSection
 * Pruebas enfocadas en el componente de autenticación
 */ "use strict";
// Mock de Next.js
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn()
            })
    }));
jest.mock('@clerk/nextjs', ()=>({
        ClerkProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        ...mockClerkHooks
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _nextjs = require("@clerk/nextjs");
const _AuthSection = /*#__PURE__*/ _interop_require_default(require("../../AuthSection"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock de Clerk con diferentes estados
const mockClerkHooks = {
    useUser: jest.fn(),
    SignedIn: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "signed-in",
            children: children
        }),
    SignedOut: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "signed-out",
            children: children
        }),
    UserButton: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "user-button",
            children: "UserButton"
        })
};
// Wrapper de pruebas
const TestWrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_nextjs.ClerkProvider, {
        publishableKey: "test-key",
        children: children
    });
describe('AuthSection - Tests Unitarios', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Estado por defecto: usuario no autenticado
        mockClerkHooks.useUser.mockReturnValue({
            isSignedIn: false,
            user: null,
            isLoaded: true
        });
    });
    describe('Variante Desktop', ()=>{
        it('debe renderizar el botón de autenticación con solo icono Google', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            // Verificar que se renderiza el estado SignedOut
            expect(_react1.screen.getByTestId('signed-out')).toBeInTheDocument();
            // Verificar que hay un botón con enlace a /signin
            const signInLink = _react1.screen.getByRole('link');
            expect(signInLink).toHaveAttribute('href', '/signin');
        });
        it('debe mostrar solo el icono de Google sin texto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            // Verificar que NO hay texto "Iniciar Sesión"
            expect(_react1.screen.queryByText('Iniciar Sesión')).not.toBeInTheDocument();
            // Verificar que hay un SVG (icono de Google)
            const googleIcon = _react1.screen.getByRole('link').querySelector('svg');
            expect(googleIcon).toBeInTheDocument();
        });
        it('debe tener las clases CSS correctas para el botón translúcido', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('bg-white/20', 'hover:bg-white/30');
            expect(button).toHaveClass('backdrop-blur-sm');
            expect(button).toHaveClass('border-2', 'border-white/30');
            expect(button).toHaveClass('rounded-full');
        });
        it('debe tener los colores oficiales de Google en el SVG', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const svgPaths = _react1.screen.getByRole('link').querySelectorAll('path');
            // Verificar que hay 4 paths (colores de Google)
            expect(svgPaths).toHaveLength(4);
            // Verificar colores específicos
            expect(svgPaths[0]).toHaveAttribute('fill', '#4285F4'); // Azul
            expect(svgPaths[1]).toHaveAttribute('fill', '#34A853'); // Verde
            expect(svgPaths[2]).toHaveAttribute('fill', '#FBBC05'); // Amarillo
            expect(svgPaths[3]).toHaveAttribute('fill', '#EA4335'); // Rojo
        });
        it('debe ser clickeable y navegar a /signin', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const signInLink = _react1.screen.getByRole('link');
            _react1.fireEvent.click(signInLink);
            // Verificar que el enlace es clickeable
            expect(signInLink).toHaveAttribute('href', '/signin');
        });
    });
    describe('Variante Mobile', ()=>{
        it('debe renderizar correctamente en mobile', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "mobile"
                })
            }));
            expect(_react1.screen.getByTestId('signed-out')).toBeInTheDocument();
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('bg-white/20', 'hover:bg-white/30');
        });
        it('debe tener el mismo diseño que desktop', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "mobile"
                })
            }));
            const mobileButton = _react1.screen.getByRole('button');
            const mobileClasses = mobileButton.className;
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const desktopButton = _react1.screen.getByRole('button');
            expect(desktopButton.className).toBe(mobileClasses);
        });
    });
    describe('Variante TopBar', ()=>{
        it('debe renderizar un botón diferente para topbar', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "topbar"
                })
            }));
            expect(_react1.screen.getByText('Ingresá')).toBeInTheDocument();
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('text-gray-800', 'hover:text-gray-900');
        });
        it('debe tener estilos específicos para topbar', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "topbar"
                })
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('text-xs', 'px-2', 'py-1', 'h-auto');
        });
    });
    describe('Estados de Clerk', ()=>{
        it('debe mostrar skeleton cuando Clerk no está cargado', ()=>{
            mockClerkHooks.useUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: false
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "mobile"
                })
            }));
            // Verificar que se muestra el skeleton
            const skeleton = _react1.screen.getByRole('generic');
            expect(skeleton).toHaveClass('animate-pulse');
        });
        it('debe renderizar UserButton cuando el usuario está autenticado', ()=>{
            mockClerkHooks.useUser.mockReturnValue({
                isSignedIn: true,
                user: {
                    id: '1',
                    firstName: 'Test'
                },
                isLoaded: true
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            expect(_react1.screen.getByTestId('signed-in')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('user-button')).toBeInTheDocument();
        });
    });
    describe('Modo Fallback (sin Clerk)', ()=>{
        it('debe funcionar sin Clerk habilitado', ()=>{
            // Simular componente sin Clerk
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "desktop"
            }));
            // Verificar que se renderiza algo (modo fallback)
            expect(container.firstChild).toBeInTheDocument();
        });
    });
    describe('Accesibilidad', ()=>{
        it('debe tener atributos de accesibilidad correctos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toBeInTheDocument();
            const link = _react1.screen.getByRole('link');
            expect(link).toHaveAttribute('href', '/signin');
        });
        it('debe ser navegable por teclado', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const button = _react1.screen.getByRole('button');
            // Simular navegación por teclado
            _react1.fireEvent.keyDown(button, {
                key: 'Enter'
            });
            _react1.fireEvent.keyDown(button, {
                key: ' '
            });
            // Verificar que no hay errores
            expect(button).toBeInTheDocument();
        });
    });
    describe('Interacciones', ()=>{
        it('debe manejar hover effects', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const button = _react1.screen.getByRole('button');
            _react1.fireEvent.mouseEnter(button);
            _react1.fireEvent.mouseLeave(button);
            // Verificar que las clases hover están presentes
            expect(button).toHaveClass('hover:bg-white/30');
            expect(button).toHaveClass('hover:border-white/50');
        });
        it('debe manejar efectos de transformación', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const button = _react1.screen.getByRole('button');
            // Verificar clases de transformación
            expect(button).toHaveClass('transform', 'hover:scale-105', 'active:scale-95');
        });
    });
    describe('Consistencia Visual', ()=>{
        it('debe mantener el mismo tamaño de icono en todas las variantes', ()=>{
            const variants = [
                'desktop',
                'mobile'
            ];
            variants.forEach((variant)=>{
                const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                        variant: variant
                    })
                }));
                if (variant !== 'topbar') {
                    const svg = _react1.screen.getByRole('link').querySelector('svg');
                    expect(svg).toHaveClass('w-5', 'h-5');
                }
                unmount();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,