8617678d03ee31ffa44e016c71803699
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Select () {
        return Select;
    },
    get SelectContent () {
        return SelectContent;
    },
    get SelectField () {
        return SelectField;
    },
    get SelectGroup () {
        return SelectGroup;
    },
    get SelectItem () {
        return SelectItem;
    },
    get SelectLabel () {
        return SelectLabel;
    },
    get SelectScrollDownButton () {
        return SelectScrollDownButton;
    },
    get SelectScrollUpButton () {
        return SelectScrollUpButton;
    },
    get SelectSeparator () {
        return SelectSeparator;
    },
    get SelectTrigger () {
        return SelectTrigger;
    },
    get SelectValue () {
        return SelectValue;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactselect = /*#__PURE__*/ _interop_require_wildcard(require("@radix-ui/react-select"));
const _optimizedimports = require("../../lib/optimized-imports");
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Select = _reactselect.Root;
const SelectGroup = _reactselect.Group;
const SelectValue = _reactselect.Value;
const selectTriggerVariants = (0, _classvarianceauthority.cva)("flex h-10 w-full items-center justify-between rounded-md border bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200", {
    variants: {
        variant: {
            default: "border-gray-300 focus:border-primary focus:ring-primary/20",
            error: "border-red-500 focus:border-red-500 focus:ring-red-500/20",
            success: "border-green-500 focus:border-green-500 focus:ring-green-500/20"
        },
        size: {
            sm: "h-8 px-2 text-xs",
            md: "h-10 px-3 text-sm",
            lg: "h-12 px-4 text-base"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "md"
    }
});
const SelectTrigger = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, children, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactselect.Trigger, {
        ref: ref,
        className: (0, _utils.cn)(selectTriggerVariants({
            variant,
            size
        }), className),
        ...props,
        children: [
            children,
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.Icon, {
                asChild: true,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedimports.ChevronDown, {
                    className: "h-4 w-4 opacity-50"
                })
            })
        ]
    }));
SelectTrigger.displayName = _reactselect.Trigger.displayName;
const SelectScrollUpButton = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.ScrollUpButton, {
        ref: ref,
        className: (0, _utils.cn)("flex cursor-default items-center justify-center py-1", className),
        ...props,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedimports.ChevronUp, {
            className: "h-4 w-4"
        })
    }));
SelectScrollUpButton.displayName = _reactselect.ScrollUpButton.displayName;
const SelectScrollDownButton = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.ScrollDownButton, {
        ref: ref,
        className: (0, _utils.cn)("flex cursor-default items-center justify-center py-1", className),
        ...props,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedimports.ChevronDown, {
            className: "h-4 w-4"
        })
    }));
SelectScrollDownButton.displayName = _reactselect.ScrollDownButton.displayName;
const SelectContent = /*#__PURE__*/ _react.forwardRef(({ className, children, position = "popper", ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.Portal, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactselect.Content, {
            ref: ref,
            className: (0, _utils.cn)("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white text-gray-900 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", position === "popper" && "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1", className),
            position: position,
            ...props,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectScrollUpButton, {}),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.Viewport, {
                    className: (0, _utils.cn)("p-1", position === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),
                    children: children
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectScrollDownButton, {})
            ]
        })
    }));
SelectContent.displayName = _reactselect.Content.displayName;
const SelectLabel = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.Label, {
        ref: ref,
        className: (0, _utils.cn)("py-1.5 pl-8 pr-2 text-sm font-semibold", className),
        ...props
    }));
SelectLabel.displayName = _reactselect.Label.displayName;
const SelectItem = /*#__PURE__*/ _react.forwardRef(({ className, children, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactselect.Item, {
        ref: ref,
        className: (0, _utils.cn)("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className),
        ...props,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.ItemIndicator, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedimports.Check, {
                        className: "h-4 w-4"
                    })
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.ItemText, {
                children: children
            })
        ]
    }));
SelectItem.displayName = _reactselect.Item.displayName;
const SelectSeparator = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.Separator, {
        ref: ref,
        className: (0, _utils.cn)("-mx-1 my-1 h-px bg-gray-200", className),
        ...props
    }));
SelectSeparator.displayName = _reactselect.Separator.displayName;
const SelectField = /*#__PURE__*/ _react.forwardRef(({ label, description, error, placeholder = "Seleccionar...", children, value, onValueChange, variant = "default", size = "md", required, disabled, className, ...props }, ref)=>{
    const hasError = !!error;
    const finalVariant = hasError ? "error" : variant;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: (0, _utils.cn)("space-y-2", className),
        children: [
            (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-1",
                children: [
                    label && /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        className: (0, _utils.cn)("text-sm font-medium text-gray-900", hasError && "text-red-600", disabled && "opacity-50"),
                        children: [
                            label,
                            required && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-red-500 ml-1",
                                children: "*"
                            })
                        ]
                    }),
                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: (0, _utils.cn)("text-xs text-gray-600", hasError && "text-red-500"),
                        children: description
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(Select, {
                value: value,
                onValueChange: onValueChange,
                disabled: disabled,
                ...props,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectTrigger, {
                        variant: finalVariant,
                        size: size,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectValue, {
                            placeholder: placeholder
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectContent, {
                        children: children
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: "text-xs text-red-600",
                children: error
            })
        ]
    });
});
SelectField.displayName = "SelectField";

//# sourceMappingURL=data:application/json;base64,