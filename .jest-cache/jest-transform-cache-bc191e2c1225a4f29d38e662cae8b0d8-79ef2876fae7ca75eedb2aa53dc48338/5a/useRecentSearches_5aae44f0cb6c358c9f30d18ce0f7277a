62b08d4ba25764a1a380f0e7aaa13110
// ===================================
// HOOK: useRecentSearches - Gestión de búsquedas recientes con localStorage
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    useRecentSearches: function() {
        return useRecentSearches;
    },
    useRecentSearchesSimple: function() {
        return useRecentSearchesSimple;
    }
});
const _react = require("react");
const DEFAULT_OPTIONS = {
    maxSearches: 5,
    storageKey: 'pinteya-recent-searches',
    enablePersistence: true,
    filterDuplicates: true,
    expirationDays: 30
};
function useRecentSearches(options = {}) {
    const config = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const [recentSearches, setRecentSearches] = (0, _react.useState)([]);
    // Función para validar y limpiar una búsqueda
    const sanitizeSearch = (0, _react.useCallback)((search)=>{
        return search.trim().toLowerCase();
    }, []);
    // Función para verificar si los datos han expirado
    const isExpired = (0, _react.useCallback)((timestamp)=>{
        if (config.expirationDays === 0) return false;
        const maxAge = config.expirationDays * 24 * 60 * 60 * 1000;
        return Date.now() - timestamp > maxAge;
    }, [
        config.expirationDays
    ]);
    // Cargar búsquedas desde localStorage
    const loadFromStorage = (0, _react.useCallback)(()=>{
        if (!config.enablePersistence || typeof window === 'undefined') {
            return [];
        }
        try {
            const stored = localStorage.getItem(config.storageKey);
            if (!stored) return [];
            // Intentar cargar formato nuevo (con metadata)
            try {
                const parsed = JSON.parse(stored);
                // Verificar estructura y expiración
                if (parsed.searches && Array.isArray(parsed.searches)) {
                    if (parsed.timestamp && isExpired(parsed.timestamp)) {
                        localStorage.removeItem(config.storageKey);
                        return [];
                    }
                    return parsed.searches.slice(0, config.maxSearches);
                }
            } catch  {
                // Fallback: intentar cargar formato antiguo (array simple)
                const parsed = JSON.parse(stored);
                if (Array.isArray(parsed)) {
                    return parsed.slice(0, config.maxSearches);
                }
            }
            return [];
        } catch (error) {
            console.warn('Error loading recent searches from localStorage:', error);
            // Limpiar localStorage corrupto
            try {
                localStorage.removeItem(config.storageKey);
            } catch (cleanupError) {
                console.warn('Error cleaning up corrupted localStorage:', cleanupError);
            }
            return [];
        }
    }, [
        config.enablePersistence,
        config.storageKey,
        config.maxSearches,
        isExpired
    ]);
    // Guardar búsquedas en localStorage
    const saveToStorage = (0, _react.useCallback)((searches)=>{
        if (!config.enablePersistence || typeof window === 'undefined') {
            return;
        }
        try {
            if (searches.length === 0) {
                localStorage.removeItem(config.storageKey);
                return;
            }
            const dataToStore = {
                searches: searches.slice(0, config.maxSearches),
                timestamp: Date.now(),
                version: '1.0.0'
            };
            localStorage.setItem(config.storageKey, JSON.stringify(dataToStore));
        } catch (error) {
            console.warn('Error saving recent searches to localStorage:', error);
        }
    }, [
        config.enablePersistence,
        config.storageKey,
        config.maxSearches
    ]);
    // Cargar búsquedas al inicializar
    (0, _react.useEffect)(()=>{
        const loaded = loadFromStorage();
        setRecentSearches(loaded);
    }, [
        loadFromStorage
    ]);
    // Agregar una nueva búsqueda
    const addSearch = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        if (!sanitized || sanitized.length < 2) return;
        setRecentSearches((prev)=>{
            let updated = [
                ...prev
            ];
            // Remover duplicados si está habilitado
            if (config.filterDuplicates) {
                updated = updated.filter((s)=>sanitizeSearch(s) !== sanitized);
            }
            // Agregar al principio
            updated.unshift(search.trim());
            // Limitar al máximo configurado
            updated = updated.slice(0, config.maxSearches);
            // Guardar en localStorage
            saveToStorage(updated);
            return updated;
        });
    }, [
        sanitizeSearch,
        config.filterDuplicates,
        config.maxSearches,
        saveToStorage
    ]);
    // Remover una búsqueda específica
    const removeSearch = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        setRecentSearches((prev)=>{
            const updated = prev.filter((s)=>sanitizeSearch(s) !== sanitized);
            saveToStorage(updated);
            return updated;
        });
    }, [
        sanitizeSearch,
        saveToStorage
    ]);
    // Limpiar todas las búsquedas
    const clearSearches = (0, _react.useCallback)(()=>{
        setRecentSearches([]);
        saveToStorage([]);
    }, [
        saveToStorage
    ]);
    // Verificar si una búsqueda existe
    const hasSearch = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        return recentSearches.some((s)=>sanitizeSearch(s) === sanitized);
    }, [
        recentSearches,
        sanitizeSearch
    ]);
    // Obtener las N búsquedas más recientes
    const getRecentSearches = (0, _react.useCallback)((limit)=>{
        const actualLimit = limit ?? config.maxSearches;
        return recentSearches.slice(0, actualLimit);
    }, [
        recentSearches,
        config.maxSearches
    ]);
    // Mover una búsqueda al principio (reordenar)
    const moveToTop = (0, _react.useCallback)((search)=>{
        const sanitized = sanitizeSearch(search);
        setRecentSearches((prev)=>{
            const filtered = prev.filter((s)=>sanitizeSearch(s) !== sanitized);
            const existing = prev.find((s)=>sanitizeSearch(s) === sanitized);
            if (!existing) return prev;
            const updated = [
                existing,
                ...filtered
            ];
            saveToStorage(updated);
            return updated;
        });
    }, [
        sanitizeSearch,
        saveToStorage
    ]);
    return {
        recentSearches,
        addSearch,
        removeSearch,
        clearSearches,
        hasSearch,
        getRecentSearches,
        moveToTop
    };
}
function useRecentSearchesSimple(limit = 5) {
    const { getRecentSearches } = useRecentSearches({
        maxSearches: limit
    });
    return getRecentSearches();
}
const _default = useRecentSearches;

//# sourceMappingURL=data:application/json;base64,