{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useRecentSearches.ts"],"sourcesContent":["// ===================================\n// HOOK: useRecentSearches - Gestión de búsquedas recientes con localStorage\n// ===================================\n\nimport { useState, useEffect, useCallback } from 'react';\n\nexport interface RecentSearchesOptions {\n  /** Número máximo de búsquedas recientes a mantener */\n  maxSearches?: number;\n  /** Clave de localStorage para persistir las búsquedas */\n  storageKey?: string;\n  /** Habilitar/deshabilitar persistencia en localStorage */\n  enablePersistence?: boolean;\n  /** Filtrar búsquedas duplicadas */\n  filterDuplicates?: boolean;\n  /** Tiempo de expiración en días (0 = sin expiración) */\n  expirationDays?: number;\n}\n\nexport interface RecentSearchesReturn {\n  /** Array de búsquedas recientes */\n  recentSearches: string[];\n  /** Agregar una nueva búsqueda */\n  addSearch: (search: string) => void;\n  /** Remover una búsqueda específica */\n  removeSearch: (search: string) => void;\n  /** Limpiar todas las búsquedas */\n  clearSearches: () => void;\n  /** Verificar si una búsqueda existe */\n  hasSearch: (search: string) => boolean;\n  /** Obtener las N búsquedas más recientes */\n  getRecentSearches: (limit?: number) => string[];\n  /** Reordenar búsquedas (mover al principio) */\n  moveToTop: (search: string) => void;\n}\n\ninterface PersistedSearchData {\n  searches: string[];\n  timestamp: number;\n  version: string;\n}\n\nconst DEFAULT_OPTIONS: Required<RecentSearchesOptions> = {\n  maxSearches: 5,\n  storageKey: 'pinteya-recent-searches',\n  enablePersistence: true,\n  filterDuplicates: true,\n  expirationDays: 30, // 30 días de expiración\n};\n\n/**\n * Hook para gestionar búsquedas recientes con persistencia en localStorage\n * \n * Características:\n * - Persistencia automática en localStorage\n * - Límite configurable de búsquedas\n * - Filtrado de duplicados\n * - Expiración automática\n * - Manejo de errores robusto\n */\nexport function useRecentSearches(options: RecentSearchesOptions = {}): RecentSearchesReturn {\n  const config = { ...DEFAULT_OPTIONS, ...options };\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n\n  // Función para validar y limpiar una búsqueda\n  const sanitizeSearch = useCallback((search: string): string => {\n    return search.trim().toLowerCase();\n  }, []);\n\n  // Función para verificar si los datos han expirado\n  const isExpired = useCallback((timestamp: number): boolean => {\n    if (config.expirationDays === 0) return false;\n    const maxAge = config.expirationDays * 24 * 60 * 60 * 1000;\n    return Date.now() - timestamp > maxAge;\n  }, [config.expirationDays]);\n\n  // Cargar búsquedas desde localStorage\n  const loadFromStorage = useCallback((): string[] => {\n    if (!config.enablePersistence || typeof window === 'undefined') {\n      return [];\n    }\n\n    try {\n      const stored = localStorage.getItem(config.storageKey);\n      if (!stored) return [];\n\n      // Intentar cargar formato nuevo (con metadata)\n      try {\n        const parsed: PersistedSearchData = JSON.parse(stored);\n        \n        // Verificar estructura y expiración\n        if (parsed.searches && Array.isArray(parsed.searches)) {\n          if (parsed.timestamp && isExpired(parsed.timestamp)) {\n            localStorage.removeItem(config.storageKey);\n            return [];\n          }\n          return parsed.searches.slice(0, config.maxSearches);\n        }\n      } catch {\n        // Fallback: intentar cargar formato antiguo (array simple)\n        const parsed = JSON.parse(stored);\n        if (Array.isArray(parsed)) {\n          return parsed.slice(0, config.maxSearches);\n        }\n      }\n\n      return [];\n    } catch (error) {\n      console.warn('Error loading recent searches from localStorage:', error);\n      // Limpiar localStorage corrupto\n      try {\n        localStorage.removeItem(config.storageKey);\n      } catch (cleanupError) {\n        console.warn('Error cleaning up corrupted localStorage:', cleanupError);\n      }\n      return [];\n    }\n  }, [config.enablePersistence, config.storageKey, config.maxSearches, isExpired]);\n\n  // Guardar búsquedas en localStorage\n  const saveToStorage = useCallback((searches: string[]): void => {\n    if (!config.enablePersistence || typeof window === 'undefined') {\n      return;\n    }\n\n    try {\n      if (searches.length === 0) {\n        localStorage.removeItem(config.storageKey);\n        return;\n      }\n\n      const dataToStore: PersistedSearchData = {\n        searches: searches.slice(0, config.maxSearches),\n        timestamp: Date.now(),\n        version: '1.0.0'\n      };\n\n      localStorage.setItem(config.storageKey, JSON.stringify(dataToStore));\n    } catch (error) {\n      console.warn('Error saving recent searches to localStorage:', error);\n    }\n  }, [config.enablePersistence, config.storageKey, config.maxSearches]);\n\n  // Cargar búsquedas al inicializar\n  useEffect(() => {\n    const loaded = loadFromStorage();\n    setRecentSearches(loaded);\n  }, [loadFromStorage]);\n\n  // Agregar una nueva búsqueda\n  const addSearch = useCallback((search: string): void => {\n    const sanitized = sanitizeSearch(search);\n    if (!sanitized || sanitized.length < 2) return;\n\n    setRecentSearches(prev => {\n      let updated = [...prev];\n\n      // Remover duplicados si está habilitado\n      if (config.filterDuplicates) {\n        updated = updated.filter(s => sanitizeSearch(s) !== sanitized);\n      }\n\n      // Agregar al principio\n      updated.unshift(search.trim());\n\n      // Limitar al máximo configurado\n      updated = updated.slice(0, config.maxSearches);\n\n      // Guardar en localStorage\n      saveToStorage(updated);\n\n      return updated;\n    });\n  }, [sanitizeSearch, config.filterDuplicates, config.maxSearches, saveToStorage]);\n\n  // Remover una búsqueda específica\n  const removeSearch = useCallback((search: string): void => {\n    const sanitized = sanitizeSearch(search);\n    \n    setRecentSearches(prev => {\n      const updated = prev.filter(s => sanitizeSearch(s) !== sanitized);\n      saveToStorage(updated);\n      return updated;\n    });\n  }, [sanitizeSearch, saveToStorage]);\n\n  // Limpiar todas las búsquedas\n  const clearSearches = useCallback((): void => {\n    setRecentSearches([]);\n    saveToStorage([]);\n  }, [saveToStorage]);\n\n  // Verificar si una búsqueda existe\n  const hasSearch = useCallback((search: string): boolean => {\n    const sanitized = sanitizeSearch(search);\n    return recentSearches.some(s => sanitizeSearch(s) === sanitized);\n  }, [recentSearches, sanitizeSearch]);\n\n  // Obtener las N búsquedas más recientes\n  const getRecentSearches = useCallback((limit?: number): string[] => {\n    const actualLimit = limit ?? config.maxSearches;\n    return recentSearches.slice(0, actualLimit);\n  }, [recentSearches, config.maxSearches]);\n\n  // Mover una búsqueda al principio (reordenar)\n  const moveToTop = useCallback((search: string): void => {\n    const sanitized = sanitizeSearch(search);\n    \n    setRecentSearches(prev => {\n      const filtered = prev.filter(s => sanitizeSearch(s) !== sanitized);\n      const existing = prev.find(s => sanitizeSearch(s) === sanitized);\n      \n      if (!existing) return prev;\n      \n      const updated = [existing, ...filtered];\n      saveToStorage(updated);\n      return updated;\n    });\n  }, [sanitizeSearch, saveToStorage]);\n\n  return {\n    recentSearches,\n    addSearch,\n    removeSearch,\n    clearSearches,\n    hasSearch,\n    getRecentSearches,\n    moveToTop,\n  };\n}\n\n/**\n * Hook simplificado para solo obtener búsquedas recientes\n */\nexport function useRecentSearchesSimple(limit: number = 5): string[] {\n  const { getRecentSearches } = useRecentSearches({ maxSearches: limit });\n  return getRecentSearches();\n}\n\nexport default useRecentSearches;\n"],"names":["useRecentSearches","useRecentSearchesSimple","DEFAULT_OPTIONS","maxSearches","storageKey","enablePersistence","filterDuplicates","expirationDays","options","config","recentSearches","setRecentSearches","useState","sanitizeSearch","useCallback","search","trim","toLowerCase","isExpired","timestamp","maxAge","Date","now","loadFromStorage","window","stored","localStorage","getItem","parsed","JSON","parse","searches","Array","isArray","removeItem","slice","error","console","warn","cleanupError","saveToStorage","length","dataToStore","version","setItem","stringify","useEffect","loaded","addSearch","sanitized","prev","updated","filter","s","unshift","removeSearch","clearSearches","hasSearch","some","getRecentSearches","limit","actualLimit","moveToTop","filtered","existing","find"],"mappings":"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"}