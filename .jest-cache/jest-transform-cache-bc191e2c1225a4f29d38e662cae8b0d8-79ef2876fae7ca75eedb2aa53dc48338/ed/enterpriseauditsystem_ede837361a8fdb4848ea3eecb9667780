d549f586f0babdc1b91c13cd11ed3eae
/**
 * Sistema Enterprise de Auditoría de Seguridad
 * Unifica y extiende todas las funcionalidades de auditoría con capacidades enterprise
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ENTERPRISE_AUDIT_CONFIG () {
        return ENTERPRISE_AUDIT_CONFIG;
    },
    get EnterpriseAuditSystem () {
        return EnterpriseAuditSystem;
    },
    get enterpriseAuditSystem () {
        return enterpriseAuditSystem;
    }
});
const _securityaudit = require("../auth/security-audit");
const _securityauditenhanced = require("../auth/security-audit-enhanced");
const _enterpriseratelimiter = require("../rate-limiting/enterprise-rate-limiter");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const ENTERPRISE_AUDIT_CONFIG = {
    // Retención de datos
    DATA_RETENTION: {
        security_events: 365,
        anomalies: 180,
        incidents: 1095,
        metrics: 90
    },
    // Umbrales de detección
    DETECTION_THRESHOLDS: {
        anomaly_confidence: 0.7,
        risk_score_critical: 80,
        risk_score_high: 60,
        risk_score_medium: 40,
        false_positive_threshold: 0.1
    },
    // Configuración de alertas
    ALERT_CONFIG: {
        immediate_notification: [
            'critical'
        ],
        batch_notification: [
            'high',
            'medium'
        ],
        notification_cooldown: 300,
        escalation_timeout: 3600 // segundos
    },
    // Análisis automático
    AUTOMATED_ANALYSIS: {
        pattern_analysis_interval: 300,
        anomaly_detection_interval: 600,
        metrics_update_interval: 60,
        cleanup_interval: 86400 // 24 horas
    }
};
class EnterpriseAuditSystem {
    constructor(){
        this.analysisIntervals = [];
    }
    static getInstance() {
        if (!EnterpriseAuditSystem.instance) {
            EnterpriseAuditSystem.instance = new EnterpriseAuditSystem();
        }
        return EnterpriseAuditSystem.instance;
    }
    /**
   * Inicializa el sistema de auditoría enterprise
   */ async initialize() {
        console.log('[ENTERPRISE_AUDIT] Inicializando sistema de auditoría...');
        try {
            // Verificar tablas de base de datos
            await this.ensureDatabaseTables();
            // Iniciar análisis automático
            this.startAutomatedAnalysis();
            // Limpiar datos antiguos
            await this.cleanupOldData();
            console.log('[ENTERPRISE_AUDIT] Sistema inicializado correctamente');
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en inicialización:', error);
            throw error;
        }
    }
    /**
   * Registra un evento de seguridad enterprise
   */ async logEnterpriseEvent(event, context, request) {
        try {
            // Generar ID único para correlación
            const correlationId = this.generateCorrelationId();
            // Calcular risk score
            const riskScore = this.calculateRiskScore(event);
            // Crear evento enterprise
            const enterpriseEvent = {
                ...event,
                id: this.generateEventId(),
                timestamp: new Date().toISOString(),
                resolved: false,
                correlation_id: correlationId,
                risk_score: riskScore,
                enterprise_context: context ? {
                    security_level: context.securityLevel,
                    permissions: context.permissions,
                    session_id: context.sessionId || 'unknown',
                    request_id: this.generateRequestId(request),
                    rate_limit_status: this.getRateLimitStatus(),
                    rls_context: {
                        filters_applied: {},
                        bypass_enabled: context.role === 'admin'
                    }
                } : undefined
            };
            // Registrar en sistema legacy
            await (0, _securityaudit.logSecurityEvent)(event);
            // Registrar en sistema enterprise
            await this.saveEnterpriseEvent(enterpriseEvent);
            // Análisis inmediato para eventos críticos
            if (event.severity === 'critical' || riskScore > ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS.risk_score_critical) {
                await this.performImmediateAnalysis(enterpriseEvent);
            }
            return correlationId;
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error registrando evento:', error);
            throw error;
        }
    }
    /**
   * Detecta anomalías en tiempo real
   */ async detectAnomalies(userId) {
        try {
            const anomalies = [];
            // Obtener eventos recientes
            const recentEvents = await this.getRecentEvents(userId, 24); // últimas 24 horas
            console.log(`[ENTERPRISE_AUDIT] DEBUG: Found ${recentEvents.length} recent events for user ${userId || 'all'}`);
            if (recentEvents.length > 0) {
                console.log(`[ENTERPRISE_AUDIT] DEBUG: Sample event:`, JSON.stringify(recentEvents[0], null, 2));
            }
            if (recentEvents.length === 0) {
                return anomalies;
            }
            // Ejecutar detectores de anomalías
            const detectors = [
                this.detectUnusualLoginPattern,
                this.detectSuspiciousAPIUsage,
                this.detectPrivilegeEscalation,
                this.detectRateLimitAbuse,
                this.detectGeographicAnomaly,
                this.detectTimeBasedAnomaly,
                this.detectBehavioralDeviation
            ];
            for (const detector of detectors){
                try {
                    const detectedAnomalies = await detector.call(this, recentEvents, userId);
                    anomalies.push(...detectedAnomalies);
                } catch (error) {
                    console.error('[ENTERPRISE_AUDIT] Error en detector de anomalías:', error);
                }
            }
            // Filtrar por confianza
            const highConfidenceAnomalies = anomalies.filter((a)=>a.confidence_score >= ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS.anomaly_confidence);
            // Guardar anomalías detectadas
            if (highConfidenceAnomalies.length > 0) {
                await this.saveAnomalies(highConfidenceAnomalies);
            }
            return highConfidenceAnomalies;
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en detección de anomalías:', error);
            return [];
        }
    }
    /**
   * Genera un reporte de seguridad enterprise
   */ async generateEnterpriseReport(startDate, endDate, includeAnomalies = true, includeIncidents = true) {
        try {
            // Generar reporte base
            const baseReport = await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate);
            // Añadir datos enterprise
            const enterpriseData = {
                anomalies: includeAnomalies ? await this.getAnomaliesInPeriod(startDate, endDate) : [],
                incidents: includeIncidents ? await this.getIncidentsInPeriod(startDate, endDate) : [],
                rate_limiting_stats: this.getRateLimitingStats(),
                compliance_metrics: await this.getComplianceMetrics(startDate, endDate),
                risk_assessment: await this.performRiskAssessment(),
                recommendations: await this.generateRecommendations()
            };
            return {
                ...baseReport,
                enterprise_data: enterpriseData
            };
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error generando reporte:', error);
            throw error;
        }
    }
    // =====================================================
    // MÉTODOS PRIVADOS
    // =====================================================
    generateCorrelationId() {
        return `corr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    generateEventId() {
        return `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    generateRequestId(request) {
        if (request) {
            return `req_${request.headers.get('x-request-id') || Date.now()}`;
        }
        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    calculateRiskScore(event) {
        let score = 0;
        // Base score por severidad
        switch(event.severity){
            case 'critical':
                score += 80;
                break;
            case 'high':
                score += 60;
                break;
            case 'medium':
                score += 40;
                break;
            case 'low':
                score += 20;
                break;
        }
        // Ajustes por tipo de evento
        switch(event.event_type){
            case 'AUTH_FAILURE':
                score += 10;
                break;
            case 'PERMISSION_DENIED':
                score += 15;
                break;
            case 'SUSPICIOUS_ACTIVITY':
                score += 25;
                break;
            case 'SECURITY_VIOLATION':
                score += 30;
                break;
        }
        // Ajustes por categoría
        switch(event.event_category){
            case 'authentication':
                score += 5;
                break;
            case 'authorization':
                score += 10;
                break;
            case 'suspicious_behavior':
                score += 20;
                break;
        }
        return Math.min(100, Math.max(0, score));
    }
    getRateLimitStatus() {
        const metrics = _enterpriseratelimiter.metricsCollector.getMetrics();
        return {
            allowed: metrics.allowedRequests > 0,
            remaining: metrics.allowedRequests,
            limit: metrics.totalRequests
        };
    }
    async ensureDatabaseTables() {
        // Verificar que las tablas necesarias existan
        // En un entorno real, esto se haría con migraciones
        console.log('[ENTERPRISE_AUDIT] Verificando tablas de base de datos...');
    }
    startAutomatedAnalysis() {
        console.log('[ENTERPRISE_AUDIT] 🚫 ANÁLISIS AUTOMÁTICO TEMPORALMENTE DESHABILITADO');
        console.log('[ENTERPRISE_AUDIT] 📋 Razón: Evitar llamadas recursivas a APIs de auth');
        // CÓDIGO COMENTADO TEMPORALMENTE PARA EVITAR RECURSIÓN
        // const config = ENTERPRISE_AUDIT_CONFIG.AUTOMATED_ANALYSIS;
        // // Análisis de patrones
        // const patternInterval = setInterval(async () => {
        //   try {
        //     await analyzeSecurityPatterns();
        //   } catch (error) {
        //     console.error('[ENTERPRISE_AUDIT] Error en análisis de patrones:', error);
        //   }
        // }, config.pattern_analysis_interval * 1000);
        // // Detección de anomalías
        // const anomalyInterval = setInterval(async () => {
        //   try {
        //     await this.detectAnomalies();
        //   } catch (error) {
        //     console.error('[ENTERPRISE_AUDIT] Error en detección de anomalías:', error);
        //   }
        // }, config.anomaly_detection_interval * 1000);
        // Actualización de métricas
        const metricsInterval = setInterval(async ()=>{
            try {
                await (0, _securityauditenhanced.getSecurityMetrics)();
            } catch (error) {
                console.error('[ENTERPRISE_AUDIT] Error actualizando métricas:', error);
            }
        }, config.metrics_update_interval * 1000);
        this.analysisIntervals.push(patternInterval, anomalyInterval, metricsInterval);
    }
    async cleanupOldData() {
        try {
            const retention = ENTERPRISE_AUDIT_CONFIG.DATA_RETENTION;
            const now = new Date();
            // Limpiar eventos antiguos
            const eventsThreshold = new Date(now.getTime() - retention.security_events * 24 * 60 * 60 * 1000);
            // En un entorno real, esto se haría con consultas SQL optimizadas
            console.log(`[ENTERPRISE_AUDIT] Limpiando eventos anteriores a ${eventsThreshold.toISOString()}`);
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en limpieza de datos:', error);
        }
    }
    async saveEnterpriseEvent(event) {
        // 🚫 TEMPORALMENTE DESHABILITADO PARA EVITAR LOGS MASIVOS DURANTE DEBUG
        // console.log('[ENTERPRISE_AUDIT] Guardando evento enterprise:', event.id);
        return;
    }
    async performImmediateAnalysis(event) {
        console.log(`[ENTERPRISE_AUDIT] Análisis inmediato para evento crítico: ${event.id}`);
        // Implementar análisis inmediato para eventos críticos
        if (event.risk_score && event.risk_score > 90) {
            console.warn(`[ENTERPRISE_AUDIT] ¡Evento de riesgo extremo detectado! Score: ${event.risk_score}`);
        }
    }
    async getRecentEvents(userId, hours = 24) {
        try {
            const { supabaseAdmin } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../supabase")));
            const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000).toISOString();
            console.log(`[ENTERPRISE_AUDIT] DEBUG: getRecentEvents - cutoffTime: ${cutoffTime}, userId: ${userId}`);
            // Estrategia simplificada para testing
            const { data, error } = await supabaseAdmin.from('enterprise_audit_events').select('*').gte('created_at', cutoffTime).order('created_at', {
                ascending: false
            });
            console.log(`[ENTERPRISE_AUDIT] DEBUG: getRecentEvents - raw data length: ${data?.length || 0}`);
            if (data && data.length > 0) {
                console.log(`[ENTERPRISE_AUDIT] DEBUG: Sample raw event:`, JSON.stringify(data[0], null, 2));
            }
            if (error) {
                console.error('[ENTERPRISE_AUDIT] Error obteniendo eventos recientes:', error);
                return [];
            }
            let events = data || [];
            // Filtrar por userId si se especifica
            if (userId && events.length > 0) {
                const beforeFilter = events.length;
                events = events.filter((event)=>event.user_id === userId);
                console.log(`[ENTERPRISE_AUDIT] DEBUG: getRecentEvents - filtered from ${beforeFilter} to ${events.length} events for user ${userId}`);
            }
            return events;
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en getRecentEvents:', error);
            return [];
        }
    }
    // =====================================================
    // DETECTORES DE ANOMALÍAS AVANZADOS
    // =====================================================
    /**
   * Detecta patrones de login inusuales
   */ async detectUnusualLoginPattern(events, userId) {
        const anomalies = [];
        try {
            const authEvents = events.filter((e)=>e.event_category === 'authentication' && (!userId || e.user_id === userId));
            console.log(`[ENTERPRISE_AUDIT] DEBUG: detectUnusualLoginPattern - Found ${authEvents.length} auth events`);
            if (authEvents.length > 0) {
                console.log(`[ENTERPRISE_AUDIT] DEBUG: Auth events:`, authEvents.map((e)=>({
                        type: e.event_type,
                        category: e.event_category,
                        user: e.user_id
                    })));
            }
            if (authEvents.length < 3) return anomalies;
            // Agrupar por usuario
            const userEvents = new Map();
            authEvents.forEach((event)=>{
                if (!userEvents.has(event.user_id)) {
                    userEvents.set(event.user_id, []);
                }
                userEvents.get(event.user_id).push(event);
            });
            for (const [uid, userAuthEvents] of userEvents){
                const indicators = [];
                let confidenceScore = 0;
                // 1. Múltiples fallos seguidos de éxito (posible brute force exitoso)
                const failures = userAuthEvents.filter((e)=>e.event_type === 'AUTH_FAILURE');
                const successes = userAuthEvents.filter((e)=>e.event_type === 'AUTH_SUCCESS');
                if (failures.length >= 3 && successes.length > 0) {
                    const lastFailure = new Date(failures[failures.length - 1].timestamp);
                    const firstSuccess = new Date(successes[0].timestamp);
                    if (firstSuccess > lastFailure) {
                        indicators.push({
                            type: 'brute_force_success',
                            value: {
                                failures: failures.length,
                                time_diff: firstSuccess.getTime() - lastFailure.getTime()
                            },
                            weight: 0.8,
                            description: `${failures.length} fallos seguidos de login exitoso`
                        });
                        confidenceScore += 0.8;
                    }
                }
                // 2. Logins desde múltiples IPs en corto tiempo
                const uniqueIPs = new Set(userAuthEvents.map((e)=>e.ip_address).filter(Boolean));
                if (uniqueIPs.size >= 3) {
                    indicators.push({
                        type: 'multiple_ips',
                        value: {
                            ip_count: uniqueIPs.size,
                            ips: Array.from(uniqueIPs)
                        },
                        weight: 0.6,
                        description: `Login desde ${uniqueIPs.size} IPs diferentes`
                    });
                    confidenceScore += 0.6;
                }
                // 3. Logins fuera de horario habitual
                const loginHours = userAuthEvents.filter((e)=>e.event_type === 'AUTH_SUCCESS').map((e)=>new Date(e.timestamp).getHours());
                const unusualHours = loginHours.filter((hour)=>hour < 6 || hour > 22);
                if (unusualHours.length > 0) {
                    indicators.push({
                        type: 'unusual_hours',
                        value: {
                            unusual_count: unusualHours.length,
                            hours: unusualHours
                        },
                        weight: 0.4,
                        description: `${unusualHours.length} logins en horarios inusuales`
                    });
                    confidenceScore += 0.4;
                }
                // Crear anomalía si hay suficientes indicadores
                if (indicators.length >= 2 && confidenceScore >= 0.7) {
                    anomalies.push({
                        id: this.generateAnomalyId(),
                        user_id: uid,
                        anomaly_type: 'unusual_login_pattern',
                        confidence_score: Math.min(1, confidenceScore),
                        description: `Patrón de login inusual detectado: ${indicators.map((i)=>i.description).join(', ')}`,
                        indicators,
                        risk_level: confidenceScore > 0.8 ? 'high' : 'medium',
                        detected_at: new Date().toISOString(),
                        status: 'new',
                        automated_actions: [
                            'log_incident',
                            'notify_security_team'
                        ],
                        manual_review_required: confidenceScore > 0.8
                    });
                }
            }
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en detectUnusualLoginPattern:', error);
        }
        return anomalies;
    }
    /**
   * Detecta uso sospechoso de APIs
   */ async detectSuspiciousAPIUsage(events, userId) {
        const anomalies = [];
        try {
            const apiEvents = events.filter((e)=>e.event_category === 'data_access' && (!userId || e.user_id === userId));
            if (apiEvents.length < 5) return anomalies;
            // Agrupar por usuario
            const userEvents = new Map();
            apiEvents.forEach((event)=>{
                if (!userEvents.has(event.user_id)) {
                    userEvents.set(event.user_id, []);
                }
                userEvents.get(event.user_id).push(event);
            });
            for (const [uid, userApiEvents] of userEvents){
                const indicators = [];
                let confidenceScore = 0;
                // 1. Volumen inusual de requests
                const requestCount = userApiEvents.length;
                if (requestCount > 100) {
                    indicators.push({
                        type: 'high_volume_requests',
                        value: {
                            count: requestCount
                        },
                        weight: 0.6,
                        description: `${requestCount} requests en 24 horas`
                    });
                    confidenceScore += 0.6;
                }
                // 2. Acceso a recursos sensibles
                const sensitiveResources = userApiEvents.filter((e)=>e.metadata?.resource && [
                        'admin',
                        'user_data',
                        'payment',
                        'sensitive'
                    ].some((keyword)=>e.metadata.resource.toLowerCase().includes(keyword)));
                if (sensitiveResources.length > 10) {
                    indicators.push({
                        type: 'sensitive_resource_access',
                        value: {
                            count: sensitiveResources.length
                        },
                        weight: 0.7,
                        description: `${sensitiveResources.length} accesos a recursos sensibles`
                    });
                    confidenceScore += 0.7;
                }
                // 3. Patrón de scraping (requests muy rápidos)
                const timestamps = userApiEvents.map((e)=>new Date(e.timestamp).getTime()).sort();
                let rapidRequests = 0;
                for(let i = 1; i < timestamps.length; i++){
                    if (timestamps[i] - timestamps[i - 1] < 1000) {
                        rapidRequests++;
                    }
                }
                if (rapidRequests > userApiEvents.length * 0.5) {
                    indicators.push({
                        type: 'rapid_requests',
                        value: {
                            rapid_count: rapidRequests,
                            total: userApiEvents.length
                        },
                        weight: 0.8,
                        description: `${rapidRequests} requests en menos de 1 segundo entre ellas`
                    });
                    confidenceScore += 0.8;
                }
                // Crear anomalía si hay suficientes indicadores
                if (indicators.length >= 2 && confidenceScore >= 0.7) {
                    anomalies.push({
                        id: this.generateAnomalyId(),
                        user_id: uid,
                        anomaly_type: 'suspicious_api_usage',
                        confidence_score: Math.min(1, confidenceScore),
                        description: `Uso sospechoso de API detectado: ${indicators.map((i)=>i.description).join(', ')}`,
                        indicators,
                        risk_level: confidenceScore > 0.8 ? 'high' : 'medium',
                        detected_at: new Date().toISOString(),
                        status: 'new',
                        automated_actions: [
                            'rate_limit_user',
                            'log_incident'
                        ],
                        manual_review_required: confidenceScore > 0.8
                    });
                }
            }
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en detectSuspiciousAPIUsage:', error);
        }
        return anomalies;
    }
    /**
   * Detecta intentos de escalación de privilegios
   */ async detectPrivilegeEscalation(events, userId) {
        const anomalies = [];
        try {
            const authEvents = events.filter((e)=>e.event_category === 'authorization' && (!userId || e.user_id === userId));
            if (authEvents.length < 3) return anomalies;
            // Agrupar por usuario
            const userEvents = new Map();
            authEvents.forEach((event)=>{
                if (!userEvents.has(event.user_id)) {
                    userEvents.set(event.user_id, []);
                }
                userEvents.get(event.user_id).push(event);
            });
            for (const [uid, userAuthEvents] of userEvents){
                const indicators = [];
                let confidenceScore = 0;
                // 1. Múltiples denegaciones de permisos
                const deniedEvents = userAuthEvents.filter((e)=>e.event_type === 'PERMISSION_DENIED');
                if (deniedEvents.length >= 5) {
                    indicators.push({
                        type: 'multiple_permission_denials',
                        value: {
                            count: deniedEvents.length
                        },
                        weight: 0.7,
                        description: `${deniedEvents.length} denegaciones de permisos`
                    });
                    confidenceScore += 0.7;
                }
                // 2. Intentos de acceso a recursos admin
                const adminAttempts = userAuthEvents.filter((e)=>e.metadata?.operation && e.metadata.operation.toLowerCase().includes('admin'));
                if (adminAttempts.length >= 3) {
                    indicators.push({
                        type: 'admin_access_attempts',
                        value: {
                            count: adminAttempts.length
                        },
                        weight: 0.8,
                        description: `${adminAttempts.length} intentos de acceso administrativo`
                    });
                    confidenceScore += 0.8;
                }
                // 3. Cambios de rol sospechosos
                const roleChanges = userAuthEvents.filter((e)=>e.event_type === 'ROLE_CHANGE');
                if (roleChanges.length > 0) {
                    indicators.push({
                        type: 'role_changes',
                        value: {
                            count: roleChanges.length
                        },
                        weight: 0.9,
                        description: `${roleChanges.length} cambios de rol detectados`
                    });
                    confidenceScore += 0.9;
                }
                // Crear anomalía si hay suficientes indicadores
                if (indicators.length >= 1 && confidenceScore >= 0.7) {
                    anomalies.push({
                        id: this.generateAnomalyId(),
                        user_id: uid,
                        anomaly_type: 'privilege_escalation_attempt',
                        confidence_score: Math.min(1, confidenceScore),
                        description: `Intento de escalación de privilegios: ${indicators.map((i)=>i.description).join(', ')}`,
                        indicators,
                        risk_level: confidenceScore > 0.8 ? 'critical' : 'high',
                        detected_at: new Date().toISOString(),
                        status: 'new',
                        automated_actions: [
                            'block_user',
                            'invalidate_sessions',
                            'notify_security_team'
                        ],
                        manual_review_required: true
                    });
                }
            }
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en detectPrivilegeEscalation:', error);
        }
        return anomalies;
    }
    /**
   * Detecta abuso de rate limiting
   */ async detectRateLimitAbuse(events, userId) {
        const anomalies = [];
        try {
            // Obtener métricas de rate limiting
            const rateLimitStats = this.getRateLimitingStats();
            if (rateLimitStats.blockedRequests === 0) return anomalies;
            // Analizar IPs con más bloqueos
            const topBlockedIPs = rateLimitStats.topBlockedIPs || [];
            for (const ipData of topBlockedIPs){
                if (ipData.count >= 10) {
                    const indicators = [
                        {
                            type: 'rate_limit_violations',
                            value: {
                                count: ipData.count,
                                ip: ipData.ip
                            },
                            weight: 0.8,
                            description: `${ipData.count} violaciones de rate limit desde IP ${ipData.ip}`
                        }
                    ];
                    // Buscar eventos relacionados con esta IP
                    const ipEvents = events.filter((e)=>e.ip_address === ipData.ip);
                    const uniqueUsers = new Set(ipEvents.map((e)=>e.user_id));
                    if (uniqueUsers.size > 1) {
                        indicators.push({
                            type: 'multiple_users_same_ip',
                            value: {
                                user_count: uniqueUsers.size,
                                ip: ipData.ip
                            },
                            weight: 0.6,
                            description: `${uniqueUsers.size} usuarios diferentes desde la misma IP`
                        });
                    }
                    anomalies.push({
                        id: this.generateAnomalyId(),
                        user_id: Array.from(uniqueUsers)[0] || 'unknown',
                        anomaly_type: 'rate_limit_abuse',
                        confidence_score: 0.8,
                        description: `Abuso de rate limiting detectado desde IP ${ipData.ip}`,
                        indicators,
                        risk_level: 'high',
                        detected_at: new Date().toISOString(),
                        status: 'new',
                        automated_actions: [
                            'block_ip',
                            'log_incident'
                        ],
                        manual_review_required: false
                    });
                }
            }
        } catch (error) {
            console.error('[ENTERPRISE_AUDIT] Error en detectRateLimitAbuse:', error);
        }
        return anomalies;
    }
    async detectGeographicAnomaly(events, userId) {
        // Implementación básica - en producción se integraría con servicio de geolocalización
        return [];
    }
    async detectTimeBasedAnomaly(events, userId) {
        // Implementación básica - detectaría actividad fuera de horarios normales
        return [];
    }
    async detectBehavioralDeviation(events, userId) {
        // Implementación básica - compararía con patrones históricos del usuario
        return [];
    }
    generateAnomalyId() {
        return `anom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    async saveAnomalies(anomalies) {
        console.log(`[ENTERPRISE_AUDIT] Guardando ${anomalies.length} anomalías detectadas`);
    }
    async getAnomaliesInPeriod(startDate, endDate) {
        return [];
    }
    async getIncidentsInPeriod(startDate, endDate) {
        return [];
    }
    getRateLimitingStats() {
        return _enterpriseratelimiter.metricsCollector.getMetrics();
    }
    async getComplianceMetrics(startDate, endDate) {
        return {
            audit_coverage: 95,
            policy_violations: 2,
            data_retention_compliance: true
        };
    }
    async performRiskAssessment() {
        return {
            overall_risk_level: 'medium',
            risk_factors: [],
            mitigation_recommendations: []
        };
    }
    async generateRecommendations() {
        return [];
    }
    /**
   * Destructor para limpiar intervalos
   */ destroy() {
        this.analysisIntervals.forEach((interval)=>clearInterval(interval));
        this.analysisIntervals = [];
    }
}
const enterpriseAuditSystem = EnterpriseAuditSystem.getInstance();

//# sourceMappingURL=data:application/json;base64,