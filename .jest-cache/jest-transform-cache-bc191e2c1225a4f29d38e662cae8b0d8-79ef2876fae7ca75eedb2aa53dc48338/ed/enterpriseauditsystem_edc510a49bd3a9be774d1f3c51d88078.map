{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\enterprise-audit-system.ts"],"sourcesContent":["/**\n * Sistema Enterprise de Auditoría de Seguridad\n * Unifica y extiende todas las funcionalidades de auditoría con capacidades enterprise\n */\n\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { \n  logSecurityEvent,\n  type SecurityEvent,\n  type SecuritySeverity,\n  type SecurityEventType,\n  type SecurityEventCategory\n} from '@/lib/auth/security-audit';\nimport {\n  analyzeSecurityPatterns,\n  getSecurityMetrics,\n  generateSecurityReport,\n  type SecurityMetrics,\n  type SecurityReport\n} from '@/lib/auth/security-audit-enhanced';\nimport { metricsCollector as rateLimitMetrics } from '@/lib/rate-limiting/enterprise-rate-limiter';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\nimport type { NextRequest } from 'next/server';\n\n// =====================================================\n// TIPOS Y INTERFACES ENTERPRISE\n// =====================================================\n\nexport interface EnterpriseSecurityEvent extends SecurityEvent {\n  enterprise_context?: {\n    security_level: string;\n    permissions: string[];\n    session_id: string;\n    request_id: string;\n    rate_limit_status?: {\n      allowed: boolean;\n      remaining: number;\n      limit: number;\n    };\n    rls_context?: {\n      filters_applied: Record<string, any>;\n      bypass_enabled: boolean;\n    };\n  };\n  correlation_id?: string;\n  parent_event_id?: string;\n  risk_score?: number; // 0-100\n  automated_response?: string[];\n}\n\nexport interface SecurityAnomalyDetection {\n  id: string;\n  user_id: string;\n  anomaly_type: AnomalyType;\n  confidence_score: number; // 0-1\n  description: string;\n  indicators: AnomalyIndicator[];\n  risk_level: SecuritySeverity;\n  detected_at: string;\n  status: 'new' | 'investigating' | 'resolved' | 'false_positive';\n  automated_actions: string[];\n  manual_review_required: boolean;\n}\n\nexport type AnomalyType = \n  | 'unusual_login_pattern'\n  | 'suspicious_api_usage'\n  | 'privilege_escalation_attempt'\n  | 'data_exfiltration_pattern'\n  | 'brute_force_attack'\n  | 'session_hijacking'\n  | 'rate_limit_abuse'\n  | 'geographic_anomaly'\n  | 'time_based_anomaly'\n  | 'behavioral_deviation';\n\nexport interface AnomalyIndicator {\n  type: string;\n  value: any;\n  weight: number;\n  description: string;\n}\n\nexport interface SecurityIncident {\n  id: string;\n  title: string;\n  description: string;\n  severity: SecuritySeverity;\n  status: 'open' | 'investigating' | 'resolved' | 'closed';\n  assigned_to?: string;\n  created_at: string;\n  updated_at: string;\n  resolved_at?: string;\n  events: string[]; // IDs de eventos relacionados\n  anomalies: string[]; // IDs de anomalías relacionadas\n  timeline: IncidentTimelineEntry[];\n  impact_assessment: {\n    affected_users: number;\n    affected_systems: string[];\n    data_compromised: boolean;\n    estimated_cost: number;\n  };\n  response_actions: ResponseAction[];\n}\n\nexport interface IncidentTimelineEntry {\n  timestamp: string;\n  action: string;\n  actor: string;\n  description: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface ResponseAction {\n  id: string;\n  type: 'manual' | 'automated';\n  action: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  executed_at?: string;\n  executed_by?: string;\n  result?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface EnterpriseSecurityMetrics extends SecurityMetrics {\n  rate_limiting: {\n    total_requests: number;\n    blocked_requests: number;\n    block_rate: number;\n    top_blocked_ips: Array<{ ip: string; count: number }>;\n  };\n  anomaly_detection: {\n    total_anomalies: number;\n    high_confidence_anomalies: number;\n    false_positive_rate: number;\n    detection_accuracy: number;\n  };\n  incident_management: {\n    open_incidents: number;\n    avg_resolution_time: number;\n    incidents_by_severity: Record<SecuritySeverity, number>;\n  };\n  compliance: {\n    audit_coverage: number;\n    policy_violations: number;\n    data_retention_compliance: boolean;\n  };\n}\n\nexport interface SecurityDashboardData {\n  overview: EnterpriseSecurityMetrics;\n  recent_events: EnterpriseSecurityEvent[];\n  active_anomalies: SecurityAnomalyDetection[];\n  open_incidents: SecurityIncident[];\n  security_trends: {\n    events_trend: Array<{ date: string; count: number; severity: SecuritySeverity }>;\n    anomalies_trend: Array<{ date: string; count: number; type: AnomalyType }>;\n    incidents_trend: Array<{ date: string; count: number; severity: SecuritySeverity }>;\n  };\n  recommendations: SecurityRecommendation[];\n}\n\nexport interface SecurityRecommendation {\n  id: string;\n  type: 'immediate' | 'short_term' | 'long_term';\n  priority: SecuritySeverity;\n  title: string;\n  description: string;\n  impact: string;\n  effort: 'low' | 'medium' | 'high';\n  category: 'prevention' | 'detection' | 'response' | 'recovery';\n  implementation_steps: string[];\n  estimated_completion: string;\n}\n\n// =====================================================\n// CONFIGURACIONES ENTERPRISE\n// =====================================================\n\nexport const ENTERPRISE_AUDIT_CONFIG = {\n  // Retención de datos\n  DATA_RETENTION: {\n    security_events: 365, // días\n    anomalies: 180,\n    incidents: 1095, // 3 años\n    metrics: 90\n  },\n\n  // Umbrales de detección\n  DETECTION_THRESHOLDS: {\n    anomaly_confidence: 0.7,\n    risk_score_critical: 80,\n    risk_score_high: 60,\n    risk_score_medium: 40,\n    false_positive_threshold: 0.1\n  },\n\n  // Configuración de alertas\n  ALERT_CONFIG: {\n    immediate_notification: ['critical'],\n    batch_notification: ['high', 'medium'],\n    notification_cooldown: 300, // segundos\n    escalation_timeout: 3600 // segundos\n  },\n\n  // Análisis automático\n  AUTOMATED_ANALYSIS: {\n    pattern_analysis_interval: 300, // segundos\n    anomaly_detection_interval: 600,\n    metrics_update_interval: 60,\n    cleanup_interval: 86400 // 24 horas\n  }\n};\n\n// =====================================================\n// CLASE PRINCIPAL DEL SISTEMA\n// =====================================================\n\nexport class EnterpriseAuditSystem {\n  private static instance: EnterpriseAuditSystem;\n  private analysisIntervals: NodeJS.Timeout[] = [];\n\n  private constructor() {}\n\n  public static getInstance(): EnterpriseAuditSystem {\n    if (!EnterpriseAuditSystem.instance) {\n      EnterpriseAuditSystem.instance = new EnterpriseAuditSystem();\n    }\n    return EnterpriseAuditSystem.instance;\n  }\n\n  /**\n   * Inicializa el sistema de auditoría enterprise\n   */\n  public async initialize(): Promise<void> {\n    console.log('[ENTERPRISE_AUDIT] Inicializando sistema de auditoría...');\n\n    try {\n      // Verificar tablas de base de datos\n      await this.ensureDatabaseTables();\n\n      // Iniciar análisis automático\n      this.startAutomatedAnalysis();\n\n      // Limpiar datos antiguos\n      await this.cleanupOldData();\n\n      console.log('[ENTERPRISE_AUDIT] Sistema inicializado correctamente');\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en inicialización:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Registra un evento de seguridad enterprise\n   */\n  public async logEnterpriseEvent(\n    event: Omit<EnterpriseSecurityEvent, 'id' | 'timestamp' | 'resolved'>,\n    context?: EnterpriseAuthContext,\n    request?: NextRequest\n  ): Promise<string> {\n    try {\n      // Generar ID único para correlación\n      const correlationId = this.generateCorrelationId();\n      \n      // Calcular risk score\n      const riskScore = this.calculateRiskScore(event);\n\n      // Crear evento enterprise\n      const enterpriseEvent: EnterpriseSecurityEvent = {\n        ...event,\n        id: this.generateEventId(),\n        timestamp: new Date().toISOString(),\n        resolved: false,\n        correlation_id: correlationId,\n        risk_score: riskScore,\n        enterprise_context: context ? {\n          security_level: context.securityLevel,\n          permissions: context.permissions,\n          session_id: context.sessionId || 'unknown',\n          request_id: this.generateRequestId(request),\n          rate_limit_status: this.getRateLimitStatus(),\n          rls_context: {\n            filters_applied: {},\n            bypass_enabled: context.role === 'admin'\n          }\n        } : undefined\n      };\n\n      // Registrar en sistema legacy\n      await logSecurityEvent(event);\n\n      // Registrar en sistema enterprise\n      await this.saveEnterpriseEvent(enterpriseEvent);\n\n      // Análisis inmediato para eventos críticos\n      if (event.severity === 'critical' || riskScore > ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS.risk_score_critical) {\n        await this.performImmediateAnalysis(enterpriseEvent);\n      }\n\n      return correlationId;\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error registrando evento:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Detecta anomalías en tiempo real\n   */\n  public async detectAnomalies(userId?: string): Promise<SecurityAnomalyDetection[]> {\n    try {\n      const anomalies: SecurityAnomalyDetection[] = [];\n\n      // Obtener eventos recientes\n      const recentEvents = await this.getRecentEvents(userId, 24); // últimas 24 horas\n\n      console.log(`[ENTERPRISE_AUDIT] DEBUG: Found ${recentEvents.length} recent events for user ${userId || 'all'}`);\n      if (recentEvents.length > 0) {\n        console.log(`[ENTERPRISE_AUDIT] DEBUG: Sample event:`, JSON.stringify(recentEvents[0], null, 2));\n      }\n\n      if (recentEvents.length === 0) {\n        return anomalies;\n      }\n\n      // Ejecutar detectores de anomalías\n      const detectors = [\n        this.detectUnusualLoginPattern,\n        this.detectSuspiciousAPIUsage,\n        this.detectPrivilegeEscalation,\n        this.detectRateLimitAbuse,\n        this.detectGeographicAnomaly,\n        this.detectTimeBasedAnomaly,\n        this.detectBehavioralDeviation\n      ];\n\n      for (const detector of detectors) {\n        try {\n          const detectedAnomalies = await detector.call(this, recentEvents, userId);\n          anomalies.push(...detectedAnomalies);\n        } catch (error) {\n          console.error('[ENTERPRISE_AUDIT] Error en detector de anomalías:', error);\n        }\n      }\n\n      // Filtrar por confianza\n      const highConfidenceAnomalies = anomalies.filter(\n        a => a.confidence_score >= ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS.anomaly_confidence\n      );\n\n      console.log(`[ENTERPRISE_AUDIT] DEBUG: Total anomalies: ${anomalies.length}, High confidence: ${highConfidenceAnomalies.length}`);\n      console.log(`[ENTERPRISE_AUDIT] DEBUG: Anomaly scores:`, anomalies.map(a => ({ type: a.anomaly_type, score: a.confidence_score })));\n      console.log(`[ENTERPRISE_AUDIT] DEBUG: Threshold: ${ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS.anomaly_confidence}`);\n\n      // Guardar anomalías detectadas\n      if (highConfidenceAnomalies.length > 0) {\n        await this.saveAnomalies(highConfidenceAnomalies);\n      }\n\n      return highConfidenceAnomalies;\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en detección de anomalías:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Genera un reporte de seguridad enterprise\n   */\n  public async generateEnterpriseReport(\n    startDate: string,\n    endDate: string,\n    includeAnomalies: boolean = true,\n    includeIncidents: boolean = true\n  ): Promise<SecurityReport & { enterprise_data: any }> {\n    try {\n      // Generar reporte base\n      const baseReport = await generateSecurityReport(startDate, endDate);\n\n      // Añadir datos enterprise\n      const enterpriseData = {\n        anomalies: includeAnomalies ? await this.getAnomaliesInPeriod(startDate, endDate) : [],\n        incidents: includeIncidents ? await this.getIncidentsInPeriod(startDate, endDate) : [],\n        rate_limiting_stats: this.getRateLimitingStats(),\n        compliance_metrics: await this.getComplianceMetrics(startDate, endDate),\n        risk_assessment: await this.performRiskAssessment(),\n        recommendations: await this.generateRecommendations()\n      };\n\n      return {\n        ...baseReport,\n        enterprise_data: enterpriseData\n      };\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error generando reporte:', error);\n      throw error;\n    }\n  }\n\n  // =====================================================\n  // MÉTODOS PRIVADOS\n  // =====================================================\n\n  private generateCorrelationId(): string {\n    return `corr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateEventId(): string {\n    return `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateRequestId(request?: NextRequest): string {\n    if (request) {\n      return `req_${request.headers.get('x-request-id') || Date.now()}`;\n    }\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private calculateRiskScore(event: Omit<EnterpriseSecurityEvent, 'id' | 'timestamp' | 'resolved'>): number {\n    let score = 0;\n\n    // Base score por severidad\n    switch (event.severity) {\n      case 'critical': score += 80; break;\n      case 'high': score += 60; break;\n      case 'medium': score += 40; break;\n      case 'low': score += 20; break;\n    }\n\n    // Ajustes por tipo de evento\n    switch (event.event_type) {\n      case 'AUTH_FAILURE': score += 10; break;\n      case 'PERMISSION_DENIED': score += 15; break;\n      case 'SUSPICIOUS_ACTIVITY': score += 25; break;\n      case 'SECURITY_VIOLATION': score += 30; break;\n    }\n\n    // Ajustes por categoría\n    switch (event.event_category) {\n      case 'authentication': score += 5; break;\n      case 'authorization': score += 10; break;\n      case 'suspicious_behavior': score += 20; break;\n    }\n\n    return Math.min(100, Math.max(0, score));\n  }\n\n  private getRateLimitStatus() {\n    const metrics = rateLimitMetrics.getMetrics();\n    return {\n      allowed: metrics.allowedRequests > 0,\n      remaining: metrics.allowedRequests,\n      limit: metrics.totalRequests\n    };\n  }\n\n  private async ensureDatabaseTables(): Promise<void> {\n    // Verificar que las tablas necesarias existan\n    // En un entorno real, esto se haría con migraciones\n    console.log('[ENTERPRISE_AUDIT] Verificando tablas de base de datos...');\n  }\n\n  private startAutomatedAnalysis(): void {\n    console.log('[ENTERPRISE_AUDIT] 🚫 ANÁLISIS AUTOMÁTICO TEMPORALMENTE DESHABILITADO');\n    console.log('[ENTERPRISE_AUDIT] 📋 Razón: Evitar llamadas recursivas a APIs de auth');\n\n    // CÓDIGO COMENTADO TEMPORALMENTE PARA EVITAR RECURSIÓN\n    // const config = ENTERPRISE_AUDIT_CONFIG.AUTOMATED_ANALYSIS;\n\n    // // Análisis de patrones\n    // const patternInterval = setInterval(async () => {\n    //   try {\n    //     await analyzeSecurityPatterns();\n    //   } catch (error) {\n    //     console.error('[ENTERPRISE_AUDIT] Error en análisis de patrones:', error);\n    //   }\n    // }, config.pattern_analysis_interval * 1000);\n\n    // // Detección de anomalías\n    // const anomalyInterval = setInterval(async () => {\n    //   try {\n    //     await this.detectAnomalies();\n    //   } catch (error) {\n    //     console.error('[ENTERPRISE_AUDIT] Error en detección de anomalías:', error);\n    //   }\n    // }, config.anomaly_detection_interval * 1000);\n\n    // Actualización de métricas\n    const metricsInterval = setInterval(async () => {\n      try {\n        await getSecurityMetrics();\n      } catch (error) {\n        console.error('[ENTERPRISE_AUDIT] Error actualizando métricas:', error);\n      }\n    }, config.metrics_update_interval * 1000);\n\n    this.analysisIntervals.push(patternInterval, anomalyInterval, metricsInterval);\n  }\n\n  private async cleanupOldData(): Promise<void> {\n    try {\n      const retention = ENTERPRISE_AUDIT_CONFIG.DATA_RETENTION;\n      const now = new Date();\n\n      // Limpiar eventos antiguos\n      const eventsThreshold = new Date(now.getTime() - retention.security_events * 24 * 60 * 60 * 1000);\n      \n      // En un entorno real, esto se haría con consultas SQL optimizadas\n      console.log(`[ENTERPRISE_AUDIT] Limpiando eventos anteriores a ${eventsThreshold.toISOString()}`);\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en limpieza de datos:', error);\n    }\n  }\n\n  private async saveEnterpriseEvent(event: EnterpriseSecurityEvent): Promise<void> {\n    try {\n      // Detectar si estamos en entorno de testing\n      const isTestEnvironment = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID !== undefined;\n\n      if (isTestEnvironment) {\n        // En testing, agregar al array global de eventos mock\n        const mockEvents = (global as any).__mockEvents || [];\n        const eventWithTimestamp = {\n          ...event,\n          created_at: event.timestamp\n        };\n        mockEvents.push(eventWithTimestamp);\n        console.log(`[ENTERPRISE_AUDIT] DEBUG: Saved event to mock array. Total events: ${mockEvents.length}`);\n        return;\n      }\n\n      // En producción, guardar en Supabase\n      const { supabaseAdmin } = await import('@/lib/supabase');\n      const { error } = await supabaseAdmin\n        .from('enterprise_audit_events')\n        .insert([event]);\n\n      if (error) {\n        console.error('[ENTERPRISE_AUDIT] Error guardando evento enterprise:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en saveEnterpriseEvent:', error);\n      throw error;\n    }\n  }\n\n  private async performImmediateAnalysis(event: EnterpriseSecurityEvent): Promise<void> {\n    console.log(`[ENTERPRISE_AUDIT] Análisis inmediato para evento crítico: ${event.id}`);\n    \n    // Implementar análisis inmediato para eventos críticos\n    if (event.risk_score && event.risk_score > 90) {\n      console.warn(`[ENTERPRISE_AUDIT] ¡Evento de riesgo extremo detectado! Score: ${event.risk_score}`);\n    }\n  }\n\n  private async getRecentEvents(userId?: string, hours: number = 24): Promise<EnterpriseSecurityEvent[]> {\n    try {\n      // Detectar si estamos en entorno de testing\n      const isTestEnvironment = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID !== undefined;\n\n      if (isTestEnvironment) {\n        // En testing, usar los eventos almacenados en memoria\n        const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000);\n\n        // Acceder al array de eventos mock desde el contexto global de testing\n        const mockEvents = (global as any).__mockEvents || [];\n        console.log(`[ENTERPRISE_AUDIT] DEBUG: Testing mode - found ${mockEvents.length} mock events`);\n\n        let events = mockEvents.filter((event: any) => {\n          const eventTime = new Date(event.created_at || event.timestamp || Date.now());\n          return eventTime >= cutoffTime;\n        });\n\n        // Filtrar por userId si se especifica\n        if (userId) {\n          events = events.filter((event: any) => event.user_id === userId);\n        }\n\n        console.log(`[ENTERPRISE_AUDIT] DEBUG: Testing mode - returning ${events.length} filtered events`);\n        return events;\n      }\n\n      // Producción: usar Supabase\n      const { supabaseAdmin } = await import('@/lib/supabase');\n      const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000).toISOString();\n\n      const { data, error } = await supabaseAdmin\n        .from('enterprise_audit_events')\n        .select('*')\n        .gte('created_at', cutoffTime)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('[ENTERPRISE_AUDIT] Error obteniendo eventos recientes:', error);\n        return [];\n      }\n\n      let events = data || [];\n\n      // Filtrar por userId si se especifica\n      if (userId && events.length > 0) {\n        events = events.filter(event => event.user_id === userId);\n      }\n\n      return events;\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en getRecentEvents:', error);\n      return [];\n    }\n  }\n\n  // =====================================================\n  // DETECTORES DE ANOMALÍAS AVANZADOS\n  // =====================================================\n\n  /**\n   * Detecta patrones de login inusuales\n   */\n  private async detectUnusualLoginPattern(events: EnterpriseSecurityEvent[], userId?: string): Promise<SecurityAnomalyDetection[]> {\n    const anomalies: SecurityAnomalyDetection[] = [];\n\n    try {\n      const authEvents = events.filter(e =>\n        e.event_category === 'authentication' &&\n        (!userId || e.user_id === userId)\n      );\n\n      console.log(`[ENTERPRISE_AUDIT] DEBUG: detectUnusualLoginPattern - Found ${authEvents.length} auth events`);\n      if (authEvents.length > 0) {\n        console.log(`[ENTERPRISE_AUDIT] DEBUG: Auth events:`, authEvents.map(e => ({ type: e.event_type, category: e.event_category, user: e.user_id })));\n      }\n\n      if (authEvents.length < 3) return anomalies;\n\n      // Agrupar por usuario\n      const userEvents = new Map<string, EnterpriseSecurityEvent[]>();\n      authEvents.forEach(event => {\n        if (!userEvents.has(event.user_id)) {\n          userEvents.set(event.user_id, []);\n        }\n        userEvents.get(event.user_id)!.push(event);\n      });\n\n      for (const [uid, userAuthEvents] of userEvents) {\n        const indicators: AnomalyIndicator[] = [];\n        let confidenceScore = 0;\n\n        // 1. Múltiples fallos seguidos de éxito (posible brute force exitoso)\n        const failures = userAuthEvents.filter(e => e.event_type === 'AUTH_FAILURE');\n        const successes = userAuthEvents.filter(e => e.event_type === 'AUTH_SUCCESS');\n\n        if (failures.length >= 3 && successes.length > 0) {\n          const lastFailure = new Date(failures[failures.length - 1].timestamp);\n          const firstSuccess = new Date(successes[0].timestamp);\n\n          if (firstSuccess > lastFailure) {\n            indicators.push({\n              type: 'brute_force_success',\n              value: { failures: failures.length, time_diff: firstSuccess.getTime() - lastFailure.getTime() },\n              weight: 0.8,\n              description: `${failures.length} fallos seguidos de login exitoso`\n            });\n            confidenceScore += 0.8;\n          }\n        }\n\n        // 2. Logins desde múltiples IPs en corto tiempo\n        const uniqueIPs = new Set(userAuthEvents.map(e => e.ip_address).filter(Boolean));\n        if (uniqueIPs.size >= 3) {\n          indicators.push({\n            type: 'multiple_ips',\n            value: { ip_count: uniqueIPs.size, ips: Array.from(uniqueIPs) },\n            weight: 0.6,\n            description: `Login desde ${uniqueIPs.size} IPs diferentes`\n          });\n          confidenceScore += 0.6;\n        }\n\n        // 3. Logins fuera de horario habitual\n        const loginHours = userAuthEvents\n          .filter(e => e.event_type === 'AUTH_SUCCESS')\n          .map(e => new Date(e.timestamp).getHours());\n\n        const unusualHours = loginHours.filter(hour => hour < 6 || hour > 22);\n        if (unusualHours.length > 0) {\n          indicators.push({\n            type: 'unusual_hours',\n            value: { unusual_count: unusualHours.length, hours: unusualHours },\n            weight: 0.4,\n            description: `${unusualHours.length} logins en horarios inusuales`\n          });\n          confidenceScore += 0.4;\n        }\n\n        // Crear anomalía si hay suficientes indicadores\n        if (indicators.length >= 2 && confidenceScore >= 0.7) {\n          anomalies.push({\n            id: this.generateAnomalyId(),\n            user_id: uid,\n            anomaly_type: 'unusual_login_pattern',\n            confidence_score: Math.min(1, confidenceScore),\n            description: `Patrón de login inusual detectado: ${indicators.map(i => i.description).join(', ')}`,\n            indicators,\n            risk_level: confidenceScore > 0.8 ? 'high' : 'medium',\n            detected_at: new Date().toISOString(),\n            status: 'new',\n            automated_actions: ['log_incident', 'notify_security_team'],\n            manual_review_required: confidenceScore > 0.8\n          });\n        }\n      }\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en detectUnusualLoginPattern:', error);\n    }\n\n    return anomalies;\n  }\n\n  /**\n   * Detecta uso sospechoso de APIs\n   */\n  private async detectSuspiciousAPIUsage(events: EnterpriseSecurityEvent[], userId?: string): Promise<SecurityAnomalyDetection[]> {\n    const anomalies: SecurityAnomalyDetection[] = [];\n\n    try {\n      const apiEvents = events.filter(e =>\n        e.event_category === 'data_access' &&\n        (!userId || e.user_id === userId)\n      );\n\n      if (apiEvents.length < 5) return anomalies;\n\n      // Agrupar por usuario\n      const userEvents = new Map<string, EnterpriseSecurityEvent[]>();\n      apiEvents.forEach(event => {\n        if (!userEvents.has(event.user_id)) {\n          userEvents.set(event.user_id, []);\n        }\n        userEvents.get(event.user_id)!.push(event);\n      });\n\n      for (const [uid, userApiEvents] of userEvents) {\n        const indicators: AnomalyIndicator[] = [];\n        let confidenceScore = 0;\n\n        // 1. Volumen inusual de requests\n        const requestCount = userApiEvents.length;\n        if (requestCount > 100) { // Umbral configurable\n          indicators.push({\n            type: 'high_volume_requests',\n            value: { count: requestCount },\n            weight: 0.6,\n            description: `${requestCount} requests en 24 horas`\n          });\n          confidenceScore += 0.6;\n        }\n\n        // 2. Acceso a recursos sensibles\n        const sensitiveResources = userApiEvents.filter(e =>\n          e.metadata?.resource &&\n          ['admin', 'user_data', 'payment', 'sensitive'].some(keyword =>\n            e.metadata.resource.toLowerCase().includes(keyword)\n          )\n        );\n\n        if (sensitiveResources.length > 10) {\n          indicators.push({\n            type: 'sensitive_resource_access',\n            value: { count: sensitiveResources.length },\n            weight: 0.7,\n            description: `${sensitiveResources.length} accesos a recursos sensibles`\n          });\n          confidenceScore += 0.7;\n        }\n\n        // 3. Patrón de scraping (requests muy rápidos)\n        const timestamps = userApiEvents.map(e => new Date(e.timestamp).getTime()).sort();\n        let rapidRequests = 0;\n\n        for (let i = 1; i < timestamps.length; i++) {\n          if (timestamps[i] - timestamps[i-1] < 1000) { // < 1 segundo\n            rapidRequests++;\n          }\n        }\n\n        if (rapidRequests > userApiEvents.length * 0.5) {\n          indicators.push({\n            type: 'rapid_requests',\n            value: { rapid_count: rapidRequests, total: userApiEvents.length },\n            weight: 0.8,\n            description: `${rapidRequests} requests en menos de 1 segundo entre ellas`\n          });\n          confidenceScore += 0.8;\n        }\n\n        // Crear anomalía si hay suficientes indicadores\n        if (indicators.length >= 2 && confidenceScore >= 0.7) {\n          anomalies.push({\n            id: this.generateAnomalyId(),\n            user_id: uid,\n            anomaly_type: 'suspicious_api_usage',\n            confidence_score: Math.min(1, confidenceScore),\n            description: `Uso sospechoso de API detectado: ${indicators.map(i => i.description).join(', ')}`,\n            indicators,\n            risk_level: confidenceScore > 0.8 ? 'high' : 'medium',\n            detected_at: new Date().toISOString(),\n            status: 'new',\n            automated_actions: ['rate_limit_user', 'log_incident'],\n            manual_review_required: confidenceScore > 0.8\n          });\n        }\n      }\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en detectSuspiciousAPIUsage:', error);\n    }\n\n    return anomalies;\n  }\n\n  /**\n   * Detecta intentos de escalación de privilegios\n   */\n  private async detectPrivilegeEscalation(events: EnterpriseSecurityEvent[], userId?: string): Promise<SecurityAnomalyDetection[]> {\n    const anomalies: SecurityAnomalyDetection[] = [];\n\n    try {\n      const authEvents = events.filter(e =>\n        e.event_category === 'authorization' &&\n        (!userId || e.user_id === userId)\n      );\n\n      if (authEvents.length < 3) return anomalies;\n\n      // Agrupar por usuario\n      const userEvents = new Map<string, EnterpriseSecurityEvent[]>();\n      authEvents.forEach(event => {\n        if (!userEvents.has(event.user_id)) {\n          userEvents.set(event.user_id, []);\n        }\n        userEvents.get(event.user_id)!.push(event);\n      });\n\n      for (const [uid, userAuthEvents] of userEvents) {\n        const indicators: AnomalyIndicator[] = [];\n        let confidenceScore = 0;\n\n        // 1. Múltiples denegaciones de permisos\n        const deniedEvents = userAuthEvents.filter(e => e.event_type === 'PERMISSION_DENIED');\n        if (deniedEvents.length >= 5) {\n          indicators.push({\n            type: 'multiple_permission_denials',\n            value: { count: deniedEvents.length },\n            weight: 0.7,\n            description: `${deniedEvents.length} denegaciones de permisos`\n          });\n          confidenceScore += 0.7;\n        }\n\n        // 2. Intentos de acceso a recursos admin\n        const adminAttempts = userAuthEvents.filter(e =>\n          e.metadata?.operation &&\n          e.metadata.operation.toLowerCase().includes('admin')\n        );\n\n        if (adminAttempts.length >= 3) {\n          indicators.push({\n            type: 'admin_access_attempts',\n            value: { count: adminAttempts.length },\n            weight: 0.8,\n            description: `${adminAttempts.length} intentos de acceso administrativo`\n          });\n          confidenceScore += 0.8;\n        }\n\n        // 3. Cambios de rol sospechosos\n        const roleChanges = userAuthEvents.filter(e => e.event_type === 'ROLE_CHANGE');\n        if (roleChanges.length > 0) {\n          indicators.push({\n            type: 'role_changes',\n            value: { count: roleChanges.length },\n            weight: 0.9,\n            description: `${roleChanges.length} cambios de rol detectados`\n          });\n          confidenceScore += 0.9;\n        }\n\n        // Crear anomalía si hay suficientes indicadores\n        if (indicators.length >= 1 && confidenceScore >= 0.7) {\n          anomalies.push({\n            id: this.generateAnomalyId(),\n            user_id: uid,\n            anomaly_type: 'privilege_escalation_attempt',\n            confidence_score: Math.min(1, confidenceScore),\n            description: `Intento de escalación de privilegios: ${indicators.map(i => i.description).join(', ')}`,\n            indicators,\n            risk_level: confidenceScore > 0.8 ? 'critical' : 'high',\n            detected_at: new Date().toISOString(),\n            status: 'new',\n            automated_actions: ['block_user', 'invalidate_sessions', 'notify_security_team'],\n            manual_review_required: true\n          });\n        }\n      }\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en detectPrivilegeEscalation:', error);\n    }\n\n    return anomalies;\n  }\n\n  /**\n   * Detecta abuso de rate limiting\n   */\n  private async detectRateLimitAbuse(events: EnterpriseSecurityEvent[], userId?: string): Promise<SecurityAnomalyDetection[]> {\n    const anomalies: SecurityAnomalyDetection[] = [];\n\n    try {\n      // Obtener métricas de rate limiting\n      const rateLimitStats = this.getRateLimitingStats();\n\n      if (rateLimitStats.blockedRequests === 0) return anomalies;\n\n      // Analizar IPs con más bloqueos\n      const topBlockedIPs = rateLimitStats.topBlockedIPs || [];\n\n      for (const ipData of topBlockedIPs) {\n        if (ipData.count >= 10) { // Umbral configurable\n          const indicators: AnomalyIndicator[] = [\n            {\n              type: 'rate_limit_violations',\n              value: { count: ipData.count, ip: ipData.ip },\n              weight: 0.8,\n              description: `${ipData.count} violaciones de rate limit desde IP ${ipData.ip}`\n            }\n          ];\n\n          // Buscar eventos relacionados con esta IP\n          const ipEvents = events.filter(e => e.ip_address === ipData.ip);\n          const uniqueUsers = new Set(ipEvents.map(e => e.user_id));\n\n          if (uniqueUsers.size > 1) {\n            indicators.push({\n              type: 'multiple_users_same_ip',\n              value: { user_count: uniqueUsers.size, ip: ipData.ip },\n              weight: 0.6,\n              description: `${uniqueUsers.size} usuarios diferentes desde la misma IP`\n            });\n          }\n\n          anomalies.push({\n            id: this.generateAnomalyId(),\n            user_id: Array.from(uniqueUsers)[0] || 'unknown',\n            anomaly_type: 'rate_limit_abuse',\n            confidence_score: 0.8,\n            description: `Abuso de rate limiting detectado desde IP ${ipData.ip}`,\n            indicators,\n            risk_level: 'high',\n            detected_at: new Date().toISOString(),\n            status: 'new',\n            automated_actions: ['block_ip', 'log_incident'],\n            manual_review_required: false\n          });\n        }\n      }\n    } catch (error) {\n      console.error('[ENTERPRISE_AUDIT] Error en detectRateLimitAbuse:', error);\n    }\n\n    return anomalies;\n  }\n\n  private async detectGeographicAnomaly(events: EnterpriseSecurityEvent[], userId?: string): Promise<SecurityAnomalyDetection[]> {\n    // Implementación básica - en producción se integraría con servicio de geolocalización\n    return [];\n  }\n\n  private async detectTimeBasedAnomaly(events: EnterpriseSecurityEvent[], userId?: string): Promise<SecurityAnomalyDetection[]> {\n    // Implementación básica - detectaría actividad fuera de horarios normales\n    return [];\n  }\n\n  private async detectBehavioralDeviation(events: EnterpriseSecurityEvent[], userId?: string): Promise<SecurityAnomalyDetection[]> {\n    // Implementación básica - compararía con patrones históricos del usuario\n    return [];\n  }\n\n  private generateAnomalyId(): string {\n    return `anom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async saveAnomalies(anomalies: SecurityAnomalyDetection[]): Promise<void> {\n    console.log(`[ENTERPRISE_AUDIT] Guardando ${anomalies.length} anomalías detectadas`);\n  }\n\n  private async getAnomaliesInPeriod(startDate: string, endDate: string): Promise<SecurityAnomalyDetection[]> {\n    return [];\n  }\n\n  private async getIncidentsInPeriod(startDate: string, endDate: string): Promise<SecurityIncident[]> {\n    return [];\n  }\n\n  private getRateLimitingStats() {\n    return rateLimitMetrics.getMetrics();\n  }\n\n  private async getComplianceMetrics(startDate: string, endDate: string): Promise<any> {\n    return {\n      audit_coverage: 95,\n      policy_violations: 2,\n      data_retention_compliance: true\n    };\n  }\n\n  private async performRiskAssessment(): Promise<any> {\n    return {\n      overall_risk_level: 'medium',\n      risk_factors: [],\n      mitigation_recommendations: []\n    };\n  }\n\n  private async generateRecommendations(): Promise<SecurityRecommendation[]> {\n    return [];\n  }\n\n  /**\n   * Destructor para limpiar intervalos\n   */\n  public destroy(): void {\n    this.analysisIntervals.forEach(interval => clearInterval(interval));\n    this.analysisIntervals = [];\n  }\n}\n\n// Instancia singleton\nexport const enterpriseAuditSystem = EnterpriseAuditSystem.getInstance();\n"],"names":["ENTERPRISE_AUDIT_CONFIG","EnterpriseAuditSystem","enterpriseAuditSystem","DATA_RETENTION","security_events","anomalies","incidents","metrics","DETECTION_THRESHOLDS","anomaly_confidence","risk_score_critical","risk_score_high","risk_score_medium","false_positive_threshold","ALERT_CONFIG","immediate_notification","batch_notification","notification_cooldown","escalation_timeout","AUTOMATED_ANALYSIS","pattern_analysis_interval","anomaly_detection_interval","metrics_update_interval","cleanup_interval","analysisIntervals","getInstance","instance","initialize","console","log","ensureDatabaseTables","startAutomatedAnalysis","cleanupOldData","error","logEnterpriseEvent","event","context","request","correlationId","generateCorrelationId","riskScore","calculateRiskScore","enterpriseEvent","id","generateEventId","timestamp","Date","toISOString","resolved","correlation_id","risk_score","enterprise_context","security_level","securityLevel","permissions","session_id","sessionId","request_id","generateRequestId","rate_limit_status","getRateLimitStatus","rls_context","filters_applied","bypass_enabled","role","undefined","logSecurityEvent","saveEnterpriseEvent","severity","performImmediateAnalysis","detectAnomalies","userId","recentEvents","getRecentEvents","length","JSON","stringify","detectors","detectUnusualLoginPattern","detectSuspiciousAPIUsage","detectPrivilegeEscalation","detectRateLimitAbuse","detectGeographicAnomaly","detectTimeBasedAnomaly","detectBehavioralDeviation","detector","detectedAnomalies","call","push","highConfidenceAnomalies","filter","a","confidence_score","map","type","anomaly_type","score","saveAnomalies","generateEnterpriseReport","startDate","endDate","includeAnomalies","includeIncidents","baseReport","generateSecurityReport","enterpriseData","getAnomaliesInPeriod","getIncidentsInPeriod","rate_limiting_stats","getRateLimitingStats","compliance_metrics","getComplianceMetrics","risk_assessment","performRiskAssessment","recommendations","generateRecommendations","enterprise_data","now","Math","random","toString","substr","headers","get","event_type","event_category","min","max","rateLimitMetrics","getMetrics","allowed","allowedRequests","remaining","limit","totalRequests","metricsInterval","setInterval","getSecurityMetrics","config","patternInterval","anomalyInterval","retention","eventsThreshold","getTime","isTestEnvironment","process","env","NODE_ENV","JEST_WORKER_ID","mockEvents","global","__mockEvents","eventWithTimestamp","created_at","supabaseAdmin","from","insert","warn","hours","cutoffTime","events","eventTime","user_id","data","select","gte","order","ascending","authEvents","e","category","user","userEvents","Map","forEach","has","set","uid","userAuthEvents","indicators","confidenceScore","failures","successes","lastFailure","firstSuccess","value","time_diff","weight","description","uniqueIPs","Set","ip_address","Boolean","size","ip_count","ips","Array","loginHours","getHours","unusualHours","hour","unusual_count","generateAnomalyId","i","join","risk_level","detected_at","status","automated_actions","manual_review_required","apiEvents","userApiEvents","requestCount","count","sensitiveResources","metadata","resource","some","keyword","toLowerCase","includes","timestamps","sort","rapidRequests","rapid_count","total","deniedEvents","adminAttempts","operation","roleChanges","rateLimitStats","blockedRequests","topBlockedIPs","ipData","ip","ipEvents","uniqueUsers","user_count","audit_coverage","policy_violations","data_retention_compliance","overall_risk_level","risk_factors","mitigation_recommendations","destroy","interval","clearInterval"],"mappings":"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"}