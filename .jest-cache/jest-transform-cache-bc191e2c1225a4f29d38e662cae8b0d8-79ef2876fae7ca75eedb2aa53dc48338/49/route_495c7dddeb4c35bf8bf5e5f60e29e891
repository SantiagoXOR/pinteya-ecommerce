a6ceef0f132312d6e6a68eaba519f939
/**
 * API Enterprise de Auditor√≠a de Seguridad Mejorada
 * Refactorizada con utilidades enterprise + RLS + validaciones robustas
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    }
});
const _server = require("next/server");
const _adminauth = require("../../../../lib/auth/admin-auth");
const _enterpriseauthutils = require("../../../../lib/auth/enterprise-auth-utils");
const _enterprisecache = require("../../../../lib/auth/enterprise-cache");
const _securityauditenhanced = require("../../../../lib/auth/security-audit-enhanced");
async function GET(request) {
    try {
        const url = new URL(request.url);
        const action = url.searchParams.get('action') || 'metrics';
        const userId = url.searchParams.get('userId');
        const severity = url.searchParams.get('severity');
        // ENTERPRISE: Autenticaci√≥n enterprise con permisos espec√≠ficos de seguridad
        const enterpriseResult = await (0, _enterpriseauthutils.requireAdminAuth)(request, [
            'security_read',
            'admin_access'
        ]);
        if (!enterpriseResult.success) {
            const errorResponse = {
                data: null,
                success: false,
                error: enterpriseResult.error || 'Permisos de administrador requeridos',
                enterprise: true,
                code: enterpriseResult.code
            };
            return _server.NextResponse.json(errorResponse, {
                status: enterpriseResult.status || 403
            });
        }
        const context = enterpriseResult.context;
        // LEGACY: Mantener compatibilidad con m√©todo anterior
        const legacyResult = await (0, _adminauth.getAuthenticatedUser)(request);
        console.log('üîç Security API: Enterprise vs Legacy auth comparison:', {
            enterprise: enterpriseResult.success,
            legacy: legacyResult.isAdmin,
            agree: enterpriseResult.success === legacyResult.isAdmin
        });
        switch(action){
            case 'metrics':
                // ENTERPRISE: Obtener m√©tricas de seguridad con cache
                const metrics = await (0, _enterprisecache.withCache)(`security_metrics_${context.userId}`, ()=>(0, _securityauditenhanced.getSecurityMetrics)(), 2 * 60 * 1000 // 2 minutos de cache
                );
                const metricsResponse = {
                    data: {
                        metrics,
                        cache: (0, _enterprisecache.getCacheStats)(),
                        enterprise: {
                            user: context.userId,
                            role: context.role,
                            permissions: context.permissions
                        }
                    },
                    success: true,
                    message: 'M√©tricas de seguridad obtenidas (enterprise)',
                    enterprise: true
                };
                return _server.NextResponse.json(metricsResponse);
            case 'alerts':
                // ENTERPRISE: Obtener alertas activas con cache
                const alerts = await (0, _enterprisecache.withCache)(`security_alerts_${userId || 'all'}_${severity || 'all'}`, ()=>(0, _securityauditenhanced.getActiveSecurityAlerts)(userId || undefined, severity), 1 * 60 * 1000 // 1 minuto de cache
                );
                const alertsResponse = {
                    data: {
                        alerts,
                        count: alerts.length,
                        cache: (0, _enterprisecache.getCacheStats)(),
                        enterprise: {
                            filtered_by_user: userId,
                            filtered_by_severity: severity,
                            requester: context.userId
                        }
                    },
                    success: true,
                    message: 'Alertas de seguridad obtenidas'
                };
                return _server.NextResponse.json(alertsResponse);
            case 'analyze':
                // Ejecutar an√°lisis de patrones
                const timeWindow = parseInt(url.searchParams.get('timeWindow') || '24');
                const analysisAlerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)(userId || undefined, timeWindow);
                const analysisResponse = {
                    data: {
                        alerts: analysisAlerts,
                        count: analysisAlerts.length
                    },
                    success: true,
                    message: `An√°lisis completado: ${analysisAlerts.length} alertas generadas`
                };
                return _server.NextResponse.json(analysisResponse);
            case 'health':
                // Ejecutar verificaci√≥n de salud de seguridad
                const healthCheck = await (0, _securityauditenhanced.runSecurityHealthCheck)();
                const healthResponse = {
                    data: healthCheck,
                    success: true,
                    message: `Estado de seguridad: ${healthCheck.status}`
                };
                return _server.NextResponse.json(healthResponse);
            case 'report':
                // Generar reporte de seguridad
                const startDateStr = url.searchParams.get('startDate');
                const endDateStr = url.searchParams.get('endDate');
                if (!startDateStr || !endDateStr) {
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: 'startDate y endDate son requeridos para generar reporte'
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
                }
                const startDate = new Date(startDateStr);
                const endDate = new Date(endDateStr);
                if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: 'Fechas inv√°lidas'
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
                }
                const report = await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate);
                const reportResponse = {
                    data: {
                        report
                    },
                    success: true,
                    message: 'Reporte de seguridad generado'
                };
                return _server.NextResponse.json(reportResponse);
            case 'export':
                // Exportar eventos de seguridad
                const exportStartStr = url.searchParams.get('startDate');
                const exportEndStr = url.searchParams.get('endDate');
                const format = url.searchParams.get('format') || 'json';
                if (!exportStartStr || !exportEndStr) {
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: 'startDate y endDate son requeridos para exportar'
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
                }
                const exportStart = new Date(exportStartStr);
                const exportEnd = new Date(exportEndStr);
                const exportData = await (0, _securityauditenhanced.exportSecurityEvents)(exportStart, exportEnd, format);
                // Retornar como archivo descargable
                const headers = new Headers();
                headers.set('Content-Type', format === 'json' ? 'application/json' : 'text/csv');
                headers.set('Content-Disposition', `attachment; filename="security-events-${exportStartStr}-${exportEndStr}.${format}"`);
                return new Response(exportData, {
                    headers
                });
            default:
                const errorResponse = {
                    data: null,
                    success: false,
                    error: `Acci√≥n no v√°lida: ${action}`
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 400
                });
        }
    } catch (error) {
        console.error('Error en GET /api/auth/security:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        const body = await request.json();
        const { action, alertId, status, notes, assignedTo } = body;
        if (!action) {
            const errorResponse = {
                data: null,
                success: false,
                error: 'Acci√≥n es requerida'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 400
            });
        }
        // Verificar autenticaci√≥n y permisos de admin
        const authResult = await (0, _adminauth.getAuthenticatedUser)(request);
        if (!authResult.userId || !authResult.isAdmin) {
            const errorResponse = {
                data: null,
                success: false,
                error: 'Permisos de administrador requeridos'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 403
            });
        }
        switch(action){
            case 'update_alert':
                // Actualizar estado de alerta
                if (!alertId) {
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: 'alertId es requerido'
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
                }
                const updateResult = await (0, _securityauditenhanced.updateSecurityAlert)(alertId, {
                    status,
                    assigned_to: assignedTo,
                    resolution_notes: notes
                });
                const updateResponse = {
                    data: {
                        success: updateResult
                    },
                    success: updateResult,
                    message: updateResult ? 'Alerta actualizada' : 'Error actualizando alerta'
                };
                return _server.NextResponse.json(updateResponse, {
                    status: updateResult ? 200 : 500
                });
            case 'resolve_alert':
                // Resolver alerta
                if (!alertId || !notes) {
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: 'alertId y notes son requeridos'
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
                }
                const resolveResult = await (0, _securityauditenhanced.resolveSecurityAlert)(alertId, notes, authResult.userId);
                const resolveResponse = {
                    data: {
                        success: resolveResult
                    },
                    success: resolveResult,
                    message: resolveResult ? 'Alerta resuelta' : 'Error resolviendo alerta'
                };
                return _server.NextResponse.json(resolveResponse, {
                    status: resolveResult ? 200 : 500
                });
            case 'false_positive':
                // Marcar como falso positivo
                if (!alertId || !notes) {
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: 'alertId y notes son requeridos'
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
                }
                const fpResult = await (0, _securityauditenhanced.markAlertAsFalsePositive)(alertId, notes, authResult.userId);
                const fpResponse = {
                    data: {
                        success: fpResult
                    },
                    success: fpResult,
                    message: fpResult ? 'Alerta marcada como falso positivo' : 'Error marcando alerta'
                };
                return _server.NextResponse.json(fpResponse, {
                    status: fpResult ? 200 : 500
                });
            case 'cleanup':
                // Limpiar eventos antiguos
                const daysToKeep = body.daysToKeep || 90;
                const cleanupCount = await (0, _securityauditenhanced.cleanupOldSecurityEvents)(daysToKeep);
                const cleanupResponse = {
                    data: {
                        deletedCount: cleanupCount
                    },
                    success: true,
                    message: `Limpieza completada: ${cleanupCount} eventos eliminados`
                };
                return _server.NextResponse.json(cleanupResponse);
            case 'force_analysis':
                // Forzar an√°lisis de seguridad
                const forceUserId = body.userId;
                const forceTimeWindow = body.timeWindow || 24;
                const forceAlerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)(forceUserId, forceTimeWindow);
                const forceResponse = {
                    data: {
                        alerts: forceAlerts,
                        count: forceAlerts.length
                    },
                    success: true,
                    message: `An√°lisis forzado completado: ${forceAlerts.length} alertas generadas`
                };
                return _server.NextResponse.json(forceResponse);
            default:
                const errorResponse = {
                    data: null,
                    success: false,
                    error: `Acci√≥n no v√°lida: ${action}`
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 400
                });
        }
    } catch (error) {
        console.error('Error en POST /api/auth/security:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,