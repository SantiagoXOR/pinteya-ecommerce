da89c63e90e3aca78742c1a5b1b7e224
// ===================================
// PINTEYA E-COMMERCE - AUDIT TRAIL SYSTEM ENTERPRISE
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuditCategory: function() {
        return AuditCategory;
    },
    AuditResult: function() {
        return AuditResult;
    },
    AuditSeverity: function() {
        return AuditSeverity;
    },
    AuditTrailManager: function() {
        return AuditTrailManager;
    },
    RETENTION_POLICIES: function() {
        return RETENTION_POLICIES;
    },
    auditTrail: function() {
        return auditTrail;
    },
    logAdminAction: function() {
        return logAdminAction;
    },
    logAuthentication: function() {
        return logAuthentication;
    },
    logDataAccess: function() {
        return logDataAccess;
    },
    logPaymentEvent: function() {
        return logPaymentEvent;
    },
    logSecurityViolation: function() {
        return logSecurityViolation;
    }
});
const _logger = require("../logger");
const _supabase = require("../supabase");
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var AuditSeverity = /*#__PURE__*/ function(AuditSeverity) {
    AuditSeverity["LOW"] = "low";
    AuditSeverity["MEDIUM"] = "medium";
    AuditSeverity["HIGH"] = "high";
    AuditSeverity["CRITICAL"] = "critical"; // Eventos de seguridad críticos
    return AuditSeverity;
}({});
var AuditCategory = /*#__PURE__*/ function(AuditCategory) {
    AuditCategory["AUTHENTICATION"] = "authentication";
    AuditCategory["AUTHORIZATION"] = "authorization";
    AuditCategory["DATA_ACCESS"] = "data_access";
    AuditCategory["DATA_MODIFICATION"] = "data_modification";
    AuditCategory["PAYMENT_PROCESSING"] = "payment_processing";
    AuditCategory["SYSTEM_ADMINISTRATION"] = "system_administration";
    AuditCategory["SECURITY_VIOLATION"] = "security_violation";
    AuditCategory["CONFIGURATION_CHANGE"] = "configuration_change";
    AuditCategory["ERROR_EVENT"] = "error_event";
    AuditCategory["COMPLIANCE_EVENT"] = "compliance_event";
    return AuditCategory;
}({});
var AuditResult = /*#__PURE__*/ function(AuditResult) {
    AuditResult["SUCCESS"] = "success";
    AuditResult["FAILURE"] = "failure";
    AuditResult["BLOCKED"] = "blocked";
    AuditResult["UNAUTHORIZED"] = "unauthorized";
    AuditResult["ERROR"] = "error";
    return AuditResult;
}({});
const RETENTION_POLICIES = [
    {
        category: "authentication",
        retentionDays: 365,
        archiveAfterDays: 90,
        requiresEncryption: true
    },
    {
        category: "authorization",
        retentionDays: 365,
        archiveAfterDays: 90,
        requiresEncryption: true
    },
    {
        category: "payment_processing",
        retentionDays: 2555,
        archiveAfterDays: 365,
        requiresEncryption: true
    },
    {
        category: "security_violation",
        retentionDays: 2555,
        archiveAfterDays: 180,
        requiresEncryption: true
    },
    {
        category: "data_access",
        retentionDays: 1095,
        archiveAfterDays: 180,
        requiresEncryption: true
    },
    {
        category: "system_administration",
        retentionDays: 1095,
        archiveAfterDays: 365,
        requiresEncryption: true
    }
];
class AuditTrailManager {
    constructor(){
        this.secretKey = process.env.AUDIT_TRAIL_SECRET_KEY || 'default-audit-key';
        if (this.secretKey === 'default-audit-key') {
            _logger.logger.warn(_logger.LogLevel.WARN, 'Using default audit trail secret key - not secure for production', {}, _logger.LogCategory.SYSTEM);
        }
    }
    static getInstance() {
        if (!AuditTrailManager.instance) {
            AuditTrailManager.instance = new AuditTrailManager();
        }
        return AuditTrailManager.instance;
    }
    /**
   * Registra un evento de auditoría
   */ async logEvent(eventData) {
        try {
            const auditEvent = {
                ...eventData,
                id: this.generateEventId(),
                timestamp: new Date().toISOString(),
                hash: ''
            };
            // Generar hash de integridad
            auditEvent.hash = this.generateEventHash(auditEvent);
            // Almacenar en base de datos
            await this.storeAuditEvent(auditEvent);
            // Verificar si requiere alertas
            if (this.requiresAlert(auditEvent)) {
                await this.sendSecurityAlert(auditEvent);
            }
            // Log estructurado
            _logger.logger.audit(_logger.LogLevel.INFO, `Audit event logged: ${auditEvent.action}`, {
                eventId: auditEvent.id,
                category: auditEvent.category,
                severity: auditEvent.severity,
                result: auditEvent.result,
                userId: auditEvent.userId
            });
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to log audit event', {
                error: error instanceof Error ? error.message : 'Unknown error',
                action: eventData.action,
                category: eventData.category
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Registra evento de autenticación
   */ async logAuthentication(action, result, userId, metadata, request) {
        await this.logEvent({
            userId,
            sessionId: request?.sessionId,
            action,
            resource: 'authentication',
            category: "authentication",
            severity: result === "failure" ? "high" : "medium",
            result,
            ipAddress: request?.ip || 'unknown',
            userAgent: request?.userAgent || 'unknown',
            metadata,
            complianceFlags: [
                'ISO27001',
                'AUTHENTICATION_LOG'
            ]
        });
    }
    /**
   * Registra evento de procesamiento de pagos
   */ async logPaymentEvent(action, result, paymentData, userId, request) {
        await this.logEvent({
            userId,
            action,
            resource: `payment:${paymentData.paymentId || 'unknown'}`,
            category: "payment_processing",
            severity: result === "failure" ? "high" : "low",
            result,
            ipAddress: request?.ip || 'unknown',
            userAgent: request?.userAgent || 'unknown',
            metadata: {
                ...paymentData,
                complianceRequired: true
            },
            complianceFlags: [
                'ISO27001',
                'PAYMENT_LOG',
                'FINANCIAL_COMPLIANCE'
            ]
        });
    }
    /**
   * Registra violación de seguridad
   */ async logSecurityViolation(action, details, request, metadata) {
        await this.logEvent({
            action,
            resource: 'security_system',
            category: "security_violation",
            severity: "critical",
            result: "blocked",
            ipAddress: request.ip,
            userAgent: request.userAgent,
            metadata: {
                details,
                ...metadata,
                alertRequired: true
            },
            complianceFlags: [
                'ISO27001',
                'SECURITY_INCIDENT',
                'IMMEDIATE_ALERT'
            ]
        });
    }
    /**
   * Registra acceso a datos sensibles
   */ async logDataAccess(action, resource, result, userId, request, metadata) {
        await this.logEvent({
            userId,
            action,
            resource,
            category: "data_access",
            severity: result === "unauthorized" ? "high" : "medium",
            result,
            ipAddress: request?.ip || 'unknown',
            userAgent: request?.userAgent || 'unknown',
            metadata,
            complianceFlags: [
                'ISO27001',
                'DATA_ACCESS_LOG'
            ]
        });
    }
    /**
   * Registra cambios administrativos
   */ async logAdminAction(action, resource, result, userId, request, metadata) {
        await this.logEvent({
            userId,
            action,
            resource,
            category: "system_administration",
            severity: "high",
            result,
            ipAddress: request.ip,
            userAgent: request.userAgent,
            metadata,
            complianceFlags: [
                'ISO27001',
                'ADMIN_ACTION',
                'PRIVILEGED_ACCESS'
            ]
        });
    }
    /**
   * Genera ID único para el evento
   */ generateEventId() {
        return `audit_${Date.now()}_${_crypto.default.randomBytes(8).toString('hex')}`;
    }
    /**
   * Genera hash de integridad para el evento
   */ generateEventHash(event) {
        const eventString = JSON.stringify({
            id: event.id,
            timestamp: event.timestamp,
            userId: event.userId,
            action: event.action,
            resource: event.resource,
            category: event.category,
            result: event.result
        });
        return _crypto.default.createHmac('sha256', this.secretKey).update(eventString).digest('hex');
    }
    /**
   * Almacena el evento en la base de datos
   */ async storeAuditEvent(event) {
        const supabase = (0, _supabase.getSupabaseClient)(true); // Usar cliente administrativo
        if (!supabase) {
            throw new Error('Supabase client not available for audit logging');
        }
        const { error } = await supabase.from('audit_events').insert({
            id: event.id,
            timestamp: event.timestamp,
            user_id: event.userId,
            session_id: event.sessionId,
            action: event.action,
            resource: event.resource,
            category: event.category,
            severity: event.severity,
            result: event.result,
            ip_address: event.ipAddress,
            user_agent: event.userAgent,
            request_id: event.requestId,
            metadata: event.metadata,
            hash: event.hash,
            compliance_flags: event.complianceFlags
        });
        if (error) {
            throw new Error(`Failed to store audit event: ${error.message}`);
        }
    }
    /**
   * Determina si el evento requiere alerta inmediata
   */ requiresAlert(event) {
        return event.severity === "critical" || event.category === "security_violation" || event.result === "blocked" || event.complianceFlags?.includes('IMMEDIATE_ALERT') || false;
    }
    /**
   * Envía alerta de seguridad
   */ async sendSecurityAlert(event) {
        try {
            // Log inmediato para alertas críticas
            _logger.logger.security(_logger.LogLevel.ERROR, `SECURITY ALERT: ${event.action}`, {
                eventId: event.id,
                category: event.category,
                severity: event.severity,
                result: event.result,
                ipAddress: event.ipAddress,
                userId: event.userId,
                resource: event.resource
            });
        // TODO: Implementar notificaciones adicionales (email, Slack, etc.)
        // await this.sendEmailAlert(event);
        // await this.sendSlackAlert(event);
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to send security alert', {
                error: error instanceof Error ? error.message : 'Unknown error',
                eventId: event.id
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Verifica la integridad de un evento
   */ async verifyEventIntegrity(event) {
        const expectedHash = this.generateEventHash({
            ...event,
            hash: ''
        });
        return event.hash === expectedHash;
    }
    /**
   * Obtiene eventos de auditoría con filtros
   */ async getAuditEvents(filters) {
        const supabase = (0, _supabase.getSupabaseClient)(true);
        if (!supabase) {
            throw new Error('Supabase client not available');
        }
        let query = supabase.from('audit_events').select('*').order('timestamp', {
            ascending: false
        });
        if (filters.userId) {
            query = query.eq('user_id', filters.userId);
        }
        if (filters.category) {
            query = query.eq('category', filters.category);
        }
        if (filters.severity) {
            query = query.eq('severity', filters.severity);
        }
        if (filters.startDate) {
            query = query.gte('timestamp', filters.startDate);
        }
        if (filters.endDate) {
            query = query.lte('timestamp', filters.endDate);
        }
        if (filters.limit) {
            query = query.limit(filters.limit);
        }
        const { data, error } = await query;
        if (error) {
            throw new Error(`Failed to retrieve audit events: ${error.message}`);
        }
        return data || [];
    }
}
const auditTrail = AuditTrailManager.getInstance();
const logAuthentication = auditTrail.logAuthentication.bind(auditTrail);
const logPaymentEvent = auditTrail.logPaymentEvent.bind(auditTrail);
const logSecurityViolation = auditTrail.logSecurityViolation.bind(auditTrail);
const logDataAccess = auditTrail.logDataAccess.bind(auditTrail);
const logAdminAction = auditTrail.logAdminAction.bind(auditTrail);

//# sourceMappingURL=data:application/json;base64,