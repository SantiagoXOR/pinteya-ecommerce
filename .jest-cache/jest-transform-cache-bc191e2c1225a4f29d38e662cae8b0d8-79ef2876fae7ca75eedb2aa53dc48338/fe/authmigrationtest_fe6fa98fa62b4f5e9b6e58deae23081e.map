{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\auth-migration.test.ts"],"sourcesContent":["/**\n * Tests para la migración de autenticación de headers a getAuth(req)\n * Verifica que el sistema migrado funciona correctamente\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  getAuth: jest.fn(),\n  auth: jest.fn()\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      }))\n    }))\n  }\n}));\n\nimport {\n  getAuthenticatedUser,\n  getAuthenticatedAdmin,\n  getAuthFromHeaders\n} from '@/lib/auth/admin-auth';\nimport { getAuth, auth } from '@clerk/nextjs/server';\n\ndescribe('Migración de Autenticación', () => {\n  let mockGetAuth: jest.MockedFunction<typeof getAuth>;\n  let mockAuth: jest.MockedFunction<typeof auth>;\n\n  beforeEach(() => {\n    mockGetAuth = getAuth as jest.MockedFunction<typeof getAuth>;\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\n    jest.clearAllMocks();\n  });\n\n  describe('getAuthenticatedUser (migrado)', () => {\n    it('debe usar getAuth para NextApiRequest', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {}\n      } as any;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        getToken: jest.fn().mockResolvedValue('mock_token')\n      });\n\n      const result = await getAuthenticatedUser(mockRequest);\n\n      expect(mockGetAuth).toHaveBeenCalledWith(mockRequest);\n      expect(result.userId).toBe('user_123');\n      expect(result.sessionId).toBe('sess_123');\n    });\n\n    it('debe usar auth() para App Router', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'user_456',\n        sessionId: 'sess_456',\n        sessionClaims: {\n          metadata: { role: 'admin' }\n        }\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(mockAuth).toHaveBeenCalled();\n      expect(result.userId).toBe('user_456');\n      expect(result.sessionId).toBe('sess_456');\n      expect(result.isAdmin).toBe(true);\n    });\n\n    it('debe manejar usuarios no autenticados', async () => {\n      mockAuth.mockResolvedValue({\n        userId: null,\n        sessionId: null\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result.userId).toBeNull();\n      expect(result.error).toBe('Usuario no autenticado');\n    });\n\n    it('debe manejar errores de autenticación', async () => {\n      mockAuth.mockRejectedValue(new Error('Auth error'));\n\n      const result = await getAuthenticatedUser();\n\n      expect(result.userId).toBeNull();\n      expect(result.error).toContain('Error de autenticación');\n    });\n  });\n\n  describe('getAuthenticatedAdmin (nueva función)', () => {\n    it('debe combinar autenticación y verificación de admin', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'admin_123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          metadata: { role: 'admin' }\n        }\n      });\n\n      const result = await getAuthenticatedAdmin();\n\n      expect(result.userId).toBe('admin_123');\n      expect(result.isAdmin).toBe(true);\n      expect(result.sessionId).toBe('sess_123');\n    });\n\n    it('debe rechazar usuarios no admin', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          metadata: { role: 'user' }\n        }\n      });\n\n      const result = await getAuthenticatedAdmin();\n\n      expect(result.userId).toBe('user_123');\n      expect(result.isAdmin).toBe(false);\n      expect(result.error).toBe('Permisos de administrador requeridos');\n      expect(result.status).toBe(403);\n    });\n\n    it('debe manejar usuarios no autenticados', async () => {\n      mockAuth.mockResolvedValue({\n        userId: null,\n        sessionId: null\n      });\n\n      const result = await getAuthenticatedAdmin();\n\n      expect(result.userId).toBeNull();\n      expect(result.isAdmin).toBe(false);\n      expect(result.error).toBe('Usuario no autenticado');\n      expect(result.status).toBe(401);\n    });\n  });\n\n  describe('getAuthFromHeaders (deprecada)', () => {\n    it('debe marcar como deprecada y funcionar', async () => {\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue('user_123')\n        }\n      } as any;\n\n      const result = await getAuthFromHeaders(mockRequest);\n\n      expect(result.userId).toBe('user_123');\n      expect(result.deprecated).toBe(true);\n    });\n\n    it('debe manejar headers faltantes', async () => {\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as any;\n\n      const result = await getAuthFromHeaders(mockRequest);\n\n      expect(result.userId).toBeNull();\n      expect(result.deprecated).toBe(true);\n      expect(result.error).toBe('Header x-clerk-user-id no encontrado');\n    });\n  });\n\n  describe('Migración completa', () => {\n    it('debe tener todas las funciones definidas', () => {\n      expect(typeof getAuthenticatedUser).toBe('function');\n      expect(typeof getAuthenticatedAdmin).toBe('function');\n      expect(typeof getAuthFromHeaders).toBe('function');\n    });\n\n    it('debe retornar estructuras correctas', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          metadata: { role: 'admin' }\n        }\n      });\n\n      const userResult = await getAuthenticatedUser();\n      const adminResult = await getAuthenticatedAdmin();\n\n      // Verificar estructura de getAuthenticatedUser\n      expect(userResult).toHaveProperty('userId');\n      expect(userResult).toHaveProperty('sessionId');\n      expect(userResult).toHaveProperty('isAdmin');\n\n      // Verificar estructura de getAuthenticatedAdmin\n      expect(adminResult).toHaveProperty('userId');\n      expect(adminResult).toHaveProperty('sessionId');\n      expect(adminResult).toHaveProperty('isAdmin');\n      expect(adminResult).toHaveProperty('status');\n    });\n\n    it('debe manejar diferentes tipos de request', async () => {\n      // Test con NextApiRequest\n      const apiRequest = { query: {}, headers: {} } as any;\n      mockGetAuth.mockReturnValue({\n        userId: 'user_api',\n        sessionId: 'sess_api',\n        getToken: jest.fn()\n      });\n\n      const apiResult = await getAuthenticatedUser(apiRequest);\n      expect(mockGetAuth).toHaveBeenCalledWith(apiRequest);\n      expect(apiResult.userId).toBe('user_api');\n\n      // Test sin request (App Router)\n      mockAuth.mockResolvedValue({\n        userId: 'user_app',\n        sessionId: 'sess_app'\n      });\n\n      const appResult = await getAuthenticatedUser();\n      expect(mockAuth).toHaveBeenCalled();\n      expect(appResult.userId).toBe('user_app');\n    });\n  });\n\n  describe('Compatibilidad y migración', () => {\n    it('debe mantener compatibilidad con APIs existentes', async () => {\n      // Test que verifica que las APIs migradas siguen funcionando\n      mockAuth.mockResolvedValue({\n        userId: 'user_123',\n        sessionId: 'sess_123'\n      });\n\n      const result = await getAuthenticatedUser();\n      \n      // Debe retornar la misma estructura que antes\n      expect(result).toHaveProperty('userId');\n      expect(result).toHaveProperty('sessionId');\n      expect(typeof result.userId).toBe('string');\n    });\n\n    it('debe proporcionar información de migración', async () => {\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue('user_123')\n        }\n      } as any;\n\n      const deprecatedResult = await getAuthFromHeaders(mockRequest);\n      \n      expect(deprecatedResult.deprecated).toBe(true);\n      expect(deprecatedResult.userId).toBe('user_123');\n    });\n  });\n});\n"],"names":["jest","mock","getAuth","fn","auth","supabaseAdmin","from","select","eq","single","describe","mockGetAuth","mockAuth","beforeEach","clearAllMocks","it","mockRequest","query","headers","mockReturnValue","userId","sessionId","getToken","mockResolvedValue","result","getAuthenticatedUser","expect","toHaveBeenCalledWith","toBe","sessionClaims","metadata","role","toHaveBeenCalled","isAdmin","toBeNull","error","mockRejectedValue","Error","toContain","getAuthenticatedAdmin","status","get","getAuthFromHeaders","deprecated","userResult","adminResult","toHaveProperty","apiRequest","apiResult","appResult","deprecatedResult"],"mappings":"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"}