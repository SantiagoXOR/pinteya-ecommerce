{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\payments\\refunds.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\r\nimport { GET, POST } from '@/app/api/payments/refunds/route';\r\nimport { auth } from '@/auth';\r\n\r\n// Mock dependencies\r\njest.mock('@clerk/nextjs/server');\r\njest.mock('@/lib/supabase', () => ({\r\n  getSupabaseClient: jest.fn()\r\n}));\r\njest.mock('@/lib/rate-limiter', () => ({\r\n  checkRateLimit: jest.fn(),\r\n  addRateLimitHeaders: jest.fn(),\r\n  RATE_LIMIT_CONFIGS: {\r\n    PAYMENT_CREATION: { requests: 10, window: 3600 },\r\n    ANALYTICS: { requests: 100, window: 3600 }\r\n  }\r\n}));\r\njest.mock('@/lib/metrics', () => ({\r\n  metricsCollector: {\r\n    recordApiCall: jest.fn()\r\n  }\r\n}));\r\njest.mock('@/lib/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  },\r\n  LogLevel: {\r\n    INFO: 'info',\r\n    WARN: 'warn',\r\n    ERROR: 'error'\r\n  },\r\n  LogCategory: {\r\n    API: 'api',\r\n    PAYMENT: 'payment'\r\n  }\r\n}));\r\njest.mock('@/lib/mercadopago', () => ({\r\n  createMercadoPagoClient: jest.fn()\r\n}));\r\n\r\nconst mockAuth = auth as jest.MockedFunction<typeof auth>;\r\n\r\ndescribe('/api/payments/refunds', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock environment variables\r\n    process.env.MERCADOPAGO_ACCESS_TOKEN = 'APP_USR_test_token';\r\n    process.env.NODE_ENV = 'test';\r\n  });\r\n\r\n  describe('POST', () => {\r\n    it('should return 401 when user is not authenticated', async () => {\r\n      mockAuth.mockResolvedValue({ userId: null });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          payment_id: 'payment_123',\r\n          amount: 1000\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('No autorizado');\r\n    });\r\n\r\n    it('should process refund when user is authenticated and payment exists', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        single: jest.fn().mockResolvedValue({\r\n          data: {\r\n            id: 1,\r\n            total_amount: 1000,\r\n            payment_status: 'approved',\r\n            external_reference: 'payment_123'\r\n          },\r\n          error: null\r\n        }),\r\n        update: jest.fn().mockReturnThis(),\r\n        insert: jest.fn().mockResolvedValue({ data: null, error: null })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const requestBody = {\r\n        payment_id: 'payment_123',\r\n        amount: 500,\r\n        reason: 'Customer request'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeDefined();\r\n      expect(data.data.payment_id).toBe('payment_123');\r\n      expect(data.data.amount).toBe(500);\r\n      expect(data.data.status).toBeDefined();\r\n    });\r\n\r\n    it('should validate required payment_id', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          amount: 500\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('payment_id es requerido');\r\n    });\r\n\r\n    it('should return 404 when payment is not found', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock Supabase to return no order\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        single: jest.fn().mockResolvedValue({\r\n          data: null,\r\n          error: { message: 'Not found' }\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          payment_id: 'nonexistent_payment'\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Pago no encontrado');\r\n    });\r\n\r\n    it('should validate payment status is approved', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock Supabase to return pending payment\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        single: jest.fn().mockResolvedValue({\r\n          data: {\r\n            id: 1,\r\n            total_amount: 1000,\r\n            payment_status: 'pending',\r\n            external_reference: 'payment_123'\r\n          },\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          payment_id: 'payment_123'\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Solo se pueden reembolsar pagos aprobados');\r\n    });\r\n\r\n    it('should validate refund amount does not exceed original payment', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        single: jest.fn().mockResolvedValue({\r\n          data: {\r\n            id: 1,\r\n            total_amount: 1000,\r\n            payment_status: 'approved',\r\n            external_reference: 'payment_123'\r\n          },\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          payment_id: 'payment_123',\r\n          amount: 1500 // More than original payment\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('El monto del reembolso no puede ser mayor al pago original');\r\n    });\r\n\r\n    it('should handle rate limiting', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter to return failure\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ \r\n        success: false, \r\n        remaining: 0,\r\n        resetTime: Date.now() + 60000 \r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          payment_id: 'payment_123'\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(429);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Demasiadas solicitudes');\r\n    });\r\n  });\r\n\r\n  describe('GET', () => {\r\n    it('should return 401 when user is not authenticated', async () => {\r\n      mockAuth.mockResolvedValue({ userId: null });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('No autorizado');\r\n    });\r\n\r\n    it('should return refunds list when user is authenticated', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        order: jest.fn().mockReturnThis(),\r\n        range: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockResolvedValue({\r\n          data: [\r\n            {\r\n              id: 1,\r\n              payment_id: 'payment_123',\r\n              refund_id: 'refund_456',\r\n              amount: 500,\r\n              status: 'approved',\r\n              created_at: '2024-01-01T00:00:00Z',\r\n              orders: {\r\n                id: 1,\r\n                total_amount: 1000,\r\n                created_at: '2024-01-01T00:00:00Z'\r\n              }\r\n            }\r\n          ],\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeDefined();\r\n      expect(Array.isArray(data.data)).toBe(true);\r\n      expect(data.pagination).toBeDefined();\r\n    });\r\n\r\n    it('should handle pagination parameters', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        order: jest.fn().mockReturnThis(),\r\n        range: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockResolvedValue({\r\n          data: [],\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds?limit=5&offset=10');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.pagination.limit).toBe(5);\r\n      expect(data.pagination.offset).toBe(10);\r\n    });\r\n\r\n    it('should filter by status when provided', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        order: jest.fn().mockReturnThis(),\r\n        range: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockResolvedValue({\r\n          data: [],\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/refunds?status=approved');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(mockSupabase.eq).toHaveBeenCalledWith('status', 'approved');\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","getSupabaseClient","fn","checkRateLimit","addRateLimitHeaders","RATE_LIMIT_CONFIGS","PAYMENT_CREATION","requests","window","ANALYTICS","metricsCollector","recordApiCall","logger","info","warn","error","LogLevel","INFO","WARN","ERROR","LogCategory","API","PAYMENT","createMercadoPagoClient","mockAuth","auth","describe","beforeEach","clearAllMocks","process","env","MERCADOPAGO_ACCESS_TOKEN","NODE_ENV","it","mockResolvedValue","userId","request","NextRequest","method","body","JSON","stringify","payment_id","amount","response","POST","data","json","expect","status","toBe","success","require","remaining","undefined","mockSupabase","from","mockReturnThis","select","eq","single","id","total_amount","payment_status","external_reference","update","insert","mockReturnValue","requestBody","reason","toBeDefined","message","resetTime","Date","now","GET","order","range","refund_id","created_at","orders","Array","isArray","pagination","limit","offset","toHaveBeenCalledWith"],"mappings":"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"}