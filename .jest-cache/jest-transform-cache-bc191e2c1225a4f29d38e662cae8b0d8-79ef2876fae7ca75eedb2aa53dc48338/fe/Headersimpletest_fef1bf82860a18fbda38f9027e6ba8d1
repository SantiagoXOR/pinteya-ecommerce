e809a69895477cc43e480f40fa4c8722
/**
 * Tests simples para verificar funcionalidad básica del Header
 */ "use strict";
// Mock básico de Next.js
jest.mock('next/link', ()=>{
    return ({ children, href, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
            href: href,
            ...props,
            children: children
        });
});
jest.mock('next/image', ()=>{
    return ({ src, alt, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            ...props
        });
});
// Mock del hook de geolocalización
jest.mock('@/hooks/useGeolocation', ()=>({
        useGeolocation: ()=>({
                detectedZone: {
                    name: 'Córdoba Capital',
                    available: true
                },
                requestLocation: jest.fn(),
                selectZone: jest.fn(),
                permissionStatus: 'prompt',
                isLoading: false,
                error: null,
                location: null,
                getAvailableZones: ()=>[],
                deliveryZones: []
            })
    }));
// Mock de Clerk
jest.mock('@clerk/nextjs', ()=>({
        SignedIn: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-in",
                children: children
            }),
        SignedOut: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-out",
                children: children
            }),
        UserButton: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-button",
                children: "UserButton"
            }),
        useUser: ()=>({
                isSignedIn: false,
                user: null,
                isLoaded: true
            })
    }));
// Mock del componente de búsqueda
jest.mock('@/components/ui/SearchAutocompleteIntegrated', ()=>{
    return {
        SearchAutocompleteIntegrated: ({ placeholder })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "search-input",
                placeholder: placeholder
            })
    };
});
// Mock de Redux
jest.mock('react-redux', ()=>({
        useSelector: ()=>({
                items: [],
                totalQuantity: 0
            }),
        useDispatch: ()=>jest.fn()
    }));
// Mock de hooks de animación
jest.mock('@/hooks/useCartAnimation', ()=>({
        useCartAnimation: ()=>({
                isAnimating: false
            })
    }));
// Mock del contexto del carrito
jest.mock('@/app/context/CartSidebarModalContext', ()=>({
        useCartSidebarModal: ()=>({
                isOpen: false,
                openModal: jest.fn(),
                closeModal: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _index = /*#__PURE__*/ _interop_require_default(require("../index"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Header Simple Tests', ()=>{
    beforeEach(()=>{
        // Mock window.matchMedia
        Object.defineProperty(window, 'matchMedia', {
            writable: true,
            value: jest.fn().mockImplementation((query)=>({
                    matches: false,
                    media: query,
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }))
        });
    });
    test('debe renderizar el header sin errores', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
        // Verificar que el componente se renderiza
        expect(_react1.screen.getByTestId('search-input')).toBeInTheDocument();
    });
    test('debe mostrar el placeholder correcto en el campo de búsqueda', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
        const searchInput = _react1.screen.getByTestId('search-input');
        expect(searchInput).toHaveAttribute('placeholder', 'latex interior blanco 20lts');
    });
    test('debe mostrar el logo de Pinteya', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
        const logo = _react1.screen.getByAltText('Pinteya - Tu Pinturería Online');
        expect(logo).toBeInTheDocument();
    });
    test('debe mostrar la ubicación por defecto', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
        expect(_react1.screen.getByText('Córdoba Capital')).toBeInTheDocument();
    });
    test('debe mostrar botón de iniciar sesión cuando no está autenticado', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
        expect(_react1.screen.getByText('Iniciar Sesión')).toBeInTheDocument();
    });
    test('debe tener el logo clickeable con enlace al inicio', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
        const logoLink = _react1.screen.getByAltText('Pinteya - Tu Pinturería Online').closest('a');
        expect(logoLink).toHaveAttribute('href', '/');
    });
    test('debe tener el botón de iniciar sesión con enlace correcto', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
        const signinLink = _react1.screen.getByText('Iniciar Sesión').closest('a');
        expect(signinLink).toHaveAttribute('href', '/signin');
    });
});

//# sourceMappingURL=data:application/json;base64,