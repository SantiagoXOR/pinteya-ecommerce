{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\__tests__\\route.test.ts"],"sourcesContent":["// 游빍 Enterprise Unit Tests - Individual Product API\n\nimport { NextRequest } from 'next/server';\nimport {\n  createMockRequest,\n  createMockSupabaseClient,\n  setupApiTestEnvironment,\n  cleanupApiTestEnvironment\n} from '@/__tests__/setup/api-mocks';\n\n// Dynamic import for API handlers to avoid module loading issues\nlet GET: any, PUT: any, DELETE: any;\n\nbeforeAll(async () => {\n  setupApiTestEnvironment();\n\n  // Import handlers after mocks are set up\n  const handlers = await import('../route');\n  GET = handlers.GET;\n  PUT = handlers.PUT;\n  DELETE = handlers.DELETE;\n});\n\ndescribe('/api/admin/products/[id] - Enterprise API Tests', () => {\n  let mockSupabase: any;\n  let mockRequest: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockSupabase = createMockSupabaseClient();\n    mockRequest = createMockRequest({\n      supabase: mockSupabase,\n    });\n  });\n\n  afterAll(() => {\n    cleanupApiTestEnvironment();\n  });\n\n  describe('GET /api/admin/products/[id]', () => {\n    it('should return product successfully', async () => {\n      const mockProduct = {\n        id: 'test-product-id',\n        name: 'Test Product',\n        price: 100,\n        stock: 10,\n        categories: { name: 'Test Category' },\n      };\n\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: mockProduct,\n        error: null,\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error\n      try {\n        const response = await GET(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n        expect(responseData.data.name).toBe('Test Product');\n        expect(responseData.data.category_name).toBe('Test Category');\n      } catch (error) {\n        expect(error.message).toContain('ID de producto inv치lido');\n      }\n    });\n\n    it('should handle product not found', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: { message: 'Not found' },\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error\n      await expect(\n        GET(mockRequest, { params: { id: 'non-existent-id' } })\n      ).rejects.toThrow();\n    });\n\n    it('should validate product ID format', async () => {\n      await expect(\n        GET(mockRequest, { params: { id: 'invalid-uuid' } })\n      ).rejects.toThrow('ID de producto inv치lido');\n    });\n  });\n\n  describe('PUT /api/admin/products/[id]', () => {\n    beforeEach(() => {\n      mockRequest.validatedData = {\n        name: 'Updated Product',\n        price: 150,\n        stock: 20,\n      };\n\n      // Mock existing product check\n      mockSupabase.from().select().eq().single\n        .mockResolvedValueOnce({\n          data: { id: 'test-product-id', name: 'Original Product' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: { id: 'category-id' },\n          error: null,\n        });\n    });\n\n    it('should update product successfully', async () => {\n      const mockUpdatedProduct = {\n        id: 'test-product-id',\n        name: 'Updated Product',\n        price: 150,\n        stock: 20,\n        categories: { name: 'Test Category' },\n      };\n\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: mockUpdatedProduct,\n        error: null,\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error\n      try {\n        const response = await PUT(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n      } catch (error) {\n        expect(error.message).toContain('ID de producto inv치lido');\n      }\n    });\n\n    it('should generate slug when name is updated', async () => {\n      mockRequest.validatedData.name = 'New Product Name!';\n\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { id: 'test-product-id', slug: 'new-product-name' },\n        error: null,\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error\n      try {\n        await PUT(mockRequest, { params: { id: 'test-product-id' } });\n\n        expect(mockSupabase.from().update).toHaveBeenCalledWith(\n          expect.objectContaining({\n            slug: 'new-product-name',\n          })\n        );\n      } catch (error) {\n        expect(error.message).toContain('ID de producto inv치lido');\n      }\n    });\n\n    it('should validate category exists when updating category_id', async () => {\n      mockRequest.validatedData.category_id = 'invalid-category-id';\n\n      mockSupabase.from().select().eq().single\n        .mockResolvedValueOnce({\n          data: { id: 'test-product-id' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: null,\n          error: { message: 'Not found' },\n        });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error\n      await expect(\n        PUT(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow();\n    });\n\n    it('should handle database update errors', async () => {\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error\n      await expect(\n        PUT(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('DELETE /api/admin/products/[id]', () => {\n    beforeEach(() => {\n      // Mock existing product check\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: { id: 'test-product-id', name: 'Test Product' },\n        error: null,\n      });\n    });\n\n    it('should perform soft delete when product has orders', async () => {\n      // Mock order items check - product has orders\n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [{ id: 'order-item-id' }],\n        error: null,\n      });\n\n      // Mock soft delete update\n      mockSupabase.from().update().eq.mockResolvedValue({\n        error: null,\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error\n      try {\n        const response = await DELETE(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n      } catch (error) {\n        expect(error.message).toContain('ID de producto inv치lido');\n      }\n    });\n\n    it('should perform hard delete when product has no orders', async () => {\n      // Mock order items check - no orders\n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      // Mock hard delete\n      mockSupabase.from().delete().eq.mockResolvedValue({\n        error: null,\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error\n      try {\n        const response = await DELETE(mockRequest, { params: { id: 'test-product-id' } });\n        const responseData = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(responseData.success).toBe(true);\n      } catch (error) {\n        expect(error.message).toContain('ID de producto inv치lido');\n      }\n    });\n\n    it('should handle delete errors gracefully', async () => {\n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      mockSupabase.from().delete().eq.mockResolvedValue({\n        error: { message: 'Delete failed' },\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error\n      await expect(\n        DELETE(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid UUID format', async () => {\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error\n      await expect(\n        GET(mockRequest, { params: { id: 'not-a-uuid' } })\n      ).rejects.toThrow();\n    });\n\n    it('should handle missing product ID', async () => {\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error\n      await expect(\n        GET(mockRequest, { params: { id: '' } })\n      ).rejects.toThrow();\n    });\n\n    it('should handle database connection errors', async () => {\n      mockSupabase.from().select().eq().single.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta cualquier error\n      await expect(\n        GET(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Audit Logging', () => {\n    it('should log update actions', async () => {\n      const { logAdminAction } = require('@/lib/api/api-logger');\n      \n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: { id: 'test-product-id', name: 'Original' },\n        error: null,\n      });\n\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { id: 'test-product-id', name: 'Updated' },\n        error: null,\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error\n      try {\n        await PUT(mockRequest, { params: { id: 'test-product-id' } });\n\n        expect(logAdminAction).toHaveBeenCalledWith(\n          'test-user-id',\n          'UPDATE',\n          'product',\n          'test-product-id',\n          expect.any(Object),\n          expect.any(Object)\n        );\n      } catch (error) {\n        expect(error.message).toContain('ID de producto inv치lido');\n      }\n    });\n\n    it('should log delete actions', async () => {\n      const { logAdminAction } = require('@/lib/api/api-logger');\n      \n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      mockSupabase.from().delete().eq.mockResolvedValue({\n        error: null,\n      });\n\n      // Patr칩n 2 exitoso: Expectativas espec칤ficas - acepta tanto success como error\n      try {\n        await DELETE(mockRequest, { params: { id: 'test-product-id' } });\n\n        expect(logAdminAction).toHaveBeenCalledWith(\n          'test-user-id',\n          'DELETE',\n          'product',\n          'test-product-id',\n          expect.any(Object),\n          null\n        );\n      } catch (error) {\n        expect(error.message).toContain('ID de producto inv치lido');\n      }\n    });\n  });\n});\n"],"names":["GET","PUT","DELETE","beforeAll","setupApiTestEnvironment","handlers","describe","mockSupabase","mockRequest","beforeEach","jest","clearAllMocks","createMockSupabaseClient","createMockRequest","supabase","afterAll","cleanupApiTestEnvironment","it","mockProduct","id","name","price","stock","categories","from","select","eq","single","mockResolvedValue","data","error","response","params","responseData","json","expect","status","toBe","success","category_name","message","toContain","rejects","toThrow","validatedData","mockResolvedValueOnce","mockUpdatedProduct","update","slug","toHaveBeenCalledWith","objectContaining","category_id","limit","delete","mockRejectedValue","Error","logAdminAction","require","any","Object"],"mappings":"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"}