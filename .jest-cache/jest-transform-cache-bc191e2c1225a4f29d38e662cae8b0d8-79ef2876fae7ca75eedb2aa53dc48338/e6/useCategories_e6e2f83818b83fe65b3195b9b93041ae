4101a78f3fe44cc4b630edd83552b3bb
// ===================================
// PINTEYA E-COMMERCE - HOOK PARA CATEGORÍAS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useCategories () {
        return useCategories;
    },
    get useCategoriesForFilters () {
        return useCategoriesForFilters;
    },
    get useMainCategories () {
        return useMainCategories;
    }
});
const _react = require("react");
const _categories = require("../lib/api/categories");
function useCategories(options = {}) {
    const { initialFilters = {}, autoFetch = true } = options;
    const [state, setState] = (0, _react.useState)({
        categories: [],
        loading: false,
        error: null
    });
    const [filters, setFilters] = (0, _react.useState)(initialFilters);
    /**
   * Obtiene categorías desde la API
   */ const fetchCategories = (0, _react.useCallback)(async (newFilters)=>{
        setState((prev)=>({
                ...prev,
                loading: true,
                error: null
            }));
        try {
            // Obtener categorías con filtros
            const filtersToUse = newFilters || filters;
            const response = await (0, _categories.getCategories)(filtersToUse);
            if (response.success) {
                setState((prev)=>({
                        ...prev,
                        categories: response.data || [],
                        loading: false
                    }));
            } else {
                setState((prev)=>({
                        ...prev,
                        loading: false,
                        error: response.error || 'Error obteniendo categorías'
                    }));
            }
        } catch (error) {
            setState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message || 'Error inesperado'
                }));
        }
    }, [
        filters
    ]);
    /**
   * Actualiza los filtros y obtiene categorías
   */ const updateFilters = (0, _react.useCallback)((newFilters)=>{
        const updatedFilters = {
            ...filters,
            ...newFilters
        };
        setFilters(updatedFilters);
        fetchCategories(updatedFilters);
    }, [
        filters,
        fetchCategories
    ]);
    /**
   * Busca categorías por término
   */ const searchCategories = (0, _react.useCallback)((searchTerm)=>{
        updateFilters({
            search: searchTerm
        });
    }, [
        updateFilters
    ]);
    // Función removida ya que no hay jerarquía en la estructura actual
    /**
   * Refresca las categorías
   */ const refreshCategories = (0, _react.useCallback)(()=>{
        fetchCategories();
    }, [
        fetchCategories
    ]);
    // Auto-fetch al montar el componente
    (0, _react.useEffect)(()=>{
        if (autoFetch) {
            fetchCategories();
        }
    }, [
        autoFetch,
        fetchCategories
    ]);
    return {
        // Estado
        categories: state.categories,
        loading: state.loading,
        error: state.error,
        // Acciones
        fetchCategories,
        updateFilters,
        searchCategories,
        refreshCategories
    };
}
function useMainCategories() {
    return useCategories();
}
function useCategoriesForFilters() {
    const { categories, loading, error, refreshCategories } = useCategories();
    // Transformar categorías para el formato esperado por los filtros
    const categoriesForFilters = categories.map((category)=>({
            name: category.name,
            products: category.products_count || 0,
            isRefined: false,
            slug: category.slug,
            id: category.id
        }));
    return {
        categories: categoriesForFilters,
        loading,
        error,
        refreshCategories
    };
}

//# sourceMappingURL=data:application/json;base64,