{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\rate-limiting\\enterprise-rate-limiter.ts"],"sourcesContent":["/**\n * Sistema Enterprise de Rate Limiting\n * Unifica todas las implementaciones de rate limiting con Redis y fallback en memoria\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface EnterpriseRateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n  message?: string;\n  keyGenerator?: (request: NextRequest | NextApiRequest) => string;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n  enableRedis?: boolean;\n  enableMemoryFallback?: boolean;\n  enableMetrics?: boolean;\n  enableLogging?: boolean;\n  customHeaders?: Record<string, string>;\n  onLimitReached?: (key: string, request: NextRequest | NextApiRequest) => void;\n}\n\nexport interface EnterpriseRateLimitResult {\n  allowed: boolean;\n  limit: number;\n  remaining: number;\n  resetTime: number;\n  retryAfter?: number;\n  error?: string;\n  code?: string;\n  source: 'redis' | 'memory' | 'error';\n  metrics?: {\n    responseTime: number;\n    cacheHit: boolean;\n    keyGenerated: string;\n  };\n}\n\nexport interface RateLimitMetrics {\n  totalRequests: number;\n  allowedRequests: number;\n  blockedRequests: number;\n  redisHits: number;\n  memoryFallbacks: number;\n  errors: number;\n  averageResponseTime: number;\n  topBlockedIPs: Array<{ ip: string; count: number }>;\n  topEndpoints: Array<{ endpoint: string; count: number }>;\n}\n\n// =====================================================\n// CONFIGURACIONES PREDEFINIDAS ENTERPRISE\n// =====================================================\n\nexport const ENTERPRISE_RATE_LIMIT_CONFIGS: Record<string, EnterpriseRateLimitConfig> = {\n  // Autenticación crítica\n  CRITICAL_AUTH: {\n    windowMs: 15 * 60 * 1000, // 15 minutos\n    maxRequests: 3, // 3 intentos por 15 minutos\n    message: 'Demasiados intentos de autenticación crítica. Intenta en 15 minutos.',\n    enableRedis: true,\n    enableMetrics: true,\n    enableLogging: true\n  },\n\n  // Admin APIs\n  ADMIN_API: {\n    windowMs: 5 * 60 * 1000, // 5 minutos\n    maxRequests: 50, // 50 requests por 5 minutos\n    message: 'Límite de requests administrativas excedido. Intenta en 5 minutos.',\n    enableRedis: true,\n    enableMetrics: true,\n    enableLogging: true\n  },\n\n  // APIs de pagos\n  PAYMENT_API: {\n    windowMs: 10 * 60 * 1000, // 10 minutos\n    maxRequests: 15, // 15 requests por 10 minutos\n    message: 'Límite de requests de pagos excedido. Intenta en 10 minutos.',\n    enableRedis: true,\n    enableMetrics: true,\n    enableLogging: true,\n    onLimitReached: (key, request) => {\n      console.warn(`[PAYMENT_RATE_LIMIT] Límite excedido para ${key}`);\n    }\n  },\n\n  // APIs públicas de productos\n  PUBLIC_API: {\n    windowMs: 1 * 60 * 1000, // 1 minuto\n    maxRequests: 100, // 100 requests por minuto\n    message: 'Límite de requests públicas excedido. Intenta en 1 minuto.',\n    enableRedis: true,\n    enableMetrics: true,\n    enableLogging: false // No loggear APIs públicas\n  },\n\n  // Webhooks\n  WEBHOOK_API: {\n    windowMs: 1 * 60 * 1000, // 1 minuto\n    maxRequests: 200, // 200 webhooks por minuto\n    message: 'Límite de webhooks excedido.',\n    enableRedis: true,\n    enableMetrics: true,\n    enableLogging: true\n  },\n\n  // Búsquedas y consultas\n  SEARCH_API: {\n    windowMs: 1 * 60 * 1000, // 1 minuto\n    maxRequests: 60, // 60 búsquedas por minuto\n    message: 'Límite de búsquedas excedido. Intenta en 1 minuto.',\n    enableRedis: true,\n    enableMetrics: true,\n    enableLogging: false\n  },\n\n  // Upload de archivos\n  UPLOAD_API: {\n    windowMs: 5 * 60 * 1000, // 5 minutos\n    maxRequests: 10, // 10 uploads por 5 minutos\n    message: 'Límite de uploads excedido. Intenta en 5 minutos.',\n    enableRedis: true,\n    enableMetrics: true,\n    enableLogging: true\n  },\n\n  // APIs de desarrollo/debug\n  DEBUG_API: {\n    windowMs: 1 * 60 * 1000, // 1 minuto\n    maxRequests: 30, // 30 requests por minuto\n    message: 'Límite de debug APIs excedido.',\n    enableRedis: false, // Usar memoria para debug\n    enableMetrics: true,\n    enableLogging: true\n  }\n};\n\n// =====================================================\n// GENERADORES DE CLAVES\n// =====================================================\n\n/**\n * Generador de clave por IP\n */\nexport function ipKeyGenerator(request: NextRequest | NextApiRequest): string {\n  const ip = getClientIP(request);\n  return `ip:${ip}`;\n}\n\n/**\n * Generador de clave por usuario autenticado\n */\nexport function userKeyGenerator(request: NextRequest | NextApiRequest): string {\n  // Intentar obtener user ID de diferentes fuentes\n  const userId = getUserId(request);\n  const ip = getClientIP(request);\n  \n  return userId ? `user:${userId}` : `ip:${ip}`;\n}\n\n/**\n * Generador de clave por endpoint\n */\nexport function endpointKeyGenerator(request: NextRequest | NextApiRequest): string {\n  const ip = getClientIP(request);\n  const endpoint = getEndpoint(request);\n  \n  return `endpoint:${ip}:${endpoint}`;\n}\n\n/**\n * Generador de clave híbrido (usuario + endpoint)\n */\nexport function hybridKeyGenerator(request: NextRequest | NextApiRequest): string {\n  const userId = getUserId(request);\n  const ip = getClientIP(request);\n  const endpoint = getEndpoint(request);\n  \n  const userPart = userId ? `user:${userId}` : `ip:${ip}`;\n  return `${userPart}:${endpoint}`;\n}\n\n// =====================================================\n// UTILIDADES\n// =====================================================\n\n/**\n * Obtiene la IP del cliente\n */\nfunction getClientIP(request: NextRequest | NextApiRequest): string {\n  // Intentar diferentes headers de IP\n  const headers = [\n    'x-forwarded-for',\n    'x-real-ip',\n    'x-client-ip',\n    'cf-connecting-ip'\n  ];\n\n  for (const header of headers) {\n    let ip: string | null = null;\n    \n    if ('headers' in request && typeof request.headers.get === 'function') {\n      // NextRequest\n      ip = (request as NextRequest).headers.get(header);\n    } else if ('headers' in request) {\n      // NextApiRequest\n      const headerValue = (request as NextApiRequest).headers[header];\n      ip = Array.isArray(headerValue) ? headerValue[0] : headerValue || null;\n    }\n\n    if (ip) {\n      // Tomar la primera IP si hay múltiples\n      return ip.split(',')[0].trim();\n    }\n  }\n\n  return 'unknown';\n}\n\n/**\n * Obtiene el ID del usuario autenticado\n */\nfunction getUserId(request: NextRequest | NextApiRequest): string | null {\n  // Intentar obtener de diferentes fuentes\n  \n  // 1. Headers de Clerk\n  let userId: string | null = null;\n  \n  if ('headers' in request && typeof request.headers.get === 'function') {\n    // NextRequest\n    userId = (request as NextRequest).headers.get('x-clerk-user-id');\n  } else if ('headers' in request) {\n    // NextApiRequest\n    const headerValue = (request as NextApiRequest).headers['x-clerk-user-id'];\n    userId = Array.isArray(headerValue) ? headerValue[0] : headerValue || null;\n  }\n\n  // 2. Contexto enterprise si está disponible\n  if (!userId && (request as any).enterpriseAuth?.userId) {\n    userId = (request as any).enterpriseAuth.userId;\n  }\n\n  // 3. Contexto de autenticación si está disponible\n  if (!userId && (request as any).auth?.userId) {\n    userId = (request as any).auth.userId;\n  }\n\n  return userId;\n}\n\n/**\n * Obtiene el endpoint de la request\n */\nfunction getEndpoint(request: NextRequest | NextApiRequest): string {\n  if ('nextUrl' in request) {\n    // NextRequest\n    return (request as NextRequest).nextUrl.pathname;\n  } else if ('url' in request) {\n    // NextApiRequest\n    try {\n      const url = new URL((request as NextApiRequest).url || '', 'http://localhost');\n      return url.pathname;\n    } catch {\n      return '/unknown';\n    }\n  }\n  \n  return '/unknown';\n}\n\n// =====================================================\n// STORE EN MEMORIA (FALLBACK)\n// =====================================================\n\ninterface MemoryRateLimitEntry {\n  count: number;\n  resetTime: number;\n  firstRequest: number;\n}\n\nclass MemoryRateLimitStore {\n  private store = new Map<string, MemoryRateLimitEntry>();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Limpiar entradas expiradas cada 5 minutos\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, 5 * 60 * 1000);\n  }\n\n  get(key: string): MemoryRateLimitEntry | null {\n    const entry = this.store.get(key);\n    \n    if (!entry) {\n      return null;\n    }\n\n    // Verificar si ha expirado\n    if (Date.now() > entry.resetTime) {\n      this.store.delete(key);\n      return null;\n    }\n\n    return entry;\n  }\n\n  set(key: string, entry: MemoryRateLimitEntry): void {\n    this.store.set(key, entry);\n  }\n\n  increment(key: string): number {\n    const entry = this.get(key);\n    if (entry) {\n      entry.count++;\n      this.set(key, entry);\n      return entry.count;\n    }\n    return 0;\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    let cleaned = 0;\n\n    for (const [key, entry] of this.store.entries()) {\n      if (now > entry.resetTime) {\n        this.store.delete(key);\n        cleaned++;\n      }\n    }\n\n    if (cleaned > 0) {\n      console.log(`[MEMORY_RATE_LIMIT] Limpiadas ${cleaned} entradas expiradas`);\n    }\n  }\n\n  getStats(): { entries: number; memoryUsage: number } {\n    const entries = this.store.size;\n    const memoryUsage = JSON.stringify([...this.store.entries()]).length;\n    \n    return { entries, memoryUsage };\n  }\n\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.store.clear();\n  }\n}\n\n// Instancia global del store en memoria\nconst memoryStore = new MemoryRateLimitStore();\n\n// =====================================================\n// MÉTRICAS GLOBALES\n// =====================================================\n\nclass RateLimitMetricsCollector {\n  private metrics: RateLimitMetrics = {\n    totalRequests: 0,\n    allowedRequests: 0,\n    blockedRequests: 0,\n    redisHits: 0,\n    memoryFallbacks: 0,\n    errors: 0,\n    averageResponseTime: 0,\n    topBlockedIPs: [],\n    topEndpoints: []\n  };\n\n  private responseTimes: number[] = [];\n  private blockedIPs = new Map<string, number>();\n  private endpointCounts = new Map<string, number>();\n\n  recordRequest(result: EnterpriseRateLimitResult, ip: string, endpoint: string): void {\n    this.metrics.totalRequests++;\n\n    if (result.allowed) {\n      this.metrics.allowedRequests++;\n    } else {\n      this.metrics.blockedRequests++;\n      \n      // Registrar IP bloqueada\n      const currentCount = this.blockedIPs.get(ip) || 0;\n      this.blockedIPs.set(ip, currentCount + 1);\n    }\n\n    // Registrar fuente\n    if (result.source === 'redis') {\n      this.metrics.redisHits++;\n    } else if (result.source === 'memory') {\n      this.metrics.memoryFallbacks++;\n    } else if (result.source === 'error') {\n      this.metrics.errors++;\n    }\n\n    // Registrar tiempo de respuesta\n    if (result.metrics?.responseTime) {\n      this.responseTimes.push(result.metrics.responseTime);\n      \n      // Mantener solo los últimos 1000 tiempos\n      if (this.responseTimes.length > 1000) {\n        this.responseTimes = this.responseTimes.slice(-1000);\n      }\n\n      // Calcular promedio\n      this.metrics.averageResponseTime = \n        this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length;\n    }\n\n    // Registrar endpoint\n    const endpointCount = this.endpointCounts.get(endpoint) || 0;\n    this.endpointCounts.set(endpoint, endpointCount + 1);\n\n    // Actualizar tops\n    this.updateTopLists();\n  }\n\n  private updateTopLists(): void {\n    // Top IPs bloqueadas\n    this.metrics.topBlockedIPs = Array.from(this.blockedIPs.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([ip, count]) => ({ ip, count }));\n\n    // Top endpoints\n    this.metrics.topEndpoints = Array.from(this.endpointCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([endpoint, count]) => ({ endpoint, count }));\n  }\n\n  getMetrics(): RateLimitMetrics {\n    return { ...this.metrics };\n  }\n\n  reset(): void {\n    this.metrics = {\n      totalRequests: 0,\n      allowedRequests: 0,\n      blockedRequests: 0,\n      redisHits: 0,\n      memoryFallbacks: 0,\n      errors: 0,\n      averageResponseTime: 0,\n      topBlockedIPs: [],\n      topEndpoints: []\n    };\n    this.responseTimes = [];\n    this.blockedIPs.clear();\n    this.endpointCounts.clear();\n  }\n}\n\n// Instancia global del collector de métricas\nconst metricsCollector = new RateLimitMetricsCollector();\n\n// Exportar para uso externo\nexport { memoryStore, metricsCollector };\n\n// =====================================================\n// IMPLEMENTACIÓN REDIS\n// =====================================================\n\n/**\n * Verifica si Redis está disponible\n */\nasync function isRedisAvailable(): Promise<boolean> {\n  try {\n    // Intentar importar Redis dinámicamente\n    const { redis } = await import('@/lib/redis');\n    if (!redis) return false;\n\n    // Test de conexión simple\n    await redis.ping();\n    return true;\n  } catch (error) {\n    console.warn('[RATE_LIMIT] Redis no disponible, usando fallback en memoria');\n    return false;\n  }\n}\n\n/**\n * Rate limiting con Redis\n */\nasync function rateLimitWithRedis(\n  key: string,\n  config: EnterpriseRateLimitConfig\n): Promise<EnterpriseRateLimitResult> {\n  const startTime = Date.now();\n\n  try {\n    const { redis } = await import('@/lib/redis');\n    const now = Date.now();\n    const window = Math.floor(now / config.windowMs);\n    const redisKey = `rate_limit:${key}:${window}`;\n\n    // Usar pipeline para operaciones atómicas\n    const pipeline = redis.pipeline();\n    pipeline.incr(redisKey);\n    pipeline.expire(redisKey, Math.ceil(config.windowMs / 1000));\n\n    const results = await pipeline.exec();\n    const count = results?.[0]?.[1] as number || 1;\n\n    const remaining = Math.max(0, config.maxRequests - count);\n    const resetTime = (window + 1) * config.windowMs;\n    const allowed = count <= config.maxRequests;\n\n    return {\n      allowed,\n      limit: config.maxRequests,\n      remaining,\n      resetTime,\n      retryAfter: allowed ? undefined : Math.ceil((resetTime - now) / 1000),\n      source: 'redis',\n      metrics: {\n        responseTime: Date.now() - startTime,\n        cacheHit: true,\n        keyGenerated: redisKey\n      }\n    };\n  } catch (error) {\n    console.error('[RATE_LIMIT] Error en Redis:', error);\n\n    // Fallback a memoria en caso de error\n    return rateLimitWithMemory(key, config);\n  }\n}\n\n/**\n * Rate limiting con memoria (fallback)\n */\nfunction rateLimitWithMemory(\n  key: string,\n  config: EnterpriseRateLimitConfig\n): EnterpriseRateLimitResult {\n  const startTime = Date.now();\n  const now = Date.now();\n\n  let entry = memoryStore.get(key);\n\n  if (!entry) {\n    // Primera request en esta ventana\n    entry = {\n      count: 1,\n      resetTime: now + config.windowMs,\n      firstRequest: now\n    };\n    memoryStore.set(key, entry);\n\n    return {\n      allowed: true,\n      limit: config.maxRequests,\n      remaining: config.maxRequests - 1,\n      resetTime: entry.resetTime,\n      source: 'memory',\n      metrics: {\n        responseTime: Date.now() - startTime,\n        cacheHit: false,\n        keyGenerated: key\n      }\n    };\n  }\n\n  // Incrementar contador\n  entry.count++;\n  memoryStore.set(key, entry);\n\n  const allowed = entry.count <= config.maxRequests;\n  const remaining = Math.max(0, config.maxRequests - entry.count);\n\n  return {\n    allowed,\n    limit: config.maxRequests,\n    remaining,\n    resetTime: entry.resetTime,\n    retryAfter: allowed ? undefined : Math.ceil((entry.resetTime - now) / 1000),\n    source: 'memory',\n    metrics: {\n      responseTime: Date.now() - startTime,\n      cacheHit: true,\n      keyGenerated: key\n    }\n  };\n}\n\n// =====================================================\n// FUNCIÓN PRINCIPAL DE RATE LIMITING\n// =====================================================\n\n/**\n * Función principal de rate limiting enterprise\n */\nexport async function checkEnterpriseRateLimit(\n  request: NextRequest | NextApiRequest,\n  configName: keyof typeof ENTERPRISE_RATE_LIMIT_CONFIGS,\n  customConfig?: Partial<EnterpriseRateLimitConfig>\n): Promise<EnterpriseRateLimitResult> {\n  const baseConfig = ENTERPRISE_RATE_LIMIT_CONFIGS[configName];\n\n  if (!baseConfig) {\n    return {\n      allowed: true,\n      limit: 1000,\n      remaining: 999,\n      resetTime: Date.now() + 60000,\n      error: `Configuración '${configName}' no encontrada`,\n      code: 'CONFIG_NOT_FOUND',\n      source: 'error'\n    };\n  }\n\n  const config = { ...baseConfig, ...customConfig };\n  const keyGenerator = config.keyGenerator || hybridKeyGenerator;\n  const key = keyGenerator(request);\n\n  let result: EnterpriseRateLimitResult;\n\n  try {\n    // Intentar Redis primero si está habilitado\n    if (config.enableRedis !== false && await isRedisAvailable()) {\n      result = await rateLimitWithRedis(key, config);\n    } else {\n      result = rateLimitWithMemory(key, config);\n    }\n\n    // Registrar métricas si está habilitado\n    if (config.enableMetrics) {\n      const ip = getClientIP(request);\n      const endpoint = getEndpoint(request);\n      metricsCollector.recordRequest(result, ip, endpoint);\n    }\n\n    // Logging si está habilitado\n    if (config.enableLogging) {\n      if (!result.allowed) {\n        console.warn(`[RATE_LIMIT] Límite excedido para ${key}: ${result.remaining}/${result.limit}`);\n\n        // Callback personalizado si está definido\n        if (config.onLimitReached) {\n          config.onLimitReached(key, request);\n        }\n      }\n    }\n\n    return result;\n  } catch (error) {\n    console.error('[RATE_LIMIT] Error en checkEnterpriseRateLimit:', error);\n\n    return {\n      allowed: true, // Permitir en caso de error\n      limit: config.maxRequests,\n      remaining: config.maxRequests,\n      resetTime: Date.now() + config.windowMs,\n      error: 'Error interno en rate limiting',\n      code: 'INTERNAL_ERROR',\n      source: 'error'\n    };\n  }\n}\n"],"names":["ENTERPRISE_RATE_LIMIT_CONFIGS","checkEnterpriseRateLimit","endpointKeyGenerator","hybridKeyGenerator","ipKeyGenerator","memoryStore","metricsCollector","userKeyGenerator","CRITICAL_AUTH","windowMs","maxRequests","message","enableRedis","enableMetrics","enableLogging","ADMIN_API","PAYMENT_API","onLimitReached","key","request","console","warn","PUBLIC_API","WEBHOOK_API","SEARCH_API","UPLOAD_API","DEBUG_API","ip","getClientIP","userId","getUserId","endpoint","getEndpoint","userPart","headers","header","get","headerValue","Array","isArray","split","trim","enterpriseAuth","auth","nextUrl","pathname","url","URL","MemoryRateLimitStore","constructor","store","Map","cleanupInterval","setInterval","cleanup","entry","Date","now","resetTime","delete","set","increment","count","cleaned","entries","log","getStats","size","memoryUsage","JSON","stringify","length","destroy","clearInterval","clear","RateLimitMetricsCollector","recordRequest","result","metrics","totalRequests","allowed","allowedRequests","blockedRequests","currentCount","blockedIPs","source","redisHits","memoryFallbacks","errors","responseTime","responseTimes","push","slice","averageResponseTime","reduce","a","b","endpointCount","endpointCounts","updateTopLists","topBlockedIPs","from","sort","map","topEndpoints","getMetrics","reset","isRedisAvailable","redis","ping","error","rateLimitWithRedis","config","startTime","window","Math","floor","redisKey","pipeline","incr","expire","ceil","results","exec","remaining","max","limit","retryAfter","undefined","cacheHit","keyGenerated","rateLimitWithMemory","firstRequest","configName","customConfig","baseConfig","code","keyGenerator"],"mappings":"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"}