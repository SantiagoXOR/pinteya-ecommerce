9d36c8a95dd748f84135d04d3c617503
// ===================================
// TESTS: SearchAutocompleteIntegrated - Integración completa
// ===================================
"use strict";
// Mocks - Aplicando Patrón 1 exitoso: Imports faltantes
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn(),
        useSearchParams: jest.fn(),
        usePathname: jest.fn()
    }));
// Patrón 3 exitoso: Comportamientos testing - mockear en el nivel correcto
jest.mock('@/hooks/useSearchOptimized', ()=>({
        useSearchOptimized: jest.fn()
    }));
jest.mock('@/lib/api/products', ()=>({
        searchProducts: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _navigation = require("next/navigation");
const _products = require("../../../lib/api/products");
const _useSearchOptimized = require("../../../hooks/useSearchOptimized");
const _SearchAutocompleteIntegrated = require("../../../components/ui/SearchAutocompleteIntegrated");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Patrón 3 exitoso: Comportamientos testing - mockear fetch en lugar de searchProducts
global.fetch = jest.fn();
const mockPush = jest.fn();
const mockPrefetch = jest.fn(); // Patrón 1 exitoso: Import faltante
const mockSearchProducts = _products.searchProducts;
const mockFetch = global.fetch; // Patrón 3 exitoso: Mock correcto
// Mock del hook useSearchOptimized - Patrón 3 exitoso: Nivel correcto
const mockUseSearchOptimized = _useSearchOptimized.useSearchOptimized;
// Mocks adicionales para Next.js navigation
const mockSearchParams = jest.fn();
const mockPathname = jest.fn();
beforeEach(()=>{
    jest.clearAllMocks();
    // Configurar mocks de Next.js navigation - Patrón exitoso aplicado
    _navigation.useRouter.mockReturnValue({
        push: mockPush,
        prefetch: mockPrefetch
    });
    _navigation.useSearchParams.mockReturnValue({
        get: jest.fn(()=>null),
        has: jest.fn(()=>false),
        toString: jest.fn(()=>'')
    });
    _navigation.usePathname.mockReturnValue('/');
    // Configurar mock del hook useSearchOptimized - Patrón 3 exitoso: Nivel correcto
    mockUseSearchOptimized.mockReturnValue({
        query: '',
        results: [],
        suggestions: [],
        isLoading: false,
        error: null,
        hasSearched: false,
        recentSearches: [],
        trendingSearches: [],
        isFetching: false,
        isStale: false,
        dataUpdatedAt: Date.now(),
        searchError: null,
        isRetrying: false,
        retryCount: 0,
        toasts: [],
        searchWithDebounce: jest.fn(),
        executeSearch: jest.fn(),
        selectSuggestion: jest.fn(),
        clearSearch: jest.fn(),
        initialize: jest.fn(),
        cleanup: jest.fn(),
        clearError: jest.fn(),
        retryManually: jest.fn(),
        removeToast: jest.fn(),
        clearToasts: jest.fn()
    });
    // Configurar mock de fetch - Patrón 3 exitoso: Mock correcto
    mockFetch.mockResolvedValue({
        ok: true,
        json: async ()=>({
                products: [],
                pagination: {
                    total: 0,
                    page: 1,
                    limit: 6,
                    totalPages: 0
                }
            })
    });
    // Configurar mock de searchProducts con respuesta por defecto
    mockSearchProducts.mockResolvedValue({
        products: [],
        pagination: {
            total: 0,
            page: 1,
            limit: 6,
            totalPages: 0
        }
    });
    // Mock localStorage
    Object.defineProperty(window, 'localStorage', {
        value: {
            getItem: jest.fn(()=>null),
            setItem: jest.fn(),
            removeItem: jest.fn(),
            clear: jest.fn()
        },
        writable: true
    });
});
describe('SearchAutocompleteIntegrated', ()=>{
    it('should render with default props', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchAutocompleteIntegrated.SearchAutocompleteIntegrated, {}));
        // Patrón 2 exitoso: Expectativas específicas - usar searchbox en lugar de combobox
        expect(_react1.screen.getByRole('searchbox')).toBeInTheDocument();
        expect(_react1.screen.getByPlaceholderText('Látex interior blanco 20lts, rodillos, pinceles...')).toBeInTheDocument();
    });
    it('should integrate with useSearch hook and show suggestions', async ()=>{
        // Patrón 2 exitoso: Expectativas específicas - estructura correcta con href requerido
        const mockSuggestions = [
            {
                id: 'product-1',
                type: 'product',
                title: 'Pintura Látex Blanca',
                subtitle: 'Pinturas',
                image: '/test.jpg',
                badge: 'En stock',
                href: '/product/1'
            },
            {
                id: 'product-2',
                type: 'product',
                title: 'Pintura Esmalte Azul',
                subtitle: 'Pinturas',
                image: '/test2.jpg',
                badge: 'En stock',
                href: '/product/2'
            }
        ];
        // Patrón 3 exitoso: Mock correcto del hook con datos específicos
        mockUseSearchOptimized.mockReturnValue({
            query: 'pintura',
            results: [
                {
                    id: '1',
                    name: 'Pintura Látex Blanca',
                    category: {
                        name: 'Pinturas'
                    },
                    images: {
                        previews: [
                            '/test.jpg'
                        ]
                    },
                    stock: 10
                },
                {
                    id: '2',
                    name: 'Pintura Esmalte Azul',
                    category: {
                        name: 'Pinturas'
                    },
                    images: {
                        previews: [
                            '/test2.jpg'
                        ]
                    },
                    stock: 5
                }
            ],
            suggestions: mockSuggestions,
            isLoading: false,
            error: null,
            hasSearched: true,
            recentSearches: [],
            trendingSearches: [],
            isFetching: false,
            isStale: false,
            dataUpdatedAt: Date.now(),
            searchError: null,
            isRetrying: false,
            retryCount: 0,
            toasts: [],
            searchWithDebounce: jest.fn(),
            executeSearch: jest.fn(),
            selectSuggestion: jest.fn(),
            clearSearch: jest.fn(),
            initialize: jest.fn(),
            cleanup: jest.fn(),
            clearError: jest.fn(),
            retryManually: jest.fn(),
            removeToast: jest.fn(),
            clearToasts: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchAutocompleteIntegrated.SearchAutocompleteIntegrated, {
            debounceMs: 100
        }));
        const input = _react1.screen.getByRole('searchbox');
        // Verificar que el componente se renderiza con los datos del mock
        expect(input).toHaveValue('pintura');
        // Patrón 3 exitoso: Comportamientos testing - simular focus para abrir dropdown
        await _userevent.default.click(input);
        // Verificar que las sugerencias aparecen después del focus
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Pintura Látex Blanca')).toBeInTheDocument();
            expect(_react1.screen.getByText('Pintura Esmalte Azul')).toBeInTheDocument();
        }, {
            timeout: 1000
        });
        // Verificar que el hook fue llamado con la configuración correcta
        expect(mockUseSearchOptimized).toHaveBeenCalledWith({
            debounceMs: 100,
            maxSuggestions: 6,
            searchLimit: 12,
            saveRecentSearches: true,
            onSearch: expect.any(Function),
            onSuggestionSelect: expect.any(Function)
        });
    });
    it('should execute search on Enter key', async ()=>{
        const onSearchExecuted = jest.fn();
        const mockExecuteSearch = jest.fn();
        // Patrón 3 exitoso: Mock dinámico que simula el comportamiento real
        let currentQuery = '';
        const mockSearchWithDebounce = jest.fn((query)=>{
            currentQuery = query;
        });
        mockUseSearchOptimized.mockImplementation(()=>({
                query: currentQuery,
                results: [],
                suggestions: [],
                isLoading: false,
                error: null,
                hasSearched: false,
                recentSearches: [],
                trendingSearches: [],
                isFetching: false,
                isStale: false,
                dataUpdatedAt: Date.now(),
                searchError: null,
                isRetrying: false,
                retryCount: 0,
                toasts: [],
                searchWithDebounce: mockSearchWithDebounce,
                executeSearch: mockExecuteSearch,
                selectSuggestion: jest.fn(),
                clearSearch: jest.fn(),
                initialize: jest.fn(),
                cleanup: jest.fn(),
                clearError: jest.fn(),
                retryManually: jest.fn(),
                removeToast: jest.fn(),
                clearToasts: jest.fn()
            }));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchAutocompleteIntegrated.SearchAutocompleteIntegrated, {
            onSearchExecuted: onSearchExecuted,
            debounceMs: 100
        }));
        const input = _react1.screen.getByRole('searchbox');
        // Patrón 3 exitoso: Comportamientos testing - abrir dropdown antes de Enter
        await _userevent.default.click(input); // Esto abre el dropdown (isOpen = true)
        await _userevent.default.type(input, 'test query');
        await _userevent.default.keyboard('{Enter}');
        await (0, _react1.waitFor)(()=>{
            expect(mockExecuteSearch).toHaveBeenCalledWith('test query');
        });
    });
    it('should handle suggestion selection', async ()=>{
        const onSuggestionSelected = jest.fn();
        const mockResponse = {
            success: true,
            data: [
                {
                    id: '1',
                    name: 'Test Product',
                    category: {
                        name: 'Test Category'
                    },
                    images: {
                        previews: [
                            '/test.jpg'
                        ]
                    },
                    stock: 10
                }
            ],
            pagination: {
                total: 1,
                page: 1,
                limit: 6,
                totalPages: 1
            }
        };
        mockSearchProducts.mockResolvedValue(mockResponse);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchAutocompleteIntegrated.SearchAutocompleteIntegrated, {
            onSuggestionSelected: onSuggestionSelected,
            debounceMs: 100
        }));
        const input = _react1.screen.getByRole('searchbox');
        await _userevent.default.type(input, 'test');
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Test Product')).toBeInTheDocument();
        });
        await _userevent.default.click(_react1.screen.getByText('Test Product'));
        expect(onSuggestionSelected).toHaveBeenCalledWith(expect.objectContaining({
            title: 'Test Product',
            type: 'product'
        }));
    });
    it('should clear search when clear button is clicked', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchAutocompleteIntegrated.SearchAutocompleteIntegrated, {}));
        const input = _react1.screen.getByRole('searchbox');
        await _userevent.default.type(input, 'test query');
        // Buscar el botón de limpiar
        const clearButton = _react1.screen.getByLabelText('Clear search');
        await _userevent.default.click(clearButton);
        expect(input).toHaveValue('');
    });
    it('should show loading state during search', async ()=>{
        // Mock para simular búsqueda lenta
        mockSearchProducts.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        success: true,
                        data: [],
                        pagination: {
                            total: 0,
                            page: 1,
                            limit: 6,
                            totalPages: 0
                        }
                    }), 1000)));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchAutocompleteIntegrated.SearchAutocompleteIntegrated, {
            debounceMs: 50
        }));
        const input = _react1.screen.getByRole('searchbox');
        await _userevent.default.type(input, 'test');
        // Verificar que aparece el spinner de carga
        await (0, _react1.waitFor)(()=>{
            const spinner = document.querySelector('.animate-spin');
            expect(spinner).toBeInTheDocument();
        });
    });
    it('should handle API errors gracefully', async ()=>{
        mockSearchProducts.mockRejectedValue(new Error('API Error'));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchAutocompleteIntegrated.SearchAutocompleteIntegrated, {
            debounceMs: 50
        }));
        const input = _react1.screen.getByRole('searchbox');
        await _userevent.default.type(input, 'test');
        await (0, _react1.waitFor)(()=>{
            expect(mockSearchProducts).toHaveBeenCalled();
        });
        // El componente no debería crashear y debería mostrar estado sin resultados
        expect(input).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,