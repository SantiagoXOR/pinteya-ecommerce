{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useRecentSearches.ts"],"sourcesContent":["// ===================================\n// HOOK: useRecentSearches - Gestión de búsquedas recientes con localStorage\n// ===================================\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { safeLocalStorageGet, safeLocalStorageSet, STORAGE_KEYS } from '@/lib/json-utils';\n\nexport interface RecentSearchesOptions {\n  /** Número máximo de búsquedas recientes a mantener */\n  maxSearches?: number;\n  /** Clave de localStorage para persistir las búsquedas */\n  storageKey?: string;\n  /** Habilitar/deshabilitar persistencia en localStorage */\n  enablePersistence?: boolean;\n  /** Filtrar búsquedas duplicadas */\n  filterDuplicates?: boolean;\n  /** Tiempo de expiración en días (0 = sin expiración) */\n  expirationDays?: number;\n}\n\nexport interface RecentSearchesReturn {\n  /** Array de búsquedas recientes */\n  recentSearches: string[];\n  /** Agregar una nueva búsqueda */\n  addSearch: (search: string) => void;\n  /** Remover una búsqueda específica */\n  removeSearch: (search: string) => void;\n  /** Limpiar todas las búsquedas */\n  clearSearches: () => void;\n  /** Verificar si una búsqueda existe */\n  hasSearch: (search: string) => boolean;\n  /** Obtener las N búsquedas más recientes */\n  getRecentSearches: (limit?: number) => string[];\n  /** Reordenar búsquedas (mover al principio) */\n  moveToTop: (search: string) => void;\n}\n\ninterface PersistedSearchData {\n  searches: string[];\n  timestamp: number;\n  version: string;\n}\n\nconst DEFAULT_OPTIONS: Required<RecentSearchesOptions> = {\n  maxSearches: 5,\n  storageKey: 'pinteya-recent-searches',\n  enablePersistence: true,\n  filterDuplicates: true,\n  expirationDays: 30, // 30 días de expiración\n};\n\n/**\n * Hook para gestionar búsquedas recientes con persistencia en localStorage\n * \n * Características:\n * - Persistencia automática en localStorage\n * - Límite configurable de búsquedas\n * - Filtrado de duplicados\n * - Expiración automática\n * - Manejo de errores robusto\n */\nexport function useRecentSearches(options: RecentSearchesOptions = {}): RecentSearchesReturn {\n  const config = { ...DEFAULT_OPTIONS, ...options };\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n\n  // Función para validar y limpiar una búsqueda\n  const sanitizeSearch = useCallback((search: string): string => {\n    return search.trim().toLowerCase();\n  }, []);\n\n  // Función para verificar si los datos han expirado\n  const isExpired = useCallback((timestamp: number): boolean => {\n    if (config.expirationDays === 0) return false;\n    const maxAge = config.expirationDays * 24 * 60 * 60 * 1000;\n    return Date.now() - timestamp > maxAge;\n  }, [config.expirationDays]);\n\n  // Cargar búsquedas desde localStorage\n  const loadFromStorage = useCallback((): string[] => {\n    if (!config.enablePersistence) {\n      return [];\n    }\n\n    // Usar utilidad segura para cargar desde localStorage\n    const result = safeLocalStorageGet<PersistedSearchData | string[]>(config.storageKey);\n\n    if (!result.success) {\n      return [];\n    }\n\n    const data = result.data;\n\n    // Verificar si es formato nuevo (con metadata)\n    if (data && typeof data === 'object' && 'searches' in data && Array.isArray(data.searches)) {\n      const persistedData = data as PersistedSearchData;\n\n      // Verificar expiración\n      if (persistedData.timestamp && isExpired(persistedData.timestamp)) {\n        // Limpiar datos expirados usando utilidad segura\n        safeLocalStorageSet(config.storageKey, {\n          searches: [],\n          timestamp: Date.now(),\n          version: '1.0'\n        });\n        return [];\n      }\n\n      return persistedData.searches.slice(0, config.maxSearches);\n    }\n\n    // Formato antiguo (array simple)\n    if (Array.isArray(data)) {\n      return data.slice(0, config.maxSearches);\n    }\n\n    return [];\n  }, [config.enablePersistence, config.storageKey, config.maxSearches, isExpired]);\n\n  // Guardar búsquedas en localStorage\n  const saveToStorage = useCallback((searches: string[]): void => {\n    if (!config.enablePersistence || typeof window === 'undefined') {\n      return;\n    }\n\n    try {\n      if (searches.length === 0) {\n        localStorage.removeItem(config.storageKey);\n        return;\n      }\n\n      const dataToStore: PersistedSearchData = {\n        searches: searches.slice(0, config.maxSearches),\n        timestamp: Date.now(),\n        version: '1.0.0'\n      };\n\n      localStorage.setItem(config.storageKey, JSON.stringify(dataToStore));\n    } catch (error) {\n      console.warn('Error saving recent searches to localStorage:', error);\n    }\n  }, [config.enablePersistence, config.storageKey, config.maxSearches]);\n\n  // Cargar búsquedas al inicializar\n  useEffect(() => {\n    const loaded = loadFromStorage();\n    setRecentSearches(loaded);\n  }, [loadFromStorage]);\n\n  // Agregar una nueva búsqueda\n  const addSearch = useCallback((search: string): void => {\n    const sanitized = sanitizeSearch(search);\n    if (!sanitized || sanitized.length < 2) return;\n\n    setRecentSearches(prev => {\n      let updated = [...prev];\n\n      // Remover duplicados si está habilitado\n      if (config.filterDuplicates) {\n        updated = updated.filter(s => sanitizeSearch(s) !== sanitized);\n      }\n\n      // Agregar al principio\n      updated.unshift(search.trim());\n\n      // Limitar al máximo configurado\n      updated = updated.slice(0, config.maxSearches);\n\n      // Guardar en localStorage\n      saveToStorage(updated);\n\n      return updated;\n    });\n  }, [sanitizeSearch, config.filterDuplicates, config.maxSearches, saveToStorage]);\n\n  // Remover una búsqueda específica\n  const removeSearch = useCallback((search: string): void => {\n    const sanitized = sanitizeSearch(search);\n    \n    setRecentSearches(prev => {\n      const updated = prev.filter(s => sanitizeSearch(s) !== sanitized);\n      saveToStorage(updated);\n      return updated;\n    });\n  }, [sanitizeSearch, saveToStorage]);\n\n  // Limpiar todas las búsquedas\n  const clearSearches = useCallback((): void => {\n    setRecentSearches([]);\n    saveToStorage([]);\n  }, [saveToStorage]);\n\n  // Verificar si una búsqueda existe\n  const hasSearch = useCallback((search: string): boolean => {\n    const sanitized = sanitizeSearch(search);\n    return recentSearches.some(s => sanitizeSearch(s) === sanitized);\n  }, [recentSearches, sanitizeSearch]);\n\n  // Obtener las N búsquedas más recientes\n  const getRecentSearches = useCallback((limit?: number): string[] => {\n    const actualLimit = limit ?? config.maxSearches;\n    return recentSearches.slice(0, actualLimit);\n  }, [recentSearches, config.maxSearches]);\n\n  // Mover una búsqueda al principio (reordenar)\n  const moveToTop = useCallback((search: string): void => {\n    const sanitized = sanitizeSearch(search);\n    \n    setRecentSearches(prev => {\n      const filtered = prev.filter(s => sanitizeSearch(s) !== sanitized);\n      const existing = prev.find(s => sanitizeSearch(s) === sanitized);\n      \n      if (!existing) return prev;\n      \n      const updated = [existing, ...filtered];\n      saveToStorage(updated);\n      return updated;\n    });\n  }, [sanitizeSearch, saveToStorage]);\n\n  return {\n    recentSearches,\n    addSearch,\n    removeSearch,\n    clearSearches,\n    hasSearch,\n    getRecentSearches,\n    moveToTop,\n  };\n}\n\n/**\n * Hook simplificado para solo obtener búsquedas recientes\n */\nexport function useRecentSearchesSimple(limit: number = 5): string[] {\n  const { getRecentSearches } = useRecentSearches({ maxSearches: limit });\n  return getRecentSearches();\n}\n\nexport default useRecentSearches;\n"],"names":["useRecentSearches","useRecentSearchesSimple","DEFAULT_OPTIONS","maxSearches","storageKey","enablePersistence","filterDuplicates","expirationDays","options","config","recentSearches","setRecentSearches","useState","sanitizeSearch","useCallback","search","trim","toLowerCase","isExpired","timestamp","maxAge","Date","now","loadFromStorage","result","safeLocalStorageGet","success","data","Array","isArray","searches","persistedData","safeLocalStorageSet","version","slice","saveToStorage","window","length","localStorage","removeItem","dataToStore","setItem","JSON","stringify","error","console","warn","useEffect","loaded","addSearch","sanitized","prev","updated","filter","s","unshift","removeSearch","clearSearches","hasSearch","some","getRecentSearches","limit","actualLimit","moveToTop","filtered","existing","find"],"mappings":"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"}