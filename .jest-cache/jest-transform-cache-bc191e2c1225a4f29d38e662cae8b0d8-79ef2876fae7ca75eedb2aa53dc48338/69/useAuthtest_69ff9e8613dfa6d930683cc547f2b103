2cf092403791eed601d4400ba4c28e56
// ===================================
// TESTS PARA HOOK DE AUTENTICACIÓN
// Tests unitarios e integración para useAuth
// ===================================
"use strict";
// Mocks
jest.mock('next-auth/react');
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            loading: jest.fn()
        }
    }));
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _useAuth = require("../../hooks/useAuth");
const _react1 = require("next-auth/react");
const _navigation = require("next/navigation");
const _react2 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockRouter = {
    push: jest.fn(),
    replace: jest.fn(),
    refresh: jest.fn()
};
// Wrapper para React Query
const createWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
};
describe('useAuth Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        _navigation.useRouter.mockReturnValue(mockRouter);
        // Mock default NextAuth session
        _react1.useSession.mockReturnValue({
            data: {
                user: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    image: 'https://example.com/avatar.jpg'
                },
                expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
            },
            status: 'authenticated'
        });
    });
    describe('Autenticación con NextAuth', ()=>{
        it('debe iniciar sesión exitosamente', async ()=>{
            _react1.signIn.mockResolvedValue({
                ok: true,
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn('google', {
                    callbackUrl: '/dashboard'
                });
            });
            expect(_react1.signIn).toHaveBeenCalledWith('google', {
                callbackUrl: '/dashboard',
                redirect: true
            });
        });
        it('debe cerrar sesión exitosamente', async ()=>{
            _react1.signOut.mockResolvedValue({
                url: '/api/auth/signin'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signOut({
                    callbackUrl: '/'
                });
            });
            expect(_react1.signOut).toHaveBeenCalledWith({
                callbackUrl: '/',
                redirect: true
            });
        });
        it('debe retornar información del usuario autenticado', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.user).toEqual({
                id: 'test-user-id',
                email: 'test@example.com',
                name: 'Test User',
                image: 'https://example.com/avatar.jpg'
            });
            expect(result.current.isSignedIn).toBe(true);
            expect(result.current.isLoaded).toBe(true);
        });
        it('debe manejar estado de carga', ()=>{
            _react1.useSession.mockReturnValue({
                data: null,
                status: 'loading'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isLoaded).toBe(false);
            expect(result.current.isSignedIn).toBe(false);
            expect(result.current.user).toBeNull();
        });
        it('debe manejar estado no autenticado', ()=>{
            _react1.useSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isLoaded).toBe(true);
            expect(result.current.isSignedIn).toBe(false);
            expect(result.current.user).toBeNull();
        });
    });
    describe('Hooks de utilidad', ()=>{
        it('useIsAdmin debe retornar false para usuario normal', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            // useIsAdmin está incluido en el hook useAuth
            expect(result.current.user?.email).toBe('test@example.com');
        });
        it('useRequireAuth debe redirigir si no está autenticado', async ()=>{
            _react1.useSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isSignedIn).toBe(false);
        });
    });
    describe('Manejo de errores', ()=>{
        it('debe manejar error en signIn', async ()=>{
            _react1.signIn.mockResolvedValue({
                ok: false,
                error: 'Authentication failed'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn('google');
            });
            expect(_react1.signIn).toHaveBeenCalledWith('google', {
                callbackUrl: '/admin',
                redirect: true
            });
        });
        it('debe manejar error en signOut', async ()=>{
            _react1.signOut.mockRejectedValue(new Error('Sign out failed'));
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.signOut();
                } catch (error) {
                    expect(error).toBeInstanceOf(Error);
                }
            });
            expect(_react1.signOut).toHaveBeenCalled();
        });
    });
    describe('Integración con Router', ()=>{
        it('debe usar el router correctamente', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            // El hook debe tener acceso al router
            expect(result.current).toBeDefined();
            expect(typeof result.current.signIn).toBe('function');
            expect(typeof result.current.signOut).toBe('function');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,