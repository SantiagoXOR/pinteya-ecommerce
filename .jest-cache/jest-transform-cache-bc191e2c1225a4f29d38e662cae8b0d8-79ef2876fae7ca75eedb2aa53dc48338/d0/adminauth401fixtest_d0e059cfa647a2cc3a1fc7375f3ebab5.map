{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\auth\\admin-auth-401-fix.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - TEST PARA VERIFICAR CORRECCIÓN ERROR 401\r\n// ===================================\r\n\r\nimport { authenticatedAdmin, authenticatedUser } from '@/lib/auth/admin-auth';\r\nimport { auth } from '@/auth';\r\n\r\n// Mocks\r\njest.mock('@/auth', () => ({\r\n  auth: jest.fn(),\r\n}));\r\n\r\njest.mock('next-auth/react', () => ({\r\n  useSession: jest.fn(),\r\n}));\r\n\r\njest.mock('next-auth/providers/google', () => {\r\n  return jest.fn(() => ({\r\n    id: 'google',\r\n    name: 'Google',\r\n    type: 'oauth',\r\n  }));\r\n});\r\n\r\nconst mockAuth = auth as jest.MockedFunction<typeof auth>;\r\n\r\ndescribe('Admin Auth 401 Fix', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    console.log = jest.fn(); // Silenciar logs en tests\r\n    console.warn = jest.fn();\r\n  });\r\n\r\n  describe('authenticatedUser - Verificación de Roles Corregida', () => {\r\n    it('debe verificar admin usando publicMetadata correctamente', async () => {\r\n      // Simular usuario admin con rol en publicMetadata\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: { role: 'admin' },\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result).toEqual({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        isAdmin: true\r\n      });\r\n    });\r\n\r\n    it('debe verificar admin usando privateMetadata correctamente', async () => {\r\n      // Simular usuario admin con rol en privateMetadata\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: {},\r\n          privateMetadata: { role: 'admin' }\r\n        }\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result).toEqual({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        isAdmin: true\r\n      });\r\n    });\r\n\r\n    it('debe usar fallback a auth cuando sessionClaims no tiene rol', async () => {\r\n      // Simular sessionClaims sin rol\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: {},\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      // Simular auth con rol admin\r\n      mockAuth.mockResolvedValue({\r\n        id: 'user_admin123',\r\n        publicMetadata: { role: 'admin' },\r\n        privateMetadata: {}\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result).toEqual({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        isAdmin: true\r\n      });\r\n\r\n      expect(mockAuth).toHaveBeenCalled();\r\n    });\r\n\r\n    it('debe identificar usuario no-admin correctamente', async () => {\r\n      // Simular usuario regular\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_regular123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: { role: 'customer' },\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      // Mock auth para que también retorne rol no-admin\r\n      mockAuth.mockResolvedValue({\r\n        id: 'user_regular123',\r\n        publicMetadata: { role: 'customer' },\r\n        privateMetadata: {}\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result).toEqual({\r\n        userId: 'user_regular123',\r\n        sessionId: 'sess_123',\r\n        isAdmin: false\r\n      });\r\n    });\r\n\r\n    it('debe manejar usuario sin rol definido', async () => {\r\n      // Simular usuario sin rol\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_norole123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: {},\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      // Simular auth también sin rol\r\n      mockAuth.mockResolvedValue({\r\n        id: 'user_norole123',\r\n        publicMetadata: {},\r\n        privateMetadata: {}\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result).toEqual({\r\n        userId: 'user_norole123',\r\n        sessionId: 'sess_123',\r\n        isAdmin: false\r\n      });\r\n    });\r\n\r\n    it('debe manejar error en fallback gracefully', async () => {\r\n      // Simular sessionClaims sin rol\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: {},\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      // Simular error en auth\r\n      mockAuth.mockRejectedValue(new Error('Clerk API error'));\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result).toEqual({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        isAdmin: false\r\n      });\r\n\r\n      expect(console.warn).toHaveBeenCalledWith(\r\n        '[AUTH] Error en fallback de verificación de admin:',\r\n        expect.any(Error)\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('authenticatedAdmin - Integración Completa', () => {\r\n    it('debe retornar admin válido cuando usuario tiene rol correcto', async () => {\r\n      // Mock authenticatedUser para retornar admin\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_admin123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: { role: 'admin' },\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      const result = await authenticatedAdmin();\r\n\r\n      expect(result.userId).toBe('user_admin123');\r\n      expect(result.isAdmin).toBe(true);\r\n      expect(result.error).toBeUndefined();\r\n      expect(result.status).toBeUndefined();\r\n    });\r\n\r\n    it('debe retornar error 401 cuando usuario no está autenticado', async () => {\r\n      // Mock usuario no autenticado\r\n      mockAuth.mockResolvedValue({\r\n        userId: null,\r\n        sessionId: null,\r\n        sessionClaims: null\r\n      });\r\n\r\n      const result = await authenticatedAdmin();\r\n\r\n      expect(result.userId).toBeNull();\r\n      expect(result.isAdmin).toBe(false);\r\n      expect(result.error).toBe('Usuario no autenticado');\r\n      expect(result.status).toBe(401);\r\n    });\r\n\r\n    it('debe retornar error 403 cuando usuario no es admin', async () => {\r\n      // Mock usuario autenticado pero no admin\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_regular123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: { role: 'customer' },\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      const result = await authenticatedAdmin();\r\n\r\n      expect(result.userId).toBe('user_regular123');\r\n      expect(result.isAdmin).toBe(false);\r\n      expect(result.error).toBe('Permisos de administrador requeridos');\r\n      expect(result.status).toBe(403);\r\n    });\r\n  });\r\n\r\n  describe('Casos Edge - Compatibilidad con Producción', () => {\r\n    it('debe manejar sessionClaims null/undefined', async () => {\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: null\r\n      });\r\n\r\n      mockAuth.mockResolvedValue({\r\n        id: 'user_123',\r\n        publicMetadata: { role: 'admin' },\r\n        privateMetadata: {}\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result.isAdmin).toBe(true);\r\n      expect(mockAuth).toHaveBeenCalled();\r\n    });\r\n\r\n    it('debe manejar metadata con valores no-string', async () => {\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: { role: 123 }, // Valor no-string\r\n          privateMetadata: {}\r\n        }\r\n      });\r\n\r\n      // Mock auth también con valor no-string\r\n      mockAuth.mockResolvedValue({\r\n        id: 'user_123',\r\n        publicMetadata: { role: 123 },\r\n        privateMetadata: {}\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result.isAdmin).toBe(false);\r\n    });\r\n\r\n    it('debe priorizar publicMetadata sobre privateMetadata', async () => {\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_123',\r\n        sessionId: 'sess_123',\r\n        sessionClaims: {\r\n          publicMetadata: { role: 'admin' },\r\n          privateMetadata: { role: 'customer' }\r\n        }\r\n      });\r\n\r\n      const result = await authenticatedUser();\r\n\r\n      expect(result.isAdmin).toBe(true);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Regresión - Verificar que NO se usa metadata directamente', () => {\r\n  it('NO debe usar sessionClaims.metadata.role (bug anterior)', async () => {\r\n    // Simular el caso problemático anterior\r\n    mockAuth.mockResolvedValue({\r\n      userId: 'user_admin123',\r\n      sessionId: 'sess_123',\r\n      sessionClaims: {\r\n        metadata: { role: 'admin' }, // Ubicación incorrecta\r\n        publicMetadata: {},\r\n        privateMetadata: {}\r\n      }\r\n    });\r\n\r\n    mockAuth.mockResolvedValue({\r\n      id: 'user_admin123',\r\n      publicMetadata: {},\r\n      privateMetadata: {}\r\n    });\r\n\r\n    const result = await authenticatedUser();\r\n\r\n    // Debe ser false porque no está en publicMetadata/privateMetadata\r\n    expect(result.isAdmin).toBe(false);\r\n  });\r\n});\r\n"],"names":["jest","mock","auth","fn","useSession","id","name","type","mockAuth","describe","beforeEach","clearAllMocks","console","log","warn","it","mockResolvedValue","userId","sessionId","sessionClaims","publicMetadata","role","privateMetadata","result","authenticatedUser","expect","toEqual","isAdmin","toHaveBeenCalled","mockRejectedValue","Error","toHaveBeenCalledWith","any","authenticatedAdmin","toBe","error","toBeUndefined","status","toBeNull","metadata"],"mappings":"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"}