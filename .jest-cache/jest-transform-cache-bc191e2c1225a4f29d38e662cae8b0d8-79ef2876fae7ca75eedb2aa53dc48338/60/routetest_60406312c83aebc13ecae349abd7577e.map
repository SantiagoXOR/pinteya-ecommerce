{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\__tests__\\route.test.ts"],"sourcesContent":["// ðŸ§ª Enterprise Unit Tests - Product Images API\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST } from '../route';\n\n// Mock Supabase Storage\nconst mockStorageUpload = jest.fn();\nconst mockStorageGetPublicUrl = jest.fn();\nconst mockStorageRemove = jest.fn();\n\n// Global mock for createClient - will be configured per test\nlet mockSupabaseGlobal: any;\n\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => mockSupabaseGlobal || {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          order: jest.fn(() => ({\n            order: jest.fn(),\n          })),\n        })),\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(),\n        })),\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          neq: jest.fn(),\n        })),\n      })),\n    })),\n    storage: {\n      from: jest.fn(() => ({\n        upload: mockStorageUpload,\n        getPublicUrl: mockStorageGetPublicUrl,\n        remove: mockStorageRemove,\n      })),\n    },\n  }),\n}));\n\n// Mock middleware\njest.mock('@/lib/api/middleware-composer', () => ({\n  composeMiddlewares: jest.fn((...middlewares) => (handler) => handler),\n}));\n\njest.mock('@/lib/api/error-handler', () => ({\n  withErrorHandler: jest.fn((handler) => handler),\n  ApiError: class ApiError extends Error {\n    constructor(message: string, public statusCode: number = 500) {\n      super(message);\n    }\n  },\n  ValidationError: class ValidationError extends Error {\n    constructor(message: string, public details?: any) {\n      super(message);\n      this.name = 'ValidationError';\n      this.details = details;\n    }\n  },\n  NotFoundError: class NotFoundError extends Error {\n    constructor(resource: string) {\n      super(`${resource} no encontrado`);\n      this.name = 'NotFoundError';\n    }\n  },\n}));\n\njest.mock('@/lib/api/api-logger', () => ({\n  withApiLogging: jest.fn((handler) => handler),\n  logAdminAction: jest.fn(),\n}));\n\njest.mock('@/lib/auth/api-auth-middleware', () => ({\n  withAdminAuth: jest.fn(() => (handler) => handler),\n}));\n\ndescribe('/api/admin/products/[id]/images - Enterprise API Tests', () => {\n  // UUIDs vÃ¡lidos para testing\n  const TEST_PRODUCT_ID = '550e8400-e29b-41d4-a716-446655440000';\n  const TEST_IMAGE_ID = '550e8400-e29b-41d4-a716-446655440001';\n\n  let mockSupabase: any;\n  let mockRequest: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Create a more flexible mock that can handle method chaining\n    const createMockChain = () => ({\n      select: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      single: jest.fn(),\n      order: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      neq: jest.fn().mockReturnThis(),\n    });\n\n    mockSupabase = {\n      from: jest.fn(() => createMockChain()),\n    };\n\n    // Set the global mock to use our local mock\n    mockSupabaseGlobal = mockSupabase;\n\n    mockRequest = {\n      supabase: mockSupabase,\n      user: { id: 'test-user-id' },\n    } as any;\n\n    // Reset storage mocks\n    mockStorageUpload.mockReset();\n    mockStorageGetPublicUrl.mockReset();\n    mockStorageRemove.mockReset();\n  });\n\n  describe('GET /api/admin/products/[id]/images', () => {\n    it('should return product images successfully', async () => {\n      const mockImages = [\n        {\n          id: 'image-1',\n          url: 'https://example.com/image1.jpg',\n          alt_text: 'Image 1',\n          is_primary: true,\n          display_order: 0,\n        },\n        {\n          id: 'image-2',\n          url: 'https://example.com/image2.jpg',\n          alt_text: 'Image 2',\n          is_primary: false,\n          display_order: 1,\n        },\n      ];\n\n      // Configure the mock chain for this specific test\n      // The code calls: .from().select().eq().order().order()\n      const mockChain = mockSupabase.from();\n\n      // Add debugging to see what's being called\n      mockChain.select.mockImplementation(() => {\n        console.log('Mock select called');\n        return mockChain;\n      });\n\n      mockChain.eq.mockImplementation(() => {\n        console.log('Mock eq called');\n        return mockChain;\n      });\n\n      // Mock the final order call to return the data\n      mockChain.order.mockImplementation(() => {\n        console.log('Mock first order called');\n        return {\n          order: jest.fn().mockImplementation(() => {\n            console.log('Mock second order called, returning:', mockImages);\n            return Promise.resolve({\n              data: mockImages,\n              error: null,\n            });\n          })\n        };\n      });\n\n      const response = await GET(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n      const responseData = await response.json();\n\n      console.log('Response status:', response.status);\n      console.log('Response data:', responseData);\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data).toHaveLength(2);\n      expect(responseData.data[0].is_primary).toBe(true);\n    });\n\n    it('should handle empty images list', async () => {\n      mockSupabase.from().select().eq().order().order.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      const response = await GET(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data).toHaveLength(0);\n    });\n\n    it('should validate product ID format', async () => {\n      await expect(\n        GET(mockRequest, { params: { id: 'invalid-uuid' } })\n      ).rejects.toThrow('ID de producto invÃ¡lido');\n    });\n\n    it('should handle database errors', async () => {\n      mockSupabase.from().select().eq().order().order.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      await expect(\n        GET(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('Error al obtener imÃ¡genes');\n    });\n  });\n\n  describe('POST /api/admin/products/[id]/images', () => {\n    let mockFile: File;\n    let mockFormData: FormData;\n\n    beforeEach(() => {\n      // Create mock file\n      mockFile = new File(['test content'], 'test-image.jpg', {\n        type: 'image/jpeg',\n      });\n\n      // Create mock FormData\n      mockFormData = new FormData();\n      mockFormData.append('file', mockFile);\n      mockFormData.append('alt_text', 'Test image');\n      mockFormData.append('is_primary', 'true');\n\n      // Mock request.formData()\n      mockRequest.formData = jest.fn().mockResolvedValue(mockFormData);\n\n      // Mock product exists check\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: { id: TEST_PRODUCT_ID, name: 'Test Product' },\n        error: null,\n      });\n    });\n\n    it('should upload image successfully', async () => {\n      // Mock storage upload\n      mockStorageUpload.mockResolvedValue({\n        data: { path: `products/${TEST_PRODUCT_ID}/123_test-image.jpg` },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://storage.example.com/test-image.jpg' },\n      });\n\n      // Mock database insert\n      const mockImageRecord = {\n        id: 'new-image-id',\n        product_id: TEST_PRODUCT_ID,\n        url: 'https://storage.example.com/test-image.jpg',\n        alt_text: 'Test image',\n        is_primary: true,\n      };\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: mockImageRecord,\n        error: null,\n      });\n\n      // Mock update other images to not primary\n      mockSupabase.from().update().eq().neq.mockResolvedValue({\n        error: null,\n      });\n\n      const response = await POST(mockRequest, { params: { id: TEST_PRODUCT_ID } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data.url).toBe('https://storage.example.com/test-image.jpg');\n      expect(responseData.message).toBe('Imagen subida exitosamente');\n\n      // Verify storage upload was called\n      expect(mockStorageUpload).toHaveBeenCalledWith(\n        expect.stringContaining(`products/${TEST_PRODUCT_ID}/`),\n        mockFile,\n        expect.objectContaining({\n          cacheControl: '3600',\n          upsert: false,\n        })\n      );\n    });\n\n    it('should validate file type', async () => {\n      const invalidFile = new File(['test'], 'test.txt', { type: 'text/plain' });\n      mockFormData.set('file', invalidFile);\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('Tipo de archivo no permitido');\n    });\n\n    it('should validate file size', async () => {\n      // Create a large file (6MB)\n      const largeContent = new Array(6 * 1024 * 1024).fill('a').join('');\n      const largeFile = new File([largeContent], 'large.jpg', { type: 'image/jpeg' });\n      mockFormData.set('file', largeFile);\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('El archivo es demasiado grande');\n    });\n\n    it('should handle missing file', async () => {\n      mockFormData.delete('file');\n\n      await expect(\n        POST(mockRequest, { params: { id: TEST_PRODUCT_ID } })\n      ).rejects.toThrow('No se proporcionÃ³ archivo');\n    });\n\n    it('should handle product not found', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: { message: 'Not found' },\n      });\n\n      await expect(\n        POST(mockRequest, { params: { id: 'non-existent-product' } })\n      ).rejects.toThrow('Producto no encontrado');\n    });\n\n    it('should handle storage upload errors', async () => {\n      mockStorageUpload.mockResolvedValue({\n        data: null,\n        error: { message: 'Storage error' },\n      });\n\n      await expect(\n        POST(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow('Error al subir imagen');\n    });\n\n    it('should cleanup storage on database insert failure', async () => {\n      // Mock successful storage upload\n      mockStorageUpload.mockResolvedValue({\n        data: { path: 'products/test-product-id/test-image.jpg' },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://storage.example.com/test-image.jpg' },\n      });\n\n      // Mock database insert failure\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      await expect(\n        POST(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow('Error al guardar imagen en base de datos');\n\n      // Verify cleanup was attempted\n      expect(mockStorageRemove).toHaveBeenCalledWith(['products/test-product-id/test-image.jpg']);\n    });\n\n    it('should update other images when setting as primary', async () => {\n      mockStorageUpload.mockResolvedValue({\n        data: { path: 'test-path' },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://example.com/image.jpg' },\n      });\n\n      const mockImageRecord = {\n        id: 'new-image-id',\n        is_primary: true,\n      };\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: mockImageRecord,\n        error: null,\n      });\n\n      await POST(mockRequest, { params: { id: 'test-product-id' } });\n\n      // Verify other images were updated to not primary\n      expect(mockSupabase.from().update).toHaveBeenCalledWith({ is_primary: false });\n    });\n\n    it('should generate unique filename', async () => {\n      mockStorageUpload.mockResolvedValue({\n        data: { path: 'test-path' },\n        error: null,\n      });\n\n      mockStorageGetPublicUrl.mockReturnValue({\n        data: { publicUrl: 'https://example.com/image.jpg' },\n      });\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: { id: 'test-id' },\n        error: null,\n      });\n\n      await POST(mockRequest, { params: { id: 'test-product-id' } });\n\n      // Verify filename includes product ID and timestamp\n      const uploadCall = mockStorageUpload.mock.calls[0];\n      const filename = uploadCall[0];\n      \n      expect(filename).toContain('products/test-product-id/');\n      expect(filename).toContain('test-image.jpg');\n    });\n  });\n\n  describe('File Validation', () => {\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    const invalidTypes = ['text/plain', 'application/pdf', 'video/mp4'];\n\n    validTypes.forEach(type => {\n      it(`should accept ${type} files`, async () => {\n        const file = new File(['content'], 'test.jpg', { type });\n        const formData = new FormData();\n        formData.append('file', file);\n        \n        mockRequest.formData = jest.fn().mockResolvedValue(formData);\n\n        mockSupabase.from().select().eq().single.mockResolvedValue({\n          data: { id: 'test-product-id' },\n          error: null,\n        });\n\n        mockStorageUpload.mockResolvedValue({\n          data: { path: 'test-path' },\n          error: null,\n        });\n\n        mockStorageGetPublicUrl.mockReturnValue({\n          data: { publicUrl: 'https://example.com/image.jpg' },\n        });\n\n        mockSupabase.from().insert().select().single.mockResolvedValue({\n          data: { id: 'test-id' },\n          error: null,\n        });\n\n        const response = await POST(mockRequest, { params: { id: 'test-product-id' } });\n        expect(response.status).toBe(201);\n      });\n    });\n\n    invalidTypes.forEach(type => {\n      it(`should reject ${type} files`, async () => {\n        const file = new File(['content'], 'test.txt', { type });\n        const formData = new FormData();\n        formData.append('file', file);\n        \n        mockRequest.formData = jest.fn().mockResolvedValue(formData);\n\n        mockSupabase.from().select().eq().single.mockResolvedValue({\n          data: { id: 'test-product-id' },\n          error: null,\n        });\n\n        await expect(\n          POST(mockRequest, { params: { id: 'test-product-id' } })\n        ).rejects.toThrow('Tipo de archivo no permitido');\n      });\n    });\n  });\n});\n"],"names":["jest","mock","createClient","fn","mockSupabaseGlobal","from","select","eq","single","order","insert","update","neq","storage","upload","mockStorageUpload","getPublicUrl","mockStorageGetPublicUrl","remove","mockStorageRemove","composeMiddlewares","middlewares","handler","withErrorHandler","ApiError","Error","message","statusCode","ValidationError","details","name","NotFoundError","resource","withApiLogging","logAdminAction","withAdminAuth","describe","TEST_PRODUCT_ID","TEST_IMAGE_ID","mockSupabase","mockRequest","beforeEach","clearAllMocks","createMockChain","mockReturnThis","supabase","user","id","mockReset","it","mockImages","url","alt_text","is_primary","display_order","mockChain","mockImplementation","console","log","Promise","resolve","data","error","response","GET","params","responseData","json","status","expect","toBe","success","toHaveLength","mockResolvedValue","rejects","toThrow","mockFile","mockFormData","File","type","FormData","append","formData","path","mockReturnValue","publicUrl","mockImageRecord","product_id","POST","toHaveBeenCalledWith","stringContaining","objectContaining","cacheControl","upsert","invalidFile","set","largeContent","Array","fill","join","largeFile","delete","uploadCall","calls","filename","toContain","validTypes","invalidTypes","forEach","file"],"mappings":"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"}