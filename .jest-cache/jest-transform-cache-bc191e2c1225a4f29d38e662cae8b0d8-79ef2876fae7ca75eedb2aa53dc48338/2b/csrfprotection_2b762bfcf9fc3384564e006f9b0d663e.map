{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\csrf-protection.ts"],"sourcesContent":["/**\n * Protección CSRF y Validación de Origen\n * Implementa validaciones para prevenir ataques Cross-Site Request Forgery\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\nimport crypto from 'crypto';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface CSRFValidationResult {\n  valid: boolean;\n  error?: string;\n  code?: string;\n  severity?: 'low' | 'medium' | 'high' | 'critical';\n  details?: {\n    origin?: string;\n    referer?: string;\n    userAgent?: string;\n    method?: string;\n    expectedOrigins?: string[];\n    csrfToken?: string;\n  };\n}\n\nexport interface OriginValidationConfig {\n  allowedOrigins: string[];\n  allowedMethods: string[];\n  requireReferer: boolean;\n  requireOrigin: boolean;\n  strictMode: boolean;\n  developmentMode: boolean;\n}\n\n// =====================================================\n// CONFIGURACIÓN DE SEGURIDAD\n// =====================================================\n\nconst CSRF_CONFIG: OriginValidationConfig = {\n  allowedOrigins: [\n    process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',\n    'https://pinteya-ecommerce.vercel.app',\n    'https://pinteya.com',\n    'https://www.pinteya.com'\n  ],\n  allowedMethods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'],\n  requireReferer: true,\n  requireOrigin: true,\n  strictMode: process.env.NODE_ENV === 'production',\n  developmentMode: process.env.NODE_ENV === 'development'\n};\n\n// =====================================================\n// FUNCIONES DE VALIDACIÓN DE ORIGEN\n// =====================================================\n\n/**\n * Valida el origen de la request para prevenir CSRF\n */\nexport async function validateRequestOrigin(\n  request: NextRequest | NextApiRequest\n): Promise<CSRFValidationResult> {\n  try {\n    const method = request.method || 'GET';\n    const origin = getHeader(request, 'origin');\n    const referer = getHeader(request, 'referer');\n    const userAgent = getHeader(request, 'user-agent');\n\n    // En desarrollo, ser más permisivo\n    if (CSRF_CONFIG.developmentMode && !CSRF_CONFIG.strictMode) {\n      return {\n        valid: true,\n        details: {\n          origin,\n          referer,\n          userAgent,\n          method,\n          expectedOrigins: CSRF_CONFIG.allowedOrigins\n        }\n      };\n    }\n\n    // Validar método HTTP\n    if (!CSRF_CONFIG.allowedMethods.includes(method)) {\n      return {\n        valid: false,\n        error: `Método HTTP no permitido: ${method}`,\n        code: 'INVALID_HTTP_METHOD',\n        severity: 'medium'\n      };\n    }\n\n    // Para métodos seguros (GET), validación menos estricta\n    if (method === 'GET') {\n      return validateGetRequest(origin, referer, userAgent);\n    }\n\n    // Para métodos que modifican datos, validación estricta\n    return validateMutatingRequest(origin, referer, userAgent, method);\n\n  } catch (error) {\n    console.error('[CSRF] Error en validación de origen:', error);\n    return {\n      valid: false,\n      error: 'Error interno en validación de origen',\n      code: 'ORIGIN_VALIDATION_ERROR',\n      severity: 'critical'\n    };\n  }\n}\n\n/**\n * Valida requests GET (menos estricto)\n */\nfunction validateGetRequest(\n  origin: string | null,\n  referer: string | null,\n  userAgent: string | null\n): CSRFValidationResult {\n  // Para GET, solo verificar que no sea obviamente malicioso\n  if (userAgent && isSuspiciousUserAgent(userAgent)) {\n    return {\n      valid: false,\n      error: 'User-Agent sospechoso detectado',\n      code: 'SUSPICIOUS_USER_AGENT',\n      severity: 'medium'\n    };\n  }\n\n  return {\n    valid: true,\n    details: {\n      origin,\n      referer,\n      userAgent,\n      method: 'GET'\n    }\n  };\n}\n\n/**\n * Valida requests que modifican datos (estricto)\n */\nfunction validateMutatingRequest(\n  origin: string | null,\n  referer: string | null,\n  userAgent: string | null,\n  method: string\n): CSRFValidationResult {\n  // Verificar Origin header\n  if (CSRF_CONFIG.requireOrigin && !origin) {\n    return {\n      valid: false,\n      error: 'Header Origin requerido para operaciones que modifican datos',\n      code: 'MISSING_ORIGIN_HEADER',\n      severity: 'high'\n    };\n  }\n\n  if (origin && !isAllowedOrigin(origin)) {\n    return {\n      valid: false,\n      error: `Origen no permitido: ${origin}`,\n      code: 'INVALID_ORIGIN',\n      severity: 'critical',\n      details: {\n        origin,\n        expectedOrigins: CSRF_CONFIG.allowedOrigins\n      }\n    };\n  }\n\n  // Verificar Referer header\n  if (CSRF_CONFIG.requireReferer && !referer) {\n    return {\n      valid: false,\n      error: 'Header Referer requerido para operaciones que modifican datos',\n      code: 'MISSING_REFERER_HEADER',\n      severity: 'high'\n    };\n  }\n\n  if (referer && !isAllowedReferer(referer)) {\n    return {\n      valid: false,\n      error: `Referer no permitido: ${referer}`,\n      code: 'INVALID_REFERER',\n      severity: 'high'\n    };\n  }\n\n  // Verificar User-Agent\n  if (userAgent && isSuspiciousUserAgent(userAgent)) {\n    return {\n      valid: false,\n      error: 'User-Agent sospechoso detectado',\n      code: 'SUSPICIOUS_USER_AGENT',\n      severity: 'medium'\n    };\n  }\n\n  return {\n    valid: true,\n    details: {\n      origin,\n      referer,\n      userAgent,\n      method,\n      expectedOrigins: CSRF_CONFIG.allowedOrigins\n    }\n  };\n}\n\n/**\n * Verifica si un origen está permitido\n */\nfunction isAllowedOrigin(origin: string): boolean {\n  try {\n    const originUrl = new URL(origin);\n    \n    return CSRF_CONFIG.allowedOrigins.some(allowedOrigin => {\n      try {\n        const allowedUrl = new URL(allowedOrigin);\n        return originUrl.hostname === allowedUrl.hostname &&\n               originUrl.protocol === allowedUrl.protocol;\n      } catch {\n        return false;\n      }\n    });\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Verifica si un referer está permitido\n */\nfunction isAllowedReferer(referer: string): boolean {\n  try {\n    const refererUrl = new URL(referer);\n    \n    return CSRF_CONFIG.allowedOrigins.some(allowedOrigin => {\n      try {\n        const allowedUrl = new URL(allowedOrigin);\n        return refererUrl.hostname === allowedUrl.hostname;\n      } catch {\n        return false;\n      }\n    });\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Detecta User-Agents sospechosos\n */\nfunction isSuspiciousUserAgent(userAgent: string): boolean {\n  const suspiciousPatterns = [\n    /bot/i,\n    /crawler/i,\n    /spider/i,\n    /scraper/i,\n    /curl/i,\n    /wget/i,\n    /python/i,\n    /postman/i,\n    /insomnia/i,\n    /^$/,  // User-Agent vacío\n    /^.{0,10}$/,  // User-Agent muy corto\n    /^.{500,}$/   // User-Agent muy largo\n  ];\n\n  return suspiciousPatterns.some(pattern => pattern.test(userAgent));\n}\n\n/**\n * Obtiene un header de manera compatible con ambos tipos de request\n */\nfunction getHeader(\n  request: NextRequest | NextApiRequest,\n  headerName: string\n): string | null {\n  if ('headers' in request && typeof request.headers.get === 'function') {\n    // NextRequest\n    return (request as NextRequest).headers.get(headerName);\n  } else if ('headers' in request) {\n    // NextApiRequest\n    const header = (request as NextApiRequest).headers[headerName];\n    return Array.isArray(header) ? header[0] : header || null;\n  }\n  return null;\n}\n\n// =====================================================\n// GENERACIÓN Y VALIDACIÓN DE TOKENS CSRF\n// =====================================================\n\n/**\n * Genera un token CSRF único\n */\nexport function generateCSRFToken(): string {\n  return crypto.randomBytes(32).toString('hex');\n}\n\n/**\n * Valida un token CSRF\n */\nexport function validateCSRFToken(\n  providedToken: string,\n  expectedToken: string\n): boolean {\n  if (!providedToken || !expectedToken) {\n    return false;\n  }\n\n  // Comparación segura para prevenir timing attacks\n  return crypto.timingSafeEqual(\n    Buffer.from(providedToken, 'hex'),\n    Buffer.from(expectedToken, 'hex')\n  );\n}\n\n// =====================================================\n// MIDDLEWARE DE PROTECCIÓN CSRF\n// =====================================================\n\n/**\n * Middleware para protección automática contra CSRF\n */\nexport function withCSRFProtection(\n  options: Partial<OriginValidationConfig> = {}\n) {\n  const config = { ...CSRF_CONFIG, ...options };\n\n  return function (handler: Function) {\n    return async (request: NextRequest | NextApiRequest, ...args: any[]) => {\n      try {\n        // Validar origen de la request\n        const originValidation = await validateRequestOrigin(request);\n        \n        if (!originValidation.valid) {\n          const errorResponse = {\n            success: false,\n            error: originValidation.error,\n            code: originValidation.code,\n            severity: originValidation.severity,\n            csrfProtection: true\n          };\n\n          if ('query' in request) {\n            // Pages Router\n            const res = args[0] as any;\n            return res.status(403).json(errorResponse);\n          } else {\n            // App Router\n            return new Response(JSON.stringify(errorResponse), {\n              status: 403,\n              headers: { 'Content-Type': 'application/json' }\n            });\n          }\n        }\n\n        // Añadir información de validación al request\n        (request as any).csrfValidation = originValidation;\n\n        return handler(request, ...args);\n\n      } catch (error) {\n        console.error('[CSRF] Error en middleware de protección:', error);\n        \n        const errorResponse = {\n          success: false,\n          error: 'Error interno en protección CSRF',\n          code: 'CSRF_MIDDLEWARE_ERROR'\n        };\n\n        if ('query' in request) {\n          // Pages Router\n          const res = args[0] as any;\n          return res.status(500).json(errorResponse);\n        } else {\n          // App Router\n          return new Response(JSON.stringify(errorResponse), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n      }\n    };\n  };\n}\n\n/**\n * Middleware específico para APIs admin con protección CSRF estricta\n */\nexport function withAdminCSRFProtection() {\n  return withCSRFProtection({\n    strictMode: true,\n    requireReferer: true,\n    requireOrigin: true\n  });\n}\n"],"names":["generateCSRFToken","validateCSRFToken","validateRequestOrigin","withAdminCSRFProtection","withCSRFProtection","CSRF_CONFIG","allowedOrigins","process","env","NEXT_PUBLIC_APP_URL","allowedMethods","requireReferer","requireOrigin","strictMode","NODE_ENV","developmentMode","request","method","origin","getHeader","referer","userAgent","valid","details","expectedOrigins","includes","error","code","severity","validateGetRequest","validateMutatingRequest","console","isSuspiciousUserAgent","isAllowedOrigin","isAllowedReferer","originUrl","URL","some","allowedOrigin","allowedUrl","hostname","protocol","refererUrl","suspiciousPatterns","pattern","test","headerName","headers","get","header","Array","isArray","crypto","randomBytes","toString","providedToken","expectedToken","timingSafeEqual","Buffer","from","options","config","handler","args","originValidation","errorResponse","success","csrfProtection","res","status","json","Response","JSON","stringify","csrfValidation"],"mappings":"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"}