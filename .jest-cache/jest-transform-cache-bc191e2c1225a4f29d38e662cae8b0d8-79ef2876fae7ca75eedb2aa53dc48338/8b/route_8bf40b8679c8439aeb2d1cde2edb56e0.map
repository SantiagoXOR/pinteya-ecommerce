{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user-enterprise\\route.ts"],"sourcesContent":["/**\n * API Enterprise para crear usuario administrador\n * Refactorizada con utilidades enterprise + RLS + validaciones robustas\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { \n  requireCriticalAuth \n} from '@/lib/auth/enterprise-auth-utils';\nimport {\n  executeWithRLS,\n  checkRLSPermission\n} from '@/lib/auth/enterprise-rls-utils';\nimport {\n  invalidateUserCache\n} from '@/lib/auth/enterprise-cache';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // ENTERPRISE: Autenticación crítica para operaciones de creación de admin\n    const authResult = await requireCriticalAuth(request);\n\n    if (!authResult.success) {\n      return NextResponse.json(\n        { \n          error: authResult.error,\n          code: authResult.code,\n          enterprise: true,\n          operation: 'CREATE_ADMIN_USER'\n        },\n        { status: authResult.status || 401 }\n      );\n    }\n\n    const context = authResult.context!;\n\n    // ENTERPRISE: Verificar permisos específicos para crear admins\n    if (!context.permissions.includes('admin_create') && context.role !== 'admin') {\n      return NextResponse.json(\n        { \n          error: 'Permisos insuficientes para crear usuarios administradores',\n          code: 'INSUFFICIENT_PERMISSIONS',\n          enterprise: true,\n          required_permissions: ['admin_create']\n        },\n        { status: 403 }\n      );\n    }\n\n    const { \n      securityKey, \n      email, \n      password, \n      firstName = 'Admin', \n      lastName = 'User',\n      permissions = ['admin_access', 'user_management', 'products_create', 'products_update', 'products_delete']\n    } = await request.json();\n\n    // ENTERPRISE: Validación de clave de seguridad\n    if (securityKey !== 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025') {\n      return NextResponse.json(\n        { \n          error: 'Clave de seguridad enterprise incorrecta',\n          code: 'INVALID_SECURITY_KEY',\n          enterprise: true\n        },\n        { status: 403 }\n      );\n    }\n\n    // ENTERPRISE: Validaciones robustas\n    if (!email || !password) {\n      return NextResponse.json(\n        { \n          error: 'Email y contraseña son requeridos',\n          code: 'MISSING_REQUIRED_FIELDS',\n          enterprise: true\n        },\n        { status: 400 }\n      );\n    }\n\n    // ENTERPRISE: Validación de email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return NextResponse.json(\n        { \n          error: 'Formato de email inválido',\n          code: 'INVALID_EMAIL_FORMAT',\n          enterprise: true\n        },\n        { status: 400 }\n      );\n    }\n\n    // ENTERPRISE: Validación de contraseña robusta\n    if (password.length < 12) {\n      return NextResponse.json(\n        { \n          error: 'La contraseña debe tener al menos 12 caracteres para admin',\n          code: 'WEAK_PASSWORD',\n          enterprise: true\n        },\n        { status: 400 }\n      );\n    }\n\n    // ENTERPRISE: Validación de complejidad de contraseña\n    const hasUpperCase = /[A-Z]/.test(password);\n    const hasLowerCase = /[a-z]/.test(password);\n    const hasNumbers = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n\n    if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {\n      return NextResponse.json(\n        { \n          error: 'La contraseña debe contener mayúsculas, minúsculas, números y caracteres especiales',\n          code: 'PASSWORD_COMPLEXITY_FAILED',\n          enterprise: true\n        },\n        { status: 400 }\n      );\n    }\n\n    // ENTERPRISE: Ejecutar creación con RLS y auditoría\n    const result = await executeWithRLS(\n      context,\n      async (client, rlsContext) => {\n        // Verificar permisos RLS específicos\n        if (!checkRLSPermission(rlsContext, 'admin_create')) {\n          throw new Error('Permisos RLS insuficientes para crear administradores');\n        }\n\n        // 1. Verificar si el usuario ya existe en auth.users\n        const { data: existingAuthUser } = await supabaseAdmin.auth.admin.listUsers();\n        const userExists = existingAuthUser.users.find(u => u.email === email);\n\n        let authUser;\n\n        if (userExists) {\n          authUser = userExists;\n        } else {\n          // 2. Crear usuario en Supabase Auth con metadata enterprise\n          const { data: newAuthUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\n            email,\n            password,\n            email_confirm: true,\n            user_metadata: {\n              first_name: firstName,\n              last_name: lastName,\n              role: 'admin',\n              created_by: context.userId,\n              enterprise_admin: true,\n              security_level: 'critical'\n            }\n          });\n\n          if (authError) {\n            throw new Error(`Error creando usuario en Auth: ${authError.message}`);\n          }\n\n          authUser = newAuthUser.user;\n        }\n\n        // 3. Verificar si el perfil ya existe\n        const { data: existingProfile } = await client\n          .from('user_profiles')\n          .select('*')\n          .eq('email', email)\n          .single();\n\n        if (existingProfile) {\n          // 4. Actualizar perfil existente con datos enterprise\n          const { data: updatedProfile, error: updateError } = await client\n            .from('user_profiles')\n            .update({\n              supabase_user_id: authUser.id,\n              first_name: firstName,\n              last_name: lastName,\n              permissions: permissions,\n              metadata: {\n                ...existingProfile.metadata,\n                updated_by: context.userId,\n                enterprise_admin: true,\n                last_admin_update: new Date().toISOString()\n              },\n              updated_at: new Date().toISOString()\n            })\n            .eq('email', email)\n            .select(`\n              *,\n              user_roles (\n                role_name,\n                permissions\n              )\n            `)\n            .single();\n\n          if (updateError) {\n            throw new Error(`Error actualizando perfil: ${updateError.message}`);\n          }\n\n          return {\n            action: 'updated',\n            authUser,\n            profile: updatedProfile\n          };\n        } else {\n          // 5. Obtener rol de admin\n          const { data: adminRole } = await client\n            .from('user_roles')\n            .select('id')\n            .eq('role_name', 'admin')\n            .single();\n\n          if (!adminRole) {\n            throw new Error('Rol de admin no encontrado en la base de datos');\n          }\n\n          // 6. Crear nuevo perfil enterprise\n          const { data: newProfile, error: profileError } = await client\n            .from('user_profiles')\n            .insert({\n              supabase_user_id: authUser.id,\n              email,\n              first_name: firstName,\n              last_name: lastName,\n              role_id: adminRole.id,\n              permissions: permissions,\n              is_active: true,\n              is_verified: true,\n              metadata: {\n                created_by: context.userId,\n                enterprise_admin: true,\n                security_level: 'critical',\n                created_via: 'enterprise_api'\n              },\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            })\n            .select(`\n              *,\n              user_roles (\n                role_name,\n                permissions\n              )\n            `)\n            .single();\n\n          if (profileError) {\n            throw new Error(`Error creando perfil: ${profileError.message}`);\n          }\n\n          return {\n            action: 'created',\n            authUser,\n            profile: newProfile\n          };\n        }\n      },\n      {\n        enforceRLS: true,\n        auditLog: true,\n        adminOverride: true // Permitir bypass RLS para esta operación crítica\n      }\n    );\n\n    if (!result.success) {\n      return NextResponse.json(\n        { \n          error: result.error,\n          code: result.code,\n          enterprise: true,\n          rls: true\n        },\n        { status: 400 }\n      );\n    }\n\n    const { action, authUser, profile } = result.data!;\n\n    // ENTERPRISE: Invalidar cache relacionado\n    invalidateUserCache(authUser.id);\n\n    // ENTERPRISE: Respuesta enterprise con información completa\n    return NextResponse.json({\n      success: true,\n      message: `Usuario administrador ${action === 'created' ? 'creado' : 'actualizado'} correctamente`,\n      data: {\n        action,\n        user: {\n          auth_id: authUser.id,\n          email: authUser.email,\n          profile: {\n            id: profile.id,\n            name: `${profile.first_name} ${profile.last_name}`,\n            role: profile.user_roles?.role_name,\n            permissions: profile.permissions,\n            is_active: profile.is_active,\n            created_at: profile.created_at\n          }\n        }\n      },\n      enterprise: {\n        security_level: 'critical',\n        rls_enabled: true,\n        created_by: context.userId,\n        permissions_granted: permissions\n      },\n      timestamp: new Date().toISOString()\n    }, { status: action === 'created' ? 201 : 200 });\n\n  } catch (error) {\n    console.error('[ENTERPRISE] Error en create-admin-user-enterprise:', error);\n    return NextResponse.json(\n      { \n        error: 'Error interno del servidor enterprise',\n        code: 'INTERNAL_SERVER_ERROR',\n        enterprise: true\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json({\n    message: 'API Enterprise para crear usuario administrador',\n    enterprise: true,\n    instructions: {\n      method: 'POST',\n      required_fields: ['securityKey', 'email', 'password'],\n      optional_fields: ['firstName', 'lastName', 'permissions'],\n      security_key: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\n      password_requirements: {\n        min_length: 12,\n        must_contain: ['uppercase', 'lowercase', 'numbers', 'special_chars']\n      }\n    },\n    features: [\n      'Enterprise authentication with critical security level',\n      'Row Level Security (RLS) enforcement',\n      'Robust password validation',\n      'Audit logging',\n      'Cache invalidation',\n      'Comprehensive error handling'\n    ]\n  });\n}\n"],"names":["GET","POST","request","authResult","requireCriticalAuth","success","NextResponse","json","error","code","enterprise","operation","status","context","permissions","includes","role","required_permissions","securityKey","email","password","firstName","lastName","emailRegex","test","length","hasUpperCase","hasLowerCase","hasNumbers","hasSpecialChar","result","executeWithRLS","client","rlsContext","checkRLSPermission","Error","data","existingAuthUser","supabaseAdmin","auth","admin","listUsers","userExists","users","find","u","authUser","newAuthUser","authError","createUser","email_confirm","user_metadata","first_name","last_name","created_by","userId","enterprise_admin","security_level","message","user","existingProfile","from","select","eq","single","updatedProfile","updateError","update","supabase_user_id","id","metadata","updated_by","last_admin_update","Date","toISOString","updated_at","action","profile","adminRole","newProfile","profileError","insert","role_id","is_active","is_verified","created_via","created_at","enforceRLS","auditLog","adminOverride","rls","invalidateUserCache","auth_id","name","user_roles","role_name","rls_enabled","permissions_granted","timestamp","console","instructions","method","required_fields","optional_fields","security_key","password_requirements","min_length","must_contain","features"],"mappings":"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"}