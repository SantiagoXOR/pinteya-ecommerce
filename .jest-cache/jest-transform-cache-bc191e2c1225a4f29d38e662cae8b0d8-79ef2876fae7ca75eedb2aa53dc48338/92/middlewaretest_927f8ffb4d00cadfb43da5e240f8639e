983b6d2977e314133ff1120532962f6d
// ===================================
// PINTEYA E-COMMERCE - MIDDLEWARE CONSERVADOR (VERSIÓN ESTABLE)
// ===================================
// Implementación conservadora que mantiene la estructura original
// pero con mejoras mínimas y compatibilidad garantizada
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    config: function() {
        return config;
    },
    // ===================================
    // MIDDLEWARE PRINCIPAL CONSERVADOR
    // ===================================
    default: function() {
        return _default;
    }
});
const _server = require("next/server");
const _server1 = require("@clerk/nextjs/server");
// ===================================
// DEFINICIÓN DE RUTAS
// ===================================
// Rutas que requieren autenticación admin
const isAdminRoute = (0, _server1.createRouteMatcher)([
    '/api/admin(.*)',
    '/admin(.*)'
]);
// Rutas públicas que NO requieren autenticación
const isPublicRoute = (0, _server1.createRouteMatcher)([
    '/',
    '/shop(.*)',
    '/search(.*)',
    '/product(.*)',
    '/category(.*)',
    '/about',
    '/contact',
    '/signin(.*)',
    '/signup(.*)',
    '/sso-callback(.*)',
    // APIs públicas
    '/api/products(.*)',
    '/api/categories(.*)',
    '/api/test(.*)',
    '/api/payments/create-preference',
    '/api/payments/webhook',
    '/api/payments/status',
    '/api/auth/webhook',
    '/api/webhooks(.*)',
    '/api/debug(.*)',
    '/api/analytics(.*)'
]);
// Rutas que deben ser completamente excluidas del middleware
const isExcludedRoute = (0, _server1.createRouteMatcher)([
    '/api/auth/webhook',
    '/api/webhooks(.*)',
    '/api/webhooks/clerk'
]);
const _default = (0, _server1.clerkMiddleware)(async (auth, request)=>{
    const { pathname } = request.nextUrl;
    // Redirección de /my-account a /admin (mantener compatibilidad)
    if (pathname.startsWith('/my-account')) {
        const adminUrl = new URL('/admin', request.url);
        return _server.NextResponse.redirect(adminUrl, {
            status: 302
        });
    }
    // Exclusión total para rutas que causan recursión
    if (isExcludedRoute(request)) {
        return _server.NextResponse.next();
    }
    // Skip inmediato para rutas estáticas (performance crítico)
    if (pathname.startsWith('/_next') || pathname.startsWith('/favicon') || pathname.includes('.') || pathname === '/robots.txt' || pathname === '/sitemap.xml' || pathname === '/_not-found') {
        return _server.NextResponse.next();
    }
    // Skip inmediato para webhooks (CRÍTICO para producción)
    if (pathname.startsWith('/api/webhooks/')) {
        return _server.NextResponse.next();
    }
    // ===================================
    // PROTECCIÓN DE RUTAS ADMIN (CONSERVADORA)
    // ===================================
    if (isAdminRoute(request)) {
        const { userId, sessionClaims, redirectToSignIn } = await auth();
        if (!userId) {
            return redirectToSignIn();
        }
        // Verificación robusta de roles con fallback a Clerk API
        const publicRole = sessionClaims?.publicMetadata?.role;
        const privateRole = sessionClaims?.privateMetadata?.role;
        let isAdmin = publicRole === 'admin' || privateRole === 'admin';
        // Si sessionClaims no tiene el rol, verificar directamente con Clerk
        if (!isAdmin) {
            try {
                const clerkClient = (0, _server1.createClerkClient)({
                    secretKey: process.env.CLERK_SECRET_KEY
                });
                const clerkUser = await clerkClient.users.getUser(userId);
                const userPublicRole = clerkUser.publicMetadata?.role;
                const userPrivateRole = clerkUser.privateMetadata?.role;
                isAdmin = userPublicRole === 'admin' || userPrivateRole === 'admin';
            } catch (error) {
                console.error(`[MIDDLEWARE] Error verificando con Clerk API:`, error);
            }
        }
        if (!isAdmin) {
            // Redirigir a homepage
            return _server.NextResponse.redirect(new URL('/', request.url));
        }
        return _server.NextResponse.next();
    }
    // ===================================
    // RUTAS PÚBLICAS Y OTRAS PROTEGIDAS
    // ===================================
    // Permitir rutas públicas sin verificación adicional
    if (isPublicRoute(request)) {
        return _server.NextResponse.next();
    }
    // Para otras rutas protegidas, verificar autenticación básica
    const { userId, redirectToSignIn } = await auth();
    if (!userId) {
        return redirectToSignIn();
    }
    return _server.NextResponse.next();
});
const config = {
    matcher: [
        // Incluir todas las rutas excepto archivos estáticos Y rutas excluidas
        '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)|api/auth/webhook|api/webhooks/clerk).*)',
        // Procesar rutas API EXCEPTO las que causan recursión
        '/(api|trpc)/((?!auth/webhook|webhooks/clerk).*)'
    ]
};

//# sourceMappingURL=data:application/json;base64,