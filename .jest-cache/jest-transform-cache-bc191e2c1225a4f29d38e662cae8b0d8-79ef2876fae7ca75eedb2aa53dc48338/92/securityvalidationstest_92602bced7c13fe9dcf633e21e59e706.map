{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security-validations.test.ts"],"sourcesContent":["/**\n * Tests para las validaciones de seguridad avanzadas\n * Verifica permisos granulares y contexto de seguridad\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\n\n// NextAuth se mockea automáticamente via moduleNameMapper\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      insert: jest.fn(() => ({ error: null })),\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          gte: jest.fn(() => ({\n            not: jest.fn(() => ({ data: [], error: null }))\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\nimport {\n  getPermissionsByRole,\n  hasPermission,\n  hasAnyPermission,\n  hasAllPermissions,\n  isAdmin,\n  isModerator,\n  getUserRole,\n  validateResourceAccess,\n  getUserPermissions\n} from '@/lib/auth/security-validations';\n\n// Mock NextAuth\nconst mockAuth = jest.fn();\njest.mock('@/auth', () => ({\n  auth: mockAuth\n}));\n\ndescribe('Validaciones de Seguridad', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getPermissionsByRole', () => {\n    it('debe retornar permisos completos para admin', () => {\n      const permissions = getPermissionsByRole('admin');\n\n      // Patrón 2: Expectativas específicas para la implementación real\n      expect(Array.isArray(permissions)).toBe(true);\n      expect(permissions).toContain('delete:products');\n      expect(permissions).toContain('write:users');\n      expect(permissions).toContain('admin:dashboard');\n    });\n\n    it('debe retornar permisos limitados para moderator', () => {\n      const permissions = getPermissionsByRole('moderator');\n\n      // Patrón 2: Expectativas específicas para la implementación real\n      expect(Array.isArray(permissions)).toBe(true);\n      expect(permissions).toContain('write:products');\n      expect(permissions).toContain('moderate:content');\n      expect(permissions).not.toContain('delete:users');\n    });\n\n    it('debe retornar permisos básicos para manager', () => {\n      const permissions = getPermissionsByRole('manager');\n      \n      expect(permissions.isAdmin).toBe(false);\n      expect(permissions.isModerator).toBe(false);\n      expect(permissions.canDeleteProducts).toBe(false);\n      expect(permissions.canAccessAdmin).toBe(true);\n      expect(permissions.canViewAnalytics).toBe(true);\n    });\n\n    it('debe retornar sin permisos para user', () => {\n      const permissions = getPermissionsByRole('user');\n      \n      expect(permissions.isAdmin).toBe(false);\n      expect(permissions.canAccessAdmin).toBe(false);\n      expect(permissions.canReadProducts).toBe(false);\n    });\n\n    it('debe retornar permisos de user para rol desconocido', () => {\n      const permissions = getPermissionsByRole('unknown_role');\n      \n      expect(permissions.isAdmin).toBe(false);\n      expect(permissions.canAccessAdmin).toBe(false);\n    });\n  });\n\n  describe('isValidAdminRole', () => {\n    it('debe validar roles administrativos', () => {\n      expect(isValidAdminRole('admin')).toBe(true);\n      expect(isValidAdminRole('moderator')).toBe(true);\n      expect(isValidAdminRole('manager')).toBe(true);\n    });\n\n    it('debe rechazar roles no administrativos', () => {\n      expect(isValidAdminRole('user')).toBe(false);\n      expect(isValidAdminRole('guest')).toBe(false);\n      expect(isValidAdminRole('')).toBe(false);\n    });\n  });\n\n  describe('hasPermission', () => {\n    it('debe verificar permisos individuales correctamente', () => {\n      const adminPermissions = getPermissionsByRole('admin');\n      const userPermissions = getPermissionsByRole('user');\n\n      expect(hasPermission(adminPermissions, 'canDeleteProducts')).toBe(true);\n      expect(hasPermission(userPermissions, 'canDeleteProducts')).toBe(false);\n    });\n  });\n\n  describe('hasAnyPermission', () => {\n    it('debe verificar que al menos un permiso esté presente', () => {\n      const moderatorPermissions = getPermissionsByRole('moderator');\n\n      expect(hasAnyPermission(moderatorPermissions, ['canDeleteProducts', 'canWriteProducts'])).toBe(true);\n      expect(hasAnyPermission(moderatorPermissions, ['canDeleteProducts', 'canManageUsers'])).toBe(false);\n    });\n  });\n\n  describe('hasAllPermissions', () => {\n    it('debe verificar que todos los permisos estén presentes', () => {\n      const adminPermissions = getPermissionsByRole('admin');\n      const moderatorPermissions = getPermissionsByRole('moderator');\n\n      expect(hasAllPermissions(adminPermissions, ['canReadProducts', 'canWriteProducts'])).toBe(true);\n      expect(hasAllPermissions(moderatorPermissions, ['canReadProducts', 'canDeleteProducts'])).toBe(false);\n    });\n  });\n\n  describe('getSecurityContext', () => {\n    it('debe obtener contexto de seguridad completo', async () => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          department: 'IT',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockImplementation((key) => {\n            if (key === 'x-forwarded-for') return '192.168.1.1';\n            if (key === 'user-agent') return 'Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      const context = await getSecurityContext('user_123', mockRequest);\n\n      expect(context).toBeDefined();\n      expect(context?.userId).toBe('user_123');\n      expect(context?.userRole).toBe('admin');\n      expect(context?.permissions.isAdmin).toBe(true);\n      expect(context?.metadata.emailVerified).toBe(true);\n      expect(context?.ipAddress).toBe('192.168.1.1');\n      expect(context?.userAgent).toBe('Test Browser');\n    });\n\n    it('debe manejar usuario no encontrado', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(null)\n        }\n      } as any);\n\n      const context = await getSecurityContext('user_not_found');\n\n      expect(context).toBeNull();\n    });\n\n    it('debe manejar errores de Clerk', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockRejectedValue(new Error('Clerk error'))\n        }\n      } as any);\n\n      const context = await getSecurityContext('user_error');\n\n      expect(context).toBeNull();\n    });\n  });\n\n  describe('validateSecurityContext', () => {\n    beforeEach(() => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n    });\n\n    it('debe validar contexto exitosamente para admin', async () => {\n      const result = await validateSecurityContext(\n        'user_123',\n        'PRODUCT_DELETE',\n        ['canDeleteProducts']\n      );\n\n      expect(result.valid).toBe(true);\n      expect(result.context).toBeDefined();\n      expect(result.context?.permissions.canDeleteProducts).toBe(true);\n    });\n\n    it('debe rechazar permisos insuficientes', async () => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'user',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n\n      const result = await validateSecurityContext(\n        'user_123',\n        'PRODUCT_DELETE',\n        ['canDeleteProducts']\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.code).toBe('INSUFFICIENT_PERMISSIONS');\n      expect(result.severity).toBe('high');\n    });\n\n    it('debe rechazar usuario inactivo', async () => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          isActive: false\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n\n      const result = await validateSecurityContext(\n        'user_123',\n        'PRODUCT_READ',\n        ['canReadProducts']\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.code).toBe('USER_INACTIVE');\n      expect(result.severity).toBe('medium');\n    });\n  });\n\n  describe('validateProductPermissions', () => {\n    beforeEach(() => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n    });\n\n    it('debe validar permisos de lectura', async () => {\n      const result = await validateProductPermissions('user_123', 'read');\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('debe validar permisos de creación', async () => {\n      const result = await validateProductPermissions('user_123', 'create');\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('debe validar permisos de eliminación', async () => {\n      const result = await validateProductPermissions('user_123', 'delete');\n\n      expect(result.valid).toBe(true);\n    });\n  });\n\n  describe('withSecurityValidation wrapper', () => {\n    it('debe crear wrapper funcional', () => {\n      const mockHandler = jest.fn();\n      const wrappedHandler = withSecurityValidation(['canReadProducts'], 'PRODUCT_READ')(mockHandler);\n\n      expect(typeof wrappedHandler).toBe('function');\n    });\n\n    it('debe rechazar request sin userId', async () => {\n      const mockHandler = jest.fn();\n      const wrappedHandler = withSecurityValidation(['canReadProducts'], 'PRODUCT_READ')(mockHandler);\n\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as any;\n\n      const mockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn()\n      };\n\n      await wrappedHandler(mockRequest, mockResponse);\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        error: 'Usuario no autenticado',\n        code: 'AUTH_REQUIRED'\n      });\n    });\n  });\n});\n"],"names":["jest","mock","supabaseAdmin","from","fn","insert","error","select","eq","gte","not","data","auth","mockAuth","describe","beforeEach","clearAllMocks","it","permissions","getPermissionsByRole","expect","Array","isArray","toBe","toContain","isAdmin","isModerator","canDeleteProducts","canAccessAdmin","canViewAnalytics","canReadProducts","isValidAdminRole","adminPermissions","userPermissions","hasPermission","moderatorPermissions","hasAnyPermission","hasAllPermissions","mockUser","id","publicMetadata","role","department","isActive","emailAddresses","verification","status","mockClerkClient","mockReturnValue","users","getUser","mockResolvedValue","mockRequest","headers","get","mockImplementation","key","context","getSecurityContext","toBeDefined","userId","userRole","metadata","emailVerified","ipAddress","userAgent","toBeNull","mockRejectedValue","Error","result","validateSecurityContext","valid","code","severity","validateProductPermissions","mockHandler","wrappedHandler","withSecurityValidation","mockResponse","mockReturnThis","json","toHaveBeenCalledWith","success"],"mappings":"AAAA;;;CAGC;AAKD,0DAA0D;AAE1D,mBAAmB;AACnBA,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCC,eAAe;YACbC,MAAMH,KAAKI,EAAE,CAAC,IAAO,CAAA;oBACnBC,QAAQL,KAAKI,EAAE,CAAC,IAAO,CAAA;4BAAEE,OAAO;wBAAK,CAAA;oBACrCC,QAAQP,KAAKI,EAAE,CAAC,IAAO,CAAA;4BACrBI,IAAIR,KAAKI,EAAE,CAAC,IAAO,CAAA;oCACjBK,KAAKT,KAAKI,EAAE,CAAC,IAAO,CAAA;4CAClBM,KAAKV,KAAKI,EAAE,CAAC,IAAO,CAAA;oDAAEO,MAAM,EAAE;oDAAEL,OAAO;gDAAK,CAAA;wCAC9C,CAAA;gCACF,CAAA;wBACF,CAAA;gBACF,CAAA;QACF;IACF,CAAA;AAgBAN,KAAKC,IAAI,CAAC,UAAU,IAAO,CAAA;QACzBW,MAAMC;IACR,CAAA;;;;qCANO;AAEP,gBAAgB;AAChB,MAAMA,WAAWb,KAAKI,EAAE;AAKxBU,SAAS,6BAA6B;IACpCC,WAAW;QACTf,KAAKgB,aAAa;IACpB;IAEAF,SAAS,wBAAwB;QAC/BG,GAAG,+CAA+C;YAChD,MAAMC,cAAcC,IAAAA,yCAAoB,EAAC;YAEzC,iEAAiE;YACjEC,OAAOC,MAAMC,OAAO,CAACJ,cAAcK,IAAI,CAAC;YACxCH,OAAOF,aAAaM,SAAS,CAAC;YAC9BJ,OAAOF,aAAaM,SAAS,CAAC;YAC9BJ,OAAOF,aAAaM,SAAS,CAAC;QAChC;QAEAP,GAAG,mDAAmD;YACpD,MAAMC,cAAcC,IAAAA,yCAAoB,EAAC;YAEzC,iEAAiE;YACjEC,OAAOC,MAAMC,OAAO,CAACJ,cAAcK,IAAI,CAAC;YACxCH,OAAOF,aAAaM,SAAS,CAAC;YAC9BJ,OAAOF,aAAaM,SAAS,CAAC;YAC9BJ,OAAOF,aAAaR,GAAG,CAACc,SAAS,CAAC;QACpC;QAEAP,GAAG,+CAA+C;YAChD,MAAMC,cAAcC,IAAAA,yCAAoB,EAAC;YAEzCC,OAAOF,YAAYO,OAAO,EAAEF,IAAI,CAAC;YACjCH,OAAOF,YAAYQ,WAAW,EAAEH,IAAI,CAAC;YACrCH,OAAOF,YAAYS,iBAAiB,EAAEJ,IAAI,CAAC;YAC3CH,OAAOF,YAAYU,cAAc,EAAEL,IAAI,CAAC;YACxCH,OAAOF,YAAYW,gBAAgB,EAAEN,IAAI,CAAC;QAC5C;QAEAN,GAAG,wCAAwC;YACzC,MAAMC,cAAcC,IAAAA,yCAAoB,EAAC;YAEzCC,OAAOF,YAAYO,OAAO,EAAEF,IAAI,CAAC;YACjCH,OAAOF,YAAYU,cAAc,EAAEL,IAAI,CAAC;YACxCH,OAAOF,YAAYY,eAAe,EAAEP,IAAI,CAAC;QAC3C;QAEAN,GAAG,uDAAuD;YACxD,MAAMC,cAAcC,IAAAA,yCAAoB,EAAC;YAEzCC,OAAOF,YAAYO,OAAO,EAAEF,IAAI,CAAC;YACjCH,OAAOF,YAAYU,cAAc,EAAEL,IAAI,CAAC;QAC1C;IACF;IAEAT,SAAS,oBAAoB;QAC3BG,GAAG,sCAAsC;YACvCG,OAAOW,iBAAiB,UAAUR,IAAI,CAAC;YACvCH,OAAOW,iBAAiB,cAAcR,IAAI,CAAC;YAC3CH,OAAOW,iBAAiB,YAAYR,IAAI,CAAC;QAC3C;QAEAN,GAAG,0CAA0C;YAC3CG,OAAOW,iBAAiB,SAASR,IAAI,CAAC;YACtCH,OAAOW,iBAAiB,UAAUR,IAAI,CAAC;YACvCH,OAAOW,iBAAiB,KAAKR,IAAI,CAAC;QACpC;IACF;IAEAT,SAAS,iBAAiB;QACxBG,GAAG,sDAAsD;YACvD,MAAMe,mBAAmBb,IAAAA,yCAAoB,EAAC;YAC9C,MAAMc,kBAAkBd,IAAAA,yCAAoB,EAAC;YAE7CC,OAAOc,IAAAA,kCAAa,EAACF,kBAAkB,sBAAsBT,IAAI,CAAC;YAClEH,OAAOc,IAAAA,kCAAa,EAACD,iBAAiB,sBAAsBV,IAAI,CAAC;QACnE;IACF;IAEAT,SAAS,oBAAoB;QAC3BG,GAAG,wDAAwD;YACzD,MAAMkB,uBAAuBhB,IAAAA,yCAAoB,EAAC;YAElDC,OAAOgB,IAAAA,qCAAgB,EAACD,sBAAsB;gBAAC;gBAAqB;aAAmB,GAAGZ,IAAI,CAAC;YAC/FH,OAAOgB,IAAAA,qCAAgB,EAACD,sBAAsB;gBAAC;gBAAqB;aAAiB,GAAGZ,IAAI,CAAC;QAC/F;IACF;IAEAT,SAAS,qBAAqB;QAC5BG,GAAG,yDAAyD;YAC1D,MAAMe,mBAAmBb,IAAAA,yCAAoB,EAAC;YAC9C,MAAMgB,uBAAuBhB,IAAAA,yCAAoB,EAAC;YAElDC,OAAOiB,IAAAA,sCAAiB,EAACL,kBAAkB;gBAAC;gBAAmB;aAAmB,GAAGT,IAAI,CAAC;YAC1FH,OAAOiB,IAAAA,sCAAiB,EAACF,sBAAsB;gBAAC;gBAAmB;aAAoB,GAAGZ,IAAI,CAAC;QACjG;IACF;IAEAT,SAAS,sBAAsB;QAC7BG,GAAG,+CAA+C;YAChD,MAAMqB,WAAW;gBACfC,IAAI;gBACJC,gBAAgB;oBACdC,MAAM;oBACNC,YAAY;oBACZC,UAAU;gBACZ;gBACAC,gBAAgB;oBAAC;wBACfC,cAAc;4BAAEC,QAAQ;wBAAW;oBACrC;iBAAE;YACJ;YAEAC,gBAAgBC,eAAe,CAAC;gBAC9BC,OAAO;oBACLC,SAASlD,KAAKI,EAAE,GAAG+C,iBAAiB,CAACb;gBACvC;YACF;YAEA,MAAMc,cAAc;gBAClBC,SAAS;oBACPC,KAAKtD,KAAKI,EAAE,GAAGmD,kBAAkB,CAAC,CAACC;wBACjC,IAAIA,QAAQ,mBAAmB,OAAO;wBACtC,IAAIA,QAAQ,cAAc,OAAO;wBACjC,OAAO;oBACT;gBACF;YACF;YAEA,MAAMC,UAAU,MAAMC,mBAAmB,YAAYN;YAErDhC,OAAOqC,SAASE,WAAW;YAC3BvC,OAAOqC,SAASG,QAAQrC,IAAI,CAAC;YAC7BH,OAAOqC,SAASI,UAAUtC,IAAI,CAAC;YAC/BH,OAAOqC,SAASvC,YAAYO,SAASF,IAAI,CAAC;YAC1CH,OAAOqC,SAASK,SAASC,eAAexC,IAAI,CAAC;YAC7CH,OAAOqC,SAASO,WAAWzC,IAAI,CAAC;YAChCH,OAAOqC,SAASQ,WAAW1C,IAAI,CAAC;QAClC;QAEAN,GAAG,sCAAsC;YACvC8B,gBAAgBC,eAAe,CAAC;gBAC9BC,OAAO;oBACLC,SAASlD,KAAKI,EAAE,GAAG+C,iBAAiB,CAAC;gBACvC;YACF;YAEA,MAAMM,UAAU,MAAMC,mBAAmB;YAEzCtC,OAAOqC,SAASS,QAAQ;QAC1B;QAEAjD,GAAG,iCAAiC;YAClC8B,gBAAgBC,eAAe,CAAC;gBAC9BC,OAAO;oBACLC,SAASlD,KAAKI,EAAE,GAAG+D,iBAAiB,CAAC,IAAIC,MAAM;gBACjD;YACF;YAEA,MAAMX,UAAU,MAAMC,mBAAmB;YAEzCtC,OAAOqC,SAASS,QAAQ;QAC1B;IACF;IAEApD,SAAS,2BAA2B;QAClCC,WAAW;YACT,MAAMuB,WAAW;gBACfC,IAAI;gBACJC,gBAAgB;oBACdC,MAAM;oBACNE,UAAU;gBACZ;gBACAC,gBAAgB;oBAAC;wBACfC,cAAc;4BAAEC,QAAQ;wBAAW;oBACrC;iBAAE;YACJ;YAEAC,gBAAgBC,eAAe,CAAC;gBAC9BC,OAAO;oBACLC,SAASlD,KAAKI,EAAE,GAAG+C,iBAAiB,CAACb;gBACvC;YACF;QACF;QAEArB,GAAG,iDAAiD;YAClD,MAAMoD,SAAS,MAAMC,wBACnB,YACA,kBACA;gBAAC;aAAoB;YAGvBlD,OAAOiD,OAAOE,KAAK,EAAEhD,IAAI,CAAC;YAC1BH,OAAOiD,OAAOZ,OAAO,EAAEE,WAAW;YAClCvC,OAAOiD,OAAOZ,OAAO,EAAEvC,YAAYS,mBAAmBJ,IAAI,CAAC;QAC7D;QAEAN,GAAG,wCAAwC;YACzC,MAAMqB,WAAW;gBACfC,IAAI;gBACJC,gBAAgB;oBACdC,MAAM;oBACNE,UAAU;gBACZ;gBACAC,gBAAgB;oBAAC;wBACfC,cAAc;4BAAEC,QAAQ;wBAAW;oBACrC;iBAAE;YACJ;YAEAC,gBAAgBC,eAAe,CAAC;gBAC9BC,OAAO;oBACLC,SAASlD,KAAKI,EAAE,GAAG+C,iBAAiB,CAACb;gBACvC;YACF;YAEA,MAAM+B,SAAS,MAAMC,wBACnB,YACA,kBACA;gBAAC;aAAoB;YAGvBlD,OAAOiD,OAAOE,KAAK,EAAEhD,IAAI,CAAC;YAC1BH,OAAOiD,OAAOG,IAAI,EAAEjD,IAAI,CAAC;YACzBH,OAAOiD,OAAOI,QAAQ,EAAElD,IAAI,CAAC;QAC/B;QAEAN,GAAG,kCAAkC;YACnC,MAAMqB,WAAW;gBACfC,IAAI;gBACJC,gBAAgB;oBACdC,MAAM;oBACNE,UAAU;gBACZ;gBACAC,gBAAgB;oBAAC;wBACfC,cAAc;4BAAEC,QAAQ;wBAAW;oBACrC;iBAAE;YACJ;YAEAC,gBAAgBC,eAAe,CAAC;gBAC9BC,OAAO;oBACLC,SAASlD,KAAKI,EAAE,GAAG+C,iBAAiB,CAACb;gBACvC;YACF;YAEA,MAAM+B,SAAS,MAAMC,wBACnB,YACA,gBACA;gBAAC;aAAkB;YAGrBlD,OAAOiD,OAAOE,KAAK,EAAEhD,IAAI,CAAC;YAC1BH,OAAOiD,OAAOG,IAAI,EAAEjD,IAAI,CAAC;YACzBH,OAAOiD,OAAOI,QAAQ,EAAElD,IAAI,CAAC;QAC/B;IACF;IAEAT,SAAS,8BAA8B;QACrCC,WAAW;YACT,MAAMuB,WAAW;gBACfC,IAAI;gBACJC,gBAAgB;oBACdC,MAAM;oBACNE,UAAU;gBACZ;gBACAC,gBAAgB;oBAAC;wBACfC,cAAc;4BAAEC,QAAQ;wBAAW;oBACrC;iBAAE;YACJ;YAEAC,gBAAgBC,eAAe,CAAC;gBAC9BC,OAAO;oBACLC,SAASlD,KAAKI,EAAE,GAAG+C,iBAAiB,CAACb;gBACvC;YACF;QACF;QAEArB,GAAG,oCAAoC;YACrC,MAAMoD,SAAS,MAAMK,2BAA2B,YAAY;YAE5DtD,OAAOiD,OAAOE,KAAK,EAAEhD,IAAI,CAAC;QAC5B;QAEAN,GAAG,qCAAqC;YACtC,MAAMoD,SAAS,MAAMK,2BAA2B,YAAY;YAE5DtD,OAAOiD,OAAOE,KAAK,EAAEhD,IAAI,CAAC;QAC5B;QAEAN,GAAG,wCAAwC;YACzC,MAAMoD,SAAS,MAAMK,2BAA2B,YAAY;YAE5DtD,OAAOiD,OAAOE,KAAK,EAAEhD,IAAI,CAAC;QAC5B;IACF;IAEAT,SAAS,kCAAkC;QACzCG,GAAG,gCAAgC;YACjC,MAAM0D,cAAc3E,KAAKI,EAAE;YAC3B,MAAMwE,iBAAiBC,uBAAuB;gBAAC;aAAkB,EAAE,gBAAgBF;YAEnFvD,OAAO,OAAOwD,gBAAgBrD,IAAI,CAAC;QACrC;QAEAN,GAAG,oCAAoC;YACrC,MAAM0D,cAAc3E,KAAKI,EAAE;YAC3B,MAAMwE,iBAAiBC,uBAAuB;gBAAC;aAAkB,EAAE,gBAAgBF;YAEnF,MAAMvB,cAAc;gBAClBC,SAAS;oBACPC,KAAKtD,KAAKI,EAAE,GAAG4C,eAAe,CAAC;gBACjC;YACF;YAEA,MAAM8B,eAAe;gBACnBhC,QAAQ9C,KAAKI,EAAE,GAAG2E,cAAc;gBAChCC,MAAMhF,KAAKI,EAAE;YACf;YAEA,MAAMwE,eAAexB,aAAa0B;YAElC1D,OAAO0D,aAAahC,MAAM,EAAEmC,oBAAoB,CAAC;YACjD7D,OAAO0D,aAAaE,IAAI,EAAEC,oBAAoB,CAAC;gBAC7CC,SAAS;gBACT5E,OAAO;gBACPkE,MAAM;YACR;QACF;IACF;AACF"}