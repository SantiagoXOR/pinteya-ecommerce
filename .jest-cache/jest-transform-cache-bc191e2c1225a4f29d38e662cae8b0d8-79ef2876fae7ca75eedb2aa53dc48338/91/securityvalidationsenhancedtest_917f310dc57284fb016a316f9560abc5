6007f4526937b7bdd2bec77dba0c0ed2
/**
 * Tests para las validaciones de seguridad mejoradas
 * Verifica JWT validation, CSRF protection, Rate limiting
 */ // NextAuth se mockea automáticamente
"use strict";
jest.mock('@/auth', ()=>({
        auth: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jwtvalidation = require("../lib/auth/jwt-validation");
const _csrfprotection = require("../lib/auth/csrf-protection");
const _ratelimiting = require("../lib/auth/rate-limiting");
const _auth = require("../auth");
describe('Validaciones de Seguridad Mejoradas', ()=>{
    let mockAuth;
    beforeEach(()=>{
        mockAuth = _auth.auth;
        mockAuth = _auth.auth;
        jest.clearAllMocks();
    });
    describe('Validación JWT', ()=>{
        it('debe validar token JWT válido', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoiYWRtaW4ifX0.signature')
            });
            const result = await (0, _jwtvalidation.validateJWTIntegrity)(mockRequest);
            expect(result.valid).toBe(true);
            expect(result.payload).toBeDefined();
            expect(result.details?.subject).toBe('user_123');
        });
        it('debe rechazar token JWT inválido', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                getToken: jest.fn().mockResolvedValue('invalid_token')
            });
            const result = await (0, _jwtvalidation.validateJWTIntegrity)(mockRequest);
            expect(result.valid).toBe(false);
            expect(result.error).toContain('Formato de token JWT inválido');
            expect(result.code).toBe('INVALID_TOKEN_FORMAT');
        });
        it('debe validar permisos en JWT', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoiYWRtaW4iLCJwZXJtaXNzaW9ucyI6WyJhZG1pbl9hY2Nlc3MiXX19.signature')
            });
            const result = await (0, _jwtvalidation.validateJWTPermissions)('admin', [
                'admin_access'
            ], mockRequest);
            expect(result.valid).toBe(true);
            expect(result.payload?.metadata?.role).toBe('admin');
        });
        it('debe rechazar permisos insuficientes en JWT', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoidXNlciJ9fQ.signature')
            });
            const result = await (0, _jwtvalidation.validateJWTPermissions)('admin', [
                'admin_access'
            ], mockRequest);
            expect(result.valid).toBe(false);
            expect(result.error).toContain('Rol requerido: admin');
            expect(result.code).toBe('INSUFFICIENT_ROLE');
        });
    });
    describe('Protección CSRF', ()=>{
        it('debe permitir requests GET sin validación estricta', async ()=>{
            const mockRequest = {
                method: 'GET',
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';
                        return null;
                    })
                }
            };
            const result = await (0, _csrfprotection.validateRequestOrigin)(mockRequest);
            expect(result.valid).toBe(true);
        });
        it('debe validar origen para requests POST en desarrollo', async ()=>{
            // Mock NODE_ENV para desarrollo para que sea menos estricto
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            const mockRequest = {
                method: 'GET',
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';
                        return null;
                    })
                }
            };
            const result = await (0, _csrfprotection.validateRequestOrigin)(mockRequest);
            expect(result.valid).toBe(true);
            // Restaurar NODE_ENV
            process.env.NODE_ENV = originalEnv;
        });
        it('debe rechazar origen no permitido', async ()=>{
            const mockRequest = {
                method: 'POST',
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'origin') return 'http://malicious-site.com';
                        if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';
                        return null;
                    })
                }
            };
            const result = await (0, _csrfprotection.validateRequestOrigin)(mockRequest);
            expect(result.valid).toBe(false);
            expect(result.error).toContain('Origen no permitido');
            expect(result.code).toBe('INVALID_ORIGIN');
        });
        it('debe detectar User-Agent sospechoso', async ()=>{
            // Forzar modo producción para validación estricta
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';
            const mockRequest = {
                method: 'POST',
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'origin') return process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
                        if (header === 'referer') return process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
                        if (header === 'user-agent') return 'curl/7.68.0';
                        return null;
                    })
                }
            };
            const result = await (0, _csrfprotection.validateRequestOrigin)(mockRequest);
            expect(result.valid).toBe(false);
            expect(result.error).toContain('User-Agent sospechoso');
            expect(result.code).toBe('SUSPICIOUS_USER_AGENT');
            // Restaurar NODE_ENV
            process.env.NODE_ENV = originalEnv;
        });
    });
    describe('Rate Limiting', ()=>{
        it('debe permitir requests dentro del límite', async ()=>{
            const mockRequest = {
                method: 'GET',
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'x-forwarded-for') return '192.168.1.1';
                        if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';
                        return null;
                    })
                }
            };
            const result = await (0, _ratelimiting.checkRateLimit)(mockRequest, _ratelimiting.RATE_LIMIT_CONFIGS.general, 'test');
            expect(result.allowed).toBe(true);
            expect(result.remaining).toBeLessThan(result.limit);
        });
        it('debe rechazar requests que excedan el límite', async ()=>{
            const mockRequest = {
                method: 'POST',
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'x-forwarded-for') return '192.168.1.2';
                        if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';
                        return null;
                    })
                }
            };
            // Simular múltiples requests
            const config = {
                windowMs: 60000,
                maxRequests: 2,
                message: 'Rate limit exceeded'
            };
            // Primera request - debe pasar
            const result1 = await (0, _ratelimiting.checkRateLimit)(mockRequest, config, 'test_limit');
            expect(result1.allowed).toBe(true);
            // Segunda request - debe pasar
            const result2 = await (0, _ratelimiting.checkRateLimit)(mockRequest, config, 'test_limit');
            expect(result2.allowed).toBe(true);
            // Tercera request - debe fallar
            const result3 = await (0, _ratelimiting.checkRateLimit)(mockRequest, config, 'test_limit');
            expect(result3.allowed).toBe(false);
            expect(result3.error).toBe('Rate limit exceeded');
            expect(result3.code).toBe('RATE_LIMIT_EXCEEDED');
        });
        it('debe proporcionar información de rate limiting', async ()=>{
            const mockRequest = {
                method: 'GET',
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'x-forwarded-for') return '192.168.1.3';
                        if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';
                        return null;
                    })
                }
            };
            const result = await (0, _ratelimiting.checkRateLimit)(mockRequest, _ratelimiting.RATE_LIMIT_CONFIGS.admin, 'test_info');
            expect(result).toHaveProperty('limit');
            expect(result).toHaveProperty('remaining');
            expect(result).toHaveProperty('resetTime');
            expect(typeof result.limit).toBe('number');
            expect(typeof result.remaining).toBe('number');
            expect(typeof result.resetTime).toBe('number');
        });
    });
    describe('Integración de validaciones', ()=>{
        it('debe combinar todas las validaciones correctamente', async ()=>{
            // Configurar entorno de desarrollo para tests
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            // Test que verifica que todas las validaciones pueden trabajar juntas
            const mockRequest = {
                method: 'GET',
                query: {},
                headers: {
                    get: jest.fn().mockImplementation((header)=>{
                        if (header === 'user-agent') return 'Mozilla/5.0 Test Browser';
                        if (header === 'x-forwarded-for') return '192.168.1.4';
                        return null;
                    })
                }
            };
            mockAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                getToken: jest.fn().mockResolvedValue('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzEyMyIsImlzcyI6ImNsZXJrIiwiYXVkIjoidGVzdCIsImV4cCI6OTk5OTk5OTk5OSwiaWF0IjoxNjQwOTk1MjAwLCJtZXRhZGF0YSI6eyJyb2xlIjoiYWRtaW4ifX0.signature')
            });
            // Validar JWT
            const jwtResult = await (0, _jwtvalidation.validateJWTIntegrity)(mockRequest);
            expect(jwtResult.valid).toBe(true);
            // Validar CSRF (debe pasar para GET)
            const csrfResult = await (0, _csrfprotection.validateRequestOrigin)(mockRequest);
            expect(csrfResult.valid).toBe(true);
            // Validar Rate Limiting
            const rateLimitResult = await (0, _ratelimiting.checkRateLimit)(mockRequest, _ratelimiting.RATE_LIMIT_CONFIGS.general, 'integration_test_unique');
            expect(rateLimitResult.allowed).toBe(true);
            // Todas las validaciones deben pasar
            expect(jwtResult.valid && csrfResult.valid && rateLimitResult.allowed).toBe(true);
            // Restaurar NODE_ENV
            process.env.NODE_ENV = originalEnv;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,