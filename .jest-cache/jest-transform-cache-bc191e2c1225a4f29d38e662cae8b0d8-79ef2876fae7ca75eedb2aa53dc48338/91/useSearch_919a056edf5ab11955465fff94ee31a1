f8af32fcb5927bb0fe523de055c7acd3
// ===================================
// HOOK: useSearch - Sistema de búsqueda centralizado
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useSearch () {
        return useSearch;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _navigation = require("next/navigation");
const _usedebounce = require("use-debounce");
const _products = require("../lib/api/products");
const _useSearchErrorHandler = require("./useSearchErrorHandler");
const _useSearchToast = require("./useSearchToast");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// ===================================
// BÚSQUEDAS TRENDING POR DEFECTO
// ===================================
const defaultTrendingSearches = [
    {
        id: "trending-1",
        type: "trending",
        title: "Pintura látex",
        href: "/search?q=pintura+latex"
    },
    {
        id: "trending-2",
        type: "trending",
        title: "Sherwin Williams",
        href: "/search?q=sherwin+williams"
    },
    {
        id: "trending-3",
        type: "trending",
        title: "Rodillos premium",
        href: "/search?q=rodillos+premium"
    },
    {
        id: "trending-4",
        type: "trending",
        title: "Pinceles",
        href: "/search?q=pinceles"
    }
];
function useSearch(options = {}) {
    const { debounceMs = 150, maxSuggestions = 8, searchLimit = 12, saveRecentSearches = true, onSearch, onSuggestionSelect } = options;
    const router = (0, _navigation.useRouter)();
    const debounceRef = (0, _react.useRef)();
    const safetyTimeoutRef = (0, _react.useRef)(); // Timeout de seguridad para evitar loading permanente
    const optionsRef = (0, _react.useRef)(options); // Ref para opciones estables
    const recentSearchesRef = (0, _react.useRef)([]); // Ref para búsquedas recientes
    // Hooks para manejo de errores y toast notifications
    const errorHandler = (0, _useSearchErrorHandler.useSearchErrorHandler)({
        onError: (error)=>{
            console.error('Error de búsqueda:', error);
        },
        onRetrySuccess: ()=>{
            toastHandler.showRetrySuccessToast();
        },
        onRetryFailed: (error, attempts)=>{
            toastHandler.showRetryFailedToast(attempts);
        }
    });
    const toastHandler = (0, _useSearchToast.useSearchToast)({
        defaultDuration: 4000,
        maxToasts: 2
    });
    // Actualizar ref cuando cambien las opciones
    optionsRef.current = options;
    // Estado principal
    const [state, setState] = (0, _react.useState)({
        query: '',
        results: [],
        suggestions: [],
        isLoading: false,
        error: null,
        hasSearched: false
    });
    const [recentSearches, setRecentSearches] = (0, _react.useState)([]);
    // Sincronizar referencia con estado para evitar dependencias en useCallback
    _react.default.useEffect(()=>{
        recentSearchesRef.current = recentSearches;
    }, [
        recentSearches
    ]);
    // ===================================
    // FUNCIONES AUXILIARES SIMPLIFICADAS
    // ===================================
    // ===================================
    // FUNCIONES PRINCIPALES CON USE-DEBOUNCE
    // ===================================
    /**
   * Función de búsqueda interna optimizada
   */ const performSearch = (0, _react.useCallback)(async (searchQuery)=>{
        // Limpiar timeout de seguridad anterior
        if (safetyTimeoutRef.current) {
            clearTimeout(safetyTimeoutRef.current);
        }
        // Si la query está vacía, mostrar sugerencias por defecto
        if (!searchQuery.trim()) {
            const defaultSuggestions = [
                ...defaultTrendingSearches.slice(0, 4),
                ...recentSearchesRef.current.slice(0, 3).map((search, index)=>({
                        id: `recent-${index}`,
                        type: 'recent',
                        title: search,
                        href: `/search?q=${encodeURIComponent(search)}`
                    }))
            ].slice(0, maxSuggestions);
            setState((prev)=>({
                    ...prev,
                    query: searchQuery,
                    suggestions: defaultSuggestions,
                    isLoading: false
                }));
            return;
        }
        // Timeout de seguridad para evitar loading permanente (5 segundos)
        safetyTimeoutRef.current = setTimeout(()=>{
            setState((prev)=>({
                    ...prev,
                    isLoading: false,
                    error: 'Tiempo de espera agotado. Intenta nuevamente.'
                }));
        }, 5000);
        // Ejecutar búsqueda directamente (el debounce se maneja en searchWithDebounce)
        try {
            const response = await (0, _products.searchProducts)(searchQuery, maxSuggestions);
            // Limpiar timeout de seguridad ya que la API respondió
            if (safetyTimeoutRef.current) {
                clearTimeout(safetyTimeoutRef.current);
            }
            if (response.success && response.data && Array.isArray(response.data)) {
                const productSuggestions = response.data.map((product)=>({
                        id: `product-${product.id}`,
                        type: 'product',
                        title: product.name,
                        subtitle: product.category?.name || 'Sin categoría',
                        image: product.images?.previews?.[0] || '/images/products/placeholder.jpg',
                        badge: product.stock > 0 ? 'En stock' : 'Sin stock',
                        href: `/shop-details/${product.id}`
                    }));
                setState((prev)=>({
                        ...prev,
                        query: searchQuery,
                        suggestions: productSuggestions,
                        isLoading: false,
                        error: null
                    }));
            } else {
                setState((prev)=>({
                        ...prev,
                        query: searchQuery,
                        suggestions: [],
                        isLoading: false,
                        error: response.error || 'No se encontraron resultados'
                    }));
            }
        } catch (error) {
            console.error('❌ useSearch: Error en búsqueda:', error);
            // Limpiar timeout de seguridad
            if (safetyTimeoutRef.current) {
                clearTimeout(safetyTimeoutRef.current);
            }
            setState((prev)=>({
                    ...prev,
                    query: searchQuery,
                    suggestions: [],
                    isLoading: false,
                    error: 'Error en la búsqueda. Intenta nuevamente.'
                }));
        }
    }, [
        maxSuggestions
    ]); // Solo maxSuggestions es necesario como dependencia
    /**
   * Función de búsqueda con debounce optimizado usando use-debounce
   */ const searchWithDebounce = (0, _usedebounce.useDebouncedCallback)((searchQuery)=>{
        console.log('🔍 useSearch: searchWithDebounce (use-debounce) llamado con:', searchQuery);
        // Actualizar estado de loading inmediatamente
        setState((prev)=>({
                ...prev,
                isLoading: !!searchQuery.trim(),
                error: null
            }));
        // Ejecutar búsqueda
        performSearch(searchQuery);
    }, debounceMs, {
        maxWait: 2000,
        leading: false,
        trailing: true
    });
    /**
   * Ejecuta una búsqueda completa y navega a resultados
   */ const executeSearch = (0, _react.useCallback)(async (searchQuery, category)=>{
        if (!searchQuery.trim()) return;
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true,
                    error: null
                }));
            // Guardar en historial
            if (saveRecentSearches && searchQuery.trim()) {
                const updated = [
                    searchQuery.trim(),
                    ...recentSearchesRef.current.filter((s)=>s !== searchQuery.trim())
                ].slice(0, 5);
                setRecentSearches(updated);
                try {
                    localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));
                } catch (error) {
                    console.warn('Error guardando búsqueda reciente:', error);
                }
            }
            // Realizar búsqueda con manejo robusto de errores
            const response = await errorHandler.executeWithRetry(()=>(0, _products.searchProducts)(searchQuery.trim(), searchLimit), `búsqueda de "${searchQuery.trim()}"`);
            if (response.success && response.data) {
                const resultCount = response.data.length;
                setState((prev)=>({
                        ...prev,
                        results: response.data || [],
                        isLoading: false,
                        hasSearched: true,
                        error: null
                    }));
                // Limpiar errores previos
                errorHandler.clearError();
                // Mostrar toast de éxito si hay resultados
                if (resultCount > 0) {
                    toastHandler.showSuccessToast(searchQuery.trim(), resultCount);
                } else {
                    toastHandler.showNoResultsToast(searchQuery.trim());
                }
                // Callback personalizado
                optionsRef.current.onSearch?.(searchQuery.trim(), response.data || []);
                // Navegar a resultados
                const searchParams = new URLSearchParams();
                searchParams.set('q', searchQuery.trim());
                if (category) {
                    searchParams.set('category', category);
                }
                router.push(`/search?${searchParams.toString()}`);
            } else {
                const errorMessage = response.error || 'No se encontraron resultados';
                setState((prev)=>({
                        ...prev,
                        results: [],
                        isLoading: false,
                        hasSearched: true,
                        error: errorMessage
                    }));
                // Mostrar toast de advertencia para respuestas sin éxito
                toastHandler.showWarningToast('Búsqueda sin resultados', errorMessage);
            }
        } catch (error) {
            console.error('❌ Error ejecutando búsqueda:', error);
            // Manejar error con el error handler
            const searchError = errorHandler.handleError(error);
            setState((prev)=>({
                    ...prev,
                    results: [],
                    isLoading: false,
                    hasSearched: true,
                    error: searchError.message
                }));
            // Mostrar toast de error
            toastHandler.showErrorToast(searchError, errorHandler.retryCount, ()=>{
                executeSearch(searchQuery.trim(), category);
            });
        }
    }, [
        searchLimit,
        saveRecentSearches,
        router,
        errorHandler,
        toastHandler
    ]); // Remover recentSearches de dependencias para evitar bucle infinito
    /**
   * Maneja la selección de una sugerencia
   */ const selectSuggestion = (0, _react.useCallback)((suggestion)=>{
        // Guardar en historial si es producto o categoría
        if ((suggestion.type === 'product' || suggestion.type === 'category') && saveRecentSearches) {
            const updated = [
                suggestion.title,
                ...recentSearchesRef.current.filter((s)=>s !== suggestion.title)
            ].slice(0, 5);
            setRecentSearches(updated);
            try {
                localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));
            } catch (error) {
                console.warn('Error guardando búsqueda reciente:', error);
            }
        }
        // Actualizar estado
        setState((prev)=>({
                ...prev,
                query: suggestion.title
            }));
        // Callback personalizado
        optionsRef.current.onSuggestionSelect?.(suggestion);
        // Navegar
        router.push(suggestion.href);
    }, [
        saveRecentSearches,
        router
    ]); // Remover recentSearches de dependencias para evitar bucle infinito
    /**
   * Limpia el estado de búsqueda
   */ const clearSearch = (0, _react.useCallback)(()=>{
        // Limpiar todos los timeouts
        if (debounceRef.current) {
            clearTimeout(debounceRef.current);
        }
        if (safetyTimeoutRef.current) {
            clearTimeout(safetyTimeoutRef.current);
        }
        // Resetear estado completamente (sin sugerencias por defecto para tests)
        setState({
            query: '',
            results: [],
            suggestions: [],
            isLoading: false,
            error: null,
            hasSearched: false
        });
    }, []); // Remover dependencia circular
    /**
   * Inicializa el hook (cargar búsquedas recientes)
   */ const initialize = (0, _react.useCallback)(()=>{
        if (saveRecentSearches) {
            try {
                const stored = localStorage.getItem('pinteya-recent-searches');
                if (stored && stored.trim() !== '' && stored !== '""' && stored !== "''") {
                    // Validar que no esté corrupto
                    if (stored.includes('""') && stored.length < 5) {
                        console.warn('Detected corrupted recent searches data, cleaning up');
                        localStorage.removeItem('pinteya-recent-searches');
                        return;
                    }
                    const parsed = JSON.parse(stored);
                    // Verificar que sea un array válido
                    if (Array.isArray(parsed)) {
                        setRecentSearches(parsed);
                    } else {
                        console.warn('Invalid recent searches format, resetting');
                        localStorage.removeItem('pinteya-recent-searches');
                    }
                }
            } catch (error) {
                console.warn('Error cargando búsquedas recientes:', error);
                // Limpiar datos corruptos
                localStorage.removeItem('pinteya-recent-searches');
            }
        }
    }, [
        saveRecentSearches
    ]);
    // ===================================
    // CLEANUP
    // ===================================
    const cleanup = (0, _react.useCallback)(()=>{
        // Cancelar debounce de use-debounce
        searchWithDebounce.cancel();
        // Limpiar timeouts manuales restantes
        if (debounceRef.current) {
            clearTimeout(debounceRef.current);
        }
        if (safetyTimeoutRef.current) {
            clearTimeout(safetyTimeoutRef.current);
        }
    }, [
        searchWithDebounce
    ]);
    // ===================================
    // RETURN
    // ===================================
    return {
        // Estado
        ...state,
        recentSearches,
        // Estado de errores y toasts
        searchError: errorHandler.currentError,
        isRetrying: errorHandler.isRetrying,
        retryCount: errorHandler.retryCount,
        toasts: toastHandler.toasts,
        // Funciones principales
        searchWithDebounce,
        executeSearch,
        selectSuggestion,
        clearSearch,
        initialize,
        cleanup,
        // Funciones de manejo de errores
        clearError: errorHandler.clearError,
        retryManually: errorHandler.retryManually,
        // Funciones de toast
        removeToast: toastHandler.removeToast,
        clearToasts: toastHandler.clearToasts
    };
}
const _default = useSearch;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZVNlYXJjaC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBIT09LOiB1c2VTZWFyY2ggLSBTaXN0ZW1hIGRlIGLDunNxdWVkYSBjZW50cmFsaXphZG9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcclxuaW1wb3J0IHsgdXNlRGVib3VuY2VkQ2FsbGJhY2sgfSBmcm9tICd1c2UtZGVib3VuY2UnO1xyXG5pbXBvcnQgeyBzZWFyY2hQcm9kdWN0cyB9IGZyb20gJ0AvbGliL2FwaS9wcm9kdWN0cyc7XHJcbmltcG9ydCB7IFByb2R1Y3RXaXRoQ2F0ZWdvcnkgfSBmcm9tICdAL3R5cGVzL2FwaSc7XHJcbmltcG9ydCB7IHVzZVNlYXJjaEVycm9ySGFuZGxlciB9IGZyb20gJy4vdXNlU2VhcmNoRXJyb3JIYW5kbGVyJztcclxuaW1wb3J0IHsgdXNlU2VhcmNoVG9hc3QgfSBmcm9tICcuL3VzZVNlYXJjaFRvYXN0JztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFRJUE9TXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaFN0YXRlIHtcclxuICBxdWVyeTogc3RyaW5nO1xyXG4gIHJlc3VsdHM6IFByb2R1Y3RXaXRoQ2F0ZWdvcnlbXTtcclxuICBzdWdnZXN0aW9uczogU2VhcmNoU3VnZ2VzdGlvbltdO1xyXG4gIGlzTG9hZGluZzogYm9vbGVhbjtcclxuICBlcnJvcjogc3RyaW5nIHwgbnVsbDtcclxuICBoYXNTZWFyY2hlZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hTdWdnZXN0aW9uIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHR5cGU6ICdwcm9kdWN0JyB8ICdjYXRlZ29yeScgfCAncmVjZW50JyB8ICd0cmVuZGluZyc7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBzdWJ0aXRsZT86IHN0cmluZztcclxuICBpbWFnZT86IHN0cmluZztcclxuICBiYWRnZT86IHN0cmluZztcclxuICBocmVmOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2VhcmNoT3B0aW9ucyB7XHJcbiAgLyoqIFRpZW1wbyBkZSBkZWJvdW5jZSBlbiBtaWxpc2VndW5kb3MgKi9cclxuICBkZWJvdW5jZU1zPzogbnVtYmVyO1xyXG4gIC8qKiBOw7ptZXJvIG3DoXhpbW8gZGUgc3VnZXJlbmNpYXMgKi9cclxuICBtYXhTdWdnZXN0aW9ucz86IG51bWJlcjtcclxuICAvKiogTMOtbWl0ZSBkZSByZXN1bHRhZG9zIGRlIGLDunNxdWVkYSAqL1xyXG4gIHNlYXJjaExpbWl0PzogbnVtYmVyO1xyXG4gIC8qKiBHdWFyZGFyIGLDunNxdWVkYXMgcmVjaWVudGVzICovXHJcbiAgc2F2ZVJlY2VudFNlYXJjaGVzPzogYm9vbGVhbjtcclxuICAvKiogQ2FsbGJhY2sgY3VhbmRvIHNlIHJlYWxpemEgdW5hIGLDunNxdWVkYSAqL1xyXG4gIG9uU2VhcmNoPzogKHF1ZXJ5OiBzdHJpbmcsIHJlc3VsdHM6IFByb2R1Y3RXaXRoQ2F0ZWdvcnlbXSkgPT4gdm9pZDtcclxuICAvKiogQ2FsbGJhY2sgY3VhbmRvIHNlIHNlbGVjY2lvbmEgdW5hIHN1Z2VyZW5jaWEgKi9cclxuICBvblN1Z2dlc3Rpb25TZWxlY3Q/OiAoc3VnZ2VzdGlvbjogU2VhcmNoU3VnZ2VzdGlvbikgPT4gdm9pZDtcclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQsOaU1FVRURBUyBUUkVORElORyBQT1IgREVGRUNUT1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuY29uc3QgZGVmYXVsdFRyZW5kaW5nU2VhcmNoZXM6IFNlYXJjaFN1Z2dlc3Rpb25bXSA9IFtcclxuICB7XHJcbiAgICBpZDogXCJ0cmVuZGluZy0xXCIsXHJcbiAgICB0eXBlOiBcInRyZW5kaW5nXCIsXHJcbiAgICB0aXRsZTogXCJQaW50dXJhIGzDoXRleFwiLFxyXG4gICAgaHJlZjogXCIvc2VhcmNoP3E9cGludHVyYStsYXRleFwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6IFwidHJlbmRpbmctMlwiLFxyXG4gICAgdHlwZTogXCJ0cmVuZGluZ1wiLFxyXG4gICAgdGl0bGU6IFwiU2hlcndpbiBXaWxsaWFtc1wiLFxyXG4gICAgaHJlZjogXCIvc2VhcmNoP3E9c2hlcndpbit3aWxsaWFtc1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6IFwidHJlbmRpbmctM1wiLFxyXG4gICAgdHlwZTogXCJ0cmVuZGluZ1wiLFxyXG4gICAgdGl0bGU6IFwiUm9kaWxsb3MgcHJlbWl1bVwiLFxyXG4gICAgaHJlZjogXCIvc2VhcmNoP3E9cm9kaWxsb3MrcHJlbWl1bVwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6IFwidHJlbmRpbmctNFwiLFxyXG4gICAgdHlwZTogXCJ0cmVuZGluZ1wiLFxyXG4gICAgdGl0bGU6IFwiUGluY2VsZXNcIixcclxuICAgIGhyZWY6IFwiL3NlYXJjaD9xPXBpbmNlbGVzXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEhPT0sgUFJJTkNJUEFMXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VhcmNoKG9wdGlvbnM6IFVzZVNlYXJjaE9wdGlvbnMgPSB7fSkge1xyXG4gIGNvbnN0IHtcclxuICAgIGRlYm91bmNlTXMgPSAxNTAsXHJcbiAgICBtYXhTdWdnZXN0aW9ucyA9IDgsXHJcbiAgICBzZWFyY2hMaW1pdCA9IDEyLFxyXG4gICAgc2F2ZVJlY2VudFNlYXJjaGVzID0gdHJ1ZSxcclxuICAgIG9uU2VhcmNoLFxyXG4gICAgb25TdWdnZXN0aW9uU2VsZWN0XHJcbiAgfSA9IG9wdGlvbnM7XHJcblxyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG4gIGNvbnN0IGRlYm91bmNlUmVmID0gdXNlUmVmPE5vZGVKUy5UaW1lb3V0PigpO1xyXG4gIGNvbnN0IHNhZmV0eVRpbWVvdXRSZWYgPSB1c2VSZWY8Tm9kZUpTLlRpbWVvdXQ+KCk7IC8vIFRpbWVvdXQgZGUgc2VndXJpZGFkIHBhcmEgZXZpdGFyIGxvYWRpbmcgcGVybWFuZW50ZVxyXG4gIGNvbnN0IG9wdGlvbnNSZWYgPSB1c2VSZWYob3B0aW9ucyk7IC8vIFJlZiBwYXJhIG9wY2lvbmVzIGVzdGFibGVzXHJcbiAgY29uc3QgcmVjZW50U2VhcmNoZXNSZWYgPSB1c2VSZWY8c3RyaW5nW10+KFtdKTsgLy8gUmVmIHBhcmEgYsO6c3F1ZWRhcyByZWNpZW50ZXNcclxuXHJcbiAgLy8gSG9va3MgcGFyYSBtYW5lam8gZGUgZXJyb3JlcyB5IHRvYXN0IG5vdGlmaWNhdGlvbnNcclxuICBjb25zdCBlcnJvckhhbmRsZXIgPSB1c2VTZWFyY2hFcnJvckhhbmRsZXIoe1xyXG4gICAgb25FcnJvcjogKGVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlIGLDunNxdWVkYTonLCBlcnJvcik7XHJcbiAgICB9LFxyXG4gICAgb25SZXRyeVN1Y2Nlc3M6ICgpID0+IHtcclxuICAgICAgdG9hc3RIYW5kbGVyLnNob3dSZXRyeVN1Y2Nlc3NUb2FzdCgpO1xyXG4gICAgfSxcclxuICAgIG9uUmV0cnlGYWlsZWQ6IChlcnJvciwgYXR0ZW1wdHMpID0+IHtcclxuICAgICAgdG9hc3RIYW5kbGVyLnNob3dSZXRyeUZhaWxlZFRvYXN0KGF0dGVtcHRzKTtcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHRvYXN0SGFuZGxlciA9IHVzZVNlYXJjaFRvYXN0KHtcclxuICAgIGRlZmF1bHREdXJhdGlvbjogNDAwMCxcclxuICAgIG1heFRvYXN0czogMixcclxuICB9KTtcclxuXHJcbiAgLy8gQWN0dWFsaXphciByZWYgY3VhbmRvIGNhbWJpZW4gbGFzIG9wY2lvbmVzXHJcbiAgb3B0aW9uc1JlZi5jdXJyZW50ID0gb3B0aW9ucztcclxuXHJcbiAgLy8gRXN0YWRvIHByaW5jaXBhbFxyXG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGU8U2VhcmNoU3RhdGU+KHtcclxuICAgIHF1ZXJ5OiAnJyxcclxuICAgIHJlc3VsdHM6IFtdLFxyXG4gICAgc3VnZ2VzdGlvbnM6IFtdLFxyXG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgIGVycm9yOiBudWxsLFxyXG4gICAgaGFzU2VhcmNoZWQ6IGZhbHNlLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBbcmVjZW50U2VhcmNoZXMsIHNldFJlY2VudFNlYXJjaGVzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XHJcblxyXG4gIC8vIFNpbmNyb25pemFyIHJlZmVyZW5jaWEgY29uIGVzdGFkbyBwYXJhIGV2aXRhciBkZXBlbmRlbmNpYXMgZW4gdXNlQ2FsbGJhY2tcclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgcmVjZW50U2VhcmNoZXNSZWYuY3VycmVudCA9IHJlY2VudFNlYXJjaGVzO1xyXG4gIH0sIFtyZWNlbnRTZWFyY2hlc10pO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIEZVTkNJT05FUyBBVVhJTElBUkVTIFNJTVBMSUZJQ0FEQVNcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIEZVTkNJT05FUyBQUklOQ0lQQUxFUyBDT04gVVNFLURFQk9VTkNFXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgLyoqXHJcbiAgICogRnVuY2nDs24gZGUgYsO6c3F1ZWRhIGludGVybmEgb3B0aW1pemFkYVxyXG4gICAqL1xyXG4gIGNvbnN0IHBlcmZvcm1TZWFyY2ggPSB1c2VDYWxsYmFjayhhc3luYyAoc2VhcmNoUXVlcnk6IHN0cmluZykgPT4ge1xyXG5cclxuICAgIC8vIExpbXBpYXIgdGltZW91dCBkZSBzZWd1cmlkYWQgYW50ZXJpb3JcclxuICAgIGlmIChzYWZldHlUaW1lb3V0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHNhZmV0eVRpbWVvdXRSZWYuY3VycmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2kgbGEgcXVlcnkgZXN0w6EgdmFjw61hLCBtb3N0cmFyIHN1Z2VyZW5jaWFzIHBvciBkZWZlY3RvXHJcbiAgICBpZiAoIXNlYXJjaFF1ZXJ5LnRyaW0oKSkge1xyXG4gICAgICBjb25zdCBkZWZhdWx0U3VnZ2VzdGlvbnMgPSBbXHJcbiAgICAgICAgLi4uZGVmYXVsdFRyZW5kaW5nU2VhcmNoZXMuc2xpY2UoMCwgNCksXHJcbiAgICAgICAgLi4ucmVjZW50U2VhcmNoZXNSZWYuY3VycmVudC5zbGljZSgwLCAzKS5tYXAoKHNlYXJjaCwgaW5kZXgpID0+ICh7XHJcbiAgICAgICAgICBpZDogYHJlY2VudC0ke2luZGV4fWAsXHJcbiAgICAgICAgICB0eXBlOiAncmVjZW50JyBhcyBjb25zdCxcclxuICAgICAgICAgIHRpdGxlOiBzZWFyY2gsXHJcbiAgICAgICAgICBocmVmOiBgL3NlYXJjaD9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHNlYXJjaCl9YCxcclxuICAgICAgICB9KSlcclxuICAgICAgXS5zbGljZSgwLCBtYXhTdWdnZXN0aW9ucyk7XHJcblxyXG4gICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XHJcbiAgICAgICAgLi4ucHJldixcclxuICAgICAgICBxdWVyeTogc2VhcmNoUXVlcnksXHJcbiAgICAgICAgc3VnZ2VzdGlvbnM6IGRlZmF1bHRTdWdnZXN0aW9ucyxcclxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICB9KSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaW1lb3V0IGRlIHNlZ3VyaWRhZCBwYXJhIGV2aXRhciBsb2FkaW5nIHBlcm1hbmVudGUgKDUgc2VndW5kb3MpXHJcbiAgICBzYWZldHlUaW1lb3V0UmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgc2V0U3RhdGUocHJldiA9PiAoe1xyXG4gICAgICAgIC4uLnByZXYsXHJcbiAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogJ1RpZW1wbyBkZSBlc3BlcmEgYWdvdGFkby4gSW50ZW50YSBudWV2YW1lbnRlLicsXHJcbiAgICAgIH0pKTtcclxuICAgIH0sIDUwMDApO1xyXG5cclxuICAgIC8vIEVqZWN1dGFyIGLDunNxdWVkYSBkaXJlY3RhbWVudGUgKGVsIGRlYm91bmNlIHNlIG1hbmVqYSBlbiBzZWFyY2hXaXRoRGVib3VuY2UpXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzZWFyY2hQcm9kdWN0cyhzZWFyY2hRdWVyeSwgbWF4U3VnZ2VzdGlvbnMpO1xyXG5cclxuICAgICAgLy8gTGltcGlhciB0aW1lb3V0IGRlIHNlZ3VyaWRhZCB5YSBxdWUgbGEgQVBJIHJlc3BvbmRpw7NcclxuICAgICAgaWYgKHNhZmV0eVRpbWVvdXRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChzYWZldHlUaW1lb3V0UmVmLmN1cnJlbnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEgJiYgQXJyYXkuaXNBcnJheShyZXNwb25zZS5kYXRhKSkge1xyXG4gICAgICAgICAgY29uc3QgcHJvZHVjdFN1Z2dlc3Rpb25zID0gcmVzcG9uc2UuZGF0YS5tYXAocHJvZHVjdCA9PiAoe1xyXG4gICAgICAgICAgICBpZDogYHByb2R1Y3QtJHtwcm9kdWN0LmlkfWAsXHJcbiAgICAgICAgICAgIHR5cGU6ICdwcm9kdWN0JyBhcyBjb25zdCxcclxuICAgICAgICAgICAgdGl0bGU6IHByb2R1Y3QubmFtZSxcclxuICAgICAgICAgICAgc3VidGl0bGU6IHByb2R1Y3QuY2F0ZWdvcnk/Lm5hbWUgfHwgJ1NpbiBjYXRlZ29yw61hJyxcclxuICAgICAgICAgICAgaW1hZ2U6IHByb2R1Y3QuaW1hZ2VzPy5wcmV2aWV3cz8uWzBdIHx8ICcvaW1hZ2VzL3Byb2R1Y3RzL3BsYWNlaG9sZGVyLmpwZycsXHJcbiAgICAgICAgICAgIGJhZGdlOiBwcm9kdWN0LnN0b2NrID4gMCA/ICdFbiBzdG9jaycgOiAnU2luIHN0b2NrJyxcclxuICAgICAgICAgICAgaHJlZjogYC9zaG9wLWRldGFpbHMvJHtwcm9kdWN0LmlkfWAsXHJcbiAgICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgICAgICAgLi4ucHJldixcclxuICAgICAgICAgICAgcXVlcnk6IHNlYXJjaFF1ZXJ5LCAvLyBBY3R1YWxpemFyIHF1ZXJ5IGN1YW5kbyBoYXkgcmVzdWx0YWRvcyBleGl0b3Nvc1xyXG4gICAgICAgICAgICBzdWdnZXN0aW9uczogcHJvZHVjdFN1Z2dlc3Rpb25zLFxyXG4gICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2V0U3RhdGUocHJldiA9PiAoe1xyXG4gICAgICAgICAgICAuLi5wcmV2LFxyXG4gICAgICAgICAgICBxdWVyeTogc2VhcmNoUXVlcnksIC8vIEFjdHVhbGl6YXIgcXVlcnkgaW5jbHVzbyBjdWFuZG8gbm8gaGF5IHJlc3VsdGFkb3NcclxuICAgICAgICAgICAgc3VnZ2VzdGlvbnM6IFtdLFxyXG4gICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogcmVzcG9uc2UuZXJyb3IgfHwgJ05vIHNlIGVuY29udHJhcm9uIHJlc3VsdGFkb3MnLFxyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgdXNlU2VhcmNoOiBFcnJvciBlbiBiw7pzcXVlZGE6JywgZXJyb3IpO1xyXG5cclxuICAgICAgICAvLyBMaW1waWFyIHRpbWVvdXQgZGUgc2VndXJpZGFkXHJcbiAgICAgICAgaWYgKHNhZmV0eVRpbWVvdXRSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNhZmV0eVRpbWVvdXRSZWYuY3VycmVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XHJcbiAgICAgICAgICAuLi5wcmV2LFxyXG4gICAgICAgICAgcXVlcnk6IHNlYXJjaFF1ZXJ5LCAvLyBBY3R1YWxpemFyIHF1ZXJ5IGluY2x1c28gZW4gY2FzbyBkZSBlcnJvclxyXG4gICAgICAgICAgc3VnZ2VzdGlvbnM6IFtdLFxyXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yOiAnRXJyb3IgZW4gbGEgYsO6c3F1ZWRhLiBJbnRlbnRhIG51ZXZhbWVudGUuJyxcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuICB9LCBbbWF4U3VnZ2VzdGlvbnNdKTsgLy8gU29sbyBtYXhTdWdnZXN0aW9ucyBlcyBuZWNlc2FyaW8gY29tbyBkZXBlbmRlbmNpYVxyXG5cclxuICAvKipcclxuICAgKiBGdW5jacOzbiBkZSBiw7pzcXVlZGEgY29uIGRlYm91bmNlIG9wdGltaXphZG8gdXNhbmRvIHVzZS1kZWJvdW5jZVxyXG4gICAqL1xyXG4gIGNvbnN0IHNlYXJjaFdpdGhEZWJvdW5jZSA9IHVzZURlYm91bmNlZENhbGxiYWNrKFxyXG4gICAgKHNlYXJjaFF1ZXJ5OiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ/CflI0gdXNlU2VhcmNoOiBzZWFyY2hXaXRoRGVib3VuY2UgKHVzZS1kZWJvdW5jZSkgbGxhbWFkbyBjb246Jywgc2VhcmNoUXVlcnkpO1xyXG5cclxuICAgICAgLy8gQWN0dWFsaXphciBlc3RhZG8gZGUgbG9hZGluZyBpbm1lZGlhdGFtZW50ZVxyXG4gICAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XHJcbiAgICAgICAgLi4ucHJldixcclxuICAgICAgICBpc0xvYWRpbmc6ICEhc2VhcmNoUXVlcnkudHJpbSgpLFxyXG4gICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICAvLyBFamVjdXRhciBiw7pzcXVlZGFcclxuICAgICAgcGVyZm9ybVNlYXJjaChzZWFyY2hRdWVyeSk7XHJcbiAgICB9LFxyXG4gICAgZGVib3VuY2VNcyxcclxuICAgIHtcclxuICAgICAgbWF4V2FpdDogMjAwMCxcclxuICAgICAgbGVhZGluZzogZmFsc2UsXHJcbiAgICAgIHRyYWlsaW5nOiB0cnVlLFxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEVqZWN1dGEgdW5hIGLDunNxdWVkYSBjb21wbGV0YSB5IG5hdmVnYSBhIHJlc3VsdGFkb3NcclxuICAgKi9cclxuICBjb25zdCBleGVjdXRlU2VhcmNoID0gdXNlQ2FsbGJhY2soYXN5bmMgKHNlYXJjaFF1ZXJ5OiBzdHJpbmcsIGNhdGVnb3J5Pzogc3RyaW5nKSA9PiB7XHJcbiAgICBpZiAoIXNlYXJjaFF1ZXJ5LnRyaW0oKSkgcmV0dXJuO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHNldFN0YXRlKHByZXYgPT4gKHsgLi4ucHJldiwgaXNMb2FkaW5nOiB0cnVlLCBlcnJvcjogbnVsbCB9KSk7XHJcblxyXG4gICAgICAvLyBHdWFyZGFyIGVuIGhpc3RvcmlhbFxyXG4gICAgICBpZiAoc2F2ZVJlY2VudFNlYXJjaGVzICYmIHNlYXJjaFF1ZXJ5LnRyaW0oKSkge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBbXHJcbiAgICAgICAgICBzZWFyY2hRdWVyeS50cmltKCksXHJcbiAgICAgICAgICAuLi5yZWNlbnRTZWFyY2hlc1JlZi5jdXJyZW50LmZpbHRlcihzID0+IHMgIT09IHNlYXJjaFF1ZXJ5LnRyaW0oKSlcclxuICAgICAgICBdLnNsaWNlKDAsIDUpO1xyXG5cclxuICAgICAgICBzZXRSZWNlbnRTZWFyY2hlcyh1cGRhdGVkKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BpbnRleWEtcmVjZW50LXNlYXJjaGVzJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZCkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGd1YXJkYW5kbyBiw7pzcXVlZGEgcmVjaWVudGU6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVhbGl6YXIgYsO6c3F1ZWRhIGNvbiBtYW5lam8gcm9idXN0byBkZSBlcnJvcmVzXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZXJyb3JIYW5kbGVyLmV4ZWN1dGVXaXRoUmV0cnkoXHJcbiAgICAgICAgKCkgPT4gc2VhcmNoUHJvZHVjdHMoc2VhcmNoUXVlcnkudHJpbSgpLCBzZWFyY2hMaW1pdCksXHJcbiAgICAgICAgYGLDunNxdWVkYSBkZSBcIiR7c2VhcmNoUXVlcnkudHJpbSgpfVwiYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdENvdW50ID0gcmVzcG9uc2UuZGF0YS5sZW5ndGg7XHJcblxyXG4gICAgICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgICAgIC4uLnByZXYsXHJcbiAgICAgICAgICByZXN1bHRzOiByZXNwb25zZS5kYXRhIHx8IFtdLFxyXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgIGhhc1NlYXJjaGVkOiB0cnVlLFxyXG4gICAgICAgICAgZXJyb3I6IG51bGwsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvLyBMaW1waWFyIGVycm9yZXMgcHJldmlvc1xyXG4gICAgICAgIGVycm9ySGFuZGxlci5jbGVhckVycm9yKCk7XHJcblxyXG4gICAgICAgIC8vIE1vc3RyYXIgdG9hc3QgZGUgw6l4aXRvIHNpIGhheSByZXN1bHRhZG9zXHJcbiAgICAgICAgaWYgKHJlc3VsdENvdW50ID4gMCkge1xyXG4gICAgICAgICAgdG9hc3RIYW5kbGVyLnNob3dTdWNjZXNzVG9hc3Qoc2VhcmNoUXVlcnkudHJpbSgpLCByZXN1bHRDb3VudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRvYXN0SGFuZGxlci5zaG93Tm9SZXN1bHRzVG9hc3Qoc2VhcmNoUXVlcnkudHJpbSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENhbGxiYWNrIHBlcnNvbmFsaXphZG9cclxuICAgICAgICBvcHRpb25zUmVmLmN1cnJlbnQub25TZWFyY2g/LihzZWFyY2hRdWVyeS50cmltKCksIHJlc3BvbnNlLmRhdGEgfHwgW10pO1xyXG5cclxuICAgICAgICAvLyBOYXZlZ2FyIGEgcmVzdWx0YWRvc1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuICAgICAgICBzZWFyY2hQYXJhbXMuc2V0KCdxJywgc2VhcmNoUXVlcnkudHJpbSgpKTtcclxuICAgICAgICBpZiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgIHNlYXJjaFBhcmFtcy5zZXQoJ2NhdGVnb3J5JywgY2F0ZWdvcnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcm91dGVyLnB1c2goYC9zZWFyY2g/JHtzZWFyY2hQYXJhbXMudG9TdHJpbmcoKX1gKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSByZXNwb25zZS5lcnJvciB8fCAnTm8gc2UgZW5jb250cmFyb24gcmVzdWx0YWRvcyc7XHJcblxyXG4gICAgICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgICAgIC4uLnByZXYsXHJcbiAgICAgICAgICByZXN1bHRzOiBbXSxcclxuICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgICBoYXNTZWFyY2hlZDogdHJ1ZSxcclxuICAgICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvLyBNb3N0cmFyIHRvYXN0IGRlIGFkdmVydGVuY2lhIHBhcmEgcmVzcHVlc3RhcyBzaW4gw6l4aXRvXHJcbiAgICAgICAgdG9hc3RIYW5kbGVyLnNob3dXYXJuaW5nVG9hc3QoJ0LDunNxdWVkYSBzaW4gcmVzdWx0YWRvcycsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBlamVjdXRhbmRvIGLDunNxdWVkYTonLCBlcnJvcik7XHJcblxyXG4gICAgICAvLyBNYW5lamFyIGVycm9yIGNvbiBlbCBlcnJvciBoYW5kbGVyXHJcbiAgICAgIGNvbnN0IHNlYXJjaEVycm9yID0gZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKGVycm9yKTtcclxuXHJcbiAgICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgICAuLi5wcmV2LFxyXG4gICAgICAgIHJlc3VsdHM6IFtdLFxyXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgaGFzU2VhcmNoZWQ6IHRydWUsXHJcbiAgICAgICAgZXJyb3I6IHNlYXJjaEVycm9yLm1lc3NhZ2UsXHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIC8vIE1vc3RyYXIgdG9hc3QgZGUgZXJyb3JcclxuICAgICAgdG9hc3RIYW5kbGVyLnNob3dFcnJvclRvYXN0KHNlYXJjaEVycm9yLCBlcnJvckhhbmRsZXIucmV0cnlDb3VudCwgKCkgPT4ge1xyXG4gICAgICAgIGV4ZWN1dGVTZWFyY2goc2VhcmNoUXVlcnkudHJpbSgpLCBjYXRlZ29yeSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sIFtzZWFyY2hMaW1pdCwgc2F2ZVJlY2VudFNlYXJjaGVzLCByb3V0ZXIsIGVycm9ySGFuZGxlciwgdG9hc3RIYW5kbGVyXSk7IC8vIFJlbW92ZXIgcmVjZW50U2VhcmNoZXMgZGUgZGVwZW5kZW5jaWFzIHBhcmEgZXZpdGFyIGJ1Y2xlIGluZmluaXRvXHJcblxyXG4gIC8qKlxyXG4gICAqIE1hbmVqYSBsYSBzZWxlY2Npw7NuIGRlIHVuYSBzdWdlcmVuY2lhXHJcbiAgICovXHJcbiAgY29uc3Qgc2VsZWN0U3VnZ2VzdGlvbiA9IHVzZUNhbGxiYWNrKChzdWdnZXN0aW9uOiBTZWFyY2hTdWdnZXN0aW9uKSA9PiB7XHJcbiAgICAvLyBHdWFyZGFyIGVuIGhpc3RvcmlhbCBzaSBlcyBwcm9kdWN0byBvIGNhdGVnb3LDrWFcclxuICAgIGlmICgoc3VnZ2VzdGlvbi50eXBlID09PSAncHJvZHVjdCcgfHwgc3VnZ2VzdGlvbi50eXBlID09PSAnY2F0ZWdvcnknKSAmJiBzYXZlUmVjZW50U2VhcmNoZXMpIHtcclxuICAgICAgY29uc3QgdXBkYXRlZCA9IFtcclxuICAgICAgICBzdWdnZXN0aW9uLnRpdGxlLFxyXG4gICAgICAgIC4uLnJlY2VudFNlYXJjaGVzUmVmLmN1cnJlbnQuZmlsdGVyKHMgPT4gcyAhPT0gc3VnZ2VzdGlvbi50aXRsZSlcclxuICAgICAgXS5zbGljZSgwLCA1KTtcclxuXHJcbiAgICAgIHNldFJlY2VudFNlYXJjaGVzKHVwZGF0ZWQpO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwaW50ZXlhLXJlY2VudC1zZWFyY2hlcycsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWQpKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGd1YXJkYW5kbyBiw7pzcXVlZGEgcmVjaWVudGU6JywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWN0dWFsaXphciBlc3RhZG9cclxuICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgLi4ucHJldixcclxuICAgICAgcXVlcnk6IHN1Z2dlc3Rpb24udGl0bGUsXHJcbiAgICB9KSk7XHJcblxyXG4gICAgLy8gQ2FsbGJhY2sgcGVyc29uYWxpemFkb1xyXG4gICAgb3B0aW9uc1JlZi5jdXJyZW50Lm9uU3VnZ2VzdGlvblNlbGVjdD8uKHN1Z2dlc3Rpb24pO1xyXG5cclxuICAgIC8vIE5hdmVnYXJcclxuICAgIHJvdXRlci5wdXNoKHN1Z2dlc3Rpb24uaHJlZik7XHJcbiAgfSwgW3NhdmVSZWNlbnRTZWFyY2hlcywgcm91dGVyXSk7IC8vIFJlbW92ZXIgcmVjZW50U2VhcmNoZXMgZGUgZGVwZW5kZW5jaWFzIHBhcmEgZXZpdGFyIGJ1Y2xlIGluZmluaXRvXHJcblxyXG4gIC8qKlxyXG4gICAqIExpbXBpYSBlbCBlc3RhZG8gZGUgYsO6c3F1ZWRhXHJcbiAgICovXHJcbiAgY29uc3QgY2xlYXJTZWFyY2ggPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcblxyXG4gICAgLy8gTGltcGlhciB0b2RvcyBsb3MgdGltZW91dHNcclxuICAgIGlmIChkZWJvdW5jZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChkZWJvdW5jZVJlZi5jdXJyZW50KTtcclxuICAgIH1cclxuICAgIGlmIChzYWZldHlUaW1lb3V0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHNhZmV0eVRpbWVvdXRSZWYuY3VycmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVzZXRlYXIgZXN0YWRvIGNvbXBsZXRhbWVudGUgKHNpbiBzdWdlcmVuY2lhcyBwb3IgZGVmZWN0byBwYXJhIHRlc3RzKVxyXG4gICAgc2V0U3RhdGUoe1xyXG4gICAgICBxdWVyeTogJycsXHJcbiAgICAgIHJlc3VsdHM6IFtdLFxyXG4gICAgICBzdWdnZXN0aW9uczogW10sXHJcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICBoYXNTZWFyY2hlZDogZmFsc2UsXHJcbiAgICB9KTtcclxuICB9LCBbXSk7IC8vIFJlbW92ZXIgZGVwZW5kZW5jaWEgY2lyY3VsYXJcclxuXHJcbiAgLyoqXHJcbiAgICogSW5pY2lhbGl6YSBlbCBob29rIChjYXJnYXIgYsO6c3F1ZWRhcyByZWNpZW50ZXMpXHJcbiAgICovXHJcbiAgY29uc3QgaW5pdGlhbGl6ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGlmIChzYXZlUmVjZW50U2VhcmNoZXMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdG9yZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGludGV5YS1yZWNlbnQtc2VhcmNoZXMnKTtcclxuICAgICAgICBpZiAoc3RvcmVkICYmIHN0b3JlZC50cmltKCkgIT09ICcnICYmIHN0b3JlZCAhPT0gJ1wiXCInICYmIHN0b3JlZCAhPT0gXCInJ1wiKSB7XHJcbiAgICAgICAgICAvLyBWYWxpZGFyIHF1ZSBubyBlc3TDqSBjb3JydXB0b1xyXG4gICAgICAgICAgaWYgKHN0b3JlZC5pbmNsdWRlcygnXCJcIicpICYmIHN0b3JlZC5sZW5ndGggPCA1KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGV0ZWN0ZWQgY29ycnVwdGVkIHJlY2VudCBzZWFyY2hlcyBkYXRhLCBjbGVhbmluZyB1cCcpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgncGludGV5YS1yZWNlbnQtc2VhcmNoZXMnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2Uoc3RvcmVkKTtcclxuICAgICAgICAgIC8vIFZlcmlmaWNhciBxdWUgc2VhIHVuIGFycmF5IHbDoWxpZG9cclxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZCkpIHtcclxuICAgICAgICAgICAgc2V0UmVjZW50U2VhcmNoZXMocGFyc2VkKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCByZWNlbnQgc2VhcmNoZXMgZm9ybWF0LCByZXNldHRpbmcnKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3BpbnRleWEtcmVjZW50LXNlYXJjaGVzJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgY2FyZ2FuZG8gYsO6c3F1ZWRhcyByZWNpZW50ZXM6JywgZXJyb3IpO1xyXG4gICAgICAgIC8vIExpbXBpYXIgZGF0b3MgY29ycnVwdG9zXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3BpbnRleWEtcmVjZW50LXNlYXJjaGVzJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBbc2F2ZVJlY2VudFNlYXJjaGVzXSk7XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gQ0xFQU5VUFxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGNvbnN0IGNsZWFudXAgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAvLyBDYW5jZWxhciBkZWJvdW5jZSBkZSB1c2UtZGVib3VuY2VcclxuICAgIHNlYXJjaFdpdGhEZWJvdW5jZS5jYW5jZWwoKTtcclxuXHJcbiAgICAvLyBMaW1waWFyIHRpbWVvdXRzIG1hbnVhbGVzIHJlc3RhbnRlc1xyXG4gICAgaWYgKGRlYm91bmNlUmVmLmN1cnJlbnQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlUmVmLmN1cnJlbnQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNhZmV0eVRpbWVvdXRSZWYuY3VycmVudCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoc2FmZXR5VGltZW91dFJlZi5jdXJyZW50KTtcclxuICAgIH1cclxuICB9LCBbc2VhcmNoV2l0aERlYm91bmNlXSk7XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gUkVUVVJOXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC8vIEVzdGFkb1xyXG4gICAgLi4uc3RhdGUsXHJcbiAgICByZWNlbnRTZWFyY2hlcyxcclxuXHJcbiAgICAvLyBFc3RhZG8gZGUgZXJyb3JlcyB5IHRvYXN0c1xyXG4gICAgc2VhcmNoRXJyb3I6IGVycm9ySGFuZGxlci5jdXJyZW50RXJyb3IsXHJcbiAgICBpc1JldHJ5aW5nOiBlcnJvckhhbmRsZXIuaXNSZXRyeWluZyxcclxuICAgIHJldHJ5Q291bnQ6IGVycm9ySGFuZGxlci5yZXRyeUNvdW50LFxyXG4gICAgdG9hc3RzOiB0b2FzdEhhbmRsZXIudG9hc3RzLFxyXG5cclxuICAgIC8vIEZ1bmNpb25lcyBwcmluY2lwYWxlc1xyXG4gICAgc2VhcmNoV2l0aERlYm91bmNlLFxyXG4gICAgZXhlY3V0ZVNlYXJjaCxcclxuICAgIHNlbGVjdFN1Z2dlc3Rpb24sXHJcbiAgICBjbGVhclNlYXJjaCxcclxuICAgIGluaXRpYWxpemUsXHJcbiAgICBjbGVhbnVwLFxyXG5cclxuICAgIC8vIEZ1bmNpb25lcyBkZSBtYW5lam8gZGUgZXJyb3Jlc1xyXG4gICAgY2xlYXJFcnJvcjogZXJyb3JIYW5kbGVyLmNsZWFyRXJyb3IsXHJcbiAgICByZXRyeU1hbnVhbGx5OiBlcnJvckhhbmRsZXIucmV0cnlNYW51YWxseSxcclxuXHJcbiAgICAvLyBGdW5jaW9uZXMgZGUgdG9hc3RcclxuICAgIHJlbW92ZVRvYXN0OiB0b2FzdEhhbmRsZXIucmVtb3ZlVG9hc3QsXHJcbiAgICBjbGVhclRvYXN0czogdG9hc3RIYW5kbGVyLmNsZWFyVG9hc3RzLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZVNlYXJjaDtcclxuIl0sIm5hbWVzIjpbInVzZVNlYXJjaCIsImRlZmF1bHRUcmVuZGluZ1NlYXJjaGVzIiwiaWQiLCJ0eXBlIiwidGl0bGUiLCJocmVmIiwib3B0aW9ucyIsImRlYm91bmNlTXMiLCJtYXhTdWdnZXN0aW9ucyIsInNlYXJjaExpbWl0Iiwic2F2ZVJlY2VudFNlYXJjaGVzIiwib25TZWFyY2giLCJvblN1Z2dlc3Rpb25TZWxlY3QiLCJyb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJkZWJvdW5jZVJlZiIsInVzZVJlZiIsInNhZmV0eVRpbWVvdXRSZWYiLCJvcHRpb25zUmVmIiwicmVjZW50U2VhcmNoZXNSZWYiLCJlcnJvckhhbmRsZXIiLCJ1c2VTZWFyY2hFcnJvckhhbmRsZXIiLCJvbkVycm9yIiwiZXJyb3IiLCJjb25zb2xlIiwib25SZXRyeVN1Y2Nlc3MiLCJ0b2FzdEhhbmRsZXIiLCJzaG93UmV0cnlTdWNjZXNzVG9hc3QiLCJvblJldHJ5RmFpbGVkIiwiYXR0ZW1wdHMiLCJzaG93UmV0cnlGYWlsZWRUb2FzdCIsInVzZVNlYXJjaFRvYXN0IiwiZGVmYXVsdER1cmF0aW9uIiwibWF4VG9hc3RzIiwiY3VycmVudCIsInN0YXRlIiwic2V0U3RhdGUiLCJ1c2VTdGF0ZSIsInF1ZXJ5IiwicmVzdWx0cyIsInN1Z2dlc3Rpb25zIiwiaXNMb2FkaW5nIiwiaGFzU2VhcmNoZWQiLCJyZWNlbnRTZWFyY2hlcyIsInNldFJlY2VudFNlYXJjaGVzIiwiUmVhY3QiLCJ1c2VFZmZlY3QiLCJwZXJmb3JtU2VhcmNoIiwidXNlQ2FsbGJhY2siLCJzZWFyY2hRdWVyeSIsImNsZWFyVGltZW91dCIsInRyaW0iLCJkZWZhdWx0U3VnZ2VzdGlvbnMiLCJzbGljZSIsIm1hcCIsInNlYXJjaCIsImluZGV4IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicHJldiIsInNldFRpbWVvdXQiLCJyZXNwb25zZSIsInNlYXJjaFByb2R1Y3RzIiwic3VjY2VzcyIsImRhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJwcm9kdWN0U3VnZ2VzdGlvbnMiLCJwcm9kdWN0IiwibmFtZSIsInN1YnRpdGxlIiwiY2F0ZWdvcnkiLCJpbWFnZSIsImltYWdlcyIsInByZXZpZXdzIiwiYmFkZ2UiLCJzdG9jayIsInNlYXJjaFdpdGhEZWJvdW5jZSIsInVzZURlYm91bmNlZENhbGxiYWNrIiwibG9nIiwibWF4V2FpdCIsImxlYWRpbmciLCJ0cmFpbGluZyIsImV4ZWN1dGVTZWFyY2giLCJ1cGRhdGVkIiwiZmlsdGVyIiwicyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5Iiwid2FybiIsImV4ZWN1dGVXaXRoUmV0cnkiLCJyZXN1bHRDb3VudCIsImxlbmd0aCIsImNsZWFyRXJyb3IiLCJzaG93U3VjY2Vzc1RvYXN0Iiwic2hvd05vUmVzdWx0c1RvYXN0Iiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic2V0IiwicHVzaCIsInRvU3RyaW5nIiwiZXJyb3JNZXNzYWdlIiwic2hvd1dhcm5pbmdUb2FzdCIsInNlYXJjaEVycm9yIiwiaGFuZGxlRXJyb3IiLCJtZXNzYWdlIiwic2hvd0Vycm9yVG9hc3QiLCJyZXRyeUNvdW50Iiwic2VsZWN0U3VnZ2VzdGlvbiIsInN1Z2dlc3Rpb24iLCJjbGVhclNlYXJjaCIsImluaXRpYWxpemUiLCJzdG9yZWQiLCJnZXRJdGVtIiwiaW5jbHVkZXMiLCJyZW1vdmVJdGVtIiwicGFyc2VkIiwicGFyc2UiLCJjbGVhbnVwIiwiY2FuY2VsIiwiY3VycmVudEVycm9yIiwiaXNSZXRyeWluZyIsInRvYXN0cyIsInJldHJ5TWFudWFsbHkiLCJyZW1vdmVUb2FzdCIsImNsZWFyVG9hc3RzIl0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMscURBQXFEO0FBQ3JELHNDQUFzQzs7Ozs7Ozs7Ozs7O1FBcWZ0QztlQUFBOztRQWxhZ0JBO2VBQUFBOzs7K0RBakZxQzs0QkFDM0I7NkJBQ1c7MEJBQ047dUNBRU87Z0NBQ1A7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDL0Isc0NBQXNDO0FBQ3RDLGlDQUFpQztBQUNqQyxzQ0FBc0M7QUFFdEMsTUFBTUMsMEJBQThDO0lBQ2xEO1FBQ0VDLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLE1BQU07SUFDUjtJQUNBO1FBQ0VILElBQUk7UUFDSkMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLE1BQU07SUFDUjtJQUNBO1FBQ0VILElBQUk7UUFDSkMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLE1BQU07SUFDUjtJQUNBO1FBQ0VILElBQUk7UUFDSkMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLE1BQU07SUFDUjtDQUNEO0FBTU0sU0FBU0wsVUFBVU0sVUFBNEIsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sRUFDSkMsYUFBYSxHQUFHLEVBQ2hCQyxpQkFBaUIsQ0FBQyxFQUNsQkMsY0FBYyxFQUFFLEVBQ2hCQyxxQkFBcUIsSUFBSSxFQUN6QkMsUUFBUSxFQUNSQyxrQkFBa0IsRUFDbkIsR0FBR047SUFFSixNQUFNTyxTQUFTQyxJQUFBQSxxQkFBUztJQUN4QixNQUFNQyxjQUFjQyxJQUFBQSxhQUFNO0lBQzFCLE1BQU1D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