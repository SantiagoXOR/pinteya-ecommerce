{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\logistics\\LogisticsMap.tsx"],"sourcesContent":["// =====================================================\n// COMPONENTE: LOGISTICS MAP ENTERPRISE\n// Descripción: Mapa interactivo con tracking tiempo real usando MapLibre GL JS\n// Basado en: MapLibre GL JS + React + WebSockets\n// =====================================================\n\n'use client';\n\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Map as MapIcon, \n  Navigation, \n  Layers, \n  Zap, \n  MapPin, \n  Truck, \n  Package,\n  Settings,\n  Maximize2,\n  RefreshCw,\n  Filter\n} from 'lucide-react';\nimport { Shipment, TrackingEvent } from '@/types/logistics';\nimport { cn } from '@/lib/utils';\n\n// =====================================================\n// INTERFACES\n// =====================================================\n\ninterface LogisticsMapProps {\n  shipments?: Shipment[];\n  selectedShipment?: Shipment | null;\n  onShipmentSelect?: (shipment: Shipment) => void;\n  realTimeEnabled?: boolean;\n  className?: string;\n}\n\ninterface MapMarker {\n  id: string;\n  type: 'shipment' | 'warehouse' | 'delivery' | 'courier';\n  coordinates: [number, number];\n  data: any;\n  status?: string;\n}\n\ninterface GeofenceZone {\n  id: string;\n  name: string;\n  coordinates: [number, number][];\n  type: 'delivery_zone' | 'restricted' | 'priority';\n  active: boolean;\n}\n\n// =====================================================\n// CONFIGURACIÓN DEL MAPA\n// =====================================================\n\nconst MAP_CONFIG = {\n  style: 'https://api.maptiler.com/maps/streets/style.json?key=demo', // Demo key - reemplazar en producción\n  center: [-58.3816, -34.6037] as [number, number], // Buenos Aires\n  zoom: 10,\n  pitch: 45,\n  bearing: 0\n};\n\nconst MARKER_COLORS = {\n  pending: '#6b7280',\n  confirmed: '#3b82f6',\n  picked_up: '#f59e0b',\n  in_transit: '#f97316',\n  out_for_delivery: '#8b5cf6',\n  delivered: '#10b981',\n  exception: '#ef4444',\n  cancelled: '#6b7280',\n  returned: '#ef4444'\n};\n\n// =====================================================\n// COMPONENTE PRINCIPAL\n// =====================================================\n\nexport function LogisticsMap({\n  shipments = [],\n  selectedShipment,\n  onShipmentSelect,\n  realTimeEnabled = false,\n  className\n}: LogisticsMapProps) {\n  \n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<any>(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [mapStyle, setMapStyle] = useState<'streets' | 'satellite' | 'terrain'>('streets');\n  const [showGeofences, setShowGeofences] = useState(true);\n  const [showRoutes, setShowRoutes] = useState(true);\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  \n  // Estados del mapa\n  const [markers, setMarkers] = useState<MapMarker[]>([]);\n  const [geofences, setGeofences] = useState<GeofenceZone[]>([]);\n  const [activeRoutes, setActiveRoutes] = useState<any[]>([]);\n  \n  // =====================================================\n  // INICIALIZACIÓN DEL MAPA\n  // =====================================================\n  \n  useEffect(() => {\n    if (!mapContainer.current || map.current) return;\n    \n    // Importar MapLibre GL JS dinámicamente\n    import('maplibre-gl').then((maplibregl) => {\n      map.current = new maplibregl.Map({\n        container: mapContainer.current!,\n        style: MAP_CONFIG.style,\n        center: MAP_CONFIG.center,\n        zoom: MAP_CONFIG.zoom,\n        pitch: MAP_CONFIG.pitch,\n        bearing: MAP_CONFIG.bearing\n      });\n      \n      map.current.on('load', () => {\n        setMapLoaded(true);\n        initializeMapLayers();\n        loadInitialData();\n      });\n      \n      // Eventos del mapa\n      map.current.on('click', 'shipments-layer', (e: any) => {\n        const shipmentId = e.features[0].properties.shipmentId;\n        const shipment = shipments.find(s => s.id.toString() === shipmentId);\n        if (shipment && onShipmentSelect) {\n          onShipmentSelect(shipment);\n        }\n      });\n      \n      // Cursor pointer en markers\n      map.current.on('mouseenter', 'shipments-layer', () => {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n      \n      map.current.on('mouseleave', 'shipments-layer', () => {\n        map.current.getCanvas().style.cursor = '';\n      });\n    });\n    \n    return () => {\n      if (map.current) {\n        map.current.remove();\n        map.current = null;\n      }\n    };\n  }, []);\n  \n  // =====================================================\n  // INICIALIZAR CAPAS DEL MAPA\n  // =====================================================\n  \n  const initializeMapLayers = useCallback(() => {\n    if (!map.current || !mapLoaded) return;\n    \n    // Capa de geofences\n    map.current.addSource('geofences', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: []\n      }\n    });\n    \n    map.current.addLayer({\n      id: 'geofences-fill',\n      type: 'fill',\n      source: 'geofences',\n      paint: {\n        'fill-color': [\n          'match',\n          ['get', 'type'],\n          'delivery_zone', '#10b981',\n          'restricted', '#ef4444',\n          'priority', '#f59e0b',\n          '#6b7280'\n        ],\n        'fill-opacity': 0.2\n      }\n    });\n    \n    map.current.addLayer({\n      id: 'geofences-border',\n      type: 'line',\n      source: 'geofences',\n      paint: {\n        'line-color': [\n          'match',\n          ['get', 'type'],\n          'delivery_zone', '#10b981',\n          'restricted', '#ef4444',\n          'priority', '#f59e0b',\n          '#6b7280'\n        ],\n        'line-width': 2,\n        'line-dasharray': [2, 2]\n      }\n    });\n    \n    // Capa de envíos\n    map.current.addSource('shipments', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: []\n      }\n    });\n    \n    map.current.addLayer({\n      id: 'shipments-layer',\n      type: 'circle',\n      source: 'shipments',\n      paint: {\n        'circle-radius': [\n          'case',\n          ['==', ['get', 'selected'], true], 12,\n          8\n        ],\n        'circle-color': [\n          'match',\n          ['get', 'status'],\n          'pending', MARKER_COLORS.pending,\n          'confirmed', MARKER_COLORS.confirmed,\n          'picked_up', MARKER_COLORS.picked_up,\n          'in_transit', MARKER_COLORS.in_transit,\n          'out_for_delivery', MARKER_COLORS.out_for_delivery,\n          'delivered', MARKER_COLORS.delivered,\n          'exception', MARKER_COLORS.exception,\n          'cancelled', MARKER_COLORS.cancelled,\n          'returned', MARKER_COLORS.returned,\n          MARKER_COLORS.pending\n        ],\n        'circle-stroke-width': 2,\n        'circle-stroke-color': '#ffffff'\n      }\n    });\n    \n    // Capa de rutas\n    map.current.addSource('routes', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: []\n      }\n    });\n    \n    map.current.addLayer({\n      id: 'routes-layer',\n      type: 'line',\n      source: 'routes',\n      paint: {\n        'line-color': '#3b82f6',\n        'line-width': 3,\n        'line-opacity': 0.7\n      }\n    });\n    \n  }, [mapLoaded]);\n  \n  // =====================================================\n  // CARGAR DATOS INICIALES\n  // =====================================================\n  \n  const loadInitialData = useCallback(() => {\n    // Cargar geofences de ejemplo\n    const sampleGeofences: GeofenceZone[] = [\n      {\n        id: 'caba',\n        name: 'CABA - Zona Prioritaria',\n        coordinates: [\n          [-58.5315, -34.5264],\n          [-58.3354, -34.5264],\n          [-58.3354, -34.7051],\n          [-58.5315, -34.7051],\n          [-58.5315, -34.5264]\n        ],\n        type: 'priority',\n        active: true\n      },\n      {\n        id: 'gba_norte',\n        name: 'GBA Norte - Zona de Entrega',\n        coordinates: [\n          [-58.6000, -34.4000],\n          [-58.4000, -34.4000],\n          [-58.4000, -34.5500],\n          [-58.6000, -34.5500],\n          [-58.6000, -34.4000]\n        ],\n        type: 'delivery_zone',\n        active: true\n      }\n    ];\n    \n    setGeofences(sampleGeofences);\n    updateGeofencesLayer(sampleGeofences);\n  }, []);\n  \n  // =====================================================\n  // ACTUALIZAR CAPAS DEL MAPA\n  // =====================================================\n  \n  const updateShipmentsLayer = useCallback((shipmentsData: Shipment[]) => {\n    if (!map.current || !mapLoaded) return;\n    \n    const filteredShipments = filterStatus === 'all' \n      ? shipmentsData \n      : shipmentsData.filter(s => s.status === filterStatus);\n    \n    const features = filteredShipments.map(shipment => {\n      // Generar coordenadas aleatorias en Buenos Aires para demo\n      const lat = -34.6037 + (Math.random() - 0.5) * 0.2;\n      const lng = -58.3816 + (Math.random() - 0.5) * 0.2;\n      \n      return {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat]\n        },\n        properties: {\n          shipmentId: shipment.id.toString(),\n          status: shipment.status,\n          shipmentNumber: shipment.shipment_number,\n          selected: selectedShipment?.id === shipment.id\n        }\n      };\n    });\n    \n    map.current.getSource('shipments').setData({\n      type: 'FeatureCollection',\n      features\n    });\n  }, [mapLoaded, filterStatus, selectedShipment]);\n  \n  const updateGeofencesLayer = useCallback((geofencesData: GeofenceZone[]) => {\n    if (!map.current || !mapLoaded) return;\n    \n    const features = geofencesData\n      .filter(zone => zone.active && showGeofences)\n      .map(zone => ({\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [zone.coordinates]\n        },\n        properties: {\n          id: zone.id,\n          name: zone.name,\n          type: zone.type\n        }\n      }));\n    \n    map.current.getSource('geofences').setData({\n      type: 'FeatureCollection',\n      features\n    });\n  }, [mapLoaded, showGeofences]);\n  \n  // =====================================================\n  // EFECTOS\n  // =====================================================\n  \n  useEffect(() => {\n    if (mapLoaded && shipments.length > 0) {\n      updateShipmentsLayer(shipments);\n    }\n  }, [shipments, mapLoaded, updateShipmentsLayer]);\n  \n  useEffect(() => {\n    if (mapLoaded) {\n      updateGeofencesLayer(geofences);\n    }\n  }, [geofences, mapLoaded, updateGeofencesLayer]);\n  \n  // =====================================================\n  // HANDLERS\n  // =====================================================\n  \n  const handleStyleChange = (style: string) => {\n    setMapStyle(style as any);\n    if (map.current) {\n      const styleUrls = {\n        streets: 'https://api.maptiler.com/maps/streets/style.json?key=demo',\n        satellite: 'https://api.maptiler.com/maps/satellite/style.json?key=demo',\n        terrain: 'https://api.maptiler.com/maps/terrain/style.json?key=demo'\n      };\n      map.current.setStyle(styleUrls[style as keyof typeof styleUrls]);\n    }\n  };\n  \n  const handleFullscreen = () => {\n    setIsFullscreen(!isFullscreen);\n    // TODO: Implementar fullscreen real\n  };\n  \n  const handleFitBounds = () => {\n    if (map.current && shipments.length > 0) {\n      // Calcular bounds basado en los shipments\n      const bounds = new (window as any).maplibregl.LngLatBounds();\n      shipments.forEach(() => {\n        // Coordenadas de ejemplo - en producción usar coordenadas reales\n        const lat = -34.6037 + (Math.random() - 0.5) * 0.2;\n        const lng = -58.3816 + (Math.random() - 0.5) * 0.2;\n        bounds.extend([lng, lat]);\n      });\n      map.current.fitBounds(bounds, { padding: 50 });\n    }\n  };\n  \n  const handleRefresh = () => {\n    if (mapLoaded) {\n      updateShipmentsLayer(shipments);\n      updateGeofencesLayer(geofences);\n    }\n  };\n  \n  return (\n    <Card className={cn(\"relative\", className, isFullscreen && \"fixed inset-0 z-50\")}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapIcon className=\"w-5 h-5\" />\n              Mapa de Logística\n            </CardTitle>\n            <CardDescription>\n              Tracking en tiempo real de {shipments.length} envíos\n            </CardDescription>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Filtro de estado */}\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos</SelectItem>\n                <SelectItem value=\"in_transit\">En Tránsito</SelectItem>\n                <SelectItem value=\"out_for_delivery\">En Reparto</SelectItem>\n                <SelectItem value=\"delivered\">Entregados</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {/* Controles de capas */}\n            <div className=\"flex items-center gap-2\">\n              <Switch\n                checked={showGeofences}\n                onCheckedChange={setShowGeofences}\n                size=\"sm\"\n              />\n              <span className=\"text-sm\">Zonas</span>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Switch\n                checked={showRoutes}\n                onCheckedChange={setShowRoutes}\n                size=\"sm\"\n              />\n              <span className=\"text-sm\">Rutas</span>\n            </div>\n            \n            {/* Botones de acción */}\n            <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n              <RefreshCw className=\"w-4 h-4\" />\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\" onClick={handleFitBounds}>\n              <Navigation className=\"w-4 h-4\" />\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\" onClick={handleFullscreen}>\n              <Maximize2 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        {/* Controles de estilo */}\n        <div className=\"flex items-center gap-4\">\n          <Select value={mapStyle} onValueChange={handleStyleChange}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"streets\">Calles</SelectItem>\n              <SelectItem value=\"satellite\">Satélite</SelectItem>\n              <SelectItem value=\"terrain\">Terreno</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          {realTimeEnabled && (\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Zap className=\"w-3 h-3\" />\n              Tiempo Real\n            </Badge>\n          )}\n          \n          <div className=\"flex items-center gap-4 text-sm\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n              <span>En Tránsito</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-3 rounded-full bg-purple-500\"></div>\n              <span>En Reparto</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n              <span>Entregado</span>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div \n          ref={mapContainer} \n          className={cn(\n            \"w-full bg-gray-100 rounded-b-lg\",\n            isFullscreen ? \"h-screen\" : \"h-96\"\n          )}\n          style={{ minHeight: isFullscreen ? '100vh' : '400px' }}\n        />\n        \n        {!mapLoaded && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 rounded-b-lg\">\n            <div className=\"text-center\">\n              <MapIcon className=\"w-8 h-8 text-gray-400 mx-auto mb-2 animate-pulse\" />\n              <p className=\"text-gray-500\">Cargando mapa...</p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["LogisticsMap","MAP_CONFIG","style","center","zoom","pitch","bearing","MARKER_COLORS","pending","confirmed","picked_up","in_transit","out_for_delivery","delivered","exception","cancelled","returned","shipments","selectedShipment","onShipmentSelect","realTimeEnabled","className","mapContainer","useRef","map","mapLoaded","setMapLoaded","useState","isFullscreen","setIsFullscreen","mapStyle","setMapStyle","showGeofences","setShowGeofences","showRoutes","setShowRoutes","filterStatus","setFilterStatus","markers","setMarkers","geofences","setGeofences","activeRoutes","setActiveRoutes","useEffect","current","then","maplibregl","Map","container","on","initializeMapLayers","loadInitialData","e","shipmentId","features","properties","shipment","find","s","id","toString","getCanvas","cursor","remove","useCallback","addSource","type","data","addLayer","source","paint","sampleGeofences","name","coordinates","active","updateGeofencesLayer","updateShipmentsLayer","shipmentsData","filteredShipments","filter","status","lat","Math","random","lng","geometry","shipmentNumber","shipment_number","selected","getSource","setData","geofencesData","zone","length","handleStyleChange","styleUrls","streets","satellite","terrain","setStyle","handleFullscreen","handleFitBounds","bounds","window","LngLatBounds","forEach","extend","fitBounds","padding","handleRefresh","Card","cn","CardHeader","div","CardTitle","MapIcon","CardDescription","Select","value","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","Switch","checked","onCheckedChange","size","span","Button","variant","onClick","RefreshCw","Navigation","Maximize2","Badge","Zap","CardContent","ref","minHeight","p"],"mappings":"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"}