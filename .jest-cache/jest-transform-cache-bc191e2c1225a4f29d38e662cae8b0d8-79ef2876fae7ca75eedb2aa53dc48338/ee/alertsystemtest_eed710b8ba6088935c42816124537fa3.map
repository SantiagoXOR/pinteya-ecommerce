{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\alert-system.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ALERT SYSTEM TESTS\n// ===================================\n\nimport {\n  EnterpriseAlertSystem,\n  AlertLevel,\n  NotificationType,\n  AlertStatus,\n  enterpriseAlertSystem\n} from '@/lib/monitoring/alert-system';\n\n// Mock logger\njest.mock('@/lib/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    log: jest.fn(),\n  },\n  LogLevel: {\n    INFO: 'info',\n    WARN: 'warn',\n    ERROR: 'error',\n  },\n  LogCategory: {\n    SYSTEM: 'system',\n  },\n}));\n\n// Mock Supabase\nconst mockSupabaseInsert = jest.fn();\nconst mockSupabaseUpdate = jest.fn();\nconst mockSupabaseFrom = jest.fn(() => ({\n  insert: mockSupabaseInsert,\n  update: mockSupabaseUpdate,\n}));\n\njest.mock('@/lib/supabase', () => ({\n  getSupabaseClient: jest.fn(() => ({\n    from: mockSupabaseFrom,\n  })),\n}));\n\n// Mock cache\njest.mock('@/lib/cache-manager', () => ({\n  CacheUtils: {\n    get: jest.fn(),\n    set: jest.fn(),\n  },\n}));\n\n// Mock fetch global\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('Enterprise Alert System', () => {\n  let alertSystem: EnterpriseAlertSystem;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n    alertSystem = new EnterpriseAlertSystem();\n    \n    // Mock successful database operations\n    mockSupabaseInsert.mockResolvedValue({ error: null });\n    mockSupabaseUpdate.mockResolvedValue({ error: null });\n    mockFetch.mockResolvedValue({\n      ok: true,\n      status: 200,\n      statusText: 'OK'\n    });\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n    alertSystem.destroy();\n  });\n\n  describe('Configuración de canales', () => {\n    test('debe configurar canal de notificación', () => {\n      const channel = {\n        id: 'test_email',\n        type: NotificationType.EMAIL,\n        name: 'Test Email Channel',\n        config: { to: 'admin@pinteya.com' },\n        enabled: true,\n        levels: [AlertLevel.CRITICAL, AlertLevel.EMERGENCY]\n      };\n\n      alertSystem.setNotificationChannel(channel);\n\n      // Verificar que no hay errores\n      expect(true).toBe(true);\n    });\n\n    test('debe configurar regla de escalamiento', () => {\n      const rule = {\n        id: 'test_escalation',\n        name: 'Test Escalation',\n        enabled: true,\n        conditions: {\n          level: AlertLevel.CRITICAL,\n          duration: 10\n        },\n        actions: {\n          escalateToLevel: AlertLevel.EMERGENCY,\n          notifyChannels: ['test_email']\n        }\n      };\n\n      alertSystem.setEscalationRule(rule);\n\n      // Verificar que no hay errores\n      expect(true).toBe(true);\n    });\n\n    test('debe configurar regla de alerta', () => {\n      const rule = {\n        id: 'test_alert',\n        name: 'Test Alert',\n        description: 'Test alert rule',\n        enabled: true,\n        metricName: 'test.metric',\n        condition: 'gt' as const,\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        cooldownMinutes: 5,\n        channels: ['default_log'],\n        escalationRules: [],\n        tags: { environment: 'test' }\n      };\n\n      alertSystem.setAlertRule(rule);\n\n      // Verificar que no hay errores\n      expect(true).toBe(true);\n    });\n  });\n\n  describe('Disparar alertas', () => {\n    beforeEach(() => {\n      // Configurar regla de alerta para tests\n      alertSystem.setAlertRule({\n        id: 'test_rule',\n        name: 'Test Rule',\n        description: 'Test alert rule',\n        enabled: true,\n        metricName: 'test.metric',\n        condition: 'gt',\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        cooldownMinutes: 5,\n        channels: ['default_log'],\n        escalationRules: [],\n        tags: {}\n      });\n    });\n\n    test('debe disparar alerta cuando se cumple condición', async () => {\n      const alert = await alertSystem.triggerAlert(\n        'test_rule',\n        'test.metric',\n        150,\n        'Test alert message'\n      );\n\n      expect(alert).toBeTruthy();\n      expect(alert?.level).toBe(AlertLevel.WARNING);\n      expect(alert?.value).toBe(150);\n      expect(alert?.threshold).toBe(100);\n      expect(alert?.status).toBe(AlertStatus.ACTIVE);\n    });\n\n    test('no debe disparar alerta si la regla está deshabilitada', async () => {\n      // Deshabilitar regla\n      alertSystem.setAlertRule({\n        id: 'disabled_rule',\n        name: 'Disabled Rule',\n        description: 'Disabled rule',\n        enabled: false,\n        metricName: 'test.metric',\n        condition: 'gt',\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        cooldownMinutes: 5,\n        channels: ['default_log'],\n        escalationRules: [],\n        tags: {}\n      });\n\n      const alert = await alertSystem.triggerAlert(\n        'disabled_rule',\n        'test.metric',\n        150\n      );\n\n      expect(alert).toBeNull();\n    });\n\n    test('no debe disparar alerta si está en cooldown', async () => {\n      // Disparar primera alerta\n      const alert1 = await alertSystem.triggerAlert(\n        'test_rule',\n        'test.metric',\n        150\n      );\n\n      expect(alert1).toBeTruthy();\n\n      // Intentar disparar segunda alerta inmediatamente\n      const alert2 = await alertSystem.triggerAlert(\n        'test_rule',\n        'test.metric',\n        160\n      );\n\n      expect(alert2).toBeNull();\n    });\n  });\n\n  describe('Gestión de alertas', () => {\n    let testAlert: any;\n\n    beforeEach(async () => {\n      // Configurar y disparar alerta para tests\n      alertSystem.setAlertRule({\n        id: 'test_rule',\n        name: 'Test Rule',\n        description: 'Test rule',\n        enabled: true,\n        metricName: 'test.metric',\n        condition: 'gt',\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        cooldownMinutes: 5,\n        channels: ['default_log'],\n        escalationRules: [],\n        tags: {}\n      });\n\n      testAlert = await alertSystem.triggerAlert(\n        'test_rule',\n        'test.metric',\n        150\n      );\n    });\n\n    test('debe reconocer alerta', async () => {\n      const success = await alertSystem.acknowledgeAlert(testAlert.id, 'admin-user');\n\n      expect(success).toBe(true);\n    });\n\n    test('debe resolver alerta', async () => {\n      const success = await alertSystem.resolveAlert(testAlert.id, 'admin-user');\n\n      expect(success).toBe(true);\n    });\n\n    test('no debe reconocer alerta inexistente', async () => {\n      const success = await alertSystem.acknowledgeAlert('nonexistent', 'admin-user');\n\n      expect(success).toBe(false);\n    });\n\n    test('no debe resolver alerta inexistente', async () => {\n      const success = await alertSystem.resolveAlert('nonexistent', 'admin-user');\n\n      expect(success).toBe(false);\n    });\n  });\n\n  describe('Notificaciones', () => {\n    test('debe enviar notificación por log', async () => {\n      // Configurar canal de log\n      alertSystem.setNotificationChannel({\n        id: 'test_log',\n        type: NotificationType.LOG,\n        name: 'Test Log',\n        config: {},\n        enabled: true,\n        levels: [AlertLevel.WARNING]\n      });\n\n      // Configurar regla con canal de log\n      alertSystem.setAlertRule({\n        id: 'log_rule',\n        name: 'Log Rule',\n        description: 'Log rule',\n        enabled: true,\n        metricName: 'test.metric',\n        condition: 'gt',\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        cooldownMinutes: 5,\n        channels: ['test_log'],\n        escalationRules: [],\n        tags: {}\n      });\n\n      const alert = await alertSystem.triggerAlert(\n        'log_rule',\n        'test.metric',\n        150\n      );\n\n      expect(alert).toBeTruthy();\n      expect(alert?.notificationsSent.length).toBeGreaterThan(0);\n    });\n\n    test('debe enviar notificación por webhook', async () => {\n      // Configurar canal de webhook\n      alertSystem.setNotificationChannel({\n        id: 'test_webhook',\n        type: NotificationType.WEBHOOK,\n        name: 'Test Webhook',\n        config: { url: 'https://example.com/webhook' },\n        enabled: true,\n        levels: [AlertLevel.CRITICAL]\n      });\n\n      // Configurar regla con canal de webhook\n      alertSystem.setAlertRule({\n        id: 'webhook_rule',\n        name: 'Webhook Rule',\n        description: 'Webhook rule',\n        enabled: true,\n        metricName: 'test.metric',\n        condition: 'gt',\n        threshold: 100,\n        level: AlertLevel.CRITICAL,\n        cooldownMinutes: 5,\n        channels: ['test_webhook'],\n        escalationRules: [],\n        tags: {}\n      });\n\n      const alert = await alertSystem.triggerAlert(\n        'webhook_rule',\n        'test.metric',\n        150\n      );\n\n      expect(alert).toBeTruthy();\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://example.com/webhook',\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json'\n          }),\n          body: expect.stringContaining('\"source\":\"pinteya-ecommerce\"')\n        })\n      );\n    });\n\n    test('no debe enviar notificación si el canal está deshabilitado', async () => {\n      // Configurar canal deshabilitado\n      alertSystem.setNotificationChannel({\n        id: 'disabled_channel',\n        type: NotificationType.EMAIL,\n        name: 'Disabled Channel',\n        config: { to: 'test@example.com' },\n        enabled: false,\n        levels: [AlertLevel.WARNING]\n      });\n\n      // Configurar regla con canal deshabilitado\n      alertSystem.setAlertRule({\n        id: 'disabled_rule',\n        name: 'Disabled Rule',\n        description: 'Rule with disabled channel',\n        enabled: true,\n        metricName: 'test.metric',\n        condition: 'gt',\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        cooldownMinutes: 5,\n        channels: ['disabled_channel'],\n        escalationRules: [],\n        tags: {}\n      });\n\n      const alert = await alertSystem.triggerAlert(\n        'disabled_rule',\n        'test.metric',\n        150\n      );\n\n      expect(alert).toBeTruthy();\n      expect(alert?.notificationsSent.length).toBe(0);\n    });\n  });\n\n  describe('Escalamiento', () => {\n    test('debe escalar alerta después del tiempo configurado', async () => {\n      // Configurar regla de escalamiento\n      alertSystem.setEscalationRule({\n        id: 'test_escalation',\n        name: 'Test Escalation',\n        enabled: true,\n        conditions: {\n          level: AlertLevel.WARNING,\n          duration: 1 // 1 minuto\n        },\n        actions: {\n          escalateToLevel: AlertLevel.CRITICAL,\n          notifyChannels: ['default_log']\n        }\n      });\n\n      // Configurar regla de alerta con escalamiento\n      alertSystem.setAlertRule({\n        id: 'escalation_rule',\n        name: 'Escalation Rule',\n        description: 'Rule with escalation',\n        enabled: true,\n        metricName: 'test.metric',\n        condition: 'gt',\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        cooldownMinutes: 5,\n        channels: ['default_log'],\n        escalationRules: ['test_escalation'],\n        tags: {}\n      });\n\n      // Disparar alerta\n      const alert = await alertSystem.triggerAlert(\n        'escalation_rule',\n        'test.metric',\n        150\n      );\n\n      expect(alert).toBeTruthy();\n      expect(alert?.level).toBe(AlertLevel.WARNING);\n\n      // Avanzar tiempo para activar escalamiento\n      jest.advanceTimersByTime(2 * 60 * 1000); // 2 minutos\n\n      // El escalamiento se verifica automáticamente\n      expect(true).toBe(true);\n    });\n  });\n\n  describe('Instancia singleton', () => {\n    test('debe retornar la misma instancia', () => {\n      const instance1 = EnterpriseAlertSystem.getInstance();\n      const instance2 = EnterpriseAlertSystem.getInstance();\n\n      expect(instance1).toBe(instance2);\n    });\n\n    test('debe usar la instancia global', () => {\n      expect(enterpriseAlertSystem).toBeInstanceOf(EnterpriseAlertSystem);\n    });\n  });\n\n  describe('Limpieza de recursos', () => {\n    test('debe limpiar recursos correctamente', () => {\n      const system = new EnterpriseAlertSystem();\n      \n      expect(() => system.destroy()).not.toThrow();\n    });\n  });\n});\n"],"names":["jest","mock","logger","info","fn","warn","error","log","LogLevel","INFO","WARN","ERROR","LogCategory","SYSTEM","getSupabaseClient","from","mockSupabaseFrom","CacheUtils","get","set","mockSupabaseInsert","mockSupabaseUpdate","insert","update","mockFetch","global","fetch","describe","alertSystem","beforeEach","clearAllMocks","useFakeTimers","EnterpriseAlertSystem","mockResolvedValue","ok","status","statusText","afterEach","useRealTimers","destroy","test","channel","id","type","NotificationType","EMAIL","name","config","to","enabled","levels","AlertLevel","CRITICAL","EMERGENCY","setNotificationChannel","expect","toBe","rule","conditions","level","duration","actions","escalateToLevel","notifyChannels","setEscalationRule","description","metricName","condition","threshold","WARNING","cooldownMinutes","channels","escalationRules","tags","environment","setAlertRule","alert","triggerAlert","toBeTruthy","value","AlertStatus","ACTIVE","toBeNull","alert1","alert2","testAlert","success","acknowledgeAlert","resolveAlert","LOG","notificationsSent","length","toBeGreaterThan","WEBHOOK","url","toHaveBeenCalledWith","objectContaining","method","headers","body","stringContaining","advanceTimersByTime","instance1","getInstance","instance2","enterpriseAlertSystem","toBeInstanceOf","system","not","toThrow"],"mappings":"AAAA,sCAAsC;AACtC,0CAA0C;AAC1C,sCAAsC;;AAUtC,cAAc;AACdA,KAAKC,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC/BC,QAAQ;YACNC,MAAMH,KAAKI,EAAE;YACbC,MAAML,KAAKI,EAAE;YACbE,OAAON,KAAKI,EAAE;YACdG,KAAKP,KAAKI,EAAE;QACd;QACAI,UAAU;YACRC,MAAM;YACNC,MAAM;YACNC,OAAO;QACT;QACAC,aAAa;YACXC,QAAQ;QACV;IACF,CAAA;AAUAb,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCa,mBAAmBd,KAAKI,EAAE,CAAC,IAAO,CAAA;gBAChCW,MAAMC;YACR,CAAA;IACF,CAAA;AAEA,aAAa;AACbhB,KAAKC,IAAI,CAAC,uBAAuB,IAAO,CAAA;QACtCgB,YAAY;YACVC,KAAKlB,KAAKI,EAAE;YACZe,KAAKnB,KAAKI,EAAE;QACd;IACF,CAAA;;;;6BAxCO;AAoBP,gBAAgB;AAChB,MAAMgB,qBAAqBpB,KAAKI,EAAE;AAClC,MAAMiB,qBAAqBrB,KAAKI,EAAE;AAClC,MAAMY,mBAAmBhB,KAAKI,EAAE,CAAC,IAAO,CAAA;QACtCkB,QAAQF;QACRG,QAAQF;IACV,CAAA;AAgBA,oBAAoB;AACpB,MAAMG,YAAYxB,KAAKI,EAAE;AACzBqB,OAAOC,KAAK,GAAGF;AAEfG,SAAS,2BAA2B;IAClC,IAAIC;IAEJC,WAAW;QACT7B,KAAK8B,aAAa;QAClB9B,KAAK+B,aAAa;QAClBH,cAAc,IAAII,kCAAqB;QAEvC,sCAAsC;QACtCZ,mBAAmBa,iBAAiB,CAAC;YAAE3B,OAAO;QAAK;QACnDe,mBAAmBY,iBAAiB,CAAC;YAAE3B,OAAO;QAAK;QACnDkB,UAAUS,iBAAiB,CAAC;YAC1BC,IAAI;YACJC,QAAQ;YACRC,YAAY;QACd;IACF;IAEAC,UAAU;QACRrC,KAAKsC,aAAa;QAClBV,YAAYW,OAAO;IACrB;IAEAZ,SAAS,4BAA4B;QACnCa,KAAK,yCAAyC;YAC5C,MAAMC,UAAU;gBACdC,IAAI;gBACJC,MAAMC,6BAAgB,CAACC,KAAK;gBAC5BC,MAAM;gBACNC,QAAQ;oBAAEC,IAAI;gBAAoB;gBAClCC,SAAS;gBACTC,QAAQ;oBAACC,uBAAU,CAACC,QAAQ;oBAAED,uBAAU,CAACE,SAAS;iBAAC;YACrD;YAEAzB,YAAY0B,sBAAsB,CAACb;YAEnC,+BAA+B;YAC/Bc,OAAO,MAAMC,IAAI,CAAC;QACpB;QAEAhB,KAAK,yCAAyC;YAC5C,MAAMiB,OAAO;gBACXf,IAAI;gBACJI,MAAM;gBACNG,SAAS;gBACTS,YAAY;oBACVC,OAAOR,uBAAU,CAACC,QAAQ;oBAC1BQ,UAAU;gBACZ;gBACAC,SAAS;oBACPC,iBAAiBX,uBAAU,CAACE,SAAS;oBACrCU,gBAAgB;wBAAC;qBAAa;gBAChC;YACF;YAEAnC,YAAYoC,iBAAiB,CAACP;YAE9B,+BAA+B;YAC/BF,OAAO,MAAMC,IAAI,CAAC;QACpB;QAEAhB,KAAK,mCAAmC;YACtC,MAAMiB,OAAO;gBACXf,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACkB,OAAO;gBACzBC,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAc;gBACzBC,iBAAiB,EAAE;gBACnBC,MAAM;oBAAEC,aAAa;gBAAO;YAC9B;YAEA9C,YAAY+C,YAAY,CAAClB;YAEzB,+BAA+B;YAC/BF,OAAO,MAAMC,IAAI,CAAC;QACpB;IACF;IAEA7B,SAAS,oBAAoB;QAC3BE,WAAW;YACT,wCAAwC;YACxCD,YAAY+C,YAAY,CAAC;gBACvBjC,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACkB,OAAO;gBACzBC,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAc;gBACzBC,iBAAiB,EAAE;gBACnBC,MAAM,CAAC;YACT;QACF;QAEAjC,KAAK,mDAAmD;YACtD,MAAMoC,QAAQ,MAAMhD,YAAYiD,YAAY,CAC1C,aACA,eACA,KACA;YAGFtB,OAAOqB,OAAOE,UAAU;YACxBvB,OAAOqB,OAAOjB,OAAOH,IAAI,CAACL,uBAAU,CAACkB,OAAO;YAC5Cd,OAAOqB,OAAOG,OAAOvB,IAAI,CAAC;YAC1BD,OAAOqB,OAAOR,WAAWZ,IAAI,CAAC;YAC9BD,OAAOqB,OAAOzC,QAAQqB,IAAI,CAACwB,wBAAW,CAACC,MAAM;QAC/C;QAEAzC,KAAK,0DAA0D;YAC7D,qBAAqB;YACrBZ,YAAY+C,YAAY,CAAC;gBACvBjC,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACkB,OAAO;gBACzBC,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAc;gBACzBC,iBAAiB,EAAE;gBACnBC,MAAM,CAAC;YACT;YAEA,MAAMG,QAAQ,MAAMhD,YAAYiD,YAAY,CAC1C,iBACA,eACA;YAGFtB,OAAOqB,OAAOM,QAAQ;QACxB;QAEA1C,KAAK,+CAA+C;YAClD,0BAA0B;YAC1B,MAAM2C,SAAS,MAAMvD,YAAYiD,YAAY,CAC3C,aACA,eACA;YAGFtB,OAAO4B,QAAQL,UAAU;YAEzB,kDAAkD;YAClD,MAAMM,SAAS,MAAMxD,YAAYiD,YAAY,CAC3C,aACA,eACA;YAGFtB,OAAO6B,QAAQF,QAAQ;QACzB;IACF;IAEAvD,SAAS,sBAAsB;QAC7B,IAAI0D;QAEJxD,WAAW;YACT,0CAA0C;YAC1CD,YAAY+C,YAAY,CAAC;gBACvBjC,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACkB,OAAO;gBACzBC,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAc;gBACzBC,iBAAiB,EAAE;gBACnBC,MAAM,CAAC;YACT;YAEAY,YAAY,MAAMzD,YAAYiD,YAAY,CACxC,aACA,eACA;QAEJ;QAEArC,KAAK,yBAAyB;YAC5B,MAAM8C,UAAU,MAAM1D,YAAY2D,gBAAgB,CAACF,UAAU3C,EAAE,EAAE;YAEjEa,OAAO+B,SAAS9B,IAAI,CAAC;QACvB;QAEAhB,KAAK,wBAAwB;YAC3B,MAAM8C,UAAU,MAAM1D,YAAY4D,YAAY,CAACH,UAAU3C,EAAE,EAAE;YAE7Da,OAAO+B,SAAS9B,IAAI,CAAC;QACvB;QAEAhB,KAAK,wCAAwC;YAC3C,MAAM8C,UAAU,MAAM1D,YAAY2D,gBAAgB,CAAC,eAAe;YAElEhC,OAAO+B,SAAS9B,IAAI,CAAC;QACvB;QAEAhB,KAAK,uCAAuC;YAC1C,MAAM8C,UAAU,MAAM1D,YAAY4D,YAAY,CAAC,eAAe;YAE9DjC,OAAO+B,SAAS9B,IAAI,CAAC;QACvB;IACF;IAEA7B,SAAS,kBAAkB;QACzBa,KAAK,oCAAoC;YACvC,0BAA0B;YAC1BZ,YAAY0B,sBAAsB,CAAC;gBACjCZ,IAAI;gBACJC,MAAMC,6BAAgB,CAAC6C,GAAG;gBAC1B3C,MAAM;gBACNC,QAAQ,CAAC;gBACTE,SAAS;gBACTC,QAAQ;oBAACC,uBAAU,CAACkB,OAAO;iBAAC;YAC9B;YAEA,oCAAoC;YACpCzC,YAAY+C,YAAY,CAAC;gBACvBjC,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACkB,OAAO;gBACzBC,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAW;gBACtBC,iBAAiB,EAAE;gBACnBC,MAAM,CAAC;YACT;YAEA,MAAMG,QAAQ,MAAMhD,YAAYiD,YAAY,CAC1C,YACA,eACA;YAGFtB,OAAOqB,OAAOE,UAAU;YACxBvB,OAAOqB,OAAOc,kBAAkBC,QAAQC,eAAe,CAAC;QAC1D;QAEApD,KAAK,wCAAwC;YAC3C,8BAA8B;YAC9BZ,YAAY0B,sBAAsB,CAAC;gBACjCZ,IAAI;gBACJC,MAAMC,6BAAgB,CAACiD,OAAO;gBAC9B/C,MAAM;gBACNC,QAAQ;oBAAE+C,KAAK;gBAA8B;gBAC7C7C,SAAS;gBACTC,QAAQ;oBAACC,uBAAU,CAACC,QAAQ;iBAAC;YAC/B;YAEA,wCAAwC;YACxCxB,YAAY+C,YAAY,CAAC;gBACvBjC,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACC,QAAQ;gBAC1BkB,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAe;gBAC1BC,iBAAiB,EAAE;gBACnBC,MAAM,CAAC;YACT;YAEA,MAAMG,QAAQ,MAAMhD,YAAYiD,YAAY,CAC1C,gBACA,eACA;YAGFtB,OAAOqB,OAAOE,UAAU;YACxBvB,OAAO/B,WAAWuE,oBAAoB,CACpC,+BACAxC,OAAOyC,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRC,SAAS3C,OAAOyC,gBAAgB,CAAC;oBAC/B,gBAAgB;gBAClB;gBACAG,MAAM5C,OAAO6C,gBAAgB,CAAC;YAChC;QAEJ;QAEA5D,KAAK,8DAA8D;YACjE,iCAAiC;YACjCZ,YAAY0B,sBAAsB,CAAC;gBACjCZ,IAAI;gBACJC,MAAMC,6BAAgB,CAACC,KAAK;gBAC5BC,MAAM;gBACNC,QAAQ;oBAAEC,IAAI;gBAAmB;gBACjCC,SAAS;gBACTC,QAAQ;oBAACC,uBAAU,CAACkB,OAAO;iBAAC;YAC9B;YAEA,2CAA2C;YAC3CzC,YAAY+C,YAAY,CAAC;gBACvBjC,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACkB,OAAO;gBACzBC,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAmB;gBAC9BC,iBAAiB,EAAE;gBACnBC,MAAM,CAAC;YACT;YAEA,MAAMG,QAAQ,MAAMhD,YAAYiD,YAAY,CAC1C,iBACA,eACA;YAGFtB,OAAOqB,OAAOE,UAAU;YACxBvB,OAAOqB,OAAOc,kBAAkBC,QAAQnC,IAAI,CAAC;QAC/C;IACF;IAEA7B,SAAS,gBAAgB;QACvBa,KAAK,sDAAsD;YACzD,mCAAmC;YACnCZ,YAAYoC,iBAAiB,CAAC;gBAC5BtB,IAAI;gBACJI,MAAM;gBACNG,SAAS;gBACTS,YAAY;oBACVC,OAAOR,uBAAU,CAACkB,OAAO;oBACzBT,UAAU,EAAE,WAAW;gBACzB;gBACAC,SAAS;oBACPC,iBAAiBX,uBAAU,CAACC,QAAQ;oBACpCW,gBAAgB;wBAAC;qBAAc;gBACjC;YACF;YAEA,8CAA8C;YAC9CnC,YAAY+C,YAAY,CAAC;gBACvBjC,IAAI;gBACJI,MAAM;gBACNmB,aAAa;gBACbhB,SAAS;gBACTiB,YAAY;gBACZC,WAAW;gBACXC,WAAW;gBACXT,OAAOR,uBAAU,CAACkB,OAAO;gBACzBC,iBAAiB;gBACjBC,UAAU;oBAAC;iBAAc;gBACzBC,iBAAiB;oBAAC;iBAAkB;gBACpCC,MAAM,CAAC;YACT;YAEA,kBAAkB;YAClB,MAAMG,QAAQ,MAAMhD,YAAYiD,YAAY,CAC1C,mBACA,eACA;YAGFtB,OAAOqB,OAAOE,UAAU;YACxBvB,OAAOqB,OAAOjB,OAAOH,IAAI,CAACL,uBAAU,CAACkB,OAAO;YAE5C,2CAA2C;YAC3CrE,KAAKqG,mBAAmB,CAAC,IAAI,KAAK,OAAO,YAAY;YAErD,8CAA8C;YAC9C9C,OAAO,MAAMC,IAAI,CAAC;QACpB;IACF;IAEA7B,SAAS,uBAAuB;QAC9Ba,KAAK,oCAAoC;YACvC,MAAM8D,YAAYtE,kCAAqB,CAACuE,WAAW;YACnD,MAAMC,YAAYxE,kCAAqB,CAACuE,WAAW;YAEnDhD,OAAO+C,WAAW9C,IAAI,CAACgD;QACzB;QAEAhE,KAAK,iCAAiC;YACpCe,OAAOkD,kCAAqB,EAAEC,cAAc,CAAC1E,kCAAqB;QACpE;IACF;IAEAL,SAAS,wBAAwB;QAC/Ba,KAAK,uCAAuC;YAC1C,MAAMmE,SAAS,IAAI3E,kCAAqB;YAExCuB,OAAO,IAAMoD,OAAOpE,OAAO,IAAIqE,GAAG,CAACC,OAAO;QAC5C;IACF;AACF"}