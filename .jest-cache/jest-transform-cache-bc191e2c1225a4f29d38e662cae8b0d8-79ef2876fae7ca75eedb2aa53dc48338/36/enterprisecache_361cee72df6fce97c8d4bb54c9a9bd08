32fdf1fb885f82599212ca3b0c5947b8
/**
 * Sistema de Cache Enterprise
 * Cache inteligente para utilidades de autenticación con invalidación automática
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get cacheAuthContext () {
        return cacheAuthContext;
    },
    get cacheStats () {
        return cacheStats;
    },
    get cacheUser () {
        return cacheUser;
    },
    get cacheUserPermissions () {
        return cacheUserPermissions;
    },
    get clearCache () {
        return clearCache;
    },
    get enterpriseCache () {
        return enterpriseCache;
    },
    get getCacheStats () {
        return getCacheStats;
    },
    get getCachedAuthContext () {
        return getCachedAuthContext;
    },
    get getCachedStats () {
        return getCachedStats;
    },
    get getCachedUser () {
        return getCachedUser;
    },
    get getCachedUserPermissions () {
        return getCachedUserPermissions;
    },
    get invalidateAuthContext () {
        return invalidateAuthContext;
    },
    get invalidateCachePattern () {
        return invalidateCachePattern;
    },
    get invalidateUser () {
        return invalidateUser;
    },
    get invalidateUserCache () {
        return invalidateUserCache;
    },
    get invalidateUserPermissions () {
        return invalidateUserPermissions;
    },
    get withCache () {
        return withCache;
    },
    get withResponseCache () {
        return withResponseCache;
    }
});
// =====================================================
// CONFIGURACIÓN DE CACHE
// =====================================================
const CACHE_CONFIG = {
    // TTL por tipo de dato (en milisegundos)
    ttl: {
        user: 5 * 60 * 1000,
        permissions: 10 * 60 * 1000,
        session: 2 * 60 * 1000,
        auth: 1 * 60 * 1000,
        stats: 30 * 60 * 1000 // 30 minutos para estadísticas
    },
    // Límites de cache
    maxEntries: 1000,
    cleanupInterval: 5 * 60 * 1000,
    // Prefijos para diferentes tipos de datos
    prefixes: {
        user: 'user:',
        permissions: 'perms:',
        session: 'session:',
        auth: 'auth:',
        stats: 'stats:'
    }
};
// =====================================================
// IMPLEMENTACIÓN DE CACHE EN MEMORIA
// =====================================================
class EnterpriseCache {
    constructor(){
        this.cache = new Map();
        this.stats = {
            hits: 0,
            misses: 0
        };
        this.startCleanupTimer();
    }
    /**
   * Obtiene un valor del cache
   */ get(key) {
        const entry = this.cache.get(key);
        if (!entry) {
            this.stats.misses++;
            return null;
        }
        // Verificar si ha expirado
        if (Date.now() > entry.timestamp + entry.ttl) {
            this.cache.delete(key);
            this.stats.misses++;
            return null;
        }
        this.stats.hits++;
        return entry.data;
    }
    /**
   * Almacena un valor en el cache
   */ set(key, data, ttl) {
        // Verificar límite de entradas
        if (this.cache.size >= CACHE_CONFIG.maxEntries) {
            this.evictOldest();
        }
        const entry = {
            data,
            timestamp: Date.now(),
            ttl: ttl || CACHE_CONFIG.ttl.user,
            key
        };
        this.cache.set(key, entry);
    }
    /**
   * Elimina una entrada del cache
   */ delete(key) {
        return this.cache.delete(key);
    }
    /**
   * Elimina entradas por patrón
   */ deletePattern(pattern) {
        let deleted = 0;
        const regex = new RegExp(pattern.replace('*', '.*'));
        for (const key of this.cache.keys()){
            if (regex.test(key)) {
                this.cache.delete(key);
                deleted++;
            }
        }
        return deleted;
    }
    /**
   * Limpia todo el cache
   */ clear() {
        this.cache.clear();
        this.stats.hits = 0;
        this.stats.misses = 0;
    }
    /**
   * Obtiene estadísticas del cache
   */ getStats() {
        const total = this.stats.hits + this.stats.misses;
        const hitRate = total > 0 ? this.stats.hits / total * 100 : 0;
        // Estimar uso de memoria (aproximado)
        const memoryUsage = JSON.stringify([
            ...this.cache.entries()
        ]).length;
        return {
            hits: this.stats.hits,
            misses: this.stats.misses,
            entries: this.cache.size,
            hitRate: Math.round(hitRate * 100) / 100,
            memoryUsage
        };
    }
    /**
   * Elimina entradas expiradas
   */ cleanup() {
        const now = Date.now();
        let cleaned = 0;
        for (const [key, entry] of this.cache.entries()){
            if (now > entry.timestamp + entry.ttl) {
                this.cache.delete(key);
                cleaned++;
            }
        }
        if (cleaned > 0) {
            console.log(`[ENTERPRISE_CACHE] Limpiadas ${cleaned} entradas expiradas`);
        }
    }
    /**
   * Elimina la entrada más antigua
   */ evictOldest() {
        let oldestKey = '';
        let oldestTime = Date.now();
        for (const [key, entry] of this.cache.entries()){
            if (entry.timestamp < oldestTime) {
                oldestTime = entry.timestamp;
                oldestKey = key;
            }
        }
        if (oldestKey) {
            this.cache.delete(oldestKey);
        }
    }
    /**
   * Inicia el timer de limpieza automática
   */ startCleanupTimer() {
        this.cleanupTimer = setInterval(()=>{
            this.cleanup();
        }, CACHE_CONFIG.cleanupInterval);
    }
    /**
   * Detiene el timer de limpieza
   */ destroy() {
        if (this.cleanupTimer) {
            clearInterval(this.cleanupTimer);
        }
        this.clear();
    }
}
// Instancia global del cache
const enterpriseCache = new EnterpriseCache();
function cacheUser(userId, user) {
    const key = CACHE_CONFIG.prefixes.user + userId;
    enterpriseCache.set(key, user, CACHE_CONFIG.ttl.user);
}
function getCachedUser(userId) {
    const key = CACHE_CONFIG.prefixes.user + userId;
    return enterpriseCache.get(key);
}
function invalidateUser(userId) {
    const key = CACHE_CONFIG.prefixes.user + userId;
    enterpriseCache.delete(key);
}
function cacheUserPermissions(userId, permissions) {
    const key = CACHE_CONFIG.prefixes.permissions + userId;
    enterpriseCache.set(key, permissions, CACHE_CONFIG.ttl.permissions);
}
function getCachedUserPermissions(userId) {
    const key = CACHE_CONFIG.prefixes.permissions + userId;
    return enterpriseCache.get(key);
}
function invalidateUserPermissions(userId) {
    const key = CACHE_CONFIG.prefixes.permissions + userId;
    enterpriseCache.delete(key);
}
function cacheAuthContext(userId, context) {
    const key = CACHE_CONFIG.prefixes.auth + userId;
    enterpriseCache.set(key, context, CACHE_CONFIG.ttl.auth);
}
function getCachedAuthContext(userId) {
    const key = CACHE_CONFIG.prefixes.auth + userId;
    return enterpriseCache.get(key);
}
function invalidateAuthContext(userId) {
    const key = CACHE_CONFIG.prefixes.auth + userId;
    enterpriseCache.delete(key);
}
function cacheStats(key, stats) {
    const cacheKey = CACHE_CONFIG.prefixes.stats + key;
    enterpriseCache.set(cacheKey, stats, CACHE_CONFIG.ttl.stats);
}
function getCachedStats(key) {
    const cacheKey = CACHE_CONFIG.prefixes.stats + key;
    return enterpriseCache.get(cacheKey);
}
function invalidateUserCache(userId) {
    invalidateUser(userId);
    invalidateUserPermissions(userId);
    invalidateAuthContext(userId);
    // Invalidar también datos de sesión
    const sessionKey = CACHE_CONFIG.prefixes.session + userId;
    enterpriseCache.delete(sessionKey);
}
function invalidateCachePattern(pattern) {
    return enterpriseCache.deletePattern(pattern);
}
function getCacheStats() {
    return enterpriseCache.getStats();
}
function clearCache() {
    enterpriseCache.clear();
}
async function withCache(key, fetcher, ttl) {
    // Intentar obtener del cache
    const cached = enterpriseCache.get(key);
    if (cached !== null) {
        return cached;
    }
    // Si no está en cache, ejecutar fetcher
    const data = await fetcher();
    // Almacenar en cache
    enterpriseCache.set(key, data, ttl);
    return data;
}
function withResponseCache(ttl = CACHE_CONFIG.ttl.user) {
    return function(handler) {
        return async (request, ...args)=>{
            // Generar clave de cache basada en URL y parámetros
            const url = request.url || request.nextUrl?.pathname || 'unknown';
            const method = request.method || 'GET';
            const cacheKey = `response:${method}:${url}`;
            // Solo cachear GET requests
            if (method === 'GET') {
                const cached = enterpriseCache.get(cacheKey);
                if (cached) {
                    return cached;
                }
            }
            // Ejecutar handler
            const response = await handler(request, ...args);
            // Cachear respuesta exitosa para GET requests
            if (method === 'GET' && response && response.status === 200) {
                enterpriseCache.set(cacheKey, response, ttl);
            }
            return response;
        };
    };
}

//# sourceMappingURL=data:application/json;base64,