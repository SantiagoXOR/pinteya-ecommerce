4efec7b95a25125fa502ccf9af9d9f9d
// ===================================
// PINTEYA E-COMMERCE - CART PERSISTENCE MIDDLEWARE
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cartPersistenceMiddleware: function() {
        return cartPersistenceMiddleware;
    },
    clearCartFromStorage: function() {
        return clearCartFromStorage;
    },
    loadCartFromStorage: function() {
        return loadCartFromStorage;
    },
    loadUserCart: function() {
        return loadUserCart;
    },
    migrateTemporaryCart: function() {
        return migrateTemporaryCart;
    },
    saveUserCart: function() {
        return saveUserCart;
    },
    useCartPersistence: function() {
        return useCartPersistence;
    }
});
// Clave para localStorage
const CART_STORAGE_KEY = 'pinteya-cart';
const loadCartFromStorage = ()=>{
    // Solo ejecutar en el cliente
    if (typeof window === 'undefined') {
        return [];
    }
    try {
        const stored = localStorage.getItem(CART_STORAGE_KEY);
        if (!stored) {
            return [];
        }
        const parsed = JSON.parse(stored);
        // Verificar que no sea muy antiguo (7 días)
        const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 días en ms
        const isExpired = Date.now() - parsed.timestamp > maxAge;
        if (isExpired) {
            localStorage.removeItem(CART_STORAGE_KEY);
            return [];
        }
        return parsed.items || [];
    } catch (error) {
        console.warn('Error loading cart from localStorage:', error);
        // Limpiar localStorage corrupto
        localStorage.removeItem(CART_STORAGE_KEY);
        return [];
    }
};
// Función para guardar el carrito en localStorage
const saveCartToStorage = (cartItems)=>{
    // Solo ejecutar en el cliente
    if (typeof window === 'undefined') {
        return;
    }
    try {
        // Si el carrito está vacío, limpiar localStorage
        if (cartItems.length === 0) {
            localStorage.removeItem(CART_STORAGE_KEY);
            return;
        }
        const dataToStore = {
            items: cartItems,
            timestamp: Date.now(),
            version: '1.0.0'
        };
        localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(dataToStore));
    } catch (error) {
        console.warn('Error saving cart to localStorage:', error);
    }
};
const clearCartFromStorage = ()=>{
    if (typeof window === 'undefined') {
        return;
    }
    try {
        localStorage.removeItem(CART_STORAGE_KEY);
    } catch (error) {
        console.warn('Error clearing cart from localStorage:', error);
    }
};
// Variable para manejar debounce
let saveTimeout = null;
const cartPersistenceMiddleware = (store)=>(next)=>(action)=>{
            // Ejecutar la acción primero
            const result = next(action);
            // Solo persistir acciones relacionadas con el carrito
            if (action.type?.startsWith('cart/')) {
                const state = store.getState();
                const cartItems = state.cartReducer.items;
                // Limpiar timeout anterior si existe
                if (saveTimeout) {
                    clearTimeout(saveTimeout);
                }
                // Guardar en localStorage con debounce más largo para evitar escrituras excesivas
                saveTimeout = setTimeout(()=>{
                    // Solo guardar si hay items o si se está vaciando el carrito
                    if (cartItems.length > 0 || action.type === 'cart/removeAllItemsFromCart') {
                        saveCartToStorage(cartItems);
                    }
                    saveTimeout = null;
                }, 500); // Aumentado de 100ms a 500ms
            }
            return result;
        };
const useCartPersistence = ()=>{
    const loadCart = ()=>loadCartFromStorage();
    const clearCart = ()=>clearCartFromStorage();
    return {
        loadCart,
        clearCart
    };
};
const migrateTemporaryCart = async (temporaryCartItems, userId)=>{
    try {
        // Aquí se podría implementar la lógica para guardar el carrito
        // en la base de datos asociado al usuario
        // Por ahora, simplemente limpiamos el localStorage
        // ya que el carrito se mantendrá en Redux
        console.log(`Migrating ${temporaryCartItems.length} items for user ${userId}`);
        // En una implementación completa, aquí haríamos:
        // 1. Enviar los items al backend para asociarlos al usuario
        // 2. Limpiar el localStorage
        // 3. Cargar el carrito del usuario desde el backend
        return true;
    } catch (error) {
        console.error('Error migrating temporary cart:', error);
        return false;
    }
};
const loadUserCart = async (userId)=>{
    try {
        // Aquí se implementaría la lógica para cargar el carrito
        // del usuario desde la base de datos
        console.log(`Loading cart for user ${userId}`);
        // En una implementación completa, aquí haríamos:
        // 1. Hacer una petición al backend para obtener el carrito del usuario
        // 2. Retornar los items del carrito
        // Por ahora, retornamos un array vacío
        return [];
    } catch (error) {
        console.error('Error loading user cart:', error);
        return [];
    }
};
const saveUserCart = async (userId, cartItems)=>{
    try {
        // Aquí se implementaría la lógica para guardar el carrito
        // del usuario en la base de datos
        console.log(`Saving ${cartItems.length} items for user ${userId}`);
        // En una implementación completa, aquí haríamos:
        // 1. Enviar los items al backend para guardarlos asociados al usuario
        // 2. Manejar la respuesta del backend
        return true;
    } catch (error) {
        console.error('Error saving user cart:', error);
        return false;
    }
};

//# sourceMappingURL=data:application/json;base64,