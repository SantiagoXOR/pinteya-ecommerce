171ed3645452804b016492c1763c13da
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get MonitoringProvider () {
        return MonitoringProvider;
    },
    get MonitoringStatus () {
        return MonitoringStatus;
    },
    get useErrorReporting () {
        return useErrorReporting;
    },
    get useMonitoring () {
        return useMonitoring;
    },
    get useMonitoringStats () {
        return useMonitoringStats;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _proactivemonitoring = require("../lib/monitoring/proactive-monitoring");
const _logger = require("../lib/logger");
const _ErrorBoundary = require("../components/ErrorBoundary");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const MonitoringContext = /*#__PURE__*/ (0, _react.createContext)({
    isInitialized: false,
    isMonitoring: false,
    error: null
});
const useMonitoring = ()=>{
    const context = (0, _react.useContext)(MonitoringContext);
    if (!context) {
        throw new Error('useMonitoring must be used within a MonitoringProvider');
    }
    return context;
};
function MonitoringProvider({ children, autoStart = true, enableErrorBoundary = true }) {
    const [isInitialized, setIsInitialized] = (0, _react.useState)(false);
    const [isMonitoring, setIsMonitoring] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        const initializeMonitoring = async ()=>{
            try {
                _logger.logger.info(_logger.LogLevel.INFO, 'Initializing proactive monitoring system', {}, _logger.LogCategory.SYSTEM);
                // Configurar el sistema de monitoreo
                _proactivemonitoring.proactiveMonitoring.updateConfig({
                    enabled: true,
                    checkInterval: 30,
                    errorThreshold: 5,
                    responseTimeThreshold: 2000,
                    memoryThreshold: 80,
                    cpuThreshold: 80,
                    enableAutoRecovery: false,
                    notificationChannels: [
                        'email',
                        'slack'
                    ]
                });
                // Iniciar monitoreo automáticamente si está habilitado
                if (autoStart) {
                    (0, _proactivemonitoring.startMonitoring)();
                    setIsMonitoring(true);
                    _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring started automatically', {}, _logger.LogCategory.SYSTEM);
                }
                // Configurar listeners para errores no capturados
                if (typeof window !== 'undefined') {
                    // Errores de JavaScript no capturados
                    window.addEventListener('error', handleGlobalError);
                    // Promesas rechazadas no capturadas
                    window.addEventListener('unhandledrejection', handleUnhandledRejection);
                    // Errores de recursos (imágenes, scripts, etc.)
                    window.addEventListener('error', handleResourceError, true);
                }
                setIsInitialized(true);
                setError(null);
                _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring system initialized successfully', {
                    autoStart,
                    enableErrorBoundary
                }, _logger.LogCategory.SYSTEM);
            } catch (err) {
                const errorMessage = err instanceof Error ? err.message : 'Failed to initialize monitoring';
                setError(errorMessage);
                _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to initialize monitoring system', {
                    error: errorMessage
                }, _logger.LogCategory.SYSTEM);
            }
        };
        initializeMonitoring();
        // Cleanup
        return ()=>{
            if (typeof window !== 'undefined') {
                window.removeEventListener('error', handleGlobalError);
                window.removeEventListener('unhandledrejection', handleUnhandledRejection);
                window.removeEventListener('error', handleResourceError, true);
            }
        };
    }, [
        autoStart
    ]);
    const handleGlobalError = async (event)=>{
        try {
            await _proactivemonitoring.proactiveMonitoring.reportError(event.error || new Error(event.message), {
                source: 'global_error_handler',
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                timestamp: new Date().toISOString(),
                url: window.location.href,
                userAgent: navigator.userAgent
            });
        } catch (reportingError) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to report global error', {
                originalError: event.message,
                reportingError: reportingError instanceof Error ? reportingError.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        }
    };
    const handleUnhandledRejection = async (event)=>{
        try {
            const error = event.reason instanceof Error ? event.reason : new Error(String(event.reason));
            await _proactivemonitoring.proactiveMonitoring.reportError(error, {
                source: 'unhandled_promise_rejection',
                timestamp: new Date().toISOString(),
                url: window.location.href,
                userAgent: navigator.userAgent,
                reason: String(event.reason)
            });
        } catch (reportingError) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to report unhandled promise rejection', {
                originalReason: String(event.reason),
                reportingError: reportingError instanceof Error ? reportingError.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        }
    };
    const handleResourceError = async (event)=>{
        if (event.target && event.target !== window) {
            const target = event.target;
            const tagName = target.tagName?.toLowerCase();
            const src = target.src || target.href;
            if (src && [
                'img',
                'script',
                'link',
                'iframe'
            ].includes(tagName)) {
                try {
                    await _proactivemonitoring.proactiveMonitoring.reportError(new Error(`Resource loading failed: ${tagName} - ${src}`), {
                        source: 'resource_error',
                        resourceType: tagName,
                        resourceUrl: src,
                        timestamp: new Date().toISOString(),
                        url: window.location.href
                    });
                } catch (reportingError) {
                    _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to report resource error', {
                        resourceUrl: src,
                        resourceType: tagName,
                        reportingError: reportingError instanceof Error ? reportingError.message : 'Unknown error'
                    }, _logger.LogCategory.SYSTEM);
                }
            }
        }
    };
    const contextValue = {
        isInitialized,
        isMonitoring,
        error
    };
    const content = /*#__PURE__*/ (0, _jsxruntime.jsx)(MonitoringContext.Provider, {
        value: contextValue,
        children: children
    });
    // Envolver con Error Boundary si está habilitado
    if (enableErrorBoundary) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundaryWrapper, {
            showDetails: process.env.NODE_ENV === 'development',
            enableReporting: true,
            children: content
        });
    }
    return content;
}
function useErrorReporting() {
    const { isInitialized } = useMonitoring();
    const reportError = _react.default.useCallback(async (error, context)=>{
        if (!isInitialized) {
            _logger.logger.warn(_logger.LogLevel.WARN, 'Monitoring not initialized, error not reported', {
                error: error instanceof Error ? error.message : error
            }, _logger.LogCategory.SYSTEM);
            return;
        }
        try {
            await _proactivemonitoring.proactiveMonitoring.reportError(error, {
                ...context,
                source: 'manual_report',
                timestamp: new Date().toISOString(),
                url: typeof window !== 'undefined' ? window.location.href : 'unknown'
            });
        } catch (reportingError) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to report error manually', {
                originalError: error instanceof Error ? error.message : error,
                reportingError: reportingError instanceof Error ? reportingError.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        }
    }, [
        isInitialized
    ]);
    return {
        reportError,
        isInitialized
    };
}
function useMonitoringStats() {
    const { isInitialized } = useMonitoring();
    const [stats, setStats] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(false);
    const refreshStats = _react.default.useCallback(async ()=>{
        if (!isInitialized) return;
        try {
            setLoading(true);
            const newStats = await _proactivemonitoring.proactiveMonitoring.getMonitoringStats();
            setStats(newStats);
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to fetch monitoring stats', {
                error: error instanceof Error ? error.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        } finally{
            setLoading(false);
        }
    }, [
        isInitialized
    ]);
    _react.default.useEffect(()=>{
        if (isInitialized) {
            refreshStats();
            // Actualizar estadísticas cada 30 segundos
            const interval = setInterval(refreshStats, 30000);
            return ()=>clearInterval(interval);
        }
    }, [
        isInitialized,
        refreshStats
    ]);
    return {
        stats,
        loading,
        refreshStats
    };
}
function MonitoringStatus() {
    const { isInitialized, isMonitoring, error } = useMonitoring();
    if (process.env.NODE_ENV !== 'development') {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "fixed bottom-4 right-4 z-50 bg-black text-white text-xs p-2 rounded shadow-lg",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    "Monitoring: ",
                    isInitialized ? '✅' : '❌'
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    "Active: ",
                    isMonitoring ? '✅' : '❌'
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "text-red-300",
                children: [
                    "Error: ",
                    error
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,