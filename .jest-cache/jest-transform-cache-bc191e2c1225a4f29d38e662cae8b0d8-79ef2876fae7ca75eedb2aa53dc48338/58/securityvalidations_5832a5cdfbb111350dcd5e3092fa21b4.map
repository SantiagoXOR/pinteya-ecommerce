{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\security-validations.ts"],"sourcesContent":["/**\n * Security Validations\n * Validaciones de seguridad y permisos para el sistema enterprise\n */\n\nimport { auth } from '@/auth';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { logger } from '@/lib/logger';\n\nexport type Permission = \n  | 'read:products'\n  | 'write:products'\n  | 'delete:products'\n  | 'read:orders'\n  | 'write:orders'\n  | 'delete:orders'\n  | 'read:users'\n  | 'write:users'\n  | 'delete:users'\n  | 'admin:dashboard'\n  | 'admin:settings'\n  | 'admin:reports'\n  | 'moderate:content'\n  | 'moderate:users';\n\nexport type Role = 'admin' | 'customer' | 'moderator';\n\nexport interface RolePermissions {\n  [key: string]: Permission[];\n}\n\n/**\n * Definición de permisos por rol\n */\nexport const ROLE_PERMISSIONS: RolePermissions = {\n  admin: [\n    'read:products',\n    'write:products',\n    'delete:products',\n    'read:orders',\n    'write:orders',\n    'delete:orders',\n    'read:users',\n    'write:users',\n    'delete:users',\n    'admin:dashboard',\n    'admin:settings',\n    'admin:reports',\n    'moderate:content',\n    'moderate:users',\n  ],\n  moderator: [\n    'read:products',\n    'write:products',\n    'read:orders',\n    'write:orders',\n    'read:users',\n    'moderate:content',\n    'moderate:users',\n  ],\n  customer: [\n    'read:products',\n    'read:orders',\n  ],\n};\n\n/**\n * Obtiene los permisos de un rol específico\n */\nexport function getPermissionsByRole(role: Role): Permission[] {\n  return ROLE_PERMISSIONS[role] || [];\n}\n\n/**\n * Verifica si un rol tiene un permiso específico\n */\nexport function roleHasPermission(role: Role, permission: Permission): boolean {\n  const permissions = getPermissionsByRole(role);\n  return permissions.includes(permission);\n}\n\n/**\n * Verifica si un usuario tiene un permiso específico\n */\nexport async function hasPermission(userId: string, permission: Permission): Promise<boolean> {\n  try {\n    const { data: user, error } = await supabaseAdmin\n      .from('users')\n      .select('role, permissions')\n      .eq('id', userId)\n      .eq('is_active', true)\n      .single();\n\n    if (error || !user) {\n      logger.error('Error obteniendo usuario para validación de permisos:', error);\n      return false;\n    }\n\n    // Verificar permisos del rol\n    const rolePermissions = getPermissionsByRole(user.role as Role);\n    if (rolePermissions.includes(permission)) {\n      return true;\n    }\n\n    // Verificar permisos específicos del usuario\n    const userPermissions = user.permissions || [];\n    return userPermissions.includes(permission);\n  } catch (error) {\n    logger.error('Error en hasPermission:', error);\n    return false;\n  }\n}\n\n/**\n * Verifica si un usuario tiene alguno de los permisos especificados\n */\nexport async function hasAnyPermission(userId: string, permissions: Permission[]): Promise<boolean> {\n  for (const permission of permissions) {\n    if (await hasPermission(userId, permission)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Verifica si un usuario tiene todos los permisos especificados\n */\nexport async function hasAllPermissions(userId: string, permissions: Permission[]): Promise<boolean> {\n  for (const permission of permissions) {\n    if (!(await hasPermission(userId, permission))) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Verifica si un usuario es administrador\n */\nexport async function isAdmin(userId: string): Promise<boolean> {\n  try {\n    const { data: user, error } = await supabaseAdmin\n      .from('users')\n      .select('role')\n      .eq('id', userId)\n      .eq('is_active', true)\n      .single();\n\n    if (error || !user) {\n      return false;\n    }\n\n    return user.role === 'admin';\n  } catch (error) {\n    logger.error('Error en isAdmin:', error);\n    return false;\n  }\n}\n\n/**\n * Verifica si un usuario es moderador o administrador\n */\nexport async function isModerator(userId: string): Promise<boolean> {\n  try {\n    const { data: user, error } = await supabaseAdmin\n      .from('users')\n      .select('role')\n      .eq('id', userId)\n      .eq('is_active', true)\n      .single();\n\n    if (error || !user) {\n      return false;\n    }\n\n    return ['admin', 'moderator'].includes(user.role);\n  } catch (error) {\n    logger.error('Error en isModerator:', error);\n    return false;\n  }\n}\n\n/**\n * Obtiene el rol de un usuario\n */\nexport async function getUserRole(userId: string): Promise<Role | null> {\n  try {\n    const { data: user, error } = await supabaseAdmin\n      .from('users')\n      .select('role')\n      .eq('id', userId)\n      .eq('is_active', true)\n      .single();\n\n    if (error || !user) {\n      return null;\n    }\n\n    return user.role as Role;\n  } catch (error) {\n    logger.error('Error en getUserRole:', error);\n    return null;\n  }\n}\n\n/**\n * Valida acceso a recurso específico\n */\nexport async function validateResourceAccess(\n  userId: string,\n  resourceType: 'product' | 'order' | 'user',\n  action: 'read' | 'write' | 'delete',\n  resourceId?: string\n): Promise<boolean> {\n  const permission = `${action}:${resourceType}s` as Permission;\n  \n  // Verificar permiso básico\n  if (!(await hasPermission(userId, permission))) {\n    return false;\n  }\n\n  // Validaciones adicionales por tipo de recurso\n  if (resourceType === 'order' && resourceId) {\n    // Los customers solo pueden acceder a sus propias órdenes\n    const userRole = await getUserRole(userId);\n    if (userRole === 'customer') {\n      return await validateOrderOwnership(userId, resourceId);\n    }\n  }\n\n  return true;\n}\n\n/**\n * Valida que un usuario sea propietario de una orden\n */\nasync function validateOrderOwnership(userId: string, orderId: string): Promise<boolean> {\n  try {\n    const { data: order, error } = await supabaseAdmin\n      .from('orders')\n      .select('user_id')\n      .eq('id', orderId)\n      .single();\n\n    if (error || !order) {\n      return false;\n    }\n\n    return order.user_id === userId;\n  } catch (error) {\n    logger.error('Error validando propiedad de orden:', error);\n    return false;\n  }\n}\n\n/**\n * Middleware de validación de permisos\n */\nexport function requirePermission(permission: Permission) {\n  return async (userId: string): Promise<boolean> => {\n    return await hasPermission(userId, permission);\n  };\n}\n\n/**\n * Middleware de validación de rol\n */\nexport function requireRole(role: Role) {\n  return async (userId: string): Promise<boolean> => {\n    const userRole = await getUserRole(userId);\n    return userRole === role;\n  };\n}\n\n/**\n * Middleware de validación de administrador\n */\nexport function requireAdmin() {\n  return async (userId: string): Promise<boolean> => {\n    return await isAdmin(userId);\n  };\n}\n\n/**\n * Obtiene todos los permisos de un usuario\n */\nexport async function getUserPermissions(userId: string): Promise<Permission[]> {\n  try {\n    const { data: user, error } = await supabaseAdmin\n      .from('users')\n      .select('role, permissions')\n      .eq('id', userId)\n      .eq('is_active', true)\n      .single();\n\n    if (error || !user) {\n      return [];\n    }\n\n    const rolePermissions = getPermissionsByRole(user.role as Role);\n    const userPermissions = user.permissions || [];\n    \n    // Combinar permisos del rol y permisos específicos del usuario\n    const allPermissions = [...rolePermissions, ...userPermissions];\n    \n    // Eliminar duplicados\n    return [...new Set(allPermissions)];\n  } catch (error) {\n    logger.error('Error en getUserPermissions:', error);\n    return [];\n  }\n}\n"],"names":["ROLE_PERMISSIONS","getPermissionsByRole","getUserPermissions","getUserRole","hasAllPermissions","hasAnyPermission","hasPermission","isAdmin","isModerator","requireAdmin","requirePermission","requireRole","roleHasPermission","validateResourceAccess","admin","moderator","customer","role","permission","permissions","includes","userId","data","user","error","supabaseAdmin","from","select","eq","single","logger","rolePermissions","userPermissions","resourceType","action","resourceId","userRole","validateOrderOwnership","orderId","order","user_id","allPermissions","Set"],"mappings":"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"}