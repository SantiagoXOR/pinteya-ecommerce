5f6496b89232d4c769fc4adde62f8f33
/**
 * Tests para las Utilidades de Autenticación Enterprise
 * Verifica que las nuevas utilidades enterprise funcionan correctamente
 */ // Mock de Clerk
"use strict";
jest.mock('@clerk/nextjs/server', ()=>({
        getAuth: jest.fn(),
        auth: jest.fn(),
        clerkClient: jest.fn()
    }));
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        }))
                }))
        }
    }));
// Mock de validaciones de seguridad
jest.mock('@/lib/auth/jwt-validation', ()=>({
        validateJWTIntegrity: jest.fn(),
        validateJWTPermissions: jest.fn()
    }));
jest.mock('@/lib/auth/csrf-protection', ()=>({
        validateRequestOrigin: jest.fn()
    }));
jest.mock('@/lib/auth/rate-limiting', ()=>({
        checkRateLimit: jest.fn(),
        RATE_LIMIT_CONFIGS: {
            admin: {
                windowMs: 300000,
                maxRequests: 30
            },
            general: {
                windowMs: 60000,
                maxRequests: 100
            }
        }
    }));
jest.mock('@/lib/auth/security-audit', ()=>({
        logAuthSuccess: jest.fn(),
        logAuthFailure: jest.fn(),
        logPermissionDenied: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _enterpriseauthutils = require("../lib/auth/enterprise-auth-utils");
const _server = require("@clerk/nextjs/server");
const _jwtvalidation = require("../lib/auth/jwt-validation");
const _csrfprotection = require("../lib/auth/csrf-protection");
const _ratelimiting = require("../lib/auth/rate-limiting");
const _supabase = require("../lib/supabase");
describe('Utilidades de Autenticación Enterprise', ()=>{
    let mockGetAuth;
    let mockAuth;
    let mockValidateJWT;
    let mockValidateJWTPermissions;
    let mockValidateOrigin;
    let mockCheckRateLimit;
    beforeEach(()=>{
        mockGetAuth = _server.getAuth;
        mockAuth = _server.auth;
        mockValidateJWT = _jwtvalidation.validateJWTIntegrity;
        mockValidateJWTPermissions = _jwtvalidation.validateJWTPermissions;
        mockValidateOrigin = _csrfprotection.validateRequestOrigin;
        mockCheckRateLimit = _ratelimiting.checkRateLimit;
        jest.clearAllMocks();
        // Setup default mocks
        mockCheckRateLimit.mockResolvedValue({
            allowed: true,
            limit: 30,
            remaining: 29,
            resetTime: Date.now() + 300000
        });
        mockValidateOrigin.mockResolvedValue({
            valid: true
        });
        mockValidateJWT.mockResolvedValue({
            valid: true,
            payload: {
                sub: 'user_123',
                iss: 'clerk'
            }
        });
        mockValidateJWTPermissions.mockResolvedValue({
            valid: true,
            payload: {
                sub: 'user_123',
                metadata: {
                    role: 'admin'
                }
            }
        });
        // Mock Supabase response
        _supabase.supabaseAdmin.from.mockReturnValue({
            select: jest.fn().mockReturnValue({
                eq: jest.fn().mockReturnValue({
                    single: jest.fn().mockResolvedValue({
                        data: {
                            id: 'profile_123',
                            email: 'admin@test.com',
                            role: 'admin',
                            permissions: [
                                'admin_access',
                                'user_management'
                            ],
                            metadata: {
                                test: true
                            }
                        },
                        error: null
                    })
                })
            })
        });
    });
    describe('getEnterpriseAuthContext', ()=>{
        it('debe crear contexto enterprise completo para usuario admin', async ()=>{
            const mockRequest = {
                query: {},
                headers: {},
                url: 'http://localhost:3000/api/test',
                method: 'GET'
            };
            mockGetAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            const result = await (0, _enterpriseauthutils.getEnterpriseAuthContext)(mockRequest, {
                securityLevel: 'critical',
                enableJWTValidation: true,
                enableCSRFProtection: true,
                enableRateLimit: true
            });
            expect(result.success).toBe(true);
            expect(result.context).toBeDefined();
            expect(result.context?.userId).toBe('user_123');
            expect(result.context?.role).toBe('admin');
            expect(result.context?.permissions).toContain('admin_access');
            expect(result.context?.securityLevel).toBe('critical');
            expect(result.context?.validations.jwtValid).toBe(true);
            expect(result.context?.validations.csrfValid).toBe(true);
            expect(result.context?.validations.rateLimitPassed).toBe(true);
        });
        it('debe fallar si rate limit es excedido', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockCheckRateLimit.mockResolvedValue({
                allowed: false,
                limit: 30,
                remaining: 0,
                resetTime: Date.now() + 300000,
                retryAfter: 300,
                error: 'Rate limit exceeded',
                code: 'RATE_LIMIT_EXCEEDED'
            });
            const result = await (0, _enterpriseauthutils.getEnterpriseAuthContext)(mockRequest, {
                enableRateLimit: true,
                rateLimitType: 'admin'
            });
            expect(result.success).toBe(false);
            expect(result.error).toBe('Rate limit exceeded');
            expect(result.code).toBe('RATE_LIMIT_EXCEEDED');
            expect(result.status).toBe(429);
            expect(result.retryAfter).toBe(300);
        });
        it('debe fallar si validación CSRF falla', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockValidateOrigin.mockResolvedValue({
                valid: false,
                error: 'Invalid origin',
                code: 'INVALID_ORIGIN'
            });
            const result = await (0, _enterpriseauthutils.getEnterpriseAuthContext)(mockRequest, {
                enableCSRFProtection: true
            });
            expect(result.success).toBe(false);
            expect(result.error).toBe('Invalid origin');
            expect(result.code).toBe('CSRF_VALIDATION_FAILED');
            expect(result.status).toBe(403);
        });
        it('debe fallar si usuario no está autenticado', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockGetAuth.mockReturnValue({
                userId: null,
                sessionId: null
            });
            const result = await (0, _enterpriseauthutils.getEnterpriseAuthContext)(mockRequest);
            expect(result.success).toBe(false);
            expect(result.error).toBe('Usuario no autenticado');
            expect(result.code).toBe('NOT_AUTHENTICATED');
            expect(result.status).toBe(401);
        });
        it('debe fallar si JWT es inválido', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockGetAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            mockValidateJWT.mockResolvedValue({
                valid: false,
                error: 'Invalid JWT token',
                code: 'INVALID_TOKEN'
            });
            const result = await (0, _enterpriseauthutils.getEnterpriseAuthContext)(mockRequest, {
                enableJWTValidation: true
            });
            expect(result.success).toBe(false);
            expect(result.error).toBe('Invalid JWT token');
            expect(result.code).toBe('JWT_VALIDATION_FAILED');
            expect(result.status).toBe(401);
        });
        it('debe fallar si permisos son insuficientes', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockGetAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            // Mock usuario sin permisos admin
            _supabase.supabaseAdmin.from.mockReturnValue({
                select: jest.fn().mockReturnValue({
                    eq: jest.fn().mockReturnValue({
                        single: jest.fn().mockResolvedValue({
                            data: {
                                id: 'profile_123',
                                email: 'user@test.com',
                                role: 'user',
                                permissions: [
                                    'basic_access'
                                ]
                            },
                            error: null
                        })
                    })
                })
            });
            const result = await (0, _enterpriseauthutils.getEnterpriseAuthContext)(mockRequest, {
                requiredRole: 'admin',
                requiredPermissions: [
                    'admin_access'
                ]
            });
            expect(result.success).toBe(false);
            expect(result.error).toBe('Rol requerido: admin');
            expect(result.code).toBe('INSUFFICIENT_ROLE');
            expect(result.status).toBe(403);
        });
    });
    describe('Funciones de conveniencia', ()=>{
        it('requireCriticalAuth debe usar configuración crítica', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockGetAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            const result = await (0, _enterpriseauthutils.requireCriticalAuth)(mockRequest);
            expect(result.success).toBe(true);
            expect(result.context?.securityLevel).toBe('critical');
            expect(mockCheckRateLimit).toHaveBeenCalled();
            expect(mockValidateOrigin).toHaveBeenCalled();
            expect(mockValidateJWT).toHaveBeenCalled();
        });
        it('requireAdminAuth debe requerir rol admin', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockGetAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            const result = await (0, _enterpriseauthutils.requireAdminAuth)(mockRequest, [
                'user_management'
            ]);
            expect(result.success).toBe(true);
            expect(result.context?.role).toBe('admin');
            expect(result.context?.permissions).toContain('user_management');
        });
        it('requireBasicAuth debe usar configuración básica', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockAuth.mockResolvedValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            const result = await (0, _enterpriseauthutils.requireBasicAuth)(mockRequest);
            expect(result.success).toBe(true);
            expect(result.context?.securityLevel).toBe('low');
        });
    });
    describe('withEnterpriseAuth middleware', ()=>{
        it('debe ejecutar handler si autenticación es exitosa', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            const mockResponse = {
                status: jest.fn(),
                json: jest.fn()
            };
            const mockHandler = jest.fn().mockResolvedValue({
                success: true
            });
            mockGetAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            const authFunction = jest.fn().mockResolvedValue({
                success: true,
                context: {
                    userId: 'user_123',
                    role: 'admin',
                    permissions: [
                        'admin_access'
                    ]
                }
            });
            const middleware = (0, _enterpriseauthutils.withEnterpriseAuth)(authFunction);
            const wrappedHandler = middleware(mockHandler);
            const result = await wrappedHandler(mockRequest, mockResponse);
            expect(authFunction).toHaveBeenCalledWith(mockRequest);
            expect(mockHandler).toHaveBeenCalledWith(mockRequest, mockResponse);
            expect(mockRequest.enterpriseAuth).toBeDefined();
        });
        it('debe retornar error si autenticación falla', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            const mockResponse = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
                setHeader: jest.fn()
            };
            const mockHandler = jest.fn();
            const authFunction = jest.fn().mockResolvedValue({
                success: false,
                error: 'Authentication failed',
                code: 'AUTH_FAILED',
                status: 401
            });
            const middleware = (0, _enterpriseauthutils.withEnterpriseAuth)(authFunction);
            const wrappedHandler = middleware(mockHandler);
            await wrappedHandler(mockRequest, mockResponse);
            expect(authFunction).toHaveBeenCalledWith(mockRequest);
            expect(mockHandler).not.toHaveBeenCalled();
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith(expect.objectContaining({
                success: false,
                error: 'Authentication failed',
                code: 'AUTH_FAILED',
                enterprise: true
            }));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,