{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\enterprise-user-management.ts"],"sourcesContent":["/**\n * Gestión de Usuarios Enterprise\n * Utilidades avanzadas para gestión de usuarios combinando Clerk + Supabase\n */\n\nimport { clerkClient } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport type { EnterpriseAuthContext } from './enterprise-auth-utils';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface EnterpriseUser {\n  id: string;\n  clerkId: string;\n  email: string;\n  name?: string;\n  role: 'admin' | 'user' | 'moderator';\n  permissions: string[];\n  isActive: boolean;\n  metadata?: any;\n  createdAt: string;\n  updatedAt: string;\n  lastLoginAt?: string;\n  loginCount: number;\n}\n\nexport interface UserCreationOptions {\n  email: string;\n  name?: string;\n  role?: 'admin' | 'user' | 'moderator';\n  permissions?: string[];\n  metadata?: any;\n  sendInvitation?: boolean;\n}\n\nexport interface UserUpdateOptions {\n  name?: string;\n  role?: 'admin' | 'user' | 'moderator';\n  permissions?: string[];\n  metadata?: any;\n  isActive?: boolean;\n}\n\nexport interface UserSearchOptions {\n  query?: string;\n  role?: 'admin' | 'user' | 'moderator';\n  isActive?: boolean;\n  limit?: number;\n  offset?: number;\n  sortBy?: 'name' | 'email' | 'createdAt' | 'lastLoginAt';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface UserOperationResult {\n  success: boolean;\n  user?: EnterpriseUser;\n  users?: EnterpriseUser[];\n  error?: string;\n  code?: string;\n  total?: number;\n}\n\n// =====================================================\n// FUNCIONES DE GESTIÓN DE USUARIOS\n// =====================================================\n\n/**\n * Obtiene un usuario por su ID de Clerk\n */\nexport async function getEnterpriseUser(\n  clerkUserId: string,\n  context?: EnterpriseAuthContext\n): Promise<UserOperationResult> {\n  try {\n    if (!supabaseAdmin) {\n      return {\n        success: false,\n        error: 'Supabase admin client no disponible',\n        code: 'SUPABASE_UNAVAILABLE'\n      };\n    }\n\n    // Obtener datos de Supabase\n    const { data: userProfile, error: supabaseError } = await supabaseAdmin\n      .from('user_profiles')\n      .select('*')\n      .eq('clerk_user_id', clerkUserId)\n      .single();\n\n    if (supabaseError && supabaseError.code !== 'PGRST116') {\n      console.error('[ENTERPRISE_USER] Error obteniendo usuario de Supabase:', supabaseError);\n      return {\n        success: false,\n        error: 'Error obteniendo datos del usuario',\n        code: 'SUPABASE_ERROR'\n      };\n    }\n\n    // Obtener datos de Clerk\n    let clerkUser;\n    try {\n      const client = await clerkClient();\n      clerkUser = await client.users.getUser(clerkUserId);\n    } catch (clerkError) {\n      console.error('[ENTERPRISE_USER] Error obteniendo usuario de Clerk:', clerkError);\n      return {\n        success: false,\n        error: 'Error obteniendo datos de autenticación',\n        code: 'CLERK_ERROR'\n      };\n    }\n\n    // Combinar datos\n    const enterpriseUser: EnterpriseUser = {\n      id: userProfile?.id || clerkUserId,\n      clerkId: clerkUserId,\n      email: clerkUser.emailAddresses[0]?.emailAddress || userProfile?.email || '',\n      name: userProfile?.name || `${clerkUser.firstName || ''} ${clerkUser.lastName || ''}`.trim() || undefined,\n      role: userProfile?.role || 'user',\n      permissions: userProfile?.permissions || [],\n      isActive: userProfile?.is_active ?? true,\n      metadata: userProfile?.metadata || {},\n      createdAt: userProfile?.created_at || clerkUser.createdAt.toString(),\n      updatedAt: userProfile?.updated_at || clerkUser.updatedAt.toString(),\n      lastLoginAt: userProfile?.last_login_at,\n      loginCount: userProfile?.login_count || 0\n    };\n\n    return {\n      success: true,\n      user: enterpriseUser\n    };\n\n  } catch (error) {\n    console.error('[ENTERPRISE_USER] Error en getEnterpriseUser:', error);\n    return {\n      success: false,\n      error: 'Error interno obteniendo usuario',\n      code: 'INTERNAL_ERROR'\n    };\n  }\n}\n\n/**\n * Busca usuarios con filtros avanzados\n */\nexport async function searchEnterpriseUsers(\n  options: UserSearchOptions = {},\n  context?: EnterpriseAuthContext\n): Promise<UserOperationResult> {\n  try {\n    if (!supabaseAdmin) {\n      return {\n        success: false,\n        error: 'Supabase admin client no disponible',\n        code: 'SUPABASE_UNAVAILABLE'\n      };\n    }\n\n    // Verificar permisos\n    if (context && !context.permissions.includes('user_management')) {\n      return {\n        success: false,\n        error: 'Permisos insuficientes para buscar usuarios',\n        code: 'INSUFFICIENT_PERMISSIONS'\n      };\n    }\n\n    let query = supabaseAdmin\n      .from('user_profiles')\n      .select('*', { count: 'exact' });\n\n    // Aplicar filtros\n    if (options.query) {\n      query = query.or(`name.ilike.%${options.query}%,email.ilike.%${options.query}%`);\n    }\n\n    if (options.role) {\n      query = query.eq('role', options.role);\n    }\n\n    if (options.isActive !== undefined) {\n      query = query.eq('is_active', options.isActive);\n    }\n\n    // Aplicar ordenamiento\n    const sortBy = options.sortBy || 'created_at';\n    const sortOrder = options.sortOrder || 'desc';\n    query = query.order(sortBy, { ascending: sortOrder === 'asc' });\n\n    // Aplicar paginación\n    if (options.limit) {\n      query = query.limit(options.limit);\n    }\n\n    if (options.offset) {\n      query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n    }\n\n    const { data: userProfiles, error: searchError, count } = await query;\n\n    if (searchError) {\n      console.error('[ENTERPRISE_USER] Error buscando usuarios:', searchError);\n      return {\n        success: false,\n        error: 'Error buscando usuarios',\n        code: 'SEARCH_ERROR'\n      };\n    }\n\n    // Convertir a formato enterprise\n    const enterpriseUsers: EnterpriseUser[] = (userProfiles || []).map(profile => ({\n      id: profile.id,\n      clerkId: profile.clerk_user_id,\n      email: profile.email,\n      name: profile.name,\n      role: profile.role,\n      permissions: profile.permissions || [],\n      isActive: profile.is_active,\n      metadata: profile.metadata || {},\n      createdAt: profile.created_at,\n      updatedAt: profile.updated_at,\n      lastLoginAt: profile.last_login_at,\n      loginCount: profile.login_count || 0\n    }));\n\n    return {\n      success: true,\n      users: enterpriseUsers,\n      total: count || 0\n    };\n\n  } catch (error) {\n    console.error('[ENTERPRISE_USER] Error en searchEnterpriseUsers:', error);\n    return {\n      success: false,\n      error: 'Error interno buscando usuarios',\n      code: 'INTERNAL_ERROR'\n    };\n  }\n}\n\n/**\n * Actualiza un usuario enterprise\n */\nexport async function updateEnterpriseUser(\n  clerkUserId: string,\n  updates: UserUpdateOptions,\n  context: EnterpriseAuthContext\n): Promise<UserOperationResult> {\n  try {\n    if (!supabaseAdmin) {\n      return {\n        success: false,\n        error: 'Supabase admin client no disponible',\n        code: 'SUPABASE_UNAVAILABLE'\n      };\n    }\n\n    // Verificar permisos\n    if (!context.permissions.includes('user_management')) {\n      return {\n        success: false,\n        error: 'Permisos insuficientes para actualizar usuarios',\n        code: 'INSUFFICIENT_PERMISSIONS'\n      };\n    }\n\n    // Preparar datos de actualización\n    const updateData: any = {\n      updated_at: new Date().toISOString()\n    };\n\n    if (updates.name !== undefined) updateData.name = updates.name;\n    if (updates.role !== undefined) updateData.role = updates.role;\n    if (updates.permissions !== undefined) updateData.permissions = updates.permissions;\n    if (updates.metadata !== undefined) updateData.metadata = updates.metadata;\n    if (updates.isActive !== undefined) updateData.is_active = updates.isActive;\n\n    // Actualizar en Supabase\n    const { data: updatedProfile, error: updateError } = await supabaseAdmin\n      .from('user_profiles')\n      .update(updateData)\n      .eq('clerk_user_id', clerkUserId)\n      .select('*')\n      .single();\n\n    if (updateError) {\n      console.error('[ENTERPRISE_USER] Error actualizando usuario:', updateError);\n      return {\n        success: false,\n        error: 'Error actualizando usuario',\n        code: 'UPDATE_ERROR'\n      };\n    }\n\n    // Actualizar en Clerk si es necesario\n    if (updates.name) {\n      try {\n        const client = await clerkClient();\n        const nameParts = updates.name.split(' ');\n        await client.users.updateUser(clerkUserId, {\n          firstName: nameParts[0] || '',\n          lastName: nameParts.slice(1).join(' ') || ''\n        });\n      } catch (clerkError) {\n        console.warn('[ENTERPRISE_USER] Error actualizando nombre en Clerk:', clerkError);\n        // No fallar la operación por esto\n      }\n    }\n\n    // Retornar usuario actualizado\n    const userResult = await getEnterpriseUser(clerkUserId, context);\n    return userResult;\n\n  } catch (error) {\n    console.error('[ENTERPRISE_USER] Error en updateEnterpriseUser:', error);\n    return {\n      success: false,\n      error: 'Error interno actualizando usuario',\n      code: 'INTERNAL_ERROR'\n    };\n  }\n}\n\n/**\n * Registra actividad de login del usuario\n */\nexport async function recordUserLogin(\n  clerkUserId: string,\n  metadata?: any\n): Promise<void> {\n  try {\n    if (!supabaseAdmin) return;\n\n    await supabaseAdmin\n      .from('user_profiles')\n      .update({\n        last_login_at: new Date().toISOString(),\n        login_count: supabaseAdmin.raw('login_count + 1'),\n        updated_at: new Date().toISOString(),\n        metadata: supabaseAdmin.raw(`\n          COALESCE(metadata, '{}'::jsonb) || \n          jsonb_build_object('last_login_metadata', $1::jsonb)\n        `, [JSON.stringify(metadata || {})])\n      })\n      .eq('clerk_user_id', clerkUserId);\n\n  } catch (error) {\n    console.error('[ENTERPRISE_USER] Error registrando login:', error);\n  }\n}\n\n/**\n * Obtiene estadísticas de usuarios\n */\nexport async function getUserStatistics(\n  context: EnterpriseAuthContext\n): Promise<{\n  totalUsers: number;\n  activeUsers: number;\n  adminUsers: number;\n  recentLogins: number;\n}> {\n  try {\n    if (!supabaseAdmin || !context.permissions.includes('user_management')) {\n      return { totalUsers: 0, activeUsers: 0, adminUsers: 0, recentLogins: 0 };\n    }\n\n    const [\n      { count: totalUsers },\n      { count: activeUsers },\n      { count: adminUsers },\n      { count: recentLogins }\n    ] = await Promise.all([\n      supabaseAdmin.from('user_profiles').select('*', { count: 'exact', head: true }),\n      supabaseAdmin.from('user_profiles').select('*', { count: 'exact', head: true }).eq('is_active', true),\n      supabaseAdmin.from('user_profiles').select('*', { count: 'exact', head: true }).eq('role', 'admin'),\n      supabaseAdmin.from('user_profiles').select('*', { count: 'exact', head: true })\n        .gte('last_login_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())\n    ]);\n\n    return {\n      totalUsers: totalUsers || 0,\n      activeUsers: activeUsers || 0,\n      adminUsers: adminUsers || 0,\n      recentLogins: recentLogins || 0\n    };\n\n  } catch (error) {\n    console.error('[ENTERPRISE_USER] Error obteniendo estadísticas:', error);\n    return { totalUsers: 0, activeUsers: 0, adminUsers: 0, recentLogins: 0 };\n  }\n}\n"],"names":["getEnterpriseUser","getUserStatistics","recordUserLogin","searchEnterpriseUsers","updateEnterpriseUser","clerkUserId","context","supabaseAdmin","success","error","code","data","userProfile","supabaseError","from","select","eq","single","console","clerkUser","client","clerkClient","users","getUser","clerkError","enterpriseUser","id","clerkId","email","emailAddresses","emailAddress","name","firstName","lastName","trim","undefined","role","permissions","isActive","is_active","metadata","createdAt","created_at","toString","updatedAt","updated_at","lastLoginAt","last_login_at","loginCount","login_count","user","options","includes","query","count","or","sortBy","sortOrder","order","ascending","limit","offset","range","userProfiles","searchError","enterpriseUsers","map","profile","clerk_user_id","total","updates","updateData","Date","toISOString","updatedProfile","updateError","update","nameParts","split","updateUser","slice","join","warn","userResult","raw","JSON","stringify","totalUsers","activeUsers","adminUsers","recentLogins","Promise","all","head","gte","now"],"mappings":"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"}