3b00ea9f5552b757115dd8f13542d5fb
/**
 * Tests para el sistema de gestión avanzada de sesiones
 * Verifica creación, actualización, invalidación y cleanup de sesiones
 */ // Mock de Clerk
"use strict";
jest.mock('@clerk/nextjs/server', ()=>({
        clerkClient: jest.fn(()=>({
                users: {
                    getUserList: jest.fn()
                },
                sessions: {
                    getSession: jest.fn()
                }
            }))
    }));
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn(),
                                    order: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                })),
                            or: jest.fn(()=>({
                                    single: jest.fn()
                                })),
                            order: jest.fn(()=>({}))
                        })),
                    insert: jest.fn(()=>({
                            select: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                }))
                        }))
                }))
        }
    }));
// Mock de cache manager
jest.mock('@/lib/cache-manager', ()=>({
        CacheManager: {
            getInstance: jest.fn(()=>({
                    get: jest.fn(),
                    set: jest.fn(),
                    delete: jest.fn()
                }))
        },
        CACHE_CONFIGS: {
            USER_SESSION: {
                ttl: 600
            }
        }
    }));
// Mock de auditoría de seguridad
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn(),
        logAdminAction: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _sessionmanagement = require("../lib/auth/session-management");
describe('Sistema de Gestión de Sesiones', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    const mockSessionData = {
        id: 'sess_123',
        user_id: 'user_123',
        clerk_session_id: 'sess_clerk_123',
        status: 'active',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
        expires_at: '2024-01-02T00:00:00Z',
        last_activity: '2024-01-01T12:00:00Z',
        ip_address: '192.168.1.1',
        user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        device_info: {
            type: 'desktop',
            os: 'Windows',
            browser: 'Chrome'
        },
        metadata: {
            login_method: 'clerk',
            timezone: 'UTC'
        }
    };
    describe('Funciones de gestión de sesiones', ()=>{
        it('debe crear sesión con parámetros válidos', async ()=>{
            const result = await (0, _sessionmanagement.createSession)('user_123', 'sess_clerk_123');
            expect(result).toBeDefined();
            expect(typeof result.success).toBe('boolean');
            expect(typeof result.action).toBe('string');
        });
        it('debe actualizar sesión existente', async ()=>{
            const result = await (0, _sessionmanagement.updateSession)('sess_clerk_123', {});
            expect(result).toBeDefined();
            expect(typeof result.success).toBe('boolean');
            expect(typeof result.action).toBe('string');
        });
        it('debe invalidar sesión específica', async ()=>{
            const result = await (0, _sessionmanagement.invalidateSession)('sess_clerk_123');
            expect(result).toBeDefined();
            expect(typeof result.success).toBe('boolean');
            expect(typeof result.action).toBe('string');
        });
    });
    describe('Funciones básicas', ()=>{
        it('debe tener funciones principales definidas', ()=>{
            expect(typeof _sessionmanagement.createSession).toBe('function');
            expect(typeof _sessionmanagement.updateSession).toBe('function');
            expect(typeof _sessionmanagement.invalidateSession).toBe('function');
            expect(typeof _sessionmanagement.getUserSessions).toBe('function');
            expect(typeof _sessionmanagement.getSessionInfo).toBe('function');
            expect(typeof _sessionmanagement.isSessionValid).toBe('function');
            expect(typeof _sessionmanagement.updateSessionActivity).toBe('function');
            expect(typeof _sessionmanagement.cleanupExpiredSessions).toBe('function');
            expect(typeof _sessionmanagement.getSessionStats).toBe('function');
        });
        it('debe manejar errores gracefully', async ()=>{
            // Test que las funciones no lanzan excepciones no manejadas
            const result = await (0, _sessionmanagement.createSession)('', '');
            expect(result).toBeDefined();
            expect(typeof result.success).toBe('boolean');
        });
    });
    describe('invalidateSession', ()=>{
        it('debe invalidar una sesión exitosamente', async ()=>{
            const invalidatedSession = {
                ...mockSessionData,
                status: 'revoked'
            };
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: invalidatedSession,
                error: null
            });
            const result = await (0, _sessionmanagement.invalidateSession)('sess_clerk_123', 'manual_logout');
            expect(result.success).toBe(true);
            expect(result.action).toBe('deleted');
        });
    });
    describe('Funciones de consulta', ()=>{
        it('debe obtener sesiones de usuario', async ()=>{
            const sessions = await (0, _sessionmanagement.getUserSessions)('user_123');
            expect(Array.isArray(sessions)).toBe(true);
        });
        it('debe obtener información de sesión específica', async ()=>{
            const session = await (0, _sessionmanagement.getSessionInfo)('sess_clerk_123');
            // Puede ser null o un objeto de sesión
            expect(session === null || typeof session === 'object').toBe(true);
        });
        it('debe validar sesión', async ()=>{
            const isValid = await (0, _sessionmanagement.isSessionValid)('sess_clerk_123');
            expect(typeof isValid).toBe('boolean');
        });
        it('debe actualizar actividad de sesión', async ()=>{
            const result = await (0, _sessionmanagement.updateSessionActivity)('sess_clerk_123', {
                last_page: '/dashboard'
            });
            expect(typeof result).toBe('boolean');
        });
    });
    describe('Funciones de cleanup y estadísticas', ()=>{
        it('debe tener función de cleanup implementada', async ()=>{
            const result = await (0, _sessionmanagement.cleanupExpiredSessions)();
            expect(result).toBeDefined();
            expect(typeof result.success).toBe('boolean');
            expect(typeof result.cleaned).toBe('number');
            expect(typeof result.errors).toBe('number');
            expect(result.details).toBeDefined();
        });
        it('debe tener función de estadísticas implementada', async ()=>{
            const stats = await (0, _sessionmanagement.getSessionStats)();
            expect(stats).toBeDefined();
            expect(typeof stats.total).toBe('number');
            expect(typeof stats.active).toBe('number');
            expect(typeof stats.expired).toBe('number');
            expect(typeof stats.revoked).toBe('number');
            expect(typeof stats.invalid).toBe('number');
            expect(typeof stats.byDevice).toBe('object');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,