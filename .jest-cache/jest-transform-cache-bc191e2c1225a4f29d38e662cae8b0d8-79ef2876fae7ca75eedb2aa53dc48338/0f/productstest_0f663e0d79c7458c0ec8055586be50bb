d1bb0fae71a6e8969da306523bcad157
// ===================================
// PINTEYA E-COMMERCE - TEST PRODUCTS API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../app/api/products/route");
// Mock Supabase
const mockSupabaseResponse = {
    data: [
        {
            id: 1,
            name: 'Test Product 1',
            slug: 'test-product-1',
            description: 'Test description',
            price: 1000,
            discounted_price: 900,
            stock: 10,
            category_id: 1,
            images: {
                previews: [
                    '/test1.jpg'
                ]
            },
            created_at: '2025-01-01T00:00:00Z',
            updated_at: '2025-01-01T00:00:00Z',
            category: {
                id: 1,
                name: 'Test Category',
                slug: 'test-category'
            }
        },
        {
            id: 2,
            name: 'Test Product 2',
            slug: 'test-product-2',
            description: 'Test description 2',
            price: 2000,
            discounted_price: null,
            stock: 5,
            category_id: 2,
            images: {
                previews: [
                    '/test2.jpg'
                ]
            },
            created_at: '2025-01-01T00:00:00Z',
            updated_at: '2025-01-01T00:00:00Z',
            category: {
                id: 2,
                name: 'Test Category 2',
                slug: 'test-category-2'
            }
        }
    ],
    error: null,
    count: 2
};
// Los mocks de Supabase ya están configurados en jest.setup.js
// No necesitamos redefinirlos aquí
describe('/api/products', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('returns products with default pagination', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(data.data).toHaveLength(2);
        expect(data.pagination).toEqual({
            page: 1,
            limit: 12,
            total: 2,
            totalPages: 1
        });
    });
    it('handles pagination parameters', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?page=2&limit=6');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.pagination.page).toBe(2);
        expect(data.pagination.limit).toBe(6);
    });
    it('handles search parameter', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?search=test');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    // Verify that search was applied (mock should be called with search)
    });
    it('handles category filter', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?category=1');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('handles price range filter', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?minPrice=500&maxPrice=1500');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('handles sorting parameters', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?sortBy=price&sortOrder=asc');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('validates pagination limits', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?limit=150');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        // La API debería retornar error 500 por validación fallida (limit > 100)
        expect(response.status).toBe(500);
        expect(data.success).toBe(false);
        expect(data.error).toContain('limit');
    });
    it('handles invalid page numbers', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?page=-1');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        // La API debería retornar error 500 por validación fallida (page < 1)
        expect(response.status).toBe(500);
        expect(data.success).toBe(false);
        expect(data.error).toContain('page');
    });
    it('handles database errors', async ()=>{
        // Mock database error
        const mockError = {
            message: 'Database connection failed'
        };
        const mockSupabase = require('@/lib/supabase');
        // Crear un mock que falle en el método range
        const mockQueryBuilder = {
            select: jest.fn(()=>mockQueryBuilder),
            eq: jest.fn(()=>mockQueryBuilder),
            gte: jest.fn(()=>mockQueryBuilder),
            lte: jest.fn(()=>mockQueryBuilder),
            gt: jest.fn(()=>mockQueryBuilder),
            lt: jest.fn(()=>mockQueryBuilder),
            or: jest.fn(()=>mockQueryBuilder),
            and: jest.fn(()=>mockQueryBuilder),
            ilike: jest.fn(()=>mockQueryBuilder),
            like: jest.fn(()=>mockQueryBuilder),
            in: jest.fn(()=>mockQueryBuilder),
            order: jest.fn(()=>mockQueryBuilder),
            range: jest.fn(()=>Promise.resolve({
                    data: null,
                    error: mockError
                })),
            single: jest.fn(()=>Promise.resolve({
                    data: null,
                    error: mockError
                }))
        };
        mockSupabase.getSupabaseClient.mockReturnValue({
            from: jest.fn(()=>mockQueryBuilder),
            auth: {
                getUser: jest.fn(()=>Promise.resolve({
                        data: {
                            user: null
                        },
                        error: null
                    }))
            }
        });
        const request = new _server.NextRequest('http://localhost:3001/api/products');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(500);
        expect(data.success).toBe(false);
        expect(data.error).toBe('Database connection failed');
    });
    it('returns correct product structure', async ()=>{
        // Asegurar que el mock esté configurado correctamente para este test
        const mockSupabase = require('@/lib/supabase');
        const mockQueryBuilder = {
            select: jest.fn(()=>mockQueryBuilder),
            eq: jest.fn(()=>mockQueryBuilder),
            gte: jest.fn(()=>mockQueryBuilder),
            lte: jest.fn(()=>mockQueryBuilder),
            gt: jest.fn(()=>mockQueryBuilder),
            lt: jest.fn(()=>mockQueryBuilder),
            or: jest.fn(()=>mockQueryBuilder),
            and: jest.fn(()=>mockQueryBuilder),
            ilike: jest.fn(()=>mockQueryBuilder),
            like: jest.fn(()=>mockQueryBuilder),
            in: jest.fn(()=>mockQueryBuilder),
            order: jest.fn(()=>mockQueryBuilder),
            range: jest.fn(()=>Promise.resolve(mockSupabaseResponse)),
            single: jest.fn(()=>Promise.resolve({
                    data: null,
                    error: null
                }))
        };
        mockSupabase.getSupabaseClient.mockReturnValue({
            from: jest.fn(()=>mockQueryBuilder),
            auth: {
                getUser: jest.fn(()=>Promise.resolve({
                        data: {
                            user: null
                        },
                        error: null
                    }))
            }
        });
        const request = new _server.NextRequest('http://localhost:3001/api/products');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(Array.isArray(data.data)).toBe(true);
        expect(data.data.length).toBeGreaterThan(0);
        expect(data.data[0]).toMatchObject({
            id: expect.any(Number),
            name: expect.any(String),
            slug: expect.any(String),
            description: expect.any(String),
            price: expect.any(Number),
            stock: expect.any(Number),
            category_id: expect.any(Number),
            images: expect.any(Object),
            category: expect.objectContaining({
                id: expect.any(Number),
                name: expect.any(String),
                slug: expect.any(String)
            })
        });
    });
    it('handles empty results', async ()=>{
        // Mock empty response
        const mockSupabase = require('@/lib/supabase');
        const mockQueryBuilder = {
            select: jest.fn(()=>mockQueryBuilder),
            eq: jest.fn(()=>mockQueryBuilder),
            gte: jest.fn(()=>mockQueryBuilder),
            lte: jest.fn(()=>mockQueryBuilder),
            gt: jest.fn(()=>mockQueryBuilder),
            lt: jest.fn(()=>mockQueryBuilder),
            or: jest.fn(()=>mockQueryBuilder),
            and: jest.fn(()=>mockQueryBuilder),
            ilike: jest.fn(()=>mockQueryBuilder),
            like: jest.fn(()=>mockQueryBuilder),
            in: jest.fn(()=>mockQueryBuilder),
            order: jest.fn(()=>mockQueryBuilder),
            range: jest.fn(()=>Promise.resolve({
                    data: [],
                    error: null,
                    count: 0
                })),
            single: jest.fn(()=>Promise.resolve({
                    data: null,
                    error: null
                }))
        };
        mockSupabase.getSupabaseClient.mockReturnValue({
            from: jest.fn(()=>mockQueryBuilder),
            auth: {
                getUser: jest.fn(()=>Promise.resolve({
                        data: {
                            user: null
                        },
                        error: null
                    }))
            }
        });
        const request = new _server.NextRequest('http://localhost:3001/api/products');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(data.data).toEqual([]);
        expect(data.pagination.total).toBe(0);
    });
    it('handles multiple filters simultaneously', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?search=pintura&category=1&minPrice=1000&maxPrice=5000&sortBy=price&sortOrder=desc');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('sanitizes search input', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?search=<script>alert("xss")</script>');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    // Should handle potentially malicious input safely
    });
    it('handles special characters in search', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?search=pintura%20látex%20ñ');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('returns appropriate headers', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products');
        const response = await (0, _route.GET)(request);
        expect(response.status).toBe(200);
        // Verificar que la respuesta es JSON válida
        const data = await response.json();
        expect(data).toBeDefined();
        expect(typeof data).toBe('object');
    });
    it('calculates total pages correctly', async ()=>{
        // Mock response with specific count
        const mockSupabase = require('@/lib/supabase');
        const mockQueryBuilder = {
            select: jest.fn(()=>mockQueryBuilder),
            eq: jest.fn(()=>mockQueryBuilder),
            gte: jest.fn(()=>mockQueryBuilder),
            lte: jest.fn(()=>mockQueryBuilder),
            gt: jest.fn(()=>mockQueryBuilder),
            lt: jest.fn(()=>mockQueryBuilder),
            or: jest.fn(()=>mockQueryBuilder),
            and: jest.fn(()=>mockQueryBuilder),
            ilike: jest.fn(()=>mockQueryBuilder),
            like: jest.fn(()=>mockQueryBuilder),
            in: jest.fn(()=>mockQueryBuilder),
            order: jest.fn(()=>mockQueryBuilder),
            range: jest.fn(()=>Promise.resolve({
                    data: mockSupabaseResponse.data,
                    error: null,
                    count: 25 // 25 total items
                })),
            single: jest.fn(()=>Promise.resolve({
                    data: null,
                    error: null
                }))
        };
        mockSupabase.getSupabaseClient.mockReturnValue({
            from: jest.fn(()=>mockQueryBuilder),
            auth: {
                getUser: jest.fn(()=>Promise.resolve({
                        data: {
                            user: null
                        },
                        error: null
                    }))
            }
        });
        const request = new _server.NextRequest('http://localhost:3001/api/products?limit=10');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(data.pagination.total).toBe(25);
        expect(data.pagination.totalPages).toBe(3); // Math.ceil(25/10)
    });
    it('handles brand filter correctly', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?brand=sherwin-williams');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('handles stock filter correctly', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?inStock=true');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('handles featured products filter', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?featured=true');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('handles discount filter', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?onSale=true');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('validates sort parameters', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?sortBy=invalid&sortOrder=invalid');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        // La API debería retornar error 500 por validación fallida (sortBy y sortOrder inválidos)
        expect(response.status).toBe(500);
        expect(data.success).toBe(false);
        expect(data.error).toContain('sortBy');
    });
    it('handles network timeout errors', async ()=>{
        const mockSupabase = require('@/lib/supabase');
        mockSupabase.getSupabaseClient.mockImplementation(()=>{
            throw new Error('Network timeout');
        });
        const request = new _server.NextRequest('http://localhost:3001/api/products');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(500);
        expect(data.success).toBe(false);
        expect(data.error).toBe('Network timeout');
    });
    it('handles very large page numbers', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/products?page=999999');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(500);
        expect(data.success).toBe(false);
    // Should handle gracefully or return appropriate error
    });
    it('handles concurrent requests', async ()=>{
        // Resetear el mock para este test específico
        const mockSupabase = require('@/lib/supabase');
        const mockQueryBuilder = {
            select: jest.fn(()=>mockQueryBuilder),
            eq: jest.fn(()=>mockQueryBuilder),
            gte: jest.fn(()=>mockQueryBuilder),
            lte: jest.fn(()=>mockQueryBuilder),
            gt: jest.fn(()=>mockQueryBuilder),
            lt: jest.fn(()=>mockQueryBuilder),
            or: jest.fn(()=>mockQueryBuilder),
            and: jest.fn(()=>mockQueryBuilder),
            ilike: jest.fn(()=>mockQueryBuilder),
            like: jest.fn(()=>mockQueryBuilder),
            in: jest.fn(()=>mockQueryBuilder),
            order: jest.fn(()=>mockQueryBuilder),
            range: jest.fn(()=>Promise.resolve(mockSupabaseResponse)),
            single: jest.fn(()=>Promise.resolve({
                    data: null,
                    error: null
                }))
        };
        mockSupabase.getSupabaseClient.mockReturnValue({
            from: jest.fn(()=>mockQueryBuilder),
            auth: {
                getUser: jest.fn(()=>Promise.resolve({
                        data: {
                            user: null
                        },
                        error: null
                    }))
            }
        });
        const requests = Array(5).fill(null).map(()=>(0, _route.GET)(new _server.NextRequest('http://localhost:3001/api/products')));
        const responses = await Promise.all(requests);
        responses.forEach((response)=>{
            expect(response.status).toBe(200);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,