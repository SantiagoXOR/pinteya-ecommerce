{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\route.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ADMIN ORDERS API ENTERPRISE\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { auth, currentUser } from '@clerk/nextjs/server';\nimport { ApiResponse } from '@/types/api';\nimport { z } from 'zod';\nimport { logger, LogLevel, LogCategory } from '@/lib/logger';\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiter';\nimport { metricsCollector } from '@/lib/metrics';\n\n// ===================================\n// SCHEMAS DE VALIDACIÓN ENTERPRISE\n// ===================================\n\nconst OrderFiltersSchema = z.object({\n  page: z.coerce.number().min(1).default(1),\n  limit: z.coerce.number().min(1).max(100).default(20),\n  status: z.string().optional(),\n  payment_status: z.string().optional(),\n  date_from: z.string().optional(),\n  date_to: z.string().optional(),\n  search: z.string().optional(),\n  sort_by: z.enum(['created_at', 'total_amount', 'order_number']).default('created_at'),\n  sort_order: z.enum(['asc', 'desc']).default('desc'),\n});\n\nconst CreateOrderSchema = z.object({\n  user_id: z.string().uuid('ID de usuario inválido'),\n  items: z.array(z.object({\n    product_id: z.number().min(1),\n    quantity: z.number().min(1).max(99),\n    unit_price: z.number().min(0),\n  })).min(1, 'Al menos un item es requerido'),\n  shipping_address: z.object({\n    street_name: z.string().min(1),\n    street_number: z.string().min(1),\n    zip_code: z.string().min(1),\n    city_name: z.string().min(1),\n    state_name: z.string().min(1),\n  }).optional(),\n  notes: z.string().optional(),\n});\n\n// ===================================\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\n// ===================================\n\nasync function validateAdminAuth() {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return { error: 'Usuario no autenticado', status: 401 };\n    }\n\n    const user = await currentUser();\n    if (!user) {\n      return { error: 'Usuario no encontrado', status: 401 };\n    }\n\n    // Verificar si es admin (usando email como en otros endpoints admin)\n    const isAdmin = user.emailAddresses?.[0]?.emailAddress === 'santiago@xor.com.ar';\n    if (!isAdmin) {\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\n    }\n\n    return { user, userId };\n  } catch (error) {\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\n    return { error: 'Error de autenticación', status: 500 };\n  }\n}\n\n// ===================================\n// GET - Listar órdenes con filtros avanzados\n// ===================================\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now();\n\n  try {\n    // Rate limiting\n    const rateLimitResult = await checkRateLimit(\n      request,\n      RATE_LIMIT_CONFIGS.admin.requests,\n      RATE_LIMIT_CONFIGS.admin.window,\n      'admin-orders'\n    );\n\n    if (!rateLimitResult.success) {\n      const response = NextResponse.json(\n        { error: 'Demasiadas solicitudes' },\n        { status: 429 }\n      );\n      addRateLimitHeaders(response, rateLimitResult);\n      return response;\n    }\n\n    // Validar autenticación admin\n    const authResult = await validateAdminAuth();\n    if ('error' in authResult) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: authResult.status }\n      );\n    }\n\n    // Validar parámetros de consulta\n    const { searchParams } = new URL(request.url);\n    const filtersResult = OrderFiltersSchema.safeParse({\n      page: searchParams.get('page'),\n      limit: searchParams.get('limit'),\n      status: searchParams.get('status'),\n      payment_status: searchParams.get('payment_status'),\n      date_from: searchParams.get('date_from'),\n      date_to: searchParams.get('date_to'),\n      search: searchParams.get('search'),\n      sort_by: searchParams.get('sort_by'),\n      sort_order: searchParams.get('sort_order'),\n    });\n\n    if (!filtersResult.success) {\n      return NextResponse.json(\n        { error: 'Parámetros de consulta inválidos', details: filtersResult.error.errors },\n        { status: 400 }\n      );\n    }\n\n    const filters = filtersResult.data;\n\n    // Construir query base con joins optimizados\n    let query = supabaseAdmin\n      .from('orders')\n      .select(`\n        id,\n        order_number,\n        status,\n        payment_status,\n        total_amount,\n        currency,\n        created_at,\n        updated_at,\n        shipping_address,\n        notes,\n        user_profiles!orders_user_id_fkey (\n          id,\n          name,\n          email\n        ),\n        order_items (\n          id,\n          quantity,\n          unit_price,\n          total_price,\n          products (\n            id,\n            name,\n            images\n          )\n        )\n      `, { count: 'exact' });\n\n    // Aplicar filtros\n    if (filters.status) {\n      query = query.eq('status', filters.status);\n    }\n\n    if (filters.payment_status) {\n      query = query.eq('payment_status', filters.payment_status);\n    }\n\n    if (filters.date_from) {\n      query = query.gte('created_at', filters.date_from);\n    }\n\n    if (filters.date_to) {\n      query = query.lte('created_at', filters.date_to);\n    }\n\n    if (filters.search) {\n      query = query.or(`order_number.ilike.%${filters.search}%,notes.ilike.%${filters.search}%`);\n    }\n\n    // Aplicar ordenamiento y paginación\n    const from = (filters.page - 1) * filters.limit;\n    const to = from + filters.limit - 1;\n\n    const { data: orders, error, count } = await query\n      .order(filters.sort_by, { ascending: filters.sort_order === 'asc' })\n      .range(from, to);\n\n    if (error) {\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener órdenes admin', { error });\n      return NextResponse.json(\n        { error: 'Error al obtener órdenes' },\n        { status: 500 }\n      );\n    }\n\n    // Calcular estadísticas\n    const totalPages = Math.ceil((count || 0) / filters.limit);\n    const hasNextPage = filters.page < totalPages;\n    const hasPreviousPage = filters.page > 1;\n\n    // Métricas de performance\n    const responseTime = Date.now() - startTime;\n    metricsCollector.recordApiCall('admin-orders-list', responseTime, 200);\n\n    const response: ApiResponse<{\n      orders: typeof orders;\n      pagination: {\n        page: number;\n        limit: number;\n        total: number;\n        totalPages: number;\n        hasNextPage: boolean;\n        hasPreviousPage: boolean;\n      };\n      filters: typeof filters;\n    }> = {\n      data: {\n        orders,\n        pagination: {\n          page: filters.page,\n          limit: filters.limit,\n          total: count || 0,\n          totalPages,\n          hasNextPage,\n          hasPreviousPage,\n        },\n        filters,\n      },\n      success: true,\n      error: null,\n    };\n\n    const nextResponse = NextResponse.json(response);\n    addRateLimitHeaders(nextResponse, rateLimitResult);\n\n    logger.log(LogLevel.INFO, LogCategory.API, 'Órdenes admin obtenidas exitosamente', {\n      count: orders?.length,\n      total: count,\n      responseTime,\n    });\n\n    return nextResponse;\n\n  } catch (error) {\n    const responseTime = Date.now() - startTime;\n    metricsCollector.recordApiCall('admin-orders-list', responseTime, 500);\n\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/orders', { error });\n\n    return NextResponse.json(\n      { error: 'Error interno del servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// ===================================\n// POST - Crear nueva orden (admin)\n// ===================================\nexport async function POST(request: NextRequest) {\n  const startTime = Date.now();\n\n  try {\n    // Rate limiting\n    const rateLimitResult = await checkRateLimit(\n      request,\n      RATE_LIMIT_CONFIGS.admin.requests,\n      RATE_LIMIT_CONFIGS.admin.window,\n      'admin-orders-create'\n    );\n\n    if (!rateLimitResult.success) {\n      const response = NextResponse.json(\n        { error: 'Demasiadas solicitudes' },\n        { status: 429 }\n      );\n      addRateLimitHeaders(response, rateLimitResult);\n      return response;\n    }\n\n    // Validar autenticación admin\n    const authResult = await validateAdminAuth();\n    if ('error' in authResult) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: authResult.status }\n      );\n    }\n\n    // Validar datos de entrada\n    const body = await request.json();\n    const validationResult = CreateOrderSchema.safeParse(body);\n\n    if (!validationResult.success) {\n      return NextResponse.json(\n        { error: 'Datos de orden inválidos', details: validationResult.error.errors },\n        { status: 400 }\n      );\n    }\n\n    const orderData = validationResult.data;\n\n    // Generar número de orden único\n    const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n\n    // Calcular total\n    const totalAmount = orderData.items.reduce((sum, item) =>\n      sum + (item.unit_price * item.quantity), 0\n    );\n\n    // Crear orden en transacción\n    const { data: order, error: orderError } = await supabaseAdmin\n      .from('orders')\n      .insert({\n        user_id: orderData.user_id,\n        order_number: orderNumber,\n        status: 'pending',\n        payment_status: 'pending',\n        total_amount: totalAmount,\n        currency: 'ARS',\n        shipping_address: orderData.shipping_address ? JSON.stringify(orderData.shipping_address) : null,\n        notes: orderData.notes,\n      })\n      .select()\n      .single();\n\n    if (orderError) {\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al crear orden', { orderError });\n      return NextResponse.json(\n        { error: 'Error al crear orden' },\n        { status: 500 }\n      );\n    }\n\n    // Crear items de la orden\n    const orderItems = orderData.items.map(item => ({\n      order_id: order.id,\n      product_id: item.product_id,\n      quantity: item.quantity,\n      unit_price: item.unit_price,\n      total_price: item.unit_price * item.quantity,\n    }));\n\n    const { error: itemsError } = await supabaseAdmin\n      .from('order_items')\n      .insert(orderItems);\n\n    if (itemsError) {\n      // Rollback: eliminar orden creada\n      await supabaseAdmin.from('orders').delete().eq('id', order.id);\n\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al crear items de orden', { itemsError });\n      return NextResponse.json(\n        { error: 'Error al crear items de orden' },\n        { status: 500 }\n      );\n    }\n\n    // Métricas de performance\n    const responseTime = Date.now() - startTime;\n    metricsCollector.recordApiCall('admin-orders-create', responseTime, 201);\n\n    const response: ApiResponse<typeof order> = {\n      data: order,\n      success: true,\n      error: null,\n    };\n\n    const nextResponse = NextResponse.json(response, { status: 201 });\n    addRateLimitHeaders(nextResponse, rateLimitResult);\n\n    logger.log(LogLevel.INFO, LogCategory.API, 'Orden creada exitosamente por admin', {\n      orderId: order.id,\n      orderNumber,\n      totalAmount,\n      responseTime,\n    });\n\n    return nextResponse;\n\n  } catch (error) {\n    const responseTime = Date.now() - startTime;\n    metricsCollector.recordApiCall('admin-orders-create', responseTime, 500);\n\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/orders', { error });\n\n    return NextResponse.json(\n      { error: 'Error interno del servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":["GET","POST","OrderFiltersSchema","z","object","page","coerce","number","min","default","limit","max","status","string","optional","payment_status","date_from","date_to","search","sort_by","enum","sort_order","CreateOrderSchema","user_id","uuid","items","array","product_id","quantity","unit_price","shipping_address","street_name","street_number","zip_code","city_name","state_name","notes","validateAdminAuth","userId","auth","error","user","currentUser","isAdmin","emailAddresses","emailAddress","logger","log","LogLevel","ERROR","LogCategory","AUTH","request","startTime","Date","now","rateLimitResult","checkRateLimit","RATE_LIMIT_CONFIGS","admin","requests","window","success","response","NextResponse","json","addRateLimitHeaders","authResult","searchParams","URL","url","filtersResult","safeParse","get","details","errors","filters","data","query","supabaseAdmin","from","select","count","eq","gte","lte","or","to","orders","order","ascending","range","DATABASE","totalPages","Math","ceil","hasNextPage","hasPreviousPage","responseTime","metricsCollector","recordApiCall","pagination","total","nextResponse","INFO","API","length","body","validationResult","orderData","orderNumber","random","toString","substr","toUpperCase","totalAmount","reduce","sum","item","orderError","insert","order_number","total_amount","currency","JSON","stringify","single","orderItems","map","order_id","id","total_price","itemsError","delete","orderId"],"mappings":"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"}