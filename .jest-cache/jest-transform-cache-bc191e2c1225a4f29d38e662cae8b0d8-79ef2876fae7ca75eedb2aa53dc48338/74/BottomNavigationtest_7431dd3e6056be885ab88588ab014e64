77faaf9346b73faaf3bc5bdb8dc58990
"use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>mockUseRouter(),
        usePathname: ()=>mockUsePathname()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactredux = require("react-redux");
const _toolkit = require("@reduxjs/toolkit");
const _bottomnavigation = require("../../../components/ui/bottom-navigation");
const _cartslice = /*#__PURE__*/ _interop_require_default(require("../../../redux/features/cart-slice"));
const _lucidereact = require("lucide-react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js router
const mockUsePathname = jest.fn();
const mockUseRouter = jest.fn();
// Mock store
const createMockStore = (cartItems = [])=>{
    return (0, _toolkit.configureStore)({
        reducer: {
            cartReducer: _cartslice.default
        },
        preloadedState: {
            cartReducer: {
                items: cartItems
            }
        }
    });
};
const renderWithStore = (component, cartItems = [])=>{
    const store = createMockStore(cartItems);
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
        store: store,
        children: component
    }));
};
describe('BottomNavigation', ()=>{
    beforeEach(()=>{
        mockUsePathname.mockReturnValue('/');
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    it('renders default navigation items', ()=>{
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        expect(_react1.screen.getByText('Inicio')).toBeInTheDocument();
        expect(_react1.screen.getByText('Ofertas')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pedidos')).toBeInTheDocument();
        expect(_react1.screen.getByText('Cotizador')).toBeInTheDocument();
        expect(_react1.screen.getByText('Menú')).toBeInTheDocument();
    });
    it('shows cart badge when there are items in cart', ()=>{
        const cartItems = [
            {
                id: '1',
                name: 'Product 1',
                price: 100,
                quantity: 2
            },
            {
                id: '2',
                name: 'Product 2',
                price: 200,
                quantity: 1
            }
        ];
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}), cartItems);
        // Should show badge with cart items count
        expect(_react1.screen.getByText('2')).toBeInTheDocument();
    });
    it('highlights active navigation item', ()=>{
        mockUsePathname.mockReturnValue('/shop');
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        const offersLink = _react1.screen.getByLabelText('Ofertas');
        expect(offersLink).toHaveClass('text-primary-700');
    });
    it('renders custom navigation items', ()=>{
        const customItems = [
            {
                id: 'home',
                label: 'Home',
                href: '/',
                icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Home, {
                    className: "w-5 h-5"
                })
            },
            {
                id: 'shop',
                label: 'Shop',
                href: '/shop',
                icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Tag, {
                    className: "w-5 h-5"
                }),
                badge: 5
            }
        ];
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {
            items: customItems
        }));
        expect(_react1.screen.getByText('Home')).toBeInTheDocument();
        expect(_react1.screen.getByText('Shop')).toBeInTheDocument();
        expect(_react1.screen.getByText('5')).toBeInTheDocument(); // Badge
    });
    it('hides labels when showLabels is false', ()=>{
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {
            showLabels: false
        }));
        expect(_react1.screen.queryByText('Inicio')).not.toBeInTheDocument();
        expect(_react1.screen.queryByText('Ofertas')).not.toBeInTheDocument();
    });
    it('limits items to maxItems', ()=>{
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {
            maxItems: 3
        }));
        expect(_react1.screen.getByText('Inicio')).toBeInTheDocument();
        expect(_react1.screen.getByText('Ofertas')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pedidos')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Cotizador')).not.toBeInTheDocument();
        expect(_react1.screen.queryByText('Menú')).not.toBeInTheDocument();
    });
    it('handles disabled items', ()=>{
        const customItems = [
            {
                id: 'home',
                label: 'Home',
                href: '/',
                icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Home, {
                    className: "w-5 h-5"
                })
            },
            {
                id: 'disabled',
                label: 'Disabled',
                href: '/disabled',
                icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Package, {
                    className: "w-5 h-5"
                }),
                disabled: true
            }
        ];
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {
            items: customItems
        }));
        const disabledLink = _react1.screen.getByLabelText('Disabled');
        expect(disabledLink).toHaveClass('opacity-50', 'pointer-events-none');
    });
    it('shows badge with 99+ for high numbers', ()=>{
        const customItems = [
            {
                id: 'notifications',
                label: 'Notifications',
                href: '/notifications',
                icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Package, {
                    className: "w-5 h-5"
                }),
                badge: 150
            }
        ];
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {
            items: customItems
        }));
        expect(_react1.screen.getByText('99+')).toBeInTheDocument();
    });
    it('applies correct variant classes', ()=>{
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {
            variant: "dark"
        }));
        const nav = container.querySelector('nav');
        expect(nav).toHaveClass('bg-gray-900/95', 'border-gray-700');
    });
    it('applies warm variant by default', ()=>{
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        const nav = container.querySelector('nav');
        expect(nav).toHaveClass('bg-orange-50/95', 'border-orange-100');
    });
    it('has proper accessibility attributes', ()=>{
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        const homeLink = _react1.screen.getByLabelText('Inicio');
        expect(homeLink).toHaveAttribute('aria-label', 'Inicio');
    });
    it('shows active indicator for current page', ()=>{
        mockUsePathname.mockReturnValue('/');
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        // Check for active background circle (updated class)
        const activeBackground = container.querySelector('.bg-primary\\/15');
        expect(activeBackground).toBeInTheDocument();
    });
    it('shows dot indicator when cart is empty', ()=>{
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}), []);
        // Should show subtle dot for orders when cart is empty
        const dotIndicator = container.querySelector('.bg-primary\\/60');
        expect(dotIndicator).toBeInTheDocument();
    });
    it('applies active item styling correctly', ()=>{
        mockUsePathname.mockReturnValue('/');
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        const homeLink = _react1.screen.getByLabelText('Inicio');
        expect(homeLink).toHaveClass('bottom-nav-item-active');
        expect(homeLink).toHaveClass('text-primary-700');
    });
    it('shows badge with pulse animation for cart items', ()=>{
        const cartItems = [
            {
                id: '1',
                name: 'Product 1',
                price: 100,
                quantity: 1
            }
        ];
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}), cartItems);
        const badge = container.querySelector('.bottom-nav-badge-pulse');
        expect(badge).toBeInTheDocument();
        expect(_react1.screen.getByText('1')).toBeInTheDocument();
    });
    it('scales icon when item is active', ()=>{
        mockUsePathname.mockReturnValue('/');
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        // Check for scale-110 class on active item
        const scaledIcon = container.querySelector('.scale-110');
        expect(scaledIcon).toBeInTheDocument();
    });
    it('applies mobile tap highlight styles', ()=>{
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        const navItems = container.querySelectorAll('.bottom-nav-item');
        expect(navItems.length).toBeGreaterThan(0);
        navItems.forEach((item)=>{
            expect(item).toHaveClass('bottom-nav-item');
        });
    });
    it('handles menu path correctly without persistent active state', ()=>{
        mockUsePathname.mockReturnValue('/menu');
        const { container } = renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        // Solo el menú debe estar activo
        const menuLink = _react1.screen.getByLabelText('Menú');
        expect(menuLink).toHaveClass('text-primary-700');
        // Otros items no deben estar activos
        const homeLink = _react1.screen.getByLabelText('Inicio');
        expect(homeLink).not.toHaveClass('text-primary-700');
    });
    it('prevents menu from activating other paths', ()=>{
        // Patrón 2 exitoso: Expectativas específicas - usar pathname que coincida con href de Pedidos
        mockUsePathname.mockReturnValue('/admin');
        renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_bottomnavigation.BottomNavigation, {}));
        // Pedidos debe estar activo (href="/admin" coincide con pathname="/admin")
        const ordersLink = _react1.screen.getByLabelText('Pedidos');
        expect(ordersLink).toHaveClass('text-primary-700');
        // Menú NO debe estar activo
        const menuLink = _react1.screen.getByLabelText('Menú');
        expect(menuLink).not.toHaveClass('text-primary-700');
    });
});

//# sourceMappingURL=data:application/json;base64,