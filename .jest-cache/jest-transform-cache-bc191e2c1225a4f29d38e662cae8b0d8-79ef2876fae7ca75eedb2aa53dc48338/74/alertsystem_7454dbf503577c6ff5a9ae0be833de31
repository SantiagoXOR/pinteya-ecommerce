95bf21c6c9d692d24decda40e558285b
// ===================================
// PINTEYA E-COMMERCE - ENTERPRISE ALERT SYSTEM
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AlertLevel () {
        return AlertLevel;
    },
    get AlertStatus () {
        return AlertStatus;
    },
    get EnterpriseAlertSystem () {
        return EnterpriseAlertSystem;
    },
    get NotificationType () {
        return NotificationType;
    },
    get acknowledgeAlert () {
        return acknowledgeAlert;
    },
    get enterpriseAlertSystem () {
        return enterpriseAlertSystem;
    },
    get resolveAlert () {
        return resolveAlert;
    },
    get triggerAlert () {
        return triggerAlert;
    }
});
const _logger = require("../logger");
const _supabase = require("../supabase");
const _email = require("../notifications/email");
const _slack = require("../notifications/slack");
// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente
let CacheUtils = null;
if (typeof window === 'undefined') {
    // Solo en servidor
    try {
        CacheUtils = require('@/lib/cache-manager').CacheUtils;
    } catch (error) {
        console.warn('[EnterpriseAlertSystem] CacheUtils not available:', error);
    }
}
var AlertLevel = /*#__PURE__*/ function(AlertLevel) {
    AlertLevel["INFO"] = "info";
    AlertLevel["WARNING"] = "warning";
    AlertLevel["CRITICAL"] = "critical";
    AlertLevel["EMERGENCY"] = "emergency";
    return AlertLevel;
}({});
var NotificationType = /*#__PURE__*/ function(NotificationType) {
    NotificationType["EMAIL"] = "email";
    NotificationType["SLACK"] = "slack";
    NotificationType["WEBHOOK"] = "webhook";
    NotificationType["SMS"] = "sms";
    NotificationType["PUSH"] = "push";
    NotificationType["LOG"] = "log";
    return NotificationType;
}({});
var AlertStatus = /*#__PURE__*/ function(AlertStatus) {
    AlertStatus["ACTIVE"] = "active";
    AlertStatus["ACKNOWLEDGED"] = "acknowledged";
    AlertStatus["RESOLVED"] = "resolved";
    AlertStatus["SUPPRESSED"] = "suppressed";
    return AlertStatus;
}({});
class EnterpriseAlertSystem {
    constructor(){
        this.alertRules = new Map();
        this.notificationChannels = new Map();
        this.escalationRules = new Map();
        this.activeAlerts = new Map();
        this.escalationInterval = null;
        this.initializeDefaultChannels();
        this.initializeDefaultRules();
        this.startEscalationMonitoring();
    }
    static getInstance() {
        if (!EnterpriseAlertSystem.instance) {
            EnterpriseAlertSystem.instance = new EnterpriseAlertSystem();
        }
        return EnterpriseAlertSystem.instance;
    }
    /**
   * Configura un canal de notificación
   */ setNotificationChannel(channel) {
        this.notificationChannels.set(channel.id, channel);
        _logger.logger.info(_logger.LogLevel.INFO, `Notification channel configured: ${channel.id}`, {
            type: channel.type,
            enabled: channel.enabled,
            levels: channel.levels
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Configura una regla de escalamiento
   */ setEscalationRule(rule) {
        this.escalationRules.set(rule.id, rule);
        _logger.logger.info(_logger.LogLevel.INFO, `Escalation rule configured: ${rule.id}`, {
            level: rule.conditions.level,
            duration: rule.conditions.duration,
            enabled: rule.enabled
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Configura una regla de alerta
   */ setAlertRule(rule) {
        this.alertRules.set(rule.id, rule);
        _logger.logger.info(_logger.LogLevel.INFO, `Alert rule configured: ${rule.id}`, {
            metricName: rule.metricName,
            threshold: rule.threshold,
            level: rule.level,
            enabled: rule.enabled
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Dispara una alerta
   */ async triggerAlert(ruleId, metricName, value, message) {
        const rule = this.alertRules.get(ruleId);
        if (!rule || !rule.enabled) {
            return null;
        }
        // Verificar cooldown
        const existingAlert = Array.from(this.activeAlerts.values()).find((alert)=>alert.ruleId === ruleId && alert.status === "active");
        if (existingAlert) {
            const cooldownEnd = new Date(existingAlert.triggeredAt);
            cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);
            if (new Date() < cooldownEnd) {
                return null; // Aún en cooldown
            }
        }
        // Crear nueva alerta
        const alert = {
            id: this.generateAlertId(),
            ruleId: rule.id,
            ruleName: rule.name,
            level: rule.level,
            status: "active",
            message: message || `${rule.description} - Value: ${value}, Threshold: ${rule.threshold}`,
            metricName,
            value,
            threshold: rule.threshold,
            triggeredAt: new Date().toISOString(),
            notificationsSent: [],
            tags: rule.tags,
            metadata: rule.metadata
        };
        this.activeAlerts.set(alert.id, alert);
        // Enviar notificaciones
        await this.sendNotifications(alert, rule.channels);
        // Almacenar en base de datos
        await this.storeAlert(alert);
        _logger.logger.warn(_logger.LogLevel.WARN, `Alert triggered: ${rule.name}`, {
            alertId: alert.id,
            level: alert.level,
            metricName: alert.metricName,
            value: alert.value,
            threshold: alert.threshold
        }, _logger.LogCategory.SYSTEM);
        return alert;
    }
    /**
   * Reconoce una alerta
   */ async acknowledgeAlert(alertId, userId) {
        const alert = this.activeAlerts.get(alertId);
        if (!alert || alert.status !== "active") {
            return false;
        }
        alert.status = "acknowledged";
        alert.acknowledgedAt = new Date().toISOString();
        alert.acknowledgedBy = userId;
        await this.updateAlert(alert);
        _logger.logger.info(_logger.LogLevel.INFO, `Alert acknowledged: ${alertId}`, {
            userId,
            level: alert.level,
            ruleName: alert.ruleName
        }, _logger.LogCategory.SYSTEM);
        return true;
    }
    /**
   * Resuelve una alerta
   */ async resolveAlert(alertId, userId) {
        const alert = this.activeAlerts.get(alertId);
        if (!alert) {
            return false;
        }
        alert.status = "resolved";
        alert.resolvedAt = new Date().toISOString();
        alert.resolvedBy = userId;
        await this.updateAlert(alert);
        this.activeAlerts.delete(alertId);
        _logger.logger.info(_logger.LogLevel.INFO, `Alert resolved: ${alertId}`, {
            userId,
            level: alert.level,
            ruleName: alert.ruleName,
            duration: this.calculateDuration(alert.triggeredAt, alert.resolvedAt)
        }, _logger.LogCategory.SYSTEM);
        return true;
    }
    /**
   * Envía notificaciones para una alerta
   */ async sendNotifications(alert, channelIds) {
        const notifications = await Promise.allSettled(channelIds.map((channelId)=>this.sendNotification(alert, channelId)));
        // Log resultados
        notifications.forEach((result, index)=>{
            const channelId = channelIds[index];
            if (result.status === 'fulfilled' && result.value) {
                alert.notificationsSent.push(result.value);
            } else if (result.status === 'rejected') {
                _logger.logger.error(_logger.LogLevel.ERROR, `Failed to send notification to channel: ${channelId}`, {
                    alertId: alert.id,
                    error: result.reason
                }, _logger.LogCategory.SYSTEM);
            }
        });
    }
    /**
   * Envía notificación a un canal específico
   */ async sendNotification(alert, channelId) {
        const channel = this.notificationChannels.get(channelId);
        if (!channel || !channel.enabled || !channel.levels.includes(alert.level)) {
            return null;
        }
        // Verificar rate limiting
        if (channel.rateLimit && !await this.checkRateLimit(channelId, channel.rateLimit)) {
            _logger.logger.warn(_logger.LogLevel.WARN, `Rate limit exceeded for channel: ${channelId}`, {
                alertId: alert.id
            }, _logger.LogCategory.SYSTEM);
            return null;
        }
        const startTime = Date.now();
        let success = false;
        let error;
        try {
            switch(channel.type){
                case "email":
                    await this.sendEmailNotification(alert, channel);
                    break;
                case "slack":
                    await this.sendSlackNotification(alert, channel);
                    break;
                case "webhook":
                    await this.sendWebhookNotification(alert, channel);
                    break;
                case "sms":
                    await this.sendSMSNotification(alert, channel);
                    break;
                case "log":
                    await this.sendLogNotification(alert, channel);
                    break;
                default:
                    throw new Error(`Unsupported notification type: ${channel.type}`);
            }
            success = true;
        } catch (err) {
            error = err instanceof Error ? err.message : 'Unknown error';
        }
        const notificationLog = {
            id: this.generateNotificationId(),
            channelId,
            channelType: channel.type,
            sentAt: new Date().toISOString(),
            success,
            error,
            responseTime: Date.now() - startTime
        };
        return notificationLog;
    }
    /**
   * Monitoreo de escalamiento automático
   */ async checkEscalations() {
        for (const alert of this.activeAlerts.values()){
            if (alert.status !== "active") {
                continue;
            }
            const rule = this.alertRules.get(alert.ruleId);
            if (!rule) {
                continue;
            }
            // Verificar reglas de escalamiento
            for (const escalationRuleId of rule.escalationRules){
                const escalationRule = this.escalationRules.get(escalationRuleId);
                if (!escalationRule || !escalationRule.enabled) {
                    continue;
                }
                // Verificar condiciones de escalamiento
                if (this.shouldEscalate(alert, escalationRule)) {
                    await this.escalateAlert(alert, escalationRule);
                }
            }
        }
    }
    /**
   * Verifica si una alerta debe escalarse
   */ shouldEscalate(alert, rule) {
        // Verificar nivel
        if (alert.level !== rule.conditions.level) {
            return false;
        }
        // Verificar duración
        const alertAge = Date.now() - new Date(alert.triggeredAt).getTime();
        const requiredDuration = rule.conditions.duration * 60 * 1000; // convertir a ms
        if (alertAge < requiredDuration) {
            return false;
        }
        // Verificar si ya fue escalada
        if (alert.escalatedAt) {
            return false;
        }
        return true;
    }
    /**
   * Escala una alerta
   */ async escalateAlert(alert, rule) {
        const originalLevel = alert.level;
        // Actualizar nivel si es necesario
        if (rule.actions.escalateToLevel) {
            alert.level = rule.actions.escalateToLevel;
            alert.escalatedFrom = originalLevel;
        }
        alert.escalatedAt = new Date().toISOString();
        // Enviar notificaciones de escalamiento
        await this.sendNotifications(alert, rule.actions.notifyChannels);
        // Asignar a usuario si es necesario
        if (rule.actions.assignToUser) {
            alert.metadata = {
                ...alert.metadata,
                assignedTo: rule.actions.assignToUser
            };
        }
        await this.updateAlert(alert);
        _logger.logger.error(_logger.LogLevel.ERROR, `Alert escalated: ${alert.id}`, {
            originalLevel,
            newLevel: alert.level,
            escalationRule: rule.name,
            duration: this.calculateDuration(alert.triggeredAt, alert.escalatedAt)
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Implementaciones de notificación específicas
   */ async sendEmailNotification(alert, channel) {
        try {
            const subject = `[${alert.level.toUpperCase()}] ${alert.ruleName}`;
            const emailData = {
                to: channel.config.to || [
                    'admin@example.com'
                ],
                subject,
                template: 'alert-notification',
                data: {
                    alert,
                    level: alert.level.toUpperCase(),
                    timestamp: new Date(alert.triggeredAt).toLocaleString(),
                    message: alert.message,
                    metricName: alert.metricName,
                    value: alert.value,
                    threshold: alert.threshold
                },
                priority: alert.level === "critical" || alert.level === "emergency" ? 'high' : 'normal'
            };
            await _email.emailService.sendNotification(emailData);
            _logger.logger.info(_logger.LogLevel.INFO, `Email notification sent successfully`, {
                alertId: alert.id,
                to: channel.config.to,
                subject
            }, _logger.LogCategory.SYSTEM);
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, `Failed to send email notification`, {
                alertId: alert.id,
                error: error instanceof Error ? error.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
            throw error;
        }
    }
    async sendSlackNotification(alert, channel) {
        try {
            const alertData = {
                title: `${alert.level.toUpperCase()}: ${alert.ruleName}`,
                message: alert.message,
                severity: alert.level === "critical" || alert.level === "emergency" ? 'error' : alert.level === "warning" ? 'warning' : 'info',
                details: {
                    'Alert ID': alert.id,
                    'Timestamp': new Date(alert.triggeredAt).toLocaleString(),
                    'Metric': alert.metricName,
                    'Value': alert.value?.toString() || 'N/A',
                    'Threshold': alert.threshold?.toString() || 'N/A',
                    'Status': alert.status,
                    ...alert.tags
                }
            };
            await _slack.slackService.sendSystemAlert(alertData);
            _logger.logger.info(_logger.LogLevel.INFO, `Slack notification sent successfully`, {
                alertId: alert.id,
                channel: channel.config.channel,
                webhook: channel.config.webhookUrl ? 'configured' : 'missing'
            }, _logger.LogCategory.SYSTEM);
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, `Failed to send Slack notification`, {
                alertId: alert.id,
                error: error instanceof Error ? error.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
            throw error;
        }
    }
    async sendWebhookNotification(alert, channel) {
        if (!channel.config.url) {
            throw new Error('Webhook URL not configured');
        }
        const response = await fetch(channel.config.url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                ...channel.config.headers || {}
            },
            body: JSON.stringify({
                alert,
                timestamp: new Date().toISOString(),
                source: 'pinteya-ecommerce'
            })
        });
        if (!response.ok) {
            throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);
        }
    }
    async sendSMSNotification(alert, channel) {
        // TODO: Implementar envío de SMS
        _logger.logger.info(_logger.LogLevel.INFO, `SMS notification sent`, {
            alertId: alert.id,
            to: channel.config.phoneNumber
        }, _logger.LogCategory.SYSTEM);
    }
    async sendLogNotification(alert, channel) {
        const logLevel = alert.level === "emergency" || alert.level === "critical" ? _logger.LogLevel.ERROR : _logger.LogLevel.WARN;
        _logger.logger.log(logLevel, `ALERT: ${alert.message}`, {
            alertId: alert.id,
            level: alert.level,
            metricName: alert.metricName,
            value: alert.value,
            threshold: alert.threshold,
            ruleName: alert.ruleName
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Inicializa canales por defecto
   */ initializeDefaultChannels() {
        // Canal de log por defecto
        this.setNotificationChannel({
            id: 'default_log',
            type: "log",
            name: 'Default Log Channel',
            config: {},
            enabled: true,
            levels: [
                "info",
                "warning",
                "critical",
                "emergency"
            ]
        });
        // Canal de webhook por defecto (deshabilitado)
        this.setNotificationChannel({
            id: 'default_webhook',
            type: "webhook",
            name: 'Default Webhook Channel',
            config: {
                url: process.env.ALERT_WEBHOOK_URL || ''
            },
            enabled: false,
            levels: [
                "critical",
                "emergency"
            ],
            rateLimit: {
                maxPerHour: 10,
                maxPerDay: 50
            }
        });
    }
    /**
   * Inicializa reglas por defecto
   */ initializeDefaultRules() {
        // Regla de escalamiento para alertas críticas
        this.setEscalationRule({
            id: 'critical_escalation',
            name: 'Critical Alert Escalation',
            enabled: true,
            conditions: {
                level: "critical",
                duration: 15 // 15 minutos
            },
            actions: {
                escalateToLevel: "emergency",
                notifyChannels: [
                    'default_log',
                    'default_webhook'
                ]
            }
        });
    }
    /**
   * Inicia monitoreo de escalamiento
   */ startEscalationMonitoring() {
        this.escalationInterval = setInterval(()=>{
            this.checkEscalations();
        }, 60000); // Verificar cada minuto
    }
    /**
   * Funciones auxiliares
   */ generateAlertId() {
        return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    generateNotificationId() {
        return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    calculateDuration(start, end) {
        return Math.round((new Date(end).getTime() - new Date(start).getTime()) / 1000 / 60); // minutos
    }
    async checkRateLimit(channelId, rateLimit) {
        // TODO: Implementar verificación de rate limiting con Redis
        return true;
    }
    async storeAlert(alert) {
        try {
            const supabase = (0, _supabase.getSupabaseClient)(true);
            if (!supabase) return;
            await supabase.from('enterprise_alerts').insert({
                id: alert.id,
                rule_id: alert.ruleId,
                rule_name: alert.ruleName,
                level: alert.level,
                status: alert.status,
                message: alert.message,
                metric_name: alert.metricName,
                value: alert.value,
                threshold: alert.threshold,
                triggered_at: alert.triggeredAt,
                acknowledged_at: alert.acknowledgedAt,
                acknowledged_by: alert.acknowledgedBy,
                resolved_at: alert.resolvedAt,
                resolved_by: alert.resolvedBy,
                escalated_at: alert.escalatedAt,
                escalated_from: alert.escalatedFrom,
                notifications_sent: alert.notificationsSent,
                tags: alert.tags,
                metadata: alert.metadata
            });
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to store alert', {
                error: error instanceof Error ? error.message : 'Unknown error',
                alertId: alert.id
            }, _logger.LogCategory.SYSTEM);
        }
    }
    async updateAlert(alert) {
        try {
            const supabase = (0, _supabase.getSupabaseClient)(true);
            if (!supabase) return;
            await supabase.from('enterprise_alerts').update({
                level: alert.level,
                status: alert.status,
                acknowledged_at: alert.acknowledgedAt,
                acknowledged_by: alert.acknowledgedBy,
                resolved_at: alert.resolvedAt,
                resolved_by: alert.resolvedBy,
                escalated_at: alert.escalatedAt,
                escalated_from: alert.escalatedFrom,
                notifications_sent: alert.notificationsSent,
                metadata: alert.metadata
            }).eq('id', alert.id);
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to update alert', {
                error: error instanceof Error ? error.message : 'Unknown error',
                alertId: alert.id
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Limpia recursos
   */ destroy() {
        if (this.escalationInterval) {
            clearInterval(this.escalationInterval);
            this.escalationInterval = null;
        }
    }
}
const enterpriseAlertSystem = EnterpriseAlertSystem.getInstance();
const triggerAlert = enterpriseAlertSystem.triggerAlert.bind(enterpriseAlertSystem);
const acknowledgeAlert = enterpriseAlertSystem.acknowledgeAlert.bind(enterpriseAlertSystem);
const resolveAlert = enterpriseAlertSystem.resolveAlert.bind(enterpriseAlertSystem);

//# sourceMappingURL=data:application/json;base64,