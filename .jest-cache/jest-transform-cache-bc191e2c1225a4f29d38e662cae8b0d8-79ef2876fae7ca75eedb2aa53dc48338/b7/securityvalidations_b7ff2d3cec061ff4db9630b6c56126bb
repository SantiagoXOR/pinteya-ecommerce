e98343db1ac24a6ca543cfb8540457ca
/**
 * Security Validations
 * Validaciones de seguridad y permisos para el sistema enterprise
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ROLE_PERMISSIONS () {
        return ROLE_PERMISSIONS;
    },
    get getPermissionsByRole () {
        return getPermissionsByRole;
    },
    get getUserPermissions () {
        return getUserPermissions;
    },
    get getUserRole () {
        return getUserRole;
    },
    get hasAllPermissions () {
        return hasAllPermissions;
    },
    get hasAnyPermission () {
        return hasAnyPermission;
    },
    get hasPermission () {
        return hasPermission;
    },
    get isAdmin () {
        return isAdmin;
    },
    get isModerator () {
        return isModerator;
    },
    get requireAdmin () {
        return requireAdmin;
    },
    get requirePermission () {
        return requirePermission;
    },
    get requireRole () {
        return requireRole;
    },
    get roleHasPermission () {
        return roleHasPermission;
    },
    get validateResourceAccess () {
        return validateResourceAccess;
    }
});
const _supabase = require("../supabase");
const _logger = require("../logger");
const ROLE_PERMISSIONS = {
    admin: [
        'read:products',
        'write:products',
        'delete:products',
        'read:orders',
        'write:orders',
        'delete:orders',
        'read:users',
        'write:users',
        'delete:users',
        'admin:dashboard',
        'admin:settings',
        'admin:reports',
        'moderate:content',
        'moderate:users'
    ],
    moderator: [
        'read:products',
        'write:products',
        'read:orders',
        'write:orders',
        'read:users',
        'moderate:content',
        'moderate:users'
    ],
    customer: [
        'read:products',
        'read:orders'
    ]
};
function getPermissionsByRole(role) {
    return ROLE_PERMISSIONS[role] || [];
}
function roleHasPermission(role, permission) {
    const permissions = getPermissionsByRole(role);
    return permissions.includes(permission);
}
async function hasPermission(userId, permission) {
    try {
        const { data: user, error } = await _supabase.supabaseAdmin.from('users').select('role, permissions').eq('id', userId).eq('is_active', true).single();
        if (error || !user) {
            _logger.logger.error('Error obteniendo usuario para validación de permisos:', error);
            return false;
        }
        // Verificar permisos del rol
        const rolePermissions = getPermissionsByRole(user.role);
        if (rolePermissions.includes(permission)) {
            return true;
        }
        // Verificar permisos específicos del usuario
        const userPermissions = user.permissions || [];
        return userPermissions.includes(permission);
    } catch (error) {
        _logger.logger.error('Error en hasPermission:', error);
        return false;
    }
}
async function hasAnyPermission(userId, permissions) {
    for (const permission of permissions){
        if (await hasPermission(userId, permission)) {
            return true;
        }
    }
    return false;
}
async function hasAllPermissions(userId, permissions) {
    for (const permission of permissions){
        if (!await hasPermission(userId, permission)) {
            return false;
        }
    }
    return true;
}
async function isAdmin(userId) {
    try {
        const { data: user, error } = await _supabase.supabaseAdmin.from('users').select('role').eq('id', userId).eq('is_active', true).single();
        if (error || !user) {
            return false;
        }
        return user.role === 'admin';
    } catch (error) {
        _logger.logger.error('Error en isAdmin:', error);
        return false;
    }
}
async function isModerator(userId) {
    try {
        const { data: user, error } = await _supabase.supabaseAdmin.from('users').select('role').eq('id', userId).eq('is_active', true).single();
        if (error || !user) {
            return false;
        }
        return [
            'admin',
            'moderator'
        ].includes(user.role);
    } catch (error) {
        _logger.logger.error('Error en isModerator:', error);
        return false;
    }
}
async function getUserRole(userId) {
    try {
        const { data: user, error } = await _supabase.supabaseAdmin.from('users').select('role').eq('id', userId).eq('is_active', true).single();
        if (error || !user) {
            return null;
        }
        return user.role;
    } catch (error) {
        _logger.logger.error('Error en getUserRole:', error);
        return null;
    }
}
async function validateResourceAccess(userId, resourceType, action, resourceId) {
    const permission = `${action}:${resourceType}s`;
    // Verificar permiso básico
    if (!await hasPermission(userId, permission)) {
        return false;
    }
    // Validaciones adicionales por tipo de recurso
    if (resourceType === 'order' && resourceId) {
        // Los customers solo pueden acceder a sus propias órdenes
        const userRole = await getUserRole(userId);
        if (userRole === 'customer') {
            return await validateOrderOwnership(userId, resourceId);
        }
    }
    return true;
}
/**
 * Valida que un usuario sea propietario de una orden
 */ async function validateOrderOwnership(userId, orderId) {
    try {
        const { data: order, error } = await _supabase.supabaseAdmin.from('orders').select('user_id').eq('id', orderId).single();
        if (error || !order) {
            return false;
        }
        return order.user_id === userId;
    } catch (error) {
        _logger.logger.error('Error validando propiedad de orden:', error);
        return false;
    }
}
function requirePermission(permission) {
    return async (userId)=>{
        return await hasPermission(userId, permission);
    };
}
function requireRole(role) {
    return async (userId)=>{
        const userRole = await getUserRole(userId);
        return userRole === role;
    };
}
function requireAdmin() {
    return async (userId)=>{
        return await isAdmin(userId);
    };
}
async function getUserPermissions(userId) {
    try {
        const { data: user, error } = await _supabase.supabaseAdmin.from('users').select('role, permissions').eq('id', userId).eq('is_active', true).single();
        if (error || !user) {
            return [];
        }
        const rolePermissions = getPermissionsByRole(user.role);
        const userPermissions = user.permissions || [];
        // Combinar permisos del rol y permisos específicos del usuario
        const allPermissions = [
            ...rolePermissions,
            ...userPermissions
        ];
        // Eliminar duplicados
        return [
            ...new Set(allPermissions)
        ];
    } catch (error) {
        _logger.logger.error('Error en getUserPermissions:', error);
        return [];
    }
}

//# sourceMappingURL=data:application/json;base64,