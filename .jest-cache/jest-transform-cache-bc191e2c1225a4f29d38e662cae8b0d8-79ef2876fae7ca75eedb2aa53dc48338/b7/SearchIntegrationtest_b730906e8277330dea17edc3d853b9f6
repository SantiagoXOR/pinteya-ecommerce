57e2661661fbab12bdfa4a2d9b9a2b5d
/**
 * Tests de Integración - Sistema de Búsqueda
 * Pruebas de integración entre Header y componentes de búsqueda
 */ "use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush,
                replace: jest.fn(),
                prefetch: jest.fn()
            }),
        useSearchParams: ()=>({
                get: jest.fn()
            })
    }));
// Mock de Clerk
jest.mock('@clerk/nextjs', ()=>({
        ClerkProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        SignedIn: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-in",
                children: children
            }),
        SignedOut: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-out",
                children: children
            }),
        UserButton: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-button",
                children: "UserButton"
            }),
        useUser: ()=>({
                isSignedIn: false,
                user: null,
                isLoaded: true
            })
    }));
// Mock de hooks
jest.mock('@/hooks/useGeolocation', ()=>({
        useGeolocation: ()=>({
                detectedZone: {
                    id: 'cordoba-capital',
                    name: 'Córdoba Capital'
                },
                requestLocation: jest.fn(),
                permissionStatus: 'granted',
                isLoading: false,
                error: null,
                location: null,
                testLocation: jest.fn(),
                deliveryZones: [
                    {
                        id: 'cordoba-capital',
                        name: 'Córdoba Capital'
                    }
                ]
            })
    }));
jest.mock('@/hooks/useCartAnimation', ()=>({
        useCartAnimation: ()=>({
                isAnimating: false
            })
    }));
// Mock de componentes UI
jest.mock('@/components/ui/optimized-cart-icon', ()=>({
        OptimizedCartIcon: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "cart-icon",
                children: "Cart"
            })
    }));
jest.mock('@/components/ui/OptimizedLogo', ()=>({
        HeaderLogo: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                "data-testid": "header-logo",
                alt: "Pinteya"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _reactredux = require("react-redux");
const _reactquery = require("@tanstack/react-query");
const _msw = require("msw");
const _node = require("msw/node");
const _index = /*#__PURE__*/ _interop_require_default(require("../../index"));
const _store = require("../../../../redux/store");
const _CartSidebarModalContext = require("../../../../app/context/CartSidebarModalContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock de Next.js
const mockPush = jest.fn();
// Datos de prueba para APIs
const mockTrendingSearches = [
    {
        query: 'pintura blanca',
        count: 150
    },
    {
        query: 'latex interior',
        count: 120
    },
    {
        query: 'esmalte sintético',
        count: 100
    },
    {
        query: 'barniz marino',
        count: 80
    }
];
const mockSearchSuggestions = [
    {
        id: 1,
        name: 'Pintura Latex Blanca 20L',
        category: 'Pinturas'
    },
    {
        id: 2,
        name: 'Pintura Latex Interior Premium',
        category: 'Pinturas'
    },
    {
        id: 3,
        name: 'Esmalte Sintético Blanco',
        category: 'Esmaltes'
    }
];
const mockRecentSearches = [
    'pintura exterior',
    'rodillo 23cm',
    'thinner común'
];
// Configuración del servidor MSW
const server = (0, _node.setupServer)(// API de búsquedas trending
_msw.rest.get('/api/search/trending', (req, res, ctx)=>{
    return res(ctx.status(200), ctx.json({
        success: true,
        data: mockTrendingSearches,
        count: mockTrendingSearches.length
    }));
}), // API de sugerencias de búsqueda
_msw.rest.get('/api/search/suggestions', (req, res, ctx)=>{
    const query = req.url.searchParams.get('q');
    const filteredSuggestions = mockSearchSuggestions.filter((item)=>item.name.toLowerCase().includes(query?.toLowerCase() || ''));
    return res(ctx.status(200), ctx.json({
        success: true,
        data: filteredSuggestions,
        count: filteredSuggestions.length
    }));
}), // API de productos (para búsqueda)
_msw.rest.get('/api/products', (req, res, ctx)=>{
    const search = req.url.searchParams.get('search');
    return res(ctx.status(200), ctx.json({
        success: true,
        data: mockSearchSuggestions,
        pagination: {
            total: 3,
            page: 1,
            limit: 10
        }
    }));
}));
// Setup y teardown del servidor
beforeAll(()=>server.listen());
afterEach(()=>{
    server.resetHandlers();
    jest.clearAllMocks();
    localStorage.clear();
});
afterAll(()=>server.close());
// Wrapper de pruebas
const TestWrapper = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                staleTime: 0
            },
            mutations: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
        store: _store.store,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CartSidebarModalContext.CartModalProvider, {
                children: children
            })
        })
    });
};
describe('SearchIntegration - Tests de Integración', ()=>{
    const user = _userevent.default.setup();
    describe('Carga Inicial de Búsquedas Trending', ()=>{
        it('debe cargar búsquedas trending al montar el componente', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Esperar a que se carguen las búsquedas trending
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-input')).toBeInTheDocument();
            });
            // Verificar que se hizo la llamada a la API
            await (0, _react1.waitFor)(()=>{
                // La llamada se hace internamente en el hook useTrendingSearches
                expect(_react1.screen.getByTestId('search-input')).toBeInTheDocument();
            });
        });
        it('debe manejar errores en la carga de trending searches', async ()=>{
            // Simular error en la API
            server.use(_msw.rest.get('/api/search/trending', (req, res, ctx)=>{
                return res(ctx.status(500), ctx.json({
                    error: 'Server error'
                }));
            }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // El componente debe seguir funcionando aunque falle la API
            expect(_react1.screen.getByTestId('search-input')).toBeInTheDocument();
        });
    });
    describe('Funcionalidad de Búsqueda con Debounce', ()=>{
        it('debe realizar búsqueda con debounce al escribir', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            // Escribir en el campo de búsqueda
            await user.type(searchInput, 'pintura');
            // Esperar el debounce (300ms)
            await (0, _react1.waitFor)(()=>{
                expect(searchInput).toHaveValue('pintura');
            }, {
                timeout: 500
            });
        });
        it('debe cancelar búsquedas anteriores al escribir rápidamente', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            // Escribir rápidamente múltiples caracteres
            await user.type(searchInput, 'pin');
            await user.type(searchInput, 'tura');
            // Solo la última búsqueda debe ejecutarse
            await (0, _react1.waitFor)(()=>{
                expect(searchInput).toHaveValue('pintura');
            });
        });
    });
    describe('Navegación desde Búsqueda', ()=>{
        it('debe navegar a resultados al presionar Enter', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            // Escribir y presionar Enter
            await user.type(searchInput, 'latex blanco');
            await user.keyboard('{Enter}');
            // Verificar navegación
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/productos?q=latex%20blanco');
            });
        });
        it('debe navegar con parámetros de búsqueda correctos', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            // Búsqueda con espacios y caracteres especiales
            await user.type(searchInput, 'pintura 20L & barniz');
            await user.keyboard('{Enter}');
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith(expect.stringContaining('/productos?q='));
            });
        });
    });
    describe('Historial de Búsquedas', ()=>{
        it('debe guardar búsquedas en localStorage', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            // Realizar búsqueda
            await user.type(searchInput, 'esmalte sintético');
            await user.keyboard('{Enter}');
            // Verificar que se guardó en localStorage
            await (0, _react1.waitFor)(()=>{
                const recentSearches = JSON.parse(localStorage.getItem('pinteya_recent_searches') || '[]');
                expect(recentSearches).toContain('esmalte sintético');
            });
        });
        it('debe limitar el historial a máximo 10 búsquedas', async ()=>{
            // Prellenar localStorage con 10 búsquedas
            const existingSearches = Array.from({
                length: 10
            }, (_, i)=>`búsqueda ${i}`);
            localStorage.setItem('pinteya_recent_searches', JSON.stringify(existingSearches));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            // Realizar nueva búsqueda
            await user.type(searchInput, 'nueva búsqueda');
            await user.keyboard('{Enter}');
            await (0, _react1.waitFor)(()=>{
                const recentSearches = JSON.parse(localStorage.getItem('pinteya_recent_searches') || '[]');
                expect(recentSearches).toHaveLength(10);
                expect(recentSearches[0]).toBe('nueva búsqueda');
            });
        });
    });
    describe('Estados de Carga y Error', ()=>{
        it('debe mostrar estado de carga durante búsqueda', async ()=>{
            // Simular respuesta lenta
            server.use(_msw.rest.get('/api/search/suggestions', (req, res, ctx)=>{
                return res(ctx.delay(1000), ctx.json({
                    data: []
                }));
            }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            await user.type(searchInput, 'test');
            // Verificar que el input sigue funcionando durante la carga
            expect(searchInput).toHaveValue('test');
        });
        it('debe manejar errores de búsqueda gracefully', async ()=>{
            // Simular error en API de sugerencias
            server.use(_msw.rest.get('/api/search/suggestions', (req, res, ctx)=>{
                return res(ctx.status(500));
            }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            await user.type(searchInput, 'test error');
            // El componente debe seguir funcionando
            expect(searchInput).toHaveValue('test error');
        });
    });
    describe('Integración con Geolocalización', ()=>{
        it('debe incluir zona de entrega en búsquedas cuando esté disponible', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            await user.type(searchInput, 'pintura');
            await user.keyboard('{Enter}');
            // Verificar que la navegación incluye contexto de ubicación
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith(expect.stringContaining('/productos?q=pintura'));
            });
        });
    });
    describe('Performance y Optimización', ()=>{
        it('debe cancelar requests anteriores al hacer nueva búsqueda', async ()=>{
            let requestCount = 0;
            server.use(_msw.rest.get('/api/search/suggestions', (req, res, ctx)=>{
                requestCount++;
                return res(ctx.delay(100), ctx.json({
                    data: []
                }));
            }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByTestId('search-input');
            // Hacer múltiples búsquedas rápidas
            await user.type(searchInput, 'a');
            await user.type(searchInput, 'b');
            await user.type(searchInput, 'c');
            // Esperar a que se resuelvan
            await (0, _react1.waitFor)(()=>{
                expect(searchInput).toHaveValue('abc');
            });
            // Solo debe haber hecho el request final
            expect(requestCount).toBeLessThanOrEqual(3);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcSGVhZGVyXFxfX3Rlc3RzX19cXGludGVncmF0aW9uXFxTZWFyY2hJbnRlZ3JhdGlvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIGRlIEludGVncmFjacOzbiAtIFNpc3RlbWEgZGUgQsO6c3F1ZWRhXG4gKiBQcnVlYmFzIGRlIGludGVncmFjacOzbiBlbnRyZSBIZWFkZXIgeSBjb21wb25lbnRlcyBkZSBiw7pzcXVlZGFcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciwgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgdXNlckV2ZW50IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7IHJlc3QgfSBmcm9tICdtc3cnO1xuaW1wb3J0IHsgc2V0dXBTZXJ2ZXIgfSBmcm9tICdtc3cvbm9kZSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uLy4uL2luZGV4JztcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnQC9yZWR1eC9zdG9yZSc7XG5pbXBvcnQgeyBDYXJ0TW9kYWxQcm92aWRlciB9IGZyb20gJ0AvYXBwL2NvbnRleHQvQ2FydFNpZGViYXJNb2RhbENvbnRleHQnO1xuXG4vLyBNb2NrIGRlIE5leHQuanNcbmNvbnN0IG1vY2tQdXNoID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCduZXh0L25hdmlnYXRpb24nLCAoKSA9PiAoe1xuICB1c2VSb3V0ZXI6ICgpID0+ICh7XG4gICAgcHVzaDogbW9ja1B1c2gsXG4gICAgcmVwbGFjZTogamVzdC5mbigpLFxuICAgIHByZWZldGNoOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VTZWFyY2hQYXJhbXM6ICgpID0+ICh7XG4gICAgZ2V0OiBqZXN0LmZuKCksXG4gIH0pLFxufSkpO1xuXG4vLyBNb2NrIGRlIENsZXJrXG5qZXN0Lm1vY2soJ0BjbGVyay9uZXh0anMnLCAoKSA9PiAoe1xuICBDbGVya1Byb3ZpZGVyOiAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4gPGRpdj57Y2hpbGRyZW59PC9kaXY+LFxuICBTaWduZWRJbjogKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pID0+IDxkaXYgZGF0YS10ZXN0aWQ9XCJzaWduZWQtaW5cIj57Y2hpbGRyZW59PC9kaXY+LFxuICBTaWduZWRPdXQ6ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiA8ZGl2IGRhdGEtdGVzdGlkPVwic2lnbmVkLW91dFwiPntjaGlsZHJlbn08L2Rpdj4sXG4gIFVzZXJCdXR0b246ICgpID0+IDxkaXYgZGF0YS10ZXN0aWQ9XCJ1c2VyLWJ1dHRvblwiPlVzZXJCdXR0b248L2Rpdj4sXG4gIHVzZVVzZXI6ICgpID0+ICh7XG4gICAgaXNTaWduZWRJbjogZmFsc2UsXG4gICAgdXNlcjogbnVsbCxcbiAgICBpc0xvYWRlZDogdHJ1ZSxcbiAgfSksXG59KSk7XG5cbi8vIE1vY2sgZGUgaG9va3Ncbmplc3QubW9jaygnQC9ob29rcy91c2VHZW9sb2NhdGlvbicsICgpID0+ICh7XG4gIHVzZUdlb2xvY2F0aW9uOiAoKSA9PiAoe1xuICAgIGRldGVjdGVkWm9uZTogeyBpZDogJ2NvcmRvYmEtY2FwaXRhbCcsIG5hbWU6ICdDw7NyZG9iYSBDYXBpdGFsJyB9LFxuICAgIHJlcXVlc3RMb2NhdGlvbjogamVzdC5mbigpLFxuICAgIHBlcm1pc3Npb25TdGF0dXM6ICdncmFudGVkJyxcbiAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGxvY2F0aW9uOiBudWxsLFxuICAgIHRlc3RMb2NhdGlvbjogamVzdC5mbigpLFxuICAgIGRlbGl2ZXJ5Wm9uZXM6IFt7IGlkOiAnY29yZG9iYS1jYXBpdGFsJywgbmFtZTogJ0PDs3Jkb2JhIENhcGl0YWwnIH1dLFxuICB9KSxcbn0pKTtcblxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZUNhcnRBbmltYXRpb24nLCAoKSA9PiAoe1xuICB1c2VDYXJ0QW5pbWF0aW9uOiAoKSA9PiAoeyBpc0FuaW1hdGluZzogZmFsc2UgfSksXG59KSk7XG5cbi8vIE1vY2sgZGUgY29tcG9uZW50ZXMgVUlcbmplc3QubW9jaygnQC9jb21wb25lbnRzL3VpL29wdGltaXplZC1jYXJ0LWljb24nLCAoKSA9PiAoe1xuICBPcHRpbWl6ZWRDYXJ0SWNvbjogKCkgPT4gPGRpdiBkYXRhLXRlc3RpZD1cImNhcnQtaWNvblwiPkNhcnQ8L2Rpdj4sXG59KSk7XG5cbmplc3QubW9jaygnQC9jb21wb25lbnRzL3VpL09wdGltaXplZExvZ28nLCAoKSA9PiAoe1xuICBIZWFkZXJMb2dvOiAoKSA9PiA8aW1nIGRhdGEtdGVzdGlkPVwiaGVhZGVyLWxvZ29cIiBhbHQ9XCJQaW50ZXlhXCIgLz4sXG59KSk7XG5cbi8vIERhdG9zIGRlIHBydWViYSBwYXJhIEFQSXNcbmNvbnN0IG1vY2tUcmVuZGluZ1NlYXJjaGVzID0gW1xuICB7IHF1ZXJ5OiAncGludHVyYSBibGFuY2EnLCBjb3VudDogMTUwIH0sXG4gIHsgcXVlcnk6ICdsYXRleCBpbnRlcmlvcicsIGNvdW50OiAxMjAgfSxcbiAgeyBxdWVyeTogJ2VzbWFsdGUgc2ludMOpdGljbycsIGNvdW50OiAxMDAgfSxcbiAgeyBxdWVyeTogJ2Jhcm5peiBtYXJpbm8nLCBjb3VudDogODAgfSxcbl07XG5cbmNvbnN0IG1vY2tTZWFyY2hTdWdnZXN0aW9ucyA9IFtcbiAgeyBpZDogMSwgbmFtZTogJ1BpbnR1cmEgTGF0ZXggQmxhbmNhIDIwTCcsIGNhdGVnb3J5OiAnUGludHVyYXMnIH0sXG4gIHsgaWQ6IDIsIG5hbWU6ICdQaW50dXJhIExhdGV4IEludGVyaW9yIFByZW1pdW0nLCBjYXRlZ29yeTogJ1BpbnR1cmFzJyB9LFxuICB7IGlkOiAzLCBuYW1lOiAnRXNtYWx0ZSBTaW50w6l0aWNvIEJsYW5jbycsIGNhdGVnb3J5OiAnRXNtYWx0ZXMnIH0sXG5dO1xuXG5jb25zdCBtb2NrUmVjZW50U2VhcmNoZXMgPSBbXG4gICdwaW50dXJhIGV4dGVyaW9yJyxcbiAgJ3JvZGlsbG8gMjNjbScsXG4gICd0aGlubmVyIGNvbcO6bicsXG5dO1xuXG4vLyBDb25maWd1cmFjacOzbiBkZWwgc2Vydmlkb3IgTVNXXG5jb25zdCBzZXJ2ZXIgPSBzZXR1cFNlcnZlcihcbiAgLy8gQVBJIGRlIGLDunNxdWVkYXMgdHJlbmRpbmdcbiAgcmVzdC5nZXQoJy9hcGkvc2VhcmNoL3RyZW5kaW5nJywgKHJlcSwgcmVzLCBjdHgpID0+IHtcbiAgICByZXR1cm4gcmVzKFxuICAgICAgY3R4LnN0YXR1cygyMDApLFxuICAgICAgY3R4Lmpzb24oe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBtb2NrVHJlbmRpbmdTZWFyY2hlcyxcbiAgICAgICAgY291bnQ6IG1vY2tUcmVuZGluZ1NlYXJjaGVzLmxlbmd0aCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfSksXG5cbiAgLy8gQVBJIGRlIHN1Z2VyZW5jaWFzIGRlIGLDunNxdWVkYVxuICByZXN0LmdldCgnL2FwaS9zZWFyY2gvc3VnZ2VzdGlvbnMnLCAocmVxLCByZXMsIGN0eCkgPT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gcmVxLnVybC5zZWFyY2hQYXJhbXMuZ2V0KCdxJyk7XG4gICAgY29uc3QgZmlsdGVyZWRTdWdnZXN0aW9ucyA9IG1vY2tTZWFyY2hTdWdnZXN0aW9ucy5maWx0ZXIoaXRlbSA9PlxuICAgICAgaXRlbS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnk/LnRvTG93ZXJDYXNlKCkgfHwgJycpXG4gICAgKTtcbiAgICBcbiAgICByZXR1cm4gcmVzKFxuICAgICAgY3R4LnN0YXR1cygyMDApLFxuICAgICAgY3R4Lmpzb24oe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBmaWx0ZXJlZFN1Z2dlc3Rpb25zLFxuICAgICAgICBjb3VudDogZmlsdGVyZWRTdWdnZXN0aW9ucy5sZW5ndGgsXG4gICAgICB9KVxuICAgICk7XG4gIH0pLFxuXG4gIC8vIEFQSSBkZSBwcm9kdWN0b3MgKHBhcmEgYsO6c3F1ZWRhKVxuICByZXN0LmdldCgnL2FwaS9wcm9kdWN0cycsIChyZXEsIHJlcywgY3R4KSA9PiB7XG4gICAgY29uc3Qgc2VhcmNoID0gcmVxLnVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzZWFyY2gnKTtcbiAgICByZXR1cm4gcmVzKFxuICAgICAgY3R4LnN0YXR1cygyMDApLFxuICAgICAgY3R4Lmpzb24oe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBtb2NrU2VhcmNoU3VnZ2VzdGlvbnMsXG4gICAgICAgIHBhZ2luYXRpb246IHsgdG90YWw6IDMsIHBhZ2U6IDEsIGxpbWl0OiAxMCB9LFxuICAgICAgfSlcbiAgICApO1xuICB9KVxuKTtcblxuLy8gU2V0dXAgeSB0ZWFyZG93biBkZWwgc2Vydmlkb3JcbmJlZm9yZUFsbCgoKSA9PiBzZXJ2ZXIubGlzdGVuKCkpO1xuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgc2VydmVyLnJlc2V0SGFuZGxlcnMoKTtcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xufSk7XG5hZnRlckFsbCgoKSA9PiBzZXJ2ZXIuY2xvc2UoKSk7XG5cbi8vIFdyYXBwZXIgZGUgcHJ1ZWJhc1xuY29uc3QgVGVzdFdyYXBwZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4ge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCh7XG4gICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgIHF1ZXJpZXM6IHsgcmV0cnk6IGZhbHNlLCBzdGFsZVRpbWU6IDAgfSxcbiAgICAgIG11dGF0aW9uczogeyByZXRyeTogZmFsc2UgfSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgPFF1ZXJ5Q2xpZW50UHJvdmlkZXIgY2xpZW50PXtxdWVyeUNsaWVudH0+XG4gICAgICAgIDxDYXJ0TW9kYWxQcm92aWRlcj5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvQ2FydE1vZGFsUHJvdmlkZXI+XG4gICAgICA8L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gICAgPC9Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmRlc2NyaWJlKCdTZWFyY2hJbnRlZ3JhdGlvbiAtIFRlc3RzIGRlIEludGVncmFjacOzbicsICgpID0+IHtcbiAgY29uc3QgdXNlciA9IHVzZXJFdmVudC5zZXR1cCgpO1xuXG4gIGRlc2NyaWJlKCdDYXJnYSBJbmljaWFsIGRlIELDunNxdWVkYXMgVHJlbmRpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgY2FyZ2FyIGLDunNxdWVkYXMgdHJlbmRpbmcgYWwgbW9udGFyIGVsIGNvbXBvbmVudGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICAvLyBFc3BlcmFyIGEgcXVlIHNlIGNhcmd1ZW4gbGFzIGLDunNxdWVkYXMgdHJlbmRpbmdcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtaW5wdXQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIHNlIGhpem8gbGEgbGxhbWFkYSBhIGxhIEFQSVxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIC8vIExhIGxsYW1hZGEgc2UgaGFjZSBpbnRlcm5hbWVudGUgZW4gZWwgaG9vayB1c2VUcmVuZGluZ1NlYXJjaGVzXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1pbnB1dCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIGVycm9yZXMgZW4gbGEgY2FyZ2EgZGUgdHJlbmRpbmcgc2VhcmNoZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTaW11bGFyIGVycm9yIGVuIGxhIEFQSVxuICAgICAgc2VydmVyLnVzZShcbiAgICAgICAgcmVzdC5nZXQoJy9hcGkvc2VhcmNoL3RyZW5kaW5nJywgKHJlcSwgcmVzLCBjdHgpID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVzKGN0eC5zdGF0dXMoNTAwKSwgY3R4Lmpzb24oeyBlcnJvcjogJ1NlcnZlciBlcnJvcicgfSkpO1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgLy8gRWwgY29tcG9uZW50ZSBkZWJlIHNlZ3VpciBmdW5jaW9uYW5kbyBhdW5xdWUgZmFsbGUgbGEgQVBJXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtaW5wdXQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Z1bmNpb25hbGlkYWQgZGUgQsO6c3F1ZWRhIGNvbiBEZWJvdW5jZScsICgpID0+IHtcbiAgICBpdCgnZGViZSByZWFsaXphciBiw7pzcXVlZGEgY29uIGRlYm91bmNlIGFsIGVzY3JpYmlyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1pbnB1dCcpO1xuXG4gICAgICAvLyBFc2NyaWJpciBlbiBlbCBjYW1wbyBkZSBiw7pzcXVlZGFcbiAgICAgIGF3YWl0IHVzZXIudHlwZShzZWFyY2hJbnB1dCwgJ3BpbnR1cmEnKTtcblxuICAgICAgLy8gRXNwZXJhciBlbCBkZWJvdW5jZSAoMzAwbXMpXG4gICAgICBhd2FpdCB3YWl0Rm9yKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KHNlYXJjaElucHV0KS50b0hhdmVWYWx1ZSgncGludHVyYScpO1xuICAgICAgICB9LFxuICAgICAgICB7IHRpbWVvdXQ6IDUwMCB9XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgY2FuY2VsYXIgYsO6c3F1ZWRhcyBhbnRlcmlvcmVzIGFsIGVzY3JpYmlyIHLDoXBpZGFtZW50ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtaW5wdXQnKTtcblxuICAgICAgLy8gRXNjcmliaXIgcsOhcGlkYW1lbnRlIG3Dumx0aXBsZXMgY2FyYWN0ZXJlc1xuICAgICAgYXdhaXQgdXNlci50eXBlKHNlYXJjaElucHV0LCAncGluJyk7XG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2VhcmNoSW5wdXQsICd0dXJhJyk7XG5cbiAgICAgIC8vIFNvbG8gbGEgw7psdGltYSBiw7pzcXVlZGEgZGViZSBlamVjdXRhcnNlXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNlYXJjaElucHV0KS50b0hhdmVWYWx1ZSgncGludHVyYScpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdOYXZlZ2FjacOzbiBkZXNkZSBCw7pzcXVlZGEnLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgbmF2ZWdhciBhIHJlc3VsdGFkb3MgYWwgcHJlc2lvbmFyIEVudGVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1pbnB1dCcpO1xuXG4gICAgICAvLyBFc2NyaWJpciB5IHByZXNpb25hciBFbnRlclxuICAgICAgYXdhaXQgdXNlci50eXBlKHNlYXJjaElucHV0LCAnbGF0ZXggYmxhbmNvJyk7XG4gICAgICBhd2FpdCB1c2VyLmtleWJvYXJkKCd7RW50ZXJ9Jyk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBuYXZlZ2FjacOzblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrUHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9wcm9kdWN0b3M/cT1sYXRleCUyMGJsYW5jbycpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBuYXZlZ2FyIGNvbiBwYXLDoW1ldHJvcyBkZSBiw7pzcXVlZGEgY29ycmVjdG9zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1pbnB1dCcpO1xuXG4gICAgICAvLyBCw7pzcXVlZGEgY29uIGVzcGFjaW9zIHkgY2FyYWN0ZXJlcyBlc3BlY2lhbGVzXG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2VhcmNoSW5wdXQsICdwaW50dXJhIDIwTCAmIGJhcm5peicpO1xuICAgICAgYXdhaXQgdXNlci5rZXlib2FyZCgne0VudGVyfScpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tQdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnL3Byb2R1Y3Rvcz9xPScpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0hpc3RvcmlhbCBkZSBCw7pzcXVlZGFzJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIGd1YXJkYXIgYsO6c3F1ZWRhcyBlbiBsb2NhbFN0b3JhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICBjb25zdCBzZWFyY2hJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VhcmNoLWlucHV0Jyk7XG5cbiAgICAgIC8vIFJlYWxpemFyIGLDunNxdWVkYVxuICAgICAgYXdhaXQgdXNlci50eXBlKHNlYXJjaElucHV0LCAnZXNtYWx0ZSBzaW50w6l0aWNvJyk7XG4gICAgICBhd2FpdCB1c2VyLmtleWJvYXJkKCd7RW50ZXJ9Jyk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgc2UgZ3VhcmTDsyBlbiBsb2NhbFN0b3JhZ2VcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCByZWNlbnRTZWFyY2hlcyA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BpbnRleWFfcmVjZW50X3NlYXJjaGVzJykgfHwgJ1tdJ1xuICAgICAgICApO1xuICAgICAgICBleHBlY3QocmVjZW50U2VhcmNoZXMpLnRvQ29udGFpbignZXNtYWx0ZSBzaW50w6l0aWNvJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIGxpbWl0YXIgZWwgaGlzdG9yaWFsIGEgbcOheGltbyAxMCBiw7pzcXVlZGFzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gUHJlbGxlbmFyIGxvY2FsU3RvcmFnZSBjb24gMTAgYsO6c3F1ZWRhc1xuICAgICAgY29uc3QgZXhpc3RpbmdTZWFyY2hlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwIH0sIChfLCBpKSA9PiBgYsO6c3F1ZWRhICR7aX1gKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwaW50ZXlhX3JlY2VudF9zZWFyY2hlcycsIEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nU2VhcmNoZXMpKTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1pbnB1dCcpO1xuXG4gICAgICAvLyBSZWFsaXphciBudWV2YSBiw7pzcXVlZGFcbiAgICAgIGF3YWl0IHVzZXIudHlwZShzZWFyY2hJbnB1dCwgJ251ZXZhIGLDunNxdWVkYScpO1xuICAgICAgYXdhaXQgdXNlci5rZXlib2FyZCgne0VudGVyfScpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgY29uc3QgcmVjZW50U2VhcmNoZXMgPSBKU09OLnBhcnNlKFxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwaW50ZXlhX3JlY2VudF9zZWFyY2hlcycpIHx8ICdbXSdcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0KHJlY2VudFNlYXJjaGVzKS50b0hhdmVMZW5ndGgoMTApO1xuICAgICAgICBleHBlY3QocmVjZW50U2VhcmNoZXNbMF0pLnRvQmUoJ251ZXZhIGLDunNxdWVkYScpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFc3RhZG9zIGRlIENhcmdhIHkgRXJyb3InLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgbW9zdHJhciBlc3RhZG8gZGUgY2FyZ2EgZHVyYW50ZSBiw7pzcXVlZGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTaW11bGFyIHJlc3B1ZXN0YSBsZW50YVxuICAgICAgc2VydmVyLnVzZShcbiAgICAgICAgcmVzdC5nZXQoJy9hcGkvc2VhcmNoL3N1Z2dlc3Rpb25zJywgKHJlcSwgcmVzLCBjdHgpID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVzKGN0eC5kZWxheSgxMDAwKSwgY3R4Lmpzb24oeyBkYXRhOiBbXSB9KSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICBjb25zdCBzZWFyY2hJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VhcmNoLWlucHV0Jyk7XG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2VhcmNoSW5wdXQsICd0ZXN0Jyk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgZWwgaW5wdXQgc2lndWUgZnVuY2lvbmFuZG8gZHVyYW50ZSBsYSBjYXJnYVxuICAgICAgZXhwZWN0KHNlYXJjaElucHV0KS50b0hhdmVWYWx1ZSgndGVzdCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgbWFuZWphciBlcnJvcmVzIGRlIGLDunNxdWVkYSBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxhciBlcnJvciBlbiBBUEkgZGUgc3VnZXJlbmNpYXNcbiAgICAgIHNlcnZlci51c2UoXG4gICAgICAgIHJlc3QuZ2V0KCcvYXBpL3NlYXJjaC9zdWdnZXN0aW9ucycsIChyZXEsIHJlcywgY3R4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlcyhjdHguc3RhdHVzKDUwMCkpO1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1pbnB1dCcpO1xuICAgICAgYXdhaXQgdXNlci50eXBlKHNlYXJjaElucHV0LCAndGVzdCBlcnJvcicpO1xuXG4gICAgICAvLyBFbCBjb21wb25lbnRlIGRlYmUgc2VndWlyIGZ1bmNpb25hbmRvXG4gICAgICBleHBlY3Qoc2VhcmNoSW5wdXQpLnRvSGF2ZVZhbHVlKCd0ZXN0IGVycm9yJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnRlZ3JhY2nDs24gY29uIEdlb2xvY2FsaXphY2nDs24nLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgaW5jbHVpciB6b25hIGRlIGVudHJlZ2EgZW4gYsO6c3F1ZWRhcyBjdWFuZG8gZXN0w6kgZGlzcG9uaWJsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtaW5wdXQnKTtcbiAgICAgIGF3YWl0IHVzZXIudHlwZShzZWFyY2hJbnB1dCwgJ3BpbnR1cmEnKTtcbiAgICAgIGF3YWl0IHVzZXIua2V5Ym9hcmQoJ3tFbnRlcn0nKTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSBsYSBuYXZlZ2FjacOzbiBpbmNsdXllIGNvbnRleHRvIGRlIHViaWNhY2nDs25cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja1B1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCcvcHJvZHVjdG9zP3E9cGludHVyYScpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIHkgT3B0aW1pemFjacOzbicsICgpID0+IHtcbiAgICBpdCgnZGViZSBjYW5jZWxhciByZXF1ZXN0cyBhbnRlcmlvcmVzIGFsIGhhY2VyIG51ZXZhIGLDunNxdWVkYScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZXF1ZXN0Q291bnQgPSAwO1xuICAgICAgc2VydmVyLnVzZShcbiAgICAgICAgcmVzdC5nZXQoJy9hcGkvc2VhcmNoL3N1Z2dlc3Rpb25zJywgKHJlcSwgcmVzLCBjdHgpID0+IHtcbiAgICAgICAgICByZXF1ZXN0Q291bnQrKztcbiAgICAgICAgICByZXR1cm4gcmVzKGN0eC5kZWxheSgxMDApLCBjdHguanNvbih7IGRhdGE6IFtdIH0pKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtaW5wdXQnKTtcblxuICAgICAgLy8gSGFjZXIgbcO6bHRpcGxlcyBiw7pzcXVlZGFzIHLDoXBpZGFzXG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2VhcmNoSW5wdXQsICdhJyk7XG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2VhcmNoSW5wdXQsICdiJyk7XG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2VhcmNoSW5wdXQsICdjJyk7XG5cbiAgICAgIC8vIEVzcGVyYXIgYSBxdWUgc2UgcmVzdWVsdmFuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNlYXJjaElucHV0KS50b0hhdmVWYWx1ZSgnYWJjJyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU29sbyBkZWJlIGhhYmVyIGhlY2hvIGVsIHJlcXVlc3QgZmluYWxcbiAgICAgIGV4cGVjdChyZXF1ZXN0Q291bnQpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VSb3V0ZXIiLCJwdXNoIiwibW9ja1B1c2giLCJyZXBsYWNlIiwiZm4iLCJwcmVmZXRjaCIsInVzZVNlYXJjaFBhcmFtcyIsImdldCIsIkNsZXJrUHJvdmlkZXIiLCJjaGlsZHJlbiIsImRpdiIsIlNpZ25lZEluIiwiZGF0YS10ZXN0aWQiLCJTaWduZWRPdXQiLCJVc2VyQnV0dG9uIiwidXNlVXNlciIsImlzU2lnbmVkSW4iLCJ1c2VyIiwiaXNMb2FkZWQiLCJ1c2VHZW9sb2NhdGlvbiIsImRldGVjdGVkWm9uZSIsImlkIiwibmFtZSIsInJlcXVlc3RMb2NhdGlvbiIsInBlcm1pc3Npb25TdGF0dXMiLCJpc0xvYWRpbmciLCJlcnJvciIsImxvY2F0aW9uIiwidGVzdExvY2F0aW9uIiwiZGVsaXZlcnlab25lcyIsInVzZUNhcnRBbmltYXRpb24iLCJpc0FuaW1hdGluZyIsIk9wdGltaXplZENhcnRJY29uIiwiSGVhZGVyTG9nbyIsImltZyIsImFsdCIsIm1vY2tUcmVuZGluZ1NlYXJjaGVzIiwicXVlcnkiLCJjb3VudCIsIm1vY2tTZWFyY2hTdWdnZXN0aW9ucyIsImNhdGVnb3J5IiwibW9ja1JlY2VudFNlYXJjaGVzIiwic2VydmVyIiwic2V0dXBTZXJ2ZXIiLCJyZXN0IiwicmVxIiwicmVzIiwiY3R4Iiwic3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwibGVuZ3RoIiwidXJsIiwic2VhcmNoUGFyYW1zIiwiZmlsdGVyZWRTdWdnZXN0aW9ucyIsImZpbHRlciIsIml0ZW0iLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwic2VhcmNoIiwicGFnaW5hdGlvbiIsInRvdGFsIiwicGFnZSIsImxpbWl0IiwiYmVmb3JlQWxsIiwibGlzdGVuIiwiYWZ0ZXJFYWNoIiwicmVzZXRIYW5kbGVycyIsImNsZWFyQWxsTW9ja3MiLCJsb2NhbFN0b3JhZ2UiLCJjbGVhciIsImFmdGVyQWxsIiwiY2xvc2UiLCJUZXN0V3JhcHBlciIsInF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnQiLCJkZWZhdWx0T3B0aW9ucyIsInF1ZXJpZXMiLCJyZXRyeSIsInN0YWxlVGltZSIsIm11dGF0aW9ucyIsIlByb3ZpZGVyIiwic3RvcmUiLCJRdWVyeUNsaWVudFByb3ZpZGVyIiwiY2xpZW50IiwiQ2FydE1vZGFsUHJvdmlkZXIiLCJkZXNjcmliZSIsInVzZXJFdmVudCIsInNldHVwIiwiaXQiLCJyZW5kZXIiLCJIZWFkZXIiLCJ3YWl0Rm9yIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInVzZSIsInNlYXJjaElucHV0IiwidHlwZSIsInRvSGF2ZVZhbHVlIiwidGltZW91dCIsImtleWJvYXJkIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJzdHJpbmdDb250YWluaW5nIiwicmVjZW50U2VhcmNoZXMiLCJKU09OIiwicGFyc2UiLCJnZXRJdGVtIiwidG9Db250YWluIiwiZXhpc3RpbmdTZWFyY2hlcyIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsInRvSGF2ZUxlbmd0aCIsInRvQmUiLCJkZWxheSIsInJlcXVlc3RDb3VudCIsInRvQmVMZXNzVGhhbk9yRXF1YWwiXSwibWFw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