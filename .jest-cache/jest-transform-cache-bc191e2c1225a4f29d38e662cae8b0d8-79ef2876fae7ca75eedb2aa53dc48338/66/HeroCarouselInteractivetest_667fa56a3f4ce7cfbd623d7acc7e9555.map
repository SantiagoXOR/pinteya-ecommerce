{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\HeroCarouselInteractive.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport HeroCarouselInteractive from '@/components/Home/Hero/HeroCarouselInteractive';\n\n// Mock del hook useHeroCarousel\njest.mock('@/hooks/useHeroCarousel', () => ({\n  useHeroCarousel: jest.fn(() => ({\n    currentIndex: 0,\n    isPlaying: true,\n    isPaused: false,\n    goToSlide: jest.fn(),\n    goToNext: jest.fn(),\n    goToPrevious: jest.fn(),\n    pause: jest.fn(),\n    resume: jest.fn(),\n    setHover: jest.fn(),\n  })),\n}));\n\n// Mock de Next.js Image\njest.mock('next/image', () => {\n  return function MockImage({ src, alt, width, height, className }: any) {\n    return <img src={src} alt={alt} width={width} height={height} className={className} />;\n  };\n});\n\ndescribe('HeroCarouselInteractive', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render without crashing', () => {\n    expect(() => {\n      render(<HeroCarouselInteractive />);\n    }).not.toThrow();\n  });\n\n  it('should render all carousel images', () => {\n    render(<HeroCarouselInteractive />);\n    \n    // Verificar que se renderizan las 3 imágenes\n    const images = screen.getAllByRole('img');\n    expect(images).toHaveLength(3);\n    \n    // Verificar que las imágenes tienen los alt texts correctos\n    expect(screen.getByAltText(/Pintá rápido, fácil y cotiza al instante - Promoción principal/i)).toBeInTheDocument();\n    expect(screen.getByAltText(/Ofertas especiales en pintura y ferretería/i)).toBeInTheDocument();\n    expect(screen.getByAltText(/Productos de calidad para tu hogar/i)).toBeInTheDocument();\n  });\n\n  it('should render navigation controls', () => {\n    render(<HeroCarouselInteractive />);\n    \n    // Verificar botones de navegación\n    const prevButton = screen.getByLabelText(/Imagen anterior/i);\n    const nextButton = screen.getByLabelText(/Imagen siguiente/i);\n    \n    expect(prevButton).toBeInTheDocument();\n    expect(nextButton).toBeInTheDocument();\n  });\n\n  it('should render dot indicators', () => {\n    render(<HeroCarouselInteractive />);\n    \n    // Verificar que se renderizan 3 indicadores (dots)\n    const dots = screen.getAllByRole('button').filter(button => \n      button.getAttribute('aria-label')?.includes('Ir a imagen')\n    );\n    expect(dots).toHaveLength(3);\n  });\n\n  it('should call navigation functions when buttons are clicked', () => {\n    const mockGoToNext = jest.fn();\n    const mockGoToPrevious = jest.fn();\n    \n    const { useHeroCarousel } = require('@/hooks/useHeroCarousel');\n    useHeroCarousel.mockReturnValue({\n      currentIndex: 0,\n      isPlaying: true,\n      isPaused: false,\n      goToSlide: jest.fn(),\n      goToNext: mockGoToNext,\n      goToPrevious: mockGoToPrevious,\n      pause: jest.fn(),\n      resume: jest.fn(),\n      setHover: jest.fn(),\n    });\n\n    render(<HeroCarouselInteractive />);\n    \n    const prevButton = screen.getByLabelText(/Imagen anterior/i);\n    const nextButton = screen.getByLabelText(/Imagen siguiente/i);\n    \n    fireEvent.click(nextButton);\n    expect(mockGoToNext).toHaveBeenCalledTimes(1);\n    \n    fireEvent.click(prevButton);\n    expect(mockGoToPrevious).toHaveBeenCalledTimes(1);\n  });\n\n  it('should call goToSlide when dot indicators are clicked', () => {\n    const mockGoToSlide = jest.fn();\n    \n    const { useHeroCarousel } = require('@/hooks/useHeroCarousel');\n    useHeroCarousel.mockReturnValue({\n      currentIndex: 0,\n      isPlaying: true,\n      isPaused: false,\n      goToSlide: mockGoToSlide,\n      goToNext: jest.fn(),\n      goToPrevious: jest.fn(),\n      pause: jest.fn(),\n      resume: jest.fn(),\n      setHover: jest.fn(),\n    });\n\n    render(<HeroCarouselInteractive />);\n    \n    const secondDot = screen.getByLabelText(/Ir a imagen 2/i);\n    fireEvent.click(secondDot);\n    \n    expect(mockGoToSlide).toHaveBeenCalledWith(1);\n  });\n\n  it('should handle hover events', () => {\n    const mockSetHover = jest.fn();\n\n    const { useHeroCarousel } = require('@/hooks/useHeroCarousel');\n    useHeroCarousel.mockReturnValue({\n      currentIndex: 0,\n      isPlaying: true,\n      isPaused: false,\n      goToSlide: jest.fn(),\n      goToNext: jest.fn(),\n      goToPrevious: jest.fn(),\n      pause: jest.fn(),\n      resume: jest.fn(),\n      setHover: mockSetHover,\n    });\n\n    const { container } = render(<HeroCarouselInteractive />);\n\n    const carousel = container.querySelector('.hero-carousel-container');\n\n    if (carousel) {\n      fireEvent.mouseEnter(carousel);\n      expect(mockSetHover).toHaveBeenCalledWith(true);\n\n      fireEvent.mouseLeave(carousel);\n      expect(mockSetHover).toHaveBeenCalledWith(false);\n    }\n  });\n\n  it('should apply correct CSS classes', () => {\n    const { container } = render(<HeroCarouselInteractive className=\"custom-class\" />);\n\n    const carousel = container.querySelector('.hero-carousel-container');\n    expect(carousel).toHaveClass('hero-carousel-container');\n    expect(carousel).toHaveClass('custom-class');\n  });\n\n  it('should show progress indicator', () => {\n    const { container } = render(<HeroCarouselInteractive />);\n\n    // Verificar que existe el indicador de progreso\n    const progressContainer = container.querySelector('.hero-carousel-progress');\n    expect(progressContainer).toBeInTheDocument();\n  });\n\n  it('should have proper accessibility attributes', () => {\n    render(<HeroCarouselInteractive />);\n    \n    // Verificar aria-labels en botones\n    expect(screen.getByLabelText(/Imagen anterior/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Imagen siguiente/i)).toBeInTheDocument();\n    \n    // Verificar aria-current en dots\n    const firstDot = screen.getByLabelText(/Ir a imagen 1/i);\n    expect(firstDot).toHaveAttribute('aria-current', 'true');\n  });\n\n  it('should disable navigation buttons when there is only one image', () => {\n    // Mock para simular solo una imagen\n    jest.doMock('@/components/Home/Hero/HeroCarouselInteractive', () => {\n      const originalModule = jest.requireActual('@/components/Home/Hero/HeroCarouselInteractive');\n      return {\n        ...originalModule,\n        HERO_IMAGES: [\n          {\n            src: '/images/hero/hero-01.png',\n            alt: 'Single image',\n            priority: true,\n          }\n        ]\n      };\n    });\n\n    render(<HeroCarouselInteractive />);\n    \n    const prevButton = screen.getByLabelText(/Imagen anterior/i);\n    const nextButton = screen.getByLabelText(/Imagen siguiente/i);\n    \n    // Los botones deberían estar deshabilitados cuando hay solo una imagen\n    // Nota: Esta funcionalidad se implementa en el componente real\n    expect(prevButton).toBeInTheDocument();\n    expect(nextButton).toBeInTheDocument();\n  });\n});\n"],"names":["jest","mock","useHeroCarousel","fn","currentIndex","isPlaying","isPaused","goToSlide","goToNext","goToPrevious","pause","resume","setHover","MockImage","src","alt","width","height","className","img","describe","beforeEach","clearAllMocks","it","expect","render","HeroCarouselInteractive","not","toThrow","images","screen","getAllByRole","toHaveLength","getByAltText","toBeInTheDocument","prevButton","getByLabelText","nextButton","dots","filter","button","getAttribute","includes","mockGoToNext","mockGoToPrevious","require","mockReturnValue","fireEvent","click","toHaveBeenCalledTimes","mockGoToSlide","secondDot","toHaveBeenCalledWith","mockSetHover","container","carousel","querySelector","mouseEnter","mouseLeave","toHaveClass","progressContainer","firstDot","toHaveAttribute","doMock","originalModule","requireActual","HERO_IMAGES","priority"],"mappings":"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"}