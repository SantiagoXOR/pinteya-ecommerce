{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\backup-clerk-migration\\__tests__\\auth\\admin-auth-401-fix.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TEST PARA VERIFICAR CORRECCIÓN ERROR 401\n// ===================================\n\nimport { getAuthenticatedAdmin, getAuthenticatedUser } from '@/lib/auth/admin-auth';\nimport { auth, currentUser } from '@clerk/nextjs/server';\n\n// Mocks\njest.mock('@clerk/nextjs/server', () => ({\n  auth: jest.fn(),\n  currentUser: jest.fn(),\n  getAuth: jest.fn(),\n}));\n\nconst mockAuth = auth as jest.MockedFunction<typeof auth>;\nconst mockCurrentUser = currentUser as jest.MockedFunction<typeof currentUser>;\n\ndescribe('Admin Auth 401 Fix', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    console.log = jest.fn(); // Silenciar logs en tests\n    console.warn = jest.fn();\n  });\n\n  describe('getAuthenticatedUser - Verificación de Roles Corregida', () => {\n    it('debe verificar admin usando publicMetadata correctamente', async () => {\n      // Simular usuario admin con rol en publicMetadata\n      mockAuth.mockResolvedValue({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: { role: 'admin' },\n          privateMetadata: {}\n        }\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result).toEqual({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        isAdmin: true\n      });\n    });\n\n    it('debe verificar admin usando privateMetadata correctamente', async () => {\n      // Simular usuario admin con rol en privateMetadata\n      mockAuth.mockResolvedValue({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: {},\n          privateMetadata: { role: 'admin' }\n        }\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result).toEqual({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        isAdmin: true\n      });\n    });\n\n    it('debe usar fallback a currentUser cuando sessionClaims no tiene rol', async () => {\n      // Simular sessionClaims sin rol\n      mockAuth.mockResolvedValue({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: {},\n          privateMetadata: {}\n        }\n      });\n\n      // Simular currentUser con rol admin\n      mockCurrentUser.mockResolvedValue({\n        id: 'user_admin123',\n        publicMetadata: { role: 'admin' },\n        privateMetadata: {}\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result).toEqual({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        isAdmin: true\n      });\n\n      expect(mockCurrentUser).toHaveBeenCalled();\n    });\n\n    it('debe identificar usuario no-admin correctamente', async () => {\n      // Simular usuario regular\n      mockAuth.mockResolvedValue({\n        userId: 'user_regular123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: { role: 'customer' },\n          privateMetadata: {}\n        }\n      });\n\n      // Mock currentUser para que también retorne rol no-admin\n      mockCurrentUser.mockResolvedValue({\n        id: 'user_regular123',\n        publicMetadata: { role: 'customer' },\n        privateMetadata: {}\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result).toEqual({\n        userId: 'user_regular123',\n        sessionId: 'sess_123',\n        isAdmin: false\n      });\n    });\n\n    it('debe manejar usuario sin rol definido', async () => {\n      // Simular usuario sin rol\n      mockAuth.mockResolvedValue({\n        userId: 'user_norole123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: {},\n          privateMetadata: {}\n        }\n      });\n\n      // Simular currentUser también sin rol\n      mockCurrentUser.mockResolvedValue({\n        id: 'user_norole123',\n        publicMetadata: {},\n        privateMetadata: {}\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result).toEqual({\n        userId: 'user_norole123',\n        sessionId: 'sess_123',\n        isAdmin: false\n      });\n    });\n\n    it('debe manejar error en fallback gracefully', async () => {\n      // Simular sessionClaims sin rol\n      mockAuth.mockResolvedValue({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: {},\n          privateMetadata: {}\n        }\n      });\n\n      // Simular error en currentUser\n      mockCurrentUser.mockRejectedValue(new Error('Clerk API error'));\n\n      const result = await getAuthenticatedUser();\n\n      expect(result).toEqual({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        isAdmin: false\n      });\n\n      expect(console.warn).toHaveBeenCalledWith(\n        '[AUTH] Error en fallback de verificación de admin:',\n        expect.any(Error)\n      );\n    });\n  });\n\n  describe('getAuthenticatedAdmin - Integración Completa', () => {\n    it('debe retornar admin válido cuando usuario tiene rol correcto', async () => {\n      // Mock getAuthenticatedUser para retornar admin\n      mockAuth.mockResolvedValue({\n        userId: 'user_admin123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: { role: 'admin' },\n          privateMetadata: {}\n        }\n      });\n\n      const result = await getAuthenticatedAdmin();\n\n      expect(result.userId).toBe('user_admin123');\n      expect(result.isAdmin).toBe(true);\n      expect(result.error).toBeUndefined();\n      expect(result.status).toBeUndefined();\n    });\n\n    it('debe retornar error 401 cuando usuario no está autenticado', async () => {\n      // Mock usuario no autenticado\n      mockAuth.mockResolvedValue({\n        userId: null,\n        sessionId: null,\n        sessionClaims: null\n      });\n\n      const result = await getAuthenticatedAdmin();\n\n      expect(result.userId).toBeNull();\n      expect(result.isAdmin).toBe(false);\n      expect(result.error).toBe('Usuario no autenticado');\n      expect(result.status).toBe(401);\n    });\n\n    it('debe retornar error 403 cuando usuario no es admin', async () => {\n      // Mock usuario autenticado pero no admin\n      mockAuth.mockResolvedValue({\n        userId: 'user_regular123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: { role: 'customer' },\n          privateMetadata: {}\n        }\n      });\n\n      const result = await getAuthenticatedAdmin();\n\n      expect(result.userId).toBe('user_regular123');\n      expect(result.isAdmin).toBe(false);\n      expect(result.error).toBe('Permisos de administrador requeridos');\n      expect(result.status).toBe(403);\n    });\n  });\n\n  describe('Casos Edge - Compatibilidad con Producción', () => {\n    it('debe manejar sessionClaims null/undefined', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        sessionClaims: null\n      });\n\n      mockCurrentUser.mockResolvedValue({\n        id: 'user_123',\n        publicMetadata: { role: 'admin' },\n        privateMetadata: {}\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result.isAdmin).toBe(true);\n      expect(mockCurrentUser).toHaveBeenCalled();\n    });\n\n    it('debe manejar metadata con valores no-string', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: { role: 123 }, // Valor no-string\n          privateMetadata: {}\n        }\n      });\n\n      // Mock currentUser también con valor no-string\n      mockCurrentUser.mockResolvedValue({\n        id: 'user_123',\n        publicMetadata: { role: 123 },\n        privateMetadata: {}\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result.isAdmin).toBe(false);\n    });\n\n    it('debe priorizar publicMetadata sobre privateMetadata', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        sessionClaims: {\n          publicMetadata: { role: 'admin' },\n          privateMetadata: { role: 'customer' }\n        }\n      });\n\n      const result = await getAuthenticatedUser();\n\n      expect(result.isAdmin).toBe(true);\n    });\n  });\n});\n\ndescribe('Regresión - Verificar que NO se usa metadata directamente', () => {\n  it('NO debe usar sessionClaims.metadata.role (bug anterior)', async () => {\n    // Simular el caso problemático anterior\n    mockAuth.mockResolvedValue({\n      userId: 'user_admin123',\n      sessionId: 'sess_123',\n      sessionClaims: {\n        metadata: { role: 'admin' }, // Ubicación incorrecta\n        publicMetadata: {},\n        privateMetadata: {}\n      }\n    });\n\n    mockCurrentUser.mockResolvedValue({\n      id: 'user_admin123',\n      publicMetadata: {},\n      privateMetadata: {}\n    });\n\n    const result = await getAuthenticatedUser();\n\n    // Debe ser false porque no está en publicMetadata/privateMetadata\n    expect(result.isAdmin).toBe(false);\n  });\n});\n"],"names":["jest","mock","auth","fn","currentUser","getAuth","mockAuth","mockCurrentUser","describe","beforeEach","clearAllMocks","console","log","warn","it","mockResolvedValue","userId","sessionId","sessionClaims","publicMetadata","role","privateMetadata","result","getAuthenticatedUser","expect","toEqual","isAdmin","id","toHaveBeenCalled","mockRejectedValue","Error","toHaveBeenCalledWith","any","getAuthenticatedAdmin","toBe","error","toBeUndefined","status","toBeNull","metadata"],"mappings":"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"}