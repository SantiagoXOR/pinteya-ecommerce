e138928e00634c55a25467dd4641388c
// ===================================
// PINTEYA E-COMMERCE - ORDERS CACHE HOOK
// Hook especializado para manejo de cache de órdenes
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useOrdersCache", {
    enumerable: true,
    get: function() {
        return useOrdersCache;
    }
});
const _react = require("react");
// Configuración de cache
const CACHE_CONFIG = {
    MAX_SIZE: 50,
    CLEANUP_INTERVAL: 10 * 60 * 1000,
    MIN_REQUEST_INTERVAL: 1000
};
// ===================================
// CACHE GLOBAL
// ===================================
// Cache compartido entre instancias del hook
const cache = new Map();
const pendingRequests = new Map();
const requestTimestamps = new Map();
// ===================================
// UTILIDADES DE CACHE
// ===================================
function getCacheKey(filters) {
    // Crear clave más estable ordenando las propiedades y normalizando valores
    const normalizedFilters = Object.keys(filters).sort().reduce((result, key)=>{
        const value = filters[key];
        // Normalizar valores para evitar claves duplicadas
        if (value !== undefined && value !== null && value !== '' && value !== 'all') {
            result[key] = value;
        }
        return result;
    }, {});
    return JSON.stringify(normalizedFilters);
}
function cleanupExpiredCache(cacheTimeout) {
    const now = Date.now();
    const expiredKeys = [];
    cache.forEach((entry, key)=>{
        if (now - entry.timestamp > cacheTimeout) {
            expiredKeys.push(key);
        }
    });
    expiredKeys.forEach((key)=>{
        cache.delete(key);
        requestTimestamps.delete(key);
    });
    // Limpiar cache si está muy grande
    if (cache.size > CACHE_CONFIG.MAX_SIZE) {
        const entries = Array.from(cache.entries());
        entries.sort((a, b)=>a[1].timestamp - b[1].timestamp);
        const toDelete = entries.slice(0, cache.size - CACHE_CONFIG.MAX_SIZE);
        toDelete.forEach(([key])=>{
            cache.delete(key);
            requestTimestamps.delete(key);
        });
    }
    if (process.env.NODE_ENV === 'development') {
        console.log('[useOrdersCache] Cache cleanup completed:', {
            expired: expiredKeys.length,
            currentSize: cache.size,
            maxSize: CACHE_CONFIG.MAX_SIZE
        });
    }
}
function useOrdersCache(options) {
    const lastCleanupRef = (0, _react.useRef)(Date.now());
    const getCachedData = (0, _react.useCallback)((filters)=>{
        if (!options.enableCache) return null;
        const key = getCacheKey(filters);
        const entry = cache.get(key);
        if (!entry) return null;
        const isExpired = Date.now() - entry.timestamp > options.cacheTimeout;
        if (isExpired) {
            cache.delete(key);
            requestTimestamps.delete(key);
            return null;
        }
        // Log de cache hit en desarrollo
        if (process.env.NODE_ENV === 'development') {
            console.log('[useOrdersCache] Cache hit:', {
                key: key.substring(0, 100) + '...',
                age: Date.now() - entry.timestamp,
                cacheSize: cache.size
            });
        }
        return entry.data;
    }, [
        options.enableCache,
        options.cacheTimeout
    ]);
    const setCachedData = (0, _react.useCallback)((filters, data)=>{
        if (!options.enableCache) return;
        const key = getCacheKey(filters);
        const requestId = Math.random().toString(36).substr(2, 9);
        cache.set(key, {
            data,
            timestamp: Date.now(),
            filters,
            requestId
        });
        requestTimestamps.set(key, Date.now());
        // Cleanup automático periódico
        const now = Date.now();
        if (now - lastCleanupRef.current > (options.cleanupInterval || CACHE_CONFIG.CLEANUP_INTERVAL)) {
            cleanupExpiredCache(options.cacheTimeout);
            lastCleanupRef.current = now;
        }
        if (process.env.NODE_ENV === 'development') {
            console.log('[useOrdersCache] Data cached:', {
                key: key.substring(0, 100) + '...',
                cacheSize: cache.size,
                requestId
            });
        }
    }, [
        options.enableCache,
        options.cacheTimeout,
        options.cleanupInterval
    ]);
    const clearCache = (0, _react.useCallback)(()=>{
        cache.clear();
        pendingRequests.clear();
        requestTimestamps.clear();
        if (process.env.NODE_ENV === 'development') {
            console.log('[useOrdersCache] Cache cleared');
        }
    }, []);
    const isRequestTooRecent = (0, _react.useCallback)((filters)=>{
        const key = getCacheKey(filters);
        const lastRequestTime = requestTimestamps.get(key);
        if (!lastRequestTime) return false;
        const timeSinceLastRequest = Date.now() - lastRequestTime;
        return timeSinceLastRequest < (options.minRequestInterval || CACHE_CONFIG.MIN_REQUEST_INTERVAL);
    }, [
        options.minRequestInterval
    ]);
    const setPendingRequest = (0, _react.useCallback)((filters, promise)=>{
        const key = getCacheKey(filters);
        pendingRequests.set(key, promise);
        // Limpiar cuando la promesa se resuelve
        promise.finally(()=>{
            pendingRequests.delete(key);
        });
    }, []);
    const getPendingRequest = (0, _react.useCallback)((filters)=>{
        const key = getCacheKey(filters);
        return pendingRequests.get(key) || null;
    }, []);
    const getCacheStats = (0, _react.useCallback)(()=>({
            size: cache.size,
            maxSize: options.maxSize || CACHE_CONFIG.MAX_SIZE,
            pendingRequests: pendingRequests.size
        }), [
        options.maxSize
    ]);
    return {
        getCachedData,
        setCachedData,
        clearCache,
        isRequestTooRecent,
        setPendingRequest,
        getPendingRequest,
        getCacheStats
    };
}

//# sourceMappingURL=data:application/json;base64,