{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\SearchAutocomplete.test.tsx"],"sourcesContent":["// ===================================\r\n// TESTS: SearchAutocomplete Component - React Autosuggest patterns avanzados\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport { useRouter } from 'next/navigation';\r\nimport { SearchAutocomplete } from '@/components/ui/search-autocomplete';\r\nimport { searchProducts } from '@/lib/api/products';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\njest.mock('next/navigation', () => ({\r\n  useRouter: jest.fn(),\r\n}));\r\n\r\njest.mock('@/lib/api/products', () => ({\r\n  searchProducts: jest.fn(),\r\n}));\r\n\r\nconst mockPush = jest.fn();\r\nconst mockSearchProducts = searchProducts as jest.MockedFunction<typeof searchProducts>;\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  (useRouter as jest.Mock).mockReturnValue({\r\n    push: mockPush,\r\n  });\r\n  \r\n  // Mock localStorage\r\n  Object.defineProperty(window, 'localStorage', {\r\n    value: {\r\n      getItem: jest.fn(() => null),\r\n      setItem: jest.fn(),\r\n      removeItem: jest.fn(),\r\n      clear: jest.fn(),\r\n    },\r\n    writable: true,\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS BÁSICOS\r\n// ===================================\r\n\r\ndescribe('SearchAutocomplete Component', () => {\r\n  it('should render with default placeholder', () => {\r\n    render(<SearchAutocomplete />);\r\n    \r\n    const input = screen.getByPlaceholderText('Busco productos de pinturería...');\r\n    expect(input).toBeInTheDocument();\r\n  });\r\n\r\n  it('should render with custom placeholder', () => {\r\n    render(<SearchAutocomplete placeholder=\"Buscar productos...\" />);\r\n    \r\n    const input = screen.getByPlaceholderText('Buscar productos...');\r\n    expect(input).toBeInTheDocument();\r\n  });\r\n\r\n  it('should have correct test id', () => {\r\n    render(<SearchAutocomplete data-testid=\"custom-search\" />);\r\n    \r\n    const input = screen.getByTestId('custom-search');\r\n    expect(input).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE DEBOUNCING\r\n// ===================================\r\n\r\ndescribe('SearchAutocomplete - Debouncing', () => {\r\n  // Nota: El debouncing se maneja en el hook useSearch, no en el componente\r\n  // Estos tests verifican que el componente llama correctamente a searchWithDebounce\r\n\r\n  it('should debounce search requests with 150ms delay', async () => {\r\n    const mockSearchWithDebounce = jest.fn();\r\n\r\n    render(<SearchAutocomplete searchWithDebounce={mockSearchWithDebounce} />);\r\n\r\n    const input = screen.getByRole('combobox');\r\n\r\n    // Escribir rápidamente varios caracteres\r\n    await userEvent.type(input, 'pintura');\r\n\r\n    // Verificar que se llamó searchWithDebounce para cada carácter\r\n    expect(mockSearchWithDebounce).toHaveBeenCalledTimes(7); // 'p', 'i', 'n', 't', 'u', 'r', 'a'\r\n    expect(mockSearchWithDebounce).toHaveBeenLastCalledWith('pintura');\r\n  });\r\n\r\n  it('should cancel previous debounced calls', async () => {\r\n    const mockSearchWithDebounce = jest.fn();\r\n\r\n    render(<SearchAutocomplete searchWithDebounce={mockSearchWithDebounce} />);\r\n\r\n    const input = screen.getByRole('combobox');\r\n\r\n    // Primera búsqueda\r\n    await userEvent.type(input, 'pintura');\r\n\r\n    // Limpiar y escribir nueva búsqueda\r\n    await userEvent.clear(input);\r\n    await userEvent.type(input, 'esmalte');\r\n\r\n    // Verificar que se llamó con ambos valores\r\n    expect(mockSearchWithDebounce).toHaveBeenCalledWith('pintura');\r\n    expect(mockSearchWithDebounce).toHaveBeenCalledWith('');\r\n    expect(mockSearchWithDebounce).toHaveBeenCalledWith('esmalte');\r\n    await waitFor(() => {\r\n      expect(mockSearchProducts).toHaveBeenCalledTimes(1);\r\n      expect(mockSearchProducts).toHaveBeenCalledWith('esmalte', 8);\r\n    });\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE ESTADOS DE LOADING\r\n// ===================================\r\n\r\ndescribe('SearchAutocomplete - Loading States', () => {\r\n  it('should show loading spinner during search', async () => {\r\n    // Mock para simular búsqueda lenta\r\n    mockSearchProducts.mockImplementation(() =>\r\n      new Promise(resolve => setTimeout(() => resolve({\r\n        success: true,\r\n        data: [],\r\n        pagination: { total: 0, page: 1, limit: 8, totalPages: 0 },\r\n      }), 1000))\r\n    );\r\n\r\n    // Renderizar con estado de loading\r\n    render(<SearchAutocomplete isLoading={true} query=\"pintura\" />);\r\n\r\n    // Verificar que aparece el spinner\r\n    const spinner = document.querySelector('.animate-spin');\r\n    expect(spinner).toBeInTheDocument();\r\n  });\r\n\r\n  it('should disable input during loading', async () => {\r\n    // Renderizar con estado de loading\r\n    render(<SearchAutocomplete isLoading={true} query=\"pintura\" />);\r\n\r\n    const input = screen.getByRole('combobox');\r\n\r\n    // Verificar que el input está deshabilitado\r\n    expect(input).toBeDisabled();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE MANEJO DE ERRORES\r\n// ===================================\r\n\r\ndescribe('SearchAutocomplete - Error Handling', () => {\r\n  it('should show error message when search fails', async () => {\r\n    // Renderizar con estado de error y dropdown abierto\r\n    const { container } = render(<SearchAutocomplete error=\"Network error\" query=\"pintura\" />);\r\n\r\n    // Abrir el dropdown haciendo focus en el input\r\n    const input = screen.getByRole('combobox');\r\n    await userEvent.click(input);\r\n\r\n    // Verificar que aparece el mensaje de error\r\n    await waitFor(() => {\r\n      expect(screen.getByText(/Error en la búsqueda/)).toBeInTheDocument();\r\n      expect(screen.getByText('Network error')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('should show no results message when no products found', async () => {\r\n    mockSearchProducts.mockResolvedValue({\r\n      success: true,\r\n      data: [],\r\n      pagination: { total: 0, page: 1, limit: 8, totalPages: 0 },\r\n    });\r\n\r\n    render(<SearchAutocomplete />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'productoquenoexiste');\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText(/Sin resultados/)).toBeInTheDocument();\r\n      expect(screen.getByText(/No se encontraron productos para \"productoquenoexiste\"/)).toBeInTheDocument();\r\n    });\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE NAVEGACIÓN\r\n// ===================================\r\n\r\ndescribe('SearchAutocomplete - Navigation', () => {\r\n  it('should navigate to search page on Enter', async () => {\r\n    const mockResponse = {\r\n      success: true,\r\n      data: [{ id: '1', name: 'Producto', price: 100 }],\r\n      pagination: { total: 1, page: 1, limit: 8, totalPages: 1 },\r\n    };\r\n\r\n    mockSearchProducts.mockResolvedValue(mockResponse);\r\n\r\n    render(<SearchAutocomplete />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'pintura');\r\n    await userEvent.keyboard('{Enter}');\r\n    \r\n    await waitFor(() => {\r\n      expect(mockPush).toHaveBeenCalledWith('/search?q=pintura');\r\n    });\r\n  });\r\n\r\n  it('should call onSearch callback when provided', async () => {\r\n    const onSearch = jest.fn();\r\n    \r\n    render(<SearchAutocomplete onSearch={onSearch} />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    \r\n    await userEvent.type(input, 'pintura');\r\n    await userEvent.keyboard('{Enter}');\r\n    \r\n    await waitFor(() => {\r\n      expect(onSearch).toHaveBeenCalledWith('pintura');\r\n    });\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE SUGERENCIAS\r\n// ===================================\r\n\r\ndescribe('SearchAutocomplete - Suggestions', () => {\r\n  it('should show suggestions when typing', async () => {\r\n    const mockSuggestions = [\r\n      {\r\n        id: 'product-1',\r\n        type: 'product' as const,\r\n        title: 'Pintura Látex Blanca',\r\n        subtitle: 'Pinturas',\r\n        href: '/shop-details/1',\r\n        badge: 'En stock'\r\n      },\r\n      {\r\n        id: 'product-2',\r\n        type: 'product' as const,\r\n        title: 'Pintura Esmalte Azul',\r\n        subtitle: 'Pinturas',\r\n        href: '/shop-details/2',\r\n        badge: 'En stock'\r\n      },\r\n    ];\r\n\r\n    const mockSearchWithDebounce = jest.fn();\r\n\r\n    render(\r\n      <SearchAutocomplete\r\n        suggestions={mockSuggestions}\r\n        searchWithDebounce={mockSearchWithDebounce}\r\n      />\r\n    );\r\n\r\n    const input = screen.getByRole('combobox');\r\n\r\n    await userEvent.type(input, 'pintura');\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Pintura Látex Blanca')).toBeInTheDocument();\r\n      expect(screen.getByText('Pintura Esmalte Azul')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('should handle suggestion selection', async () => {\r\n    const onSuggestionSelect = jest.fn();\r\n    const mockSuggestions = [\r\n      {\r\n        id: 'product-1',\r\n        type: 'product' as const,\r\n        title: 'Pintura Látex',\r\n        subtitle: 'Pinturas',\r\n        href: '/shop-details/1',\r\n        badge: 'En stock'\r\n      },\r\n    ];\r\n\r\n    const mockSearchWithDebounce = jest.fn();\r\n\r\n    render(\r\n      <SearchAutocomplete\r\n        suggestions={mockSuggestions}\r\n        searchWithDebounce={mockSearchWithDebounce}\r\n        onSuggestionSelect={onSuggestionSelect}\r\n      />\r\n    );\r\n\r\n    const input = screen.getByRole('combobox');\r\n\r\n    await userEvent.type(input, 'pintura');\r\n\r\n    await waitFor(() => {\r\n      const suggestion = screen.getByText('Pintura Látex');\r\n      expect(suggestion).toBeInTheDocument();\r\n    });\r\n\r\n    const suggestion = screen.getByText('Pintura Látex');\r\n    await userEvent.click(suggestion);\r\n\r\n    expect(onSuggestionSelect).toHaveBeenCalled();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE ACCESIBILIDAD\r\n// ===================================\r\n\r\ndescribe('SearchAutocomplete - Accessibility', () => {\r\n  it('should have proper ARIA attributes', () => {\r\n    render(<SearchAutocomplete />);\r\n    \r\n    const input = screen.getByRole('combobox');\r\n    expect(input).toHaveAttribute('autoComplete', 'off');\r\n  });\r\n\r\n  it('should support keyboard navigation', async () => {\r\n    const mockSuggestions = [\r\n      {\r\n        id: 'product-1',\r\n        type: 'product' as const,\r\n        title: 'Pintura 1',\r\n        subtitle: 'Pinturas',\r\n        href: '/shop-details/1',\r\n        badge: 'En stock'\r\n      },\r\n      {\r\n        id: 'product-2',\r\n        type: 'product' as const,\r\n        title: 'Pintura 2',\r\n        subtitle: 'Pinturas',\r\n        href: '/shop-details/2',\r\n        badge: 'En stock'\r\n      },\r\n    ];\r\n\r\n    const mockSearchWithDebounce = jest.fn();\r\n\r\n    render(\r\n      <SearchAutocomplete\r\n        suggestions={mockSuggestions}\r\n        searchWithDebounce={mockSearchWithDebounce}\r\n      />\r\n    );\r\n\r\n    const input = screen.getByRole('combobox');\r\n\r\n    await userEvent.type(input, 'pintura');\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Pintura 1')).toBeInTheDocument();\r\n    });\r\n\r\n    // Navegar con flechas\r\n    await userEvent.keyboard('{ArrowDown}');\r\n    await userEvent.keyboard('{ArrowDown}');\r\n    await userEvent.keyboard('{ArrowUp}');\r\n    \r\n    // Seleccionar con Enter\r\n    await userEvent.keyboard('{Enter}');\r\n    \r\n    // Verificar que se navega correctamente\r\n    await waitFor(() => {\r\n      expect(mockPush).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  // ===================================\r\n  // TESTS PARA REACT AUTOSUGGEST PATTERNS\r\n  // ===================================\r\n\r\n  describe('React Autosuggest Patterns', () => {\r\n    it('should have proper ARIA attributes', () => {\r\n      render(<SearchAutocomplete data-testid=\"aria-test\" />);\r\n\r\n      const input = screen.getByTestId('aria-test');\r\n      expect(input).toHaveAttribute('role', 'combobox');\r\n      expect(input).toHaveAttribute('aria-expanded', 'false');\r\n      expect(input).toHaveAttribute('aria-haspopup', 'listbox');\r\n      expect(input).toHaveAttribute('aria-autocomplete', 'list');\r\n    });\r\n\r\n    it('should update aria-expanded when dropdown opens', async () => {\r\n      const user = userEvent.setup();\r\n      const mockSuggestions = [\r\n        { id: '1', type: 'product' as const, title: 'Test Product', href: '/products/1' }\r\n      ];\r\n\r\n      render(\r\n        <SearchAutocomplete\r\n          data-testid=\"aria-expanded-test\"\r\n          suggestions={mockSuggestions}\r\n          query=\"test\"\r\n        />\r\n      );\r\n\r\n      const input = screen.getByTestId('aria-expanded-test');\r\n      await user.click(input);\r\n\r\n      expect(input).toHaveAttribute('aria-expanded', 'true');\r\n    });\r\n\r\n    it('should handle keyboard navigation with ArrowDown and ArrowUp', async () => {\r\n      const user = userEvent.setup();\r\n      const mockSuggestions = [\r\n        { id: '1', type: 'product' as const, title: 'Product 1', href: '/products/1' },\r\n        { id: '2', type: 'product' as const, title: 'Product 2', href: '/products/2' }\r\n      ];\r\n\r\n      render(\r\n        <SearchAutocomplete\r\n          data-testid=\"keyboard-nav-test\"\r\n          suggestions={mockSuggestions}\r\n          query=\"test\"\r\n        />\r\n      );\r\n\r\n      const input = screen.getByTestId('keyboard-nav-test');\r\n      await user.click(input);\r\n\r\n      // Arrow down should highlight first option\r\n      await user.keyboard('{ArrowDown}');\r\n\r\n      await waitFor(() => {\r\n        const firstOption = screen.getByRole('option', { name: /Product 1/ });\r\n        expect(firstOption).toHaveAttribute('aria-selected', 'true');\r\n      });\r\n\r\n      // Arrow down again should highlight second option\r\n      await user.keyboard('{ArrowDown}');\r\n\r\n      await waitFor(() => {\r\n        const secondOption = screen.getByRole('option', { name: /Product 2/ });\r\n        expect(secondOption).toHaveAttribute('aria-selected', 'true');\r\n      });\r\n    });\r\n\r\n    it('should handle IME composition events', async () => {\r\n      const searchWithDebounce = jest.fn();\r\n\r\n      render(\r\n        <SearchAutocomplete\r\n          data-testid=\"ime-test\"\r\n          searchWithDebounce={searchWithDebounce}\r\n        />\r\n      );\r\n\r\n      const input = screen.getByTestId('ime-test');\r\n\r\n      // Start composition\r\n      fireEvent.compositionStart(input);\r\n      fireEvent.change(input, { target: { value: 'test' } });\r\n\r\n      // Should not call searchWithDebounce during composition\r\n      expect(searchWithDebounce).not.toHaveBeenCalled();\r\n\r\n      // End composition\r\n      fireEvent.compositionEnd(input, { target: { value: 'test' } });\r\n\r\n      // Should call searchWithDebounce after composition ends\r\n      expect(searchWithDebounce).toHaveBeenCalledWith('test');\r\n    });\r\n\r\n    it('should announce changes for screen readers', async () => {\r\n      const user = userEvent.setup();\r\n      const mockSuggestions = [\r\n        { id: '1', type: 'product' as const, title: 'Test Product', href: '/products/1' }\r\n      ];\r\n\r\n      render(\r\n        <SearchAutocomplete\r\n          data-testid=\"screen-reader-test\"\r\n          suggestions={mockSuggestions}\r\n          query=\"test\"\r\n        />\r\n      );\r\n\r\n      const input = screen.getByTestId('screen-reader-test');\r\n      await user.click(input);\r\n\r\n      // Check for aria-live region\r\n      const liveRegion = screen.getByRole('status', { hidden: true });\r\n      expect(liveRegion).toBeInTheDocument();\r\n    });\r\n\r\n    it('should handle Escape key to close dropdown', async () => {\r\n      const user = userEvent.setup();\r\n      const mockSuggestions = [\r\n        { id: '1', type: 'product' as const, title: 'Test Product', href: '/products/1' }\r\n      ];\r\n\r\n      render(\r\n        <SearchAutocomplete\r\n          data-testid=\"escape-test\"\r\n          suggestions={mockSuggestions}\r\n          query=\"test\"\r\n        />\r\n      );\r\n\r\n      const input = screen.getByTestId('escape-test');\r\n      await user.click(input);\r\n\r\n      // Dropdown should be open\r\n      expect(screen.getByRole('listbox')).toBeInTheDocument();\r\n\r\n      await user.keyboard('{Escape}');\r\n\r\n      await waitFor(() => {\r\n        expect(screen.queryByRole('listbox')).not.toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('should highlight suggestions on mouse hover', async () => {\r\n      const user = userEvent.setup();\r\n      const mockSuggestions = [\r\n        { id: '1', type: 'product' as const, title: 'Test Product', href: '/products/1' }\r\n      ];\r\n\r\n      render(\r\n        <SearchAutocomplete\r\n          data-testid=\"hover-test\"\r\n          suggestions={mockSuggestions}\r\n          query=\"test\"\r\n        />\r\n      );\r\n\r\n      const input = screen.getByTestId('hover-test');\r\n      await user.click(input);\r\n\r\n      const option = screen.getByRole('option', { name: /Test Product/ });\r\n      await user.hover(option);\r\n\r\n      expect(option).toHaveAttribute('aria-selected', 'true');\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","useRouter","fn","searchProducts","mockPush","mockSearchProducts","beforeEach","clearAllMocks","mockReturnValue","push","Object","defineProperty","window","value","getItem","setItem","removeItem","clear","writable","describe","it","render","SearchAutocomplete","input","screen","getByPlaceholderText","expect","toBeInTheDocument","placeholder","data-testid","getByTestId","mockSearchWithDebounce","searchWithDebounce","getByRole","userEvent","type","toHaveBeenCalledTimes","toHaveBeenLastCalledWith","toHaveBeenCalledWith","waitFor","mockImplementation","Promise","resolve","setTimeout","success","data","pagination","total","page","limit","totalPages","isLoading","query","spinner","document","querySelector","toBeDisabled","container","error","click","getByText","mockResolvedValue","mockResponse","id","name","price","keyboard","onSearch","mockSuggestions","title","subtitle","href","badge","suggestions","onSuggestionSelect","suggestion","toHaveBeenCalled","toHaveAttribute","user","setup","firstOption","secondOption","fireEvent","compositionStart","change","target","not","compositionEnd","liveRegion","hidden","queryByRole","option","hover"],"mappings":"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"}