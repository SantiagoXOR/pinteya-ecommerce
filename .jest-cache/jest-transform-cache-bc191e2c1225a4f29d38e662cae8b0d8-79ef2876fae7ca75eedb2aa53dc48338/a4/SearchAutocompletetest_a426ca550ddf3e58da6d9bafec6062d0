3c7c8822a704e8ba7840af92e945767b
// ===================================
// TESTS: SearchAutocomplete Component - React Autosuggest patterns avanzados
// ===================================
"use strict";
// ===================================
// MOCKS
// ===================================
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
jest.mock('@/lib/api/products', ()=>({
        searchProducts: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _navigation = require("next/navigation");
const _searchautocomplete = require("../../components/ui/search-autocomplete");
const _products = require("../../lib/api/products");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockPush = jest.fn();
const mockSearchProducts = _products.searchProducts;
beforeEach(()=>{
    jest.clearAllMocks();
    _navigation.useRouter.mockReturnValue({
        push: mockPush
    });
    // Mock localStorage
    Object.defineProperty(window, 'localStorage', {
        value: {
            getItem: jest.fn(()=>null),
            setItem: jest.fn(),
            removeItem: jest.fn(),
            clear: jest.fn()
        },
        writable: true
    });
});
// ===================================
// TESTS BÁSICOS
// ===================================
describe('SearchAutocomplete Component', ()=>{
    it('should render with default placeholder', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {}));
        const input = _react1.screen.getByPlaceholderText('Busco productos de pinturería...');
        expect(input).toBeInTheDocument();
    });
    it('should render with custom placeholder', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            placeholder: "Buscar productos..."
        }));
        const input = _react1.screen.getByPlaceholderText('Buscar productos...');
        expect(input).toBeInTheDocument();
    });
    it('should have correct test id', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            "data-testid": "custom-search"
        }));
        const input = _react1.screen.getByTestId('custom-search');
        expect(input).toBeInTheDocument();
    });
});
// ===================================
// TESTS DE DEBOUNCING
// ===================================
describe('SearchAutocomplete - Debouncing', ()=>{
    // Nota: El debouncing se maneja en el hook useSearch, no en el componente
    // Estos tests verifican que el componente llama correctamente a searchWithDebounce
    it('should debounce search requests with 150ms delay', async ()=>{
        const mockSearchWithDebounce = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            searchWithDebounce: mockSearchWithDebounce
        }));
        const input = _react1.screen.getByRole('combobox');
        // Escribir rápidamente varios caracteres
        await _userevent.default.type(input, 'pintura');
        // Verificar que se llamó searchWithDebounce para cada carácter
        expect(mockSearchWithDebounce).toHaveBeenCalledTimes(7); // 'p', 'i', 'n', 't', 'u', 'r', 'a'
        expect(mockSearchWithDebounce).toHaveBeenLastCalledWith('pintura');
    });
    it('should cancel previous debounced calls', async ()=>{
        const mockSearchWithDebounce = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            searchWithDebounce: mockSearchWithDebounce
        }));
        const input = _react1.screen.getByRole('combobox');
        // Primera búsqueda
        await _userevent.default.type(input, 'pintura');
        // Limpiar y escribir nueva búsqueda
        await _userevent.default.clear(input);
        await _userevent.default.type(input, 'esmalte');
        // Verificar que se llamó con ambos valores
        expect(mockSearchWithDebounce).toHaveBeenCalledWith('pintura');
        expect(mockSearchWithDebounce).toHaveBeenCalledWith('');
        expect(mockSearchWithDebounce).toHaveBeenCalledWith('esmalte');
        await (0, _react1.waitFor)(()=>{
            expect(mockSearchProducts).toHaveBeenCalledTimes(1);
            expect(mockSearchProducts).toHaveBeenCalledWith('esmalte', 8);
        });
    });
});
// ===================================
// TESTS DE ESTADOS DE LOADING
// ===================================
describe('SearchAutocomplete - Loading States', ()=>{
    it('should show loading spinner during search', async ()=>{
        // Mock para simular búsqueda lenta
        mockSearchProducts.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        success: true,
                        data: [],
                        pagination: {
                            total: 0,
                            page: 1,
                            limit: 8,
                            totalPages: 0
                        }
                    }), 1000)));
        // Renderizar con estado de loading
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            isLoading: true,
            query: "pintura"
        }));
        // Verificar que aparece el spinner
        const spinner = document.querySelector('.animate-spin');
        expect(spinner).toBeInTheDocument();
    });
    it('should disable input during loading', async ()=>{
        // Renderizar con estado de loading
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            isLoading: true,
            query: "pintura"
        }));
        const input = _react1.screen.getByRole('combobox');
        // Verificar que el input está deshabilitado
        expect(input).toBeDisabled();
    });
});
// ===================================
// TESTS DE MANEJO DE ERRORES
// ===================================
describe('SearchAutocomplete - Error Handling', ()=>{
    it('should show error message when search fails', async ()=>{
        // Renderizar con estado de error y dropdown abierto
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            error: "Network error",
            query: "pintura"
        }));
        // Abrir el dropdown haciendo focus en el input
        const input = _react1.screen.getByRole('combobox');
        await _userevent.default.click(input);
        // Verificar que aparece el mensaje de error
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/Error en la búsqueda/)).toBeInTheDocument();
            expect(_react1.screen.getByText('Network error')).toBeInTheDocument();
        });
    });
    it('should show no results message when no products found', async ()=>{
        mockSearchProducts.mockResolvedValue({
            success: true,
            data: [],
            pagination: {
                total: 0,
                page: 1,
                limit: 8,
                totalPages: 0
            }
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {}));
        const input = _react1.screen.getByRole('combobox');
        await _userevent.default.type(input, 'productoquenoexiste');
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/Sin resultados/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/No se encontraron productos para "productoquenoexiste"/)).toBeInTheDocument();
        });
    });
});
// ===================================
// TESTS DE NAVEGACIÓN
// ===================================
describe('SearchAutocomplete - Navigation', ()=>{
    it('should navigate to search page on Enter', async ()=>{
        const mockResponse = {
            success: true,
            data: [
                {
                    id: '1',
                    name: 'Producto',
                    price: 100
                }
            ],
            pagination: {
                total: 1,
                page: 1,
                limit: 8,
                totalPages: 1
            }
        };
        mockSearchProducts.mockResolvedValue(mockResponse);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {}));
        const input = _react1.screen.getByRole('combobox');
        await _userevent.default.type(input, 'pintura');
        await _userevent.default.keyboard('{Enter}');
        await (0, _react1.waitFor)(()=>{
            expect(mockPush).toHaveBeenCalledWith('/search?q=pintura');
        });
    });
    it('should call onSearch callback when provided', async ()=>{
        const onSearch = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            onSearch: onSearch
        }));
        const input = _react1.screen.getByRole('combobox');
        await _userevent.default.type(input, 'pintura');
        await _userevent.default.keyboard('{Enter}');
        await (0, _react1.waitFor)(()=>{
            expect(onSearch).toHaveBeenCalledWith('pintura');
        });
    });
});
// ===================================
// TESTS DE SUGERENCIAS
// ===================================
describe('SearchAutocomplete - Suggestions', ()=>{
    it('should show suggestions when typing', async ()=>{
        const mockSuggestions = [
            {
                id: 'product-1',
                type: 'product',
                title: 'Pintura Látex Blanca',
                subtitle: 'Pinturas',
                href: '/shop-details/1',
                badge: 'En stock'
            },
            {
                id: 'product-2',
                type: 'product',
                title: 'Pintura Esmalte Azul',
                subtitle: 'Pinturas',
                href: '/shop-details/2',
                badge: 'En stock'
            }
        ];
        const mockSearchWithDebounce = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            suggestions: mockSuggestions,
            searchWithDebounce: mockSearchWithDebounce
        }));
        const input = _react1.screen.getByRole('combobox');
        await _userevent.default.type(input, 'pintura');
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Pintura Látex Blanca')).toBeInTheDocument();
            expect(_react1.screen.getByText('Pintura Esmalte Azul')).toBeInTheDocument();
        });
    });
    it('should handle suggestion selection', async ()=>{
        const onSuggestionSelect = jest.fn();
        const mockSuggestions = [
            {
                id: 'product-1',
                type: 'product',
                title: 'Pintura Látex',
                subtitle: 'Pinturas',
                href: '/shop-details/1',
                badge: 'En stock'
            }
        ];
        const mockSearchWithDebounce = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            suggestions: mockSuggestions,
            searchWithDebounce: mockSearchWithDebounce,
            onSuggestionSelect: onSuggestionSelect
        }));
        const input = _react1.screen.getByRole('combobox');
        await _userevent.default.type(input, 'pintura');
        await (0, _react1.waitFor)(()=>{
            const suggestion = _react1.screen.getByText('Pintura Látex');
            expect(suggestion).toBeInTheDocument();
        });
        const suggestion = _react1.screen.getByText('Pintura Látex');
        await _userevent.default.click(suggestion);
        expect(onSuggestionSelect).toHaveBeenCalled();
    });
});
// ===================================
// TESTS DE ACCESIBILIDAD
// ===================================
describe('SearchAutocomplete - Accessibility', ()=>{
    it('should have proper ARIA attributes', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {}));
        const input = _react1.screen.getByRole('combobox');
        expect(input).toHaveAttribute('autoComplete', 'off');
    });
    it('should support keyboard navigation', async ()=>{
        const mockSuggestions = [
            {
                id: 'product-1',
                type: 'product',
                title: 'Pintura 1',
                subtitle: 'Pinturas',
                href: '/shop-details/1',
                badge: 'En stock'
            },
            {
                id: 'product-2',
                type: 'product',
                title: 'Pintura 2',
                subtitle: 'Pinturas',
                href: '/shop-details/2',
                badge: 'En stock'
            }
        ];
        const mockSearchWithDebounce = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
            suggestions: mockSuggestions,
            searchWithDebounce: mockSearchWithDebounce
        }));
        const input = _react1.screen.getByRole('combobox');
        await _userevent.default.type(input, 'pintura');
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Pintura 1')).toBeInTheDocument();
        });
        // Navegar con flechas
        await _userevent.default.keyboard('{ArrowDown}');
        await _userevent.default.keyboard('{ArrowDown}');
        await _userevent.default.keyboard('{ArrowUp}');
        // Seleccionar con Enter
        await _userevent.default.keyboard('{Enter}');
        // Verificar que se navega correctamente
        await (0, _react1.waitFor)(()=>{
            expect(mockPush).toHaveBeenCalled();
        });
    });
    // ===================================
    // TESTS PARA REACT AUTOSUGGEST PATTERNS
    // ===================================
    describe('React Autosuggest Patterns', ()=>{
        it('should have proper ARIA attributes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
                "data-testid": "aria-test"
            }));
            const input = _react1.screen.getByTestId('aria-test');
            expect(input).toHaveAttribute('role', 'combobox');
            expect(input).toHaveAttribute('aria-expanded', 'false');
            expect(input).toHaveAttribute('aria-haspopup', 'listbox');
            expect(input).toHaveAttribute('aria-autocomplete', 'list');
        });
        it('should update aria-expanded when dropdown opens', async ()=>{
            const user = _userevent.default.setup();
            const mockSuggestions = [
                {
                    id: '1',
                    type: 'product',
                    title: 'Test Product',
                    href: '/products/1'
                }
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
                "data-testid": "aria-expanded-test",
                suggestions: mockSuggestions,
                query: "test"
            }));
            const input = _react1.screen.getByTestId('aria-expanded-test');
            await user.click(input);
            expect(input).toHaveAttribute('aria-expanded', 'true');
        });
        it('should handle keyboard navigation with ArrowDown and ArrowUp', async ()=>{
            const user = _userevent.default.setup();
            const mockSuggestions = [
                {
                    id: '1',
                    type: 'product',
                    title: 'Product 1',
                    href: '/products/1'
                },
                {
                    id: '2',
                    type: 'product',
                    title: 'Product 2',
                    href: '/products/2'
                }
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
                "data-testid": "keyboard-nav-test",
                suggestions: mockSuggestions,
                query: "test"
            }));
            const input = _react1.screen.getByTestId('keyboard-nav-test');
            await user.click(input);
            // Arrow down should highlight first option
            await user.keyboard('{ArrowDown}');
            await (0, _react1.waitFor)(()=>{
                const firstOption = _react1.screen.getByRole('option', {
                    name: /Product 1/
                });
                expect(firstOption).toHaveAttribute('aria-selected', 'true');
            });
            // Arrow down again should highlight second option
            await user.keyboard('{ArrowDown}');
            await (0, _react1.waitFor)(()=>{
                const secondOption = _react1.screen.getByRole('option', {
                    name: /Product 2/
                });
                expect(secondOption).toHaveAttribute('aria-selected', 'true');
            });
        });
        it('should handle IME composition events', async ()=>{
            const searchWithDebounce = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
                "data-testid": "ime-test",
                searchWithDebounce: searchWithDebounce
            }));
            const input = _react1.screen.getByTestId('ime-test');
            // Start composition
            _react1.fireEvent.compositionStart(input);
            _react1.fireEvent.change(input, {
                target: {
                    value: 'test'
                }
            });
            // Should not call searchWithDebounce during composition
            expect(searchWithDebounce).not.toHaveBeenCalled();
            // End composition
            _react1.fireEvent.compositionEnd(input, {
                target: {
                    value: 'test'
                }
            });
            // Should call searchWithDebounce after composition ends
            expect(searchWithDebounce).toHaveBeenCalledWith('test');
        });
        it('should announce changes for screen readers', async ()=>{
            const user = _userevent.default.setup();
            const mockSuggestions = [
                {
                    id: '1',
                    type: 'product',
                    title: 'Test Product',
                    href: '/products/1'
                }
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
                "data-testid": "screen-reader-test",
                suggestions: mockSuggestions,
                query: "test"
            }));
            const input = _react1.screen.getByTestId('screen-reader-test');
            await user.click(input);
            // Check for aria-live region
            const liveRegion = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(liveRegion).toBeInTheDocument();
        });
        it('should handle Escape key to close dropdown', async ()=>{
            const user = _userevent.default.setup();
            const mockSuggestions = [
                {
                    id: '1',
                    type: 'product',
                    title: 'Test Product',
                    href: '/products/1'
                }
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
                "data-testid": "escape-test",
                suggestions: mockSuggestions,
                query: "test"
            }));
            const input = _react1.screen.getByTestId('escape-test');
            await user.click(input);
            // Dropdown should be open
            expect(_react1.screen.getByRole('listbox')).toBeInTheDocument();
            await user.keyboard('{Escape}');
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByRole('listbox')).not.toBeInTheDocument();
            });
        });
        it('should highlight suggestions on mouse hover', async ()=>{
            const user = _userevent.default.setup();
            const mockSuggestions = [
                {
                    id: '1',
                    type: 'product',
                    title: 'Test Product',
                    href: '/products/1'
                }
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
                "data-testid": "hover-test",
                suggestions: mockSuggestions,
                query: "test"
            }));
            const input = _react1.screen.getByTestId('hover-test');
            await user.click(input);
            const option = _react1.screen.getByRole('option', {
                name: /Test Product/
            });
            await user.hover(option);
            expect(option).toHaveAttribute('aria-selected', 'true');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,