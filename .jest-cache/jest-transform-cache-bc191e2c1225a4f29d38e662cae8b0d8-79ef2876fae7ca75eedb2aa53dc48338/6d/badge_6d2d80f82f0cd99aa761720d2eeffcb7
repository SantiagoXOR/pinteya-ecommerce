864624ff1314a7554881d77a61aa774f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Badge: function() {
        return Badge;
    },
    DiscountBadge: function() {
        return DiscountBadge;
    },
    NewBadge: function() {
        return NewBadge;
    },
    OfferBadge: function() {
        return OfferBadge;
    },
    ShippingBadge: function() {
        return ShippingBadge;
    },
    StockBadge: function() {
        return StockBadge;
    },
    badgeVariants: function() {
        return badgeVariants;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const badgeVariants = (0, _classvarianceauthority.cva)("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2", {
    variants: {
        variant: {
            default: "border-transparent bg-primary text-white shadow hover:bg-primary-hover",
            secondary: "border-transparent bg-gray-100 text-gray-900 hover:bg-gray-200",
            destructive: "border-transparent bg-error text-white shadow hover:bg-red-600",
            success: "border-transparent bg-success text-white shadow hover:bg-green-600",
            warning: "border-transparent bg-warning text-white shadow hover:bg-yellow-600",
            info: "border-transparent bg-info text-white shadow hover:bg-blue-600",
            outline: "border-gray-300 text-gray-700 hover:bg-gray-50",
            "outline-primary": "border-primary text-primary hover:bg-primary hover:text-white",
            "outline-destructive": "border-error text-error hover:bg-error hover:text-white",
            "outline-success": "border-success text-success hover:bg-success hover:text-white",
            "outline-warning": "border-warning text-warning hover:bg-warning hover:text-white",
            "outline-info": "border-info text-info hover:bg-info hover:text-white"
        },
        size: {
            sm: "px-2 py-0.5 text-2xs",
            md: "px-2.5 py-0.5 text-xs",
            lg: "px-3 py-1 text-sm"
        },
        animation: {
            none: "",
            pulse: "animate-pulse",
            bounce: "animate-bounce",
            ping: "animate-ping"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "md",
        animation: "none"
    }
});
const Badge = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, animation, icon, closable, onClose, children, ...props }, ref)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        className: (0, _utils.cn)(badgeVariants({
            variant,
            size,
            animation
        }), className),
        ...props,
        children: [
            icon && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: "mr-1",
                children: icon
            }),
            children,
            closable && onClose && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onClose,
                className: "ml-1 hover:bg-black/10 rounded-full p-0.5 transition-colors",
                "aria-label": "Cerrar",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                    className: "w-3 h-3",
                    fill: "none",
                    stroke: "currentColor",
                    viewBox: "0 0 24 24",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        strokeWidth: 2,
                        d: "M6 18L18 6M6 6l12 12"
                    })
                })
            })
        ]
    });
});
Badge.displayName = "Badge";
const DiscountBadge = /*#__PURE__*/ _react.forwardRef(({ percentage, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(Badge, {
        ref: ref,
        variant: "destructive",
        size: "sm",
        className: (0, _utils.cn)("font-bold", className),
        ...props,
        children: [
            "-",
            percentage,
            "%"
        ]
    }));
DiscountBadge.displayName = "DiscountBadge";
const ShippingBadge = /*#__PURE__*/ _react.forwardRef(({ free = false, fast = false, text, className, ...props }, ref)=>{
    const content = text || (free ? "Envío gratis" : fast ? "Envío rápido" : "Envío");
    const variant = free ? "success" : fast ? "warning" : "info";
    // Para envío gratis, usar el SVG personalizado completo
    if (free) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ref: ref,
            className: (0, _utils.cn)("inline-flex items-center", className),
            ...props,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                src: "/images/icons/icon-envio.svg",
                alt: content,
                className: "h-5 w-auto"
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Badge, {
        ref: ref,
        variant: variant,
        size: "sm",
        className: (0, _utils.cn)("font-medium", className),
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
            className: "w-3 h-3",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 2,
                d: "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            })
        }),
        ...props,
        children: content
    });
});
ShippingBadge.displayName = "ShippingBadge";
const StockBadge = /*#__PURE__*/ _react.forwardRef(({ stock, lowStockThreshold = 5, className, ...props }, ref)=>{
    const isOutOfStock = stock === 0;
    const isLowStock = stock > 0 && stock <= lowStockThreshold;
    const variant = isOutOfStock ? "destructive" : isLowStock ? "warning" : "success";
    const text = isOutOfStock ? "Sin stock" : isLowStock ? `Últimas ${stock}` : "En stock";
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Badge, {
        ref: ref,
        variant: variant,
        size: "sm",
        className: (0, _utils.cn)("font-medium", className),
        ...props,
        children: text
    });
});
StockBadge.displayName = "StockBadge";
const NewBadge = /*#__PURE__*/ _react.forwardRef(({ text = "Nuevo", className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(Badge, {
        ref: ref,
        variant: "info",
        size: "sm",
        animation: "pulse",
        className: (0, _utils.cn)("font-bold", className),
        ...props,
        children: text
    }));
NewBadge.displayName = "NewBadge";
const OfferBadge = /*#__PURE__*/ _react.forwardRef(({ text = "OFERTA", className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(Badge, {
        ref: ref,
        variant: "destructive",
        size: "md",
        animation: "bounce",
        className: (0, _utils.cn)("font-bold tracking-wide", className),
        ...props,
        children: text
    }));
OfferBadge.displayName = "OfferBadge";

//# sourceMappingURL=data:application/json;base64,