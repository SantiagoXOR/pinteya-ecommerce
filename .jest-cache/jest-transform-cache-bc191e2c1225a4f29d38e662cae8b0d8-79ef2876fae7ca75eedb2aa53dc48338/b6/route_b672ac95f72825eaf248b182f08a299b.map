{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\categories\\route.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - API DE CATEGORÍAS\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/supabase';\nimport { validateData, CategoryFiltersSchema, CategorySchema } from '@/lib/validations';\nimport { ApiResponse } from '@/types/api';\nimport { Category } from '@/types/database';\n\n// ===================================\n// GET /api/categories - Obtener categorías\n// ===================================\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    \n    // Extraer parámetros de query\n    const queryParams = {\n      search: searchParams.get('search') || undefined,\n    };\n\n    // Validar parámetros (simplificado para la estructura actual)\n    const filters = {\n      search: queryParams.search,\n    };\n    \n    const supabase = getSupabaseClient();\n\n    // Verificar que el cliente de Supabase esté disponible\n    if (!supabase) {\n      console.error('Cliente de Supabase no disponible en GET /api/categories');\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Servicio de base de datos no disponible',\n      };\n      return NextResponse.json(errorResponse, { status: 503 });\n    }\n\n    // Construir query base - simplificado para la estructura actual\n    let query = supabase\n      .from('categories')\n      .select(`\n        *,\n        products_count:products(count)\n      `)\n      .order('name');\n\n    // Aplicar filtros\n    if (filters.search) {\n      query = query.ilike('name', `%${filters.search}%`);\n    }\n\n    // Ejecutar query\n    const { data: categories, error } = await query;\n\n    if (error) {\n      console.error('Error en GET /api/categories:', error);\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: error.message || 'Error obteniendo categorías',\n      };\n      return NextResponse.json(errorResponse, { status: 500 });\n    }\n\n    // Procesar datos para incluir conteo de productos\n    const processedCategories = categories?.map(category => ({\n      ...category,\n      products_count: category.products_count?.[0]?.count || 0,\n    })) || [];\n\n    const response: ApiResponse<Category[]> = {\n      data: processedCategories,\n      success: true,\n      message: `${processedCategories.length} categorías encontradas`,\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error: any) {\n    console.error('Error en GET /api/categories:', error);\n    \n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: error.message || 'Error interno del servidor',\n    };\n\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}\n\n// ===================================\n// POST /api/categories - Crear categoría (Admin)\n// ===================================\nexport async function POST(request: NextRequest) {\n  try {\n    // TODO: Verificar permisos de administrador\n    // const { userId } = auth();\n    // if (!userId || !isAdmin(userId)) {\n    //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });\n    // }\n\n    const body = await request.json();\n    \n    // Validar datos de la categoría\n    const categoryData = validateData(CategorySchema, body);\n    \n    const supabase = getSupabaseClient(true); // Usar cliente admin\n\n    // Verificar que el cliente administrativo esté disponible\n    if (!supabase) {\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/categories');\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Servicio administrativo no disponible',\n      };\n      return NextResponse.json(errorResponse, { status: 503 });\n    }\n\n    // Crear slug si no se proporciona\n    if (!categoryData.slug) {\n      categoryData.slug = categoryData.name\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '');\n    }\n\n    // Insertar categoría\n    const { data: category, error } = await supabase\n      .from('categories')\n      .insert(categoryData)\n      .select()\n      .single();\n\n    if (error) {\n      handleSupabaseError(error, 'POST /api/categories');\n    }\n\n    const response: ApiResponse<Category> = {\n      data: category,\n      success: true,\n      message: 'Categoría creada exitosamente',\n    };\n\n    return NextResponse.json(response, { status: 201 });\n\n  } catch (error: any) {\n    console.error('Error en POST /api/categories:', error);\n    \n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: error.message || 'Error interno del servidor',\n    };\n\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}\n\n\n"],"names":["GET","POST","request","searchParams","URL","url","queryParams","search","get","undefined","filters","supabase","getSupabaseClient","console","error","errorResponse","data","success","NextResponse","json","status","query","from","select","order","ilike","categories","message","processedCategories","map","category","products_count","count","response","length","body","categoryData","validateData","CategorySchema","slug","name","toLowerCase","replace","insert","single","handleSupabaseError"],"mappings":"AAAA,sCAAsC;AACtC,yCAAyC;AACzC,sCAAsC;;;;;;;;;;;;IAWhBA,GAAG;eAAHA;;IAoFAC,IAAI;eAAJA;;;wBA7FoB;0BACa;6BACa;AAO7D,eAAeD,IAAIE,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIF,QAAQG,GAAG;QAE5C,8BAA8B;QAC9B,MAAMC,cAAc;YAClBC,QAAQJ,aAAaK,GAAG,CAAC,aAAaC;QACxC;QAEA,8DAA8D;QAC9D,MAAMC,UAAU;YACdH,QAAQD,YAAYC,MAAM;QAC5B;QAEA,MAAMI,WAAWC,IAAAA,2BAAiB;QAElC,uDAAuD;QACvD,IAAI,CAACD,UAAU;YACbE,QAAQC,KAAK,CAAC;YACd,MAAMC,gBAAmC;gBACvCC,MAAM;gBACNC,SAAS;gBACTH,OAAO;YACT;YACA,OAAOI,oBAAY,CAACC,IAAI,CAACJ,eAAe;gBAAEK,QAAQ;YAAI;QACxD;QAEA,gEAAgE;QAChE,IAAIC,QAAQV,SACTW,IAAI,CAAC,cACLC,MAAM,CAAC,CAAC;;;MAGT,CAAC,EACAC,KAAK,CAAC;QAET,kBAAkB;QAClB,IAAId,QAAQH,MAAM,EAAE;YAClBc,QAAQA,MAAMI,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAEf,QAAQH,MAAM,CAAC,CAAC,CAAC;QACnD;QAEA,iBAAiB;QACjB,MAAM,EAAES,MAAMU,UAAU,EAAEZ,KAAK,EAAE,GAAG,MAAMO;QAE1C,IAAIP,OAAO;YACTD,QAAQC,KAAK,CAAC,iCAAiCA;YAC/C,MAAMC,gBAAmC;gBACvCC,MAAM;gBACNC,SAAS;gBACTH,OAAOA,MAAMa,OAAO,IAAI;YAC1B;YACA,OAAOT,oBAAY,CAACC,IAAI,CAACJ,eAAe;gBAAEK,QAAQ;YAAI;QACxD;QAEA,kDAAkD;QAClD,MAAMQ,sBAAsBF,YAAYG,IAAIC,CAAAA,WAAa,CAAA;gBACvD,GAAGA,QAAQ;gBACXC,gBAAgBD,SAASC,cAAc,EAAE,CAAC,EAAE,EAAEC,SAAS;YACzD,CAAA,MAAO,EAAE;QAET,MAAMC,WAAoC;YACxCjB,MAAMY;YACNX,SAAS;YACTU,SAAS,GAAGC,oBAAoBM,MAAM,CAAC,uBAAuB,CAAC;QACjE;QAEA,OAAOhB,oBAAY,CAACC,IAAI,CAACc;IAE3B,EAAE,OAAOnB,OAAY;QACnBD,QAAQC,KAAK,CAAC,iCAAiCA;QAE/C,MAAMC,gBAAmC;YACvCC,MAAM;YACNC,SAAS;YACTH,OAAOA,MAAMa,OAAO,IAAI;QAC1B;QAEA,OAAOT,oBAAY,CAACC,IAAI,CAACJ,eAAe;YAAEK,QAAQ;QAAI;IACxD;AACF;AAKO,eAAenB,KAAKC,OAAoB;IAC7C,IAAI;QACF,4CAA4C;QAC5C,6BAA6B;QAC7B,qCAAqC;QACrC,2EAA2E;QAC3E,IAAI;QAEJ,MAAMiC,OAAO,MAAMjC,QAAQiB,IAAI;QAE/B,gCAAgC;QAChC,MAAMiB,eAAeC,IAAAA,yBAAY,EAACC,2BAAc,EAAEH;QAElD,MAAMxB,WAAWC,IAAAA,2BAAiB,EAAC,OAAO,qBAAqB;QAE/D,0DAA0D;QAC1D,IAAI,CAACD,UAAU;YACbE,QAAQC,KAAK,CAAC;YACd,MAAMC,gBAAmC;gBACvCC,MAAM;gBACNC,SAAS;gBACTH,OAAO;YACT;YACA,OAAOI,oBAAY,CAACC,IAAI,CAACJ,eAAe;gBAAEK,QAAQ;YAAI;QACxD;QAEA,kCAAkC;QAClC,IAAI,CAACgB,aAAaG,IAAI,EAAE;YACtBH,aAAaG,IAAI,GAAGH,aAAaI,IAAI,CAClCC,WAAW,GACXC,OAAO,CAAC,eAAe,KACvBA,OAAO,CAAC,YAAY;QACzB;QAEA,qBAAqB;QACrB,MAAM,EAAE1B,MAAMc,QAAQ,EAAEhB,KAAK,EAAE,GAAG,MAAMH,SACrCW,IAAI,CAAC,cACLqB,MAAM,CAACP,cACPb,MAAM,GACNqB,MAAM;QAET,IAAI9B,OAAO;YACT+B,IAAAA,6BAAmB,EAAC/B,OAAO;QAC7B;QAEA,MAAMmB,WAAkC;YACtCjB,MAAMc;YACNb,SAAS;YACTU,SAAS;QACX;QAEA,OAAOT,oBAAY,CAACC,IAAI,CAACc,UAAU;YAAEb,QAAQ;QAAI;IAEnD,EAAE,OAAON,OAAY;QACnBD,QAAQC,KAAK,CAAC,kCAAkCA;QAEhD,MAAMC,gBAAmC;YACvCC,MAAM;YACNC,SAAS;YACTH,OAAOA,MAAMa,OAAO,IAAI;QAC1B;QAEA,OAAOT,oBAAY,CAACC,IAAI,CAACJ,eAAe;YAAEK,QAAQ;QAAI;IACxD;AACF"}