3fc91173e3ed57a7c624b159408ea681
/**
 * Hook para geolocalizaci√≥n autom√°tica y detecci√≥n de zona de entrega
 * Detecta la ubicaci√≥n del usuario y determina la zona de entrega m√°s cercana
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useGeolocation", {
    enumerable: true,
    get: function() {
        return useGeolocation;
    }
});
const _react = require("react");
// Zonas de entrega con coordenadas aproximadas
const DELIVERY_ZONES = [
    {
        id: "cordoba-capital",
        name: "C√≥rdoba Capital",
        available: true,
        coordinates: {
            lat: -31.4201,
            lng: -64.1888
        },
        radius: 15
    },
    {
        id: "cordoba-interior",
        name: "Interior de C√≥rdoba",
        available: true,
        coordinates: {
            lat: -31.4201,
            lng: -64.1888
        },
        radius: 100
    },
    {
        id: "buenos-aires",
        name: "Buenos Aires",
        available: false,
        coordinates: {
            lat: -34.6118,
            lng: -58.3960
        },
        radius: 50
    },
    {
        id: "rosario",
        name: "Rosario",
        available: false,
        coordinates: {
            lat: -32.9442,
            lng: -60.6505
        },
        radius: 30
    }
];
// Funci√≥n para calcular distancia entre dos puntos (f√≥rmula de Haversine)
function calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 6371; // Radio de la Tierra en km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}
// Funci√≥n para detectar la zona m√°s cercana
function detectNearestZone(userLat, userLng) {
    let nearestZone = null;
    let minDistance = Infinity;
    for (const zone of DELIVERY_ZONES){
        if (zone.coordinates) {
            const distance = calculateDistance(userLat, userLng, zone.coordinates.lat, zone.coordinates.lng);
            console.log(`üó∫Ô∏è Distance to ${zone.name}: ${distance.toFixed(2)}km (radius: ${zone.radius}km)`);
            // Verificar si est√° dentro del radio de la zona
            if (zone.radius && distance <= zone.radius && distance < minDistance) {
                nearestZone = zone;
                minDistance = distance;
            } else {}
        } else {}
    }
    // Si no encuentra una zona espec√≠fica, usar C√≥rdoba Interior como fallback
    const fallbackZone = DELIVERY_ZONES.find((zone)=>zone.id === "cordoba-interior");
    const result = nearestZone || fallbackZone || null;
    return result;
}
const useGeolocation = ()=>{
    const [state, setState] = (0, _react.useState)({
        location: null,
        isLoading: false,
        error: null,
        permissionStatus: 'unknown',
        detectedZone: null
    });
    // Funci√≥n para solicitar geolocalizaci√≥n
    const requestLocation = (0, _react.useCallback)(()=>{
        if (!navigator.geolocation) {
            setState((prev)=>({
                    ...prev,
                    error: 'Geolocalizaci√≥n no soportada por este navegador',
                    permissionStatus: 'denied'
                }));
            return;
        }
        setState((prev)=>{
            const newState = {
                ...prev,
                isLoading: true,
                error: null
            };
            return newState;
        });
        // Usar Promise para mejor manejo de errores
        const getCurrentPositionPromise = ()=>{
            return new Promise((resolve, reject)=>{
                navigator.geolocation.getCurrentPosition(resolve, reject, {
                    enableHighAccuracy: false,
                    timeout: 30000,
                    maximumAge: 0
                });
            });
        };
        // Ejecutar con async/await para mejor control
        getCurrentPositionPromise().then((position)=>{
            const { latitude, longitude, accuracy } = position.coords;
            const detectedZone = detectNearestZone(latitude, longitude);
            // Usar setTimeout para asegurar que el setState se ejecute en el pr√≥ximo tick
            setTimeout(()=>{
                setState((prev)=>{
                    const newState = {
                        ...prev,
                        location: {
                            lat: latitude,
                            lng: longitude
                        },
                        detectedZone,
                        isLoading: false,
                        permissionStatus: 'granted',
                        error: null
                    };
                    return newState;
                });
            }, 0);
        }).catch((error)=>{
            let errorMessage = 'Error al obtener ubicaci√≥n';
            let permissionStatus = 'unknown';
            switch(error.code){
                case error.PERMISSION_DENIED:
                    errorMessage = 'Permisos de ubicaci√≥n denegados';
                    permissionStatus = 'denied';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = 'Ubicaci√≥n no disponible';
                    break;
                case error.TIMEOUT:
                    errorMessage = 'Tiempo de espera agotado';
                    break;
            }
            // Tambi√©n usar setTimeout para el manejo de errores
            setTimeout(()=>{
                setState((prev)=>({
                        ...prev,
                        error: errorMessage,
                        isLoading: false,
                        permissionStatus
                    }));
            }, 0);
        });
    }, []);
    // Verificar permisos al montar el componente
    (0, _react.useEffect)(()=>{
        if ('permissions' in navigator) {
            navigator.permissions.query({
                name: 'geolocation'
            }).then((result)=>{
                setState((prev)=>({
                        ...prev,
                        permissionStatus: result.state
                    }));
                // Si ya tiene permisos, solicitar ubicaci√≥n autom√°ticamente
                if (result.state === 'granted') {
                // No solicitar autom√°ticamente para evitar bucles infinitos
                } else if (result.state === 'prompt') {
                // No solicitar autom√°ticamente si es 'prompt' para evitar popup inesperado
                } else {}
            }).catch((error)=>{
                setState((prev)=>({
                        ...prev,
                        permissionStatus: 'unknown'
                    }));
            });
        } else {
            setState((prev)=>({
                    ...prev,
                    permissionStatus: 'unknown'
                }));
        }
    }, []); // Sin dependencias para evitar bucles
    // Funci√≥n para obtener todas las zonas disponibles
    const getAvailableZones = (0, _react.useCallback)(()=>{
        return DELIVERY_ZONES;
    }, []);
    // Funci√≥n para seleccionar zona manualmente
    const selectZone = (0, _react.useCallback)((zoneId)=>{
        const zone = DELIVERY_ZONES.find((z)=>z.id === zoneId);
        if (zone) {
            setState((prev)=>({
                    ...prev,
                    detectedZone: zone
                }));
        }
    }, []);
    // Funci√≥n de test para simular geolocalizaci√≥n exitosa
    const testLocation = (0, _react.useCallback)((lat = -31.4201, lng = -64.1888)=>{
        const detectedZone = detectNearestZone(lat, lng);
        setState((prev)=>{
            const newState = {
                ...prev,
                location: {
                    lat,
                    lng
                },
                detectedZone,
                isLoading: false,
                permissionStatus: 'granted',
                error: null
            };
            return newState;
        });
    }, []);
    return {
        ...state,
        requestLocation,
        getAvailableZones,
        selectZone,
        deliveryZones: DELIVERY_ZONES,
        testLocation
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZUdlb2xvY2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBIb29rIHBhcmEgZ2VvbG9jYWxpemFjacOzbiBhdXRvbcOhdGljYSB5IGRldGVjY2nDs24gZGUgem9uYSBkZSBlbnRyZWdhXHJcbiAqIERldGVjdGEgbGEgdWJpY2FjacOzbiBkZWwgdXN1YXJpbyB5IGRldGVybWluYSBsYSB6b25hIGRlIGVudHJlZ2EgbcOhcyBjZXJjYW5hXHJcbiAqL1xyXG5cclxuJ3VzZSBjbGllbnQnO1xyXG5cclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlbGl2ZXJ5Wm9uZSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgYXZhaWxhYmxlOiBib29sZWFuO1xyXG4gIGNvb3JkaW5hdGVzPzoge1xyXG4gICAgbGF0OiBudW1iZXI7XHJcbiAgICBsbmc6IG51bWJlcjtcclxuICB9O1xyXG4gIHJhZGl1cz86IG51bWJlcjsgLy8gUmFkaW8gZW4ga21cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHZW9sb2NhdGlvblN0YXRlIHtcclxuICBsb2NhdGlvbjoge1xyXG4gICAgbGF0OiBudW1iZXI7XHJcbiAgICBsbmc6IG51bWJlcjtcclxuICB9IHwgbnVsbDtcclxuICBpc0xvYWRpbmc6IGJvb2xlYW47XHJcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XHJcbiAgcGVybWlzc2lvblN0YXR1czogJ2dyYW50ZWQnIHwgJ2RlbmllZCcgfCAncHJvbXB0JyB8ICd1bmtub3duJztcclxuICBkZXRlY3RlZFpvbmU6IERlbGl2ZXJ5Wm9uZSB8IG51bGw7XHJcbn1cclxuXHJcbi8vIFpvbmFzIGRlIGVudHJlZ2EgY29uIGNvb3JkZW5hZGFzIGFwcm94aW1hZGFzXHJcbmNvbnN0IERFTElWRVJZX1pPTkVTOiBEZWxpdmVyeVpvbmVbXSA9IFtcclxuICB7XHJcbiAgICBpZDogXCJjb3Jkb2JhLWNhcGl0YWxcIixcclxuICAgIG5hbWU6IFwiQ8OzcmRvYmEgQ2FwaXRhbFwiLFxyXG4gICAgYXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgY29vcmRpbmF0ZXM6IHsgbGF0OiAtMzEuNDIwMSwgbG5nOiAtNjQuMTg4OCB9LFxyXG4gICAgcmFkaXVzOiAxNVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6IFwiY29yZG9iYS1pbnRlcmlvclwiLFxyXG4gICAgbmFtZTogXCJJbnRlcmlvciBkZSBDw7NyZG9iYVwiLFxyXG4gICAgYXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgY29vcmRpbmF0ZXM6IHsgbGF0OiAtMzEuNDIwMSwgbG5nOiAtNjQuMTg4OCB9LFxyXG4gICAgcmFkaXVzOiAxMDBcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiBcImJ1ZW5vcy1haXJlc1wiLFxyXG4gICAgbmFtZTogXCJCdWVub3MgQWlyZXNcIixcclxuICAgIGF2YWlsYWJsZTogZmFsc2UsXHJcbiAgICBjb29yZGluYXRlczogeyBsYXQ6IC0zNC42MTE4LCBsbmc6IC01OC4zOTYwIH0sXHJcbiAgICByYWRpdXM6IDUwXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogXCJyb3NhcmlvXCIsXHJcbiAgICBuYW1lOiBcIlJvc2FyaW9cIixcclxuICAgIGF2YWlsYWJsZTogZmFsc2UsXHJcbiAgICBjb29yZGluYXRlczogeyBsYXQ6IC0zMi45NDQyLCBsbmc6IC02MC42NTA1IH0sXHJcbiAgICByYWRpdXM6IDMwXHJcbiAgfSxcclxuXTtcclxuXHJcbi8vIEZ1bmNpw7NuIHBhcmEgY2FsY3VsYXIgZGlzdGFuY2lhIGVudHJlIGRvcyBwdW50b3MgKGbDs3JtdWxhIGRlIEhhdmVyc2luZSlcclxuZnVuY3Rpb24gY2FsY3VsYXRlRGlzdGFuY2UobGF0MTogbnVtYmVyLCBsbmcxOiBudW1iZXIsIGxhdDI6IG51bWJlciwgbG5nMjogbnVtYmVyKTogbnVtYmVyIHtcclxuICBjb25zdCBSID0gNjM3MTsgLy8gUmFkaW8gZGUgbGEgVGllcnJhIGVuIGttXHJcbiAgY29uc3QgZExhdCA9IChsYXQyIC0gbGF0MSkgKiBNYXRoLlBJIC8gMTgwO1xyXG4gIGNvbnN0IGRMbmcgPSAobG5nMiAtIGxuZzEpICogTWF0aC5QSSAvIDE4MDtcclxuICBjb25zdCBhID0gXHJcbiAgICBNYXRoLnNpbihkTGF0LzIpICogTWF0aC5zaW4oZExhdC8yKSArXHJcbiAgICBNYXRoLmNvcyhsYXQxICogTWF0aC5QSSAvIDE4MCkgKiBNYXRoLmNvcyhsYXQyICogTWF0aC5QSSAvIDE4MCkgKiBcclxuICAgIE1hdGguc2luKGRMbmcvMikgKiBNYXRoLnNpbihkTG5nLzIpO1xyXG4gIGNvbnN0IGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxLWEpKTtcclxuICByZXR1cm4gUiAqIGM7XHJcbn1cclxuXHJcbi8vIEZ1bmNpw7NuIHBhcmEgZGV0ZWN0YXIgbGEgem9uYSBtw6FzIGNlcmNhbmFcclxuZnVuY3Rpb24gZGV0ZWN0TmVhcmVzdFpvbmUodXNlckxhdDogbnVtYmVyLCB1c2VyTG5nOiBudW1iZXIpOiBEZWxpdmVyeVpvbmUgfCBudWxsIHtcclxuXHJcbiAgbGV0IG5lYXJlc3Rab25lOiBEZWxpdmVyeVpvbmUgfCBudWxsID0gbnVsbDtcclxuICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcclxuXHJcbiAgZm9yIChjb25zdCB6b25lIG9mIERFTElWRVJZX1pPTkVTKSB7XHJcblxyXG4gICAgaWYgKHpvbmUuY29vcmRpbmF0ZXMpIHtcclxuICAgICAgY29uc3QgZGlzdGFuY2UgPSBjYWxjdWxhdGVEaXN0YW5jZShcclxuICAgICAgICB1c2VyTGF0LFxyXG4gICAgICAgIHVzZXJMbmcsXHJcbiAgICAgICAgem9uZS5jb29yZGluYXRlcy5sYXQsXHJcbiAgICAgICAgem9uZS5jb29yZGluYXRlcy5sbmdcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5e677iPIERpc3RhbmNlIHRvICR7em9uZS5uYW1lfTogJHtkaXN0YW5jZS50b0ZpeGVkKDIpfWttIChyYWRpdXM6ICR7em9uZS5yYWRpdXN9a20pYCk7XHJcblxyXG4gICAgICAvLyBWZXJpZmljYXIgc2kgZXN0w6EgZGVudHJvIGRlbCByYWRpbyBkZSBsYSB6b25hXHJcbiAgICAgIGlmICh6b25lLnJhZGl1cyAmJiBkaXN0YW5jZSA8PSB6b25lLnJhZGl1cyAmJiBkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XHJcbiAgICAgICAgbmVhcmVzdFpvbmUgPSB6b25lO1xyXG4gICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBTaSBubyBlbmN1ZW50cmEgdW5hIHpvbmEgZXNwZWPDrWZpY2EsIHVzYXIgQ8OzcmRvYmEgSW50ZXJpb3IgY29tbyBmYWxsYmFja1xyXG4gIGNvbnN0IGZhbGxiYWNrWm9uZSA9IERFTElWRVJZX1pPTkVTLmZpbmQoem9uZSA9PiB6b25lLmlkID09PSBcImNvcmRvYmEtaW50ZXJpb3JcIik7XHJcbiAgY29uc3QgcmVzdWx0ID0gbmVhcmVzdFpvbmUgfHwgZmFsbGJhY2tab25lIHx8IG51bGw7XHJcblxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdXNlR2VvbG9jYXRpb24gPSAoKSA9PiB7XHJcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZTxHZW9sb2NhdGlvblN0YXRlPih7XHJcbiAgICBsb2NhdGlvbjogbnVsbCxcclxuICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICBlcnJvcjogbnVsbCxcclxuICAgIHBlcm1pc3Npb25TdGF0dXM6ICd1bmtub3duJyxcclxuICAgIGRldGVjdGVkWm9uZTogbnVsbFxyXG4gIH0pO1xyXG5cclxuICAvLyBGdW5jacOzbiBwYXJhIHNvbGljaXRhciBnZW9sb2NhbGl6YWNpw7NuXHJcbiAgY29uc3QgcmVxdWVzdExvY2F0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG5cclxuICAgIGlmICghbmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7XHJcbiAgICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgICAuLi5wcmV2LFxyXG4gICAgICAgIGVycm9yOiAnR2VvbG9jYWxpemFjacOzbiBubyBzb3BvcnRhZGEgcG9yIGVzdGUgbmF2ZWdhZG9yJyxcclxuICAgICAgICBwZXJtaXNzaW9uU3RhdHVzOiAnZGVuaWVkJ1xyXG4gICAgICB9KSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc2V0U3RhdGUocHJldiA9PiB7XHJcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5wcmV2LCBpc0xvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH07XHJcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFVzYXIgUHJvbWlzZSBwYXJhIG1lam9yIG1hbmVqbyBkZSBlcnJvcmVzXHJcbiAgICBjb25zdCBnZXRDdXJyZW50UG9zaXRpb25Qcm9taXNlID0gKCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8R2VvbG9jYXRpb25Qb3NpdGlvbj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ocmVzb2x2ZSwgcmVqZWN0LCB7XHJcbiAgICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLFxyXG4gICAgICAgICAgdGltZW91dDogMzAwMDAsXHJcbiAgICAgICAgICBtYXhpbXVtQWdlOiAwXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBFamVjdXRhciBjb24gYXN5bmMvYXdhaXQgcGFyYSBtZWpvciBjb250cm9sXHJcbiAgICBnZXRDdXJyZW50UG9zaXRpb25Qcm9taXNlKClcclxuICAgICAgLnRoZW4oKHBvc2l0aW9uKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgbGF0aXR1ZGUsIGxvbmdpdHVkZSwgYWNjdXJhY3kgfSA9IHBvc2l0aW9uLmNvb3JkcztcclxuXHJcbiAgICAgICAgY29uc3QgZGV0ZWN0ZWRab25lID0gZGV0ZWN0TmVhcmVzdFpvbmUobGF0aXR1ZGUsIGxvbmdpdHVkZSk7XHJcblxyXG5cclxuICAgICAgICAvLyBVc2FyIHNldFRpbWVvdXQgcGFyYSBhc2VndXJhciBxdWUgZWwgc2V0U3RhdGUgc2UgZWplY3V0ZSBlbiBlbCBwcsOzeGltbyB0aWNrXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBzZXRTdGF0ZShwcmV2ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB7XHJcbiAgICAgICAgICAgICAgLi4ucHJldixcclxuICAgICAgICAgICAgICBsb2NhdGlvbjogeyBsYXQ6IGxhdGl0dWRlLCBsbmc6IGxvbmdpdHVkZSB9LFxyXG4gICAgICAgICAgICAgIGRldGVjdGVkWm9uZSxcclxuICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIHBlcm1pc3Npb25TdGF0dXM6ICdncmFudGVkJyBhcyBjb25zdCxcclxuICAgICAgICAgICAgICBlcnJvcjogbnVsbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9LCAwKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSAnRXJyb3IgYWwgb2J0ZW5lciB1YmljYWNpw7NuJztcclxuICAgICAgICBsZXQgcGVybWlzc2lvblN0YXR1czogJ2RlbmllZCcgfCAndW5rbm93bicgPSAndW5rbm93bic7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZXJyb3IuY29kZSkge1xyXG4gICAgICAgICAgY2FzZSBlcnJvci5QRVJNSVNTSU9OX0RFTklFRDpcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gJ1Blcm1pc29zIGRlIHViaWNhY2nDs24gZGVuZWdhZG9zJztcclxuICAgICAgICAgICAgcGVybWlzc2lvblN0YXR1cyA9ICdkZW5pZWQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgZXJyb3IuUE9TSVRJT05fVU5BVkFJTEFCTEU6XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICdVYmljYWNpw7NuIG5vIGRpc3BvbmlibGUnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgZXJyb3IuVElNRU9VVDpcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gJ1RpZW1wbyBkZSBlc3BlcmEgYWdvdGFkbyc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGFtYmnDqW4gdXNhciBzZXRUaW1lb3V0IHBhcmEgZWwgbWFuZWpvIGRlIGVycm9yZXNcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHNldFN0YXRlKHByZXYgPT4gKHtcclxuICAgICAgICAgICAgLi4ucHJldixcclxuICAgICAgICAgICAgZXJyb3I6IGVycm9yTWVzc2FnZSxcclxuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgcGVybWlzc2lvblN0YXR1c1xyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICB9KTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFZlcmlmaWNhciBwZXJtaXNvcyBhbCBtb250YXIgZWwgY29tcG9uZW50ZVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcblxyXG4gICAgaWYgKCdwZXJtaXNzaW9ucycgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICAgIG5hdmlnYXRvci5wZXJtaXNzaW9ucy5xdWVyeSh7IG5hbWU6ICdnZW9sb2NhdGlvbicgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgc2V0U3RhdGUocHJldiA9PiAoeyAuLi5wcmV2LCBwZXJtaXNzaW9uU3RhdHVzOiByZXN1bHQuc3RhdGUgYXMgYW55IH0pKTtcclxuXHJcbiAgICAgICAgLy8gU2kgeWEgdGllbmUgcGVybWlzb3MsIHNvbGljaXRhciB1YmljYWNpw7NuIGF1dG9tw6F0aWNhbWVudGVcclxuICAgICAgICBpZiAocmVzdWx0LnN0YXRlID09PSAnZ3JhbnRlZCcpIHtcclxuICAgICAgICAgIC8vIE5vIHNvbGljaXRhciBhdXRvbcOhdGljYW1lbnRlIHBhcmEgZXZpdGFyIGJ1Y2xlcyBpbmZpbml0b3NcclxuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0ZSA9PT0gJ3Byb21wdCcpIHtcclxuICAgICAgICAgIC8vIE5vIHNvbGljaXRhciBhdXRvbcOhdGljYW1lbnRlIHNpIGVzICdwcm9tcHQnIHBhcmEgZXZpdGFyIHBvcHVwIGluZXNwZXJhZG9cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIH1cclxuICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgc2V0U3RhdGUocHJldiA9PiAoeyAuLi5wcmV2LCBwZXJtaXNzaW9uU3RhdHVzOiAndW5rbm93bicgfSkpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNldFN0YXRlKHByZXYgPT4gKHsgLi4ucHJldiwgcGVybWlzc2lvblN0YXR1czogJ3Vua25vd24nIH0pKTtcclxuICAgIH1cclxuICB9LCBbXSk7IC8vIFNpbiBkZXBlbmRlbmNpYXMgcGFyYSBldml0YXIgYnVjbGVzXHJcblxyXG4gIC8vIEZ1bmNpw7NuIHBhcmEgb2J0ZW5lciB0b2RhcyBsYXMgem9uYXMgZGlzcG9uaWJsZXNcclxuICBjb25zdCBnZXRBdmFpbGFibGVab25lcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHJldHVybiBERUxJVkVSWV9aT05FUztcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIEZ1bmNpw7NuIHBhcmEgc2VsZWNjaW9uYXIgem9uYSBtYW51YWxtZW50ZVxyXG4gIGNvbnN0IHNlbGVjdFpvbmUgPSB1c2VDYWxsYmFjaygoem9uZUlkOiBzdHJpbmcpID0+IHtcclxuICAgIGNvbnN0IHpvbmUgPSBERUxJVkVSWV9aT05FUy5maW5kKHogPT4gei5pZCA9PT0gem9uZUlkKTtcclxuICAgIGlmICh6b25lKSB7XHJcbiAgICAgIHNldFN0YXRlKHByZXYgPT4gKHsgLi4ucHJldiwgZGV0ZWN0ZWRab25lOiB6b25lIH0pKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIEZ1bmNpw7NuIGRlIHRlc3QgcGFyYSBzaW11bGFyIGdlb2xvY2FsaXphY2nDs24gZXhpdG9zYVxyXG4gIGNvbnN0IHRlc3RMb2NhdGlvbiA9IHVzZUNhbGxiYWNrKChsYXQ6IG51bWJlciA9IC0zMS40MjAxLCBsbmc6IG51bWJlciA9IC02NC4xODg4KSA9PiB7XHJcblxyXG4gICAgY29uc3QgZGV0ZWN0ZWRab25lID0gZGV0ZWN0TmVhcmVzdFpvbmUobGF0LCBsbmcpO1xyXG5cclxuICAgIHNldFN0YXRlKHByZXYgPT4ge1xyXG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IHtcclxuICAgICAgICAuLi5wcmV2LFxyXG4gICAgICAgIGxvY2F0aW9uOiB7IGxhdCwgbG5nIH0sXHJcbiAgICAgICAgZGV0ZWN0ZWRab25lLFxyXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgcGVybWlzc2lvblN0YXR1czogJ2dyYW50ZWQnIGFzIGNvbnN0LFxyXG4gICAgICAgIGVycm9yOiBudWxsXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgIH0pO1xyXG5cclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5zdGF0ZSxcclxuICAgIHJlcXVlc3RMb2NhdGlvbixcclxuICAgIGdldEF2YWlsYWJsZVpvbmVzLFxyXG4gICAgc2VsZWN0Wm9uZSxcclxuICAgIGRlbGl2ZXJ5Wm9uZXM6IERFTElWRVJZX1pPTkVTLFxyXG4gICAgdGVzdExvY2F0aW9uIC8vIEZ1bmNpw7NuIGRlIHRlc3QgcGFyYSBkZWJ1Z2dpbmdcclxuICB9O1xyXG59O1xyXG4iXSwibmFtZXMiOlsidXNlR2VvbG9jYXRpb24iLCJERUxJVkVSWV9aT05FUyIsImlkIiwibmFtZSIsImF2YWlsYWJsZSIsImNvb3JkaW5hdGVzIiwibGF0IiwibG5nIiwicmFkaXVzIiwiY2FsY3VsYXRlRGlzdGFuY2UiLCJsYXQxIiwibG5nMSIsImxhdDIiLCJsbmcyIiwiUiIsImRMYXQiLCJNYXRoIiwiUEkiLCJkTG5nIiwiYSIsInNpbiIsImNvcyIsImMiLCJhdGFuMiIsInNxcnQiLCJkZXRlY3ROZWFyZXN0Wm9uZSIsInVzZXJMYXQiLCJ1c2VyTG5nIiwibmVhcmVzdFpvbmUiLCJtaW5EaXN0YW5jZSIsIkluZmluaXR5Iiwiem9uZSIsImRpc3RhbmNlIiwiY29uc29sZSIsImxvZyIsInRvRml4ZWQiLCJmYWxsYmFja1pvbmUiLCJmaW5kIiwicmVzdWx0Iiwic3RhdGUiLCJzZXRTdGF0ZSIsInVzZVN0YXRlIiwibG9jYXRpb24iLCJpc0xvYWRpbmciLCJlcnJvciIsInBlcm1pc3Npb25TdGF0dXMiLCJkZXRlY3RlZFpvbmUiLCJyZXF1ZXN0TG9jYXRpb24iLCJ1c2VDYWxsYmFjayIsIm5hdmlnYXRvciIsImdlb2xvY2F0aW9uIiwicHJldiIsIm5ld1N0YXRlIiwiZ2V0Q3VycmVudFBvc2l0aW9uUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwiZW5hYmxlSGlnaEFjY3VyYWN5IiwidGltZW91dCIsIm1heGltdW1BZ2UiLCJ0aGVuIiwicG9zaXRpb24iLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImFjY3VyYWN5IiwiY29vcmRzIiwic2V0VGltZW91dCIsImNhdGNoIiwiZXJyb3JNZXNzYWdlIiwiY29kZSIsIlBFUk1JU1NJT05fREVOSUVEIiwiUE9TSVRJT05fVU5BVkFJTEFCTEUiLCJUSU1FT1VUIiwidXNlRWZmZWN0IiwicGVybWlzc2lvbnMiLCJxdWVyeSIsImdldEF2YWlsYWJsZVpvbmVzIiwic2VsZWN0Wm9uZSIsInpvbmVJZCIsInoiLCJ0ZXN0TG9jYXRpb24iLCJkZWxpdmVyeVpvbmVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0MsR0FFRDs7Ozs7K0JBMkdhQTs7O2VBQUFBOzs7dUJBekdvQztBQXdCakQsK0NBQStDO0FBQy9DLE1BQU1DLGlCQUFpQztJQUNyQztRQUNFQyxJQUFJO1FBQ0pDLE1BQU07UUFDTkMsV0FBVztRQUNYQyxhQUFhO1lBQUVDLEtBQUssQ0FBQztZQUFTQyxLQUFLLENBQUM7UUFBUTtRQUM1Q0MsUUFBUTtJQUNWO0lBQ0E7UUFDRU4sSUFBSTtRQUNKQyxNQUFNO1FBQ05DLFdBQVc7UUFDWEMsYUFBYTtZQUFFQyxLQUFLLENBQUM7WUFBU0MsS0FBSyxDQUFDO1FBQVE7UUFDNUNDLFFBQVE7SUFDVjtJQUNBO1FBQ0VOLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxXQUFXO1FBQ1hDLGFBQWE7WUFBRUMsS0FBSyxDQUFDO1lBQVNDLEtBQUssQ0FBQztRQUFRO1FBQzVDQyxRQUFRO0lBQ1Y7SUFDQTtRQUNFTixJQUFJO1FBQ0pDLE1BQU07UUFDTkMsV0FBVztRQUNYQyxhQUFhO1lBQUVDLEtBQUssQ0FBQztZQUFTQyxLQUFLLENBQUM7UUFBUTtRQUM1Q0MsUUFBUTtJQUNWO0NBQ0Q7QUFFRCwwRUFBMEU7QUFDMUUsU0FBU0Msa0JBQWtCQyxJQUFZLEVBQUVDLElBQVksRUFBRUMsSUFBWSxFQUFFQyxJQUFZO0lBQy9FLE1BQU1DLElBQUksTUFBTSwyQkFBMkI7SUFD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