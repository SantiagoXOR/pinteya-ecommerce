a18289cb3614f05ca6aa4909588393dd
// ===================================
// PINTEYA E-COMMERCE - API DE CATEGORÍAS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _supabase = require("../../../lib/supabase");
const _validations = require("../../../lib/validations");
async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        // Extraer parámetros de query
        const queryParams = {
            search: searchParams.get('search') || undefined
        };
        // Validar parámetros (simplificado para la estructura actual)
        const filters = {
            search: queryParams.search
        };
        const supabase = (0, _supabase.getSupabaseClient)();
        // Verificar que el cliente de Supabase esté disponible
        if (!supabase) {
            console.error('Cliente de Supabase no disponible en GET /api/categories');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio de base de datos no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Construir query base - simplificado para la estructura actual
        let query = supabase.from('categories').select(`
        *,
        products_count:products(count)
      `).order('name');
        // Aplicar filtros
        if (filters.search) {
            query = query.ilike('name', `%${filters.search}%`);
        }
        // Ejecutar query
        const { data: categories, error } = await query;
        if (error) {
            console.error('Error en GET /api/categories:', error);
            const errorResponse = {
                data: null,
                success: false,
                error: error.message || 'Error obteniendo categorías'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
        // Procesar datos para incluir conteo de productos
        const processedCategories = categories?.map((category)=>({
                ...category,
                products_count: category.products_count?.[0]?.count || 0
            })) || [];
        const response = {
            data: processedCategories,
            success: true,
            message: `${processedCategories.length} categorías encontradas`
        };
        return _server.NextResponse.json(response);
    } catch (error) {
        console.error('Error en GET /api/categories:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        // TODO: Verificar permisos de administrador
        // const { userId } = auth();
        // if (!userId || !isAdmin(userId)) {
        //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
        // }
        const body = await request.json();
        // Validar datos de la categoría
        const categoryData = (0, _validations.validateData)(_validations.CategorySchema, body);
        const supabase = (0, _supabase.getSupabaseClient)(true); // Usar cliente admin
        // Verificar que el cliente administrativo esté disponible
        if (!supabase) {
            console.error('Cliente administrativo de Supabase no disponible en POST /api/categories');
            const errorResponse = {
                data: null,
                success: false,
                error: 'Servicio administrativo no disponible'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 503
            });
        }
        // Crear slug si no se proporciona
        if (!categoryData.slug) {
            categoryData.slug = categoryData.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
        }
        // Insertar categoría
        const { data: category, error } = await supabase.from('categories').insert(categoryData).select().single();
        if (error) {
            (0, _supabase.handleSupabaseError)(error, 'POST /api/categories');
        }
        const response = {
            data: category,
            success: true,
            message: 'Categoría creada exitosamente'
        };
        return _server.NextResponse.json(response, {
            status: 201
        });
    } catch (error) {
        console.error('Error en POST /api/categories:', error);
        const errorResponse = {
            data: null,
            success: false,
            error: error.message || 'Error interno del servidor'
        };
        return _server.NextResponse.json(errorResponse, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXGNhdGVnb3JpZXNcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQSU5URVlBIEUtQ09NTUVSQ0UgLSBBUEkgREUgQ0FURUdPUsONQVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBnZXRTdXBhYmFzZUNsaWVudCwgaGFuZGxlU3VwYWJhc2VFcnJvciB9IGZyb20gJ0AvbGliL3N1cGFiYXNlJztcbmltcG9ydCB7IHZhbGlkYXRlRGF0YSwgQ2F0ZWdvcnlGaWx0ZXJzU2NoZW1hLCBDYXRlZ29yeVNjaGVtYSB9IGZyb20gJ0AvbGliL3ZhbGlkYXRpb25zJztcbmltcG9ydCB7IEFwaVJlc3BvbnNlIH0gZnJvbSAnQC90eXBlcy9hcGknO1xuaW1wb3J0IHsgQ2F0ZWdvcnkgfSBmcm9tICdAL3R5cGVzL2RhdGFiYXNlJztcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEdFVCAvYXBpL2NhdGVnb3JpZXMgLSBPYnRlbmVyIGNhdGVnb3LDrWFzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBcbiAgICAvLyBFeHRyYWVyIHBhcsOhbWV0cm9zIGRlIHF1ZXJ5XG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICBzZWFyY2g6IHNlYXJjaFBhcmFtcy5nZXQoJ3NlYXJjaCcpIHx8IHVuZGVmaW5lZCxcbiAgICB9O1xuXG4gICAgLy8gVmFsaWRhciBwYXLDoW1ldHJvcyAoc2ltcGxpZmljYWRvIHBhcmEgbGEgZXN0cnVjdHVyYSBhY3R1YWwpXG4gICAgY29uc3QgZmlsdGVycyA9IHtcbiAgICAgIHNlYXJjaDogcXVlcnlQYXJhbXMuc2VhcmNoLFxuICAgIH07XG4gICAgXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUNsaWVudCgpO1xuXG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBlbCBjbGllbnRlIGRlIFN1cGFiYXNlIGVzdMOpIGRpc3BvbmlibGVcbiAgICBpZiAoIXN1cGFiYXNlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDbGllbnRlIGRlIFN1cGFiYXNlIG5vIGRpc3BvbmlibGUgZW4gR0VUIC9hcGkvY2F0ZWdvcmllcycpO1xuICAgICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1NlcnZpY2lvIGRlIGJhc2UgZGUgZGF0b3Mgbm8gZGlzcG9uaWJsZScsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA1MDMgfSk7XG4gICAgfVxuXG4gICAgLy8gQ29uc3RydWlyIHF1ZXJ5IGJhc2UgLSBzaW1wbGlmaWNhZG8gcGFyYSBsYSBlc3RydWN0dXJhIGFjdHVhbFxuICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnY2F0ZWdvcmllcycpXG4gICAgICAuc2VsZWN0KGBcbiAgICAgICAgKixcbiAgICAgICAgcHJvZHVjdHNfY291bnQ6cHJvZHVjdHMoY291bnQpXG4gICAgICBgKVxuICAgICAgLm9yZGVyKCduYW1lJyk7XG5cbiAgICAvLyBBcGxpY2FyIGZpbHRyb3NcbiAgICBpZiAoZmlsdGVycy5zZWFyY2gpIHtcbiAgICAgIHF1ZXJ5ID0gcXVlcnkuaWxpa2UoJ25hbWUnLCBgJSR7ZmlsdGVycy5zZWFyY2h9JWApO1xuICAgIH1cblxuICAgIC8vIEVqZWN1dGFyIHF1ZXJ5XG4gICAgY29uc3QgeyBkYXRhOiBjYXRlZ29yaWVzLCBlcnJvciB9ID0gYXdhaXQgcXVlcnk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuIEdFVCAvYXBpL2NhdGVnb3JpZXM6JywgZXJyb3IpO1xuICAgICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRXJyb3Igb2J0ZW5pZW5kbyBjYXRlZ29yw61hcycsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzYXIgZGF0b3MgcGFyYSBpbmNsdWlyIGNvbnRlbyBkZSBwcm9kdWN0b3NcbiAgICBjb25zdCBwcm9jZXNzZWRDYXRlZ29yaWVzID0gY2F0ZWdvcmllcz8ubWFwKGNhdGVnb3J5ID0+ICh7XG4gICAgICAuLi5jYXRlZ29yeSxcbiAgICAgIHByb2R1Y3RzX2NvdW50OiBjYXRlZ29yeS5wcm9kdWN0c19jb3VudD8uWzBdPy5jb3VudCB8fCAwLFxuICAgIH0pKSB8fCBbXTtcblxuICAgIGNvbnN0IHJlc3BvbnNlOiBBcGlSZXNwb25zZTxDYXRlZ29yeVtdPiA9IHtcbiAgICAgIGRhdGE6IHByb2Nlc3NlZENhdGVnb3JpZXMsXG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogYCR7cHJvY2Vzc2VkQ2F0ZWdvcmllcy5sZW5ndGh9IGNhdGVnb3LDrWFzIGVuY29udHJhZGFzYCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlKTtcblxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZW4gR0VUIC9hcGkvY2F0ZWdvcmllczonLCBlcnJvcik7XG4gICAgXG4gICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRXJyb3IgaW50ZXJubyBkZWwgc2Vydmlkb3InLFxuICAgIH07XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZXJyb3JSZXNwb25zZSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gUE9TVCAvYXBpL2NhdGVnb3JpZXMgLSBDcmVhciBjYXRlZ29yw61hIChBZG1pbilcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIC8vIFRPRE86IFZlcmlmaWNhciBwZXJtaXNvcyBkZSBhZG1pbmlzdHJhZG9yXG4gICAgLy8gY29uc3QgeyB1c2VySWQgfSA9IGF1dGgoKTtcbiAgICAvLyBpZiAoIXVzZXJJZCB8fCAhaXNBZG1pbih1c2VySWQpKSB7XG4gICAgLy8gICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ05vIGF1dG9yaXphZG8nIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgLy8gfVxuXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIFxuICAgIC8vIFZhbGlkYXIgZGF0b3MgZGUgbGEgY2F0ZWdvcsOtYVxuICAgIGNvbnN0IGNhdGVnb3J5RGF0YSA9IHZhbGlkYXRlRGF0YShDYXRlZ29yeVNjaGVtYSwgYm9keSk7XG4gICAgXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZUNsaWVudCh0cnVlKTsgLy8gVXNhciBjbGllbnRlIGFkbWluXG5cbiAgICAvLyBWZXJpZmljYXIgcXVlIGVsIGNsaWVudGUgYWRtaW5pc3RyYXRpdm8gZXN0w6kgZGlzcG9uaWJsZVxuICAgIGlmICghc3VwYWJhc2UpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NsaWVudGUgYWRtaW5pc3RyYXRpdm8gZGUgU3VwYWJhc2Ugbm8gZGlzcG9uaWJsZSBlbiBQT1NUIC9hcGkvY2F0ZWdvcmllcycpO1xuICAgICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1NlcnZpY2lvIGFkbWluaXN0cmF0aXZvIG5vIGRpc3BvbmlibGUnLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogNTAzIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWFyIHNsdWcgc2kgbm8gc2UgcHJvcG9yY2lvbmFcbiAgICBpZiAoIWNhdGVnb3J5RGF0YS5zbHVnKSB7XG4gICAgICBjYXRlZ29yeURhdGEuc2x1ZyA9IGNhdGVnb3J5RGF0YS5uYW1lXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgIC5yZXBsYWNlKC9bXmEtejAtOV0rL2csICctJylcbiAgICAgICAgLnJlcGxhY2UoLyheLXwtJCkvZywgJycpO1xuICAgIH1cblxuICAgIC8vIEluc2VydGFyIGNhdGVnb3LDrWFcbiAgICBjb25zdCB7IGRhdGE6IGNhdGVnb3J5LCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdjYXRlZ29yaWVzJylcbiAgICAgIC5pbnNlcnQoY2F0ZWdvcnlEYXRhKVxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGhhbmRsZVN1cGFiYXNlRXJyb3IoZXJyb3IsICdQT1NUIC9hcGkvY2F0ZWdvcmllcycpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlOiBBcGlSZXNwb25zZTxDYXRlZ29yeT4gPSB7XG4gICAgICBkYXRhOiBjYXRlZ29yeSxcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnQ2F0ZWdvcsOtYSBjcmVhZGEgZXhpdG9zYW1lbnRlJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlLCB7IHN0YXR1czogMjAxIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBlbiBQT1NUIC9hcGkvY2F0ZWdvcmllczonLCBlcnJvcik7XG4gICAgXG4gICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRXJyb3IgaW50ZXJubyBkZWwgc2Vydmlkb3InLFxuICAgIH07XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZXJyb3JSZXNwb25zZSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuXG5cbiJdLCJuYW1lcyI6WyJHRVQiLCJQT1NUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsInF1ZXJ5UGFyYW1zIiwic2VhcmNoIiwiZ2V0IiwidW5kZWZpbmVkIiwiZmlsdGVycyIsInN1cGFiYXNlIiwiZ2V0U3VwYWJhc2VDbGllbnQiLCJjb25zb2xlIiwiZXJyb3IiLCJlcnJvclJlc3BvbnNlIiwiZGF0YSIsInN1Y2Nlc3MiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3RhdHVzIiwicXVlcnkiLCJmcm9tIiwic2VsZWN0Iiwib3JkZXIiLCJpbGlrZSIsImNhdGVnb3JpZXMiLCJtZXNzYWdlIiwicHJvY2Vzc2VkQ2F0ZWdvcmllcyIsIm1hcCIsImNhdGVnb3J5IiwicHJvZHVjdHNfY291bnQiLCJjb3VudCIsInJlc3BvbnNlIiwibGVuZ3RoIiwiYm9keSIsImNhdGVnb3J5RGF0YSIsInZhbGlkYXRlRGF0YSIsIkNhdGVnb3J5U2NoZW1hIiwic2x1ZyIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJpbnNlcnQiLCJzaW5nbGUiLCJoYW5kbGVTdXBhYmFzZUVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMseUNBQXlDO0FBQ3pDLHNDQUFzQzs7Ozs7Ozs7Ozs7O0lBV2hCQSxHQUFHO2VBQUhBOztJQW9GQUMsSUFBSTtlQUFKQTs7O3dCQTdGb0I7MEJBQ2E7NkJBQ2E7QUFPN0QsZUFBZUQsSUFBSUUsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUcsSUFBSUMsSUFBSUYsUUFBUUcsR0FBRztRQUU1Qyw4QkFBOEI7UUFDOUIsTUFBTUMsY0FBYztZQUNsQkMsUUFBUUosYUFBYUssR0FBRyxDQUFDLGFBQWFDO1FBQ3hDO1FBRUEsOERBQThEO1FBQzlELE1BQU1DLFVBQVU7WUFDZEgsUUFBUUQsWUFBWUMsTUFBTTtRQUM1QjtRQUVBLE1BQU1JLFdBQVdDLElBQUFBLDJCQUFpQjtRQUVsQyx1REFBdUQ7UUFDdkQsSUFBSSxDQUFDRCxVQUFVO1lBQ2JFLFFBQVFDLEtBQUssQ0FBQztZQUNkLE1BQU1DLGdCQUFtQztnQkFDdkNDLE1BQU07Z0JBQ05DLFNBQVM7Z0JBQ1RILE9BQU87WUFDVDtZQUNBLE9BQU9JLG9CQUFZLENBQUNDLElBQUksQ0FBQ0osZUFBZTtnQkFBRUssUUFBUTtZQUFJO1FBQ3hEO1FBRUEsZ0VBQWdFO1FBQ2hFLElBQUlDLFFBQVFWLFNBQ1RXLElBQUksQ0FBQyxjQUNMQyxNQUFNLENBQUMsQ0FBQzs7O01BR1QsQ0FBQyxFQUNBQyxLQUFLLENBQUM7UUFFVCxrQkFBa0I7UUFDbEIsSUFBSWQsUUFBUUgsTUFBTSxFQUFFO1lBQ2xCYyxRQUFRQSxNQUFNSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRWYsUUFBUUgsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNuRDtRQUVBLGlCQUFpQjtRQUNqQixNQUFNLEVBQUVTLE1BQU1VLFVBQVUsRUFBRVosS0FBSyxFQUFFLEdBQUcsTUFBTU87UUFFMUMsSUFBSVAsT0FBTztZQUNURCxRQUFRQyxLQUFLLENBQUMsaUNBQWlDQTtZQUMvQyxNQUFNQyxnQkFBbUM7Z0JBQ3ZDQyxNQUFNO2dCQUNOQyxTQUFTO2dCQUNUSCxPQUFPQSxNQUFNYSxPQUFPLElBQUk7WUFDMUI7WUFDQSxPQUFPVCxvQkFBWSxDQUFDQyxJQUFJLENBQUNKLGVBQWU7Z0JBQUVLLFFBQVE7WUFBSTtRQUN4RDtRQUVBLGtEQUFrRDtRQUNsRCxNQUFNUSxzQkFBc0JGLFlBQVlHLElBQUlDLENBQUFBLFdBQWEsQ0FBQTtnQkFDdkQsR0FBR0EsUUFBUTtnQkFDWEMsZ0JBQWdCRCxTQUFTQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLEVBQUVDLFNBQVM7WUFDekQsQ0FBQSxNQUFPLEVBQUU7UUFFVCxNQUFNQyxXQUFvQztZQUN4Q2pCLE1BQU1ZO1lBQ05YLFNBQVM7WUFDVFUsU0FBUyxHQUFHQyxvQkFBb0JNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQztRQUNqRTtRQUVBLE9BQU9oQixvQkFBWSxDQUFDQyxJQUFJLENBQUNjO0lBRTNCLEVBQUUsT0FBT25CLE9BQVk7UUFDbkJELFFBQVFDLEtBQUssQ0FBQyxpQ0FBaUNBO1FBRS9DLE1BQU1DLGdCQUFtQztZQUN2Q0MsTUFBTTtZQUNOQyxTQUFTO1lBQ1RILE9BQU9BLE1BQU1hLE9BQU8sSUFBSTtRQUMxQjtRQUVBLE9BQU9ULG9CQUFZLENBQUNDLElBQUksQ0FBQ0osZUFBZTtZQUFFSyxRQUFRO1FBQUk7SUFDeEQ7QUFDRjtBQUtPLGVBQWVuQixLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsNENBQTRDO1FBQzVDLDZCQUE2QjtRQUM3QixxQ0FBcUM7UUFDckMsMkVBQTJFO1FBQzNFLElBQUk7UUFFSixNQUFNaUMsT0FBTyxNQUFNakMsUUFBUWlCLElBQUk7UUFFL0IsZ0NBQWdDO1FBQ2hDLE1BQU1pQixlQUFlQyxJQUFBQSx5QkFBWSxFQUFDQywyQkFBYyxFQUFFSDtRQUVsRCxNQUFNeEIsV0FBV0MsSUFBQUEsMkJBQWlCLEVBQUMsT0FBTyxxQkFBcUI7UUFFL0QsMERBQTBEO1FBQzFELElBQUksQ0FBQ0QsVUFBVTtZQUNiRSxRQUFRQyxLQUFLLENBQUM7WUFDZCxNQUFNQyxnQkFBbUM7Z0JBQ3ZDQyxNQUFNO2dCQUNOQyxTQUFTO2dCQUNUSCxPQUFPO1lBQ1Q7WUFDQSxPQUFPSSxvQkFBWSxDQUFDQyxJQUFJLENBQUNKLGVBQWU7Z0JBQUVLLFFBQVE7WUFBSTtRQUN4RDtRQUVBLGtDQUFrQztRQUNsQyxJQUFJLENBQUNnQixhQUFhRyxJQUFJLEVBQUU7WUFDdEJILGFBQWFHLElBQUksR0FBR0gsYUFBYUksSUFBSSxDQUNsQ0MsV0FBVyxHQUNYQyxPQUFPLENBQUMsZUFBZSxLQUN2QkEsT0FBTyxDQUFDLFlBQVk7UUFDekI7UUFFQSxxQkFBcUI7UUFDckIsTUFBTSxFQUFFMUIsTUFBTWMsUUFBUSxFQUFFaEIsS0FBSyxFQUFFLEdBQUcsTUFBTUgsU0FDckNXLElBQUksQ0FBQyxjQUNMcUIsTUFBTSxDQUFDUCxjQUNQYixNQUFNLEdBQ05xQixNQUFNO1FBRVQsSUFBSTlCLE9BQU87WUFDVCtCLElBQUFBLDZCQUFtQixFQUFDL0IsT0FBTztRQUM3QjtRQUVBLE1BQU1tQixXQUFrQztZQUN0Q2pCLE1BQU1jO1lBQ05iLFNBQVM7WUFDVFUsU0FBUztRQUNYO1FBRUEsT0FBT1Qsb0JBQVksQ0FBQ0MsSUFBSSxDQUFDYyxVQUFVO1lBQUViLFFBQVE7UUFBSTtJQUVuRCxFQUFFLE9BQU9OLE9BQVk7UUFDbkJELFFBQVFDLEtBQUssQ0FBQyxrQ0FBa0NBO1FBRWhELE1BQU1DLGdCQUFtQztZQUN2Q0MsTUFBTTtZQUNOQyxTQUFTO1lBQ1RILE9BQU9BLE1BQU1hLE9BQU8sSUFBSTtRQUMxQjtRQUVBLE9BQU9ULG9CQUFZLENBQUNDLElBQUksQ0FBQ0osZUFBZTtZQUFFSyxRQUFRO1FBQUk7SUFDeEQ7QUFDRiJ9