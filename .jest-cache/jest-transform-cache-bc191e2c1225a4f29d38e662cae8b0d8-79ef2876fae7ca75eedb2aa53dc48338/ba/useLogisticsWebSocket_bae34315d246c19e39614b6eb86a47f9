1e2a425afdfafb9591c2c226861c682a
// =====================================================
// HOOK: LOGISTICS WEBSOCKET ENTERPRISE
// Descripción: Hook React para WebSocket tiempo real
// Basado en: React Hooks + WebSocket + Context
// =====================================================
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useLogisticsAlerts () {
        return useLogisticsAlerts;
    },
    get useLogisticsWebSocket () {
        return useLogisticsWebSocket;
    },
    get useShipmentTracking () {
        return useShipmentTracking;
    }
});
const _react = require("react");
const _reactquery = require("@tanstack/react-query");
const _sonner = require("sonner");
const _logisticswebsocket = require("../../lib/websockets/logistics-websocket");
function useLogisticsWebSocket(options = {}) {
    const { enabled = true, autoConnect = true, showNotifications = true, simulateInDevelopment = true } = options;
    // Estados
    const [isConnected, setIsConnected] = (0, _react.useState)(false);
    const [connectionState, setConnectionState] = (0, _react.useState)('disconnected');
    const [lastTrackingUpdate, setLastTrackingUpdate] = (0, _react.useState)(null);
    const [lastAlert, setLastAlert] = (0, _react.useState)(null);
    const [lastGeofenceEvent, setLastGeofenceEvent] = (0, _react.useState)(null);
    const [alerts, setAlerts] = (0, _react.useState)([]);
    // Referencias
    const wsRef = (0, _react.useRef)((0, _logisticswebsocket.getLogisticsWebSocket)());
    const simulatorRef = (0, _react.useRef)(null);
    const queryClient = (0, _reactquery.useQueryClient)();
    // =====================================================
    // CONFIGURACIÓN DE EVENTOS
    // =====================================================
    (0, _react.useEffect)(()=>{
        if (!enabled) return;
        const ws = wsRef.current;
        // Eventos de conexión
        const handleConnected = ()=>{
            setIsConnected(true);
            setConnectionState('connected');
            if (showNotifications) {
                _sonner.toast.success('Conectado al sistema de tracking en tiempo real');
            }
        };
        const handleDisconnected = ()=>{
            setIsConnected(false);
            setConnectionState('disconnected');
            if (showNotifications) {
                _sonner.toast.warning('Desconectado del sistema de tracking');
            }
        };
        const handleError = (error)=>{
            setConnectionState('error');
            console.error('WebSocket error:', error);
            if (showNotifications) {
                _sonner.toast.error('Error en la conexión de tiempo real');
            }
        };
        // Eventos de datos
        const handleTrackingUpdate = (update)=>{
            setLastTrackingUpdate(update);
            // Invalidar cache de tracking para el shipment
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'tracking',
                    update.shipment_id
                ]
            });
            // Invalidar dashboard si es necesario
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            if (showNotifications) {
                _sonner.toast.info(`Actualización de envío #${update.shipment_id}`, {
                    description: `Estado: ${update.status}`
                });
            }
        };
        const handleAlert = (alert)=>{
            setLastAlert(alert);
            setAlerts((prev)=>[
                    alert,
                    ...prev.slice(0, 49)
                ]); // Mantener últimas 50
            if (showNotifications) {
                const toastFn = alert.severity === 'critical' ? _sonner.toast.error : alert.severity === 'high' ? _sonner.toast.warning : _sonner.toast.info;
                toastFn(`Alerta: ${alert.type}`, {
                    description: alert.message
                });
            }
        };
        const handleGeofenceEvent = (event)=>{
            setLastGeofenceEvent(event);
            // Invalidar cache relacionado
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'tracking',
                    event.shipment_id
                ]
            });
            if (showNotifications) {
                _sonner.toast.info(`Evento de zona: ${event.zone_name}`, {
                    description: `Envío #${event.shipment_id} ${event.event_type === 'enter' ? 'entró' : 'salió'}`
                });
            }
        };
        // Registrar eventos
        ws.on('connected', handleConnected);
        ws.on('disconnected', handleDisconnected);
        ws.on('error', handleError);
        ws.on('tracking_update', handleTrackingUpdate);
        ws.on('alert', handleAlert);
        ws.on('geofence_event', handleGeofenceEvent);
        // Cleanup
        return ()=>{
            ws.off('connected', handleConnected);
            ws.off('disconnected', handleDisconnected);
            ws.off('error', handleError);
            ws.off('tracking_update', handleTrackingUpdate);
            ws.off('alert', handleAlert);
            ws.off('geofence_event', handleGeofenceEvent);
        };
    }, [
        enabled,
        showNotifications,
        queryClient
    ]);
    // =====================================================
    // SIMULADOR PARA DESARROLLO
    // =====================================================
    (0, _react.useEffect)(()=>{
        if (!enabled || !simulateInDevelopment || process.env.NODE_ENV !== 'development') {
            return;
        }
        // Crear simulador si no existe
        if (!simulatorRef.current) {
            simulatorRef.current = new _logisticswebsocket.LogisticsWebSocketSimulator();
            // Conectar eventos del simulador a los handlers
            simulatorRef.current.on('tracking_update', (update)=>{
                setLastTrackingUpdate(update);
                queryClient.invalidateQueries({
                    queryKey: [
                        'admin',
                        'logistics',
                        'tracking',
                        update.shipment_id
                    ]
                });
            });
            simulatorRef.current.on('alert', (alert)=>{
                setLastAlert(alert);
                setAlerts((prev)=>[
                        alert,
                        ...prev.slice(0, 49)
                    ]);
                if (showNotifications) {
                    _sonner.toast.info(`🎭 Simulación - ${alert.type}`, {
                        description: alert.message
                    });
                }
            });
            simulatorRef.current.on('geofence_event', (event)=>{
                setLastGeofenceEvent(event);
                queryClient.invalidateQueries({
                    queryKey: [
                        'admin',
                        'logistics',
                        'tracking',
                        event.shipment_id
                    ]
                });
            });
        }
        // Iniciar simulador
        simulatorRef.current.start();
        setIsConnected(true);
        setConnectionState('connected');
        if (showNotifications) {
            _sonner.toast.success('🎭 Simulador de WebSocket iniciado');
        }
        return ()=>{
            if (simulatorRef.current) {
                simulatorRef.current.stop();
            }
        };
    }, [
        enabled,
        simulateInDevelopment,
        showNotifications,
        queryClient
    ]);
    // =====================================================
    // AUTO-CONEXIÓN
    // =====================================================
    (0, _react.useEffect)(()=>{
        if (enabled && autoConnect && process.env.NODE_ENV !== 'development') {
            connect();
        }
    }, [
        enabled,
        autoConnect
    ]);
    // =====================================================
    // FUNCIONES PÚBLICAS
    // =====================================================
    const connect = (0, _react.useCallback)(async ()=>{
        if (process.env.NODE_ENV === 'development' && simulateInDevelopment) {
            // En desarrollo usar simulador
            return;
        }
        try {
            setConnectionState('connecting');
            await wsRef.current.connect();
        } catch (error) {
            setConnectionState('error');
            throw error;
        }
    }, [
        simulateInDevelopment
    ]);
    const disconnect = (0, _react.useCallback)(()=>{
        if (process.env.NODE_ENV === 'development' && simulatorRef.current) {
            simulatorRef.current.stop();
            setIsConnected(false);
            setConnectionState('disconnected');
            return;
        }
        wsRef.current.disconnect();
        setIsConnected(false);
        setConnectionState('disconnected');
    }, []);
    const subscribeToShipment = (0, _react.useCallback)((shipmentId)=>{
        if (process.env.NODE_ENV === 'development') {
            console.log(`🎭 Simulando suscripción a envío ${shipmentId}`);
            return;
        }
        wsRef.current.subscribeToShipment(shipmentId);
    }, []);
    const unsubscribeFromShipment = (0, _react.useCallback)((shipmentId)=>{
        if (process.env.NODE_ENV === 'development') {
            console.log(`🎭 Simulando desuscripción de envío ${shipmentId}`);
            return;
        }
        wsRef.current.unsubscribeFromShipment(shipmentId);
    }, []);
    const subscribeToGeofence = (0, _react.useCallback)((zoneId)=>{
        if (process.env.NODE_ENV === 'development') {
            console.log(`🎭 Simulando suscripción a zona ${zoneId}`);
            return;
        }
        wsRef.current.subscribeToGeofence(zoneId);
    }, []);
    const subscribeToAlerts = (0, _react.useCallback)(()=>{
        if (process.env.NODE_ENV === 'development') {
            console.log('🎭 Simulando suscripción a alertas');
            return;
        }
        wsRef.current.subscribeToAlerts();
    }, []);
    const clearAlerts = (0, _react.useCallback)(()=>{
        setAlerts([]);
    }, []);
    return {
        isConnected,
        connectionState,
        connect,
        disconnect,
        subscribeToShipment,
        unsubscribeFromShipment,
        subscribeToGeofence,
        subscribeToAlerts,
        lastTrackingUpdate,
        lastAlert,
        lastGeofenceEvent,
        alerts,
        clearAlerts
    };
}
function useShipmentTracking(shipmentId) {
    const { isConnected, subscribeToShipment, unsubscribeFromShipment, lastTrackingUpdate } = useLogisticsWebSocket({
        simulateInDevelopment: false // Deshabilitado para evitar notificaciones persistentes
    });
    const [trackingHistory, setTrackingHistory] = (0, _react.useState)([]);
    // Suscribirse al envío específico
    (0, _react.useEffect)(()=>{
        if (isConnected && shipmentId) {
            subscribeToShipment(shipmentId);
            return ()=>{
                unsubscribeFromShipment(shipmentId);
            };
        }
    }, [
        isConnected,
        shipmentId,
        subscribeToShipment,
        unsubscribeFromShipment
    ]);
    // Actualizar historial cuando llegan nuevas actualizaciones
    (0, _react.useEffect)(()=>{
        if (lastTrackingUpdate && lastTrackingUpdate.shipment_id === shipmentId) {
            setTrackingHistory((prev)=>[
                    lastTrackingUpdate,
                    ...prev.slice(0, 99)
                ]); // Últimas 100
        }
    }, [
        lastTrackingUpdate,
        shipmentId
    ]);
    return {
        isConnected,
        shipmentId,
        currentLocation: lastTrackingUpdate?.shipment_id === shipmentId ? lastTrackingUpdate : null,
        trackingHistory: trackingHistory.filter((update)=>update.shipment_id === shipmentId)
    };
}
function useLogisticsAlerts() {
    const { isConnected, subscribeToAlerts, alerts, clearAlerts, lastAlert } = useLogisticsWebSocket({
        simulateInDevelopment: false // Deshabilitado para evitar notificaciones persistentes
    });
    // Auto-suscribirse a alertas
    (0, _react.useEffect)(()=>{
        if (isConnected) {
            subscribeToAlerts();
        }
    }, [
        isConnected,
        subscribeToAlerts
    ]);
    // Filtrar alertas por severidad
    const criticalAlerts = alerts.filter((alert)=>alert.severity === 'critical');
    const highAlerts = alerts.filter((alert)=>alert.severity === 'high');
    const unreadAlerts = alerts.filter((alert)=>!alert.auto_resolve);
    return {
        isConnected,
        alerts,
        criticalAlerts,
        highAlerts,
        unreadAlerts,
        lastAlert,
        clearAlerts,
        totalAlerts: alerts.length,
        criticalCount: criticalAlerts.length,
        highCount: highAlerts.length,
        unreadCount: unreadAlerts.length
    };
}

//# sourceMappingURL=data:application/json;base64,