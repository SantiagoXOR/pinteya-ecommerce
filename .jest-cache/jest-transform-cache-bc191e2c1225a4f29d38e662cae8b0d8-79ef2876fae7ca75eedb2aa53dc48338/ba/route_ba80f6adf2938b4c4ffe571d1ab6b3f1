882fdb12b325067d53aa2f337d7dd808
// ===================================
// PINTEYA E-COMMERCE - INTEGRATION QUALITY MEASUREMENT API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "GET", {
    enumerable: true,
    get: function() {
        return GET;
    }
});
const _server = require("next/server");
const _auth = require("../../../../auth");
const _supabase = require("../../../../lib/supabase");
const _logger = require("../../../../lib/logger");
const _ratelimiter = require("../../../../lib/rate-limiter");
const _metrics = require("../../../../lib/metrics");
async function GET(request) {
    const startTime = Date.now();
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';
    try {
        // Verificar autenticación
        const session = await (0, _auth.auth)();
        if (!session?.user) {
            return _server.NextResponse.json({
                success: false,
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        // Rate limiting
        const rateLimitResult = await (0, _ratelimiter.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
        if (!rateLimitResult.success) {
            _logger.logger.warn(_logger.LogCategory.API, 'Rate limit exceeded for integration quality', {
                clientIP,
                userId
            });
            const response = _server.NextResponse.json({
                success: false,
                error: 'Demasiadas solicitudes'
            }, {
                status: 429
            });
            (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
            return response;
        }
        // Obtener parámetros de consulta
        const url = new URL(request.url);
        const paymentId = url.searchParams.get('payment_id');
        const includeRecommendations = url.searchParams.get('include_recommendations') === 'true';
        _logger.logger.info(_logger.LogCategory.API, 'Integration quality measurement started', {
            userId,
            paymentId,
            includeRecommendations,
            clientIP
        });
        // Realizar medición de calidad
        const qualityMetrics = await measureIntegrationQuality(paymentId, includeRecommendations);
        // Registrar métricas
        await _metrics.metricsCollector.recordRequest('/api/payments/integration-quality', 'GET', 200, Date.now() - startTime, {
            userId,
            paymentId: paymentId || 'none'
        });
        _logger.logger.info(_logger.LogCategory.API, 'Integration quality measurement completed', {
            userId,
            score: qualityMetrics.score,
            category: qualityMetrics.category,
            processingTime: Date.now() - startTime
        });
        const response = _server.NextResponse.json({
            success: true,
            data: qualityMetrics,
            timestamp: Date.now(),
            processing_time: Date.now() - startTime
        });
        (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
        return response;
    } catch (error) {
        const processingTime = Date.now() - startTime;
        _logger.logger.performance(_logger.LogLevel.ERROR, 'Integration quality measurement failed', {
            operation: 'integration-quality-api',
            duration: processingTime,
            statusCode: 500
        }, {
            clientIP,
            userAgent
        });
        await _metrics.metricsCollector.recordRequest('/api/payments/integration-quality', 'GET', 500, processingTime, {
            error: error.message
        });
        return _server.NextResponse.json({
            success: false,
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
/**
 * Mide la calidad de la integración según estándares de MercadoPago
 */ async function measureIntegrationQuality(paymentId, includeRecommendations = true) {
    const supabase = (0, _supabase.getSupabaseClient)();
    // 1. Verificar seguridad
    const securityCheck = await checkSecurity(supabase, paymentId);
    // 2. Verificar performance
    const performanceCheck = await checkPerformance();
    // 3. Verificar experiencia de usuario
    const userExperienceCheck = await checkUserExperience(supabase);
    // 4. Verificar completitud de integración
    const integrationCompletenessCheck = await checkIntegrationCompleteness(supabase, paymentId);
    // Calcular score general
    const totalScore = (securityCheck.score + performanceCheck.score + userExperienceCheck.score + integrationCompletenessCheck.score) / 4;
    // Determinar categoría
    let category;
    if (totalScore >= 90) category = 'excellent';
    else if (totalScore >= 75) category = 'good';
    else if (totalScore >= 60) category = 'needs_improvement';
    else category = 'poor';
    // Generar recomendaciones
    const recommendations = includeRecommendations ? generateRecommendations({
        security: securityCheck,
        performance: performanceCheck,
        user_experience: userExperienceCheck,
        integration_completeness: integrationCompletenessCheck
    }) : [];
    return {
        score: Math.round(totalScore),
        category,
        recommendations,
        details: {
            security: securityCheck,
            performance: performanceCheck,
            user_experience: userExperienceCheck,
            integration_completeness: integrationCompletenessCheck
        }
    };
}
/**
 * Verifica aspectos de seguridad
 */ async function checkSecurity(supabase, paymentId) {
    const checks = [];
    let totalScore = 0;
    const maxScore = 100;
    // Check 1: Webhook signature validation
    checks.push({
        name: 'webhook_signature_validation',
        status: 'pass',
        description: 'Validación de firma de webhook implementada',
        recommendation: undefined
    });
    totalScore += 25;
    // Check 2: HTTPS usage
    const isHttps = process.env.NODE_ENV === 'production';
    checks.push({
        name: 'https_usage',
        status: isHttps ? 'pass' : 'warning',
        description: isHttps ? 'HTTPS configurado correctamente' : 'HTTPS recomendado para producción',
        recommendation: isHttps ? undefined : 'Configurar HTTPS para mayor seguridad'
    });
    totalScore += isHttps ? 25 : 15;
    // Check 3: Credentials security
    const hasSecureCredentials = process.env.MERCADOPAGO_ACCESS_TOKEN && process.env.MERCADOPAGO_ACCESS_TOKEN.startsWith('APP_USR');
    checks.push({
        name: 'credentials_security',
        status: hasSecureCredentials ? 'pass' : 'fail',
        description: hasSecureCredentials ? 'Credenciales configuradas correctamente' : 'Credenciales no configuradas',
        recommendation: hasSecureCredentials ? undefined : 'Configurar credenciales de producción'
    });
    totalScore += hasSecureCredentials ? 25 : 0;
    // Check 4: Rate limiting
    checks.push({
        name: 'rate_limiting',
        status: 'pass',
        description: 'Rate limiting implementado con Redis',
        recommendation: undefined
    });
    totalScore += 25;
    const score = Math.min(totalScore, maxScore);
    const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';
    return {
        score,
        status,
        checks
    };
}
/**
 * Verifica aspectos de performance
 */ async function checkPerformance() {
    const checks = [];
    let totalScore = 0;
    const maxScore = 100;
    // Check 1: Retry logic implementation
    checks.push({
        name: 'retry_logic',
        status: 'pass',
        description: 'Retry logic con backoff exponencial implementado',
        recommendation: undefined
    });
    totalScore += 30;
    // Check 2: Caching implementation
    checks.push({
        name: 'caching',
        status: 'pass',
        description: 'Sistema de cache con Redis implementado',
        recommendation: undefined
    });
    totalScore += 30;
    // Check 3: Monitoring and metrics
    checks.push({
        name: 'monitoring',
        status: 'pass',
        description: 'Monitoreo y métricas implementadas',
        recommendation: undefined
    });
    totalScore += 40;
    const score = Math.min(totalScore, maxScore);
    const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';
    return {
        score,
        status,
        checks
    };
}
/**
 * Verifica experiencia de usuario
 */ async function checkUserExperience(supabase) {
    const checks = [];
    let totalScore = 0;
    const maxScore = 100;
    // Check 1: Wallet Brick implementation
    checks.push({
        name: 'wallet_brick',
        status: 'pass',
        description: 'Wallet Brick implementado para mejor UX',
        recommendation: undefined
    });
    totalScore += 40;
    // Check 2: Auto return configuration
    const hasAutoReturn = process.env.NODE_ENV === 'production';
    checks.push({
        name: 'auto_return',
        status: hasAutoReturn ? 'pass' : 'warning',
        description: hasAutoReturn ? 'Auto return configurado' : 'Auto return deshabilitado en desarrollo',
        recommendation: hasAutoReturn ? undefined : 'Habilitar auto return en producción'
    });
    totalScore += hasAutoReturn ? 30 : 20;
    // Check 3: Payment methods configuration
    checks.push({
        name: 'payment_methods',
        status: 'pass',
        description: 'Métodos de pago configurados correctamente',
        recommendation: undefined
    });
    totalScore += 30;
    const score = Math.min(totalScore, maxScore);
    const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';
    return {
        score,
        status,
        checks
    };
}
/**
 * Verifica completitud de la integración
 */ async function checkIntegrationCompleteness(supabase, paymentId) {
    const checks = [];
    let totalScore = 0;
    const maxScore = 100;
    // Check 1: Webhook implementation
    checks.push({
        name: 'webhook_implementation',
        status: 'pass',
        description: 'Webhook implementado y funcionando',
        recommendation: undefined
    });
    totalScore += 25;
    // Check 2: Payment status tracking
    checks.push({
        name: 'payment_tracking',
        status: 'pass',
        description: 'Seguimiento de estado de pagos implementado',
        recommendation: undefined
    });
    totalScore += 25;
    // Check 3: Error handling
    checks.push({
        name: 'error_handling',
        status: 'pass',
        description: 'Manejo de errores robusto implementado',
        recommendation: undefined
    });
    totalScore += 25;
    // Check 4: Logging and monitoring
    checks.push({
        name: 'logging_monitoring',
        status: 'pass',
        description: 'Sistema de logging estructurado implementado',
        recommendation: undefined
    });
    totalScore += 25;
    const score = Math.min(totalScore, maxScore);
    const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';
    return {
        score,
        status,
        checks
    };
}
/**
 * Genera recomendaciones basadas en los checks
 */ function generateRecommendations(details) {
    const recommendations = [];
    // Recomendaciones de seguridad
    details.security.checks.forEach((check)=>{
        if (check.recommendation) {
            recommendations.push(`Seguridad: ${check.recommendation}`);
        }
    });
    // Recomendaciones de performance
    details.performance.checks.forEach((check)=>{
        if (check.recommendation) {
            recommendations.push(`Performance: ${check.recommendation}`);
        }
    });
    // Recomendaciones de UX
    details.user_experience.checks.forEach((check)=>{
        if (check.recommendation) {
            recommendations.push(`UX: ${check.recommendation}`);
        }
    });
    // Recomendaciones de completitud
    details.integration_completeness.checks.forEach((check)=>{
        if (check.recommendation) {
            recommendations.push(`Integración: ${check.recommendation}`);
        }
    });
    // Recomendaciones generales basadas en score
    const avgScore = (details.security.score + details.performance.score + details.user_experience.score + details.integration_completeness.score) / 4;
    if (avgScore < 70) {
        recommendations.push('Considerar implementar todas las mejores prácticas de MercadoPago');
    }
    if (avgScore >= 90) {
        recommendations.push('¡Excelente! Tu integración cumple con los más altos estándares');
    }
    return recommendations;
}

//# sourceMappingURL=data:application/json;base64,