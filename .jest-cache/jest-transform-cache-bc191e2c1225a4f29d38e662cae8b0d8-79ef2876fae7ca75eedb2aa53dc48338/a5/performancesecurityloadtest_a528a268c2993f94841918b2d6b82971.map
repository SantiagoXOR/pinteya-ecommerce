{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security\\performance-security-load.test.ts"],"sourcesContent":["/**\n * Tests de Performance y Carga para Sistemas de Seguridad Enterprise\n * Valida el rendimiento bajo carga extrema y condiciones adversas\n */\n\n// Mock de dependencias para performance testing\njest.mock('ioredis', () => {\n  const mockRedis = {\n    get: jest.fn().mockImplementation(() => Promise.resolve(null)),\n    set: jest.fn().mockImplementation(() => Promise.resolve('OK')),\n    incr: jest.fn().mockImplementation(() => Promise.resolve(1)),\n    expire: jest.fn().mockImplementation(() => Promise.resolve(1)),\n    del: jest.fn().mockImplementation(() => Promise.resolve(1)),\n    pipeline: jest.fn(() => ({\n      get: jest.fn(),\n      incr: jest.fn(),\n      expire: jest.fn(),\n      exec: jest.fn().mockResolvedValue([[null, '1'], [null, 'OK']])\n    })),\n    disconnect: jest.fn()\n  };\n  return jest.fn(() => mockRedis);\n});\n\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn().mockResolvedValue({ data: null, error: null })\n        })),\n        insert: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn().mockResolvedValue({ data: { id: 'perf_test_id' }, error: null })\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn().mockResolvedValue(true)\n}));\n\njest.mock('isomorphic-dompurify', () => ({\n  __esModule: true,\n  default: {\n    sanitize: jest.fn((input) => input.replace(/<script.*?<\\/script>/gi, ''))\n  }\n}));\n\njest.mock('validator', () => ({\n  __esModule: true,\n  default: {\n    escape: jest.fn((input) => input)\n  }\n}));\n\nimport { z } from 'zod';\nimport {\n  checkEnterpriseRateLimit,\n  ENTERPRISE_RATE_LIMIT_CONFIGS,\n  metricsCollector\n} from '@/lib/rate-limiting/enterprise-rate-limiter';\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\nimport {\n  criticalValidator,\n  highValidator,\n  standardValidator,\n  basicValidator\n} from '@/lib/validation/enterprise-validation-system';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\ndescribe('Tests de Performance y Carga - Sistemas de Seguridad Enterprise', () => {\n  let mockContext: EnterpriseAuthContext;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockContext = {\n      userId: 'perf_test_user',\n      sessionId: 'perf_test_session',\n      email: 'perf@pinteya.com',\n      role: 'admin',\n      permissions: ['admin_access'],\n      sessionValid: true,\n      securityLevel: 'critical',\n      ipAddress: '192.168.1.1',\n      userAgent: 'PerformanceTestBot/1.0',\n      supabase: {} as any,\n      validations: {\n        jwtValid: true,\n        csrfValid: true,\n        rateLimitPassed: true,\n        originValid: true\n      }\n    };\n\n    // Reset metrics\n    (metricsCollector as any).metrics = {\n      totalRequests: 0,\n      allowedRequests: 0,\n      blockedRequests: 0,\n      redisHits: 0,\n      memoryFallbacks: 0,\n      errors: 0,\n      averageResponseTime: 0,\n      topBlockedIPs: [],\n      topEndpoints: []\n    };\n  });\n\n  describe('Performance Rate Limiting bajo Carga Extrema', () => {\n    it('debe mantener latencia baja con 10,000 requests concurrentes', async () => {\n      const concurrentRequests = 10000;\n      const maxLatencyMs = 100; // 100ms máximo por request\n      \n      const startTime = Date.now();\n      \n      // Generar requests concurrentes\n      const requestPromises = Array.from({ length: concurrentRequests }, (_, i) => {\n        const mockRequest = {\n          headers: new Map([\n            ['x-forwarded-for', `192.168.${Math.floor(i/255)}.${i%255}`],\n            ['user-agent', 'LoadTestBot/1.0']\n          ]),\n          nextUrl: { pathname: '/api/public/products' },\n          method: 'GET'\n        } as any;\n\n        return checkEnterpriseRateLimit(\n          mockRequest,\n          ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD,\n          `load_test_${i}`\n        );\n      });\n\n      // Ejecutar todos los requests concurrentemente\n      const results = await Promise.all(requestPromises);\n      \n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n      const avgLatency = totalTime / concurrentRequests;\n\n      // Verificar que todos los requests fueron procesados\n      expect(results.length).toBe(concurrentRequests);\n      \n      // Verificar latencia promedio\n      expect(avgLatency).toBeLessThan(maxLatencyMs);\n      \n      // Verificar que el sistema aplicó rate limiting apropiadamente\n      const allowedRequests = results.filter(r => r.allowed).length;\n      const blockedRequests = results.filter(r => !r.allowed).length;\n      \n      expect(allowedRequests + blockedRequests).toBe(concurrentRequests);\n      \n      // Verificar métricas de performance\n      const metrics = metricsCollector.getMetrics();\n      expect(metrics.totalRequests).toBeGreaterThan(0);\n      expect(metrics.averageResponseTime).toBeLessThan(maxLatencyMs);\n    });\n\n    it('debe escalar linealmente con aumento de carga', async () => {\n      const loadLevels = [100, 500, 1000, 2000, 5000];\n      const performanceResults = [];\n\n      for (const loadLevel of loadLevels) {\n        const startTime = Date.now();\n        \n        const requestPromises = Array.from({ length: loadLevel }, (_, i) => {\n          const mockRequest = {\n            headers: new Map([\n              ['x-forwarded-for', `10.0.${Math.floor(i/255)}.${i%255}`],\n              ['user-agent', 'ScalabilityTestBot/1.0']\n            ]),\n            nextUrl: { pathname: '/api/admin/test' },\n            method: 'POST'\n          } as any;\n\n          return checkEnterpriseRateLimit(\n            mockRequest,\n            ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL,\n            `scale_test_${loadLevel}_${i}`\n          );\n        });\n\n        const results = await Promise.all(requestPromises);\n        const endTime = Date.now();\n        \n        const totalTime = endTime - startTime;\n        const avgLatency = totalTime / loadLevel;\n        const throughput = loadLevel / (totalTime / 1000); // requests per second\n\n        performanceResults.push({\n          loadLevel,\n          totalTime,\n          avgLatency,\n          throughput,\n          successRate: results.filter(r => r.allowed || !r.allowed).length / loadLevel\n        });\n      }\n\n      // Verificar escalabilidad\n      for (let i = 1; i < performanceResults.length; i++) {\n        const current = performanceResults[i];\n        const previous = performanceResults[i - 1];\n        \n        // La latencia no debería aumentar más de 3x con el aumento de carga\n        const latencyIncrease = current.avgLatency / previous.avgLatency;\n        expect(latencyIncrease).toBeLessThan(3);\n        \n        // El throughput debería mantenerse razonablemente alto\n        expect(current.throughput).toBeGreaterThan(50); // > 50 RPS mínimo\n        \n        // La tasa de éxito debería mantenerse alta\n        expect(current.successRate).toBeGreaterThan(0.95); // > 95%\n      }\n    });\n\n    it('debe manejar picos de tráfico sin degradación', async () => {\n      const baselineLoad = 100;\n      const spikeLoad = 5000;\n      const spikeDuration = 2000; // 2 segundos\n      \n      // Fase 1: Carga baseline\n      const baselineStart = Date.now();\n      const baselinePromises = Array.from({ length: baselineLoad }, (_, i) => \n        checkEnterpriseRateLimit(\n          {\n            headers: new Map([['x-forwarded-for', `172.16.0.${i%255}`]]),\n            nextUrl: { pathname: '/api/test' },\n            method: 'GET'\n          } as any,\n          ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD,\n          `baseline_${i}`\n        )\n      );\n      \n      const baselineResults = await Promise.all(baselinePromises);\n      const baselineTime = Date.now() - baselineStart;\n      const baselineLatency = baselineTime / baselineLoad;\n\n      // Fase 2: Pico de tráfico\n      const spikeStart = Date.now();\n      const spikePromises = Array.from({ length: spikeLoad }, (_, i) => \n        checkEnterpriseRateLimit(\n          {\n            headers: new Map([['x-forwarded-for', `203.0.113.${i%255}`]]),\n            nextUrl: { pathname: '/api/test' },\n            method: 'GET'\n          } as any,\n          ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD,\n          `spike_${i}`\n        )\n      );\n      \n      const spikeResults = await Promise.all(spikePromises);\n      const spikeTime = Date.now() - spikeStart;\n      const spikeLatency = spikeTime / spikeLoad;\n\n      // Fase 3: Vuelta a baseline\n      const recoveryStart = Date.now();\n      const recoveryPromises = Array.from({ length: baselineLoad }, (_, i) => \n        checkEnterpriseRateLimit(\n          {\n            headers: new Map([['x-forwarded-for', `172.16.1.${i%255}`]]),\n            nextUrl: { pathname: '/api/test' },\n            method: 'GET'\n          } as any,\n          ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD,\n          `recovery_${i}`\n        )\n      );\n      \n      const recoveryResults = await Promise.all(recoveryPromises);\n      const recoveryTime = Date.now() - recoveryStart;\n      const recoveryLatency = recoveryTime / baselineLoad;\n\n      // Verificar que el sistema manejó el pico\n      expect(baselineResults.length).toBe(baselineLoad);\n      expect(spikeResults.length).toBe(spikeLoad);\n      expect(recoveryResults.length).toBe(baselineLoad);\n\n      // Verificar que la latencia se recuperó después del pico\n      const latencyIncrease = spikeLatency / baselineLatency;\n      const recoveryRatio = recoveryLatency / baselineLatency;\n      \n      expect(latencyIncrease).toBeLessThan(5); // Máximo 5x durante pico\n      expect(recoveryRatio).toBeLessThan(2); // Recuperación a menos de 2x baseline\n    });\n  });\n\n  describe('Performance Sistema de Auditoría bajo Carga', () => {\n    it('debe procesar 50,000 eventos de auditoría en menos de 30 segundos', async () => {\n      const eventCount = 50000;\n      const maxTimeSeconds = 30;\n      \n      const startTime = Date.now();\n      \n      // Generar eventos de auditoría masivos\n      const auditPromises = Array.from({ length: eventCount }, (_, i) => \n        enterpriseAuditSystem.logEnterpriseEvent({\n          user_id: `perf_user_${i % 1000}`, // 1000 usuarios únicos\n          event_type: ['AUTH_SUCCESS', 'DATA_ACCESS', 'SYSTEM_ACCESS'][i % 3] as any,\n          event_category: 'performance_test',\n          severity: ['low', 'medium', 'high'][i % 3] as any,\n          description: `Performance test event ${i}`,\n          metadata: { \n            test_batch: Math.floor(i / 1000),\n            event_index: i \n          },\n          ip_address: `192.168.${Math.floor(i/255)}.${i%255}`,\n          user_agent: 'PerformanceTestBot/1.0'\n        }, mockContext)\n      );\n\n      const results = await Promise.all(auditPromises);\n      const endTime = Date.now();\n      const totalTime = (endTime - startTime) / 1000; // segundos\n\n      // Verificar que todos los eventos fueron procesados\n      expect(results.length).toBe(eventCount);\n      expect(results.every(r => r && r.startsWith('corr_'))).toBe(true);\n\n      // Verificar tiempo de procesamiento\n      expect(totalTime).toBeLessThan(maxTimeSeconds);\n\n      // Verificar throughput\n      const eventsPerSecond = eventCount / totalTime;\n      expect(eventsPerSecond).toBeGreaterThan(1000); // > 1000 eventos/segundo\n    });\n\n    it('debe mantener performance durante detección de anomalías masiva', async () => {\n      const userCount = 1000;\n      const maxTimePerUser = 100; // 100ms máximo por usuario\n      \n      // Generar datos de usuarios para análisis\n      const userIds = Array.from({ length: userCount }, (_, i) => `anomaly_user_${i}`);\n      \n      const startTime = Date.now();\n      \n      // Ejecutar detección de anomalías para todos los usuarios\n      const anomalyPromises = userIds.map(userId => \n        enterpriseAuditSystem.detectAnomalies(userId)\n      );\n\n      const results = await Promise.all(anomalyPromises);\n      const endTime = Date.now();\n      \n      const totalTime = endTime - startTime;\n      const avgTimePerUser = totalTime / userCount;\n\n      // Verificar que se procesaron todos los usuarios\n      expect(results.length).toBe(userCount);\n      expect(results.every(r => Array.isArray(r))).toBe(true);\n\n      // Verificar performance\n      expect(avgTimePerUser).toBeLessThan(maxTimePerUser);\n      expect(totalTime).toBeLessThan(30000); // < 30 segundos total\n    });\n\n    it('debe generar reportes enterprise rápidamente', async () => {\n      const maxReportTime = 10000; // 10 segundos máximo\n      \n      const startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(); // 7 días\n      const endDate = new Date().toISOString();\n      \n      const startTime = Date.now();\n      \n      // Generar reporte enterprise completo\n      const report = await enterpriseAuditSystem.generateEnterpriseReport(\n        startDate,\n        endDate,\n        true, // incluir anomalías\n        true  // incluir incidentes\n      );\n      \n      const endTime = Date.now();\n      const reportTime = endTime - startTime;\n\n      // Verificar que el reporte se generó\n      expect(report).toBeDefined();\n      expect(report.enterprise_data).toBeDefined();\n\n      // Verificar tiempo de generación\n      expect(reportTime).toBeLessThan(maxReportTime);\n    });\n  });\n\n  describe('Performance Sistema de Validación bajo Carga', () => {\n    it('debe validar 100,000 objetos complejos en menos de 60 segundos', async () => {\n      const objectCount = 100000;\n      const maxTimeSeconds = 60;\n      \n      const complexSchema = z.object({\n        name: z.string().min(1).max(100),\n        email: z.string().email(),\n        age: z.number().min(0).max(120),\n        address: z.object({\n          street: z.string().max(200),\n          city: z.string().max(100),\n          country: z.string().max(100)\n        }),\n        tags: z.array(z.string().max(50)).max(20),\n        metadata: z.record(z.any()).optional()\n      });\n\n      const startTime = Date.now();\n      \n      // Generar objetos para validación\n      const validationPromises = Array.from({ length: objectCount }, (_, i) => \n        standardValidator.validateAndSanitize(\n          complexSchema,\n          {\n            name: `User ${i}`,\n            email: `user${i}@example.com`,\n            age: 20 + (i % 60),\n            address: {\n              street: `Street ${i}`,\n              city: `City ${i % 100}`,\n              country: 'Argentina'\n            },\n            tags: [`tag${i % 10}`, `category${i % 5}`],\n            metadata: { index: i, batch: Math.floor(i / 1000) }\n          },\n          mockContext\n        )\n      );\n\n      const results = await Promise.all(validationPromises);\n      const endTime = Date.now();\n      const totalTime = (endTime - startTime) / 1000; // segundos\n\n      // Verificar que todos los objetos fueron procesados\n      expect(results.length).toBe(objectCount);\n      \n      // Verificar tiempo de procesamiento\n      expect(totalTime).toBeLessThan(maxTimeSeconds);\n\n      // Verificar throughput\n      const objectsPerSecond = objectCount / totalTime;\n      expect(objectsPerSecond).toBeGreaterThan(1000); // > 1000 objetos/segundo\n\n      // Verificar que la mayoría fueron exitosos\n      const successCount = results.filter(r => r.success).length;\n      expect(successCount / objectCount).toBeGreaterThan(0.95); // > 95% éxito\n    });\n\n    it('debe detectar ataques en tiempo real con alta carga', async () => {\n      const attackCount = 10000;\n      const maxDetectionTime = 20000; // 20 segundos\n      \n      const maliciousPayloads = [\n        \"'; DROP TABLE users; --\",\n        '<script>alert(\"XSS\")</script>',\n        '../../../etc/passwd',\n        'SELECT * FROM admin_users',\n        '<img src=\"x\" onerror=\"alert(1)\">'\n      ];\n\n      const schema = z.object({\n        input: z.string().max(1000)\n      });\n\n      const startTime = Date.now();\n      \n      // Generar ataques masivos\n      const attackPromises = Array.from({ length: attackCount }, (_, i) => \n        criticalValidator.validateAndSanitize(\n          schema,\n          { input: maliciousPayloads[i % maliciousPayloads.length] },\n          { ...mockContext, userId: `attacker_${i % 100}` }\n        )\n      );\n\n      const results = await Promise.all(attackPromises);\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      // Verificar que todos los ataques fueron procesados\n      expect(results.length).toBe(attackCount);\n\n      // Verificar tiempo de detección\n      expect(totalTime).toBeLessThan(maxDetectionTime);\n\n      // Verificar que se detectaron ataques\n      const blockedAttacks = results.filter(r => !r.success).length;\n      const detectionRate = blockedAttacks / attackCount;\n      expect(detectionRate).toBeGreaterThan(0.8); // > 80% de detección\n\n      // Verificar throughput de detección\n      const attacksPerSecond = attackCount / (totalTime / 1000);\n      expect(attacksPerSecond).toBeGreaterThan(300); // > 300 ataques/segundo\n    });\n  });\n\n  describe('Performance Memoria y Recursos', () => {\n    it('debe mantener uso de memoria estable durante carga sostenida', async () => {\n      const initialMemory = process.memoryUsage();\n      const maxMemoryIncrease = 200 * 1024 * 1024; // 200MB máximo\n      \n      // Simular carga sostenida por 30 segundos\n      const duration = 30000; // 30 segundos\n      const startTime = Date.now();\n      \n      const sustainedLoad = async () => {\n        while (Date.now() - startTime < duration) {\n          // Rate limiting\n          await checkEnterpriseRateLimit(\n            {\n              headers: new Map([['x-forwarded-for', '192.168.1.100']]),\n              nextUrl: { pathname: '/api/test' },\n              method: 'GET'\n            } as any,\n            ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD,\n            `sustained_${Date.now()}`\n          );\n\n          // Auditoría\n          await enterpriseAuditSystem.logEnterpriseEvent({\n            user_id: 'sustained_user',\n            event_type: 'SUSTAINED_TEST' as any,\n            event_category: 'test',\n            severity: 'low' as any,\n            description: 'Sustained load test',\n            metadata: { timestamp: Date.now() },\n            ip_address: '192.168.1.100',\n            user_agent: 'SustainedTestBot/1.0'\n          }, mockContext);\n\n          // Validación\n          await standardValidator.validateAndSanitize(\n            z.object({ test: z.string() }),\n            { test: 'sustained test data' },\n            mockContext\n          );\n\n          // Pequeña pausa para evitar saturación\n          await new Promise(resolve => setTimeout(resolve, 10));\n        }\n      };\n\n      await sustainedLoad();\n      \n      const finalMemory = process.memoryUsage();\n      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\n\n      // Verificar que el uso de memoria se mantuvo estable\n      expect(memoryIncrease).toBeLessThan(maxMemoryIncrease);\n    });\n\n    it('debe liberar recursos correctamente después de carga extrema', async () => {\n      const initialMemory = process.memoryUsage();\n      \n      // Fase 1: Carga extrema\n      const extremeLoadPromises = Array.from({ length: 10000 }, (_, i) => \n        Promise.all([\n          checkEnterpriseRateLimit(\n            {\n              headers: new Map([['x-forwarded-for', `10.0.${Math.floor(i/255)}.${i%255}`]]),\n              nextUrl: { pathname: '/api/extreme' },\n              method: 'POST'\n            } as any,\n            ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL,\n            `extreme_${i}`\n          ),\n          enterpriseAuditSystem.logEnterpriseEvent({\n            user_id: `extreme_user_${i}`,\n            event_type: 'EXTREME_LOAD' as any,\n            event_category: 'test',\n            severity: 'medium' as any,\n            description: `Extreme load event ${i}`,\n            metadata: { index: i, large_data: 'x'.repeat(1000) },\n            ip_address: `10.0.${Math.floor(i/255)}.${i%255}`,\n            user_agent: 'ExtremeLoadBot/1.0'\n          }, mockContext),\n          standardValidator.validateAndSanitize(\n            z.object({ data: z.string() }),\n            { data: `extreme test data ${i}` },\n            mockContext\n          )\n        ])\n      );\n\n      await Promise.all(extremeLoadPromises);\n      \n      const peakMemory = process.memoryUsage();\n      \n      // Fase 2: Esperar liberación de recursos\n      await new Promise(resolve => setTimeout(resolve, 5000)); // 5 segundos\n      \n      // Forzar garbage collection si está disponible\n      if (global.gc) {\n        global.gc();\n      }\n      \n      const finalMemory = process.memoryUsage();\n      \n      // Verificar que se liberaron recursos\n      const memoryReduction = peakMemory.heapUsed - finalMemory.heapUsed;\n      const reductionPercentage = (memoryReduction / peakMemory.heapUsed) * 100;\n      \n      // Debería liberar al menos 30% de la memoria pico\n      expect(reductionPercentage).toBeGreaterThan(30);\n    });\n  });\n});\n"],"names":["jest","mock","mockRedis","get","fn","mockImplementation","Promise","resolve","set","incr","expire","del","pipeline","exec","mockResolvedValue","disconnect","supabaseAdmin","from","select","eq","single","data","error","insert","id","logSecurityEvent","__esModule","default","sanitize","input","replace","escape","describe","mockContext","beforeEach","clearAllMocks","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","metricsCollector","metrics","totalRequests","allowedRequests","blockedRequests","redisHits","memoryFallbacks","errors","averageResponseTime","topBlockedIPs","topEndpoints","it","concurrentRequests","maxLatencyMs","startTime","Date","now","requestPromises","Array","length","_","i","mockRequest","headers","Map","Math","floor","nextUrl","pathname","method","checkEnterpriseRateLimit","ENTERPRISE_RATE_LIMIT_CONFIGS","PUBLIC_STANDARD","results","all","endTime","totalTime","avgLatency","expect","toBe","toBeLessThan","filter","r","allowed","getMetrics","toBeGreaterThan","loadLevels","performanceResults","loadLevel","ADMIN_CRITICAL","throughput","push","successRate","current","previous","latencyIncrease","baselineLoad","spikeLoad","spikeDuration","baselineStart","baselinePromises","baselineResults","baselineTime","baselineLatency","spikeStart","spikePromises","spikeResults","spikeTime","spikeLatency","recoveryStart","recoveryPromises","recoveryResults","recoveryTime","recoveryLatency","recoveryRatio","eventCount","maxTimeSeconds","auditPromises","enterpriseAuditSystem","logEnterpriseEvent","user_id","event_type","event_category","severity","description","metadata","test_batch","event_index","ip_address","user_agent","every","startsWith","eventsPerSecond","userCount","maxTimePerUser","userIds","anomalyPromises","map","detectAnomalies","avgTimePerUser","isArray","maxReportTime","startDate","toISOString","endDate","report","generateEnterpriseReport","reportTime","toBeDefined","enterprise_data","objectCount","complexSchema","z","object","name","string","min","max","age","number","address","street","city","country","tags","array","record","any","optional","validationPromises","standardValidator","validateAndSanitize","index","batch","objectsPerSecond","successCount","success","attackCount","maxDetectionTime","maliciousPayloads","schema","attackPromises","criticalValidator","blockedAttacks","detectionRate","attacksPerSecond","initialMemory","process","memoryUsage","maxMemoryIncrease","duration","sustainedLoad","timestamp","test","setTimeout","finalMemory","memoryIncrease","heapUsed","extremeLoadPromises","large_data","repeat","peakMemory","global","gc","memoryReduction","reductionPercentage"],"mappings":"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"}