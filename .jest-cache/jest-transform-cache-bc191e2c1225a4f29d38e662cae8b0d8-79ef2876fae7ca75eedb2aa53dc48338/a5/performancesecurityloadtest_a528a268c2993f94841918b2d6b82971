f55790d3de7231c3886c1c84be0761ce
/**
 * Tests de Performance y Carga para Sistemas de Seguridad Enterprise
 * Valida el rendimiento bajo carga extrema y condiciones adversas
 */ // Mock de dependencias para performance testing
"use strict";
jest.mock('ioredis', ()=>{
    const mockRedis = {
        get: jest.fn().mockImplementation(()=>Promise.resolve(null)),
        set: jest.fn().mockImplementation(()=>Promise.resolve('OK')),
        incr: jest.fn().mockImplementation(()=>Promise.resolve(1)),
        expire: jest.fn().mockImplementation(()=>Promise.resolve(1)),
        del: jest.fn().mockImplementation(()=>Promise.resolve(1)),
        pipeline: jest.fn(()=>({
                get: jest.fn(),
                incr: jest.fn(),
                expire: jest.fn(),
                exec: jest.fn().mockResolvedValue([
                    [
                        null,
                        '1'
                    ],
                    [
                        null,
                        'OK'
                    ]
                ])
            })),
        disconnect: jest.fn()
    };
    return jest.fn(()=>mockRedis);
});
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn().mockResolvedValue({
                                        data: null,
                                        error: null
                                    })
                                })),
                            insert: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn().mockResolvedValue({
                                                data: {
                                                    id: 'perf_test_id'
                                                },
                                                error: null
                                            })
                                        }))
                                }))
                        }))
                }))
        }
    }));
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn().mockResolvedValue(true)
    }));
jest.mock('isomorphic-dompurify', ()=>({
        __esModule: true,
        default: {
            sanitize: jest.fn((input)=>input.replace(/<script.*?<\/script>/gi, ''))
        }
    }));
jest.mock('validator', ()=>({
        __esModule: true,
        default: {
            escape: jest.fn((input)=>input)
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _zod = require("zod");
const _enterpriseratelimiter = require("../../lib/rate-limiting/enterprise-rate-limiter");
const _enterpriseauditsystem = require("../../lib/security/enterprise-audit-system");
const _enterprisevalidationsystem = require("../../lib/validation/enterprise-validation-system");
describe('Tests de Performance y Carga - Sistemas de Seguridad Enterprise', ()=>{
    let mockContext;
    beforeEach(()=>{
        jest.clearAllMocks();
        mockContext = {
            userId: 'perf_test_user',
            sessionId: 'perf_test_session',
            email: 'perf@pinteya.com',
            role: 'admin',
            permissions: [
                'admin_access'
            ],
            sessionValid: true,
            securityLevel: 'critical',
            ipAddress: '192.168.1.1',
            userAgent: 'PerformanceTestBot/1.0',
            supabase: {},
            validations: {
                jwtValid: true,
                csrfValid: true,
                rateLimitPassed: true,
                originValid: true
            }
        };
        // Reset metrics
        _enterpriseratelimiter.metricsCollector.metrics = {
            totalRequests: 0,
            allowedRequests: 0,
            blockedRequests: 0,
            redisHits: 0,
            memoryFallbacks: 0,
            errors: 0,
            averageResponseTime: 0,
            topBlockedIPs: [],
            topEndpoints: []
        };
    });
    describe('Performance Rate Limiting bajo Carga Extrema', ()=>{
        it('debe mantener latencia baja con 10,000 requests concurrentes', async ()=>{
            const concurrentRequests = 10000;
            const maxLatencyMs = 100; // 100ms máximo por request
            const startTime = Date.now();
            // Generar requests concurrentes
            const requestPromises = Array.from({
                length: concurrentRequests
            }, (_, i)=>{
                const mockRequest = {
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            `192.168.${Math.floor(i / 255)}.${i % 255}`
                        ],
                        [
                            'user-agent',
                            'LoadTestBot/1.0'
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/public/products'
                    },
                    method: 'GET'
                };
                return (0, _enterpriseratelimiter.checkEnterpriseRateLimit)(mockRequest, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD, `load_test_${i}`);
            });
            // Ejecutar todos los requests concurrentemente
            const results = await Promise.all(requestPromises);
            const endTime = Date.now();
            const totalTime = endTime - startTime;
            const avgLatency = totalTime / concurrentRequests;
            // Verificar que todos los requests fueron procesados
            expect(results.length).toBe(concurrentRequests);
            // Verificar latencia promedio
            expect(avgLatency).toBeLessThan(maxLatencyMs);
            // Verificar que el sistema aplicó rate limiting apropiadamente
            const allowedRequests = results.filter((r)=>r.allowed).length;
            const blockedRequests = results.filter((r)=>!r.allowed).length;
            expect(allowedRequests + blockedRequests).toBe(concurrentRequests);
            // Verificar métricas de performance
            const metrics = _enterpriseratelimiter.metricsCollector.getMetrics();
            expect(metrics.totalRequests).toBeGreaterThan(0);
            expect(metrics.averageResponseTime).toBeLessThan(maxLatencyMs);
        });
        it('debe escalar linealmente con aumento de carga', async ()=>{
            const loadLevels = [
                100,
                500,
                1000,
                2000,
                5000
            ];
            const performanceResults = [];
            for (const loadLevel of loadLevels){
                const startTime = Date.now();
                const requestPromises = Array.from({
                    length: loadLevel
                }, (_, i)=>{
                    const mockRequest = {
                        headers: new Map([
                            [
                                'x-forwarded-for',
                                `10.0.${Math.floor(i / 255)}.${i % 255}`
                            ],
                            [
                                'user-agent',
                                'ScalabilityTestBot/1.0'
                            ]
                        ]),
                        nextUrl: {
                            pathname: '/api/admin/test'
                        },
                        method: 'POST'
                    };
                    return (0, _enterpriseratelimiter.checkEnterpriseRateLimit)(mockRequest, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL, `scale_test_${loadLevel}_${i}`);
                });
                const results = await Promise.all(requestPromises);
                const endTime = Date.now();
                const totalTime = endTime - startTime;
                const avgLatency = totalTime / loadLevel;
                const throughput = loadLevel / (totalTime / 1000); // requests per second
                performanceResults.push({
                    loadLevel,
                    totalTime,
                    avgLatency,
                    throughput,
                    successRate: results.filter((r)=>r.allowed || !r.allowed).length / loadLevel
                });
            }
            // Verificar escalabilidad
            for(let i = 1; i < performanceResults.length; i++){
                const current = performanceResults[i];
                const previous = performanceResults[i - 1];
                // La latencia no debería aumentar más de 3x con el aumento de carga
                const latencyIncrease = current.avgLatency / previous.avgLatency;
                expect(latencyIncrease).toBeLessThan(3);
                // El throughput debería mantenerse razonablemente alto
                expect(current.throughput).toBeGreaterThan(50); // > 50 RPS mínimo
                // La tasa de éxito debería mantenerse alta
                expect(current.successRate).toBeGreaterThan(0.95); // > 95%
            }
        });
        it('debe manejar picos de tráfico sin degradación', async ()=>{
            const baselineLoad = 100;
            const spikeLoad = 5000;
            const spikeDuration = 2000; // 2 segundos
            // Fase 1: Carga baseline
            const baselineStart = Date.now();
            const baselinePromises = Array.from({
                length: baselineLoad
            }, (_, i)=>(0, _enterpriseratelimiter.checkEnterpriseRateLimit)({
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            `172.16.0.${i % 255}`
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/test'
                    },
                    method: 'GET'
                }, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD, `baseline_${i}`));
            const baselineResults = await Promise.all(baselinePromises);
            const baselineTime = Date.now() - baselineStart;
            const baselineLatency = baselineTime / baselineLoad;
            // Fase 2: Pico de tráfico
            const spikeStart = Date.now();
            const spikePromises = Array.from({
                length: spikeLoad
            }, (_, i)=>(0, _enterpriseratelimiter.checkEnterpriseRateLimit)({
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            `203.0.113.${i % 255}`
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/test'
                    },
                    method: 'GET'
                }, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD, `spike_${i}`));
            const spikeResults = await Promise.all(spikePromises);
            const spikeTime = Date.now() - spikeStart;
            const spikeLatency = spikeTime / spikeLoad;
            // Fase 3: Vuelta a baseline
            const recoveryStart = Date.now();
            const recoveryPromises = Array.from({
                length: baselineLoad
            }, (_, i)=>(0, _enterpriseratelimiter.checkEnterpriseRateLimit)({
                    headers: new Map([
                        [
                            'x-forwarded-for',
                            `172.16.1.${i % 255}`
                        ]
                    ]),
                    nextUrl: {
                        pathname: '/api/test'
                    },
                    method: 'GET'
                }, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD, `recovery_${i}`));
            const recoveryResults = await Promise.all(recoveryPromises);
            const recoveryTime = Date.now() - recoveryStart;
            const recoveryLatency = recoveryTime / baselineLoad;
            // Verificar que el sistema manejó el pico
            expect(baselineResults.length).toBe(baselineLoad);
            expect(spikeResults.length).toBe(spikeLoad);
            expect(recoveryResults.length).toBe(baselineLoad);
            // Verificar que la latencia se recuperó después del pico
            const latencyIncrease = spikeLatency / baselineLatency;
            const recoveryRatio = recoveryLatency / baselineLatency;
            expect(latencyIncrease).toBeLessThan(5); // Máximo 5x durante pico
            expect(recoveryRatio).toBeLessThan(2); // Recuperación a menos de 2x baseline
        });
    });
    describe('Performance Sistema de Auditoría bajo Carga', ()=>{
        it('debe procesar 50,000 eventos de auditoría en menos de 30 segundos', async ()=>{
            const eventCount = 50000;
            const maxTimeSeconds = 30;
            const startTime = Date.now();
            // Generar eventos de auditoría masivos
            const auditPromises = Array.from({
                length: eventCount
            }, (_, i)=>_enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
                    user_id: `perf_user_${i % 1000}`,
                    event_type: [
                        'AUTH_SUCCESS',
                        'DATA_ACCESS',
                        'SYSTEM_ACCESS'
                    ][i % 3],
                    event_category: 'performance_test',
                    severity: [
                        'low',
                        'medium',
                        'high'
                    ][i % 3],
                    description: `Performance test event ${i}`,
                    metadata: {
                        test_batch: Math.floor(i / 1000),
                        event_index: i
                    },
                    ip_address: `192.168.${Math.floor(i / 255)}.${i % 255}`,
                    user_agent: 'PerformanceTestBot/1.0'
                }, mockContext));
            const results = await Promise.all(auditPromises);
            const endTime = Date.now();
            const totalTime = (endTime - startTime) / 1000; // segundos
            // Verificar que todos los eventos fueron procesados
            expect(results.length).toBe(eventCount);
            expect(results.every((r)=>r && r.startsWith('corr_'))).toBe(true);
            // Verificar tiempo de procesamiento
            expect(totalTime).toBeLessThan(maxTimeSeconds);
            // Verificar throughput
            const eventsPerSecond = eventCount / totalTime;
            expect(eventsPerSecond).toBeGreaterThan(1000); // > 1000 eventos/segundo
        });
        it('debe mantener performance durante detección de anomalías masiva', async ()=>{
            const userCount = 1000;
            const maxTimePerUser = 100; // 100ms máximo por usuario
            // Generar datos de usuarios para análisis
            const userIds = Array.from({
                length: userCount
            }, (_, i)=>`anomaly_user_${i}`);
            const startTime = Date.now();
            // Ejecutar detección de anomalías para todos los usuarios
            const anomalyPromises = userIds.map((userId)=>_enterpriseauditsystem.enterpriseAuditSystem.detectAnomalies(userId));
            const results = await Promise.all(anomalyPromises);
            const endTime = Date.now();
            const totalTime = endTime - startTime;
            const avgTimePerUser = totalTime / userCount;
            // Verificar que se procesaron todos los usuarios
            expect(results.length).toBe(userCount);
            expect(results.every((r)=>Array.isArray(r))).toBe(true);
            // Verificar performance
            expect(avgTimePerUser).toBeLessThan(maxTimePerUser);
            expect(totalTime).toBeLessThan(30000); // < 30 segundos total
        });
        it('debe generar reportes enterprise rápidamente', async ()=>{
            const maxReportTime = 10000; // 10 segundos máximo
            const startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(); // 7 días
            const endDate = new Date().toISOString();
            const startTime = Date.now();
            // Generar reporte enterprise completo
            const report = await _enterpriseauditsystem.enterpriseAuditSystem.generateEnterpriseReport(startDate, endDate, true, true // incluir incidentes
            );
            const endTime = Date.now();
            const reportTime = endTime - startTime;
            // Verificar que el reporte se generó
            expect(report).toBeDefined();
            expect(report.enterprise_data).toBeDefined();
            // Verificar tiempo de generación
            expect(reportTime).toBeLessThan(maxReportTime);
        });
    });
    describe('Performance Sistema de Validación bajo Carga', ()=>{
        it('debe validar 100,000 objetos complejos en menos de 60 segundos', async ()=>{
            const objectCount = 100000;
            const maxTimeSeconds = 60;
            const complexSchema = _zod.z.object({
                name: _zod.z.string().min(1).max(100),
                email: _zod.z.string().email(),
                age: _zod.z.number().min(0).max(120),
                address: _zod.z.object({
                    street: _zod.z.string().max(200),
                    city: _zod.z.string().max(100),
                    country: _zod.z.string().max(100)
                }),
                tags: _zod.z.array(_zod.z.string().max(50)).max(20),
                metadata: _zod.z.record(_zod.z.any()).optional()
            });
            const startTime = Date.now();
            // Generar objetos para validación
            const validationPromises = Array.from({
                length: objectCount
            }, (_, i)=>_enterprisevalidationsystem.standardValidator.validateAndSanitize(complexSchema, {
                    name: `User ${i}`,
                    email: `user${i}@example.com`,
                    age: 20 + i % 60,
                    address: {
                        street: `Street ${i}`,
                        city: `City ${i % 100}`,
                        country: 'Argentina'
                    },
                    tags: [
                        `tag${i % 10}`,
                        `category${i % 5}`
                    ],
                    metadata: {
                        index: i,
                        batch: Math.floor(i / 1000)
                    }
                }, mockContext));
            const results = await Promise.all(validationPromises);
            const endTime = Date.now();
            const totalTime = (endTime - startTime) / 1000; // segundos
            // Verificar que todos los objetos fueron procesados
            expect(results.length).toBe(objectCount);
            // Verificar tiempo de procesamiento
            expect(totalTime).toBeLessThan(maxTimeSeconds);
            // Verificar throughput
            const objectsPerSecond = objectCount / totalTime;
            expect(objectsPerSecond).toBeGreaterThan(1000); // > 1000 objetos/segundo
            // Verificar que la mayoría fueron exitosos
            const successCount = results.filter((r)=>r.success).length;
            expect(successCount / objectCount).toBeGreaterThan(0.95); // > 95% éxito
        });
        it('debe detectar ataques en tiempo real con alta carga', async ()=>{
            const attackCount = 10000;
            const maxDetectionTime = 20000; // 20 segundos
            const maliciousPayloads = [
                "'; DROP TABLE users; --",
                '<script>alert("XSS")</script>',
                '../../../etc/passwd',
                'SELECT * FROM admin_users',
                '<img src="x" onerror="alert(1)">'
            ];
            const schema = _zod.z.object({
                input: _zod.z.string().max(1000)
            });
            const startTime = Date.now();
            // Generar ataques masivos
            const attackPromises = Array.from({
                length: attackCount
            }, (_, i)=>_enterprisevalidationsystem.criticalValidator.validateAndSanitize(schema, {
                    input: maliciousPayloads[i % maliciousPayloads.length]
                }, {
                    ...mockContext,
                    userId: `attacker_${i % 100}`
                }));
            const results = await Promise.all(attackPromises);
            const endTime = Date.now();
            const totalTime = endTime - startTime;
            // Verificar que todos los ataques fueron procesados
            expect(results.length).toBe(attackCount);
            // Verificar tiempo de detección
            expect(totalTime).toBeLessThan(maxDetectionTime);
            // Verificar que se detectaron ataques
            const blockedAttacks = results.filter((r)=>!r.success).length;
            const detectionRate = blockedAttacks / attackCount;
            expect(detectionRate).toBeGreaterThan(0.8); // > 80% de detección
            // Verificar throughput de detección
            const attacksPerSecond = attackCount / (totalTime / 1000);
            expect(attacksPerSecond).toBeGreaterThan(300); // > 300 ataques/segundo
        });
    });
    describe('Performance Memoria y Recursos', ()=>{
        it('debe mantener uso de memoria estable durante carga sostenida', async ()=>{
            const initialMemory = process.memoryUsage();
            const maxMemoryIncrease = 200 * 1024 * 1024; // 200MB máximo
            // Simular carga sostenida por 30 segundos
            const duration = 30000; // 30 segundos
            const startTime = Date.now();
            const sustainedLoad = async ()=>{
                while(Date.now() - startTime < duration){
                    // Rate limiting
                    await (0, _enterpriseratelimiter.checkEnterpriseRateLimit)({
                        headers: new Map([
                            [
                                'x-forwarded-for',
                                '192.168.1.100'
                            ]
                        ]),
                        nextUrl: {
                            pathname: '/api/test'
                        },
                        method: 'GET'
                    }, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.PUBLIC_STANDARD, `sustained_${Date.now()}`);
                    // Auditoría
                    await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
                        user_id: 'sustained_user',
                        event_type: 'SUSTAINED_TEST',
                        event_category: 'test',
                        severity: 'low',
                        description: 'Sustained load test',
                        metadata: {
                            timestamp: Date.now()
                        },
                        ip_address: '192.168.1.100',
                        user_agent: 'SustainedTestBot/1.0'
                    }, mockContext);
                    // Validación
                    await _enterprisevalidationsystem.standardValidator.validateAndSanitize(_zod.z.object({
                        test: _zod.z.string()
                    }), {
                        test: 'sustained test data'
                    }, mockContext);
                    // Pequeña pausa para evitar saturación
                    await new Promise((resolve)=>setTimeout(resolve, 10));
                }
            };
            await sustainedLoad();
            const finalMemory = process.memoryUsage();
            const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;
            // Verificar que el uso de memoria se mantuvo estable
            expect(memoryIncrease).toBeLessThan(maxMemoryIncrease);
        });
        it('debe liberar recursos correctamente después de carga extrema', async ()=>{
            const initialMemory = process.memoryUsage();
            // Fase 1: Carga extrema
            const extremeLoadPromises = Array.from({
                length: 10000
            }, (_, i)=>Promise.all([
                    (0, _enterpriseratelimiter.checkEnterpriseRateLimit)({
                        headers: new Map([
                            [
                                'x-forwarded-for',
                                `10.0.${Math.floor(i / 255)}.${i % 255}`
                            ]
                        ]),
                        nextUrl: {
                            pathname: '/api/extreme'
                        },
                        method: 'POST'
                    }, _enterpriseratelimiter.ENTERPRISE_RATE_LIMIT_CONFIGS.ADMIN_CRITICAL, `extreme_${i}`),
                    _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
                        user_id: `extreme_user_${i}`,
                        event_type: 'EXTREME_LOAD',
                        event_category: 'test',
                        severity: 'medium',
                        description: `Extreme load event ${i}`,
                        metadata: {
                            index: i,
                            large_data: 'x'.repeat(1000)
                        },
                        ip_address: `10.0.${Math.floor(i / 255)}.${i % 255}`,
                        user_agent: 'ExtremeLoadBot/1.0'
                    }, mockContext),
                    _enterprisevalidationsystem.standardValidator.validateAndSanitize(_zod.z.object({
                        data: _zod.z.string()
                    }), {
                        data: `extreme test data ${i}`
                    }, mockContext)
                ]));
            await Promise.all(extremeLoadPromises);
            const peakMemory = process.memoryUsage();
            // Fase 2: Esperar liberación de recursos
            await new Promise((resolve)=>setTimeout(resolve, 5000)); // 5 segundos
            // Forzar garbage collection si está disponible
            if (global.gc) {
                global.gc();
            }
            const finalMemory = process.memoryUsage();
            // Verificar que se liberaron recursos
            const memoryReduction = peakMemory.heapUsed - finalMemory.heapUsed;
            const reductionPercentage = memoryReduction / peakMemory.heapUsed * 100;
            // Debería liberar al menos 30% de la memoria pico
            expect(reductionPercentage).toBeGreaterThan(30);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,