{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\debug\\admin-products\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { checkCRUDPermissions } from '@/lib/auth/admin-auth';\nimport {\n  requireAdminAuth\n} from '@/lib/auth/enterprise-auth-utils';\nimport {\n  executeWithRLS,\n  createRLSFilters\n} from '@/lib/auth/enterprise-rls-utils';\nimport {\n  getCacheStats\n} from '@/lib/auth/enterprise-cache';\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üîç Debug Admin Products Enterprise: Starting check...');\n\n    // ENTERPRISE: Usar nueva autenticaci√≥n enterprise\n    const enterpriseResult = await requireAdminAuth(request, ['products_read']);\n\n    // LEGACY: Mantener m√©todo anterior para comparaci√≥n\n    const legacyResult = await checkCRUDPermissions('products', 'read', request);\n\n    console.log('üîç Debug Admin Products: Results comparison:', {\n      enterprise: {\n        success: enterpriseResult.success,\n        error: enterpriseResult.error,\n        code: enterpriseResult.code\n      },\n      legacy: {\n        success: legacyResult.success,\n        error: legacyResult.error,\n        status: legacyResult.status,\n        hasUser: !!legacyResult.user,\n        hasSupabase: !!legacyResult.supabase\n      }\n    });\n\n    if (!enterpriseResult.success && !legacyResult.success) {\n      return NextResponse.json({\n        error: 'Ambos m√©todos de autenticaci√≥n fallaron',\n        enterprise: {\n          error: enterpriseResult.error,\n          code: enterpriseResult.code\n        },\n        legacy: {\n          error: legacyResult.error,\n          step: 'checkCRUDPermissions failed'\n        },\n        debug: {\n          both_methods_failed: true,\n          recommended_action: 'Check authentication setup'\n        }\n      }, { status: enterpriseResult.status || legacyResult.status || 401 });\n    }\n\n    // ENTERPRISE: Probar consulta de productos con RLS si enterprise auth es exitoso\n    let productsData = null;\n    let rlsFilters = null;\n    let cacheStats = null;\n\n    if (enterpriseResult.success) {\n      const context = enterpriseResult.context!;\n\n      // Obtener estad√≠sticas de cache\n      cacheStats = getCacheStats();\n\n      // Crear filtros RLS para productos\n      rlsFilters = createRLSFilters({\n        userId: context.userId,\n        role: context.role,\n        permissions: context.permissions,\n        isActive: true\n      }, 'products');\n\n      // Ejecutar consulta con RLS\n      const productsResult = await executeWithRLS(\n        context,\n        async (client, rlsContext) => {\n          let query = client\n            .from('products')\n            .select('id, name, price, is_active, category_id')\n            .limit(5);\n\n          // Aplicar filtros RLS autom√°ticos\n          Object.entries(rlsFilters || {}).forEach(([key, value]) => {\n            query = query.eq(key, value);\n          });\n\n          const { data, error } = await query;\n\n          if (error) {\n            throw new Error(`Error consultando productos: ${error.message}`);\n          }\n\n          return data;\n        },\n        { enforceRLS: true, auditLog: true }\n      );\n\n      if (productsResult.success) {\n        productsData = productsResult.data;\n      }\n    }\n\n    return NextResponse.json({\n      success: enterpriseResult.success || legacyResult.success,\n      message: 'Admin products access comparison completed',\n      enterprise: {\n        status: enterpriseResult.success ? 'SUCCESS' : 'FAILED',\n        context: enterpriseResult.success ? {\n          userId: enterpriseResult.context?.userId,\n          role: enterpriseResult.context?.role,\n          permissions: enterpriseResult.context?.permissions,\n          securityLevel: enterpriseResult.context?.securityLevel\n        } : null,\n        rls: {\n          filters_applied: rlsFilters,\n          products_found: productsData?.length || 0,\n          sample_products: productsData?.slice(0, 3)\n        },\n        cache: cacheStats,\n        error: enterpriseResult.error,\n        code: enterpriseResult.code\n      },\n      legacy: {\n        status: legacyResult.success ? 'SUCCESS' : 'FAILED',\n        authResult: {\n          success: legacyResult.success,\n          hasUser: !!legacyResult.user,\n          hasSupabase: !!legacyResult.supabase,\n          userEmail: legacyResult.user?.email,\n          userRole: legacyResult.user?.user_roles?.role_name\n        },\n        error: legacyResult.error\n      },\n      comparison: {\n        methods_agree: enterpriseResult.success === legacyResult.success,\n        enterprise_advantages: [\n          'RLS integration with automatic filters',\n          'Cache statistics and optimization',\n          'Granular permissions checking',\n          'Complete security context',\n          'Audit logging enabled'\n        ],\n        recommendation: enterpriseResult.success ? 'Use enterprise method' : 'Fix authentication issues'\n      },\n      debug: {\n        timestamp: new Date().toISOString(),\n        request_info: {\n          method: request.method,\n          url: request.url\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('üîç Debug Admin Products: Error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Unexpected error',\n      debug: {\n        errorMessage: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }, { status: 500 });\n  }\n}\n"],"names":["GET","request","console","log","enterpriseResult","requireAdminAuth","legacyResult","checkCRUDPermissions","enterprise","success","error","code","legacy","status","hasUser","user","hasSupabase","supabase","NextResponse","json","step","debug","both_methods_failed","recommended_action","productsData","rlsFilters","cacheStats","context","getCacheStats","createRLSFilters","userId","role","permissions","isActive","productsResult","executeWithRLS","client","rlsContext","query","from","select","limit","Object","entries","forEach","key","value","eq","data","Error","message","enforceRLS","auditLog","securityLevel","rls","filters_applied","products_found","length","sample_products","slice","cache","authResult","userEmail","email","userRole","user_roles","role_name","comparison","methods_agree","enterprise_advantages","recommendation","timestamp","Date","toISOString","request_info","method","url","errorMessage"],"mappings":"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"}