3989ff1812813e9e433d3208082ebfef
// ===================================
// PINTEYA E-COMMERCE - TESTS API ORDERS
// ===================================
"use strict";
// Mock Supabase específico para orders
jest.mock('@/lib/supabase', ()=>{
    const mockSupabaseAdmin = {
        from: jest.fn().mockImplementation((table)=>{
            if (table === 'users') {
                return {
                    select: jest.fn().mockImplementation((columns)=>({
                            eq: jest.fn().mockImplementation((column, value)=>({
                                    single: jest.fn().mockImplementation(()=>{
                                        // Simular que no existe usuario para forzar la creación
                                        if (value === 'demo-user-id') {
                                            return Promise.resolve({
                                                data: null,
                                                error: {
                                                    code: 'PGRST116'
                                                }
                                            });
                                        }
                                        return Promise.resolve({
                                            data: mockUser,
                                            error: null
                                        });
                                    })
                                }))
                        })),
                    insert: jest.fn().mockImplementation((data)=>({
                            select: jest.fn().mockImplementation(()=>({
                                    single: jest.fn().mockImplementation(()=>{
                                        // Retornar un usuario válido con id
                                        return Promise.resolve({
                                            data: {
                                                id: 'test-user-id',
                                                clerk_id: data[0].clerk_id,
                                                email: data[0].email,
                                                name: data[0].name
                                            },
                                            error: null
                                        });
                                    })
                                }))
                        }))
                };
            }
            if (table === 'orders') {
                const mockQuery = {
                    eq: jest.fn().mockImplementation(()=>mockQuery),
                    order: jest.fn().mockImplementation(()=>mockQuery),
                    range: jest.fn().mockImplementation(()=>Promise.resolve({
                            data: mockOrders,
                            error: null,
                            count: 1
                        }))
                };
                return {
                    select: jest.fn().mockImplementation(()=>mockQuery),
                    insert: jest.fn().mockImplementation(()=>({
                            select: jest.fn().mockImplementation(()=>Promise.resolve({
                                    data: mockOrders,
                                    error: null
                                }))
                        }))
                };
            }
            if (table === 'products') {
                return {
                    select: jest.fn().mockImplementation(()=>({
                            limit: jest.fn().mockImplementation(()=>Promise.resolve({
                                    data: mockProducts,
                                    error: null
                                }))
                        }))
                };
            }
            if (table === 'order_items') {
                return {
                    insert: jest.fn().mockImplementation(()=>Promise.resolve({
                            data: null,
                            error: null
                        }))
                };
            }
            // Default fallback
            return {
                select: jest.fn().mockImplementation(()=>({
                        eq: jest.fn().mockImplementation(()=>Promise.resolve({
                                data: [],
                                error: null
                            }))
                    }))
            };
        })
    };
    return {
        supabaseAdmin: mockSupabaseAdmin,
        getSupabaseClient: jest.fn(()=>mockSupabaseAdmin)
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../app/api/user/orders/route");
// Mock data
const mockUser = {
    id: 'test-user-id',
    clerk_id: 'demo-user-id',
    email: 'test@example.com',
    name: 'Test User'
};
const mockOrders = [
    {
        id: 'order-1',
        user_id: 'test-user-id',
        total: 15000.00,
        status: 'delivered',
        payment_id: 'payment-1',
        created_at: '2024-01-01T00:00:00Z',
        order_items: [
            {
                id: 'item-1',
                quantity: 2,
                price: 7500.00,
                products: {
                    id: 1,
                    name: 'Test Product',
                    images: [
                        'test.jpg'
                    ]
                }
            }
        ]
    }
];
const mockProducts = [
    {
        id: 1,
        name: 'Test Product',
        price: 7500.00
    }
];
describe('/api/user/orders', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('creates new user when user does not exist and returns orders', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/user/orders');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(data.orders).toBeDefined();
        expect(data.pagination).toBeDefined();
        expect(data.statistics).toBeDefined();
    });
    it('handles pagination parameters correctly', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/user/orders?page=2&limit=5');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(data.pagination.page).toBe(2);
        expect(data.pagination.limit).toBe(5);
    });
    it('handles status filter correctly', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/user/orders?status=delivered');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
    });
    it('returns statistics correctly', async ()=>{
        const request = new _server.NextRequest('http://localhost:3001/api/user/orders');
        const response = await (0, _route.GET)(request);
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.statistics).toMatchObject({
            total_orders: expect.any(Number),
            total_spent: expect.any(Number),
            pending_orders: expect.any(Number),
            completed_orders: expect.any(Number)
        });
    });
});

//# sourceMappingURL=data:application/json;base64,