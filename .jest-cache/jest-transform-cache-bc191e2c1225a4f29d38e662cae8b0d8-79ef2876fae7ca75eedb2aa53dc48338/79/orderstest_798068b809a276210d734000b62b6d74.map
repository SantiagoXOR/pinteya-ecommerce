{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\orders.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TESTS API ORDERS\n// ===================================\n\nimport { NextRequest } from 'next/server'\nimport { GET } from '@/app/api/user/orders/route'\n\n// Mock data\nconst mockUser = {\n  id: 'test-user-id',\n  clerk_id: 'demo-user-id',\n  email: 'test@example.com',\n  name: 'Test User'\n}\n\nconst mockOrders = [\n  {\n    id: 'order-1',\n    user_id: 'test-user-id',\n    total: 15000.00,\n    status: 'delivered',\n    payment_id: 'payment-1',\n    created_at: '2024-01-01T00:00:00Z',\n    order_items: [\n      {\n        id: 'item-1',\n        quantity: 2,\n        price: 7500.00,\n        products: {\n          id: 1,\n          name: 'Test Product',\n          images: ['test.jpg']\n        }\n      }\n    ]\n  }\n]\n\nconst mockProducts = [\n  {\n    id: 1,\n    name: 'Test Product',\n    price: 7500.00\n  }\n]\n\n// Mock Supabase específico para orders\njest.mock('@/lib/supabase', () => {\n  const mockSupabaseAdmin = {\n    from: jest.fn().mockImplementation((table: string) => {\n      if (table === 'users') {\n        return {\n          select: jest.fn().mockImplementation((columns?: string) => ({\n            eq: jest.fn().mockImplementation((column: string, value: any) => ({\n              single: jest.fn().mockImplementation(() => {\n                // Simular que no existe usuario para forzar la creación\n                if (value === 'demo-user-id') {\n                  return Promise.resolve({ data: null, error: { code: 'PGRST116' } })\n                }\n                return Promise.resolve({ data: mockUser, error: null })\n              })\n            }))\n          })),\n          insert: jest.fn().mockImplementation((data: any) => ({\n            select: jest.fn().mockImplementation(() => ({\n              single: jest.fn().mockImplementation(() => {\n                // Retornar un usuario válido con id\n                return Promise.resolve({\n                  data: {\n                    id: 'test-user-id',\n                    clerk_id: data[0].clerk_id,\n                    email: data[0].email,\n                    name: data[0].name\n                  },\n                  error: null\n                })\n              })\n            }))\n          }))\n        }\n      }\n      \n      if (table === 'orders') {\n        const mockQuery = {\n          eq: jest.fn().mockImplementation(() => mockQuery),\n          order: jest.fn().mockImplementation(() => mockQuery),\n          range: jest.fn().mockImplementation(() =>\n            Promise.resolve({ data: mockOrders, error: null, count: 1 })\n          )\n        }\n\n        return {\n          select: jest.fn().mockImplementation(() => mockQuery),\n          insert: jest.fn().mockImplementation(() => ({\n            select: jest.fn().mockImplementation(() =>\n              Promise.resolve({ data: mockOrders, error: null })\n            )\n          }))\n        }\n      }\n      \n      if (table === 'products') {\n        return {\n          select: jest.fn().mockImplementation(() => ({\n            limit: jest.fn().mockImplementation(() => \n              Promise.resolve({ data: mockProducts, error: null })\n            )\n          }))\n        }\n      }\n      \n      if (table === 'order_items') {\n        return {\n          insert: jest.fn().mockImplementation(() => \n            Promise.resolve({ data: null, error: null })\n          )\n        }\n      }\n      \n      // Default fallback\n      return {\n        select: jest.fn().mockImplementation(() => ({\n          eq: jest.fn().mockImplementation(() => \n            Promise.resolve({ data: [], error: null })\n          )\n        }))\n      }\n    })\n  }\n\n  return {\n    supabaseAdmin: mockSupabaseAdmin,\n    getSupabaseClient: jest.fn(() => mockSupabaseAdmin)\n  }\n})\n\ndescribe('/api/user/orders', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('creates new user when user does not exist and returns orders', async () => {\n    const request = new NextRequest('http://localhost:3001/api/user/orders')\n    \n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.orders).toBeDefined()\n    expect(data.pagination).toBeDefined()\n    expect(data.statistics).toBeDefined()\n  })\n\n  it('handles pagination parameters correctly', async () => {\n    const request = new NextRequest('http://localhost:3001/api/user/orders?page=2&limit=5')\n    \n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.pagination.page).toBe(2)\n    expect(data.pagination.limit).toBe(5)\n  })\n\n  it('handles status filter correctly', async () => {\n    const request = new NextRequest('http://localhost:3001/api/user/orders?status=delivered')\n    \n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n\n  it('returns statistics correctly', async () => {\n    const request = new NextRequest('http://localhost:3001/api/user/orders')\n    \n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.statistics).toMatchObject({\n      total_orders: expect.any(Number),\n      total_spent: expect.any(Number),\n      pending_orders: expect.any(Number),\n      completed_orders: expect.any(Number)\n    })\n  })\n})\n"],"names":["jest","mock","mockSupabaseAdmin","from","fn","mockImplementation","table","select","columns","eq","column","value","single","Promise","resolve","data","error","code","mockUser","insert","id","clerk_id","email","name","mockQuery","order","range","mockOrders","count","limit","mockProducts","supabaseAdmin","getSupabaseClient","user_id","total","status","payment_id","created_at","order_items","quantity","price","products","images","describe","beforeEach","clearAllMocks","it","request","NextRequest","response","GET","json","expect","toBe","success","orders","toBeDefined","pagination","statistics","page","toMatchObject","total_orders","any","Number","total_spent","pending_orders","completed_orders"],"mappings":"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"}