0bd77b70fc757ec00f51d5ca741178fa
/**
 * Tests funcionales simplificados para el Header Mobile
 * Enfoque en verificar que los elementos básicos se renderizan correctamente
 */ "use strict";
// Mocks mínimos necesarios
jest.mock('next/link', ()=>{
    return function MockLink({ children, href, ...props }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
            href: href,
            ...props,
            children: children
        });
    };
});
jest.mock('next/image', ()=>{
    return function MockImage({ src, alt, ...props }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            ...props
        });
    };
});
// Mock del hook de geolocalización con valores estáticos
jest.mock('@/hooks/useGeolocation', ()=>({
        useGeolocation: jest.fn(()=>({
                detectedZone: {
                    name: 'Córdoba Capital',
                    available: true
                },
                requestLocation: jest.fn(),
                selectZone: jest.fn(),
                permissionStatus: 'prompt',
                isLoading: false,
                error: null,
                location: null,
                getAvailableZones: jest.fn(()=>[]),
                deliveryZones: []
            }))
    }));
// Mock de Clerk simplificado
jest.mock('@clerk/nextjs', ()=>({
        SignedIn: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-in-mock",
                children: children
            }),
        SignedOut: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-out-mock",
                children: children
            }),
        UserButton: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-button-mock",
                children: "UserButton"
            }),
        useUser: jest.fn(()=>({
                isSignedIn: false,
                user: null,
                isLoaded: true
            }))
    }));
// Mock del componente de búsqueda
jest.mock('@/components/ui/SearchAutocompleteIntegrated', ()=>({
        SearchAutocompleteIntegrated: function MockSearch({ placeholder, ...props }) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "search-autocomplete-mock",
                placeholder: placeholder,
                ...props
            });
        }
    }));
// Mock de Redux
jest.mock('react-redux', ()=>({
        useSelector: jest.fn(()=>({
                items: [],
                totalQuantity: 0
            })),
        useDispatch: jest.fn(()=>jest.fn())
    }));
// Mock del contexto del carrito
jest.mock('@/app/context/CartSidebarModalContext', ()=>({
        useCartSidebarModal: jest.fn(()=>({
                isOpen: false,
                openModal: jest.fn(),
                closeModal: jest.fn()
            }))
    }));
// Mock de hooks de animación
jest.mock('@/hooks/useCartAnimation', ()=>({
        useCartAnimation: jest.fn(()=>({
                isAnimating: false
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _index = /*#__PURE__*/ _interop_require_default(require("../index"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock de window.matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
describe('Header Functional Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Renderizado Básico', ()=>{
        test('debe renderizar sin errores', ()=>{
            expect(()=>(0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}))).not.toThrow();
        });
        test('debe mostrar el logo de Pinteya', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const logo = _react1.screen.getByAltText('Pinteya - Tu Pinturería Online');
            expect(logo).toBeInTheDocument();
        });
        test('debe mostrar el campo de búsqueda con placeholder correcto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByTestId('search-autocomplete-mock');
            expect(searchInput).toHaveAttribute('placeholder', 'latex interior blanco 20lts');
        });
        test('debe mostrar la ubicación por defecto', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByText('Córdoba Capital')).toBeInTheDocument();
        });
        test('debe mostrar elementos de autenticación', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByTestId('signed-out-mock')).toBeInTheDocument();
        });
    });
    describe('Interactividad Básica', ()=>{
        test('logo debe ser clickeable', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const logoLink = _react1.screen.getByAltText('Pinteya - Tu Pinturería Online').closest('a');
            expect(logoLink).toHaveAttribute('href', '/');
        });
        test('debe permitir click en ubicación', ()=>{
            const mockRequestLocation = jest.fn();
            const { useGeolocation } = require('@/hooks/useGeolocation');
            useGeolocation.mockReturnValue({
                detectedZone: {
                    name: 'Córdoba Capital',
                    available: true
                },
                requestLocation: mockRequestLocation,
                selectZone: jest.fn(),
                permissionStatus: 'prompt',
                isLoading: false,
                error: null,
                location: null,
                getAvailableZones: jest.fn(()=>[]),
                deliveryZones: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const locationElement = _react1.screen.getByText('Córdoba Capital').closest('div');
            _react1.fireEvent.click(locationElement);
            expect(mockRequestLocation).toHaveBeenCalled();
        });
        test('campo de búsqueda debe ser enfocable', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByTestId('search-autocomplete-mock');
            _react1.fireEvent.focus(searchInput);
            expect(searchInput).toHaveFocus();
        });
    });
    describe('Estados de Geolocalización', ()=>{
        test('debe mostrar estado de carga', ()=>{
            const { useGeolocation } = require('@/hooks/useGeolocation');
            useGeolocation.mockReturnValue({
                detectedZone: null,
                requestLocation: jest.fn(),
                selectZone: jest.fn(),
                permissionStatus: 'prompt',
                isLoading: true,
                error: null,
                location: null,
                getAvailableZones: jest.fn(()=>[]),
                deliveryZones: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByText('Detectando ubicación...')).toBeInTheDocument();
        });
        test('debe mostrar estado de permisos denegados', ()=>{
            const { useGeolocation } = require('@/hooks/useGeolocation');
            useGeolocation.mockReturnValue({
                detectedZone: {
                    name: 'Córdoba Capital',
                    available: true
                },
                requestLocation: jest.fn(),
                selectZone: jest.fn(),
                permissionStatus: 'denied',
                isLoading: false,
                error: 'Permisos denegados',
                location: null,
                getAvailableZones: jest.fn(()=>[]),
                deliveryZones: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByText('Córdoba Capital')).toBeInTheDocument();
        });
        test('debe mostrar estado de ubicación detectada', ()=>{
            const { useGeolocation } = require('@/hooks/useGeolocation');
            useGeolocation.mockReturnValue({
                detectedZone: {
                    name: 'Villa Carlos Paz',
                    available: true
                },
                requestLocation: jest.fn(),
                selectZone: jest.fn(),
                permissionStatus: 'granted',
                isLoading: false,
                error: null,
                location: {
                    lat: -31.4201,
                    lng: -64.1888
                },
                getAvailableZones: jest.fn(()=>[]),
                deliveryZones: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByText('Villa Carlos Paz')).toBeInTheDocument();
            expect(_react1.screen.getByText('✓')).toBeInTheDocument();
        });
    });
    describe('Estados de Autenticación', ()=>{
        test('debe mostrar UserButton cuando está autenticado', ()=>{
            const { useUser } = require('@clerk/nextjs');
            useUser.mockReturnValue({
                isSignedIn: true,
                user: {
                    id: 'user_123'
                },
                isLoaded: true
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByTestId('user-button-mock')).toBeInTheDocument();
        });
        test('debe mostrar botón de login cuando no está autenticado', ()=>{
            const { useUser } = require('@clerk/nextjs');
            useUser.mockReturnValue({
                isSignedIn: false,
                user: null,
                isLoaded: true
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByTestId('signed-out-mock')).toBeInTheDocument();
        });
    });
    describe('Responsive Design', ()=>{
        test('debe tener clases responsive apropiadas', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const logo = _react1.screen.getByAltText('Pinteya - Tu Pinturería Online');
            expect(logo).toHaveClass('h-16', 'w-16'); // 64x64px en mobile
        });
        test('debe mostrar layout mobile específico', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            // Verificar que existe contenido mobile
            const searchInput = _react1.screen.getByTestId('search-autocomplete-mock');
            expect(searchInput).toBeInTheDocument();
        });
    });
    describe('Accesibilidad', ()=>{
        test('debe tener alt text en imágenes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const logo = _react1.screen.getByAltText('Pinteya - Tu Pinturería Online');
            expect(logo).toHaveAttribute('alt', 'Pinteya - Tu Pinturería Online');
        });
        test('debe tener elementos navegables', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const logoLink = _react1.screen.getByAltText('Pinteya - Tu Pinturería Online').closest('a');
            expect(logoLink).toHaveAttribute('href');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,