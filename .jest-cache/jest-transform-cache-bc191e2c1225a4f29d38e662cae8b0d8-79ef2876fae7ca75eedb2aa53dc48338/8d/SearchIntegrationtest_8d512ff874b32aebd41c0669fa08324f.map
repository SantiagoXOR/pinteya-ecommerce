{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Header\\__tests__\\integration\\SearchIntegration.test.tsx"],"sourcesContent":["/**\n * Tests de Integración - Sistema de Búsqueda\n * Pruebas de integración entre Header y componentes de búsqueda\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Provider } from 'react-redux';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\nimport Header from '../../index';\nimport { store } from '@/redux/store';\nimport { CartModalProvider } from '@/app/context/CartSidebarModalContext';\n\n// Mock de Next.js\nconst mockPush = jest.fn();\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n  useSearchParams: () => ({\n    get: jest.fn(),\n  }),\n}));\n\n// Mock de Clerk\njest.mock('@clerk/nextjs', () => ({\n  ClerkProvider: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  SignedIn: ({ children }: { children: React.ReactNode }) => <div data-testid=\"signed-in\">{children}</div>,\n  SignedOut: ({ children }: { children: React.ReactNode }) => <div data-testid=\"signed-out\">{children}</div>,\n  UserButton: () => <div data-testid=\"user-button\">UserButton</div>,\n  useUser: () => ({\n    isSignedIn: false,\n    user: null,\n    isLoaded: true,\n  }),\n}));\n\n// Mock de hooks\njest.mock('@/hooks/useGeolocation', () => ({\n  useGeolocation: () => ({\n    detectedZone: { id: 'cordoba-capital', name: 'Córdoba Capital' },\n    requestLocation: jest.fn(),\n    permissionStatus: 'granted',\n    isLoading: false,\n    error: null,\n    location: null,\n    testLocation: jest.fn(),\n    deliveryZones: [{ id: 'cordoba-capital', name: 'Córdoba Capital' }],\n  }),\n}));\n\njest.mock('@/hooks/useCartAnimation', () => ({\n  useCartAnimation: () => ({ isAnimating: false }),\n}));\n\n// Mock de componentes UI\njest.mock('@/components/ui/optimized-cart-icon', () => ({\n  OptimizedCartIcon: () => <div data-testid=\"cart-icon\">Cart</div>,\n}));\n\njest.mock('@/components/ui/OptimizedLogo', () => ({\n  HeaderLogo: () => <img data-testid=\"header-logo\" alt=\"Pinteya\" />,\n}));\n\n// Datos de prueba para APIs\nconst mockTrendingSearches = [\n  { query: 'pintura blanca', count: 150 },\n  { query: 'latex interior', count: 120 },\n  { query: 'esmalte sintético', count: 100 },\n  { query: 'barniz marino', count: 80 },\n];\n\nconst mockSearchSuggestions = [\n  { id: 1, name: 'Pintura Latex Blanca 20L', category: 'Pinturas' },\n  { id: 2, name: 'Pintura Latex Interior Premium', category: 'Pinturas' },\n  { id: 3, name: 'Esmalte Sintético Blanco', category: 'Esmaltes' },\n];\n\nconst mockRecentSearches = [\n  'pintura exterior',\n  'rodillo 23cm',\n  'thinner común',\n];\n\n// Configuración del servidor MSW\nconst server = setupServer(\n  // API de búsquedas trending\n  rest.get('/api/search/trending', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        success: true,\n        data: mockTrendingSearches,\n        count: mockTrendingSearches.length,\n      })\n    );\n  }),\n\n  // API de sugerencias de búsqueda\n  rest.get('/api/search/suggestions', (req, res, ctx) => {\n    const query = req.url.searchParams.get('q');\n    const filteredSuggestions = mockSearchSuggestions.filter(item =>\n      item.name.toLowerCase().includes(query?.toLowerCase() || '')\n    );\n    \n    return res(\n      ctx.status(200),\n      ctx.json({\n        success: true,\n        data: filteredSuggestions,\n        count: filteredSuggestions.length,\n      })\n    );\n  }),\n\n  // API de productos (para búsqueda)\n  rest.get('/api/products', (req, res, ctx) => {\n    const search = req.url.searchParams.get('search');\n    return res(\n      ctx.status(200),\n      ctx.json({\n        success: true,\n        data: mockSearchSuggestions,\n        pagination: { total: 3, page: 1, limit: 10 },\n      })\n    );\n  })\n);\n\n// Setup y teardown del servidor\nbeforeAll(() => server.listen());\nafterEach(() => {\n  server.resetHandlers();\n  jest.clearAllMocks();\n  localStorage.clear();\n});\nafterAll(() => server.close());\n\n// Wrapper de pruebas\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false, staleTime: 0 },\n      mutations: { retry: false },\n    },\n  });\n\n  return (\n    <Provider store={store}>\n      <QueryClientProvider client={queryClient}>\n        <CartModalProvider>\n          {children}\n        </CartModalProvider>\n      </QueryClientProvider>\n    </Provider>\n  );\n};\n\ndescribe('SearchIntegration - Tests de Integración', () => {\n  const user = userEvent.setup();\n\n  describe('Carga Inicial de Búsquedas Trending', () => {\n    it('debe cargar búsquedas trending al montar el componente', async () => {\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      // Esperar a que se carguen las búsquedas trending\n      await waitFor(() => {\n        expect(screen.getByTestId('search-input')).toBeInTheDocument();\n      });\n\n      // Verificar que se hizo la llamada a la API\n      await waitFor(() => {\n        // La llamada se hace internamente en el hook useTrendingSearches\n        expect(screen.getByTestId('search-input')).toBeInTheDocument();\n      });\n    });\n\n    it('debe manejar errores en la carga de trending searches', async () => {\n      // Simular error en la API\n      server.use(\n        rest.get('/api/search/trending', (req, res, ctx) => {\n          return res(ctx.status(500), ctx.json({ error: 'Server error' }));\n        })\n      );\n\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      // El componente debe seguir funcionando aunque falle la API\n      expect(screen.getByTestId('search-input')).toBeInTheDocument();\n    });\n  });\n\n  describe('Funcionalidad de Búsqueda con Debounce', () => {\n    it('debe realizar búsqueda con debounce al escribir', async () => {\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n\n      // Escribir en el campo de búsqueda\n      await user.type(searchInput, 'pintura');\n\n      // Esperar el debounce (300ms)\n      await waitFor(\n        () => {\n          expect(searchInput).toHaveValue('pintura');\n        },\n        { timeout: 500 }\n      );\n    });\n\n    it('debe cancelar búsquedas anteriores al escribir rápidamente', async () => {\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n\n      // Escribir rápidamente múltiples caracteres\n      await user.type(searchInput, 'pin');\n      await user.type(searchInput, 'tura');\n\n      // Solo la última búsqueda debe ejecutarse\n      await waitFor(() => {\n        expect(searchInput).toHaveValue('pintura');\n      });\n    });\n  });\n\n  describe('Navegación desde Búsqueda', () => {\n    it('debe navegar a resultados al presionar Enter', async () => {\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n\n      // Escribir y presionar Enter\n      await user.type(searchInput, 'latex blanco');\n      await user.keyboard('{Enter}');\n\n      // Verificar navegación\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/productos?q=latex%20blanco');\n      });\n    });\n\n    it('debe navegar con parámetros de búsqueda correctos', async () => {\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n\n      // Búsqueda con espacios y caracteres especiales\n      await user.type(searchInput, 'pintura 20L & barniz');\n      await user.keyboard('{Enter}');\n\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith(\n          expect.stringContaining('/productos?q=')\n        );\n      });\n    });\n  });\n\n  describe('Historial de Búsquedas', () => {\n    it('debe guardar búsquedas en localStorage', async () => {\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n\n      // Realizar búsqueda\n      await user.type(searchInput, 'esmalte sintético');\n      await user.keyboard('{Enter}');\n\n      // Verificar que se guardó en localStorage\n      await waitFor(() => {\n        const recentSearches = JSON.parse(\n          localStorage.getItem('pinteya_recent_searches') || '[]'\n        );\n        expect(recentSearches).toContain('esmalte sintético');\n      });\n    });\n\n    it('debe limitar el historial a máximo 10 búsquedas', async () => {\n      // Prellenar localStorage con 10 búsquedas\n      const existingSearches = Array.from({ length: 10 }, (_, i) => `búsqueda ${i}`);\n      localStorage.setItem('pinteya_recent_searches', JSON.stringify(existingSearches));\n\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n\n      // Realizar nueva búsqueda\n      await user.type(searchInput, 'nueva búsqueda');\n      await user.keyboard('{Enter}');\n\n      await waitFor(() => {\n        const recentSearches = JSON.parse(\n          localStorage.getItem('pinteya_recent_searches') || '[]'\n        );\n        expect(recentSearches).toHaveLength(10);\n        expect(recentSearches[0]).toBe('nueva búsqueda');\n      });\n    });\n  });\n\n  describe('Estados de Carga y Error', () => {\n    it('debe mostrar estado de carga durante búsqueda', async () => {\n      // Simular respuesta lenta\n      server.use(\n        rest.get('/api/search/suggestions', (req, res, ctx) => {\n          return res(ctx.delay(1000), ctx.json({ data: [] }));\n        })\n      );\n\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n      await user.type(searchInput, 'test');\n\n      // Verificar que el input sigue funcionando durante la carga\n      expect(searchInput).toHaveValue('test');\n    });\n\n    it('debe manejar errores de búsqueda gracefully', async () => {\n      // Simular error en API de sugerencias\n      server.use(\n        rest.get('/api/search/suggestions', (req, res, ctx) => {\n          return res(ctx.status(500));\n        })\n      );\n\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n      await user.type(searchInput, 'test error');\n\n      // El componente debe seguir funcionando\n      expect(searchInput).toHaveValue('test error');\n    });\n  });\n\n  describe('Integración con Geolocalización', () => {\n    it('debe incluir zona de entrega en búsquedas cuando esté disponible', async () => {\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n      await user.type(searchInput, 'pintura');\n      await user.keyboard('{Enter}');\n\n      // Verificar que la navegación incluye contexto de ubicación\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith(\n          expect.stringContaining('/productos?q=pintura')\n        );\n      });\n    });\n  });\n\n  describe('Performance y Optimización', () => {\n    it('debe cancelar requests anteriores al hacer nueva búsqueda', async () => {\n      let requestCount = 0;\n      server.use(\n        rest.get('/api/search/suggestions', (req, res, ctx) => {\n          requestCount++;\n          return res(ctx.delay(100), ctx.json({ data: [] }));\n        })\n      );\n\n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByTestId('search-input');\n\n      // Hacer múltiples búsquedas rápidas\n      await user.type(searchInput, 'a');\n      await user.type(searchInput, 'b');\n      await user.type(searchInput, 'c');\n\n      // Esperar a que se resuelvan\n      await waitFor(() => {\n        expect(searchInput).toHaveValue('abc');\n      });\n\n      // Solo debe haber hecho el request final\n      expect(requestCount).toBeLessThanOrEqual(3);\n    });\n  });\n});\n"],"names":["jest","mock","useRouter","push","mockPush","replace","fn","prefetch","useSearchParams","get","ClerkProvider","children","div","SignedIn","data-testid","SignedOut","UserButton","useUser","isSignedIn","user","isLoaded","useGeolocation","detectedZone","id","name","requestLocation","permissionStatus","isLoading","error","location","testLocation","deliveryZones","useCartAnimation","isAnimating","OptimizedCartIcon","HeaderLogo","img","alt","mockTrendingSearches","query","count","mockSearchSuggestions","category","mockRecentSearches","server","setupServer","rest","req","res","ctx","status","json","success","data","length","url","searchParams","filteredSuggestions","filter","item","toLowerCase","includes","search","pagination","total","page","limit","beforeAll","listen","afterEach","resetHandlers","clearAllMocks","localStorage","clear","afterAll","close","TestWrapper","queryClient","QueryClient","defaultOptions","queries","retry","staleTime","mutations","Provider","store","QueryClientProvider","client","CartModalProvider","describe","userEvent","setup","it","render","Header","waitFor","expect","screen","getByTestId","toBeInTheDocument","use","searchInput","type","toHaveValue","timeout","keyboard","toHaveBeenCalledWith","stringContaining","recentSearches","JSON","parse","getItem","toContain","existingSearches","Array","from","_","i","setItem","stringify","toHaveLength","toBe","delay","requestCount","toBeLessThanOrEqual"],"mappings":"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"}