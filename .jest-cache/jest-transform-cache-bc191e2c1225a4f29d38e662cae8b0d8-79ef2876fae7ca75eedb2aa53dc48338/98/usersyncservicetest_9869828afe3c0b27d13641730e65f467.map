{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\user-sync-service.test.ts"],"sourcesContent":["/**\n * Tests para el servicio de sincronización automática de usuarios\n * Verifica la sincronización robusta entre Clerk y Supabase\n */\n\nimport { NextRequest } from 'next/server';\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  clerkClient: jest.fn(() => ({\n    users: {\n      getUser: jest.fn(),\n      getUserList: jest.fn()\n    }\n  }))\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          or: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        })),\n        or: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\n// Mock de security audit\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\nimport {\n  syncUserToSupabase,\n  syncUserFromClerk,\n  deleteUserFromSupabase,\n  bulkSyncUsersFromClerk,\n  type ClerkUserData,\n  type SyncOptions\n} from '@/lib/auth/user-sync-service';\nimport { clerkClient } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\ndescribe('Servicio de Sincronización de Usuarios', () => {\n  let mockClerkClient: jest.MockedFunction<typeof clerkClient>;\n  let mockSupabase: any;\n\n  beforeEach(() => {\n    mockClerkClient = clerkClient as jest.MockedFunction<typeof clerkClient>;\n    mockSupabase = supabaseAdmin as any;\n    jest.clearAllMocks();\n  });\n\n  const mockClerkUserData: ClerkUserData = {\n    id: 'user_123',\n    email_addresses: [{\n      email_address: 'test@example.com',\n      id: 'email_123',\n      verification: {\n        status: 'verified',\n        strategy: 'email_code'\n      }\n    }],\n    first_name: 'John',\n    last_name: 'Doe',\n    created_at: Date.now(),\n    updated_at: Date.now(),\n    image_url: 'https://example.com/avatar.jpg',\n    public_metadata: { role: 'customer' }\n  };\n\n  describe('syncUserToSupabase', () => {\n    it('debe crear un nuevo usuario exitosamente', async () => {\n      // Mock: usuario no existe\n      mockSupabase.from().select().or().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      // Mock: rol por defecto existe\n      mockSupabase.from().select().eq().eq().single.mockResolvedValue({\n        data: { id: 1 },\n        error: null\n      });\n\n      // Mock: inserción exitosa\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: { id: 'user_456', email: 'test@example.com' },\n        error: null\n      });\n\n      const result = await syncUserToSupabase(mockClerkUserData);\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('created');\n      expect(result.userId).toBe('user_456');\n    });\n\n    it('debe actualizar un usuario existente', async () => {\n      const existingUser = {\n        id: 'user_456',\n        email: 'test@example.com',\n        first_name: 'Jane'\n      };\n\n      // Mock: usuario existe\n      mockSupabase.from().select().or().single.mockResolvedValue({\n        data: existingUser,\n        error: null\n      });\n\n      // Mock: actualización exitosa\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { ...existingUser, first_name: 'John' },\n        error: null\n      });\n\n      const result = await syncUserToSupabase(mockClerkUserData);\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('updated');\n      expect(result.details?.newData.first_name).toBe('John');\n    });\n\n    it('debe manejar errores de validación', async () => {\n      const invalidUserData = {\n        ...mockClerkUserData,\n        email_addresses: []\n      };\n\n      const result = await syncUserToSupabase(invalidUserData);\n\n      expect(result.success).toBe(false);\n      expect(result.action).toBe('error');\n      expect(result.error).toContain('Al menos un email es requerido');\n    });\n\n    it('debe reintentar en caso de error temporal', async () => {\n      // Mock: primer intento falla, segundo intento exitoso\n      mockSupabase.from().select().or().single\n        .mockRejectedValueOnce(new Error('Conexión temporal perdida'))\n        .mockResolvedValueOnce({\n          data: null,\n          error: { code: 'PGRST116' }\n        });\n\n      mockSupabase.from().select().eq().eq().single.mockResolvedValue({\n        data: { id: 1 },\n        error: null\n      });\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: { id: 'user_456' },\n        error: null\n      });\n\n      const result = await syncUserToSupabase(mockClerkUserData, {\n        retryAttempts: 2,\n        retryDelay: 100\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('created');\n    });\n\n    it('debe fallar después de agotar reintentos', async () => {\n      // Mock: todos los intentos fallan\n      mockSupabase.from().select().or().single\n        .mockRejectedValue(new Error('Error persistente'));\n\n      const result = await syncUserToSupabase(mockClerkUserData, {\n        retryAttempts: 2,\n        retryDelay: 100\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.action).toBe('error');\n      expect(result.error).toContain('Error después de 2 intentos');\n    });\n  });\n\n  describe('deleteUserFromSupabase', () => {\n    it('debe eliminar usuario exitosamente (soft delete)', async () => {\n      const existingUser = {\n        id: 'user_456',\n        email: 'test@example.com',\n        is_active: true\n      };\n\n      // Mock: actualización exitosa (soft delete)\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { ...existingUser, is_active: false },\n        error: null\n      });\n\n      const result = await deleteUserFromSupabase('user_123');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('deleted');\n    });\n\n    it('debe manejar usuario no encontrado', async () => {\n      // Mock: usuario no encontrado\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      const result = await deleteUserFromSupabase('user_not_found');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('deleted');\n      expect(result.details?.message).toContain('Usuario no encontrado');\n    });\n  });\n\n  describe('syncUserFromClerk', () => {\n    it('debe sincronizar usuario desde Clerk exitosamente', async () => {\n      const mockClerkUser = {\n        id: 'user_123',\n        emailAddresses: [{\n          emailAddress: 'test@example.com',\n          id: 'email_123',\n          verification: { status: 'verified', strategy: 'email_code' }\n        }],\n        firstName: 'John',\n        lastName: 'Doe',\n        createdAt: Date.now(),\n        updatedAt: Date.now(),\n        imageUrl: 'https://example.com/avatar.jpg',\n        phoneNumbers: [],\n        publicMetadata: { role: 'customer' },\n        privateMetadata: {}\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockClerkUser)\n        }\n      } as any);\n\n      // Mock: usuario no existe, crear nuevo\n      mockSupabase.from().select().or().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      mockSupabase.from().select().eq().eq().single.mockResolvedValue({\n        data: { id: 1 },\n        error: null\n      });\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: { id: 'user_456' },\n        error: null\n      });\n\n      const result = await syncUserFromClerk('user_123');\n\n      expect(result.success).toBe(true);\n      expect(result.action).toBe('created');\n    });\n\n    it('debe manejar usuario no encontrado en Clerk', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(null)\n        }\n      } as any);\n\n      const result = await syncUserFromClerk('user_not_found');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Usuario no encontrado en Clerk');\n    });\n  });\n\n  describe('bulkSyncUsersFromClerk', () => {\n    it('debe sincronizar múltiples usuarios exitosamente', async () => {\n      const mockClerkUsers = [\n        {\n          id: 'user_1',\n          emailAddresses: [{ emailAddress: 'user1@example.com', id: 'email_1', verification: { status: 'verified' } }],\n          firstName: 'User',\n          lastName: 'One',\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n          imageUrl: '',\n          phoneNumbers: [],\n          publicMetadata: {},\n          privateMetadata: {}\n        },\n        {\n          id: 'user_2',\n          emailAddresses: [{ emailAddress: 'user2@example.com', id: 'email_2', verification: { status: 'verified' } }],\n          firstName: 'User',\n          lastName: 'Two',\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n          imageUrl: '',\n          phoneNumbers: [],\n          publicMetadata: {},\n          privateMetadata: {}\n        }\n      ];\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUserList: jest.fn().mockResolvedValue(mockClerkUsers)\n        }\n      } as any);\n\n      // Mock: usuarios no existen, crear nuevos\n      mockSupabase.from().select().or().single.mockResolvedValue({\n        data: null,\n        error: { code: 'PGRST116' }\n      });\n\n      mockSupabase.from().select().eq().eq().single.mockResolvedValue({\n        data: { id: 1 },\n        error: null\n      });\n\n      mockSupabase.from().insert().select().single.mockResolvedValue({\n        data: { id: 'new_user' },\n        error: null\n      });\n\n      const result = await bulkSyncUsersFromClerk({\n        batchSize: 2,\n        maxUsers: 2\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.totalProcessed).toBe(2);\n      expect(result.successful).toBe(2);\n      expect(result.failed).toBe(0);\n    });\n\n    it('debe manejar errores en sincronización masiva', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUserList: jest.fn().mockRejectedValue(new Error('Error de Clerk'))\n        }\n      } as any);\n\n      const result = await bulkSyncUsersFromClerk();\n\n      expect(result.success).toBe(false);\n      expect(result.failed).toBe(1);\n      expect(result.results[0].error).toContain('Error en sincronización masiva');\n    });\n  });\n});\n"],"names":["jest","mock","clerkClient","fn","users","getUser","getUserList","supabaseAdmin","from","select","eq","single","or","insert","update","logSecurityEvent","logAdminAction","describe","mockClerkClient","mockSupabase","beforeEach","clearAllMocks","mockClerkUserData","id","email_addresses","email_address","verification","status","strategy","first_name","last_name","created_at","Date","now","updated_at","image_url","public_metadata","role","it","mockResolvedValue","data","error","code","email","result","syncUserToSupabase","expect","success","toBe","action","userId","existingUser","details","newData","invalidUserData","toContain","mockRejectedValueOnce","Error","mockResolvedValueOnce","retryAttempts","retryDelay","mockRejectedValue","is_active","deleteUserFromSupabase","message","mockClerkUser","emailAddresses","emailAddress","firstName","lastName","createdAt","updatedAt","imageUrl","phoneNumbers","publicMetadata","privateMetadata","mockReturnValue","syncUserFromClerk","mockClerkUsers","bulkSyncUsersFromClerk","batchSize","maxUsers","totalProcessed","successful","failed","results"],"mappings":"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"}