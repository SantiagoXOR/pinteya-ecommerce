ff134b263ae4898a40acf2e1c79e9e1e
/**
 * Tests para el servicio de sincronización automática de usuarios
 * Verifica la sincronización robusta entre Clerk y Supabase
 */ "use strict";
// Mock de Clerk
jest.mock('@clerk/nextjs/server', ()=>({
        clerkClient: jest.fn(()=>({
                users: {
                    getUser: jest.fn(),
                    getUserList: jest.fn()
                }
            }))
    }));
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn(),
                                    or: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                })),
                            or: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    insert: jest.fn(()=>({
                            select: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                }))
                        }))
                }))
        }
    }));
// Mock de security audit
jest.mock('@/lib/auth/security-audit', ()=>({
        logSecurityEvent: jest.fn(),
        logAdminAction: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _usersyncservice = require("../lib/auth/user-sync-service");
const _server = require("@clerk/nextjs/server");
const _supabase = require("../lib/supabase");
describe('Servicio de Sincronización de Usuarios', ()=>{
    let mockClerkClient;
    let mockSupabase;
    beforeEach(()=>{
        mockClerkClient = _server.clerkClient;
        mockSupabase = _supabase.supabaseAdmin;
        jest.clearAllMocks();
    });
    const mockClerkUserData = {
        id: 'user_123',
        email_addresses: [
            {
                email_address: 'test@example.com',
                id: 'email_123',
                verification: {
                    status: 'verified',
                    strategy: 'email_code'
                }
            }
        ],
        first_name: 'John',
        last_name: 'Doe',
        created_at: Date.now(),
        updated_at: Date.now(),
        image_url: 'https://example.com/avatar.jpg',
        public_metadata: {
            role: 'customer'
        }
    };
    describe('syncUserToSupabase', ()=>{
        it('debe crear un nuevo usuario exitosamente', async ()=>{
            // Mock: usuario no existe
            mockSupabase.from().select().or().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            // Mock: rol por defecto existe
            mockSupabase.from().select().eq().eq().single.mockResolvedValue({
                data: {
                    id: 1
                },
                error: null
            });
            // Mock: inserción exitosa
            mockSupabase.from().insert().select().single.mockResolvedValue({
                data: {
                    id: 'user_456',
                    email: 'test@example.com'
                },
                error: null
            });
            const result = await (0, _usersyncservice.syncUserToSupabase)(mockClerkUserData);
            expect(result.success).toBe(true);
            expect(result.action).toBe('created');
            expect(result.userId).toBe('user_456');
        });
        it('debe actualizar un usuario existente', async ()=>{
            const existingUser = {
                id: 'user_456',
                email: 'test@example.com',
                first_name: 'Jane'
            };
            // Mock: usuario existe
            mockSupabase.from().select().or().single.mockResolvedValue({
                data: existingUser,
                error: null
            });
            // Mock: actualización exitosa
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    ...existingUser,
                    first_name: 'John'
                },
                error: null
            });
            const result = await (0, _usersyncservice.syncUserToSupabase)(mockClerkUserData);
            expect(result.success).toBe(true);
            expect(result.action).toBe('updated');
            expect(result.details?.newData.first_name).toBe('John');
        });
        it('debe manejar errores de validación', async ()=>{
            const invalidUserData = {
                ...mockClerkUserData,
                email_addresses: []
            };
            const result = await (0, _usersyncservice.syncUserToSupabase)(invalidUserData);
            expect(result.success).toBe(false);
            expect(result.action).toBe('error');
            expect(result.error).toContain('Al menos un email es requerido');
        });
        it('debe reintentar en caso de error temporal', async ()=>{
            // Mock: primer intento falla, segundo intento exitoso
            mockSupabase.from().select().or().single.mockRejectedValueOnce(new Error('Conexión temporal perdida')).mockResolvedValueOnce({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            mockSupabase.from().select().eq().eq().single.mockResolvedValue({
                data: {
                    id: 1
                },
                error: null
            });
            mockSupabase.from().insert().select().single.mockResolvedValue({
                data: {
                    id: 'user_456'
                },
                error: null
            });
            const result = await (0, _usersyncservice.syncUserToSupabase)(mockClerkUserData, {
                retryAttempts: 2,
                retryDelay: 100
            });
            expect(result.success).toBe(true);
            expect(result.action).toBe('created');
        });
        it('debe fallar después de agotar reintentos', async ()=>{
            // Mock: todos los intentos fallan
            mockSupabase.from().select().or().single.mockRejectedValue(new Error('Error persistente'));
            const result = await (0, _usersyncservice.syncUserToSupabase)(mockClerkUserData, {
                retryAttempts: 2,
                retryDelay: 100
            });
            expect(result.success).toBe(false);
            expect(result.action).toBe('error');
            expect(result.error).toContain('Error después de 2 intentos');
        });
    });
    describe('deleteUserFromSupabase', ()=>{
        it('debe eliminar usuario exitosamente (soft delete)', async ()=>{
            const existingUser = {
                id: 'user_456',
                email: 'test@example.com',
                is_active: true
            };
            // Mock: actualización exitosa (soft delete)
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    ...existingUser,
                    is_active: false
                },
                error: null
            });
            const result = await (0, _usersyncservice.deleteUserFromSupabase)('user_123');
            expect(result.success).toBe(true);
            expect(result.action).toBe('deleted');
        });
        it('debe manejar usuario no encontrado', async ()=>{
            // Mock: usuario no encontrado
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            const result = await (0, _usersyncservice.deleteUserFromSupabase)('user_not_found');
            expect(result.success).toBe(true);
            expect(result.action).toBe('deleted');
            expect(result.details?.message).toContain('Usuario no encontrado');
        });
    });
    describe('syncUserFromClerk', ()=>{
        it('debe sincronizar usuario desde Clerk exitosamente', async ()=>{
            const mockClerkUser = {
                id: 'user_123',
                emailAddresses: [
                    {
                        emailAddress: 'test@example.com',
                        id: 'email_123',
                        verification: {
                            status: 'verified',
                            strategy: 'email_code'
                        }
                    }
                ],
                firstName: 'John',
                lastName: 'Doe',
                createdAt: Date.now(),
                updatedAt: Date.now(),
                imageUrl: 'https://example.com/avatar.jpg',
                phoneNumbers: [],
                publicMetadata: {
                    role: 'customer'
                },
                privateMetadata: {}
            };
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(mockClerkUser)
                }
            });
            // Mock: usuario no existe, crear nuevo
            mockSupabase.from().select().or().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            mockSupabase.from().select().eq().eq().single.mockResolvedValue({
                data: {
                    id: 1
                },
                error: null
            });
            mockSupabase.from().insert().select().single.mockResolvedValue({
                data: {
                    id: 'user_456'
                },
                error: null
            });
            const result = await (0, _usersyncservice.syncUserFromClerk)('user_123');
            expect(result.success).toBe(true);
            expect(result.action).toBe('created');
        });
        it('debe manejar usuario no encontrado en Clerk', async ()=>{
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(null)
                }
            });
            const result = await (0, _usersyncservice.syncUserFromClerk)('user_not_found');
            expect(result.success).toBe(false);
            expect(result.error).toContain('Usuario no encontrado en Clerk');
        });
    });
    describe('bulkSyncUsersFromClerk', ()=>{
        it('debe sincronizar múltiples usuarios exitosamente', async ()=>{
            const mockClerkUsers = [
                {
                    id: 'user_1',
                    emailAddresses: [
                        {
                            emailAddress: 'user1@example.com',
                            id: 'email_1',
                            verification: {
                                status: 'verified'
                            }
                        }
                    ],
                    firstName: 'User',
                    lastName: 'One',
                    createdAt: Date.now(),
                    updatedAt: Date.now(),
                    imageUrl: '',
                    phoneNumbers: [],
                    publicMetadata: {},
                    privateMetadata: {}
                },
                {
                    id: 'user_2',
                    emailAddresses: [
                        {
                            emailAddress: 'user2@example.com',
                            id: 'email_2',
                            verification: {
                                status: 'verified'
                            }
                        }
                    ],
                    firstName: 'User',
                    lastName: 'Two',
                    createdAt: Date.now(),
                    updatedAt: Date.now(),
                    imageUrl: '',
                    phoneNumbers: [],
                    publicMetadata: {},
                    privateMetadata: {}
                }
            ];
            mockClerkClient.mockReturnValue({
                users: {
                    getUserList: jest.fn().mockResolvedValue(mockClerkUsers)
                }
            });
            // Mock: usuarios no existen, crear nuevos
            mockSupabase.from().select().or().single.mockResolvedValue({
                data: null,
                error: {
                    code: 'PGRST116'
                }
            });
            mockSupabase.from().select().eq().eq().single.mockResolvedValue({
                data: {
                    id: 1
                },
                error: null
            });
            mockSupabase.from().insert().select().single.mockResolvedValue({
                data: {
                    id: 'new_user'
                },
                error: null
            });
            const result = await (0, _usersyncservice.bulkSyncUsersFromClerk)({
                batchSize: 2,
                maxUsers: 2
            });
            expect(result.success).toBe(true);
            expect(result.totalProcessed).toBe(2);
            expect(result.successful).toBe(2);
            expect(result.failed).toBe(0);
        });
        it('debe manejar errores en sincronización masiva', async ()=>{
            mockClerkClient.mockReturnValue({
                users: {
                    getUserList: jest.fn().mockRejectedValue(new Error('Error de Clerk'))
                }
            });
            const result = await (0, _usersyncservice.bulkSyncUsersFromClerk)();
            expect(result.success).toBe(false);
            expect(result.failed).toBe(1);
            expect(result.results[0].error).toContain('Error en sincronización masiva');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,