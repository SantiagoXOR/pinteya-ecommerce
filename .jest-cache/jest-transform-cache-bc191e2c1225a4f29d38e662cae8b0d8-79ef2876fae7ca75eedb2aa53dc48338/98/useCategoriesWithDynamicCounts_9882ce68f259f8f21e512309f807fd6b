c5f831b3d5888b01e8e8f205ad9c6b7b
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useCategoriesForFilters () {
        return useCategoriesForFilters;
    },
    get useCategoriesWithDynamicCounts () {
        return useCategoriesWithDynamicCounts;
    },
    get useCategoriesWithStaticCounts () {
        return useCategoriesWithStaticCounts;
    }
});
const _react = require("react");
const _useCategories = require("./useCategories");
const _useFilteredProducts = require("./useFilteredProducts");
const useCategoriesWithDynamicCounts = ({ baseFilters = {}, selectedCategories = [], enableDynamicCounts = true } = {})=>{
    // Obtener categorías base
    const { categories: baseCategories, loading: categoriesLoading, error: categoriesError } = (0, _useCategories.useCategories)();
    // Extraer slugs de categorías para obtener conteos
    const categoryIds = (0, _react.useMemo)(()=>{
        return baseCategories.map((cat)=>cat.slug).filter(Boolean);
    }, [
        baseCategories
    ]);
    // Obtener conteos dinámicos solo si está habilitado
    const { data: dynamicCounts, isLoading: countsLoading, error: countsError } = (0, _useFilteredProducts.useCategoryProductCounts)(enableDynamicCounts ? categoryIds : [], baseFilters);
    // Combinar categorías con conteos dinámicos
    const categoriesWithDynamicCounts = (0, _react.useMemo)(()=>{
        // Si no hay categorías base, retornar array vacío
        if (baseCategories.length === 0) {
            return [];
        }
        return baseCategories.map((category)=>{
            const dynamicCount = enableDynamicCounts && dynamicCounts ? dynamicCounts[category.slug] : undefined;
            return {
                ...category,
                products_count: dynamicCount !== undefined ? dynamicCount : category.products_count || 0,
                isLoading: enableDynamicCounts && countsLoading
            };
        });
    }, [
        baseCategories,
        dynamicCounts,
        enableDynamicCounts,
        countsLoading
    ]);
    // Filtrar categorías seleccionadas si es necesario
    const availableCategories = (0, _react.useMemo)(()=>{
        if (selectedCategories.length === 0) {
            return categoriesWithDynamicCounts;
        }
        // Mostrar todas las categorías, pero marcar las seleccionadas
        return categoriesWithDynamicCounts.map((category)=>({
                ...category,
                isSelected: selectedCategories.includes(category.slug)
            }));
    }, [
        categoriesWithDynamicCounts,
        selectedCategories
    ]);
    // Estados combinados
    const isLoading = categoriesLoading || enableDynamicCounts && countsLoading;
    const error = categoriesError || countsError;
    // Estadísticas útiles
    const stats = (0, _react.useMemo)(()=>{
        const totalCategories = availableCategories.length;
        const categoriesWithProducts = availableCategories.filter((cat)=>cat.products_count > 0).length;
        const totalProducts = availableCategories.reduce((sum, cat)=>sum + cat.products_count, 0);
        const selectedCount = selectedCategories.length;
        return {
            totalCategories,
            categoriesWithProducts,
            totalProducts,
            selectedCount,
            hasSelection: selectedCount > 0
        };
    }, [
        availableCategories,
        selectedCategories
    ]);
    return {
        categories: availableCategories,
        loading: isLoading,
        error,
        stats,
        // Funciones de utilidad
        getCategoryBySlug: (slug)=>availableCategories.find((cat)=>cat.slug === slug),
        getCategoryCount: (slug)=>availableCategories.find((cat)=>cat.slug === slug)?.products_count || 0,
        // Configuración
        enableDynamicCounts,
        baseFilters,
        selectedCategories
    };
};
const useCategoriesForFilters = (searchTerm, selectedCategories = [], otherFilters = {})=>{
    const baseFilters = (0, _react.useMemo)(()=>({
            ...otherFilters,
            ...searchTerm && {
                search: searchTerm
            }
        }), [
        searchTerm,
        otherFilters
    ]);
    return useCategoriesWithDynamicCounts({
        baseFilters,
        selectedCategories,
        enableDynamicCounts: true
    });
};
const useCategoriesWithStaticCounts = ()=>{
    return useCategoriesWithDynamicCounts({
        enableDynamicCounts: false
    });
};

//# sourceMappingURL=data:application/json;base64,