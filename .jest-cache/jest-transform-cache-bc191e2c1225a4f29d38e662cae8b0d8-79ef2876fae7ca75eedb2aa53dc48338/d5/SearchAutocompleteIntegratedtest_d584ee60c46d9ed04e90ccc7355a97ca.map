{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\ui\\SearchAutocompleteIntegrated.test.tsx"],"sourcesContent":["// ===================================\r\n// TESTS: SearchAutocompleteIntegrated - Integración completa\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport { useRouter, useSearchParams, usePathname } from 'next/navigation';\r\nimport { searchProducts } from '@/lib/api/products';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { SearchAutocompleteIntegrated } from '@/components/ui/SearchAutocompleteIntegrated';\r\n\r\n// Mocks - Aplicando Patrón 1 exitoso: Imports faltantes\r\njest.mock('next/navigation', () => ({\r\n  useRouter: jest.fn(),\r\n  useSearchParams: jest.fn(),\r\n  usePathname: jest.fn(),\r\n}));\r\n\r\n// Patrón 3 exitoso: Comportamientos testing - mockear fetch en lugar de searchProducts\r\nglobal.fetch = jest.fn();\r\n\r\n// Mock TanStack Query para testing\r\njest.mock('@tanstack/react-query', () => ({\r\n  useQuery: jest.fn(),\r\n  useQueryClient: jest.fn(),\r\n  QueryClient: jest.fn(),\r\n  QueryClientProvider: ({ children }: any) => children,\r\n}));\r\n\r\njest.mock('@/lib/api/products', () => ({\r\n  searchProducts: jest.fn(),\r\n}));\r\n\r\nconst mockPush = jest.fn();\r\nconst mockPrefetch = jest.fn(); // Patrón 1 exitoso: Import faltante\r\nconst mockSearchProducts = searchProducts as jest.MockedFunction<typeof searchProducts>;\r\nconst mockFetch = global.fetch as jest.MockedFunction<typeof fetch>; // Patrón 3 exitoso: Mock correcto\r\n\r\n// Mocks TanStack Query - Patrón 3 exitoso: Comportamientos testing\r\nconst mockUseQuery = useQuery as jest.MockedFunction<typeof useQuery>;\r\nconst mockUseQueryClient = useQueryClient as jest.MockedFunction<typeof useQueryClient>;\r\n\r\n// Mocks adicionales para Next.js navigation\r\nconst mockSearchParams = jest.fn();\r\nconst mockPathname = jest.fn();\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n\r\n  // Configurar mocks de Next.js navigation - Patrón exitoso aplicado\r\n  (useRouter as jest.Mock).mockReturnValue({\r\n    push: mockPush,\r\n    prefetch: mockPrefetch, // Patrón 1 exitoso: Import faltante agregado\r\n  });\r\n\r\n  (useSearchParams as jest.Mock).mockReturnValue({\r\n    get: jest.fn(() => null),\r\n    has: jest.fn(() => false),\r\n    toString: jest.fn(() => ''),\r\n  });\r\n\r\n  (usePathname as jest.Mock).mockReturnValue('/');\r\n\r\n  // Configurar mock de TanStack Query - Patrón 3 exitoso: Comportamientos testing\r\n  mockUseQuery.mockReturnValue({\r\n    data: [],\r\n    isLoading: false,\r\n    error: null,\r\n    isFetching: false,\r\n    isStale: false,\r\n    dataUpdatedAt: Date.now(),\r\n  } as any);\r\n\r\n  mockUseQueryClient.mockReturnValue({\r\n    prefetchQuery: jest.fn(),\r\n    invalidateQueries: jest.fn(),\r\n  } as any);\r\n\r\n  // Configurar mock de fetch - Patrón 3 exitoso: Mock correcto\r\n  mockFetch.mockResolvedValue({\r\n    ok: true,\r\n    json: async () => ({\r\n      products: [],\r\n      pagination: { total: 0, page: 1, limit: 6, totalPages: 0 },\r\n    }),\r\n  } as Response);\r\n\r\n  // Configurar mock de searchProducts con respuesta por defecto\r\n  mockSearchProducts.mockResolvedValue({\r\n    products: [],\r\n    pagination: { total: 0, page: 1, limit: 6, totalPages: 0 },\r\n  });\r\n  \r\n  // Mock localStorage\r\n  Object.defineProperty(window, 'localStorage', {\r\n    value: {\r\n      getItem: jest.fn(() => null),\r\n      setItem: jest.fn(),\r\n      removeItem: jest.fn(),\r\n      clear: jest.fn(),\r\n    },\r\n    writable: true,\r\n  });\r\n});\r\n\r\ndescribe('SearchAutocompleteIntegrated', () => {\r\n  it('should render with default props', () => {\r\n    render(<SearchAutocompleteIntegrated />);\r\n    \r\n    // Patrón 2 exitoso: Expectativas específicas - usar searchbox en lugar de combobox\r\n    expect(screen.getByRole('searchbox')).toBeInTheDocument();\r\n    expect(screen.getByPlaceholderText('Látex interior blanco 20lts, rodillos, pinceles...')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should integrate with useSearch hook and show suggestions', async () => {\r\n    const mockResponse = {\r\n      products: [\r\n        {\r\n          id: '1',\r\n          name: 'Pintura Látex Blanca',\r\n          category: { name: 'Pinturas' },\r\n          images: { previews: ['/test.jpg'] },\r\n          stock: 10\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Pintura Esmalte Azul',\r\n          category: { name: 'Pinturas' },\r\n          images: { previews: ['/test2.jpg'] },\r\n          stock: 5\r\n        },\r\n      ],\r\n      pagination: { total: 2, page: 1, limit: 6, totalPages: 1 },\r\n    };\r\n\r\n    // Patrón 3 exitoso: Mock correcto - usar fetch en lugar de searchProducts\r\n    mockFetch.mockResolvedValue({\r\n      ok: true,\r\n      json: async () => mockResponse,\r\n    } as Response);\r\n\r\n    render(<SearchAutocompleteIntegrated debounceMs={100} />);\r\n    \r\n    const input = screen.getByRole('searchbox');\r\n    \r\n    await userEvent.type(input, 'pintura');\r\n\r\n    // Esperar más tiempo para el debounce + query execution\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n    // Debug: verificar si fetch fue llamado\r\n    console.log('🔍 Test Debug: fetch calls:', mockFetch.mock.calls.length);\r\n    console.log('🔍 Test Debug: fetch calls details:', mockFetch.mock.calls);\r\n\r\n    // Esperar a que se llame fetch - Patrón 3 exitoso: Expectativa correcta\r\n    await waitFor(() => {\r\n      expect(mockFetch).toHaveBeenCalled();\r\n    }, { timeout: 3000 });\r\n\r\n    // Luego esperar a que aparezcan las sugerencias\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Pintura Látex Blanca')).toBeInTheDocument();\r\n      expect(screen.getByText('Pintura Esmalte Azul')).toBeInTheDocument();\r\n    }, { timeout: 2000 });\r\n\r\n    // Verificar que se llamó a fetch con los parámetros correctos\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringContaining('/api/search?q=pintura&limit=6'),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should execute search on Enter key', async () => {\r\n    const onSearchExecuted = jest.fn();\r\n    const mockResponse = {\r\n      success: true,\r\n      data: [{ id: '1', name: 'Test Product', category: { name: 'Test' } }],\r\n      pagination: { total: 1, page: 1, limit: 12, totalPages: 1 },\r\n    };\r\n\r\n    mockSearchProducts.mockResolvedValue(mockResponse);\r\n\r\n    render(\r\n      <SearchAutocompleteIntegrated \r\n        onSearchExecuted={onSearchExecuted}\r\n        debounceMs={100}\r\n      />\r\n    );\r\n    \r\n    const input = screen.getByRole('searchbox');\r\n    \r\n    await userEvent.type(input, 'test query');\r\n    await userEvent.keyboard('{Enter}');\r\n    \r\n    await waitFor(() => {\r\n      expect(mockPush).toHaveBeenCalledWith('/search?q=test%20query');\r\n    });\r\n  });\r\n\r\n  it('should handle suggestion selection', async () => {\r\n    const onSuggestionSelected = jest.fn();\r\n    const mockResponse = {\r\n      success: true,\r\n      data: [\r\n        { \r\n          id: '1', \r\n          name: 'Test Product', \r\n          category: { name: 'Test Category' },\r\n          images: { previews: ['/test.jpg'] },\r\n          stock: 10\r\n        },\r\n      ],\r\n      pagination: { total: 1, page: 1, limit: 6, totalPages: 1 },\r\n    };\r\n\r\n    mockSearchProducts.mockResolvedValue(mockResponse);\r\n\r\n    render(\r\n      <SearchAutocompleteIntegrated \r\n        onSuggestionSelected={onSuggestionSelected}\r\n        debounceMs={100}\r\n      />\r\n    );\r\n    \r\n    const input = screen.getByRole('searchbox');\r\n    \r\n    await userEvent.type(input, 'test');\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Test Product')).toBeInTheDocument();\r\n    });\r\n\r\n    await userEvent.click(screen.getByText('Test Product'));\r\n    \r\n    expect(onSuggestionSelected).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        title: 'Test Product',\r\n        type: 'product'\r\n      })\r\n    );\r\n  });\r\n\r\n  it('should clear search when clear button is clicked', async () => {\r\n    render(<SearchAutocompleteIntegrated />);\r\n    \r\n    const input = screen.getByRole('searchbox');\r\n    \r\n    await userEvent.type(input, 'test query');\r\n    \r\n    // Buscar el botón de limpiar\r\n    const clearButton = screen.getByLabelText('Clear search');\r\n    await userEvent.click(clearButton);\r\n    \r\n    expect(input).toHaveValue('');\r\n  });\r\n\r\n  it('should show loading state during search', async () => {\r\n    // Mock para simular búsqueda lenta\r\n    mockSearchProducts.mockImplementation(() => \r\n      new Promise(resolve => setTimeout(() => resolve({\r\n        success: true,\r\n        data: [],\r\n        pagination: { total: 0, page: 1, limit: 6, totalPages: 0 },\r\n      }), 1000))\r\n    );\r\n\r\n    render(<SearchAutocompleteIntegrated debounceMs={50} />);\r\n    \r\n    const input = screen.getByRole('searchbox');\r\n    \r\n    await userEvent.type(input, 'test');\r\n    \r\n    // Verificar que aparece el spinner de carga\r\n    await waitFor(() => {\r\n      const spinner = document.querySelector('.animate-spin');\r\n      expect(spinner).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('should handle API errors gracefully', async () => {\r\n    mockSearchProducts.mockRejectedValue(new Error('API Error'));\r\n\r\n    render(<SearchAutocompleteIntegrated debounceMs={50} />);\r\n    \r\n    const input = screen.getByRole('searchbox');\r\n    \r\n    await userEvent.type(input, 'test');\r\n    \r\n    await waitFor(() => {\r\n      expect(mockSearchProducts).toHaveBeenCalled();\r\n    });\r\n\r\n    // El componente no debería crashear y debería mostrar estado sin resultados\r\n    expect(input).toBeInTheDocument();\r\n  });\r\n});\r\n"],"names":["jest","mock","useRouter","fn","useSearchParams","usePathname","useQuery","useQueryClient","QueryClient","QueryClientProvider","children","searchProducts","global","fetch","mockPush","mockPrefetch","mockSearchProducts","mockFetch","mockUseQuery","mockUseQueryClient","mockSearchParams","mockPathname","beforeEach","clearAllMocks","mockReturnValue","push","prefetch","get","has","toString","data","isLoading","error","isFetching","isStale","dataUpdatedAt","Date","now","prefetchQuery","invalidateQueries","mockResolvedValue","ok","json","products","pagination","total","page","limit","totalPages","Object","defineProperty","window","value","getItem","setItem","removeItem","clear","writable","describe","it","render","SearchAutocompleteIntegrated","expect","screen","getByRole","toBeInTheDocument","getByPlaceholderText","mockResponse","id","name","category","images","previews","stock","debounceMs","input","userEvent","type","Promise","resolve","setTimeout","console","log","calls","length","waitFor","toHaveBeenCalled","timeout","getByText","toHaveBeenCalledWith","stringContaining","objectContaining","method","headers","onSearchExecuted","success","keyboard","onSuggestionSelected","click","title","clearButton","getByLabelText","toHaveValue","mockImplementation","spinner","document","querySelector","mockRejectedValue","Error"],"mappings":"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"}