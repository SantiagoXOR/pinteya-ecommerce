{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\setup\\auth-setup.js"],"sourcesContent":["/**\n * Setup específico para autenticación en tests\n * Resuelve problemas de importación de NextAuth y Google Provider\n */\n\n// Mock NextAuth antes de cualquier importación\njest.mock('next-auth', () => {\n  const mockAuth = jest.fn(() => Promise.resolve(null));\n  const mockSignIn = jest.fn();\n  const mockSignOut = jest.fn();\n  const mockHandlers = {\n    GET: jest.fn(),\n    POST: jest.fn(),\n  };\n\n  const mockNextAuth = jest.fn(() => ({\n    handlers: mockHandlers,\n    auth: mockAuth,\n    signIn: mockSignIn,\n    signOut: mockSignOut,\n  }));\n\n  return {\n    __esModule: true,\n    default: mockNextAuth,\n    auth: mockAuth,\n    signIn: mockSignIn,\n    signOut: mockSignOut,\n    handlers: mockHandlers,\n  };\n});\n\n// Mock Google Provider antes de cualquier importación\njest.mock('next-auth/providers/google', () => {\n  const mockGoogleProvider = jest.fn((config) => ({\n    id: 'google',\n    name: 'Google',\n    type: 'oauth',\n    clientId: config?.clientId || 'mock-google-client-id',\n    clientSecret: config?.clientSecret || 'mock-google-client-secret',\n    authorization: {\n      url: 'https://accounts.google.com/oauth/authorize',\n      params: {\n        scope: 'openid email profile',\n        response_type: 'code',\n      },\n    },\n    token: 'https://oauth2.googleapis.com/token',\n    userinfo: 'https://www.googleapis.com/oauth2/v2/userinfo',\n    profile: jest.fn((profile) => ({\n      id: profile.id,\n      name: profile.name,\n      email: profile.email,\n      image: profile.picture,\n    })),\n  }));\n\n  return {\n    __esModule: true,\n    default: mockGoogleProvider,\n  };\n});\n\n// Mock del archivo auth.ts completo\njest.mock('@/auth', () => {\n  const mockAuth = jest.fn(() => Promise.resolve(null));\n  const mockSignIn = jest.fn();\n  const mockSignOut = jest.fn();\n  const mockHandlers = {\n    GET: jest.fn(),\n    POST: jest.fn(),\n  };\n\n  return {\n    __esModule: true,\n    auth: mockAuth,\n    signIn: mockSignIn,\n    signOut: mockSignOut,\n    handlers: mockHandlers,\n    default: {\n      auth: mockAuth,\n      signIn: mockSignIn,\n      signOut: mockSignOut,\n      handlers: mockHandlers,\n    },\n  };\n});\n"],"names":["jest","mock","mockAuth","fn","Promise","resolve","mockSignIn","mockSignOut","mockHandlers","GET","POST","mockNextAuth","handlers","auth","signIn","signOut","__esModule","default","mockGoogleProvider","config","id","name","type","clientId","clientSecret","authorization","url","params","scope","response_type","token","userinfo","profile","email","image","picture"],"mappings":"AAAA;;;CAGC,GAED,+CAA+C;;AAC/CA,KAAKC,IAAI,CAAC,aAAa;IACrB,MAAMC,WAAWF,KAAKG,EAAE,CAAC,IAAMC,QAAQC,OAAO,CAAC;IAC/C,MAAMC,aAAaN,KAAKG,EAAE;IAC1B,MAAMI,cAAcP,KAAKG,EAAE;IAC3B,MAAMK,eAAe;QACnBC,KAAKT,KAAKG,EAAE;QACZO,MAAMV,KAAKG,EAAE;IACf;IAEA,MAAMQ,eAAeX,KAAKG,EAAE,CAAC,IAAO,CAAA;YAClCS,UAAUJ;YACVK,MAAMX;YACNY,QAAQR;YACRS,SAASR;QACX,CAAA;IAEA,OAAO;QACLS,YAAY;QACZC,SAASN;QACTE,MAAMX;QACNY,QAAQR;QACRS,SAASR;QACTK,UAAUJ;IACZ;AACF;AAEA,sDAAsD;AACtDR,KAAKC,IAAI,CAAC,8BAA8B;IACtC,MAAMiB,qBAAqBlB,KAAKG,EAAE,CAAC,CAACgB,SAAY,CAAA;YAC9CC,IAAI;YACJC,MAAM;YACNC,MAAM;YACNC,UAAUJ,QAAQI,YAAY;YAC9BC,cAAcL,QAAQK,gBAAgB;YACtCC,eAAe;gBACbC,KAAK;gBACLC,QAAQ;oBACNC,OAAO;oBACPC,eAAe;gBACjB;YACF;YACAC,OAAO;YACPC,UAAU;YACVC,SAAShC,KAAKG,EAAE,CAAC,CAAC6B,UAAa,CAAA;oBAC7BZ,IAAIY,QAAQZ,EAAE;oBACdC,MAAMW,QAAQX,IAAI;oBAClBY,OAAOD,QAAQC,KAAK;oBACpBC,OAAOF,QAAQG,OAAO;gBACxB,CAAA;QACF,CAAA;IAEA,OAAO;QACLnB,YAAY;QACZC,SAASC;IACX;AACF;AAEA,oCAAoC;AACpClB,KAAKC,IAAI,CAAC,UAAU;IAClB,MAAMC,WAAWF,KAAKG,EAAE,CAAC,IAAMC,QAAQC,OAAO,CAAC;IAC/C,MAAMC,aAAaN,KAAKG,EAAE;IAC1B,MAAMI,cAAcP,KAAKG,EAAE;IAC3B,MAAMK,eAAe;QACnBC,KAAKT,KAAKG,EAAE;QACZO,MAAMV,KAAKG,EAAE;IACf;IAEA,OAAO;QACLa,YAAY;QACZH,MAAMX;QACNY,QAAQR;QACRS,SAASR;QACTK,UAAUJ;QACVS,SAAS;YACPJ,MAAMX;YACNY,QAAQR;YACRS,SAASR;YACTK,UAAUJ;QACZ;IACF;AACF"}