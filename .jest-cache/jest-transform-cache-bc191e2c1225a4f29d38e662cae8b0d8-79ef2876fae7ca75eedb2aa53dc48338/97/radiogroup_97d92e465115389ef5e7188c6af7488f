4e11751ebfb293cf6f574c6473d8fdfe
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PaymentMethodRadio () {
        return PaymentMethodRadio;
    },
    get RadioCard () {
        return RadioCard;
    },
    get RadioGroup () {
        return RadioGroup;
    },
    get RadioGroupItem () {
        return RadioGroupItem;
    },
    get ShippingMethodRadio () {
        return ShippingMethodRadio;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactradiogroup = /*#__PURE__*/ _interop_require_wildcard(require("@radix-ui/react-radio-group"));
const _lucidereact = require("lucide-react");
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const radioGroupVariants = (0, _classvarianceauthority.cva)("grid gap-2", {
    variants: {
        orientation: {
            vertical: "grid-cols-1",
            horizontal: "grid-flow-col auto-cols-max gap-4"
        }
    },
    defaultVariants: {
        orientation: "vertical"
    }
});
const radioItemVariants = (0, _classvarianceauthority.cva)("aspect-square h-4 w-4 rounded-full border border-gray-300 text-primary ring-offset-white focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200", {
    variants: {
        variant: {
            default: "data-[state=checked]:border-primary data-[state=checked]:bg-primary",
            destructive: "data-[state=checked]:border-red-600 data-[state=checked]:bg-red-600",
            success: "data-[state=checked]:border-green-600 data-[state=checked]:bg-green-600",
            warning: "data-[state=checked]:border-yellow-600 data-[state=checked]:bg-yellow-600"
        },
        size: {
            sm: "h-3 w-3",
            md: "h-4 w-4",
            lg: "h-5 w-5"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "md"
    }
});
const RadioGroup = /*#__PURE__*/ _react.forwardRef(({ className, orientation, label, description, error, children, ...props }, ref)=>{
    const hasError = !!error;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-3",
        children: [
            (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-1",
                children: [
                    label && /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        className: (0, _utils.cn)("text-sm font-medium text-gray-900", hasError && "text-red-600"),
                        children: [
                            label,
                            props.required && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-red-500 ml-1",
                                children: "*"
                            })
                        ]
                    }),
                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: (0, _utils.cn)("text-xs text-gray-600", hasError && "text-red-500"),
                        children: description
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactradiogroup.Root, {
                className: (0, _utils.cn)(radioGroupVariants({
                    orientation
                }), className),
                ...props,
                ref: ref,
                children: children
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: "text-xs text-red-600",
                children: error
            })
        ]
    });
});
RadioGroup.displayName = _reactradiogroup.Root.displayName;
const RadioGroupItem = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, label, description, id, ...props }, ref)=>{
    const generatedId = _react.useId();
    const itemId = id || generatedId;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "flex items-start space-x-2",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactradiogroup.Item, {
                ref: ref,
                id: itemId,
                className: (0, _utils.cn)(radioItemVariants({
                    variant,
                    size
                }), className),
                ...props,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactradiogroup.Indicator, {
                    className: "flex items-center justify-center",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Circle, {
                        className: "h-2.5 w-2.5 fill-current text-white"
                    })
                })
            }),
            (label || description) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "grid gap-1.5 leading-none",
                children: [
                    label && /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: itemId,
                        className: "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer",
                        children: label
                    }),
                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-xs text-gray-600",
                        children: description
                    })
                ]
            })
        ]
    });
});
RadioGroupItem.displayName = _reactradiogroup.Item.displayName;
const RadioCard = /*#__PURE__*/ _react.forwardRef(({ className, label, description, icon, price, badge, disabled, id, ...props }, ref)=>{
    const generatedId = _react.useId();
    const itemId = id || generatedId;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "relative",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactradiogroup.Item, {
                ref: ref,
                id: itemId,
                className: (0, _utils.cn)("peer sr-only", disabled && "cursor-not-allowed"),
                disabled: disabled,
                ...props
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                htmlFor: itemId,
                className: (0, _utils.cn)("flex cursor-pointer select-none items-center justify-between rounded-lg border-2 border-gray-200 bg-white p-4 transition-all duration-200", "hover:border-primary/50 hover:bg-primary/5", "peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary/10", "peer-disabled:cursor-not-allowed peer-disabled:opacity-50", disabled && "cursor-not-allowed opacity-50", className),
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-3",
                        children: [
                            icon && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600",
                                children: icon
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "space-y-1",
                                children: [
                                    label && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-sm font-medium text-gray-900",
                                        children: label
                                    }),
                                    description && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-xs text-gray-600",
                                        children: description
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-2",
                        children: [
                            price && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-sm font-semibold text-primary",
                                children: price
                            }),
                            badge && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "rounded-full bg-green-100 px-2 py-1 text-xs font-medium text-green-800",
                                children: badge
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "flex h-4 w-4 items-center justify-center rounded-full border-2 border-gray-300 peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "h-2 w-2 rounded-full bg-white opacity-0 peer-data-[state=checked]:opacity-100"
                                })
                            })
                        ]
                    })
                ]
            })
        ]
    });
});
RadioCard.displayName = "RadioCard";
function ShippingMethodRadio({ methods, value, onValueChange, label = "Método de envío", error }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(RadioGroup, {
        value: value,
        onValueChange: onValueChange,
        label: label,
        error: error,
        children: methods.map((method)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(RadioCard, {
                value: method.id,
                label: method.name,
                description: method.description,
                price: method.price,
                badge: method.badge,
                icon: method.icon
            }, method.id))
    });
}
function PaymentMethodRadio({ methods, value, onValueChange, label = "Método de pago", error }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(RadioGroup, {
        value: value,
        onValueChange: onValueChange,
        label: label,
        error: error,
        children: methods.map((method)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(RadioCard, {
                value: method.id,
                label: method.name,
                description: method.description,
                badge: method.badge,
                icon: method.icon,
                disabled: method.disabled
            }, method.id))
    });
}

//# sourceMappingURL=data:application/json;base64,