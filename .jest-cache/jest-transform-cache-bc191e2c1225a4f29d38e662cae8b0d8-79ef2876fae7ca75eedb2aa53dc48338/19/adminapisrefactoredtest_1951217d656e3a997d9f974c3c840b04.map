{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\admin-apis-refactored.test.ts"],"sourcesContent":["/**\n * Tests para APIs Admin Refactorizadas\n * Verifica que las APIs admin refactorizadas funcionan con utilidades enterprise + RLS\n */\n\n// Mock de utilidades enterprise\njest.mock('@/lib/auth/enterprise-auth-utils', () => ({\n  requireAdminAuth: jest.fn(),\n  requireCriticalAuth: jest.fn()\n}));\n\njest.mock('@/lib/auth/enterprise-rls-utils', () => ({\n  executeWithRLS: jest.fn(),\n  validateRLSContext: jest.fn(),\n  checkRLSPermission: jest.fn(),\n  createRLSFilters: jest.fn()\n}));\n\njest.mock('@/lib/auth/enterprise-cache', () => ({\n  withCache: jest.fn(),\n  getCacheStats: jest.fn(),\n  invalidateUserCache: jest.fn()\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    auth: {\n      admin: {\n        listUsers: jest.fn(),\n        createUser: jest.fn()\n      }\n    },\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\nimport { NextRequest } from 'next/server';\nimport { \n  requireAdminAuth,\n  requireCriticalAuth \n} from '@/lib/auth/enterprise-auth-utils';\nimport {\n  executeWithRLS,\n  validateRLSContext,\n  checkRLSPermission,\n  createRLSFilters\n} from '@/lib/auth/enterprise-rls-utils';\nimport {\n  withCache,\n  getCacheStats,\n  invalidateUserCache\n} from '@/lib/auth/enterprise-cache';\n\ndescribe('APIs Admin Refactorizadas', () => {\n  let mockRequireAdminAuth: jest.MockedFunction<typeof requireAdminAuth>;\n  let mockRequireCriticalAuth: jest.MockedFunction<typeof requireCriticalAuth>;\n  let mockExecuteWithRLS: jest.MockedFunction<typeof executeWithRLS>;\n  let mockWithCache: jest.MockedFunction<typeof withCache>;\n  let mockGetCacheStats: jest.MockedFunction<typeof getCacheStats>;\n\n  beforeEach(() => {\n    mockRequireAdminAuth = requireAdminAuth as jest.MockedFunction<typeof requireAdminAuth>;\n    mockRequireCriticalAuth = requireCriticalAuth as jest.MockedFunction<typeof requireCriticalAuth>;\n    mockExecuteWithRLS = executeWithRLS as jest.MockedFunction<typeof executeWithRLS>;\n    mockWithCache = withCache as jest.MockedFunction<typeof withCache>;\n    mockGetCacheStats = getCacheStats as jest.MockedFunction<typeof getCacheStats>;\n\n    jest.clearAllMocks();\n\n    // Setup default mocks\n    mockRequireAdminAuth.mockResolvedValue({\n      success: true,\n      context: {\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        email: 'admin@test.com',\n        role: 'admin',\n        permissions: ['admin_access', 'user_management', 'products_read'],\n        sessionValid: true,\n        securityLevel: 'critical',\n        ipAddress: '127.0.0.1',\n        userAgent: 'test-agent',\n        supabase: {} as any,\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      }\n    });\n\n    mockRequireCriticalAuth.mockResolvedValue({\n      success: true,\n      context: {\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        email: 'admin@test.com',\n        role: 'admin',\n        permissions: ['admin_access', 'admin_create'],\n        sessionValid: true,\n        securityLevel: 'critical',\n        ipAddress: '127.0.0.1',\n        userAgent: 'test-agent',\n        supabase: {} as any,\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      }\n    });\n\n    mockExecuteWithRLS.mockResolvedValue({\n      success: true,\n      data: { test: 'data' }\n    });\n\n    mockWithCache.mockImplementation(async (key, fetcher) => {\n      return await fetcher();\n    });\n\n    mockGetCacheStats.mockReturnValue({\n      hits: 10,\n      misses: 2,\n      entries: 5,\n      hitRate: 83.33,\n      memoryUsage: 1024\n    });\n  });\n\n  describe('API de Debug Check Admin Access', () => {\n    it('debe usar autenticación enterprise y legacy para comparación', async () => {\n      // Mock de la API\n      const { GET } = require('@/app/api/debug/check-admin-access/route');\n      \n      const mockRequest = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/debug/check-admin-access',\n        headers: new Map([['user-agent', 'test-agent']])\n      } as any;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(mockRequireAdminAuth).toHaveBeenCalledWith(mockRequest, ['admin_access']);\n      expect(responseData.success).toBe(true);\n      expect(responseData.enterprise).toBeDefined();\n      expect(responseData.legacy).toBeDefined();\n      expect(responseData.migration.status).toBe('ENTERPRISE_COMPLETED');\n    });\n\n    it('debe manejar fallo de autenticación enterprise', async () => {\n      mockRequireAdminAuth.mockResolvedValue({\n        success: false,\n        error: 'Authentication failed',\n        code: 'AUTH_FAILED',\n        status: 401\n      });\n\n      const { GET } = require('@/app/api/debug/check-admin-access/route');\n      \n      const mockRequest = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/debug/check-admin-access',\n        headers: new Map()\n      } as any;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(responseData.enterprise.status).toBe('FAILED');\n      expect(responseData.enterprise.error).toBe('Authentication failed');\n    });\n  });\n\n  describe('API de Debug Admin Products', () => {\n    it('debe usar RLS para consultar productos', async () => {\n      mockExecuteWithRLS.mockResolvedValue({\n        success: true,\n        data: [\n          { id: 1, name: 'Product 1', price: 100 },\n          { id: 2, name: 'Product 2', price: 200 }\n        ]\n      });\n\n      const { GET } = require('@/app/api/debug/admin-products/route');\n      \n      const mockRequest = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/debug/admin-products',\n        headers: new Map()\n      } as any;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(mockRequireAdminAuth).toHaveBeenCalledWith(mockRequest, ['products_read']);\n      expect(mockExecuteWithRLS).toHaveBeenCalled();\n      expect(responseData.enterprise.rls.products_found).toBe(2);\n      expect(responseData.enterprise.rls.sample_products).toHaveLength(2);\n    });\n\n    it('debe comparar métodos enterprise y legacy', async () => {\n      const { GET } = require('@/app/api/debug/admin-products/route');\n      \n      const mockRequest = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/debug/admin-products'\n      } as any;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(responseData.comparison).toBeDefined();\n      expect(responseData.comparison.enterprise_advantages).toContain('RLS integration with automatic filters');\n      expect(responseData.enterprise).toBeDefined();\n      expect(responseData.legacy).toBeDefined();\n    });\n  });\n\n  describe('API de Seguridad Enterprise', () => {\n    it('debe usar cache enterprise para métricas', async () => {\n      const mockMetrics = {\n        total_events: 100,\n        security_alerts: 5,\n        failed_logins: 10\n      };\n\n      mockWithCache.mockResolvedValue(mockMetrics);\n\n      // Mock de la función getSecurityMetrics\n      jest.doMock('@/lib/auth/security-audit-enhanced', () => ({\n        getSecurityMetrics: jest.fn().mockResolvedValue(mockMetrics)\n      }));\n\n      const { GET } = require('@/app/api/auth/security/route');\n      \n      const mockRequest = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/auth/security?action=metrics',\n        headers: new Map()\n      } as any;\n\n      const response = await GET(mockRequest);\n      const responseData = await response.json();\n\n      expect(mockRequireAdminAuth).toHaveBeenCalledWith(mockRequest, ['security_read', 'admin_access']);\n      expect(mockWithCache).toHaveBeenCalled();\n      expect(responseData.data.metrics).toEqual(mockMetrics);\n      expect(responseData.data.cache).toBeDefined();\n      expect(responseData.enterprise).toBe(true);\n    });\n  });\n\n  describe('API de Creación de Admin Enterprise', () => {\n    it('debe usar autenticación crítica para crear admin', async () => {\n      mockExecuteWithRLS.mockResolvedValue({\n        success: true,\n        data: {\n          action: 'created',\n          authUser: { id: 'auth_123', email: 'new-admin@test.com' },\n          profile: {\n            id: 'profile_123',\n            first_name: 'New',\n            last_name: 'Admin',\n            permissions: ['admin_access'],\n            user_roles: { role_name: 'admin' }\n          }\n        }\n      });\n\n      const { POST } = require('@/app/api/admin/create-admin-user-enterprise/route');\n      \n      const mockRequest = {\n        method: 'POST',\n        json: jest.fn().mockResolvedValue({\n          securityKey: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\n          email: 'new-admin@test.com',\n          password: 'SecurePassword123!',\n          firstName: 'New',\n          lastName: 'Admin'\n        })\n      } as any;\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(mockRequireCriticalAuth).toHaveBeenCalledWith(mockRequest);\n      expect(mockExecuteWithRLS).toHaveBeenCalled();\n      expect(responseData.success).toBe(true);\n      expect(responseData.data.action).toBe('created');\n      expect(responseData.enterprise.security_level).toBe('critical');\n    });\n\n    it('debe validar contraseña robusta', async () => {\n      const { POST } = require('@/app/api/admin/create-admin-user-enterprise/route');\n      \n      const mockRequest = {\n        method: 'POST',\n        json: jest.fn().mockResolvedValue({\n          securityKey: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\n          email: 'new-admin@test.com',\n          password: 'weak', // Contraseña débil\n          firstName: 'New',\n          lastName: 'Admin'\n        })\n      } as any;\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.error).toContain('12 caracteres');\n      expect(responseData.code).toBe('WEAK_PASSWORD');\n    });\n\n    it('debe validar clave de seguridad', async () => {\n      const { POST } = require('@/app/api/admin/create-admin-user-enterprise/route');\n      \n      const mockRequest = {\n        method: 'POST',\n        json: jest.fn().mockResolvedValue({\n          securityKey: 'WRONG_KEY',\n          email: 'new-admin@test.com',\n          password: 'SecurePassword123!'\n        })\n      } as any;\n\n      const response = await POST(mockRequest);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(responseData.error).toContain('Clave de seguridad enterprise incorrecta');\n      expect(responseData.code).toBe('INVALID_SECURITY_KEY');\n    });\n  });\n\n  describe('Integración General', () => {\n    it('debe usar cache stats en todas las APIs enterprise', () => {\n      expect(mockGetCacheStats).toHaveBeenCalled();\n    });\n\n    it('debe usar RLS en operaciones de base de datos', () => {\n      expect(mockExecuteWithRLS).toHaveBeenCalled();\n    });\n\n    it('debe requerir permisos específicos para cada operación', () => {\n      expect(mockRequireAdminAuth).toHaveBeenCalledWith(\n        expect.any(Object),\n        expect.arrayContaining([expect.any(String)])\n      );\n    });\n  });\n});\n"],"names":["jest","mock","requireAdminAuth","fn","requireCriticalAuth","executeWithRLS","validateRLSContext","checkRLSPermission","createRLSFilters","withCache","getCacheStats","invalidateUserCache","supabaseAdmin","auth","admin","listUsers","createUser","from","select","eq","single","insert","update","describe","mockRequireAdminAuth","mockRequireCriticalAuth","mockExecuteWithRLS","mockWithCache","mockGetCacheStats","beforeEach","clearAllMocks","mockResolvedValue","success","context","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","data","test","mockImplementation","key","fetcher","mockReturnValue","hits","misses","entries","hitRate","memoryUsage","it","GET","require","mockRequest","method","url","headers","Map","response","responseData","json","expect","toHaveBeenCalledWith","toBe","enterprise","toBeDefined","legacy","migration","status","error","code","id","name","price","toHaveBeenCalled","rls","products_found","sample_products","toHaveLength","comparison","enterprise_advantages","toContain","mockMetrics","total_events","security_alerts","failed_logins","doMock","getSecurityMetrics","metrics","toEqual","cache","action","authUser","profile","first_name","last_name","user_roles","role_name","POST","securityKey","password","firstName","lastName","security_level","any","Object","arrayContaining","String"],"mappings":"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"}