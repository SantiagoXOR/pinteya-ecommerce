{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ui\\textarea.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst textareaVariants = cva(\r\n  \"flex min-h-[80px] w-full rounded-md border bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 resize-none transition-all duration-200\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border-gray-300 focus-visible:border-primary focus-visible:ring-primary/20\",\r\n        error: \"border-red-500 focus-visible:border-red-500 focus-visible:ring-red-500/20\",\r\n        success: \"border-green-500 focus-visible:border-green-500 focus-visible:ring-green-500/20\",\r\n      },\r\n      size: {\r\n        sm: \"min-h-[60px] px-2 py-1 text-xs\",\r\n        md: \"min-h-[80px] px-3 py-2 text-sm\",\r\n        lg: \"min-h-[100px] px-4 py-3 text-base\",\r\n      },\r\n      resize: {\r\n        none: \"resize-none\",\r\n        vertical: \"resize-y\",\r\n        horizontal: \"resize-x\",\r\n        both: \"resize\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"md\",\r\n      resize: \"vertical\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface TextareaProps\r\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement>,\r\n    VariantProps<typeof textareaVariants> {\r\n  label?: string\r\n  description?: string\r\n  error?: string\r\n  helperText?: string\r\n  maxLength?: number\r\n  showCharCount?: boolean\r\n  autoResize?: boolean\r\n}\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  ({ \r\n    className, \r\n    variant, \r\n    size, \r\n    resize,\r\n    label,\r\n    description,\r\n    error,\r\n    helperText,\r\n    maxLength,\r\n    showCharCount = false,\r\n    autoResize = false,\r\n    id,\r\n    value,\r\n    onChange,\r\n    ...props \r\n  }, ref) => {\r\n    const generatedId = React.useId()\r\n    const textareaId = id || generatedId\r\n    const hasError = !!error\r\n    const finalVariant = hasError ? \"error\" : variant\r\n    const [charCount, setCharCount] = React.useState(0)\r\n    const textareaRef = React.useRef<HTMLTextAreaElement>(null)\r\n\r\n    // Combinar refs\r\n    React.useImperativeHandle(ref, () => textareaRef.current!)\r\n\r\n    // Auto resize functionality\r\n    const adjustHeight = React.useCallback(() => {\r\n      const textarea = textareaRef.current\r\n      if (textarea && autoResize) {\r\n        textarea.style.height = 'auto'\r\n        textarea.style.height = `${textarea.scrollHeight}px`\r\n      }\r\n    }, [autoResize])\r\n\r\n    // Handle change with character count\r\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n      const newValue = e.target.value\r\n      \r\n      // Enforce max length\r\n      if (maxLength && newValue.length > maxLength) {\r\n        return\r\n      }\r\n      \r\n      setCharCount(newValue.length)\r\n      \r\n      if (autoResize) {\r\n        adjustHeight()\r\n      }\r\n      \r\n      onChange?.(e)\r\n    }\r\n\r\n    // Initialize character count\r\n    React.useEffect(() => {\r\n      if (value) {\r\n        setCharCount(String(value).length)\r\n      }\r\n    }, [value])\r\n\r\n    // Adjust height on mount if autoResize is enabled\r\n    React.useEffect(() => {\r\n      if (autoResize) {\r\n        adjustHeight()\r\n      }\r\n    }, [adjustHeight, autoResize])\r\n\r\n    return (\r\n      <div className=\"w-full space-y-2\">\r\n        {(label || description) && (\r\n          <div className=\"space-y-1\">\r\n            {label && (\r\n              <label \r\n                htmlFor={textareaId}\r\n                className={cn(\r\n                  \"block text-sm font-medium text-gray-700\",\r\n                  hasError && \"text-red-600\"\r\n                )}\r\n              >\r\n                {label}\r\n                {props.required && <span className=\"text-red-500 ml-1\">*</span>}\r\n              </label>\r\n            )}\r\n            {description && (\r\n              <p className={cn(\r\n                \"text-xs text-gray-600\",\r\n                hasError && \"text-red-500\"\r\n              )}>\r\n                {description}\r\n              </p>\r\n            )}\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"relative\">\r\n          <textarea\r\n            ref={textareaRef}\r\n            id={textareaId}\r\n            className={cn(\r\n              textareaVariants({ variant: finalVariant, size, resize }),\r\n              autoResize && \"overflow-hidden\",\r\n              className\r\n            )}\r\n            value={value}\r\n            onChange={handleChange}\r\n            maxLength={maxLength}\r\n            {...props}\r\n          />\r\n          \r\n          {(showCharCount || maxLength) && (\r\n            <div className=\"absolute bottom-2 right-2 text-xs text-gray-500\">\r\n              {showCharCount && (\r\n                <span className={cn(\r\n                  maxLength && charCount > maxLength * 0.9 && \"text-yellow-600\",\r\n                  maxLength && charCount === maxLength && \"text-red-600\"\r\n                )}>\r\n                  {charCount}\r\n                  {maxLength && `/${maxLength}`}\r\n                </span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {(error || helperText) && (\r\n          <div className=\"space-y-1\">\r\n            {error && (\r\n              <p className=\"text-xs text-red-600\">{error}</p>\r\n            )}\r\n            {helperText && !error && (\r\n              <p className=\"text-xs text-gray-600\">{helperText}</p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n)\r\nTextarea.displayName = \"Textarea\"\r\n\r\n// Textarea específico para comentarios/reviews\r\nexport interface ReviewTextareaProps extends Omit<TextareaProps, 'placeholder' | 'maxLength'> {\r\n  productName?: string\r\n}\r\n\r\nexport const ReviewTextarea = React.forwardRef<HTMLTextAreaElement, ReviewTextareaProps>(\r\n  ({ productName, label, ...props }, ref) => {\r\n    const defaultLabel = productName \r\n      ? `Escribe tu reseña sobre ${productName}`\r\n      : \"Escribe tu reseña\"\r\n    \r\n    return (\r\n      <Textarea\r\n        ref={ref}\r\n        label={label || defaultLabel}\r\n        placeholder=\"Comparte tu experiencia con este producto. ¿Qué te gustó? ¿Lo recomendarías?\"\r\n        maxLength={500}\r\n        showCharCount\r\n        autoResize\r\n        size=\"lg\"\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nReviewTextarea.displayName = \"ReviewTextarea\"\r\n\r\n// Textarea para consultas de productos\r\nexport interface ProductInquiryTextareaProps extends Omit<TextareaProps, 'placeholder' | 'label'> {\r\n  productName?: string\r\n}\r\n\r\nexport const ProductInquiryTextarea = React.forwardRef<HTMLTextAreaElement, ProductInquiryTextareaProps>(\r\n  ({ productName, ...props }, ref) => {\r\n    const placeholder = productName\r\n      ? `Haz tu consulta sobre ${productName}...`\r\n      : \"Escribe tu consulta sobre este producto...\"\r\n    \r\n    return (\r\n      <Textarea\r\n        ref={ref}\r\n        label=\"Tu consulta\"\r\n        placeholder={placeholder}\r\n        description=\"Nuestro equipo te responderá a la brevedad\"\r\n        maxLength={300}\r\n        showCharCount\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nProductInquiryTextarea.displayName = \"ProductInquiryTextarea\"\r\n\r\nexport { Textarea }\r\n"],"names":["ProductInquiryTextarea","ReviewTextarea","Textarea","textareaVariants","cva","variants","variant","default","error","success","size","sm","md","lg","resize","none","vertical","horizontal","both","defaultVariants","React","forwardRef","className","label","description","helperText","maxLength","showCharCount","autoResize","id","value","onChange","props","ref","generatedId","useId","textareaId","hasError","finalVariant","charCount","setCharCount","useState","textareaRef","useRef","useImperativeHandle","current","adjustHeight","useCallback","textarea","style","height","scrollHeight","handleChange","e","newValue","target","length","useEffect","String","div","htmlFor","cn","required","span","p","displayName","productName","defaultLabel","placeholder"],"mappings":"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"}