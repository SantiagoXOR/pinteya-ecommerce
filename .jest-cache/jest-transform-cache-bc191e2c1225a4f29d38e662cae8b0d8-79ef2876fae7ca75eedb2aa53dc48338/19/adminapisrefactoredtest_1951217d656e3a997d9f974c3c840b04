ccab677ce2ee844ea7d7afcd4b80a6af
/**
 * Tests para APIs Admin Refactorizadas
 * Verifica que las APIs admin refactorizadas funcionan con utilidades enterprise + RLS
 */ // Mock de utilidades enterprise
"use strict";
jest.mock('@/lib/auth/enterprise-auth-utils', ()=>({
        requireAdminAuth: jest.fn(),
        requireCriticalAuth: jest.fn()
    }));
jest.mock('@/lib/auth/enterprise-rls-utils', ()=>({
        executeWithRLS: jest.fn(),
        validateRLSContext: jest.fn(),
        checkRLSPermission: jest.fn(),
        createRLSFilters: jest.fn()
    }));
jest.mock('@/lib/auth/enterprise-cache', ()=>({
        withCache: jest.fn(),
        getCacheStats: jest.fn(),
        invalidateUserCache: jest.fn()
    }));
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            auth: {
                admin: {
                    listUsers: jest.fn(),
                    createUser: jest.fn()
                }
            },
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    insert: jest.fn(()=>({
                            select: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                }))
                        }))
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _enterpriseauthutils = require("../lib/auth/enterprise-auth-utils");
const _enterpriserlsutils = require("../lib/auth/enterprise-rls-utils");
const _enterprisecache = require("../lib/auth/enterprise-cache");
describe('APIs Admin Refactorizadas', ()=>{
    let mockRequireAdminAuth;
    let mockRequireCriticalAuth;
    let mockExecuteWithRLS;
    let mockWithCache;
    let mockGetCacheStats;
    beforeEach(()=>{
        mockRequireAdminAuth = _enterpriseauthutils.requireAdminAuth;
        mockRequireCriticalAuth = _enterpriseauthutils.requireCriticalAuth;
        mockExecuteWithRLS = _enterpriserlsutils.executeWithRLS;
        mockWithCache = _enterprisecache.withCache;
        mockGetCacheStats = _enterprisecache.getCacheStats;
        jest.clearAllMocks();
        // Setup default mocks
        mockRequireAdminAuth.mockResolvedValue({
            success: true,
            context: {
                userId: 'user_123',
                sessionId: 'sess_123',
                email: 'admin@test.com',
                role: 'admin',
                permissions: [
                    'admin_access',
                    'user_management',
                    'products_read'
                ],
                sessionValid: true,
                securityLevel: 'critical',
                ipAddress: '127.0.0.1',
                userAgent: 'test-agent',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            }
        });
        mockRequireCriticalAuth.mockResolvedValue({
            success: true,
            context: {
                userId: 'user_123',
                sessionId: 'sess_123',
                email: 'admin@test.com',
                role: 'admin',
                permissions: [
                    'admin_access',
                    'admin_create'
                ],
                sessionValid: true,
                securityLevel: 'critical',
                ipAddress: '127.0.0.1',
                userAgent: 'test-agent',
                supabase: {},
                validations: {
                    jwtValid: true,
                    csrfValid: true,
                    rateLimitPassed: true,
                    originValid: true
                }
            }
        });
        mockExecuteWithRLS.mockResolvedValue({
            success: true,
            data: {
                test: 'data'
            }
        });
        mockWithCache.mockImplementation(async (key, fetcher)=>{
            return await fetcher();
        });
        mockGetCacheStats.mockReturnValue({
            hits: 10,
            misses: 2,
            entries: 5,
            hitRate: 83.33,
            memoryUsage: 1024
        });
    });
    describe('API de Debug Check Admin Access', ()=>{
        it('debe usar autenticación enterprise y legacy para comparación', async ()=>{
            // Mock de la API
            const { GET } = require('@/app/api/debug/check-admin-access/route');
            const mockRequest = {
                method: 'GET',
                url: 'http://localhost:3000/api/debug/check-admin-access',
                headers: new Map([
                    [
                        'user-agent',
                        'test-agent'
                    ]
                ])
            };
            const response = await GET(mockRequest);
            const responseData = await response.json();
            expect(mockRequireAdminAuth).toHaveBeenCalledWith(mockRequest, [
                'admin_access'
            ]);
            expect(responseData.success).toBe(true);
            expect(responseData.enterprise).toBeDefined();
            expect(responseData.legacy).toBeDefined();
            expect(responseData.migration.status).toBe('ENTERPRISE_COMPLETED');
        });
        it('debe manejar fallo de autenticación enterprise', async ()=>{
            mockRequireAdminAuth.mockResolvedValue({
                success: false,
                error: 'Authentication failed',
                code: 'AUTH_FAILED',
                status: 401
            });
            const { GET } = require('@/app/api/debug/check-admin-access/route');
            const mockRequest = {
                method: 'GET',
                url: 'http://localhost:3000/api/debug/check-admin-access',
                headers: new Map()
            };
            const response = await GET(mockRequest);
            const responseData = await response.json();
            expect(responseData.enterprise.status).toBe('FAILED');
            expect(responseData.enterprise.error).toBe('Authentication failed');
        });
    });
    describe('API de Debug Admin Products', ()=>{
        it('debe usar RLS para consultar productos', async ()=>{
            mockExecuteWithRLS.mockResolvedValue({
                success: true,
                data: [
                    {
                        id: 1,
                        name: 'Product 1',
                        price: 100
                    },
                    {
                        id: 2,
                        name: 'Product 2',
                        price: 200
                    }
                ]
            });
            const { GET } = require('@/app/api/debug/admin-products/route');
            const mockRequest = {
                method: 'GET',
                url: 'http://localhost:3000/api/debug/admin-products',
                headers: new Map()
            };
            const response = await GET(mockRequest);
            const responseData = await response.json();
            expect(mockRequireAdminAuth).toHaveBeenCalledWith(mockRequest, [
                'products_read'
            ]);
            expect(mockExecuteWithRLS).toHaveBeenCalled();
            expect(responseData.enterprise.rls.products_found).toBe(2);
            expect(responseData.enterprise.rls.sample_products).toHaveLength(2);
        });
        it('debe comparar métodos enterprise y legacy', async ()=>{
            const { GET } = require('@/app/api/debug/admin-products/route');
            const mockRequest = {
                method: 'GET',
                url: 'http://localhost:3000/api/debug/admin-products'
            };
            const response = await GET(mockRequest);
            const responseData = await response.json();
            expect(responseData.comparison).toBeDefined();
            expect(responseData.comparison.enterprise_advantages).toContain('RLS integration with automatic filters');
            expect(responseData.enterprise).toBeDefined();
            expect(responseData.legacy).toBeDefined();
        });
    });
    describe('API de Seguridad Enterprise', ()=>{
        it('debe usar cache enterprise para métricas', async ()=>{
            const mockMetrics = {
                total_events: 100,
                security_alerts: 5,
                failed_logins: 10
            };
            mockWithCache.mockResolvedValue(mockMetrics);
            // Mock de la función getSecurityMetrics
            jest.doMock('@/lib/auth/security-audit-enhanced', ()=>({
                    getSecurityMetrics: jest.fn().mockResolvedValue(mockMetrics)
                }));
            const { GET } = require('@/app/api/auth/security/route');
            const mockRequest = {
                method: 'GET',
                url: 'http://localhost:3000/api/auth/security?action=metrics',
                headers: new Map()
            };
            const response = await GET(mockRequest);
            const responseData = await response.json();
            expect(mockRequireAdminAuth).toHaveBeenCalledWith(mockRequest, [
                'security_read',
                'admin_access'
            ]);
            expect(mockWithCache).toHaveBeenCalled();
            expect(responseData.data.metrics).toEqual(mockMetrics);
            expect(responseData.data.cache).toBeDefined();
            expect(responseData.enterprise).toBe(true);
        });
    });
    describe('API de Creación de Admin Enterprise', ()=>{
        it('debe usar autenticación crítica para crear admin', async ()=>{
            mockExecuteWithRLS.mockResolvedValue({
                success: true,
                data: {
                    action: 'created',
                    authUser: {
                        id: 'auth_123',
                        email: 'new-admin@test.com'
                    },
                    profile: {
                        id: 'profile_123',
                        first_name: 'New',
                        last_name: 'Admin',
                        permissions: [
                            'admin_access'
                        ],
                        user_roles: {
                            role_name: 'admin'
                        }
                    }
                }
            });
            const { POST } = require('@/app/api/admin/create-admin-user-enterprise/route');
            const mockRequest = {
                method: 'POST',
                json: jest.fn().mockResolvedValue({
                    securityKey: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',
                    email: 'new-admin@test.com',
                    password: 'SecurePassword123!',
                    firstName: 'New',
                    lastName: 'Admin'
                })
            };
            const response = await POST(mockRequest);
            const responseData = await response.json();
            expect(mockRequireCriticalAuth).toHaveBeenCalledWith(mockRequest);
            expect(mockExecuteWithRLS).toHaveBeenCalled();
            expect(responseData.success).toBe(true);
            expect(responseData.data.action).toBe('created');
            expect(responseData.enterprise.security_level).toBe('critical');
        });
        it('debe validar contraseña robusta', async ()=>{
            const { POST } = require('@/app/api/admin/create-admin-user-enterprise/route');
            const mockRequest = {
                method: 'POST',
                json: jest.fn().mockResolvedValue({
                    securityKey: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',
                    email: 'new-admin@test.com',
                    password: 'weak',
                    firstName: 'New',
                    lastName: 'Admin'
                })
            };
            const response = await POST(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(400);
            expect(responseData.error).toContain('12 caracteres');
            expect(responseData.code).toBe('WEAK_PASSWORD');
        });
        it('debe validar clave de seguridad', async ()=>{
            const { POST } = require('@/app/api/admin/create-admin-user-enterprise/route');
            const mockRequest = {
                method: 'POST',
                json: jest.fn().mockResolvedValue({
                    securityKey: 'WRONG_KEY',
                    email: 'new-admin@test.com',
                    password: 'SecurePassword123!'
                })
            };
            const response = await POST(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(403);
            expect(responseData.error).toContain('Clave de seguridad enterprise incorrecta');
            expect(responseData.code).toBe('INVALID_SECURITY_KEY');
        });
    });
    describe('Integración General', ()=>{
        it('debe usar cache stats en todas las APIs enterprise', ()=>{
            expect(mockGetCacheStats).toHaveBeenCalled();
        });
        it('debe usar RLS en operaciones de base de datos', ()=>{
            expect(mockExecuteWithRLS).toHaveBeenCalled();
        });
        it('debe requerir permisos específicos para cada operación', ()=>{
            expect(mockRequireAdminAuth).toHaveBeenCalledWith(expect.any(Object), expect.arrayContaining([
                expect.any(String)
            ]));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,