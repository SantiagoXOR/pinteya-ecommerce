{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\security-validations.ts"],"sourcesContent":["/**\n * Validaciones de Seguridad Avanzadas\n * Implementa verificaciones granulares de permisos y roles\n */\n\nimport { clerkClient } from '@clerk/nextjs/server';\nimport type { NextRequest, NextApiRequest } from 'next';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface SecurityContext {\n  userId: string;\n  sessionId?: string;\n  userRole: string;\n  permissions: UserPermissions;\n  metadata: UserMetadata;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface UserPermissions {\n  canReadProducts: boolean;\n  canWriteProducts: boolean;\n  canDeleteProducts: boolean;\n  canManageUsers: boolean;\n  canViewAnalytics: boolean;\n  canManageOrders: boolean;\n  canAccessAdmin: boolean;\n  isAdmin: boolean;\n  isModerator: boolean;\n}\n\nexport interface UserMetadata {\n  role: string;\n  department?: string;\n  permissions?: Record<string, any>;\n  lastLogin?: string;\n  loginCount?: number;\n  isActive: boolean;\n  emailVerified: boolean;\n}\n\nexport interface SecurityValidationResult {\n  valid: boolean;\n  context?: SecurityContext;\n  error?: string;\n  code?: string;\n  severity?: 'low' | 'medium' | 'high' | 'critical';\n}\n\n// =====================================================\n// FUNCIONES DE VALIDACIÓN DE ROLES\n// =====================================================\n\n/**\n * Obtiene permisos detallados basados en el rol del usuario\n */\nexport function getPermissionsByRole(role: string): UserPermissions {\n  const rolePermissions: Record<string, UserPermissions> = {\n    admin: {\n      canReadProducts: true,\n      canWriteProducts: true,\n      canDeleteProducts: true,\n      canManageUsers: true,\n      canViewAnalytics: true,\n      canManageOrders: true,\n      canAccessAdmin: true,\n      isAdmin: true,\n      isModerator: true\n    },\n    moderator: {\n      canReadProducts: true,\n      canWriteProducts: true,\n      canDeleteProducts: false,\n      canManageUsers: false,\n      canViewAnalytics: true,\n      canManageOrders: true,\n      canAccessAdmin: true,\n      isAdmin: false,\n      isModerator: true\n    },\n    manager: {\n      canReadProducts: true,\n      canWriteProducts: true,\n      canDeleteProducts: false,\n      canManageUsers: false,\n      canViewAnalytics: true,\n      canManageOrders: true,\n      canAccessAdmin: true,\n      isAdmin: false,\n      isModerator: false\n    },\n    user: {\n      canReadProducts: false,\n      canWriteProducts: false,\n      canDeleteProducts: false,\n      canManageUsers: false,\n      canViewAnalytics: false,\n      canManageOrders: false,\n      canAccessAdmin: false,\n      isAdmin: false,\n      isModerator: false\n    }\n  };\n\n  return rolePermissions[role] || rolePermissions.user;\n}\n\n/**\n * Valida si un rol es válido para operaciones administrativas\n */\nexport function isValidAdminRole(role: string): boolean {\n  const validAdminRoles = ['admin', 'moderator', 'manager'];\n  return validAdminRoles.includes(role);\n}\n\n/**\n * Verifica si un usuario tiene un permiso específico\n */\nexport function hasPermission(\n  permissions: UserPermissions,\n  permission: keyof UserPermissions\n): boolean {\n  return permissions[permission] === true;\n}\n\n/**\n * Verifica múltiples permisos (OR logic)\n */\nexport function hasAnyPermission(\n  permissions: UserPermissions,\n  requiredPermissions: (keyof UserPermissions)[]\n): boolean {\n  return requiredPermissions.some(permission => hasPermission(permissions, permission));\n}\n\n/**\n * Verifica múltiples permisos (AND logic)\n */\nexport function hasAllPermissions(\n  permissions: UserPermissions,\n  requiredPermissions: (keyof UserPermissions)[]\n): boolean {\n  return requiredPermissions.every(permission => hasPermission(permissions, permission));\n}\n\n// =====================================================\n// FUNCIONES DE VALIDACIÓN DE CONTEXTO\n// =====================================================\n\n/**\n * Obtiene el contexto de seguridad completo del usuario\n */\nexport async function getSecurityContext(\n  userId: string,\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityContext | null> {\n  try {\n    const client = await clerkClient();\n    const user = await client.users.getUser(userId);\n    \n    if (!user) {\n      return null;\n    }\n\n    // Extraer metadata del usuario\n    const metadata = user.publicMetadata as UserMetadata;\n    const userRole = metadata?.role || 'user';\n    \n    // Obtener permisos basados en el rol\n    const permissions = getPermissionsByRole(userRole);\n    \n    // Extraer información de la request\n    let ipAddress: string | undefined;\n    let userAgent: string | undefined;\n    \n    if (request) {\n      if ('headers' in request && typeof request.headers.get === 'function') {\n        // NextRequest\n        ipAddress = request.headers.get('x-forwarded-for') || \n                   request.headers.get('x-real-ip') || \n                   'unknown';\n        userAgent = request.headers.get('user-agent') || 'unknown';\n      } else if ('headers' in request) {\n        // NextApiRequest\n        const req = request as NextApiRequest;\n        ipAddress = req.headers['x-forwarded-for'] as string || \n                   req.headers['x-real-ip'] as string || \n                   'unknown';\n        userAgent = req.headers['user-agent'] || 'unknown';\n      }\n    }\n\n    return {\n      userId,\n      userRole,\n      permissions,\n      metadata: {\n        role: userRole,\n        department: metadata?.department,\n        permissions: metadata?.permissions,\n        lastLogin: metadata?.lastLogin,\n        loginCount: metadata?.loginCount,\n        isActive: metadata?.isActive !== false,\n        emailVerified: user.emailAddresses?.[0]?.verification?.status === 'verified'\n      },\n      ipAddress,\n      userAgent\n    };\n  } catch (error) {\n    console.error('[SECURITY] Error obteniendo contexto de seguridad:', error);\n    return null;\n  }\n}\n\n/**\n * Valida el contexto de seguridad para operaciones específicas\n */\nexport async function validateSecurityContext(\n  userId: string,\n  operation: string,\n  requiredPermissions: (keyof UserPermissions)[],\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityValidationResult> {\n  try {\n    // Obtener contexto de seguridad\n    const context = await getSecurityContext(userId, request);\n    \n    if (!context) {\n      return {\n        valid: false,\n        error: 'No se pudo obtener el contexto de seguridad del usuario',\n        code: 'SECURITY_CONTEXT_ERROR',\n        severity: 'high'\n      };\n    }\n\n    // Validar que el usuario esté activo\n    if (!context.metadata.isActive) {\n      return {\n        valid: false,\n        error: 'Usuario inactivo',\n        code: 'USER_INACTIVE',\n        severity: 'medium'\n      };\n    }\n\n    // Validar que el email esté verificado para operaciones críticas\n    const criticalOperations = ['DELETE', 'MANAGE_USERS', 'MANAGE_ORDERS'];\n    if (criticalOperations.some(op => operation.includes(op)) && !context.metadata.emailVerified) {\n      return {\n        valid: false,\n        error: 'Email no verificado para operaciones críticas',\n        code: 'EMAIL_NOT_VERIFIED',\n        severity: 'medium'\n      };\n    }\n\n    // Validar permisos requeridos\n    if (!hasAllPermissions(context.permissions, requiredPermissions)) {\n      return {\n        valid: false,\n        error: `Permisos insuficientes para la operación: ${operation}`,\n        code: 'INSUFFICIENT_PERMISSIONS',\n        severity: 'high'\n      };\n    }\n\n    // Validar rol para acceso admin\n    if (requiredPermissions.includes('canAccessAdmin') && !isValidAdminRole(context.userRole)) {\n      return {\n        valid: false,\n        error: 'Rol insuficiente para acceso administrativo',\n        code: 'INVALID_ADMIN_ROLE',\n        severity: 'high'\n      };\n    }\n\n    return {\n      valid: true,\n      context\n    };\n  } catch (error) {\n    console.error('[SECURITY] Error en validación de contexto:', error);\n    return {\n      valid: false,\n      error: 'Error interno en validación de seguridad',\n      code: 'VALIDATION_ERROR',\n      severity: 'critical'\n    };\n  }\n}\n\n// =====================================================\n// FUNCIONES DE VALIDACIÓN ESPECÍFICAS\n// =====================================================\n\n/**\n * Valida permisos para operaciones CRUD en productos\n */\nexport async function validateProductPermissions(\n  userId: string,\n  action: 'read' | 'create' | 'update' | 'delete',\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityValidationResult> {\n  const permissionMap = {\n    read: ['canReadProducts'] as (keyof UserPermissions)[],\n    create: ['canWriteProducts'] as (keyof UserPermissions)[],\n    update: ['canWriteProducts'] as (keyof UserPermissions)[],\n    delete: ['canDeleteProducts'] as (keyof UserPermissions)[]\n  };\n\n  return validateSecurityContext(\n    userId,\n    `PRODUCT_${action.toUpperCase()}`,\n    permissionMap[action],\n    request\n  );\n}\n\n/**\n * Valida permisos para gestión de usuarios\n */\nexport async function validateUserManagementPermissions(\n  userId: string,\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityValidationResult> {\n  return validateSecurityContext(\n    userId,\n    'MANAGE_USERS',\n    ['canManageUsers', 'canAccessAdmin'],\n    request\n  );\n}\n\n/**\n * Valida permisos para acceso a analytics\n */\nexport async function validateAnalyticsPermissions(\n  userId: string,\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityValidationResult> {\n  return validateSecurityContext(\n    userId,\n    'VIEW_ANALYTICS',\n    ['canViewAnalytics', 'canAccessAdmin'],\n    request\n  );\n}\n\n/**\n * Valida permisos para gestión de órdenes\n */\nexport async function validateOrderManagementPermissions(\n  userId: string,\n  request?: NextRequest | NextApiRequest\n): Promise<SecurityValidationResult> {\n  return validateSecurityContext(\n    userId,\n    'MANAGE_ORDERS',\n    ['canManageOrders', 'canAccessAdmin'],\n    request\n  );\n}\n\n// =====================================================\n// MIDDLEWARE DE SEGURIDAD\n// =====================================================\n\n/**\n * Middleware de validación de seguridad para APIs\n */\nexport function withSecurityValidation(\n  requiredPermissions: (keyof UserPermissions)[],\n  operation: string\n) {\n  return function (handler: Function) {\n    return async (request: NextRequest | NextApiRequest, ...args: any[]) => {\n      try {\n        // Obtener userId del request (debe ser añadido por middleware de autenticación)\n        const userId = (request as any).userId ||\n                      request.headers?.get?.('x-clerk-user-id') ||\n                      (request.headers as any)?.['x-clerk-user-id'];\n\n        if (!userId) {\n          const errorResponse = {\n            success: false,\n            error: 'Usuario no autenticado',\n            code: 'AUTH_REQUIRED'\n          };\n\n          if ('json' in args[0]) {\n            // NextApiResponse\n            return args[0].status(401).json(errorResponse);\n          } else {\n            // NextResponse\n            return new Response(JSON.stringify(errorResponse), {\n              status: 401,\n              headers: { 'Content-Type': 'application/json' }\n            });\n          }\n        }\n\n        // Validar contexto de seguridad\n        const validation = await validateSecurityContext(\n          userId,\n          operation,\n          requiredPermissions,\n          request\n        );\n\n        if (!validation.valid) {\n          const errorResponse = {\n            success: false,\n            error: validation.error,\n            code: validation.code,\n            severity: validation.severity\n          };\n\n          const statusCode = validation.code === 'AUTH_REQUIRED' ? 401 : 403;\n\n          if ('json' in args[0]) {\n            // NextApiResponse\n            return args[0].status(statusCode).json(errorResponse);\n          } else {\n            // NextResponse\n            return new Response(JSON.stringify(errorResponse), {\n              status: statusCode,\n              headers: { 'Content-Type': 'application/json' }\n            });\n          }\n        }\n\n        // Añadir contexto de seguridad al request\n        (request as any).securityContext = validation.context;\n\n        // Ejecutar handler original\n        return handler(request, ...args);\n      } catch (error) {\n        console.error('[SECURITY] Error en middleware de seguridad:', error);\n\n        const errorResponse = {\n          success: false,\n          error: 'Error interno de seguridad',\n          code: 'SECURITY_ERROR'\n        };\n\n        if ('json' in args[0]) {\n          // NextApiResponse\n          return args[0].status(500).json(errorResponse);\n        } else {\n          // NextResponse\n          return new Response(JSON.stringify(errorResponse), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n      }\n    };\n  };\n}\n\n/**\n * Wrapper específico para validación de productos\n */\nexport function withProductSecurity(action: 'read' | 'create' | 'update' | 'delete') {\n  const permissionMap = {\n    read: ['canReadProducts'] as (keyof UserPermissions)[],\n    create: ['canWriteProducts'] as (keyof UserPermissions)[],\n    update: ['canWriteProducts'] as (keyof UserPermissions)[],\n    delete: ['canDeleteProducts'] as (keyof UserPermissions)[]\n  };\n\n  return withSecurityValidation(\n    permissionMap[action],\n    `PRODUCT_${action.toUpperCase()}`\n  );\n}\n\n/**\n * Wrapper específico para validación de usuarios\n */\nexport function withUserManagementSecurity() {\n  return withSecurityValidation(\n    ['canManageUsers', 'canAccessAdmin'],\n    'MANAGE_USERS'\n  );\n}\n\n/**\n * Wrapper específico para validación de analytics\n */\nexport function withAnalyticsSecurity() {\n  return withSecurityValidation(\n    ['canViewAnalytics', 'canAccessAdmin'],\n    'VIEW_ANALYTICS'\n  );\n}\n\n/**\n * Wrapper específico para validación de órdenes\n */\nexport function withOrderManagementSecurity() {\n  return withSecurityValidation(\n    ['canManageOrders', 'canAccessAdmin'],\n    'MANAGE_ORDERS'\n  );\n}\n"],"names":["getPermissionsByRole","getSecurityContext","hasAllPermissions","hasAnyPermission","hasPermission","isValidAdminRole","validateAnalyticsPermissions","validateOrderManagementPermissions","validateProductPermissions","validateSecurityContext","validateUserManagementPermissions","withAnalyticsSecurity","withOrderManagementSecurity","withProductSecurity","withSecurityValidation","withUserManagementSecurity","role","rolePermissions","admin","canReadProducts","canWriteProducts","canDeleteProducts","canManageUsers","canViewAnalytics","canManageOrders","canAccessAdmin","isAdmin","isModerator","moderator","manager","user","validAdminRoles","includes","permissions","permission","requiredPermissions","some","every","userId","request","client","clerkClient","users","getUser","metadata","publicMetadata","userRole","ipAddress","userAgent","headers","get","req","department","lastLogin","loginCount","isActive","emailVerified","emailAddresses","verification","status","error","console","operation","context","valid","code","severity","criticalOperations","op","action","permissionMap","read","create","update","delete","toUpperCase","handler","args","errorResponse","success","json","Response","JSON","stringify","validation","statusCode","securityContext"],"mappings":"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"}