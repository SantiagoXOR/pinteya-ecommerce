ce1fae67020beedec9d0ca6abe3b8908
/**
 * Validaciones de Seguridad Avanzadas
 * Implementa verificaciones granulares de permisos y roles
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getPermissionsByRole: function() {
        return getPermissionsByRole;
    },
    getSecurityContext: function() {
        return getSecurityContext;
    },
    hasAllPermissions: function() {
        return hasAllPermissions;
    },
    hasAnyPermission: function() {
        return hasAnyPermission;
    },
    hasPermission: function() {
        return hasPermission;
    },
    isValidAdminRole: function() {
        return isValidAdminRole;
    },
    validateAnalyticsPermissions: function() {
        return validateAnalyticsPermissions;
    },
    validateOrderManagementPermissions: function() {
        return validateOrderManagementPermissions;
    },
    validateProductPermissions: function() {
        return validateProductPermissions;
    },
    validateSecurityContext: function() {
        return validateSecurityContext;
    },
    validateUserManagementPermissions: function() {
        return validateUserManagementPermissions;
    },
    withAnalyticsSecurity: function() {
        return withAnalyticsSecurity;
    },
    withOrderManagementSecurity: function() {
        return withOrderManagementSecurity;
    },
    withProductSecurity: function() {
        return withProductSecurity;
    },
    withSecurityValidation: function() {
        return withSecurityValidation;
    },
    withUserManagementSecurity: function() {
        return withUserManagementSecurity;
    }
});
const _server = require("@clerk/nextjs/server");
function getPermissionsByRole(role) {
    const rolePermissions = {
        admin: {
            canReadProducts: true,
            canWriteProducts: true,
            canDeleteProducts: true,
            canManageUsers: true,
            canViewAnalytics: true,
            canManageOrders: true,
            canAccessAdmin: true,
            isAdmin: true,
            isModerator: true
        },
        moderator: {
            canReadProducts: true,
            canWriteProducts: true,
            canDeleteProducts: false,
            canManageUsers: false,
            canViewAnalytics: true,
            canManageOrders: true,
            canAccessAdmin: true,
            isAdmin: false,
            isModerator: true
        },
        manager: {
            canReadProducts: true,
            canWriteProducts: true,
            canDeleteProducts: false,
            canManageUsers: false,
            canViewAnalytics: true,
            canManageOrders: true,
            canAccessAdmin: true,
            isAdmin: false,
            isModerator: false
        },
        user: {
            canReadProducts: false,
            canWriteProducts: false,
            canDeleteProducts: false,
            canManageUsers: false,
            canViewAnalytics: false,
            canManageOrders: false,
            canAccessAdmin: false,
            isAdmin: false,
            isModerator: false
        }
    };
    return rolePermissions[role] || rolePermissions.user;
}
function isValidAdminRole(role) {
    const validAdminRoles = [
        'admin',
        'moderator',
        'manager'
    ];
    return validAdminRoles.includes(role);
}
function hasPermission(permissions, permission) {
    return permissions[permission] === true;
}
function hasAnyPermission(permissions, requiredPermissions) {
    return requiredPermissions.some((permission)=>hasPermission(permissions, permission));
}
function hasAllPermissions(permissions, requiredPermissions) {
    return requiredPermissions.every((permission)=>hasPermission(permissions, permission));
}
async function getSecurityContext(userId, request) {
    try {
        const client = await (0, _server.clerkClient)();
        const user = await client.users.getUser(userId);
        if (!user) {
            return null;
        }
        // Extraer metadata del usuario
        const metadata = user.publicMetadata;
        const userRole = metadata?.role || 'user';
        // Obtener permisos basados en el rol
        const permissions = getPermissionsByRole(userRole);
        // Extraer información de la request
        let ipAddress;
        let userAgent;
        if (request) {
            if ('headers' in request && typeof request.headers.get === 'function') {
                // NextRequest
                ipAddress = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';
                userAgent = request.headers.get('user-agent') || 'unknown';
            } else if ('headers' in request) {
                // NextApiRequest
                const req = request;
                ipAddress = req.headers['x-forwarded-for'] || req.headers['x-real-ip'] || 'unknown';
                userAgent = req.headers['user-agent'] || 'unknown';
            }
        }
        return {
            userId,
            userRole,
            permissions,
            metadata: {
                role: userRole,
                department: metadata?.department,
                permissions: metadata?.permissions,
                lastLogin: metadata?.lastLogin,
                loginCount: metadata?.loginCount,
                isActive: metadata?.isActive !== false,
                emailVerified: user.emailAddresses?.[0]?.verification?.status === 'verified'
            },
            ipAddress,
            userAgent
        };
    } catch (error) {
        console.error('[SECURITY] Error obteniendo contexto de seguridad:', error);
        return null;
    }
}
async function validateSecurityContext(userId, operation, requiredPermissions, request) {
    try {
        // Obtener contexto de seguridad
        const context = await getSecurityContext(userId, request);
        if (!context) {
            return {
                valid: false,
                error: 'No se pudo obtener el contexto de seguridad del usuario',
                code: 'SECURITY_CONTEXT_ERROR',
                severity: 'high'
            };
        }
        // Validar que el usuario esté activo
        if (!context.metadata.isActive) {
            return {
                valid: false,
                error: 'Usuario inactivo',
                code: 'USER_INACTIVE',
                severity: 'medium'
            };
        }
        // Validar que el email esté verificado para operaciones críticas
        const criticalOperations = [
            'DELETE',
            'MANAGE_USERS',
            'MANAGE_ORDERS'
        ];
        if (criticalOperations.some((op)=>operation.includes(op)) && !context.metadata.emailVerified) {
            return {
                valid: false,
                error: 'Email no verificado para operaciones críticas',
                code: 'EMAIL_NOT_VERIFIED',
                severity: 'medium'
            };
        }
        // Validar permisos requeridos
        if (!hasAllPermissions(context.permissions, requiredPermissions)) {
            return {
                valid: false,
                error: `Permisos insuficientes para la operación: ${operation}`,
                code: 'INSUFFICIENT_PERMISSIONS',
                severity: 'high'
            };
        }
        // Validar rol para acceso admin
        if (requiredPermissions.includes('canAccessAdmin') && !isValidAdminRole(context.userRole)) {
            return {
                valid: false,
                error: 'Rol insuficiente para acceso administrativo',
                code: 'INVALID_ADMIN_ROLE',
                severity: 'high'
            };
        }
        return {
            valid: true,
            context
        };
    } catch (error) {
        console.error('[SECURITY] Error en validación de contexto:', error);
        return {
            valid: false,
            error: 'Error interno en validación de seguridad',
            code: 'VALIDATION_ERROR',
            severity: 'critical'
        };
    }
}
async function validateProductPermissions(userId, action, request) {
    const permissionMap = {
        read: [
            'canReadProducts'
        ],
        create: [
            'canWriteProducts'
        ],
        update: [
            'canWriteProducts'
        ],
        delete: [
            'canDeleteProducts'
        ]
    };
    return validateSecurityContext(userId, `PRODUCT_${action.toUpperCase()}`, permissionMap[action], request);
}
async function validateUserManagementPermissions(userId, request) {
    return validateSecurityContext(userId, 'MANAGE_USERS', [
        'canManageUsers',
        'canAccessAdmin'
    ], request);
}
async function validateAnalyticsPermissions(userId, request) {
    return validateSecurityContext(userId, 'VIEW_ANALYTICS', [
        'canViewAnalytics',
        'canAccessAdmin'
    ], request);
}
async function validateOrderManagementPermissions(userId, request) {
    return validateSecurityContext(userId, 'MANAGE_ORDERS', [
        'canManageOrders',
        'canAccessAdmin'
    ], request);
}
function withSecurityValidation(requiredPermissions, operation) {
    return function(handler) {
        return async (request, ...args)=>{
            try {
                // Obtener userId del request (debe ser añadido por middleware de autenticación)
                const userId = request.userId || request.headers?.get?.('x-clerk-user-id') || request.headers?.['x-clerk-user-id'];
                if (!userId) {
                    const errorResponse = {
                        success: false,
                        error: 'Usuario no autenticado',
                        code: 'AUTH_REQUIRED'
                    };
                    if ('json' in args[0]) {
                        // NextApiResponse
                        return args[0].status(401).json(errorResponse);
                    } else {
                        // NextResponse
                        return new Response(JSON.stringify(errorResponse), {
                            status: 401,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                    }
                }
                // Validar contexto de seguridad
                const validation = await validateSecurityContext(userId, operation, requiredPermissions, request);
                if (!validation.valid) {
                    const errorResponse = {
                        success: false,
                        error: validation.error,
                        code: validation.code,
                        severity: validation.severity
                    };
                    const statusCode = validation.code === 'AUTH_REQUIRED' ? 401 : 403;
                    if ('json' in args[0]) {
                        // NextApiResponse
                        return args[0].status(statusCode).json(errorResponse);
                    } else {
                        // NextResponse
                        return new Response(JSON.stringify(errorResponse), {
                            status: statusCode,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                    }
                }
                // Añadir contexto de seguridad al request
                request.securityContext = validation.context;
                // Ejecutar handler original
                return handler(request, ...args);
            } catch (error) {
                console.error('[SECURITY] Error en middleware de seguridad:', error);
                const errorResponse = {
                    success: false,
                    error: 'Error interno de seguridad',
                    code: 'SECURITY_ERROR'
                };
                if ('json' in args[0]) {
                    // NextApiResponse
                    return args[0].status(500).json(errorResponse);
                } else {
                    // NextResponse
                    return new Response(JSON.stringify(errorResponse), {
                        status: 500,
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }
            }
        };
    };
}
function withProductSecurity(action) {
    const permissionMap = {
        read: [
            'canReadProducts'
        ],
        create: [
            'canWriteProducts'
        ],
        update: [
            'canWriteProducts'
        ],
        delete: [
            'canDeleteProducts'
        ]
    };
    return withSecurityValidation(permissionMap[action], `PRODUCT_${action.toUpperCase()}`);
}
function withUserManagementSecurity() {
    return withSecurityValidation([
        'canManageUsers',
        'canAccessAdmin'
    ], 'MANAGE_USERS');
}
function withAnalyticsSecurity() {
    return withSecurityValidation([
        'canViewAnalytics',
        'canAccessAdmin'
    ], 'VIEW_ANALYTICS');
}
function withOrderManagementSecurity() {
    return withSecurityValidation([
        'canManageOrders',
        'canAccessAdmin'
    ], 'MANAGE_ORDERS');
}

//# sourceMappingURL=data:application/json;base64,