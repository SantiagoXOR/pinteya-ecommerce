1561d8d02b781721ebc7c48611963d63
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get store () {
        return store;
    },
    get useAppDispatch () {
        return useAppDispatch;
    },
    get useAppSelector () {
        return useAppSelector;
    }
});
const _toolkit = require("@reduxjs/toolkit");
const _quickViewslice = /*#__PURE__*/ _interop_require_default(require("./features/quickView-slice"));
const _cartslice = /*#__PURE__*/ _interop_require_default(require("./features/cart-slice"));
const _wishlistslice = /*#__PURE__*/ _interop_require_default(require("./features/wishlist-slice"));
const _productdetails = /*#__PURE__*/ _interop_require_default(require("./features/product-details"));
const _cartPersistence = require("./middleware/cartPersistence");
const _reactredux = require("react-redux");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const store = (0, _toolkit.configureStore)({
    reducer: {
        quickViewReducer: _quickViewslice.default,
        cartReducer: _cartslice.default,
        wishlistReducer: _wishlistslice.default,
        productDetailsReducer: _productdetails.default
    },
    middleware: (getDefaultMiddleware)=>getDefaultMiddleware({
            serializableCheck: {
                // Ignorar estas acciones para el check de serializaciÃ³n
                ignoredActions: [
                    'persist/PERSIST',
                    'persist/REHYDRATE'
                ]
            }
        }).concat(_cartPersistence.cartPersistenceMiddleware)
});
const useAppSelector = _reactredux.useSelector;
const useAppDispatch = ()=>(0, _reactredux.useDispatch)();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xccmVkdXhcXHN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuXHJcbmltcG9ydCBxdWlja1ZpZXdSZWR1Y2VyIGZyb20gXCIuL2ZlYXR1cmVzL3F1aWNrVmlldy1zbGljZVwiO1xyXG5pbXBvcnQgY2FydFJlZHVjZXIgZnJvbSBcIi4vZmVhdHVyZXMvY2FydC1zbGljZVwiO1xyXG5pbXBvcnQgd2lzaGxpc3RSZWR1Y2VyIGZyb20gXCIuL2ZlYXR1cmVzL3dpc2hsaXN0LXNsaWNlXCI7XHJcbmltcG9ydCBwcm9kdWN0RGV0YWlsc1JlZHVjZXIgZnJvbSBcIi4vZmVhdHVyZXMvcHJvZHVjdC1kZXRhaWxzXCI7XHJcbmltcG9ydCB7IGNhcnRQZXJzaXN0ZW5jZU1pZGRsZXdhcmUgfSBmcm9tIFwiLi9taWRkbGV3YXJlL2NhcnRQZXJzaXN0ZW5jZVwiO1xyXG5cclxuaW1wb3J0IHsgVHlwZWRVc2VTZWxlY3Rvckhvb2ssIHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gIHJlZHVjZXI6IHtcclxuICAgIHF1aWNrVmlld1JlZHVjZXIsXHJcbiAgICBjYXJ0UmVkdWNlcixcclxuICAgIHdpc2hsaXN0UmVkdWNlcixcclxuICAgIHByb2R1Y3REZXRhaWxzUmVkdWNlcixcclxuICB9LFxyXG4gIG1pZGRsZXdhcmU6IChnZXREZWZhdWx0TWlkZGxld2FyZSkgPT5cclxuICAgIGdldERlZmF1bHRNaWRkbGV3YXJlKHtcclxuICAgICAgc2VyaWFsaXphYmxlQ2hlY2s6IHtcclxuICAgICAgICAvLyBJZ25vcmFyIGVzdGFzIGFjY2lvbmVzIHBhcmEgZWwgY2hlY2sgZGUgc2VyaWFsaXphY2nDs25cclxuICAgICAgICBpZ25vcmVkQWN0aW9uczogWydwZXJzaXN0L1BFUlNJU1QnLCAncGVyc2lzdC9SRUhZRFJBVEUnXSxcclxuICAgICAgfSxcclxuICAgIH0pLmNvbmNhdChjYXJ0UGVyc2lzdGVuY2VNaWRkbGV3YXJlKSxcclxufSk7XHJcblxyXG5leHBvcnQgdHlwZSBSb290U3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBzdG9yZS5nZXRTdGF0ZT47XHJcbmV4cG9ydCB0eXBlIEFwcERpc3BhdGNoID0gdHlwZW9mIHN0b3JlLmRpc3BhdGNoO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUFwcFNlbGVjdG9yOiBUeXBlZFVzZVNlbGVjdG9ySG9vazxSb290U3RhdGU+ID0gdXNlU2VsZWN0b3I7XHJcbmV4cG9ydCBjb25zdCB1c2VBcHBEaXNwYXRjaCA9ICgpID0+IHVzZURpc3BhdGNoPEFwcERpc3BhdGNoPigpO1xyXG4iXSwibmFtZXMiOlsic3RvcmUiLCJ1c2VBcHBEaXNwYXRjaCIsInVzZUFwcFNlbGVjdG9yIiwiY29uZmlndXJlU3RvcmUiLCJyZWR1Y2VyIiwicXVpY2tWaWV3UmVkdWNlciIsImNhcnRSZWR1Y2VyIiwid2lzaGxpc3RSZWR1Y2VyIiwicHJvZHVjdERldGFpbHNSZWR1Y2VyIiwibWlkZGxld2FyZSIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwic2VyaWFsaXphYmxlQ2hlY2siLCJpZ25vcmVkQWN0aW9ucyIsImNvbmNhdCIsImNhcnRQZXJzaXN0ZW5jZU1pZGRsZXdhcmUiLCJ1c2VTZWxlY3RvciIsInVzZURpc3BhdGNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztRQVVhQTtlQUFBQTs7UUFvQkFDO2VBQUFBOztRQURBQztlQUFBQTs7O3lCQTdCa0I7dUVBRUY7a0VBQ0w7c0VBQ0k7dUVBQ007aUNBQ1E7NEJBRXFCOzs7Ozs7QUFFeEQsTUFBTUYsUUFBUUcsSUFBQUEsdUJBQWMsRUFBQztJQUNsQ0MsU0FBUztRQUNQQyxrQkFBQUEsdUJBQWdCO1FBQ2hCQyxhQUFBQSxrQkFBVztRQUNYQyxpQkFBQUEsc0JBQWU7UUFDZkMsdUJBQUFBLHVCQUFxQjtJQUN2QjtJQUNBQyxZQUFZLENBQUNDLHVCQUNYQSxxQkFBcUI7WUFDbkJDLG1CQUFtQjtnQkFDakIsd0RBQXdEO2dCQUN4REMsZ0JBQWdCO29CQUFDO29CQUFtQjtpQkFBb0I7WUFDMUQ7UUFDRixHQUFHQyxNQUFNLENBQUNDLDBDQUF5QjtBQUN2QztBQUtPLE1BQU1aLGlCQUFrRGEsdUJBQVc7QUFDbkUsTUFBTWQsaUJBQWlCLElBQU1lLElBQUFBLHVCQUFXIn0=