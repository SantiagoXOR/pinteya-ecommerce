b40522779442d5babaed8ef3f11f587c
/**
 * Tests para la migración de autenticación de headers a getAuth(req)
 * Verifica que el sistema migrado funciona correctamente
 */ // Mock de Clerk
"use strict";
jest.mock('@clerk/nextjs/server', ()=>({
        getAuth: jest.fn(),
        auth: jest.fn()
    }));
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        }))
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _adminauth = require("../lib/auth/admin-auth");
const _server = require("@clerk/nextjs/server");
describe('Migración de Autenticación', ()=>{
    let mockGetAuth;
    let mockAuth;
    beforeEach(()=>{
        mockGetAuth = _server.getAuth;
        mockAuth = _server.auth;
        jest.clearAllMocks();
    });
    describe('getAuthenticatedUser (migrado)', ()=>{
        it('debe usar getAuth para NextApiRequest', async ()=>{
            const mockRequest = {
                query: {},
                headers: {}
            };
            mockGetAuth.mockReturnValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                getToken: jest.fn().mockResolvedValue('mock_token')
            });
            const result = await (0, _adminauth.getAuthenticatedUser)(mockRequest);
            expect(mockGetAuth).toHaveBeenCalledWith(mockRequest);
            expect(result.userId).toBe('user_123');
            expect(result.sessionId).toBe('sess_123');
        });
        it('debe usar auth() para App Router', async ()=>{
            mockAuth.mockResolvedValue({
                userId: 'user_456',
                sessionId: 'sess_456',
                sessionClaims: {
                    metadata: {
                        role: 'admin'
                    }
                }
            });
            const result = await (0, _adminauth.getAuthenticatedUser)();
            expect(mockAuth).toHaveBeenCalled();
            expect(result.userId).toBe('user_456');
            expect(result.sessionId).toBe('sess_456');
            expect(result.isAdmin).toBe(true);
        });
        it('debe manejar usuarios no autenticados', async ()=>{
            mockAuth.mockResolvedValue({
                userId: null,
                sessionId: null
            });
            const result = await (0, _adminauth.getAuthenticatedUser)();
            expect(result.userId).toBeNull();
            expect(result.error).toBe('Usuario no autenticado');
        });
        it('debe manejar errores de autenticación', async ()=>{
            mockAuth.mockRejectedValue(new Error('Auth error'));
            const result = await (0, _adminauth.getAuthenticatedUser)();
            expect(result.userId).toBeNull();
            expect(result.error).toContain('Error de autenticación');
        });
    });
    describe('getAuthenticatedAdmin (nueva función)', ()=>{
        it('debe combinar autenticación y verificación de admin', async ()=>{
            mockAuth.mockResolvedValue({
                userId: 'admin_123',
                sessionId: 'sess_123',
                sessionClaims: {
                    metadata: {
                        role: 'admin'
                    }
                }
            });
            const result = await (0, _adminauth.getAuthenticatedAdmin)();
            expect(result.userId).toBe('admin_123');
            expect(result.isAdmin).toBe(true);
            expect(result.sessionId).toBe('sess_123');
        });
        it('debe rechazar usuarios no admin', async ()=>{
            mockAuth.mockResolvedValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                sessionClaims: {
                    metadata: {
                        role: 'user'
                    }
                }
            });
            const result = await (0, _adminauth.getAuthenticatedAdmin)();
            expect(result.userId).toBe('user_123');
            expect(result.isAdmin).toBe(false);
            expect(result.error).toBe('Permisos de administrador requeridos');
            expect(result.status).toBe(403);
        });
        it('debe manejar usuarios no autenticados', async ()=>{
            mockAuth.mockResolvedValue({
                userId: null,
                sessionId: null
            });
            const result = await (0, _adminauth.getAuthenticatedAdmin)();
            expect(result.userId).toBeNull();
            expect(result.isAdmin).toBe(false);
            expect(result.error).toBe('Usuario no autenticado');
            expect(result.status).toBe(401);
        });
    });
    describe('getAuthFromHeaders (deprecada)', ()=>{
        it('debe marcar como deprecada y funcionar', async ()=>{
            const mockRequest = {
                headers: {
                    get: jest.fn().mockReturnValue('user_123')
                }
            };
            const result = await (0, _adminauth.getAuthFromHeaders)(mockRequest);
            expect(result.userId).toBe('user_123');
            expect(result.deprecated).toBe(true);
        });
        it('debe manejar headers faltantes', async ()=>{
            const mockRequest = {
                headers: {
                    get: jest.fn().mockReturnValue(null)
                }
            };
            const result = await (0, _adminauth.getAuthFromHeaders)(mockRequest);
            expect(result.userId).toBeNull();
            expect(result.deprecated).toBe(true);
            expect(result.error).toBe('Header x-clerk-user-id no encontrado');
        });
    });
    describe('Migración completa', ()=>{
        it('debe tener todas las funciones definidas', ()=>{
            expect(typeof _adminauth.getAuthenticatedUser).toBe('function');
            expect(typeof _adminauth.getAuthenticatedAdmin).toBe('function');
            expect(typeof _adminauth.getAuthFromHeaders).toBe('function');
        });
        it('debe retornar estructuras correctas', async ()=>{
            mockAuth.mockResolvedValue({
                userId: 'user_123',
                sessionId: 'sess_123',
                sessionClaims: {
                    metadata: {
                        role: 'admin'
                    }
                }
            });
            const userResult = await (0, _adminauth.getAuthenticatedUser)();
            const adminResult = await (0, _adminauth.getAuthenticatedAdmin)();
            // Verificar estructura de getAuthenticatedUser
            expect(userResult).toHaveProperty('userId');
            expect(userResult).toHaveProperty('sessionId');
            expect(userResult).toHaveProperty('isAdmin');
            // Verificar estructura de getAuthenticatedAdmin
            expect(adminResult).toHaveProperty('userId');
            expect(adminResult).toHaveProperty('sessionId');
            expect(adminResult).toHaveProperty('isAdmin');
        // status solo está presente en casos de error
        });
        it('debe manejar diferentes tipos de request', async ()=>{
            // Test con NextApiRequest
            const apiRequest = {
                query: {},
                headers: {}
            };
            mockGetAuth.mockReturnValue({
                userId: 'user_api',
                sessionId: 'sess_api',
                getToken: jest.fn()
            });
            const apiResult = await (0, _adminauth.getAuthenticatedUser)(apiRequest);
            expect(mockGetAuth).toHaveBeenCalledWith(apiRequest);
            expect(apiResult.userId).toBe('user_api');
            // Test sin request (App Router)
            mockAuth.mockResolvedValue({
                userId: 'user_app',
                sessionId: 'sess_app'
            });
            const appResult = await (0, _adminauth.getAuthenticatedUser)();
            expect(mockAuth).toHaveBeenCalled();
            expect(appResult.userId).toBe('user_app');
        });
    });
    describe('Compatibilidad y migración', ()=>{
        it('debe mantener compatibilidad con APIs existentes', async ()=>{
            // Test que verifica que las APIs migradas siguen funcionando
            mockAuth.mockResolvedValue({
                userId: 'user_123',
                sessionId: 'sess_123'
            });
            const result = await (0, _adminauth.getAuthenticatedUser)();
            // Debe retornar la misma estructura que antes
            expect(result).toHaveProperty('userId');
            expect(result).toHaveProperty('sessionId');
            expect(typeof result.userId).toBe('string');
        });
        it('debe proporcionar información de migración', async ()=>{
            const mockRequest = {
                headers: {
                    get: jest.fn().mockReturnValue('user_123')
                }
            };
            const deprecatedResult = await (0, _adminauth.getAuthFromHeaders)(mockRequest);
            expect(deprecatedResult.deprecated).toBe(true);
            expect(deprecatedResult.userId).toBe('user_123');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxhdXRoLW1pZ3JhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdHMgcGFyYSBsYSBtaWdyYWNpw7NuIGRlIGF1dGVudGljYWNpw7NuIGRlIGhlYWRlcnMgYSBnZXRBdXRoKHJlcSlcbiAqIFZlcmlmaWNhIHF1ZSBlbCBzaXN0ZW1hIG1pZ3JhZG8gZnVuY2lvbmEgY29ycmVjdGFtZW50ZVxuICovXG5cbi8vIE1vY2sgZGUgQ2xlcmtcbmplc3QubW9jaygnQGNsZXJrL25leHRqcy9zZXJ2ZXInLCAoKSA9PiAoe1xuICBnZXRBdXRoOiBqZXN0LmZuKCksXG4gIGF1dGg6IGplc3QuZm4oKVxufSkpO1xuXG4vLyBNb2NrIGRlIFN1cGFiYXNlXG5qZXN0Lm1vY2soJ0AvbGliL3N1cGFiYXNlJywgKCkgPT4gKHtcbiAgc3VwYWJhc2VBZG1pbjoge1xuICAgIGZyb206IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgIHNlbGVjdDogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICBlcTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgIHNpbmdsZTogamVzdC5mbigpXG4gICAgICAgIH0pKVxuICAgICAgfSkpXG4gICAgfSkpXG4gIH1cbn0pKTtcblxuaW1wb3J0IHtcbiAgZ2V0QXV0aGVudGljYXRlZFVzZXIsXG4gIGdldEF1dGhlbnRpY2F0ZWRBZG1pbixcbiAgZ2V0QXV0aEZyb21IZWFkZXJzXG59IGZyb20gJ0AvbGliL2F1dGgvYWRtaW4tYXV0aCc7XG5pbXBvcnQgeyBnZXRBdXRoLCBhdXRoIH0gZnJvbSAnQGNsZXJrL25leHRqcy9zZXJ2ZXInO1xuXG5kZXNjcmliZSgnTWlncmFjacOzbiBkZSBBdXRlbnRpY2FjacOzbicsICgpID0+IHtcbiAgbGV0IG1vY2tHZXRBdXRoOiBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBnZXRBdXRoPjtcbiAgbGV0IG1vY2tBdXRoOiBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBhdXRoPjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrR2V0QXV0aCA9IGdldEF1dGggYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgZ2V0QXV0aD47XG4gICAgbW9ja0F1dGggPSBhdXRoIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGF1dGg+O1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0QXV0aGVudGljYXRlZFVzZXIgKG1pZ3JhZG8pJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIHVzYXIgZ2V0QXV0aCBwYXJhIE5leHRBcGlSZXF1ZXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICAgIHF1ZXJ5OiB7fSxcbiAgICAgICAgaGVhZGVyczoge31cbiAgICAgIH0gYXMgYW55O1xuXG4gICAgICBtb2NrR2V0QXV0aC5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICB1c2VySWQ6ICd1c2VyXzEyMycsXG4gICAgICAgIHNlc3Npb25JZDogJ3Nlc3NfMTIzJyxcbiAgICAgICAgZ2V0VG9rZW46IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnbW9ja190b2tlbicpXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZFVzZXIobW9ja1JlcXVlc3QpO1xuXG4gICAgICBleHBlY3QobW9ja0dldEF1dGgpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tSZXF1ZXN0KTtcbiAgICAgIGV4cGVjdChyZXN1bHQudXNlcklkKS50b0JlKCd1c2VyXzEyMycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zZXNzaW9uSWQpLnRvQmUoJ3Nlc3NfMTIzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSB1c2FyIGF1dGgoKSBwYXJhIEFwcCBSb3V0ZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXV0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHVzZXJJZDogJ3VzZXJfNDU2JyxcbiAgICAgICAgc2Vzc2lvbklkOiAnc2Vzc180NTYnLFxuICAgICAgICBzZXNzaW9uQ2xhaW1zOiB7XG4gICAgICAgICAgbWV0YWRhdGE6IHsgcm9sZTogJ2FkbWluJyB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcigpO1xuXG4gICAgICBleHBlY3QobW9ja0F1dGgpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudXNlcklkKS50b0JlKCd1c2VyXzQ1NicpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zZXNzaW9uSWQpLnRvQmUoJ3Nlc3NfNDU2Jyk7XG4gICAgICBleHBlY3QocmVzdWx0LmlzQWRtaW4pLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIHVzdWFyaW9zIG5vIGF1dGVudGljYWRvcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBdXRoLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgdXNlcklkOiBudWxsLFxuICAgICAgICBzZXNzaW9uSWQ6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnVzZXJJZCkudG9CZU51bGwoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ1VzdWFyaW8gbm8gYXV0ZW50aWNhZG8nKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWJlIG1hbmVqYXIgZXJyb3JlcyBkZSBhdXRlbnRpY2FjacOzbicsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBdXRoLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignQXV0aCBlcnJvcicpKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZFVzZXIoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC51c2VySWQpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ0Vycm9yIGRlIGF1dGVudGljYWNpw7NuJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRBdXRoZW50aWNhdGVkQWRtaW4gKG51ZXZhIGZ1bmNpw7NuKScsICgpID0+IHtcbiAgICBpdCgnZGViZSBjb21iaW5hciBhdXRlbnRpY2FjacOzbiB5IHZlcmlmaWNhY2nDs24gZGUgYWRtaW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXV0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHVzZXJJZDogJ2FkbWluXzEyMycsXG4gICAgICAgIHNlc3Npb25JZDogJ3Nlc3NfMTIzJyxcbiAgICAgICAgc2Vzc2lvbkNsYWltczoge1xuICAgICAgICAgIG1ldGFkYXRhOiB7IHJvbGU6ICdhZG1pbicgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZEFkbWluKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudXNlcklkKS50b0JlKCdhZG1pbl8xMjMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaXNBZG1pbikudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc2Vzc2lvbklkKS50b0JlKCdzZXNzXzEyMycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgcmVjaGF6YXIgdXN1YXJpb3Mgbm8gYWRtaW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXV0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHVzZXJJZDogJ3VzZXJfMTIzJyxcbiAgICAgICAgc2Vzc2lvbklkOiAnc2Vzc18xMjMnLFxuICAgICAgICBzZXNzaW9uQ2xhaW1zOiB7XG4gICAgICAgICAgbWV0YWRhdGE6IHsgcm9sZTogJ3VzZXInIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldEF1dGhlbnRpY2F0ZWRBZG1pbigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnVzZXJJZCkudG9CZSgndXNlcl8xMjMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaXNBZG1pbikudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlKCdQZXJtaXNvcyBkZSBhZG1pbmlzdHJhZG9yIHJlcXVlcmlkb3MnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzKS50b0JlKDQwMyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIHVzdWFyaW9zIG5vIGF1dGVudGljYWRvcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBdXRoLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgdXNlcklkOiBudWxsLFxuICAgICAgICBzZXNzaW9uSWQ6IG51bGxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkQWRtaW4oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC51c2VySWQpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmlzQWRtaW4pLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnVXN1YXJpbyBubyBhdXRlbnRpY2FkbycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdGF0dXMpLnRvQmUoNDAxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldEF1dGhGcm9tSGVhZGVycyAoZGVwcmVjYWRhKScsICgpID0+IHtcbiAgICBpdCgnZGViZSBtYXJjYXIgY29tbyBkZXByZWNhZGEgeSBmdW5jaW9uYXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIGdldDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgndXNlcl8xMjMnKVxuICAgICAgICB9XG4gICAgICB9IGFzIGFueTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QXV0aEZyb21IZWFkZXJzKG1vY2tSZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC51c2VySWQpLnRvQmUoJ3VzZXJfMTIzJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmRlcHJlY2F0ZWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSBtYW5lamFyIGhlYWRlcnMgZmFsdGFudGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBnZXQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUobnVsbClcbiAgICAgICAgfVxuICAgICAgfSBhcyBhbnk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldEF1dGhGcm9tSGVhZGVycyhtb2NrUmVxdWVzdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudXNlcklkKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5kZXByZWNhdGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnSGVhZGVyIHgtY2xlcmstdXNlci1pZCBubyBlbmNvbnRyYWRvJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNaWdyYWNpw7NuIGNvbXBsZXRhJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIHRlbmVyIHRvZGFzIGxhcyBmdW5jaW9uZXMgZGVmaW5pZGFzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHR5cGVvZiBnZXRBdXRoZW50aWNhdGVkVXNlcikudG9CZSgnZnVuY3Rpb24nKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgZ2V0QXV0aGVudGljYXRlZEFkbWluKS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBnZXRBdXRoRnJvbUhlYWRlcnMpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGViZSByZXRvcm5hciBlc3RydWN0dXJhcyBjb3JyZWN0YXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXV0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHVzZXJJZDogJ3VzZXJfMTIzJyxcbiAgICAgICAgc2Vzc2lvbklkOiAnc2Vzc18xMjMnLFxuICAgICAgICBzZXNzaW9uQ2xhaW1zOiB7XG4gICAgICAgICAgbWV0YWRhdGE6IHsgcm9sZTogJ2FkbWluJyB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB1c2VyUmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZFVzZXIoKTtcbiAgICAgIGNvbnN0IGFkbWluUmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZEFkbWluKCk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBlc3RydWN0dXJhIGRlIGdldEF1dGhlbnRpY2F0ZWRVc2VyXG4gICAgICBleHBlY3QodXNlclJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3VzZXJJZCcpO1xuICAgICAgZXhwZWN0KHVzZXJSZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdzZXNzaW9uSWQnKTtcbiAgICAgIGV4cGVjdCh1c2VyUmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnaXNBZG1pbicpO1xuXG4gICAgICAvLyBWZXJpZmljYXIgZXN0cnVjdHVyYSBkZSBnZXRBdXRoZW50aWNhdGVkQWRtaW5cbiAgICAgIGV4cGVjdChhZG1pblJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3VzZXJJZCcpO1xuICAgICAgZXhwZWN0KGFkbWluUmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnc2Vzc2lvbklkJyk7XG4gICAgICBleHBlY3QoYWRtaW5SZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdpc0FkbWluJyk7XG4gICAgICAvLyBzdGF0dXMgc29sbyBlc3TDoSBwcmVzZW50ZSBlbiBjYXNvcyBkZSBlcnJvclxuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgbWFuZWphciBkaWZlcmVudGVzIHRpcG9zIGRlIHJlcXVlc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBUZXN0IGNvbiBOZXh0QXBpUmVxdWVzdFxuICAgICAgY29uc3QgYXBpUmVxdWVzdCA9IHsgcXVlcnk6IHt9LCBoZWFkZXJzOiB7fSB9IGFzIGFueTtcbiAgICAgIG1vY2tHZXRBdXRoLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHVzZXJJZDogJ3VzZXJfYXBpJyxcbiAgICAgICAgc2Vzc2lvbklkOiAnc2Vzc19hcGknLFxuICAgICAgICBnZXRUb2tlbjogamVzdC5mbigpXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYXBpUmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZFVzZXIoYXBpUmVxdWVzdCk7XG4gICAgICBleHBlY3QobW9ja0dldEF1dGgpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGFwaVJlcXVlc3QpO1xuICAgICAgZXhwZWN0KGFwaVJlc3VsdC51c2VySWQpLnRvQmUoJ3VzZXJfYXBpJyk7XG5cbiAgICAgIC8vIFRlc3Qgc2luIHJlcXVlc3QgKEFwcCBSb3V0ZXIpXG4gICAgICBtb2NrQXV0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHVzZXJJZDogJ3VzZXJfYXBwJyxcbiAgICAgICAgc2Vzc2lvbklkOiAnc2Vzc19hcHAnXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYXBwUmVzdWx0ID0gYXdhaXQgZ2V0QXV0aGVudGljYXRlZFVzZXIoKTtcbiAgICAgIGV4cGVjdChtb2NrQXV0aCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KGFwcFJlc3VsdC51c2VySWQpLnRvQmUoJ3VzZXJfYXBwJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDb21wYXRpYmlsaWRhZCB5IG1pZ3JhY2nDs24nLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgbWFudGVuZXIgY29tcGF0aWJpbGlkYWQgY29uIEFQSXMgZXhpc3RlbnRlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRlc3QgcXVlIHZlcmlmaWNhIHF1ZSBsYXMgQVBJcyBtaWdyYWRhcyBzaWd1ZW4gZnVuY2lvbmFuZG9cbiAgICAgIG1vY2tBdXRoLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgdXNlcklkOiAndXNlcl8xMjMnLFxuICAgICAgICBzZXNzaW9uSWQ6ICdzZXNzXzEyMydcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcigpO1xuICAgICAgXG4gICAgICAvLyBEZWJlIHJldG9ybmFyIGxhIG1pc21hIGVzdHJ1Y3R1cmEgcXVlIGFudGVzXG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgndXNlcklkJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnc2Vzc2lvbklkJyk7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC51c2VySWQpLnRvQmUoJ3N0cmluZycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYmUgcHJvcG9yY2lvbmFyIGluZm9ybWFjacOzbiBkZSBtaWdyYWNpw7NuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBnZXQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ3VzZXJfMTIzJylcbiAgICAgICAgfVxuICAgICAgfSBhcyBhbnk7XG5cbiAgICAgIGNvbnN0IGRlcHJlY2F0ZWRSZXN1bHQgPSBhd2FpdCBnZXRBdXRoRnJvbUhlYWRlcnMobW9ja1JlcXVlc3QpO1xuICAgICAgXG4gICAgICBleHBlY3QoZGVwcmVjYXRlZFJlc3VsdC5kZXByZWNhdGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGRlcHJlY2F0ZWRSZXN1bHQudXNlcklkKS50b0JlKCd1c2VyXzEyMycpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiZ2V0QXV0aCIsImZuIiwiYXV0aCIsInN1cGFiYXNlQWRtaW4iLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJzaW5nbGUiLCJkZXNjcmliZSIsIm1vY2tHZXRBdXRoIiwibW9ja0F1dGgiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwibW9ja1JlcXVlc3QiLCJxdWVyeSIsImhlYWRlcnMiLCJtb2NrUmV0dXJuVmFsdWUiLCJ1c2VySWQiLCJzZXNzaW9uSWQiLCJnZXRUb2tlbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwicmVzdWx0IiwiZ2V0QXV0aGVudGljYXRlZFVzZXIiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvQmUiLCJzZXNzaW9uQ2xhaW1zIiwibWV0YWRhdGEiLCJyb2xlIiwidG9IYXZlQmVlbkNhbGxlZCIsImlzQWRtaW4iLCJ0b0JlTnVsbCIsImVycm9yIiwibW9ja1JlamVjdGVkVmFsdWUiLCJFcnJvciIsInRvQ29udGFpbiIsImdldEF1dGhlbnRpY2F0ZWRBZG1pbiIsInN0YXR1cyIsImdldCIsImdldEF1dGhGcm9tSGVhZGVycyIsImRlcHJlY2F0ZWQiLCJ1c2VyUmVzdWx0IiwiYWRtaW5SZXN1bHQiLCJ0b0hhdmVQcm9wZXJ0eSIsImFwaVJlcXVlc3QiLCJhcGlSZXN1bHQiLCJhcHBSZXN1bHQiLCJkZXByZWNhdGVkUmVzdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0MsR0FFRCxnQkFBZ0I7O0FBQ2hCQSxLQUFLQyxJQUFJLENBQUMsd0JBQXdCLElBQU8sQ0FBQTtRQUN2Q0MsU0FBU0YsS0FBS0csRUFBRTtRQUNoQkMsTUFBTUosS0FBS0csRUFBRTtJQUNmLENBQUE7QUFFQSxtQkFBbUI7QUFDbkJILEtBQUtDLElBQUksQ0FBQyxrQkFBa0IsSUFBTyxDQUFBO1FBQ2pDSSxlQUFlO1lBQ2JDLE1BQU1O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