9ee233c60d9b3f29ffa31816195b1cd6
"use strict";
// Mock de los componentes del Design System
jest.mock('../shipping-info', ()=>({
        ShippingInfo: ({ options, selectedOption })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "shipping-info",
                children: [
                    "Shipping options for: ",
                    selectedOption
                ]
            })
    }));
jest.mock('../cart-summary', ()=>({
        CartSummary: ({ cartItems, variant })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "cart-summary",
                children: [
                    "Cart Summary - ",
                    cartItems.length,
                    " items - ",
                    variant
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _checkoutflow = require("../checkout-flow");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockCartItems = [
    {
        id: 1,
        title: 'Pintura Sherwin Williams 4L',
        price: 10000,
        discountedPrice: 8500,
        quantity: 2
    }
];
const mockCheckoutData = {
    totalPrice: 17000,
    shippingCost: 2500,
    discount: 0,
    finalTotal: 19500,
    shippingMethod: 'standard'
};
describe('CheckoutFlow', ()=>{
    const defaultProps = {
        currentStep: 0,
        cartItems: mockCartItems,
        checkoutData: mockCheckoutData
    };
    it('renders checkout flow with default steps', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText('Proceso de Compra')).toBeInTheDocument();
        expect(_react1.screen.getByText('Paso 1 de 5')).toBeInTheDocument();
        expect(_react1.screen.getAllByText('Carrito')).toHaveLength(2) // Aparece en el indicador y en el título
        ;
    });
    it('shows progress indicator', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 2
        }));
        expect(_react1.screen.getByText('Paso 3 de 5')).toBeInTheDocument();
    // El progreso debería ser 60% (3/5 * 100)
    });
    it('displays active step correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 1
        }));
        expect(_react1.screen.getAllByText('Envío')).toHaveLength(2) // Aparece en el indicador y en el título
        ;
        expect(_react1.screen.getAllByText('Dirección y método')).toHaveLength(2) // Aparece en el indicador y en la descripción
        ;
    });
    it('shows shipping info on shipping step', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 1
        }));
        expect(_react1.screen.getByText('Opciones de Envío')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('shipping-info')).toBeInTheDocument();
    });
    it('calls onStepChange when clicking on completed step', ()=>{
        const mockOnStepChange = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 2,
            onStepChange: mockOnStepChange
        }));
        // Hacer clic en el primer paso (debería estar completado)
        const firstStep = _react1.screen.getByText('Carrito');
        _react1.fireEvent.click(firstStep.closest('div'));
        expect(mockOnStepChange).toHaveBeenCalledWith(0);
    });
    it('shows cart summary when enabled', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            showCartSummary: true
        }));
        expect(_react1.screen.getByTestId('cart-summary')).toBeInTheDocument();
        expect(_react1.screen.getByText('Cart Summary - 1 items - default')).toBeInTheDocument();
    });
    it('hides cart summary when disabled', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            showCartSummary: false
        }));
        expect(_react1.screen.queryByTestId('cart-summary')).not.toBeInTheDocument();
    });
    it('calls onContinue when continue button is clicked', ()=>{
        const mockOnContinue = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            onContinue: mockOnContinue
        }));
        const continueButton = _react1.screen.getByText('Continuar');
        _react1.fireEvent.click(continueButton);
        expect(mockOnContinue).toHaveBeenCalledTimes(1);
    });
    it('calls onGoBack when back button is clicked', ()=>{
        const mockOnGoBack = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 1,
            onGoBack: mockOnGoBack
        }));
        const backButton = _react1.screen.getByText('Anterior');
        _react1.fireEvent.click(backButton);
        expect(mockOnGoBack).toHaveBeenCalledTimes(1);
    });
    it('disables back button on first step', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 0
        }));
        const backButton = _react1.screen.getByText('Anterior');
        expect(backButton).toBeDisabled();
    });
    it('shows finish button on last step', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 4
        }));
        expect(_react1.screen.getByText('Finalizar Compra')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Continuar')).not.toBeInTheDocument();
    });
    it('calls onComplete when finish button is clicked', ()=>{
        const mockOnComplete = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 4,
            onComplete: mockOnComplete
        }));
        const finishButton = _react1.screen.getByText('Finalizar Compra');
        _react1.fireEvent.click(finishButton);
        expect(mockOnComplete).toHaveBeenCalledTimes(1);
    });
    it('shows loading state', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 4,
            isLoading: true
        }));
        expect(_react1.screen.getByText('Procesando...')).toBeInTheDocument();
    });
    it('displays errors when present', ()=>{
        const errors = {
            email: 'Email es requerido',
            address: 'Dirección es requerida'
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            errors: errors
        }));
        expect(_react1.screen.getByText('Hay errores que corregir:')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Email es requerido')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Dirección es requerida')).toBeInTheDocument();
    });
    it('renders in compact variant', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            variant: "compact"
        }));
        // En variante compact, no debería mostrar el indicador de progreso
        expect(_react1.screen.queryByText('Proceso de Compra')).not.toBeInTheDocument();
    });
    it('renders custom steps', ()=>{
        const customSteps = [
            {
                id: 'custom1',
                title: 'Paso Personalizado',
                description: 'Descripción personalizada',
                icon: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Icon"
                    })
            }
        ];
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            steps: customSteps
        }));
        expect(_react1.screen.getAllByText('Paso Personalizado')).toHaveLength(2) // Aparece en el indicador y en el título
        ;
        expect(_react1.screen.getByText('Paso 1 de 1')).toBeInTheDocument();
    });
    it('shows step status correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            currentStep: 2
        }));
        // Los primeros dos pasos deberían estar completados
        // El tercer paso debería estar activo
        // Los últimos dos pasos deberían estar deshabilitados
        const steps = _react1.screen.getAllByRole('generic').filter((el)=>el.textContent?.includes('Carrito') || el.textContent?.includes('Envío') || el.textContent?.includes('Facturación'));
        expect(steps.length).toBeGreaterThan(0);
    });
    it('renders children content', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkoutflow.CheckoutFlow, {
            ...defaultProps,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "custom-content",
                children: "Custom step content"
            })
        }));
        expect(_react1.screen.getByTestId('custom-content')).toBeInTheDocument();
        expect(_react1.screen.getByText('Custom step content')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,