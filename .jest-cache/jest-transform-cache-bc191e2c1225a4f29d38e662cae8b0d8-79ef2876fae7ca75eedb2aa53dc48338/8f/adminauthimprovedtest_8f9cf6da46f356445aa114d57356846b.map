{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\admin-auth-improved.test.ts"],"sourcesContent":["/**\n * Tests para las funciones de autenticación mejoradas con Clerk\n * Verifica las nuevas funciones getAuth(req) y compatibilidad\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest, NextApiResponse } from 'next';\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  getAuth: jest.fn(),\n  auth: jest.fn(),\n  currentUser: jest.fn()\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      }))\n    }))\n  }\n}));\n\nimport { \n  getAuthenticatedUser, \n  getAuthFromApiRoute, \n  getAuthFromRouteHandler,\n  getUnifiedAuth,\n  withAdminAuthPages\n} from '@/lib/auth/admin-auth';\nimport { getAuth, auth } from '@clerk/nextjs/server';\n\ndescribe('Funciones de Autenticación Mejoradas', () => {\n  let mockGetAuth: jest.MockedFunction<typeof getAuth>;\n  let mockAuth: jest.MockedFunction<typeof auth>;\n\n  beforeEach(() => {\n    mockGetAuth = getAuth as jest.MockedFunction<typeof getAuth>;\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\n    jest.clearAllMocks();\n  });\n\n  describe('getAuthenticatedUser (mejorada)', () => {\n    it('debe usar getAuth para NextApiRequest', async () => {\n      const mockApiRequest = {\n        query: {},\n        headers: {},\n        cookies: {}\n      } as NextApiRequest;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'user_123',\n        sessionId: 'session_456',\n        getToken: jest.fn()\n      });\n\n      const result = await getAuthenticatedUser(mockApiRequest);\n\n      expect(mockGetAuth).toHaveBeenCalledWith(mockApiRequest);\n      expect(result).toEqual({\n        userId: 'user_123',\n        sessionId: 'session_456'\n      });\n    });\n\n    it('debe usar auth() para NextRequest', async () => {\n      const mockNextRequest = {\n        nextUrl: { pathname: '/test' },\n        headers: new Map(),\n        cookies: new Map()\n      } as any;\n\n      mockAuth.mockResolvedValue({\n        userId: 'user_789',\n        sessionId: 'session_abc',\n        getToken: jest.fn()\n      });\n\n      const result = await getAuthenticatedUser(mockNextRequest);\n\n      expect(mockAuth).toHaveBeenCalled();\n      expect(result).toEqual({\n        userId: 'user_789',\n        sessionId: 'session_abc'\n      });\n    });\n\n    it('debe usar fallback a headers cuando getAuth falla', async () => {\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue('user_fallback')\n        }\n      } as any;\n\n      mockAuth.mockRejectedValue(new Error('Auth failed'));\n\n      const result = await getAuthenticatedUser(mockRequest);\n\n      expect(result.userId).toBe('user_fallback');\n    });\n\n    it('debe retornar error cuando no hay autenticación', async () => {\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as any;\n\n      mockAuth.mockRejectedValue(new Error('Auth failed'));\n\n      const result = await getAuthenticatedUser(mockRequest);\n\n      expect(result.userId).toBeNull();\n      expect(result.error).toBe('No autorizado');\n    });\n  });\n\n  describe('getAuthFromApiRoute', () => {\n    it('debe usar getAuth correctamente para API Routes', () => {\n      const mockReq = { query: {}, headers: {} } as NextApiRequest;\n      const mockRes = {} as NextApiResponse;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'api_user_123',\n        sessionId: 'api_session_456',\n        getToken: jest.fn()\n      });\n\n      const result = getAuthFromApiRoute(mockReq, mockRes);\n\n      expect(mockGetAuth).toHaveBeenCalledWith(mockReq);\n      expect(result.userId).toBe('api_user_123');\n      expect(result.sessionId).toBe('api_session_456');\n    });\n\n    it('debe lanzar error cuando no hay userId', () => {\n      const mockReq = { query: {}, headers: {} } as NextApiRequest;\n      const mockRes = {} as NextApiResponse;\n\n      mockGetAuth.mockReturnValue({\n        userId: null,\n        sessionId: null,\n        getToken: jest.fn()\n      });\n\n      expect(() => getAuthFromApiRoute(mockReq, mockRes)).toThrow('Usuario no autenticado');\n    });\n  });\n\n  describe('getAuthFromRouteHandler', () => {\n    it('debe usar auth() correctamente para Route Handlers', async () => {\n      mockAuth.mockResolvedValue({\n        userId: 'route_user_123',\n        sessionId: 'route_session_456',\n        getToken: jest.fn()\n      });\n\n      const result = await getAuthFromRouteHandler();\n\n      expect(mockAuth).toHaveBeenCalled();\n      expect(result.userId).toBe('route_user_123');\n      expect(result.sessionId).toBe('route_session_456');\n    });\n\n    it('debe lanzar error cuando no hay userId', async () => {\n      mockAuth.mockResolvedValue({\n        userId: null,\n        sessionId: null,\n        getToken: jest.fn()\n      });\n\n      await expect(getAuthFromRouteHandler()).rejects.toThrow('Usuario no autenticado');\n    });\n  });\n\n  describe('getUnifiedAuth', () => {\n    it('debe detectar NextApiRequest y usar getAuth', async () => {\n      const mockApiRequest = {\n        query: {},\n        headers: {}\n      } as NextApiRequest;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'unified_user_123',\n        sessionId: 'unified_session_456',\n        getToken: jest.fn()\n      });\n\n      const result = await getUnifiedAuth(mockApiRequest);\n\n      expect(mockGetAuth).toHaveBeenCalledWith(mockApiRequest);\n      expect(result.userId).toBe('unified_user_123');\n    });\n\n    it('debe detectar NextRequest y usar auth()', async () => {\n      const mockNextRequest = {\n        nextUrl: { pathname: '/test' },\n        headers: new Map()\n      } as any;\n\n      mockAuth.mockResolvedValue({\n        userId: 'unified_route_123',\n        sessionId: 'unified_route_456',\n        getToken: jest.fn()\n      });\n\n      const result = await getUnifiedAuth(mockNextRequest);\n\n      expect(mockAuth).toHaveBeenCalled();\n      expect(result.userId).toBe('unified_route_123');\n    });\n\n    it('debe usar fallback cuando hay error', async () => {\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue('fallback_user')\n        }\n      } as any;\n\n      mockAuth.mockRejectedValue(new Error('Unified auth failed'));\n\n      const result = await getUnifiedAuth(mockRequest);\n\n      expect(result.userId).toBe('fallback_user');\n    });\n  });\n\n  describe('withAdminAuthPages wrapper', () => {\n    it('debe crear wrapper funcional para Pages Router', () => {\n      const mockHandler = jest.fn();\n      const wrappedHandler = withAdminAuthPages(mockHandler);\n\n      expect(typeof wrappedHandler).toBe('function');\n    });\n\n    it('debe pasar contexto correcto al handler', async () => {\n      const mockHandler = jest.fn();\n      const mockReq = { query: {}, headers: {} } as NextApiRequest;\n      const mockRes = { \n        status: jest.fn().mockReturnThis(),\n        json: jest.fn()\n      } as any;\n\n      // Mock successful auth\n      mockGetAuth.mockReturnValue({\n        userId: 'admin_user',\n        sessionId: 'admin_session',\n        getToken: jest.fn()\n      });\n\n      const wrappedHandler = withAdminAuthPages(mockHandler);\n      \n      // Este test verificaría la estructura, pero requiere mocks más complejos\n      // para el sistema completo de permisos\n      expect(typeof wrappedHandler).toBe('function');\n    });\n  });\n\n  describe('Compatibilidad hacia atrás', () => {\n    it('debe mantener compatibilidad con headers x-clerk-user-id', async () => {\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockImplementation((key) => {\n            if (key === 'x-clerk-user-id') return 'legacy_user_123';\n            return null;\n          })\n        }\n      } as any;\n\n      mockAuth.mockRejectedValue(new Error('Auth not available'));\n\n      const result = await getAuthenticatedUser(mockRequest);\n\n      expect(result.userId).toBe('legacy_user_123');\n    });\n\n    it('debe mantener compatibilidad con JWT en cookies', async () => {\n      const mockJwtPayload = { sub: 'jwt_user_123' };\n      const mockJwt = 'header.' + btoa(JSON.stringify(mockJwtPayload)) + '.signature';\n\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        },\n        cookies: {\n          get: jest.fn().mockImplementation((key) => {\n            if (key === '__session') return { value: mockJwt };\n            return undefined;\n          })\n        }\n      } as any;\n\n      mockAuth.mockRejectedValue(new Error('Auth not available'));\n\n      const result = await getAuthenticatedUser(mockRequest);\n\n      expect(result.userId).toBe('jwt_user_123');\n    });\n  });\n\n  describe('Logging y debugging', () => {\n    it('debe loggear autenticación exitosa', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      const mockApiRequest = {\n        query: {},\n        headers: {}\n      } as NextApiRequest;\n\n      mockGetAuth.mockReturnValue({\n        userId: 'logged_user_123',\n        sessionId: 'logged_session_456',\n        getToken: jest.fn()\n      });\n\n      await getAuthenticatedUser(mockApiRequest);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('[AUTH] Usuario autenticado via getAuth: logged_user_123')\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    it('debe loggear warnings para fallbacks', async () => {\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n      \n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue('fallback_user')\n        }\n      } as any;\n\n      mockAuth.mockRejectedValue(new Error('Auth failed'));\n\n      await getAuthenticatedUser(mockRequest);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('[AUTH] Usando header fallback para userId')\n      );\n\n      consoleSpy.mockRestore();\n    });\n  });\n});\n"],"names":["jest","mock","getAuth","fn","auth","currentUser","supabaseAdmin","from","select","eq","single","describe","mockGetAuth","mockAuth","beforeEach","clearAllMocks","it","mockApiRequest","query","headers","cookies","mockReturnValue","userId","sessionId","getToken","result","getAuthenticatedUser","expect","toHaveBeenCalledWith","toEqual","mockNextRequest","nextUrl","pathname","Map","mockResolvedValue","toHaveBeenCalled","mockRequest","get","mockRejectedValue","Error","toBe","toBeNull","error","mockReq","mockRes","getAuthFromApiRoute","toThrow","getAuthFromRouteHandler","rejects","getUnifiedAuth","mockHandler","wrappedHandler","withAdminAuthPages","status","mockReturnThis","json","mockImplementation","key","mockJwtPayload","sub","mockJwt","btoa","JSON","stringify","value","undefined","consoleSpy","spyOn","console","stringContaining","mockRestore"],"mappings":"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"}