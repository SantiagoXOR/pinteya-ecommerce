{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\profile\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - API DE PERFIL DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// GET - Obtener perfil de usuario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticación con Clerk\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n\r\n    // Buscar usuario en Supabase\r\n    const { data: user, error } = await supabaseAdmin\r\n      .from('users')\r\n      .select('*')\r\n      .eq('clerk_id', userId)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') {\r\n      console.error('Error al obtener usuario:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener perfil de usuario' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Si no existe el usuario, crear uno demo\r\n    if (!user) {\r\n      const { data: newUser, error: createError } = await supabaseAdmin\r\n        .from('users')\r\n        .insert([\r\n          {\r\n            clerk_id: userId,\r\n            email: 'usuario@demo.com',\r\n            name: 'Usuario Demo',\r\n          },\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('Error al crear usuario demo:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear perfil de usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        user: newUser,\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/profile:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar perfil de usuario\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticación con Clerk\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const body = await request.json();\r\n\r\n    // Validar datos requeridos\r\n    const { name, email } = body;\r\n    if (!name || !email) {\r\n      return NextResponse.json(\r\n        { error: 'Nombre y email son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar usuario en Supabase\r\n    const { data: updatedUser, error } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        name,\r\n        email,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('clerk_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar usuario:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar perfil de usuario' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: updatedUser,\r\n      message: 'Perfil actualizado correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/profile:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":["GET","PUT","request","supabaseAdmin","console","error","NextResponse","json","status","userId","auth","errorResponse","data","success","user","from","select","eq","single","code","newUser","createError","insert","clerk_id","email","name","body","updatedUser","update","updated_at","Date","toISOString","message"],"mappings":"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"}