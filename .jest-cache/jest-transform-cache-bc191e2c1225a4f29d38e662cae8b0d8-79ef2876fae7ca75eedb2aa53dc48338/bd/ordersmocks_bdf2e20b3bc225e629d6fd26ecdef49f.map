{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\setup\\orders-mocks.js"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ORDERS ENTERPRISE MOCKS\n// ===================================\n// Mocks centralizados para testing de órdenes siguiendo patrones Fase 1\n\n// ===================================\n// MOCK DATA ORDERS\n// ===================================\n\nexport const mockUser = {\n  id: 'test-user-id',\n  clerk_id: 'test-clerk-id',\n  email: 'test@example.com',\n  name: 'Test User',\n  phone: '+54911234567',\n  role: 'customer'\n};\n\nexport const mockAdminUser = {\n  id: 'admin-user-id',\n  clerk_id: 'admin-clerk-id',\n  email: 'santiago@xor.com.ar',\n  name: 'Admin User',\n  phone: '+54911234567',\n  role: 'admin'\n};\n\nexport const mockProducts = [\n  {\n    id: 1,\n    name: 'Pintura Latex Interior Blanco 20L',\n    images: ['https://example.com/image1.jpg'],\n    sku: 'PAINT-001',\n    category: 'Pinturas',\n    price: 15000,\n    stock: 50\n  },\n  {\n    id: 2,\n    name: 'Rodillo Antigota 23cm',\n    images: ['https://example.com/image2.jpg'],\n    sku: 'TOOL-001',\n    category: 'Herramientas',\n    price: 2500,\n    stock: 25\n  }\n];\n\nexport const mockOrderItems = [\n  {\n    id: 'item-1',\n    order_id: 'order-1',\n    product_id: 1,\n    quantity: 2,\n    unit_price: 15000,\n    total_price: 30000,\n    products: mockProducts[0]\n  },\n  {\n    id: 'item-2',\n    order_id: 'order-1',\n    product_id: 2,\n    quantity: 1,\n    unit_price: 2500,\n    total_price: 2500,\n    products: mockProducts[1]\n  }\n];\n\nexport const mockShippingAddress = {\n  street_name: 'Av. Corrientes',\n  street_number: '1234',\n  zip_code: '1000',\n  city_name: 'Buenos Aires',\n  state_name: 'CABA'\n};\n\nexport const mockOrders = [\n  {\n    id: 'order-1',\n    order_number: 'ORD-1234567890-ABC123',\n    user_id: 'test-user-id',\n    status: 'pending',\n    payment_status: 'pending',\n    fulfillment_status: 'unfulfilled',\n    total_amount: 32500,\n    currency: 'ARS',\n    shipping_address: JSON.stringify(mockShippingAddress),\n    notes: 'Entrega en horario de oficina',\n    admin_notes: null,\n    tracking_number: null,\n    carrier: null,\n    estimated_delivery: null,\n    metadata: {},\n    created_at: '2024-01-01T10:00:00Z',\n    updated_at: '2024-01-01T10:00:00Z',\n    user_profiles: mockUser,\n    order_items: mockOrderItems\n  },\n  {\n    id: 'order-2',\n    order_number: 'ORD-1234567891-DEF456',\n    user_id: 'test-user-id',\n    status: 'shipped',\n    payment_status: 'paid',\n    fulfillment_status: 'fulfilled',\n    total_amount: 15000,\n    currency: 'ARS',\n    shipping_address: JSON.stringify(mockShippingAddress),\n    notes: null,\n    admin_notes: 'Envío urgente',\n    tracking_number: 'TRACK123456',\n    carrier: 'oca',\n    estimated_delivery: '2024-01-05T18:00:00Z',\n    metadata: {},\n    created_at: '2024-01-02T10:00:00Z',\n    updated_at: '2024-01-03T15:30:00Z',\n    user_profiles: mockUser,\n    order_items: [mockOrderItems[0]]\n  }\n];\n\nexport const mockStatusHistory = [\n  {\n    id: 'history-1',\n    order_id: 'order-1',\n    previous_status: null,\n    new_status: 'pending',\n    changed_by: 'system',\n    reason: 'Orden creada',\n    metadata: { trigger: 'automatic' },\n    created_at: '2024-01-01T10:00:00Z',\n    user_profiles: null\n  },\n  {\n    id: 'history-2',\n    order_id: 'order-1',\n    previous_status: 'pending',\n    new_status: 'confirmed',\n    changed_by: 'admin-user-id',\n    reason: 'Pago confirmado',\n    metadata: { trigger: 'manual' },\n    created_at: '2024-01-01T11:00:00Z',\n    user_profiles: mockAdminUser\n  }\n];\n\nexport const mockOrderNotes = [\n  {\n    id: 'note-1',\n    order_id: 'order-1',\n    admin_id: 'admin-user-id',\n    note_type: 'internal',\n    content: 'Cliente solicitó entrega urgente',\n    is_visible_to_customer: false,\n    metadata: {},\n    created_at: '2024-01-01T12:00:00Z',\n    updated_at: '2024-01-01T12:00:00Z',\n    user_profiles: mockAdminUser\n  }\n];\n\n// ===================================\n// MOCK SUPABASE ADMIN PARA ORDERS\n// ===================================\n\nexport const createMockSupabaseAdmin = () => {\n  const mockSupabaseAdmin = {\n    from: jest.fn().mockImplementation((table) => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        insert: jest.fn().mockReturnThis(),\n        update: jest.fn().mockReturnThis(),\n        delete: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        neq: jest.fn().mockReturnThis(),\n        in: jest.fn().mockReturnThis(),\n        gte: jest.fn().mockReturnThis(),\n        lte: jest.fn().mockReturnThis(),\n        or: jest.fn().mockReturnThis(),\n        order: jest.fn().mockReturnThis(),\n        range: jest.fn().mockReturnThis(),\n        single: jest.fn().mockReturnThis(),\n        limit: jest.fn().mockReturnThis(),\n      };\n\n      // Configurar respuestas específicas por tabla\n      if (table === 'orders') {\n        mockQuery.select.mockImplementation((columns) => {\n          if (columns && columns.includes('count')) {\n            return {\n              ...mockQuery,\n              single: () => Promise.resolve({ data: null, error: null, count: mockOrders.length })\n            };\n          }\n          return {\n            ...mockQuery,\n            single: () => Promise.resolve({ data: mockOrders[0], error: null }),\n            range: () => Promise.resolve({ \n              data: mockOrders, \n              error: null, \n              count: mockOrders.length \n            })\n          };\n        });\n\n        mockQuery.insert.mockImplementation(() => ({\n          ...mockQuery,\n          select: () => ({\n            ...mockQuery,\n            single: () => Promise.resolve({ \n              data: { ...mockOrders[0], id: 'new-order-id' }, \n              error: null \n            })\n          })\n        }));\n\n        mockQuery.update.mockImplementation(() => ({\n          ...mockQuery,\n          select: () => ({\n            ...mockQuery,\n            single: () => Promise.resolve({ \n              data: { ...mockOrders[0], status: 'confirmed' }, \n              error: null \n            })\n          })\n        }));\n      }\n\n      if (table === 'order_items') {\n        mockQuery.insert.mockImplementation(() => \n          Promise.resolve({ data: mockOrderItems, error: null })\n        );\n      }\n\n      if (table === 'order_status_history') {\n        mockQuery.select.mockImplementation(() => ({\n          ...mockQuery,\n          eq: () => ({\n            ...mockQuery,\n            order: () => Promise.resolve({ data: mockStatusHistory, error: null })\n          })\n        }));\n\n        mockQuery.insert.mockImplementation(() => \n          Promise.resolve({ data: mockStatusHistory[0], error: null })\n        );\n      }\n\n      if (table === 'order_notes') {\n        mockQuery.select.mockImplementation(() => ({\n          ...mockQuery,\n          eq: () => ({\n            ...mockQuery,\n            order: () => Promise.resolve({ data: mockOrderNotes, error: null })\n          })\n        }));\n\n        mockQuery.insert.mockImplementation(() => \n          Promise.resolve({ data: mockOrderNotes[0], error: null })\n        );\n      }\n\n      if (table === 'user_profiles') {\n        mockQuery.select.mockImplementation(() => ({\n          ...mockQuery,\n          eq: () => ({\n            ...mockQuery,\n            single: () => Promise.resolve({ data: mockUser, error: null })\n          })\n        }));\n      }\n\n      if (table === 'products') {\n        mockQuery.select.mockImplementation(() => ({\n          ...mockQuery,\n          in: () => Promise.resolve({ data: mockProducts, error: null })\n        }));\n      }\n\n      return mockQuery;\n    }),\n\n    // RPC functions\n    rpc: jest.fn().mockImplementation((functionName, params) => {\n      if (functionName === 'get_daily_order_trends') {\n        return Promise.resolve({\n          data: [\n            { date: '2024-01-01', total_orders: 5, total_revenue: 75000, avg_order_value: 15000 },\n            { date: '2024-01-02', total_orders: 3, total_revenue: 45000, avg_order_value: 15000 }\n          ],\n          error: null\n        });\n      }\n      return Promise.resolve({ data: null, error: null });\n    })\n  };\n\n  return mockSupabaseAdmin;\n};\n\n// ===================================\n// MOCK CLERK AUTH PARA ORDERS\n// ===================================\n\nexport const createMockClerkAuth = (isAdmin = false) => {\n  const mockAuth = jest.fn().mockResolvedValue({\n    userId: isAdmin ? 'admin-clerk-id' : 'test-clerk-id'\n  });\n\n  const mockCurrentUser = jest.fn().mockResolvedValue({\n    id: isAdmin ? 'admin-clerk-id' : 'test-clerk-id',\n    emailAddresses: [{\n      emailAddress: isAdmin ? 'santiago@xor.com.ar' : 'test@example.com'\n    }],\n    firstName: isAdmin ? 'Admin' : 'Test',\n    lastName: 'User'\n  });\n\n  return { mockAuth, mockCurrentUser };\n};\n\n// ===================================\n// MOCK RATE LIMITER PARA ORDERS\n// ===================================\n\nexport const createMockRateLimiter = () => {\n  const mockCheckRateLimit = jest.fn().mockResolvedValue({\n    success: true,\n    remaining: 100,\n    reset: Date.now() + 3600000\n  });\n\n  const mockAddRateLimitHeaders = jest.fn();\n\n  return { mockCheckRateLimit, mockAddRateLimitHeaders };\n};\n\n// ===================================\n// MOCK LOGGER PARA ORDERS\n// ===================================\n\nexport const createMockLogger = () => {\n  const mockLogger = {\n    log: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    info: jest.fn(),\n    debug: jest.fn()\n  };\n\n  return mockLogger;\n};\n\n// ===================================\n// MOCK METRICS COLLECTOR PARA ORDERS\n// ===================================\n\nexport const createMockMetricsCollector = () => {\n  const mockMetricsCollector = {\n    recordApiCall: jest.fn(),\n    recordError: jest.fn(),\n    recordPerformance: jest.fn()\n  };\n\n  return mockMetricsCollector;\n};\n\n// ===================================\n// MOCK FETCH PARA ORDERS\n// ===================================\n\nexport const createMockFetch = () => {\n  const mockFetch = jest.fn().mockImplementation((url, options) => {\n    const method = options?.method || 'GET';\n    \n    // Mock responses para diferentes endpoints\n    if (url.includes('/api/admin/orders') && method === 'GET') {\n      return Promise.resolve({\n        ok: true,\n        status: 200,\n        json: () => Promise.resolve({\n          data: {\n            orders: mockOrders,\n            pagination: {\n              page: 1,\n              limit: 20,\n              total: mockOrders.length,\n              totalPages: 1,\n              hasNextPage: false,\n              hasPreviousPage: false\n            },\n            filters: {}\n          },\n          success: true,\n          error: null\n        })\n      });\n    }\n\n    if (url.includes('/api/admin/orders') && method === 'POST') {\n      return Promise.resolve({\n        ok: true,\n        status: 201,\n        json: () => Promise.resolve({\n          data: { ...mockOrders[0], id: 'new-order-id' },\n          success: true,\n          error: null\n        })\n      });\n    }\n\n    if (url.includes('/api/admin/orders/') && url.includes('/status') && method === 'POST') {\n      return Promise.resolve({\n        ok: true,\n        status: 200,\n        json: () => Promise.resolve({\n          data: {\n            order: { ...mockOrders[0], status: 'confirmed' },\n            previousStatus: 'pending',\n            newStatus: 'confirmed',\n            statusDescription: 'Confirmada'\n          },\n          success: true,\n          error: null\n        })\n      });\n    }\n\n    // Default response\n    return Promise.resolve({\n      ok: true,\n      status: 200,\n      json: () => Promise.resolve({ data: null, success: true, error: null })\n    });\n  });\n\n  return mockFetch;\n};\n\n// ===================================\n// HELPER FUNCTIONS\n// ===================================\n\nexport const resetAllMocks = () => {\n  jest.clearAllMocks();\n};\n\nexport const createOrderTestData = (overrides = {}) => {\n  return {\n    ...mockOrders[0],\n    ...overrides\n  };\n};\n\nexport const createOrderItemTestData = (overrides = {}) => {\n  return {\n    ...mockOrderItems[0],\n    ...overrides\n  };\n};\n\nexport const createStatusHistoryTestData = (overrides = {}) => {\n  return {\n    ...mockStatusHistory[0],\n    ...overrides\n  };\n};\n"],"names":["createMockClerkAuth","createMockFetch","createMockLogger","createMockMetricsCollector","createMockRateLimiter","createMockSupabaseAdmin","createOrderItemTestData","createOrderTestData","createStatusHistoryTestData","mockAdminUser","mockOrderItems","mockOrderNotes","mockOrders","mockProducts","mockShippingAddress","mockStatusHistory","mockUser","resetAllMocks","id","clerk_id","email","name","phone","role","images","sku","category","price","stock","order_id","product_id","quantity","unit_price","total_price","products","street_name","street_number","zip_code","city_name","state_name","order_number","user_id","status","payment_status","fulfillment_status","total_amount","currency","shipping_address","JSON","stringify","notes","admin_notes","tracking_number","carrier","estimated_delivery","metadata","created_at","updated_at","user_profiles","order_items","previous_status","new_status","changed_by","reason","trigger","admin_id","note_type","content","is_visible_to_customer","mockSupabaseAdmin","from","jest","fn","mockImplementation","table","mockQuery","select","mockReturnThis","insert","update","delete","eq","neq","in","gte","lte","or","order","range","single","limit","columns","includes","Promise","resolve","data","error","count","length","rpc","functionName","params","date","total_orders","total_revenue","avg_order_value","isAdmin","mockAuth","mockResolvedValue","userId","mockCurrentUser","emailAddresses","emailAddress","firstName","lastName","mockCheckRateLimit","success","remaining","reset","Date","now","mockAddRateLimitHeaders","mockLogger","log","warn","info","debug","mockMetricsCollector","recordApiCall","recordError","recordPerformance","mockFetch","url","options","method","ok","json","orders","pagination","page","total","totalPages","hasNextPage","hasPreviousPage","filters","previousStatus","newStatus","statusDescription","clearAllMocks","overrides"],"mappings":"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"}