f91f6b0f2fac6a67471248060972c520
/**
 * Middleware Enterprise de Validación
 * Integra validación y sanitización con APIs de forma transparente
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    sanitizeData: function() {
        return sanitizeData;
    },
    validateData: function() {
        return validateData;
    },
    withBasicValidation: function() {
        return withBasicValidation;
    },
    withCriticalValidation: function() {
        return withCriticalValidation;
    },
    withEnterpriseValidation: function() {
        return withEnterpriseValidation;
    },
    withEnterpriseValidationAPI: function() {
        return withEnterpriseValidationAPI;
    },
    withHighValidation: function() {
        return withHighValidation;
    },
    withStandardValidation: function() {
        return withStandardValidation;
    }
});
const _server = require("next/server");
const _enterprisevalidationsystem = require("./enterprise-validation-system");
const _enterpriseauthutils = require("../auth/enterprise-auth-utils");
function withEnterpriseValidation(options) {
    return function(handler) {
        return async (request, ...args)=>{
            try {
                // Verificar si debe saltarse la validación
                if (options.skipValidation && options.skipValidation(request)) {
                    return await handler(request, ...args);
                }
                // Obtener configuración de validación
                const config = options.customConfig || (options.configName ? _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS[options.configName] : _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);
                const validator = new _enterprisevalidationsystem.EnterpriseValidator(config);
                // Obtener contexto enterprise si está habilitado
                let enterpriseContext;
                if (options.enableContextValidation) {
                    try {
                        const authResult = await (0, _enterpriseauthutils.getEnterpriseAuthContext)(request, {
                            securityLevel: config.securityLevel || 'standard'
                        });
                        if (authResult.success) {
                            enterpriseContext = authResult.context;
                        }
                    } catch (error) {
                        console.warn('[VALIDATION_MIDDLEWARE] No se pudo obtener contexto enterprise:', error);
                    }
                }
                const validatedRequest = request;
                const validationResults = {};
                const allErrors = [];
                // 1. Validar body si hay schema
                if (options.bodySchema && [
                    'POST',
                    'PUT',
                    'PATCH'
                ].includes(request.method)) {
                    try {
                        const body = await request.json();
                        const bodyValidation = await validator.validateAndSanitize(options.bodySchema, body, enterpriseContext, request);
                        if (bodyValidation.success) {
                            validatedRequest.validatedBody = bodyValidation.data;
                            validationResults.body = bodyValidation.metadata;
                        } else {
                            allErrors.push(...bodyValidation.errors || []);
                        }
                    } catch (error) {
                        allErrors.push({
                            field: 'body',
                            message: 'Error parsing JSON body',
                            code: 'INVALID_JSON',
                            severity: 'high'
                        });
                    }
                }
                // 2. Validar query parameters si hay schema
                if (options.querySchema) {
                    const url = new URL(request.url);
                    const queryParams = Object.fromEntries(url.searchParams.entries());
                    const queryValidation = await validator.validateAndSanitize(options.querySchema, queryParams, enterpriseContext, request);
                    if (queryValidation.success) {
                        validatedRequest.validatedQuery = queryValidation.data;
                        validationResults.query = queryValidation.metadata;
                    } else {
                        allErrors.push(...queryValidation.errors || []);
                    }
                }
                // 3. Validar params si hay schema
                if (options.paramsSchema) {
                    // Extraer params de la URL (esto requeriría configuración adicional)
                    // Por ahora, asumimos que los params están disponibles en el contexto
                    const params = request.params || {};
                    const paramsValidation = await validator.validateAndSanitize(options.paramsSchema, params, enterpriseContext, request);
                    if (paramsValidation.success) {
                        validatedRequest.validatedParams = paramsValidation.data;
                        validationResults.params = paramsValidation.metadata;
                    } else {
                        allErrors.push(...paramsValidation.errors || []);
                    }
                }
                // 4. Verificar errores de validación
                if (allErrors.length > 0) {
                    // Callback personalizado para errores
                    if (options.onValidationError) {
                        options.onValidationError(allErrors, request);
                    }
                    // Logging de errores
                    console.warn('[VALIDATION_MIDDLEWARE] Errores de validación:', allErrors);
                    // Respuesta de error
                    return _server.NextResponse.json({
                        error: 'Errores de validación',
                        code: 'VALIDATION_FAILED',
                        details: allErrors.map((err)=>({
                                field: err.field,
                                message: err.message,
                                code: err.code
                            })),
                        enterprise: true,
                        timestamp: new Date().toISOString()
                    }, {
                        status: 400
                    });
                }
                // 5. Añadir metadatos de validación
                validatedRequest.validationMetadata = validationResults;
                validatedRequest.enterpriseContext = enterpriseContext;
                // 6. Ejecutar handler original
                return await handler(validatedRequest, ...args);
            } catch (error) {
                console.error('[VALIDATION_MIDDLEWARE] Error:', error);
                return _server.NextResponse.json({
                    error: 'Error interno en validación',
                    code: 'VALIDATION_ERROR',
                    enterprise: true,
                    timestamp: new Date().toISOString()
                }, {
                    status: 500
                });
            }
        };
    };
}
function withEnterpriseValidationAPI(options) {
    return function(handler) {
        return async (req, res)=>{
            try {
                // Verificar si debe saltarse la validación
                if (options.skipValidation && options.skipValidation(req)) {
                    return await handler(req, res);
                }
                // Obtener configuración de validación
                const config = options.customConfig || (options.configName ? _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS[options.configName] : _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);
                const validator = new _enterprisevalidationsystem.EnterpriseValidator(config);
                // Obtener contexto enterprise si está habilitado
                let enterpriseContext;
                if (options.enableContextValidation) {
                    try {
                    // Para Pages API, necesitaríamos adaptar getEnterpriseAuthContext
                    // Por ahora, lo omitimos
                    } catch (error) {
                        console.warn('[VALIDATION_API] No se pudo obtener contexto enterprise:', error);
                    }
                }
                const validatedRequest = req;
                const validationResults = {};
                const allErrors = [];
                // 1. Validar body si hay schema
                if (options.bodySchema && [
                    'POST',
                    'PUT',
                    'PATCH'
                ].includes(req.method || '')) {
                    const bodyValidation = await validator.validateAndSanitize(options.bodySchema, req.body, enterpriseContext, req);
                    if (bodyValidation.success) {
                        validatedRequest.validatedBody = bodyValidation.data;
                        validationResults.body = bodyValidation.metadata;
                    } else {
                        allErrors.push(...bodyValidation.errors || []);
                    }
                }
                // 2. Validar query parameters si hay schema
                if (options.querySchema) {
                    const queryValidation = await validator.validateAndSanitize(options.querySchema, req.query, enterpriseContext, req);
                    if (queryValidation.success) {
                        validatedRequest.validatedQuery = queryValidation.data;
                        validationResults.query = queryValidation.metadata;
                    } else {
                        allErrors.push(...queryValidation.errors || []);
                    }
                }
                // 3. Verificar errores de validación
                if (allErrors.length > 0) {
                    // Callback personalizado para errores
                    if (options.onValidationError) {
                        options.onValidationError(allErrors, req);
                    }
                    // Respuesta de error
                    res.status(400).json({
                        error: 'Errores de validación',
                        code: 'VALIDATION_FAILED',
                        details: allErrors.map((err)=>({
                                field: err.field,
                                message: err.message,
                                code: err.code
                            })),
                        enterprise: true,
                        timestamp: new Date().toISOString()
                    });
                    return;
                }
                // 4. Añadir metadatos de validación
                validatedRequest.validationMetadata = validationResults;
                validatedRequest.enterpriseContext = enterpriseContext;
                // 5. Ejecutar handler original
                return await handler(validatedRequest, res);
            } catch (error) {
                console.error('[VALIDATION_API] Error:', error);
                res.status(500).json({
                    error: 'Error interno en validación',
                    code: 'VALIDATION_ERROR',
                    enterprise: true,
                    timestamp: new Date().toISOString()
                });
            }
        };
    };
}
const withCriticalValidation = (schemas)=>withEnterpriseValidation({
        ...schemas,
        configName: 'CRITICAL_ADMIN',
        enableContextValidation: true,
        strictMode: true
    });
const withHighValidation = (schemas)=>withEnterpriseValidation({
        ...schemas,
        configName: 'HIGH_PAYMENT',
        enableContextValidation: true,
        strictMode: true
    });
const withStandardValidation = (schemas)=>withEnterpriseValidation({
        ...schemas,
        configName: 'STANDARD_PUBLIC',
        enableContextValidation: false,
        strictMode: false
    });
const withBasicValidation = (schemas)=>withEnterpriseValidation({
        ...schemas,
        configName: 'BASIC_USER',
        enableContextValidation: false,
        strictMode: false
    });
async function validateData(schema, data, securityLevel = 'STANDARD_PUBLIC', context) {
    const config = _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS[securityLevel];
    const validator = new _enterprisevalidationsystem.EnterpriseValidator(config);
    return await validator.validateAndSanitize(schema, data, context);
}
function sanitizeData(data, securityLevel = 'STANDARD_PUBLIC') {
    const config = _enterprisevalidationsystem.ENTERPRISE_VALIDATION_CONFIGS[securityLevel];
    const validator = new _enterprisevalidationsystem.EnterpriseValidator(config);
    return validator['sanitizer'].sanitizeObject(data);
}

//# sourceMappingURL=data:application/json;base64,