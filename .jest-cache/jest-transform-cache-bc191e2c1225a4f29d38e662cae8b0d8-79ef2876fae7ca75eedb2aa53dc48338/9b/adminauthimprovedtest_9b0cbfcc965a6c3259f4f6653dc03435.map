{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\admin-auth-improved.test.ts"],"sourcesContent":["/**\r\n * Tests para las funciones de autenticación mejoradas con Clerk\r\n * Verifica las nuevas funciones auth(req) y compatibilidad\r\n */\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport type { NextApiRequest, NextApiResponse } from 'next';\r\n\r\n// Mock de NextAuth\r\njest.mock('@/auth', () => ({\r\n  auth: jest.fn()\r\n}));\r\n\r\njest.mock('next-auth/react', () => ({\r\n  useSession: jest.fn()\r\n}));\r\n\r\n// Mock de Supabase\r\njest.mock('@/lib/supabase', () => ({\r\n  supabaseAdmin: {\r\n    from: jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          single: jest.fn()\r\n        }))\r\n      }))\r\n    }))\r\n  }\r\n}));\r\n\r\nimport {\r\n  authenticatedUser,\r\n  authFromApiRoute,\r\n  authFromRouteHandler,\r\n  getUnifiedAuth,\r\n  withAdminAuthPages\r\n} from '@/lib/auth/admin-auth';\r\nimport { auth } from '@/auth';\r\n\r\ndescribe('Funciones de Autenticación Mejoradas', () => {\r\n  let mockAuth: jest.MockedFunction<typeof auth>;\r\n\r\n  beforeEach(() => {\r\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\r\n    mockAuth = auth as jest.MockedFunction<typeof auth>;\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('authenticatedUser (mejorada)', () => {\r\n    it('debe usar auth para NextApiRequest', async () => {\r\n      const mockApiRequest = {\r\n        query: {},\r\n        headers: {},\r\n        cookies: {}\r\n      } as NextApiRequest;\r\n\r\n      mockAuth.mockReturnValue({\r\n        userId: 'user_123',\r\n        sessionId: 'session_456',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      const result = await authenticatedUser(mockApiRequest);\r\n\r\n      expect(mockAuth).toHaveBeenCalledWith(mockApiRequest);\r\n      expect(result).toEqual({\r\n        userId: 'user_123',\r\n        sessionId: 'session_456'\r\n      });\r\n    });\r\n\r\n    it('debe usar auth() para NextRequest', async () => {\r\n      const mockNextRequest = {\r\n        nextUrl: { pathname: '/test' },\r\n        headers: new Map(),\r\n        cookies: new Map()\r\n      } as any;\r\n\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'user_789',\r\n        sessionId: 'session_abc',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      const result = await authenticatedUser(mockNextRequest);\r\n\r\n      expect(mockAuth).toHaveBeenCalled();\r\n      expect(result).toEqual({\r\n        userId: 'user_789',\r\n        sessionId: 'session_abc'\r\n      });\r\n    });\r\n\r\n    it('debe usar fallback a headers cuando auth falla', async () => {\r\n      const mockRequest = {\r\n        headers: {\r\n          get: jest.fn().mockReturnValue('user_fallback')\r\n        }\r\n      } as any;\r\n\r\n      mockAuth.mockRejectedValue(new Error('Auth failed'));\r\n\r\n      const result = await authenticatedUser(mockRequest);\r\n\r\n      expect(result.userId).toBe('user_fallback');\r\n    });\r\n\r\n    it('debe retornar error cuando no hay autenticación', async () => {\r\n      const mockRequest = {\r\n        headers: {\r\n          get: jest.fn().mockReturnValue(null)\r\n        }\r\n      } as any;\r\n\r\n      mockAuth.mockRejectedValue(new Error('Auth failed'));\r\n\r\n      const result = await authenticatedUser(mockRequest);\r\n\r\n      expect(result.userId).toBeNull();\r\n      expect(result.error).toBe('No autorizado');\r\n    });\r\n  });\r\n\r\n  describe('authFromApiRoute', () => {\r\n    it('debe usar auth correctamente para API Routes', () => {\r\n      const mockReq = { query: {}, headers: {} } as NextApiRequest;\r\n      const mockRes = {} as NextApiResponse;\r\n\r\n      mockAuth.mockReturnValue({\r\n        userId: 'api_user_123',\r\n        sessionId: 'api_session_456',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      const result = authFromApiRoute(mockReq, mockRes);\r\n\r\n      expect(mockAuth).toHaveBeenCalledWith(mockReq);\r\n      expect(result.userId).toBe('api_user_123');\r\n      expect(result.sessionId).toBe('api_session_456');\r\n    });\r\n\r\n    it('debe lanzar error cuando no hay userId', () => {\r\n      const mockReq = { query: {}, headers: {} } as NextApiRequest;\r\n      const mockRes = {} as NextApiResponse;\r\n\r\n      mockAuth.mockReturnValue({\r\n        userId: null,\r\n        sessionId: null,\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      expect(() => authFromApiRoute(mockReq, mockRes)).toThrow('Usuario no autenticado');\r\n    });\r\n  });\r\n\r\n  describe('authFromRouteHandler', () => {\r\n    it('debe usar auth() correctamente para Route Handlers', async () => {\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'route_user_123',\r\n        sessionId: 'route_session_456',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      const result = await authFromRouteHandler();\r\n\r\n      expect(mockAuth).toHaveBeenCalled();\r\n      expect(result.userId).toBe('route_user_123');\r\n      expect(result.sessionId).toBe('route_session_456');\r\n    });\r\n\r\n    it('debe lanzar error cuando no hay userId', async () => {\r\n      mockAuth.mockResolvedValue({\r\n        userId: null,\r\n        sessionId: null,\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      await expect(authFromRouteHandler()).rejects.toThrow('Usuario no autenticado');\r\n    });\r\n  });\r\n\r\n  describe('getUnifiedAuth', () => {\r\n    it('debe detectar NextApiRequest y usar auth', async () => {\r\n      const mockApiRequest = {\r\n        query: {},\r\n        headers: {}\r\n      } as NextApiRequest;\r\n\r\n      mockAuth.mockReturnValue({\r\n        userId: 'unified_user_123',\r\n        sessionId: 'unified_session_456',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      const result = await getUnifiedAuth(mockApiRequest);\r\n\r\n      expect(mockAuth).toHaveBeenCalledWith(mockApiRequest);\r\n      expect(result.userId).toBe('unified_user_123');\r\n    });\r\n\r\n    it('debe detectar NextRequest y usar auth()', async () => {\r\n      const mockNextRequest = {\r\n        nextUrl: { pathname: '/test' },\r\n        headers: new Map()\r\n      } as any;\r\n\r\n      mockAuth.mockResolvedValue({\r\n        userId: 'unified_route_123',\r\n        sessionId: 'unified_route_456',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      const result = await getUnifiedAuth(mockNextRequest);\r\n\r\n      expect(mockAuth).toHaveBeenCalled();\r\n      expect(result.userId).toBe('unified_route_123');\r\n    });\r\n\r\n    it('debe usar fallback cuando hay error', async () => {\r\n      const mockRequest = {\r\n        headers: {\r\n          get: jest.fn().mockReturnValue('fallback_user')\r\n        }\r\n      } as any;\r\n\r\n      mockAuth.mockRejectedValue(new Error('Unified auth failed'));\r\n\r\n      const result = await getUnifiedAuth(mockRequest);\r\n\r\n      expect(result.userId).toBe('fallback_user');\r\n    });\r\n  });\r\n\r\n  describe('withAdminAuthPages wrapper', () => {\r\n    it('debe crear wrapper funcional para Pages Router', () => {\r\n      const mockHandler = jest.fn();\r\n      const wrappedHandler = withAdminAuthPages(mockHandler);\r\n\r\n      expect(typeof wrappedHandler).toBe('function');\r\n    });\r\n\r\n    it('debe pasar contexto correcto al handler', async () => {\r\n      const mockHandler = jest.fn();\r\n      const mockReq = { query: {}, headers: {} } as NextApiRequest;\r\n      const mockRes = { \r\n        status: jest.fn().mockReturnThis(),\r\n        json: jest.fn()\r\n      } as any;\r\n\r\n      // Mock successful auth\r\n      mockAuth.mockReturnValue({\r\n        userId: 'admin_user',\r\n        sessionId: 'admin_session',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      const wrappedHandler = withAdminAuthPages(mockHandler);\r\n      \r\n      // Este test verificaría la estructura, pero requiere mocks más complejos\r\n      // para el sistema completo de permisos\r\n      expect(typeof wrappedHandler).toBe('function');\r\n    });\r\n  });\r\n\r\n  describe('Compatibilidad hacia atrás', () => {\r\n    it('debe mantener compatibilidad con headers x-clerk-user-id', async () => {\r\n      const mockRequest = {\r\n        headers: {\r\n          get: jest.fn().mockImplementation((key) => {\r\n            if (key === 'x-clerk-user-id') return 'legacy_user_123';\r\n            return null;\r\n          })\r\n        }\r\n      } as any;\r\n\r\n      mockAuth.mockRejectedValue(new Error('Auth not available'));\r\n\r\n      const result = await authenticatedUser(mockRequest);\r\n\r\n      expect(result.userId).toBe('legacy_user_123');\r\n    });\r\n\r\n    it('debe mantener compatibilidad con JWT en cookies', async () => {\r\n      const mockJwtPayload = { sub: 'jwt_user_123' };\r\n      const mockJwt = 'header.' + btoa(JSON.stringify(mockJwtPayload)) + '.signature';\r\n\r\n      const mockRequest = {\r\n        headers: {\r\n          get: jest.fn().mockReturnValue(null)\r\n        },\r\n        cookies: {\r\n          get: jest.fn().mockImplementation((key) => {\r\n            if (key === '__session') return { value: mockJwt };\r\n            return undefined;\r\n          })\r\n        }\r\n      } as any;\r\n\r\n      mockAuth.mockRejectedValue(new Error('Auth not available'));\r\n\r\n      const result = await authenticatedUser(mockRequest);\r\n\r\n      expect(result.userId).toBe('jwt_user_123');\r\n    });\r\n  });\r\n\r\n  describe('Logging y debugging', () => {\r\n    it('debe loggear autenticación exitosa', async () => {\r\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\r\n      \r\n      const mockApiRequest = {\r\n        query: {},\r\n        headers: {}\r\n      } as NextApiRequest;\r\n\r\n      mockAuth.mockReturnValue({\r\n        userId: 'logged_user_123',\r\n        sessionId: 'logged_session_456',\r\n        getToken: jest.fn()\r\n      });\r\n\r\n      await authenticatedUser(mockApiRequest);\r\n\r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        expect.stringContaining('[AUTH] Usuario autenticado via auth: logged_user_123')\r\n      );\r\n\r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n    it('debe loggear warnings para fallbacks', async () => {\r\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\r\n      \r\n      const mockRequest = {\r\n        headers: {\r\n          get: jest.fn().mockReturnValue('fallback_user')\r\n        }\r\n      } as any;\r\n\r\n      mockAuth.mockRejectedValue(new Error('Auth failed'));\r\n\r\n      await authenticatedUser(mockRequest);\r\n\r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        expect.stringContaining('[AUTH] Usando header fallback para userId')\r\n      );\r\n\r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","auth","fn","useSession","supabaseAdmin","from","select","eq","single","describe","mockAuth","beforeEach","clearAllMocks","it","mockApiRequest","query","headers","cookies","mockReturnValue","userId","sessionId","getToken","result","authenticatedUser","expect","toHaveBeenCalledWith","toEqual","mockNextRequest","nextUrl","pathname","Map","mockResolvedValue","toHaveBeenCalled","mockRequest","get","mockRejectedValue","Error","toBe","toBeNull","error","mockReq","mockRes","authFromApiRoute","toThrow","authFromRouteHandler","rejects","getUnifiedAuth","mockHandler","wrappedHandler","withAdminAuthPages","status","mockReturnThis","json","mockImplementation","key","mockJwtPayload","sub","mockJwt","btoa","JSON","stringify","value","undefined","consoleSpy","spyOn","console","stringContaining","mockRestore"],"mappings":"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"}