8875c4c518e32e13b857852f8a99d9a7
/**
 * Dashboard de Seguridad
 * Proporciona una interfaz unificada para monitoreo y gestión de seguridad
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get SecurityDashboard () {
        return SecurityDashboard;
    },
    get getSecurityDashboard () {
        return getSecurityDashboard;
    },
    get startGlobalSecurityDashboard () {
        return startGlobalSecurityDashboard;
    },
    get stopGlobalSecurityDashboard () {
        return stopGlobalSecurityDashboard;
    }
});
const _securityauditenhanced = require("./security-audit-enhanced");
class SecurityDashboard {
    constructor(config = {}){
        this.config = {
            refreshInterval: 30,
            alertThresholds: {
                criticalEvents: 1,
                authFailures: 10,
                suspiciousActivities: 5,
                securityScore: 70
            },
            autoAnalysis: true,
            notifications: {
                email: false,
                slack: false
            },
            ...config
        };
        this.lastUpdate = new Date();
    }
    /**
   * Inicia el dashboard de seguridad
   */ async start() {
        try {
            console.log('[SECURITY DASHBOARD] Iniciando dashboard de seguridad...');
            // Cargar datos iniciales
            await this.refreshData();
            // Iniciar monitoreo automático si está habilitado
            if (this.config.autoAnalysis) {
                this.monitoringInterval = (0, _securityauditenhanced.startSecurityMonitoring)(5); // cada 5 minutos
            }
            // Iniciar refresh automático de datos
            this.refreshInterval = setInterval(async ()=>{
                await this.refreshData();
            }, this.config.refreshInterval * 1000);
            console.log('[SECURITY DASHBOARD] Dashboard iniciado exitosamente');
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error iniciando dashboard:', error);
            throw error;
        }
    }
    /**
   * Detiene el dashboard de seguridad
   */ stop() {
        console.log('[SECURITY DASHBOARD] Deteniendo dashboard...');
        if (this.monitoringInterval) {
            (0, _securityauditenhanced.stopSecurityMonitoring)(this.monitoringInterval);
            this.monitoringInterval = undefined;
        }
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = undefined;
        }
        console.log('[SECURITY DASHBOARD] Dashboard detenido');
    }
    /**
   * Actualiza los datos del dashboard
   */ async refreshData() {
        try {
            console.log('[SECURITY DASHBOARD] Actualizando datos...');
            // Obtener datos en paralelo
            const [metrics, alerts, healthCheck] = await Promise.all([
                (0, _securityauditenhanced.getSecurityMetrics)(),
                (0, _securityauditenhanced.getActiveSecurityAlerts)(),
                (0, _securityauditenhanced.runSecurityHealthCheck)()
            ]);
            // Calcular actividad reciente (comparar con datos anteriores)
            const recentActivity = {
                totalEvents: metrics.total_events_24h,
                criticalEvents: metrics.critical_events_24h,
                newAlerts: alerts.filter((a)=>new Date(a.first_occurrence) > new Date(Date.now() - 24 * 60 * 60 * 1000)).length,
                resolvedAlerts: 0 // TODO: implementar cuando se tenga histórico
            };
            // Generar tendencias (simuladas por ahora)
            const trends = {
                eventsLast7Days: await this.getEventsTrend(7),
                alertsLast7Days: await this.getAlertsTrend(7),
                securityScoreTrend: await this.getSecurityScoreTrend(7)
            };
            this.cachedData = {
                metrics,
                alerts,
                healthCheck: {
                    status: healthCheck.status,
                    issues: healthCheck.issues,
                    recommendations: healthCheck.recommendations
                },
                recentActivity,
                trends
            };
            this.lastUpdate = new Date();
            // Verificar umbrales y generar alertas si es necesario
            await this.checkThresholds(metrics, alerts);
            console.log('[SECURITY DASHBOARD] Datos actualizados exitosamente');
            return this.cachedData;
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error actualizando datos:', error);
            throw error;
        }
    }
    /**
   * Obtiene los datos actuales del dashboard
   */ async getData(forceRefresh = false) {
        if (forceRefresh || !this.cachedData || Date.now() - this.lastUpdate.getTime() > this.config.refreshInterval * 1000) {
            return await this.refreshData();
        }
        return this.cachedData;
    }
    /**
   * Ejecuta un análisis manual de seguridad
   */ async runManualAnalysis(userId) {
        try {
            console.log('[SECURITY DASHBOARD] Ejecutando análisis manual...');
            const alerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)(userId);
            // Actualizar datos después del análisis
            await this.refreshData();
            console.log(`[SECURITY DASHBOARD] Análisis completado: ${alerts.length} alertas generadas`);
            return alerts;
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error en análisis manual:', error);
            throw error;
        }
    }
    /**
   * Genera un reporte de seguridad
   */ async generateReport(startDate, endDate) {
        try {
            console.log('[SECURITY DASHBOARD] Generando reporte de seguridad...');
            const report = await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate);
            console.log('[SECURITY DASHBOARD] Reporte generado exitosamente');
            return report;
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error generando reporte:', error);
            throw error;
        }
    }
    /**
   * Obtiene el estado actual del dashboard
   */ getStatus() {
        return {
            isRunning: !!this.refreshInterval,
            lastUpdate: this.lastUpdate,
            config: this.config,
            uptime: Date.now() - this.lastUpdate.getTime()
        };
    }
    /**
   * Actualiza la configuración del dashboard
   */ updateConfig(newConfig) {
        this.config = {
            ...this.config,
            ...newConfig
        };
        console.log('[SECURITY DASHBOARD] Configuración actualizada');
    }
    // =====================================================
    // MÉTODOS PRIVADOS
    // =====================================================
    /**
   * Verifica umbrales y genera notificaciones
   */ async checkThresholds(metrics, alerts) {
        const issues = [];
        if (metrics.critical_events_24h >= this.config.alertThresholds.criticalEvents) {
            issues.push(`Eventos críticos: ${metrics.critical_events_24h} (umbral: ${this.config.alertThresholds.criticalEvents})`);
        }
        if (metrics.auth_failures_24h >= this.config.alertThresholds.authFailures) {
            issues.push(`Fallos de autenticación: ${metrics.auth_failures_24h} (umbral: ${this.config.alertThresholds.authFailures})`);
        }
        if (metrics.suspicious_activities_24h >= this.config.alertThresholds.suspiciousActivities) {
            issues.push(`Actividades sospechosas: ${metrics.suspicious_activities_24h} (umbral: ${this.config.alertThresholds.suspiciousActivities})`);
        }
        if (metrics.security_score <= this.config.alertThresholds.securityScore) {
            issues.push(`Score de seguridad bajo: ${metrics.security_score} (umbral: ${this.config.alertThresholds.securityScore})`);
        }
        if (issues.length > 0) {
            console.warn('[SECURITY DASHBOARD] Umbrales excedidos:', issues);
            await this.sendNotifications(issues);
        }
    }
    /**
   * Envía notificaciones según la configuración
   */ async sendNotifications(issues) {
        try {
            if (this.config.notifications.webhook) {
                // Enviar webhook
                const payload = {
                    timestamp: new Date().toISOString(),
                    source: 'security-dashboard',
                    level: 'warning',
                    message: 'Umbrales de seguridad excedidos',
                    issues
                };
                await fetch(this.config.notifications.webhook, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });
            }
            // TODO: Implementar notificaciones por email y Slack
            if (this.config.notifications.email) {
                console.log('[SECURITY DASHBOARD] Enviando notificación por email...');
            }
            if (this.config.notifications.slack) {
                console.log('[SECURITY DASHBOARD] Enviando notificación por Slack...');
            }
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error enviando notificaciones:', error);
        }
    }
    /**
   * Obtiene tendencia de eventos (simulada)
   */ async getEventsTrend(days) {
        // TODO: Implementar consulta real a la base de datos
        return Array(days).fill(0).map(()=>Math.floor(Math.random() * 100));
    }
    /**
   * Obtiene tendencia de alertas (simulada)
   */ async getAlertsTrend(days) {
        // TODO: Implementar consulta real a la base de datos
        return Array(days).fill(0).map(()=>Math.floor(Math.random() * 10));
    }
    /**
   * Obtiene tendencia del score de seguridad (simulada)
   */ async getSecurityScoreTrend(days) {
        // TODO: Implementar consulta real a la base de datos
        return Array(days).fill(0).map(()=>Math.floor(Math.random() * 40) + 60);
    }
}
// =====================================================
// INSTANCIA SINGLETON DEL DASHBOARD
// =====================================================
let dashboardInstance = null;
function getSecurityDashboard(config) {
    if (!dashboardInstance) {
        dashboardInstance = new SecurityDashboard(config);
    }
    return dashboardInstance;
}
async function startGlobalSecurityDashboard(config) {
    const dashboard = getSecurityDashboard(config);
    await dashboard.start();
    return dashboard;
}
function stopGlobalSecurityDashboard() {
    if (dashboardInstance) {
        dashboardInstance.stop();
        dashboardInstance = null;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxhdXRoXFxzZWN1cml0eS1kYXNoYm9hcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEYXNoYm9hcmQgZGUgU2VndXJpZGFkXG4gKiBQcm9wb3JjaW9uYSB1bmEgaW50ZXJmYXogdW5pZmljYWRhIHBhcmEgbW9uaXRvcmVvIHkgZ2VzdGnDs24gZGUgc2VndXJpZGFkXG4gKi9cblxuaW1wb3J0IHtcbiAgZ2V0U2VjdXJpdHlNZXRyaWNzLFxuICBnZXRBY3RpdmVTZWN1cml0eUFsZXJ0cyxcbiAgYW5hbHl6ZVNlY3VyaXR5UGF0dGVybnMsXG4gIHJ1blNlY3VyaXR5SGVhbHRoQ2hlY2ssXG4gIGdlbmVyYXRlU2VjdXJpdHlSZXBvcnQsXG4gIHN0YXJ0U2VjdXJpdHlNb25pdG9yaW5nLFxuICBzdG9wU2VjdXJpdHlNb25pdG9yaW5nLFxuICB0eXBlIFNlY3VyaXR5TWV0cmljcyxcbiAgdHlwZSBTZWN1cml0eUFsZXJ0LFxuICB0eXBlIFNlY3VyaXR5UmVwb3J0XG59IGZyb20gJy4vc2VjdXJpdHktYXVkaXQtZW5oYW5jZWQnO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVElQT1MgWSBJTlRFUkZBQ0VTIERFTCBEQVNIQk9BUkRcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VjdXJpdHlEYXNoYm9hcmREYXRhIHtcbiAgbWV0cmljczogU2VjdXJpdHlNZXRyaWNzO1xuICBhbGVydHM6IFNlY3VyaXR5QWxlcnRbXTtcbiAgaGVhbHRoQ2hlY2s6IHtcbiAgICBzdGF0dXM6ICdoZWFsdGh5JyB8ICd3YXJuaW5nJyB8ICdjcml0aWNhbCc7XG4gICAgaXNzdWVzOiBzdHJpbmdbXTtcbiAgICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdO1xuICB9O1xuICByZWNlbnRBY3Rpdml0eToge1xuICAgIHRvdGFsRXZlbnRzOiBudW1iZXI7XG4gICAgY3JpdGljYWxFdmVudHM6IG51bWJlcjtcbiAgICBuZXdBbGVydHM6IG51bWJlcjtcbiAgICByZXNvbHZlZEFsZXJ0czogbnVtYmVyO1xuICB9O1xuICB0cmVuZHM6IHtcbiAgICBldmVudHNMYXN0N0RheXM6IG51bWJlcltdO1xuICAgIGFsZXJ0c0xhc3Q3RGF5czogbnVtYmVyW107XG4gICAgc2VjdXJpdHlTY29yZVRyZW5kOiBudW1iZXJbXTtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWN1cml0eURhc2hib2FyZENvbmZpZyB7XG4gIHJlZnJlc2hJbnRlcnZhbDogbnVtYmVyOyAvLyBlbiBzZWd1bmRvc1xuICBhbGVydFRocmVzaG9sZHM6IHtcbiAgICBjcml0aWNhbEV2ZW50czogbnVtYmVyO1xuICAgIGF1dGhGYWlsdXJlczogbnVtYmVyO1xuICAgIHN1c3BpY2lvdXNBY3Rpdml0aWVzOiBudW1iZXI7XG4gICAgc2VjdXJpdHlTY29yZTogbnVtYmVyO1xuICB9O1xuICBhdXRvQW5hbHlzaXM6IGJvb2xlYW47XG4gIG5vdGlmaWNhdGlvbnM6IHtcbiAgICBlbWFpbDogYm9vbGVhbjtcbiAgICBzbGFjazogYm9vbGVhbjtcbiAgICB3ZWJob29rPzogc3RyaW5nO1xuICB9O1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ0xBU0UgUFJJTkNJUEFMIERFTCBEQVNIQk9BUkRcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBjbGFzcyBTZWN1cml0eURhc2hib2FyZCB7XG4gIHByaXZhdGUgY29uZmlnOiBTZWN1cml0eURhc2hib2FyZENvbmZpZztcbiAgcHJpdmF0ZSBtb25pdG9yaW5nSW50ZXJ2YWw/OiBOb2RlSlMuVGltZW91dDtcbiAgcHJpdmF0ZSByZWZyZXNoSW50ZXJ2YWw/OiBOb2RlSlMuVGltZW91dDtcbiAgcHJpdmF0ZSBsYXN0VXBkYXRlOiBEYXRlO1xuICBwcml2YXRlIGNhY2hlZERhdGE/OiBTZWN1cml0eURhc2hib2FyZERhdGE7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQYXJ0aWFsPFNlY3VyaXR5RGFzaGJvYXJkQ29uZmlnPiA9IHt9KSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICByZWZyZXNoSW50ZXJ2YWw6IDMwLCAvLyAzMCBzZWd1bmRvcyBwb3IgZGVmZWN0b1xuICAgICAgYWxlcnRUaHJlc2hvbGRzOiB7XG4gICAgICAgIGNyaXRpY2FsRXZlbnRzOiAxLFxuICAgICAgICBhdXRoRmFpbHVyZXM6IDEwLFxuICAgICAgICBzdXNwaWNpb3VzQWN0aXZpdGllczogNSxcbiAgICAgICAgc2VjdXJpdHlTY29yZTogNzBcbiAgICAgIH0sXG4gICAgICBhdXRvQW5hbHlzaXM6IHRydWUsXG4gICAgICBub3RpZmljYXRpb25zOiB7XG4gICAgICAgIGVtYWlsOiBmYWxzZSxcbiAgICAgICAgc2xhY2s6IGZhbHNlXG4gICAgICB9LFxuICAgICAgLi4uY29uZmlnXG4gICAgfTtcbiAgICB0aGlzLmxhc3RVcGRhdGUgPSBuZXcgRGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaWNpYSBlbCBkYXNoYm9hcmQgZGUgc2VndXJpZGFkXG4gICAqL1xuICBhc3luYyBzdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ1tTRUNVUklUWSBEQVNIQk9BUkRdIEluaWNpYW5kbyBkYXNoYm9hcmQgZGUgc2VndXJpZGFkLi4uJyk7XG5cbiAgICAgIC8vIENhcmdhciBkYXRvcyBpbmljaWFsZXNcbiAgICAgIGF3YWl0IHRoaXMucmVmcmVzaERhdGEoKTtcblxuICAgICAgLy8gSW5pY2lhciBtb25pdG9yZW8gYXV0b23DoXRpY28gc2kgZXN0w6EgaGFiaWxpdGFkb1xuICAgICAgaWYgKHRoaXMuY29uZmlnLmF1dG9BbmFseXNpcykge1xuICAgICAgICB0aGlzLm1vbml0b3JpbmdJbnRlcnZhbCA9IHN0YXJ0U2VjdXJpdHlNb25pdG9yaW5nKDUpOyAvLyBjYWRhIDUgbWludXRvc1xuICAgICAgfVxuXG4gICAgICAvLyBJbmljaWFyIHJlZnJlc2ggYXV0b23DoXRpY28gZGUgZGF0b3NcbiAgICAgIHRoaXMucmVmcmVzaEludGVydmFsID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2hEYXRhKCk7XG4gICAgICB9LCB0aGlzLmNvbmZpZy5yZWZyZXNoSW50ZXJ2YWwgKiAxMDAwKTtcblxuICAgICAgY29uc29sZS5sb2coJ1tTRUNVUklUWSBEQVNIQk9BUkRdIERhc2hib2FyZCBpbmljaWFkbyBleGl0b3NhbWVudGUnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NFQ1VSSVRZIERBU0hCT0FSRF0gRXJyb3IgaW5pY2lhbmRvIGRhc2hib2FyZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGV0aWVuZSBlbCBkYXNoYm9hcmQgZGUgc2VndXJpZGFkXG4gICAqL1xuICBzdG9wKCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCdbU0VDVVJJVFkgREFTSEJPQVJEXSBEZXRlbmllbmRvIGRhc2hib2FyZC4uLicpO1xuXG4gICAgaWYgKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKSB7XG4gICAgICBzdG9wU2VjdXJpdHlNb25pdG9yaW5nKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKTtcbiAgICAgIHRoaXMubW9uaXRvcmluZ0ludGVydmFsID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlZnJlc2hJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICB0aGlzLnJlZnJlc2hJbnRlcnZhbCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnW1NFQ1VSSVRZIERBU0hCT0FSRF0gRGFzaGJvYXJkIGRldGVuaWRvJyk7XG4gIH1cblxuICAvKipcbiAgICogQWN0dWFsaXphIGxvcyBkYXRvcyBkZWwgZGFzaGJvYXJkXG4gICAqL1xuICBhc3luYyByZWZyZXNoRGF0YSgpOiBQcm9taXNlPFNlY3VyaXR5RGFzaGJvYXJkRGF0YT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnW1NFQ1VSSVRZIERBU0hCT0FSRF0gQWN0dWFsaXphbmRvIGRhdG9zLi4uJyk7XG5cbiAgICAgIC8vIE9idGVuZXIgZGF0b3MgZW4gcGFyYWxlbG9cbiAgICAgIGNvbnN0IFttZXRyaWNzLCBhbGVydHMsIGhlYWx0aENoZWNrXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgZ2V0U2VjdXJpdHlNZXRyaWNzKCksXG4gICAgICAgIGdldEFjdGl2ZVNlY3VyaXR5QWxlcnRzKCksXG4gICAgICAgIHJ1blNlY3VyaXR5SGVhbHRoQ2hlY2soKVxuICAgICAgXSk7XG5cbiAgICAgIC8vIENhbGN1bGFyIGFjdGl2aWRhZCByZWNpZW50ZSAoY29tcGFyYXIgY29uIGRhdG9zIGFudGVyaW9yZXMpXG4gICAgICBjb25zdCByZWNlbnRBY3Rpdml0eSA9IHtcbiAgICAgICAgdG90YWxFdmVudHM6IG1ldHJpY3MudG90YWxfZXZlbnRzXzI0aCxcbiAgICAgICAgY3JpdGljYWxFdmVudHM6IG1ldHJpY3MuY3JpdGljYWxfZXZlbnRzXzI0aCxcbiAgICAgICAgbmV3QWxlcnRzOiBhbGVydHMuZmlsdGVyKGEgPT4gXG4gICAgICAgICAgbmV3IERhdGUoYS5maXJzdF9vY2N1cnJlbmNlKSA+IG5ldyBEYXRlKERhdGUubm93KCkgLSAyNCAqIDYwICogNjAgKiAxMDAwKVxuICAgICAgICApLmxlbmd0aCxcbiAgICAgICAgcmVzb2x2ZWRBbGVydHM6IDAgLy8gVE9ETzogaW1wbGVtZW50YXIgY3VhbmRvIHNlIHRlbmdhIGhpc3TDs3JpY29cbiAgICAgIH07XG5cbiAgICAgIC8vIEdlbmVyYXIgdGVuZGVuY2lhcyAoc2ltdWxhZGFzIHBvciBhaG9yYSlcbiAgICAgIGNvbnN0IHRyZW5kcyA9IHtcbiAgICAgICAgZXZlbnRzTGFzdDdEYXlzOiBhd2FpdCB0aGlzLmdldEV2ZW50c1RyZW5kKDcpLFxuICAgICAgICBhbGVydHNMYXN0N0RheXM6IGF3YWl0IHRoaXMuZ2V0QWxlcnRzVHJlbmQoNyksXG4gICAgICAgIHNlY3VyaXR5U2NvcmVUcmVuZDogYXdhaXQgdGhpcy5nZXRTZWN1cml0eVNjb3JlVHJlbmQoNylcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuY2FjaGVkRGF0YSA9IHtcbiAgICAgICAgbWV0cmljcyxcbiAgICAgICAgYWxlcnRzLFxuICAgICAgICBoZWFsdGhDaGVjazoge1xuICAgICAgICAgIHN0YXR1czogaGVhbHRoQ2hlY2suc3RhdHVzLFxuICAgICAgICAgIGlzc3VlczogaGVhbHRoQ2hlY2suaXNzdWVzLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogaGVhbHRoQ2hlY2sucmVjb21tZW5kYXRpb25zXG4gICAgICAgIH0sXG4gICAgICAgIHJlY2VudEFjdGl2aXR5LFxuICAgICAgICB0cmVuZHNcbiAgICAgIH07XG5cbiAgICAgIHRoaXMubGFzdFVwZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciB1bWJyYWxlcyB5IGdlbmVyYXIgYWxlcnRhcyBzaSBlcyBuZWNlc2FyaW9cbiAgICAgIGF3YWl0IHRoaXMuY2hlY2tUaHJlc2hvbGRzKG1ldHJpY3MsIGFsZXJ0cyk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbU0VDVVJJVFkgREFTSEJPQVJEXSBEYXRvcyBhY3R1YWxpemFkb3MgZXhpdG9zYW1lbnRlJyk7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZWREYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU0VDVVJJVFkgREFTSEJPQVJEXSBFcnJvciBhY3R1YWxpemFuZG8gZGF0b3M6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgbG9zIGRhdG9zIGFjdHVhbGVzIGRlbCBkYXNoYm9hcmRcbiAgICovXG4gIGFzeW5jIGdldERhdGEoZm9yY2VSZWZyZXNoOiBib29sZWFuID0gZmFsc2UpOiBQcm9taXNlPFNlY3VyaXR5RGFzaGJvYXJkRGF0YT4ge1xuICAgIGlmIChmb3JjZVJlZnJlc2ggfHwgIXRoaXMuY2FjaGVkRGF0YSB8fCBcbiAgICAgICAgRGF0ZS5ub3coKSAtIHRoaXMubGFzdFVwZGF0ZS5nZXRUaW1lKCkgPiB0aGlzLmNvbmZpZy5yZWZyZXNoSW50ZXJ2YWwgKiAxMDAwKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWZyZXNoRGF0YSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZWREYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEVqZWN1dGEgdW4gYW7DoWxpc2lzIG1hbnVhbCBkZSBzZWd1cmlkYWRcbiAgICovXG4gIGFzeW5jIHJ1bk1hbnVhbEFuYWx5c2lzKHVzZXJJZD86IHN0cmluZyk6IFByb21pc2U8U2VjdXJpdHlBbGVydFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdbU0VDVVJJVFkgREFTSEJPQVJEXSBFamVjdXRhbmRvIGFuw6FsaXNpcyBtYW51YWwuLi4nKTtcbiAgICAgIFxuICAgICAgY29uc3QgYWxlcnRzID0gYXdhaXQgYW5hbHl6ZVNlY3VyaXR5UGF0dGVybnModXNlcklkKTtcbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBkYXRvcyBkZXNwdcOpcyBkZWwgYW7DoWxpc2lzXG4gICAgICBhd2FpdCB0aGlzLnJlZnJlc2hEYXRhKCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBbU0VDVVJJVFkgREFTSEJPQVJEXSBBbsOhbGlzaXMgY29tcGxldGFkbzogJHthbGVydHMubGVuZ3RofSBhbGVydGFzIGdlbmVyYWRhc2ApO1xuICAgICAgcmV0dXJuIGFsZXJ0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NFQ1VSSVRZIERBU0hCT0FSRF0gRXJyb3IgZW4gYW7DoWxpc2lzIG1hbnVhbDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhIHVuIHJlcG9ydGUgZGUgc2VndXJpZGFkXG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZVJlcG9ydChzdGFydERhdGU6IERhdGUsIGVuZERhdGU6IERhdGUpOiBQcm9taXNlPFNlY3VyaXR5UmVwb3J0PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdbU0VDVVJJVFkgREFTSEJPQVJEXSBHZW5lcmFuZG8gcmVwb3J0ZSBkZSBzZWd1cmlkYWQuLi4nKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgZ2VuZXJhdGVTZWN1cml0eVJlcG9ydChzdGFydERhdGUsIGVuZERhdGUpO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnW1NFQ1VSSVRZIERBU0hCT0FSRF0gUmVwb3J0ZSBnZW5lcmFkbyBleGl0b3NhbWVudGUnKTtcbiAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTRUNVUklUWSBEQVNIQk9BUkRdIEVycm9yIGdlbmVyYW5kbyByZXBvcnRlOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGVsIGVzdGFkbyBhY3R1YWwgZGVsIGRhc2hib2FyZFxuICAgKi9cbiAgZ2V0U3RhdHVzKCk6IHtcbiAgICBpc1J1bm5pbmc6IGJvb2xlYW47XG4gICAgbGFzdFVwZGF0ZTogRGF0ZTtcbiAgICBjb25maWc6IFNlY3VyaXR5RGFzaGJvYXJkQ29uZmlnO1xuICAgIHVwdGltZTogbnVtYmVyO1xuICB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNSdW5uaW5nOiAhIXRoaXMucmVmcmVzaEludGVydmFsLFxuICAgICAgbGFzdFVwZGF0ZTogdGhpcy5sYXN0VXBkYXRlLFxuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIHVwdGltZTogRGF0ZS5ub3coKSAtIHRoaXMubGFzdFVwZGF0ZS5nZXRUaW1lKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdHVhbGl6YSBsYSBjb25maWd1cmFjacOzbiBkZWwgZGFzaGJvYXJkXG4gICAqL1xuICB1cGRhdGVDb25maWcobmV3Q29uZmlnOiBQYXJ0aWFsPFNlY3VyaXR5RGFzaGJvYXJkQ29uZmlnPik6IHZvaWQge1xuICAgIHRoaXMuY29uZmlnID0geyAuLi50aGlzLmNvbmZpZywgLi4ubmV3Q29uZmlnIH07XG4gICAgY29uc29sZS5sb2coJ1tTRUNVUklUWSBEQVNIQk9BUkRdIENvbmZpZ3VyYWNpw7NuIGFjdHVhbGl6YWRhJyk7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBNw4lUT0RPUyBQUklWQURPU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSB1bWJyYWxlcyB5IGdlbmVyYSBub3RpZmljYWNpb25lc1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBjaGVja1RocmVzaG9sZHMobWV0cmljczogU2VjdXJpdHlNZXRyaWNzLCBhbGVydHM6IFNlY3VyaXR5QWxlcnRbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGlzc3Vlczogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmIChtZXRyaWNzLmNyaXRpY2FsX2V2ZW50c18yNGggPj0gdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLmNyaXRpY2FsRXZlbnRzKSB7XG4gICAgICBpc3N1ZXMucHVzaChgRXZlbnRvcyBjcsOtdGljb3M6ICR7bWV0cmljcy5jcml0aWNhbF9ldmVudHNfMjRofSAodW1icmFsOiAke3RoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5jcml0aWNhbEV2ZW50c30pYCk7XG4gICAgfVxuXG4gICAgaWYgKG1ldHJpY3MuYXV0aF9mYWlsdXJlc18yNGggPj0gdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLmF1dGhGYWlsdXJlcykge1xuICAgICAgaXNzdWVzLnB1c2goYEZhbGxvcyBkZSBhdXRlbnRpY2FjacOzbjogJHttZXRyaWNzLmF1dGhfZmFpbHVyZXNfMjRofSAodW1icmFsOiAke3RoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5hdXRoRmFpbHVyZXN9KWApO1xuICAgIH1cblxuICAgIGlmIChtZXRyaWNzLnN1c3BpY2lvdXNfYWN0aXZpdGllc18yNGggPj0gdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLnN1c3BpY2lvdXNBY3Rpdml0aWVzKSB7XG4gICAgICBpc3N1ZXMucHVzaChgQWN0aXZpZGFkZXMgc29zcGVjaG9zYXM6ICR7bWV0cmljcy5zdXNwaWNpb3VzX2FjdGl2aXRpZXNfMjRofSAodW1icmFsOiAke3RoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5zdXNwaWNpb3VzQWN0aXZpdGllc30pYCk7XG4gICAgfVxuXG4gICAgaWYgKG1ldHJpY3Muc2VjdXJpdHlfc2NvcmUgPD0gdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLnNlY3VyaXR5U2NvcmUpIHtcbiAgICAgIGlzc3Vlcy5wdXNoKGBTY29yZSBkZSBzZWd1cmlkYWQgYmFqbzogJHttZXRyaWNzLnNlY3VyaXR5X3Njb3JlfSAodW1icmFsOiAke3RoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5zZWN1cml0eVNjb3JlfSlgKTtcbiAgICB9XG5cbiAgICBpZiAoaXNzdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUud2FybignW1NFQ1VSSVRZIERBU0hCT0FSRF0gVW1icmFsZXMgZXhjZWRpZG9zOicsIGlzc3Vlcyk7XG4gICAgICBhd2FpdCB0aGlzLnNlbmROb3RpZmljYXRpb25zKGlzc3Vlcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVudsOtYSBub3RpZmljYWNpb25lcyBzZWfDum4gbGEgY29uZmlndXJhY2nDs25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgc2VuZE5vdGlmaWNhdGlvbnMoaXNzdWVzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5jb25maWcubm90aWZpY2F0aW9ucy53ZWJob29rKSB7XG4gICAgICAgIC8vIEVudmlhciB3ZWJob29rXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgc291cmNlOiAnc2VjdXJpdHktZGFzaGJvYXJkJyxcbiAgICAgICAgICBsZXZlbDogJ3dhcm5pbmcnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVbWJyYWxlcyBkZSBzZWd1cmlkYWQgZXhjZWRpZG9zJyxcbiAgICAgICAgICBpc3N1ZXNcbiAgICAgICAgfTtcblxuICAgICAgICBhd2FpdCBmZXRjaCh0aGlzLmNvbmZpZy5ub3RpZmljYXRpb25zLndlYmhvb2ssIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETzogSW1wbGVtZW50YXIgbm90aWZpY2FjaW9uZXMgcG9yIGVtYWlsIHkgU2xhY2tcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5ub3RpZmljYXRpb25zLmVtYWlsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbU0VDVVJJVFkgREFTSEJPQVJEXSBFbnZpYW5kbyBub3RpZmljYWNpw7NuIHBvciBlbWFpbC4uLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb25maWcubm90aWZpY2F0aW9ucy5zbGFjaykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1NFQ1VSSVRZIERBU0hCT0FSRF0gRW52aWFuZG8gbm90aWZpY2FjacOzbiBwb3IgU2xhY2suLi4nKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NFQ1VSSVRZIERBU0hCT0FSRF0gRXJyb3IgZW52aWFuZG8gbm90aWZpY2FjaW9uZXM6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIHRlbmRlbmNpYSBkZSBldmVudG9zIChzaW11bGFkYSlcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0RXZlbnRzVHJlbmQoZGF5czogbnVtYmVyKTogUHJvbWlzZTxudW1iZXJbXT4ge1xuICAgIC8vIFRPRE86IEltcGxlbWVudGFyIGNvbnN1bHRhIHJlYWwgYSBsYSBiYXNlIGRlIGRhdG9zXG4gICAgcmV0dXJuIEFycmF5KGRheXMpLmZpbGwoMCkubWFwKCgpID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgdGVuZGVuY2lhIGRlIGFsZXJ0YXMgKHNpbXVsYWRhKVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBnZXRBbGVydHNUcmVuZChkYXlzOiBudW1iZXIpOiBQcm9taXNlPG51bWJlcltdPiB7XG4gICAgLy8gVE9ETzogSW1wbGVtZW50YXIgY29uc3VsdGEgcmVhbCBhIGxhIGJhc2UgZGUgZGF0b3NcbiAgICByZXR1cm4gQXJyYXkoZGF5cykuZmlsbCgwKS5tYXAoKCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIHRlbmRlbmNpYSBkZWwgc2NvcmUgZGUgc2VndXJpZGFkIChzaW11bGFkYSlcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0U2VjdXJpdHlTY29yZVRyZW5kKGRheXM6IG51bWJlcik6IFByb21pc2U8bnVtYmVyW10+IHtcbiAgICAvLyBUT0RPOiBJbXBsZW1lbnRhciBjb25zdWx0YSByZWFsIGEgbGEgYmFzZSBkZSBkYXRvc1xuICAgIHJldHVybiBBcnJheShkYXlzKS5maWxsKDApLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0MCkgKyA2MCk7XG4gIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIElOU1RBTkNJQSBTSU5HTEVUT04gREVMIERBU0hCT0FSRFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxubGV0IGRhc2hib2FyZEluc3RhbmNlOiBTZWN1cml0eURhc2hib2FyZCB8IG51bGwgPSBudWxsO1xuXG4vKipcbiAqIE9idGllbmUgbGEgaW5zdGFuY2lhIHNpbmdsZXRvbiBkZWwgZGFzaGJvYXJkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWN1cml0eURhc2hib2FyZChjb25maWc/OiBQYXJ0aWFsPFNlY3VyaXR5RGFzaGJvYXJkQ29uZmlnPik6IFNlY3VyaXR5RGFzaGJvYXJkIHtcbiAgaWYgKCFkYXNoYm9hcmRJbnN0YW5jZSkge1xuICAgIGRhc2hib2FyZEluc3RhbmNlID0gbmV3IFNlY3VyaXR5RGFzaGJvYXJkKGNvbmZpZyk7XG4gIH1cbiAgcmV0dXJuIGRhc2hib2FyZEluc3RhbmNlO1xufVxuXG4vKipcbiAqIEluaWNpYSBlbCBkYXNoYm9hcmQgZ2xvYmFsIGRlIHNlZ3VyaWRhZFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRHbG9iYWxTZWN1cml0eURhc2hib2FyZChjb25maWc/OiBQYXJ0aWFsPFNlY3VyaXR5RGFzaGJvYXJkQ29uZmlnPik6IFByb21pc2U8U2VjdXJpdHlEYXNoYm9hcmQ+IHtcbiAgY29uc3QgZGFzaGJvYXJkID0gZ2V0U2VjdXJpdHlEYXNoYm9hcmQoY29uZmlnKTtcbiAgYXdhaXQgZGFzaGJvYXJkLnN0YXJ0KCk7XG4gIHJldHVybiBkYXNoYm9hcmQ7XG59XG5cbi8qKlxuICogRGV0aWVuZSBlbCBkYXNoYm9hcmQgZ2xvYmFsIGRlIHNlZ3VyaWRhZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcEdsb2JhbFNlY3VyaXR5RGFzaGJvYXJkKCk6IHZvaWQge1xuICBpZiAoZGFzaGJvYXJkSW5zdGFuY2UpIHtcbiAgICBkYXNoYm9hcmRJbnN0YW5jZS5zdG9wKCk7XG4gICAgZGFzaGJvYXJkSW5zdGFuY2UgPSBudWxsO1xuICB9XG59XG4iXSwibmFtZXMiOlsiU2VjdXJpdHlEYXNoYm9hcmQiLCJnZXRTZWN1cml0eURhc2hib2FyZCIsInN0YXJ0R2xvYmFsU2VjdXJpdHlEYXNoYm9hcmQiLCJzdG9wR2xvYmFsU2VjdXJpdHlEYXNoYm9hcmQiLCJjb25maWciLCJyZWZyZXNoSW50ZXJ2YWwiLCJhbGVydFRocmVzaG9sZHMiLCJjcml0aWNhbEV2ZW50cyIsImF1dGhGYWlsdXJlcyIsInN1c3BpY2lvdXNBY3Rpdml0aWVzIiwic2VjdXJpdHlTY29yZSIsImF1dG9BbmFseXNpcyIsIm5vdGlmaWNhdGlvbnMiLCJlbWFpbCIsInNsYWNrIiwibGFzdFVwZGF0ZSIsIkRhdGUiLCJzdGFydCIsImNvbnNvbGUiLCJsb2ciLCJyZWZyZXNoRGF0YSIsIm1vbml0b3JpbmdJbnRlcnZhbCIsInN0YXJ0U2VjdXJpdHlNb25pdG9yaW5nIiwic2V0SW50ZXJ2YWwiLCJlcnJvciIsInN0b3AiLCJzdG9wU2VjdXJpdHlNb25pdG9yaW5nIiwidW5kZWZpbmVkIiwiY2xlYXJJbnRlcnZhbCIsIm1ldHJpY3MiLCJhbGVydHMiLCJoZWFsdGhDaGVjayIsIlByb21pc2UiLCJhbGwiLCJnZXRTZWN1cml0eU1ldHJpY3MiLCJnZXRBY3RpdmVTZWN1cml0eUFsZXJ0cyIsInJ1blNlY3VyaXR5SGVhbHRoQ2hlY2siLCJyZWNlbnRBY3Rpdml0eSIsInRvdGFsRXZlbnRzIiwidG90YWxfZXZlbnRzXzI0aCIsImNyaXRpY2FsX2V2ZW50c18yNGgiLCJuZXdBbGVydHMiLCJmaWx0ZXIiLCJhIiwiZmlyc3Rfb2NjdXJyZW5jZSIsIm5vdyIsImxlbmd0aCIsInJlc29sdmVkQWxlcnRzIiwidHJlbmRzIiwiZXZlbnRzTGFzdDdEYXlzIiwiZ2V0RXZlbnRzVHJlbmQiLCJhbGVydHNMYXN0N0RheXMiLCJnZXRBbGVydHNUcmVuZCIsInNlY3VyaXR5U2NvcmVUcmVuZCIsImdldFNlY3VyaXR5U2NvcmVUcmVuZCIsImNhY2hlZERhdGEiLCJzdGF0dXMiLCJpc3N1ZXMiLCJyZWNvbW1lbmRhdGlvbnMiLCJjaGVja1RocmVzaG9sZHMiLCJnZXREYXRhIiwiZm9yY2VSZWZyZXNoIiwiZ2V0VGltZSIsInJ1bk1hbnVhbEFuYWx5c2lzIiwidXNlcklkIiwiYW5hbHl6ZVNlY3VyaXR5UGF0dGVybnMiLCJnZW5lcmF0ZVJlcG9ydCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJyZXBvcnQiLCJnZW5lcmF0ZVNlY3VyaXR5UmVwb3J0IiwiZ2V0U3RhdHVzIiwiaXNSdW5uaW5nIiwidXB0aW1lIiwidXBkYXRlQ29uZmlnIiwibmV3Q29uZmlnIiwicHVzaCIsImF1dGhfZmFpbHVyZXNfMjRoIiwic3VzcGljaW91c19hY3Rpdml0aWVzXzI0aCIsInNlY3VyaXR5X3Njb3JlIiwid2FybiIsInNlbmROb3RpZmljYXRpb25zIiwid2ViaG9vayIsInBheWxvYWQiLCJ0aW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsInNvdXJjZSIsImxldmVsIiwibWVzc2FnZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF5cyIsIkFycmF5IiwiZmlsbCIsIm1hcCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImRhc2hib2FyZEluc3RhbmNlIiwiZGFzaGJvYXJkIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0M7Ozs7Ozs7Ozs7O1FBNERZQTtlQUFBQTs7UUE4U0dDO2VBQUFBOztRQVVNQztlQUFBQTs7UUFTTkM7ZUFBQUE7Ozt1Q0FoWFQ7QUErQ0EsTUFBTUg7SUFPWCxZQUFZSSxTQUEyQyxDQUFDLENBQUMsQ0FBRTtRQUN6RCxJQUFJLENBQUNBLE1BQU0sR0FBRztZQUNaQyxpQkFBaUI7WUFDakJDLGlCQUFpQjtnQkFDZkMsZ0JBQWdCO2dCQUNoQkMsY0FBYztnQkFDZEMsc0JBQXNCO2dCQUN0QkMsZUFBZTtZQUNqQjtZQUNBQyxjQUFjO1lBQ2RDLGVBQWU7Z0JBQ2JDLE9BQU87Z0JBQ1BDLE9BQU87WUFDVDtZQUNBLEdBQUdWLE1BQU07UUFDWDtRQUNBLElBQUksQ0FBQ1csVUFBVSxHQUFHLElBQUlDO0lBQ3hCO0lBRUE7O0dBRUMsR0FDRCxNQUFNQyxRQUF1QjtRQUMzQixJQUFJO1lBQ0ZDLFFBQVFDLEdBQUcsQ0FBQztZQUVaLHlCQUF5QjtZQUN6QixNQUFNLElBQUksQ0FBQ0MsV0FBVztZQUV0QixrREFBa0Q7WUFDbEQsSUFBSSxJQUFJLENBQUNoQixNQUFNLENBQUNPLFlBQVksRUFBRTtnQkFDNUIsSUFBSSxDQUFDVSxrQkFBa0IsR0FBR0MsSUFBQUEsOENBQXVCLEVBQUMsSUFBSSxpQkFBaUI7WUFDekU7WUFFQSxzQ0FBc0M7WUFDdEMsSUFBSSxDQUFDakIsZUFBZSxHQUFHa0IsWUFBWTtnQkFDakMsTUFBTSxJQUFJLENBQUNILFdBQVc7WUFDeEIsR0FBRyxJQUFJLENBQUNoQixNQUFNLENBQUNDLGVBQWUsR0FBRztZQUVqQ2EsUUFBUUMsR0FBRyxDQUFDO1FBQ2QsRUFBRSxPQUFPSyxPQUFPO1lBQ2ROLFFBQVFNLEtBQUssQ0FBQyxtREFBbURBO1lBQ2pFLE1BQU1BO1FBQ1I7SUFDRjtJQUVBOztHQUVDLEdBQ0RDLE9BQWE7UUFDWFAsUUFB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