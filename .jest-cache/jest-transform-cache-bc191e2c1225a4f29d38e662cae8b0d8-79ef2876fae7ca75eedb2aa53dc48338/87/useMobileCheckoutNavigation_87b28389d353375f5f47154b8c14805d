b42e8c87fac1ec32bc2e351aaf5898ec
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useMobileCheckoutNavigation () {
        return useMobileCheckoutNavigation;
    }
});
const _react = require("react");
const _useSwipeGestures = require("./useSwipeGestures");
const _navigation = require("next/navigation");
const useMobileCheckoutNavigation = (config = {})=>{
    const { enableSwipeGestures = true, enableHapticFeedback = true, onSwipeBack, onSwipeForward, enableKeyboardNavigation = true } = config;
    const router = (0, _navigation.useRouter)();
    const [isMobile, setIsMobile] = (0, _react.useState)(false);
    const [isInteracting, setIsInteracting] = (0, _react.useState)(false);
    // Detectar si estamos en mobile
    (0, _react.useEffect)(()=>{
        const checkMobile = ()=>{
            const userAgent = navigator.userAgent.toLowerCase();
            const isMobileDevice = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/.test(userAgent);
            const isSmallScreen = window.innerWidth < 768;
            setIsMobile(isMobileDevice || isSmallScreen);
        };
        checkMobile();
        window.addEventListener('resize', checkMobile);
        return ()=>window.removeEventListener('resize', checkMobile);
    }, []);
    // Función para vibración háptica
    const triggerHapticFeedback = (0, _react.useCallback)((type = 'light')=>{
        if (!enableHapticFeedback || !isMobile) return;
        try {
            // Vibración háptica moderna
            if ('vibrate' in navigator) {
                const patterns = {
                    light: [
                        10
                    ],
                    medium: [
                        20
                    ],
                    heavy: [
                        30
                    ]
                };
                navigator.vibrate(patterns[type]);
            }
            // Feedback háptico en iOS (si está disponible)
            if ('hapticFeedback' in window) {
                const feedbackTypes = {
                    light: 'impactLight',
                    medium: 'impactMedium',
                    heavy: 'impactHeavy'
                };
                // @ts-ignore - API experimental
                window.hapticFeedback?.[feedbackTypes[type]]?.();
            }
        } catch (error) {
            console.debug('Haptic feedback not available:', error);
        }
    }, [
        enableHapticFeedback,
        isMobile
    ]);
    // Funciones de navegación
    const goBack = (0, _react.useCallback)(()=>{
        triggerHapticFeedback('light');
        onSwipeBack?.() || router.back();
    }, [
        router,
        triggerHapticFeedback,
        onSwipeBack
    ]);
    const goForward = (0, _react.useCallback)(()=>{
        triggerHapticFeedback('light');
        onSwipeForward?.();
    }, [
        triggerHapticFeedback,
        onSwipeForward
    ]);
    // Configurar gestos de swipe
    const containerRef = (0, _useSwipeGestures.useSwipeGestures)({
        enabled: enableSwipeGestures && isMobile,
        threshold: 80,
        preventDefaultTouchmove: true,
        onSwipeRight: ()=>{
            // Swipe derecha = ir hacia atrás
            setIsInteracting(true);
            goBack();
            setTimeout(()=>setIsInteracting(false), 300);
        },
        onSwipeLeft: ()=>{
            // Swipe izquierda = ir hacia adelante (si está disponible)
            setIsInteracting(true);
            goForward();
            setTimeout(()=>setIsInteracting(false), 300);
        }
    });
    // Navegación por teclado
    (0, _react.useEffect)(()=>{
        if (!enableKeyboardNavigation) return;
        const handleKeyDown = (event)=>{
            // Solo activar si no estamos en un input
            if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {
                return;
            }
            switch(event.key){
                case 'Escape':
                    event.preventDefault();
                    goBack();
                    break;
                case 'ArrowLeft':
                    if (event.altKey) {
                        event.preventDefault();
                        goBack();
                    }
                    break;
                case 'ArrowRight':
                    if (event.altKey) {
                        event.preventDefault();
                        goForward();
                    }
                    break;
            }
        };
        document.addEventListener('keydown', handleKeyDown);
        return ()=>document.removeEventListener('keydown', handleKeyDown);
    }, [
        enableKeyboardNavigation,
        goBack,
        goForward
    ]);
    // Detectar interacciones táctiles
    (0, _react.useEffect)(()=>{
        if (!isMobile) return;
        const handleTouchStart = ()=>setIsInteracting(true);
        const handleTouchEnd = ()=>{
            setTimeout(()=>setIsInteracting(false), 100);
        };
        const element = containerRef.current;
        if (element) {
            element.addEventListener('touchstart', handleTouchStart, {
                passive: true
            });
            element.addEventListener('touchend', handleTouchEnd, {
                passive: true
            });
            return ()=>{
                element.removeEventListener('touchstart', handleTouchStart);
                element.removeEventListener('touchend', handleTouchEnd);
            };
        }
    }, [
        isMobile,
        containerRef
    ]);
    return {
        containerRef,
        isMobile,
        goBack,
        goForward,
        triggerHapticFeedback,
        isInteracting
    };
};
const _default = useMobileCheckoutNavigation;

//# sourceMappingURL=data:application/json;base64,