{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useMobileCheckoutNavigation.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { useSwipeGestures } from './useSwipeGestures';\nimport { useRouter } from 'next/navigation';\n\nexport interface MobileCheckoutNavigationConfig {\n  /** Habilitar gestos de swipe */\n  enableSwipeGestures?: boolean;\n  /** Habilitar vibración háptica */\n  enableHapticFeedback?: boolean;\n  /** Callback cuando se swipe hacia atrás */\n  onSwipeBack?: () => void;\n  /** Callback cuando se swipe hacia adelante */\n  onSwipeForward?: () => void;\n  /** Habilitar navegación por teclado */\n  enableKeyboardNavigation?: boolean;\n}\n\nexport interface MobileCheckoutNavigationReturn {\n  /** Ref para el contenedor principal */\n  containerRef: React.RefObject<HTMLDivElement>;\n  /** Estado de si está en mobile */\n  isMobile: boolean;\n  /** Función para ir hacia atrás */\n  goBack: () => void;\n  /** Función para ir hacia adelante */\n  goForward: () => void;\n  /** Función para vibración háptica */\n  triggerHapticFeedback: (type?: 'light' | 'medium' | 'heavy') => void;\n  /** Estado de si el usuario está interactuando */\n  isInteracting: boolean;\n}\n\n/**\n * Hook para mejorar la navegación móvil en el checkout\n * Incluye gestos táctiles, feedback háptico y navegación por teclado\n */\nexport const useMobileCheckoutNavigation = (\n  config: MobileCheckoutNavigationConfig = {}\n): MobileCheckoutNavigationReturn => {\n  const {\n    enableSwipeGestures = true,\n    enableHapticFeedback = true,\n    onSwipeBack,\n    onSwipeForward,\n    enableKeyboardNavigation = true\n  } = config;\n\n  const router = useRouter();\n  const [isMobile, setIsMobile] = useState(false);\n  const [isInteracting, setIsInteracting] = useState(false);\n\n  // Detectar si estamos en mobile\n  useEffect(() => {\n    const checkMobile = () => {\n      const userAgent = navigator.userAgent.toLowerCase();\n      const isMobileDevice = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/.test(userAgent);\n      const isSmallScreen = window.innerWidth < 768;\n      setIsMobile(isMobileDevice || isSmallScreen);\n    };\n\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Función para vibración háptica\n  const triggerHapticFeedback = useCallback((type: 'light' | 'medium' | 'heavy' = 'light') => {\n    if (!enableHapticFeedback || !isMobile) return;\n    \n    try {\n      // Vibración háptica moderna\n      if ('vibrate' in navigator) {\n        const patterns = {\n          light: [10],\n          medium: [20],\n          heavy: [30]\n        };\n        navigator.vibrate(patterns[type]);\n      }\n      \n      // Feedback háptico en iOS (si está disponible)\n      if ('hapticFeedback' in window) {\n        const feedbackTypes = {\n          light: 'impactLight',\n          medium: 'impactMedium', \n          heavy: 'impactHeavy'\n        };\n        // @ts-ignore - API experimental\n        window.hapticFeedback?.[feedbackTypes[type]]?.();\n      }\n    } catch (error) {\n      console.debug('Haptic feedback not available:', error);\n    }\n  }, [enableHapticFeedback, isMobile]);\n\n  // Funciones de navegación\n  const goBack = useCallback(() => {\n    triggerHapticFeedback('light');\n    onSwipeBack?.() || router.back();\n  }, [router, triggerHapticFeedback, onSwipeBack]);\n\n  const goForward = useCallback(() => {\n    triggerHapticFeedback('light');\n    onSwipeForward?.();\n  }, [triggerHapticFeedback, onSwipeForward]);\n\n  // Configurar gestos de swipe\n  const containerRef = useSwipeGestures({\n    enabled: enableSwipeGestures && isMobile,\n    threshold: 80, // Threshold más alto para evitar activaciones accidentales\n    preventDefaultTouchmove: true,\n    onSwipeRight: () => {\n      // Swipe derecha = ir hacia atrás\n      setIsInteracting(true);\n      goBack();\n      setTimeout(() => setIsInteracting(false), 300);\n    },\n    onSwipeLeft: () => {\n      // Swipe izquierda = ir hacia adelante (si está disponible)\n      setIsInteracting(true);\n      goForward();\n      setTimeout(() => setIsInteracting(false), 300);\n    }\n  });\n\n  // Navegación por teclado\n  useEffect(() => {\n    if (!enableKeyboardNavigation) return;\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Solo activar si no estamos en un input\n      if (event.target instanceof HTMLInputElement || \n          event.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n\n      switch (event.key) {\n        case 'Escape':\n          event.preventDefault();\n          goBack();\n          break;\n        case 'ArrowLeft':\n          if (event.altKey) {\n            event.preventDefault();\n            goBack();\n          }\n          break;\n        case 'ArrowRight':\n          if (event.altKey) {\n            event.preventDefault();\n            goForward();\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [enableKeyboardNavigation, goBack, goForward]);\n\n  // Detectar interacciones táctiles\n  useEffect(() => {\n    if (!isMobile) return;\n\n    const handleTouchStart = () => setIsInteracting(true);\n    const handleTouchEnd = () => {\n      setTimeout(() => setIsInteracting(false), 100);\n    };\n\n    const element = containerRef.current;\n    if (element) {\n      element.addEventListener('touchstart', handleTouchStart, { passive: true });\n      element.addEventListener('touchend', handleTouchEnd, { passive: true });\n      \n      return () => {\n        element.removeEventListener('touchstart', handleTouchStart);\n        element.removeEventListener('touchend', handleTouchEnd);\n      };\n    }\n  }, [isMobile, containerRef]);\n\n  return {\n    containerRef,\n    isMobile,\n    goBack,\n    goForward,\n    triggerHapticFeedback,\n    isInteracting\n  };\n};\n\nexport default useMobileCheckoutNavigation;"],"names":["useMobileCheckoutNavigation","config","enableSwipeGestures","enableHapticFeedback","onSwipeBack","onSwipeForward","enableKeyboardNavigation","router","useRouter","isMobile","setIsMobile","useState","isInteracting","setIsInteracting","useEffect","checkMobile","userAgent","navigator","toLowerCase","isMobileDevice","test","isSmallScreen","window","innerWidth","addEventListener","removeEventListener","triggerHapticFeedback","useCallback","type","patterns","light","medium","heavy","vibrate","feedbackTypes","hapticFeedback","error","console","debug","goBack","back","goForward","containerRef","useSwipeGestures","enabled","threshold","preventDefaultTouchmove","onSwipeRight","setTimeout","onSwipeLeft","handleKeyDown","event","target","HTMLInputElement","HTMLTextAreaElement","key","preventDefault","altKey","document","handleTouchStart","handleTouchEnd","element","current","passive"],"mappings":"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"}