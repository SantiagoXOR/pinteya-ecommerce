f22a84d975ad40b1afd4a8cb91ff68ac
/**
 * Protección CSRF y Validación de Origen
 * Implementa validaciones para prevenir ataques Cross-Site Request Forgery
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    generateCSRFToken: function() {
        return generateCSRFToken;
    },
    validateCSRFToken: function() {
        return validateCSRFToken;
    },
    validateRequestOrigin: function() {
        return validateRequestOrigin;
    },
    withAdminCSRFProtection: function() {
        return withAdminCSRFProtection;
    },
    withCSRFProtection: function() {
        return withCSRFProtection;
    }
});
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// =====================================================
// CONFIGURACIÓN DE SEGURIDAD
// =====================================================
const CSRF_CONFIG = {
    allowedOrigins: [
        process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
        'https://pinteya-ecommerce.vercel.app',
        'https://pinteya.com',
        'https://www.pinteya.com'
    ],
    allowedMethods: [
        'GET',
        'POST',
        'PUT',
        'PATCH',
        'DELETE'
    ],
    requireReferer: true,
    requireOrigin: true,
    strictMode: process.env.NODE_ENV === 'production',
    developmentMode: process.env.NODE_ENV === 'development'
};
async function validateRequestOrigin(request) {
    try {
        const method = request.method || 'GET';
        const origin = getHeader(request, 'origin');
        const referer = getHeader(request, 'referer');
        const userAgent = getHeader(request, 'user-agent');
        // En desarrollo, ser más permisivo
        if (CSRF_CONFIG.developmentMode && !CSRF_CONFIG.strictMode) {
            return {
                valid: true,
                details: {
                    origin,
                    referer,
                    userAgent,
                    method,
                    expectedOrigins: CSRF_CONFIG.allowedOrigins
                }
            };
        }
        // Validar método HTTP
        if (!CSRF_CONFIG.allowedMethods.includes(method)) {
            return {
                valid: false,
                error: `Método HTTP no permitido: ${method}`,
                code: 'INVALID_HTTP_METHOD',
                severity: 'medium'
            };
        }
        // Para métodos seguros (GET), validación menos estricta
        if (method === 'GET') {
            return validateGetRequest(origin, referer, userAgent);
        }
        // Para métodos que modifican datos, validación estricta
        return validateMutatingRequest(origin, referer, userAgent, method);
    } catch (error) {
        console.error('[CSRF] Error en validación de origen:', error);
        return {
            valid: false,
            error: 'Error interno en validación de origen',
            code: 'ORIGIN_VALIDATION_ERROR',
            severity: 'critical'
        };
    }
}
/**
 * Valida requests GET (menos estricto)
 */ function validateGetRequest(origin, referer, userAgent) {
    // Para GET, solo verificar que no sea obviamente malicioso
    if (userAgent && isSuspiciousUserAgent(userAgent)) {
        return {
            valid: false,
            error: 'User-Agent sospechoso detectado',
            code: 'SUSPICIOUS_USER_AGENT',
            severity: 'medium'
        };
    }
    return {
        valid: true,
        details: {
            origin,
            referer,
            userAgent,
            method: 'GET'
        }
    };
}
/**
 * Valida requests que modifican datos (estricto)
 */ function validateMutatingRequest(origin, referer, userAgent, method) {
    // Verificar Origin header
    if (CSRF_CONFIG.requireOrigin && !origin) {
        return {
            valid: false,
            error: 'Header Origin requerido para operaciones que modifican datos',
            code: 'MISSING_ORIGIN_HEADER',
            severity: 'high'
        };
    }
    if (origin && !isAllowedOrigin(origin)) {
        return {
            valid: false,
            error: `Origen no permitido: ${origin}`,
            code: 'INVALID_ORIGIN',
            severity: 'critical',
            details: {
                origin,
                expectedOrigins: CSRF_CONFIG.allowedOrigins
            }
        };
    }
    // Verificar Referer header
    if (CSRF_CONFIG.requireReferer && !referer) {
        return {
            valid: false,
            error: 'Header Referer requerido para operaciones que modifican datos',
            code: 'MISSING_REFERER_HEADER',
            severity: 'high'
        };
    }
    if (referer && !isAllowedReferer(referer)) {
        return {
            valid: false,
            error: `Referer no permitido: ${referer}`,
            code: 'INVALID_REFERER',
            severity: 'high'
        };
    }
    // Verificar User-Agent
    if (userAgent && isSuspiciousUserAgent(userAgent)) {
        return {
            valid: false,
            error: 'User-Agent sospechoso detectado',
            code: 'SUSPICIOUS_USER_AGENT',
            severity: 'medium'
        };
    }
    return {
        valid: true,
        details: {
            origin,
            referer,
            userAgent,
            method,
            expectedOrigins: CSRF_CONFIG.allowedOrigins
        }
    };
}
/**
 * Verifica si un origen está permitido
 */ function isAllowedOrigin(origin) {
    try {
        const originUrl = new URL(origin);
        return CSRF_CONFIG.allowedOrigins.some((allowedOrigin)=>{
            try {
                const allowedUrl = new URL(allowedOrigin);
                return originUrl.hostname === allowedUrl.hostname && originUrl.protocol === allowedUrl.protocol;
            } catch  {
                return false;
            }
        });
    } catch  {
        return false;
    }
}
/**
 * Verifica si un referer está permitido
 */ function isAllowedReferer(referer) {
    try {
        const refererUrl = new URL(referer);
        return CSRF_CONFIG.allowedOrigins.some((allowedOrigin)=>{
            try {
                const allowedUrl = new URL(allowedOrigin);
                return refererUrl.hostname === allowedUrl.hostname;
            } catch  {
                return false;
            }
        });
    } catch  {
        return false;
    }
}
/**
 * Detecta User-Agents sospechosos
 */ function isSuspiciousUserAgent(userAgent) {
    const suspiciousPatterns = [
        /bot/i,
        /crawler/i,
        /spider/i,
        /scraper/i,
        /curl/i,
        /wget/i,
        /python/i,
        /postman/i,
        /insomnia/i,
        /^$/,
        /^.{0,10}$/,
        /^.{500,}$/ // User-Agent muy largo
    ];
    return suspiciousPatterns.some((pattern)=>pattern.test(userAgent));
}
/**
 * Obtiene un header de manera compatible con ambos tipos de request
 */ function getHeader(request, headerName) {
    if ('headers' in request && typeof request.headers.get === 'function') {
        // NextRequest
        return request.headers.get(headerName);
    } else if ('headers' in request) {
        // NextApiRequest
        const header = request.headers[headerName];
        return Array.isArray(header) ? header[0] : header || null;
    }
    return null;
}
function generateCSRFToken() {
    return _crypto.default.randomBytes(32).toString('hex');
}
function validateCSRFToken(providedToken, expectedToken) {
    if (!providedToken || !expectedToken) {
        return false;
    }
    // Comparación segura para prevenir timing attacks
    return _crypto.default.timingSafeEqual(Buffer.from(providedToken, 'hex'), Buffer.from(expectedToken, 'hex'));
}
function withCSRFProtection(options = {}) {
    const config = {
        ...CSRF_CONFIG,
        ...options
    };
    return function(handler) {
        return async (request, ...args)=>{
            try {
                // Validar origen de la request
                const originValidation = await validateRequestOrigin(request);
                if (!originValidation.valid) {
                    const errorResponse = {
                        success: false,
                        error: originValidation.error,
                        code: originValidation.code,
                        severity: originValidation.severity,
                        csrfProtection: true
                    };
                    if ('query' in request) {
                        // Pages Router
                        const res = args[0];
                        return res.status(403).json(errorResponse);
                    } else {
                        // App Router
                        return new Response(JSON.stringify(errorResponse), {
                            status: 403,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                    }
                }
                // Añadir información de validación al request
                request.csrfValidation = originValidation;
                return handler(request, ...args);
            } catch (error) {
                console.error('[CSRF] Error en middleware de protección:', error);
                const errorResponse = {
                    success: false,
                    error: 'Error interno en protección CSRF',
                    code: 'CSRF_MIDDLEWARE_ERROR'
                };
                if ('query' in request) {
                    // Pages Router
                    const res = args[0];
                    return res.status(500).json(errorResponse);
                } else {
                    // App Router
                    return new Response(JSON.stringify(errorResponse), {
                        status: 500,
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }
            }
        };
    };
}
function withAdminCSRFProtection() {
    return withCSRFProtection({
        strictMode: true,
        requireReferer: true,
        requireOrigin: true
    });
}

//# sourceMappingURL=data:application/json;base64,