1a23dcacfdbbe5ec823634bf3827cedc
/**
 * CategoryPill Component Tests
 * Enterprise-ready test suite with accessibility focus
 * Pinteya E-commerce
 */ "use strict";
// Mock Next.js Image component
jest.mock('next/image', ()=>{
    return function MockImage({ src, alt, onError, ...props }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            onError: onError,
            "data-testid": "category-icon",
            ...props
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _jestaxe = require("jest-axe");
const _CategoryPill = /*#__PURE__*/ _interop_require_default(require("../../../components/Home/Categories/CategoryPill"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Extend Jest matchers
expect.extend(_jestaxe.toHaveNoViolations);
// Test data
const mockCategory = {
    id: 'test-category',
    name: 'Test Category',
    icon: '/test-icon.png',
    description: 'Test category description',
    count: 5
};
const defaultProps = {
    category: mockCategory,
    isSelected: false,
    onClick: jest.fn(),
    size: 'md',
    disabled: false
};
describe('CategoryPill Component', ()=>{
    const mockOnClick = jest.fn();
    const mockOnKeyDown = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Rendering', ()=>{
        it('renders without crashing', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            expect(_react1.screen.getByRole('button')).toBeInTheDocument();
        });
        it('displays category name', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            expect(_react1.screen.getByText(mockCategory.name)).toBeInTheDocument();
        });
        it('displays category icon', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const icon = _react1.screen.getByTestId('category-icon');
            expect(icon).toHaveAttribute('src', mockCategory.icon);
        });
        it('displays product count when available', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            expect(_react1.screen.getByText('(5)')).toBeInTheDocument();
        });
        it('hides product count when not available', ()=>{
            const categoryWithoutCount = {
                ...mockCategory,
                count: undefined
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                category: categoryWithoutCount,
                onClick: mockOnClick
            }));
            expect(_react1.screen.queryByText(/\(\d+\)/)).not.toBeInTheDocument();
        });
        it('renders description for screen readers', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            expect(_react1.screen.getByText(mockCategory.description)).toHaveClass('sr-only');
        });
    });
    describe('Accessibility', ()=>{
        it('should not have accessibility violations', async ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const results = await (0, _jestaxe.axe)(container);
            expect(results).toHaveNoViolations();
        });
        it('has proper ARIA attributes when not selected', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('aria-pressed', 'false');
            expect(button).toHaveAttribute('aria-label', expect.stringContaining(mockCategory.name));
            expect(button).toHaveAttribute('aria-label', expect.stringContaining('no seleccionada'));
            expect(button).toHaveAttribute('role', 'button');
            expect(button).toHaveAttribute('tabIndex', '0');
        });
        it('has proper ARIA attributes when selected', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                isSelected: true,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('aria-pressed', 'true');
            expect(button).toHaveAttribute('aria-label', expect.stringContaining('seleccionada'));
        });
        it('has proper ARIA attributes when disabled', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                disabled: true,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('tabIndex', '-1');
            expect(button).toBeDisabled();
        });
        it('links to description with aria-describedby', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('aria-describedby', `${mockCategory.id}-description`);
        });
        it('has empty alt text for decorative icon', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const icon = _react1.screen.getByTestId('category-icon');
            expect(icon).toHaveAttribute('alt', '');
        });
    });
    describe('Interactions', ()=>{
        it('calls onClick when clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            await user.click(button);
            expect(mockOnClick).toHaveBeenCalledWith(mockCategory.id);
        });
        it('does not call onClick when disabled', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                disabled: true,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            await user.click(button);
            expect(mockOnClick).not.toHaveBeenCalled();
        });
        it('handles Enter key press', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            button.focus();
            await user.keyboard('{Enter}');
            expect(mockOnClick).toHaveBeenCalledWith(mockCategory.id);
        });
        it('handles Space key press', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            button.focus();
            await user.keyboard(' ');
            expect(mockOnClick).toHaveBeenCalledWith(mockCategory.id);
        });
        it('calls custom onKeyDown handler', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick,
                onKeyDown: mockOnKeyDown
            }));
            const button = _react1.screen.getByRole('button');
            button.focus();
            await user.keyboard('{ArrowRight}');
            expect(mockOnKeyDown).toHaveBeenCalledWith(expect.any(Object), mockCategory.id);
        });
        it('prevents default behavior for Enter and Space', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            button.focus();
            const enterEvent = new KeyboardEvent('keydown', {
                key: 'Enter'
            });
            const preventDefaultSpy = jest.spyOn(enterEvent, 'preventDefault');
            _react1.fireEvent.keyDown(button, enterEvent);
            expect(preventDefaultSpy).toHaveBeenCalled();
        });
    });
    describe('Visual States', ()=>{
        it('applies selected styles when selected', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                isSelected: true,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('data-selected', 'true');
            expect(button).toHaveClass('scale-105');
        });
        it('applies not selected styles when not selected', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('data-selected', 'false');
        });
        it('applies disabled styles when disabled', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                disabled: true,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('opacity-50', 'cursor-not-allowed');
        });
    });
    describe('Size Variants', ()=>{
        it('applies small size styles', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                size: "sm",
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('pl-6', 'pr-3', 'py-1.5', 'text-xs');
        });
        it('applies medium size styles', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                size: "md",
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('pl-8', 'pr-4', 'py-2', 'text-sm');
        });
        it('applies large size styles', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                size: "lg",
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('pl-10', 'pr-5', 'py-3', 'text-base');
        });
    });
    describe('Error Handling', ()=>{
        it('handles image loading errors gracefully', ()=>{
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const icon = _react1.screen.getByTestId('category-icon');
            _react1.fireEvent.error(icon);
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining(`Failed to load image for category: ${mockCategory.name}`));
            consoleSpy.mockRestore();
        });
    });
    describe('Custom Props', ()=>{
        it('applies custom className', ()=>{
            const customClass = 'custom-test-class';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                className: customClass,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass(customClass);
        });
        it('applies custom testId', ()=>{
            const customTestId = 'custom-test-id';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                testId: customTestId,
                onClick: mockOnClick
            }));
            expect(_react1.screen.getByTestId(customTestId)).toBeInTheDocument();
        });
        it('sets data attributes correctly', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CategoryPill.default, {
                ...defaultProps,
                onClick: mockOnClick
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('data-category-id', mockCategory.id);
            expect(button).toHaveAttribute('data-selected', 'false');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,