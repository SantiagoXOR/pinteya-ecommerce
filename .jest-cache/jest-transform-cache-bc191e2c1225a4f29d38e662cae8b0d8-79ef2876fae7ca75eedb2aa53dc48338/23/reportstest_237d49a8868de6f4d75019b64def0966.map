{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\payments\\reports.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\r\nimport { GET, POST } from '@/app/api/payments/reports/route';\r\nimport { auth } from '@/auth';\r\n\r\n// Mock dependencies\r\njest.mock('@clerk/nextjs/server');\r\njest.mock('@/lib/supabase');\r\njest.mock('@/lib/rate-limiter');\r\njest.mock('@/lib/metrics');\r\njest.mock('@/lib/logger');\r\n\r\nconst mockAuth = auth as jest.MockedFunction<typeof auth>;\r\n\r\ndescribe('/api/payments/reports', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock environment variables\r\n    process.env.MERCADOPAGO_ACCESS_TOKEN = 'APP_USR_test_token';\r\n    process.env.NODE_ENV = 'test';\r\n  });\r\n\r\n  describe('GET', () => {\r\n    it('should return 401 when user is not authenticated', async () => {\r\n      mockAuth.mockResolvedValue({ userId: null });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('No autorizado');\r\n    });\r\n\r\n    it('should return report data when user is authenticated', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        gte: jest.fn().mockReturnThis(),\r\n        lte: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        in: jest.fn().mockResolvedValue({\r\n          data: [\r\n            {\r\n              id: 1,\r\n              total_amount: 1000,\r\n              status: 'completed',\r\n              payment_status: 'approved',\r\n              created_at: '2024-01-01T00:00:00Z',\r\n              updated_at: '2024-01-01T01:00:00Z',\r\n              order_items: [\r\n                {\r\n                  quantity: 2,\r\n                  unit_price: 500,\r\n                  products: {\r\n                    name: 'Test Product',\r\n                    category_id: 'cat_1'\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeDefined();\r\n      expect(data.data.type).toBe('account_money');\r\n      expect(data.data.records).toBeDefined();\r\n      expect(Array.isArray(data.data.records)).toBe(true);\r\n      expect(data.data.total_records).toBeDefined();\r\n    });\r\n\r\n    it('should handle different report types', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        gte: jest.fn().mockReturnThis(),\r\n        lte: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        in: jest.fn().mockResolvedValue({\r\n          data: [],\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      // Test released_money report\r\n      const request1 = new NextRequest('http://localhost:3000/api/payments/reports?type=released_money');\r\n      const response1 = await GET(request1);\r\n      const data1 = await response1.json();\r\n\r\n      expect(response1.status).toBe(200);\r\n      expect(data1.data.type).toBe('released_money');\r\n\r\n      // Test sales_report\r\n      const request2 = new NextRequest('http://localhost:3000/api/payments/reports?type=sales_report');\r\n      const response2 = await GET(request2);\r\n      const data2 = await response2.json();\r\n\r\n      expect(response2.status).toBe(200);\r\n      expect(data2.data.type).toBe('sales_report');\r\n    });\r\n\r\n    it('should validate report type parameter', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports?type=invalid_type');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Tipo de reporte invÃ¡lido');\r\n    });\r\n\r\n    it('should include metrics when requested', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        gte: jest.fn().mockReturnThis(),\r\n        lte: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        in: jest.fn().mockResolvedValue({\r\n          data: [\r\n            {\r\n              id: 1,\r\n              total_amount: 1000,\r\n              status: 'completed',\r\n              payment_status: 'approved',\r\n              created_at: '2024-01-01T00:00:00Z',\r\n              updated_at: '2024-01-01T01:00:00Z',\r\n              order_items: []\r\n            }\r\n          ],\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports?include_metrics=true');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.data.metrics).toBeDefined();\r\n      expect(data.data.metrics.total_transactions).toBeDefined();\r\n      expect(data.data.metrics.total_amount).toBeDefined();\r\n      expect(data.data.metrics.successful_payments).toBeDefined();\r\n      expect(data.data.metrics.failed_payments).toBeDefined();\r\n      expect(data.data.metrics.conversion_rate).toBeDefined();\r\n      expect(data.data.metrics.average_ticket).toBeDefined();\r\n    });\r\n\r\n    it('should handle date range parameters', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      // Mock Supabase\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const mockSupabase = {\r\n        from: jest.fn().mockReturnThis(),\r\n        select: jest.fn().mockReturnThis(),\r\n        gte: jest.fn().mockReturnThis(),\r\n        lte: jest.fn().mockReturnThis(),\r\n        eq: jest.fn().mockReturnThis(),\r\n        in: jest.fn().mockResolvedValue({\r\n          data: [],\r\n          error: null\r\n        })\r\n      };\r\n      getSupabaseClient.mockReturnValue(mockSupabase);\r\n\r\n      const dateFrom = '2024-01-01';\r\n      const dateTo = '2024-01-31';\r\n      const request = new NextRequest(`http://localhost:3000/api/payments/reports?date_from=${dateFrom}&date_to=${dateTo}`);\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.data.date_from).toContain('2024-01-01');\r\n      expect(data.data.date_to).toContain('2024-01-31');\r\n    });\r\n\r\n    it('should handle rate limiting', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter to return failure\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ \r\n        success: false, \r\n        remaining: 0,\r\n        resetTime: Date.now() + 60000 \r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(429);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Demasiadas solicitudes');\r\n    });\r\n  });\r\n\r\n  describe('POST', () => {\r\n    it('should return 401 when user is not authenticated', async () => {\r\n      mockAuth.mockResolvedValue({ userId: null });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          type: 'account_money',\r\n          date_from: '2024-01-01',\r\n          date_to: '2024-01-31'\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('No autorizado');\r\n    });\r\n\r\n    it('should create a new report when user is authenticated', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      const requestBody = {\r\n        type: 'account_money',\r\n        date_from: '2024-01-01',\r\n        date_to: '2024-01-31'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(201);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toBeDefined();\r\n      expect(data.data.id).toBeDefined();\r\n      expect(data.data.type).toBe('account_money');\r\n      expect(data.data.date_from).toBe('2024-01-01');\r\n      expect(data.data.date_to).toBe('2024-01-31');\r\n      expect(data.data.status).toBe('pending');\r\n      expect(data.data.created_at).toBeDefined();\r\n    });\r\n\r\n    it('should validate required parameters', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Test missing type\r\n      const request1 = new NextRequest('http://localhost:3000/api/payments/reports', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          date_from: '2024-01-01',\r\n          date_to: '2024-01-31'\r\n        })\r\n      });\r\n      const response1 = await POST(request1);\r\n      const data1 = await response1.json();\r\n\r\n      expect(response1.status).toBe(400);\r\n      expect(data1.success).toBe(false);\r\n      expect(data1.error).toBe('Faltan parÃ¡metros requeridos');\r\n\r\n      // Test missing date_from\r\n      const request2 = new NextRequest('http://localhost:3000/api/payments/reports', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          type: 'account_money',\r\n          date_to: '2024-01-31'\r\n        })\r\n      });\r\n      const response2 = await POST(request2);\r\n      const data2 = await response2.json();\r\n\r\n      expect(response2.status).toBe(400);\r\n      expect(data2.success).toBe(false);\r\n      expect(data2.error).toBe('Faltan parÃ¡metros requeridos');\r\n    });\r\n\r\n    it('should handle rate limiting for report creation', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter to return failure\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ \r\n        success: false, \r\n        remaining: 0,\r\n        resetTime: Date.now() + 60000 \r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          type: 'account_money',\r\n          date_from: '2024-01-01',\r\n          date_to: '2024-01-31'\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(429);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Demasiadas solicitudes');\r\n    });\r\n\r\n    it('should handle errors gracefully', async () => {\r\n      mockAuth.mockRejectedValue(new Error('Auth service error'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          type: 'account_money',\r\n          date_from: '2024-01-01',\r\n          date_to: '2024-01-31'\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Error interno del servidor');\r\n    });\r\n\r\n    it('should include processing time in response', async () => {\r\n      mockAuth.mockResolvedValue({ userId: 'user_123' });\r\n\r\n      // Mock rate limiter\r\n      const { checkRateLimit } = require('@/lib/rate-limiter');\r\n      checkRateLimit.mockResolvedValue({ success: true, remaining: 10 });\r\n\r\n      // Mock metrics collector\r\n      const { metricsCollector } = require('@/lib/metrics');\r\n      metricsCollector.recordApiCall.mockResolvedValue(undefined);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/payments/reports', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          type: 'account_money',\r\n          date_from: '2024-01-01',\r\n          date_to: '2024-01-31'\r\n        })\r\n      });\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(201);\r\n      expect(data.processing_time).toBeDefined();\r\n      expect(typeof data.processing_time).toBe('number');\r\n      expect(data.processing_time).toBeGreaterThanOrEqual(0);\r\n      expect(data.timestamp).toBeDefined();\r\n      expect(typeof data.timestamp).toBe('number');\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","mockAuth","auth","describe","beforeEach","clearAllMocks","process","env","MERCADOPAGO_ACCESS_TOKEN","NODE_ENV","it","mockResolvedValue","userId","request","NextRequest","response","GET","data","json","expect","status","toBe","success","error","checkRateLimit","require","remaining","metricsCollector","recordApiCall","undefined","getSupabaseClient","mockSupabase","from","fn","mockReturnThis","select","gte","lte","eq","in","id","total_amount","payment_status","created_at","updated_at","order_items","quantity","unit_price","products","name","category_id","mockReturnValue","toBeDefined","type","records","Array","isArray","total_records","request1","response1","data1","request2","response2","data2","metrics","total_transactions","successful_payments","failed_payments","conversion_rate","average_ticket","dateFrom","dateTo","date_from","toContain","date_to","resetTime","Date","now","method","body","JSON","stringify","POST","requestBody","mockRejectedValue","Error","processing_time","toBeGreaterThanOrEqual","timestamp"],"mappings":"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"}