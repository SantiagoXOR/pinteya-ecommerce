f8d4a43e12e03579c6c29c90b08c2772
// ===================================
// PINTEYA E-COMMERCE - STRICT ORDERS HOOK (REFACTORED)
// Hook orquestador para gestión de órdenes con validación estricta
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useOrderDetailStrict () {
        return useOrderDetailStrict;
    },
    get useOrdersEnterpriseStrict () {
        return useOrdersEnterpriseStrict;
    }
});
const _react = require("react");
const _usetoast = require("../use-toast");
const _apistrict = require("../../types/api-strict");
const _apimonitoring = require("../../utils/api-monitoring");
const _useOrdersCache = require("./useOrdersCache");
const _useOrdersApi = require("./useOrdersApi");
const _useOrdersState = require("./useOrdersState");
// Función de debounce para evitar peticiones múltiples
function debounce(func, wait) {
    let timeout;
    return (...args)=>{
        clearTimeout(timeout);
        timeout = setTimeout(()=>func(...args), wait);
    };
}
const DEFAULT_OPTIONS = {
    autoFetch: true,
    refetchInterval: 0,
    maxRetries: 3,
    timeout: 10000,
    enableCache: true,
    cacheTimeout: 5 * 60 * 1000 // 5 minutes
};
function useOrdersEnterpriseStrict(initialFilters = {}, options = {}) {
    const { toast } = (0, _usetoast.useToast)();
    const apiMonitoring = (0, _apimonitoring.useApiMonitoring)();
    const opts = (0, _react.useMemo)(()=>({
            ...DEFAULT_OPTIONS,
            ...options
        }), [
        options
    ]);
    // Memoizar las funciones de monitoreo para evitar recreaciones
    const recordDiscrepancy = (0, _react.useCallback)(apiMonitoring.recordDiscrepancy, []);
    const recordRenderingIssue = (0, _react.useCallback)(apiMonitoring.recordRenderingIssue, []);
    // ===================================
    // HOOKS ESPECIALIZADOS
    // ===================================
    // Hook de cache
    const cache = (0, _useOrdersCache.useOrdersCache)({
        enableCache: opts.enableCache,
        cacheTimeout: opts.cacheTimeout,
        maxSize: 50,
        cleanupInterval: 10 * 60 * 1000,
        minRequestInterval: 1000
    });
    // Hook de estado
    const state = (0, _useOrdersState.useOrdersState)(initialFilters);
    // Hook de API
    const api = (0, _useOrdersApi.useOrdersApi)({
        timeout: opts.timeout,
        maxRetries: opts.maxRetries,
        enableCache: opts.enableCache,
        cache
    });
    // Referencias para control de requests (simplificadas)
    const retryCountRef = (0, _react.useRef)(0);
    const refetchIntervalRef = (0, _react.useRef)(null);
    const debounceTimeoutRef = (0, _react.useRef)(null);
    // ===================================
    // FUNCIONES DE FETCH SIMPLIFICADAS
    // ===================================
    // Usar el hook de API directamente
    const fetchOrdersInternal = api.fetchOrdersInternal;
    // ===================================
    // FUNCIONES DE FETCH PÚBLICAS
    // ===================================
    // Lógica de fetch movida a useOrdersApi.ts
    // ===================================
    // FUNCIÓN DE FETCH PÚBLICA CON RETRY
    // ===================================
    // Función interna sin debounce para uso directo
    const fetchOrdersImmediate = (0, _react.useCallback)(async (newFilters = {})=>{
        console.log('[useOrdersEnterpriseStrict] fetchOrdersImmediate called with filters:', newFilters);
        console.log('[useOrdersEnterpriseStrict] Current state filters:', state.filters);
        // Generar clave única para esta petición
        const requestKey = JSON.stringify({
            ...state.filters,
            ...newFilters
        });
        console.log('[useOrdersEnterpriseStrict] Request key:', requestKey);
        // Evitar peticiones duplicadas
        if (state.hasFiltersChanged({
            ...state.filters,
            ...newFilters
        }) && state.isLoading) {
            console.log('[useOrdersEnterpriseStrict] Skipping duplicate request');
            return;
        }
        // Actualizar filtros y estado de carga
        console.log('[useOrdersEnterpriseStrict] Updating filters and setting loading to true');
        state.updateFilters(newFilters);
        state.setLoading(true);
        retryCountRef.current = 0;
        const attemptFetch = async (attempt)=>{
            const currentFilters = state.getLastFilters();
            console.log('[useOrdersEnterpriseStrict] attemptFetch - attempt:', attempt, 'filters:', currentFilters);
            const result = await fetchOrdersInternal(currentFilters, attempt > 0);
            console.log('[useOrdersEnterpriseStrict] API result:', result);
            if ((0, _apistrict.isStrictApiResponse)(result)) {
                console.log('[useOrdersEnterpriseStrict] Valid API response received:', result.data);
                // Monitoreo automático de discrepancias
                const expectedCount = result.data.pagination.total;
                const actualCount = result.data.orders.length;
                const endpoint = `/api/admin/orders?${new URLSearchParams({
                    page: currentFilters.page?.toString() || '1',
                    limit: currentFilters.limit?.toString() || '20',
                    ...currentFilters.status && {
                        status: currentFilters.status
                    },
                    ...currentFilters.payment_status && {
                        payment_status: currentFilters.payment_status
                    },
                    ...currentFilters.fulfillment_status && {
                        fulfillment_status: currentFilters.fulfillment_status
                    },
                    ...currentFilters.sort_by && {
                        sort_by: currentFilters.sort_by
                    },
                    ...currentFilters.sort_order && {
                        sort_order: currentFilters.sort_order
                    }
                }).toString()}`;
                // Solo registrar discrepancia si hay una diferencia real (no por paginación)
                const expectedPageCount = Math.min(currentFilters.limit || 20, expectedCount - ((currentFilters.page || 1) - 1) * (currentFilters.limit || 20));
                if (actualCount < expectedPageCount && expectedPageCount > 0) {
                    recordDiscrepancy(endpoint, expectedPageCount, actualCount);
                }
                // Actualizar estado usando el hook especializado
                state.setOrders(result.data.orders);
                state.setPagination(result.data.pagination);
                state.setAnalytics(result.data.analytics || null);
                retryCountRef.current = 0;
            } else {
                // Es un error
                if (attempt < opts.maxRetries && result.code !== 'REQUEST_CANCELLED') {
                    retryCountRef.current = attempt + 1;
                    // Esperar antes del retry (exponential backoff)
                    const delay = Math.min(1000 * Math.pow(2, attempt), 10000);
                    await new Promise((resolve)=>setTimeout(resolve, delay));
                    return attemptFetch(attempt + 1);
                }
                // Máximo de reintentos alcanzado o error no recuperable
                state.setError(result.error);
                // Registrar problema de renderizado por error de API
                recordRenderingIssue('useOrdersEnterpriseStrict', 0, 0, currentFilters, result.error);
                // Mostrar toast de error
                if (result.code !== 'REQUEST_CANCELLED') {
                    toast({
                        title: 'Error al cargar órdenes',
                        description: result.error,
                        variant: 'destructive'
                    });
                }
            }
        };
        await attemptFetch(0);
    }, [
        fetchOrdersInternal,
        opts.maxRetries,
        toast,
        recordDiscrepancy,
        recordRenderingIssue,
        state
    ]);
    // Función fetchOrders con debouncing para evitar peticiones múltiples
    const fetchOrders = (0, _react.useCallback)((newFilters = {})=>{
        return new Promise((resolve)=>{
            // Limpiar timeout anterior si existe
            if (debounceTimeoutRef.current) {
                clearTimeout(debounceTimeoutRef.current);
            }
            // Configurar nuevo timeout con debounce
            const debounceMs = process.env.NODE_ENV === 'development' ? 300 : 150;
            debounceTimeoutRef.current = setTimeout(async ()=>{
                try {
                    await fetchOrdersImmediate(newFilters);
                    resolve();
                } catch (error) {
                    console.error('Error in debounced fetchOrders:', error);
                    resolve(); // Resolver incluso en caso de error para evitar promesas colgadas
                }
            }, debounceMs);
        });
    }, [
        fetchOrdersImmediate
    ]);
    // ===================================
    // OTRAS ACCIONES
    // ===================================
    const refreshOrders = (0, _react.useCallback)(async ()=>{
        // Limpiar cache para forzar refresh
        if (opts.enableCache) {
            cache.clearCache();
        }
        await fetchOrders();
    }, [
        fetchOrders,
        opts.enableCache,
        cache
    ]);
    // Usar las funciones del hook de estado directamente
    const updateFilters = state.updateFilters;
    const clearError = state.clearError;
    const retryLastRequest = (0, _react.useCallback)(async ()=>{
        const lastFilters = state.getLastFilters();
        if (lastFilters) {
            await fetchOrders(lastFilters);
        }
    }, [
        fetchOrders,
        state
    ]);
    // ===================================
    // EFECTOS
    // ===================================
    // Auto-fetch inicial - SIMPLIFICADO
    const hasInitialFetchRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(()=>{
        if (opts.autoFetch && !hasInitialFetchRef.current) {
            hasInitialFetchRef.current = true;
            fetchOrders();
        }
    }, [
        opts.autoFetch
    ]); // Solo ejecutar una vez al montar
    // Escuchar cambios en filtros con debouncing optimizado
    const filtersRef = (0, _react.useRef)(state.filters);
    const isInitialMount = (0, _react.useRef)(true);
    (0, _react.useEffect)(()=>{
        // Evitar fetch en el primer render (ya se hace en auto-fetch)
        if (isInitialMount.current) {
            isInitialMount.current = false;
            filtersRef.current = state.filters;
            return;
        }
        // Solo hacer fetch si los filtros han cambiado realmente
        const hasChanged = JSON.stringify(filtersRef.current) !== JSON.stringify(state.filters);
        if (hasChanged) {
            filtersRef.current = state.filters;
            fetchOrders();
        }
    }, [
        state.filters,
        fetchOrders
    ]); // Dependencias mínimas y estables
    // Refetch interval - TEMPORALMENTE DESHABILITADO para evitar refresco infinito
    (0, _react.useEffect)(()=>{
    // NOTA: Refetch interval deshabilitado temporalmente para solucionar refresco infinito
    // TODO: Reimplementar con useRef para fetchOrders o usar React Query
    /*
    if (opts.refetchInterval > 0) {
      refetchIntervalRef.current = setInterval(() => {
        if (!state.isLoading) {
          fetchOrders();
        }
      }, opts.refetchInterval);

      return () => {
        if (refetchIntervalRef.current) {
          clearInterval(refetchIntervalRef.current);
        }
      };
    }
    */ }, [
        opts.refetchInterval
    ]);
    // Limpieza automática de cache movida a useOrdersCache.ts
    // Cleanup al desmontar
    (0, _react.useEffect)(()=>{
        return ()=>{
            // Cancelar peticiones en progreso usando el hook de API
            api.abortCurrentRequest();
            // Limpiar intervalos y timeouts
            if (refetchIntervalRef.current) {
                clearInterval(refetchIntervalRef.current);
            }
            if (debounceTimeoutRef.current) {
                clearTimeout(debounceTimeoutRef.current);
            }
            if (process.env.NODE_ENV === 'development') {
                console.log('[useOrdersEnterpriseStrict] Hook cleanup completed');
            }
        };
    }, [
        api
    ]); // Depende del hook de API
    // ===================================
    // RETORNO DEL HOOK
    // ===================================
    return {
        // Estado
        orders: state.orders,
        pagination: state.pagination,
        filters: state.filters,
        analytics: state.analytics,
        isLoading: state.isLoading,
        error: state.error,
        lastFetch: state.lastFetch,
        // Acciones
        fetchOrders,
        refreshOrders,
        updateFilters,
        clearError,
        retryLastRequest
    };
}
function useOrderDetailStrict(orderId) {
    const { toast } = (0, _usetoast.useToast)();
    const [order, setOrder] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const fetchOrder = (0, _react.useCallback)(async ()=>{
        if (!orderId) return;
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch(`/api/admin/orders/${orderId}`);
            const data = await response.json();
            const validatedResponse = toStrictOrdersResponse(data);
            if ((0, _apistrict.isStrictApiError)(validatedResponse)) {
                setError(validatedResponse.error);
                toast({
                    title: 'Error al cargar orden',
                    description: validatedResponse.error,
                    variant: 'destructive'
                });
            } else {
                // Para orden individual, extraer la primera orden
                const orderData = validatedResponse.data.orders[0] || null;
                setOrder(orderData);
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
            setError(errorMessage);
            toast({
                title: 'Error al cargar orden',
                description: errorMessage,
                variant: 'destructive'
            });
        } finally{
            setIsLoading(false);
        }
    }, [
        orderId,
        toast
    ]);
    (0, _react.useEffect)(()=>{
        fetchOrder();
    }, [
        fetchOrder
    ]);
    return {
        order,
        isLoading,
        error,
        refetch: fetchOrder
    };
} // ===================================
 // UTILIDADES EXPORTADAS
 // ===================================
 /**
 * Utilidades de cache movidas a useOrdersCache.ts
 * Estas funciones están disponibles a través del hook useOrdersCache
 */  // Las utilidades de cache ahora están disponibles a través del hook useOrdersCache:
 // - cache.clearCache()
 // - cache.getCacheStats()
 // - cache.getPendingRequest()
 // - cache.setPendingRequest()

//# sourceMappingURL=data:application/json;base64,