002e52bb3ec7343379ffe7e81197b625
// ===================================
// PINTEYA E-COMMERCE - INTEGRATION TESTS
// Pruebas de integración para OrderListEnterprise
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _OrderListEnterprise = require("../../components/admin/orders/OrderListEnterprise");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ===================================
// MOCKS
// ===================================
// Mock del fetch global
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
// Mock de toast
const mockToast = _globals.jest.fn();
_globals.jest.mock('@/hooks/use-toast', ()=>({
        useToast: ()=>({
                toast: mockToast
            })
    }));
// Mock de performance para monitoreo
const mockPerformanceNow = _globals.jest.fn();
Object.defineProperty(global, 'performance', {
    value: {
        now: mockPerformanceNow,
        memory: {
            usedJSHeapSize: 50 * 1024 * 1024 // 50MB
        }
    },
    writable: true
});
// Mock de localStorage
const mockLocalStorage = {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn()
};
Object.defineProperty(global, 'localStorage', {
    value: mockLocalStorage,
    writable: true
});
// Mock de console
const mockConsoleError = _globals.jest.spyOn(console, 'error').mockImplementation(()=>{});
const mockConsoleWarn = _globals.jest.spyOn(console, 'warn').mockImplementation(()=>{});
const mockConsoleLog = _globals.jest.spyOn(console, 'log').mockImplementation(()=>{});
// ===================================
// DATOS DE PRUEBA
// ===================================
const mockOrders = [
    {
        id: 'order-1',
        orderNumber: 'ORD-2024-001',
        status: 'pending',
        previousStatus: null,
        statusHistory: [
            {
                status: 'pending',
                timestamp: new Date().toISOString(),
                reason: 'Order created',
                userId: 'user-1'
            }
        ],
        customerId: 'customer-1',
        customerEmail: 'customer1@example.com',
        customerPhone: '+1234567890',
        items: [
            {
                id: 'item-1',
                productId: 'product-1',
                productName: 'Test Product 1',
                quantity: 2,
                unitPrice: 29.99,
                totalPrice: 59.98,
                sku: 'TEST-SKU-001'
            }
        ],
        subtotal: 59.98,
        taxAmount: 4.80,
        shippingAmount: 9.99,
        discountAmount: 0,
        totalAmount: 74.77,
        currency: 'USD',
        shippingAddress: {
            street: '123 Test St',
            city: 'Test City',
            state: 'TS',
            zipCode: '12345',
            country: 'US'
        },
        billingAddress: {
            street: '123 Test St',
            city: 'Test City',
            state: 'TS',
            zipCode: '12345',
            country: 'US'
        },
        paymentMethod: 'credit_card',
        paymentStatus: 'pending',
        shippingMethod: 'standard',
        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        notes: 'Test order notes',
        tags: [
            'test'
        ],
        metadata: {
            source: 'web'
        },
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    },
    {
        id: 'order-2',
        orderNumber: 'ORD-2024-002',
        status: 'processing',
        previousStatus: 'pending',
        statusHistory: [
            {
                status: 'pending',
                timestamp: new Date(Date.now() - 3600000).toISOString(),
                reason: 'Order created',
                userId: 'user-1'
            },
            {
                status: 'processing',
                timestamp: new Date().toISOString(),
                reason: 'Payment confirmed',
                userId: 'user-1'
            }
        ],
        customerId: 'customer-2',
        customerEmail: 'customer2@example.com',
        customerPhone: '+1234567891',
        items: [
            {
                id: 'item-2',
                productId: 'product-2',
                productName: 'Test Product 2',
                quantity: 1,
                unitPrice: 49.99,
                totalPrice: 49.99,
                sku: 'TEST-SKU-002'
            }
        ],
        subtotal: 49.99,
        taxAmount: 4.00,
        shippingAmount: 9.99,
        discountAmount: 5.00,
        totalAmount: 58.98,
        currency: 'USD',
        shippingAddress: {
            street: '456 Test Ave',
            city: 'Test City',
            state: 'TS',
            zipCode: '12346',
            country: 'US'
        },
        billingAddress: {
            street: '456 Test Ave',
            city: 'Test City',
            state: 'TS',
            zipCode: '12346',
            country: 'US'
        },
        paymentMethod: 'paypal',
        paymentStatus: 'paid',
        shippingMethod: 'express',
        estimatedDelivery: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
        notes: 'Express delivery requested',
        tags: [
            'express',
            'vip'
        ],
        metadata: {
            source: 'mobile',
            campaign: 'summer-sale'
        },
        createdAt: new Date(Date.now() - 3600000).toISOString(),
        updatedAt: new Date().toISOString()
    }
];
const mockApiResponse = {
    success: true,
    data: mockOrders,
    message: 'Orders retrieved successfully',
    timestamp: new Date().toISOString(),
    requestId: 'req-123',
    pagination: {
        page: 1,
        limit: 10,
        total: 2,
        totalPages: 1
    }
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockPerformanceNow.mockReturnValue(1000);
    mockLocalStorage.getItem.mockReturnValue(null);
    // Mock exitoso por defecto
    mockFetch.mockResolvedValue({
        ok: true,
        status: 200,
        json: async ()=>mockApiResponse
    });
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS DE INTEGRACIÓN
// ===================================
(0, _globals.describe)('OrderListEnterprise - Integración', ()=>{
    (0, _globals.describe)('Renderizado inicial', ()=>{
        (0, _globals.it)('debe renderizar correctamente con datos', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            // Verificar que se muestra el loading inicialmente
            (0, _globals.expect)(_react1.screen.getByText(/cargando/i)).toBeInTheDocument();
            // Esperar a que se carguen los datos
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-002')).toBeInTheDocument();
            });
            // Verificar que se muestran los estados correctos
            (0, _globals.expect)(_react1.screen.getByText('Pendiente')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Procesando')).toBeInTheDocument();
        });
        (0, _globals.it)('debe mostrar mensaje de error cuando falla la carga', async ()=>{
            mockFetch.mockRejectedValue(new Error('Network error'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: _globals.expect.stringContaining('Error'),
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('debe mostrar mensaje cuando no hay órdenes', async ()=>{
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>({
                        ...mockApiResponse,
                        data: [],
                        pagination: {
                            ...mockApiResponse.pagination,
                            total: 0
                        }
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText(/no se encontraron órdenes/i)).toBeInTheDocument();
            });
        });
    });
    (0, _globals.describe)('Sistema de filtros', ()=>{
        (0, _globals.it)('debe filtrar por estado correctamente', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            // Esperar a que se carguen los datos iniciales
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Aplicar filtro por estado
            const statusFilter = _react1.screen.getByLabelText(/estado/i);
            _react1.fireEvent.change(statusFilter, {
                target: {
                    value: 'pending'
                }
            });
            // Verificar que se hace la petición con el filtro
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('status=pending'), _globals.expect.any(Object));
            });
        });
        (0, _globals.it)('debe filtrar por rango de fechas', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Aplicar filtro de fecha
            const dateFromInput = _react1.screen.getByLabelText(/fecha desde/i);
            _react1.fireEvent.change(dateFromInput, {
                target: {
                    value: '2024-01-01'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('dateFrom=2024-01-01'), _globals.expect.any(Object));
            });
        });
        (0, _globals.it)('debe manejar errores en filtros', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Simular error en filtro
            mockFetch.mockRejectedValueOnce(new Error('Filter error'));
            const statusFilter = _react1.screen.getByLabelText(/estado/i);
            _react1.fireEvent.change(statusFilter, {
                target: {
                    value: 'invalid'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: _globals.expect.stringContaining('Error'),
                    variant: 'destructive'
                }));
            });
        });
    });
    (0, _globals.describe)('Sistema de paginación', ()=>{
        (0, _globals.it)('debe cambiar de página correctamente', async ()=>{
            // Mock con múltiples páginas
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>({
                        ...mockApiResponse,
                        pagination: {
                            page: 1,
                            limit: 10,
                            total: 25,
                            totalPages: 3
                        }
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Cambiar a página 2
            const nextPageButton = _react1.screen.getByLabelText(/página siguiente/i);
            _react1.fireEvent.click(nextPageButton);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('page=2'), _globals.expect.any(Object));
            });
        });
        (0, _globals.it)('debe manejar errores en paginación', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Simular error en cambio de página
            mockFetch.mockRejectedValueOnce(new Error('Pagination error'));
            const nextPageButton = _react1.screen.getByLabelText(/página siguiente/i);
            _react1.fireEvent.click(nextPageButton);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: _globals.expect.stringContaining('Error'),
                    variant: 'destructive'
                }));
            });
        });
    });
    (0, _globals.describe)('Selección de órdenes', ()=>{
        (0, _globals.it)('debe permitir seleccionar órdenes individuales', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Seleccionar primera orden
            const firstCheckbox = _react1.screen.getAllByRole('checkbox')[1]; // [0] es "select all"
            _react1.fireEvent.click(firstCheckbox);
            (0, _globals.expect)(firstCheckbox).toBeChecked();
        });
        (0, _globals.it)('debe permitir seleccionar todas las órdenes', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Seleccionar todas
            const selectAllCheckbox = _react1.screen.getAllByRole('checkbox')[0];
            _react1.fireEvent.click(selectAllCheckbox);
            // Verificar que todas las órdenes están seleccionadas
            const checkboxes = _react1.screen.getAllByRole('checkbox');
            checkboxes.slice(1).forEach((checkbox)=>{
                (0, _globals.expect)(checkbox).toBeChecked();
            });
        });
    });
    (0, _globals.describe)('Sistema de monitoreo', ()=>{
        (0, _globals.it)('debe trackear renders correctamente', async ()=>{
            mockPerformanceNow.mockReturnValueOnce(1000).mockReturnValueOnce(1010); // 10ms render
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Verificar que se está loggeando el monitoreo
            (0, _globals.expect)(mockConsoleLog).toHaveBeenCalled();
        });
        (0, _globals.it)('debe detectar renders lentos', async ()=>{
            mockPerformanceNow.mockReturnValueOnce(1000).mockReturnValueOnce(1100); // 100ms render (lento)
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Verificar que se detecta el render lento
            (0, _globals.expect)(mockConsoleWarn).toHaveBeenCalledWith(_globals.expect.stringContaining('Slow render detected'));
        });
        (0, _globals.it)('debe trackear errores en el monitoreo', async ()=>{
            mockFetch.mockRejectedValue(new Error('API Error'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalled();
            });
            // Verificar que el error se trackea en el monitoreo
            (0, _globals.expect)(mockConsoleError).toHaveBeenCalledWith(_globals.expect.stringContaining('Error tracked'));
        });
    });
    (0, _globals.describe)('Validación de tipos estricta', ()=>{
        (0, _globals.it)('debe manejar datos inválidos correctamente', async ()=>{
            const invalidResponse = {
                success: true,
                data: [
                    {
                        id: 'order-invalid'
                    }
                ],
                message: 'Success'
            };
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>invalidResponse
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                // Debería mostrar mensaje de error por datos inválidos
                (0, _globals.expect)(mockConsoleWarn).toHaveBeenCalledWith(_globals.expect.stringContaining('Invalid data'));
            });
        });
        (0, _globals.it)('debe validar estructura de respuesta API', async ()=>{
            const malformedResponse = {
                // Falta campo 'success'
                data: mockOrders
            };
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>malformedResponse
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockConsoleWarn).toHaveBeenCalledWith(_globals.expect.stringContaining('API response validation failed'));
            });
        });
    });
    (0, _globals.describe)('Acciones masivas', ()=>{
        (0, _globals.it)('debe permitir acciones en órdenes seleccionadas', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Seleccionar órdenes
            const checkboxes = _react1.screen.getAllByRole('checkbox');
            _react1.fireEvent.click(checkboxes[1]); // Seleccionar primera orden
            _react1.fireEvent.click(checkboxes[2]); // Seleccionar segunda orden
            // Verificar que aparecen las acciones masivas
            (0, _globals.expect)(_react1.screen.getByText(/acciones seleccionadas/i)).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Actualización en tiempo real', ()=>{
        (0, _globals.it)('debe refrescar datos automáticamente', async ()=>{
            _globals.jest.useFakeTimers();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            const initialCallCount = mockFetch.mock.calls.length;
            // Avanzar tiempo para trigger refresh automático
            (0, _react1.act)(()=>{
                _globals.jest.advanceTimersByTime(30000); // 30 segundos
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockFetch.mock.calls.length).toBeGreaterThan(initialCallCount);
            });
            _globals.jest.useRealTimers();
        });
    });
    (0, _globals.describe)('Responsive design', ()=>{
        (0, _globals.it)('debe adaptarse a pantallas móviles', async ()=>{
            // Simular viewport móvil
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
            });
            // Verificar que se muestra la vista móvil
            (0, _globals.expect)(_react1.screen.getByTestId('mobile-order-list')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,