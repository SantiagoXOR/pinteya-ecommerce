a91ae47917cccb83e7377e5ae716c162
// ===================================
// PINTEYA E-COMMERCE - HOOK PARA PRODUCTOS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProducts", {
    enumerable: true,
    get: function() {
        return useProducts;
    }
});
const _react = require("react");
const _products = require("../lib/api/products");
const _productAdapter = require("../lib/adapters/productAdapter");
function useProducts(options = {}) {
    const { initialFilters = {}, autoFetch = true } = options;
    // Referencias para evitar re-renders innecesarios
    const abortControllerRef = (0, _react.useRef)(null);
    const lastRequestRef = (0, _react.useRef)('');
    // DEBUG: Log básico para verificar que el hook se ejecuta (solo en desarrollo)
    if (process.env.NODE_ENV === 'development') {}
    const [state, setState] = (0, _react.useState)({
        products: [],
        loading: false,
        error: null,
        pagination: {
            page: 1,
            limit: 12,
            total: 0,
            totalPages: 0
        }
    });
    const [filters, setFilters] = (0, _react.useState)(initialFilters);
    /**
   * Obtiene productos desde la API con optimizaciones de performance
   */ const fetchProducts = (0, _react.useCallback)(async (newFilters)=>{
        const filtersToUse = newFilters || filters;
        try {
            setState((prev)=>({
                    ...prev,
                    loading: true,
                    error: null
                }));
            const response = await (0, _products.getProducts)(filtersToUse);
            if (response.success) {
                const adaptedProducts = (0, _productAdapter.adaptApiProductsToLegacy)(response.data);
                setState((prev)=>({
                        ...prev,
                        products: adaptedProducts,
                        loading: false,
                        pagination: response.pagination
                    }));
            } else {
                setState((prev)=>({
                        ...prev,
                        loading: false,
                        error: response.error || 'Error obteniendo productos'
                    }));
            }
        } catch (error) {
            setState((prev)=>({
                    ...prev,
                    loading: false,
                    error: error.message || 'Error inesperado'
                }));
        }
    }, [
        filters
    ]);
    /**
   * Actualiza los filtros y obtiene productos
   */ const updateFilters = (0, _react.useCallback)((newFilters)=>{
        const updatedFilters = {
            ...filters,
            ...newFilters
        };
        setFilters(updatedFilters);
        fetchProducts(updatedFilters);
    }, [
        filters,
        fetchProducts
    ]);
    /**
   * Cambia la página
   */ const changePage = (0, _react.useCallback)((page)=>{
        updateFilters({
            page
        });
    }, [
        updateFilters
    ]);
    /**
   * Cambia el límite de productos por página
   */ const changeLimit = (0, _react.useCallback)((limit)=>{
        updateFilters({
            limit,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Cambia el ordenamiento
   */ const changeSorting = (0, _react.useCallback)((sortBy, sortOrder)=>{
        updateFilters({
            sortBy,
            sortOrder,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Busca productos por término
   */ const searchProducts = (0, _react.useCallback)((searchTerm)=>{
        updateFilters({
            search: searchTerm,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Filtra por categoría
   */ const filterByCategory = (0, _react.useCallback)((category)=>{
        updateFilters({
            category,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Filtra por rango de precios
   */ const filterByPriceRange = (0, _react.useCallback)((priceMin, priceMax)=>{
        updateFilters({
            priceMin,
            priceMax,
            page: 1
        });
    }, [
        updateFilters
    ]);
    /**
   * Limpia todos los filtros
   */ const clearFilters = (0, _react.useCallback)(()=>{
        const clearedFilters = {
            page: 1,
            limit: filters.limit || 12,
            sortBy: 'created_at',
            sortOrder: 'desc'
        };
        setFilters(clearedFilters);
        fetchProducts(clearedFilters);
    }, [
        filters.limit,
        fetchProducts
    ]);
    /**
   * Refresca los productos
   */ const refresh = (0, _react.useCallback)(()=>{
        fetchProducts();
    }, [
        fetchProducts
    ]);
    // Auto-fetch al montar el componente
    (0, _react.useEffect)(()=>{
        if (autoFetch) {
            fetchProducts();
        }
    }, [
        autoFetch
    ]); // Removido fetchProducts de las dependencias para evitar bucles
    // Cleanup effect para cancelar requests pendientes
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
            }
        };
    }, []);
    // Memoized helpers para optimizar renders
    const helpers = (0, _react.useMemo)(()=>({
            hasProducts: state.products.length > 0,
            isEmpty: !state.loading && state.products.length === 0,
            hasError: !!state.error,
            hasNextPage: state.pagination.page < state.pagination.totalPages,
            hasPrevPage: state.pagination.page > 1
        }), [
        state.products.length,
        state.loading,
        state.error,
        state.pagination.page,
        state.pagination.totalPages
    ]);
    return {
        // Estado
        products: state.products,
        loading: state.loading,
        error: state.error,
        pagination: state.pagination,
        filters,
        // Acciones
        fetchProducts,
        updateFilters,
        changePage,
        changeLimit,
        changeSorting,
        searchProducts,
        filterByCategory,
        filterByPriceRange,
        clearFilters,
        refresh,
        // Helpers memoizados
        ...helpers
    };
}

//# sourceMappingURL=data:application/json;base64,