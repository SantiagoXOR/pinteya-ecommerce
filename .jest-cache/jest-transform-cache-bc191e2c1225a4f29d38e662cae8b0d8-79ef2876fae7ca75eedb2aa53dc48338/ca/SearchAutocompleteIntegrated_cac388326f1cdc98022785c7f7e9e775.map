{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ui\\SearchAutocompleteIntegrated.tsx"],"sourcesContent":["// ===================================\r\n// COMPONENTE: SearchAutocompleteIntegrated - Integraci√≥n completa con useSearch\r\n// ===================================\r\n\r\nimport React, { useCallback } from 'react';\r\nimport { SearchAutocomplete, SearchAutocompleteProps } from './search-autocomplete';\r\nimport { useSearchOptimized } from '@/hooks/useSearchOptimized';\r\n\r\nexport interface SearchAutocompleteIntegratedProps \r\n  extends Omit<SearchAutocompleteProps, 'query' | 'suggestions' | 'isLoading' | 'error' | 'searchWithDebounce' | 'onClear'> {\r\n  // Configuraci√≥n del hook useSearch\r\n  debounceMs?: number;\r\n  maxSuggestions?: number;\r\n  searchLimit?: number;\r\n  saveRecentSearches?: boolean;\r\n  \r\n  // Callbacks adicionales\r\n  onSearchExecuted?: (query: string, results: any[]) => void;\r\n  onSuggestionSelected?: (suggestion: any) => void;\r\n}\r\n\r\n/**\r\n * SearchAutocompleteIntegrated - Componente que integra SearchAutocomplete con useSearch\r\n * \r\n * Este componente proporciona una experiencia de b√∫squeda completa sin necesidad\r\n * de manejar manualmente el estado del hook useSearch.\r\n */\r\nexport const SearchAutocompleteIntegrated = React.memo(React.forwardRef<HTMLInputElement, SearchAutocompleteIntegratedProps>(\r\n  ({\r\n    debounceMs = 100,\r\n    maxSuggestions = 6,\r\n    searchLimit = 12,\r\n    saveRecentSearches = true,\r\n    onSearchExecuted,\r\n    onSuggestionSelected,\r\n    onSearch,\r\n    onSuggestionSelect,\r\n    ...props\r\n  }, ref) => {\r\n    \r\n    // Hook de b√∫squeda optimizado con TanStack Query\r\n    const {\r\n      query,\r\n      results,\r\n      suggestions,\r\n      isLoading,\r\n      error,\r\n      searchWithDebounce,\r\n      executeSearch,\r\n      selectSuggestion,\r\n      clearSearch,\r\n    } = useSearchOptimized({\r\n      debounceMs,\r\n      maxSuggestions,\r\n      searchLimit,\r\n      saveRecentSearches,\r\n      onSearch: (query, results) => {\r\n        onSearchExecuted?.(query, results);\r\n        onSearch?.(query);\r\n      },\r\n      onSuggestionSelect: (suggestion) => {\r\n        onSuggestionSelected?.(suggestion);\r\n        onSuggestionSelect?.(suggestion);\r\n      }\r\n    });\r\n\r\n    // Debugging del estado del hook\r\n    console.log('üîç SearchAutocompleteIntegrated: Hook state:', {\r\n      query,\r\n      suggestions: suggestions?.length || 0,\r\n      suggestionsDetailed: suggestions?.map(s => ({ type: s.type, title: s.title })) || [],\r\n      isLoading,\r\n      error,\r\n      results: results?.length || 0\r\n    });\r\n\r\n    // Manejar env√≠o de b√∫squeda\r\n    const handleSearch = (query: string) => {\r\n      executeSearch(query);\r\n    };\r\n\r\n    // Manejar selecci√≥n de sugerencia\r\n    const handleSuggestionSelect = (suggestion: any) => {\r\n      selectSuggestion(suggestion);\r\n    };\r\n\r\n    // Manejar limpieza\r\n    const handleClear = () => {\r\n      clearSearch();\r\n    };\r\n\r\n    return (\r\n      <SearchAutocomplete\r\n        ref={ref}\r\n        {...props}\r\n        // Estado del hook optimizado\r\n        query={query}\r\n        suggestions={suggestions}\r\n        isLoading={isLoading}\r\n        error={error}\r\n        // Callbacks integrados\r\n        onSearch={handleSearch}\r\n        onSuggestionSelect={handleSuggestionSelect}\r\n        searchWithDebounce={searchWithDebounce}\r\n        onClear={handleClear}\r\n      />\r\n    );\r\n  }\r\n));\r\n\r\nSearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated';\r\n\r\nexport default SearchAutocompleteIntegrated;\r\n"],"names":["SearchAutocompleteIntegrated","React","memo","forwardRef","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","onSearchExecuted","onSuggestionSelected","onSearch","onSuggestionSelect","props","ref","query","results","suggestions","isLoading","error","searchWithDebounce","executeSearch","selectSuggestion","clearSearch","useSearchOptimized","suggestion","console","log","length","suggestionsDetailed","map","s","type","title","handleSearch","handleSuggestionSelect","handleClear","SearchAutocomplete","onClear","displayName"],"mappings":"AAAA,sCAAsC;AACtC,gFAAgF;AAChF,sCAAsC;;;;;;;;;;;;QAyBzBA;eAAAA;;QAqFb;eAAA;;;;8DA5GmC;oCACyB;oCACzB;;;;;;AAqB5B,MAAMA,6CAA+BC,cAAK,CAACC,IAAI,eAACD,cAAK,CAACE,UAAU,CACrE,CAAC,EACCC,aAAa,GAAG,EAChBC,iBAAiB,CAAC,EAClBC,cAAc,EAAE,EAChBC,qBAAqB,IAAI,EACzBC,gBAAgB,EAChBC,oBAAoB,EACpBC,QAAQ,EACRC,kBAAkB,EAClB,GAAGC,OACJ,EAAEC;IAED,iDAAiD;IACjD,MAAM,EACJC,KAAK,EACLC,OAAO,EACPC,WAAW,EACXC,SAAS,EACTC,KAAK,EACLC,kBAAkB,EAClBC,aAAa,EACbC,gBAAgB,EAChBC,WAAW,EACZ,GAAGC,IAAAA,sCAAkB,EAAC;QACrBnB;QACAC;QACAC;QACAC;QACAG,UAAU,CAACI,OAAOC;YAChBP,mBAAmBM,OAAOC;YAC1BL,WAAWI;QACb;QACAH,oBAAoB,CAACa;YACnBf,uBAAuBe;YACvBb,qBAAqBa;QACvB;IACF;IAEA,gCAAgC;IAChCC,QAAQC,GAAG,CAAC,gDAAgD;QAC1DZ;QACAE,aAAaA,aAAaW,UAAU;QACpCC,qBAAqBZ,aAAaa,IAAIC,CAAAA,IAAM,CAAA;gBAAEC,MAAMD,EAAEC,IAAI;gBAAEC,OAAOF,EAAEE,KAAK;YAAC,CAAA,MAAO,EAAE;QACpFf;QACAC;QACAH,SAASA,SAASY,UAAU;IAC9B;IAEA,4BAA4B;IAC5B,MAAMM,eAAe,CAACnB;QACpBM,cAAcN;IAChB;IAEA,kCAAkC;IAClC,MAAMoB,yBAAyB,CAACV;QAC9BH,iBAAiBG;IACnB;IAEA,mBAAmB;IACnB,MAAMW,cAAc;QAClBb;IACF;IAEA,qBACE,qBAACc,sCAAkB;QACjBvB,KAAKA;QACJ,GAAGD,KAAK;QACT,6BAA6B;QAC7BE,OAAOA;QACPE,aAAaA;QACbC,WAAWA;QACXC,OAAOA;QACP,uBAAuB;QACvBR,UAAUuB;QACVtB,oBAAoBuB;QACpBf,oBAAoBA;QACpBkB,SAASF;;AAGf;AAGFnC,6BAA6BsC,WAAW,GAAG;MAE3C,WAAetC"}