668bb23930fe02eba2ca39665f1d0a9c
/**
 * Tests para las validaciones de seguridad avanzadas
 * Verifica permisos granulares y contexto de seguridad
 */ "use strict";
// NextAuth se mockea automáticamente via moduleNameMapper
// Mock de Supabase
jest.mock('@/lib/supabase', ()=>({
        supabaseAdmin: {
            from: jest.fn(()=>({
                    insert: jest.fn(()=>({
                            error: null
                        })),
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    gte: jest.fn(()=>({
                                            not: jest.fn(()=>({
                                                    data: [],
                                                    error: null
                                                }))
                                        }))
                                }))
                        }))
                }))
        }
    }));
jest.mock('@/auth', ()=>({
        auth: mockAuth
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _securityvalidations = require("../lib/auth/security-validations");
// Mock NextAuth
const mockAuth = jest.fn();
describe('Validaciones de Seguridad', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('getPermissionsByRole', ()=>{
        it('debe retornar permisos completos para admin', ()=>{
            const permissions = (0, _securityvalidations.getPermissionsByRole)('admin');
            // Patrón 2: Expectativas específicas para la implementación real
            expect(Array.isArray(permissions)).toBe(true);
            expect(permissions).toContain('delete:products');
            expect(permissions).toContain('write:users');
            expect(permissions).toContain('admin:dashboard');
        });
        it('debe retornar permisos limitados para moderator', ()=>{
            const permissions = (0, _securityvalidations.getPermissionsByRole)('moderator');
            // Patrón 2: Expectativas específicas para la implementación real
            expect(Array.isArray(permissions)).toBe(true);
            expect(permissions).toContain('write:products');
            expect(permissions).toContain('moderate:content');
            expect(permissions).not.toContain('delete:users');
        });
        it('debe retornar permisos básicos para manager', ()=>{
            const permissions = (0, _securityvalidations.getPermissionsByRole)('manager');
            expect(permissions.isAdmin).toBe(false);
            expect(permissions.isModerator).toBe(false);
            expect(permissions.canDeleteProducts).toBe(false);
            expect(permissions.canAccessAdmin).toBe(true);
            expect(permissions.canViewAnalytics).toBe(true);
        });
        it('debe retornar sin permisos para user', ()=>{
            const permissions = (0, _securityvalidations.getPermissionsByRole)('user');
            expect(permissions.isAdmin).toBe(false);
            expect(permissions.canAccessAdmin).toBe(false);
            expect(permissions.canReadProducts).toBe(false);
        });
        it('debe retornar permisos de user para rol desconocido', ()=>{
            const permissions = (0, _securityvalidations.getPermissionsByRole)('unknown_role');
            expect(permissions.isAdmin).toBe(false);
            expect(permissions.canAccessAdmin).toBe(false);
        });
    });
    describe('isValidAdminRole', ()=>{
        it('debe validar roles administrativos', ()=>{
            expect(isValidAdminRole('admin')).toBe(true);
            expect(isValidAdminRole('moderator')).toBe(true);
            expect(isValidAdminRole('manager')).toBe(true);
        });
        it('debe rechazar roles no administrativos', ()=>{
            expect(isValidAdminRole('user')).toBe(false);
            expect(isValidAdminRole('guest')).toBe(false);
            expect(isValidAdminRole('')).toBe(false);
        });
    });
    describe('hasPermission', ()=>{
        it('debe verificar permisos individuales correctamente', ()=>{
            const adminPermissions = (0, _securityvalidations.getPermissionsByRole)('admin');
            const userPermissions = (0, _securityvalidations.getPermissionsByRole)('user');
            expect((0, _securityvalidations.hasPermission)(adminPermissions, 'canDeleteProducts')).toBe(true);
            expect((0, _securityvalidations.hasPermission)(userPermissions, 'canDeleteProducts')).toBe(false);
        });
    });
    describe('hasAnyPermission', ()=>{
        it('debe verificar que al menos un permiso esté presente', ()=>{
            const moderatorPermissions = (0, _securityvalidations.getPermissionsByRole)('moderator');
            expect((0, _securityvalidations.hasAnyPermission)(moderatorPermissions, [
                'canDeleteProducts',
                'canWriteProducts'
            ])).toBe(true);
            expect((0, _securityvalidations.hasAnyPermission)(moderatorPermissions, [
                'canDeleteProducts',
                'canManageUsers'
            ])).toBe(false);
        });
    });
    describe('hasAllPermissions', ()=>{
        it('debe verificar que todos los permisos estén presentes', ()=>{
            const adminPermissions = (0, _securityvalidations.getPermissionsByRole)('admin');
            const moderatorPermissions = (0, _securityvalidations.getPermissionsByRole)('moderator');
            expect((0, _securityvalidations.hasAllPermissions)(adminPermissions, [
                'canReadProducts',
                'canWriteProducts'
            ])).toBe(true);
            expect((0, _securityvalidations.hasAllPermissions)(moderatorPermissions, [
                'canReadProducts',
                'canDeleteProducts'
            ])).toBe(false);
        });
    });
    describe('getSecurityContext', ()=>{
        it('debe obtener contexto de seguridad completo', async ()=>{
            const mockUser = {
                id: 'user_123',
                publicMetadata: {
                    role: 'admin',
                    department: 'IT',
                    isActive: true
                },
                emailAddresses: [
                    {
                        verification: {
                            status: 'verified'
                        }
                    }
                ]
            };
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(mockUser)
                }
            });
            const mockRequest = {
                headers: {
                    get: jest.fn().mockImplementation((key)=>{
                        if (key === 'x-forwarded-for') return '192.168.1.1';
                        if (key === 'user-agent') return 'Test Browser';
                        return null;
                    })
                }
            };
            const context = await getSecurityContext('user_123', mockRequest);
            expect(context).toBeDefined();
            expect(context?.userId).toBe('user_123');
            expect(context?.userRole).toBe('admin');
            expect(context?.permissions.isAdmin).toBe(true);
            expect(context?.metadata.emailVerified).toBe(true);
            expect(context?.ipAddress).toBe('192.168.1.1');
            expect(context?.userAgent).toBe('Test Browser');
        });
        it('debe manejar usuario no encontrado', async ()=>{
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(null)
                }
            });
            const context = await getSecurityContext('user_not_found');
            expect(context).toBeNull();
        });
        it('debe manejar errores de Clerk', async ()=>{
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockRejectedValue(new Error('Clerk error'))
                }
            });
            const context = await getSecurityContext('user_error');
            expect(context).toBeNull();
        });
    });
    describe('validateSecurityContext', ()=>{
        beforeEach(()=>{
            const mockUser = {
                id: 'user_123',
                publicMetadata: {
                    role: 'admin',
                    isActive: true
                },
                emailAddresses: [
                    {
                        verification: {
                            status: 'verified'
                        }
                    }
                ]
            };
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(mockUser)
                }
            });
        });
        it('debe validar contexto exitosamente para admin', async ()=>{
            const result = await validateSecurityContext('user_123', 'PRODUCT_DELETE', [
                'canDeleteProducts'
            ]);
            expect(result.valid).toBe(true);
            expect(result.context).toBeDefined();
            expect(result.context?.permissions.canDeleteProducts).toBe(true);
        });
        it('debe rechazar permisos insuficientes', async ()=>{
            const mockUser = {
                id: 'user_123',
                publicMetadata: {
                    role: 'user',
                    isActive: true
                },
                emailAddresses: [
                    {
                        verification: {
                            status: 'verified'
                        }
                    }
                ]
            };
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(mockUser)
                }
            });
            const result = await validateSecurityContext('user_123', 'PRODUCT_DELETE', [
                'canDeleteProducts'
            ]);
            expect(result.valid).toBe(false);
            expect(result.code).toBe('INSUFFICIENT_PERMISSIONS');
            expect(result.severity).toBe('high');
        });
        it('debe rechazar usuario inactivo', async ()=>{
            const mockUser = {
                id: 'user_123',
                publicMetadata: {
                    role: 'admin',
                    isActive: false
                },
                emailAddresses: [
                    {
                        verification: {
                            status: 'verified'
                        }
                    }
                ]
            };
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(mockUser)
                }
            });
            const result = await validateSecurityContext('user_123', 'PRODUCT_READ', [
                'canReadProducts'
            ]);
            expect(result.valid).toBe(false);
            expect(result.code).toBe('USER_INACTIVE');
            expect(result.severity).toBe('medium');
        });
    });
    describe('validateProductPermissions', ()=>{
        beforeEach(()=>{
            const mockUser = {
                id: 'user_123',
                publicMetadata: {
                    role: 'admin',
                    isActive: true
                },
                emailAddresses: [
                    {
                        verification: {
                            status: 'verified'
                        }
                    }
                ]
            };
            mockClerkClient.mockReturnValue({
                users: {
                    getUser: jest.fn().mockResolvedValue(mockUser)
                }
            });
        });
        it('debe validar permisos de lectura', async ()=>{
            const result = await validateProductPermissions('user_123', 'read');
            expect(result.valid).toBe(true);
        });
        it('debe validar permisos de creación', async ()=>{
            const result = await validateProductPermissions('user_123', 'create');
            expect(result.valid).toBe(true);
        });
        it('debe validar permisos de eliminación', async ()=>{
            const result = await validateProductPermissions('user_123', 'delete');
            expect(result.valid).toBe(true);
        });
    });
    describe('withSecurityValidation wrapper', ()=>{
        it('debe crear wrapper funcional', ()=>{
            const mockHandler = jest.fn();
            const wrappedHandler = withSecurityValidation([
                'canReadProducts'
            ], 'PRODUCT_READ')(mockHandler);
            expect(typeof wrappedHandler).toBe('function');
        });
        it('debe rechazar request sin userId', async ()=>{
            const mockHandler = jest.fn();
            const wrappedHandler = withSecurityValidation([
                'canReadProducts'
            ], 'PRODUCT_READ')(mockHandler);
            const mockRequest = {
                headers: {
                    get: jest.fn().mockReturnValue(null)
                }
            };
            const mockResponse = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };
            await wrappedHandler(mockRequest, mockResponse);
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                error: 'Usuario no autenticado',
                code: 'AUTH_REQUIRED'
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,