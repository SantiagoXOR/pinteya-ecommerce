{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\admin\\orders.test.js"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ORDERS API TESTS\n// ===================================\n\nimport { GET, POST } from '@/app/api/admin/orders/route';\nimport { \n  createMockSupabaseAdmin,\n  createMockClerkAuth,\n  createMockRateLimiter,\n  createMockLogger,\n  createMockMetricsCollector,\n  mockOrders,\n  mockOrderItems,\n  resetAllMocks\n} from '../../setup/orders-mocks';\n\n// ===================================\n// SETUP MOCKS\n// ===================================\n\n// Mock Next.js\njest.mock('next/server', () => ({\n  NextRequest: jest.fn(),\n  NextResponse: {\n    json: jest.fn((data, options) => ({\n      json: () => Promise.resolve(data),\n      status: options?.status || 200,\n      headers: new Map()\n    }))\n  }\n}));\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: createMockSupabaseAdmin()\n}));\n\n// Mock Clerk\nconst { mockAuth, mockCurrentUser } = createMockClerkAuth(true);\njest.mock('@clerk/nextjs/server', () => ({\n  auth: mockAuth,\n  currentUser: mockCurrentUser\n}));\n\n// Mock Rate Limiter\nconst { mockCheckRateLimit, mockAddRateLimitHeaders } = createMockRateLimiter();\njest.mock('@/lib/rate-limiter', () => ({\n  checkRateLimit: mockCheckRateLimit,\n  addRateLimitHeaders: mockAddRateLimitHeaders,\n  RATE_LIMIT_CONFIGS: {\n    admin: { requests: 100, window: 3600000 }\n  }\n}));\n\n// Mock Logger\nconst mockLogger = createMockLogger();\njest.mock('@/lib/logger', () => ({\n  logger: mockLogger,\n  LogLevel: { INFO: 'info', ERROR: 'error', WARN: 'warn' },\n  LogCategory: { API: 'api', DATABASE: 'database', AUTH: 'auth' }\n}));\n\n// Mock Metrics\nconst mockMetricsCollector = createMockMetricsCollector();\njest.mock('@/lib/metrics', () => ({\n  metricsCollector: mockMetricsCollector\n}));\n\n// Mock Zod\njest.mock('zod', () => ({\n  z: {\n    object: jest.fn().mockReturnValue({\n      safeParse: jest.fn().mockReturnValue({\n        success: true,\n        data: {\n          page: 1,\n          limit: 20,\n          sort_by: 'created_at',\n          sort_order: 'desc'\n        }\n      })\n    }),\n    coerce: {\n      number: jest.fn().mockReturnValue({\n        min: jest.fn().mockReturnThis(),\n        max: jest.fn().mockReturnThis(),\n        default: jest.fn().mockReturnThis()\n      })\n    },\n    string: jest.fn().mockReturnValue({\n      optional: jest.fn().mockReturnThis(),\n      min: jest.fn().mockReturnThis(),\n      max: jest.fn().mockReturnThis(),\n      uuid: jest.fn().mockReturnThis()\n    }),\n    enum: jest.fn().mockReturnValue({\n      default: jest.fn().mockReturnThis()\n    }),\n    array: jest.fn().mockReturnValue({\n      min: jest.fn().mockReturnThis()\n    }),\n    number: jest.fn().mockReturnValue({\n      min: jest.fn().mockReturnThis(),\n      max: jest.fn().mockReturnThis()\n    })\n  }\n}));\n\n// ===================================\n// TESTS GET /api/admin/orders\n// ===================================\n\ndescribe('GET /api/admin/orders', () => {\n  beforeEach(() => {\n    resetAllMocks();\n  });\n\n  test('should return orders list successfully', async () => {\n    // Arrange\n    const mockRequest = {\n      url: 'http://localhost:3000/api/admin/orders?page=1&limit=20'\n    };\n\n    // Act\n    const response = await GET(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(200);\n    expect(data.success).toBe(true);\n    expect(data.data.orders).toEqual(mockOrders);\n    expect(data.data.pagination).toBeDefined();\n    expect(data.data.pagination.page).toBe(1);\n    expect(data.data.pagination.limit).toBe(20);\n    expect(data.data.pagination.total).toBe(mockOrders.length);\n\n    // Verify mocks were called\n    expect(mockAuth).toHaveBeenCalled();\n    expect(mockCurrentUser).toHaveBeenCalled();\n    expect(mockCheckRateLimit).toHaveBeenCalled();\n    expect(mockMetricsCollector.recordApiCall).toHaveBeenCalledWith(\n      'admin-orders-list',\n      expect.any(Number),\n      200\n    );\n  });\n\n  test('should handle authentication failure', async () => {\n    // Arrange\n    mockAuth.mockResolvedValueOnce({ userId: null });\n    const mockRequest = {\n      url: 'http://localhost:3000/api/admin/orders'\n    };\n\n    // Act\n    const response = await GET(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(401);\n    expect(data.error).toBe('Usuario no autenticado');\n  });\n\n  test('should handle non-admin user', async () => {\n    // Arrange\n    mockCurrentUser.mockResolvedValueOnce({\n      emailAddresses: [{ emailAddress: 'user@example.com' }]\n    });\n    const mockRequest = {\n      url: 'http://localhost:3000/api/admin/orders'\n    };\n\n    // Act\n    const response = await GET(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(403);\n    expect(data.error).toBe('Acceso denegado - Se requieren permisos de administrador');\n  });\n\n  test('should handle rate limiting', async () => {\n    // Arrange\n    mockCheckRateLimit.mockResolvedValueOnce({\n      success: false,\n      remaining: 0,\n      reset: Date.now() + 3600000\n    });\n    const mockRequest = {\n      url: 'http://localhost:3000/api/admin/orders'\n    };\n\n    // Act\n    const response = await GET(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(429);\n    expect(data.error).toBe('Demasiadas solicitudes');\n    expect(mockAddRateLimitHeaders).toHaveBeenCalled();\n  });\n\n  test('should handle filters correctly', async () => {\n    // Arrange\n    const mockRequest = {\n      url: 'http://localhost:3000/api/admin/orders?status=pending&search=test&page=2'\n    };\n\n    // Act\n    const response = await GET(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(200);\n    expect(data.success).toBe(true);\n    expect(data.data.filters).toBeDefined();\n  });\n\n  test('should handle database errors', async () => {\n    // Arrange\n    const mockSupabase = require('@/lib/supabase').supabaseAdmin;\n    mockSupabase.from().select().range.mockImplementationOnce(() => \n      Promise.resolve({ data: null, error: { message: 'Database error' } })\n    );\n    \n    const mockRequest = {\n      url: 'http://localhost:3000/api/admin/orders'\n    };\n\n    // Act\n    const response = await GET(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(500);\n    expect(data.error).toBe('Error al obtener órdenes');\n    expect(mockLogger.log).toHaveBeenCalledWith(\n      'error',\n      'database',\n      'Error al obtener órdenes admin',\n      expect.any(Object)\n    );\n  });\n});\n\n// ===================================\n// TESTS POST /api/admin/orders\n// ===================================\n\ndescribe('POST /api/admin/orders', () => {\n  beforeEach(() => {\n    resetAllMocks();\n  });\n\n  test('should create order successfully', async () => {\n    // Arrange\n    const orderData = {\n      user_id: 'test-user-id',\n      items: [\n        {\n          product_id: 1,\n          quantity: 2,\n          unit_price: 15000\n        }\n      ],\n      shipping_address: {\n        street_name: 'Av. Corrientes',\n        street_number: '1234',\n        zip_code: '1000',\n        city_name: 'Buenos Aires',\n        state_name: 'CABA'\n      },\n      notes: 'Test order'\n    };\n\n    const mockRequest = {\n      json: () => Promise.resolve(orderData)\n    };\n\n    // Act\n    const response = await POST(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(201);\n    expect(data.success).toBe(true);\n    expect(data.data).toBeDefined();\n    expect(data.data.order_number).toMatch(/^ORD-\\d+-[A-Z0-9]+$/);\n\n    // Verify database calls\n    const mockSupabase = require('@/lib/supabase').supabaseAdmin;\n    expect(mockSupabase.from).toHaveBeenCalledWith('orders');\n    expect(mockSupabase.from).toHaveBeenCalledWith('order_items');\n\n    // Verify metrics\n    expect(mockMetricsCollector.recordApiCall).toHaveBeenCalledWith(\n      'admin-orders-create',\n      expect.any(Number),\n      201\n    );\n  });\n\n  test('should handle validation errors', async () => {\n    // Arrange\n    const invalidOrderData = {\n      user_id: 'invalid-uuid',\n      items: [] // Empty items array should fail validation\n    };\n\n    // Mock Zod validation failure\n    const mockZod = require('zod');\n    mockZod.z.object().safeParse.mockReturnValueOnce({\n      success: false,\n      error: {\n        errors: [\n          { message: 'Invalid UUID', path: ['user_id'] },\n          { message: 'At least one item required', path: ['items'] }\n        ]\n      }\n    });\n\n    const mockRequest = {\n      json: () => Promise.resolve(invalidOrderData)\n    };\n\n    // Act\n    const response = await POST(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(400);\n    expect(data.error).toBe('Datos de orden inválidos');\n    expect(data.details).toBeDefined();\n  });\n\n  test('should handle order creation database error', async () => {\n    // Arrange\n    const orderData = {\n      user_id: 'test-user-id',\n      items: [{ product_id: 1, quantity: 1, unit_price: 15000 }]\n    };\n\n    const mockSupabase = require('@/lib/supabase').supabaseAdmin;\n    mockSupabase.from().insert().select().single.mockImplementationOnce(() => \n      Promise.resolve({ data: null, error: { message: 'Insert failed' } })\n    );\n\n    const mockRequest = {\n      json: () => Promise.resolve(orderData)\n    };\n\n    // Act\n    const response = await POST(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(500);\n    expect(data.error).toBe('Error al crear orden');\n  });\n\n  test('should handle order items creation error with rollback', async () => {\n    // Arrange\n    const orderData = {\n      user_id: 'test-user-id',\n      items: [{ product_id: 1, quantity: 1, unit_price: 15000 }]\n    };\n\n    const mockSupabase = require('@/lib/supabase').supabaseAdmin;\n    \n    // Order creation succeeds\n    mockSupabase.from().insert().select().single.mockImplementationOnce(() => \n      Promise.resolve({ data: { id: 'new-order-id' }, error: null })\n    );\n    \n    // Order items creation fails\n    mockSupabase.from().insert.mockImplementationOnce(() => \n      Promise.resolve({ data: null, error: { message: 'Items insert failed' } })\n    );\n\n    const mockRequest = {\n      json: () => Promise.resolve(orderData)\n    };\n\n    // Act\n    const response = await POST(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(500);\n    expect(data.error).toBe('Error al crear items de orden');\n    \n    // Verify rollback was attempted\n    expect(mockSupabase.from).toHaveBeenCalledWith('orders');\n  });\n\n  test('should calculate total amount correctly', async () => {\n    // Arrange\n    const orderData = {\n      user_id: 'test-user-id',\n      items: [\n        { product_id: 1, quantity: 2, unit_price: 15000 }, // 30000\n        { product_id: 2, quantity: 1, unit_price: 2500 }   // 2500\n      ]\n      // Total should be 32500\n    };\n\n    const mockRequest = {\n      json: () => Promise.resolve(orderData)\n    };\n\n    // Act\n    const response = await POST(mockRequest);\n    const data = await response.json();\n\n    // Assert\n    expect(response.status).toBe(201);\n    expect(data.success).toBe(true);\n    \n    // Verify total calculation in the insert call\n    const mockSupabase = require('@/lib/supabase').supabaseAdmin;\n    const insertCall = mockSupabase.from().insert.mock.calls[0][0];\n    expect(insertCall.total_amount).toBe(32500);\n  });\n});\n\n// ===================================\n// INTEGRATION TESTS\n// ===================================\n\ndescribe('Orders API Integration', () => {\n  beforeEach(() => {\n    resetAllMocks();\n  });\n\n  test('should handle complete order lifecycle', async () => {\n    // Test creating an order and then retrieving it\n    \n    // 1. Create order\n    const orderData = {\n      user_id: 'test-user-id',\n      items: [{ product_id: 1, quantity: 1, unit_price: 15000 }]\n    };\n\n    const createRequest = {\n      json: () => Promise.resolve(orderData)\n    };\n\n    const createResponse = await POST(createRequest);\n    const createData = await createResponse.json();\n\n    expect(createResponse.status).toBe(201);\n    expect(createData.success).toBe(true);\n\n    // 2. Retrieve orders list\n    const getRequest = {\n      url: 'http://localhost:3000/api/admin/orders'\n    };\n\n    const getResponse = await GET(getRequest);\n    const getData = await getResponse.json();\n\n    expect(getResponse.status).toBe(200);\n    expect(getData.success).toBe(true);\n    expect(getData.data.orders).toBeDefined();\n  });\n\n  test('should maintain data consistency across operations', async () => {\n    // Verify that all related data is properly linked\n    const mockRequest = {\n      url: 'http://localhost:3000/api/admin/orders'\n    };\n\n    const response = await GET(mockRequest);\n    const data = await response.json();\n\n    expect(response.status).toBe(200);\n    \n    // Verify order structure\n    const order = data.data.orders[0];\n    expect(order.id).toBeDefined();\n    expect(order.order_number).toBeDefined();\n    expect(order.user_profiles).toBeDefined();\n    expect(order.order_items).toBeDefined();\n    expect(Array.isArray(order.order_items)).toBe(true);\n    \n    // Verify order items have product data\n    if (order.order_items.length > 0) {\n      expect(order.order_items[0].products).toBeDefined();\n    }\n  });\n});\n"],"names":["jest","mock","NextRequest","fn","NextResponse","json","data","options","Promise","resolve","status","headers","Map","supabaseAdmin","createMockSupabaseAdmin","auth","mockAuth","currentUser","mockCurrentUser","checkRateLimit","mockCheckRateLimit","addRateLimitHeaders","mockAddRateLimitHeaders","RATE_LIMIT_CONFIGS","admin","requests","window","logger","mockLogger","LogLevel","INFO","ERROR","WARN","LogCategory","API","DATABASE","AUTH","metricsCollector","mockMetricsCollector","z","object","mockReturnValue","safeParse","success","page","limit","sort_by","sort_order","coerce","number","min","mockReturnThis","max","default","string","optional","uuid","enum","array","createMockClerkAuth","createMockRateLimiter","createMockLogger","createMockMetricsCollector","describe","beforeEach","resetAllMocks","test","mockRequest","url","response","GET","expect","toBe","orders","toEqual","mockOrders","pagination","toBeDefined","total","length","toHaveBeenCalled","recordApiCall","toHaveBeenCalledWith","any","Number","mockResolvedValueOnce","userId","error","emailAddresses","emailAddress","remaining","reset","Date","now","filters","mockSupabase","require","from","select","range","mockImplementationOnce","message","log","Object","orderData","user_id","items","product_id","quantity","unit_price","shipping_address","street_name","street_number","zip_code","city_name","state_name","notes","POST","order_number","toMatch","invalidOrderData","mockZod","mockReturnValueOnce","errors","path","details","insert","single","id","insertCall","calls","total_amount","createRequest","createResponse","createData","getRequest","getResponse","getData","order","user_profiles","order_items","Array","isArray","products"],"mappings":"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"}