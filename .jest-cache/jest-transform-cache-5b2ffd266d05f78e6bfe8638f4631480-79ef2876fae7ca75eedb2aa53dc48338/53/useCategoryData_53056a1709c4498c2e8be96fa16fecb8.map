{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCategoryData.ts"],"sourcesContent":["/**\n * useCategoryData Hook\n * Manages category data fetching, caching, and state\n * Pinteya E-commerce - Enterprise-ready implementation\n */\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport type { Category, UseCategoryDataReturn } from '@/types/categories';\n\n/**\n * Configuration options for the category data hook\n */\ninterface UseCategoryDataOptions {\n  /** Whether to fetch data immediately on mount */\n  autoFetch?: boolean;\n  /** Cache duration in milliseconds */\n  cacheDuration?: number;\n  /** Whether to enable background refresh */\n  enableBackgroundRefresh?: boolean;\n  /** Refresh interval in milliseconds */\n  refreshInterval?: number;\n  /** Maximum number of categories to fetch */\n  maxCategories?: number;\n  /** Whether to enable analytics tracking */\n  enableAnalytics?: boolean;\n  /** Fallback categories if API fails */\n  fallbackCategories?: Category[];\n  /** API endpoint for categories */\n  apiEndpoint?: string;\n}\n\n/**\n * Cache interface for storing category data\n */\ninterface CategoryCache {\n  data: Category[];\n  timestamp: number;\n  expiresAt: number;\n}\n\n/**\n * In-memory cache for category data\n */\nconst categoryCache = new Map<string, CategoryCache>();\n\n/**\n * Default categories data (fallback) - ELIMINADO\n * DATOS HARDCODEADOS ELIMINADOS - Ahora usa solo API real de Supabase\n * Las categorías se obtienen dinámicamente desde /api/categories\n */\nconst DEFAULT_CATEGORIES: Category[] = [];\n\n/**\n * Custom hook for managing category data\n * \n * Features:\n * - Data fetching with caching\n * - Background refresh\n * - Error handling and fallbacks\n * - Performance optimization\n * - Analytics tracking\n * \n * @param options Configuration options\n * @returns Category data state and actions\n */\nexport const useCategoryData = (\n  options: UseCategoryDataOptions = {}\n): UseCategoryDataReturn => {\n  const {\n    autoFetch = true,\n    cacheDuration = 5 * 60 * 1000, // 5 minutes\n    enableBackgroundRefresh = true,\n    refreshInterval = 30 * 60 * 1000, // 30 minutes\n    maxCategories = 20,\n    enableAnalytics = true,\n    fallbackCategories = [], // Sin fallback - usar solo datos de API\n    apiEndpoint = '/api/categories',\n  } = options;\n\n  const [categories, setCategories] = useState<Category[]>(fallbackCategories);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Generate cache key based on options\n   */\n  const cacheKey = useMemo(() => {\n    return `categories_${maxCategories}_${apiEndpoint}`;\n  }, [maxCategories, apiEndpoint]);\n\n  /**\n   * Check if cached data is valid\n   */\n  const isCacheValid = useCallback((cache: CategoryCache): boolean => {\n    return Date.now() < cache.expiresAt;\n  }, []);\n\n  /**\n   * Get data from cache if valid\n   */\n  const getCachedData = useCallback((): Category[] | null => {\n    const cached = categoryCache.get(cacheKey);\n    if (cached && isCacheValid(cached)) {\n      return cached.data;\n    }\n    return null;\n  }, [cacheKey, isCacheValid]);\n\n  /**\n   * Store data in cache\n   */\n  const setCachedData = useCallback((data: Category[]) => {\n    const now = Date.now();\n    categoryCache.set(cacheKey, {\n      data,\n      timestamp: now,\n      expiresAt: now + cacheDuration,\n    });\n  }, [cacheKey, cacheDuration]);\n\n  /**\n   * Track analytics event\n   */\n  const trackAnalytics = useCallback((event: string, data?: any) => {\n    if (!enableAnalytics) return;\n\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'category_data', {\n        event_category: 'data',\n        event_label: event,\n        custom_parameters: data,\n      });\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n    }\n  }, [enableAnalytics]);\n\n  /**\n   * Fetch categories from API\n   */\n  const fetchCategories = useCallback(async (): Promise<Category[]> => {\n    try {\n      const response = await fetch(apiEndpoint);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      \n      // Handle different API response formats\n      let categoriesData: Category[];\n      if (Array.isArray(result)) {\n        categoriesData = result;\n      } else if (result.data && Array.isArray(result.data)) {\n        categoriesData = result.data;\n      } else if (result.categories && Array.isArray(result.categories)) {\n        categoriesData = result.categories;\n      } else {\n        throw new Error('Invalid API response format');\n      }\n\n      // Validate and transform data\n      const validCategories = categoriesData\n        .filter((cat): cat is any =>\n          typeof cat === 'object' &&\n          cat !== null &&\n          (typeof cat.id === 'string' || typeof cat.id === 'number') &&\n          typeof cat.name === 'string'\n        )\n        .slice(0, maxCategories)\n        .map(cat => ({\n          id: cat.slug || cat.id.toString(), // Use slug as ID, fallback to string ID\n          name: cat.name,\n          icon: cat.image_url || (cat.icon ? cat.icon : \"/images/categories/placeholder.png\"), // Safe access to icon property\n          description: cat.description || `Productos de ${cat.name.toLowerCase()}`, // Generate description if missing\n          isAvailable: cat.isAvailable ?? true,\n          // Keep additional API fields for compatibility\n          products_count: cat.products_count || 0,\n          slug: cat.slug,\n          parent_id: cat.parent_id,\n          image_url: cat.image_url,\n          created_at: cat.created_at,\n          updated_at: cat.updated_at\n        }));\n\n      trackAnalytics('fetch_success', { count: validCategories.length });\n      return validCategories;\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      trackAnalytics('fetch_error', { error: errorMessage });\n      throw new Error(`Failed to fetch categories: ${errorMessage}`);\n    }\n  }, [apiEndpoint, maxCategories, trackAnalytics]);\n\n  /**\n   * Refresh categories data\n   */\n  const refresh = useCallback(async (): Promise<void> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Check cache first\n      const cachedData = getCachedData();\n      if (cachedData && !enableBackgroundRefresh) {\n        setCategories(cachedData);\n        setLoading(false);\n        return;\n      }\n\n      // Fetch fresh data\n      const freshData = await fetchCategories();\n\n      // Update state and cache\n      setCategories(freshData);\n      setCachedData(freshData);\n      setError(null);\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to load categories';\n      setError(errorMessage);\n\n      // Use cached data as fallback if available\n      const cachedData = getCachedData();\n      if (cachedData) {\n        setCategories(cachedData);\n      } else {\n        setCategories(fallbackCategories);\n      }\n\n      console.error('Category data error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    getCachedData,\n    enableBackgroundRefresh,\n    fetchCategories,\n    setCachedData,\n    fallbackCategories,\n  ]);\n\n  /**\n   * Get category by ID\n   */\n  const getCategoryById = useCallback((id: string): Category | undefined => {\n    return categories.find(cat => cat.id === id);\n  }, [categories]);\n\n  /**\n   * Initial data load\n   */\n  useEffect(() => {\n    if (autoFetch) {\n      refresh();\n    }\n  }, [autoFetch]); // Removed refresh dependency to prevent infinite loop\n\n  /**\n   * Background refresh interval\n   */\n  useEffect(() => {\n    if (!enableBackgroundRefresh || refreshInterval <= 0) return;\n\n    const interval = setInterval(() => {\n      refresh();\n    }, refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [enableBackgroundRefresh, refreshInterval]); // Removed refresh dependency to prevent infinite loop\n\n  /**\n   * Memoized return object for performance\n   */\n  const returnValue = useMemo((): UseCategoryDataReturn => ({\n    categories,\n    loading,\n    error,\n    refresh,\n    getCategoryById,\n  }), [categories, loading, error, refresh, getCategoryById]);\n\n  return returnValue;\n};\n\n/**\n * Utility to preload category images\n */\nexport const preloadCategoryImages = (categories: Category[]): void => {\n  if (typeof window === 'undefined') return;\n\n  categories.forEach(category => {\n    if (category && category.icon) {\n      const img = new Image();\n      img.src = category.icon;\n    }\n  });\n};\n\n/**\n * Utility to clear category cache\n */\nexport const clearCategoryCache = (): void => {\n  categoryCache.clear();\n};\n\n/**\n * Default export for convenience\n */\nexport default useCategoryData;\n"],"names":["clearCategoryCache","preloadCategoryImages","useCategoryData","categoryCache","Map","DEFAULT_CATEGORIES","options","autoFetch","cacheDuration","enableBackgroundRefresh","refreshInterval","maxCategories","enableAnalytics","fallbackCategories","apiEndpoint","categories","setCategories","useState","loading","setLoading","error","setError","cacheKey","useMemo","isCacheValid","useCallback","cache","Date","now","expiresAt","getCachedData","cached","get","data","setCachedData","set","timestamp","trackAnalytics","event","window","gtag","event_category","event_label","custom_parameters","process","env","NODE_ENV","fetchCategories","response","fetch","ok","Error","status","statusText","result","json","categoriesData","Array","isArray","validCategories","filter","cat","id","name","slice","map","slug","toString","icon","image_url","description","toLowerCase","isAvailable","products_count","parent_id","created_at","updated_at","count","length","errorMessage","message","refresh","cachedData","freshData","console","getCategoryById","find","useEffect","interval","setInterval","clearInterval","returnValue","forEach","category","img","Image","src","clear"],"mappings":"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"}