7ef478f5492f44dbed201cb7072a5a96
// 🧪 Enterprise Unit Tests - ProductFormEnterprise Component
"use strict";
// Mock dependencies
jest.mock('react-hot-toast', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn()
        }
    }));
jest.mock('../ProductImageManagerEnterprise', ()=>({
        ProductImageManagerEnterprise: ({ onChange })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "image-manager",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>onChange([
                            {
                                url: 'test.jpg'
                            }
                        ]),
                    children: "Add Image"
                })
            })
    }));
jest.mock('../ProductVariantManager', ()=>({
        ProductVariantManager: ({ onChange })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "variant-manager",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>onChange([
                            {
                                name: 'Color',
                                options: [
                                    'Red'
                                ]
                            }
                        ]),
                    children: "Add Variant"
                })
            })
    }));
jest.mock('../ProductPricing', ()=>({
        ProductPricing: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "pricing-section",
                children: "Pricing"
            })
    }));
jest.mock('../ProductInventory', ()=>({
        ProductInventory: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "inventory-section",
                children: "Inventory"
            })
    }));
jest.mock('../ProductSeo', ()=>({
        ProductSeo: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "seo-section",
                children: "SEO"
            })
    }));
jest.mock('../CategorySelector', ()=>({
        CategorySelector: ({ value, onChange, error })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "category-selector",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        value: value || '',
                        onChange: (e)=>onChange(e.target.value),
                        "data-testid": "category-select",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "",
                                children: "Select Category"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "category-1",
                                children: "Category 1"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "category-2",
                                children: "Category 2"
                            })
                        ]
                    }),
                    error && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        "data-testid": "category-error",
                        children: error
                    })
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _reactquery = require("@tanstack/react-query");
const _ProductFormEnterprise = require("../ProductFormEnterprise");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock fetch for slug validation
global.fetch = jest.fn();
const mockFetch = fetch;
// Test wrapper with QueryClient
const TestWrapper = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
describe('ProductFormEnterprise', ()=>{
    const mockOnSubmit = jest.fn();
    const mockOnCancel = jest.fn();
    const defaultProps = {
        mode: 'create',
        onSubmit: mockOnSubmit,
        onCancel: mockOnCancel
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        mockFetch.mockClear();
    });
    describe('Rendering', ()=>{
        it('should render create mode correctly', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            expect(_react1.screen.getByText('Crear Producto')).toBeInTheDocument();
            expect(_react1.screen.getByText('Auto-guardado cada 30 segundos')).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: /crear producto/i
            })).toBeInTheDocument();
        });
        it('should render edit mode correctly', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps,
                    mode: "edit",
                    productId: "test-product-id"
                })
            }));
            expect(_react1.screen.getByText('Editar Producto')).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: /guardar cambios/i
            })).toBeInTheDocument();
        });
        it('should render all tabs', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            expect(_react1.screen.getByText('📝 General')).toBeInTheDocument();
            expect(_react1.screen.getByText('💰 Precios')).toBeInTheDocument();
            expect(_react1.screen.getByText('📦 Inventario')).toBeInTheDocument();
            expect(_react1.screen.getByText('🖼️ Imágenes')).toBeInTheDocument();
            expect(_react1.screen.getByText('🎨 Variantes')).toBeInTheDocument();
            expect(_react1.screen.getByText('🔍 SEO')).toBeInTheDocument();
        });
        it('should show preview toggle button', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            expect(_react1.screen.getByRole('button', {
                name: /vista previa/i
            })).toBeInTheDocument();
        });
    });
    describe('Form Validation', ()=>{
        it('should validate required fields', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /crear producto/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('El nombre es requerido')).toBeInTheDocument();
            });
        });
        it('should validate name length', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const nameInput = _react1.screen.getByPlaceholderText('Ingrese el nombre del producto');
            await user.type(nameInput, 'a'.repeat(256)); // Exceed max length
            const submitButton = _react1.screen.getByRole('button', {
                name: /crear producto/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Máximo 255 caracteres')).toBeInTheDocument();
            });
        });
        it('should validate category selection', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const nameInput = _react1.screen.getByPlaceholderText('Ingrese el nombre del producto');
            await user.type(nameInput, 'Test Product');
            const submitButton = _react1.screen.getByRole('button', {
                name: /crear producto/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Selecciona una categoría válida')).toBeInTheDocument();
            });
        });
    });
    describe('Slug Generation', ()=>{
        it('should generate slug from product name', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const nameInput = _react1.screen.getByPlaceholderText('Ingrese el nombre del producto');
            await user.type(nameInput, 'Test Product Name!');
            await (0, _react1.waitFor)(()=>{
                const slugInput = _react1.screen.getByDisplayValue('test-product-name');
                expect(slugInput).toBeInTheDocument();
            });
        });
        it('should validate slug uniqueness', async ()=>{
            const user = _userevent.default.setup();
            // Mock slug validation API
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        available: false
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const slugInput = _react1.screen.getByPlaceholderText('url-del-producto');
            await user.type(slugInput, 'existing-slug');
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Este slug ya está en uso')).toBeInTheDocument();
            });
            expect(mockFetch).toHaveBeenCalledWith('/api/admin/products/validate-slug', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    slug: 'existing-slug'
                })
            });
        });
        it('should show slug validation loading state', async ()=>{
            const user = _userevent.default.setup();
            // Mock delayed response
            mockFetch.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                            ok: true,
                            json: async ()=>({
                                    available: true
                                })
                        }), 100)));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const slugInput = _react1.screen.getByPlaceholderText('url-del-producto');
            await user.type(slugInput, 'new-slug');
            // Should show loading spinner
            expect(_react1.screen.getByTestId('loading-spinner')).toBeInTheDocument();
        });
    });
    describe('Tab Navigation', ()=>{
        it('should switch between tabs', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            // Initially on General tab
            expect(_react1.screen.getByPlaceholderText('Ingrese el nombre del producto')).toBeInTheDocument();
            // Switch to Pricing tab
            await user.click(_react1.screen.getByText('💰 Precios'));
            expect(_react1.screen.getByTestId('pricing-section')).toBeInTheDocument();
            // Switch to Inventory tab
            await user.click(_react1.screen.getByText('📦 Inventario'));
            expect(_react1.screen.getByTestId('inventory-section')).toBeInTheDocument();
            // Switch to SEO tab
            await user.click(_react1.screen.getByText('🔍 SEO'));
            expect(_react1.screen.getByTestId('seo-section')).toBeInTheDocument();
        });
        it('should show images tab only in edit mode', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps,
                    mode: "create"
                })
            }));
            // Images tab should not show image manager in create mode
            expect(_react1.screen.queryByTestId('image-manager')).not.toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps,
                    mode: "edit",
                    productId: "test-product-id"
                })
            }));
            // Switch to images tab in edit mode
            _react1.fireEvent.click(_react1.screen.getByText('🖼️ Imágenes'));
            expect(_react1.screen.getByTestId('image-manager')).toBeInTheDocument();
        });
    });
    describe('Auto-save Functionality', ()=>{
        beforeEach(()=>{
            jest.useFakeTimers();
        });
        afterEach(()=>{
            jest.useRealTimers();
        });
        it('should trigger auto-save in edit mode', async ()=>{
            const user = _userevent.default.setup({
                advanceTimers: jest.advanceTimersByTime
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps,
                    mode: "edit",
                    productId: "test-product-id",
                    initialData: {
                        name: 'Initial Product'
                    }
                })
            }));
            const nameInput = _react1.screen.getByDisplayValue('Initial Product');
            await user.clear(nameInput);
            await user.type(nameInput, 'Updated Product');
            // Fast-forward 30 seconds
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(30000);
            });
            await (0, _react1.waitFor)(()=>{
                expect(mockOnSubmit).toHaveBeenCalled();
            });
        });
        it('should not auto-save in create mode', async ()=>{
            const user = _userevent.default.setup({
                advanceTimers: jest.advanceTimersByTime
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps,
                    mode: "create"
                })
            }));
            const nameInput = _react1.screen.getByPlaceholderText('Ingrese el nombre del producto');
            await user.type(nameInput, 'New Product');
            // Fast-forward 30 seconds
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(30000);
            });
            // Should not trigger auto-save in create mode
            expect(mockOnSubmit).not.toHaveBeenCalled();
        });
    });
    describe('Form Submission', ()=>{
        it('should submit form with valid data', async ()=>{
            const user = _userevent.default.setup();
            // Mock successful slug validation
            mockFetch.mockResolvedValue({
                ok: true,
                json: async ()=>({
                        available: true
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            // Fill required fields
            await user.type(_react1.screen.getByPlaceholderText('Ingrese el nombre del producto'), 'Test Product');
            await user.selectOptions(_react1.screen.getByTestId('category-select'), 'category-1');
            // Wait for slug validation
            await (0, _react1.waitFor)(()=>{
                expect(mockFetch).toHaveBeenCalled();
            });
            const submitButton = _react1.screen.getByRole('button', {
                name: /crear producto/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockOnSubmit).toHaveBeenCalledWith(expect.objectContaining({
                    name: 'Test Product',
                    category_id: 'category-1',
                    slug: 'test-product'
                }));
            });
        });
        it('should prevent submission with invalid slug', async ()=>{
            const user = _userevent.default.setup();
            // Mock slug validation failure
            mockFetch.mockResolvedValue({
                ok: true,
                json: async ()=>({
                        available: false
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            await user.type(_react1.screen.getByPlaceholderText('Ingrese el nombre del producto'), 'Test Product');
            await user.selectOptions(_react1.screen.getByTestId('category-select'), 'category-1');
            // Wait for slug validation
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Este slug ya está en uso')).toBeInTheDocument();
            });
            const submitButton = _react1.screen.getByRole('button', {
                name: /crear producto/i
            });
            expect(submitButton).toBeDisabled();
        });
        it('should handle submission errors', async ()=>{
            const user = _userevent.default.setup();
            const { toast } = require('react-hot-toast');
            mockOnSubmit.mockRejectedValue(new Error('Submission failed'));
            // Mock successful slug validation
            mockFetch.mockResolvedValue({
                ok: true,
                json: async ()=>({
                        available: true
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            await user.type(_react1.screen.getByPlaceholderText('Ingrese el nombre del producto'), 'Test Product');
            await user.selectOptions(_react1.screen.getByTestId('category-select'), 'category-1');
            const submitButton = _react1.screen.getByRole('button', {
                name: /crear producto/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(toast.error).toHaveBeenCalledWith('El slug debe ser único');
            });
        });
    });
    describe('Preview Mode', ()=>{
        it('should toggle preview mode', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const previewButton = _react1.screen.getByRole('button', {
                name: /vista previa/i
            });
            await user.click(previewButton);
            expect(_react1.screen.getByRole('button', {
                name: /editar/i
            })).toBeInTheDocument();
        });
    });
    describe('Cancel Functionality', ()=>{
        it('should call onCancel when cancel button is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductFormEnterprise.ProductFormEnterprise, {
                    ...defaultProps
                })
            }));
            const cancelButton = _react1.screen.getByRole('button', {
                name: /cancelar/i
            });
            await user.click(cancelButton);
            expect(mockOnCancel).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,