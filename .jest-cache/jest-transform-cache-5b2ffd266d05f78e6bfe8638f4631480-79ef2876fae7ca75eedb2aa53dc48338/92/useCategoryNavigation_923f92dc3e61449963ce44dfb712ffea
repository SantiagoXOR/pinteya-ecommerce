bd2f9f86101c76dc2fb86babf881e7ed
/**
 * useCategoryNavigation Hook
 * Manages URL navigation for category filters
 * Pinteya E-commerce - Enterprise-ready implementation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    /**
 * Default export for convenience
 */ default: function() {
        return _default;
    },
    extractCategoriesFromUrl: function() {
        return extractCategoriesFromUrl;
    },
    hasCategories: function() {
        return hasCategories;
    },
    useCategoryNavigation: function() {
        return useCategoryNavigation;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _navigation = require("next/navigation");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const useCategoryNavigation = (options = {})=>{
    const { paramName = 'categories', basePath = '/', debounceDelay = 300, preserveParams = true, onNavigationStart, onNavigationComplete, enableAnalytics = true } = options;
    const router = (0, _navigation.useRouter)();
    const searchParams = (0, _navigation.useSearchParams)();
    const pathname = (0, _navigation.usePathname)();
    const [isNavigating, setIsNavigating] = (0, _react.useState)(false);
    const [debounceTimer, setDebounceTimer] = (0, _react.useState)(null);
    /**
   * Track navigation analytics if enabled
   */ const trackNavigation = (0, _react.useCallback)((categories, action)=>{
        if (!enableAnalytics) return;
        // Track with analytics service
        if (typeof window !== 'undefined' && window.gtag) {
            window.gtag('event', 'category_navigation', {
                event_category: 'navigation',
                event_label: action,
                value: categories.length,
                custom_parameters: {
                    categories: categories.join(','),
                    path: pathname
                }
            });
        }
        // Console log for development
        if (process.env.NODE_ENV === 'development') {}
    }, [
        enableAnalytics,
        pathname
    ]);
    /**
   * Build URL with category parameters
   */ const buildUrl = (0, _react.useCallback)((categories)=>{
        const params = new URLSearchParams();
        // Preserve existing parameters if enabled
        if (preserveParams) {
            searchParams.forEach((value, key)=>{
                if (key !== paramName) {
                    params.set(key, value);
                }
            });
        }
        // Add categories parameter if there are categories
        if (categories.length > 0) {
            params.set(paramName, categories.join(','));
        }
        // Build final URL
        const queryString = params.toString();
        return queryString ? `${basePath}?${queryString}` : basePath;
    }, [
        basePath,
        paramName,
        preserveParams,
        searchParams
    ]);
    /**
   * Perform navigation with debouncing
   */ const performNavigation = (0, _react.useCallback)((url)=>{
        // Clear existing timer
        if (debounceTimer) {
            clearTimeout(debounceTimer);
        }
        // Set navigation state
        setIsNavigating(true);
        onNavigationStart?.();
        // Debounced navigation
        const timer = setTimeout(()=>{
            try {
                router.push(url);
                // Reset navigation state after a short delay
                setTimeout(()=>{
                    setIsNavigating(false);
                    onNavigationComplete?.();
                }, 100);
            } catch (error) {
                console.error('Navigation error:', error);
                setIsNavigating(false);
                onNavigationComplete?.();
            }
        }, debounceDelay);
        setDebounceTimer(timer);
    }, [
        debounceTimer,
        debounceDelay,
        router,
        onNavigationStart,
        onNavigationComplete
    ]);
    /**
   * Navigate to filtered view with selected categories
   */ const navigateToFiltered = (0, _react.useCallback)((categories)=>{
        // Validate categories
        const validCategories = categories.filter((cat)=>typeof cat === 'string' && cat.trim().length > 0);
        // Build URL and navigate
        const url = buildUrl(validCategories);
        performNavigation(url);
        // Track analytics
        trackNavigation(validCategories, 'filter');
    }, [
        buildUrl,
        performNavigation,
        trackNavigation
    ]);
    /**
   * Navigate to home (clear all filters)
   */ const navigateToHome = (0, _react.useCallback)(()=>{
        const url = buildUrl([]);
        performNavigation(url);
        // Track analytics
        trackNavigation([], 'clear');
    }, [
        buildUrl,
        performNavigation,
        trackNavigation
    ]);
    /**
   * Get current URL with categories
   */ const getCurrentUrl = (0, _react.useCallback)(()=>{
        const currentCategories = searchParams.get(paramName);
        const categories = currentCategories ? currentCategories.split(',') : [];
        return buildUrl(categories);
    }, [
        searchParams,
        paramName,
        buildUrl
    ]);
    /**
   * Get current categories from URL
   */ const getCurrentCategories = (0, _react.useCallback)(()=>{
        const categoriesParam = searchParams.get(paramName);
        return categoriesParam ? categoriesParam.split(',').filter(Boolean) : [];
    }, [
        searchParams,
        paramName
    ]);
    /**
   * Check if specific categories are currently active
   */ const areCategoriesToActive = (0, _react.useCallback)((categories)=>{
        const currentCategories = getCurrentCategories();
        return categories.every((cat)=>currentCategories.includes(cat)) && currentCategories.every((cat)=>categories.includes(cat));
    }, [
        getCurrentCategories
    ]);
    /**
   * Cleanup effect for debounce timer
   */ const cleanup = (0, _react.useCallback)(()=>{
        if (debounceTimer) {
            clearTimeout(debounceTimer);
            setDebounceTimer(null);
        }
    }, [
        debounceTimer
    ]);
    // Cleanup on unmount
    _react.default.useEffect(()=>{
        return cleanup;
    }, [
        cleanup
    ]);
    /**
   * Memoized return object for performance
   */ const returnValue = (0, _react.useMemo)(()=>({
            navigateToFiltered,
            navigateToHome,
            getCurrentUrl,
            isNavigating
        }), [
        navigateToFiltered,
        navigateToHome,
        getCurrentUrl,
        isNavigating
    ]);
    return returnValue;
};
const extractCategoriesFromUrl = (url, paramName = 'categories')=>{
    try {
        const urlObj = new URL(url, window.location.origin);
        const categoriesParam = urlObj.searchParams.get(paramName);
        return categoriesParam ? categoriesParam.split(',').filter(Boolean) : [];
    } catch  {
        return [];
    }
};
const hasCategories = (url, paramName = 'categories')=>{
    return extractCategoriesFromUrl(url, paramName).length > 0;
};
const _default = useCategoryNavigation;

//# sourceMappingURL=data:application/json;base64,