a9373bdd39b8c59f8cabd336723350b8
"use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush
            })
    }));
jest.mock('@/hooks/useCheckout', ()=>({
        useCheckout: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _SimplifiedCheckout = /*#__PURE__*/ _interop_require_default(require("../../../components/Checkout/SimplifiedCheckout"));
const _useCheckout = require("../../../hooks/useCheckout");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js router
const mockPush = jest.fn();
// Mock useCheckout hook
const mockUpdateBillingData = jest.fn();
const mockUpdateFormData = jest.fn();
const mockProcessCheckout = jest.fn();
const mockApplyCoupon = jest.fn();
const defaultMockData = {
    formData: {
        billing: {
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            streetAddress: '',
            apartment: '',
            city: '',
            state: '',
            zipCode: '',
            country: 'Argentina',
            companyName: '',
            orderNotes: ''
        },
        shipping: {
            differentAddress: false
        },
        paymentMethod: 'mercadopago',
        shippingMethod: 'free',
        couponCode: ''
    },
    isLoading: false,
    errors: {},
    step: 'form',
    cartItems: [
        {
            id: 1,
            title: 'Pintura Látex Blanca',
            price: 5000,
            discountedPrice: 4500,
            quantity: 2,
            imgs: {
                thumbnails: [
                    '/test-image.jpg'
                ],
                previews: [
                    '/test-image.jpg'
                ]
            }
        }
    ],
    totalPrice: 9000,
    shippingCost: 2500,
    discount: 0,
    finalTotal: 11500,
    appliedCoupon: null,
    updateBillingData: mockUpdateBillingData,
    updateFormData: mockUpdateFormData,
    processCheckout: mockProcessCheckout,
    applyCoupon: mockApplyCoupon
};
describe('SimplifiedCheckout', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockUpdateBillingData.mockClear();
        mockUpdateFormData.mockClear();
        mockProcessCheckout.mockClear();
        mockApplyCoupon.mockClear();
        _useCheckout.useCheckout.mockReturnValue(defaultMockData);
    });
    it('renders the form step by default', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        expect(_react1.screen.getByText('Finalizar Compra')).toBeInTheDocument();
        expect(_react1.screen.getByText('Información Personal')).toBeInTheDocument();
        expect(_react1.screen.getByText('Dirección de Entrega')).toBeInTheDocument();
        expect(_react1.screen.getByText('Método de Envío')).toBeInTheDocument();
        expect(_react1.screen.getByText('Método de Pago')).toBeInTheDocument();
    });
    it('shows order summary with cart items', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        expect(_react1.screen.getByText('Resumen del Pedido')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pintura Látex Blanca')).toBeInTheDocument();
        // El badge muestra "En carrito" porque el precio (4500) es menor a 15000
        expect(_react1.screen.getByText('En carrito')).toBeInTheDocument();
        expect(_react1.screen.getAllByText('$9.000')[0]).toBeInTheDocument(); // Subtotal
        expect(_react1.screen.getAllByText('$11.500')[0]).toBeInTheDocument(); // Total
    });
    it('validates required fields', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        const submitButton = _react1.screen.getByText('Revisar Pedido');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('El nombre es requerido')).toBeInTheDocument();
            expect(_react1.screen.getByText('El apellido es requerido')).toBeInTheDocument();
            expect(_react1.screen.getByText('El email es requerido')).toBeInTheDocument();
            expect(_react1.screen.getByText('El teléfono es requerido')).toBeInTheDocument();
            expect(_react1.screen.getByText('La dirección es requerida')).toBeInTheDocument();
            expect(_react1.screen.getByText('La ciudad es requerida')).toBeInTheDocument();
            expect(_react1.screen.getByText('La provincia es requerida')).toBeInTheDocument();
            expect(_react1.screen.getByText('El código postal es requerido')).toBeInTheDocument();
        });
    });
    it('validates email format', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        // Verificar que el campo de email existe y se puede interactuar con él
        const emailInput = _react1.screen.getByPlaceholderText('tu@email.com');
        expect(emailInput).toBeInTheDocument();
        // Verificar que el formulario tiene validación (al intentar enviar)
        const submitButton = _react1.screen.getByText('Revisar Pedido');
        expect(submitButton).toBeInTheDocument();
        // Verificar que el mock de updateBillingData se llama cuando se escribe
        await user.type(emailInput, 'test');
        expect(mockUpdateBillingData).toHaveBeenCalled();
    });
    it('updates form data when typing', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        const firstNameInput = _react1.screen.getByPlaceholderText('Tu nombre');
        await user.type(firstNameInput, 'J');
        expect(mockUpdateBillingData).toHaveBeenCalledWith({
            firstName: 'J'
        });
    });
    it('clears field errors when user starts typing', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        // First trigger validation error
        const submitButton = _react1.screen.getByText('Revisar Pedido');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('El nombre es requerido')).toBeInTheDocument();
        });
        // Then start typing to clear error
        const firstNameInput = _react1.screen.getByPlaceholderText('Tu nombre');
        await user.type(firstNameInput, 'J');
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByText('El nombre es requerido')).not.toBeInTheDocument();
        });
    });
    it('proceeds to confirmation step with valid data', async ()=>{
        const user = _userevent.default.setup();
        // Mock valid form data
        const validFormData = {
            ...defaultMockData.formData,
            billing: {
                ...defaultMockData.formData.billing,
                firstName: 'Juan',
                lastName: 'Pérez',
                email: 'juan@example.com',
                phone: '1123456789',
                streetAddress: 'Av. Corrientes 1234',
                city: 'Buenos Aires',
                state: 'CABA',
                zipCode: '1000'
            }
        };
        const mockUseCheckoutWithValidData = {
            ...defaultMockData,
            formData: validFormData
        };
        _useCheckout.useCheckout.mockReturnValue(mockUseCheckoutWithValidData);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        const submitButton = _react1.screen.getByText('Revisar Pedido');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('¡Confirma tu Pedido!')).toBeInTheDocument();
            expect(_react1.screen.getByText('Revisa todos los datos antes de proceder al pago')).toBeInTheDocument();
        });
    });
    it('shows confirmation step with user data', async ()=>{
        const user = _userevent.default.setup();
        const validFormData = {
            ...defaultMockData.formData,
            billing: {
                ...defaultMockData.formData.billing,
                firstName: 'Juan',
                lastName: 'Pérez',
                email: 'juan@example.com',
                phone: '1123456789',
                streetAddress: 'Av. Corrientes 1234',
                city: 'Buenos Aires',
                state: 'CABA',
                zipCode: '1000'
            }
        };
        const mockUseCheckoutWithValidData = {
            ...defaultMockData,
            formData: validFormData
        };
        jest.mocked(_useCheckout.useCheckout).mockReturnValue(mockUseCheckoutWithValidData);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        // Go to confirmation step
        const submitButton = _react1.screen.getByText('Revisar Pedido');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Juan Pérez')).toBeInTheDocument();
            expect(_react1.screen.getByText('juan@example.com')).toBeInTheDocument();
            expect(_react1.screen.getByText('1123456789')).toBeInTheDocument();
            expect(_react1.screen.getByText('Av. Corrientes 1234')).toBeInTheDocument();
            expect(_react1.screen.getByText('Buenos Aires, CABA')).toBeInTheDocument();
            expect(_react1.screen.getByText('CP: 1000')).toBeInTheDocument();
        });
    });
    it('allows going back to form from confirmation', async ()=>{
        const user = _userevent.default.setup();
        const validFormData = {
            ...defaultMockData.formData,
            billing: {
                ...defaultMockData.formData.billing,
                firstName: 'Juan',
                lastName: 'Pérez',
                email: 'juan@example.com',
                phone: '1123456789',
                streetAddress: 'Av. Corrientes 1234',
                city: 'Buenos Aires',
                state: 'CABA',
                zipCode: '1000'
            }
        };
        const mockUseCheckoutWithValidData = {
            ...defaultMockData,
            formData: validFormData
        };
        jest.mocked(_useCheckout.useCheckout).mockReturnValue(mockUseCheckoutWithValidData);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        // Go to confirmation
        const submitButton = _react1.screen.getByText('Revisar Pedido');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('¡Confirma tu Pedido!')).toBeInTheDocument();
        });
        // Go back to form
        const backButton = _react1.screen.getByText('Volver a Editar');
        await user.click(backButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Información Personal')).toBeInTheDocument();
        });
    });
    it('calls processCheckout when confirming order', async ()=>{
        const user = _userevent.default.setup();
        const validFormData = {
            ...defaultMockData.formData,
            billing: {
                ...defaultMockData.formData.billing,
                firstName: 'Juan',
                lastName: 'Pérez',
                email: 'juan@example.com',
                phone: '1123456789',
                streetAddress: 'Av. Corrientes 1234',
                city: 'Buenos Aires',
                state: 'CABA',
                zipCode: '1000'
            }
        };
        const mockUseCheckoutWithValidData = {
            ...defaultMockData,
            formData: validFormData
        };
        jest.mocked(_useCheckout.useCheckout).mockReturnValue(mockUseCheckoutWithValidData);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        // Go to confirmation
        const submitButton = _react1.screen.getByText('Revisar Pedido');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('¡Confirma tu Pedido!')).toBeInTheDocument();
        });
        // Confirm order
        const confirmButton = _react1.screen.getByText('Confirmar y Pagar');
        await user.click(confirmButton);
        expect(mockProcessCheckout).toHaveBeenCalled();
    });
    it('shows processing step when loading', ()=>{
        const mockUseCheckoutLoading = {
            ...defaultMockData,
            isLoading: true
        };
        jest.mocked(_useCheckout.useCheckout).mockReturnValue(mockUseCheckoutLoading);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        // Verificar que el botón principal muestra el estado de loading
        expect(_react1.screen.getByText('Revisar Pedido')).toBeInTheDocument();
    });
    it('shows error message when there are general errors', ()=>{
        const mockUseCheckoutWithError = {
            ...defaultMockData,
            errors: {
                general: 'Error de conexión con el servidor'
            }
        };
        jest.mocked(_useCheckout.useCheckout).mockReturnValue(mockUseCheckoutWithError);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        expect(_react1.screen.getByText('Error en el Checkout')).toBeInTheDocument();
        expect(_react1.screen.getByText('Error de conexión con el servidor')).toBeInTheDocument();
        expect(_react1.screen.getByText('Intentar Nuevamente')).toBeInTheDocument();
    });
    it('redirects to cart when cart is empty', ()=>{
        const mockUseCheckoutEmptyCart = {
            ...defaultMockData,
            cartItems: []
        };
        jest.mocked(_useCheckout.useCheckout).mockReturnValue(mockUseCheckoutEmptyCart);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        expect(mockPush).toHaveBeenCalledWith('/cart');
    });
    it('updates shipping method when selected', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        const expressShipping = _react1.screen.getByDisplayValue('express');
        await user.click(expressShipping);
        expect(mockUpdateFormData).toHaveBeenCalledWith({
            shippingMethod: 'express'
        });
    });
    it('shows free shipping when total is above threshold', ()=>{
        const mockUseCheckoutFreeShipping = {
            ...defaultMockData,
            totalPrice: 30000,
            shippingCost: 0,
            finalTotal: 30000
        };
        jest.mocked(_useCheckout.useCheckout).mockReturnValue(mockUseCheckoutFreeShipping);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        expect(_react1.screen.getAllByText('Gratis')[0]).toBeInTheDocument();
    });
    it('shows step indicators correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SimplifiedCheckout.default, {}));
        expect(_react1.screen.getByText('Datos')).toBeInTheDocument();
        expect(_react1.screen.getByText('Confirmación')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pago')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,