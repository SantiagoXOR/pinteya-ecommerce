{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\admin\\mercadopago-metrics.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - MERCADOPAGO METRICS API TESTS\n// ===================================\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST } from '@/app/api/admin/mercadopago/metrics/route';\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  auth: jest.fn(() => ({\n    userId: 'test-user-id',\n    sessionId: 'test-session-id',\n  })),\n}));\n\n// Mock del metrics collector\njest.mock('@/lib/metrics', () => ({\n  metricsCollector: {\n    getMercadoPagoMetrics: jest.fn(() => Promise.resolve({\n      payment_creation: {\n        requests: { total: 100, success: 95, error: 5, rate_limited: 2 },\n        response_times: { avg: 250, min: 100, max: 500, p95: 400, p99: 450 },\n        retry_stats: { total_retries: 3, successful_retries: 2, failed_retries: 1 },\n      },\n      payment_queries: {\n        requests: { total: 50, success: 48, error: 2, rate_limited: 1 },\n        response_times: { avg: 150, min: 80, max: 300, p95: 250, p99: 280 },\n        retry_stats: { total_retries: 1, successful_retries: 1, failed_retries: 0 },\n      },\n      webhook_processing: {\n        requests: { total: 200, success: 195, error: 5, rate_limited: 0 },\n        response_times: { avg: 100, min: 50, max: 200, p95: 180, p99: 190 },\n        retry_stats: { total_retries: 2, successful_retries: 2, failed_retries: 0 },\n      },\n    })),\n  },\n}));\n\n// Mock de Redis\njest.mock('@/lib/redis', () => ({\n  isRedisAvailable: jest.fn(() => Promise.resolve(true)),\n}));\n\n// Mock del logger\njest.mock('@/lib/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n  },\n  LogCategory: {\n    API: 'api',\n  },\n}));\n\ndescribe('/api/admin/mercadopago/metrics', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/admin/mercadopago/metrics', () => {\n    it('should return metrics successfully for authenticated user', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data).toBeDefined();\n      expect(data.data.realTimeMetrics).toBeDefined();\n      expect(data.data.endpointMetrics).toBeDefined();\n      expect(data.data.systemHealth).toBeDefined();\n      expect(data.data.alerts).toBeDefined();\n    });\n\n    it('should calculate real-time metrics correctly', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      const realTimeMetrics = data.data.realTimeMetrics;\n      \n      // Total requests = 100 + 50 + 200 = 350\n      expect(realTimeMetrics.totalRequests).toBe(350);\n      \n      // Success rate = (95 + 48 + 195) / 350 = 338/350 = 96.57%\n      expect(realTimeMetrics.successRate).toBeCloseTo(96.57, 1);\n      \n      // Error rate = (5 + 2 + 5) / 350 = 12/350 = 3.43%\n      expect(realTimeMetrics.errorRate).toBeCloseTo(3.43, 1);\n      \n      // Rate limit hits = 2 + 1 + 0 = 3\n      expect(realTimeMetrics.rateLimitHits).toBe(3);\n      \n      // Retry attempts = 3 + 1 + 2 = 6\n      expect(realTimeMetrics.retryAttempts).toBe(6);\n    });\n\n    it('should include endpoint-specific metrics', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      const endpointMetrics = data.data.endpointMetrics;\n      \n      // Create Preference metrics\n      expect(endpointMetrics.createPreference.requests).toBe(100);\n      expect(endpointMetrics.createPreference.successRate).toBe(95);\n      expect(endpointMetrics.createPreference.averageResponseTime).toBe(250);\n      expect(endpointMetrics.createPreference.errorCount).toBe(5);\n      \n      // Webhook metrics\n      expect(endpointMetrics.webhook.requests).toBe(200);\n      expect(endpointMetrics.webhook.successRate).toBe(97.5);\n      expect(endpointMetrics.webhook.averageResponseTime).toBe(100);\n      expect(endpointMetrics.webhook.errorCount).toBe(5);\n      \n      // Payment Query metrics\n      expect(endpointMetrics.paymentQuery.requests).toBe(50);\n      expect(endpointMetrics.paymentQuery.successRate).toBe(96);\n      expect(endpointMetrics.paymentQuery.averageResponseTime).toBe(150);\n      expect(endpointMetrics.paymentQuery.errorCount).toBe(2);\n    });\n\n    it('should include system health information', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      const systemHealth = data.data.systemHealth;\n      \n      expect(systemHealth.redisStatus).toBe('connected');\n      expect(systemHealth.lastUpdate).toBeDefined();\n      expect(systemHealth.uptime).toBeGreaterThan(0);\n    });\n\n    it('should generate alerts for high error rates', async () => {\n      // Mock high error rate scenario\n      const { metricsCollector } = require('@/lib/metrics');\n      metricsCollector.getMercadoPagoMetrics.mockResolvedValueOnce({\n        payment_creation: {\n          requests: { total: 100, success: 80, error: 20, rate_limited: 0 },\n          response_times: { avg: 250 },\n          retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0 },\n        },\n        payment_queries: {\n          requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\n          response_times: { avg: 0 },\n          retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0 },\n        },\n        webhook_processing: {\n          requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\n          response_times: { avg: 0 },\n          retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0 },\n        },\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      const alerts = data.data.alerts;\n      \n      // Should have an error alert for high error rate (20%)\n      expect(alerts).toHaveLength(1);\n      expect(alerts[0].type).toBe('error');\n      expect(alerts[0].message).toContain('Tasa de error alta');\n    });\n\n    it('should generate alerts for high response times', async () => {\n      // Mock high response time scenario\n      const { metricsCollector } = require('@/lib/metrics');\n      metricsCollector.getMercadoPagoMetrics.mockResolvedValueOnce({\n        payment_creation: {\n          requests: { total: 100, success: 100, error: 0, rate_limited: 0 },\n          response_times: { avg: 5000 }, // 5 seconds\n          retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0 },\n        },\n        payment_queries: {\n          requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\n          response_times: { avg: 0 },\n          retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0 },\n        },\n        webhook_processing: {\n          requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\n          response_times: { avg: 0 },\n          retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0 },\n        },\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      const alerts = data.data.alerts;\n      \n      // Should have a warning alert for high response time\n      expect(alerts).toHaveLength(1);\n      expect(alerts[0].type).toBe('warning');\n      expect(alerts[0].message).toContain('Tiempo de respuesta alto');\n    });\n\n    it('should return 401 for unauthenticated requests', async () => {\n      // Mock unauthenticated user\n      const { auth } = require('@clerk/nextjs/server');\n      auth.mockReturnValueOnce({ userId: null });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('No autorizado');\n    });\n  });\n\n  describe('POST /api/admin/mercadopago/metrics', () => {\n    it('should reset metrics successfully for authenticated user', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics', {\n        method: 'POST',\n      });\n      \n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.message).toBe('MÃ©tricas reiniciadas correctamente');\n    });\n\n    it('should return 401 for unauthenticated requests', async () => {\n      // Mock unauthenticated user\n      const { auth } = require('@clerk/nextjs/server');\n      auth.mockReturnValueOnce({ userId: null });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/mercadopago/metrics', {\n        method: 'POST',\n      });\n      \n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('No autorizado');\n    });\n  });\n});\n"],"names":["jest","mock","auth","fn","userId","sessionId","metricsCollector","getMercadoPagoMetrics","Promise","resolve","payment_creation","requests","total","success","error","rate_limited","response_times","avg","min","max","p95","p99","retry_stats","total_retries","successful_retries","failed_retries","payment_queries","webhook_processing","isRedisAvailable","logger","info","warn","LogCategory","API","describe","beforeEach","clearAllMocks","it","request","NextRequest","response","GET","data","json","expect","status","toBe","toBeDefined","realTimeMetrics","endpointMetrics","systemHealth","alerts","totalRequests","successRate","toBeCloseTo","errorRate","rateLimitHits","retryAttempts","createPreference","averageResponseTime","errorCount","webhook","paymentQuery","redisStatus","lastUpdate","uptime","toBeGreaterThan","require","mockResolvedValueOnce","toHaveLength","type","message","toContain","mockReturnValueOnce","method","POST"],"mappings":"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"}