491d8b343376cf0614fa7af625845e81
/**
 * Tests de Accesibilidad - Header
 * Pruebas de cumplimiento WCAG 2.1 AA
 */ "use strict";
// Mock de Next.js
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn()
            }),
        useSearchParams: ()=>({
                get: jest.fn()
            })
    }));
// Mock de Clerk
jest.mock('@clerk/nextjs', ()=>({
        ClerkProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        SignedIn: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-in",
                children: children
            }),
        SignedOut: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "signed-out",
                children: children
            }),
        UserButton: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-button",
                role: "button",
                tabIndex: 0,
                children: "UserButton"
            }),
        useUser: ()=>({
                isSignedIn: false,
                user: null,
                isLoaded: true
            })
    }));
// Mock de hooks
jest.mock('@/hooks/useGeolocation', ()=>({
        useGeolocation: ()=>({
                detectedZone: {
                    id: 'cordoba-capital',
                    name: 'Córdoba Capital'
                },
                requestLocation: jest.fn(),
                permissionStatus: 'granted',
                isLoading: false,
                error: null,
                location: null,
                testLocation: jest.fn(),
                deliveryZones: [
                    {
                        id: 'cordoba-capital',
                        name: 'Córdoba Capital'
                    }
                ]
            })
    }));
jest.mock('@/hooks/useCartAnimation', ()=>({
        useCartAnimation: ()=>({
                isAnimating: false
            })
    }));
// Mock de componentes con accesibilidad
jest.mock('@/components/ui/SearchAutocompleteIntegrated', ()=>({
        SearchAutocompleteIntegrated: ({ onSearch })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "search-input",
                placeholder: "latex interior blanco 20lts",
                "aria-label": "Buscar productos de pinturer\xeda",
                role: "searchbox",
                onChange: (e)=>onSearch(e.target.value)
            })
    }));
jest.mock('@/components/ui/optimized-cart-icon', ()=>({
        OptimizedCartIcon: ({ alt })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "cart-icon",
                "aria-label": alt,
                role: "img",
                children: "Cart Icon"
            })
    }));
jest.mock('@/components/ui/OptimizedLogo', ()=>({
        HeaderLogo: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                src: "/images/logo/LOGO POSITIVO.svg",
                alt: "Pinteya - Tu Pinturer\xeda Online",
                "data-testid": "header-logo"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _jestaxe = require("jest-axe");
const _reactredux = require("react-redux");
const _reactquery = require("@tanstack/react-query");
const _index = /*#__PURE__*/ _interop_require_default(require("../../index"));
const _AuthSection = /*#__PURE__*/ _interop_require_default(require("../../AuthSection"));
const _store = require("../../../../redux/store");
const _CartSidebarModalContext = require("../../../../app/context/CartSidebarModalContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Extender expect con jest-axe
expect.extend(_jestaxe.toHaveNoViolations);
// Wrapper de pruebas
const TestWrapper = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
        store: _store.store,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CartSidebarModalContext.CartModalProvider, {
                children: children
            })
        })
    });
};
describe('Header Accessibility - WCAG 2.1 AA', ()=>{
    describe('Cumplimiento Automático de Axe', ()=>{
        it('debe pasar todas las reglas de accesibilidad de axe', async ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const results = await (0, _jestaxe.axe)(container);
            expect(results).toHaveNoViolations();
        });
        it('debe pasar axe en AuthSection independiente', async ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: "desktop"
                })
            }));
            const results = await (0, _jestaxe.axe)(container);
            expect(results).toHaveNoViolations();
        });
    });
    describe('Estructura Semántica', ()=>{
        it('debe usar elementos semánticos correctos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Verificar que usa el elemento header
            expect(_react1.screen.getByRole('banner')).toBeInTheDocument();
            // Verificar que tiene navegación
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toBeInTheDocument();
            // Verificar botones
            const buttons = _react1.screen.getAllByRole('button');
            expect(buttons.length).toBeGreaterThan(0);
        });
        it('debe tener landmarks ARIA correctos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Header debe ser un banner landmark
            const banner = _react1.screen.getByRole('banner');
            expect(banner).toBeInTheDocument();
        });
    });
    describe('Navegación por Teclado', ()=>{
        it('debe permitir navegación por Tab', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByRole('searchbox');
            const buttons = _react1.screen.getAllByRole('button');
            // Verificar que los elementos son focusables
            expect(searchInput).toHaveAttribute('tabIndex', '0');
            buttons.forEach((button)=>{
                expect(button).not.toHaveAttribute('tabIndex', '-1');
            });
        });
        it('debe manejar navegación con Enter y Space', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const buttons = _react1.screen.getAllByRole('button');
            buttons.forEach((button)=>{
                // Simular Enter
                _react1.fireEvent.keyDown(button, {
                    key: 'Enter',
                    code: 'Enter'
                });
                // Simular Space
                _react1.fireEvent.keyDown(button, {
                    key: ' ',
                    code: 'Space'
                });
                // No debe haber errores
                expect(button).toBeInTheDocument();
            });
        });
        it('debe manejar Escape en elementos interactivos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Simular Escape
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Escape',
                code: 'Escape'
            });
            // No debe haber errores
            expect(searchInput).toBeInTheDocument();
        });
    });
    describe('Etiquetas y Descripciones', ()=>{
        it('debe tener aria-labels apropiados', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toHaveAttribute('aria-label', 'Buscar productos de pinturería');
            const cartIcon = _react1.screen.getByTestId('cart-icon');
            expect(cartIcon).toHaveAttribute('aria-label', 'Carrito de compras');
        });
        it('debe tener textos alternativos para imágenes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const logo = _react1.screen.getByTestId('header-logo');
            expect(logo).toHaveAttribute('alt', 'Pinteya - Tu Pinturería Online');
        });
        it('debe tener placeholders descriptivos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toHaveAttribute('placeholder', 'latex interior blanco 20lts');
        });
    });
    describe('Contraste de Colores', ()=>{
        it('debe tener suficiente contraste en texto sobre fondo naranja', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const header = _react1.screen.getByRole('banner');
            // Verificar que usa colores con buen contraste
            const computedStyle = window.getComputedStyle(header);
            // El fondo naranja (#ea5a17) con texto blanco debe tener contraste > 4.5:1
            expect(header).toBeInTheDocument();
        });
        it('debe mantener contraste en estados hover y focus', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const buttons = _react1.screen.getAllByRole('button');
            buttons.forEach((button)=>{
                // Simular hover
                _react1.fireEvent.mouseEnter(button);
                // Simular focus
                _react1.fireEvent.focus(button);
                // Verificar que sigue siendo visible
                expect(button).toBeVisible();
            });
        });
    });
    describe('Estados de Focus', ()=>{
        it('debe mostrar indicadores de focus visibles', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByRole('searchbox');
            const buttons = _react1.screen.getAllByRole('button');
            // Focus en input de búsqueda
            _react1.fireEvent.focus(searchInput);
            expect(document.activeElement).toBe(searchInput);
            // Focus en botones
            buttons.forEach((button)=>{
                _react1.fireEvent.focus(button);
                expect(document.activeElement).toBe(button);
            });
        });
        it('debe mantener orden lógico de tabulación', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Simular navegación por Tab
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.focus(searchInput);
            // El orden debe ser: logo -> búsqueda -> botones
            expect(document.activeElement).toBe(searchInput);
        });
    });
    describe('Anuncios para Screen Readers', ()=>{
        it('debe tener roles ARIA apropiados', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toHaveAttribute('role', 'searchbox');
            const cartIcon = _react1.screen.getByTestId('cart-icon');
            expect(cartIcon).toHaveAttribute('role', 'img');
        });
        it('debe anunciar cambios de estado', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Verificar que los elementos interactivos tienen estados claros
            const buttons = _react1.screen.getAllByRole('button');
            buttons.forEach((button)=>{
                // No debe tener aria-disabled sin razón
                expect(button).not.toHaveAttribute('aria-disabled', 'true');
            });
        });
    });
    describe('Responsive Accessibility', ()=>{
        it('debe mantener accesibilidad en mobile', ()=>{
            // Simular viewport mobile
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Verificar que sigue siendo accesible
            expect(_react1.screen.getByRole('banner')).toBeInTheDocument();
            expect(_react1.screen.getByRole('searchbox')).toBeInTheDocument();
        });
        it('debe adaptar tamaños de touch targets', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            const buttons = _react1.screen.getAllByRole('button');
            // Los botones deben tener tamaño mínimo de 44px (WCAG)
            buttons.forEach((button)=>{
                const computedStyle = window.getComputedStyle(button);
                // En tests, verificamos que tienen padding apropiado
                expect(button).toHaveStyle('padding: 0.5rem'); // p-2 = 8px = suficiente para 44px total
            });
        });
    });
    describe('Compatibilidad con Tecnologías Asistivas', ()=>{
        it('debe funcionar con lectores de pantalla', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Verificar que todos los elementos interactivos tienen nombres accesibles
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toHaveAccessibleName();
            const buttons = _react1.screen.getAllByRole('button');
            buttons.forEach((button)=>{
                expect(button).toHaveAccessibleName();
            });
        });
        it('debe soportar navegación por voz', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {})
            }));
            // Los elementos deben tener nombres únicos y descriptivos
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toHaveAttribute('aria-label', 'Buscar productos de pinturería');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,