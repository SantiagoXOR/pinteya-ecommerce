{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\rate-limiting\\enterprise-middleware.ts"],"sourcesContent":["/**\n * Middleware Enterprise de Rate Limiting\n * Integra rate limiting con utilidades enterprise y sistema de autenticación\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  checkEnterpriseRateLimit,\n  ENTERPRISE_RATE_LIMIT_CONFIGS,\n  type EnterpriseRateLimitConfig,\n  type EnterpriseRateLimitResult,\n  metricsCollector\n} from './enterprise-rate-limiter';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface RateLimitMiddlewareOptions {\n  configName: keyof typeof ENTERPRISE_RATE_LIMIT_CONFIGS;\n  customConfig?: Partial<EnterpriseRateLimitConfig>;\n  skipIf?: (request: NextRequest | NextApiRequest) => boolean;\n  onLimitExceeded?: (result: EnterpriseRateLimitResult, request: NextRequest | NextApiRequest) => void;\n  enableEnterpriseIntegration?: boolean;\n  enableMetrics?: boolean;\n  enableLogging?: boolean;\n}\n\nexport interface RateLimitResponse {\n  success: boolean;\n  result?: EnterpriseRateLimitResult;\n  response?: NextResponse;\n  error?: string;\n  code?: string;\n}\n\n// =====================================================\n// MIDDLEWARE PARA NEXT.JS APP ROUTER\n// =====================================================\n\n/**\n * Middleware de rate limiting para Next.js App Router\n */\nexport function withEnterpriseRateLimit(options: RateLimitMiddlewareOptions) {\n  return function <T extends any[]>(\n    handler: (request: NextRequest, ...args: T) => Promise<NextResponse> | NextResponse\n  ) {\n    return async (request: NextRequest, ...args: T): Promise<NextResponse> => {\n      try {\n        // Verificar si debe saltarse el rate limiting\n        if (options.skipIf && options.skipIf(request)) {\n          return await handler(request, ...args);\n        }\n\n        // Verificar rate limit\n        const rateLimitResult = await checkEnterpriseRateLimit(\n          request,\n          options.configName,\n          options.customConfig\n        );\n\n        // Si el límite fue excedido\n        if (!rateLimitResult.allowed) {\n          // ENTERPRISE: Registrar evento de seguridad\n          try {\n            await enterpriseAuditSystem.logEnterpriseEvent({\n              user_id: request.headers.get('x-clerk-user-id') || 'anonymous',\n              event_type: 'SECURITY_VIOLATION',\n              event_category: 'suspicious_behavior',\n              severity: 'medium',\n              description: `Rate limit excedido en ${request.nextUrl.pathname}`,\n              metadata: {\n                endpoint: request.nextUrl.pathname,\n                method: request.method,\n                config: options.configName,\n                limit: rateLimitResult.limit,\n                remaining: rateLimitResult.remaining,\n                source: rateLimitResult.source\n              },\n              ip_address: request.headers.get('x-forwarded-for') || 'unknown',\n              user_agent: request.headers.get('user-agent') || 'unknown'\n            }, undefined, request);\n          } catch (auditError) {\n            console.error('[RATE_LIMIT_AUDIT] Error registrando evento:', auditError);\n          }\n\n          // Callback personalizado\n          if (options.onLimitExceeded) {\n            options.onLimitExceeded(rateLimitResult, request);\n          }\n\n          // Logging si está habilitado\n          if (options.enableLogging !== false) {\n            console.warn(`[RATE_LIMIT_MIDDLEWARE] Límite excedido para ${request.nextUrl.pathname}`, {\n              ip: request.headers.get('x-forwarded-for') || 'unknown',\n              userAgent: request.headers.get('user-agent'),\n              limit: rateLimitResult.limit,\n              remaining: rateLimitResult.remaining,\n              resetTime: new Date(rateLimitResult.resetTime).toISOString()\n            });\n          }\n\n          // Crear respuesta de error con headers de rate limiting\n          const response = NextResponse.json(\n            {\n              error: ENTERPRISE_RATE_LIMIT_CONFIGS[options.configName].message || 'Rate limit exceeded',\n              code: 'RATE_LIMIT_EXCEEDED',\n              details: {\n                limit: rateLimitResult.limit,\n                remaining: rateLimitResult.remaining,\n                resetTime: rateLimitResult.resetTime,\n                retryAfter: rateLimitResult.retryAfter\n              },\n              enterprise: true,\n              timestamp: new Date().toISOString()\n            },\n            { status: 429 }\n          );\n\n          // Añadir headers de rate limiting\n          addRateLimitHeaders(response, rateLimitResult);\n\n          return response;\n        }\n\n        // Ejecutar handler original\n        const response = await handler(request, ...args);\n\n        // Añadir headers de rate limiting a respuesta exitosa\n        if (response) {\n          addRateLimitHeaders(response, rateLimitResult);\n        }\n\n        return response;\n      } catch (error) {\n        console.error('[RATE_LIMIT_MIDDLEWARE] Error:', error);\n        \n        // En caso de error, ejecutar handler sin rate limiting\n        return await handler(request, ...args);\n      }\n    };\n  };\n}\n\n// =====================================================\n// MIDDLEWARE PARA PAGES API\n// =====================================================\n\n/**\n * Middleware de rate limiting para Pages API\n */\nexport function withEnterpriseRateLimitAPI(options: RateLimitMiddlewareOptions) {\n  return function (\n    handler: (req: NextApiRequest, res: NextApiResponse) => Promise<void> | void\n  ) {\n    return async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n      try {\n        // Verificar si debe saltarse el rate limiting\n        if (options.skipIf && options.skipIf(req)) {\n          return await handler(req, res);\n        }\n\n        // Verificar rate limit\n        const rateLimitResult = await checkEnterpriseRateLimit(\n          req,\n          options.configName,\n          options.customConfig\n        );\n\n        // Añadir headers de rate limiting\n        addRateLimitHeadersAPI(res, rateLimitResult);\n\n        // Si el límite fue excedido\n        if (!rateLimitResult.allowed) {\n          // Callback personalizado\n          if (options.onLimitExceeded) {\n            options.onLimitExceeded(rateLimitResult, req);\n          }\n\n          // Logging si está habilitado\n          if (options.enableLogging !== false) {\n            console.warn(`[RATE_LIMIT_API] Límite excedido para ${req.url}`, {\n              ip: req.headers['x-forwarded-for'] || req.connection?.remoteAddress || 'unknown',\n              userAgent: req.headers['user-agent'],\n              limit: rateLimitResult.limit,\n              remaining: rateLimitResult.remaining\n            });\n          }\n\n          // Responder con error 429\n          res.status(429).json({\n            error: ENTERPRISE_RATE_LIMIT_CONFIGS[options.configName].message || 'Rate limit exceeded',\n            code: 'RATE_LIMIT_EXCEEDED',\n            details: {\n              limit: rateLimitResult.limit,\n              remaining: rateLimitResult.remaining,\n              resetTime: rateLimitResult.resetTime,\n              retryAfter: rateLimitResult.retryAfter\n            },\n            enterprise: true,\n            timestamp: new Date().toISOString()\n          });\n\n          return;\n        }\n\n        // Ejecutar handler original\n        return await handler(req, res);\n      } catch (error) {\n        console.error('[RATE_LIMIT_API] Error:', error);\n        \n        // En caso de error, ejecutar handler sin rate limiting\n        return await handler(req, res);\n      }\n    };\n  };\n}\n\n// =====================================================\n// INTEGRACIÓN CON ENTERPRISE AUTH\n// =====================================================\n\n/**\n * Rate limiting integrado con autenticación enterprise\n */\nexport async function checkRateLimitWithAuth(\n  request: NextRequest | NextApiRequest,\n  enterpriseContext?: EnterpriseAuthContext,\n  configName?: keyof typeof ENTERPRISE_RATE_LIMIT_CONFIGS\n): Promise<RateLimitResponse> {\n  try {\n    // Determinar configuración basada en contexto de autenticación\n    let finalConfigName = configName;\n    let customConfig: Partial<EnterpriseRateLimitConfig> = {};\n\n    if (enterpriseContext && !finalConfigName) {\n      // Seleccionar configuración basada en rol y permisos\n      if (enterpriseContext.role === 'admin') {\n        finalConfigName = 'ADMIN_API';\n      } else if (enterpriseContext.permissions.includes('payment_access')) {\n        finalConfigName = 'PAYMENT_API';\n      } else {\n        finalConfigName = 'PUBLIC_API';\n      }\n\n      // Ajustar límites basado en nivel de seguridad\n      if (enterpriseContext.securityLevel === 'critical') {\n        customConfig.maxRequests = Math.floor((ENTERPRISE_RATE_LIMIT_CONFIGS[finalConfigName].maxRequests || 50) * 0.5);\n      } else if (enterpriseContext.securityLevel === 'high') {\n        customConfig.maxRequests = Math.floor((ENTERPRISE_RATE_LIMIT_CONFIGS[finalConfigName].maxRequests || 50) * 0.75);\n      }\n\n      // Usar generador de clave por usuario si está autenticado\n      customConfig.keyGenerator = (req) => `user:${enterpriseContext.userId}:${getEndpoint(req)}`;\n    }\n\n    if (!finalConfigName) {\n      finalConfigName = 'PUBLIC_API';\n    }\n\n    // Verificar rate limit\n    const result = await checkEnterpriseRateLimit(request, finalConfigName, customConfig);\n\n    return {\n      success: result.allowed,\n      result,\n      error: result.allowed ? undefined : 'Rate limit exceeded',\n      code: result.allowed ? undefined : 'RATE_LIMIT_EXCEEDED'\n    };\n  } catch (error) {\n    console.error('[RATE_LIMIT_AUTH] Error:', error);\n    \n    return {\n      success: true, // Permitir en caso de error\n      error: 'Error interno en rate limiting',\n      code: 'INTERNAL_ERROR'\n    };\n  }\n}\n\n// =====================================================\n// UTILIDADES\n// =====================================================\n\n/**\n * Añade headers de rate limiting a NextResponse\n */\nfunction addRateLimitHeaders(response: NextResponse, result: EnterpriseRateLimitResult): void {\n  response.headers.set('X-RateLimit-Limit', result.limit.toString());\n  response.headers.set('X-RateLimit-Remaining', result.remaining.toString());\n  response.headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\n  \n  if (result.retryAfter) {\n    response.headers.set('Retry-After', result.retryAfter.toString());\n  }\n\n  // Headers adicionales enterprise\n  response.headers.set('X-RateLimit-Source', result.source);\n  \n  if (result.metrics) {\n    response.headers.set('X-RateLimit-Response-Time', result.metrics.responseTime.toString());\n  }\n}\n\n/**\n * Añade headers de rate limiting a NextApiResponse\n */\nfunction addRateLimitHeadersAPI(res: NextApiResponse, result: EnterpriseRateLimitResult): void {\n  res.setHeader('X-RateLimit-Limit', result.limit.toString());\n  res.setHeader('X-RateLimit-Remaining', result.remaining.toString());\n  res.setHeader('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\n  \n  if (result.retryAfter) {\n    res.setHeader('Retry-After', result.retryAfter.toString());\n  }\n\n  // Headers adicionales enterprise\n  res.setHeader('X-RateLimit-Source', result.source);\n  \n  if (result.metrics) {\n    res.setHeader('X-RateLimit-Response-Time', result.metrics.responseTime.toString());\n  }\n}\n\n/**\n * Obtiene el endpoint de la request\n */\nfunction getEndpoint(request: NextRequest | NextApiRequest): string {\n  if ('nextUrl' in request) {\n    return (request as NextRequest).nextUrl.pathname;\n  } else if ('url' in request) {\n    try {\n      const url = new URL((request as NextApiRequest).url || '', 'http://localhost');\n      return url.pathname;\n    } catch {\n      return '/unknown';\n    }\n  }\n  \n  return '/unknown';\n}\n\n// =====================================================\n// FUNCIONES DE CONVENIENCIA\n// =====================================================\n\n/**\n * Rate limiting para APIs críticas de autenticación\n */\nexport const withCriticalAuthRateLimit = () => \n  withEnterpriseRateLimit({ configName: 'CRITICAL_AUTH' });\n\n/**\n * Rate limiting para APIs administrativas\n */\nexport const withAdminRateLimit = () => \n  withEnterpriseRateLimit({ configName: 'ADMIN_API' });\n\n/**\n * Rate limiting para APIs de pagos\n */\nexport const withPaymentRateLimit = () => \n  withEnterpriseRateLimit({ configName: 'PAYMENT_API' });\n\n/**\n * Rate limiting para APIs públicas\n */\nexport const withPublicRateLimit = () => \n  withEnterpriseRateLimit({ configName: 'PUBLIC_API' });\n\n/**\n * Rate limiting para webhooks\n */\nexport const withWebhookRateLimit = () => \n  withEnterpriseRateLimit({ configName: 'WEBHOOK_API' });\n\n/**\n * Obtener métricas de rate limiting\n */\nexport function getRateLimitMetrics() {\n  return metricsCollector.getMetrics();\n}\n\n/**\n * Resetear métricas de rate limiting\n */\nexport function resetRateLimitMetrics() {\n  metricsCollector.reset();\n}\n"],"names":["checkRateLimitWithAuth","getRateLimitMetrics","resetRateLimitMetrics","withAdminRateLimit","withCriticalAuthRateLimit","withEnterpriseRateLimit","withEnterpriseRateLimitAPI","withPaymentRateLimit","withPublicRateLimit","withWebhookRateLimit","options","handler","request","args","skipIf","rateLimitResult","checkEnterpriseRateLimit","configName","customConfig","allowed","enterpriseAuditSystem","logEnterpriseEvent","user_id","headers","get","event_type","event_category","severity","description","nextUrl","pathname","metadata","endpoint","method","config","limit","remaining","source","ip_address","user_agent","undefined","auditError","console","error","onLimitExceeded","enableLogging","warn","ip","userAgent","resetTime","Date","toISOString","response","NextResponse","json","ENTERPRISE_RATE_LIMIT_CONFIGS","message","code","details","retryAfter","enterprise","timestamp","status","addRateLimitHeaders","req","res","addRateLimitHeadersAPI","url","connection","remoteAddress","enterpriseContext","finalConfigName","role","permissions","includes","securityLevel","maxRequests","Math","floor","keyGenerator","userId","getEndpoint","result","success","set","toString","ceil","metrics","responseTime","setHeader","URL","metricsCollector","getMetrics","reset"],"mappings":"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"}