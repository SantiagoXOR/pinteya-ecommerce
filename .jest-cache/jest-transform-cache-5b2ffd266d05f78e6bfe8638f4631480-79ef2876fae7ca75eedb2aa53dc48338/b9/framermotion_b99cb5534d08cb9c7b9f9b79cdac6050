261d8b2f552800a559dac9aedf1fc982
// ===================================
// PINTEYA E-COMMERCE - MOCK DE FRAMER MOTION PARA TESTS
// ===================================
"use strict";
const React = require('react');
// Mock de motion components
const motion = {
    div: React.forwardRef(({ children, ...props }, ref)=>React.createElement('div', {
            ...props,
            ref
        }, children)),
    button: React.forwardRef(({ children, ...props }, ref)=>React.createElement('button', {
            ...props,
            ref
        }, children)),
    span: React.forwardRef(({ children, ...props }, ref)=>React.createElement('span', {
            ...props,
            ref
        }, children)),
    img: React.forwardRef(({ children, ...props }, ref)=>React.createElement('img', {
            ...props,
            ref
        }, children))
};
// Mock de AnimatePresence
const AnimatePresence = ({ children })=>children;
// Mock de useAnimation
const useAnimation = ()=>({
        start: jest.fn().mockResolvedValue(undefined),
        stop: jest.fn(),
        set: jest.fn()
    });
// Mock de useMotionValue
const useMotionValue = (initialValue)=>({
        get: jest.fn(()=>initialValue),
        set: jest.fn(),
        onChange: jest.fn(),
        destroy: jest.fn()
    });
// Mock de useTransform
const useTransform = (value, inputRange, outputRange)=>({
        get: jest.fn(()=>outputRange[0]),
        set: jest.fn()
    });
// Mock de useSpring
const useSpring = (value, config)=>({
        get: jest.fn(()=>value),
        set: jest.fn()
    });
// Mock de useCycle
const useCycle = (...items)=>[
        items[0],
        jest.fn(()=>items[1])
    ];
// Mock de useAnimationFrame
const useAnimationFrame = (callback)=>{
// No hacer nada en tests
};
// Mock de useViewportScroll
const useViewportScroll = ()=>({
        scrollX: {
            get: jest.fn(()=>0)
        },
        scrollY: {
            get: jest.fn(()=>0)
        },
        scrollXProgress: {
            get: jest.fn(()=>0)
        },
        scrollYProgress: {
            get: jest.fn(()=>0)
        }
    });
// Mock de useElementScroll
const useElementScroll = ()=>({
        scrollX: {
            get: jest.fn(()=>0)
        },
        scrollY: {
            get: jest.fn(()=>0)
        },
        scrollXProgress: {
            get: jest.fn(()=>0)
        },
        scrollYProgress: {
            get: jest.fn(()=>0)
        }
    });
// Mock de useDragControls
const useDragControls = ()=>({
        start: jest.fn()
    });
// Mock de useAnimationControls
const useAnimationControls = ()=>({
        start: jest.fn().mockResolvedValue(undefined),
        stop: jest.fn(),
        set: jest.fn(),
        mount: jest.fn(),
        unmount: jest.fn()
    });
module.exports = {
    motion,
    AnimatePresence,
    useAnimation,
    useMotionValue,
    useTransform,
    useSpring,
    useCycle,
    useAnimationFrame,
    useViewportScroll,
    useElementScroll,
    useDragControls,
    useAnimationControls,
    // Aliases
    useAnimationControls: useAnimationControls
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXF9fbW9ja3NfX1xcZnJhbWVyLW1vdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gUElOVEVZQSBFLUNPTU1FUkNFIC0gTU9DSyBERSBGUkFNRVIgTU9USU9OIFBBUkEgVEVTVFNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLy8gTW9jayBkZSBtb3Rpb24gY29tcG9uZW50c1xuY29uc3QgbW90aW9uID0ge1xuICBkaXY6IFJlYWN0LmZvcndhcmRSZWYoKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0sIHJlZikgPT4gXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyAuLi5wcm9wcywgcmVmIH0sIGNoaWxkcmVuKVxuICApLFxuICBidXR0b246IFJlYWN0LmZvcndhcmRSZWYoKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0sIHJlZikgPT4gXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgeyAuLi5wcm9wcywgcmVmIH0sIGNoaWxkcmVuKVxuICApLFxuICBzcGFuOiBSZWFjdC5mb3J3YXJkUmVmKCh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9LCByZWYpID0+IFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IC4uLnByb3BzLCByZWYgfSwgY2hpbGRyZW4pXG4gICksXG4gIGltZzogUmVhY3QuZm9yd2FyZFJlZigoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgcmVmKSA9PiBcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IC4uLnByb3BzLCByZWYgfSwgY2hpbGRyZW4pXG4gICksXG59O1xuXG4vLyBNb2NrIGRlIEFuaW1hdGVQcmVzZW5jZVxuY29uc3QgQW5pbWF0ZVByZXNlbmNlID0gKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW47XG5cbi8vIE1vY2sgZGUgdXNlQW5pbWF0aW9uXG5jb25zdCB1c2VBbmltYXRpb24gPSAoKSA9PiAoe1xuICBzdGFydDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gIHN0b3A6IGplc3QuZm4oKSxcbiAgc2V0OiBqZXN0LmZuKCksXG59KTtcblxuLy8gTW9jayBkZSB1c2VNb3Rpb25WYWx1ZVxuY29uc3QgdXNlTW90aW9uVmFsdWUgPSAoaW5pdGlhbFZhbHVlKSA9PiAoe1xuICBnZXQ6IGplc3QuZm4oKCkgPT4gaW5pdGlhbFZhbHVlKSxcbiAgc2V0OiBqZXN0LmZuKCksXG4gIG9uQ2hhbmdlOiBqZXN0LmZuKCksXG4gIGRlc3Ryb3k6IGplc3QuZm4oKSxcbn0pO1xuXG4vLyBNb2NrIGRlIHVzZVRyYW5zZm9ybVxuY29uc3QgdXNlVHJhbnNmb3JtID0gKHZhbHVlLCBpbnB1dFJhbmdlLCBvdXRwdXRSYW5nZSkgPT4gKHtcbiAgZ2V0OiBqZXN0LmZuKCgpID0+IG91dHB1dFJhbmdlWzBdKSxcbiAgc2V0OiBqZXN0LmZuKCksXG59KTtcblxuLy8gTW9jayBkZSB1c2VTcHJpbmdcbmNvbnN0IHVzZVNwcmluZyA9ICh2YWx1ZSwgY29uZmlnKSA9PiAoe1xuICBnZXQ6IGplc3QuZm4oKCkgPT4gdmFsdWUpLFxuICBzZXQ6IGplc3QuZm4oKSxcbn0pO1xuXG4vLyBNb2NrIGRlIHVzZUN5Y2xlXG5jb25zdCB1c2VDeWNsZSA9ICguLi5pdGVtcykgPT4gW1xuICBpdGVtc1swXSxcbiAgamVzdC5mbigoKSA9PiBpdGVtc1sxXSksXG5dO1xuXG4vLyBNb2NrIGRlIHVzZUFuaW1hdGlvbkZyYW1lXG5jb25zdCB1c2VBbmltYXRpb25GcmFtZSA9IChjYWxsYmFjaykgPT4ge1xuICAvLyBObyBoYWNlciBuYWRhIGVuIHRlc3RzXG59O1xuXG4vLyBNb2NrIGRlIHVzZVZpZXdwb3J0U2Nyb2xsXG5jb25zdCB1c2VWaWV3cG9ydFNjcm9sbCA9ICgpID0+ICh7XG4gIHNjcm9sbFg6IHsgZ2V0OiBqZXN0LmZuKCgpID0+IDApIH0sXG4gIHNjcm9sbFk6IHsgZ2V0OiBqZXN0LmZuKCgpID0+IDApIH0sXG4gIHNjcm9sbFhQcm9ncmVzczogeyBnZXQ6IGplc3QuZm4oKCkgPT4gMCkgfSxcbiAgc2Nyb2xsWVByb2dyZXNzOiB7IGdldDogamVzdC5mbigoKSA9PiAwKSB9LFxufSk7XG5cbi8vIE1vY2sgZGUgdXNlRWxlbWVudFNjcm9sbFxuY29uc3QgdXNlRWxlbWVudFNjcm9sbCA9ICgpID0+ICh7XG4gIHNjcm9sbFg6IHsgZ2V0OiBqZXN0LmZuKCgpID0+IDApIH0sXG4gIHNjcm9sbFk6IHsgZ2V0OiBqZXN0LmZuKCgpID0+IDApIH0sXG4gIHNjcm9sbFhQcm9ncmVzczogeyBnZXQ6IGplc3QuZm4oKCkgPT4gMCkgfSxcbiAgc2Nyb2xsWVByb2dyZXNzOiB7IGdldDogamVzdC5mbigoKSA9PiAwKSB9LFxufSk7XG5cbi8vIE1vY2sgZGUgdXNlRHJhZ0NvbnRyb2xzXG5jb25zdCB1c2VEcmFnQ29udHJvbHMgPSAoKSA9PiAoe1xuICBzdGFydDogamVzdC5mbigpLFxufSk7XG5cbi8vIE1vY2sgZGUgdXNlQW5pbWF0aW9uQ29udHJvbHNcbmNvbnN0IHVzZUFuaW1hdGlvbkNvbnRyb2xzID0gKCkgPT4gKHtcbiAgc3RhcnQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICBzdG9wOiBqZXN0LmZuKCksXG4gIHNldDogamVzdC5mbigpLFxuICBtb3VudDogamVzdC5mbigpLFxuICB1bm1vdW50OiBqZXN0LmZuKCksXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1vdGlvbixcbiAgQW5pbWF0ZVByZXNlbmNlLFxuICB1c2VBbmltYXRpb24sXG4gIHVzZU1vdGlvblZhbHVlLFxuICB1c2VUcmFuc2Zvcm0sXG4gIHVzZVNwcmluZyxcbiAgdXNlQ3ljbGUsXG4gIHVzZUFuaW1hdGlvbkZyYW1lLFxuICB1c2VWaWV3cG9ydFNjcm9sbCxcbiAgdXNlRWxlbWVudFNjcm9sbCxcbiAgdXNlRHJhZ0NvbnRyb2xzLFxuICB1c2VBbmltYXRpb25Db250cm9scyxcbiAgLy8gQWxpYXNlc1xuICB1c2VBbmltYXRpb25Db250cm9sczogdXNlQW5pbWF0aW9uQ29udHJvbHMsXG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIm1vdGlvbiIsImRpdiIsImZvcndhcmRSZWYiLCJjaGlsZHJlbiIsInByb3BzIiwicmVmIiwiY3JlYXRlRWxlbWVudCIsImJ1dHRvbiIsInNwYW4iLCJpbWciLCJBbmltYXRlUHJlc2VuY2UiLCJ1c2VBbmltYXRpb24iLCJzdGFydCIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidW5kZWZpbmVkIiwic3RvcCIsInNldCIsInVzZU1vdGlvblZhbHVlIiwiaW5pdGlhbFZhbHVlIiwiZ2V0Iiwib25DaGFuZ2UiLCJkZXN0cm95IiwidXNlVHJhbnNmb3JtIiwidmFsdWUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJ1c2VTcHJpbmciLCJjb25maWciLCJ1c2VDeWNsZSIsIml0ZW1zIiwidXNlQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInVzZVZpZXdwb3J0U2Nyb2xsIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJzY3JvbGxYUHJvZ3Jlc3MiLCJzY3JvbGxZUHJvZ3Jlc3MiLCJ1c2VFbGVtZW50U2Nyb2xsIiwidXNlRHJhZ0NvbnRyb2xzIiwidXNlQW5pbWF0aW9uQ29udHJvbHMiLCJtb3VudCIsInVubW91bnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMsd0RBQXdEO0FBQ3hELHNDQUFzQzs7QUFFdEMsTUFBTUEsUUFBUUMsUUFBUTtBQUV0Qiw0QkFBNEI7QUFDNUIsTUFBTUMsU0FBUztJQUNiQyxLQUFLSCxNQUFNSSxVQUFVLENBQUMsQ0FBQyxFQUFFQyxRQUFRLEVBQUUs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