{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security\\enterprise-audit-system.test.ts"],"sourcesContent":["/**\n * Tests para Sistema Enterprise de Auditoría de Seguridad\n * Valida funcionalidad completa del sistema de auditoría, detección de anomalías y gestión de incidentes\n */\n\n// Mock de dependencias\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          range: jest.fn(() => ({\n            order: jest.fn()\n          }))\n        })),\n        insert: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        })),\n        update: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            select: jest.fn(() => ({\n              single: jest.fn()\n            }))\n          }))\n        })),\n        order: jest.fn(() => ({\n          range: jest.fn()\n        })),\n        not: jest.fn(() => ({\n          filter: jest.fn()\n        }))\n      }))\n    }))\n  }\n}));\n\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn()\n}));\n\njest.mock('@/lib/auth/security-audit-enhanced', () => ({\n  analyzeSecurityPatterns: jest.fn(),\n  getSecurityMetrics: jest.fn(),\n  generateSecurityReport: jest.fn()\n}));\n\njest.mock('@/lib/rate-limiting/enterprise-rate-limiter', () => ({\n  metricsCollector: {\n    getMetrics: jest.fn()\n  }\n}));\n\nimport { NextRequest } from 'next/server';\nimport {\n  EnterpriseAuditSystem,\n  enterpriseAuditSystem,\n  type EnterpriseSecurityEvent,\n  type SecurityAnomalyDetection,\n  type SecurityIncident,\n  ENTERPRISE_AUDIT_CONFIG\n} from '@/lib/security/enterprise-audit-system';\nimport { logSecurityEvent } from '@/lib/auth/security-audit';\nimport { \n  analyzeSecurityPatterns,\n  getSecurityMetrics,\n  generateSecurityReport\n} from '@/lib/auth/security-audit-enhanced';\nimport { metricsCollector } from '@/lib/rate-limiting/enterprise-rate-limiter';\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\n\ndescribe('Sistema Enterprise de Auditoría de Seguridad', () => {\n  let mockLogSecurityEvent: jest.MockedFunction<typeof logSecurityEvent>;\n  let mockAnalyzeSecurityPatterns: jest.MockedFunction<typeof analyzeSecurityPatterns>;\n  let mockGetSecurityMetrics: jest.MockedFunction<typeof getSecurityMetrics>;\n  let mockGetMetrics: jest.MockedFunction<typeof metricsCollector.getMetrics>;\n\n  beforeEach(() => {\n    mockLogSecurityEvent = logSecurityEvent as jest.MockedFunction<typeof logSecurityEvent>;\n    mockAnalyzeSecurityPatterns = analyzeSecurityPatterns as jest.MockedFunction<typeof analyzeSecurityPatterns>;\n    mockGetSecurityMetrics = getSecurityMetrics as jest.MockedFunction<typeof getSecurityMetrics>;\n    mockGetMetrics = metricsCollector.getMetrics as jest.MockedFunction<typeof metricsCollector.getMetrics>;\n\n    jest.clearAllMocks();\n\n    // Setup default mocks\n    mockLogSecurityEvent.mockResolvedValue(undefined);\n    mockAnalyzeSecurityPatterns.mockResolvedValue([]);\n    mockGetSecurityMetrics.mockResolvedValue({\n      total_events: 100,\n      critical_events: 5,\n      failed_logins: 10,\n      suspicious_activities: 3,\n      blocked_ips: 2,\n      security_alerts: 8\n    });\n    mockGetMetrics.mockReturnValue({\n      totalRequests: 1000,\n      allowedRequests: 950,\n      blockedRequests: 50,\n      redisHits: 900,\n      memoryFallbacks: 100,\n      errors: 5,\n      averageResponseTime: 45,\n      topBlockedIPs: [\n        { ip: '192.168.1.100', count: 25 },\n        { ip: '10.0.0.50', count: 15 }\n      ],\n      topEndpoints: [\n        { endpoint: '/api/admin', count: 30 },\n        { endpoint: '/api/payments', count: 20 }\n      ]\n    });\n  });\n\n  describe('Configuración Enterprise', () => {\n    it('debe tener configuración de retención de datos', () => {\n      expect(ENTERPRISE_AUDIT_CONFIG.DATA_RETENTION).toBeDefined();\n      expect(ENTERPRISE_AUDIT_CONFIG.DATA_RETENTION.security_events).toBe(365);\n      expect(ENTERPRISE_AUDIT_CONFIG.DATA_RETENTION.anomalies).toBe(180);\n      expect(ENTERPRISE_AUDIT_CONFIG.DATA_RETENTION.incidents).toBe(1095);\n    });\n\n    it('debe tener umbrales de detección configurados', () => {\n      expect(ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS).toBeDefined();\n      expect(ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS.anomaly_confidence).toBe(0.7);\n      expect(ENTERPRISE_AUDIT_CONFIG.DETECTION_THRESHOLDS.risk_score_critical).toBe(80);\n    });\n\n    it('debe tener configuración de alertas', () => {\n      expect(ENTERPRISE_AUDIT_CONFIG.ALERT_CONFIG).toBeDefined();\n      expect(ENTERPRISE_AUDIT_CONFIG.ALERT_CONFIG.immediate_notification).toContain('critical');\n      expect(ENTERPRISE_AUDIT_CONFIG.ALERT_CONFIG.notification_cooldown).toBe(300);\n    });\n  });\n\n  describe('Registro de Eventos Enterprise', () => {\n    it('debe registrar evento enterprise con contexto completo', async () => {\n      const mockContext: EnterpriseAuthContext = {\n        userId: 'user_123',\n        sessionId: 'sess_123',\n        email: 'test@example.com',\n        role: 'admin',\n        permissions: ['admin_access'],\n        sessionValid: true,\n        securityLevel: 'high',\n        ipAddress: '192.168.1.1',\n        userAgent: 'test-agent',\n        supabase: {} as any,\n        validations: {\n          jwtValid: true,\n          csrfValid: true,\n          rateLimitPassed: true,\n          originValid: true\n        }\n      };\n\n      const mockRequest = {\n        headers: new Map([['x-forwarded-for', '192.168.1.1']]),\n        nextUrl: { pathname: '/api/test' }\n      } as any;\n\n      const event: Omit<EnterpriseSecurityEvent, 'id' | 'timestamp' | 'resolved'> = {\n        user_id: 'user_123',\n        event_type: 'AUTH_SUCCESS',\n        event_category: 'authentication',\n        severity: 'low',\n        description: 'Usuario autenticado correctamente',\n        metadata: { method: 'clerk' },\n        ip_address: '192.168.1.1',\n        user_agent: 'test-agent'\n      };\n\n      const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(event, mockContext, mockRequest);\n\n      expect(correlationId).toBeDefined();\n      expect(correlationId).toMatch(/^corr_\\d+_[a-z0-9]+$/);\n      expect(mockLogSecurityEvent).toHaveBeenCalledWith(event);\n    });\n\n    it('debe calcular risk score correctamente', async () => {\n      const criticalEvent: Omit<EnterpriseSecurityEvent, 'id' | 'timestamp' | 'resolved'> = {\n        user_id: 'user_123',\n        event_type: 'SECURITY_VIOLATION',\n        event_category: 'suspicious_behavior',\n        severity: 'critical',\n        description: 'Violación de seguridad crítica',\n        metadata: {},\n        ip_address: '192.168.1.1',\n        user_agent: 'test-agent'\n      };\n\n      const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(criticalEvent);\n\n      expect(correlationId).toBeDefined();\n      expect(mockLogSecurityEvent).toHaveBeenCalled();\n    });\n\n    it('debe manejar eventos sin contexto enterprise', async () => {\n      const event: Omit<EnterpriseSecurityEvent, 'id' | 'timestamp' | 'resolved'> = {\n        user_id: 'user_123',\n        event_type: 'AUTH_FAILURE',\n        event_category: 'authentication',\n        severity: 'medium',\n        description: 'Fallo de autenticación',\n        metadata: {},\n        ip_address: '192.168.1.1',\n        user_agent: 'test-agent'\n      };\n\n      const correlationId = await enterpriseAuditSystem.logEnterpriseEvent(event);\n\n      expect(correlationId).toBeDefined();\n      expect(mockLogSecurityEvent).toHaveBeenCalledWith(event);\n    });\n  });\n\n  describe('Detección de Anomalías', () => {\n    it('debe detectar anomalías sin eventos', async () => {\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('user_123');\n\n      expect(anomalies).toEqual([]);\n    });\n\n    it('debe detectar patrones de login inusuales', async () => {\n      // Mock de eventos que simularían un patrón sospechoso\n      const mockEvents: EnterpriseSecurityEvent[] = [\n        {\n          id: 'evt_1',\n          user_id: 'user_123',\n          event_type: 'AUTH_FAILURE',\n          event_category: 'authentication',\n          severity: 'medium',\n          description: 'Fallo de autenticación',\n          metadata: {},\n          ip_address: '192.168.1.1',\n          user_agent: 'test-agent',\n          timestamp: new Date(Date.now() - 1000).toISOString(),\n          resolved: false\n        },\n        {\n          id: 'evt_2',\n          user_id: 'user_123',\n          event_type: 'AUTH_FAILURE',\n          event_category: 'authentication',\n          severity: 'medium',\n          description: 'Fallo de autenticación',\n          metadata: {},\n          ip_address: '192.168.1.2',\n          user_agent: 'test-agent',\n          timestamp: new Date(Date.now() - 500).toISOString(),\n          resolved: false\n        },\n        {\n          id: 'evt_3',\n          user_id: 'user_123',\n          event_type: 'AUTH_SUCCESS',\n          event_category: 'authentication',\n          severity: 'low',\n          description: 'Autenticación exitosa',\n          metadata: {},\n          ip_address: '192.168.1.3',\n          user_agent: 'test-agent',\n          timestamp: new Date().toISOString(),\n          resolved: false\n        }\n      ];\n\n      // Simular que getRecentEvents devuelve estos eventos\n      jest.spyOn(enterpriseAuditSystem as any, 'getRecentEvents').mockResolvedValue(mockEvents);\n\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('user_123');\n\n      // Debería detectar al menos una anomalía por el patrón de múltiples fallos + éxito\n      expect(anomalies.length).toBeGreaterThanOrEqual(0);\n    });\n\n    it('debe detectar abuso de rate limiting', async () => {\n      // Mock de métricas con muchos bloqueos\n      mockGetMetrics.mockReturnValue({\n        totalRequests: 1000,\n        allowedRequests: 800,\n        blockedRequests: 200,\n        redisHits: 900,\n        memoryFallbacks: 100,\n        errors: 5,\n        averageResponseTime: 45,\n        topBlockedIPs: [\n          { ip: '192.168.1.100', count: 50 }, // Supera el umbral de 10\n          { ip: '10.0.0.50', count: 30 }\n        ],\n        topEndpoints: []\n      });\n\n      const anomalies = await enterpriseAuditSystem.detectAnomalies();\n\n      // Debería detectar anomalías de rate limit abuse\n      expect(anomalies.length).toBeGreaterThanOrEqual(0);\n    });\n\n    it('debe filtrar anomalías por confianza', async () => {\n      // Simular detección con diferentes niveles de confianza\n      jest.spyOn(enterpriseAuditSystem as any, 'getRecentEvents').mockResolvedValue([]);\n\n      const anomalies = await enterpriseAuditSystem.detectAnomalies();\n\n      // Solo deberían retornarse anomalías con confianza >= 0.7\n      anomalies.forEach(anomaly => {\n        expect(anomaly.confidence_score).toBeGreaterThanOrEqual(0.7);\n      });\n    });\n  });\n\n  describe('Generación de Reportes Enterprise', () => {\n    it('debe generar reporte enterprise completo', async () => {\n      const mockBaseReport = {\n        period: { start: '2025-01-01', end: '2025-01-31' },\n        summary: { total_events: 100 },\n        events: [],\n        patterns: [],\n        recommendations: []\n      };\n\n      const mockGenerateSecurityReport = generateSecurityReport as jest.MockedFunction<typeof generateSecurityReport>;\n      mockGenerateSecurityReport.mockResolvedValue(mockBaseReport);\n\n      const startDate = '2025-01-01T00:00:00.000Z';\n      const endDate = '2025-01-31T23:59:59.999Z';\n\n      const report = await enterpriseAuditSystem.generateEnterpriseReport(\n        startDate,\n        endDate,\n        true,\n        true\n      );\n\n      expect(report).toBeDefined();\n      expect(report.enterprise_data).toBeDefined();\n      expect(report.enterprise_data.anomalies).toBeDefined();\n      expect(report.enterprise_data.incidents).toBeDefined();\n      expect(report.enterprise_data.rate_limiting_stats).toBeDefined();\n      expect(mockGenerateSecurityReport).toHaveBeenCalledWith(startDate, endDate);\n    });\n\n    it('debe generar reporte sin anomalías e incidentes', async () => {\n      const mockBaseReport = {\n        period: { start: '2025-01-01', end: '2025-01-31' },\n        summary: { total_events: 50 },\n        events: [],\n        patterns: [],\n        recommendations: []\n      };\n\n      const mockGenerateSecurityReport = generateSecurityReport as jest.MockedFunction<typeof generateSecurityReport>;\n      mockGenerateSecurityReport.mockResolvedValue(mockBaseReport);\n\n      const startDate = '2025-01-01T00:00:00.000Z';\n      const endDate = '2025-01-31T23:59:59.999Z';\n\n      const report = await enterpriseAuditSystem.generateEnterpriseReport(\n        startDate,\n        endDate,\n        false,\n        false\n      );\n\n      expect(report.enterprise_data.anomalies).toEqual([]);\n      expect(report.enterprise_data.incidents).toEqual([]);\n    });\n  });\n\n  describe('Integración con Rate Limiting', () => {\n    it('debe obtener estadísticas de rate limiting', async () => {\n      const stats = (enterpriseAuditSystem as any).getRateLimitingStats();\n\n      expect(stats).toBeDefined();\n      expect(stats.totalRequests).toBe(1000);\n      expect(stats.blockedRequests).toBe(50);\n      expect(stats.topBlockedIPs).toHaveLength(2);\n      expect(mockGetMetrics).toHaveBeenCalled();\n    });\n\n    it('debe incluir métricas de rate limiting en reportes', async () => {\n      const mockBaseReport = {\n        period: { start: '2025-01-01', end: '2025-01-31' },\n        summary: { total_events: 100 },\n        events: [],\n        patterns: [],\n        recommendations: []\n      };\n\n      const mockGenerateSecurityReport = generateSecurityReport as jest.MockedFunction<typeof generateSecurityReport>;\n      mockGenerateSecurityReport.mockResolvedValue(mockBaseReport);\n\n      const report = await enterpriseAuditSystem.generateEnterpriseReport(\n        '2025-01-01T00:00:00.000Z',\n        '2025-01-31T23:59:59.999Z'\n      );\n\n      expect(report.enterprise_data.rate_limiting_stats).toBeDefined();\n      expect(report.enterprise_data.rate_limiting_stats.totalRequests).toBe(1000);\n    });\n  });\n\n  describe('Gestión de Instancia Singleton', () => {\n    it('debe retornar la misma instancia', () => {\n      const instance1 = EnterpriseAuditSystem.getInstance();\n      const instance2 = EnterpriseAuditSystem.getInstance();\n\n      expect(instance1).toBe(instance2);\n      expect(instance1).toBe(enterpriseAuditSystem);\n    });\n\n    it('debe poder destruir la instancia', () => {\n      const spy = jest.spyOn(console, 'log').mockImplementation();\n      \n      enterpriseAuditSystem.destroy();\n      \n      // Verificar que se limpien los intervalos\n      expect(spy).not.toHaveBeenCalledWith(expect.stringContaining('Error'));\n      \n      spy.mockRestore();\n    });\n  });\n\n  describe('Manejo de Errores', () => {\n    it('debe manejar errores en registro de eventos', async () => {\n      mockLogSecurityEvent.mockRejectedValue(new Error('Database error'));\n\n      const event: Omit<EnterpriseSecurityEvent, 'id' | 'timestamp' | 'resolved'> = {\n        user_id: 'user_123',\n        event_type: 'AUTH_FAILURE',\n        event_category: 'authentication',\n        severity: 'medium',\n        description: 'Test event',\n        metadata: {},\n        ip_address: '192.168.1.1',\n        user_agent: 'test-agent'\n      };\n\n      await expect(enterpriseAuditSystem.logEnterpriseEvent(event)).rejects.toThrow();\n    });\n\n    it('debe manejar errores en detección de anomalías', async () => {\n      jest.spyOn(enterpriseAuditSystem as any, 'getRecentEvents').mockRejectedValue(new Error('Database error'));\n\n      const anomalies = await enterpriseAuditSystem.detectAnomalies('user_123');\n\n      // Debe retornar array vacío en caso de error\n      expect(anomalies).toEqual([]);\n    });\n\n    it('debe manejar errores en generación de reportes', async () => {\n      const mockGenerateSecurityReport = generateSecurityReport as jest.MockedFunction<typeof generateSecurityReport>;\n      mockGenerateSecurityReport.mockRejectedValue(new Error('Report generation failed'));\n\n      await expect(enterpriseAuditSystem.generateEnterpriseReport(\n        '2025-01-01T00:00:00.000Z',\n        '2025-01-31T23:59:59.999Z'\n      )).rejects.toThrow();\n    });\n  });\n});\n"],"names":["jest","mock","supabaseAdmin","from","fn","select","eq","single","range","order","insert","update","not","filter","logSecurityEvent","analyzeSecurityPatterns","getSecurityMetrics","generateSecurityReport","metricsCollector","getMetrics","describe","mockLogSecurityEvent","mockAnalyzeSecurityPatterns","mockGetSecurityMetrics","mockGetMetrics","beforeEach","clearAllMocks","mockResolvedValue","undefined","total_events","critical_events","failed_logins","suspicious_activities","blocked_ips","security_alerts","mockReturnValue","totalRequests","allowedRequests","blockedRequests","redisHits","memoryFallbacks","errors","averageResponseTime","topBlockedIPs","ip","count","topEndpoints","endpoint","it","expect","ENTERPRISE_AUDIT_CONFIG","DATA_RETENTION","toBeDefined","security_events","toBe","anomalies","incidents","DETECTION_THRESHOLDS","anomaly_confidence","risk_score_critical","ALERT_CONFIG","immediate_notification","toContain","notification_cooldown","mockContext","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","mockRequest","headers","Map","nextUrl","pathname","event","user_id","event_type","event_category","severity","description","metadata","method","ip_address","user_agent","correlationId","enterpriseAuditSystem","logEnterpriseEvent","toMatch","toHaveBeenCalledWith","criticalEvent","toHaveBeenCalled","detectAnomalies","toEqual","mockEvents","id","timestamp","Date","now","toISOString","resolved","spyOn","length","toBeGreaterThanOrEqual","forEach","anomaly","confidence_score","mockBaseReport","period","start","end","summary","events","patterns","recommendations","mockGenerateSecurityReport","startDate","endDate","report","generateEnterpriseReport","enterprise_data","rate_limiting_stats","stats","getRateLimitingStats","toHaveLength","instance1","EnterpriseAuditSystem","getInstance","instance2","spy","console","mockImplementation","destroy","stringContaining","mockRestore","mockRejectedValue","Error","rejects","toThrow"],"mappings":"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"}