{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security-validations.test.ts"],"sourcesContent":["/**\n * Tests para las validaciones de seguridad avanzadas\n * Verifica permisos granulares y contexto de seguridad\n */\n\nimport { NextRequest } from 'next/server';\nimport type { NextApiRequest } from 'next';\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  clerkClient: jest.fn(() => ({\n    users: {\n      getUser: jest.fn()\n    }\n  }))\n}));\n\n// Mock de Supabase\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      insert: jest.fn(() => ({ error: null })),\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          gte: jest.fn(() => ({\n            not: jest.fn(() => ({ data: [], error: null }))\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\nimport {\n  getPermissionsByRole,\n  isValidAdminRole,\n  hasPermission,\n  hasAnyPermission,\n  hasAllPermissions,\n  getSecurityContext,\n  validateSecurityContext,\n  validateProductPermissions,\n  withSecurityValidation\n} from '@/lib/auth/security-validations';\nimport { clerkClient } from '@clerk/nextjs/server';\n\ndescribe('Validaciones de Seguridad', () => {\n  let mockClerkClient: jest.MockedFunction<typeof clerkClient>;\n\n  beforeEach(() => {\n    mockClerkClient = clerkClient as jest.MockedFunction<typeof clerkClient>;\n    jest.clearAllMocks();\n  });\n\n  describe('getPermissionsByRole', () => {\n    it('debe retornar permisos completos para admin', () => {\n      const permissions = getPermissionsByRole('admin');\n      \n      expect(permissions.isAdmin).toBe(true);\n      expect(permissions.canDeleteProducts).toBe(true);\n      expect(permissions.canManageUsers).toBe(true);\n      expect(permissions.canAccessAdmin).toBe(true);\n    });\n\n    it('debe retornar permisos limitados para moderator', () => {\n      const permissions = getPermissionsByRole('moderator');\n      \n      expect(permissions.isAdmin).toBe(false);\n      expect(permissions.isModerator).toBe(true);\n      expect(permissions.canDeleteProducts).toBe(false);\n      expect(permissions.canManageUsers).toBe(false);\n      expect(permissions.canAccessAdmin).toBe(true);\n    });\n\n    it('debe retornar permisos básicos para manager', () => {\n      const permissions = getPermissionsByRole('manager');\n      \n      expect(permissions.isAdmin).toBe(false);\n      expect(permissions.isModerator).toBe(false);\n      expect(permissions.canDeleteProducts).toBe(false);\n      expect(permissions.canAccessAdmin).toBe(true);\n      expect(permissions.canViewAnalytics).toBe(true);\n    });\n\n    it('debe retornar sin permisos para user', () => {\n      const permissions = getPermissionsByRole('user');\n      \n      expect(permissions.isAdmin).toBe(false);\n      expect(permissions.canAccessAdmin).toBe(false);\n      expect(permissions.canReadProducts).toBe(false);\n    });\n\n    it('debe retornar permisos de user para rol desconocido', () => {\n      const permissions = getPermissionsByRole('unknown_role');\n      \n      expect(permissions.isAdmin).toBe(false);\n      expect(permissions.canAccessAdmin).toBe(false);\n    });\n  });\n\n  describe('isValidAdminRole', () => {\n    it('debe validar roles administrativos', () => {\n      expect(isValidAdminRole('admin')).toBe(true);\n      expect(isValidAdminRole('moderator')).toBe(true);\n      expect(isValidAdminRole('manager')).toBe(true);\n    });\n\n    it('debe rechazar roles no administrativos', () => {\n      expect(isValidAdminRole('user')).toBe(false);\n      expect(isValidAdminRole('guest')).toBe(false);\n      expect(isValidAdminRole('')).toBe(false);\n    });\n  });\n\n  describe('hasPermission', () => {\n    it('debe verificar permisos individuales correctamente', () => {\n      const adminPermissions = getPermissionsByRole('admin');\n      const userPermissions = getPermissionsByRole('user');\n\n      expect(hasPermission(adminPermissions, 'canDeleteProducts')).toBe(true);\n      expect(hasPermission(userPermissions, 'canDeleteProducts')).toBe(false);\n    });\n  });\n\n  describe('hasAnyPermission', () => {\n    it('debe verificar que al menos un permiso esté presente', () => {\n      const moderatorPermissions = getPermissionsByRole('moderator');\n\n      expect(hasAnyPermission(moderatorPermissions, ['canDeleteProducts', 'canWriteProducts'])).toBe(true);\n      expect(hasAnyPermission(moderatorPermissions, ['canDeleteProducts', 'canManageUsers'])).toBe(false);\n    });\n  });\n\n  describe('hasAllPermissions', () => {\n    it('debe verificar que todos los permisos estén presentes', () => {\n      const adminPermissions = getPermissionsByRole('admin');\n      const moderatorPermissions = getPermissionsByRole('moderator');\n\n      expect(hasAllPermissions(adminPermissions, ['canReadProducts', 'canWriteProducts'])).toBe(true);\n      expect(hasAllPermissions(moderatorPermissions, ['canReadProducts', 'canDeleteProducts'])).toBe(false);\n    });\n  });\n\n  describe('getSecurityContext', () => {\n    it('debe obtener contexto de seguridad completo', async () => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          department: 'IT',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockImplementation((key) => {\n            if (key === 'x-forwarded-for') return '192.168.1.1';\n            if (key === 'user-agent') return 'Test Browser';\n            return null;\n          })\n        }\n      } as any;\n\n      const context = await getSecurityContext('user_123', mockRequest);\n\n      expect(context).toBeDefined();\n      expect(context?.userId).toBe('user_123');\n      expect(context?.userRole).toBe('admin');\n      expect(context?.permissions.isAdmin).toBe(true);\n      expect(context?.metadata.emailVerified).toBe(true);\n      expect(context?.ipAddress).toBe('192.168.1.1');\n      expect(context?.userAgent).toBe('Test Browser');\n    });\n\n    it('debe manejar usuario no encontrado', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(null)\n        }\n      } as any);\n\n      const context = await getSecurityContext('user_not_found');\n\n      expect(context).toBeNull();\n    });\n\n    it('debe manejar errores de Clerk', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockRejectedValue(new Error('Clerk error'))\n        }\n      } as any);\n\n      const context = await getSecurityContext('user_error');\n\n      expect(context).toBeNull();\n    });\n  });\n\n  describe('validateSecurityContext', () => {\n    beforeEach(() => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n    });\n\n    it('debe validar contexto exitosamente para admin', async () => {\n      const result = await validateSecurityContext(\n        'user_123',\n        'PRODUCT_DELETE',\n        ['canDeleteProducts']\n      );\n\n      expect(result.valid).toBe(true);\n      expect(result.context).toBeDefined();\n      expect(result.context?.permissions.canDeleteProducts).toBe(true);\n    });\n\n    it('debe rechazar permisos insuficientes', async () => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'user',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n\n      const result = await validateSecurityContext(\n        'user_123',\n        'PRODUCT_DELETE',\n        ['canDeleteProducts']\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.code).toBe('INSUFFICIENT_PERMISSIONS');\n      expect(result.severity).toBe('high');\n    });\n\n    it('debe rechazar usuario inactivo', async () => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          isActive: false\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n\n      const result = await validateSecurityContext(\n        'user_123',\n        'PRODUCT_READ',\n        ['canReadProducts']\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.code).toBe('USER_INACTIVE');\n      expect(result.severity).toBe('medium');\n    });\n  });\n\n  describe('validateProductPermissions', () => {\n    beforeEach(() => {\n      const mockUser = {\n        id: 'user_123',\n        publicMetadata: {\n          role: 'admin',\n          isActive: true\n        },\n        emailAddresses: [{\n          verification: { status: 'verified' }\n        }]\n      };\n\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(mockUser)\n        }\n      } as any);\n    });\n\n    it('debe validar permisos de lectura', async () => {\n      const result = await validateProductPermissions('user_123', 'read');\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('debe validar permisos de creación', async () => {\n      const result = await validateProductPermissions('user_123', 'create');\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('debe validar permisos de eliminación', async () => {\n      const result = await validateProductPermissions('user_123', 'delete');\n\n      expect(result.valid).toBe(true);\n    });\n  });\n\n  describe('withSecurityValidation wrapper', () => {\n    it('debe crear wrapper funcional', () => {\n      const mockHandler = jest.fn();\n      const wrappedHandler = withSecurityValidation(['canReadProducts'], 'PRODUCT_READ')(mockHandler);\n\n      expect(typeof wrappedHandler).toBe('function');\n    });\n\n    it('debe rechazar request sin userId', async () => {\n      const mockHandler = jest.fn();\n      const wrappedHandler = withSecurityValidation(['canReadProducts'], 'PRODUCT_READ')(mockHandler);\n\n      const mockRequest = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as any;\n\n      const mockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn()\n      };\n\n      await wrappedHandler(mockRequest, mockResponse);\n\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        error: 'Usuario no autenticado',\n        code: 'AUTH_REQUIRED'\n      });\n    });\n  });\n});\n"],"names":["jest","mock","clerkClient","fn","users","getUser","supabaseAdmin","from","insert","error","select","eq","gte","not","data","describe","mockClerkClient","beforeEach","clearAllMocks","it","permissions","getPermissionsByRole","expect","isAdmin","toBe","canDeleteProducts","canManageUsers","canAccessAdmin","isModerator","canViewAnalytics","canReadProducts","isValidAdminRole","adminPermissions","userPermissions","hasPermission","moderatorPermissions","hasAnyPermission","hasAllPermissions","mockUser","id","publicMetadata","role","department","isActive","emailAddresses","verification","status","mockReturnValue","mockResolvedValue","mockRequest","headers","get","mockImplementation","key","context","getSecurityContext","toBeDefined","userId","userRole","metadata","emailVerified","ipAddress","userAgent","toBeNull","mockRejectedValue","Error","result","validateSecurityContext","valid","code","severity","validateProductPermissions","mockHandler","wrappedHandler","withSecurityValidation","mockResponse","mockReturnThis","json","toHaveBeenCalledWith","success"],"mappings":"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"}