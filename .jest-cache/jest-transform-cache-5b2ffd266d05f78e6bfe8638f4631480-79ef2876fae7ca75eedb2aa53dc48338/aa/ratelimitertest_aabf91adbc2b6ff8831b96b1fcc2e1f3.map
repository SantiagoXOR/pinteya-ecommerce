{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\rate-limiter.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - RATE LIMITER TESTS\r\n// ===================================\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { \r\n  checkRateLimit, \r\n  createRateLimitMiddleware, \r\n  RATE_LIMIT_CONFIGS,\r\n  endpointKeyGenerator,\r\n  userKeyGenerator \r\n} from '@/lib/rate-limiter';\r\n\r\n// Mock Redis\r\njest.mock('@/lib/redis', () => ({\r\n  isRedisAvailable: jest.fn().mockResolvedValue(false), // Usar fallback en memoria para tests\r\n  incrementRateLimit: jest.fn(),\r\n  getRateLimitInfo: jest.fn(),\r\n}));\r\n\r\n// Mock logger\r\njest.mock('@/lib/logger', () => ({\r\n  logger: {\r\n    debug: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn(),\r\n  },\r\n  LogLevel: {\r\n    DEBUG: 'debug',\r\n    WARN: 'warn',\r\n    ERROR: 'error',\r\n  },\r\n  LogCategory: {\r\n    SECURITY: 'security',\r\n  },\r\n}));\r\n\r\ndescribe('Rate Limiter', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Limpiar memoria entre tests\r\n    const memoryStore = (global as any).memoryStore;\r\n    if (memoryStore) {\r\n      memoryStore.clear();\r\n    }\r\n  });\r\n\r\n  describe('checkRateLimit', () => {\r\n    it('should allow requests within limit', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test', {\r\n        headers: { 'x-forwarded-for': '192.168.1.1' },\r\n      });\r\n\r\n      const config = {\r\n        windowMs: 60000,\r\n        maxRequests: 10,\r\n        message: 'Rate limit exceeded',\r\n        standardHeaders: true,\r\n      };\r\n\r\n      const result = await checkRateLimit(request, config);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.limit).toBe(10);\r\n      expect(result.remaining).toBe(9);\r\n      expect(result.retryAfter).toBeUndefined();\r\n    });\r\n\r\n    it('should block requests exceeding limit', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test', {\r\n        headers: { 'x-forwarded-for': '192.168.1.2' },\r\n      });\r\n\r\n      const config = {\r\n        windowMs: 60000,\r\n        maxRequests: 2,\r\n        message: 'Rate limit exceeded',\r\n        standardHeaders: true,\r\n      };\r\n\r\n      // Hacer 3 requests (exceder el límite de 2)\r\n      await checkRateLimit(request, config); // 1\r\n      await checkRateLimit(request, config); // 2\r\n      const result = await checkRateLimit(request, config); // 3 - debería fallar\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.limit).toBe(2);\r\n      expect(result.remaining).toBe(0);\r\n      expect(result.retryAfter).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should reset counter after window expires', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test', {\r\n        headers: { 'x-forwarded-for': '192.168.1.3' },\r\n      });\r\n\r\n      const config = {\r\n        windowMs: 100, // 100ms window para test rápido\r\n        maxRequests: 1,\r\n        message: 'Rate limit exceeded',\r\n        standardHeaders: true,\r\n      };\r\n\r\n      // Primera request\r\n      const result1 = await checkRateLimit(request, config);\r\n      expect(result1.success).toBe(true);\r\n\r\n      // Segunda request inmediata (debería fallar)\r\n      const result2 = await checkRateLimit(request, config);\r\n      expect(result2.success).toBe(false);\r\n\r\n      // Esperar que expire la ventana\r\n      await new Promise(resolve => setTimeout(resolve, 150));\r\n\r\n      // Tercera request después de expirar (debería pasar)\r\n      const result3 = await checkRateLimit(request, config);\r\n      expect(result3.success).toBe(true);\r\n    });\r\n\r\n    it('should use custom key generator', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test', {\r\n        headers: { 'x-forwarded-for': '192.168.1.4' },\r\n      });\r\n\r\n      const customKeyGenerator = jest.fn().mockReturnValue('custom-key');\r\n      const config = {\r\n        windowMs: 60000,\r\n        maxRequests: 5,\r\n        keyGenerator: customKeyGenerator,\r\n        message: 'Rate limit exceeded',\r\n        standardHeaders: true,\r\n      };\r\n\r\n      await checkRateLimit(request, config);\r\n\r\n      expect(customKeyGenerator).toHaveBeenCalledWith(request);\r\n    });\r\n  });\r\n\r\n  describe('Key Generators', () => {\r\n    it('should generate endpoint-specific keys', () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test', {\r\n        headers: { 'x-forwarded-for': '192.168.1.5' },\r\n      });\r\n\r\n      const generator = endpointKeyGenerator('create-preference');\r\n      const key = generator(request);\r\n\r\n      expect(key).toBe('rate_limit:endpoint:create-preference:ip:192.168.1.5');\r\n    });\r\n\r\n    it('should generate user-specific keys', () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test');\r\n      const generator = userKeyGenerator('user-123');\r\n      const key = generator(request);\r\n\r\n      expect(key).toBe('rate_limit:user:user-123');\r\n    });\r\n  });\r\n\r\n  describe('Rate Limit Configs', () => {\r\n    it('should have payment API config', () => {\r\n      const config = RATE_LIMIT_CONFIGS.PAYMENT_API;\r\n      \r\n      expect(config.windowMs).toBe(60000);\r\n      expect(config.maxRequests).toBe(10);\r\n      expect(config.message).toContain('pago');\r\n      expect(config.standardHeaders).toBe(true);\r\n    });\r\n\r\n    it('should have webhook API config', () => {\r\n      const config = RATE_LIMIT_CONFIGS.WEBHOOK_API;\r\n      \r\n      expect(config.windowMs).toBe(60000);\r\n      expect(config.maxRequests).toBe(100);\r\n      expect(config.message).toContain('webhook');\r\n      expect(config.standardHeaders).toBe(true);\r\n    });\r\n\r\n    it('should have authenticated user config', () => {\r\n      const config = RATE_LIMIT_CONFIGS.AUTHENTICATED_USER;\r\n      \r\n      expect(config.windowMs).toBe(60000);\r\n      expect(config.maxRequests).toBe(30);\r\n      expect(config.standardHeaders).toBe(true);\r\n    });\r\n\r\n    it('should have general IP config', () => {\r\n      const config = RATE_LIMIT_CONFIGS.GENERAL_IP;\r\n      \r\n      expect(config.windowMs).toBe(60000);\r\n      expect(config.maxRequests).toBe(50);\r\n      expect(config.standardHeaders).toBe(true);\r\n    });\r\n\r\n    it('should have query API config', () => {\r\n      const config = RATE_LIMIT_CONFIGS.QUERY_API;\r\n      \r\n      expect(config.windowMs).toBe(60000);\r\n      expect(config.maxRequests).toBe(100);\r\n      expect(config.standardHeaders).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('createRateLimitMiddleware', () => {\r\n    it('should return null for allowed requests', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test', {\r\n        headers: { 'x-forwarded-for': '192.168.1.6' },\r\n      });\r\n\r\n      const config = {\r\n        windowMs: 60000,\r\n        maxRequests: 10,\r\n        message: 'Rate limit exceeded',\r\n        standardHeaders: true,\r\n      };\r\n\r\n      const middleware = createRateLimitMiddleware(config);\r\n      const result = await middleware(request);\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should return 429 response for blocked requests', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test', {\r\n        headers: { 'x-forwarded-for': '192.168.1.7' },\r\n      });\r\n\r\n      const config = {\r\n        windowMs: 60000,\r\n        maxRequests: 1,\r\n        message: 'Custom rate limit message',\r\n        standardHeaders: true,\r\n        legacyHeaders: true,\r\n      };\r\n\r\n      const middleware = createRateLimitMiddleware(config);\r\n      \r\n      // Primera request (permitida)\r\n      const result1 = await middleware(request);\r\n      expect(result1).toBeNull();\r\n\r\n      // Segunda request (bloqueada)\r\n      const result2 = await middleware(request);\r\n      expect(result2).not.toBeNull();\r\n      expect(result2!.status).toBe(429);\r\n\r\n      const responseData = await result2!.json();\r\n      expect(responseData.error).toBe('Custom rate limit message');\r\n      expect(responseData.retryAfter).toBeGreaterThan(0);\r\n\r\n      // Verificar headers\r\n      expect(result2!.headers.get('RateLimit-Limit')).toBe('1');\r\n      expect(result2!.headers.get('RateLimit-Remaining')).toBe('0');\r\n      expect(result2!.headers.get('X-RateLimit-Limit')).toBe('1');\r\n      expect(result2!.headers.get('Retry-After')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle missing IP gracefully', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/test');\r\n\r\n      const config = {\r\n        windowMs: 60000,\r\n        maxRequests: 10,\r\n        message: 'Rate limit exceeded',\r\n        standardHeaders: true,\r\n      };\r\n\r\n      const result = await checkRateLimit(request, config);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.limit).toBe(10);\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","isRedisAvailable","fn","mockResolvedValue","incrementRateLimit","getRateLimitInfo","logger","debug","warn","error","LogLevel","DEBUG","WARN","ERROR","LogCategory","SECURITY","describe","beforeEach","clearAllMocks","memoryStore","global","clear","it","request","NextRequest","headers","config","windowMs","maxRequests","message","standardHeaders","result","checkRateLimit","expect","success","toBe","limit","remaining","retryAfter","toBeUndefined","toBeGreaterThan","result1","result2","Promise","resolve","setTimeout","result3","customKeyGenerator","mockReturnValue","keyGenerator","toHaveBeenCalledWith","generator","endpointKeyGenerator","key","userKeyGenerator","RATE_LIMIT_CONFIGS","PAYMENT_API","toContain","WEBHOOK_API","AUTHENTICATED_USER","GENERAL_IP","QUERY_API","middleware","createRateLimitMiddleware","toBeNull","legacyHeaders","not","status","responseData","json","get","toBeTruthy"],"mappings":"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"}