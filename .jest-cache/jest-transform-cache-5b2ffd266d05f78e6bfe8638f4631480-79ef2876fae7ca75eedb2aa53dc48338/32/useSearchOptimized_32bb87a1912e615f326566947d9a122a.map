{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchOptimized.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearchOptimized - Sistema de b√∫squeda con TanStack Query\r\n// ===================================\r\n\r\nimport { useState, useCallback, useEffect, useRef, useMemo } from 'react';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { searchProducts } from '@/lib/api/products';\r\nimport { ProductWithCategory } from '@/types/api';\r\nimport { searchQueryKeys, searchQueryConfig } from '@/lib/query-client';\r\nimport { useSearchErrorHandler } from './useSearchErrorHandler';\r\nimport { useSearchToast } from './useSearchToast';\r\nimport { useSearchNavigation } from './useSearchNavigation';\r\nimport { useTrendingSearches } from './useTrendingSearches';\r\nimport { useRecentSearches } from './useRecentSearches';\r\nimport { SEARCH_CONSTANTS } from '@/constants/shop';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface SearchSuggestion {\r\n  id: string;\r\n  type: 'product' | 'category' | 'recent' | 'trending';\r\n  title: string;\r\n  subtitle?: string;\r\n  image?: string;\r\n  badge?: string;\r\n  href: string;\r\n}\r\n\r\nexport interface UseSearchOptimizedOptions {\r\n  /** Tiempo de debounce en milisegundos */\r\n  debounceMs?: number;\r\n  /** N√∫mero m√°ximo de sugerencias */\r\n  maxSuggestions?: number;\r\n  /** L√≠mite de resultados de b√∫squeda */\r\n  searchLimit?: number;\r\n  /** Guardar b√∫squedas recientes */\r\n  saveRecentSearches?: boolean;\r\n  /** Habilitar prefetch de sugerencias */\r\n  enablePrefetch?: boolean;\r\n  /** Callback cuando se realiza una b√∫squeda */\r\n  onSearch?: (query: string, results: ProductWithCategory[]) => void;\r\n  /** Callback cuando se selecciona una sugerencia */\r\n  onSuggestionSelect?: (suggestion: SearchSuggestion) => void;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchOptimized(options: UseSearchOptimizedOptions = {}) {\r\n  const {\r\n    debounceMs = 150,\r\n    maxSuggestions = 6,\r\n    searchLimit = 12,\r\n    saveRecentSearches = true,\r\n    enablePrefetch = true,\r\n    onSearch,\r\n    onSuggestionSelect,\r\n  } = options;\r\n\r\n  // Estados locales\r\n  const [query, setQuery] = useState('');\r\n  const [debouncedQuery, setDebouncedQuery] = useState('');\r\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\r\n  const [hasSearched, setHasSearched] = useState(false);\r\n\r\n  // Hooks externos\r\n  const queryClient = useQueryClient();\r\n  const errorHandler = useSearchErrorHandler();\r\n  const toastHandler = useSearchToast();\r\n  const navigation = useSearchNavigation({\r\n    scrollToTop: true,\r\n    onBeforeNavigate: (url) => console.log('üîç Navegando a:', url),\r\n    onAfterNavigate: (url) => console.log('‚úÖ Navegaci√≥n completada:', url),\r\n  });\r\n\r\n  // Hooks para trending y recent searches\r\n  const { trendingSearches, trackSearch } = useTrendingSearches({\r\n    limit: 4,\r\n    enabled: true\r\n  });\r\n\r\n  const {\r\n    recentSearches: recentSearchesList,\r\n    addSearch: addRecentSearch,\r\n    getRecentSearches\r\n  } = useRecentSearches({\r\n    maxSearches: SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,\r\n    enablePersistence: saveRecentSearches,\r\n    expirationDays: SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS\r\n  });\r\n\r\n  // ===================================\r\n  // DEBOUNCED QUERY UPDATE\r\n  // ===================================\r\n\r\n  const updateDebouncedQuery = useDebouncedCallback(\r\n    (value: string) => {\r\n      setDebouncedQuery(value);\r\n\r\n      // Analytics tracking\r\n      if (value.trim() && process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n        console.log('üîç useSearchOptimized: Query enabled condition will be:', !!value?.trim());\r\n      }\r\n    },\r\n    debounceMs,\r\n    {\r\n      maxWait: 2000,\r\n      leading: false,\r\n      trailing: true,\r\n    }\r\n  );\r\n\r\n  // ===================================\r\n  // TANSTACK QUERY INTEGRATION\r\n  // ===================================\r\n\r\n  // Query principal para b√∫squedas\r\n  const { \r\n    data: searchResults, \r\n    isLoading, \r\n    error, \r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt \r\n  } = useQuery({\r\n    queryKey: searchQueryKeys.search(debouncedQuery),\r\n    queryFn: async ({ queryKey, signal }) => {\r\n      const [, , searchQuery] = queryKey;\r\n      if (!searchQuery?.trim()) return [];\r\n\r\n\r\n      try {\r\n        // Usar la API de b√∫squeda correcta\r\n        const url = `/api/search?q=${encodeURIComponent(searchQuery)}&limit=${maxSuggestions}`;\r\n\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          signal, // Usar AbortController\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.error('üîç useSearchOptimized: API response not ok:', response.status);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data.products || [];\r\n      } catch (error) {\r\n        console.error('üîç useSearchOptimized: API call failed:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    enabled: (() => {\r\n      const isEnabled = !!debouncedQuery?.trim() && debouncedQuery.length >= 2;\r\n      return isEnabled;\r\n    })(),\r\n    ...searchQueryConfig,\r\n  });\r\n\r\n  // ===================================\r\n  // SUGGESTIONS GENERATION\r\n  // ===================================\r\n\r\n  if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n    console.log('üîç useSearchOptimized: Current state before suggestions:', {\r\n      query,\r\n      debouncedQuery,\r\n      searchResults: searchResults?.length || 0,\r\n      isLoading,\r\n      error: !!error\r\n    });\r\n  }\r\n\r\n  const suggestions: SearchSuggestion[] = useMemo(() => {\r\n    const allSuggestions: SearchSuggestion[] = [];\r\n    const hasQuery = !!debouncedQuery?.trim();\r\n\r\n    if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n      console.log('üîç useSearchOptimized: query (current):', `\"${query}\"`);\r\n      console.log('üîç useSearchOptimized: searchResults isArray:', Array.isArray(searchResults));\r\n    }\r\n\r\n    if (hasQuery) {\r\n      // CUANDO HAY TEXTO: Priorizar productos SIEMPRE\r\n\r\n      // Extraer productos de la respuesta de la API\r\n      let products = [];\r\n\r\n      // Si searchResults es un array directamente\r\n      if (Array.isArray(searchResults)) {\r\n        products = searchResults;\r\n      }\r\n      // Si searchResults es un objeto con propiedad data (respuesta de API)\r\n      else if (searchResults && typeof searchResults === 'object' && Array.isArray(searchResults.data)) {\r\n        products = searchResults.data;\r\n      }\r\n      // Si searchResults es un objeto con propiedad products\r\n      else if (searchResults && typeof searchResults === 'object' && Array.isArray(searchResults.products)) {\r\n        products = searchResults.products;\r\n      }\r\n\r\n      if (products.length > 0) {\r\n        const productSuggestions = products.map((product: ProductWithCategory) => {\r\n          return {\r\n            id: product.id.toString(),\r\n            type: 'product' as const,\r\n            title: product.name,\r\n            subtitle: product.category?.name,\r\n            image: product.images?.previews?.[0] || product.images?.thumbnails?.[0],\r\n            badge: product.stock > 0 ? 'En stock' : 'Sin stock',\r\n            href: `/products/${product.id}`,\r\n          };\r\n        });\r\n        allSuggestions.push(...productSuggestions);\r\n      } else {\r\n        if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n          console.log('üîç useSearchOptimized: searchResults structure:', {\r\n            isArray: Array.isArray(searchResults),\r\n            hasData: searchResults?.data ? 'yes' : 'no',\r\n            hasProducts: searchResults?.products ? 'yes' : 'no',\r\n            dataLength: searchResults?.data?.length,\r\n            productsLength: searchResults?.products?.length,\r\n            keys: searchResults ? Object.keys(searchResults) : 'null'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Solo agregar recent/trending si hay muy pocos productos\r\n      if (allSuggestions.length < 2) {\r\n        const recentSuggestions = getRecentSearches(2).map((search, index) => ({\r\n          id: `recent-${index}`,\r\n          type: 'recent' as const,\r\n          title: search,\r\n          href: `/shop?q=${encodeURIComponent(search)}`,\r\n        }));\r\n        allSuggestions.push(...recentSuggestions);\r\n      }\r\n    } else {\r\n      // CUANDO NO HAY TEXTO: Mostrar trending y recent\r\n\r\n      // Agregar b√∫squedas recientes primero\r\n      const recentSuggestions = getRecentSearches(3).map((search, index) => ({\r\n        id: `recent-${index}`,\r\n        type: 'recent' as const,\r\n        title: search,\r\n        href: `/shop?q=${encodeURIComponent(search)}`,\r\n      }));\r\n      allSuggestions.push(...recentSuggestions);\r\n\r\n      // Agregar trending searches\r\n      if (allSuggestions.length < maxSuggestions) {\r\n        const remainingSlots = maxSuggestions - allSuggestions.length;\r\n        const trendingSuggestions = trendingSearches.slice(0, remainingSlots).map(trending => ({\r\n          id: trending.id,\r\n          type: 'trending' as const,\r\n          title: trending.query,\r\n          href: trending.href,\r\n          badge: trending.count ? `${trending.count}` : undefined\r\n        }));\r\n        allSuggestions.push(...trendingSuggestions);\r\n      }\r\n    }\r\n\r\n    const finalSuggestions = allSuggestions.slice(0, maxSuggestions);\r\n    if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n      console.log('üîç useSearchOptimized: Final suggestions types:', finalSuggestions.map(s => s.type));\r\n      console.log('üîç useSearchOptimized: Final suggestions titles:', finalSuggestions.map(s => s.title));\r\n    }\r\n\r\n    return finalSuggestions;\r\n  }, [debouncedQuery, searchResults, isLoading, error, maxSuggestions, trendingSearches]);\r\n\r\n\r\n  // ===================================\r\n  // SEARCH FUNCTIONS\r\n  // ===================================\r\n\r\n  const searchWithDebounce = useCallback((searchQuery: string) => {\r\n    setQuery(searchQuery);\r\n    updateDebouncedQuery(searchQuery);\r\n\r\n    // Prefetch si est√° habilitado y la query es v√°lida\r\n    if (enablePrefetch && searchQuery.trim().length >= 1) {\r\n      // Prefetch de datos de b√∫squeda\r\n      queryClient.prefetchQuery({\r\n        queryKey: searchQueryKeys.search(searchQuery),\r\n        queryFn: () => searchProducts(searchQuery, maxSuggestions),\r\n        ...searchQueryConfig,\r\n      });\r\n\r\n      // Prefetch de p√°gina de resultados\r\n      navigation.prefetchSearch(searchQuery.trim());\r\n    }\r\n  }, [updateDebouncedQuery, enablePrefetch, queryClient, maxSuggestions, navigation]);\r\n\r\n  const executeSearch = useCallback(async (searchQuery: string) => {\r\n    if (!searchQuery.trim()) return;\r\n\r\n    try {\r\n      setHasSearched(true);\r\n      \r\n      // Guardar en historial usando el hook\r\n      if (saveRecentSearches) {\r\n        addRecentSearch(searchQuery.trim());\r\n      }\r\n\r\n      // Registrar en trending searches\r\n      trackSearch(searchQuery.trim()).catch(console.warn);\r\n\r\n      // Navegar a p√°gina de resultados usando navegaci√≥n optimizada\r\n      navigation.navigateToSearch(searchQuery.trim());\r\n\r\n      // Callback externo\r\n      if (onSearch && searchResults) {\r\n        onSearch(searchQuery, searchResults);\r\n      }\r\n\r\n      toastHandler.showSuccessToast(searchQuery, searchResults?.length || 0);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå useSearchOptimized: Error en executeSearch:', error);\r\n      errorHandler.handleError(error);\r\n    }\r\n  }, [saveRecentSearches, recentSearches, navigation, onSearch, searchResults, toastHandler, errorHandler]);\r\n\r\n  const selectSuggestion = useCallback((suggestion: SearchSuggestion) => {\r\n\r\n    // Navegar seg√∫n el tipo de sugerencia\r\n    if (suggestion.type === 'product') {\r\n      navigation.navigateToProduct(suggestion.id);\r\n    } else {\r\n      // Para b√∫squedas recientes o trending, navegar a b√∫squeda\r\n      navigation.navigateToSearch(suggestion.title);\r\n    }\r\n\r\n    // Callback externo\r\n    if (onSuggestionSelect) {\r\n      onSuggestionSelect(suggestion);\r\n    }\r\n\r\n    toastHandler.showInfoToast(`${suggestion.type === 'product' ? 'Producto' : 'B√∫squeda'} seleccionado`, suggestion.title);\r\n  }, [navigation, onSuggestionSelect, toastHandler]);\r\n\r\n  const clearSearch = useCallback(() => {\r\n    setQuery('');\r\n    setDebouncedQuery('');\r\n    setHasSearched(false);\r\n    \r\n    // Limpiar cache de b√∫squedas si es necesario\r\n    queryClient.removeQueries({ queryKey: searchQueryKeys.searches() });\r\n  }, [queryClient]);\r\n\r\n  // ===================================\r\n  // LIFECYCLE\r\n  // ===================================\r\n\r\n  const initialize = useCallback(() => {\r\n    // Cargar b√∫squedas recientes\r\n    if (saveRecentSearches) {\r\n      try {\r\n        const saved = localStorage.getItem('pinteya-recent-searches');\r\n        if (saved && saved.trim() !== '' && saved !== '\"\"' && saved !== \"''\") {\r\n          // Validar que no est√© corrupto\r\n          if (saved.includes('\"\"') && saved.length < 5) {\r\n            console.warn('Detected corrupted recent searches data, cleaning up');\r\n            localStorage.removeItem('pinteya-recent-searches');\r\n            return;\r\n          }\r\n\r\n          const parsed = JSON.parse(saved);\r\n          // Verificar que sea un array v√°lido\r\n          if (Array.isArray(parsed)) {\r\n            setRecentSearches(parsed);\r\n          } else {\r\n            console.warn('Invalid recent searches format, resetting');\r\n            localStorage.removeItem('pinteya-recent-searches');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error cargando b√∫squedas recientes:', error);\r\n        // Limpiar datos corruptos\r\n        localStorage.removeItem('pinteya-recent-searches');\r\n      }\r\n    }\r\n  }, [saveRecentSearches]);\r\n\r\n  const cleanup = useCallback(() => {\r\n    // Limpiar debounce y cache si es necesario\r\n    updateDebouncedQuery.cancel();\r\n  }, [updateDebouncedQuery]);\r\n\r\n  // Inicializar al montar\r\n  useEffect(() => {\r\n    initialize();\r\n    return cleanup;\r\n  }, [initialize, cleanup]);\r\n\r\n  // ===================================\r\n  // RETURN\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado de b√∫squeda\r\n    query,\r\n    results: searchResults || [],\r\n    suggestions,\r\n    isLoading,\r\n    error: error?.message || null,\r\n    hasSearched,\r\n    recentSearches: recentSearchesList,\r\n    trendingSearches,\r\n\r\n    // Estados de TanStack Query\r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt,\r\n\r\n    // Estado de errores y toasts\r\n    searchError: errorHandler.currentError,\r\n    isRetrying: errorHandler.isRetrying,\r\n    retryCount: errorHandler.retryCount,\r\n    toasts: toastHandler.toasts,\r\n\r\n    // Funciones principales\r\n    searchWithDebounce,\r\n    executeSearch,\r\n    selectSuggestion,\r\n    clearSearch,\r\n    initialize,\r\n    cleanup,\r\n\r\n    // Funciones de manejo de errores\r\n    clearError: errorHandler.clearError,\r\n    retryManually: errorHandler.retryManually,\r\n\r\n    // Funciones de toast\r\n    removeToast: toastHandler.removeToast,\r\n    clearToasts: toastHandler.clearToasts,\r\n\r\n    // Utilidades de cache\r\n    invalidateSearch: (searchQuery: string) =>\r\n      queryClient.invalidateQueries({ queryKey: searchQueryKeys.search(searchQuery) }),\r\n    prefetchSearch: (searchQuery: string) =>\r\n      queryClient.prefetchQuery({\r\n        queryKey: searchQueryKeys.search(searchQuery),\r\n        queryFn: () => searchProducts(searchQuery, maxSuggestions),\r\n        ...searchQueryConfig,\r\n      }),\r\n\r\n    // Funciones de navegaci√≥n optimizada\r\n    navigateToSearch: navigation.navigateToSearch,\r\n    navigateToProduct: navigation.navigateToProduct,\r\n    navigateToCategory: navigation.navigateToCategory,\r\n    prefetchSearchPage: navigation.prefetchSearch,\r\n    prefetchProductPage: navigation.prefetchProduct,\r\n    getCurrentSearchQuery: navigation.getCurrentSearchQuery,\r\n    buildSearchUrl: navigation.buildSearchUrl,\r\n  };\r\n}\r\n\r\nexport default useSearchOptimized;\r\n"],"names":["useSearchOptimized","options","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","enablePrefetch","onSearch","onSuggestionSelect","query","setQuery","useState","debouncedQuery","setDebouncedQuery","recentSearches","setRecentSearches","hasSearched","setHasSearched","queryClient","useQueryClient","errorHandler","useSearchErrorHandler","toastHandler","useSearchToast","navigation","useSearchNavigation","scrollToTop","onBeforeNavigate","url","console","log","onAfterNavigate","trendingSearches","trackSearch","useTrendingSearches","limit","enabled","recentSearchesList","addSearch","addRecentSearch","getRecentSearches","useRecentSearches","maxSearches","SEARCH_CONSTANTS","MAX_RECENT_SEARCHES","enablePersistence","expirationDays","RECENT_SEARCHES_EXPIRATION_DAYS","updateDebouncedQuery","useDebouncedCallback","value","trim","process","env","NODE_ENV","NEXT_PUBLIC_DEBUG_SEARCH","maxWait","leading","trailing","data","searchResults","isLoading","error","isFetching","isStale","dataUpdatedAt","useQuery","queryKey","searchQueryKeys","search","queryFn","signal","searchQuery","encodeURIComponent","response","fetch","method","headers","ok","status","Error","json","products","isEnabled","length","searchQueryConfig","suggestions","useMemo","allSuggestions","hasQuery","Array","isArray","productSuggestions","map","product","id","toString","type","title","name","subtitle","category","image","images","previews","thumbnails","badge","stock","href","push","hasData","hasProducts","dataLength","productsLength","keys","Object","recentSuggestions","index","remainingSlots","trendingSuggestions","slice","trending","count","undefined","finalSuggestions","s","searchWithDebounce","useCallback","prefetchQuery","searchProducts","prefetchSearch","executeSearch","catch","warn","navigateToSearch","showSuccessToast","handleError","selectSuggestion","suggestion","navigateToProduct","showInfoToast","clearSearch","removeQueries","searches","initialize","saved","localStorage","getItem","includes","removeItem","parsed","JSON","parse","cleanup","cancel","useEffect","results","message","searchError","currentError","isRetrying","retryCount","toasts","clearError","retryManually","removeToast","clearToasts","invalidateSearch","invalidateQueries","navigateToCategory","prefetchSearchPage","prefetchProductPage","prefetchProduct","getCurrentSearchQuery","buildSearchUrl"],"mappings":"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"}