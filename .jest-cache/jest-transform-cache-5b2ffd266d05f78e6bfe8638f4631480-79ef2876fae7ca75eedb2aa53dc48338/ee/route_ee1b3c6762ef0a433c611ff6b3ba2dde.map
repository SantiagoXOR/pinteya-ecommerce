{"version":3,"names":["DELETE","cov_v4hp14clq","f","s","GET","PUT","UpdateProductSchema","_zod","z","object","name","string","min","max","optional","description","short_description","price","number","discounted_price","stock","low_stock_threshold","category_id","uuid","brand","images","array","url","alt_text","is_primary","boolean","default","is_active","is_featured","status","enum","ProductParamsSchema","id","getProductById","supabase","productId","data","product","error","from","select","eq","single","b","_errorhandler","NotFoundError","transformedProduct","category_name","categories","undefined","generateSlug","toLowerCase","replace","trim","getHandler","request","params","paramsValidation","safeParse","success","ValidationError","errors","_server","NextResponse","json","message","putHandler","user","validatedData","existingProduct","category","categoryError","updateData","updated_at","Date","toISOString","slug","updatedProduct","update","ApiError","_adminauth","logAdminAction","deleteHandler","orderItems","orderCheckError","limit","console","warn","deletionResult","isHardDelete","length","updateError","soft_delete","delete","hard_delete","_middlewarecomposer","composeMiddlewares","withErrorHandler","_apilogger","withApiLogging","_apiauthmiddleware","withAdminAuth","_adminschemas","withValidation"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { checkCRUDPermissions, logAdminAction, getRequestInfo } from '@/lib/auth/admin-auth';\nimport { z } from 'zod';\n\n// Enterprise middleware imports\nimport { withErrorHandler } from '@/lib/api/error-handler';\nimport { withApiLogging } from '@/lib/api/api-logger';\nimport { withAdminAuth } from '@/lib/auth/api-auth-middleware';\nimport { withValidation } from '@/lib/validation/admin-schemas';\nimport { composeMiddlewares } from '@/lib/api/middleware-composer';\n\n// Validation schemas\nconst UpdateProductSchema = z.object({\n  name: z.string().min(1, 'El nombre es requerido').max(255, 'Máximo 255 caracteres').optional(),\n  description: z.string().optional(),\n  short_description: z.string().max(500, 'Máximo 500 caracteres').optional(),\n  price: z.number().min(0, 'El precio debe ser mayor a 0').optional(),\n  discounted_price: z.number().min(0).optional(),\n  stock: z.number().min(0, 'El stock debe ser mayor o igual a 0').optional(),\n  low_stock_threshold: z.number().min(0).optional(),\n  category_id: z.string().uuid('ID de categoría inválido').optional(),\n  brand: z.string().optional(),\n  images: z.array(z.object({\n    url: z.string().url(),\n    alt_text: z.string().optional(),\n    is_primary: z.boolean().default(false)\n  })).optional(),\n  is_active: z.boolean().optional(),\n  is_featured: z.boolean().optional(),\n  status: z.enum(['active', 'inactive', 'draft']).optional(),\n});\n\nconst ProductParamsSchema = z.object({\n  id: z.string().uuid('ID de producto inválido')\n});\n\n// Enterprise imports for error handling\nimport { ApiError, NotFoundError, ValidationError } from '@/lib/api/error-handler';\n\n// Helper function to get product by ID with enhanced error handling\nasync function getProductById(supabase: any, productId: string) {\n  const { data: product, error } = await supabase\n    .from('products')\n    .select(`\n      id,\n      name,\n      slug,\n      description,\n      short_description,\n      price,\n      discounted_price,\n      stock,\n      low_stock_threshold,\n      category_id,\n      brand,\n      images,\n      is_active,\n      is_featured,\n      status,\n      created_at,\n      updated_at,\n      categories (\n        id,\n        name\n      )\n    `)\n    .eq('id', productId)\n    .single();\n\n  if (error) {\n    throw new NotFoundError('Producto');\n  }\n\n  // Transform response with enhanced data\n  const transformedProduct = {\n    ...product,\n    category_name: product.categories?.name || null,\n    categories: undefined,\n  };\n\n  return transformedProduct;\n}\n\n// Helper function to generate unique slug\nfunction generateSlug(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .trim();\n}\n\n/**\n * GET /api/admin/products/[id] - Enterprise Handler\n * Obtener producto específico por ID con middleware enterprise\n */\nconst getHandler = async (request: NextRequest, { params }: { params: { id: string } }) => {\n  const { supabase } = request as any;\n  const productId = params.id;\n\n  // Validar parámetros\n  const paramsValidation = ProductParamsSchema.safeParse({ id: productId });\n  if (!paramsValidation.success) {\n    throw new ValidationError('ID de producto inválido', paramsValidation.error.errors);\n  }\n\n  const product = await getProductById(supabase, productId);\n\n  return NextResponse.json({\n    data: product,\n    success: true,\n    message: 'Producto obtenido exitosamente'\n  });\n};\n\n/**\n * PUT /api/admin/products/[id] - Enterprise Handler\n * Actualizar producto específico con middleware enterprise\n */\nconst putHandler = async (request: NextRequest, { params }: { params: { id: string } }) => {\n  const { supabase, user, validatedData } = request as any;\n  const productId = params.id;\n\n  // Validar parámetros\n  const paramsValidation = ProductParamsSchema.safeParse({ id: productId });\n  if (!paramsValidation.success) {\n    throw new ValidationError('ID de producto inválido', paramsValidation.error.errors);\n  }\n\n  // Verificar que el producto existe\n  const existingProduct = await getProductById(supabase, productId);\n\n  // Verificar categoría si se está actualizando\n  if (validatedData.category_id) {\n    const { data: category, error: categoryError } = await supabase\n      .from('categories')\n      .select('id')\n      .eq('id', validatedData.category_id)\n      .single();\n\n    if (categoryError || !category) {\n      throw new ValidationError('Categoría no encontrada');\n    }\n  }\n\n  // Generar slug si se actualiza el nombre\n  const updateData = {\n    ...validatedData,\n    updated_at: new Date().toISOString(),\n  };\n\n  if (validatedData.name) {\n    updateData.slug = generateSlug(validatedData.name);\n  }\n\n  // Actualizar producto\n  const { data: updatedProduct, error } = await supabase\n    .from('products')\n    .update(updateData)\n    .eq('id', productId)\n    .select(`\n      id,\n      name,\n      slug,\n      description,\n      short_description,\n      price,\n      discounted_price,\n      stock,\n      low_stock_threshold,\n      category_id,\n      brand,\n      images,\n      is_active,\n      is_featured,\n      status,\n      created_at,\n      updated_at,\n      categories (\n        id,\n        name\n      )\n    `)\n    .single();\n\n  if (error) {\n    throw new ApiError('Error al actualizar producto', 500, 'DATABASE_ERROR', error);\n  }\n\n  // Log de auditoría\n  await logAdminAction(user.id, 'UPDATE', 'product', productId, existingProduct, updatedProduct);\n\n  // Transform response\n  const transformedProduct = {\n    ...updatedProduct,\n    category_name: updatedProduct.categories?.name || null,\n    categories: undefined,\n  };\n\n  return NextResponse.json({\n    data: transformedProduct,\n    success: true,\n    message: 'Producto actualizado exitosamente'\n  });\n};\n\n/**\n * DELETE /api/admin/products/[id] - Enterprise Handler\n * Eliminar producto específico con middleware enterprise\n */\nconst deleteHandler = async (request: NextRequest, { params }: { params: { id: string } }) => {\n  const { supabase, user } = request as any;\n  const productId = params.id;\n\n  // Validar parámetros\n  const paramsValidation = ProductParamsSchema.safeParse({ id: productId });\n  if (!paramsValidation.success) {\n    throw new ValidationError('ID de producto inválido', paramsValidation.error.errors);\n  }\n\n  // Verificar que el producto existe\n  const existingProduct = await getProductById(supabase, productId);\n\n  // Verificar si el producto está referenciado en órdenes\n  const { data: orderItems, error: orderCheckError } = await supabase\n    .from('order_items')\n    .select('id')\n    .eq('product_id', productId)\n    .limit(1);\n\n  if (orderCheckError) {\n    console.warn('Error checking order references:', orderCheckError);\n    // Continuar con eliminación aunque falle la verificación\n  }\n\n  let deletionResult;\n  let isHardDelete = false;\n\n  if (orderItems && orderItems.length > 0) {\n    // Soft delete: marcar como inactivo\n    const { error: updateError } = await supabase\n      .from('products')\n      .update({\n        status: 'inactive',\n        is_active: false,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', productId);\n\n    if (updateError) {\n      throw new ApiError('Error al eliminar producto', 500, 'DATABASE_ERROR', updateError);\n    }\n\n    deletionResult = {\n      message: 'Producto marcado como inactivo (tiene órdenes asociadas)',\n      soft_delete: true\n    };\n  } else {\n    // Hard delete si no hay referencias\n    const { error } = await supabase\n      .from('products')\n      .delete()\n      .eq('id', productId);\n\n    if (error) {\n      throw new ApiError('Error al eliminar producto', 500, 'DATABASE_ERROR', error);\n    }\n\n    isHardDelete = true;\n    deletionResult = {\n      message: 'Producto eliminado exitosamente',\n      hard_delete: true\n    };\n  }\n\n  // Log de auditoría\n  await logAdminAction(\n    user.id,\n    isHardDelete ? 'DELETE' : 'SOFT_DELETE',\n    'product',\n    productId,\n    existingProduct,\n    null\n  );\n\n  return NextResponse.json({\n    ...deletionResult,\n    success: true\n  });\n};\n\n// Aplicar middlewares enterprise y exportar handlers\nexport const GET = composeMiddlewares(\n  withErrorHandler,\n  withApiLogging,\n  withAdminAuth(['products_read'])\n)(getHandler);\n\nexport const PUT = composeMiddlewares(\n  withErrorHandler,\n  withApiLogging,\n  withAdminAuth(['products_update']),\n  withValidation(UpdateProductSchema)\n)(putHandler);\n\nexport const DELETE = composeMiddlewares(\n  withErrorHandler,\n  withApiLogging,\n  withAdminAuth(['products_delete'])\n)(deleteHandler);\n"],"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","ignoreList":[]}