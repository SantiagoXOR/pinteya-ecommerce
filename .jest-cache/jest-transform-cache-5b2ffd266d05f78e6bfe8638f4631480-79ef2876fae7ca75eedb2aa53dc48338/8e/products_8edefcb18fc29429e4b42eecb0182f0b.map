{"version":3,"names":["calculateDiscountPercentage","cov_ibg8xeq28","f","s","convertLegacyProduct","formatPrice","getDiscountedProducts","getProductById","getProductMainImage","getProducts","getProductsByBrand","getProductsByCategory","getRelatedProducts","isProductInStock","searchProducts","filters","searchParams","URLSearchParams","b","Object","entries","forEach","key","value","undefined","append","toString","url","response","fetch","method","headers","result","_jsonutils","safeApiResponseJson","success","console","error","data","pagination","page","limit","total","totalPages","message","Error","id","searchTerm","search","categorySlug","category","discountedProducts","filter","product","discounted_price","price","brandName","brand","productId","categoryId","slice","oldProduct","name","title","slug","toLowerCase","replace","description","discountedPrice","stock","category_id","images","imgs","created_at","Date","toISOString","updated_at","originalPrice","Math","round","currency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","previews","thumbnails"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\products.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - FUNCIONES DE API PARA PRODUCTOS\r\n// ===================================\r\n\r\nimport { ProductFilters, ProductWithCategory, ApiResponse, PaginatedResponse } from '@/types/api';\r\nimport { safeApiResponseJson } from '@/lib/json-utils';\r\n\r\n// ===================================\r\n// FUNCIONES PARA EL FRONTEND\r\n// ===================================\r\n\r\n/**\r\n * Obtiene productos con filtros desde la API\r\n * @param filters - Filtros de productos\r\n * @returns Promise<PaginatedResponse<ProductWithCategory>>\r\n */\r\nexport async function getProducts(filters?: ProductFilters): Promise<PaginatedResponse<ProductWithCategory>> {\r\n  try {\r\n    const searchParams = new URLSearchParams();\r\n\r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null) {\r\n          searchParams.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    const url = `/api/products?${searchParams.toString()}`;\r\n\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\r\n\r\n    if (!result.success) {\r\n      console.error('❌ JSON parsing failed:', result.error);\r\n\r\n      // Return a fallback response instead of throwing\r\n      return {\r\n        data: [],\r\n        pagination: {\r\n          page: 1,\r\n          limit: 12,\r\n          total: 0,\r\n          totalPages: 0,\r\n        },\r\n        success: false,\r\n        message: result.error || 'Error loading products',\r\n      };\r\n    }\r\n\r\n    if (!result.data) {\r\n      console.error('❌ Result data is null');\r\n\r\n      // Return a fallback response instead of throwing\r\n      return {\r\n        data: [],\r\n        pagination: {\r\n          page: 1,\r\n          limit: 12,\r\n          total: 0,\r\n          totalPages: 0,\r\n        },\r\n        success: false,\r\n        message: 'Error: respuesta nula del servidor',\r\n      };\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('❌ Error obteniendo productos:', error);\r\n\r\n    // Return a fallback response instead of throwing\r\n    return {\r\n      data: [],\r\n      pagination: {\r\n        page: 1,\r\n        limit: 12,\r\n        total: 0,\r\n        totalPages: 0,\r\n      },\r\n      success: false,\r\n      message: error instanceof Error ? error.message : 'Error inesperado',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene un producto por ID desde la API\r\n * @param id - ID del producto\r\n * @returns Promise<ApiResponse<ProductWithCategory>>\r\n */\r\nexport async function getProductById(id: number): Promise<ApiResponse<ProductWithCategory>> {\r\n  try {\r\n    const response = await fetch(`/api/products/${id}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<ApiResponse<ProductWithCategory>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error(`Error obteniendo producto ${id}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Busca productos por término de búsqueda\r\n * @param searchTerm - Término de búsqueda\r\n * @param limit - Límite de resultados\r\n * @returns Promise<PaginatedResponse<ProductWithCategory>>\r\n */\r\nexport async function searchProducts(\r\n  searchTerm: string, \r\n  limit: number = 12\r\n): Promise<PaginatedResponse<ProductWithCategory>> {\r\n  return getProducts({\r\n    search: searchTerm,\r\n    limit,\r\n    page: 1,\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene productos por categoría\r\n * @param categorySlug - Slug de la categoría\r\n * @param page - Página\r\n * @param limit - Límite de resultados\r\n * @returns Promise<PaginatedResponse<ProductWithCategory>>\r\n */\r\nexport async function getProductsByCategory(\r\n  categorySlug: string,\r\n  page: number = 1,\r\n  limit: number = 12\r\n): Promise<PaginatedResponse<ProductWithCategory>> {\r\n  return getProducts({\r\n    category: categorySlug,\r\n    page,\r\n    limit,\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene productos con descuento\r\n * @param page - Página\r\n * @param limit - Límite de resultados\r\n * @returns Promise<PaginatedResponse<ProductWithCategory>>\r\n */\r\nexport async function getDiscountedProducts(\r\n  page: number = 1,\r\n  limit: number = 12\r\n): Promise<PaginatedResponse<ProductWithCategory>> {\r\n  // Nota: Esto requeriría un filtro adicional en la API\r\n  // Por ahora, obtenemos todos los productos y filtramos en el frontend\r\n  const response = await getProducts({ page, limit });\r\n\r\n  // Filtrar productos con descuento\r\n  const discountedProducts = response.data.filter(\r\n    product => product.discounted_price && product.discounted_price < product.price\r\n  );\r\n\r\n  return {\r\n    ...response,\r\n    data: discountedProducts,\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene productos por marca\r\n * @param brandName - Nombre de la marca\r\n * @param page - Página\r\n * @param limit - Límite de resultados\r\n * @returns Promise<PaginatedResponse<ProductWithCategory>>\r\n */\r\nexport async function getProductsByBrand(\r\n  brandName: string,\r\n  page: number = 1,\r\n  limit: number = 12\r\n): Promise<PaginatedResponse<ProductWithCategory>> {\r\n  return getProducts({\r\n    brand: brandName,\r\n    page,\r\n    limit,\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene productos relacionados (misma categoría)\r\n * @param productId - ID del producto actual\r\n * @param categoryId - ID de la categoría\r\n * @param limit - Límite de resultados\r\n * @returns Promise<ProductWithCategory[]>\r\n */\r\nexport async function getRelatedProducts(\r\n  productId: number,\r\n  categoryId: number,\r\n  limit: number = 4\r\n): Promise<ProductWithCategory[]> {\r\n  try {\r\n    // Obtener productos de la misma categoría\r\n    const response = await fetch(`/api/products?category_id=${categoryId}&limit=${limit + 1}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    const data = result.data;\r\n\r\n    // Filtrar el producto actual y limitar resultados\r\n    return data.data\r\n      .filter(product => product.id !== productId)\r\n      .slice(0, limit);\r\n\r\n  } catch (error) {\r\n    console.error('Error obteniendo productos relacionados:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\n/**\r\n * Convierte un producto del formato antiguo al nuevo\r\n * @param oldProduct - Producto en formato antiguo\r\n * @returns ProductWithCategory\r\n */\r\nexport function convertLegacyProduct(oldProduct: any): ProductWithCategory {\r\n  return {\r\n    id: oldProduct.id,\r\n    name: oldProduct.title,\r\n    brand: oldProduct.brand || null, // Marca del producto legacy\r\n    slug: oldProduct.title.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\r\n    description: `Producto ${oldProduct.title}`,\r\n    price: oldProduct.price,\r\n    discounted_price: oldProduct.discountedPrice,\r\n    stock: 50, // Stock por defecto\r\n    category_id: 1, // Categoría por defecto\r\n    images: oldProduct.imgs,\r\n    created_at: new Date().toISOString(),\r\n    updated_at: null, // Campo requerido por el tipo\r\n  };\r\n}\r\n\r\n/**\r\n * Calcula el porcentaje de descuento\r\n * @param originalPrice - Precio original\r\n * @param discountedPrice - Precio con descuento\r\n * @returns number\r\n */\r\nexport function calculateDiscountPercentage(\r\n  originalPrice: number,\r\n  discountedPrice: number\r\n): number {\r\n  if (!discountedPrice || discountedPrice >= originalPrice) {\r\n    return 0;\r\n  }\r\n  \r\n  return Math.round(((originalPrice - discountedPrice) / originalPrice) * 100);\r\n}\r\n\r\n/**\r\n * Formatea el precio para mostrar\r\n * @param price - Precio\r\n * @param currency - Moneda\r\n * @returns string\r\n */\r\nexport function formatPrice(price: number, currency: string = 'ARS'): string {\r\n  return new Intl.NumberFormat('es-AR', {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 2,\r\n  }).format(price);\r\n}\r\n\r\n/**\r\n * Verifica si un producto está en stock\r\n * @param product - Producto\r\n * @returns boolean\r\n */\r\nexport function isProductInStock(product: ProductWithCategory): boolean {\r\n  return product.stock > 0;\r\n}\r\n\r\n/**\r\n * Obtiene la URL de la imagen principal del producto\r\n * @param product - Producto\r\n * @returns string\r\n */\r\nexport function getProductMainImage(product: ProductWithCategory): string {\r\n  if (product.images?.previews?.[0]) {\r\n    return product.images.previews[0];\r\n  }\r\n  \r\n  if (product.images?.thumbnails?.[0]) {\r\n    return product.images.thumbnails[0];\r\n  }\r\n  \r\n  return '/images/products/placeholder.jpg';\r\n}\r\n"],"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","ignoreList":[]}