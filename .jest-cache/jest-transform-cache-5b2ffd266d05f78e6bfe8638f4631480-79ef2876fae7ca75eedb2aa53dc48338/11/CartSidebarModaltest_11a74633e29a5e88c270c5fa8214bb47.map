{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\CartSidebarModal.test.tsx"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TESTS PARA CARTSIDEBARMODAL COMPONENT\n// ===================================\n\nimport React from 'react';\nimport { render, screen, fireEvent, act } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport CartSidebarModal from '@/components/Common/CartSidebarModal';\nimport cartReducer from '@/redux/features/cart-slice';\n\n// Mock del contexto de modal del carrito\nconst mockCloseModal = jest.fn();\nconst mockIsOpen = true;\n\njest.mock('@/app/context/CartSidebarModalContext', () => ({\n  useCartModalContext: () => ({\n    isCartModalOpen: mockIsOpen,\n    openCartModal: jest.fn(),\n    closeCartModal: mockCloseModal,\n  }),\n}));\n\n// Mock de Next.js Link\njest.mock('next/link', () => {\n  return ({ children, href }: { children: React.ReactNode; href: string }) => (\n    <a href={href}>{children}</a>\n  );\n});\n\n// Mock de Next.js Image\njest.mock('next/image', () => {\n  return ({ src, alt, width, height }: { src: string; alt: string; width: number; height: number }) => (\n    <img src={src} alt={alt} width={width} height={height} />\n  );\n});\n\n// Items de carrito de prueba\nconst mockCartItems = [\n  {\n    id: 1,\n    title: 'Pintura Latex Interior Blanco 4L',\n    price: 18000,\n    discountedPrice: 15000,\n    quantity: 2,\n    imgs: {\n      thumbnails: ['/images/products/pintura-latex-blanco-sm.jpg'],\n      previews: ['/images/products/pintura-latex-blanco.jpg'],\n    },\n  },\n  {\n    id: 2,\n    title: 'Esmalte Sintético Azul 1L',\n    price: 8000,\n    discountedPrice: 7000,\n    quantity: 1,\n    imgs: {\n      thumbnails: ['/images/products/esmalte-azul-sm.jpg'],\n      previews: ['/images/products/esmalte-azul.jpg'],\n    },\n  },\n];\n\n// Función helper para renderizar con Redux store\nconst renderWithStore = (component: React.ReactElement, initialState = {}) => {\n  const store = configureStore({\n    reducer: {\n      cartReducer,\n    },\n    preloadedState: initialState,\n  });\n\n  return render(\n    <Provider store={store}>\n      {component}\n    </Provider>\n  );\n};\n\ndescribe('CartSidebarModal Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render cart modal when open', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    expect(screen.getByText('Cart View')).toBeInTheDocument();\n    expect(screen.getByText('Pintura Latex Interior Blanco 4L')).toBeInTheDocument();\n    expect(screen.getByText('Esmalte Sintético Azul 1L')).toBeInTheDocument();\n  });\n\n  it('should display cart items with correct information', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    // Verificar que se muestran los productos\n    expect(screen.getByText('Pintura Latex Interior Blanco 4L')).toBeInTheDocument();\n    expect(screen.getByText('Esmalte Sintético Azul 1L')).toBeInTheDocument();\n\n    // Verificar precios (el formato real incluye espacios: \"Price: $ 15000\")\n    expect(screen.getByText(/Price:.*15000/)).toBeInTheDocument();\n    expect(screen.getByText(/Price:.*7000/)).toBeInTheDocument();\n  });\n\n  it('should calculate and display total price correctly', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    // Total: (15000 * 2) + (7000 * 1) = 37000\n    expect(screen.getByText('$37000')).toBeInTheDocument();\n  });\n\n  it('should handle close modal action', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    const closeButton = screen.getByRole('button', { name: /close/i });\n    \n    await act(async () => {\n      fireEvent.click(closeButton);\n    });\n\n    expect(mockCloseModal).toHaveBeenCalled();\n  });\n\n  it('should display empty cart message when no items', async () => {\n    const initialState = {\n      cartReducer: {\n        items: [],\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    expect(screen.getByText(/your cart is empty/i)).toBeInTheDocument();\n  });\n\n  it('should handle remove item from cart', async () => {\n    const store = configureStore({\n      reducer: {\n        cartReducer,\n      },\n      preloadedState: {\n        cartReducer: {\n          items: mockCartItems,\n        },\n      },\n    });\n\n    await act(async () => {\n      render(\n        <Provider store={store}>\n          <CartSidebarModal />\n        </Provider>\n      );\n    });\n\n    // Buscar todos los botones de eliminar y hacer clic en el primero\n    const removeButtons = screen.getAllByLabelText('button for remove product from cart');\n    expect(removeButtons.length).toBe(2); // Verificar que hay 2 botones (uno por producto)\n\n    await act(async () => {\n      fireEvent.click(removeButtons[0]); // Hacer clic en el primer botón\n    });\n\n    // Verificar que se eliminó un item (de 2 items iniciales a 1)\n    const state = store.getState();\n    expect(state.cartReducer.items.length).toBe(1);\n  });\n\n  it('should handle quantity updates', async () => {\n    const store = configureStore({\n      reducer: {\n        cartReducer,\n      },\n      preloadedState: {\n        cartReducer: {\n          items: mockCartItems,\n        },\n      },\n    });\n\n    await act(async () => {\n      render(\n        <Provider store={store}>\n          <CartSidebarModal />\n        </Provider>\n      );\n    });\n\n    // Buscar controles de cantidad (+ y -)\n    const quantityButtons = screen.getAllByRole('button');\n    const increaseButton = quantityButtons.find(button => \n      button.textContent?.includes('+') || \n      button.getAttribute('aria-label')?.includes('increase')\n    );\n\n    if (increaseButton) {\n      await act(async () => {\n        fireEvent.click(increaseButton);\n      });\n\n      // Verificar que la cantidad cambió\n      const state = store.getState();\n      const updatedItem = state.cartReducer.items.find(item => item.id === 1);\n      expect(updatedItem?.quantity).toBeGreaterThan(2);\n    }\n  });\n\n  it('should show checkout button when items exist', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    const checkoutButton = screen.getByRole('link', { name: /checkout/i });\n    expect(checkoutButton).toBeInTheDocument();\n    expect(checkoutButton).toHaveAttribute('href', '/checkout');\n  });\n\n  it('should show checkout button even when cart is empty (current behavior)', async () => {\n    const initialState = {\n      cartReducer: {\n        items: [],\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    // El componente actual siempre muestra el botón de checkout\n    const checkoutButton = screen.queryByRole('link', { name: /checkout/i });\n    expect(checkoutButton).toBeInTheDocument();\n  });\n\n  it('should display products correctly (quantities not shown in current implementation)', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    // Verificar que se muestran los productos (el componente actual no muestra cantidades)\n    expect(screen.getByText('Pintura Latex Interior Blanco 4L')).toBeInTheDocument();\n    expect(screen.getByText('Esmalte Sintético Azul 1L')).toBeInTheDocument();\n  });\n\n  it('should handle modal overlay click to close', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    // Buscar el botón de cerrar modal\n    const closeButton = screen.getByLabelText('button for close modal');\n\n    await act(async () => {\n      fireEvent.click(closeButton);\n    });\n\n    expect(mockCloseModal).toHaveBeenCalled();\n  });\n\n  it('should show proper loading states', async () => {\n    const initialState = {\n      cartReducer: {\n        items: mockCartItems,\n        isLoading: true,\n      },\n    };\n\n    await act(async () => {\n      renderWithStore(<CartSidebarModal />, initialState);\n    });\n\n    // Verificar que se muestra algún indicador de carga\n    // Esto depende de la implementación específica del componente\n    expect(screen.getByText('Cart View')).toBeInTheDocument();\n  });\n});\n"],"names":["jest","mock","useCartModalContext","isCartModalOpen","mockIsOpen","openCartModal","fn","closeCartModal","mockCloseModal","children","href","a","src","alt","width","height","img","mockCartItems","id","title","price","discountedPrice","quantity","imgs","thumbnails","previews","renderWithStore","component","initialState","store","configureStore","reducer","cartReducer","preloadedState","render","Provider","describe","beforeEach","clearAllMocks","it","items","act","CartSidebarModal","expect","screen","getByText","toBeInTheDocument","closeButton","getByRole","name","fireEvent","click","toHaveBeenCalled","removeButtons","getAllByLabelText","length","toBe","state","getState","quantityButtons","getAllByRole","increaseButton","find","button","textContent","includes","getAttribute","updatedItem","item","toBeGreaterThan","checkoutButton","toHaveAttribute","queryByRole","getByLabelText","isLoading"],"mappings":"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"}