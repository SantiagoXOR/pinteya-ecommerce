d62c0789f464599b376ccc88d0111b4a
// ===================================
// PINTEYA E-COMMERCE - TEST useCheckout HOOK
// ===================================
"use strict";
// Mock Clerk
jest.mock('@clerk/nextjs', ()=>({
        useUser: ()=>({
                user: null,
                isLoaded: true
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactredux = require("react-redux");
const _toolkit = require("@reduxjs/toolkit");
const _useCheckout = require("../../hooks/useCheckout");
const _cartslice = /*#__PURE__*/ _interop_require_default(require("../../redux/features/cart-slice"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock data
const mockCartItems = [
    {
        id: 1,
        title: 'Test Product 1',
        price: 1000,
        discountedPrice: 900,
        quantity: 2
    },
    {
        id: 2,
        title: 'Test Product 2',
        price: 2000,
        discountedPrice: 2000,
        quantity: 1
    }
];
// Mock store setup
const createMockStore = (initialState = {})=>{
    return (0, _toolkit.configureStore)({
        reducer: {
            cartReducer: _cartslice.default
        },
        preloadedState: {
            cartReducer: {
                items: mockCartItems,
                ...initialState.cartReducer
            }
        }
    });
};
// Mock fetch
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Helper function to render hook with Redux store
const renderHookWithStore = (initialState = {})=>{
    const store = createMockStore(initialState);
    const wrapper = ({ children })=>_react.default.createElement(_reactredux.Provider, {
            store
        }, children);
    return {
        ...(0, _react1.renderHook)(()=>(0, _useCheckout.useCheckout)(), {
            wrapper
        }),
        store
    };
};
describe('useCheckout Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock successful payment preference creation
        mockFetch.mockResolvedValue({
            ok: true,
            json: async ()=>({
                    success: true,
                    data: {
                        init_point: 'https://mercadopago.com/checkout/test',
                        preference_id: 'test-preference-id'
                    }
                })
        });
    });
    it('initializes with correct default state', ()=>{
        const { result } = renderHookWithStore();
        expect(result.current.isLoading).toBe(false);
        expect(result.current.errors).toEqual({});
        expect(result.current.step).toBe('form');
    });
    it('updates billing data correctly', ()=>{
        const { result } = renderHookWithStore();
        (0, _react1.act)(()=>{
            result.current.updateBillingData({
                firstName: 'Juan',
                lastName: 'Pérez',
                email: 'juan@test.com'
            });
        });
        expect(result.current.formData.billing.firstName).toBe('Juan');
        expect(result.current.formData.billing.lastName).toBe('Pérez');
        expect(result.current.formData.billing.email).toBe('juan@test.com');
    });
    it('calculates shipping cost correctly', ()=>{
        const { result } = renderHookWithStore();
        // Test free shipping
        expect(result.current.shippingCost).toBeGreaterThanOrEqual(0);
    });
    it('validates form correctly', ()=>{
        const { result } = renderHookWithStore();
        // Test validation with empty form
        (0, _react1.act)(()=>{
            const isValid = result.current.validateForm();
            expect(isValid).toBe(false);
        });
        expect(result.current.errors.firstName).toBe('Nombre es requerido');
        expect(result.current.errors.email).toBe('Email es requerido');
    });
    it('calculates total correctly', ()=>{
        const { result } = renderHookWithStore();
        expect(result.current.finalTotal).toBeGreaterThan(0);
        expect(typeof result.current.finalTotal).toBe('number');
    });
});

//# sourceMappingURL=data:application/json;base64,