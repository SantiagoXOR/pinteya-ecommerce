{"version":3,"names":["cov_2a4mqo9dj1","actualCoverage","s","GET","f","POST","ImageUploadSchema","_zod","z","object","file","any","alt_text","string","optional","is_primary","boolean","default","ImageUpdateSchema","display_order","number","int","min","ProductParamsSchema","id","uuid","ImageParamsSchema","imageId","getStorageClient","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","_supabasejs","createClient","validateImageFile","allowedTypes","maxSize","includes","type","b","_errorhandler","ValidationError","size","generateImageFilename","originalName","productId","timestamp","Date","now","extension","split","pop","cleanName","replace","uploadImageToStorage","filename","supabase","data","error","storage","from","upload","cacheControl","upsert","ApiError","urlData","getPublicUrl","path","url","publicUrl","deleteImageFromStorage","remove","console","warn","postHandler","request","params","user","paramsValidation","safeParse","success","errors","product","productError","select","eq","single","NotFoundError","formData","get","altText","isPrimary","name","uploadResult","imageRecord","dbError","insert","product_id","storage_path","file_size","file_type","original_filename","created_at","toISOString","update","neq","_apilogger","logAdminAction","_server","NextResponse","json","message","status","getHandler","images","order","ascending","_middlewarecomposer","composeMiddlewares","withErrorHandler","withApiLogging","_apiauthmiddleware","withAdminAuth"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\route.ts"],"sourcesContent":["// üñºÔ∏è Enterprise Product Images API\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { composeMiddlewares } from '@/lib/api/middleware-composer';\nimport { withErrorHandler, ApiError, ValidationError, NotFoundError } from '@/lib/api/error-handler';\nimport { withApiLogging, logAdminAction } from '@/lib/api/api-logger';\nimport { withAdminAuth } from '@/lib/auth/api-auth-middleware';\nimport { withValidation } from '@/lib/validation/admin-schemas';\nimport { createClient } from '@supabase/supabase-js';\n\n// Validation schemas\nconst ImageUploadSchema = z.object({\n  file: z.any(), // File object\n  alt_text: z.string().optional(),\n  is_primary: z.boolean().default(false)\n});\n\nconst ImageUpdateSchema = z.object({\n  alt_text: z.string().optional(),\n  is_primary: z.boolean().optional(),\n  display_order: z.number().int().min(0).optional()\n});\n\nconst ProductParamsSchema = z.object({\n  id: z.string().uuid('ID de producto inv√°lido')\n});\n\nconst ImageParamsSchema = z.object({\n  id: z.string().uuid('ID de producto inv√°lido'),\n  imageId: z.string().uuid('ID de imagen inv√°lido')\n});\n\n// Helper function to get Supabase Storage client\nfunction getStorageClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\n  \n  return createClient(supabaseUrl, supabaseServiceKey);\n}\n\n// Helper function to validate file\nfunction validateImageFile(file: File) {\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n  const maxSize = 5 * 1024 * 1024; // 5MB\n\n  if (!allowedTypes.includes(file.type)) {\n    throw new ValidationError('Tipo de archivo no permitido. Use JPG, PNG o WebP');\n  }\n\n  if (file.size > maxSize) {\n    throw new ValidationError('El archivo es demasiado grande. M√°ximo 5MB');\n  }\n}\n\n// Helper function to generate unique filename\nfunction generateImageFilename(originalName: string, productId: string): string {\n  const timestamp = Date.now();\n  const extension = originalName.split('.').pop();\n  const cleanName = originalName.replace(/[^a-zA-Z0-9.-]/g, '_');\n  return `products/${productId}/${timestamp}_${cleanName}`;\n}\n\n// Helper function to upload image to Supabase Storage\nasync function uploadImageToStorage(file: File, filename: string) {\n  const supabase = getStorageClient();\n  \n  const { data, error } = await supabase.storage\n    .from('product-images')\n    .upload(filename, file, {\n      cacheControl: '3600',\n      upsert: false\n    });\n\n  if (error) {\n    throw new ApiError('Error al subir imagen', 500, 'STORAGE_ERROR', error);\n  }\n\n  // Get public URL\n  const { data: urlData } = supabase.storage\n    .from('product-images')\n    .getPublicUrl(filename);\n\n  return {\n    path: data.path,\n    url: urlData.publicUrl\n  };\n}\n\n// Helper function to delete image from storage\nasync function deleteImageFromStorage(path: string) {\n  const supabase = getStorageClient();\n  \n  const { error } = await supabase.storage\n    .from('product-images')\n    .remove([path]);\n\n  if (error) {\n    console.warn('Error deleting image from storage:', error);\n    // Don't throw error, just log warning\n  }\n}\n\n/**\n * POST /api/admin/products/[id]/images\n * Upload new image for product\n */\nconst postHandler = async (request: NextRequest, { params }: { params: { id: string } }) => {\n  const { supabase, user } = request as any;\n  const productId = params.id;\n\n  // Validate params\n  const paramsValidation = ProductParamsSchema.safeParse({ id: productId });\n  if (!paramsValidation.success) {\n    throw new ValidationError('ID de producto inv√°lido', paramsValidation.error.errors);\n  }\n\n  // Check if product exists\n  const { data: product, error: productError } = await supabase\n    .from('products')\n    .select('id, name')\n    .eq('id', productId)\n    .single();\n\n  if (productError || !product) {\n    throw new NotFoundError('Producto');\n  }\n\n  // Parse form data\n  const formData = await request.formData();\n  const file = formData.get('file') as File;\n  const altText = formData.get('alt_text') as string;\n  const isPrimary = formData.get('is_primary') === 'true';\n\n  if (!file) {\n    throw new ValidationError('No se proporcion√≥ archivo');\n  }\n\n  // Validate file\n  validateImageFile(file);\n\n  // Generate filename and upload\n  const filename = generateImageFilename(file.name, productId);\n  const uploadResult = await uploadImageToStorage(file, filename);\n\n  // Save image record to database\n  const { data: imageRecord, error: dbError } = await supabase\n    .from('product_images')\n    .insert({\n      product_id: productId,\n      url: uploadResult.url,\n      storage_path: uploadResult.path,\n      alt_text: altText || null,\n      is_primary: isPrimary,\n      file_size: file.size,\n      file_type: file.type,\n      original_filename: file.name,\n      created_at: new Date().toISOString()\n    })\n    .select()\n    .single();\n\n  if (dbError) {\n    // Clean up uploaded file if database insert fails\n    await deleteImageFromStorage(uploadResult.path);\n    throw new ApiError('Error al guardar imagen en base de datos', 500, 'DATABASE_ERROR', dbError);\n  }\n\n  // If this is set as primary, update other images\n  if (isPrimary) {\n    await supabase\n      .from('product_images')\n      .update({ is_primary: false })\n      .eq('product_id', productId)\n      .neq('id', imageRecord.id);\n  }\n\n  // Log action\n  await logAdminAction(user.id, 'CREATE', 'product_image', imageRecord.id, null, imageRecord);\n\n  return NextResponse.json({\n    data: imageRecord,\n    success: true,\n    message: 'Imagen subida exitosamente'\n  }, { status: 201 });\n};\n\n/**\n * GET /api/admin/products/[id]/images\n * Get all images for product\n */\nconst getHandler = async (request: NextRequest, { params }: { params: { id: string } }) => {\n  const { supabase } = request as any;\n  const productId = params.id;\n\n  // Validate params\n  const paramsValidation = ProductParamsSchema.safeParse({ id: productId });\n  if (!paramsValidation.success) {\n    throw new ValidationError('ID de producto inv√°lido', paramsValidation.error.errors);\n  }\n\n  // Get images\n  const { data: images, error } = await supabase\n    .from('product_images')\n    .select('*')\n    .eq('product_id', productId)\n    .order('display_order', { ascending: true })\n    .order('created_at', { ascending: true });\n\n  if (error) {\n    throw new ApiError('Error al obtener im√°genes', 500, 'DATABASE_ERROR', error);\n  }\n\n  return NextResponse.json({\n    data: images,\n    success: true,\n    message: 'Im√°genes obtenidas exitosamente'\n  });\n};\n\n// Apply enterprise middlewares and export handlers\nexport const GET = composeMiddlewares(\n  withErrorHandler,\n  withApiLogging,\n  withAdminAuth(['products_read'])\n)(getHandler);\n\nexport const POST = composeMiddlewares(\n  withErrorHandler,\n  withApiLogging,\n  withAdminAuth(['products_update'])\n)(postHandler);\n"],"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","ignoreList":[]}