{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\user-sync-service.test.ts"],"sourcesContent":["/**\n * Tests para el servicio de sincronización automática de usuarios\n * Verifica la sincronización robusta entre Clerk y Supabase\n */\n\n// Mock de Clerk\njest.mock('@clerk/nextjs/server', () => ({\n  clerkClient: jest.fn(() => ({\n    users: {\n      getUser: jest.fn(),\n      getUserList: jest.fn()\n    }\n  }))\n}));\n\n// Mock de Supabase simplificado\njest.mock('@/lib/supabase', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        or: jest.fn(() => ({\n          single: jest.fn()\n        })),\n        eq: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn()\n          })),\n          single: jest.fn()\n        })),\n        single: jest.fn()\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn()\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\n// Mock de security audit\njest.mock('@/lib/auth/security-audit', () => ({\n  logSecurityEvent: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\nimport {\n  syncUserToSupabase,\n  syncUserFromClerk,\n  deleteUserFromSupabase,\n  bulkSyncUsersFromClerk,\n  type ClerkUserData,\n  type SyncOptions\n} from '@/lib/auth/user-sync-service';\nimport { clerkClient } from '@clerk/nextjs/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\ndescribe('Servicio de Sincronización de Usuarios', () => {\n  let mockClerkClient: jest.MockedFunction<typeof clerkClient>;\n\n  beforeEach(() => {\n    mockClerkClient = clerkClient as jest.MockedFunction<typeof clerkClient>;\n    jest.clearAllMocks();\n  });\n\n  const mockClerkUserData: ClerkUserData = {\n    id: 'user_123',\n    email_addresses: [{\n      email_address: 'test@example.com',\n      id: 'email_123',\n      verification: {\n        status: 'verified',\n        strategy: 'email_code'\n      }\n    }],\n    first_name: 'John',\n    last_name: 'Doe',\n    created_at: Date.now(),\n    updated_at: Date.now(),\n    image_url: 'https://example.com/avatar.jpg',\n    public_metadata: { role: 'customer' }\n  };\n\n  describe('Validación de datos', () => {\n    it('debe validar datos de usuario correctos', async () => {\n      // Test con datos válidos - debería pasar la validación\n      const result = await syncUserToSupabase(mockClerkUserData, {\n        validateData: true,\n        retryAttempts: 1,\n        logEvents: false\n      });\n\n      // Aunque falle por Supabase, no debería fallar por validación\n      expect(result.error).not.toContain('Datos de usuario inválidos');\n    });\n\n    it('debe rechazar datos de usuario inválidos', async () => {\n      const invalidUserData = {\n        ...mockClerkUserData,\n        email_addresses: []\n      };\n\n      const result = await syncUserToSupabase(invalidUserData, {\n        validateData: true,\n        retryAttempts: 1,\n        logEvents: false\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.action).toBe('error');\n      expect(result.error).toContain('Al menos un email es requerido');\n    });\n\n    it('debe rechazar usuario sin ID', async () => {\n      const invalidUserData = {\n        ...mockClerkUserData,\n        id: ''\n      };\n\n      const result = await syncUserToSupabase(invalidUserData, {\n        validateData: true,\n        retryAttempts: 1,\n        logEvents: false\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.action).toBe('error');\n      expect(result.error).toContain('ID de usuario de Clerk es requerido');\n    });\n\n    it('debe rechazar email inválido', async () => {\n      const invalidUserData = {\n        ...mockClerkUserData,\n        email_addresses: [{\n          email_address: 'invalid-email',\n          id: 'email_123',\n          verification: {\n            status: 'verified',\n            strategy: 'email_code'\n          }\n        }]\n      };\n\n      const result = await syncUserToSupabase(invalidUserData, {\n        validateData: true,\n        retryAttempts: 1,\n        logEvents: false\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.action).toBe('error');\n      expect(result.error).toContain('Email primario inválido');\n    });\n  });\n\n  describe('Configuración de opciones', () => {\n    it('debe usar opciones por defecto', async () => {\n      const result = await syncUserToSupabase(mockClerkUserData);\n\n      // Debería usar las opciones por defecto (retryAttempts: 3, validateData: true, etc.)\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n      expect(typeof result.action).toBe('string');\n    });\n\n    it('debe respetar opciones personalizadas', async () => {\n      const customOptions = {\n        retryAttempts: 1,\n        validateData: false,\n        logEvents: false\n      };\n\n      const result = await syncUserToSupabase(mockClerkUserData, customOptions);\n\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n    });\n  });\n\n  describe('syncUserFromClerk', () => {\n    it('debe manejar usuario no encontrado en Clerk', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockResolvedValue(null)\n        }\n      } as any);\n\n      const result = await syncUserFromClerk('user_not_found');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Usuario no encontrado en Clerk');\n    });\n\n    it('debe manejar errores de Clerk', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUser: jest.fn().mockRejectedValue(new Error('Error de Clerk'))\n        }\n      } as any);\n\n      const result = await syncUserFromClerk('user_error');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Error obteniendo usuario de Clerk');\n    });\n  });\n\n  describe('bulkSyncUsersFromClerk', () => {\n    it('debe manejar errores en sincronización masiva', async () => {\n      mockClerkClient.mockReturnValue({\n        users: {\n          getUserList: jest.fn().mockRejectedValue(new Error('Error de Clerk'))\n        }\n      } as any);\n\n      const result = await bulkSyncUsersFromClerk({\n        batchSize: 1,\n        maxUsers: 1\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.failed).toBe(1);\n      expect(result.results[0].error).toContain('Error en sincronización masiva');\n    });\n\n    it('debe respetar límites de seguridad', async () => {\n      const result = await bulkSyncUsersFromClerk({\n        batchSize: 1000, // Debería limitarse a 20\n        maxUsers: 1000   // Debería limitarse a 100\n      });\n\n      // Debería fallar por error de Clerk, pero los límites deberían aplicarse\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n    });\n  });\n});\n"],"names":["jest","mock","clerkClient","fn","users","getUser","getUserList","supabaseAdmin","from","select","or","single","eq","insert","update","logSecurityEvent","logAdminAction","describe","mockClerkClient","beforeEach","clearAllMocks","mockClerkUserData","id","email_addresses","email_address","verification","status","strategy","first_name","last_name","created_at","Date","now","updated_at","image_url","public_metadata","role","it","result","syncUserToSupabase","validateData","retryAttempts","logEvents","expect","error","not","toContain","invalidUserData","success","toBe","action","toBeDefined","customOptions","mockReturnValue","mockResolvedValue","syncUserFromClerk","mockRejectedValue","Error","bulkSyncUsersFromClerk","batchSize","maxUsers","failed","results"],"mappings":"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"}