{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useFilteredProducts.ts"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { ProductWithCategory, PaginatedResponse } from '@/types/api';\nimport { safeApiResponseJson } from '@/lib/json-utils';\n\n// ===================================\n// TIPOS PARA FILTROS DE PRODUCTOS\n// ===================================\n\nexport interface ProductFilters {\n  // Filtros básicos\n  category?: string;\n  brand?: string;\n  search?: string;\n  priceMin?: number;\n  priceMax?: number;\n  \n  // Filtros avanzados (múltiples valores)\n  categories?: string[];\n  brands?: string[];\n  paintTypes?: string[];\n  \n  // Paginación y ordenamiento\n  page?: number;\n  limit?: number;\n  sortBy?: 'price' | 'name' | 'created_at' | 'brand';\n  sortOrder?: 'asc' | 'desc';\n}\n\n// ===================================\n// HOOK PARA PRODUCTOS FILTRADOS\n// ===================================\n\nexport const useFilteredProducts = (filters: ProductFilters = {}) => {\n  return useQuery({\n    queryKey: ['filtered-products', filters],\n    queryFn: async (): Promise<PaginatedResponse<ProductWithCategory>> => {\n      \n      // Construir URL con parámetros\n      const searchParams = new URLSearchParams();\n      \n      // Filtros básicos\n      if (filters.category) searchParams.set('category', filters.category);\n      if (filters.brand) searchParams.set('brand', filters.brand);\n      if (filters.search) searchParams.set('search', filters.search);\n      if (filters.priceMin !== undefined) searchParams.set('priceMin', filters.priceMin.toString());\n      if (filters.priceMax !== undefined) searchParams.set('priceMax', filters.priceMax.toString());\n      \n      // Filtros avanzados (arrays)\n      if (filters.categories && filters.categories.length > 0) {\n        searchParams.set('categories', filters.categories.join(','));\n      }\n      if (filters.brands && filters.brands.length > 0) {\n        searchParams.set('brands', filters.brands.join(','));\n      }\n      if (filters.paintTypes && filters.paintTypes.length > 0) {\n        searchParams.set('paintTypes', filters.paintTypes.join(','));\n      }\n      \n      // Paginación y ordenamiento\n      if (filters.page) searchParams.set('page', filters.page.toString());\n      if (filters.limit) searchParams.set('limit', filters.limit.toString());\n      if (filters.sortBy) searchParams.set('sortBy', filters.sortBy);\n      if (filters.sortOrder) searchParams.set('sortOrder', filters.sortOrder);\n      \n      const url = `/api/products?${searchParams.toString()}`;\n      \n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\n      \n      if (!result.success) {\n        throw new Error(result.error || 'Error parsing response');\n      }\n\n      return result.data!;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutos\n    gcTime: 10 * 60 * 1000, // 10 minutos\n    retry: 2,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n    enabled: true, // Siempre habilitado, incluso sin filtros\n  });\n};\n\n// ===================================\n// HOOK PARA CONTEO DE PRODUCTOS\n// ===================================\n\nexport const useProductCount = (filters: Omit<ProductFilters, 'page' | 'limit'> = {}) => {\n  return useQuery({\n    queryKey: ['product-count', filters],\n    queryFn: async (): Promise<number> => {\n\n      // Usar los mismos filtros pero con limit=1 para obtener solo el count\n      const countFilters = { ...filters, page: 1, limit: 1 };\n      const searchParams = new URLSearchParams();\n\n      // Aplicar los mismos filtros que useFilteredProducts\n      if (countFilters.category) searchParams.set('category', countFilters.category);\n      if (countFilters.brand) searchParams.set('brand', countFilters.brand);\n      if (countFilters.search) searchParams.set('search', countFilters.search);\n      if (countFilters.priceMin !== undefined) searchParams.set('priceMin', countFilters.priceMin.toString());\n      if (countFilters.priceMax !== undefined) searchParams.set('priceMax', countFilters.priceMax.toString());\n\n      if (countFilters.categories && countFilters.categories.length > 0) {\n        searchParams.set('categories', countFilters.categories.join(','));\n      }\n      if (countFilters.brands && countFilters.brands.length > 0) {\n        searchParams.set('brands', countFilters.brands.join(','));\n      }\n      if (countFilters.paintTypes && countFilters.paintTypes.length > 0) {\n        searchParams.set('paintTypes', countFilters.paintTypes.join(','));\n      }\n\n      searchParams.set('page', '1');\n      searchParams.set('limit', '1');\n\n      const url = `/api/products?${searchParams.toString()}`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\n\n      if (!result.success) {\n        throw new Error(result.error || 'Error parsing response');\n      }\n\n      const count = result.data?.pagination?.total || 0;\n\n      return count;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutos\n    gcTime: 10 * 60 * 1000, // 10 minutos\n    retry: 2,\n    enabled: true,\n  });\n};\n\n// ===================================\n// HOOK PARA CONTEO DINÁMICO POR CATEGORÍA\n// ===================================\n\nexport const useCategoryProductCounts = (\n  categoryIds: string[],\n  baseFilters: Omit<ProductFilters, 'categories' | 'category'> = {}\n) => {\n  return useQuery({\n    queryKey: ['category-product-counts', categoryIds, baseFilters],\n    queryFn: async (): Promise<Record<string, number>> => {\n      const counts: Record<string, number> = {};\n\n      // Obtener conteo para cada categoría individualmente\n      const promises = categoryIds.map(async (categoryId) => {\n        const filters = { ...baseFilters, categories: [categoryId] };\n        const searchParams = new URLSearchParams();\n\n        // IMPORTANTE: Aplicar filtro de categoría PRIMERO para evitar conflictos de parámetros\n        searchParams.set('categories', categoryId);\n\n        // Aplicar filtros base\n        if (filters.brand) searchParams.set('brand', filters.brand);\n        if (filters.search) searchParams.set('search', filters.search);\n        if (filters.priceMin !== undefined) searchParams.set('priceMin', filters.priceMin.toString());\n        if (filters.priceMax !== undefined) searchParams.set('priceMax', filters.priceMax.toString());\n        if (filters.brands && filters.brands.length > 0) {\n          searchParams.set('brands', filters.brands.join(','));\n        }\n        if (filters.paintTypes && filters.paintTypes.length > 0) {\n          searchParams.set('paintTypes', filters.paintTypes.join(','));\n        }\n\n        // Aplicar paginación al final\n        searchParams.set('limit', '1');\n        searchParams.set('page', '1');\n\n        const url = `/api/products?${searchParams.toString()}`;\n\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          return { categoryId, count: 0 };\n        }\n\n        const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\n\n        if (!result.success) {\n          return { categoryId, count: 0 };\n        }\n\n        const count = result.data?.pagination?.total || 0;\n        return { categoryId, count };\n      });\n\n      const results = await Promise.all(promises);\n\n      results.forEach(({ categoryId, count }) => {\n        counts[categoryId] = count;\n      });\n\n      return counts;\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutos (más frecuente para conteos dinámicos)\n    gcTime: 5 * 60 * 1000, // 5 minutos\n    retry: 1,\n    enabled: categoryIds.length > 0,\n  });\n};\n\n// ===================================\n// UTILIDADES\n// ===================================\n\nexport const getActiveFiltersCount = (filters: ProductFilters): number => {\n  let count = 0;\n  \n  if (filters.categories && filters.categories.length > 0) count += filters.categories.length;\n  if (filters.brands && filters.brands.length > 0) count += filters.brands.length;\n  if (filters.paintTypes && filters.paintTypes.length > 0) count += filters.paintTypes.length;\n  if (filters.priceMin !== undefined || filters.priceMax !== undefined) count += 1;\n  if (filters.search) count += 1;\n  \n  return count;\n};\n\nexport const hasActiveFilters = (filters: ProductFilters): boolean => {\n  return getActiveFiltersCount(filters) > 0;\n};\n"],"names":["getActiveFiltersCount","hasActiveFilters","useCategoryProductCounts","useFilteredProducts","useProductCount","filters","useQuery","queryKey","queryFn","searchParams","URLSearchParams","category","set","brand","search","priceMin","undefined","toString","priceMax","categories","length","join","brands","paintTypes","page","limit","sortBy","sortOrder","url","response","fetch","ok","Error","status","statusText","result","safeApiResponseJson","success","error","data","staleTime","gcTime","retry","retryDelay","attemptIndex","Math","min","enabled","countFilters","count","pagination","total","categoryIds","baseFilters","counts","promises","map","categoryId","results","Promise","all","forEach"],"mappings":"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"}