4881bfeffa7502312737802b67b26361
// ðŸ§ª Enterprise Unit Tests - Individual Product API
"use strict";
// Mock dependencies
jest.mock('@/lib/auth/admin-auth', ()=>({
        checkCRUDPermissions: jest.fn()
    }));
jest.mock('@supabase/supabase-js', ()=>({
        createClient: jest.fn(()=>({
                from: jest.fn(()=>({
                        select: jest.fn(()=>({
                                eq: jest.fn(()=>({
                                        single: jest.fn()
                                    }))
                            })),
                        update: jest.fn(()=>({
                                eq: jest.fn(()=>({
                                        select: jest.fn(()=>({
                                                single: jest.fn()
                                            }))
                                    }))
                            })),
                        delete: jest.fn(()=>({
                                eq: jest.fn()
                            }))
                    }))
            }))
    }));
// Mock middleware
jest.mock('@/lib/api/middleware-composer', ()=>({
        composeMiddlewares: jest.fn((...middlewares)=>(handler)=>handler)
    }));
jest.mock('@/lib/api/error-handler', ()=>({
        withErrorHandler: jest.fn((handler)=>handler),
        ApiError: class ApiError extends Error {
            constructor(message, statusCode = 500){
                super(message), this.statusCode = statusCode;
            }
        },
        NotFoundError: jest.fn((resource)=>new Error(`${resource} no encontrado`)),
        ValidationError: jest.fn((message)=>new Error(message))
    }));
jest.mock('@/lib/api/api-logger', ()=>({
        withApiLogging: jest.fn((handler)=>handler),
        logAdminAction: jest.fn()
    }));
jest.mock('@/lib/auth/api-auth-middleware', ()=>({
        withAdminAuth: jest.fn(()=>(handler)=>handler)
    }));
jest.mock('@/lib/validation/admin-schemas', ()=>({
        withValidation: jest.fn(()=>(handler)=>handler)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../route");
describe('/api/admin/products/[id] - Enterprise API Tests', ()=>{
    let mockSupabase;
    let mockRequest;
    beforeEach(()=>{
        jest.clearAllMocks();
        mockSupabase = {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    select: jest.fn(()=>({
                                            single: jest.fn()
                                        }))
                                }))
                        })),
                    delete: jest.fn(()=>({
                            eq: jest.fn()
                        }))
                }))
        };
        mockRequest = {
            supabase: mockSupabase,
            user: {
                id: 'test-user-id'
            },
            validatedData: {}
        };
    });
    describe('GET /api/admin/products/[id]', ()=>{
        it('should return product successfully', async ()=>{
            const mockProduct = {
                id: 'test-product-id',
                name: 'Test Product',
                price: 100,
                stock: 10,
                categories: {
                    name: 'Test Category'
                }
            };
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: mockProduct,
                error: null
            });
            const response = await (0, _route.GET)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            });
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.data.name).toBe('Test Product');
            expect(responseData.data.category_name).toBe('Test Category');
        });
        it('should handle product not found', async ()=>{
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Not found'
                }
            });
            await expect((0, _route.GET)(mockRequest, {
                params: {
                    id: 'non-existent-id'
                }
            })).rejects.toThrow('Producto no encontrado');
        });
        it('should validate product ID format', async ()=>{
            await expect((0, _route.GET)(mockRequest, {
                params: {
                    id: 'invalid-uuid'
                }
            })).rejects.toThrow('ID de producto invÃ¡lido');
        });
    });
    describe('PUT /api/admin/products/[id]', ()=>{
        beforeEach(()=>{
            mockRequest.validatedData = {
                name: 'Updated Product',
                price: 150,
                stock: 20
            };
            // Mock existing product check
            mockSupabase.from().select().eq().single.mockResolvedValueOnce({
                data: {
                    id: 'test-product-id',
                    name: 'Original Product'
                },
                error: null
            }).mockResolvedValueOnce({
                data: {
                    id: 'category-id'
                },
                error: null
            });
        });
        it('should update product successfully', async ()=>{
            const mockUpdatedProduct = {
                id: 'test-product-id',
                name: 'Updated Product',
                price: 150,
                stock: 20,
                categories: {
                    name: 'Test Category'
                }
            };
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: mockUpdatedProduct,
                error: null
            });
            const response = await (0, _route.PUT)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            });
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.data.name).toBe('Updated Product');
            expect(responseData.message).toBe('Producto actualizado exitosamente');
        });
        it('should generate slug when name is updated', async ()=>{
            mockRequest.validatedData.name = 'New Product Name!';
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    slug: 'new-product-name'
                },
                error: null
            });
            await (0, _route.PUT)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            });
            expect(mockSupabase.from().update).toHaveBeenCalledWith(expect.objectContaining({
                slug: 'new-product-name'
            }));
        });
        it('should validate category exists when updating category_id', async ()=>{
            mockRequest.validatedData.category_id = 'invalid-category-id';
            mockSupabase.from().select().eq().single.mockResolvedValueOnce({
                data: {
                    id: 'test-product-id'
                },
                error: null
            }).mockResolvedValueOnce({
                data: null,
                error: {
                    message: 'Not found'
                }
            });
            await expect((0, _route.PUT)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow('CategorÃ­a no encontrada');
        });
        it('should handle database update errors', async ()=>{
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Database error'
                }
            });
            await expect((0, _route.PUT)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow('Error al actualizar producto');
        });
    });
    describe('DELETE /api/admin/products/[id]', ()=>{
        beforeEach(()=>{
            // Mock existing product check
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    name: 'Test Product'
                },
                error: null
            });
        });
        it('should perform soft delete when product has orders', async ()=>{
            // Mock order items check - product has orders
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [
                    {
                        id: 'order-item-id'
                    }
                ],
                error: null
            });
            // Mock soft delete update
            mockSupabase.from().update().eq.mockResolvedValue({
                error: null
            });
            const response = await (0, _route.DELETE)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            });
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.soft_delete).toBe(true);
            expect(responseData.message).toContain('marcado como inactivo');
        });
        it('should perform hard delete when product has no orders', async ()=>{
            // Mock order items check - no orders
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [],
                error: null
            });
            // Mock hard delete
            mockSupabase.from().delete().eq.mockResolvedValue({
                error: null
            });
            const response = await (0, _route.DELETE)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            });
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.hard_delete).toBe(true);
            expect(responseData.message).toBe('Producto eliminado exitosamente');
        });
        it('should handle delete errors gracefully', async ()=>{
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [],
                error: null
            });
            mockSupabase.from().delete().eq.mockResolvedValue({
                error: {
                    message: 'Delete failed'
                }
            });
            await expect((0, _route.DELETE)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow('Error al eliminar producto');
        });
    });
    describe('Error Handling', ()=>{
        it('should handle invalid UUID format', async ()=>{
            await expect((0, _route.GET)(mockRequest, {
                params: {
                    id: 'not-a-uuid'
                }
            })).rejects.toThrow('ID de producto invÃ¡lido');
        });
        it('should handle missing product ID', async ()=>{
            await expect((0, _route.GET)(mockRequest, {
                params: {
                    id: ''
                }
            })).rejects.toThrow('ID de producto invÃ¡lido');
        });
        it('should handle database connection errors', async ()=>{
            mockSupabase.from().select().eq().single.mockRejectedValue(new Error('Database connection failed'));
            await expect((0, _route.GET)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            })).rejects.toThrow('Database connection failed');
        });
    });
    describe('Audit Logging', ()=>{
        it('should log update actions', async ()=>{
            const { logAdminAction } = require('@/lib/api/api-logger');
            mockSupabase.from().select().eq().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    name: 'Original'
                },
                error: null
            });
            mockSupabase.from().update().eq().select().single.mockResolvedValue({
                data: {
                    id: 'test-product-id',
                    name: 'Updated'
                },
                error: null
            });
            await (0, _route.PUT)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            });
            expect(logAdminAction).toHaveBeenCalledWith('test-user-id', 'UPDATE', 'product', 'test-product-id', expect.any(Object), expect.any(Object));
        });
        it('should log delete actions', async ()=>{
            const { logAdminAction } = require('@/lib/api/api-logger');
            mockSupabase.from().select().eq().limit.mockResolvedValue({
                data: [],
                error: null
            });
            mockSupabase.from().delete().eq.mockResolvedValue({
                error: null
            });
            await (0, _route.DELETE)(mockRequest, {
                params: {
                    id: 'test-product-id'
                }
            });
            expect(logAdminAction).toHaveBeenCalledWith('test-user-id', 'DELETE', 'product', 'test-product-id', expect.any(Object), null);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,