{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\__tests__\\route.test.ts"],"sourcesContent":["// ðŸ§ª Enterprise Unit Tests - Individual Product API\n\nimport { NextRequest } from 'next/server';\nimport { GET, PUT, DELETE } from '../route';\nimport { createMocks } from 'node-mocks-http';\n\n// Mock dependencies\njest.mock('@/lib/auth/admin-auth', () => ({\n  checkCRUDPermissions: jest.fn(),\n}));\n\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => ({\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n        })),\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          select: jest.fn(() => ({\n            single: jest.fn(),\n          })),\n        })),\n      })),\n      delete: jest.fn(() => ({\n        eq: jest.fn(),\n      })),\n    })),\n  })),\n}));\n\n// Mock middleware\njest.mock('@/lib/api/middleware-composer', () => ({\n  composeMiddlewares: jest.fn((...middlewares) => (handler) => handler),\n}));\n\njest.mock('@/lib/api/error-handler', () => ({\n  withErrorHandler: jest.fn((handler) => handler),\n  ApiError: class ApiError extends Error {\n    constructor(message: string, public statusCode: number = 500) {\n      super(message);\n    }\n  },\n  NotFoundError: jest.fn((resource) => new Error(`${resource} no encontrado`)),\n  ValidationError: jest.fn((message) => new Error(message)),\n}));\n\njest.mock('@/lib/api/api-logger', () => ({\n  withApiLogging: jest.fn((handler) => handler),\n  logAdminAction: jest.fn(),\n}));\n\njest.mock('@/lib/auth/api-auth-middleware', () => ({\n  withAdminAuth: jest.fn(() => (handler) => handler),\n}));\n\njest.mock('@/lib/validation/admin-schemas', () => ({\n  withValidation: jest.fn(() => (handler) => handler),\n}));\n\ndescribe('/api/admin/products/[id] - Enterprise API Tests', () => {\n  let mockSupabase: any;\n  let mockRequest: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockSupabase = {\n      from: jest.fn(() => ({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(),\n          })),\n        })),\n        update: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            select: jest.fn(() => ({\n              single: jest.fn(),\n            })),\n          })),\n        })),\n        delete: jest.fn(() => ({\n          eq: jest.fn(),\n        })),\n      })),\n    };\n\n    mockRequest = {\n      supabase: mockSupabase,\n      user: { id: 'test-user-id' },\n      validatedData: {},\n    } as any;\n  });\n\n  describe('GET /api/admin/products/[id]', () => {\n    it('should return product successfully', async () => {\n      const mockProduct = {\n        id: 'test-product-id',\n        name: 'Test Product',\n        price: 100,\n        stock: 10,\n        categories: { name: 'Test Category' },\n      };\n\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: mockProduct,\n        error: null,\n      });\n\n      const response = await GET(mockRequest, { params: { id: 'test-product-id' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data.name).toBe('Test Product');\n      expect(responseData.data.category_name).toBe('Test Category');\n    });\n\n    it('should handle product not found', async () => {\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: null,\n        error: { message: 'Not found' },\n      });\n\n      await expect(\n        GET(mockRequest, { params: { id: 'non-existent-id' } })\n      ).rejects.toThrow('Producto no encontrado');\n    });\n\n    it('should validate product ID format', async () => {\n      await expect(\n        GET(mockRequest, { params: { id: 'invalid-uuid' } })\n      ).rejects.toThrow('ID de producto invÃ¡lido');\n    });\n  });\n\n  describe('PUT /api/admin/products/[id]', () => {\n    beforeEach(() => {\n      mockRequest.validatedData = {\n        name: 'Updated Product',\n        price: 150,\n        stock: 20,\n      };\n\n      // Mock existing product check\n      mockSupabase.from().select().eq().single\n        .mockResolvedValueOnce({\n          data: { id: 'test-product-id', name: 'Original Product' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: { id: 'category-id' },\n          error: null,\n        });\n    });\n\n    it('should update product successfully', async () => {\n      const mockUpdatedProduct = {\n        id: 'test-product-id',\n        name: 'Updated Product',\n        price: 150,\n        stock: 20,\n        categories: { name: 'Test Category' },\n      };\n\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: mockUpdatedProduct,\n        error: null,\n      });\n\n      const response = await PUT(mockRequest, { params: { id: 'test-product-id' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data.name).toBe('Updated Product');\n      expect(responseData.message).toBe('Producto actualizado exitosamente');\n    });\n\n    it('should generate slug when name is updated', async () => {\n      mockRequest.validatedData.name = 'New Product Name!';\n\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { id: 'test-product-id', slug: 'new-product-name' },\n        error: null,\n      });\n\n      await PUT(mockRequest, { params: { id: 'test-product-id' } });\n\n      expect(mockSupabase.from().update).toHaveBeenCalledWith(\n        expect.objectContaining({\n          slug: 'new-product-name',\n        })\n      );\n    });\n\n    it('should validate category exists when updating category_id', async () => {\n      mockRequest.validatedData.category_id = 'invalid-category-id';\n\n      mockSupabase.from().select().eq().single\n        .mockResolvedValueOnce({\n          data: { id: 'test-product-id' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: null,\n          error: { message: 'Not found' },\n        });\n\n      await expect(\n        PUT(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow('CategorÃ­a no encontrada');\n    });\n\n    it('should handle database update errors', async () => {\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      await expect(\n        PUT(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow('Error al actualizar producto');\n    });\n  });\n\n  describe('DELETE /api/admin/products/[id]', () => {\n    beforeEach(() => {\n      // Mock existing product check\n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: { id: 'test-product-id', name: 'Test Product' },\n        error: null,\n      });\n    });\n\n    it('should perform soft delete when product has orders', async () => {\n      // Mock order items check - product has orders\n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [{ id: 'order-item-id' }],\n        error: null,\n      });\n\n      // Mock soft delete update\n      mockSupabase.from().update().eq.mockResolvedValue({\n        error: null,\n      });\n\n      const response = await DELETE(mockRequest, { params: { id: 'test-product-id' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.soft_delete).toBe(true);\n      expect(responseData.message).toContain('marcado como inactivo');\n    });\n\n    it('should perform hard delete when product has no orders', async () => {\n      // Mock order items check - no orders\n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      // Mock hard delete\n      mockSupabase.from().delete().eq.mockResolvedValue({\n        error: null,\n      });\n\n      const response = await DELETE(mockRequest, { params: { id: 'test-product-id' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.hard_delete).toBe(true);\n      expect(responseData.message).toBe('Producto eliminado exitosamente');\n    });\n\n    it('should handle delete errors gracefully', async () => {\n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      mockSupabase.from().delete().eq.mockResolvedValue({\n        error: { message: 'Delete failed' },\n      });\n\n      await expect(\n        DELETE(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow('Error al eliminar producto');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid UUID format', async () => {\n      await expect(\n        GET(mockRequest, { params: { id: 'not-a-uuid' } })\n      ).rejects.toThrow('ID de producto invÃ¡lido');\n    });\n\n    it('should handle missing product ID', async () => {\n      await expect(\n        GET(mockRequest, { params: { id: '' } })\n      ).rejects.toThrow('ID de producto invÃ¡lido');\n    });\n\n    it('should handle database connection errors', async () => {\n      mockSupabase.from().select().eq().single.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      await expect(\n        GET(mockRequest, { params: { id: 'test-product-id' } })\n      ).rejects.toThrow('Database connection failed');\n    });\n  });\n\n  describe('Audit Logging', () => {\n    it('should log update actions', async () => {\n      const { logAdminAction } = require('@/lib/api/api-logger');\n      \n      mockSupabase.from().select().eq().single.mockResolvedValue({\n        data: { id: 'test-product-id', name: 'Original' },\n        error: null,\n      });\n\n      mockSupabase.from().update().eq().select().single.mockResolvedValue({\n        data: { id: 'test-product-id', name: 'Updated' },\n        error: null,\n      });\n\n      await PUT(mockRequest, { params: { id: 'test-product-id' } });\n\n      expect(logAdminAction).toHaveBeenCalledWith(\n        'test-user-id',\n        'UPDATE',\n        'product',\n        'test-product-id',\n        expect.any(Object),\n        expect.any(Object)\n      );\n    });\n\n    it('should log delete actions', async () => {\n      const { logAdminAction } = require('@/lib/api/api-logger');\n      \n      mockSupabase.from().select().eq().limit.mockResolvedValue({\n        data: [],\n        error: null,\n      });\n\n      mockSupabase.from().delete().eq.mockResolvedValue({\n        error: null,\n      });\n\n      await DELETE(mockRequest, { params: { id: 'test-product-id' } });\n\n      expect(logAdminAction).toHaveBeenCalledWith(\n        'test-user-id',\n        'DELETE',\n        'product',\n        'test-product-id',\n        expect.any(Object),\n        null\n      );\n    });\n  });\n});\n"],"names":["jest","mock","checkCRUDPermissions","fn","createClient","from","select","eq","single","update","delete","composeMiddlewares","middlewares","handler","withErrorHandler","ApiError","Error","constructor","message","statusCode","NotFoundError","resource","ValidationError","withApiLogging","logAdminAction","withAdminAuth","withValidation","describe","mockSupabase","mockRequest","beforeEach","clearAllMocks","supabase","user","id","validatedData","it","mockProduct","name","price","stock","categories","mockResolvedValue","data","error","response","GET","params","responseData","json","expect","status","toBe","success","category_name","rejects","toThrow","mockResolvedValueOnce","mockUpdatedProduct","PUT","slug","toHaveBeenCalledWith","objectContaining","category_id","limit","DELETE","soft_delete","toContain","hard_delete","mockRejectedValue","require","any","Object"],"mappings":"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"}