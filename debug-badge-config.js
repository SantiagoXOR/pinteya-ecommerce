// ============================================================================
// DEBUG SCRIPT: CONFIGURACI√ìN DE BADGES
// ============================================================================
// Este script debuggea espec√≠ficamente la configuraci√≥n de badges
// para identificar d√≥nde se pierde showColor: true

console.log('üîç INICIANDO DEBUG DE CONFIGURACI√ìN DE BADGES');
console.log('='.repeat(60));

// Funci√≥n para interceptar y debuggear la configuraci√≥n de badges
function debugBadgeConfig() {
  // Buscar todos los elementos de producto en la p√°gina
  const productElements = document.querySelectorAll('[data-testid*="product"], .product-card, [class*="product"]');
  
  console.log(`üì¶ Productos encontrados en la p√°gina: ${productElements.length}`);
  
  if (productElements.length === 0) {
    console.warn('‚ùå No se encontraron productos en la p√°gina');
    console.log('üí° Aseg√∫rate de que la p√°gina tenga productos cargados');
    return;
  }
  
  // Interceptar console.log para capturar los logs de debug de badges
  const originalLog = console.log;
  const badgeDebugLogs = [];
  
  console.log = function(...args) {
    const message = args.join(' ');
    
    // Capturar logs espec√≠ficos de badges
    if (message.includes('[ProductCardCommercial] Debug badges') || 
        message.includes('badgeConfig:') ||
        message.includes('showColor:') ||
        message.includes('extractedInfo:')) {
      badgeDebugLogs.push(message);
    }
    
    originalLog.apply(console, args);
  };
  
  // Simular un re-render forzando un cambio en el DOM
  console.log('üîÑ Forzando re-render para capturar logs...');
  
  // Trigger re-render scrolling
  window.scrollBy(0, 1);
  window.scrollBy(0, -1);
  
  // Esperar un momento para que se ejecuten los logs
  setTimeout(() => {
    console.log = originalLog; // Restaurar console.log original
    
    console.log('üìã LOGS DE DEBUG CAPTURADOS:');
    console.log('-'.repeat(40));
    
    if (badgeDebugLogs.length === 0) {
      console.warn('‚ùå No se capturaron logs de debug de badges');
      console.log('üí° Los productos podr√≠an no estar renderiz√°ndose correctamente');
    } else {
      badgeDebugLogs.forEach((log, index) => {
        console.log(`${index + 1}. ${log}`);
      });
    }
    
    // An√°lisis espec√≠fico de la configuraci√≥n
    console.log('\nüîç AN√ÅLISIS DE CONFIGURACI√ìN:');
    console.log('-'.repeat(40));
    
    // Buscar en el c√≥digo fuente si hay alguna sobrescritura
    const scripts = document.querySelectorAll('script');
    let foundBadgeConfig = false;
    
    scripts.forEach(script => {
      if (script.textContent && script.textContent.includes('badgeConfig')) {
        console.log('üìú Encontrado badgeConfig en script:', script.src || 'inline');
        foundBadgeConfig = true;
      }
    });
    
    if (!foundBadgeConfig) {
      console.log('‚ùå No se encontr√≥ badgeConfig en scripts del DOM');
    }
    
    console.log('\n‚úÖ DEBUG COMPLETADO');
    console.log('üí° Revisa los logs anteriores para identificar d√≥nde showColor cambia a false');
    
  }, 2000);
}

// Funci√≥n para verificar la configuraci√≥n actual en ProductItem
function checkProductItemConfig() {
  console.log('\nüîç VERIFICANDO CONFIGURACI√ìN EN PRODUCTITEM:');
  console.log('-'.repeat(50));
  
  // Simular la configuraci√≥n que deber√≠a tener ProductItem
  const expectedConfig = {
    showCapacity: true,
    showColor: true, // ‚Üê Este deber√≠a ser true
    showFinish: false,
    showMaterial: true,
    showGrit: true,
    showDimensions: true,
    showWeight: false,
    showBrand: false,
    maxBadges: 3
  };
  
  console.log('üìã Configuraci√≥n esperada en ProductItem:', expectedConfig);
  
  // Verificar si hay alguna sobrescritura global
  if (window.badgeConfig) {
    console.log('üåê Configuraci√≥n global encontrada:', window.badgeConfig);
  } else {
    console.log('‚úÖ No hay configuraci√≥n global de badges');
  }
}

// Funci√≥n principal
function runBadgeConfigDebug() {
  console.log('üöÄ Ejecutando debug completo de configuraci√≥n de badges...\n');
  
  checkProductItemConfig();
  debugBadgeConfig();
}

// Ejecutar el debug
runBadgeConfigDebug();

// Mensaje final
console.log('\nüìù INSTRUCCIONES:');
console.log('1. Revisa los logs anteriores');
console.log('2. Busca d√≥nde showColor cambia de true a false');
console.log('3. Si no ves productos, recarga la p√°gina y ejecuta el script nuevamente');
console.log('4. Comparte los resultados para continuar con el fix');