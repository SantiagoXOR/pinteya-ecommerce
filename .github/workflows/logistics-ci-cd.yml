# =====================================================
# CI/CD: LOGISTICS MODULE PIPELINE
# Descripción: Pipeline completo para testing, build y deploy del módulo de logística
# Basado en: GitHub Actions + Docker + Vercel + Performance Testing
# =====================================================

name: 🚚 Logistics Module CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/components/admin/logistics/**'
      - 'src/hooks/admin/useLogistics*'
      - 'src/lib/websockets/**'
      - 'src/lib/integrations/**'
      - '__tests__/logistics/**'
      - 'docker/logistics/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/components/admin/logistics/**'
      - 'src/hooks/admin/useLogistics*'
      - 'src/lib/websockets/**'
      - 'src/lib/integrations/**'
      - '__tests__/logistics/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/logistics

# =====================================================
# JOBS DE CI/CD
# =====================================================
jobs:
  # =====================================================
  # JOB 1: TESTING SUITE
  # =====================================================
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint logistics module
        run: npm run lint:logistics

      - name: 🧪 Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:logistics:unit -- --coverage --watchAll=false

      - name: 🔗 Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          npm run test:logistics:integration -- --coverage --watchAll=false

      - name: 🎭 Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build:logistics
          npm run test:logistics:e2e

      - name: 📊 Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: logistics-unit
          name: logistics-coverage

      - name: 📈 Performance testing
        if: matrix.test-type == 'e2e'
        run: |
          npm run lighthouse:logistics

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            lighthouse-reports/

  # =====================================================
  # JOB 2: SECURITY SCAN
  # =====================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🛡️ Run security audit
        run: npm audit --audit-level=high

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🔐 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # =====================================================
  # JOB 3: BUILD & BUNDLE ANALYSIS
  # =====================================================
  build:
    name: 🏗️ Build & Analysis
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build logistics module
        run: |
          npm run build:logistics
        env:
          ANALYZE: true

      - name: 📊 Bundle size analysis
        run: |
          npm run analyze:logistics

      - name: 📈 Check bundle size limits
        run: |
          npm run size-limit:logistics

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            bundle-analysis.html
            size-limit-report.json

  # =====================================================
  # JOB 4: DOCKER BUILD
  # =====================================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/logistics/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # =====================================================
  # JOB 5: STAGING DEPLOYMENT
  # =====================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🧪 Run staging smoke tests
        run: |
          npm run test:staging:logistics
        env:
          STAGING_URL: ${{ steps.vercel.outputs.preview-url }}

      - name: 📊 Lighthouse CI on staging
        run: |
          npm run lighthouse:staging -- --url=${{ steps.vercel.outputs.preview-url }}

  # =====================================================
  # JOB 6: PRODUCTION DEPLOYMENT
  # =====================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🧪 Run production smoke tests
        run: |
          npm run test:production:logistics
        env:
          PRODUCTION_URL: https://pinteya.com

      - name: 📊 Lighthouse CI on production
        run: |
          npm run lighthouse:production

      - name: 📈 Update performance metrics
        run: |
          npm run metrics:update -- --environment=production

      - name: 🔔 Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚚 Logistics module deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # =====================================================
  # JOB 7: PERFORMANCE MONITORING
  # =====================================================
  performance:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Run comprehensive performance tests
        run: |
          npm run performance:logistics -- --url=https://pinteya.com

      - name: 📈 Generate performance report
        run: |
          npm run performance:report:logistics

      - name: 📋 Upload performance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: |
            performance-reports/
            lighthouse-reports/

      - name: 🚨 Performance regression check
        run: |
          npm run performance:regression:check
