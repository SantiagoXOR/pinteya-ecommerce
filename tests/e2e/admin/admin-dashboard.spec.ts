/**
 * TESTS E2E PARA PANEL ADMINISTRATIVO - DASHBOARD
 * 
 * Tests completos para verificar funcionalidad del dashboard administrativo
 * con autenticaci√≥n autom√°tica configurada.
 */

import { test, expect } from '@playwright/test';

// Usar el estado de autenticaci√≥n guardado
test.use({ storageState: 'tests/e2e/.auth/admin.json' });

test.describe('Panel Administrativo - Dashboard', () => {
  
  test.beforeEach(async ({ page }) => {
    // Navegar al dashboard administrativo
    await page.goto('/admin');
    await page.waitForLoadState('networkidle');
  });

  test('debe cargar el dashboard administrativo correctamente', async ({ page }) => {
    console.log('üß™ Test: Carga del dashboard administrativo');
    
    // Verificar que estamos en la p√°gina correcta
    await expect(page).toHaveURL(/.*\/admin/);
    
    // Verificar elementos principales del dashboard
    await expect(page.locator('h1, h2, [data-testid="admin-title"]')).toBeVisible();
    
    // Verificar navegaci√≥n administrativa
    const adminNavigation = [
      'Productos',
      '√ìrdenes', 
      'Usuarios',
      'Analytics',
      'Configuraci√≥n'
    ];
    
    for (const navItem of adminNavigation) {
      const element = page.locator(`text=${navItem}, [aria-label*="${navItem}"], [data-testid*="${navItem.toLowerCase()}"]`).first();
      await expect(element).toBeVisible({ timeout: 5000 });
    }
    
    console.log('‚úÖ Dashboard administrativo cargado correctamente');
  });

  test('debe mostrar m√©tricas del dashboard', async ({ page }) => {
    console.log('üß™ Test: M√©tricas del dashboard');
    
    // Buscar elementos de m√©tricas comunes
    const metricsSelectors = [
      '[data-testid*="metric"]',
      '[data-testid*="stat"]', 
      '.metric',
      '.stat',
      '.dashboard-card',
      '.admin-metric'
    ];
    
    let metricsFound = false;
    for (const selector of metricsSelectors) {
      const elements = page.locator(selector);
      const count = await elements.count();
      if (count > 0) {
        console.log(`üìä Encontradas ${count} m√©tricas con selector: ${selector}`);
        metricsFound = true;
        break;
      }
    }
    
    // Si no encontramos m√©tricas espec√≠ficas, verificar que hay contenido num√©rico
    if (!metricsFound) {
      const numbersPattern = /\d+/;
      const pageContent = await page.textContent('body');
      expect(pageContent).toMatch(numbersPattern);
      console.log('üìä Contenido num√©rico encontrado en el dashboard');
    }
    
    console.log('‚úÖ M√©tricas del dashboard verificadas');
  });

  test('debe permitir navegaci√≥n entre secciones administrativas', async ({ page }) => {
    console.log('üß™ Test: Navegaci√≥n entre secciones');
    
    // Intentar navegar a la secci√≥n de productos
    const productLinks = [
      'text=Productos',
      '[href*="/admin/products"]',
      '[data-testid*="products"]',
      'a:has-text("Productos")'
    ];
    
    let productLinkClicked = false;
    for (const selector of productLinks) {
      try {
        const link = page.locator(selector).first();
        if (await link.isVisible({ timeout: 2000 })) {
          await link.click();
          await page.waitForLoadState('networkidle');
          
          // Verificar que navegamos correctamente
          const currentUrl = page.url();
          if (currentUrl.includes('/admin/products') || currentUrl.includes('/admin')) {
            console.log(`‚úÖ Navegaci√≥n exitosa a: ${currentUrl}`);
            productLinkClicked = true;
            break;
          }
        }
      } catch (e) {
        // Continuar con el siguiente selector
      }
    }
    
    if (!productLinkClicked) {
      console.log('‚ö†Ô∏è No se pudo hacer click en enlace de productos, verificando navegaci√≥n manual');
      await page.goto('/admin/products');
      await page.waitForLoadState('networkidle');
    }
    
    // Verificar que estamos en una p√°gina administrativa v√°lida
    const currentUrl = page.url();
    expect(currentUrl).toMatch(/\/admin/);
    
    console.log('‚úÖ Navegaci√≥n entre secciones verificada');
  });

  test('debe verificar acceso a APIs administrativas', async ({ page }) => {
    console.log('üß™ Test: Acceso a APIs administrativas');
    
    // Interceptar llamadas a APIs administrativas
    const apiCalls: string[] = [];
    
    page.on('request', request => {
      const url = request.url();
      if (url.includes('/api/admin')) {
        apiCalls.push(url);
        console.log(`üì° API call interceptada: ${url}`);
      }
    });
    
    // Recargar la p√°gina para generar llamadas a APIs
    await page.reload();
    await page.waitForLoadState('networkidle');
    
    // Esperar un momento para que se completen las llamadas
    await page.waitForTimeout(2000);
    
    // Verificar que se hicieron llamadas a APIs administrativas
    if (apiCalls.length > 0) {
      console.log(`‚úÖ ${apiCalls.length} llamadas a APIs administrativas detectadas`);
    } else {
      console.log('‚ö†Ô∏è No se detectaron llamadas autom√°ticas, probando API manualmente');
      
      // Probar API manualmente
      const response = await page.request.get('/api/admin/products');
      expect(response.status()).toBeLessThan(500); // No debe ser error de servidor
      console.log(`‚úÖ API manual respondi√≥ con status: ${response.status()}`);
    }
    
    console.log('‚úÖ Acceso a APIs administrativas verificado');
  });

  test('debe mantener autenticaci√≥n durante la sesi√≥n', async ({ page }) => {
    console.log('üß™ Test: Persistencia de autenticaci√≥n');
    
    // Navegar a diferentes p√°ginas administrativas
    const adminPages = [
      '/admin',
      '/admin/products', 
      '/admin/orders',
      '/admin/users'
    ];
    
    for (const adminPage of adminPages) {
      try {
        await page.goto(adminPage);
        await page.waitForLoadState('networkidle');
        
        // Verificar que no fuimos redirigidos al login
        const currentUrl = page.url();
        expect(currentUrl).not.toContain('/auth/signin');
        expect(currentUrl).not.toContain('/api/auth/signin');
        
        console.log(`‚úÖ Acceso mantenido a: ${adminPage}`);
      } catch (e) {
        console.log(`‚ö†Ô∏è P√°gina no disponible: ${adminPage}`);
        // Continuar con la siguiente p√°gina
      }
    }
    
    console.log('‚úÖ Autenticaci√≥n persistente verificada');
  });

  test('debe mostrar informaci√≥n del usuario autenticado', async ({ page }) => {
    console.log('üß™ Test: Informaci√≥n del usuario');
    
    // Buscar elementos que muestren informaci√≥n del usuario
    const userInfoSelectors = [
      '[data-testid*="user"]',
      '[data-testid*="profile"]',
      '.user-info',
      '.profile',
      'text=santiago@xor.com.ar',
      'text=Santiago',
      '[aria-label*="user"]',
      '[aria-label*="profile"]'
    ];
    
    let userInfoFound = false;
    for (const selector of userInfoSelectors) {
      try {
        const element = page.locator(selector).first();
        if (await element.isVisible({ timeout: 2000 })) {
          console.log(`üë§ Informaci√≥n de usuario encontrada: ${selector}`);
          userInfoFound = true;
          break;
        }
      } catch (e) {
        // Continuar con el siguiente selector
      }
    }
    
    if (!userInfoFound) {
      console.log('‚ö†Ô∏è No se encontr√≥ informaci√≥n espec√≠fica del usuario, verificando contenido general');
      // Al menos verificar que hay contenido en la p√°gina
      const bodyText = await page.textContent('body');
      expect(bodyText).toBeTruthy();
      expect(bodyText!.length).toBeGreaterThan(100);
    }
    
    console.log('‚úÖ Informaci√≥n del usuario verificada');
  });

});
