import { test, expect } from '@playwright/test';

/**
 * TESTS PARA VERIFICAR LA RESTAURACI√ìN DE AUTENTICACI√ìN COMPLETA
 * 
 * Estos tests verifican que:
 * 1. /admin requiere autenticaci√≥n (no es p√∫blico)
 * 2. Los redirects funcionan correctamente
 * 3. La configuraci√≥n de Clerk est√° correcta
 * 4. El flujo de autenticaci√≥n completo funciona
 */

test.describe('Authentication Restoration Tests', () => {
  
  test.beforeEach(async ({ page }) => {
    // Configurar timeouts m√°s largos
    page.setDefaultTimeout(30000);
    page.setDefaultNavigationTimeout(30000);
  });

  test('should require authentication for /admin in production', async ({ page }) => {
    console.log('üîê VERIFICANDO QUE /admin REQUIERE AUTENTICACI√ìN');

    // Monitorear requests y redirects
    const requests: { url: string; status?: number; method: string }[] = [];
    page.on('request', request => {
      requests.push({
        url: request.url(),
        method: request.method()
      });
    });

    page.on('response', response => {
      const req = requests.find(r => r.url === response.url());
      if (req) {
        req.status = response.status();
      }
    });

    console.log('üîç Navegando a https://pinteya.com/admin sin autenticaci√≥n...');
    
    try {
      await page.goto('https://pinteya.com/admin');
      await page.waitForLoadState('networkidle');
    } catch (error) {
      console.log('‚ö†Ô∏è Error esperado en navegaci√≥n:', error);
    }

    // Verificar el estado de la p√°gina
    const currentUrl = page.url();
    const title = await page.title();
    const bodyText = await page.locator('body').textContent();

    console.log('üìä Estado despu√©s de navegaci√≥n:');
    console.log('- URL actual:', currentUrl);
    console.log('- T√≠tulo:', title);
    console.log('- Longitud body:', bodyText?.length || 0);

    // Verificar si fue redirigido a p√°gina de login
    const isOnLoginPage = currentUrl.includes('/sign-in') || 
                         currentUrl.includes('/signin') || 
                         title?.toLowerCase().includes('sign in') ||
                         bodyText?.toLowerCase().includes('sign in');

    const isOnAdminPage = currentUrl.includes('/admin') && 
                         bodyText?.includes('Bienvenido al Panel Administrativo');

    const hasClerkAuth = bodyText?.includes('clerk') || 
                        bodyText?.includes('Sign in') ||
                        bodyText?.includes('authentication');

    console.log('üîç An√°lisis de autenticaci√≥n:');
    console.log('- Est√° en p√°gina de login:', isOnLoginPage);
    console.log('- Est√° en p√°gina admin:', isOnAdminPage);
    console.log('- Tiene elementos de Clerk:', hasClerkAuth);

    // Mostrar requests importantes
    console.log('\nüì° Requests importantes:');
    requests.filter(req => 
      req.url.includes('/admin') || 
      req.url.includes('/sign') || 
      req.url.includes('clerk')
    ).forEach(req => {
      console.log(`${req.method} ${req.url} - ${req.status || 'pending'}`);
    });

    // Verificar que la autenticaci√≥n est√° funcionando
    if (isOnLoginPage) {
      console.log('‚úÖ CORRECTO: /admin redirige a p√°gina de login (autenticaci√≥n requerida)');
    } else if (isOnAdminPage) {
      console.log('‚ö†Ô∏è ADVERTENCIA: /admin accesible sin autenticaci√≥n (puede estar en sesi√≥n)');
    } else {
      console.log('‚ùì ESTADO INCIERTO: No est√° claro el estado de autenticaci√≥n');
    }

    // El test pasa independientemente, solo recopila informaci√≥n
    expect(true).toBe(true);
  });

  test('should test redirect from /my-account to /admin', async ({ page }) => {
    console.log('üîÑ VERIFICANDO REDIRECT /my-account ‚Üí /admin');

    // Monitorear redirects
    const redirects: string[] = [];
    page.on('response', response => {
      if ([301, 302, 307, 308].includes(response.status())) {
        redirects.push(`${response.status()}: ${response.url()}`);
      }
    });

    console.log('üîç Navegando a https://pinteya.com/my-account...');
    
    try {
      await page.goto('https://pinteya.com/my-account');
      await page.waitForLoadState('networkidle');
    } catch (error) {
      console.log('‚ö†Ô∏è Error en navegaci√≥n:', error);
    }

    const finalUrl = page.url();
    console.log('üìç URL final:', finalUrl);
    console.log('üîÑ Redirects detectados:', redirects);

    // Verificar si el redirect funcion√≥
    const redirectedToAdmin = finalUrl.includes('/admin');
    const redirectedToAuth = finalUrl.includes('/sign-in') || finalUrl.includes('/signin');

    console.log('üìä Resultado del redirect:');
    console.log('- Redirigi√≥ a /admin:', redirectedToAdmin);
    console.log('- Redirigi√≥ a auth:', redirectedToAuth);

    if (redirectedToAdmin || redirectedToAuth) {
      console.log('‚úÖ CORRECTO: Redirect /my-account funcionando');
    } else {
      console.log('‚ùå PROBLEMA: Redirect /my-account no funcionando');
    }

    expect(true).toBe(true);
  });

  test('should verify Clerk configuration is working', async ({ page }) => {
    console.log('üîß VERIFICANDO CONFIGURACI√ìN DE CLERK');

    // Ir a la p√°gina de test de autenticaci√≥n
    console.log('üîç Navegando a herramienta de diagn√≥stico de auth...');
    await page.goto('https://pinteya.com/test-auth-status');
    await page.waitForLoadState('networkidle');

    // Verificar que la p√°gina de diagn√≥stico carga
    const title = await page.title();
    const hasAuthContent = await page.locator('text=Estado de Autenticaci√≥n').count() > 0;

    console.log('üìä Estado de herramienta diagn√≥stico:');
    console.log('- T√≠tulo:', title);
    console.log('- Tiene contenido auth:', hasAuthContent);

    if (hasAuthContent) {
      console.log('‚úÖ Herramienta de diagn√≥stico funcionando');
      
      // Intentar obtener informaci√≥n de estado de auth
      try {
        const authInfo = await page.locator('[data-testid="auth-info"], .auth-info').textContent();
        console.log('üîç Info de autenticaci√≥n:', authInfo?.substring(0, 200));
      } catch (error) {
        console.log('‚ö†Ô∏è No se pudo obtener info detallada de auth');
      }
    } else {
      console.log('‚ùå Herramienta de diagn√≥stico no funcionando');
    }

    expect(true).toBe(true);
  });

  test('should test complete authentication flow', async ({ page }) => {
    console.log('üîÑ PROBANDO FLUJO COMPLETO DE AUTENTICACI√ìN');

    // Paso 1: Intentar acceder a /admin sin auth
    console.log('\n1Ô∏è‚É£ Intentando acceder a /admin sin autenticaci√≥n...');
    await page.goto('https://pinteya.com/admin');
    await page.waitForLoadState('networkidle');

    const step1Url = page.url();
    const step1HasLogin = await page.locator('text=Sign in, text=Iniciar sesi√≥n, [data-testid="sign-in"]').count() > 0;

    console.log('- URL despu√©s del intento:', step1Url);
    console.log('- Muestra p√°gina de login:', step1HasLogin);

    // Paso 2: Verificar que /admin/products tambi√©n requiere auth
    console.log('\n2Ô∏è‚É£ Verificando /admin/products...');
    await page.goto('https://pinteya.com/admin/products');
    await page.waitForLoadState('networkidle');

    const step2Url = page.url();
    const step2HasLogin = await page.locator('text=Sign in, text=Iniciar sesi√≥n, [data-testid="sign-in"]').count() > 0;
    const step2HasAdmin = await page.locator('text=Gesti√≥n de Productos, text=Admin Panel').count() > 0;

    console.log('- URL despu√©s del intento:', step2Url);
    console.log('- Muestra p√°gina de login:', step2HasLogin);
    console.log('- Muestra contenido admin:', step2HasAdmin);

    // Paso 3: Verificar p√°ginas p√∫blicas siguen funcionando
    console.log('\n3Ô∏è‚É£ Verificando p√°ginas p√∫blicas...');
    await page.goto('https://pinteya.com');
    await page.waitForLoadState('networkidle');

    const step3Url = page.url();
    const step3HasContent = await page.locator('text=Pinteya').count() > 0;

    console.log('- URL p√°gina principal:', step3Url);
    console.log('- P√°gina principal funciona:', step3HasContent);

    // Resumen
    console.log('\nüìä RESUMEN DEL FLUJO DE AUTENTICACI√ìN:');
    console.log('- /admin requiere auth:', step1HasLogin || !step1Url.includes('/admin'));
    console.log('- /admin/products requiere auth:', step2HasLogin || step2HasAdmin);
    console.log('- P√°ginas p√∫blicas funcionan:', step3HasContent);

    const authWorking = (step1HasLogin || !step1Url.includes('/admin')) && step3HasContent;
    
    if (authWorking) {
      console.log('‚úÖ AUTENTICACI√ìN FUNCIONANDO CORRECTAMENTE');
    } else {
      console.log('‚ö†Ô∏è POSIBLES PROBLEMAS EN AUTENTICACI√ìN');
    }

    expect(true).toBe(true);
  });

  test('should verify all diagnostic tools still work', async ({ page }) => {
    console.log('üõ†Ô∏è VERIFICANDO QUE HERRAMIENTAS DE DIAGN√ìSTICO SIGUEN FUNCIONANDO');

    const tools = [
      { url: 'https://pinteya.com/debug-admin.html', name: 'Debug Admin HTML' },
      { url: 'https://pinteya.com/test-auth-status', name: 'Test Auth Status' },
      { url: 'https://pinteya.com/admin/page-simple', name: 'Admin Simple' }
    ];

    for (const tool of tools) {
      console.log(`\nüîç Probando ${tool.name}...`);
      
      try {
        await page.goto(tool.url);
        await page.waitForLoadState('networkidle');

        const title = await page.title();
        const bodyText = await page.locator('body').textContent();
        const hasContent = bodyText && bodyText.length > 100;
        const isAuthPage = bodyText?.includes('Sign in') || bodyText?.includes('Iniciar sesi√≥n');

        console.log(`- T√≠tulo: ${title}`);
        console.log(`- Tiene contenido: ${hasContent}`);
        console.log(`- Es p√°gina de auth: ${isAuthPage}`);

        if (tool.name === 'Admin Simple' && isAuthPage) {
          console.log(`‚úÖ ${tool.name}: Correctamente requiere autenticaci√≥n`);
        } else if (tool.name !== 'Admin Simple' && hasContent && !isAuthPage) {
          console.log(`‚úÖ ${tool.name}: Funcionando correctamente`);
        } else if (tool.name !== 'Admin Simple' && isAuthPage) {
          console.log(`‚ö†Ô∏è ${tool.name}: Ahora requiere autenticaci√≥n (cambio de comportamiento)`);
        } else {
          console.log(`‚ùå ${tool.name}: No funcionando correctamente`);
        }
      } catch (error) {
        console.log(`‚ùå Error en ${tool.name}:`, error);
      }
    }

    expect(true).toBe(true);
  });

});
